<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.support.stringcontroller');/** * String Stream Wrapper * * This class allows you to use a PHP string in the same way that * you would normally use a regular stream wrapper * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JStreamString{	/**	 * The current string	 *	 * @var   string	 * @since  12.1	 */	protected $currentString;	/**	 *	 * The path	 *	 * @var   string	 * @since  12.1	 */	protected $path;	/**	 *	 * The mode	 *	 * @var   string	 * @since  12.1	 */	protected $mode;	/**	 *	 * Enter description here ...	 * @var   string	 *	 * @since  12.1	 */	protected $options;	/**	 *	 * Enter description here ...	 * @var   string	 *	 * @since  12.1	 */	protected $openedPath;	/**	 * Current position	 *	 * @var   integer	 * @since  12.1	 */	protected $pos;	/**	 * Length of the string	 *	 * @var   string	 *	 * @since  12.1	 */	protected $len;	/**	 * Statistics for a file	 *	 * @var    array	 * @since  12.1	 *	 * @see    http://us.php.net/manual/en/function.stat.php	 */	protected $stat;	/**	 * Method to open a file or URL.	 *	 * @param   string   $path          The stream path.	 * @param   string   $mode          Not used.	 * @param   integer  $options       Not used.	 * @param   string   &$opened_path  Not used.	 *	 * @return  boolean	 *	 * @since   11.1	 */	public function stream_open($path, $mode, $options, &$opened_path)	{		$this->currentString = &JStringController::getRef(str_replace('string://', '', $path));		if ($this->currentString)		{			$this->len = strlen($this->currentString);			$this->pos = 0;			$this->stat = $this->url_stat($path, 0);			return true;		}		else		{			return false;		}	}	/**	 * Method to retrieve information from a file resource	 *	 * @return  array	 *	 * @see     http://www.php.net/manual/en/streamwrapper.stream-stat.php	 * @since   11.1	 */	public function stream_stat()	{		return $this->stat;	}	/**	 * Method to retrieve information about a file.	 *	 * @param   string   $path   File path or URL to stat	 * @param   integer  $flags  Additional flags set by the streams API	 *	 * @return  array	 *	 * @see     http://php.net/manual/en/streamwrapper.url-stat.php	 * @since   11.1	 */	public function url_stat($path, $flags = 0)	{		$now = time();		$string = &JStringController::getRef(str_replace('string://', '', $path));		$stat = array(			'dev' => 0,			'ino' => 0,			'mode' => 0,			'nlink' => 1,			'uid' => 0,			'gid' => 0,			'rdev' => 0,			'size' => strlen($string),			'atime' => $now,			'mtime' => $now,			'ctime' => $now,			'blksize' => '512',			'blocks' => ceil(strlen($string) / 512));		return $stat;	}	/**	 * Method to read a given number of bytes starting at the current position	 * and moving to the end of the string defined by the current position plus the	 * given number.	 *	 * @param   integer  $count  Bytes of data from the current position should be returned.	 *	 * @return  void	 *	 * @since   11.1	 *	 * @see     http://www.php.net/manual/en/streamwrapper.stream-read.php	 */	public function stream_read($count)	{		$result = substr($this->currentString, $this->pos, $count);		$this->pos += $count;		return $result;	}	/**	 * Stream write, always returning false.	 *	 * @param   string  $data  The data to write.	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Updating the string is not supported.	 */	public function stream_write($data)	{		// We don't support updating the string.		return false;	}	/**	 * Method to get the current position	 *	 * @return  integer  The position	 *	 * @since   11.1	 */	public function stream_tell()	{		return $this->pos;	}	/**	 * End of field check	 *	 * @return  boolean  True if at end of field.	 *	 * @since   11.1	 */	public function stream_eof()	{		if ($this->pos > $this->len)		{			return true;		}		return false;	}	/**	 * Stream offset	 *	 * @param   integer  $offset  The starting offset.	 * @param   integer  $whence  SEEK_SET, SEEK_CUR, SEEK_END	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public function stream_seek($offset, $whence)	{		// $whence: SEEK_SET, SEEK_CUR, SEEK_END		if ($offset > $this->len)		{			// We can't seek beyond our len.			return false;		}		switch ($whence)		{			case SEEK_SET:				$this->pos = $offset;				break;			case SEEK_CUR:				if (($this->pos + $offset) < $this->len)				{					$this->pos += $offset;				}				else				{					return false;				}				break;			case SEEK_END:				$this->pos = $this->len - $offset;				break;		}		return true;	}	/**	 * Stream flush, always returns true.	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Data storage is not supported	 */	public function stream_flush()	{		// We don't store data.		return true;	}}stream_wrapper_register('string', 'JStreamString') or die('JStreamString Wrapper Registration Failed');
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_COOKIE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('cookie') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform class for interacting with a GitHub server instance. * * @property-read  JGithubGists    $gists    GitHub API object for gists. * @property-read  JGithubIssues   $issues   GitHub API object for issues. * @property-read  JGithubPulls    $pulls    GitHub API object for pulls. * @property-read  JGithubRefs     $refs     GitHub API object for referencess. * @property-read  JGithubForks    $forks    GitHub API object for forks. * @property-read  JGithubCommits  $commits  GitHub API object for commits. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithub{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * @var    JGithubGists  GitHub API object for gists.	 * @since  11.3	 */	protected $gists;	/**	 * @var    JGithubIssues  GitHub API object for issues.	 * @since  11.3	 */	protected $issues;	/**	 * @var    JGithubPulls  GitHub API object for pulls.	 * @since  11.3	 */	protected $pulls;	/**	 * @var    JGithubRefs  GitHub API object for referencess.	 * @since  11.3	 */	protected $refs;	/**	 * @var    JGithubForks  GitHub API object for forks.	 * @since  11.3	 */	protected $forks;	/**	 * @var    JGithubCommits  GitHub API object for commits.	 * @since  12.1	 */	protected $commits;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client  = isset($client) ? $client : new JGithubHttp($this->options);		// Setup the default API url if not already set.		$this->options->def('api.url', 'https://api.github.com');	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGithubObject  GitHub API object (gists, issues, pulls, etc).	 *	 * @since   11.3	 */	public function __get($name)	{		if ($name == 'gists')		{			if ($this->gists == null)			{				$this->gists = new JGithubGists($this->options, $this->client);			}			return $this->gists;		}		if ($name == 'issues')		{			if ($this->issues == null)			{				$this->issues = new JGithubIssues($this->options, $this->client);			}			return $this->issues;		}		if ($name == 'pulls')		{			if ($this->pulls == null)			{				$this->pulls = new JGithubPulls($this->options, $this->client);			}			return $this->pulls;		}		if ($name == 'refs')		{			if ($this->refs == null)			{				$this->refs = new JGithubRefs($this->options, $this->client);			}			return $this->refs;		}		if ($name == 'forks')		{			if ($this->forks == null)			{				$this->forks = new JGithubForks($this->options, $this->client);			}			return $this->forks;		}		if ($name == 'commits')		{			if ($this->commits == null)			{				$this->commits = new JGithubCommits($this->options, $this->client);			}			return $this->commits;		}	}	/**	 * Get an option from the JGitHub instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGitHub instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGitHub  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Manager Component Controller * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		JPluginHelper::importPlugin('content');		$vName = $this->input->get('view', 'media');		switch ($vName)		{			case 'images':				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;			case 'imagesList':				$mName = 'list';				$vLayout = $this->input->get('layout', 'default');				break;			case 'mediaList':				$app	= JFactory::getApplication();				$mName = 'list';				$vLayout = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');				break;			case 'media':			default:				$vName = 'media';				$vLayout = $this->input->get('layout', 'default');				$mName = 'manager';				break;		}		$document = JFactory::getDocument();		$vType    = $document->getType();		// Get/Create the view		$view = $this->getView($vName, $vType);		$view->addTemplatePath(JPATH_COMPONENT_ADMINISTRATOR.'/views/'.strtolower($vName).'/tmpl');		// Get/Create the model		if ($model = $this->getModel($mName))		{			// Push the model into the view (as default)			$view->setModel($model, true);		}		// Set the layout		$view->setLayout($vLayout);		// Display the view		$view->display();		return $this;	}	public function ftpValidate()	{		// Set FTP credentials, if given		JClientHelper::setCredentialsFromRequest('ftp');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_SYSTEM_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('system') as $field):			?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul>	</fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleRules extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Get the possible field actions and the ones posted to validate them.		$fieldActions = self::getFieldActions($element);		$valueActions = self::getValueActions($value);		// Make sure that all posted actions are in the list of possible actions for the field.		foreach ($valueActions as $action)		{			if (!in_array($action, $fieldActions))			{				return false;			}		}		return true;	}	/**	 * Method to get the list of permission action names from the form field value.	 *	 * @param   mixed  $value  The form field value to validate.	 *	 * @return  array  A list of permission action names from the form field value.	 *	 * @since   11.1	 */	protected function getValueActions($value)	{		$actions = array();		// Iterate over the asset actions and add to the actions.		foreach ((array) $value as $name => $rules)		{			$actions[] = $name;		}		return $actions;	}	/**	 * Method to get the list of possible permission action names for the form field.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the	 *                                      form field object.	 *	 * @return  array   A list of permission action names from the form field element definition.	 *	 * @since   11.1	 */	protected function getFieldActions(SimpleXMLElement $element)	{		$actions = array();		// Initialise some field attributes.		$section = $element['section'] ? (string) $element['section'] : '';		$component = $element['component'] ? (string) $element['component'] : '';		// Get the asset actions for the element.		$elActions = JAccess::getActions($component, $section);		// Iterate over the asset actions and add to the actions.		foreach ($elActions as $item)		{			$actions[] = $item->name;		}		// Iterate over the children and add to the actions.		foreach ($element->children() as $el)		{			if ($el->getName() == 'action')			{				$actions[] = (string) $el['name'];			}		}		return $actions;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PDO Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQueryPdo extends JDatabaseQuery{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Token class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerToken{	/**	 * This is the term that will be referenced in the terms table and the	 * mapping tables.	 *	 * @var    string	 * @since  2.5	 */	public $term;	/**	 * The stem is used to match the root term and produce more potential	 * matches when searching the index.	 *	 * @var    string	 * @since  2.5	 */	public $stem;	/**	 * If the token is numeric, it is likely to be short and uncommon so the	 * weight is adjusted to compensate for that situation.	 *	 * @var    boolean	 * @since  2.5	 */	public $numeric;	/**	 * If the token is a common term, the weight is adjusted to compensate for	 * the higher frequency of the term in relation to other terms.	 *	 * @var    boolean	 * @since  2.5	 */	public $common;	/**	 * Flag for phrase tokens.	 *	 * @var    boolean	 * @since  2.5	 */	public $phrase;	/**	 * The length is used to calculate the weight of the token.	 *	 * @var    integer	 * @since  2.5	 */	public $length;	/**	 * The weight is calculated based on token size and whether the token is	 * considered a common term.	 *	 * @var    integer	 * @since  2.5	 */	public $weight;	/**	 * The simple language identifier for the token.	 *	 * @var    string	 * @since  2.5	 */	public $language;	/**	 * Method to construct the token object.	 *	 * @param   mixed   $term    The term as a string for words or an array for phrases.	 * @param   string  $lang    The simple language identifier.	 * @param   string  $spacer  The space separator for phrases. [optional]	 *	 * @since   2.5	 */	public function __construct($term, $lang, $spacer = ' ')	{		$this->language = $lang;		// Tokens can be a single word or an array of words representing a phrase.		if (is_array($term))		{			// Populate the token instance.			$this->term = implode($spacer, $term);			$this->stem = implode($spacer, array_map(array('FinderIndexerHelper', 'stem'), $term, array($lang)));			$this->numeric = false;			$this->common = false;			$this->phrase = true;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 30 and divide by 30, add 1.			 * 2. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 30 ? 30 : $this->length) / 30) + 1;			$this->weight = round($this->weight, 4);		}		else		{			// Populate the token instance.			$this->term = $term;			$this->stem = FinderIndexerHelper::stem($this->term, $lang);			$this->numeric = (is_numeric($this->term) || (bool) preg_match('#^[0-9,.\-\+]+$#', $this->term));			$this->common = $this->numeric ? false : FinderIndexerHelper::isCommon($this->term, $lang);			$this->phrase = false;			$this->length = JString::strlen($this->term);			/*			 * Calculate the weight of the token.			 *			 * 1. Length of the token up to 15 and divide by 15.			 * 2. If common term, divide weight by 8.			 * 3. If numeric, multiply weight by 1.5.			 * 4. Round weight to 4 decimal points.			 */			$this->weight = (($this->length >= 15 ? 15 : $this->length) / 15);			$this->weight = ($this->common == true ? $this->weight / 8 : $this->weight);			$this->weight = ($this->numeric == true ? $this->weight * 1.5 : $this->weight);			$this->weight = round($this->weight, 4);		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="btn-toolbar">		<div class="btn-group pull-right">			<a class="btn" href="#" onclick="return Install.goToPage('site');" rel="prev" title="<?php echo JText::_('JPrevious'); ?>"><i class="icon-arrow-left"></i> <?php echo JText::_('JPrevious'); ?></a>			<a  class="btn btn-primary" href="#" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>		</div>	</div>	<h3><?php echo JText::_('INSTL_DATABASE'); ?></h3>	<hr class="hr-condensed" />	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_type'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_type'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_TYPE_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_host'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_host'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_HOST_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_user'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_user'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_USER_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_pass'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_pass'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PASSWORD_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_name'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_name'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_NAME_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_prefix'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_prefix'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_PREFIX_DESC'); ?>			</p>		</div>	</div>	<div class="control-group">		<div class="control-label">			<?php echo $this->form->getLabel('db_old'); ?>		</div>		<div class="controls">			<?php echo $this->form->getInput('db_old'); ?>			<p class="help-block">				<?php echo JText::_('INSTL_DATABASE_OLD_PROCESS_DESC'); ?>			</p>		</div>	</div>	<input type="hidden" name="task" value="database" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update Controller * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since	2.5.4	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'default');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Perform update source preference check and refresh update information			$model->applyUpdateSite();			$model->refreshUpdates();			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}		return $this;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcasecmp* A case insensivite string comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_strcasecmp($strX, $strY) {    $strX = utf8_strtolower($strX);    $strY = utf8_strtolower($strY);    return strcmp($strX, $strY);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_content */class ContentTableFeatured extends JTable{	/**	 * @param   JDatabaseDriver  A database connector object	 */	public function __construct(&$db)	{		parent::__construct('#__content_frontpage', 'content_id', $db);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view levels list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerLevels extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_LEVELS';	/**	 * Proxy for getModel.	 *	 * @since   1.6	 */	public function getModel($name = 'Level', $prefix = 'UsersModel')	{		return parent::getModel($name, $prefix, array('ignore_request' => true));	}}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform String Inflector Class * * The Inflector transforms words * * @package     Joomla.Platform * @subpackage  String * @since       12.1 */class JStringInflector{	/**	 * The singleton instance.	 *	 * @var    JStringInflector	 * @since  12.1	 */	private static $_instance;	/**	 * The inflector rules for singularisation, pluralisation and countability.	 *	 * @var    array	 * @since  12.1	 */	private $_rules = array(		'singular' => array(			'/(matr)ices$/i' => '\1ix',			'/(vert|ind)ices$/i' => '\1ex',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|viri?)i$/i' => '\1us',			'/([ftw]ax)es/i' => '\1',			'/(cris|ax|test)es$/i' => '\1is',			'/(shoe|slave)s$/i' => '\1',			'/(o)es$/i' => '\1',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/$1ses$/i' => '\s',			'/ses$/i' => '\s',			'/eaus$/' => 'eau',			'/^(.*us)$/' => '\\1',			'/s$/i' => '',		),		'plural' => array(			'/([m|l])ouse$/i' => '\1ice',			'/(matr|vert|ind)(ix|ex)$/i'  => '\1ices',			'/(x|ch|ss|sh)$/i' => '\1es',			'/([^aeiouy]|qu)y$/i' => '\1ies',			'/([^aeiouy]|qu)ies$/i' => '\1y',			'/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',			'/sis$/i' => 'ses',			'/([ti])um$/i' => '\1a',			'/(buffal|tomat)o$/i' => '\1\2oes',			'/(alumn|bacill|cact|foc|fung|nucle|radi|stimul|syllab|termin|vir)us$/i' => '\1i',			'/us$/i' => 'uses',			'/(ax|cris|test)is$/i' => '\1es',			'/s$/i' => 's',			'/$/' => 's',		),		'countable' => array(			'id',			'hits',			'clicks',		),	);	/**	 * Cached inflections.	 *	 * The array is in the form [singular => plural]	 *	 * @var    array	 * @since  12.1	 */	private $_cache = array();	/**	 * Protected constructor.	 *	 * @since  12.1	 */	protected function __construct()	{		// Pre=populate the irregual singular/plural.		$this			->addWord('deer')			->addWord('moose')			->addWord('sheep')			->addWord('bison')			->addWord('salmon')			->addWord('pike')			->addWord('trout')			->addWord('fish')			->addWord('swine')			->addWord('alias', 'aliases')			->addWord('bus', 'buses')			->addWord('foot', 'feet')			->addWord('goose', 'geese')			->addWord('hive', 'hives')			->addWord('louse', 'lice')			->addWord('man', 'men')			->addWord('mouse', 'mice')			->addWord('ox', 'oxen')			->addWord('quiz', 'quizes')			->addWord('status', 'statuses')			->addWord('tooth', 'teeth')			->addWord('woman', 'women');	}	/**	 * Adds inflection regex rules to the inflector.	 *	 * @param   mixed   $data      A string or an array of strings or regex rules to add.	 * @param   string  $ruleType  The rule type: singular | plural | countable	 *	 * @return  void	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	private function _addRule($data, $ruleType)	{		if (is_string($data))		{			$data = array($data);		}		elseif (!is_array($data))		{			// Do not translate.			throw new InvalidArgumentException('Invalid inflector rule data.');		}		foreach ($data as $rule)		{			// Ensure a string is pushed.			array_push($this->_rules[$ruleType], (string) $rule);		}	}	/**	 * Gets an inflected word from the cache where the singular form is supplied.	 *	 * @param   string  $singular  A singular form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedPlural($singular)	{		$singular = JString::strtolower($singular);		// Check if the word is in cache.		if (isset($this->_cache[$singular]))		{			return $this->_cache[$singular];		}		return false;	}	/**	 * Gets an inflected word from the cache where the plural form is supplied.	 *	 * @param   string  $plural  A plural form of a word.	 *	 * @return  mixed  The cached inflection or false if none found.	 *	 * @since   12.1	 */	private function _getCachedSingular($plural)	{		$plural = JString::strtolower($plural);		return array_search($plural, $this->_cache);	}	/**	 * Execute a regex from rules.	 *	 * The 'plural' rule type expects a singular word.	 * The 'singular' rule type expects a plural word.	 *	 * @param   string  $word      The string input.	 * @param   string  $ruleType  String (eg, singular|plural)	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since   12.1	 */	private function _matchRegexRule($word, $ruleType)	{		// Cycle through the regex rules.		foreach ($this->_rules[$ruleType] as $regex => $replacement)		{			$matches = 0;			$matchedWord = preg_replace($regex, $replacement, $word, -1, $matches);			if ($matches > 0)			{				return $matchedWord;			}		}		return false;	}	/**	 * Sets an inflected word in the cache.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  void	 *	 * @since   12.1	 */	private function _setCache($singular, $plural = null)	{		$singular = JString::strtolower($singular);		if ($plural === null)		{			$plural = $singular;		}		else		{			$plural = JString::strtolower($plural);		}		$this->_cache[$singular] = $plural;	}	/**	 * Adds a countable word.	 *	 * @param   mixed  $data  A string or an array of strings to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addCountableRule($data)	{		$this->_addRule($data, 'countable');		return $this;	}	/**	 * Adds a specific singular-plural pair for a word.	 *	 * @param   string  $singular  The singular form of the word.	 * @param   string  $plural    The plural form of the word. If omitted, it is assumed the singular and plural are identical.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addWord($singular, $plural =null)	{		$this->_setCache($singular, $plural);		return $this;	}	/**	 * Adds a pluralisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addPluraliseRule($data)	{		$this->_addRule($data, 'plural');		return $this;	}	/**	 * Adds a singularisation rule.	 *	 * @param   mixed  $data  A string or an array of regex rules to add.	 *	 * @return  JStringInflector  Returns this object to support chaining.	 *	 * @since   12.1	 */	public function addSingulariseRule($data)	{		$this->_addRule($data, 'singular');		return $this;	}	/**	 * Gets an instance of the JStringInflector singleton.	 *	 * @param   boolean  $new  If true (default is false), returns a new instance regardless if one exists.	 *                         This argument is mainly used for testing.	 *	 * @return  JStringInflector	 *	 * @since   12.1	 */	public static function getInstance($new = false)	{		if ($new)		{			return new static;		}		elseif (!is_object(self::$_instance))		{			self::$_instance = new static;		}		return self::$_instance;	}	/**	 * Checks if a word is countable.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is countable, false otherwise.	 *	 * @since  12.1	 */	public function isCountable($word)	{		return (boolean) in_array($word, $this->_rules['countable']);	}	/**	 * Checks if a word is in a plural form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is plural, false if not.	 *	 * @since  12.1	 */	public function isPlural($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedSingular($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toPlural($this->toSingular($word)) == $word;	}	/**	 * Checks if a word is in a singular form.	 *	 * @param   string  $word  The string input.	 *	 * @return  boolean  True if word is singular, false if not.	 *	 * @since  12.1	 */	public function isSingular($word)	{		// Try the cache for an known inflection.		$inflection = $this->_getCachedPlural($word);		if ($inflection !== false)		{			return true;		}		// Compute the inflection to cache the values, and compare.		return $this->toSingular($this->toPlural($word)) == $word;	}	/**	 * Converts a word into its plural form.	 *	 * @param   string  $word  The singular word to pluralise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toPlural($word)	{		// Try to get the cached plural form from the singular.		$cache = $this->_getCachedPlural($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known singular.		if ($this->_getCachedSingular($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'plural');		if ($inflected !== false)		{			$this->_setCache($word, $inflected);			return $inflected;		}		return false;	}	/**	 * Converts a word into its singular form.	 *	 * @param   string  $word  The plural word to singularise.	 *	 * @return  mixed  An inflected string, or false if no rule could be applied.	 *	 * @since  12.1	 */	public function toSingular($word)	{		// Try to get the cached singular form from the plural.		$cache = $this->_getCachedSingular($word);		if ($cache !== false)		{			return $cache;		}		// Check if the word is a known plural.		if ($this->_getCachedPlural($word))		{			return false;		}		// Compute the inflection.		$inflected = $this->_matchRegexRule($word, 'singular');		if ($inflected !== false)		{			$this->_setCache($inflected, $word);			return $inflected;		}		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('FinderHelperRoute', JPATH_SITE . '/components/com_finder/helpers/route.php');JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');// Include the helper.require_once __DIR__ . '/helper.php';if (!defined('FINDER_PATH_INDEXER')){	define('FINDER_PATH_INDEXER', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer');}JLoader::register('FinderIndexerQuery', FINDER_PATH_INDEXER . '/query.php');// Check for OpenSearchif ($params->get('opensearch', 1)){/*This code intentionally commented	$doc = JFactory::getDocument();	$app = JFactory::getApplication();	$ostitle = $params->get('opensearch_title', JText::_('MOD_FINDER_SEARCHBUTTON_TEXT') . ' ' . $app->getCfg('sitename'));	$doc->addHeadLink(						JURI::getInstance()->toString(array('scheme', 'host', 'port')) . JRoute::_('&option=com_finder&format=opensearch'),						'search', 'rel', array('title' => $ostitle, 'type' => 'application/opensearchdescription+xml')					);*/}// Initialize module parameters.$params->def('field_size', 20);// Get the route.$route = FinderHelperRoute::getSearchRoute($params->get('searchfilter', null));// Load component language file.FinderHelperLanguage::loadComponentLanguage();// Load plug-in language files.FinderHelperLanguage::loadPluginLanguage();// Get Smart Search query object.$query = modFinderHelper::getQuery($params);require JModuleHelper::getLayoutPath('mod_finder', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/articles.php';/** * Content Component Archive Model * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentModelArchive extends ContentModelArticles{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_content.archive';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		parent::populateState();		$app = JFactory::getApplication();		// Add archive properties		$params = $this->state->params;		// Filter on archived articles		$this->setState('filter.published', 2);		// Filter on month, year		$this->setState('filter.month', $app->input->getInt('month'));		$this->setState('filter.year', $app->input->getInt('year'));		// Optional filter text		$this->setState('list.filter', $app->input->getString('filter-search'));		// Get list limit		$itemid = $app->input->get('Itemid', 0, 'int');		$limit = $app->getUserStateFromRequest('com_content.archive.list' . $itemid . '.limit', 'limit', $params->get('display_num'), 'uint');		$this->setState('list.limit', $limit);	}	/**	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Set the archive ordering		$params = $this->state->params;		$articleOrderby = $params->get('orderby_sec', 'rdate');		$articleOrderDate = $params->get('order_date');		// No category ordering		$categoryOrderby = '';		$secondary = ContentHelperQuery::orderbySecondary($articleOrderby, $articleOrderDate) . ', ';		$primary = ContentHelperQuery::orderbyPrimary($categoryOrderby);		$orderby = $primary . ' ' . $secondary . ' a.created DESC ';		$this->setState('list.ordering', $orderby);		$this->setState('list.direction', '');		// Create a new query object.		$query = parent::getListQuery();			// Add routing for archive			//sqlsrv changes		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('a.alias', '!=', '0');		$case_when .= ' THEN ';		$a_id = $query->castAsChar('a.id');		$case_when .= $query->concatenate(array($a_id, 'a.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $a_id.' END as slug';		$query->select($case_when);		$case_when = ' CASE WHEN ';		$case_when .= $query->charLength('c.alias', '!=', '0');		$case_when .= ' THEN ';		$c_id = $query->castAsChar('c.id');		$case_when .= $query->concatenate(array($c_id, 'c.alias'), ':');		$case_when .= ' ELSE ';		$case_when .= $c_id.' END as catslug';		$query->select($case_when);		// Filter on month, year		// First, get the date field		$queryDate = ContentHelperQuery::getQueryDate($articleOrderDate);		if ($month = $this->getState('filter.month'))		{			$query->where('MONTH('. $queryDate . ') = ' . $month);		}		if ($year = $this->getState('filter.year'))		{			$query->where('YEAR('. $queryDate . ') = ' . $year);		}		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}	/**	 * Method to get the archived article list	 *	 * @access public	 * @return array	 */	public function getData()	{		$app = JFactory::getApplication();		// Lets load the content if it doesn't already exist		if (empty($this->_data))		{			// Get the page/component configuration			$params = $app->getParams();			// Get the pagination request variables			$limit		= $app->input->get('limit', $params->get('display_num', 20), 'uint');			$limitstart	= $app->input->get('limitstart', 0, 'uint');			$query = $this->_buildQuery();			$this->_data = $this->_getList($query, $limitstart, $limit);		}		return $this->_data;	}	// JModelLegacy override to add alternating value for $odd	protected function _getList($query, $limitstart=0, $limit=0)	{		$result = parent::_getList($query, $limitstart, $limit);		$odd = 1;		foreach ($result as $k => $row)		{			$result[$k]->odd = $odd;			$odd = 1 - $odd;		}		return $result;	}}
<?php/** * Generic_Sniffs_Formatting_NoSpaceAfterCastSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: NoSpaceAfterCastSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensures there is no space after cast tokens. * * Example: * <b class="bad">(int) $foo;</b> * <b class="good">(int)$foo;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SpaceAfterCastSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return PHP_CodeSniffer_Tokens::$castTokens;	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer                  $stackPtr  The position of the current token in	 *                                        the stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)		{			$content       = $tokens[($stackPtr + 1)]['content'];			$contentLength = strlen($content);			if ($contentLength !== 1)			{				$error = 'Cast statements must be followed by a single space; expected 1 space but found %s';				$data  = array($contentLength);				$phpcsFile->addError($error, $stackPtr, 'IncorrectSingle', $data);			}		}		else		{			$error = 'Cast statements must be followed by a single space; expected "%s" but found "%s"';			$data  = array(					$tokens[$stackPtr]['content'].' '.$tokens[($stackPtr + 1)]['content'],					$tokens[$stackPtr]['content'].$tokens[($stackPtr + 1)]['content'],			);			$phpcsFile->addError($error, $stackPtr, 'Incorrect', $data);		}// 		if ($tokens[($stackPtr + 1)]['code'] === T_WHITESPACE)// 		{// 			$error = 'A cast statement must not be followed by a space';// 			$phpcsFile->addError($error, $stackPtr, 'SpaceFound');// 		}	}//function}//class
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the FTP data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerFtp extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('ftp');		// Redirect to the page.		$r = new stdClass;		$r->view = 'summary';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params = new JRegistry;$dispatcher	= JEventDispatcher::getInstance();$dispatcher->trigger('onContentBeforeDisplay', array('com_media.file', &$this->_tmp_img, &$params));?><li class="imgOutline thumbnail height-80 width-80 center">	<a class="img-preview" href="javascript:ImageManager.populateFields('<?php echo $this->_tmp_img->path_relative; ?>')" title="<?php echo $this->_tmp_img->name; ?>" >		<div class="height-50">			<?php echo JHtml::_('image', $this->baseURL . '/' . $this->_tmp_img->path_relative, JText::sprintf('COM_MEDIA_IMAGE_TITLE', $this->_tmp_img->title, JHtml::_('number.bytes', $this->_tmp_img->size)), array('width' => $this->_tmp_img->width_60, 'height' => $this->_tmp_img->height_60)); ?>		</div>		<div class="small">			<?php echo JHtml::_('string.truncate', $this->_tmp_img->name, 10, false); ?>		</div>	</a></li><?php$dispatcher->trigger('onContentAfterDisplay', array('com_media.file', &$this->_tmp_img, &$params));?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of plugins. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.5 */class PluginsViewPlugins extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items      = $this->get('Items');		$this->pagination = $this->get('Pagination');		$this->state      = $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Check if there are no matching items		if (!count($this->items))		{			JFactory::getApplication()->enqueueMessage(				JText::_('COM_PLUGINS_MSG_MANAGE_NO_PLUGINS'),				'warning'			);		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo = PluginsHelper::getActions();		JToolbarHelper::title(JText::_('COM_PLUGINS_MANAGER_PLUGINS'), 'plugin');		if ($canDo->get('core.edit'))		{			JToolbarHelper::editList('plugin.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('plugins.publish', 'JTOOLBAR_ENABLE', true);			JToolbarHelper::unpublish('plugins.unpublish', 'JTOOLBAR_DISABLE', true);			JToolbarHelper::checkin('plugins.checkin');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_plugins');		}		JToolbarHelper::help('JHELP_EXTENSIONS_PLUGIN_MANAGER');		JHtmlSidebar::setAction('index.php?option=com_plugins&view=plugins');		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_PUBLISHED'),				'filter_enabled',				JHtml::_('select.options', PluginsHelper::publishedOptions(), 'value', 'text', $this->state->get('filter.enabled'), true)		);		JHtmlSidebar::addFilter(				JText::_('COM_PLUGINS_OPTION_FOLDER'),				'filter_folder',				JHtml::_('select.options', PluginsHelper::folderOptions(), 'value', 'text', $this->state->get('filter.folder'))		);		JHtmlSidebar::addFilter(				JText::_('JOPTION_SELECT_ACCESS'),				'filter_access',				JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		$this->sidebar = JHtmlSidebar::render();	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(				'ordering' => JText::_('JGRID_HEADING_ORDERING'),				'a.state' => JText::_('JSTATUS'),				'name' => JText::_('JGLOBAL_TITLE'),				'folder' => JText::_('COM_PLUGINS_FOLDER_HEADING'),				'element' => JText::_('COM_PLUGINS_ELEMENT_HEADING'),				'access' => JText::_('JGRID_HEADING_ACCESS'),				'extension_id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="hits">					<span class="icon-eye-open"></span>					<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $displayData['item']->hits); ?>			</dd>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) :?>	<ul>	<?php foreach ($this->children[$this->category->id] as $id => $child) : ?>		<?php		if ($this->params->get('show_empty_categories') || $child->getNumItems(true) || count($child->getChildren())) :			if (!isset($this->children[$this->category->id][$id + 1])) :				$class = ' class="last"';			endif;		?>		<li<?php echo $class; ?>>			<?php $class = ''; ?>				<h3 class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">					<?php echo $this->escape($child->title); ?></a>				</h3>				<?php if ($this->params->get('show_subcat_desc') == 1) :?>				<?php if ($child->description and $this->params->get('show_description') != 0 ) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>					</div>				<?php endif; ?>				<?php endif; ?>				<?php if ($child->getNumItems() == true) : ?>				<dl>					<dt>						<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>					</dt>					<dd>						<?php echo $child->getNumItems(true); ?>					</dd>				</dl>				<?php endif; ?>				<?php if (count($child->getChildren()) > 0 ) :					$this->children[$child->id] = $child->getChildren();					$this->category = $child;					$this->maxLevel--;					if ($this->maxLevel != 0) :						echo $this->loadTemplate('children');					endif;					$this->category = $child->getParent();					$this->maxLevel++;				endif; ?>			</li>		<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif; ?>
<?php/*** @version $Id$* Tools for conversion between UTF-8 and unicode* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*///--------------------------------------------------------------------/*** Takes an UTF-8 string and returns an array of ints representing the* Unicode characters. Astral planes are supported ie. the ints in the* output can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input string isn't a valid UTF-8 octet sequence* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to* trigger errors on encountering bad bytes* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed array of unicode code points or FALSE if UTF-8 invalid* @see utf8_from_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_to_unicode($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $out = array();    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $out[] = $in;                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                trigger_error(                        'utf8_to_unicode: Illegal sequence identifier '.                            'in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        trigger_error(                                'utf8_to_unicode: Illegal sequence or codepoint '.                                    'in UTF-8 at byte '.$i,                                E_USER_WARNING                            );                        return FALSE;                    }                    if (0xFEFF != $mUcs4) {                        // BOM is legal but we don't want to output it                        $out[] = $mUcs4;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                trigger_error(                        'utf8_to_unicode: Incomplete multi-octet '.                        '   sequence in UTF-8 at byte '.$i,                        E_USER_WARNING                    );                return FALSE;            }        }    }    return $out;}//--------------------------------------------------------------------/*** Takes an array of ints representing the Unicode characters and returns* a UTF-8 string. Astral planes are supported ie. the ints in the* input can be > 0xFFFF. Occurrances of the BOM are ignored. Surrogates* are not allowed.* Returns false if the input array contains ints that represent* surrogates or are outside the Unicode range* and raises a PHP error at level E_USER_WARNING* Note: this function has been modified slightly in this library to use* output buffering to concatenate the UTF-8 string (faster) as well as* reference the array by it's keys* @param array of unicode code points representing a string* @return mixed UTF-8 string or FALSE if array contains invalid code points* @author <hsivonen@iki.fi>* @see utf8_to_unicode* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage unicode*/function utf8_from_unicode($arr) {    ob_start();    foreach (array_keys($arr) as $k) {        # ASCII range (including control chars)        if ( ($arr[$k] >= 0) && ($arr[$k] <= 0x007f) ) {            echo chr($arr[$k]);        # 2 byte sequence        } else if ($arr[$k] <= 0x07ff) {            echo chr(0xc0 | ($arr[$k] >> 6));            echo chr(0x80 | ($arr[$k] & 0x003f));        # Byte order mark (skip)        } else if($arr[$k] == 0xFEFF) {            // nop -- zap the BOM        # Test for illegal surrogates        } else if ($arr[$k] >= 0xD800 && $arr[$k] <= 0xDFFF) {            // found a surrogate            trigger_error(                'utf8_from_unicode: Illegal surrogate '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            return FALSE;        # 3 byte sequence        } else if ($arr[$k] <= 0xffff) {            echo chr(0xe0 | ($arr[$k] >> 12));            echo chr(0x80 | (($arr[$k] >> 6) & 0x003f));            echo chr(0x80 | ($arr[$k] & 0x003f));        # 4 byte sequence        } else if ($arr[$k] <= 0x10ffff) {            echo chr(0xf0 | ($arr[$k] >> 18));            echo chr(0x80 | (($arr[$k] >> 12) & 0x3f));            echo chr(0x80 | (($arr[$k] >> 6) & 0x3f));            echo chr(0x80 | ($arr[$k] & 0x3f));        } else {            trigger_error(                'utf8_from_unicode: Codepoint out of Unicode range '.                    'at index: '.$k.', value: '.$arr[$k],                E_USER_WARNING                );            // out of range            return FALSE;        }    }    $result = ob_get_contents();    ob_end_clean();    return $result;}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleNotequals extends JFormRule{	/**	 * Method to test if two values are not equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value != $input->get($field))		{			return true;		}		return false;	}}
<?php/** * @package    Joomla.Compat * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JsonSerializable interface. This file should only be loaded on PHP < 5.4 * It allows us to implement it in classes without requiring PHP 5.4 * * @package  Joomla.Compat * @link     http://www.php.net/manual/en/jsonserializable.jsonserialize.php * @since    12.2 */interface JsonSerializable{	/**	 * Return data which should be serialized by json_encode().	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function jsonSerialize();}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><div class="tab-pane" id="associations">	<fieldset>		<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol class="links"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleTel extends JFormRule{	/**	 * Method to test the url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		/*		 * @see http://www.nanpa.com/		 * @see http://tools.ietf.org/html/rfc4933		 * @see http://www.itu.int/rec/T-REC-E.164/en		 *		 * Regex by Steve Levithan		 * @see http://blog.stevenlevithan.com/archives/validate-phone-number		 * @note that valid ITU-T and EPP must begin with +.		 */		$regexarray = array('NANP' => '/^(?:\+?1[-. ]?)?\(?([2-9][0-8][0-9])\)?[-. ]?([2-9][0-9]{2})[-. ]?([0-9]{4})$/',			'ITU-T' => '/^\+(?:[0-9] ?){6,14}[0-9]$/', 'EPP' => '/^\+[0-9]{1,3}\.[0-9]{4,14}(?:x.+)?$/');		if (isset($element['plan']))		{			$plan = (string) $element['plan'];			if ($plan == 'northamerica' || $plan == 'us')			{				$plan = 'NANP';			}			elseif ($plan == 'International' || $plan == 'int' || $plan == 'missdn' || !$plan)			{				$plan = 'ITU-T';			}			elseif ($plan == 'IETF')			{				$plan = 'EPP';			}			$regex = $regexarray[$plan];			// Test the value against the regular expression.			if (preg_match($regex, $value) == false)			{				return false;			}		}		else		{			/*			 * If the rule is set but no plan is selected just check that there are between			 * 7 and 15 digits inclusive and no illegal characters (but common number separators			 * are allowed).			 */			$cleanvalue = preg_replace('/[+. \-(\)]/', '', $value);			$regex = '/^[0-9]{7,15}?$/';			if (preg_match($regex, $cleanvalue) == true)			{				return true;			}			else			{				return false;			}		}		return true;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$id      = empty($displayData['id']) ? '' : (' id="' . $displayData['id'] . '"');$target  = empty($displayData['target']) ? '' : (' target="' . $displayData['target'] . '"');$onclick = empty($displayData['onclick']) ? '' : (' onclick="' . $displayData['onclick'] . '"');$title   = empty($displayData['title']) ? '' : (' title="' . $this->escape($displayData['title']) . '"');$text    = empty($displayData['text']) ? '' : ('<span>' . $displayData['text'] . '</span>')?><div class="row-fluid"<?php echo $id; ?>>	<div class="span12">		<a href="<?php echo $displayData['link']; ?>"<?php echo $target . $onclick . $title; ?>>			<i class="icon-<?php echo $displayData['image']; ?>"></i> <?php echo $text; ?>		</a>	</div></div>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');jimport('joomla.html.html.bootstrap');?><div class="contact<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<?php if ($this->item->published == 0) : ?>					<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span>				<?php endif; ?>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid); ?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist', $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?> 	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.startAccordion', 'slide-contact', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'basic-details')); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_DETAILS'), 'basic-details'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'basic-details', JText::_('COM_CONTACT_DETAILS', true)); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>'. JText::_('COM_CONTACT_DETAILS').'</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>		<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">		<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endSlide'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_EMAIL_FORM'), 'display-form'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-form', JText::_('COM_CONTACT_EMAIL_FORM', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>			<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('JGLOBAL_ARTICLES'), 'display-articles'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-articles', JText::_('JGLOBAL_ARTICLES', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('articles'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_PROFILE'), 'display-profile'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-profile', JText::_('COM_CONTACT_PROFILE', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>';  ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_OTHER_INFORMATION'), 'display-misc'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-misc', JText::_('COM_CONTACT_OTHER_INFORMATION', true)); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>';  ?>		<?php endif; ?>		<div class="contact-miscinfo">			<dl class="dl-horizontal">				<dt>					<span class="<?php echo $this->params->get('marker_class'); ?>">					<?php echo $this->params->get('marker_misc'); ?>					</span>				</dt>				<dd>					<span class="contact-misc">						<?php echo $this->contact->misc; ?>					</span>				</dd>			</dl>		</div>		<?php if ($this->params->get('presentation_style') == 'sliders') : ?>			<?php echo JHtml::_('bootstrap.endSlide'); ?>		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'tabs') : ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders') : ?>		<?php echo JHtml::_('bootstrap.endAccordion'); ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'tabs') : ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Login Controller * * @package     Joomla.Administrator * @subpackage  com_login * @since       1.5 */class LoginController extends JControllerLegacy{	/**	 * Typical view method for MVC based architecture	 *	 * This function is provide as a default implementation, in most cases	 * you will need to override it in your own controllers.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Special treatment is required for this component, as this view may be called		// after a session timeout. We must reset the view and layout prior to display		// otherwise an error will occur.		$this->input->set('view', 'login');		$this->input->set('layout', 'default');		parent::display();	}	/**	 * Method to log in a user.	 *	 * @return  void	 */	public function login()	{		// Check for request forgeries.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$model = $this->getModel('login');		$credentials = $model->getState('credentials');		$return = $model->getState('return');		$result = $app->login($credentials, array('action' => 'core.login.admin'));		if (!($result instanceof Exception))		{			$app->redirect($return);		}		parent::display();	}	/**	 * Method to log out a user.	 *	 * @return  void	 */	public function logout()	{		JSession::checkToken('request') or jexit(JText::_('JInvalid_Token'));		$app = JFactory::getApplication();		$userid = $this->input->getInt('uid', null);		$options = array(			'clientid' => ($userid) ? 0 : 1		);		$result = $app->logout($userid, $options);		if (!($result instanceof Exception))		{			$model 	= $this->getModel('login');			$return = $model->getState('return');			$app->redirect($return);		}		parent::display();	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseSqlazure is deprecated, use JDatabaseDriverSqlazure instead.', JLog::WARNING, 'deprecated');/** * SQL Server database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverSqlazure instead. */class JDatabaseSqlazure extends JDatabaseDriverSqlazure{}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Reset controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerReset extends UsersController{	/**	 * Method to request a password reset.	 *	 * @since   1.6	 */	public function request()	{		// Check the request token.		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Submit the password reset request.		$return	= $model->processResetRequest($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_REQUEST_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset'.$itemid;			// Go back to the request form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// The request failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset'.$itemid;			// Go back to the request form.			$message = JText::sprintf('COM_USERS_RESET_REQUEST_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// The request succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Proceed to step two.			$this->setRedirect(JRoute::_($route, false));			return true;		}	}	/**	 * Method to confirm the password request.	 *	 * @access	public	 * @since   1.6	 */	public function confirm()	{		// Check the request token.		JSession::checkToken('request') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->get('jform', array(), 'array');		// Confirm the password reset request.		$return	= $model->processResetConfirm($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_CONFIRM_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Go back to the confirm form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Confirm failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=confirm'.$itemid;			// Go back to the confirm form.			$message = JText::sprintf('COM_USERS_RESET_CONFIRM_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Confirm succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Proceed to step three.			$this->setRedirect(JRoute::_($route, false));			return true;		}	}	/**	 * Method to complete the password reset process.	 *	 * @since   1.6	 */	public function complete()	{		// Check for request forgeries		JSession::checkToken('post') or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Reset', 'UsersModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Complete the password reset request.		$return	= $model->processResetComplete($data);		// Check for a hard error.		if ($return instanceof Exception)		{			// Get the error message to display.			if ($app->getCfg('error_reporting'))			{				$message = $return->getMessage();			} else {				$message = JText::_('COM_USERS_RESET_COMPLETE_ERROR');			}			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Go back to the complete form.			$this->setRedirect(JRoute::_($route, false), $message, 'error');			return false;		} elseif ($return === false)		{			// Complete failed.			// Get the route to the next page.			$itemid = UsersHelperRoute::getResetRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=reset&layout=complete'.$itemid;			// Go back to the complete form.			$message = JText::sprintf('COM_USERS_RESET_COMPLETE_FAILED', $model->getError());			$this->setRedirect(JRoute::_($route, false), $message, 'notice');			return false;		}		else		{			// Complete succeeded.			// Get the route to the next page.			$itemid = UsersHelperRoute::getLoginRoute();			$itemid = $itemid !== null ? '&Itemid='.$itemid : '';			$route	= 'index.php?option=com_users&view=login'.$itemid;			// Proceed to the login form.			$message = JText::_('COM_USERS_RESET_COMPLETE_SUCCESS');			$this->setRedirect(JRoute::_($route, false), $message);			return true;		}	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strspn* Find length of initial segment matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strspn* @package utf8* @subpackage strings*/function utf8_strspn($str, $mask, $start = NULL, $length = NULL) {    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);	// Fix for $start but no $length argument.    if ($start !== null && $length === null) {    	$length = utf8_strlen($str);    }    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^['.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * beezDivision chrome. * * @since   3.0 */function modChrome_beezDivision($module, &$params, &$attribs){	$headerLevel = isset($attribs['headerLevel']) ? (int) $attribs['headerLevel'] : 3;	if (!empty ($module->content)) { ?><div class="moduletable<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>"><?php if ($module->showtitle) { ?> <h<?php echo $headerLevel; ?>><?php echo $module->title; ?></h<?php echo $headerLevel; ?>><?php }; ?> <?php echo $module->content; ?></div><?php };}/** * beezHide chrome. * * @since   3.0 */function modChrome_beezHide($module, &$params, &$attribs){	$headerLevel = isset($attribs['headerLevel']) ? (int) $attribs['headerLevel'] : 3;	$state = isset($attribs['state']) ? (int) $attribs['state'] :0;	if (!empty ($module->content)) { ?><div	class="moduletable_js <?php echo htmlspecialchars($params->get('moduleclass_sfx'));?>"><?php if ($module->showtitle) : ?><h<?php echo $headerLevel; ?> class="js_heading"> <?php echo $module->title; ?> <a href="#"	title="<?php echo JText::_('TPL_BEEZ3_CLICK'); ?>"	onclick="auf('module_<?php echo $module->id; ?>'); return false"	class="opencloselink" id="link_<?php echo $module->id?>"> <span	class="no"><img src="templates/beez3/images/plus.png"	alt="<?php if ($state == 1) { echo JText::_('TPL_BEEZ3_ALTOPEN');} else {echo JText::_('TPL_BEEZ3_ALTCLOSE');} ?>" /></span></a></h<?php echo $headerLevel; ?>> <?php endif; ?><div class="module_content <?php if ($state == 1){echo "open";} ?>"	id="module_<?php echo $module->id; ?>" tabindex="-1"><?php echo $module->content; ?></div></div>	<?php }}/** * beezTabs chrome. * * @since   3.0 */function modChrome_beezTabs($module, $params, $attribs){	$area = isset($attribs['id']) ? (int) $attribs['id'] :'1';	$area = 'area-'.$area;	static $modulecount;	static $modules;	if ($modulecount < 1)	{		$modulecount = count(JModuleHelper::getModules($module->position));		$modules = array();	}	if ($modulecount == 1)	{		$temp = new stdClass;		$temp->content = $module->content;		$temp->title = $module->title;		$temp->params = $module->params;		$temp->id = $module->id;		$modules[] = $temp;		// list of moduletitles		// list of moduletitles		echo '<div id="'. $area.'" class="tabouter"><ul class="tabs">';		foreach ($modules as $rendermodule)		{			echo '<li class="tab"><a href="#" id="link_'.$rendermodule->id.'" class="linkopen" onclick="tabshow(\'module_'. $rendermodule->id.'\');return false">'.$rendermodule->title.'</a></li>';		}		echo '</ul>';		$counter = 0;		// modulecontent		foreach ($modules as $rendermodule)		{			$counter ++;			echo '<div tabindex="-1" class="tabcontent tabopen" id="module_'.$rendermodule->id.'">';			echo $rendermodule->content;			if ($counter != count($modules))			{			echo '<a href="#" class="unseen" onclick="nexttab(\'module_'. $rendermodule->id.'\');return false;" id="next_'.$rendermodule->id.'">'.JText::_('TPL_BEEZ3_NEXTTAB').'</a>';			}			echo '</div>';		}		$modulecount--;		echo '</div>';	} else {		$temp = new stdClass;		$temp->content = $module->content;		$temp->params = $module->params;		$temp->title = $module->title;		$temp->id = $module->id;		$modules[] = $temp;		$modulecount--;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_tags_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php JLoader::register('TagsHelperRoute', JPATH_BASE . '/components/com_tags/helpers/route.php'); ?><div class="tagspopular<?php echo $moduleclass_sfx; ?>"><ul ><?php foreach ($list as $item) :	?><li><?php $route = new TagsHelperRoute; ?>	<a href="<?php echo JRoute::_(TagsHelperRoute::getTagRoute($item->tag_id . ':' . $item->alias)); ?>">		<?php echo htmlspecialchars($item->title); ?></a></li><?php endforeach; ?></ul></div>
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEvent Class * * @package     Joomla.Platform * @subpackage  Event * @since       11.1 */abstract class JEvent extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to trigger events.	 * The method first generates the even from the argument array. Then it unsets the argument	 * since the argument has no bearing on the event handler.	 * If the method exists it is called and returns its return value. If it does not exist it	 * returns null.	 *	 * @param   array  &$args  Arguments	 *	 * @return  mixed  Routine return value	 *	 * @since   11.1	 */	public function update(&$args)	{		// First let's get the event from the argument array.  Next we will unset the		// event argument as it has no bearing on the method to handle the event.		$event = $args['event'];		unset($args['event']);		/*		 * If the method to handle an event exists, call it and return its return		 * value.  If it does not exist, return null.		 */		if (method_exists($this, $event))		{			return call_user_func_array(array($this, $event), $args);		}		else		{			return null;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;$class = ' class="first"';?><?php if (count($this->children[$this->category->id]) > 0) : ?>        <ul>        <?php foreach ($this->children[$this->category->id] as $id => $child) : ?>                <?php				if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :					if (!isset($this->children[$this->category->id][$id + 1])) :						$class = ' class="last"';					endif;				?>                <li<?php echo $class; ?>>                        <?php $class = ''; ?>                        <span class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($child->id));?>">                                <?php echo $this->escape($child->title); ?></a>                        </span>                       <?php if ($this->params->get('show_subcat_desc') == 1) :?>                        <?php if ($child->description) : ?>                                <div class="category-desc">                                        <?php echo JHtml::_('content.prepare', $child->description, '', 'com_content.category'); ?>                                </div>                        <?php endif; ?>                        <?php endif; ?>                        <?php if ( $this->params->get('show_cat_num_articles', 1)) : ?>                        <dl>                                <dt>                                        <?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>                                </dt>                                <dd>                                        <?php echo $child->getNumItems(true); ?>                                </dd>                        </dl>                        <?php endif; ?>                        <?php if (count($child->getChildren()) > 0):							$this->children[$child->id] = $child->getChildren();							$this->category = $child;							$this->maxLevel--;							if ($this->maxLevel != 0) :								echo $this->loadTemplate('children');							endif;							$this->category = $child->getParent();							$this->maxLevel++;						endif; ?>                </li>                <?php endif; ?>        <?php endforeach; ?>        </ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Route handling class * * @package     Joomla.Platform * @subpackage  Application * @since       11.1 */class JRoute{	/**	 * The route object so we don't have to keep fetching it.	 *	 * @var    JRouter	 * @since  12.2	 */	private static $_router = null;	/**	 * Translates an internal Joomla URL to a humanly readible URL.	 *	 * @param   string   $url    Absolute or Relative URI to Joomla resource.	 * @param   boolean  $xhtml  Replace & by &amp; for XML compilance.	 * @param   integer  $ssl    Secure state for the resolved URI.	 *                             1: Make URI secure using global secure site URI.	 *                             0: Leave URI in the same secure state as it was passed to the function.	 *                            -1: Make URI unsecure using the global unsecure site URI.	 *	 * @return  The translated humanly readible URL.	 *	 * @since   11.1	 */	public static function _($url, $xhtml = true, $ssl = null)	{		if (!self::$_router)		{			// Get the router.			self::$_router = JFactory::getApplication()->getRouter();			// Make sure that we have our router			if (!self::$_router)			{				return null;			}		}		if ((strpos($url, '&') !== 0) && (strpos($url, 'index.php') !== 0))		{			return $url;		}		// Build route.		$uri = self::$_router->build($url);		$url = $uri->toString(array('path', 'query', 'fragment'));		// Replace spaces.		$url = preg_replace('/\s/u', '%20', $url);		/*		 * Get the secure/unsecure URLs.		 *		 * If the first 5 characters of the BASE are 'https', then we are on an ssl connection over		 * https and need to set our secure URL to the current request URL, if not, and the scheme is		 * 'http', then we need to do a quick string manipulation to switch schemes.		 */		if ((int) $ssl)		{			$uri = JURI::getInstance();			// Get additional parts.			static $prefix;			if (!$prefix)			{				$prefix = $uri->toString(array('host', 'port'));			}			// Determine which scheme we want.			$scheme = ((int) $ssl === 1) ? 'https' : 'http';			// Make sure our URL path begins with a slash.			if (!preg_match('#^/#', $url))			{				$url = '/' . $url;			}			// Build the URL.			$url = $scheme . '://' . $prefix . $url;		}		if ($xhtml)		{			$url = htmlspecialchars($url);		}		return $url;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of article categories. * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_weblinks.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_weblinks';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_num_links', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Weblinks', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(WeblinksHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_weblinks.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_num_links') == 1) :?>			<dl class="weblink-count"><dt>				<?php echo JText::_('COM_WEBLINKS_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>	       		<?php if ($this->params->get('categories_description')) : ?>		 <div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_newsfeeds.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc  base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_newsfeeds.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="300">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<?php foreach ($this->config as $key => $value):?>			<tr>				<td>					<?php echo $key;?>				</td>				<td>					<?php echo htmlspecialchars($value, ENT_QUOTES);?>				</td>			</tr>			<?php endforeach;?>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Pull Requests class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubPulls extends JGithubObject{	/**	 * Method to create a pull request.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $title  The title of the new pull request.	 * @param   string  $base   The branch (or git ref) you want your changes pulled into. This	 *                          should be an existing branch on the current repository. You cannot	 *                          submit a pull request to one repo that requests a merge to a base	 *                          of another repo.	 * @param   string  $head   The branch (or git ref) where your changes are implemented.	 * @param   string  $body   The body text for the new pull request.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $base, $head, $body = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'base' => $base,				'head' => $head,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a pull request.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   integer  $pullId    The pull request number.	 * @param   string   $body      The comment body text.	 * @param   string   $commitId  The SHA1 hash of the commit to comment on.	 * @param   string   $filePath  The Relative path of the file to comment on.	 * @param   string   $position  The line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $pullId, $body, $commitId, $filePath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'commit_id' => $commitId,				'path' => $filePath,				'position' => $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment in reply to another comment.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $pullId     The pull request number.	 * @param   string   $body       The comment body text.	 * @param   integer  $inReplyTo  The id of the comment to reply to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createCommentReply($user, $repo, $pullId, $body, $inReplyTo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,				'in_reply_to' => (int) $inReplyTo			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a pull request from an existing issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number for which to attach the new pull request.	 * @param   string   $base     The branch (or git ref) you want your changes pulled into. This	 *                             should be an existing branch on the current repository. You cannot	 *                             submit a pull request to one repo that requests a merge to a base	 *                             of another repo.	 * @param   string   $head     The branch (or git ref) where your changes are implemented.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createFromIssue($user, $repo, $issueId, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// Build the request data.		$data = json_encode(			array(				'issue' => (int) $issueId,				'base' => $base,				'head' => $head			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   string   $title   The optional new title for the pull request.	 * @param   string   $body    The optional new body text for the pull request.	 * @param   string   $state   The optional new state for the pull request. [open, closed]	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $pullId, $title = null, $body = null, $state = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on a pull request.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commits for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getCommits($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of files for a pull request.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.	 * @param   integer  $page    The page number from which to get items.	 * @param   integer  $limit   The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getFiles($user, $repo, $pullId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/files';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list pull requests.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $state  The optional state to filter requests by. [open, closed]	 * @param   integer  $page   The page number from which to get items.	 * @param   integer  $limit  The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $state = 'open', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls';		// If a state exists append it as an option.		if ($state != 'open')		{			$path .= '?state=' . $state;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to check if a pull request has been merged.	 *	 * @param   string   $user    The name of the owner of the GitHub repository.	 * @param   string   $repo    The name of the GitHub repository.	 * @param   integer  $pullId  The pull request number.  The pull request number.	 *	 * @return  boolean  True if the pull request has been merged.	 *	 * @since   11.3	 */	public function isMerged($user, $repo, $pullId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code == 204)		{			return true;		}		elseif ($response->code == 404)		{			return false;		}		else		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to merge a pull request.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $pullId   The pull request number.	 * @param   string   $message  The message that will be used for the merge commit.	 *	 * @return  object	 *	 * @since   11.3	 */	public function merge($user, $repo, $pullId, $message = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/pulls/' . (int) $pullId . '/merge';		// Build the request data.		$data = json_encode(			array(				'commit_message' => $message			)		);		// Send the request.		$response = $this->client->put($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDataSet is a collection class that allows the developer to operate on a set of JData objects as if they were in a * typical PHP array. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JDataSet implements JDataDumpable, ArrayAccess, Countable, Iterator{	/**	 * The current position of the iterator.	 *	 * @var    integer	 * @since  12.3	 */	private $_current = false;	/**	 * The iterator objects.	 *	 * @var    array	 * @since  12.3	 */	private $_objects = array();	/**	 * The class constructor.	 *	 * @param   array  $objects  An array of JData objects to bind to the data set.	 *	 * @since   12.3	 * @throws  InvalidArgumentException if an object is not an instance of JData.	 */	public function __construct(array $objects = array())	{		// Set the objects.		$this->_initialise($objects);	}	/**	 * The magic call method is used to call object methods using the iterator.	 *	 * Example: $array = $objectList->foo('bar');	 *	 * The object list will iterate over its objects and see if each object has a callable 'foo' method.	 * If so, it will pass the argument list and assemble any return values. If an object does not have	 * a callable method no return value is recorded.	 * The keys of the objects and the result array are maintained.	 *	 * @param   string  $method     The name of the method called.	 * @param   array   $arguments  The arguments of the method called.	 *	 * @return  array   An array of values returned by the methods called on the objects in the data set.	 *	 * @since   12.3	 */	public function __call($method, $arguments = array())	{		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $key => $object)		{			// Create the object callback.			$callback = array($object, $method);			// Check if the callback is callable.			if (is_callable($callback))			{				// Call the method for the object.				$return[$key] = call_user_func_array($callback, $arguments);			}		}		return $return;	}	/**	 * The magic get method is used to get a list of properties from the objects in the data set.	 *	 * Example: $array = $dataSet->foo;	 *	 * This will return a column of the values of the 'foo' property in all the objects	 * (or values determined by custom property setters in the individual JData's).	 * The result array will contain an entry for each object in the list (compared to __call which may not).	 * The keys of the objects and the result array are maintained.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  array  An associative array of the values.	 *	 * @since   12.3	 */	public function __get($property)	{		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $key => $object)		{			// Get the property.			$return[$key] = $object->$property;		}		return $return;	}	/**	 * The magic isset method is used to check the state of an object property using the iterator.	 *	 * Example: $array = isset($objectList->foo);	 *	 * @param   string  $property  The name of the property.	 *	 * @return  boolean  True if the property is set in any of the objects in the data set.	 *	 * @since   12.3	 */	public function __isset($property)	{		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $object)		{			// Check the property.			$return[] = isset($object->$property);		}		return in_array(true, $return, true) ? true : false;	}	/**	 * The magic set method is used to set an object property using the iterator.	 *	 * Example: $objectList->foo = 'bar';	 *	 * This will set the 'foo' property to 'bar' in all of the objects	 * (or a value determined by custom property setters in the JData).	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __set($property, $value)	{		// Iterate through the objects.		foreach ($this->_objects as $object)		{			// Set the property.			$object->$property = $value;		}	}	/**	 * The magic unset method is used to unset an object property using the iterator.	 *	 * Example: unset($objectList->foo);	 *	 * This will unset all of the 'foo' properties in the list of JData's.	 *	 * @param   string  $property  The name of the property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		// Iterate through the objects.		foreach ($this->_objects as $object)		{			unset($object->$property);		}	}	/**	 * Gets the number of data objects in the set.	 *	 * @return  integer  The number of objects.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_objects);	}	/**	 * Clears the objects in the data set.	 *	 * @return  JDataSet  Returns itself to allow chaining.	 *	 * @since   12.3	 */	public function clear()	{		$this->_objects = array();		$this->rewind();		return $this;	}	/**	 * Get the current data object in the set.	 *	 * @return  JData  The current object, or false if the array is empty or the pointer is beyond the end of the elements.	 *	 * @since   12.3	 */	public function current()	{		return is_scalar($this->_current) ? $this->_objects[$this->_current] : false;	}	/**	 * Dumps the data object in the set, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  array  An associative array of the date objects in the set, dumped as a simple PHP stdClass object.	 *	 * @see     JData::dump()	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		$objects = array();		// Make sure that we have not reached our maximum depth.		if ($depth > 0)		{			// Handle JSON serialization recursively.			foreach ($this->_objects as $key => $object)			{				$objects[$key] = $object->dump($depth, $dumped);			}		}		return $objects;	}	/**	 * Gets the data set in a form that can be serialised to JSON format.	 *	 * Note that this method will not return an associative array, otherwise it would be encoded into an object.	 * JSON decoders do not consistently maintain the order of associative keys, whereas they do maintain the order of arrays.	 *	 * @param   mixed  $serialized  An array of objects that have already been serialized that is used to infinite loops	 *                              (null on first call).	 *	 * @return  array  An array that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize($serialized = null)	{		// Check if we should initialise the recursion tracker.		if ($serialized === null)		{			$serialized = array();		}		// Add this object to the serialized stack.		$serialized[] = spl_object_hash($this);		$return = array();		// Iterate through the objects.		foreach ($this->_objects as $object)		{			// Call the method for the object.			$return[] = $object->jsonSerialize($serialized);		}		return $return;	}	/**	 * Gets the key of the current object in the iterator.	 *	 * @return  scalar  The object key on success; null on failure.	 *	 * @since   12.3	 */	public function key()	{		return $this->_current;	}	/**	 * Gets the array of keys for all the objects in the iterator (emulates array_keys).	 *	 * @return  array  The array of keys	 *	 * @since   12.3	 */	public function keys()	{		return array_keys($this->_objects);	}	/**	 * Advances the iterator to the next object in the iterator.	 *	 * @return  void	 *	 * @since   12.3	 */	public function next()	{		// Get the object offsets.		$keys = $this->keys();		// Check if _current has been set to false but offsetUnset.		if ($this->_current === false && isset($keys[0]))		{			// This is a special case where offsetUnset was used in a foreach loop and the first element was unset.			$this->_current = $keys[0];		}		else		{			// Get the current key.			$position = array_search($this->_current, $keys);			// Check if there is an object after the current object.			if ($position !== false && isset($keys[$position + 1]))			{				// Get the next id.				$this->_current = $keys[$position + 1];			}			else			{				// That was the last object or the internal properties have become corrupted.				$this->_current = null;			}		}	}	/**	 * Checks whether an offset exists in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 *	 * @return  boolean  True if the object exists, false otherwise.	 *	 * @since   12.3	 */	public function offsetExists($offset)	{		return isset($this->_objects[$offset]);	}	/**	 * Gets an offset in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 *	 * @return  JData  The object if it exists, null otherwise.	 *	 * @since   12.3	 */	public function offsetGet($offset)	{		return isset($this->_objects[$offset]) ? $this->_objects[$offset] : null;	}	/**	 * Sets an offset in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 * @param   JData  $object  The object object.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  InvalidArgumentException if an object is not an instance of JData.	 */	public function offsetSet($offset, $object)	{		// Check if the object is a JData object.		if (!($object instanceof JData))		{			throw new InvalidArgumentException(sprintf('%s("%s", *%s*)', __METHOD__, $offset, gettype($object)));		}		// Set the offset.		$this->_objects[$offset] = $object;	}	/**	 * Unsets an offset in the iterator.	 *	 * @param   mixed  $offset  The object offset.	 *	 * @return  void	 *	 * @since   12.3	 */	public function offsetUnset($offset)	{		if (!$this->offsetExists($offset))		{			// Do nothing if the offset does not exist.			return;		}		// Check for special handling of unsetting the current position.		if ($offset == $this->_current)		{			// Get the current position.			$keys = $this->keys();			$position = array_search($this->_current, $keys);			// Check if there is an object before the current object.			if ($position > 0)			{				// Move the current position back one.				$this->_current = $keys[$position - 1];			}			else			{				// We are at the start of the keys AND let's assume we are in a foreach loop and `next` is going to be called.				$this->_current = false;			}		}		unset($this->_objects[$offset]);	}	/**	 * Rewinds the iterator to the first object.	 *	 * @return  void	 *	 * @since   12.3	 */	public function rewind()	{		// Set the current position to the first object.		if (empty($this->_objects))		{			$this->_current = false;		}		else		{			$keys = $this->keys();			$this->_current = array_shift($keys);		}	}	/**	 * Validates the iterator.	 *	 * @return  boolean  True if valid, false otherwise.	 *	 * @since   12.3	 */	public function valid()	{		// Check the current position.		if (!is_scalar($this->_current) || !isset($this->_objects[$this->_current]))		{			return false;		}		return true;	}	/**	 * Initialises the list with an array of objects.	 *	 * @param   array  $input  An array of objects.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  InvalidArgumentException if an object is not an instance of JData.	 */	private function _initialise(array $input = array())	{		foreach ($input as $key => $object)		{			if (!is_null($object))			{				$this->offsetSet($key, $object);			}		}		$this->rewind();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform long">	<legend><?php echo JText::_('COM_CONFIG_METADATA_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('metadata') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>			</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.language.help');?><form action="<?php echo JRoute::_('index.php?option=com_admin&amp;view=help'); ?>" method="post" name="adminForm" id="adminForm"><div class="width-40 fltlft">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_ADMIN_SEARCH'); ?></legend>		<input class="textarea" type="hidden" name="option" value="com_admin" />		<input type="text" name="helpsearch" size="40"  value="<?php echo $this->escape($this->help_search);?>" class="inputbox" />		<input type="submit" value="<?php echo JText::_('COM_ADMIN_GO'); ?>" class="button" />		<input type="button" value="<?php echo JText::_('COM_ADMIN_CLEAR_RESULTS'); ?>" class="button" onclick="f=document.adminForm;f.helpsearch.value='';f.submit()" />	</fieldset></div><div class="width-50 fltrt helplinks">	<ul class="helpmenu">		<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_GLOSSARY'), JText::_('COM_ADMIN_GLOSSARY'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', 'http://www.gnu.org/licenses/gpl-2.0.html', JText::_('COM_ADMIN_LICENSE'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', $this->latest_version_check, JText::_('COM_ADMIN_LATEST_VERSION_CHECK'), array('target' => 'helpFrame')) ?></li>		<li><?php echo JHtml::_('link', JHelp::createUrl('JHELP_START_HERE'), JText::_('COM_ADMIN_START_HERE'), array('target' => 'helpFrame')) ?></li>	</ul></div><div class="clr"> </div>	<div id="treecellhelp" class="width-20 fltleft">		<fieldset class="adminform whitebg" title="<?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?>">			<legend><?php echo JText::_('COM_ADMIN_ALPHABETICAL_INDEX'); ?></legend>			<div class="helpIndex">				<ul class="subext">					<?php foreach ($this->toc as $k => $v):?>						<li>						    <?php $url = JHelp::createUrl('JHELP_'.strtoupper($k)); ?>							<?php echo JHtml::_('link', $url, $v, array('target' => 'helpFrame'));?>						</li>					<?php endforeach;?>				</ul>			</div>		</fieldset>	</div>	<div id="datacellhelp" class="width-80 fltrt">		<fieldset title="<?php echo JText::_('COM_ADMIN_VIEW'); ?>">			<legend>				<?php echo JText::_('COM_ADMIN_VIEW'); ?>			</legend>				<iframe name="helpFrame" src="<?php echo $this->page;?>" class="helpFrame"></iframe>		</fieldset>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * OpenSearch View class for the Search component * * @package     Joomla.Site * @subpackage  Search * @since       1.7 */class SearchViewSearch extends JViewLegacy{	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_search');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base().'index.php?option=com_search&searchword={searchTerms}';		// Find the menu item for the search		$menu	= $app->getMenu();		$items	= $menu->getItems('link', 'index.php?option=com_search&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid='.$items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewHelp extends JViewLegacy{	/**	 * @var string the search string	 */	protected $help_search = null;	/**	 * @var string the page to be viewed	 */	protected $page = null;	/**	 * @var string the iso language tag	 */	protected $lang_tag = null;	/**	 * @var array Table of contents	 */	protected $toc = null;	/**	 * @var string url for the latest version check	 */	protected $latest_version_check = 'http://www.joomla.org/download.html';	/**	 * @var string url for the start here link.	 */	protected $start_here = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->help_search			= $this->get('HelpSearch');		$this->page					= $this->get('Page');		$this->toc					= $this->get('Toc');		$this->lang_tag				= $this->get('LangTag');		$this->latest_version_check	= $this->get('LatestVersionCheck');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_HELP'), 'help_header.png');	}}
<?php/** * @package     Joomla.Plugin * @subpackage  User.profile * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('radio');/** * Provides input for TOS * * @package     Joomla.Plugin * @subpackage  User.profile * @since       2.5.5 */class JFormFieldTos extends JFormFieldRadio{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5.5	 */	protected $type = 'Tos';	/**	 * Method to get the field label markup.	 *	 * @return  string  The field label markup.	 *	 * @since   2.5.5	 */	protected function getLabel()	{		$label = '';		if ($this->hidden)		{			return $label;		}		// Get the label text from the XML element, defaulting to the element name.		$text = $this->element['label'] ? (string) $this->element['label'] : (string) $this->element['name'];		$text = $this->translateLabel ? JText::_($text) : $text;		// Set required to true as this field is not displayed at all if not required.		$this->required = true;		// Add CSS and JS for the TOS field		$doc = JFactory::getDocument();		$css = "#jform_profile_tos {width: 18em; margin: 0 !important; padding: 0 2px !important;}				#jform_profile_tos input {margin:0 5px 0 0 !important; width:10px !important;}				#jform_profile_tos label {margin:0 15px 0 0 !important; width:auto;}				";		$doc->addStyleDeclaration($css);		JHtml::_('behavior.modal');		// Build the class for the label.		$class = !empty($this->description) ? 'hasTip' : '';		$class = $class . ' required';		$class = !empty($this->labelClass) ? $class . ' ' . $this->labelClass : $class;		// Add the opening label tag and main attributes attributes.		$label .= '<label id="' . $this->id . '-lbl" for="' . $this->id . '" class="' . $class . '"';		// If a description is specified, use it to build a tooltip.		if (!empty($this->description))		{			$label .= ' title="'				. htmlspecialchars(				trim($text, ':') . '::' . ($this->translateDescription ? JText::_($this->description) : $this->description),				ENT_COMPAT, 'UTF-8'			) . '"';		}		$tosarticle = $this->element['article'] ? (int) $this->element['article'] : 1;		$link = '<a class="modal" title="" href="index.php?option=com_content&amp;view=article&amp;layout=modal&amp;id=' . $tosarticle . '&amp;tmpl=component" rel="{handler: \'iframe\', size: {x:800, y:500}}">' . $text . '</a>';		// Add the label text and closing tag.		$label .= '>' . $link . '<span class="star">&#160;*</span></label>';		return $label;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input Files Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputFiles extends JInput{	protected $decodedData = array();	/**	 * Constructor.	 *	 * @param   array  $source   Ignored.	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Set the data source.		$this->data = & $_FILES;		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets a value from the input data.	 *	 * @param   string  $name     Name of the value to get.	 * @param   mixed   $default  Default value to return if variable does not exist.	 * @param   string  $filter   Filter to apply to the value.	 *	 * @return  mixed  The filtered input value.	 *	 * @since   11.1	 */	public function get($name, $default = null, $filter = 'cmd')	{		if (isset($this->data[$name]))		{			$results = $this->decodeData(				array(					$this->data[$name]['name'],					$this->data[$name]['type'],					$this->data[$name]['tmp_name'],					$this->data[$name]['error'],					$this->data[$name]['size']				)			);			return $results;		}		return $default;	}	/**	 * Method to decode a data array.	 *	 * @param   array  $data  The data array to decode.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function decodeData(array $data)	{		$result = array();		if (is_array($data[0]))		{			foreach ($data[0] as $k => $v)			{				$result[$k] = $this->decodeData(array($data[0][$k], $data[1][$k], $data[2][$k], $data[3][$k], $data[4][$k]));			}			return $result;		}		return array('name' => $data[0], 'type' => $data[1], 'tmp_name' => $data[2], 'error' => $data[3], 'size' => $data[4]);	}	/**	 * Sets a value	 *	 * @param   string  $name   Name of the value to set.	 * @param   mixed   $value  Value to assign to the input.	 *	 * @return  void	 *	 * @since   11.1	 */	public function set($name, $value)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages list actions controller. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesControllerLanguage extends JControllerForm{	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   int      $recordId  The primary key id for the item.	 * @param   string  $key        The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   1.6	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'lang_id')	{		return parent::getRedirectToItemAppend($recordId, $key);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extension object * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerExtension extends JObject{	/**	 * Filename of the extension	 *	 * @var    string	 * @since  3.1	 */	public $filename = '';	/**	 * Type of the extension	 *	 * @var    string	 * @since  3.1	 */	public $type = '';	/**	 * Unique Identifier for the extension	 *	 * @var    string	 * @since  3.1	 */	public $id = '';	/**	 * The status of the extension	 *	 * @var    boolean	 * @since  3.1	 */	public $published = false;	/**	 * String representation of client. Valid for modules, templates and languages.	 * Set by default to site.	 *	 * @var    string	 * @since  3.1	 */	public $client = 'site';	/**	 * The group name of the plugin. Not used for other known extension types (only plugins)	 *	 * @var string	 * @since  3.1	 */	public $group = '';	/**	 * An object representation of the manifest file stored metadata	 *	 * @var object	 * @since  3.1	 */	public $manifest_cache = null;	/**	 * An object representation of the extension params	 *	 * @var    object	 * @since  3.1	 */	public $params = null;	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		if ($element)		{			$this->type = (string) $element->attributes()->type;			$this->id = (string) $element->attributes()->id;			switch ($this->type)			{				case 'component':					// By default a component doesn't have anything					break;				case 'module':				case 'template':				case 'language':					$this->client = (string) $element->attributes()->client;					$tmp_client_id = JApplicationHelper::getClientInfo($this->client, 1);					if ($tmp_client_id == null)					{						JLog::add(JText::_('JLIB_INSTALLER_ERROR_EXTENSION_INVALID_CLIENT_IDENTIFIER'), JLog::WARNING, 'jerror');					}					else					{						$this->client_id = $tmp_client_id->id;					}					break;				case 'plugin':					$this->group = (string) $element->attributes()->group;					break;				default:					// Catch all					// Get and set client and group if we don't recognise the extension					if ($element->attributes()->client)					{						$this->client_id = JApplicationHelper::getClientInfo($this->client, 1);						$this->client_id = $this->client_id->id;					}					if ($element->attributes()->group)					{						$this->group = (string) $element->attributes()->group;					}					break;			}			$this->filename = (string) $element;		}	}}/** * Deprecated class placeholder. You should use JInstallerExtension instead. * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 * @deprecated  4.0 * @codeCoverageIgnore */class JExtension extends JInstallerExtension{	/**	 * Constructor	 *	 * @param   SimpleXMLElement  $element  A SimpleXMLElement from which to load data from	 *	 * @since  3.1	 */	public function __construct(SimpleXMLElement $element = null)	{		parent::__construct($element);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Joomla! Formatted Text File Log class * * This class is designed to use as a base for building formatted text files for output. By * default it emulates the Syslog style format output. This is a disk based output format. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerFormattedtext extends JLogLogger{	/**	 * @var    resource  The file pointer for the log file.	 * @since  11.1	 */	protected $file;	/**	 * @var    string  The format for which each entry follows in the log file.  All fields must be named	 * in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATETIME}	{PRIORITY}	{CATEGORY}	{MESSAGE}';	/**	 * @var    array  The parsed fields from the format string.	 * @since  11.1	 */	protected $fields = array();	/**	 * @var    string  The full filesystem path for the log file.	 * @since  11.1	 */	protected $path;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// The name of the text file defaults to 'error.php' if not explicitly given.		if (empty($this->options['text_file']))		{			$this->options['text_file'] = 'error.php';		}		// The name of the text file path defaults to that which is set in configuration if not explicitly given.		if (empty($this->options['text_file_path']))		{			$this->options['text_file_path'] = JFactory::getConfig()->get('log_path');		}		// False to treat the log file as a php file.		if (empty($this->options['text_file_no_php']))		{			$this->options['text_file_no_php'] = false;		}		// Build the full path to the log file.		$this->path = $this->options['text_file_path'] . '/' . $this->options['text_file'];		// Use the default entry format unless explicitly set otherwise.		if (!empty($this->options['text_entry_format']))		{			$this->format = (string) $this->options['text_entry_format'];		}		// Build the fields array based on the format string.		$this->parseFields();	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		if (is_resource($this->file))		{			fclose($this->file);		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function addEntry(JLogEntry $entry)	{		// Initialise the file if not already done.		if (!is_resource($this->file))		{			$this->initFile();		}		// Set some default field values if not already set.		if (!isset($entry->clientIP))		{			// Check for proxies as well.			if (isset($_SERVER['REMOTE_ADDR']))			{				$entry->clientIP = $_SERVER['REMOTE_ADDR'];			}			elseif (isset($_SERVER['HTTP_X_FORWARDED_FOR']))			{				$entry->clientIP = $_SERVER['HTTP_X_FORWARDED_FOR'];			}			elseif (isset($_SERVER['HTTP_CLIENT_IP']))			{				$entry->clientIP = $_SERVER['HTTP_CLIENT_IP'];			}		}		// If the time field is missing or the date field isn't only the date we need to rework it.		if ((strlen($entry->date) != 10) || !isset($entry->time))		{			// Get the date and time strings in GMT.			$entry->datetime = $entry->date->toISO8601();			$entry->time = $entry->date->format('H:i:s', false);			$entry->date = $entry->date->format('Y-m-d', false);		}		// Get a list of all the entry keys and make sure they are upper case.		$tmp = array_change_key_case(get_object_vars($entry), CASE_UPPER);		// Decode the entry priority into an English string.		$tmp['PRIORITY'] = $this->priorities[$entry->priority];		// Fill in field data for the line.		$line = $this->format;		foreach ($this->fields as $field)		{			$line = str_replace('{' . $field . '}', (isset($tmp[$field])) ? $tmp[$field] : '-', $line);		}		// Write the new entry to the file.		if (!fwrite($this->file, $line . "\n"))		{			throw new RuntimeException('Cannot write to log file.');		}	}	/**	 * Method to generate the log file header.	 *	 * @return  string  The log file header	 *	 * @since   11.1	 */	protected function generateFileHeader()	{		$head = array();		// Build the log file header.		// If the no php flag is not set add the php die statement.		if (empty($this->options['text_file_no_php']))		{			// Blank line to prevent information disclose: https://bugs.php.net/bug.php?id=60677			$head[] = '#';			$head[] = '#<?php die(\'Forbidden.\'); ?>';		}		$head[] = '#Date: ' . gmdate('Y-m-d H:i:s') . ' UTC';		$head[] = '#Software: ' . JPlatform::getLongVersion();		$head[] = '';		// Prepare the fields string		$head[] = '#Fields: ' . strtolower(str_replace('}', '', str_replace('{', '', $this->format)));		$head[] = '';		return implode("\n", $head);	}	/**	 * Method to initialise the log file.  This will create the folder path to the file if it doesn't already	 * exist and also get a new file header if the file doesn't already exist.  If the file already exists it	 * will simply open it for writing.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function initFile()	{		// If the file doesn't already exist we need to create it and generate the file header.		if (!is_file($this->path))		{			// Make sure the folder exists in which to create the log file.			JFolder::create(dirname($this->path));			// Build the log file header.			$head = $this->generateFileHeader();		}		else		{			$head = false;		}		// Open the file for writing (append mode).		if (!$this->file = fopen($this->path, 'a'))		{			throw new RuntimeException('Cannot open file for writing log');		}		if ($head)		{			if (!fwrite($this->file, $head))			{				throw new RuntimeException('Cannot fput file for log');			}		}	}	/**	 * Method to parse the format string into an array of fields.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseFields()	{		$this->fields = array();		$matches = array();		// Get all of the available fields in the format string.		preg_match_all("/{(.*?)}/i", $this->format, $matches);		// Build the parsed fields list based on the found fields.		foreach ($matches[1] as $match)		{			$this->fields[] = strtoupper($match);		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	public function __construct($config = array())	{		$this->input = JFactory::getApplication()->input;		// Article frontpage Editor pagebreak proxying:		if ($this->input->get('view') === 'article' && $this->input->get('layout') === 'pagebreak')		{			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		// Article frontpage Editor article proxying:		elseif ($this->input->get('view') === 'articles' && $this->input->get('layout') === 'modal')		{			JHtml::_('stylesheet', 'system/adminlist.css', array(), true);			$config['base_path'] = JPATH_COMPONENT_ADMINISTRATOR;		}		parent::__construct($config);	}	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		// Note we are using a_id to avoid collisions with the router and the return page.		// Frontend is a bit messier than the backend.		$id    = $this->input->getInt('a_id');		$vName = $this->input->getCmd('view', 'categories');		$this->input->set('view', $vName);		$user = JFactory::getUser();		if ($user->get('id') ||			($this->input->getMethod() == 'POST' &&				(($vName == 'category' && $this->input->get('layout') != 'blog') || $vName == 'archive' )))		{			$cachable = false;		}		$safeurlparams = array('catid' => 'INT', 'id' => 'INT', 'cid' => 'ARRAY', 'year' => 'INT', 'month' => 'INT', 'limit' => 'UINT', 'limitstart' => 'UINT',			'showall' => 'INT', 'return' => 'BASE64', 'filter' => 'STRING', 'filter_order' => 'CMD', 'filter_order_Dir' => 'CMD', 'filter-search' => 'STRING', 'print' => 'BOOLEAN', 'lang' => 'CMD', 'Itemid' => 'INT');		// Check for edit form.		if ($vName == 'form' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			return JError::raiseError(403, JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));		}		parent::display($cachable, $safeurlparams);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Rijndael 256 encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherRijndael256 extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_RIJNDAEL_256;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = 'rijndael256';}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$html = JHtml::_('icons.buttons', $buttons);?><?php if (!empty($html)): ?>	<div class="cpanel">		<?php echo $html;?>	</div><?php endif;?>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_newsfeeds.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Factory class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseFactory{	/**	 * Contains the current JDatabaseFactory instance	 *	 * @var    JDatabaseFactory	 * @since  12.1	 */	private static $_instance = null;	/**	 * Method to return a JDatabaseDriver instance based on the given options. There are three global options and then	 * the rest are specific to the database driver. The 'database' option determines which database is to	 * be used for the connection. The 'select' option determines whether the connector should automatically select	 * the chosen database.	 *	 * Instances are unique to the given options and new objects are only created when a unique options array is	 * passed into the method.  This ensures that we don't end up with unnecessary database connection resources.	 *	 * @param   string  $name     Name of the database driver you'd like to instantiate	 * @param   array   $options  Parameters to be passed to the database driver.	 *	 * @return  JDatabaseDriver  A database driver object.	 *	 * @since   12.1	 */	public function getDriver($name = 'mysqli', $options = array())	{		// Sanitize the database connector options.		$options['driver']   = preg_replace('/[^A-Z0-9_\.-]/i', '', $name);		$options['database'] = (isset($options['database'])) ? $options['database'] : null;		$options['select']   = (isset($options['select'])) ? $options['select'] : true;		// Derive the class name from the driver.		$class = 'JDatabaseDriver' . ucfirst(strtolower($options['driver']));		// If the class still doesn't exist we have nothing left to do but throw an exception.  We did our best.		if (!class_exists($class))		{			throw new RuntimeException(sprintf('Unable to load Database Driver: %s', $options['driver']));		}		// Create our new JDatabaseDriver connector based on the options given.		try		{			$instance = new $class($options);		}		catch (RuntimeException $e)		{			throw new RuntimeException(sprintf('Unable to connect to the Database: %s', $e->getMessage()));		}		return $instance;	}	/**	 * Gets an exporter class object.	 *	 * @param   string           $name  Name of the driver you want an exporter for.	 * @param   JDatabaseDriver  $db    Optional JDatabaseDriver instance	 *	 * @return  JDatabaseExporter  An exporter object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getExporter($name, JDatabaseDriver $db = null)	{		// Derive the class name from the driver.		$class = 'JDatabaseExporter' . ucfirst(strtolower($name));		// Make sure we have an exporter class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Exporter not found.');		}		$o = new $class;		if ($db instanceof JDatabaseDriver)		{			$o->setDbo($db);		}		return $o;	}	/**	 * Gets an importer class object.	 *	 * @param   string           $name  Name of the driver you want an importer for.	 * @param   JDatabaseDriver  $db    Optional JDatabaseDriver instance	 *	 * @return  JDatabaseImporter  An importer object.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getImporter($name, JDatabaseDriver $db = null)	{		// Derive the class name from the driver.		$class = 'JDatabaseImporter' . ucfirst(strtolower($name));		// Make sure we have an importer class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database importer not found.');		}		$o = new $class;		if ($db instanceof JDatabaseDriver)		{			$o->setDbo($db);		}		return $o;	}	/**	 * Gets an instance of the factory object.	 *	 * @return  JDatabaseFactory	 *	 * @since   12.1	 */	public static function getInstance()	{		return self::$_instance ? self::$_instance : new JDatabaseFactory;	}	/**	 * Get the current query object or a new JDatabaseQuery object.	 *	 * @param   string           $name  Name of the driver you want an importer for.	 * @param   JDatabaseDriver  $db    Optional JDatabaseDriver instance	 *	 * @return  JDatabaseQuery  The current query object or a new object extending the JDatabaseQuery class.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function getQuery($name, JDatabaseDriver $db = null)	{		// Derive the class name from the driver.		$class = 'JDatabaseQuery' . ucfirst(strtolower($name));		// Make sure we have a query class for this driver.		if (!class_exists($class))		{			// If it doesn't exist we are at an impasse so throw an exception.			throw new RuntimeException('Database Query class not found');		}		return new $class($db);	}	/**	 * Gets an instance of a factory object to return on subsequent calls of getInstance.	 *	 * @param   JDatabaseFactory  $instance  A JDatabaseFactory object.	 *	 * @return  void	 *	 * @since   12.1	 */	public static function setInstance(JDatabaseFactory $instance = null)	{		self::$_instance = $instance;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="list-striped list-condensed stats-module<?php echo $moduleclass_sfx ?>">	<?php foreach ($list as $item) : ?>		<li><i class="icon-<?php echo $item->icon;?>" title="<?php echo $item->title;?>"></i> <?php echo $item->title;?> <?php echo $item->data;?></li>	<?php endforeach; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessage extends JControllerForm{	/**	 * Method (override) to check if you can save a new or existing record.	 *	 * Adjusts for the primary key name and hands off to the parent class.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 */	protected function allowSave($data, $key = 'message_id')	{		return parent::allowSave($data, $key);	}	/**	 * Reply to an existing message.	 *	 * This is a simple redirect to the compose form.	 */	public function reply()	{		if ($replyId = $this->input->getInt('reply_id'))		{			$this->setRedirect('index.php?option=com_messages&view=message&layout=edit&reply_id=' . $replyId);		}		else		{			$this->setMessage(JText::_('COM_MESSAGES_INVALID_REPLY_ID'));			$this->setRedirect('index.php?option=com_messages&view=messages');		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');?><form action="<?php echo JRoute::_('index.php'); ?>" method="post" name="adminForm" id="adminForm">	<div class="row-fluid">		<!-- Begin Content -->		<div class="span10">			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'site')); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site', JText::_('COM_ADMIN_SYSTEM_INFORMATION', true)); ?>					<?php echo $this->loadTemplate('system'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'phpsettings', JText::_('COM_ADMIN_PHP_SETTINGS', true)); ?>					<?php echo $this->loadTemplate('phpsettings'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'config', JText::_('COM_ADMIN_CONFIGURATION_FILE', true)); ?>					<?php echo $this->loadTemplate('config'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'directory', JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS', true)); ?>					<?php echo $this->loadTemplate('directory'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>				<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'phpinfo', JText::_('COM_ADMIN_PHP_INFORMATION', true)); ?>					<?php echo $this->loadTemplate('phpinfo'); ?>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<?php echo JHtml::_('bootstrap.endTabSet'); ?>		</div>		<!-- End Content -->	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('WeblinksHelper', JPATH_ADMINISTRATOR . '/components/com_weblinks/helpers/weblinks.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Weblinks Component Association Helper * * @package     Joomla.Site * @subpackage  com_weblinks * @since       3.0 */abstract class WeblinksHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_weblinks');		}		return array();	}}
<?php/** * @package     Joomla.Installation * @subpackage  Response * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JSON Response class for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Response * @since       3.1 */class InstallationResponseJson{	/**	 * Constructor for the JSON response	 *	 * @param   mixed  $data  Exception if there is an error, otherwise, the session data	 *	 * @since   3.1	 */	public function __construct($data)	{		// The old token is invalid so send a new one.		$this->token = JSession::getFormToken(true);		// Get the language and send it's tag along		$this->lang = JFactory::getLanguage()->getTag();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && count($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		// If messages exist add them to the output		if (isset($lists) && is_array($lists))		{			$this->messages = $lists;		}		// Check if we are dealing with an error.		if ($data instanceof Exception)		{			// Prepare the error response.			$this->error   = true;			$this->header  = JText::_('INSTL_HEADER_ERROR');			$this->message = $data->getMessage();		}		else		{			// Prepare the response data.			$this->error = false;			$this->data  = $data;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Chrome Styles Form Field class for the Joomla Platform. * * @package     Joomla.Libraries * @subpackage  Form * @since       3.0 */class JFormFieldChromeStyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	public $type = 'ChromeStyle';	/**	 * Method to get the list of template chrome style options	 * grouped by template.	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   3.0	 */	protected function getGroups()	{		$groups = array();		// Add Module Style Field		$tmp = '---' . JText::_('JLIB_FORM_VALUE_FROM_TEMPLATE') . '---';		$groups[$tmp][] = JHtml::_('select.option', '0', JText::_('JLIB_FORM_VALUE_INHERITED'));		$templateStyles = $this->getTemplateModuleStyles();		// Create one new option object for each available style, grouped by templates		foreach ($templateStyles as $template => $styles)		{			$template = ucfirst($template);			$groups[$template] = array();			foreach ($styles as $style)			{				$tmp = JHtml::_('select.option', $template . '-' . $style, $style);				$groups[$template][] = $tmp;			}		}		reset($groups);		return $groups;	}	/**	 * Method to get the templates module styles.	 *	 * @return  array  The array of styles, grouped by templates.	 *	 * @since   3.0	 */	protected function getTemplateModuleStyles()	{		$moduleStyles = array();		$templates = array($this->getSystemTemplate());		$templates = array_merge($templates, ModulesHelper::getTemplates('site'));		foreach ($templates as $template)		{			$modulesFilePath = JPATH_SITE . '/templates/' . $template->element . '/html/modules.php';			// Is there modules.php for that template?			if (file_exists($modulesFilePath))			{				$modulesFileData = file_get_contents($modulesFilePath);				preg_match_all('/function[\s\t]*modChrome\_([a-z0-9\-\_]*)[\s\t]*\(/i', $modulesFileData, $styles);				if (!array_key_exists($template->element, $moduleStyles))				{					$moduleStyles[$template->element] = array();				}				$moduleStyles[$template->element] = $styles[1];			}		}		return $moduleStyles;	}	/**	 * Method to get the system template as an object.	 *	 * @return  array  The object of system template.	 *	 * @since   3.0	 */	protected function getSystemTemplate()	{		$template = new stdClass;		$template->element = 'system';		$template->name    = 'system';		$template->enabled = 1;		return $template;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Milestones class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubMilestones extends JGithubObject{	/**	 * Method to get the list of milestones for a repo.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $state      The milestone state to retrieved.  Open (default) or closed.	 * @param   string   $sort       Sort can be due_date (default) or completeness.	 * @param   string   $direction  Direction is asc or desc (default).	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getList($user, $repo, $state = 'open', $sort = 'due_date', $direction = 'desc', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones?';		$path .= 'state=' . $state;		$path .= '&sort=' . $sort;		$path .= '&direction=' . $direction;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The milestone id to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function get($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a milestone for a repository.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $title        The title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function create($user, $repo, $title, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones';		// Build the request data.		$data = array(			'title' => $title		);		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the comment to update.	 * @param   integer  $title        Optional title of the milestone.	 * @param   string   $state        Can be open (default) or closed.	 * @param   string   $description  Optional description for milestone.	 * @param   string   $due_on       Optional ISO 8601 time.	 *	 * @return  object	 *	 * @since   12.3	 */	public function edit($user, $repo, $milestoneId, $title = null, $state = null, $description = null, $due_on = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Build the request data.		$data = array();		if (!is_null($title))		{			$data['title'] = $title;		}		if (!is_null($state))		{			$data['state'] = $state;		}		if (!is_null($description))		{			$data['description'] = $description;		}		if (!is_null($due_on))		{			$data['due_on'] = $due_on;		}		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a milestone.	 *	 * @param   string   $user         The name of the owner of the GitHub repository.	 * @param   string   $repo         The name of the GitHub repository.	 * @param   integer  $milestoneId  The id of the milestone to delete.	 *	 * @return  void	 *	 * @since   12.3	 */	public function delete($user, $repo, $milestoneId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/milestones/' . (int) $milestoneId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Pathway * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Pathway * @since       11.1 */class JPathway{	/**	 * @var    array  Array to hold the pathway item objects	 * @since  11.1	 */	protected $_pathway = array();	/**	 * @var    integer  Integer number of items in the pathway	 * @since  11.1	 */	protected $_count = 0;	/**	 * @var    array  JPathway instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  The class options.	 *	 * @since   11.1	 */	public function __construct($options = array())	{	}	/**	 * Returns a JPathway object	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JPathway  A JPathway object.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JPathway object			$classname = 'JPathway' . ucfirst($client);			if (!class_exists($classname))			{				JLog::add('Non-autoloadable JPathway subclasses are deprecated.', JLog::WARNING, 'deprecated');				// Load the pathway object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/pathway.php';					if (file_exists($path))					{						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new RuntimeException(JText::sprintf('JLIB_APPLICATION_ERROR_PATHWAY_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Return the JPathWay items array	 *	 * @return  array  Array of pathway items	 *	 * @since   11.1	 */	public function getPathway()	{		$pw = $this->_pathway;		// Use array_values to reset the array keys numerically		return array_values($pw);	}	/**	 * Set the JPathway items array.	 *	 * @param   array  $pathway  An array of pathway objects.	 *	 * @return  array  The previous pathway data.	 *	 * @since   11.1	 */	public function setPathway($pathway)	{		$oldPathway = $this->_pathway;		// Set the new pathway.		$this->_pathway = array_values((array) $pathway);		return array_values($oldPathway);	}	/**	 * Create and return an array of the pathway names.	 *	 * @return  array  Array of names of pathway items	 *	 * @since   11.1	 */	public function getPathwayNames()	{		$names = array();		// Build the names array using just the names of each pathway item		foreach ($this->_pathway as $item)		{			$names[] = $item->name;		}		// Use array_values to reset the array keys numerically		return array_values($names);	}	/**	 * Create and add an item to the pathway.	 *	 * @param   string  $name  The name of the item.	 * @param   string  $link  The link to the item.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function addItem($name, $link = '')	{		$ret = false;		if ($this->_pathway[] = $this->_makeItem($name, $link))		{			$ret = true;			$this->_count++;		}		return $ret;	}	/**	 * Set item name.	 *	 * @param   integer  $id    The id of the item on which to set the name.	 * @param   string   $name  The name to set.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function setItemName($id, $name)	{		$ret = false;		if (isset($this->_pathway[$id]))		{			$this->_pathway[$id]->name = $name;			$ret = true;		}		return $ret;	}	/**	 * Create and return a new pathway object.	 *	 * @param   string  $name  Name of the item	 * @param   string  $link  Link to the item	 *	 * @return  JPathway  Pathway item object	 *	 * @since   11.1	 */	protected function _makeItem($name, $link)	{		$item = new stdClass;		$item->name = html_entity_decode($name, ENT_COMPAT, 'UTF-8');		$item->link = $link;		return $item;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$serverinfo = $params->get('serverinfo');$siteinfo	= $params->get('siteinfo');$list = ModStatsHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_stats', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_syndicate * * @package     Joomla.Site * @subpackage  mod_syndicate * @since       1.5 */class ModSyndicateHelper{	public static function getLink(&$params)	{		$document = JFactory::getDocument();		foreach ($document->_links as $link => $value)		{			$value = JArrayHelper::toString($value);			if (strpos($value, 'application/'.$params->get('format').'+xml'))			{				return $link;			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Finder route helper class. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderHelperRoute{	/**	 * Method to get the route for a search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The search route.	 *	 * @since   2.5	 */	public static function getSearchRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'search', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=search'));		// Add the pre-defined search filter if present.		if ($f !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the route for an advanced search page.	 *	 * @param   integer  $f  The search filter id. [optional]	 * @param   string   $q  The search query string. [optional]	 *	 * @return  string  The advanced search route.	 *	 * @since   2.5	 */	public static function getAdvancedRoute($f = null, $q = null)	{		// Get the menu item id.		$query = array('view' => 'advanced', 'q' => $q, 'f' => $f);		$item = self::getItemid($query);		// Get the base route.		$uri = clone(JUri::getInstance('index.php?option=com_finder&view=advanced'));		// Add the pre-defined search filter if present.		if ($q !== null)		{			$uri->setVar('f', $f);		}		// Add the search query string if present.		if ($q !== null)		{			$uri->setVar('q', $q);		}		// Add the menu item id if present.		if ($item !== null)		{			$uri->setVar('Itemid', $item);		}		return $uri->toString(array('path', 'query'));	}	/**	 * Method to get the most appropriate menu item for the route based on the	 * supplied query needles.	 *	 * @param   array  $query  An array of URL parameters.	 *	 * @return  mixed  An integer on success, null otherwise.	 *	 * @since   2.5	 */	public static function getItemid($query)	{		static $items, $active;		// Get the menu items for com_finder.		if (!$items || !$active)		{			$app = JFactory::getApplication('site');			$com = JComponentHelper::getComponent('com_finder');			$menu = $app->getMenu();			$active = $menu->getActive();			$items = $menu->getItems('component_id', $com->id);			$items = is_array($items) ? $items : array();		}		// Try to match the active view and filter.		if ($active && @$active->query['view'] == @$query['view'] && @$active->query['f'] == @$query['f'])		{			return $active->id;		}		// Try to match the view, query, and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['q'] == @$query['q'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view and filter.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'] && @$item->query['f'] == @$query['f'])			{				return $item->id;			}		}		// Try to match the view.		foreach ($items as $item)		{			if (@$item->query['view'] == @$query['view'])			{				return $item->id;			}		}		return null;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRules class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRules{	/**	 * A named array.	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array('action' => array(-42 => true, 3 => true, 4 => false))	 * or an equivalent JSON encoded string, or an object where properties are arrays.	 *	 * @param   mixed  $input  A JSON format string (probably from the database) or a nested array.	 *	 * @since   11.1	 */	public function __construct($input = '')	{		// Convert in input to an array.		if (is_string($input))		{			$input = json_decode($input, true);		}		elseif (is_object($input))		{			$input = (array) $input;		}		if (is_array($input))		{			// Top level keys represent the actions.			foreach ($input as $action => $identities)			{				$this->mergeAction($action, $identities);			}		}	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array of JAccessRule objects.	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Method to merge a collection of JAccessRules.	 *	 * @param   mixed  $input  JAccessRule or array of JAccessRules	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeCollection($input)	{		// Check if the input is an array.		if (is_array($input))		{			foreach ($input as $actions)			{				$this->merge($actions);			}		}	}	/**	 * Method to merge actions with this object.	 *	 * @param   mixed  $actions  JAccessRule object, an array of actions or a JSON string array of actions.	 *	 * @return  void	 *	 * @since   11.1	 */	public function merge($actions)	{		if (is_string($actions))		{			$actions = json_decode($actions, true);		}		if (is_array($actions))		{			foreach ($actions as $action => $identities)			{				$this->mergeAction($action, $identities);			}		}		elseif ($actions instanceof JAccessRules)		{			$data = $actions->getData();			foreach ($data as $name => $identities)			{				$this->mergeAction($name, $identities);			}		}	}	/**	 * Merges an array of identities for an action.	 *	 * @param   string  $action      The name of the action.	 * @param   array   $identities  An array of identities	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeAction($action, $identities)	{		if (isset($this->data[$action]))		{			// If exists, merge the action.			$this->data[$action]->mergeIdentities($identities);		}		else		{			// If new, add the action.			$this->data[$action] = new JAccessRule($identities);		}	}	/**	 * Checks that an action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   string  $action    The name of the action.	 * @param   mixed   $identity  An integer representing the identity, or an array of identities	 *	 * @return  mixed   Object or null if there is no information about the action.	 *	 * @since   11.1	 */	public function allow($action, $identity)	{		// Check we have information about this action.		if (isset($this->data[$action]))		{			return $this->data[$action]->allow($identity);		}		return null;	}	/**	 * Get the allowed actions for an identity.	 *	 * @param   mixed  $identity  An integer representing the identity or an array of identities	 *	 * @return  object  Allowed actions for the identity or identities	 *	 * @since   11.1	 */	public function getAllowed($identity)	{		// Sweep for the allowed actions.		$allowed = new JObject;		foreach ($this->data as $name => &$action)		{			if ($action->allow($identity))			{				$allowed->set($name, true);			}		}		return $allowed;	}	/**	 * Magic method to convert the object to JSON string representation.	 *	 * @return  string  JSON representation of the actions array	 *	 * @since   11.1	 */	public function __toString()	{		$temp = array();		foreach ($this->data as $name => $rule)		{			// Convert the action to JSON, then back into an array otherwise			// re-encoding will quote the JSON for the identities in the action.			$temp[$name] = json_decode((string) $rule);		}		return json_encode($temp);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('phpmailer.phpmailer');/** * Email Class.  Provides a common interface to send email from the Joomla! Platform * * @package     Joomla.Platform * @subpackage  Mail * @since       11.1 */class JMail extends PHPMailer{	/**	 * @var    array  JMail instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * @var    string  Charset of the message.	 * @since  11.1	 */	public $CharSet = 'utf-8';	/**	 * Constructor	 */	public function __construct()	{		// PHPMailer has an issue using the relative path for its language files		$this->SetLanguage('joomla', JPATH_PLATFORM . '/phpmailer/language/');	}	/**	 * Returns the global email object, only creating it	 * if it doesn't already exist.	 *	 * NOTE: If you need an instance to use that does not have the global configuration	 * values, use an id string that is not 'Joomla'.	 *	 * @param   string  $id  The id string for the JMail instance [optional]	 *	 * @return  JMail  The global JMail object	 *	 * @since   11.1	 */	public static function getInstance($id = 'Joomla')	{		if (empty(self::$instances[$id]))		{			self::$instances[$id] = new JMail;		}		return self::$instances[$id];	}	/**	 * Send the mail	 *	 * @return  mixed  True if successful; JError if using legacy tree (no exception thrown in that case).	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function Send()	{		if (($this->Mailer == 'mail') && !function_exists('mail'))		{			if (class_exists('JError'))			{				return JError::raiseNotice(500, JText::_('JLIB_MAIL_FUNCTION_DISABLED'));			}			else			{				throw new RuntimeException(sprintf('%s::Send mail not enabled.', get_class($this)));			}		}		@$result = parent::Send();		if ($result == false)		{			if (class_exists('JError'))			{				$result = JError::raiseNotice(500, JText::_($this->ErrorInfo));			}			else			{				throw new RuntimeException(sprintf('%s::Send failed: "%s".', get_class($this), $this->ErrorInfo));			}		}		return $result;	}	/**	 * Set the email sender	 *	 * @param   array  $from  email address and Name of sender	 *                        <code>array([0] => email Address [1] => Name)</code>	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSender($from)	{		if (is_array($from))		{			// If $from is an array we assume it has an address and a name			if (isset($from[2]))			{				// If it is an array with entries, use them				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]), (bool) $from[2]);			}			else			{				$this->SetFrom(JMailHelper::cleanLine($from[0]), JMailHelper::cleanLine($from[1]));			}		}		elseif (is_string($from))		{			// If it is a string we assume it is just the address			$this->SetFrom(JMailHelper::cleanLine($from));		}		else		{			// If it is neither, we throw a warning			JLog::add(JText::sprintf('JLIB_MAIL_INVALID_EMAIL_SENDER', $from), JLog::WARNING, 'jerror');		}		return $this;	}	/**	 * Set the email subject	 *	 * @param   string  $subject  Subject of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setSubject($subject)	{		$this->Subject = JMailHelper::cleanLine($subject);		return $this;	}	/**	 * Set the email body	 *	 * @param   string  $content  Body of the email	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function setBody($content)	{		/*		 * Filter the Body		 * TODO: Check for XSS		 */		$this->Body = JMailHelper::cleanText($content);		return $this;	}	/**	 * Add recipients to the email.	 *	 * @param   mixed   $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed   $name       Either a string or array of strings [name(s)]	 * @param   string  $method     The parent method's name.	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	protected function add($recipient, $name = '', $method = 'AddAddress')	{		// If the recipient is an array, add each recipient... otherwise just add the one		if (is_array($recipient))		{			if (is_array($name))			{				$combined = array_combine($recipient, $name);				if ($combined === false)				{					throw new InvalidArgumentException("The number of elements for each array isn't equal.");				}				foreach ($combined as $recipientEmail => $recipientName)				{					$recipientEmail = JMailHelper::cleanLine($recipientEmail);					$recipientName = JMailHelper::cleanLine($recipientName);					call_user_func('parent::' . $method, $recipientEmail, $recipientName);				}			}			else			{				$name = JMailHelper::cleanLine($name);				foreach ($recipient as $to)				{					$to = JMailHelper::cleanLine($to);					call_user_func('parent::' . $method, $to, $name);				}			}		}		else		{			$recipient = JMailHelper::cleanLine($recipient);			call_user_func('parent::' . $method, $recipient, $name);		}		return $this;	}	/**	 * Add recipients to the email	 *	 * @param   mixed  $recipient  Either a string or array of strings [email address(es)]	 * @param   mixed  $name       Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addRecipient($recipient, $name = '')	{		$this->add($recipient, $name, 'AddAddress');		return $this;	}	/**	 * Add carbon copy recipients to the email	 *	 * @param   mixed  $cc    Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addCC($cc, $name = '')	{		// If the carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($cc))		{			$this->add($cc, $name, 'AddCC');		}		return $this;	}	/**	 * Add blind carbon copy recipients to the email	 *	 * @param   mixed  $bcc   Either a string or array of strings [email address(es)]	 * @param   mixed  $name  Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addBCC($bcc, $name = '')	{		// If the blind carbon copy recipient is an array, add each recipient... otherwise just add the one		if (isset($bcc))		{			$this->add($bcc, $name, 'AddBCC');		}		return $this;	}	/**	 * Add file attachments to the email	 *	 * @param   mixed  $attachment  Either a string or array of strings [filenames]	 * @param   mixed  $name        Either a string or array of strings [names]	 * @param   mixed  $encoding    The encoding of the attachment	 * @param   mixed  $type        The mime type	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	public function addAttachment($attachment, $name = '', $encoding = 'base64', $type = 'application/octet-stream')	{		// If the file attachments is an array, add each file... otherwise just add the one		if (isset($attachment))		{			if (is_array($attachment))			{				if (!empty($name) && count($attachment) != count($name))				{					throw new InvalidArgumentException("The number of attachments must be equal with the number of name");				}				foreach ($attachment as $key => $file)				{					if (!empty($name))					{						parent::AddAttachment($file, $name[$key], $encoding, $type);					}					else					{						parent::AddAttachment($file, $name, $encoding, $type);					}				}			}			else			{				parent::AddAttachment($attachment, $name, $encoding, $type);			}		}		return $this;	}	/**	 * Add Reply to email address(es) to the email	 *	 * @param   mixed  $replyto  Either a string or array of strings [email address(es)]	 * @param   mixed  $name     Either a string or array of strings [name(s)]	 *	 * @return  JMail  Returns this object for chaining.	 *	 * @since   11.1	 */	public function addReplyTo($replyto, $name = '')	{		$this->add($replyto, $name, 'AddReplyTo');		return $this;	}	/**	 * Use sendmail for sending the email	 *	 * @param   string  $sendmail  Path to sendmail [optional]	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSendmail($sendmail = null)	{		$this->Sendmail = $sendmail;		if (!empty($this->Sendmail))		{			$this->IsSendmail();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Use SMTP for sending the email	 *	 * @param   string   $auth    SMTP Authentication [optional]	 * @param   string   $host    SMTP Host [optional]	 * @param   string   $user    SMTP Username [optional]	 * @param   string   $pass    SMTP Password [optional]	 * @param   string   $secure  Use secure methods	 * @param   integer  $port    The SMTP port	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function useSMTP($auth = null, $host = null, $user = null, $pass = null, $secure = null, $port = 25)	{		$this->SMTPAuth = $auth;		$this->Host = $host;		$this->Username = $user;		$this->Password = $pass;		$this->Port = $port;		if ($secure == 'ssl' || $secure == 'tls')		{			$this->SMTPSecure = $secure;		}		if (($this->SMTPAuth !== null && $this->Host !== null && $this->Username !== null && $this->Password !== null)			|| ($this->SMTPAuth === null && $this->Host !== null))		{			$this->IsSMTP();			return true;		}		else		{			$this->IsMail();			return false;		}	}	/**	 * Function to send an email	 *	 * @param   string   $from         From email address	 * @param   string   $fromName     From name	 * @param   mixed    $recipient    Recipient email address(es)	 * @param   string   $subject      email subject	 * @param   string   $body         Message body	 * @param   boolean  $mode         false = plain text, true = HTML	 * @param   mixed    $cc           CC email address(es)	 * @param   mixed    $bcc          BCC email address(es)	 * @param   mixed    $attachment   Attachment file name(s)	 * @param   mixed    $replyTo      Reply to email address(es)	 * @param   mixed    $replyToName  Reply to name(s)	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendMail($from, $fromName, $recipient, $subject, $body, $mode = false, $cc = null, $bcc = null, $attachment = null,		$replyTo = null, $replyToName = null)	{		$this->setSubject($subject);		$this->setBody($body);		// Are we sending the email as HTML?		if ($mode)		{			$this->IsHTML(true);		}		$this->addRecipient($recipient);		$this->addCC($cc);		$this->addBCC($bcc);		$this->addAttachment($attachment);		// Take care of reply email addresses		if (is_array($replyTo))		{			$numReplyTo = count($replyTo);			for ($i = 0; $i < $numReplyTo; $i++)			{				$this->addReplyTo(array($replyTo[$i], $replyToName[$i]));			}		}		elseif (isset($replyTo))		{			$this->addReplyTo(array($replyTo, $replyToName));		}		// Add sender to replyTo only if no replyTo received		$autoReplyTo = (empty($this->ReplyTo)) ? true : false;		$this->setSender(array($from, $fromName, $autoReplyTo));		return $this->Send();	}	/**	 * Sends mail to administrator for approval of a user submission	 *	 * @param   string  $adminName   Name of administrator	 * @param   string  $adminEmail  Email address of administrator	 * @param   string  $email       [NOT USED TODO: Deprecate?]	 * @param   string  $type        Type of item to approve	 * @param   string  $title       Title of item to approve	 * @param   string  $author      Author of item to approve	 * @param   string  $url         A URL to included in the mail	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function sendAdminMail($adminName, $adminEmail, $email, $type, $title, $author, $url = null)	{		$subject = JText::sprintf('JLIB_MAIL_USER_SUBMITTED', $type);		$message = sprintf(JText::_('JLIB_MAIL_MSG_ADMIN'), $adminName, $type, $title, $author, $url, $url, 'administrator', $type);		$message .= JText::_('JLIB_MAIL_MSG') . "\n";		$this->addRecipient($adminEmail);		$this->setSubject($subject);		$this->setBody($message);		return $this->Send();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Cache component * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheViewPurge extends JViewLegacy{	public function display($tpl = null)	{		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		//JHtmlSidebar::addEntry(JText::_('COM_CACHE_BACK_CACHE_MANAGER'), 'index.php?option=com_cache', false);		JToolbarHelper::title(JText::_('COM_CACHE_PURGE_EXPIRED_CACHE'), 'purge.png');		JToolbarHelper::custom('purge', 'delete.png', 'delete_f2.png', 'COM_CACHE_PURGE_EXPIRED', false);		JToolbarHelper::divider();		if (JFactory::getUser()->authorise('core.admin', 'com_cache'))		{			JToolbarHelper::preferences('com_cache');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_PURGE_EXPIRED_CACHE');	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="parent-category-name">				<?php $title = $this->escape($displayData['item']->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->parent_slug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_parent_category') && !empty($displayData['item']->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Libraries * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Interface to handle display layout * * @package     Joomla.Libraries * @subpackage  Layout * @see         http://docs.joomla.org/Sharing_layouts_across_views_or_extensions_with_JLayout * @since       3.0 */interface JLayout{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   3.0	 */	public function escape($output);	/**	 * Method to render the layout.	 *	 * @param   object  $displayData  Object which properties are used inside the layout file to build displayed output	 *	 * @return  string  The rendered layout.	 *	 * @since   3.0	 */	public function render($displayData);}
<?php/** * @package     Joomla.Site * @subpackage  mod_footer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="footer1<?php echo $moduleclass_sfx ?>"><?php echo $lineone; ?></div><div class="footer2<?php echo $moduleclass_sfx ?>"><?php echo JText::_('MOD_FOOTER_LINE2'); ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @param   array * @return  array */function WrapperBuildRoute(&$query){	$segments = array();	if (isset($query['view']))	{		unset($query['view']);	}	return $segments;}/** * @param   array * @return  array */function WrapperParseRoute($segments){	$vars = array();	$vars['view'] = 'wrapper';	return $vars;}
<?php/** * @package     Joomla.Legacy * @subpackage  Simplepie * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('simplepie.simplepie');/** * Class to maintain a pathway. * * The user's navigated path within the application. * * @package     Joomla.Legacy * @subpackage  Simplepie * @since       12.2 * * @deprecated  4.0  Use JFeed or supply your own methods */class JSimplepieFactory{	/**	 * Get a parsed XML Feed Source	 *	 * @param   string   $url         Url for feed source.	 * @param   integer  $cache_time  Time to cache feed for (using internal cache mechanism).	 *	 * @return  mixed  SimplePie parsed object on success, false on failure.	 *	 * @since   12.2	 * @deprecated  4.0   Use JFeedFactory($url) instead.	 *	 * @note  In 3.2 will be proxied to JFeedFactory()	 */	public static function getFeedParser($url, $cache_time = 0)	{		JLog::add(__METHOD__ . ' is deprecated.   Use JFeedFactory() or supply Simple Pie instead.', JLog::WARNING, 'deprecated');		$cache = JFactory::getCache('feed_parser', 'callback');		if ($cache_time > 0)		{			$cache->setLifeTime($cache_time);		}		$simplepie = new SimplePie(null, null, 0);		$simplepie->enable_cache(false);		$simplepie->set_feed_url($url);		$simplepie->force_feed(true);		$contents = $cache->get(array($simplepie, 'init'), null, false, false);		if ($contents)		{			return $simplepie;		}		JLog::add(JText::_('JLIB_UTIL_ERROR_LOADING_FEED_DATA'), JLog::WARNING, 'jerror');		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];?><ul class="nav nav-tabs" id="<?php echo $selector; ?>Tabs"></ul><div class="tab-content" id="<?php echo $selector; ?>Content">
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div style="padding: 10px;">	<div style="text-align:right">		<a href="javascript: void window.close()">			<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> <?php echo JHtml::_('image', 'mailto/close-x.png', null, null, true); ?></a>	</div>	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_SENT'); ?>	</h2></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the model class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array())	{		$model = parent::getModel($name, $prefix, array('ignore_request' => true));		return $model;	}	/**	 * Display method for the raw track data.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 * @todo	This should be done as a view, not here!	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		$vName		= 'tracks';		$vFormat	= 'raw';		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			// Get the model for the view.			$model = $this->getModel($vName);			// Load the filter state.			$app = JFactory::getApplication();			$type = $app->getUserState($this->context.'.filter.type');			$model->setState('filter.type', $type);			$begin = $app->getUserState($this->context.'.filter.begin');			$model->setState('filter.begin', $begin);			$end = $app->getUserState($this->context.'.filter.end');			$model->setState('filter.end', $end);			$categoryId = $app->getUserState($this->context.'.filter.category_id');			$model->setState('filter.category_id', $categoryId);			$clientId = $app->getUserState($this->context.'.filter.client_id');			$model->setState('filter.client_id', $clientId);			$model->setState('list.limit', 0);			$model->setState('list.start', 0);			$form = JRequest::getVar('jform');			$model->setState('basename', $form['basename']);			$model->setState('compressed', $form['compressed']);			$config = JFactory::getConfig();			$cookie_domain = $config->get('cookie_domain', '');			$cookie_path = $config->get('cookie_path', '/');			setcookie(JApplication::getHash($this->context.'.basename'), $form['basename'], time() + 365 * 86400, $cookie_path, $cookie_domain);			setcookie(JApplication::getHash($this->context.'.compressed'), $form['compressed'], time() + 365 * 86400, $cookie_path, $cookie_domain);			// Push the model into the view (as default).			$view->setModel($model, true);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewDefault $this */?><?php echo JHtml::_('installation.stepbar'); ?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" rel="next" title="<?php echo JText::_('JNext'); ?>"><i class="icon-arrow-right icon-white"></i> <?php echo JText::_('JNext'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<h3><?php echo JText::_('INSTL_SITE'); ?></h3>	<hr class="hr-condensed" />	<div class="row-fluid">		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_name'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_name'); ?>					<p class="help-block"><?php echo JText::_('INSTL_SITE_NAME_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_metadesc'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_metadesc'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_METADESC_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>		<div class="span6">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_email'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_email'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_EMAIL_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_user'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_user'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_USER_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password'); ?>					<p class="help-block"><?php echo JText::_('INSTL_ADMIN_PASSWORD_DESC'); ?></p>				</div>			</div>			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('admin_password2'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('admin_password2'); ?>				</div>			</div>		</div>	</div>	<div class="row-fluid">		<div class="span12">			<div class="control-group">				<div class="control-label">					<?php echo $this->form->getLabel('site_offline'); ?>				</div>				<div class="controls">					<?php echo $this->form->getInput('site_offline'); ?>					<p class="help-block">						<?php echo JText::_('INSTL_SITE_OFFLINE_TITLE_LABEL'); ?>					</p>				</div>			</div>		</div>	</div>	<input type="hidden" name="task" value="site" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<span class="item-title"><a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</span>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description, '', 'com_contact.categories'); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_items_cat') == 1) :?>			<dl><dt>				<?php echo JText::_('COM_CONTACT_COUNT'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class JHtmlRedirect{	/**	 * @param   int $value	The state value.	 * @param   int $i	 * @param   string  An optional prefix for the task.	 * @param   boolean		An optional setting for access control on the action.	 */	public static function published($value = 0, $i, $canChange = true)	{		// Array of image, task, title, action		$states	= array(			1	=> array('tick.png',		'links.unpublish',	'JENABLED',	'COM_REDIRECT_DISABLE_LINK'),			0	=> array('publish_x.png',	'links.publish',		'JDISABLED',	'COM_REDIRECT_ENABLE_LINK'),			2	=> array('disabled.png',	'links.unpublish',	'JARCHIVED',	'JUNARCHIVE'),			-2	=> array('trash.png',		'links.publish',		'JTRASHED',	'COM_REDIRECT_ENABLE_LINK'),		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html	= '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					. $html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_category * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$input = JFactory::getApplication()->input;		// Prep for Normal or Dynamic Modes		$mode = $params->get('mode', 'normal');		$idbase = null;		switch($mode)		{			case 'dynamic':				$option = $input->get('option');				$view = $input->get('view');				if ($option === 'com_content')				{					switch($view)					{						case 'category':							$idbase = $input->getInt('id');							break;						case 'categories':							$idbase = $input->getInt('id');							break;						case 'article':							if ($params->get('show_on_article_page', 1))							{								$idbase = $input->getInt('catid');							}							break;					}				}				break;			case 'normal':			default:				$idbase = $params->get('catid');				break;		}$cacheid = md5(serialize(array ($idbase, $module->module)));$cacheparams = new stdClass;$cacheparams->cachemode = 'id';$cacheparams->class = 'ModArticlesCategoryHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = $cacheid;$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!empty($list)){	$grouped = false;	$article_grouping = $params->get('article_grouping', 'none');	$article_grouping_direction = $params->get('article_grouping_direction', 'ksort');	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$item_heading = $params->get('item_heading');	if ($article_grouping !== 'none')	{		$grouped = true;		switch($article_grouping)		{			case 'year':			case 'month_year':				$list = ModArticlesCategoryHelper::groupByDate($list, $article_grouping, $article_grouping_direction, $params->get('month_year_format', 'F Y'));				break;			case 'author':			case 'category_title':				$list = ModArticlesCategoryHelper::groupBy($list, $article_grouping, $article_grouping_direction);				break;			default:				break;		}	}	require JModuleHelper::getLayoutPath('mod_articles_category', $params->get('layout', 'default'));}
<?php/** * Squiz_Sniffs_Strings_ConcatenationSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ConcatenationSpacingSniff.php 151 2010-11-26 01:07:46Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Makes sure there are is a spaces between the concatenation operator <b>.</b> and the strings being concatenated. * * Example: * <b class="bad">$a = $b.$c;</b> * <b class="good">$a = $b . $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ConcatenationSpacingSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns an array of tokens this test wants to listen for.	 *	 * @return array	 */	public function register()	{		return array(T_STRING_CONCAT);	}//function	/**	 * Processes this test, when one of its tokens is encountered.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.	 * @param integer $stackPtr The position of the current token in the	 *                                        stack passed in $tokens.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		if ($tokens[($stackPtr + 1)]['code'] != T_WHITESPACE)		{			// space after			$message = 'Concat operator must be followed by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			$found = strlen($tokens[($stackPtr + 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space after concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}		if ($tokens[($stackPtr - 1)]['code'] != T_WHITESPACE)		{			// space before			$message = 'Concat operator must be preceeded by one space';			$phpcsFile->addError($message, $stackPtr, 'Missing');		}		else		{			if (strpos($tokens[($stackPtr - 2)]['content'], $phpcsFile->eolChar) !== false			|| strpos($tokens[($stackPtr - 1)]['content'], $phpcsFile->eolChar) !== false)			{				// the dot is on a new line				return;			}			$found = strlen($tokens[($stackPtr - 1)]['content']);			if ($found > 1)			{				$error = sprintf('Expected 1 space before concat operator; %s found', $found);				$phpcsFile->addError($error, $stackPtr, 'Too much');			}		}	}//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Entry class * * This class is designed to hold log entries for either writing to an engine, or for * supported engines, retrieving lists and building in memory (PHP based) search operations. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogEntry{	/**	 * Application responsible for log entry.	 * @var    string	 * @since  11.1	 */	public $category;	/**	 * The date the message was logged.	 * @var    JDate	 * @since  11.1	 */	public $date;	/**	 * Message to be logged.	 * @var    string	 * @since  11.1	 */	public $message;	/**	 * The priority of the message to be logged.	 * @var    string	 * @since  11.1	 * @see    $priorities	 */	public $priority = JLog::INFO;	/**	 * List of available log priority levels [Based on the Syslog default levels].	 * @var    array	 * @since  11.1	 */	protected $priorities = array(		JLog::EMERGENCY,		JLog::ALERT,		JLog::CRITICAL,		JLog::ERROR,		JLog::WARNING,		JLog::NOTICE,		JLog::INFO,		JLog::DEBUG	);	/**	 * Constructor	 *	 * @param   string  $message   The message to log.	 * @param   string  $priority  Message priority based on {$this->priorities}.	 * @param   string  $category  Type of entry	 * @param   string  $date      Date of entry (defaults to now if not specified or blank)	 *	 * @since   11.1	 */	public function __construct($message, $priority = JLog::INFO, $category = '', $date = null)	{		$this->message = (string) $message;		// Sanitize the priority.		if (!in_array($priority, $this->priorities, true))		{			$priority = JLog::INFO;		}		$this->priority = $priority;		// Sanitize category if it exists.		if (!empty($category))		{			$this->category = (string) strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $category));		}		// Get the date as a JDate object.		$this->date = new JDate($date ? $date : 'now');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-warnings">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=warnings');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<?php		if (!count($this->messages))		{			echo '<div class="alert alert-info"><a class="close" data-dismiss="alert" href="#">&times;</a>'. JText::_('COM_INSTALLER_MSG_WARNINGS_NONE').'</div>';		}		else		{			echo JHtml::_('sliders.start', 'warning-sliders', array('useCookie' => 1));			foreach($this->messages as $message)			{				echo JHtml::_('sliders.panel', $message['message'], str_replace(' ', '', $message['message']));				echo '<div style="padding: 5px;" >'.$message['description'].'</div>';			}			echo JHtml::_('sliders.panel', JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFO'), 'furtherinfo-pane');			echo '<div style="padding: 5px;" >'. JText::_('COM_INSTALLER_MSG_WARNINGFURTHERINFODESC') .'</div>';			echo JHtml::_('sliders.end');		}		?>			<div class="clr"> </div>			<div>				<input type="hidden" name="boxchecked" value="0" />				<?php echo JHtml::_('form.token'); ?>			</div>		</div>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="search-results<?php echo $this->pageclass_sfx; ?>"><?php foreach ($this->results as $result) : ?>	<dt class="result-title">		<?php echo $this->pagination->limitstart + $result->count.'. ';?>		<?php if ($result->href) :?>			<a href="<?php echo JRoute::_($result->href); ?>"<?php if ($result->browsernav == 1) :?> target="_blank"<?php endif;?>>				<?php echo $this->escape($result->title);?>			</a>		<?php else:?>			<?php echo $this->escape($result->title);?>		<?php endif; ?>	</dt>	<?php if ($result->section) : ?>		<dd class="result-category">			<span class="small<?php echo $this->pageclass_sfx; ?>">				(<?php echo $this->escape($result->section); ?>)			</span>		</dd>	<?php endif; ?>	<dd class="result-text">		<?php echo $result->text; ?>	</dd>	<?php if ($this->params->get('show_date')) : ?>		<dd class="result-created<?php echo $this->pageclass_sfx; ?>">			<?php echo JText::sprintf('JGLOBAL_CREATED_DATE_ON', $result->created); ?>		</dd>	<?php endif; ?><?php endforeach; ?></dl><div class="pagination">	<?php echo $this->pagination->getPagesLinks(); ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Issues class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubIssues extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $title, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		// Ensure that we have a non-associative array.		if (isset($labels))		{			$labels = array_values($labels);		}		// Build the request data.		$data = json_encode(			array(				'title' => $title,				'assignee' => $assignee,				'milestone' => $milestone,				'labels' => $labels,				'body' => $body			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   string   $body     The comment body text.	 *	 * @return  object	 *	 * @since   11.3	 */	public function createComment($user, $repo, $issueId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Build the request data.		$data = json_encode(			array(				'body' => $body,			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function createLabel($user, $repo, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to delete.	 *	 * @return  void	 *	 * @since   11.3	 */	public function deleteComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to delete a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deleteLabel($user, $repo, $label)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}	}	/**	 * Method to update an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $issueId    The issue number.	 * @param   string   $state      The optional new state for the issue. [open, closed]	 * @param   string   $title      The title of the new issue.	 * @param   string   $body       The body text for the new issue.	 * @param   string   $assignee   The login for the GitHub user that this issue should be assigned to.	 * @param   integer  $milestone  The milestone to associate this issue with.	 * @param   array    $labels     The labels to associate with this issue.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $issueId, $state = null, $title = null, $body = null, $assignee = null, $milestone = null, array $labels = null)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if (isset($title))		{			$data->title = $title;		}		// If a body is set add it to the data object.		if (isset($body))		{			$data->body = $body;		}		// If a state is set add it to the data object.		if (isset($state))		{			$data->state = $state;		}		// If an assignee is set add it to the data object.		if (isset($assignee))		{			$data->assignee = $assignee;		}		// If a milestone is set add it to the data object.		if (isset($milestone))		{			$data->milestone = $milestone;		}		// If labels are set add them to the data object.		if (isset($labels))		{			// Ensure that we have a non-associative array.			if (isset($labels))			{				$labels = array_values($labels);			}			$data->labels = $labels;		}		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The id of the comment to update.	 * @param   string   $body       The new body text for the comment.	 *	 * @return  object	 *	 * @since   11.3	 */	public function editComment($user, $repo, $commentId, $body)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Build the request data.		$data = json_encode(			array(				'body' => $body			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a label on a repo.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $label  The label name.	 * @param   string  $name   The label name.	 * @param   string  $color  The label color.	 *	 * @return  object	 *	 * @since   12.3	 */	public function editLabel($user, $repo, $label, $name, $color)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $label;		// Build the request data.		$data = json_encode(			array(				'name' => $name,				'color' => $color			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $issueId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific comment on an issue.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   integer  $commentId  The comment id to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function getComment($user, $repo, $commentId)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/comments/' . (int) $commentId;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of comments on an issue.	 *	 * @param   string   $user     The name of the owner of the GitHub repository.	 * @param   string   $repo     The name of the GitHub repository.	 * @param   integer  $issueId  The issue number.	 * @param   integer  $page     The page number from which to get items.	 * @param   integer  $limit    The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getComments($user, $repo, $issueId, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues/' . (int) $issueId . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a specific label on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $name  The label name to get.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getLabel($user, $repo, $name)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels/' . $name;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the list of labels on a repo.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 *	 * @return  array	 *	 * @since   12.3	 */	public function getLabels($user, $repo)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/labels';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list an authenticated user's issues.	 *	 * @param   string   $filter     The filter type: assigned, created, mentioned, subscribed.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($filter = null, $state = null, $labels = null, $sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/issues';		// TODO Implement the filtering options.		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list issues.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $milestone  The milestone number, 'none', or *.	 * @param   string   $state      The optional state to filter requests by. [open, closed]	 * @param   string   $assignee   The assignee name, 'none', or *.	 * @param   string   $mentioned  The GitHub user name.	 * @param   string   $labels     The list of comma separated Label names. Example: bug,ui,@high.	 * @param   string   $sort       The sort order: created, updated, comments, default: created.	 * @param   string   $direction  The list direction: asc or desc, default: desc.	 * @param   JDate    $since      The date/time since when issues should be returned.	 * @param   integer  $page       The page number from which to get items.	 * @param   integer  $limit      The number of items on a page.	 *	 * @return  array	 *	 * @since   11.3	 */	public function getListByRepository($user, $repo, $milestone = null, $state = null, $assignee = null, $mentioned = null, $labels = null,		$sort = null, $direction = null, JDate $since = null, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/issues';		$uri = new JUri($this->fetchUrl($path, $page, $limit));		if ($milestone)		{			$uri->setVar('milestone', $milestone);		}		if ($state)		{			$uri->setVar('state', $state);		}		if ($assignee)		{			$uri->setVar('assignee', $assignee);		}		if ($mentioned)		{			$uri->setVar('mentioned', $mentioned);		}		if ($labels)		{			$uri->setVar('labels', $labels);		}		if ($sort)		{			$uri->setVar('sort', $sort);		}		if ($direction)		{			$uri->setVar('direction', $direction);		}		if ($since)		{			$uri->setVar('since', $since->toISO8601());		}		// Send the request.		$response = $this->client->get((string) $uri);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File system helper * * Holds support functions for the filesystem, particularly the stream * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JFilesystemHelper{	/**	 * Remote file size function for streams that don't support it	 *	 * @param   string  $url  TODO Add text	 *	 * @return  mixed	 *	 * @see     http://www.php.net/manual/en/function.filesize.php#71098	 * @since   11.1	 */	public static function remotefsize($url)	{		$sch = parse_url($url, PHP_URL_SCHEME);		if (($sch != 'http') && ($sch != 'https') && ($sch != 'ftp') && ($sch != 'ftps'))		{			return false;		}		if (($sch == 'http') || ($sch == 'https'))		{			$headers = get_headers($url, 1);			if ((!array_key_exists('Content-Length', $headers)))			{				return false;			}			return $headers['Content-Length'];		}		if (($sch == 'ftp') || ($sch == 'ftps'))		{			$server = parse_url($url, PHP_URL_HOST);			$port = parse_url($url, PHP_URL_PORT);			$path = parse_url($url, PHP_URL_PATH);			$user = parse_url($url, PHP_URL_USER);			$pass = parse_url($url, PHP_URL_PASS);			if ((!$server) || (!$path))			{				return false;			}			if (!$port)			{				$port = 21;			}			if (!$user)			{				$user = 'anonymous';			}			if (!$pass)			{				$pass = '';			}			switch ($sch)			{				case 'ftp':					$ftpid = ftp_connect($server, $port);					break;				case 'ftps':					$ftpid = ftp_ssl_connect($server, $port);					break;			}			if (!$ftpid)			{				return false;			}			$login = ftp_login($ftpid, $user, $pass);			if (!$login)			{				return false;			}			$ftpsize = ftp_size($ftpid, $path);			ftp_close($ftpid);			if ($ftpsize == -1)			{				return false;			}			return $ftpsize;		}	}	/**	 * Quick FTP chmod	 *	 * @param   string   $url   Link identifier	 * @param   integer  $mode  The new permissions, given as an octal value.	 *	 * @return  mixed	 *	 * @see     http://www.php.net/manual/en/function.ftp-chmod.php	 * @since   11.1	 */	public static function ftpChmod($url, $mode)	{		$sch = parse_url($url, PHP_URL_SCHEME);		if (($sch != 'ftp') && ($sch != 'ftps'))		{			return false;		}		$server = parse_url($url, PHP_URL_HOST);		$port = parse_url($url, PHP_URL_PORT);		$path = parse_url($url, PHP_URL_PATH);		$user = parse_url($url, PHP_URL_USER);		$pass = parse_url($url, PHP_URL_PASS);		if ((!$server) || (!$path))		{			return false;		}		if (!$port)		{			$port = 21;		}		if (!$user)		{			$user = 'anonymous';		}		if (!$pass)		{			$pass = '';		}		switch ($sch)		{			case 'ftp':				$ftpid = ftp_connect($server, $port);				break;			case 'ftps':				$ftpid = ftp_ssl_connect($server, $port);				break;		}		if (!$ftpid)		{			return false;		}		$login = ftp_login($ftpid, $user, $pass);		if (!$login)		{			return false;		}		$res = ftp_chmod($ftpid, $mode, $path);		ftp_close($ftpid);		return $res;	}	/**	 * Modes that require a write operation	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getWriteModes()	{		return array('w', 'w+', 'a', 'a+', 'r+', 'x', 'x+');	}	/**	 * Stream and Filter Support Operations	 *	 * Returns the supported streams, in addition to direct file access	 * Also includes Joomla! streams as well as PHP streams	 *	 * @return  array  Streams	 *	 * @since   11.1	 */	public static function getSupported()	{		// Really quite cool what php can do with arrays when you let it...		static $streams;		if (!$streams)		{			$streams = array_merge(stream_get_wrappers(), self::getJStreams());		}		return $streams;	}	/**	 * Returns a list of transports	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getTransports()	{		// Is this overkill?		return stream_get_transports();	}	/**	 * Returns a list of filters	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getFilters()	{		// Note: This will look like the getSupported() function with J! filters.		// TODO: add user space filter loading like user space stream loading		return stream_get_filters();	}	/**	 * Returns a list of J! streams	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getJStreams()	{		static $streams = array();		if (!$streams)		{			$files = new DirectoryIterator(__DIR__ . '/streams');			foreach ($files as $file)			{				$filename = $file->getFilename();				// Only load for php files.				// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6				if (!$file->isFile() || substr($filename, strrpos($filename, '.') + 1) != 'php')				{					continue;				}				$streams[] = $file->getBasename('.php');			}		}		return $streams;	}	/**	 * Determine if a stream is a Joomla stream.	 *	 * @param   string  $streamname  The name of a stream	 *	 * @return  boolean  True for a Joomla Stream	 *	 * @since   11.1	 */	public static function isJoomlaStream($streamname)	{		return in_array($streamname, self::getJStreams());	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API References class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubRefs extends JGithubObject{	/**	 * Method to create an issue.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The name of the fully qualified reference.	 * @param   string  $sha   The SHA1 value to set this reference to.	 *	 * @return  object	 *	 * @since   11.3	 */	public function create($user, $repo, $ref, $sha)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs';		// Build the request data.		$data = json_encode(			array(				'ref' => $ref,				'sha' => $sha			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to update a reference.	 *	 * @param   string  $user   The name of the owner of the GitHub repository.	 * @param   string  $repo   The name of the GitHub repository.	 * @param   string  $ref    The reference to update.	 * @param   string  $sha    The SHA1 value to set the reference to.	 * @param   string  $force  Whether the update should be forced. Default to false.	 *	 * @return  object	 *	 * @since   11.3	 */	public function edit($user, $repo, $ref, $sha, $force = false)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Craete the data object.		$data = new stdClass;		// If a title is set add it to the data object.		if ($force)		{			$data->force = true;		}		$data->sha = $sha;		// Encode the request data.		$data = json_encode($data);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a reference.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $ref   The reference to get.	 *	 * @return  object	 *	 * @since   11.3	 */	public function get($user, $repo, $ref)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs/' . $ref;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list references for a repository.	 *	 * @param   string   $user       The name of the owner of the GitHub repository.	 * @param   string   $repo       The name of the GitHub repository.	 * @param   string   $namespace  Optional sub-namespace to limit the returned references.	 * @param   integer  $page       Page to request	 * @param   integer  $limit      Number of results to return per page	 *	 * @return  array	 *	 * @since   11.3	 */	public function getList($user, $repo, $namespace = '', $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/refs' . $namespace;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLink extends JControllerForm{	// Parent class access checks are sufficient for this controller.}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ord* Returns the unicode ordinal for a character* @param string UTF-8 encoded character* @return int unicode ordinal for the character* @see http://www.php.net/ord* @see http://www.php.net/manual/en/function.ord.php#46267*/function utf8_ord($chr) {    $ord0 = ord($chr);    if ( $ord0 >= 0 && $ord0 <= 127 ) {        return $ord0;    }    if ( !isset($chr{1}) ) {        trigger_error('Short sequence - at least 2 bytes expected, only 1 seen');        return FALSE;    }    $ord1 = ord($chr{1});    if ( $ord0 >= 192 && $ord0 <= 223 ) {        return ( $ord0 - 192 ) * 64            + ( $ord1 - 128 );    }    if ( !isset($chr{2}) ) {        trigger_error('Short sequence - at least 3 bytes expected, only 2 seen');        return FALSE;    }    $ord2 = ord($chr{2});    if ( $ord0 >= 224 && $ord0 <= 239 ) {        return ($ord0-224)*4096            + ($ord1-128)*64                + ($ord2-128);    }    if ( !isset($chr{3}) ) {        trigger_error('Short sequence - at least 4 bytes expected, only 3 seen');        return FALSE;    }    $ord3 = ord($chr{3});    if ($ord0>=240 && $ord0<=247) {        return ($ord0-240)*262144            + ($ord1-128)*4096                + ($ord2-128)*64                    + ($ord3-128);    }    if ( !isset($chr{4}) ) {        trigger_error('Short sequence - at least 5 bytes expected, only 4 seen');        return FALSE;    }    $ord4 = ord($chr{4});    if ($ord0>=248 && $ord0<=251) {        return ($ord0-248)*16777216            + ($ord1-128)*262144                + ($ord2-128)*4096                    + ($ord3-128)*64                        + ($ord4-128);    }    if ( !isset($chr{5}) ) {        trigger_error('Short sequence - at least 6 bytes expected, only 5 seen');        return FALSE;    }    if ($ord0>=252 && $ord0<=253) {        return ($ord0-252) * 1073741824            + ($ord1-128)*16777216                + ($ord2-128)*262144                    + ($ord3-128)*4096                        + ($ord4-128)*64                            + (ord($chr{5})-128);    }    if ( $ord0 >= 254 && $ord0 <= 255 ) {        trigger_error('Invalid UTF-8 with surrogate ordinal '.$ord0);        return FALSE;    }}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * File session handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @since       11.1 */class JSessionStorageNone extends JSessionStorage{	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		ini_set('session.save_handler', 'files');	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Extended Utility class for handling date display. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.3 */abstract class JHtmlDate{	/**	 * Function to convert a static time into a relative measurement	 *	 * @param   string  $date  The date to convert	 * @param   string  $unit  The optional unit of measurement to return	 *                         if the value of the diff is greater than one	 * @param   string  $time  An optional time to compare to, defaults to now	 *	 * @return  string  The converted time string	 *	 * @since   11.3	 */	public static function relative($date, $unit = null, $time = null)	{		if (is_null($time))		{			// Get now			$time = JFactory::getDate('now');		}		// Get the difference in seconds between now and the time		$diff = strtotime($time) - strtotime($date);		// Less than a minute		if ($diff < 60)		{			return JText::_('JLIB_HTML_DATE_RELATIVE_LESSTHANAMINUTE');		}		// Round to minutes		$diff = round($diff / 60);		// 1 to 59 minutes		if ($diff < 60 || $unit == 'minute')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_MINUTES', $diff);		}		// Round to hours		$diff = round($diff / 60);		// 1 to 23 hours		if ($diff < 24 || $unit == 'hour')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_HOURS', $diff);		}		// Round to days		$diff = round($diff / 24);		// 1 to 6 days		if ($diff < 7 || $unit == 'day')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_DAYS', $diff);		}		// Round to weeks		$diff = round($diff / 7);		// 1 to 4 weeks		if ($diff <= 4 || $unit == 'week')		{			return JText::plural('JLIB_HTML_DATE_RELATIVE_WEEKS', $diff);		}		// Over a month, return the absolute time		return JHtml::_('date', $date);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller = JControllerLegacy::getInstance('Users');$controller->execute(JFactory::getApplication()->input->get('task', 'display'));$controller->redirect();
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the language for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSetlanguage extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Very crude workaround to give an error message when JSON is disabled		if (!function_exists('json_encode') || !function_exists('json_decode'))		{			$app->setHeader('status', 500);			$app->setHeader('Content-Type', 'application/json; charset=utf-8');			$app->sendHeaders();			echo '{"token":"' . JSession::getFormToken(true) . '","lang":"' . JFactory::getLanguage()->getTag()				. '","error":true,"header":"' . JText::_('INSTL_HEADER_ERROR') . '","message":"' . JText::_('INSTL_WARNJSON') . '"}';			$app->close();		}		// Check for potentially unwritable session		$session = JFactory::getSession();		if ($session->isNew())		{			$this->sendResponse(new Exception(JText::_('INSTL_COOKIES_NOT_ENABLED'), 500));		}		// Get the setup model.		$model = new InstallationModelSetup;		// Get the posted values from the request and validate them.		$data = $this->input->post->get('jform', array(), 'array');		$return	= $model->validate($data, 'preinstall');		$r = new stdClass;		// Check for validation errors.		if ($return === false)		{			/*			 * The validate method enqueued all messages for us, so we just need to			 * redirect back to the site setup screen.			 */			$r->view = $this->input->getWord('view', 'site');			$app->sendJsonResponse($r);		}		// Store the options in the session.		$model->storeOptions($return);		// Setup language		$language = JFactory::getLanguage();		$language->setLanguage($return['language']);		// Redirect to the page.		$r->view = $this->input->getWord('view', 'site');		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<fieldset>  		<legend><?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?></legend>  		<p><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>  	</fieldset>  	<div class="alert">  		<p><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>  	</div>  	<input type="hidden" name="task" value="" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><span class="nav-header"><?php echo $item->title; ?></span>
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for mcrypt algorithm encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */abstract class JCryptCipherMcrypt implements JCryptCipher{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType;	/**	 * Constructor.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function __construct()	{		if (!is_callable('mcrypt_encrypt'))		{			throw new RuntimeException('The mcrypt extension is not available.');		}	}	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Decrypt the data.		$decrypted = trim(mcrypt_decrypt($this->type, $key->private, $data, $this->mode, $key->public));		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != $this->keyType)		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected ' . $this->keyType . '.');		}		// Encrypt the data.		$encrypted = mcrypt_encrypt($this->type, $key->private, $data, $this->mode, $key->public);		return $encrypted;	}	/**	 * Method to generate a new encryption key object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key object.		$key = new JCryptKey($this->keyType);		// Generate an initialisation vector based on the algorithm.		$key->public = mcrypt_create_iv(mcrypt_get_iv_size($this->type, $this->mode));		// Get the salt and password setup.		$salt = (isset($options['salt'])) ? $options['salt'] : substr(pack("h*", md5(mt_rand())), 0, 16);		$password = (isset($options['password'])) ? $options['password'] : 'J00ml4R0ck$!';		// Generate the derived key.		$key->private = $this->pbkdf2($password, $salt, mcrypt_get_key_size($this->type, $this->mode));		return $key;	}	/**	 * PBKDF2 Implementation for deriving keys.	 *	 * @param   string   $p   Password	 * @param   string   $s   Salt	 * @param   integer  $kl  Key length	 * @param   integer  $c   Iteration count	 * @param   string   $a   Hash algorithm	 *	 * @return  string  The derived key.	 *	 * @see     http://en.wikipedia.org/wiki/PBKDF2	 * @see     http://www.ietf.org/rfc/rfc2898.txt	 * @since   12.1	 */	public function pbkdf2($p, $s, $kl, $c = 10000, $a = 'sha256')	{		// Hash length.		$hl = strlen(hash($a, null, true));		// Key blocks to compute.		$kb = ceil($kl / $hl);		// Derived key.		$dk = '';		// Create the key.		for ($block = 1; $block <= $kb; $block++)		{			// Initial hash for this block.			$ib = $b = hash_hmac($a, $s . pack('N', $block), $p, true);			// Perform block iterations.			for ($i = 1; $i < $c; $i++)			{				$ib ^= ($b = hash_hmac($a, $b, $p, true));			}			// Append the iterated block.			$dk .= $ib;		}		// Return derived key of correct length.		return substr($dk, 0, $kl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Extension Manager Templates Model * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerModelWarnings extends JModelList{	/**	 * Extension Type	 * @var	string	 */	public $type = 'warnings';	/**	 * Return the byte value of a particular string.	 *	 * @param   string  $val  String optionally with G, M or K suffix	 *	 * @return  integer   size in bytes	 *	 * @since 1.6	 */	public function return_bytes($val)	{		$val = trim($val);		$last = strtolower($val{strlen($val) - 1});		switch ($last)		{			// The 'G' modifier is available since PHP 5.1.0			case 'g':				$val *= 1024;			case 'm':				$val *= 1024;			case 'k':				$val *= 1024;		}		return $val;	}	/**	 * Load the data.	 *	 * @return  array  Messages	 *	 * @since   1.6	 */	public function getItems()	{		static $messages;		if ($messages)		{			return $messages;		}		$messages = array();		$file_uploads = ini_get('file_uploads');		if (!$file_uploads)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADSDISABLED'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_FILEUPLOADISDISABLEDDESC'));		}		$upload_dir = ini_get('upload_tmp_dir');		if (!$upload_dir)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTSETDESC'));		}		else		{			if (!is_writeable($upload_dir))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_PHPUPLOADNOTWRITEABLEDESC', $upload_dir));			}		}		$config = JFactory::getConfig();		$tmp_path = $config->get('tmp_path');		if (!$tmp_path)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSET'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTSETDESC'));		}		else		{			if (!is_writeable($tmp_path))			{				$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLE'),						'description' => JText::sprintf('COM_INSTALLER_MSG_WARNINGS_JOOMLATMPNOTWRITEABLEDESC', $tmp_path));			}		}		$memory_limit = $this->return_bytes(ini_get('memory_limit'));		if ($memory_limit < (8 * 1024 * 1024))		{			// 8MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_LOWMEMORYDESC'));		}		elseif ($memory_limit < (16 * 1024 * 1024))		{			// 16MB			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYWARN'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_MEDMEMORYDESC'));		}		$post_max_size = $this->return_bytes(ini_get('post_max_size'));		$upload_max_filesize = $this->return_bytes(ini_get('upload_max_filesize'));		if ($post_max_size < $upload_max_filesize)		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOST'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_UPLOADBIGGERTHANPOSTDESC'));		}		if ($post_max_size < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLPOSTSIZEDESC'));		}		if ($upload_max_filesize < (4 * 1024 * 1024)) // 4MB		{			$messages[] = array('message' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZE'),					'description' => JText::_('COM_INSTALLER_MSG_WARNINGS_SMALLUPLOADSIZEDESC'));		}		return $messages;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_RELEVANT_PHP_SETTINGS'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="250">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;				</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SAFE_MODE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['safe_mode']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OPEN_BASEDIR'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['open_basedir']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISPLAY_ERRORS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['display_errors']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SHORT_OPEN_TAGS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['short_open_tag']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_FILE_UPLOADS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['file_uploads']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MAGIC_QUOTES'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['magic_quotes_gpc']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_REGISTER_GLOBALS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['register_globals']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_OUTPUT_BUFFERING'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.boolean', $this->php_settings['output_buffering']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_SAVE_PATH'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['session.save_path']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_SESSION_AUTO_START'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.integer', $this->php_settings['session.auto_start']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_XML_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['xml']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZLIB_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zlib']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ZIP_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['zip']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_DISABLED_FUNCTIONS'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.string', $this->php_settings['disable_functions']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_MBSTRING_ENABLED'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['mbstring']); ?>				</td>			</tr>			<tr>				<td>					<?php echo JText::_('COM_ADMIN_ICONV_AVAILABLE'); ?>				</td>				<td>					<?php echo JHtml::_('phpsetting.set', $this->php_settings['iconv']); ?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ObjectOperatorIndentSniff.php 288251 2009-09-10 23:50:52Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff. * * Checks that object operators are indented 4 spaces if they are the first * thing on a line. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_ObjectOperatorIndentSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OBJECT_OPERATOR);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile All the tokens found in the document.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Make sure this is the first object operator in a chain of them.        $varToken = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);        if ($varToken === false || $tokens[$varToken]['code'] !== T_VARIABLE) {            return;        }        // Make sure this is a chained call.        $next = $phpcsFile->findNext(            T_OBJECT_OPERATOR,            ($stackPtr + 1),            null,            false,            null,            true        );        if ($next === false) {            // Not a chained call.            return;        }        // Determine correct indent.        for ($i = ($varToken - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$varToken]['line']) {                $i++;                break;            }        }        $requiredIndent = 0;        if ($i >= 0 && $tokens[$i]['code'] === T_WHITESPACE) {            $requiredIndent = strlen($tokens[$i]['content']);        }        $requiredIndent += 4;        // Determine the scope of the original object operator.        $origBrackets = null;        if (isset($tokens[$stackPtr]['nested_parenthesis']) === true) {            $origBrackets = $tokens[$stackPtr]['nested_parenthesis'];        }        $origConditions = null;        if (isset($tokens[$stackPtr]['conditions']) === true) {            $origConditions = $tokens[$stackPtr]['conditions'];        }        // Check indentation of each object operator in the chain.        // If the first object operator is on a different line than        // the variable, make sure we check its indentation too.        if ($tokens[$stackPtr]['line'] > $tokens[$varToken]['line']) {            $next = $stackPtr;        }        while ($next !== false) {            // Make sure it is in the same scope, otherwise dont check indent.            $brackets = null;            if (isset($tokens[$next]['nested_parenthesis']) === true) {                $brackets = $tokens[$next]['nested_parenthesis'];            }            $conditions = null;            if (isset($tokens[$next]['conditions']) === true) {                $conditions = $tokens[$next]['conditions'];            }            if ($origBrackets === $brackets && $origConditions === $conditions) {                // Make sure it starts a line, otherwise dont check indent.                $indent = $tokens[($next - 1)];                if ($indent['code'] === T_WHITESPACE) {                    if ($indent['line'] === $tokens[$next]['line']) {                        $foundIndent = strlen($indent['content']);                    } else {                        $foundIndent = 0;                    }                    if ($foundIndent !== $requiredIndent) {// TODO AJE Allow for tab indents instead of spaces//                        $error = 'Object operator not indented correctly; expected %s spaces but found %s';//                        $data  = array(//                                  $requiredIndent,//                                  $foundIndent,//                                 );//                        $phpcsFile->addError($error, $next, 'Incorrect', $data);                    }                }                // It can't be the last thing on the line either.                $content = $phpcsFile->findNext(T_WHITESPACE, ($next + 1), null, true);                if ($tokens[$content]['line'] !== $tokens[$next]['line']) {                    $error = 'Object operator must be at the start of the line, not the end';                    $phpcsFile->addError($error, $next, 'StartOfLine');                }            }//end if            $next = $phpcsFile->findNext(                T_OBJECT_OPERATOR,                ($next + 1),                null,                false,                null,                true            );        }//end while    }//end process()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PDO database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorPdo extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->rowCount();		}		else		{			return 0;		}	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			return $this->cursor->fetchObject($this->class);		}		else		{			return false;		}	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		if (!empty($this->cursor) && $this->cursor instanceof PDOStatement)		{			$this->cursor->closeCursor();		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>			<div class="category-desc base-desc">			<?php echo JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_weblinks.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php echo JHtml::_('content.prepare', $this->parent->description, '', 'com_weblinks.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Class to turn JCli applications into daemons.  It requires CLI and PCNTL support built into PHP. * * @package     Joomla.Platform * @subpackage  Application * @see         http://www.php.net/manual/en/book.pcntl.php * @see         http://php.net/manual/en/features.commandline.php * @since       11.1 */class JApplicationDaemon extends JApplicationCli{	/**	 * @var    array  The available POSIX signals to be caught by default.	 * @see    http://php.net/manual/pcntl.constants.php	 * @since  11.1	 */	protected static $signals = array(		'SIGHUP',		'SIGINT',		'SIGQUIT',		'SIGILL',		'SIGTRAP',		'SIGABRT',		'SIGIOT',		'SIGBUS',		'SIGFPE',		'SIGUSR1',		'SIGSEGV',		'SIGUSR2',		'SIGPIPE',		'SIGALRM',		'SIGTERM',		'SIGSTKFLT',		'SIGCLD',		'SIGCHLD',		'SIGCONT',		'SIGTSTP',		'SIGTTIN',		'SIGTTOU',		'SIGURG',		'SIGXCPU',		'SIGXFSZ',		'SIGVTALRM',		'SIGPROF',		'SIGWINCH',		'SIGPOLL',		'SIGIO',		'SIGPWR',		'SIGSYS',		'SIGBABY',		'SIG_BLOCK',		'SIG_UNBLOCK',		'SIG_SETMASK'	);	/**	 * @var    boolean  True if the daemon is in the process of exiting.	 * @since  11.1	 */	protected $exiting = false;	/**	 * @var    integer  The parent process id.	 * @since  12.1	 */	protected $parentId = 0;	/**	 * @var    integer  The process id of the daemon.	 * @since  11.1	 */	protected $processId = 0;	/**	 * @var    boolean  True if the daemon is currently running.	 * @since  11.1	 */	protected $running = false;	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		// Verify that the process control extension for PHP is available.		// @codeCoverageIgnoreStart		if (!defined('SIGHUP'))		{			JLog::add('The PCNTL extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The PCNTL extension for PHP is not available.');		}		// Verify that POSIX support for PHP is available.		if (!function_exists('posix_getpid'))		{			JLog::add('The POSIX extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The POSIX extension for PHP is not available.');		}		// @codeCoverageIgnoreEnd		// Call the parent constructor.		parent::__construct($input, $config, $dispatcher);		// Set some system limits.		@set_time_limit($this->config->get('max_execution_time', 0));		if ($this->config->get('max_memory_limit') !== null)		{			ini_set('memory_limit', $this->config->get('max_memory_limit', '256M'));		}		// Flush content immediately.		ob_implicit_flush();	}	/**	 * Method to handle POSIX signals.	 *	 * @param   integer  $signal  The received POSIX signal.	 *	 * @return  void	 *	 * @since   11.1	 * @see     pcntl_signal()	 * @throws  RuntimeException	 */	public static function signal($signal)	{		// Log all signals sent to the daemon.		JLog::add('Received signal: ' . $signal, JLog::DEBUG);		// Let's make sure we have an application instance.		if (!is_subclass_of(static::$instance, 'JApplicationDaemon'))		{			JLog::add('Cannot find the application instance.', JLog::EMERGENCY);			throw new RuntimeException('Cannot find the application instance.');		}		// Fire the onReceiveSignal event.		static::$instance->triggerEvent('onReceiveSignal', array($signal));		switch ($signal)		{			case SIGINT:			case SIGTERM:				// Handle shutdown tasks				if (static::$instance->running && static::$instance->isActive())				{					static::$instance->shutdown();				}				else				{					static::$instance->close();				}				break;			case SIGHUP:				// Handle restart tasks				if (static::$instance->running && static::$instance->isActive())				{					static::$instance->shutdown(true);				}				else				{					static::$instance->close();				}				break;			case SIGCHLD:				// A child process has died				while (static::$instance->pcntlWait($signal, WNOHANG || WUNTRACED) > 0)				{					usleep(1000);				}				break;			case SIGCLD:				while (static::$instance->pcntlWait($signal, WNOHANG) > 0)				{					$signal = static::$instance->pcntlChildExitStatus($signal);				}				break;			default:				break;		}	}	/**	 * Check to see if the daemon is active.  This does not assume that $this daemon is active, but	 * only if an instance of the application is active as a daemon.	 *	 * @return  boolean  True if daemon is active.	 *	 * @since   11.1	 */	public function isActive()	{		// Get the process id file location for the application.		$pidFile = $this->config->get('application_pid_file');		// If the process id file doesn't exist then the daemon is obviously not running.		if (!is_file($pidFile))		{			return false;		}		// Read the contents of the process id file as an integer.		$fp = fopen($pidFile, 'r');		$pid = fread($fp, filesize($pidFile));		$pid = (int) $pid;		fclose($fp);		// Check to make sure that the process id exists as a positive integer.		if (!$pid)		{			return false;		}		// Check to make sure the process is active by pinging it and ensure it responds.		if (!posix_kill($pid, 0))		{			// No response so remove the process id file and log the situation.			@ unlink($pidFile);			JLog::add('The process found based on PID file was unresponsive.', JLog::WARNING);			return false;		}		return true;	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JCli  Instance of $this to allow chaining.	 *	 * @since   11.1	 */	public function loadConfiguration($data)	{		// Execute the parent load method.		parent::loadConfiguration($data);		/*		 * Setup some application metadata options.  This is useful if we ever want to write out startup scripts		 * or just have some sort of information available to share about things.		 */		// The application author name.  This string is used in generating startup scripts and has		// a maximum of 50 characters.		$tmp = (string) $this->config->get('author_name', 'Joomla Platform');		$this->config->set('author_name', (strlen($tmp) > 50) ? substr($tmp, 0, 50) : $tmp);		// The application author email.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('author_email', 'admin@joomla.org');		$this->config->set('author_email', filter_var($tmp, FILTER_VALIDATE_EMAIL));		// The application name.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_name', 'JApplicationDaemon');		$this->config->set('application_name', (string) preg_replace('/[^A-Z0-9_-]/i', '', $tmp));		// The application description.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_description', 'A generic Joomla Platform application.');		$this->config->set('application_description', filter_var($tmp, FILTER_SANITIZE_STRING));		/*		 * Setup the application path options.  This defines the default executable name, executable directory,		 * and also the path to the daemon process id file.		 */		// The application executable daemon.  This string is used in generating startup scripts.		$tmp = (string) $this->config->get('application_executable', basename($this->input->executable));		$this->config->set('application_executable', $tmp);		// The home directory of the daemon.		$tmp = (string) $this->config->get('application_directory', dirname($this->input->executable));		$this->config->set('application_directory', $tmp);		// The pid file location.  This defaults to a path inside the /tmp directory.		$name = $this->config->get('application_name');		$tmp = (string) $this->config->get('application_pid_file', strtolower('/tmp/' . $name . '/' . $name . '.pid'));		$this->config->set('application_pid_file', $tmp);		/*		 * Setup the application identity options.  It is important to remember if the default of 0 is set for		 * either UID or GID then changing that setting will not be attempted as there is no real way to "change"		 * the identity of a process from some user to root.		 */		// The user id under which to run the daemon.		$tmp = (int) $this->config->get('application_uid', 0);		$options = array('options' => array('min_range' => 0, 'max_range' => 65000));		$this->config->set('application_uid', filter_var($tmp, FILTER_VALIDATE_INT, $options));		// The group id under which to run the daemon.		$tmp = (int) $this->config->get('application_gid', 0);		$options = array('options' => array('min_range' => 0, 'max_range' => 65000));		$this->config->set('application_gid', filter_var($tmp, FILTER_VALIDATE_INT, $options));		// Option to kill the daemon if it cannot switch to the chosen identity.		$tmp = (bool) $this->config->get('application_require_identity', 1);		$this->config->set('application_require_identity', $tmp);		/*		 * Setup the application runtime options.  By default our execution time limit is infinite obviously		 * because a daemon should be constantly running unless told otherwise.  The default limit for memory		 * usage is 128M, which admittedly is a little high, but remember it is a "limit" and PHP's memory		 * management leaves a bit to be desired :-)		 */		// The maximum execution time of the application in seconds.  Zero is infinite.		$tmp = $this->config->get('max_execution_time');		if ($tmp !== null)		{			$this->config->set('max_execution_time', (int) $tmp);		}		// The maximum amount of memory the application can use.		$tmp = $this->config->get('max_memory_limit', '256M');		if ($tmp !== null)		{			$this->config->set('max_memory_limit', (string) $tmp);		}		return $this;	}	/**	 * Execute the daemon.	 *	 * @return  void	 *	 * @since   11.1	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Enable basic garbage collection.		gc_enable();		JLog::add('Starting ' . $this->name, JLog::INFO);		// Set off the process for becoming a daemon.		if ($this->daemonize())		{			// Declare ticks to start signal monitoring. When you declare ticks, PCNTL will monitor			// incoming signals after each tick and call the relevant signal handler automatically.			declare (ticks = 1);			// Start the main execution loop.			while (true)			{				// Perform basic garbage collection.				$this->gc();				// Don't completely overload the CPU.				usleep(1000);				// Execute the main application logic.				$this->doExecute();			}		}		// We were not able to daemonize the application so log the failure and die gracefully.		else		{			JLog::add('Starting ' . $this->name . ' failed', JLog::INFO);		}		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');	}	/**	 * Restart daemon process.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function restart()	{		JLog::add('Stopping ' . $this->name, JLog::INFO);		$this->shutdown(true);	}	/**	 * Stop daemon process.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function stop()	{		JLog::add('Stopping ' . $this->name, JLog::INFO);		$this->shutdown();	}	/**	 * Method to change the identity of the daemon process and resources.	 *	 * @return  boolean  True if identity successfully changed	 *	 * @since   11.1	 * @see     posix_setuid()	 */	protected function changeIdentity()	{		// Get the group and user ids to set for the daemon.		$uid = (int) $this->config->get('application_uid', 0);		$gid = (int) $this->config->get('application_gid', 0);		// Get the application process id file path.		$file = $this->config->get('application_pid_file');		// Change the user id for the process id file if necessary.		if ($uid && (fileowner($file) != $uid) && (!@ chown($file, $uid)))		{			JLog::add('Unable to change user ownership of the process id file.', JLog::ERROR);			return false;		}		// Change the group id for the process id file if necessary.		if ($gid && (filegroup($file) != $gid) && (!@ chgrp($file, $gid)))		{			JLog::add('Unable to change group ownership of the process id file.', JLog::ERROR);			return false;		}		// Set the correct home directory for the process.		if ($uid && ($info = posix_getpwuid($uid)) && is_dir($info['dir']))		{			system('export HOME="' . $info['dir'] . '"');		}		// Change the user id for the process necessary.		if ($uid && (posix_getuid($file) != $uid) && (!@ posix_setuid($uid)))		{			JLog::add('Unable to change user ownership of the proccess.', JLog::ERROR);			return false;		}		// Change the group id for the process necessary.		if ($gid && (posix_getgid($file) != $gid) && (!@ posix_setgid($gid)))		{			JLog::add('Unable to change group ownership of the proccess.', JLog::ERROR);			return false;		}		// Get the user and group information based on uid and gid.		$user = posix_getpwuid($uid);		$group = posix_getgrgid($gid);		JLog::add('Changed daemon identity to ' . $user['name'] . ':' . $group['name'], JLog::INFO);		return true;	}	/**	 * Method to put the application into the background.	 *	 * @return  boolean	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function daemonize()	{		// Is there already an active daemon running?		if ($this->isActive())		{			JLog::add($this->name . ' daemon is still running. Exiting the application.', JLog::EMERGENCY);			return false;		}		// Reset Process Information		$this->safeMode = !!@ ini_get('safe_mode');		$this->processId = 0;		$this->running = false;		// Detach process!		try		{			// Check if we should run in the foreground.			if (!$this->input->get('f'))			{				// Detach from the terminal.				$this->detach();			}			else			{				// Setup running values.				$this->exiting = false;				$this->running = true;				// Set the process id.				$this->processId = (int) posix_getpid();				$this->parentId = $this->processId;			}		}		catch (RuntimeException $e)		{			JLog::add('Unable to fork.', JLog::EMERGENCY);			return false;		}		// Verify the process id is valid.		if ($this->processId < 1)		{			JLog::add('The process id is invalid; the fork failed.', JLog::EMERGENCY);			return false;		}		// Clear the umask.		@ umask(0);		// Write out the process id file for concurrency management.		if (!$this->writeProcessIdFile())		{			JLog::add('Unable to write the pid file at: ' . $this->config->get('application_pid_file'), JLog::EMERGENCY);			return false;		}		// Attempt to change the identity of user running the process.		if (!$this->changeIdentity())		{			// If the identity change was required then we need to return false.			if ($this->config->get('application_require_identity'))			{				JLog::add('Unable to change process owner.', JLog::CRITICAL);				return false;			}			else			{				JLog::add('Unable to change process owner.', JLog::WARNING);			}		}		// Setup the signal handlers for the daemon.		if (!$this->setupSignalHandlers())		{			return false;		}		// Change the current working directory to the application working directory.		@ chdir($this->config->get('application_directory'));		return true;	}	/**	 * This is truly where the magic happens.  This is where we fork the process and kill the parent	 * process, which is essentially what turns the application into a daemon.	 *	 * @return  void	 *	 * @since   12.1	 * @throws  RuntimeException	 */	protected function detach()	{		JLog::add('Detaching the ' . $this->name . ' daemon.', JLog::DEBUG);		// Attempt to fork the process.		$pid = $this->fork();		// If the pid is positive then we successfully forked, and can close this application.		if ($pid)		{			// Add the log entry for debugging purposes and exit gracefully.			JLog::add('Ending ' . $this->name . ' parent process', JLog::DEBUG);			$this->close();		}		// We are in the forked child process.		else		{			// Setup some protected values.			$this->exiting = false;			$this->running = true;			// Set the parent to self.			$this->parentId = $this->processId;		}	}	/**	 * Method to fork the process.	 *	 * @return  integer  The child process id to the parent process, zero to the child process.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function fork()	{		// Attempt to fork the process.		$pid = $this->pcntlFork();		// If the fork failed, throw an exception.		if ($pid === -1)		{			throw new RuntimeException('The process could not be forked.');		}		// Update the process id for the child.		elseif ($pid === 0)		{			$this->processId = (int) posix_getpid();		}		// Log the fork in the parent.		else		{			// Log the fork.			JLog::add('Process forked ' . $pid, JLog::DEBUG);		}		// Trigger the onFork event.		$this->postFork();		return $pid;	}	/**	 * Method to perform basic garbage collection and memory management in the sense of clearing the	 * stat cache.  We will probably call this method pretty regularly in our main loop.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	protected function gc()	{		// Perform generic garbage collection.		gc_collect_cycles();		// Clear the stat cache so it doesn't blow up memory.		clearstatcache();	}	/**	 * Method to attach the JApplicationDaemon signal handler to the known signals.  Applications	 * can override these handlers by using the pcntl_signal() function and attaching a different	 * callback method.	 *	 * @return  boolean	 *	 * @since   11.1	 * @see     pcntl_signal()	 */	protected function setupSignalHandlers()	{		// We add the error suppression for the loop because on some platforms some constants are not defined.		foreach (self::$signals as $signal)		{			// Ignore signals that are not defined.			if (!defined($signal) || !is_int(constant($signal)) || (constant($signal) === 0))			{				// Define the signal to avoid notices.				JLog::add('Signal "' . $signal . '" not defined. Defining it as null.', JLog::DEBUG);				define($signal, null);				// Don't listen for signal.				continue;			}			// Attach the signal handler for the signal.			if (!$this->pcntlSignal(constant($signal), array('JApplicationDaemon', 'signal')))			{				JLog::add(sprintf('Unable to reroute signal handler: %s', $signal), JLog::EMERGENCY);				return false;			}		}		return true;	}	/**	 * Method to shut down the daemon and optionally restart it.	 *	 * @param   boolean  $restart  True to restart the daemon on exit.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function shutdown($restart = false)	{		// If we are already exiting, chill.		if ($this->exiting)		{			return;		}		// If not, now we are.		else		{			$this->exiting = true;		}		// If we aren't already daemonized then just kill the application.		if (!$this->running && !$this->isActive())		{			JLog::add('Process was not daemonized yet, just halting current process', JLog::INFO);			$this->close();		}		// Only read the pid for the parent file.		if ($this->parentId == $this->processId)		{			// Read the contents of the process id file as an integer.			$fp = fopen($this->config->get('application_pid_file'), 'r');			$pid = fread($fp, filesize($this->config->get('application_pid_file')));			$pid = (int) $pid;			fclose($fp);			// Remove the process id file.			@ unlink($this->config->get('application_pid_file'));			// If we are supposed to restart the daemon we need to execute the same command.			if ($restart)			{				$this->close(exec(implode(' ', $GLOBALS['argv']) . ' > /dev/null &'));			}			// If we are not supposed to restart the daemon let's just kill -9.			else			{				passthru('kill -9 ' . $pid);				$this->close();			}		}	}	/**	 * Method to write the process id file out to disk.	 *	 * @return  boolean	 *	 * @since   11.1	 */	protected function writeProcessIdFile()	{		// Verify the process id is valid.		if ($this->processId < 1)		{			JLog::add('The process id is invalid.', JLog::EMERGENCY);			return false;		}		// Get the application process id file path.		$file = $this->config->get('application_pid_file');		if (empty($file))		{			JLog::add('The process id file path is empty.', JLog::ERROR);			return false;		}		// Make sure that the folder where we are writing the process id file exists.		$folder = dirname($file);		if (!is_dir($folder) && !JFolder::create($folder))		{			JLog::add('Unable to create directory: ' . $folder, JLog::ERROR);			return false;		}		// Write the process id file out to disk.		if (!file_put_contents($file, $this->processId))		{			JLog::add('Unable to write proccess id file: ' . $file, JLog::ERROR);			return false;		}		// Make sure the permissions for the proccess id file are accurate.		if (!chmod($file, 0644))		{			JLog::add('Unable to adjust permissions for the proccess id file: ' . $file, JLog::ERROR);			return false;		}		return true;	}	/**	 * Method to handle post-fork triggering of the onFork event.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function postFork()	{		// Trigger the onFork event.		$this->triggerEvent('onFork');	}	/**	 * Method to return the exit code of a terminated child process.	 *	 * @param   integer  $status  The status parameter is the status parameter supplied to a successful call to pcntl_waitpid().	 *	 * @return  integer  The child process exit code.	 *	 * @codeCoverageIgnore	 * @see     pcntl_wexitstatus()	 * @since   11.3	 */	protected function pcntlChildExitStatus($status)	{		return pcntl_wexitstatus($status);	}	/**	 * Method to return the exit code of a terminated child process.	 *	 * @return  integer  On success, the PID of the child process is returned in the parent's thread	 *                   of execution, and a 0 is returned in the child's thread of execution. On	 *                   failure, a -1 will be returned in the parent's context, no child process	 *                   will be created, and a PHP error is raised.	 *	 * @codeCoverageIgnore	 * @see     pcntl_fork()	 * @since   11.3	 */	protected function pcntlFork()	{		return pcntl_fork();	}	/**	 * Method to install a signal handler.	 *	 * @param   integer   $signal   The signal number.	 * @param   callback  $handler  The signal handler which may be the name of a user created function,	 *                              or method, or either of the two global constants SIG_IGN or SIG_DFL.	 * @param   boolean   $restart  Specifies whether system call restarting should be used when this	 *                              signal arrives.	 *	 * @return  boolean  True on success.	 *	 * @codeCoverageIgnore	 * @see     pcntl_signal()	 * @since   11.3	 */	protected function pcntlSignal($signal , $handler, $restart = true)	{		return pcntl_signal($signal, $handler, $restart);	}	/**	 * Method to wait on or return the status of a forked child.	 *	 * @param   integer  &$status  Status information.	 * @param   integer  $options  If wait3 is available on your system (mostly BSD-style systems),	 *                             you can provide the optional options parameter.	 *	 * @return  integer  The process ID of the child which exited, -1 on error or zero if WNOHANG	 *                   was provided as an option (on wait3-available systems) and no child was available.	 *	 * @codeCoverageIgnore	 * @see     pcntl_wait()	 * @since   11.3	 */	protected function pcntlWait(&$status, $options = 0)	{		return pcntl_wait($status, $options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script>var form = window.top.document.adminFormvar title = form.title.value;var alltext = window.top.<?php echo $this->editor->getContent('text') ?>;</script><table class="center" width="90%">	<tr>		<td class="contentheading" colspan="2"><script>document.write(title);</script></td>	</tr><tr>	<td valign="top" height="90%" colspan="2">		<script>document.write(alltext);</script>	</td></tr></table>
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;if (!defined('JPATH_ROOT')){	// Define a string constant for the root directory of the file system in native format	define('JPATH_ROOT', JPath::clean(JPATH_SITE));}/** * A Path handling class * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JPath{	/**	 * Checks if a path's permissions can be changed.	 *	 * @param   string  $path  Path to check.	 *	 * @return  boolean  True if path can have mode changed.	 *	 * @since   11.1	 */	public static function canChmod($path)	{		$perms = fileperms($path);		if ($perms !== false)		{			if (@chmod($path, $perms ^ 0001))			{				@chmod($path, $perms);				return true;			}		}		return false;	}	/**	 * Chmods files and directories recursively to given permissions.	 *	 * @param   string  $path        Root path to begin changing mode [without trailing slash].	 * @param   string  $filemode    Octal representation of the value to change file mode to [null = no change].	 * @param   string  $foldermode  Octal representation of the value to change folder mode to [null = no change].	 *	 * @return  boolean  True if successful [one fail means the whole operation failed].	 *	 * @since   11.1	 */	public static function setPermissions($path, $filemode = '0644', $foldermode = '0755')	{		// Initialise return value		$ret = true;		if (is_dir($path))		{			$dh = opendir($path);			while ($file = readdir($dh))			{				if ($file != '.' && $file != '..')				{					$fullpath = $path . '/' . $file;					if (is_dir($fullpath))					{						if (!self::setPermissions($fullpath, $filemode, $foldermode))						{							$ret = false;						}					}					else					{						if (isset($filemode))						{							if (!@ chmod($fullpath, octdec($filemode)))							{								$ret = false;							}						}					}				}			}			closedir($dh);			if (isset($foldermode))			{				if (!@ chmod($path, octdec($foldermode)))				{					$ret = false;				}			}		}		else		{			if (isset($filemode))			{				$ret = @ chmod($path, octdec($filemode));			}		}		return $ret;	}	/**	 * Get the permissions of the file/folder at a give path.	 *	 * @param   string  $path  The path of a file/folder.	 *	 * @return  string  Filesystem permissions.	 *	 * @since   11.1	 */	public static function getPermissions($path)	{		$path = self::clean($path);		$mode = @ decoct(@ fileperms($path) & 0777);		if (strlen($mode) < 3)		{			return '---------';		}		$parsed_mode = '';		for ($i = 0; $i < 3; $i++)		{			// Read			$parsed_mode .= ($mode{$i} & 04) ? "r" : "-";			// Write			$parsed_mode .= ($mode{$i} & 02) ? "w" : "-";			// Execute			$parsed_mode .= ($mode{$i} & 01) ? "x" : "-";		}		return $parsed_mode;	}	/**	 * Checks for snooping outside of the file system root.	 *	 * @param   string  $path  A file system path to check.	 * @param   string  $ds    Directory separator (optional).	 *	 * @return  string  A cleaned version of the path or exit on error.	 *	 * @since   11.1	 * @throws  Exception	 */	public static function check($path, $ds = DIRECTORY_SEPARATOR)	{		if (strpos($path, '..') !== false)		{			// Don't translate			throw new Exception('JPath::check Use of relative paths not permitted', 20);		}		$path = self::clean($path);		if ((JPATH_ROOT != '') && strpos($path, self::clean(JPATH_ROOT)) !== 0)		{			throw new Exception('JPath::check Snooping out of bounds @ ' . $path, 20);		}		return $path;	}	/**	 * Function to strip additional / or \ in a path name.	 *	 * @param   string  $path  The path to clean.	 * @param   string  $ds    Directory separator (optional).	 *	 * @return  string  The cleaned path.	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 */	public static function clean($path, $ds = DIRECTORY_SEPARATOR)	{		if (!is_string($path))		{			throw new UnexpectedValueException('JPath::clean: $path is not a string.');		}		$path = trim($path);		if (empty($path))		{			$path = JPATH_ROOT;		}		// Remove double slashes and backslashes and convert all slashes and backslashes to DIRECTORY_SEPARATOR		// If dealing with a UNC path don't forget to prepend the path with a backslash.		elseif (($ds == '\\') && ($path[0] == '\\' ) && ( $path[1] == '\\' ))		{			$path = "\\" . preg_replace('#[/\\\\]+#', $ds, $path);		}		else		{			$path = preg_replace('#[/\\\\]+#', $ds, $path);		}		return $path;	}	/**	 * Method to determine if script owns the path.	 *	 * @param   string  $path  Path to check ownership.	 *	 * @return  boolean  True if the php script owns the path passed.	 *	 * @since   11.1	 */	public static function isOwner($path)	{		jimport('joomla.filesystem.file');		$tmp = md5(mt_rand());		$ssp = ini_get('session.save_path');		$jtp = JPATH_SITE . '/tmp';		// Try to find a writable directory		$dir = is_writable('/tmp') ? '/tmp' : false;		$dir = (!$dir && is_writable($ssp)) ? $ssp : false;		$dir = (!$dir && is_writable($jtp)) ? $jtp : false;		if ($dir)		{			$test = $dir . '/' . $tmp;			// Create the test file			$blank = '';			JFile::write($test, $blank, false);			// Test ownership			$return = (fileowner($test) == fileowner($path));			// Delete the test file			JFile::delete($test);			return $return;		}		return false;	}	/**	 * Searches the directory paths for a given file.	 *	 * @param   mixed   $paths  An path string or array of path strings to search in	 * @param   string  $file   The file name to look for.	 *	 * @return  mixed   The full path and file name for the target file, or boolean false if the file is not found in any of the paths.	 *	 * @since   11.1	 */	public static function find($paths, $file)	{		// Force to array		if (!is_array($paths) && !($paths instanceof Iterator))		{			settype($paths, 'array');		}		// Start looping through the path set		foreach ($paths as $path)		{			// Get the path to the file			$fullname = $path . '/' . $file;			// Is the path based on a stream?			if (strpos($path, '://') === false)			{				// Not a stream, so do a realpath() to avoid directory				// traversal attempts on the local file system.				// Needed for substr() later				$path = realpath($path);				$fullname = realpath($fullname);			}			/*			 * The substr() check added to make sure that the realpath()			 * results in a directory registered so that			 * non-registered directories are not accessible via directory			 * traversal attempts.			 */			if (file_exists($fullname) && substr($fullname, 0, strlen($path)) == $path)			{				return $fullname;			}		}		// Could not find the file in the set of paths		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('ContactHelper', JPATH_ADMINISTRATOR . '/components/com_contact/helpers/contact.php');JLoader::register('CategoryHelperAssociation', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/association.php');/** * Contact Component Association Helper * * @package     Joomla.Site * @subpackage  com_contact * @since       3.0 */abstract class ContactHelperAssociation extends CategoryHelperAssociation{	/**	 * Method to get the associations for a given item	 *	 * @param   integer  $id    Id of the item	 * @param   string   $view  Name of the view	 *	 * @return  array   Array of associations for the item	 *	 * @since  3.0	 */	public static function getAssociations($id = 0, $view = null)	{		jimport('helper.route', JPATH_COMPONENT_SITE);		$app = JFactory::getApplication();		$jinput = $app->input;		$view = is_null($view) ? $jinput->get('view') : $view;		$id = empty($id) ? $jinput->getInt('id') : $id;		if ($view == 'contact')		{			if ($id)			{				$associations = JLanguageAssociations::getAssociations('com_contact', '#__contact_details', 'com_contact.item', $id);				$return = array();				foreach ($associations as $tag => $item)				{					$return[$tag] = ContactHelperRoute::getContactRoute($item->id, $item->catid, $item->language);				}				return $return;			}		}		if ($view == 'category' || $view == 'categories')		{			return self::getCategoryAssociations($id, 'com_contact');		}		return array();	}}
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Define the base path and require the other definesdefine('JPATH_BASE', dirname(__DIR__));require_once __DIR__ . '/defines.php';// Launch the applicationrequire_once __DIR__ . '/framework.php';// Register the Installation applicationJLoader::registerPrefix('Installation', JPATH_INSTALLATION);// Register the application's router due to non-standard includeJLoader::register('JRouterInstallation', __DIR__ . '/router.php');
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewPreinstallHtml $this */?><div class="btn-toolbar">	<div class="btn-group pull-right">		<a href="#" class="btn btn-primary" onclick="Install.submitform();" title="<?php echo JText::_('JCheck_Again'); ?>"><i class="icon-refresh icon-white"></i> <?php echo JText::_('JCheck_Again'); ?></a>	</div></div><form action="index.php" method="post" id="languageForm" class="form-horizontal">	<div class="control-group">		<label for="jform_language" class="control-label"><?php echo JText::_('INSTL_SELECT_LANGUAGE_TITLE'); ?></label>		<div class="controls">			<?php echo $this->form->getInput('language'); ?>		</div>	</div>	<input type="hidden" name="view" value="preinstall" />	<input type="hidden" name="task" value="setlanguage" />	<?php echo JHtml::_('form.token'); ?></form><form action="index.php" method="post" id="adminForm" class="form-horizontal">	<div class="row-fluid">		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<tbody>					<?php foreach ($this->options as $option) : ?>					<tr>						<td class="item">							<?php echo $option->label; ?>						</td>						<td>							<span class="label label-<?php echo ($option->state) ? 'success' : 'important'; ?>">								<?php echo JText::_(($option->state) ? 'JYES' : 'JNO'); ?>								<?php if ($option->notice):?>									<i class="icon-info-sign icon-white hasTooltip" title="<?php echo $option->notice; ?>"></i>								<?php endif;?>							</span>						</td>					</tr>					<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="2"></td>					</tr>				</tfoot>			</table>		</div>		<div class="span6">			<h3><?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_TITLE'); ?></h3>			<hr class="hr-condensed" />			<p class="install-text">				<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED_SETTINGS_DESC'); ?>			</p>			<table class="table table-striped table-condensed">				<thead>					<tr>						<th>							<?php echo JText::_('INSTL_PRECHECK_DIRECTIVE'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_RECOMMENDED'); ?>						</th>						<th>							<?php echo JText::_('INSTL_PRECHECK_ACTUAL'); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->settings as $setting) : ?>					<tr>						<td>							<?php echo $setting->label; ?>						</td>						<td>							<span class="label label-success disabled">								<?php echo JText::_(($setting->recommended) ? 'JON' : 'JOFF'); ?>							</span>						</td>						<td>							<span class="label label-<?php echo ($setting->state === $setting->recommended) ? 'success' : 'warning'; ?>">								<?php echo JText::_(($setting->state) ? 'JON' : 'JOFF'); ?>							</span>						</td>					</tr>				<?php endforeach; ?>				</tbody>				<tfoot>					<tr>						<td colspan="3"></td>					</tr>				</tfoot>			</table>		</div>	</div>	<input type="hidden" name="task" value="preinstall" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Installer Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.5 */class InstallerController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_ADMINISTRATOR . '/components/com_installer/helpers/installer.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'install');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			$ftp = JClientHelper::setCredentialsFromRequest('ftp');			$view->ftp = &$ftp;			// Get the model for the view.			$model = $this->getModel($vName);			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			InstallerHelper::addSubmenu($vName);			$view->display();		}		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQLi database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorMysqli extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysqli_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysqli_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysqli_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/helpers/route.php';$controller	= JControllerLegacy::getInstance('Tags');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Discover Installation Controller * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerControllerDiscover extends JControllerLegacy{	/**	 * Refreshes the cache of discovered extensions.	 *	 * @return  void	 *	 * @since   1.6	 */	public function refresh()	{		$model = $this->getModel('discover');		$model->discover();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false));	}	/**	 * Install a discovered extension.	 *	 * @return  void	 *	 * @since   1.6	 */	public function install()	{		$model = $this->getModel('discover');		$model->discover_install();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false));	}	/**	 * Clean out the discovered extension cache.	 *	 * @return  void	 *	 * @since   1.6	 */	public function purge()	{		$model = $this->getModel('discover');		$model->purge();		$this->setRedirect(JRoute::_('index.php?option=com_installer&view=discover', false), $model->_message);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Request * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Create the request global object */$GLOBALS['_JREQUEST'] = array();/** * Set the available masks for cleaning variables */const JREQUEST_NOTRIM    = 1;const JREQUEST_ALLOWRAW  = 2;const JREQUEST_ALLOWHTML = 4;JLog::add('JRequest is deprecated.', JLog::WARNING, 'deprecated');/** * JRequest Class * * This class serves to provide the Joomla Platform with a common interface to access * request variables.  This includes $_POST, $_GET, and naturally $_REQUEST.  Variables * can be passed through an input filter to avoid injection or returned raw. * * @package     Joomla.Legacy * @subpackage  Request * @since       11.1 * @deprecated  12.1  Get the JInput object from the application instead */class JRequest{	/**	 * Gets the full request path.	 *	 * @return  string	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getURI()	{		$uri = JURI::getInstance();		return $uri->toString(array('path', 'query'));	}	/**	 * Gets the request method.	 *	 * @return  string	 *	 * @since   11.1	 *	 * @deprecated   12.1 Use JInput::getMethod() instead	 */	public static function getMethod()	{		$method = strtoupper($_SERVER['REQUEST_METHOD']);		return $method;	}	/**	 * Fetches and returns a given variable.	 *	 * The default behaviour is fetching variables depending on the	 * current request method: GET and HEAD will result in returning	 * an entry from $_GET, POST and PUT will result in returning an	 * entry from $_POST.	 *	 * You can force the source by setting the $hash parameter:	 *	 * post    $_POST	 * get     $_GET	 * files   $_FILES	 * cookie  $_COOKIE	 * env     $_ENV	 * server  $_SERVER	 * method  via current $_SERVER['REQUEST_METHOD']	 * default $_REQUEST	 *	 * @param   string   $name     Variable name.	 * @param   string   $default  Default value if the variable does not exist.	 * @param   string   $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 * @param   string   $type     Return type for the variable, for valid values see {@link JFilterInput::clean()}.	 * @param   integer  $mask     Filter mask for the variable.	 *	 * @return  mixed  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1  Use JInput::Get	 */	public static function getVar($name, $default = null, $hash = 'default', $type = 'none', $mask = 0)	{		// Ensure hash and type are uppercase		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		$type = strtoupper($type);		$sig = $hash . $type . $mask;		// Get the input hash		switch ($hash)		{			case 'GET':				$input = &$_GET;				break;			case 'POST':				$input = &$_POST;				break;			case 'FILES':				$input = &$_FILES;				break;			case 'COOKIE':				$input = &$_COOKIE;				break;			case 'ENV':				$input = &$_ENV;				break;			case 'SERVER':				$input = &$_SERVER;				break;			default:				$input = &$_REQUEST;				$hash = 'REQUEST';				break;		}		if (isset($GLOBALS['_JREQUEST'][$name]['SET.' . $hash]) && ($GLOBALS['_JREQUEST'][$name]['SET.' . $hash] === true))		{			// Get the variable from the input hash			$var = (isset($input[$name]) && $input[$name] !== null) ? $input[$name] : $default;			$var = self::_cleanVar($var, $mask, $type);		}		elseif (!isset($GLOBALS['_JREQUEST'][$name][$sig]))		{			if (isset($input[$name]) && $input[$name] !== null)			{				// Get the variable from the input hash and clean it				$var = self::_cleanVar($input[$name], $mask, $type);				$GLOBALS['_JREQUEST'][$name][$sig] = $var;			}			elseif ($default !== null)			{				// Clean the default value				$var = self::_cleanVar($default, $mask, $type);			}			else			{				$var = $default;			}		}		else		{			$var = $GLOBALS['_JREQUEST'][$name][$sig];		}		return $var;	}	/**	 * Fetches and returns a given filtered variable. The integer	 * filter will allow only digits and the - sign to be returned. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  integer  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getInt($name, $default = 0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'int');	}	/**	 * Fetches and returns a given filtered variable. The unsigned integer	 * filter will allow only digits to be returned. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  integer  Requested variable.	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getUInt($name, $default = 0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'uint');	}	/**	 * Fetches and returns a given filtered variable.  The float	 * filter only allows digits and periods.  This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  float  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getFloat($name, $default = 0.0, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'float');	}	/**	 * Fetches and returns a given filtered variable. The bool	 * filter will only return true/false bool values. This is	 * currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  boolean  Requested variable.	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getBool($name, $default = false, $hash = 'default')	{		return self::getVar($name, $default, $hash, 'bool');	}	/**	 * Fetches and returns a given filtered variable. The word	 * filter only allows the characters [A-Za-z_]. This is currently	 * only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name.	 * @param   string  $default  Default value if the variable does not exist.	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD).	 *	 * @return  string  Requested variable.	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getWord($name, $default = '', $hash = 'default')	{		return self::getVar($name, $default, $hash, 'word');	}	/**	 * Cmd (Word and Integer0 filter	 *	 * Fetches and returns a given filtered variable. The cmd	 * filter only allows the characters [A-Za-z0-9.-_]. This is	 * currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string  $name     Variable name	 * @param   string  $default  Default value if the variable does not exist	 * @param   string  $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD)	 *	 * @return  string  Requested variable	 *	 * @deprecated  12.1	 * @since       11.1	 */	public static function getCmd($name, $default = '', $hash = 'default')	{		return self::getVar($name, $default, $hash, 'cmd');	}	/**	 * Fetches and returns a given filtered variable. The string	 * filter deletes 'bad' HTML code, if not overridden by the mask.	 * This is currently only a proxy function for getVar().	 *	 * See getVar() for more in-depth documentation on the parameters.	 *	 * @param   string   $name     Variable name	 * @param   string   $default  Default value if the variable does not exist	 * @param   string   $hash     Where the var should come from (POST, GET, FILES, COOKIE, METHOD)	 * @param   integer  $mask     Filter mask for the variable	 *	 * @return  string   Requested variable	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function getString($name, $default = '', $hash = 'default', $mask = 0)	{		// Cast to string, in case JREQUEST_ALLOWRAW was specified for mask		return (string) self::getVar($name, $default, $hash, 'string', $mask);	}	/**	 * Set a variable in one of the request variables.	 *	 * @param   string   $name       Name	 * @param   string   $value      Value	 * @param   string   $hash       Hash	 * @param   boolean  $overwrite  Boolean	 *	 * @return  string   Previous value	 *	 * @since   11.1	 *	 * @deprecated   12.1	 */	public static function setVar($name, $value = null, $hash = 'method', $overwrite = true)	{		// If overwrite is true, makes sure the variable hasn't been set yet		if (!$overwrite && array_key_exists($name, $_REQUEST))		{			return $_REQUEST[$name];		}		// Clean global request var		$GLOBALS['_JREQUEST'][$name] = array();		// Get the request hash value		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		$previous = array_key_exists($name, $_REQUEST) ? $_REQUEST[$name] : null;		switch ($hash)		{			case 'GET':				$_GET[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'POST':				$_POST[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'COOKIE':				$_COOKIE[$name] = $value;				$_REQUEST[$name] = $value;				break;			case 'FILES':				$_FILES[$name] = $value;				break;			case 'ENV':				$_ENV['name'] = $value;				break;			case 'SERVER':				$_SERVER['name'] = $value;				break;		}		// Mark this variable as 'SET'		$GLOBALS['_JREQUEST'][$name]['SET.' . $hash] = true;		$GLOBALS['_JREQUEST'][$name]['SET.REQUEST'] = true;		return $previous;	}	/**	 * Fetches and returns a request array.	 *	 * The default behaviour is fetching variables depending on the	 * current request method: GET and HEAD will result in returning	 * $_GET, POST and PUT will result in returning $_POST.	 *	 * You can force the source by setting the $hash parameter:	 *	 * post     $_POST	 * get      $_GET	 * files    $_FILES	 * cookie   $_COOKIE	 * env      $_ENV	 * server   $_SERVER	 * method   via current $_SERVER['REQUEST_METHOD']	 * default  $_REQUEST	 *	 * @param   string   $hash  to get (POST, GET, FILES, METHOD).	 * @param   integer  $mask  Filter mask for the variable.	 *	 * @return  mixed    Request hash.	 *	 * @deprecated  12.1   User JInput::get	 * @see         JInput	 * @since       11.1	 */	public static function get($hash = 'default', $mask = 0)	{		$hash = strtoupper($hash);		if ($hash === 'METHOD')		{			$hash = strtoupper($_SERVER['REQUEST_METHOD']);		}		switch ($hash)		{			case 'GET':				$input = $_GET;				break;			case 'POST':				$input = $_POST;				break;			case 'FILES':				$input = $_FILES;				break;			case 'COOKIE':				$input = $_COOKIE;				break;			case 'ENV':				$input = &$_ENV;				break;			case 'SERVER':				$input = &$_SERVER;				break;			default:				$input = $_REQUEST;				break;		}		$result = self::_cleanVar($input, $mask);		return $result;	}	/**	 * Sets a request variable.	 *	 * @param   array    $array      An associative array of key-value pairs.	 * @param   string   $hash       The request variable to set (POST, GET, FILES, METHOD).	 * @param   boolean  $overwrite  If true and an existing key is found, the value is overwritten, otherwise it is ignored.	 *	 * @return  void	 *	 * @deprecated  12.1  Use JInput::Set	 * @see         JInput::Set	 * @since       11.1	 */	public static function set($array, $hash = 'default', $overwrite = true)	{		foreach ($array as $key => $value)		{			self::setVar($key, $value, $hash, $overwrite);		}	}	/**	 * Checks for a form token in the request.	 *	 * Use in conjunction with JHtml::_('form.token').	 *	 * @param   string  $method  The request method in which to look for the token key.	 *	 * @return  boolean  True if found and valid, false otherwise.	 *	 * @deprecated  12.1 Use JSession::checkToken() instead. Note that 'default' has to become 'request'.	 * @since       11.1	 */	public static function checkToken($method = 'post')	{		if ($method == 'default')		{			$method = 'request';		}		return JSession::checkToken($method);	}	/**	 * Clean up an input variable.	 *	 * @param   mixed    $var   The input variable.	 * @param   integer  $mask  Filter bit mask.	 *                           1 = no trim: If this flag is cleared and the input is a string, the string will have leading and trailing	 *                               whitespace trimmed.	 *                           2 = allow_raw: If set, no more filtering is performed, higher bits are ignored.	 *                           4 = allow_html: HTML is allowed, but passed through a safe HTML filter first. If set, no more filtering	 *                               is performed. If no bits other than the 1 bit is set, a strict filter is applied.	 * @param   string   $type  The variable type {@see JFilterInput::clean()}.	 *	 * @return  mixed  Same as $var	 *	 * @deprecated  12.1	 * @since       11.1	 */	protected static function _cleanVar($var, $mask = 0, $type = null)	{		// If the no trim flag is not set, trim the variable		if (!($mask & 1) && is_string($var))		{			$var = trim($var);		}		// Now we handle input filtering		if ($mask & 2)		{			// If the allow raw flag is set, do not modify the variable			$var = $var;		}		elseif ($mask & 4)		{			// If the allow HTML flag is set, apply a safe HTML filter to the variable			$safeHtmlFilter = JFilterInput::getInstance(null, null, 1, 1);			$var = $safeHtmlFilter->clean($var, $type);		}		else		{			// Since no allow flags were set, we will apply the most strict filter to the variable			// $tags, $attr, $tag_method, $attr_method, $xss_auto use defaults.			$noHtmlFilter = JFilterInput::getInstance();			$var = $noHtmlFilter->clean($var, $type);		}		return $var;	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */abstract class JGithubObject{	/**	 * @var    JRegistry  Options for the GitHub object.	 * @since  11.3	 */	protected $options;	/**	 * @var    JGithubHttp  The HTTP client object to use in sending HTTP requests.	 * @since  11.3	 */	protected $client;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  GitHub options object.	 * @param   JGithubHttp  $client   The HTTP client object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JGithubHttp $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JGithubHttp($this->options);	}	/**	 * Method to build and return a full request URL for the request.  This method will	 * add appropriate pagination details if necessary and also prepend the API url	 * to have a complete URL for the request.	 *	 * @param   string   $path   URL to inflect	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  string   The request URL.	 *	 * @since   11.3	 */	protected function fetchUrl($path, $page = 0, $limit = 0)	{		// Get a new JUri object fousing the api url and given path.		$uri = new JUri($this->options->get('api.url') . $path);		if ($this->options->get('api.username', false))		{			$uri->setUser($this->options->get('api.username'));		}		if ($this->options->get('api.password', false))		{			$uri->setPass($this->options->get('api.password'));		}		// If we have a defined page number add it to the JUri object.		if ($page > 0)		{			$uri->setVar('page', (int) $page);		}		// If we have a defined items per page add it to the JUri object.		if ($limit > 0)		{			$uri->setVar('per_page', (int) $limit);		}		return (string) $uri;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * none (output raw module content) */function modChrome_none($module, &$params, &$attribs){	echo $module->content;}/* * html5 (chosen html5 tag and font headder tags) */function modChrome_html5($module, &$params, &$attribs){	$moduleTag      = $params->get('module_tag');	$headerTag      = htmlspecialchars($params->get('header_tag'));	$headerClass    = $params->get('header_class');	$bootstrapSize  = $params->get('bootstrap_size');	$moduleClass    = !empty($bootstrapSize) ? ' span' . (int) $bootstrapSize . '' : '';	$moduleClassSfx = htmlspecialchars($params->get('moduleclass_sfx'));	if (!empty ($module->content))	{		$html  = "<{$moduleTag} class=\"moduletable{$moduleClassSfx} {$moduleClass}\">";		if ((bool) $module->showtitle)		{			$html .= "<{$headerTag} class=\"{$headerClass}\">{$module->title}</{$headerTag}>";		}		$html .= $module->content;		$html .= "</{$moduleTag}>";		echo $html;	}}/* * xhtml (divs and font header tags) */function modChrome_xhtml($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty ($content)) : ?>		<div class="module<?php echo htmlspecialchars($params->get('moduleclass_sfx')); ?>">		<?php if ($module->showtitle != 0) : ?>			<h3><?php echo $module->title; ?></h3>		<?php endif; ?>			<?php echo $content; ?>		</div>	<?php endif;}/* * allows sliders */function modChrome_sliders($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty($content))	{		if ($params->get('automatic_title', '0') == '0')		{			echo JHtml::_('sliders.panel', $module->title, 'module' . $module->id);		}		elseif (method_exists('mod' . $module->name . 'Helper', 'getTitle'))		{			echo JHtml::_('sliders.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params, $module)), 'module' . $module->id);		}		else		{			echo JHtml::_('sliders.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'module' . $module->id);		}		echo $content;	}}/* * allows tabs */function modChrome_tabs($module, &$params, &$attribs){	$content = trim($module->content);	if (!empty($content))	{		if ($params->get('automatic_title', '0') == '0')		{			echo JHtml::_('tabs.panel', $module->title, 'module' . $module->id);		}		elseif (method_exists('mod' . $module->name . 'Helper', 'getTitle'))		{			echo JHtml::_('tabs.panel', call_user_func_array(array('mod' . $module->name . 'Helper', 'getTitle'), array($params)), 'module' . $module->id);		}		else		{			echo JHtml::_('tabs.panel', JText::_('MOD_' . $module->name . '_TITLE'), 'module' . $module->id);		}		echo $content;	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/offline.css" type="text/css" />	<?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/offline_rtl.css" type="text/css" />	<?php endif; ?>	<link rel="stylesheet" href="<?php echo $this->baseurl ?>/templates/system/css/general.css" type="text/css" /></head><body><jdoc:include type="message" />	<div id="frame" class="outline">		<?php if ($app->getCfg('offline_image')) : ?>		<img src="<?php echo $app->getCfg('offline_image'); ?>" alt="<?php echo htmlspecialchars($app->getCfg('sitename')); ?>" />		<?php endif; ?>		<h1>			<?php echo htmlspecialchars($app->getCfg('sitename')); ?>		</h1>	<?php if ($app->getCfg('display_offline_message', 1) == 1 && str_replace(' ', '', $app->getCfg('offline_message')) != '') : ?>		<p>			<?php echo $app->getCfg('offline_message'); ?>		</p>	<?php elseif ($app->getCfg('display_offline_message', 1) == 2 && str_replace(' ', '', JText::_('JOFFLINE_MESSAGE')) != '') : ?>		<p>			<?php echo JText::_('JOFFLINE_MESSAGE'); ?>		</p>	<?php  endif; ?>	<form action="<?php echo JRoute::_('index.php', true); ?>" method="post" id="form-login">	<fieldset class="input">		<p id="form-login-username">			<label for="username"><?php echo JText::_('JGLOBAL_USERNAME') ?></label>			<input name="username" id="username" type="text" class="inputbox" alt="<?php echo JText::_('JGLOBAL_USERNAME') ?>" size="18" />		</p>		<p id="form-login-password">			<label for="passwd"><?php echo JText::_('JGLOBAL_PASSWORD') ?></label>			<input type="password" name="password" class="inputbox" size="18" alt="<?php echo JText::_('JGLOBAL_PASSWORD') ?>" id="passwd" />		</p>		<p id="form-login-remember">			<label for="remember"><?php echo JText::_('JGLOBAL_REMEMBER_ME') ?></label>			<input type="checkbox" name="remember" class="inputbox" value="yes" alt="<?php echo JText::_('JGLOBAL_REMEMBER_ME') ?>" id="remember" />		</p>		<input type="submit" name="Submit" class="button" value="<?php echo JText::_('JLOGIN') ?>" />		<input type="hidden" name="option" value="com_users" />		<input type="hidden" name="task" value="user.login" />		<input type="hidden" name="return" value="<?php echo base64_encode(JURI::base()) ?>" />		<?php echo JHtml::_('form.token'); ?>	</fieldset>	</form>	</div></body></html>
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JUtility is a utility functions class * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */class JUtility{	/**	 * Method to extract key/value pairs out of a string with XML style attributes	 *	 * @param   string  $string  String containing XML style attributes	 *	 * @return  array  Key/Value pairs for the attributes	 *	 * @since   11.1	 */	public static function parseAttributes($string)	{		$attr = array();		$retarray = array();		// Let's grab all the key/value pairs using a regular expression		preg_match_all('/([\w:-]+)[\s]?=[\s]?"([^"]*)"/i', $string, $attr);		if (is_array($attr))		{			$numPairs = count($attr[1]);			for ($i = 0; $i < $numPairs; $i++)			{				$retarray[$attr[1][$i]] = $attr[2][$i];			}		}		return $retarray;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$canEdit = $this->item->params->get('access-edit');$params = &$this->item->params;$images = json_decode($this->item->images);$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;?><?php if ($this->item->state == 0) : ?><div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2>		<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>">			<?php echo $this->escape($this->item->title); ?></a>		<?php else : ?>			<?php echo $this->escape($this->item->title); ?>		<?php endif; ?>	</h2><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<ul class="actions">		<?php if ($params->get('show_print_icon')) : ?>		<li class="print-icon">			<?php echo JHtml::_('icon.print_popup', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>		<li class="email-icon">			<?php echo JHtml::_('icon.email', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>		<?php if ($canEdit) : ?>		<li class="edit-icon">			<?php echo JHtml::_('icon.edit', $this->item, $params, array(), true); ?>		</li>		<?php endif; ?>	</ul><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php // to do not that elegant would be nice to group the params ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php  echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category') && $this->item->parent_id != 1) : ?>		<dd class="parent-category-name">			<?php $title = $this->escape($this->item->parent_title);				$title = ($title) ? $title : JText::_('JGLOBAL_UNCATEGORISED');				$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_parent_category') and $this->item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php 	$title = $this->escape($this->item->category_title);					$title = ($title) ? $title : JText::_('JGLOBAL_UNCATEGORISED');					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_category') and $this->item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($this->item->author )) : ?>	<dd class="createdby">		<?php $author = $this->item->author; ?>		<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author);?>			<?php if (!empty($this->item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $this->item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date')) or ($params->get('show_parent_category')) or ($params->get('show_hits'))) : ?> </dl><?php endif; ?><?php  if (isset($images->image_intro) and !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="img-intro-<?php echo htmlspecialchars($imgfloat); ?>">	<img		<?php if ($images->image_intro_caption):			echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';		endif; ?>		src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/>	</div><?php endif; ?><?php echo $this->item->introtext; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif;?>		<p class="readmore">				<a href="<?php echo $link; ?>">					<?php if (!$params->get('access-view')) :						echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');					elseif ($readmore = $this->item->alternative_readmore) :						echo $readmore;						if ($params->get('show_readmore_title', 0) != 0) :							echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));						endif;					elseif ($params->get('show_readmore_title', 0) == 0) :						echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');					else :						echo JText::_('COM_CONTENT_READ_MORE');						echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));					endif; ?></a>		</p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><div class="item-separator"></div><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * Verifies that class members are spaced correctly. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members are spaced correctly. * * Example: * <b class="bad">Bad:</b> * class Foo * { *     <b class="bad">private $foo;</b> *     <b class="bad">private $bar;</b> * } * * <b class="good">Good:</b> * class Foo * { *     <b class="good">private $foo;</b> *     <b class="good">             </b> *     <b class="good">private $bar;</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_MemberVarSpacingSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // There needs to be 1 blank line before the var, not counting comments.        $prevLineToken = null;        for($i = ($stackPtr); $i > 0; $i--)        {            if(in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$commentTokens) === true)            {                // Skip comments.                continue;            }            else if(strpos($tokens[$i]['content'], $phpcsFile->eolChar) === false)            {                // Not the end of the line.                continue;            }            else            {                // If this is a WHITESPACE token, and the token right before                // it is a DOC_COMMENT, then it is just the newline after the                // member var's comment, and can be skipped.                if($tokens[$i]['code'] === T_WHITESPACE                && in_array($tokens[($i - 1)]['code'], PHP_CodeSniffer_Tokens::$commentTokens) === true)                {                    continue;                }                $prevLineToken = $i;                break;            }        }//for        if(is_null($prevLineToken) === true)        {            // Never found the previous line, which means            // there are 0 blank lines before the member var.            $foundLines = 0;        }        else        {            $prevContent = $phpcsFile->findPrevious(array(T_WHITESPACE, T_DOC_COMMENT), $prevLineToken, null, true);            if($tokens[$prevContent]['code'] == T_OPEN_CURLY_BRACKET)            {                $foundLines = 1;            }            else            {                $foundLines  = ($tokens[$prevLineToken]['line'] - $tokens[$prevContent]['line']);            }        }//end if        if($foundLines !== 1)        {            $error = sprintf('Expected 1 blank line before member var; %s found'            , $foundLines);            $phpcsFile->addError($error, $stackPtr, 'After');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer $stackPtr The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseSqlsrv is deprecated, use JDatabaseDriverSqlsrv instead.', JLog::WARNING, 'deprecated');/** * SQL Server database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/cc296152(SQL.90).aspx * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverSqlsrv instead. */class JDatabaseSqlsrv extends JDatabaseDriverSqlsrv{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of categories * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$weblinkId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, title AS text' .				' FROM #__weblinks' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $weblinkId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $weblinkId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Stemmer base class. * * @package     Joomla.Platform * @subpackage  Language * @since       12.1 */abstract class JLanguageStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  12.1	 */	protected $cache = array();	/**	 * @var    array  JLanguageStemmer instances.	 * @since  12.1	 */	protected static $instances = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  JLanguageStemmer  A JLanguageStemmer instance.	 *	 * @since   12.1	 * @throws  RuntimeException on invalid stemmer.	 */	public static function getInstance($adapter)	{		// Only create one stemmer for each adapter.		if (isset(self::$instances[$adapter]))		{			return self::$instances[$adapter];		}		// Setup the adapter for the stemmer.		$class = 'JLanguageStemmer' . ucfirst(trim($adapter));		// Check if a stemmer exists for the adapter.		if (!class_exists($class))		{			// Throw invalid adapter exception.			throw new RuntimeException(JText::sprintf('JLIB_STEMMER_INVALID_STEMMER', $adapter));		}		self::$instances[$adapter] = new $class;		return self::$instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   12.1	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseMysql is deprecated, use JDatabaseDriverMysql instead.', JLog::WARNING, 'deprecated');/** * MySQL database driver * * @package     Joomla.Legacy * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       11.1 * @deprecated  13.1 Use JDatabaseDriverMysql instead. */class JDatabaseMysql extends JDatabaseDriverMysql{}
<?php/** * @package     Joomla.Platform * @subpackage  Registry * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * PHP class format handler for JRegistry * * @package     Joomla.Platform * @subpackage  Registry * @since       11.1 */class JRegistryFormatPHP extends JRegistryFormat{	/**	 * Converts an object into a php class string.	 * - NOTE: Only one depth level is supported.	 *	 * @param   object  $object  Data Source Object	 * @param   array   $params  Parameters used by the formatter	 *	 * @return  string  Config class formatted string	 *	 * @since   11.1	 */	public function objectToString($object, $params = array())	{		// Build the object variables string		$vars = '';		foreach (get_object_vars($object) as $k => $v)		{			if (is_scalar($v))			{				$vars .= "\tpublic $" . $k . " = '" . addcslashes($v, '\\\'') . "';\n";			}			elseif (is_array($v) || is_object($v))			{				$vars .= "\tpublic $" . $k . " = " . $this->getArrayString((array) $v) . ";\n";			}		}		$str = "<?php\nclass " . $params['class'] . " {\n";		$str .= $vars;		$str .= "}";		// Use the closing tag if it not set to false in parameters.		if (!isset($params['closingtag']) || $params['closingtag'] !== false)		{			$str .= "\n?>";		}		return $str;	}	/**	 * Parse a PHP class formatted string and convert it into an object.	 *	 * @param   string  $data     PHP Class formatted string to convert.	 * @param   array   $options  Options used by the formatter.	 *	 * @return  object   Data object.	 *	 * @since   11.1	 */	public function stringToObject($data, array $options = array())	{		return true;	}	/**	 * Method to get an array as an exported string.	 *	 * @param   array  $a  The array to get as a string.	 *	 * @return  array	 *	 * @since   11.1	 */	protected function getArrayString($a)	{		$s = 'array(';		$i = 0;		foreach ($a as $k => $v)		{			$s .= ($i) ? ', ' : '';			$s .= '"' . $k . '" => ';			if (is_array($v) || is_object($v))			{				$s .= $this->getArrayString((array) $v);			}			else			{				$s .= '"' . addslashes($v) . '"';			}			$i++;		}		$s .= ')';		return $s;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JXMLElement is deprecated. Use SimpleXMLElement.', JLog::WARNING, 'deprecated');/** * Wrapper class for php SimpleXMLElement. * * @package     Joomla.Legacy * @subpackage  Utilities * @since       11.1 * @deprecated  13.3 Use SimpleXMLElement instead. */class JXMLElement extends SimpleXMLElement{	/**	 * Get the name of the element.	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated 13.3  Use SimpleXMLElement::getName() instead.	 */	public function name()	{		JLog::add('JXMLElement::name() is deprecated, use SimpleXMLElement::getName() instead.', JLog::WARNING, 'deprecated');		return (string) $this->getName();	}	/**	 * Return a well-formed XML string based on SimpleXML element	 *	 * @param   boolean  $compressed  Should we use indentation and newlines ?	 * @param   string   $indent      Indention character.	 * @param   integer  $level       The level within the document which informs the indentation.	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated 13.3  Use SimpleXMLElement::asXML() instead.	 */	public function asFormattedXML($compressed = false, $indent = "\t", $level = 0)	{		JLog::add('JXMLElement::asFormattedXML() is deprecated, use SimpleXMLElement::asXML() instead.', JLog::WARNING, 'deprecated');		$out = '';		// Start a new line, indent by the number indicated in $level		$out .= ($compressed) ? '' : "\n" . str_repeat($indent, $level);		// Add a <, and add the name of the tag		$out .= '<' . $this->getName();		// For each attribute, add attr="value"		foreach ($this->attributes() as $attr)		{			$out .= ' ' . $attr->getName() . '="' . htmlspecialchars((string) $attr, ENT_COMPAT, 'UTF-8') . '"';		}		// If there are no children and it contains no data, end it off with a />		if (!count($this->children()) && !(string) $this)		{			$out .= " />";		}		else		{			// If there are children			if (count($this->children()))			{				// Close off the start tag				$out .= '>';				$level++;				// For each child, call the asFormattedXML function (this will ensure that all children are added recursively)				foreach ($this->children() as $child)				{					$out .= $child->asFormattedXML($compressed, $indent, $level);				}				$level--;				// Add the newline and indentation to go along with the close tag				$out .= ($compressed) ? '' : "\n" . str_repeat($indent, $level);			}			elseif ((string) $this)			{				// If there is data, close off the start tag and add the data				$out .= '>' . htmlspecialchars((string) $this, ENT_COMPAT, 'UTF-8');			}			// Add the end tag			$out .= '</' . $this->getName() . '>';		}		return $out;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));?><?php if (empty($this->items)) : ?>	<p> <?php echo JText::_('COM_CONTACT_NO_ARTICLES'); ?> </p><?php else : ?><form action="<?php echo htmlspecialchars(JUri::getInstance()->toString()); ?>" method="post" name="adminForm" id="adminForm"><?php if ($this->params->get('show_pagination_limit')) : ?>	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>		<div class="display-limit">			<?php echo JText::_('JGLOBAL_DISPLAY_NUM'); ?>&#160;			<?php echo $this->pagination->getLimitBox(); ?>		</div>	</fieldset><?php endif; ?>	<table class="category">		<?php if ($this->params->get('show_headings')) : ?>		<thead><tr>			<th class="item-title">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_CONTACT_EMAIL_NAME_LABEL', 'a.name', $listDirn, $listOrder); ?>			</th>			<?php if ($this->params->get('show_position_headings')) : ?>			<th class="item-position">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_POSITION', 'a.con_position', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_email_headings')) : ?>			<th class="item-email">				<?php echo JText::_('JGLOBAL_EMAIL'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_telephone_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_TELEPHONE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_mobile_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_MOBILE'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_fax_headings')) : ?>			<th class="item-phone">				<?php echo JText::_('COM_CONTACT_FAX'); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_suburb_headings')) : ?>			<th class="item-suburb">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_SUBURB', 'a.suburb', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_state_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_STATE', 'a.state', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			<?php if ($this->params->get('show_country_headings')) : ?>			<th class="item-state">				<?php echo JHtml::_('grid.sort', 'COM_CONTACT_COUNTRY', 'a.country', $listDirn, $listOrder); ?>			</th>			<?php endif; ?>			</tr>		</thead>		<?php endif; ?>		<tbody>			<?php foreach ($this->items as $i => $item) : ?>				<?php if ($this->items[$i]->published == 0) : ?>					<tr class="system-unpublished cat-list-row<?php echo $i % 2; ?>">				<?php else: ?>					<tr class="cat-list-row<?php echo $i % 2; ?>" >				<?php endif; ?>					<td class="item-title">						<a href="<?php echo JRoute::_(ContactHelperRoute::getContactRoute($item->slug, $item->catid)); ?>">							<?php echo $item->name; ?></a>					</td>					<?php if ($this->params->get('show_position_headings')) : ?>						<td class="item-position">							<?php echo $item->con_position; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_email_headings')) : ?>						<td class="item-email">							<?php echo $item->email_to; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_telephone_headings')) : ?>						<td class="item-phone">							<?php echo $item->telephone; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_mobile_headings')) : ?>						<td class="item-phone">							<?php echo $item->mobile; ?>						</td>					<?php endif; ?>					<?php if ($this->params->get('show_fax_headings')) : ?>					<td class="item-phone">						<?php echo $item->fax; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_suburb_headings')) : ?>					<td class="item-suburb">						<?php echo $item->suburb; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_state_headings')) : ?>					<td class="item-state">						<?php echo $item->state; ?>					</td>					<?php endif; ?>					<?php if ($this->params->get('show_country_headings')) : ?>					<td class="item-state">						<?php echo $item->country; ?>					</td>					<?php endif; ?>				</tr>			<?php endforeach; ?>		</tbody>	</table>	<?php if ($this->params->get('show_pagination')) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>		<p class="counter">			<?php echo $this->pagination->getPagesCounter(); ?>		</p>		<?php endif; ?>		<?php echo $this->pagination->getPagesLinks(); ?>	</div>	<?php endif; ?>	<div>		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	</div></form><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Admin Controller * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminController extends JControllerLegacy{}
<?php/** * Squiz_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SuperfluousWhitespaceSniff.php 509 2011-08-30 02:21:56Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Checks for whitespace. * * Checks that. * <ul> *   <li>No whitespace proceeds the first content of the file.</li> *   <li>No whitespace resides after content on any line.</li> *   <li>There are not two or more empty lines in functions and classes.</li> *   <li>There is a exactly one empty line after the last content of the file.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.2.2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SuperfluousWhitespaceSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(       'PHP',       'JS',       'CSS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(        T_OPEN_TAG,        T_CLOSE_TAG,        T_WHITESPACE,        T_COMMENT,        T_CLOSE_CURLY_BRACKET,        );    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer $stackPtr The position of the current token in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if($stackPtr == $phpcsFile->numTokens - 1)        {            //-- We reached the end of the file - without a closing tag            if($tokens[$stackPtr]['code'] == T_WHITESPACE)            {                $lastCode = $tokens[$stackPtr - 1]['code'];                if($lastCode != T_CLOSE_CURLY_BRACKET                && $lastCode !== T_SEMICOLON)                {                    //-- If the second last is not a curly bracket or a semicolon                    $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);                }            }            else if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                //-- Files must end with an empty line                $phpcsFile->addError('Please end your files with an empty line.', $stackPtr);            }        }        if($tokens[$stackPtr]['code'] === T_OPEN_TAG)        {            /*             Check for start of file whitespace.             */            if($phpcsFile->tokenizerType !== 'PHP')            {                // The first token is always the open tag inserted when tokenizsed                // and the second token is always the first piece of content in                // the file. If the second token is whitespace, there was                // whitespace at the start of the file.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else            {                // If its the first token, then there is no space.                if($stackPtr === 0)                {                    return;                }                for($i = ($stackPtr - 1); $i >= 0; $i--)                {                    // If we find something that isn't inline html                    // then there is something previous in the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if($tokenContent !== '')                    {                        return;                    }                }//for            }//end if            $phpcsFile->addError('Additional whitespace found at start of file', $stackPtr);        }        else if($phpcsFile->numTokens == ($stackPtr - 1))        {            //-- Wereached the end of the file - without a closing tag            die('BB');        }        else if($tokens[$stackPtr]['code'] === T_CLOSE_TAG)        {            /*            Check for end of file whitespace.            */            if($phpcsFile->tokenizerType === 'JS')            {                // The last token is always the close tag inserted when tokenizsed                // and the second last token is always the last piece of content in                // the file. If the second last token is whitespace, there was                // whitespace at the end of the file.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    return;                }            }            else if($phpcsFile->tokenizerType === 'CSS')            {                // The last two tokens are always the close tag and whitespace                // inserted when tokenizsed and the third last token is always the                // last piece of content in the file. If the third last token is                // whitespace, there was whitespace at the end of the file.                if($tokens[($stackPtr - 3)]['code'] !== T_WHITESPACE)                {                    return;                }                // Adjust the pointer to give the correct line number for the error.                $stackPtr -= 2;            }            else            {                if(isset($tokens[($stackPtr + 1)]) === false)                {                    // The close PHP token is the last in the file.                    return;                }                for($i = ($stackPtr + 1); $i < $phpcsFile->numTokens; $i++)                {                    // If we find something that isn't inline html then there                    // is more to the file.                    if($tokens[$i]['type'] !== 'T_INLINE_HTML')                    {                        return;                    }                    // If we have ended up with inline html make sure it                    // isn't just whitespace.                    $tokenContent = trim($tokens[$i]['content']);                    if(empty($tokenContent) === false)                    {                        return;                    }                }//for            }            $phpcsFile->addError('Additional whitespace found at end of file', $stackPtr);        }        else        {            /*             Check for end of line whitespace.             */            if(strpos($tokens[$stackPtr]['content'], $phpcsFile->eolChar) === false)            {                return;            }            $tokenContent = rtrim($tokens[$stackPtr]['content'], $phpcsFile->eolChar);            if(empty($tokenContent) === false)            {                if(preg_match('|^.*\s+$|', $tokenContent) !== 0)                {                    $phpcsFile->addError('Whitespace found at end of line', $stackPtr);                }            }            /*             Check for multiple blanks lines in a function or class.             */            if($phpcsFile->hasCondition($stackPtr, T_FUNCTION) === true            || $phpcsFile->hasCondition($stackPtr, T_CLASS) === true)            {                if($tokens[($stackPtr - 1)]['line'] < $tokens[$stackPtr]['line']                && $tokens[($stackPtr - 2)]['line'] === $tokens[($stackPtr - 1)]['line'])                {                    // This is an empty line and the line before this one is not                    //  empty, so this could be the start of a multiple empty                    // line block.                    $next  = $phpcsFile->findNext(T_WHITESPACE, $stackPtr, null, true);                    $lines = $tokens[$next]['line'] - $tokens[$stackPtr]['line'];                    if($lines > 1)                    {                        $error = 'Functions and classes must not contain multiple empty lines in a row;'                        ." found $lines empty lines";                        $phpcsFile->addError($error, $stackPtr);                    }                }            }        }//end if    }//function}//class
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of newsfeed categories. * * @package     Joomla.Site * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_newsfeeds.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_newsfeeds';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Newsfeeds', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="categories-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->params->get('show_base_description')) : ?>	<?php 	//If there is a description in the menu parameters use that; ?>		<?php if ($this->params->get('categories_description')) : ?>		<div class="category-desc base-desc">			<?php echo  JHtml::_('content.prepare', $this->params->get('categories_description'), '', 'com_contact.categories'); ?>			</div>		<?php  else: ?>			<?php //Otherwise get one from the database if it exists. ?>			<?php  if ($this->parent->description) : ?>				<div class="category-desc base-desc">					<?php  echo JHtml::_('content.prepare', $this->parent->description, '', 'com_contact.categories'); ?>				</div>			<?php  endif; ?>		<?php  endif; ?>	<?php endif; ?><?phpecho $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$cparams = JComponentHelper::getParams('com_media');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><section class="blog<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0 or $this->params->get('show_category_title')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h1><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? 'system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>	<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">	<?php endif; ?>	<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">		<?php			$this->item = &$item;			echo $this->loadTemplate('item');		?>	</article>	<?php $counter++; ?>	<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<?php echo $this->loadTemplate('links'); ?><?php endif; ?>  	<div class="cat-children">	<?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<h3>			<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>		</h3>		<?php endif; ?>	<?php endif; ?>			<?php echo $this->loadTemplate('children'); ?>		</div><?php if (($this->params->def('show_pagination', 1) == 1  || ($this->params->get('show_pagination') == 2)) && ($this->pagination->pagesTotal > 1)) : ?>		<div class="pagination">						<?php  if ($this->params->def('show_pagination_results', 1)) : ?>						<p class="counter">								<?php echo $this->pagination->getPagesCounter(); ?>						</p>				<?php endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>		</div><?php  endif; ?></section>
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$script  = 'function insertPagebreak() {'."\n\t";// Get the pagebreak title$script .= 'var title = document.getElementById("title").value;'."\n\t";$script .= 'if (title != \'\') {'."\n\t\t";$script .= 'title = "title=\""+title+"\" ";'."\n\t";$script .= '}'."\n\t";// Get the pagebreak toc alias -- not inserting for now// don't know which attribute to use...$script .= 'var alt = document.getElementById("alt").value;'."\n\t";$script .= 'if (alt != \'\') {'."\n\t\t";$script .= 'alt = "alt=\""+alt+"\" ";'."\n\t";$script .= '}'."\n\t";$script .= 'var tag = "<hr class=\"system-pagebreak\" "+title+" "+alt+"/>";'."\n\t";$script .= 'window.parent.jInsertEditorText(tag, \''.$this->eName.'\');'."\n\t";$script .= 'window.parent.SqueezeBox.close();'."\n\t";$script .= 'return false;'."\n";$script .= '}'."\n";JFactory::getDocument()->addScriptDeclaration($script);?>		<form>		<table width="100%" align="center">			<tr width="40%">				<td class="key" align="right">					<label for="title">						<?php echo JText::_('COM_CONTENT_PAGEBREAK_TITLE'); ?>					</label>				</td>				<td>					<input type="text" id="title" name="title" />				</td>			</tr>			<tr width="60%">				<td class="key" align="right">					<label for="alias">						<?php echo JText::_('COM_CONTENT_PAGEBREAK_TOC'); ?>					</label>				</td>				<td>					<input type="text" id="alt" name="alt" />				</td>			</tr>		</table>		</form>		<button onclick="insertPagebreak();"><?php echo JText::_('COM_CONTENT_PAGEBREAK_INSERT_BUTTON'); ?></button>
<?php/** * @package     Joomla.Site * @subpackage  mod_related_items * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$cacheparams = new stdClass;$cacheparams->cachemode = 'safeuri';$cacheparams->class = 'ModRelatedItemsHelper';$cacheparams->method = 'getList';$cacheparams->methodparams = $params;$cacheparams->modeparams = array('id' => 'int', 'Itemid' => 'int');$list = JModuleHelper::moduleCache($module, $params, $cacheparams);if (!count($list)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$showDate = $params->get('showDate', 0);require JModuleHelper::getLayoutPath('mod_related_items', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$link	= $params->get('link');$folder	= ModRandomImageHelper::getFolder($params);$images	= ModRandomImageHelper::getImages($params, $folder);if (!count($images)){	echo JText::_('MOD_RANDOM_IMAGE_NO_IMAGES');	return;}$image = ModRandomImageHelper::getRandomImage($params, $images);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_random_image', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL server database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlsrv extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return sqlsrv_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return sqlsrv_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		sqlsrv_free_stmt($this->cursor);	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class for connecting to a GitHub instance. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubHttp extends JHttp{	/**	 * @const  integer  Use no authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_NONE = 0;	/**	 * @const  integer  Use basic authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_BASIC = 1;	/**	 * @const  integer  Use OAuth authentication for HTTP connections.	 * @since  11.3	 */	const AUTHENTICATION_OAUTH = 2;	/**	 * Constructor.	 *	 * @param   JRegistry       $options    Client options object.	 * @param   JHttpTransport  $transport  The HTTP transport object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		// Call the JHttp constructor to setup the object.		parent::__construct($options, $transport);		// Make sure the user agent string is defined.		$this->options->def('userAgent', 'JGitHub/2.0');		// Set the default timeout to 120 seconds.		$this->options->def('timeout', 120);	}	/**	 * Method to send the PATCH command to the server.	 *	 * @param   string  $url      Path to the resource.	 * @param   mixed   $data     Either an associative array or a string to be sent with the request.	 * @param   array   $headers  An array of name-value pairs to include in the header of the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function patch($url, $data, array $headers = null)	{		return $this->transport->request('PATCH', new JUri($url), $data, $headers);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller = JControllerLegacy::getInstance('Wrapper');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Mail * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;$PHPMAILER_LANG["authenticate"] = JText::_('PHPMAILER_AUTHENTICATE');$PHPMAILER_LANG["connect_host"] = JText::_('PHPMAILER_CONNECT_HOST');$PHPMAILER_LANG["data_not_accepted"] = JText::_('PHPMAILER_DATA_NOT_ACCEPTED');$PHPMAILER_LANG['empty_message'] = JText::_('PHPMAILER_EMPTY_MESSAGE');$PHPMAILER_LANG["encoding"] = JText::_('PHPMAILER_ENCODING');$PHPMAILER_LANG["execute"] = JText::_('PHPMAILER_EXECUTE');$PHPMAILER_LANG["file_access"] = JText::_('PHPMAILER_FILE_ACCESS');$PHPMAILER_LANG["file_open"] = JText::_('PHPMAILER_FILE_OPEN');$PHPMAILER_LANG["from_failed"] = JText::_('PHPMAILER_FROM_FAILED');$PHPMAILER_LANG["instantiate"] = JText::_('PHPMAILER_INSTANTIATE');$PHPMAILER_LANG['invalid_address'] = JText::_('PHPMAILER_INVALID_ADDRESS');$PHPMAILER_LANG["mailer_not_supported"] = JText::_('PHPMAILER_MAILER_IS_NOT_SUPPORTED');$PHPMAILER_LANG["provide_address"] = JText::_('PHPMAILER_PROVIDE_ADDRESS');$PHPMAILER_LANG["recipients_failed"] = JText::_('PHPMAILER_RECIPIENTS_FAILED');$PHPMAILER_LANG["signing"]  = JText::_('PHPMAILER_SIGNING_ERROR');$PHPMAILER_LANG['smtp_connect_failed'] = JText::_('PHPMAILER_SMTP_CONNECT_FAILED');$PHPMAILER_LANG['smtp_error'] = JText::_('PHPMAILER_SMTP_ERROR');$PHPMAILER_LANG['variable_set'] = JText::_('PHPMAILER_VARIABLE_SET');
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="accordion" id="accordion1">	<div class="accordion-group">		<div class="accordion-heading">			<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#batch">				<?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_LABEL');?>			</a>		</div>		<div id="batch" class="accordion-body collapse">			<div class="accordion-inner">				<fieldset class="batch form-inline">					<div class="control-group">						<label for="new_url" class="control-label"><?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_LABEL'); ?></label>						<div class="controls">							<input type="text" name="new_url" id="new_url" value="" size="50" title="<?php echo JText::_('COM_REDIRECT_FIELD_NEW_URL_DESC'); ?>" />						</div>					</div>					<div class="control-group">						<label for="comment" class="control-label"><?php echo JText::_('COM_REDIRECT_FIELD_COMMENT_LABEL'); ?></label>						<div class="controls">							<input type="text" name="comment" id="comment" value="" size="50" title="<?php echo JText::_('COM_REDIRECT_FIELD_COMMENT_DESC'); ?>" />						</div>					</div>					<button class="btn btn-primary" type="button" onclick="this.form.task.value='links.activate';this.form.submit();"><?php echo JText::_('COM_REDIRECT_BUTTON_UPDATE_LINKS'); ?></button>				</fieldset>			</div>		</div>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleEquals extends JFormRule{	/**	 * Method to test if two values are equal. To use this rule, the form	 * XML needs a validate attribute of equals and a field attribute	 * that is equal to the field to test against.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 * @throws  UnexpectedValueException	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$field = (string) $element['field'];		// Check that a validation field is set.		if (!$field)		{			throw new UnexpectedValueException(sprintf('$field empty in %s::test', get_class($this)));		}		if (is_null($form))		{			throw new InvalidArgumentException(sprintf('The value for $form must not be null in %s', get_class($this)));		}		if (is_null($input))		{			throw new InvalidArgumentException(sprintf('The value for $input must not be null in %s', get_class($this)));		}		// Test the two values against each other.		if ($value == $input->get($field))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($params->def('prepare_content', 1)){	JPluginHelper::importPlugin('content');	$module->content = JHtml::_('content.prepare', $module->content, '', 'mod_custom.content');}require JModuleHelper::getLayoutPath('mod_custom');
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * OpenSearch class, provides an easy interface to display an OpenSearch document * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.opensearch.org/ * @since       11.1 */class JDocumentOpensearch extends JDocument{	/**	 * ShortName element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	private $_shortName = "";	/**	 * Images collection	 *	 * optional	 *	 * @var    object	 * @since  11.1	 */	private $_images = array();	/**	 * The url collection	 *	 * @var    array	 * @since  11.1	 */	private $_urls = array();	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since  11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set document type		$this->_type = 'opensearch';		// Set mime type		$this->_mime = 'application/opensearchdescription+xml';		// Add the URL for self updating		$update = new JOpenSearchUrl;		$update->type = 'application/opensearchdescription+xml';		$update->rel = 'self';		$update->template = JRoute::_(JURI::getInstance());		$this->addUrl($update);		// Add the favicon as the default image		// Try to find a favicon by checking the template and root folder		$app = JFactory::getApplication();		$dirs = array(JPATH_THEMES . '/' . $app->getTemplate(), JPATH_BASE);		foreach ($dirs as $dir)		{			if (file_exists($dir . '/favicon.ico'))			{				$path = str_replace(JPATH_BASE . '/', '', $dir);				$path = str_replace('\\', '/', $path);				$favicon = new JOpenSearchImage;				$favicon->data = JURI::base() . $path . '/favicon.ico';				$favicon->height = '16';				$favicon->width = '16';				$favicon->type = 'image/vnd.microsoft.icon';				$this->addImage($favicon);				break;			}		}	}	/**	 * Render the document	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		$xml = new DOMDocument('1.0', 'utf-8');		if (defined('JDEBUG') && JDEBUG)		{			$xml->formatOutput = true;		}		// The OpenSearch Namespace		$osns = 'http://a9.com/-/spec/opensearch/1.1/';		// Create the root element		$elOs = $xml->createElementNS($osns, 'OpenSearchDescription');		$elShortName = $xml->createElementNS($osns, 'ShortName');		$elShortName->appendChild($xml->createTextNode(htmlspecialchars($this->_shortName)));		$elOs->appendChild($elShortName);		$elDescription = $xml->createElementNS($osns, 'Description');		$elDescription->appendChild($xml->createTextNode(htmlspecialchars($this->description)));		$elOs->appendChild($elDescription);		// Always set the accepted input encoding to UTF-8		$elInputEncoding = $xml->createElementNS($osns, 'InputEncoding');		$elInputEncoding->appendChild($xml->createTextNode('UTF-8'));		$elOs->appendChild($elInputEncoding);		foreach ($this->_images as $image)		{			$elImage = $xml->createElementNS($osns, 'Image');			$elImage->setAttribute('type', $image->type);			$elImage->setAttribute('width', $image->width);			$elImage->setAttribute('height', $image->height);			$elImage->appendChild($xml->createTextNode(htmlspecialchars($image->data)));			$elOs->appendChild($elImage);		}		foreach ($this->_urls as $url)		{			$elUrl = $xml->createElementNS($osns, 'Url');			$elUrl->setAttribute('type', $url->type);			// Results is the default value so we don't need to add it			if ($url->rel != 'results')			{				$elUrl->setAttribute('rel', $url->rel);			}			$elUrl->setAttribute('template', $url->template);			$elOs->appendChild($elUrl);		}		$xml->appendChild($elOs);		parent::render();		return $xml->saveXML();	}	/**	 * Sets the short name	 *	 * @param   string  $name  The name.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function setShortName($name)	{		$this->_shortName = $name;		return $this;	}	/**	 * Adds an URL to the OpenSearch description.	 *	 * @param   JOpenSearchUrl  $url  The url to add to the description.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addUrl(JOpenSearchUrl $url)	{		$this->_urls[] = $url;		return $this;	}	/**	 * Adds an image to the OpenSearch description.	 *	 * @param   JOpenSearchImage  $image  The image to add to the description.	 *	 * @return  JDocumentOpensearch instance of $this to allow chaining	 *	 * @since   11.1	 */	public function addImage(JOpenSearchImage $image)	{		$this->_images[] = $image;		return $this;	}}/** * JOpenSearchUrl is an internal class that stores the search URLs for the OpenSearch description * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JOpenSearchUrl{	/**	 * Type item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = 'text/html';	/**	 * Rel item element	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $rel = 'results';	/**	 * Template item element. Has to contain the {searchTerms} parameter to work.	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $template;}/** * JOpenSearchImage is an internal class that stores Images for the OpenSearch Description * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JOpenSearchImage{	/**	 * The images MIME type	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $type = "";	/**	 * URL of the image or the image as base64 encoded value	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $data = "";	/**	 * The image's width	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $width;	/**	 * The image's height	 *	 * required	 *	 * @var    string	 * @since  11.1	 */	public $height;}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');?><div class="contact<?php echo $this->pageclass_sfx?>">		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid);?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<h2>			<span class="contact-name"><?php echo $this->contact->name; ?></span>		</h2>	<?php endif;  ?>	<div class="encyclopedia_col1">		<?php if ($this->contact->image ) : ?>			<div class="contact-image">			<?php // We are going to use the contact address field for the main image caption.				// If we have a caption load the caption behavior. ?>			<?php if ($this->contact->address)			{				JHtml::_('behavior.caption');			}?>				<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle', 'class' => 'caption', 'title' => $this->contact->address)); ?>			</div>		<?php endif; ?>	</div>	<div class="encyclopedia_col2">		<?php // We are going to use some of the standard content fields in non standard ways. ?>				<div class="contact-miscinfo">						<div class="contact-misc">							<?php echo $this->contact->misc; ?>						</div>					</div>		<?php //Let's use position for the scientific name. ?>		<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>			<p class="contact-position"><?php echo $this->contact->con_position; ?></p>		<?php endif; ?>		<?php //Let's use state to put the family name.  ?>		<?php if ($this->contact->state && $this->params->get('show_state')) : ?>			<p class="contact-state"><?php echo $this->contact->state; ?></p>		<?php endif; ?>		<?php // Let's use contry to list the main countries it grows in. '?>		<?php if ($this->contact->country && $this->params->get('show_country')) : ?>			<p class="contact-country"><?php echo $this->contact->country; ?></p>		<?php endif; ?>	</div><div class="clr"> </div>	<?php  if ($this->params->get('presentation_style') != 'plain'):?>		<?php  echo  JHtml::_($this->params->get('presentation_style').'.start', 'contact-slider'); ?>	<?php endif ?><div class="encyclopedia_links"><?php echo $this->loadTemplate('links'); ?></div>	<?php if ($this->params->get('presentation_style') != 'plain'):?>			<?php echo JHtml::_($this->params->get('presentation_style').'.end'); ?>			<?php endif; ?></div>
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML utility class for the installation application * * @package  Joomla.Installation * @since    1.6 */class JHtmlInstallation{	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   1.6	 */	public static function stepbar()	{		// Determine if the configuration file path is writable.		$path = JPATH_CONFIGURATION . '/configuration.php';		$useftp = (file_exists($path)) ? !is_writable($path) : !is_writable(JPATH_CONFIGURATION . '/');		$tabs = array();		$tabs[] = 'site';		$tabs[] = 'database';		if ($useftp)		{			$tabs[] = 'ftp';		}		$tabs[] = 'summary';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the side bar	 *	 * @return  string  Markup for the side bar	 *	 * @since   3.1	 */	public static function stepbarlanguages()	{		$tabs = array();		$tabs[] = 'languages';		$tabs[] = 'defaultlanguage';		$tabs[] = 'complete';		$html = array();		$html[] = '<ul class="nav nav-tabs">';		foreach ($tabs as $tab)		{			$html[] = self::getTab($tab, $tabs);		}		$html[] = '</ul>';		return implode('', $html);	}	/**	 * Method to generate the navigation tab	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  string  Markup for the tab	 *	 * @since   3.1	 */	private static function getTab($id, $tabs)	{		$input = JFactory::getApplication()->input;		$num   = self::getTabNumber($id, $tabs);		$view  = self::getTabNumber($input->getWord('view'), $tabs);		$tab   = '<span class="badge">' . $num . '</span> ' . JText::_('INSTL_STEP_' . strtoupper($id) . '_LABEL');		if ($view + 1 == $num)		{			$tab = '<a href="#" onclick="Install.submitform();">' . $tab . '</a>';		}		elseif ($view < $num)		{			$tab = '<span>' . $tab . '</span>';		}		else		{			$tab = '<a href="#" onclick="return Install.goToPage(\'' . $id . '\')">' . $tab . '</a>';		}		return '<li class="step' . ($num == $view ? ' active' : '') . '" id="' . $id . '">' . $tab . '</li>';	}	/**	 * Method to determine the tab (step) number	 *	 * @param   string  $id    The container ID	 * @param   array   $tabs  The navigation tabs	 *	 * @return  integer  Tab number in navigation sequence	 *	 * @since   3.1	 */	private static function getTabNumber($id, $tabs)	{		$num = (int) array_search($id, $tabs);		$num++;		return $num;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strcspn* Find length of initial segment not matching mask* Note: requires utf8_strlen and utf8_substr (if start, length are used)* @param string* @return int* @see http://www.php.net/strcspn* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_strcspn($str, $mask, $start = NULL, $length = NULL) {    if ( empty($mask) || strlen($mask) == 0 ) {        return NULL;    }    $mask = preg_replace('!([\\\\\\-\\]\\[/^])!','\\\${1}',$mask);    if ( $start !== NULL || $length !== NULL ) {        $str = utf8_substr($str, $start, $length);    }    preg_match('/^[^'.$mask.']+/u',$str, $matches);    if ( isset($matches[0]) ) {        return utf8_strlen($matches[0]);    }    return 0;}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to manipulate an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImage{	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_FILL = 1;	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_INSIDE = 2;	/**	 * @const  integer	 * @since  11.3	 */	const SCALE_OUTSIDE = 3;	/**	 * @const  integer	 * @since  12.2	 */	const CROP = 4;	/**	 * @const  integer	 * @since  12.3	 */	const CROP_RESIZE = 5;	/**	 * @var    resource  The image resource handle.	 * @since  11.3	 */	protected $handle;	/**	 * @var    string  The source image path.	 * @since  11.3	 */	protected $path = null;	/**	 * @var    array  Whether or not different image formats are supported.	 * @since  11.3	 */	protected static $formats = array();	/**	 * Class constructor.	 *	 * @param   mixed  $source  Either a file path for a source image or a GD resource handler for an image.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct($source = null)	{		// Verify that GD support for PHP is available.		if (!extension_loaded('gd'))		{			// @codeCoverageIgnoreStart			JLog::add('The GD extension for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The GD extension for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Determine which image types are supported by GD, but only once.		if (!isset(self::$formats[IMAGETYPE_JPEG]))		{			$info = gd_info();			self::$formats[IMAGETYPE_JPEG] = ($info['JPEG Support']) ? true : false;			self::$formats[IMAGETYPE_PNG] = ($info['PNG Support']) ? true : false;			self::$formats[IMAGETYPE_GIF] = ($info['GIF Read Support']) ? true : false;		}		// If the source input is a resource, set it as the image handle.		if (is_resource($source) && (get_resource_type($source) == 'gd'))		{			$this->handle = &$source;		}		elseif (!empty($source) && is_string($source))		{			// If the source input is not empty, assume it is a path and populate the image handle.			$this->loadFile($source);		}	}	/**	 * Method to return a properties object for an image given a filesystem path.  The	 * result object has values for image width, height, type, attributes, mime type, bits,	 * and channels.	 *	 * @param   string  $path  The filesystem path to the image for which to get properties.	 *	 * @return  stdClass	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public static function getImageFileProperties($path)	{		// Make sure the file exists.		if (!file_exists($path))		{			throw new InvalidArgumentException('The image file does not exist.');		}		// Get the image file information.		$info = getimagesize($path);		if (!$info)		{			// @codeCoverageIgnoreStart			throw new RuntimeException('Unable to get properties for the image.');			// @codeCoverageIgnoreEnd		}		// Build the response object.		$properties = (object) array(			'width' => $info[0],			'height' => $info[1],			'type' => $info[2],			'attributes' => $info[3],			'bits' => isset($info['bits']) ? $info['bits'] : null,			'channels' => isset($info['channels']) ? $info['channels'] : null,			'mime' => $info['mime']		);		return $properties;	}	/**	 * Method to generate thumbnails from the current image. It allows	 * creation by resizing or cropping the original image.	 *	 * @param   mixed    $thumbSizes      String or array of strings. Example: $thumbSizes = array('150x75','250x150');	 * @param   integer  $creationMethod  1-3 resize $scaleMethod | 4 create croppping | 5 resize then crop	 *	 * @return array	 *	 * @throws  LogicException	 * @throws  InvalidArgumentException	 *	 * @since 12.2	 */	public function generateThumbs($thumbSizes, $creationMethod = self::SCALE_INSIDE)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Accept a single thumbsize string as parameter		if (!is_array($thumbSizes))		{			$thumbSizes = array($thumbSizes);		}		// Process thumbs		$generated = array();		if (!empty($thumbSizes))		{			foreach ($thumbSizes as $thumbSize)			{				// Desired thumbnail size				$size = explode('x', strtolower($thumbSize));				if (count($size) != 2)				{					throw new InvalidArgumentException('Invalid thumb size received: ' . $thumbSize);				}				$thumbWidth 	= $size[0];				$thumbHeight	= $size[1];				switch ($creationMethod)				{					// Case for self::CROP					case 4:						$thumb = $this->crop($thumbWidth, $thumbHeight, null, null, true);						break;					// Case for self::CROP_RESIZE					case 5:						$thumb = $this->cropResize($thumbWidth, $thumbHeight, true);						break;					default:						$thumb = $this->resize($thumbWidth, $thumbHeight, true, $creationMethod);						break;				}				// Store the thumb in the results array				$generated[] = $thumb;			}		}		return $generated;	}	/**	 * Method to create thumbnails from the current image and save them to disk. It allows creation by resizing	 * or croppping the original image.	 *	 * @param   mixed    $thumbSizes      string or array of strings. Example: $thumbSizes = array('150x75','250x150');	 * @param   integer  $creationMethod  1-3 resize $scaleMethod | 4 create croppping	 * @param   string   $thumbsFolder    destination thumbs folder. null generates a thumbs folder in the image folder	 *	 * @return array	 *	 * @throws  LogicException	 * @throws  InvalidArgumentException	 *	 * @since 12.2	 */	public function createThumbs($thumbSizes, $creationMethod = self::SCALE_INSIDE, $thumbsFolder = null)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// No thumbFolder set -> we will create a thumbs folder in the current image folder		if (is_null($thumbsFolder))		{			$thumbsFolder = dirname($this->getPath()) . '/thumbs';		}		// Check destination		if (!is_dir($thumbsFolder) && (!is_dir(dirname($thumbsFolder)) || !@mkdir($thumbsFolder)))		{			throw new InvalidArgumentException('Folder does not exist and cannot be created: ' . $thumbsFolder);		}		// Process thumbs		$thumbsCreated = array();		if ($thumbs = $this->generateThumbs($thumbSizes, $creationMethod))		{			// Parent image properties			$imgProperties = self::getImageFileProperties($this->getPath());			foreach ($thumbs as $thumb)			{				// Get thumb properties				$thumbWidth 	= $thumb->getWidth();				$thumbHeight 	= $thumb->getHeight();				// Generate thumb name				$filename 		= pathinfo($this->getPath(), PATHINFO_FILENAME);				$fileExtension 	= pathinfo($this->getPath(), PATHINFO_EXTENSION);				$thumbFileName 	= $filename . '_' . $thumbWidth . 'x' . $thumbHeight . '.' . $fileExtension;				// Save thumb file to disk				$thumbFileName = $thumbsFolder . '/' . $thumbFileName;				if ($thumb->toFile($thumbFileName, $imgProperties->type))				{					// Return JImage object with thumb path to ease further manipulation					$thumb->path = $thumbFileName;					$thumbsCreated[] = $thumb;				}			}		}		return $thumbsCreated;	}	/**	 * Method to crop the current image.	 *	 * @param   mixed    $width      The width of the image section to crop in pixels or a percentage.	 * @param   mixed    $height     The height of the image section to crop in pixels or a percentage.	 * @param   integer  $left       The number of pixels from the left to start cropping.	 * @param   integer  $top        The number of pixels from the top to start cropping.	 * @param   bool     $createNew  If true the current image will be cloned, cropped and returned; else	 *                               the current image will be cropped and returned.	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function crop($width, $height, $left = null, $top = null, $createNew = true)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize width.		$width = $this->sanitizeWidth($width, $height);		// Sanitize height.		$height = $this->sanitizeHeight($height, $width);		// Autocrop offsets		if (is_null($left))		{			$left = round(($this->getWidth() - $width) / 2);		}		if (is_null($top))		{			$top = round(($this->getHeight() - $height) / 2);		}		// Sanitize left.		$left = $this->sanitizeOffset($left);		// Sanitize top.		$top = $this->sanitizeOffset($top);		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($width, $height);		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		if ($this->isTransparent())		{			// Get the transparent color values for the current image.			$rgba = imageColorsForIndex($this->handle, imagecolortransparent($this->handle));			$color = imageColorAllocate($this->handle, $rgba['red'], $rgba['green'], $rgba['blue']);			// Set the transparent color values for the new image.			imagecolortransparent($handle, $color);			imagefill($handle, 0, 0, $color);			imagecopyresized($handle, $this->handle, 0, 0, $left, $top, $width, $height, $width, $height);		}		else		{			imagecopyresampled($handle, $this->handle, 0, 0, $left, $top, $width, $height, $width, $height);		}		// If we are cropping to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to apply a filter to the image by type.  Two examples are: grayscale and sketchy.	 *	 * @param   string  $type     The name of the image filter to apply.	 * @param   array   $options  An array of options for the filter.	 *	 * @return  JImage	 *	 * @since   11.3	 * @see     JImageFilter	 * @throws  LogicException	 * @throws  RuntimeException	 */	public function filter($type, array $options = array())	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Get the image filter instance.		$filter = $this->getFilterInstance($type);		// Execute the image filter.		$filter->execute($options);		return $this;	}	/**	 * Method to get the height of the image in pixels.	 *	 * @return  integer	 *	 * @since   11.3	 * @throws  LogicException	 */	public function getHeight()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return imagesy($this->handle);	}	/**	 * Method to get the width of the image in pixels.	 *	 * @return  integer	 *	 * @since   11.3	 * @throws  LogicException	 */	public function getWidth()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return imagesx($this->handle);	}	/**	 * Method to return the path	 *	 * @return	string	 *	 * @since	11.3	 */	public function getPath()	{		return $this->path;	}	/**	 * Method to determine whether or not an image has been loaded into the object.	 *	 * @return  bool	 *	 * @since   11.3	 */	public function isLoaded()	{		// Make sure the resource handle is valid.		if (!is_resource($this->handle) || (get_resource_type($this->handle) != 'gd'))		{			return false;		}		return true;	}	/**	 * Method to determine whether or not the image has transparency.	 *	 * @return  bool	 *	 * @since   11.3	 * @throws  LogicException	 */	public function isTransparent()	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		return (imagecolortransparent($this->handle) >= 0);	}	/**	 * Method to load a file into the JImage object as the resource.	 *	 * @param   string  $path  The filesystem path to load as an image.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function loadFile($path)	{		// Destroy the current image handle if it exists		$this->destroy();		// Make sure the file exists.		if (!file_exists($path))		{			throw new InvalidArgumentException('The image file does not exist.');		}		// Get the image properties.		$properties = self::getImageFileProperties($path);		// Attempt to load the image based on the MIME-Type		switch ($properties->mime)		{			case 'image/gif':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_GIF]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type GIF.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type GIF.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefromgif($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process GIF image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			case 'image/jpeg':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_JPEG]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type JPG.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type JPG.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefromjpeg($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process JPG image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			case 'image/png':				// Make sure the image type is supported.				if (empty(self::$formats[IMAGETYPE_PNG]))				{					// @codeCoverageIgnoreStart					JLog::add('Attempting to load an image of unsupported type PNG.', JLog::ERROR);					throw new RuntimeException('Attempting to load an image of unsupported type PNG.');					// @codeCoverageIgnoreEnd				}				// Attempt to create the image handle.				$handle = imagecreatefrompng($path);				if (!is_resource($handle))				{					// @codeCoverageIgnoreStart					throw new RuntimeException('Unable to process PNG image.');					// @codeCoverageIgnoreEnd				}				$this->handle = $handle;				break;			default:				JLog::add('Attempting to load an image of unsupported type: ' . $properties->mime, JLog::ERROR);				throw new InvalidArgumentException('Attempting to load an image of unsupported type: ' . $properties->mime);				break;		}		// Set the filesystem path to the source image.		$this->path = $path;	}	/**	 * Method to resize the current image.	 *	 * @param   mixed    $width        The width of the resized image in pixels or a percentage.	 * @param   mixed    $height       The height of the resized image in pixels or a percentage.	 * @param   bool     $createNew    If true the current image will be cloned, resized and returned; else	 *                                 the current image will be resized and returned.	 * @param   integer  $scaleMethod  Which method to use for scaling	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function resize($width, $height, $createNew = true, $scaleMethod = self::SCALE_INSIDE)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize width.		$width = $this->sanitizeWidth($width, $height);		// Sanitize height.		$height = $this->sanitizeHeight($height, $width);		// Prepare the dimensions for the resize operation.		$dimensions = $this->prepareDimensions($width, $height, $scaleMethod);		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($dimensions->width, $dimensions->height);		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		if ($this->isTransparent())		{			// Get the transparent color values for the current image.			$rgba = imageColorsForIndex($this->handle, imagecolortransparent($this->handle));			$color = imageColorAllocate($this->handle, $rgba['red'], $rgba['green'], $rgba['blue']);			// Set the transparent color values for the new image.			imagecolortransparent($handle, $color);			imagefill($handle, 0, 0, $color);			imagecopyresized($handle, $this->handle, 0, 0, 0, 0, $dimensions->width, $dimensions->height, $this->getWidth(), $this->getHeight());		}		else		{			imagecopyresampled($handle, $this->handle, 0, 0, 0, 0, $dimensions->width, $dimensions->height, $this->getWidth(), $this->getHeight());		}		// If we are resizing to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to crop an image after resizing it to maintain	 * proportions without having to do all the set up work.	 *	 * @param   integer  $width      The desired width of the image in pixels or a percentage.	 * @param   integer  $height     The desired height of the image in pixels or a percentage.	 * @param   integer  $createNew  If true the current image will be cloned, resized, cropped and returned.	 *	 * @return  object  JImage Object for chaining.	 *	 * @since   12.3	 */	public function cropResize($width, $height, $createNew = true)	{		$width   = $this->sanitizeWidth($width, $height);		$height  = $this->sanitizeHeight($height, $width);		if (($this->getWidth() / $width) < ($this->getHeight() / $height))		{			$this->resize($width, 0, false);		}		else		{			$this->resize(0, $height, false);		}		return $this->crop($width, $height, null, null, $createNew);	}	/**	 * Method to rotate the current image.	 *	 * @param   mixed    $angle       The angle of rotation for the image	 * @param   integer  $background  The background color to use when areas are added due to rotation	 * @param   bool     $createNew   If true the current image will be cloned, rotated and returned; else	 *                                the current image will be rotated and returned.	 *	 * @return  JImage	 *	 * @since   11.3	 * @throws  LogicException	 */	public function rotate($angle, $background = -1, $createNew = true)	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		// Sanitize input		$angle = (float) $angle;		// Create the new truecolor image handle.		$handle = imagecreatetruecolor($this->getWidth(), $this->getHeight());		// Allow transparency for the new image handle.		imagealphablending($handle, false);		imagesavealpha($handle, true);		// Copy the image		imagecopy($handle, $this->handle, 0, 0, 0, 0, $this->getWidth(), $this->getHeight());		// Rotate the image		$handle = imagerotate($handle, $angle, $background);		// If we are resizing to a new image, create a new JImage object.		if ($createNew)		{			// @codeCoverageIgnoreStart			$new = new JImage($handle);			return $new;			// @codeCoverageIgnoreEnd		}		// Swap out the current handle for the new image handle.		else		{			// Free the memory from the current handle			$this->destroy();			$this->handle = $handle;			return $this;		}	}	/**	 * Method to write the current image out to a file.	 *	 * @param   string   $path     The filesystem path to save the image.	 * @param   integer  $type     The image type to save the file as.	 * @param   array    $options  The image type options to use in saving the file.	 *	 * @return  boolean	 *	 * @see     http://www.php.net/manual/image.constants.php	 * @since   11.3	 * @throws  LogicException	 */	public function toFile($path, $type = IMAGETYPE_JPEG, array $options = array())	{		// Make sure the resource handle is valid.		if (!$this->isLoaded())		{			throw new LogicException('No valid image was loaded.');		}		switch ($type)		{			case IMAGETYPE_GIF:				return imagegif($this->handle, $path);				break;			case IMAGETYPE_PNG:				return imagepng($this->handle, $path, (array_key_exists('quality', $options)) ? $options['quality'] : 0);				break;			case IMAGETYPE_JPEG:			default:				return imagejpeg($this->handle, $path, (array_key_exists('quality', $options)) ? $options['quality'] : 100);		}	}	/**	 * Method to get an image filter instance of a specified type.	 *	 * @param   string  $type  The image filter type to get.	 *	 * @return  JImageFilter	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function getFilterInstance($type)	{		// Sanitize the filter type.		$type = strtolower(preg_replace('#[^A-Z0-9_]#i', '', $type));		// Verify that the filter type exists.		$className = 'JImageFilter' . ucfirst($type);		if (!class_exists($className))		{			JLog::add('The ' . ucfirst($type) . ' image filter is not available.', JLog::ERROR);			throw new RuntimeException('The ' . ucfirst($type) . ' image filter is not available.');		}		// Instantiate the filter object.		$instance = new $className($this->handle);		// Verify that the filter type is valid.		if (!($instance instanceof JImageFilter))		{			// @codeCoverageIgnoreStart			JLog::add('The ' . ucfirst($type) . ' image filter is not valid.', JLog::ERROR);			throw new RuntimeException('The ' . ucfirst($type) . ' image filter is not valid.');			// @codeCoverageIgnoreEnd		}		return $instance;	}	/**	 * Method to get the new dimensions for a resized image.	 *	 * @param   integer  $width        The width of the resized image in pixels.	 * @param   integer  $height       The height of the resized image in pixels.	 * @param   integer  $scaleMethod  The method to use for scaling	 *	 * @return  stdClass	 *	 * @since   11.3	 * @throws  InvalidArgumentException  If width, height or both given as zero	 */	protected function prepareDimensions($width, $height, $scaleMethod)	{		// Instantiate variables.		$dimensions = new stdClass;		switch ($scaleMethod)		{			case self::SCALE_FILL:				$dimensions->width = (int) round($width);				$dimensions->height = (int) round($height);				break;			case self::SCALE_INSIDE:			case self::SCALE_OUTSIDE:				$rx = ($width > 0) ? ($this->getWidth() / $width) : 0;				$ry = ($height > 0) ? ($this->getHeight() / $height) : 0;				if ($scaleMethod == self::SCALE_INSIDE)				{					$ratio = ($rx > $ry) ? $rx : $ry;				}				else				{					$ratio = ($rx < $ry) ? $rx : $ry;				}				$dimensions->width = (int) round($this->getWidth() / $ratio);				$dimensions->height = (int) round($this->getHeight() / $ratio);				break;			default:				throw new InvalidArgumentException('Invalid scale method.');				break;		}		return $dimensions;	}	/**	 * Method to sanitize a height value.	 *	 * @param   mixed  $height  The input height value to sanitize.	 * @param   mixed  $width   The input width value for reference.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeHeight($height, $width)	{		// If no height was given we will assume it is a square and use the width.		$height = ($height === null) ? $width : $height;		// If we were given a percentage, calculate the integer value.		if (preg_match('/^[0-9]+(\.[0-9]+)?\%$/', $height))		{			$height = (int) round($this->getHeight() * (float) str_replace('%', '', $height) / 100);		}		// Else do some rounding so we come out with a sane integer value.		else		{			$height = (int) round((float) $height);		}		return $height;	}	/**	 * Method to sanitize an offset value like left or top.	 *	 * @param   mixed  $offset  An offset value.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeOffset($offset)	{		return (int) round((float) $offset);	}	/**	 * Method to sanitize a width value.	 *	 * @param   mixed  $width   The input width value to sanitize.	 * @param   mixed  $height  The input height value for reference.	 *	 * @return  integer	 *	 * @since   11.3	 */	protected function sanitizeWidth($width, $height)	{		// If no width was given we will assume it is a square and use the height.		$width = ($width === null) ? $height : $width;		// If we were given a percentage, calculate the integer value.		if (preg_match('/^[0-9]+(\.[0-9]+)?\%$/', $width))		{			$width = (int) round($this->getWidth() * (float) str_replace('%', '', $width) / 100);		}		// Else do some rounding so we come out with a sane integer value.		else		{			$width = (int) round((float) $width);		}		return $width;	}	/**	 * Method to destroy an image handle and	 * free the memory associated with the handle	 *	 * @return  boolean  True on success, false on failure or if no image is loaded	 *	 * @since 12.3	 */	public function destroy()	{		if ($this->isLoaded())		{			return imagedestroy($this->handle);		}		return false;	}	/**	 * Method to call the destroy() method one last time	 * to free any memory when the object is unset	 *	 * @see     JImage::destroy()	 */	public function __destruct()	{		$this->destroy();	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering telephone numbers. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlTel{	/**	 * Converts strings of integers into more readable telephone format	 *	 * By default, the ITU-T format will automatically be used.	 * However, one of the allowed unit types may also be used instead.	 *	 * @param   integer  $number       The integers in a phone number with dot separated country code	 *                                 ccc.nnnnnnn where ccc represents country code and nnn represents the local number.	 * @param   string   $displayplan  The numbering plan used to display the numbers.	 *	 * @return  string  The formatted telephone number.	 *	 * @since   11.1	 *	 * @see     JFormRuleTel	 */	public static function tel($number, $displayplan)	{		$number = explode('.', $number);		$countrycode = $number[0];		$number = $number[1];		if ($displayplan == 'ITU-T' || $displayplan == 'International' || $displayplan == 'int' || $displayplan == 'missdn' || $displayplan == null)		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = ' ';			$display[3] = implode(str_split($number, 2), ' ');		}		elseif ($displayplan == 'NANP' || $displayplan == 'northamerica' || $displayplan == 'US')		{			$display[0] = '(';			$display[1] = substr($number, 0, 3);			$display[2] = ') ';			$display[3] = substr($number, 3, 3);			$display[4] = '-';			$display[5] = substr($number, 6, 4);		}		elseif ($displayplan == 'EPP' || $displayplan == 'IETF')		{			$display[0] = '+';			$display[1] = $countrycode;			$display[2] = '.';			$display[3] = $number;		}		elseif ($displayplan == 'ARPA' || $displayplan == 'ENUM')		{			$number = implode(str_split(strrev($number), 1), '.');			$display[0] = '+';			$display[1] = $number;			$display[2] = '.';			$display[3] = $countrycode;			$display[4] = '.e164.arpa';		}		$display = implode($display, '');		return $display;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (count($this->images) > 0 || count($this->folders) > 0) { ?><ul class="manager thumbnails">	<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :		$this->setFolder($i);		echo $this->loadTemplate('folder');	endfor; ?>	<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :		$this->setImage($i);		echo $this->loadTemplate('image');	endfor; ?></ul><?php } else { ?>	<div id="media-noimages">		<div class="alert alert-info"><?php echo JText::_('COM_MEDIA_NO_IMAGES_FOUND'); ?></div>	</div><?php } ?>
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Tags List Controller * * @package     Joomla.Site * @subpackage  com_tags * @since       3.1 */class TagsControllerTags extends JControllerLegacy{	/**	 * Method to search tags with AJAX	 *	 * @return  void	 */	public function searchAjax()	{		// Required objects		$app = JFactory::getApplication();		// Receive request data		$filters = array(			'like'      => trim($app->input->get('like', null)),			'title'     => trim($app->input->get('title', null)),			'flanguage' => $app->input->get('flanguage', null),			'published' => $app->input->get('published', 1, 'integer'),			'parent_id' => $app->input->get('parent_id', null)		);		if ($results = JHelperTags::searchTags($filters))		{			// Output a JSON object			echo json_encode($results);		}		$app->close();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$controller	= JControllerLegacy::getInstance('Banners');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Model * * Acts as a Factory class for application specific objects and * provides many supporting API functions. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelLegacy extends JObject{	/**	 * Indicates if the internal state has been set	 *	 * @var    boolean	 * @since  12.2	 */	protected $__state_set = null;	/**	 * Database Connector	 *	 * @var    object	 * @since  12.2	 */	protected $_db;	/**	 * The model (base) name	 *	 * @var    string	 * @since  12.2	 */	protected $name;	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option = null;	/**	 * A state object	 *	 * @var    string	 * @since  12.2	 */	protected $state;	/**	 * The event to trigger when cleaning cache.	 *	 * @var      string	 * @since    12.2	 */	protected $event_clean_cache = null;	/**	 * Add a directory where JModelLegacy should search for models. You may	 * either pass a string or an array of directories.	 *	 * @param   mixed   $path    A path or array[sting] of paths to search.	 * @param   string  $prefix  A prefix for models.	 *	 * @return  array  An array with directory elements. If prefix is equal to '', all directories are returned.	 *	 * @since   12.2	 */	public static function addIncludePath($path = '', $prefix = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!isset($paths[$prefix]))		{			$paths[$prefix] = array();		}		if (!isset($paths['']))		{			$paths[''] = array();		}		if (!empty($path))		{			jimport('joomla.filesystem.path');			if (!in_array($path, $paths[$prefix]))			{				array_unshift($paths[$prefix], JPath::clean($path));			}			if (!in_array($path, $paths['']))			{				array_unshift($paths[''], JPath::clean($path));			}		}		return $paths[$prefix];	}	/**	 * Adds to the stack of model table paths in LIFO order.	 *	 * @param   mixed  $path  The directory as a string or directories as an array to add.	 *	 * @return  void	 *	 * @since   12.2	 */	public static function addTablePath($path)	{		JTable::addIncludePath($path);	}	/**	 * Create the filename for a resource	 *	 * @param   string  $type   The resource type to create the filename for.	 * @param   array   $parts  An associative array of filename information.	 *	 * @return  string  The filename	 *	 * @since   12.2	 */	protected static function _createFileName($type, $parts = array())	{		$filename = '';		switch ($type)		{			case 'model':				$filename = strtolower($parts['name']) . '.php';				break;		}		return $filename;	}	/**	 * Returns a Model object, always creating it	 *	 * @param   string  $type    The model type to instantiate	 * @param   string  $prefix  Prefix for the model class name. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  mixed   A model object or false on failure	 *	 * @since   12.2	 */	public static function getInstance($type, $prefix = '', $config = array())	{		$type = preg_replace('/[^A-Z0-9_\.-]/i', '', $type);		$modelClass = $prefix . ucfirst($type);		if (!class_exists($modelClass))		{			jimport('joomla.filesystem.path');			$path = JPath::find(self::addIncludePath(null, $prefix), self::_createFileName('model', array('name' => $type)));			if (!$path)			{				$path = JPath::find(self::addIncludePath(null, ''), self::_createFileName('model', array('name' => $type)));			}			if ($path)			{				require_once $path;				if (!class_exists($modelClass))				{					JLog::add(JText::sprintf('JLIB_APPLICATION_ERROR_MODELCLASS_NOT_FOUND', $modelClass), JLog::WARNING, 'jerror');					return false;				}			}			else			{				return false;			}		}		return new $modelClass($config);	}	/**	 * Constructor	 *	 * @param   array  $config  An array of configuration options (name, state, dbo, table_path, ignore_request).	 *	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		// Guess the option from the class name (Option)Model(View).		if (empty($this->option))		{			$r = null;			if (!preg_match('/(.*)Model/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->option = 'com_' . strtolower($r[1]);		}		// Set the view name		if (empty($this->name))		{			if (array_key_exists('name', $config))			{				$this->name = $config['name'];			}			else			{				$this->name = $this->getName();			}		}		// Set the model state		if (array_key_exists('state', $config))		{			$this->state = $config['state'];		}		else		{			$this->state = new JObject;		}		// Set the model dbo		if (array_key_exists('dbo', $config))		{			$this->_db = $config['dbo'];		}		else		{			$this->_db = JFactory::getDbo();		}		// Set the default view search path		if (array_key_exists('table_path', $config))		{			$this->addTablePath($config['table_path']);		}		elseif (defined('JPATH_COMPONENT_ADMINISTRATOR'))		{			$this->addTablePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');		}		// Set the internal state marker - used to ignore setting state from the request		if (!empty($config['ignore_request']))		{			$this->__state_set = true;		}		// Set the clean cache event		if (isset($config['event_clean_cache']))		{			$this->event_clean_cache = $config['event_clean_cache'];		}		elseif (empty($this->event_clean_cache))		{			$this->event_clean_cache = 'onContentCleanCache';		}	}	/**	 * Gets an array of objects from the results of database query.	 *	 * @param   string   $query       The query.	 * @param   integer  $limitstart  Offset.	 * @param   integer  $limit       The number of records.	 *	 * @return  array  An array of results.	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function _getList($query, $limitstart = 0, $limit = 0)	{		$this->_db->setQuery($query, $limitstart, $limit);		$result = $this->_db->loadObjectList();		return $result;	}	/**	 * Returns a record count for the query	 *	 * @param   string  $query  The query.	 *	 * @return  integer  Number of rows for query	 *	 * @since   12.2	 */	protected function _getListCount($query)	{		$this->_db->setQuery($query);		$this->_db->execute();		return $this->_db->getNumRows();	}	/**	 * Method to load and return a model object.	 *	 * @param   string  $name    The name of the view	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration settings to pass to JTable::getInstance	 *	 * @return  mixed  Model object or boolean false if failed	 *	 * @since   12.2	 * @see     JTable::getInstance	 */	protected function _createTable($name, $prefix = 'Table', $config = array())	{		// Clean the model name		$name = preg_replace('/[^A-Z0-9_]/i', '', $name);		$prefix = preg_replace('/[^A-Z0-9_]/i', '', $prefix);		// Make sure we are returning a DBO object		if (!array_key_exists('dbo', $config))		{			$config['dbo'] = $this->getDbo();		}		return JTable::getInstance($name, $prefix, $config);	}	/**	 * Method to get the database driver object	 *	 * @return  JDatabaseDriver	 */	public function getDbo()	{		return $this->_db;	}	/**	 * Method to get the model name	 *	 * The model name. By default parsed using the classname or it can be set	 * by passing a $config['name'] in the class constructor	 *	 * @return  string  The name of the model	 *	 * @since   12.2	 * @throws  Exception	 */	public function getName()	{		if (empty($this->name))		{			$r = null;			if (!preg_match('/Model(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_MODEL_GET_NAME'), 500);			}			$this->name = strtolower($r[1]);		}		return $this->name;	}	/**	 * Method to get model state variables	 *	 * @param   string  $property  Optional parameter name	 * @param   mixed   $default   Optional default value	 *	 * @return  object  The property where specified, the state object where omitted	 *	 * @since   12.2	 */	public function getState($property = null, $default = null)	{		if (!$this->__state_set)		{			// Protected method to auto-populate the model state.			$this->populateState();			// Set the model state set flag to true.			$this->__state_set = true;		}		return $property === null ? $this->state : $this->state->get($property, $default);	}	/**	 * Method to get a table object, load it if necessary.	 *	 * @param   string  $name     The table name. Optional.	 * @param   string  $prefix   The class prefix. Optional.	 * @param   array   $options  Configuration array for model. Optional.	 *	 * @return  JTable  A JTable object	 *	 * @since   12.2	 * @throws  Exception	 */	public function getTable($name = '', $prefix = 'Table', $options = array())	{		if (empty($name))		{			$name = $this->getName();		}		if ($table = $this->_createTable($name, $prefix, $options))		{			return $table;		}		throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_TABLE_NAME_NOT_SUPPORTED', $name), 0);	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * @return  void	 *	 * @note    Calling getState in this method will result in recursion.	 * @since   12.2	 */	protected function populateState()	{	}	/**	 * Method to set the database driver object	 *	 * @param   JDatabaseDriver  $db  A JDatabaseDriver based object	 *	 * @return  void	 *	 * @since   12.2	 */	public function setDbo($db)	{		$this->_db = $db;	}	/**	 * Method to set model state variables	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set or null.	 *	 * @return  mixed  The previous value of the property or null if not set.	 *	 * @since   12.2	 */	public function setState($property, $value = null)	{		return $this->state->set($property, $value);	}	/**	 * Clean the cache	 *	 * @param   string   $group      The cache group	 * @param   integer  $client_id  The ID of the client	 *	 * @return  void	 *	 * @since   12.2	 */	protected function cleanCache($group = null, $client_id = 0)	{		$conf = JFactory::getConfig();		$dispatcher = JEventDispatcher::getInstance();		$options = array(			'defaultgroup' => ($group) ? $group : (isset($this->option) ? $this->option : JFactory::getApplication()->input->get('option')),			'cachebase' => ($client_id) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache'));		$cache = JCache::getInstance('callback', $options);		$cache->clean();		// Trigger the onContentCleanCache event.		$dispatcher->trigger($this->event_clean_cache, $options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages list controller class. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerMessages extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Message', $prefix = 'MessagesModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_MODULES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label); ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>		</fieldset>	<?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.?><?php // The menu class is deprecated. Use nav instead. ?><ul class="nav menu<?php echo $class_sfx;?>"<?php	$tag = '';	if ($params->get('tag_id') != null)	{		$tag = $params->get('tag_id').'';		echo ' id="'.$tag.'"';	}?>><?phpforeach ($list as $i => &$item) :	$class = 'item-'.$item->id;	if ($item->id == $active_id)	{		$class .= ' current';	}	if (in_array($item->id, $path))	{		$class .= ' active';	}	elseif ($item->type == 'alias')	{		$aliasToId = $item->params->get('aliasoptions');		if (count($path) > 0 && $aliasToId == $path[count($path) - 1])		{			$class .= ' active';		}		elseif (in_array($aliasToId, $path))		{			$class .= ' alias-parent-active';		}	}	if ($item->type == 'separator')	{		$class .= ' divider';	}	if ($item->deeper)	{		$class .= ' deeper';	}	if ($item->parent)	{		$class .= ' parent';	}	if (!empty($class))	{		$class = ' class="'.trim($class) .'"';	}	echo '<li'.$class.'>';	// Render the menu item.	switch ($item->type) :		case 'separator':		case 'url':		case 'component':		case 'heading':			require JModuleHelper::getLayoutPath('mod_menu', 'default_'.$item->type);			break;		default:			require JModuleHelper::getLayoutPath('mod_menu', 'default_url');			break;	endswitch;	// The next item is deeper.	if ($item->deeper)	{		echo '<ul class="nav-child unstyled small">';	}	// The next item is shallower.	elseif ($item->shallower)	{		echo '</li>';		echo str_repeat('</ul></li>', $item->level_diff);	}	// The next item is on the same level.	else {		echo '</li>';	}endforeach;?></ul>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.environment.uri');/** * Google API object class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleEmbed{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JURI  URI of the page being rendered.	 * @since  12.3	 */	protected $uri;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Google options object	 * @param   JURI       $uri      URL of the page being rendered	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JURI $uri = null)	{		$this->options = $options ? $options : new JRegistry;		$this->uri = $uri ? $uri : new JURI;	}	/**	 * Method to retrieve the javascript header for the embed API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	public function isSecure()	{		return $this->uri->getScheme() == 'https';	}	/**	 * Method to retrieve the header for the API	 *	 * @return  string  The header	 *	 * @since   12.3	 */	abstract public function getHeader();	/**	 * Method to retrieve the body for the API	 *	 * @return  string  The body	 *	 * @since   12.3	 */	abstract public function getBody();	/**	 * Method to output the javascript header for the embed API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoHeader()	{		echo $this->getHeader();	}	/**	 * Method to output the body for the API	 *	 * @return  null	 *	 * @since   12.3	 */	public function echoBody()	{		echo $this->getBody();	}	/**	 * Get an option from the JGoogleEmbed instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleEmbed instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleEmbed  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorage{	/**	 * @var    string  Rawname	 * @since  11.1	 */	protected $rawname;	/**	 * @var    datetime  Now	 * @since  11.1	 */	public $_now;	/**	 * @var    integer  Cache lifetime	 * @since  11.1	 */	public $_lifetime;	/**	 * @var    boolean  Locking	 * @since  11.1	 */	public $_locking;	/**	 * @var    string  Language	 * @since  11.1	 */	public $_language;	/**	 * @var    string  Application name.	 * @since  11.1	 */	public $_application;	/**	 * @var    string  Hash	 * @since  11.1	 */	public $_hash;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$config = JFactory::getConfig();		$this->_hash = md5($config->get('secret'));		$this->_application = (isset($options['application'])) ? $options['application'] : null;		$this->_language = (isset($options['language'])) ? $options['language'] : 'en-GB';		$this->_locking = (isset($options['locking'])) ? $options['locking'] : true;		$this->_lifetime = (isset($options['lifetime'])) ? $options['lifetime'] * 60 : $config->get('cachetime') * 60;		$this->_now = (isset($options['now'])) ? $options['now'] : time();		// Set time threshold value.  If the lifetime is not set, default to 60 (0 is BAD)		// _threshold is now available ONLY as a legacy (it's deprecated).  It's no longer used in the core.		if (empty($this->_lifetime))		{			$this->_threshold = $this->_now - 60;			$this->_lifetime = 60;		}		else		{			$this->_threshold = $this->_now - $this->_lifetime;		}	}	/**	 * Returns a cache storage handler object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $handler  The cache storage handler to instantiate	 * @param   array   $options  Array of handler options	 *	 * @return  JCacheStorage  A JCacheStorage instance	 *	 * @since   11.1	 * @throws  UnexpectedValueException	 * @throws  RuntimeException	 */	public static function getInstance($handler = null, $options = array())	{		static $now = null;		self::addIncludePath(JPATH_PLATFORM . '/joomla/cache/storage');		if (!isset($handler))		{			$conf = JFactory::getConfig();			$handler = $conf->get('cache_handler');			if (empty($handler))			{				throw new UnexpectedValueException('Cache Storage Handler not set.');			}		}		if (is_null($now))		{			$now = time();		}		$options['now'] = $now;		// We can't cache this since options may change...		$handler = strtolower(preg_replace('/[^A-Z0-9_\.-]/i', '', $handler));		$class = 'JCacheStorage' . ucfirst($handler);		if (!class_exists($class))		{			// Search for the class file in the JCacheStorage include paths.			jimport('joomla.filesystem.path');			if ($path = JPath::find(self::addIncludePath(), strtolower($handler) . '.php'))			{				include_once $path;			}			else			{				throw new RuntimeException(sprintf('Unable to load Cache Storage: %s', $handler));			}		}		return new $class($options);	}	/**	 * Get cached data by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean  false on failure or a cached data object	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		return false;	}	/**	 * Get all cached data	 *	 * @return  mixed    Boolean false on failure or a cached data object	 *	 * @since   11.1	 * @todo    Review this method. The docblock doesn't fit what it actually does.	 */	public function getAll()	{		if (!class_exists('JCacheStorageHelper', false))		{			include_once JPATH_PLATFORM . '/joomla/cache/storage/helper.php';		}		return;	}	/**	 * Store the data to cache by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		return true;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		return true;	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 *                          group mode     : cleans all cache in the group	 *                          notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		return true;	}	/**	 * Garbage collect expired cache data	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		return true;	}	/**	 * Test to see if the storage handler is available.	 *	 * @return   boolean  True on success, false otherwise	 *	 * @since    12.1.	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the storage handler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public static function test()	{		JLog::add('JCacheStorage::test() is deprecated. Use JCacheStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}	/**	 * Lock cached item	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function lock($id, $group, $locktime)	{		return false;	}	/**	 * Unlock cached item	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function unlock($id, $group = null)	{		return false;	}	/**	 * Get a cache_id string from an id/group pair	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  string   The cache_id string	 *	 * @since   11.1	 */	protected function _getCacheId($id, $group)	{		$name = md5($this->_application . '-' . $id . '-' . $this->_language);		$this->rawname = $this->_hash . '-' . $name;		return $this->_hash . '-cache-' . $group . '-' . $name;	}	/**	 * Add a directory where JCacheStorage should search for handlers. You may	 * either pass a string or an array of directories.	 *	 * @param   string  $path  A path to search.	 *	 * @return  array  An array with directory elements	 *	 * @since   11.1	 */	public static function addIncludePath($path = '')	{		static $paths;		if (!isset($paths))		{			$paths = array();		}		if (!empty($path) && !in_array($path, $paths))		{			jimport('joomla.filesystem.path');			array_unshift($paths, JPath::clean($path));		}		return $paths;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Category table * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesTableCategory extends JTableCategory{	/**	 * Method to delete a node and, optionally, its child nodes from the table.	 *	 * @param   integer  $pk        The primary key of the node to delete.	 * @param   boolean  $children  True to delete child nodes, false to move them up a level.	 *	 * @return  boolean  True on success.	 *	 * @see     http://docs.joomla.org/JTableNested/delete	 * @since   2.5	 */	public function delete($pk = null, $children = false)	{		return parent::delete($pk, $children);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('CategoriesHelper', JPATH_ADMINISTRATOR . '/components/com_categories/helpers/categories.php');/** * Category Component Association Helper * * @package     Joomla.Site * @subpackage  com_categories * @since       3.0 */abstract class CategoryHelperAssociation{	public static $category_association = true;	/**	 * Method to get the associations for a given category	 *	 * @param   integer  $id         Id of the item	 * @param   string   $extension  Name of the component	 *	 * @return  array   Array of associations for the component categories	 *	 * @since  3.0	 */	public static function getCategoryAssociations($id = 0, $extension = 'com_content')	{		$return = array();		if ($id)		{			// Load route helper			jimport('helper.route', JPATH_COMPONENT_SITE);			$helperClassname = ucfirst(substr($extension, 4)) . 'HelperRoute';			$associations = CategoriesHelper::getAssociations($id, $extension);			foreach ($associations as $tag => $item)			{				if (class_exists($helperClassname) && is_callable(array($helperClassname, 'getCategoryRoute')))				{					$return[$tag] = $helperClassname::getCategoryRoute($item, $tag);				}				else				{					$return[$tag] = 'index.php?option='.$extension.'&view=category&id='.$item;				}			}		}		return $return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input CLI Class * * @package     Joomla.Platform * @subpackage  Input * @since       11.1 */class JInputCLI extends JInput{	/**	 * The executable that was called to run the CLI script.	 *	 * @var    string	 * @since  11.1	 */	public $executable;	/**	 * The additional arguments passed to the script that are not associated	 * with a specific argument name.	 *	 * @var    array	 * @since  11.1	 */	public $args = array();	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is $_REQUEST)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   11.1	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		// Get the command line options		$this->parseArguments();		// Set the options for the class.		$this->options = $options;	}	/**	 * Method to serialize the input.	 *	 * @return  string  The serialized input.	 *	 * @since   12.1	 */	public function serialize()	{		// Load all of the inputs.		$this->loadAllInputs();		// Remove $_ENV and $_SERVER from the inputs.		$inputs = $this->inputs;		unset($inputs['env']);		unset($inputs['server']);		// Serialize the executable, args, options, data, and inputs.		return serialize(array($this->executable, $this->args, $this->options, $this->data, $inputs));	}	/**	 * Method to unserialize the input.	 *	 * @param   string  $input  The serialized input.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function unserialize($input)	{		// Unserialize the executable, args, options, data, and inputs.		list($this->executable, $this->args, $this->options, $this->data, $this->inputs) = unserialize($input);		// Load the filter.		if (isset($this->options['filter']))		{			$this->filter = $this->options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}	}	/**	 * Initialise the options and arguments	 *	 * @return  void	 *	 * @since   11.1	 */	protected function parseArguments()	{		// Get the list of argument values from the environment.		$args = $_SERVER['argv'];		// Set the path used for program execution and remove it form the program arguments.		$this->executable = array_shift($args);		// We use a for loop because in some cases we need to look ahead.		for ($i = 0; $i < count($args); $i++)		{			// Get the current argument to analyze.			$arg = $args[$i];			// First let's tackle the long argument case.  eg. --foo			if (strlen($arg) > 2 && substr($arg, 0, 2) == '--')			{				// Attempt to split the thing over equals so we can get the key/value pair if an = was used.				$arg = substr($arg, 2);				$parts = explode('=', $arg);				$this->data[$parts[0]] = true;				// Does not have an =, so let's look ahead to the next argument for the value.				if (count($parts) == 1 && isset($args[$i + 1]) && preg_match('/^--?.+/', $args[$i + 1]) == 0)				{					$this->data[$parts[0]] = $args[$i + 1];					// Since we used the next argument, increment the counter so we don't use it again.					$i++;				}				// We have an equals sign so take the second "part" of the argument as the value.				elseif (count($parts) == 2)				{					$this->data[$parts[0]] = $parts[1];				}			}			// Next let's see if we are dealing with a "bunch" of short arguments.  eg. -abc			elseif (strlen($arg) > 2 && $arg[0] == '-')			{				// For each of these arguments set the value to TRUE since the flag has been set.				for ($j = 1; $j < strlen($arg); $j++)				{					$this->data[$arg[$j]] = true;				}			}			// OK, so it isn't a long argument or bunch of short ones, so let's look and see if it is a single			// short argument.  eg. -h			elseif (strlen($arg) == 2 && $arg[0] == '-')			{				// Go ahead and set the value to TRUE and if we find a value later we'll overwrite it.				$this->data[$arg[1]] = true;				// Let's look ahead to see if the next argument is a "value".  If it is, use it for this value.				if (isset($args[$i + 1]) && preg_match('/^--?.+/', $args[$i + 1]) == 0)				{					$this->data[$arg[1]] = $args[$i + 1];					// Since we used the next argument, increment the counter so we don't use it again.					$i++;				}			}			// Last but not least, we don't have a key/value based argument so just add it to the arguments list.			else			{				$this->args[] = $arg;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilter extends JControllerForm{	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable. [optional]	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions). [optional]	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   2.5	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$input = $app->input;		$lang = JFactory::getLanguage();		$model = $this->getModel();		$table = $model->getTable();		$data = $input->post->get('jform', array(), 'array');		$checkin = property_exists($table, 'checked_out');		$context = "$this->option.edit.$this->context";		$task = $this->getTask();		// Determine the name of the primary key for the data.		if (empty($key))		{			$key = $table->getKeyName();		}		// To avoid data collisions the urlVar may be different from the primary key.		if (empty($urlVar))		{			$urlVar = $key;		}		$recordId = $input->get($urlVar, '', 'int');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and tried to save it. We don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data[$key] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($checkin && $model->checkin($data[$key]) === false)			{				// Check-in failed. Go back to the item and display a notice.				$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));				$this->setMessage($this->getError(), 'error');				$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $urlVar));				return false;			}			// Reset the ID and then treat the request as for Apply.			$data[$key] = 0;			$task = 'apply';		}		// Access check.		if (!$this->allowSave($data, $key))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_SAVE_NOT_PERMITTED'));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));			return false;		}		// Validate the posted data.		// Sometimes the form needs some posted data, such as for plugins and modules.		$form = $model->getForm($data, false);		if (!$form)		{			$app->enqueueMessage($model->getError(), 'error');			return false;		}		// Test whether the data is valid.		$validData = $model->validate($form, $data);		// Check for validation errors.		if ($validData === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if (($errors[$i]) instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState($context . '.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Get and sanitize the filter data.		$validData['data'] = $input->post->get('t', array(), 'array');		$validData['data'] = array_unique($validData['data']);		JArrayHelper::toInteger($validData['data']);		// Remove any values of zero.		if (array_search(0, $validData['data'], true))		{			unset($validData['data'][array_search(0, $validData['data'], true)]);		}		// Attempt to save the data.		if (!$model->save($validData))		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Redirect back to the edit screen.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));			return false;		}		// Save succeeded, so check-in the record.		if ($checkin && $model->checkin($validData[$key]) === false)		{			// Save the data in the session.			$app->setUserState($context . '.data', $validData);			// Check-in failed, so go back to the record and display a notice.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()));			$this->setMessage($this->getError(), 'error');			$this->setRedirect('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key));			return false;		}		$this->setMessage(			JText::_(				($lang->hasKey($this->text_prefix . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS')				? $this->text_prefix : 'JLIB_APPLICATION') . ($recordId == 0 && $app->isSite() ? '_SUBMIT' : '') . '_SAVE_SUCCESS'			)		);		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState($context . '.data', null);				$model->checkout($recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId, $key), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(null, $key), false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context . '.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}		// Invoke the postSave method to allow for the child class to access the model.		$this->postSaveHook($model, $validData);		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL database iterator. * * @package     Joomla.Platform * @subpackage  Database * @see         http://dev.mysql.com/doc/ * @since       12.1 */class JDatabaseIteratorMysql extends JDatabaseIterator{	/**	 * Get the number of rows in the result set for the executed SQL given by the cursor.	 *	 * @return  integer  The number of rows in the result set.	 *	 * @since   12.1	 * @see     Countable::count()	 */	public function count()	{		return mysql_num_rows($this->cursor);	}	/**	 * Method to fetch a row from the result set cursor as an object.	 *	 * @return  mixed   Either the next row from the result set or false if there are no more rows.	 *	 * @since   12.1	 */	protected function fetchObject()	{		return mysql_fetch_object($this->cursor, $this->class);	}	/**	 * Method to free up the memory used for the result set.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function freeResult()	{		mysql_free_result($this->cursor);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$isSingleTag = (count($this->item) == 1);?><div class="tag-category<?php echo $this->pageclass_sfx; ?>"><?php  if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif;  ?><?php if($this->params->get('show_tag_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->document->title, '', 'com_tag.tag'); ?></h2><?php endif; ?><?php // We only show a tag description if there is a single tag. ?><?php  if (count($this->item) == 1 && (($this->params->get('tag_list_show_tag_image', 1)) || $this->params->get('tag_list_show_tag_description', 1))) : ?>	<div class="category-desc">	<?php $images = json_decode($this->item[0]->images); ?>	<?php if ($this->params->get('tag_list_show_tag_image', 1) == 1 && !empty($images->image_fulltext)) : ?>		<img src="<?php echo htmlspecialchars($images->image_fulltext);?>">	<?php endif; ?>	<?php if ($this->params->get('tag_list_show_tag_description') == 1 && $this->item[0]->description) : ?>		<?php echo JHtml::_('content.prepare', $this->item[0]->description, '', 'com_tags.tag'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php // If there are multiple tags and a description or image has been supplied use that. ?><?php if ($this->params->get('tag_list_show_tag_description', 1) || $this->params->get('show_description_image', 1)): ?>		<?php if ($this->params->get('show_description_image', 1) == 1 && $this->params->get('tag_list_image')) :?>			<img src="<?php echo $this->params->get('tag_list_image');?>">		<?php endif; ?>		<?php if ($this->params->get('tag_list_description', '') > '') :?>			<?php echo JHtml::_('content.prepare', $this->params->get('tag_list_description'), '', 'com_tags.tag'); ?>		<?php endif; ?><?php endif; ?><?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Database Query Limitable Interface. * Adds bind/unbind methods as well as a getBounded() method * to retrieve the stored bounded variables on demand prior to * query execution. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */interface JDatabaseQueryLimitable{	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0);	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0);}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Exporter Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseExporter{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Link table class for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderTableLink extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  &$db  JDatabaseDriver connector object.	 *	 * @since   2.5	 */	public function __construct(&$db)	{		parent::__construct('#__finder_links', 'link_id', $db);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="mostread<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) : ?>	<li>		<a href="<?php echo $item->link; ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Libraries * @subpackage  Toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Renders a custom button * * @package     Joomla.Libraries * @subpackage  Toolbar * @since       3.0 */class JToolbarButtonCustom extends JToolbarButton{	/**	 * Button type	 *	 * @var    string	 */	protected $_name = 'Custom';	/**	 * Fetch the HTML for the button	 *	 * @param   string  $type  Button type, unused string.	 * @param   string  $html  HTML strng for the button	 * @param   string  $id    CSS id for the button	 *	 * @return  string   HTML string for the button	 *	 * @since   3.0	 */	public function fetchButton($type = 'Custom', $html = '', $id = 'custom')	{		return $html;	}	/**	 * Get the button CSS Id	 *	 * @param   string  $type  Not used.	 * @param   string  $html  Not used.	 * @param   string  $id    The id prefix for the button.	 *	 * @return  string  Button CSS Id	 *	 * @since   3.0	 */	public function fetchId($type = 'Custom', $html = '', $id = 'custom')	{		return $this->_parent->getName() . '-' . $id;	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder. You should use JApplicationWebClient instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 */class JWebClient extends JApplicationWebClient{	/**	 * Class constructor.	 *	 * @param   mixed  $userAgent       The optional user-agent string to parse.	 * @param   mixed  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   mixed  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   11.3	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		JLog::add('JWebClient is deprecated. Use JApplicationWebClient instead.', JLog::WARNING, 'deprecated');		parent::__construct($userAgent, $acceptEncoding, $acceptLanguage);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$version = ModVersionHelper::getVersion($params);require JModuleHelper::getLayoutPath('mod_version', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Legacy * @subpackage  Simplecrypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JSimpleCrypt is a very simple encryption algorithm for encrypting/decrypting strings * * @package     Joomla.Legacy * @subpackage  Simplecrypt * @since       11.1 * @deprecated  12.3  Use JCrypt instead. */class JSimplecrypt{	/**	 * Encryption/Decryption Key	 *	 * @var         JCrypt	 * @since       12.1	 * @deprecated  12.3  Use JCrypt instead.	 */	private $_crypt;	/**	 * Object Constructor takes an optional key to be used for encryption/decryption. If no key is given then the	 * secret word from the configuration object is used.	 *	 * @param   string  $privateKey  Optional encryption key	 *	 * @since       11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function __construct($privateKey = null)	{		JLog::add('JSimpleCrypt is deprecated. Use JCrypt instead.', JLog::WARNING, 'deprecated');		if (empty($privateKey))		{			$privateKey = md5(JFactory::getConfig()->get('secret'));		}		// Build the JCryptKey object.		$key = new JCryptKey('simple', $privateKey, $privateKey);		// Setup the JCrypt object.		$this->_crypt = new JCrypt(new JCryptCipherSimple, $key);	}	/**	 * Decrypt a string	 *	 * @param   string  $s  String to decrypt	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function decrypt($s)	{		return $this->_crypt->decrypt($s);	}	/**	 * Encrypt a string	 *	 * @param   string  $s  String to encrypt	 *	 * @return  string	 *	 * @since   11.1	 * @deprecated  12.3  Use JCrypt instead.	 */	public function encrypt($s)	{		return $this->_crypt->encrypt($s);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleBoolean extends JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex = '^(?:[01]|true|false)$';	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers = 'i';}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelDatabase extends JModelBase{	/**	 * The database driver.	 *	 * @var    JDatabaseDriver	 * @since  12.1	 */	protected $db;	/**	 * Instantiate the model.	 *	 * @param   JRegistry        $state  The model state.	 * @param   JDatabaseDriver  $db     The database adpater.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null, JDatabaseDriver $db = null)	{		parent::__construct($state);		// Setup the model.		$this->db = isset($db) ? $db : $this->loadDb();	}	/**	 * Get the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	public function getDb()	{		return $this->db;	}	/**	 * Set the database driver.	 *	 * @param   JDatabaseDriver  $db  The database driver.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDb(JDatabaseDriver $db)	{		$this->db = $db;	}	/**	 * Load the database driver.	 *	 * @return  JDatabaseDriver  The database driver.	 *	 * @since   12.1	 */	protected function loadDb()	{		return JFactory::getDbo();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_package.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_PACKAGE', true); ?>");		}		else		{			form.installtype.value = 'upload';			form.submit();		}	}	Joomla.submitbutton3 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_directory.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_DIRECTORY', true); ?>");		}		else		{			form.installtype.value = 'folder';			form.submit();		}	}	Joomla.submitbutton4 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_url.value == "" || form.install_url.value == "http://"){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL', true); ?>");		}		else		{			form.installtype.value = 'url';			form.submit();		}	}</script><form enctype="multipart/form-data" action="<?php echo JRoute::_('index.php?option=com_installer&view=install');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<?php if ($this->ftp) : ?>		<?php echo $this->loadTemplate('ftp'); ?>	<?php endif; ?>	<div class="width-70 fltlft">		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE'); ?></legend>			<label for="install_package"><?php echo JText::_('COM_INSTALLER_PACKAGE_FILE'); ?></label>			<input class="input_box" id="install_package" name="install_package" type="file" size="57" />			<input class="button" type="button" value="<?php echo JText::_('COM_INSTALLER_UPLOAD_AND_INSTALL'); ?>" onclick="Joomla.submitbutton()" />		</fieldset>		<div class="clr"></div>		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY'); ?></legend>			<label for="install_directory"><?php echo JText::_('COM_INSTALLER_INSTALL_DIRECTORY'); ?></label>			<input type="text" id="install_directory" name="install_directory" class="input_box" size="70" value="<?php echo $this->state->get('install.directory'); ?>" />			<input type="button" class="button" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton3()" />		</fieldset>		<div class="clr"></div>		<fieldset class="uploadform">			<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_URL'); ?></legend>			<label for="install_url"><?php echo JText::_('COM_INSTALLER_INSTALL_URL'); ?></label>			<input type="text" id="install_url" name="install_url" class="input_box" size="70" value="http://" />			<input type="button" class="button" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton4()" />		</fieldset>		<input type="hidden" name="type" value="" />		<input type="hidden" name="installtype" value="upload" />		<input type="hidden" name="task" value="install.install" />		<?php echo JHtml::_('form.token'); ?>	</div></div></form>
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocument system message renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererMessage extends JDocumentRenderer{	/**	 * Renders the error stack and returns the results as a string	 *	 * @param   string  $name     Not used.	 * @param   array   $params   Associative array of values	 * @param   string  $content  Not used.	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = array (), $content = null)	{		$msgList = $this->getData();		$buffer = null;		$app = JFactory::getApplication();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/message.php';		$itemOverride = false;		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('renderMessage'))			{				$itemOverride = true;			}		}		$buffer = ($itemOverride) ? renderMessage($msgList) : $this->renderDefaultMessage($msgList);		return $buffer;	}	/**	 * Get and prepare system message data for output	 *	 * @return  array  An array contains system message	 *	 * @since   12.2	 */	private function getData()	{		// Initialise variables.		$lists = array();		// Get the message queue		$messages = JFactory::getApplication()->getMessageQueue();		// Build the sorted message list		if (is_array($messages) && !empty($messages))		{			foreach ($messages as $msg)			{				if (isset($msg['type']) && isset($msg['message']))				{					$lists[$msg['type']][] = $msg['message'];				}			}		}		return $lists;	}	/**	 * Render the system message if no message template file found	 *	 * @param   array  $msgList  An array contains system message	 *	 * @return  string  System message markup	 *	 * @since   12.2	 */	private function renderDefaultMessage($msgList)	{		// Build the return string		$buffer = '';		$buffer .= "\n<div id=\"system-message-container\">";		// If messages exist render them		if (is_array($msgList))		{			$buffer .= "\n<div id=\"system-message\">";			foreach ($msgList as $type => $msgs)			{				$buffer .= "\n<div class=\"alert alert-" . $type . "\">";				// This requires JS so we should add it trough JS. Progressive enhancement and stuff.				$buffer .= "<a class=\"close\" data-dismiss=\"alert\"></a>";				if (count($msgs))				{					$buffer .= "\n<h4 class=\"alert-heading\">" . JText::_($type) . "</h4>";					$buffer .= "\n<div>";					foreach ($msgs as $msg)					{						$buffer .= "\n\t\t<p>" . $msg . "</p>";					}					$buffer .= "\n</div>";				}				$buffer .= "\n</div>";			}			$buffer .= "\n</div>";		}		$buffer .= "\n</div>";		return $buffer;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?>		<li class="imgOutline thumbnail height-80 width-80 center">			<div class="imgTotal">				<div class="imgBorder">					<a class="btn" href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">						<i class="icon-arrow-up"></i></a>				</div>			</div>			<div class="controls">				<span>&#160;</span>			</div>			<div class="imginfoBorder">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">..</a>			</div>		</li>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL import driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseImporterMysql extends JDatabaseImporterMysqli{	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysql  $db  The database connector.	 *	 * @return  JDatabaseImporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysql $db)	{		$this->db = $db;		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('stylesheet', 'mod_languages/template.css', array(), true);?><div class="mod-languages<?php echo $moduleclass_sfx ?>"><?php if ($headerText) : ?>	<div class="pretext"><p><?php echo $headerText; ?></p></div><?php endif; ?><?php if ($params->get('dropdown', 1)) : ?>	<form name="lang" method="post" action="<?php echo htmlspecialchars(JURI::current()); ?>">	<select class="inputbox" onchange="document.location.replace(this.value);" >	<?php foreach ($list as $language) : ?>		<option dir=<?php echo JLanguage::getInstance($language->lang_code)->isRTL() ? '"rtl"' : '"ltr"'?> value="<?php echo $language->link;?>" <?php echo $language->active ? 'selected="selected"' : ''?>>		<?php echo $language->title_native;?></option>	<?php endforeach; ?>	</select>	</form><?php else : ?>	<ul class="<?php echo $params->get('inline', 1) ? 'lang-inline' : 'lang-block';?>">	<?php foreach ($list as $language) : ?>		<?php if ($params->get('show_active', 0) || !$language->active):?>			<li class="<?php echo $language->active ? 'lang-active' : '';?>" dir="<?php echo JLanguage::getInstance($language->lang_code)->isRTL() ? 'rtl' : 'ltr' ?>">			<a href="<?php echo $language->link;?>">			<?php if ($params->get('image', 1)):?>				<?php echo JHtml::_('image', 'mod_languages/' . $language->image . '.gif', $language->title_native, array('title' => $language->title_native), true);?>			<?php else : ?>				<?php echo $params->get('full_name', 1) ? $language->title_native : strtoupper($language->sef);?>			<?php endif; ?>			</a>			</li>		<?php endif;?>	<?php endforeach;?>	</ul><?php endif; ?><?php if ($footerText) : ?>	<div class="posttext"><p><?php echo $footerText; ?></p></div><?php endif; ?></div>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to ucwords* Uppercase the first character of each word in a string* Note: requires utf8_substr_replace and utf8_strtoupper* @param string* @return string with first char of each word uppercase* @see http://www.php.net/ucwords* @package utf8* @subpackage strings*/function utf8_ucwords($str) {    // Note: [\x0c\x09\x0b\x0a\x0d\x20] matches;    // form feeds, horizontal tabs, vertical tabs, linefeeds and carriage returns    // This corresponds to the definition of a "word" defined at http://www.php.net/ucwords    $pattern = '/(^|([\x0c\x09\x0b\x0a\x0d\x20]+))([^\x0c\x09\x0b\x0a\x0d\x20]{1})[^\x0c\x09\x0b\x0a\x0d\x20]*/u';    return preg_replace_callback($pattern, 'utf8_ucwords_callback',$str);}//---------------------------------------------------------------/*** Callback function for preg_replace_callback call in utf8_ucwords* You don't need to call this yourself* @param array of matches corresponding to a single word* @return string with first char of the word in uppercase* @see utf8_ucwords* @see utf8_strtoupper* @package utf8* @subpackage strings*/function utf8_ucwords_callback($matches) {    $leadingws = $matches[2];    $ucfirst = utf8_strtoupper($matches[3]);    $ucword = utf8_substr_replace(ltrim($matches[0]),$ucfirst,0,1);    return $leadingws . $ucword;}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');// If the page class is defined, add to class as suffix.// It will be a separate class if the user starts it with a space?><div class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading') != 0 ) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to set the site data for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerSite extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Get the setup model.		$model = new InstallationModelSetup;		// Check the form		$model->checkForm('site');		// Redirect to the page.		$r = new stdClass;		$r->view = 'database';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for form elements * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlForm{	/**	 * Displays a hidden token field to reduce the risk of CSRF exploits	 *	 * Use in conjunction with JSession::checkToken	 *	 * @return  string  A hidden input field with a token	 *	 * @see     JSession::checkToken	 * @since   11.1	 */	public static function token()	{		return '<input type="hidden" name="' . JSession::getFormToken() . '" value="1" />';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ol class="nav nav-tabs nav-stacked"><?php foreach ($this->link_items as &$item) : ?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Base controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		// Get the document object.		$document	= JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->getCmd('view', 'login');		$vFormat = $document->getType();		$lName   = $this->input->getCmd('layout', 'default');		if ($view = $this->getView($vName, $vFormat))		{			// Do any specific processing by view.			switch ($vName)			{				case 'registration':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					// Check if user registration is enabled					if (JComponentHelper::getParams('com_users')->get('allowUserRegistration') == 0)					{						// Registration is disabled - Redirect to login page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));						return;					}					// The user is a guest, load the registration model and show the registration page.					$model = $this->getModel('Registration');					break;				// Handle view specific models.				case 'profile':					// If the user is a guest, redirect to the login page.					$user = JFactory::getUser();					if ($user->get('guest') == 1)					{						// Redirect to login page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));						return;					}					$model = $this->getModel($vName);					break;				// Handle the default views.				case 'login':					$model = $this->getModel($vName);					break;				case 'reset':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					$model = $this->getModel($vName);					break;				case 'remind':					// If the user is already logged in, redirect to the profile page.					$user = JFactory::getUser();					if ($user->get('guest') != 1)					{						// Redirect to profile page.						$this->setRedirect(JRoute::_('index.php?option=com_users&view=profile', false));						return;					}					$model = $this->getModel($vName);					break;				default:					$model = $this->getModel('Login');					break;			}			// Push the model into the view (as default).			$view->setModel($model, true);			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			$view->display();		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayData->displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($displayData->list as $item) :			if (isset ($item[2]) && $item[2] == 1) : ?>				<li class="active">			<?php else : ?>				<li>			<?php endif;			if ($displayData->hide) : ?>				<a class="nolink"><?php echo $item[0]; ?></a>			<?php else :				if (strlen($item[1])) : ?>					<a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a>				<?php else : ?>					<?php echo $item[0]; ?>				<?php endif;			endif; ?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>		<?php if ($displayData->displayMenu && $displayData->displayFilters) : ?>		<hr />		<?php endif; ?>		<?php if ($displayData->displayFilters) : ?>		<div class="filter-select hidden-phone">			<h4 class="page-header"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></h4>			<?php foreach ($displayData->filters as $filter) : ?>				<label for="<?php echo $filter['name']; ?>" class="element-invisible"><?php echo $filter['label']; ?></label>				<select name="<?php echo $filter['name']; ?>" id="<?php echo $filter['name']; ?>" class="span12 small" onchange="this.form.submit()">					<?php if (!$filter['noDefault']) : ?>						<option value=""><?php echo $filter['label']; ?></option>					<?php endif; ?>					<?php echo $filter['options']; ?>				</select>				<hr class="hr-condensed" />			<?php endforeach; ?>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>	<div class="filter-search">		<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>		<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_INSTALLER_LANGUAGES_FILTER_SEARCH_DESC'); ?>" />		<button type="submit" class="btn"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>		<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>	</div></fieldset><div class="clr"></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="newsflash-horiz<?php echo $params->get('moduleclass_sfx'); ?>"><?php for ($i = 0, $n = count($list); $i < $n; $i ++) :	$item = $list[$i]; ?>	<li>	<?php require JModuleHelper::getLayoutPath('mod_articles_news', '_item');	if ($n > 1 && (($i < $n - 1) || $params->get('showLastSeparator'))) : ?>	<span class="article-separator">&#160;</span>	<?php endif; ?>	</li><?php endfor; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Filters controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderControllerFilters extends JControllerAdmin{	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Filter', $prefix = 'FinderModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one PostgreSQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       3.0 */class JSchemaChangeitemPostgresql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  3.0	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand === 'ADD COLUMN')			{				$result = 'SELECT column_name FROM information_schema.columns WHERE table_name='				. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand === 'ALTER COLUMN')			{				if (strtoupper($wordArray[6]) == 'TYPE')				{					$type = '';					for ($i = 7; $i < count($wordArray); $i++)					{						$type .= $wordArray[$i] . ' ';					}					if ($pos = strpos($type, '('))					{						$type = substr($type, 0, $pos);					}					if ($pos = strpos($type, ';'))					{						$type = substr($type, 0, $pos);					}					$result = 'SELECT column_name, data_type FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND data_type=' . $this->fixQuote($type);					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $type);				}				elseif (strtoupper($wordArray[7] . ' ' . $wordArray[8]) == 'NOT NULL')				{					if (strtoupper($wordArray[6]) == 'SET')					{						// SET NOT NULL						$isNullable = $this->fixQuote('NO');					}					else					{						// DROP NOT NULL						$isNullable = $this->fixQuote('YES');					}					$result = 'SELECT column_name, data_type, is_nullable FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND is_nullable=' . $isNullable;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullable);				}				elseif (strtoupper($wordArray[7]) === 'DEFAULT')				{					if (strtoupper($wordArray[6]) == 'SET')					{						$isNullDef = 'IS NOT NULL';					}					else					{						// DROP DEFAULT						$isNullDef = 'IS NULL';					}					$result = 'SELECT column_name, data_type, column_default FROM information_schema.columns WHERE table_name='						. $this->fixQuote($wordArray[2]) . ' AND column_name=' . $this->fixQuote($wordArray[5])						. ' AND column_default ' . $isNullDef;					$this->queryType = 'CHANGE_COLUMN_TYPE';					$this->checkQueryExpected = 1;					$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]), $isNullDef);				}			}		}		elseif ($command === 'DROP INDEX')		{			if (strtoupper($wordArray[2] . $wordArray[3]) == 'IFEXISTS')			{				$idx = $this->fixQuote($wordArray[4]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx;			$this->queryType = 'DROP_INDEX';			$this->checkQueryExpected = 0;			$this->msgElements = array($this->fixQuote($idx));		}		elseif ($command == 'CREATE INDEX' || (strtoupper($command . $wordArray[2]) == 'CREATE UNIQUE INDEX'))		{			if ($wordArray[1] === 'UNIQUE')			{				$idx = $this->fixQuote($wordArray[3]);				$table = $this->fixQuote($wordArray[5]);			}			else			{				$idx = $this->fixQuote($wordArray[2]);				$table = $this->fixQuote($wordArray[4]);			}			$result = 'SELECT * FROM pg_indexes WHERE indexname=' . $idx . ' AND tablename=' . $table;			$this->queryType = 'ADD_INDEX';			$this->checkQueryExpected = 1;			$this->msgElements = array($table, $idx);		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $this->fixQuote($wordArray[5]);			}			else			{				$table = $this->fixQuote($wordArray[2]);			}			$result = 'SELECT table_name FROM information_schema.tables WHERE table_name=' . $table;			$this->queryType = 'CREATE_TABLE';			$this->checkQueryExpected = 1;			$this->msgElements = array($table);		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with PostgreSQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   3.0	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'unsigned int(10)';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   3.0	 */	private function fixQuote($string)	{		$string = str_replace('"', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;if (!$templateparams->get('html5', 0)){	require JPATH_BASE.'/components/com_content/views/archive/tmpl/default.php';	//evtl. ersetzen durch JPATH_COMPONENT.'/views/...'} else {JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><div class="archive<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><form id="adminForm" action="<?php echo JRoute::_('index.php')?>" method="post">	<fieldset class="filters">	<legend class="hidelabeltxt"><?php echo JText::_('JGLOBAL_FILTER_LABEL'); ?></legend>	<div class="filter-search">		<?php if ($this->params->get('filter_field') != 'hide') : ?>		<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>		<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->filter); ?>" class="inputbox" onchange="document.getElementById('adminForm').submit();" />		<?php endif; ?>		<?php echo $this->form->monthField; ?>		<?php echo $this->form->yearField; ?>		<?php echo $this->form->limitField; ?>		<button type="submit" class="button"><?php echo JText::_('JGLOBAL_FILTER_BUTTON'); ?></button>	</div>	<input type="hidden" name="view" value="archive" />	<input type="hidden" name="option" value="com_content" />	<input type="hidden" name="limitstart" value="0" />	</fieldset>	<?php echo $this->loadTemplate('items'); ?></form></div><?php } ?>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the contrast of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterContrast extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Validate that the contrast value exists and is an integer.		if (!isset($options[IMG_FILTER_CONTRAST]) || !is_int($options[IMG_FILTER_CONTRAST]))		{			throw new InvalidArgumentException('No valid contrast value was given.  Expected integer.');		}		// Perform the contrast filter.		imagefilter($this->handle, IMG_FILTER_CONTRAST, $options[IMG_FILTER_CONTRAST]);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100">	<fieldset title="<?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?>" class="adminform">		<legend><?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?></legend>		<?php echo JText::_('COM_CONFIG_FTP_DETAILS_TIP'); ?>		<?php if ($this->ftp instanceof Exception) : ?>			<p><?php echo JText::_($this->ftp->message); ?></p>		<?php endif; ?>		<ul class="adminformlist">		<li><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>		<input type="text" id="username" name="username" class="input_box" size="70" value="" /></li>		<li><label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>		<input type="password" id="password" name="password" class="input_box" size="70" value="" /></li>		</ul>	</fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$paramstabs = 'params-' . $name;	echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true));	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<div class="control-group">				<div class="control-label"><?php echo $field->label; ?></div>				<div class="controls"><?php echo $field->input; ?></div>			</div>		<?php endforeach; ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Forks class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       11.3 */class JGithubForks extends JGithubObject{	/**	 * Method to fork a repository.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $org   The organization to fork the repo into. By default it is forked to the current user.	 *	 * @return  object	 *	 * @since   11.4	 * @throws  DomainException	 */	public function create($user, $repo, $org = '')	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		if (strlen($org) > 0)		{			$data = json_encode(				array('org' => $org)			);		}		else		{			$data = json_encode(array());		}		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 202)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list forks for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   11.4	 * @throws  DomainException	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/forks';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Download model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.5 */class BannersModelDownload extends JModelForm{	protected $_context = 'com_banners.tracks';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$input = JFactory::getApplication()->input;		$basename = $input->cookie->getString(JApplication::getHash($this->_context.'.basename'), '__SITE__');		$this->setState('basename', $basename);		$compressed = $input->cookie->getInt(JApplication::getHash($this->_context.'.compressed'), 1);		$this->setState('compressed', $compressed);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 *	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.download', 'download', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		$data = array(			'basename'		=> $this->getState('basename'),			'compressed'	=> $this->getState('compressed')		);		$this->preprocessData('com_banners.download', $data);		return $data;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Search HTML view class for the Finder package. * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	protected $query;	protected $params;	protected $state;	protected $user;	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		$app = JFactory::getApplication();		$params = $app->getParams();		// Get view data.		$state = $this->get('State');		$query = $this->get('Query');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderQuery') : null;		$results = $this->get('Results');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderResults') : null;		$total = $this->get('Total');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderTotal') : null;		$pagination = $this->get('Pagination');		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderPagination') : null;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Configure the pathway.		if (!empty($query->input))		{			$app->getPathWay()->addItem($this->escape($query->input));		}		// Push out the view data.		$this->state = &$state;		$this->params = &$params;		$this->query = &$query;		$this->results = &$results;		$this->total = &$total;		$this->pagination = &$pagination;		// Check for a double quote in the query string.		if (strpos($this->query->input, '"'))		{			// Get the application router.			$router =& $app->getRouter();			// Fix the q variable in the URL.			if ($router->getVar('q') !== $this->query->input)			{				$router->setVar('q', $this->query->input);			}		}		// Log the search		JSearchHelper::logSearch($this->query->input, 'com_finder');		// Push out the query data.		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		$this->suggested = JHtml::_('query.suggested', $query);		$this->explained = JHtml::_('query.explained', $query);		// Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($params->get('pageclass_sfx'));		// Check for layout override only if this is not the active menu item		// If it is the active menu item, then the view and category id will match		$active = $app->getMenu()->getActive();		if (isset($active->query['layout']))		{			// We need to set the layout in case this is an alternative menu item (with an alternative layout)			$this->setLayout($active->query['layout']);		}		$this->prepareDocument($query);		JDEBUG ? $GLOBALS['_PROFILER']->mark('beforeFinderLayout') : null;		parent::display($tpl);		JDEBUG ? $GLOBALS['_PROFILER']->mark('afterFinderLayout') : null;	}	/**	 * Method to get hidden input fields for a get form so that control variables	 * are not lost upon form submission	 *	 * @return  string  A string of hidden input form fields	 *	 * @since   2.5	 */	protected function getFields()	{		$fields = null;		// Get the URI.		$uri = JUri::getInstance(JRoute::_($this->query->toURI()));		$uri->delVar('q');		$uri->delVar('o');		$uri->delVar('t');		$uri->delVar('d1');		$uri->delVar('d2');		$uri->delVar('w1');		$uri->delVar('w2');		$elements = $uri->getQuery(true);		// Create hidden input elements for each part of the URI.		foreach ($elements as $n => $v)		{			if (is_scalar($v))			{				$fields .= '<input type="hidden" name="' . $n . '" value="' . $v . '" />';			}		}		return $fields;	}	/**	 * Method to get the layout file for a search result object.	 *	 * @param   string  $layout  The layout file to check. [optional]	 *	 * @return  string  The layout file to use.	 *	 * @since   2.5	 */	protected function getLayoutFile($layout = null)	{		// Create and sanitize the file name.		$file = $this->_layout . '_' . preg_replace('/[^A-Z0-9_\.-]/i', '', $layout);		// Check if the file exists.		jimport('joomla.filesystem.path');		$filetofind = $this->_createFileName('template', array('name' => $file));		$exists = JPath::find($this->_path['template'], $filetofind);		return ($exists ? $layout : 'result');	}	/**	 * Prepares the document	 *	 * @param   FinderIndexerQuery  $query  The search query	 *	 * @return  void	 *	 * @since   2.5	 */	protected function prepareDocument($query)	{		$app = JFactory::getApplication();		$menus = $app->getMenu();		$title = null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_FINDER_DEFAULT_PAGE_TITLE'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($layout = $this->params->get('article_layout'))		{			$this->setLayout($layout);		}		// Configure the document meta-description.		if (!empty($this->explained))		{			$explained = $this->escape(html_entity_decode(strip_tags($this->explained), ENT_QUOTES, 'UTF-8'));			$this->document->setDescription($explained);		}		// Configure the document meta-keywords.		if (!empty($query->highlight))		{			$this->document->setMetadata('keywords', implode(', ', $query->highlight));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}		// Add feed link to the document head.		if ($this->params->get('show_feed_link', 1) == 1)		{			// Add the RSS link.			$props = array('type' => 'application/rss+xml', 'title' => 'RSS 2.0');			$route = JRoute::_($this->query->toURI() . '&format=feed&type=rss');			$this->document->addHeadLink($route, 'alternate', 'rel', $props);			// Add the ATOM link.			$props = array('type' => 'application/atom+xml', 'title' => 'Atom 1.0');			$route = JRoute::_($this->query->toURI() . '&format=feed&type=atom');			$this->document->addHeadLink($route, 'alternate', 'rel', $props);		}	}}
<?php/*** @version $Id$* Tools for locating / replacing bad bytes in UTF-8 strings* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage bad* @see utf8_is_valid*///--------------------------------------------------------------------/*** Locates the first bad byte in a UTF-8 string returning it's* byte index in the string* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return mixed integer byte index or FALSE if no bad found* @package utf8* @subpackage bad*/function utf8_bad_find($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    $pos = 0;    $badList = array();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        $bytes = strlen($matches[0]);        if ( isset($matches[2])) {            return $pos;        }        $pos += $bytes;        $str = substr($str,$bytes);    }    return FALSE;}//--------------------------------------------------------------------/*** Locates all bad bytes in a UTF-8 string and returns a list of their* byte index in the string* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return mixed array of integers or FALSE if no bad found* @package utf8* @subpackage bad*/function utf8_bad_findall($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    $pos = 0;    $badList = array();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        $bytes = strlen($matches[0]);        if ( isset($matches[2])) {            $badList[] = $pos;        }        $pos += $bytes;        $str = substr($str,$bytes);    }    if ( count($badList) > 0 ) {        return $badList;    }    return FALSE;}//--------------------------------------------------------------------/*** Strips out any bad bytes from a UTF-8 string and returns the rest* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string* @return string* @package utf8* @subpackage bad*/function utf8_bad_strip($str) {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    ob_start();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        if ( !isset($matches[2])) {            echo $matches[0];        }        $str = substr($str,strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Replace bad bytes with an alternative character - ASCII character* recommended is replacement char* PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @param string to search* @param string to replace bad bytes with (defaults to '?') - use ASCII* @return string* @package utf8* @subpackage bad*/function utf8_bad_replace($str, $replace = '?') {    $UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte    ob_start();    while (preg_match('/'.$UTF8_BAD.'/S', $str, $matches)) {        if ( !isset($matches[2])) {            echo $matches[0];        } else {            echo $replace;        }        $str = substr($str,strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Return code from utf8_bad_identify() when a five octet sequence is detected.* Note: 5 octets sequences are valid UTF-8 but are not supported by Unicode so* do not represent a useful character* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_5OCTET',1);/*** Return code from utf8_bad_identify() when a six octet sequence is detected.* Note: 6 octets sequences are valid UTF-8 but are not supported by Unicode so* do not represent a useful character* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_6OCTET',2);/*** Return code from utf8_bad_identify().* Invalid octet for use as start of multi-byte UTF-8 sequence* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SEQID',3);/*** Return code from utf8_bad_identify().* From Unicode 3.1, non-shortest form is illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_NONSHORT',4);/*** Return code from utf8_bad_identify().* From Unicode 3.2, surrogate characters are illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SURROGATE',5);/*** Return code from utf8_bad_identify().* Codepoints outside the Unicode range are illegal* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_UNIOUTRANGE',6);/*** Return code from utf8_bad_identify().* Incomplete multi-octet sequence* Note: this is kind of a "catch-all"* @see utf8_bad_identify* @package utf8* @subpackage bad*/define('UTF8_BAD_SEQINCOMPLETE',7);//--------------------------------------------------------------------/*** Reports on the type of bad byte found in a UTF-8 string. Returns a* status code on the first bad byte found* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return mixed integer constant describing problem or FALSE if valid UTF-8* @see utf8_bad_explain* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage bad*/function utf8_bad_identify($str, &$i) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                */                return UTF8_BAD_5OCTET;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                return UTF8_BAD_6OCTET;            } else {                // Current octet is neither in the US-ASCII range nor a legal first                // octet of a multi-octet sequence.                return UTF8_BAD_SEQID;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ) {                        return UTF8_BAD_NONSHORT;                    // From Unicode 3.2, surrogate characters are illegal                    } else if (($mUcs4 & 0xFFFFF800) == 0xD800) {                        return UTF8_BAD_SURROGATE;                    // Codepoints outside the Unicode range are illegal                    } else if ($mUcs4 > 0x10FFFF) {                        return UTF8_BAD_UNIOUTRANGE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                // ((0xC0 & (*in) != 0x80) && (mState != 0))                // Incomplete multi-octet sequence.                $i--;                return UTF8_BAD_SEQINCOMPLETE;            }        }    }    if ( $mState != 0 ) {        // Incomplete multi-octet sequence.        $i--;        return UTF8_BAD_SEQINCOMPLETE;    }    // No bad octets found    $i = NULL;    return FALSE;}//--------------------------------------------------------------------/*** Takes a return code from utf8_bad_identify() are returns a message* (in English) explaining what the problem is.* @param int return code from utf8_bad_identify* @return mixed string message or FALSE if return code unknown* @see utf8_bad_identify* @package utf8* @subpackage bad*/function utf8_bad_explain($code) {    switch ($code) {        case UTF8_BAD_5OCTET:            return 'Five octet sequences are valid UTF-8 but are not supported by Unicode';        break;        case UTF8_BAD_6OCTET:            return 'Six octet sequences are valid UTF-8 but are not supported by Unicode';        break;        case UTF8_BAD_SEQID:            return 'Invalid octet for use as start of multi-byte UTF-8 sequence';        break;        case UTF8_BAD_NONSHORT:            return 'From Unicode 3.1, non-shortest form is illegal';        break;        case UTF8_BAD_SURROGATE:            return 'From Unicode 3.2, surrogate characters are illegal';        break;        case UTF8_BAD_UNIOUTRANGE:            return 'Codepoints outside the Unicode range are illegal';        break;        case UTF8_BAD_SEQINCOMPLETE:            return 'Incomplete multi-octet sequence';        break;    }    trigger_error('Unknown error code: '.$code,E_USER_WARNING);    return FALSE;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?>">	<legend><?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?></legend>	<?php echo JText::_('COM_INSTALLER_MSG_DESCFTP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->getMessage()); ?></p>	<?php endif; ?>	<table class="adminform">		<tbody>			<tr>				<td width="120">					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>				</td>				<td>					<input type="text" id="username" name="username" class="input_box" size="70" value="" />				</td>			</tr>			<tr>				<td width="120">					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>				</td>				<td>					<input type="password" id="password" name="password" class="input_box" size="70" value="" />				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * This is a CRON script which should be called from the command-line, not the * web. For example something like: * /usr/bin/php /path/to/site/cli/update_cron.php */// Set flag that this is a parent file.const _JEXEC = 1;error_reporting(E_ALL | E_NOTICE);ini_set('display_errors', 1);// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}require_once JPATH_LIBRARIES . '/import.legacy.php';require_once JPATH_LIBRARIES . '/cms.php';// Load the configurationrequire_once JPATH_CONFIGURATION . '/configuration.php';/** * This script will fetch the update information for all extensions and store * them in the database, speeding up your administrator. * * @package  Joomla.CLI * @since    2.5 */class Updatecron extends JApplicationCli{	/**	 * Entry point for the script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Get the update cache time		$component = JComponentHelper::getComponent('com_installer');		$params = $component->params;		$cache_timeout = $params->get('cachetimeout', 6, 'int');		$cache_timeout = 3600 * $cache_timeout;		// Find all updates		$this->out('Fetching updates...');		$updater = JUpdater::getInstance();		$updater->findUpdates(0, $cache_timeout);		$this->out('Finished fetching updates');	}}JApplicationCli::getInstance('Updatecron')->execute();
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Commits class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.1 */class JGithubCommits extends JGithubObject{	/**	 * Method to create a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $message  The commit message.	 * @param   string  $tree     SHA of the tree object this commit points to.	 * @param   array   $parents  Array of the SHAs of the commits that were the parents of this commit.	 *                            If omitted or empty, the commit will be written as a root commit.	 *                            For a single parent, an array of one SHA should be provided.	 *                            For a merge commit, an array of more than one should be provided.	 *	 * @return  object	 *	 * @since   12.1	 */	public function create($user, $repo, $message, $tree, array $parents = array())	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/git/commits';		$data = json_encode(			array('message' => $message, 'tree' => $tree, 'parents' => $parents)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to create a comment on a commit.	 *	 * @param   string   $user      The name of the owner of the GitHub repository.	 * @param   string   $repo      The name of the GitHub repository.	 * @param   string   $sha       The SHA of the commit to comment on.	 * @param   string   $comment   The text of the comment.	 * @param   integer  $line      The line number of the commit to comment on.	 * @param   string   $filepath  A relative path to the file to comment on within the commit.	 * @param   integer  $position  Line index in the diff to comment on.	 *	 * @return  object	 *	 * @since   12.1	 */	public function createCommitComment($user, $repo, $sha, $comment, $line, $filepath, $position)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		$data = json_encode(			array(				'body' => $comment,				'commit_id' => $sha,				'line' => (int) $line,				'path' => $filepath,				'position' => (int) $position			)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete a comment on a commit.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $id    The ID of the comment to edit.	 *	 * @return  object	 *	 * @since   12.1	 */	public function deleteCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to edit a comment on a commit.	 *	 * @param   string  $user     The name of the owner of the GitHub repository.	 * @param   string  $repo     The name of the GitHub repository.	 * @param   string  $id       The ID of the comment to edit.	 * @param   string  $comment  The text of the comment.	 *	 * @return  object	 *	 * @since   12.1	 */	public function editCommitComment($user, $repo, $id, $comment)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		$data = json_encode(			array(				'body' => $comment			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommit($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha;		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a single comment on a commit.	 *	 * @param   string   $user  The name of the owner of the GitHub repository.	 * @param   string   $repo  The name of the GitHub repository.	 * @param   integer  $id    ID of the comment to retrieve	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComment($user, $repo, $id)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments/' . $id;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of comments for a single commit for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   string   $sha    The SHA of the commit to retrieve.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getCommitComments($user, $repo, $sha, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits/' . $sha . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a diff for two commits.	 *	 * @param   string  $user  The name of the owner of the GitHub repository.	 * @param   string  $repo  The name of the GitHub repository.	 * @param   string  $base  The base of the diff, either a commit SHA or branch.	 * @param   string  $head  The head of the diff, either a commit SHA or branch.	 *	 * @return  array	 *	 * @since   12.1	 */	public function getDiff($user, $repo, $base, $head)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/compare/' . $base . '...' . $head;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to list commits for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getList($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/commits';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get a list of commit comments for a repository.	 *	 * @param   string   $user   The name of the owner of the GitHub repository.	 * @param   string   $repo   The name of the GitHub repository.	 * @param   integer  $page   Page to request	 * @param   integer  $limit  Number of results to return per page	 *	 * @return  array	 *	 * @since   12.1	 */	public function getListComments($user, $repo, $page = 0, $limit = 0)	{		// Build the request path.		$path = '/repos/' . $user . '/' . $repo . '/comments';		// Send the request.		$response = $this->client->get($this->fetchUrl($path, $page, $limit));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="sidebar">	<div class="sidebar-nav">		<?php if ($displayMenu) : ?>		<ul id="submenu" class="nav nav-list">			<?php foreach ($list as $item) : ?>			<?php if (isset ($item[2]) && $item[2] == 1) :				?><li class="active"><?php			else :				?><li><?php			endif;			?>			<?php			if ($hide) :					?><a class="nolink"><?php echo $item[0]; ?></a><?php			else :				if (strlen($item[1])) :					?><a href="<?php echo JFilterOutput::ampReplace($item[1]); ?>"><?php echo $item[0]; ?></a><?php				else :					?><?php echo $item[0]; ?><?php				endif;			endif;			?>			</li>			<?php endforeach; ?>		</ul>		<?php endif; ?>		<?php if ($displayMenu && $displayFilters) : ?>		<hr />		<?php endif; ?>		<?php if ($displayFilters) : ?>		<div class="filter-select hidden-phone">			<h4 class="page-header"><?php echo JText::_('JSEARCH_FILTER_LABEL');?></h4>			<form action="<?php echo JRoute::_($action);?>" method="post">				<?php foreach ($filters as $filter) : ?>					<label for="<?php echo $filter['name']; ?>" class="element-invisible"><?php echo $filter['label']; ?></label>					<select name="<?php echo $filter['name']; ?>" id="<?php echo $filter['name']; ?>" class="span12 small" onchange="this.form.submit()">						<?php if (!$filter['noDefault']) : ?>							<option value=""><?php echo $filter['label']; ?></option>						<?php endif; ?>						<?php echo $filter['options']; ?>					</select>					<hr class="hr-condensed" />				<?php endforeach; ?>			</form>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       3.0 */class JFormFieldModuletag extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	protected $type = 'ModuleTag';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   3.0	 */	protected function getOptions()	{		$options = array();		$tags = array('div', 'section', 'aside', 'nav', 'address', 'article');		// Create one new option object for each tag		foreach ($tags as $tag)		{			$tmp = JHtml::_('select.option', $tag, $tag);			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/*** Utilities for processing "special" characters in UTF-8. "Special" largely means anything which would* be regarded as a non-word character, like ASCII control characters and punctuation. This has a "Roman"* bias - it would be unaware of modern Chinese "punctuation" characters for example.* Note: requires utils/unicode.php to be loaded* @version $Id$* @package utf8* @subpackage utils* @see utf8_is_valid*///--------------------------------------------------------------------/*** Used internally. Builds a PCRE pattern from the $UTF8_SPECIAL_CHARS* array defined in this file* The $UTF8_SPECIAL_CHARS should contain all special characters (non-letter/non-digit)* defined in the various local charsets - it's not a complete list of* non-alphanum characters in UTF-8. It's not perfect but should match most* cases of special chars.* This function adds the control chars 0x00 to 0x19 to the array of* special chars (they are not included in $UTF8_SPECIAL_CHARS)* @package utf8* @subpackage utils* @return string* @see utf8_from_unicode* @see utf8_is_word_chars* @see utf8_strip_specials*/function utf8_specials_pattern() {    static $pattern = NULL;    if ( !$pattern ) {        $UTF8_SPECIAL_CHARS = array(    0x001a, 0x001b, 0x001c, 0x001d, 0x001e, 0x001f, 0x0020, 0x0021, 0x0022, 0x0023,    0x0024, 0x0025, 0x0026, 0x0027, 0x0028, 0x0029, 0x002a, 0x002b, 0x002c,    0x002f,         0x003b, 0x003c, 0x003d, 0x003e, 0x003f, 0x0040, 0x005b,    0x005c, 0x005d, 0x005e,         0x0060, 0x007b, 0x007c, 0x007d, 0x007e,    0x007f, 0x0080, 0x0081, 0x0082, 0x0083, 0x0084, 0x0085, 0x0086, 0x0087, 0x0088,    0x0089, 0x008a, 0x008b, 0x008c, 0x008d, 0x008e, 0x008f, 0x0090, 0x0091, 0x0092,    0x0093, 0x0094, 0x0095, 0x0096, 0x0097, 0x0098, 0x0099, 0x009a, 0x009b, 0x009c,    0x009d, 0x009e, 0x009f, 0x00a0, 0x00a1, 0x00a2, 0x00a3, 0x00a4, 0x00a5, 0x00a6,    0x00a7, 0x00a8, 0x00a9, 0x00aa, 0x00ab, 0x00ac, 0x00ad, 0x00ae, 0x00af, 0x00b0,    0x00b1, 0x00b2, 0x00b3, 0x00b4, 0x00b5, 0x00b6, 0x00b7, 0x00b8, 0x00b9, 0x00ba,    0x00bb, 0x00bc, 0x00bd, 0x00be, 0x00bf, 0x00d7, 0x00f7, 0x02c7, 0x02d8, 0x02d9,    0x02da, 0x02db, 0x02dc, 0x02dd, 0x0300, 0x0301, 0x0303, 0x0309, 0x0323, 0x0384,    0x0385, 0x0387, 0x03b2, 0x03c6, 0x03d1, 0x03d2, 0x03d5, 0x03d6, 0x05b0, 0x05b1,    0x05b2, 0x05b3, 0x05b4, 0x05b5, 0x05b6, 0x05b7, 0x05b8, 0x05b9, 0x05bb, 0x05bc,    0x05bd, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c2, 0x05c3, 0x05f3, 0x05f4, 0x060c,    0x061b, 0x061f, 0x0640, 0x064b, 0x064c, 0x064d, 0x064e, 0x064f, 0x0650, 0x0651,    0x0652, 0x066a, 0x0e3f, 0x200c, 0x200d, 0x200e, 0x200f, 0x2013, 0x2014, 0x2015,    0x2017, 0x2018, 0x2019, 0x201a, 0x201c, 0x201d, 0x201e, 0x2020, 0x2021, 0x2022,    0x2026, 0x2030, 0x2032, 0x2033, 0x2039, 0x203a, 0x2044, 0x20a7, 0x20aa, 0x20ab,    0x20ac, 0x2116, 0x2118, 0x2122, 0x2126, 0x2135, 0x2190, 0x2191, 0x2192, 0x2193,    0x2194, 0x2195, 0x21b5, 0x21d0, 0x21d1, 0x21d2, 0x21d3, 0x21d4, 0x2200, 0x2202,    0x2203, 0x2205, 0x2206, 0x2207, 0x2208, 0x2209, 0x220b, 0x220f, 0x2211, 0x2212,    0x2215, 0x2217, 0x2219, 0x221a, 0x221d, 0x221e, 0x2220, 0x2227, 0x2228, 0x2229,    0x222a, 0x222b, 0x2234, 0x223c, 0x2245, 0x2248, 0x2260, 0x2261, 0x2264, 0x2265,    0x2282, 0x2283, 0x2284, 0x2286, 0x2287, 0x2295, 0x2297, 0x22a5, 0x22c5, 0x2310,    0x2320, 0x2321, 0x2329, 0x232a, 0x2469, 0x2500, 0x2502, 0x250c, 0x2510, 0x2514,    0x2518, 0x251c, 0x2524, 0x252c, 0x2534, 0x253c, 0x2550, 0x2551, 0x2552, 0x2553,    0x2554, 0x2555, 0x2556, 0x2557, 0x2558, 0x2559, 0x255a, 0x255b, 0x255c, 0x255d,    0x255e, 0x255f, 0x2560, 0x2561, 0x2562, 0x2563, 0x2564, 0x2565, 0x2566, 0x2567,    0x2568, 0x2569, 0x256a, 0x256b, 0x256c, 0x2580, 0x2584, 0x2588, 0x258c, 0x2590,    0x2591, 0x2592, 0x2593, 0x25a0, 0x25b2, 0x25bc, 0x25c6, 0x25ca, 0x25cf, 0x25d7,    0x2605, 0x260e, 0x261b, 0x261e, 0x2660, 0x2663, 0x2665, 0x2666, 0x2701, 0x2702,    0x2703, 0x2704, 0x2706, 0x2707, 0x2708, 0x2709, 0x270c, 0x270d, 0x270e, 0x270f,    0x2710, 0x2711, 0x2712, 0x2713, 0x2714, 0x2715, 0x2716, 0x2717, 0x2718, 0x2719,    0x271a, 0x271b, 0x271c, 0x271d, 0x271e, 0x271f, 0x2720, 0x2721, 0x2722, 0x2723,    0x2724, 0x2725, 0x2726, 0x2727, 0x2729, 0x272a, 0x272b, 0x272c, 0x272d, 0x272e,    0x272f, 0x2730, 0x2731, 0x2732, 0x2733, 0x2734, 0x2735, 0x2736, 0x2737, 0x2738,    0x2739, 0x273a, 0x273b, 0x273c, 0x273d, 0x273e, 0x273f, 0x2740, 0x2741, 0x2742,    0x2743, 0x2744, 0x2745, 0x2746, 0x2747, 0x2748, 0x2749, 0x274a, 0x274b, 0x274d,    0x274f, 0x2750, 0x2751, 0x2752, 0x2756, 0x2758, 0x2759, 0x275a, 0x275b, 0x275c,    0x275d, 0x275e, 0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x277f,    0x2789, 0x2793, 0x2794, 0x2798, 0x2799, 0x279a, 0x279b, 0x279c, 0x279d, 0x279e,    0x279f, 0x27a0, 0x27a1, 0x27a2, 0x27a3, 0x27a4, 0x27a5, 0x27a6, 0x27a7, 0x27a8,    0x27a9, 0x27aa, 0x27ab, 0x27ac, 0x27ad, 0x27ae, 0x27af, 0x27b1, 0x27b2, 0x27b3,    0x27b4, 0x27b5, 0x27b6, 0x27b7, 0x27b8, 0x27b9, 0x27ba, 0x27bb, 0x27bc, 0x27bd,    0x27be, 0xf6d9, 0xf6da, 0xf6db, 0xf8d7, 0xf8d8, 0xf8d9, 0xf8da, 0xf8db, 0xf8dc,    0xf8dd, 0xf8de, 0xf8df, 0xf8e0, 0xf8e1, 0xf8e2, 0xf8e3, 0xf8e4, 0xf8e5, 0xf8e6,    0xf8e7, 0xf8e8, 0xf8e9, 0xf8ea, 0xf8eb, 0xf8ec, 0xf8ed, 0xf8ee, 0xf8ef, 0xf8f0,    0xf8f1, 0xf8f2, 0xf8f3, 0xf8f4, 0xf8f5, 0xf8f6, 0xf8f7, 0xf8f8, 0xf8f9, 0xf8fa,    0xf8fb, 0xf8fc, 0xf8fd, 0xf8fe, 0xfe7c, 0xfe7d,            );        $pattern = preg_quote(utf8_from_unicode($UTF8_SPECIAL_CHARS), '/');        $pattern = '/[\x00-\x19'.$pattern.']/u';    }    return $pattern;}//--------------------------------------------------------------------/*** Checks a string for whether it contains only word characters. This* is logically equivalent to the \w PCRE meta character. Note that* this is not a 100% guarantee that the string only contains alpha /* numeric characters but just that common non-alphanumeric are not* in the string, including ASCII device control characters.* @package utf8* @subpackage utils* @param string to check* @return boolean TRUE if the string only contains word characters* @see utf8_specials_pattern*/function utf8_is_word_chars($str) {    return !(bool)preg_match(utf8_specials_pattern(),$str);}//--------------------------------------------------------------------/*** Removes special characters (nonalphanumeric) from a UTF-8 string** This can be useful as a helper for sanitizing a string for use as* something like a file name or a unique identifier. Be warned though* it does not handle all possible non-alphanumeric characters and is* not intended is some kind of security / injection filter.** @package utf8* @subpackage utils* @author Andreas Gohr <andi@splitbrain.org>* @param string $string The UTF8 string to strip of special chars* @param string (optional) $repl   Replace special with this string* @return string with common non-alphanumeric characters removed* @see utf8_specials_pattern*/function utf8_strip_specials($string, $repl=''){    return preg_replace(utf8_specials_pattern(), $repl, $string);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Tracks list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerTracks extends JControllerLegacy{	/**	 * @var		string	The context for persistent state.	 * @since   1.6	 */	protected $context = 'com_banners.tracks';	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Tracks', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to remove a record.	 *	 * @return  void	 * @since   1.6	 */	public function delete()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the model.		$model = $this->getModel();		// Load the filter state.		$app = JFactory::getApplication();		$type = $app->getUserState($this->context.'.filter.type');		$model->setState('filter.type', $type);		$begin = $app->getUserState($this->context.'.filter.begin');		$model->setState('filter.begin', $begin);		$end = $app->getUserState($this->context.'.filter.end');		$model->setState('filter.end', $end);		$categoryId = $app->getUserState($this->context.'.filter.category_id');		$model->setState('filter.category_id', $categoryId);		$clientId = $app->getUserState($this->context.'.filter.client_id');		$model->setState('filter.client_id', $clientId);		$model->setState('list.limit', 0);		$model->setState('list.start', 0);		$count = $model->getTotal();		// Remove the items.		if (!$model->delete())		{			JError::raiseWarning(500, $model->getError());		}		else		{			$this->setMessage(JText::plural('COM_BANNERS_TRACKS_N_ITEMS_DELETED', $count));		}		$this->setRedirect('index.php?option=com_banners&view=tracks');	}}
<?php/** * Parses and verifies the doc comments for classes. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ClassCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    $error = 'Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found';    throw new PHP_CodeSniffer_Exception($error);}require_once 'FileCommentSniff.php';if (class_exists('Joomla_Sniffs_Commenting_FileCommentSniff', true) === false) {    $error = 'Class Joomla_Sniffs_Commenting_FileCommentSniff not found';    throw new PHP_CodeSniffer_Exception($error);}/** * Parses and verifies the doc comments for classes. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_ClassCommentSniff extends Joomla_Sniffs_Commenting_FileCommentSniff{    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'is first',                                       ),                       'category'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @version (if used)',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'    => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'is first',                                       ),                       'copyright'  => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used) or @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright (if used)',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @version (if used)',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used)',                                       ),                       'since'      => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @see (if used) or @link (if used)',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used) or @see (if used) or @link (if used)',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_CLASS,                T_INTERFACE,               );    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        $tokens    = $phpcsFile->getTokens();        $type      = strtolower($tokens[$stackPtr]['content']);        $errorData = array($type);        $find      = array(                      T_ABSTRACT,                      T_WHITESPACE,                      T_FINAL,                     );        // Extract the class comment docblock.        $commentEnd = $phpcsFile->findPrevious($find, ($stackPtr - 1), null, true);        if ($commentEnd !== false && $tokens[$commentEnd]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a %s comment';            $phpcsFile->addError($error, $stackPtr, 'WrongStyle', $errorData);            return;        } else if ($commentEnd === false            || $tokens[$commentEnd]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing %s doc comment', $stackPtr, 'Missing', $errorData);            return;        }        $commentStart = ($phpcsFile->findPrevious(T_DOC_COMMENT, ($commentEnd - 1), null, true) + 1);        $commentNext  = $phpcsFile->findPrevious(T_WHITESPACE, ($commentEnd + 1), $stackPtr, false, $phpcsFile->eolChar);        // Distinguish file and class comment.        $prevClassToken = $phpcsFile->findPrevious(T_CLASS, ($stackPtr - 1));        if ($prevClassToken === false) {            // This is the first class token in this file, need extra checks.            $prevNonComment = $phpcsFile->findPrevious(T_DOC_COMMENT, ($commentStart - 1), null, true);            if ($prevNonComment !== false) {                $prevComment = $phpcsFile->findPrevious(T_DOC_COMMENT, ($prevNonComment - 1));                if ($prevComment === false) {                    // There is only 1 doc comment between open tag and class token.                    $newlineToken = $phpcsFile->findNext(T_WHITESPACE, ($commentEnd + 1), $stackPtr, false, $phpcsFile->eolChar);                    if ($newlineToken !== false) {                        $newlineToken = $phpcsFile->findNext(                            T_WHITESPACE,                            ($newlineToken + 1),                            $stackPtr,                            false,                            $phpcsFile->eolChar                        );                        if ($newlineToken !== false) {                            // Blank line between the class and the doc block.                            // The doc block is most likely a file comment.                            $error = 'Missing %s doc comment';                            $phpcsFile->addError($error, ($stackPtr + 1), 'Missing', $errorData);                            return;                        }                    }//end if                }//end if            }//end if        }//end if        $comment = $phpcsFile->getTokensAsString(            $commentStart,            ($commentEnd - $commentStart + 1)        );        // Parse the class comment.docblock.        try {            $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);            $this->commentParser->parse();        } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {            $line = ($e->getLineWithinComment() + $commentStart);            $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');            return;        }        $comment = $this->commentParser->getComment();        if (is_null($comment) === true) {            $error = 'Doc comment is empty for %s';            $phpcsFile->addError($error, $commentStart, 'Empty', $errorData);            return;        }        // No extra newline before short description.        $short        = $comment->getShortComment();        $newlineCount = 0;        $newlineSpan  = strspn($short, $phpcsFile->eolChar);        if ($short !== '' && $newlineSpan > 0) {            $error = 'Extra newline(s) found before %s comment short description';            $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBeforeShort', $errorData);        }        $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);        // Exactly one blank line between short and long description.        $long = $comment->getLongComment();        if (empty($long) === false) {            $between        = $comment->getWhiteSpaceBetween();            $newlineBetween = substr_count($between, $phpcsFile->eolChar);            if ($newlineBetween !== 2) {                $error = 'There must be exactly one blank line between descriptions in %s comments';                $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'SpacingAfterShort', $errorData);            }            $newlineCount += $newlineBetween;        }        // Exactly one blank line before tags.        $tags = $this->commentParser->getTagOrders();        if (count($tags) > 1) {            $newlineSpan = $comment->getNewlineAfter();            if ($newlineSpan !== 2) {                $error = 'There must be exactly one blank line before the tags in %s comments';                if ($long !== '') {                    $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                }                $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags', $errorData);                $short = rtrim($short, $phpcsFile->eolChar.' ');            }        }        // Check each tag.        $this->processTags($commentStart, $commentEnd);    }//end process()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in doc comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if ((strstr($content, 'Release:') === false)) {                $error = 'Invalid version "%s" in doc comment; consider "Release: <package_version>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Log Class * * This class hooks into the global log configuration settings to allow for user configured * logging events to be sent to where the user wishes them to be sent. On high load sites * Syslog is probably the best (pure PHP function), then the text file based loggers (CSV, W3c * or plain Formattedtext) and finally MySQL offers the most features (e.g. rapid searching) * but will incur a performance hit due to INSERT being issued. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLog{	/**	 * All log priorities.	 * @var    integer	 * @since  11.1	 */	const ALL = 30719;	/**	 * The system is unusable.	 * @var    integer	 * @since  11.1	 */	const EMERGENCY = 1;	/**	 * Action must be taken immediately.	 * @var    integer	 * @since  11.1	 */	const ALERT = 2;	/**	 * Critical conditions.	 * @var    integer	 * @since  11.1	 */	const CRITICAL = 4;	/**	 * Error conditions.	 * @var    integer	 * @since  11.1	 */	const ERROR = 8;	/**	 * Warning conditions.	 * @var    integer	 * @since  11.1	 */	const WARNING = 16;	/**	 * Normal, but significant condition.	 * @var    integer	 * @since  11.1	 */	const NOTICE = 32;	/**	 * Informational message.	 * @var    integer	 * @since  11.1	 */	const INFO = 64;	/**	 * Debugging message.	 * @var    integer	 * @since  11.1	 */	const DEBUG = 128;	/**	 * The global JLog instance.	 * @var    JLog	 * @since  11.1	 */	protected static $instance;	/**	 * Container for JLogLogger configurations.	 * @var    array	 * @since  11.1	 */	protected $configurations = array();	/**	 * Container for JLogLogger objects.	 * @var    array	 * @since  11.1	 */	protected $loggers = array();	/**	 * Lookup array for loggers.	 * @var    array	 * @since  11.1	 */	protected $lookup = array();	/**	 * Constructor.	 *	 * @since   11.1	 */	protected function __construct()	{	}	/**	 * Method to add an entry to the log.	 *	 * @param   mixed    $entry     The JLogEntry object to add to the log or the message for a new JLogEntry object.	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 * @param   string   $date      Date of entry (defaults to now if not specified or blank)	 *	 * @return  void	 *	 * @since   11.1	 */	public static function add($entry, $priority = self::INFO, $category = '', $date = null)	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// If the entry object isn't a JLogEntry object let's make one.		if (!($entry instanceof JLogEntry))		{			$entry = new JLogEntry((string) $entry, $priority, $category, $date);		}		self::$instance->addLogEntry($entry);	}	/**	 * Add a logger to the JLog instance.  Loggers route log entries to the correct files/systems to be logged.	 *	 * @param   array    $options     The object configuration array.	 * @param   integer  $priorities  Message priority	 * @param   array    $categories  Types of entry	 *	 * @return  void	 *	 * @since   11.1	 */	public static function addLogger(array $options, $priorities = self::ALL, $categories = array())	{		// Automatically instantiate the singleton object if not already done.		if (empty(self::$instance))		{			self::setInstance(new JLog);		}		// The default logger is the formatted text log file.		if (empty($options['logger']))		{			$options['logger'] = 'formattedtext';		}		$options['logger'] = strtolower($options['logger']);		// Special case - if a Closure object is sent as the callback (in case of JLoggerCallback)		// Closure objects are not serializable so swap it out for a unique id first then back again later		if (isset($options['callback']) && is_a($options['callback'], 'closure'))		{			$callback = $options['callback'];			$options['callback'] = spl_object_hash($options['callback']);		}		// Generate a unique signature for the JLog instance based on its options.		$signature = md5(serialize($options));		// Now that the options array has been serialized, swap the callback back in		if (isset($callback))		{			$options['callback'] = $callback;		}		// Register the configuration if it doesn't exist.		if (empty(self::$instance->configurations[$signature]))		{			self::$instance->configurations[$signature] = $options;		}		self::$instance->lookup[$signature] = (object) array(			'priorities' => $priorities,			'categories' => array_map('strtolower', (array) $categories));	}	/**	 * Returns a reference to the a JLog object, only creating it if it doesn't already exist.	 * Note: This is principally made available for testing and internal purposes.	 *	 * @param   JLog  $instance  The logging object instance to be used by the static methods.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setInstance($instance)	{		if (($instance instanceof JLog) || $instance === null)		{			self::$instance = & $instance;		}	}	/**	 * Method to add an entry to the appropriate loggers.	 *	 * @param   JLogEntry  $entry  The JLogEntry object to send to the loggers.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function addLogEntry(JLogEntry $entry)	{		// Find all the appropriate loggers based on priority and category for the entry.		$loggers = $this->findLoggers($entry->priority, $entry->category);		foreach ((array) $loggers as $signature)		{			// Attempt to instantiate the logger object if it doesn't already exist.			if (empty($this->loggers[$signature]))			{				$class = 'JLogLogger' . ucfirst($this->configurations[$signature]['logger']);				if (class_exists($class))				{					$this->loggers[$signature] = new $class($this->configurations[$signature]);				}				else				{					throw new RuntimeException('Unable to create a JLogLogger instance: ' . $class);				}			}			// Add the entry to the logger.			$this->loggers[$signature]->addEntry(clone($entry));		}	}	/**	 * Method to find the loggers to use based on priority and category values.	 *	 * @param   integer  $priority  Message priority.	 * @param   string   $category  Type of entry	 *	 * @return  array  The array of loggers to use for the given priority and category values.	 *	 * @since   11.1	 */	protected function findLoggers($priority, $category)	{		$loggers = array();		// Sanitize inputs.		$priority = (int) $priority;		$category = strtolower($category);		// Let's go iterate over the loggers and get all the ones we need.		foreach ((array) $this->lookup as $signature => $rules)		{			// Check to make sure the priority matches the logger.			if ($priority & $rules->priorities)			{				// If either there are no set categories (meaning all) or the specific category is set, add this logger.				if (empty($category) || empty($rules->categories) || in_array($category, $rules->categories))				{					$loggers[] = $signature;				}			}		}		return $loggers;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::_('formbehavior.chosen', 'select');?><form action="<?php echo JRoute::_('index.php?option=com_messages'); ?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">	<fieldset>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_USER_ID_FROM_LABEL'); ?>			</div>			<div class="controls">				<?php echo $this->item->get('from_user_name');?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_DATE_TIME_LABEL'); ?>			</div>			<div class="controls">				<?php echo JHtml::_('date', $this->item->date_time);?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_SUBJECT_LABEL'); ?>			</div>			<div class="controls">				<?php echo $this->item->subject;?>			</div>		</div>		<div class="control-group">			<div class="control-label">				<?php echo JText::_('COM_MESSAGES_FIELD_MESSAGE_LABEL'); ?>			</div>			<div class="controls">				<?php echo $this->item->message; ?>			</div>		</div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="reply_id" value="<?php echo $this->item->message_id; ?>" />		<?php echo JHtml::_('form.token'); ?>	</fieldset></form>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This is a file to add template specific chrome to module rendering.  To use it you would * set the style attribute for the given module(s) include in your template to use the style * for each given modChrome function. * * eg.  To render a module mod_test in the submenu style, you would use the following include: * <jdoc:include type="module" name="test" style="submenu" /> * * This gives template designers ultimate control over how modules are rendered. * * NOTICE: All chrome wrapping methods should be named: modChrome_{STYLE} and take the same * two arguments. *//* * Module chrome for rendering the module in a submenu */function modChrome_xhtmlid($module, &$params, &$attribs){	if ($module->content)	{		?>		<div id="<?php echo (int) $attribs['id'] ?>">				<?php echo $module->content; ?>				<div class="clr"></div>		</div>		<?php	} elseif ($attribs['id'] == "submenu-box")	{		?>		<div id="no-submenu"></div>		<?php	}}?>
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * An interface to define if an object is dumpable. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */interface JDataDumpable{	/**	 * Dumps the object properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion.	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null);}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to define an abstract Web application router. * * @package     Joomla.Platform * @subpackage  Application * @since       12.2 */abstract class JApplicationWebRouter{	/**	 * @var    JApplicationWeb  The web application on whose behalf we are routing the request.	 * @since  12.2	 */	protected $app;	/**	 * @var    string  The default page controller name for an empty route.	 * @since  12.2	 */	protected $default;	/**	 * @var    string  Controller class name prefix for creating controller objects by name.	 * @since  12.2	 */	protected $controllerPrefix;	/**	 * @var    JInput  An input object from which to derive the route.	 * @since  12.2	 */	protected $input;	/**	 * Constructor.	 *	 * @param   JApplicationWeb  $app    The web application on whose behalf we are routing the request.	 * @param   JInput           $input  An optional input object from which to derive the route.  If none	 *                                   is given than the input from the application object will be used.	 *	 * @since   12.2	 */	public function __construct(JApplicationWeb $app, JInput $input = null)	{		$this->app   = $app;		$this->input = ($input === null) ? $this->app->input : $input;	}	/**	 * Find and execute the appropriate controller based on a given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  void	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute($route)	{		// Get the controller name based on the route patterns and requested route.		$name = $this->parseRoute($route);		// Get the controller object by name.		$controller = $this->fetchController($name);		// Execute the controller.		$controller->execute();	}	/**	 * Set the controller name prefix.	 *	 * @param   string  $prefix  Controller class name prefix for creating controller objects by name.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setControllerPrefix($prefix)	{		$this->controllerPrefix	= (string) $prefix;		return $this;	}	/**	 * Set the default controller name.	 *	 * @param   string  $name  The default page controller name for an empty route.	 *	 * @return  JApplicationWebRouter  This object for method chaining.	 *	 * @since   12.2	 */	public function setDefaultController($name)	{		$this->default = (string) $name;		return $this;	}	/**	 * Parse the given route and return the name of a controller mapped to the given route.	 *	 * @param   string  $route  The route string for which to find and execute a controller.	 *	 * @return  string  The controller name for the given route excluding prefix.	 *	 * @since   12.2	 * @throws  InvalidArgumentException	 */	abstract protected function parseRoute($route);	/**	 * Get a JController object for a given name.	 *	 * @param   string  $name  The controller name (excluding prefix) for which to fetch and instance.	 *	 * @return  JController	 *	 * @since   12.2	 * @throws  RuntimeException	 */	protected function fetchController($name)	{		// Derive the controller class name.		$class = $this->controllerPrefix . ucfirst($name);		// If the controller class does not exist panic.		if (!class_exists($class) || !is_subclass_of($class, 'JController'))		{			throw new RuntimeException(sprintf('Unable to locate controller `%s`.', $class), 404);		}		// Instantiate the controller.		$controller = new $class($this->input, $this->app);		return $controller;	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering manipulated strings. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlString{	/**	 * Truncates text blocks over the specified character limit and closes	 * all open HTML tags. The method will optionally not truncate an individual	 * word, it will find the first space that is within the limit and	 * truncate at that point. This method is UTF-8 safe.	 *	 * @param   string   $text       The text to truncate.	 * @param   integer  $length     The maximum length of the text.	 * @param   boolean  $noSplit    Don't split a word if that is where the cutoff occurs (default: true).	 * @param   boolean  $allowHtml  Allow HTML tags in the output, and close any open tags (default: true).	 *	 * @return  string   The truncated text.	 *	 * @since   11.1	 */	public static function truncate($text, $length = 0, $noSplit = true, $allowHtml = true)	{		// Assume a lone open tag is invalid HTML.		if ($length == 1 && substr($text, 0, 1) == '<')		{			return '...';		}		// Check if HTML tags are allowed.		if (!$allowHtml)		{			// Deal with spacing issues in the input.			$text = str_replace('>', '> ', $text);			$text = str_replace(array('&nbsp;', '&#160;'), ' ', $text);			$text = JString::trim(preg_replace('#\s+#mui', ' ', $text));			// Strip the tags from the input and decode entities.			$text = strip_tags($text);			$text = html_entity_decode($text, ENT_QUOTES, 'UTF-8');			// Remove remaining extra spaces.			$text = str_replace('&nbsp;', ' ', $text);			$text = JString::trim(preg_replace('#\s+#mui', ' ', $text));		}		// Whether or not allowing HTML, truncate the item text if it is too long.		if ($length > 0 && JString::strlen($text) > $length)		{			$tmp = trim(JString::substr($text, 0, $length));			if (substr($tmp, 0, 1) == '<' && strpos($tmp, '>') === false)			{					return '...';			}			// $noSplit true means that we do not allow splitting of words.			if ($noSplit)			{				// Find the position of the last space within the allowed length.				$offset = JString::strrpos($tmp, ' ');				$tmp = JString::substr($tmp, 0, $offset + 1);				// If there are no spaces and the string is longer than the maximum				// we need to just use the ellipsis. In that case we are done.				if ($offset === false && strlen($text) > $length)				{					return '...';				}				if (JString::strlen($tmp) > $length - 3)				{					$tmp = trim(JString::substr($tmp, 0, JString::strrpos($tmp, ' ')));				}			}			if ($allowHtml)			{				// Put all opened tags into an array				preg_match_all("#<([a-z][a-z0-9]*)\b.*?(?!/)>#i", $tmp, $result);				$openedTags = $result[1];				// Some tags self close so they do not need a separate close tag.				$openedTags = array_diff($openedTags, array("img", "hr", "br"));				$openedTags = array_values($openedTags);				// Put all closed tags into an array				preg_match_all("#</([a-z]+)>#iU", $tmp, $result);				$closedTags = $result[1];				$numOpened = count($openedTags);				// All tags are closed so trim the text and finish.				if (count($closedTags) == $numOpened)				{					return trim($tmp) . '...';				}				// Closing tags need to be in the reverse order of opening tags.				$openedTags = array_reverse($openedTags);				// Close tags				for ($i = 0; $i < $numOpened; $i++)				{					if (!in_array($openedTags[$i], $closedTags))					{						$tmp .= "</" . $openedTags[$i] . ">";					}					else					{						unset($closedTags[array_search($openedTags[$i], $closedTags)]);					}				}			}			if ( $tmp === false || strlen($text) > strlen($tmp))			{				$text = trim($tmp) . '...';			}		}		// Clean up any internal spaces created by the processing.		$text = str_replace(' </', '</', $text);		$text = str_replace(' ...', '...', $text);		return $text;	}	/**	* Method to extend the truncate method to more complex situations	*	* The goal is to get the proper length plain text string with as much of	* the html intact as possible with all tags properly closed.	*	* @param   string   $html       The content of the introtext to be truncated	* @param   integer  $maxLength  The maximum number of characters to render	* @param   boolean  $noSplit    Don't split a word if that is where the cutoff occurs (default: true).	*	* @return  string  The truncated string. If the string is truncated an ellipsis	*                  (...) will be appended.	*	* @note: If a maximum length of 3 or less is selected and the text has more than	*        that number of characters an ellipsis will be displayed.	*        This method will not create valid HTML from malformed HTML.	*	* @since   12.2	*/	public static function truncateComplex($html, $maxLength = 0, $noSplit = true)	{		// Start with some basic rules.		$baseLength = strlen($html);		// If the original HTML string is shorter than the $maxLength do nothing and return that.		if ($baseLength <= $maxLength || $maxLength == 0)		{			return $html;		}		// Take care of short simple cases.		if ($maxLength <= 3 && substr($html, 0, 1) != '<' && strpos(substr($html, 0, $maxLength - 1), '<') === false && $baseLength > $maxLength)		{			return '...';		}		// Deal with maximum length of 1 where the string starts with a tag.		if ($maxLength == 1 && substr($html, 0, 1) == '<')		{			$endTagPos = strlen(strstr($html, '>', true));			$tag = substr($html, 1, $endTagPos);			$l = $endTagPos + 1;			if ($noSplit)			{				return substr($html, 0, $l) . '</' . $tag . '...';			}			$character = substr(strip_tags($html), 0, 1);			return substr($html, 0, $l) . '</' . $tag . '...';		}		// First get the truncated plain text string. This is the rendered text we want to end up with.		$ptString = JHtml::_('string.truncate', $html, $maxLength, $noSplit, $allowHtml = false);		// It's all HTML, just return it.		if (strlen($ptString) == 0)		{				return $html;		}		// If the plain text is shorter than the max length the variable will not end in ...		// In that case we use the whole string.		if (substr($ptString, -3) != '...')		{				return $html;		}		// Regular truncate gives us the ellipsis but we want to go back for text and tags.		if ($ptString == '...')		{			$stripped = substr(strip_tags($html), 0, $maxLength);			$ptString = JHtml::_('string.truncate', $stripped, $maxLength, $noSplit, $allowHtml = false);		}		// We need to trim the ellipsis that truncate adds.		$ptString = rtrim($ptString, '.');		// Now deal with more complex truncation.		$diffLength = 0;		while ($maxLength <= $baseLength)		{			// Get the truncated string assuming HTML is allowed.			$htmlString = JHtml::_('string.truncate', $html, $maxLength, $noSplit, $allowHtml = true);			if ($htmlString == '...' && strlen($ptString) + 3 > $maxLength)			{				return $htmlString;			}			$htmlString = rtrim($htmlString, '.');			// Now get the plain text from the HTML string and trim it.			$htmlStringToPtString = JHtml::_('string.truncate', $htmlString, $maxLength, $noSplit, $allowHtml = false);			$htmlStringToPtString = rtrim($htmlStringToPtString, '.');			// If the new plain text string matches the original plain text string we are done.			if ($ptString == $htmlStringToPtString)			{				return $htmlString . '...';			}			// Get the number of HTML tag characters in the first $maxLength characters			$diffLength = strlen($ptString) - strlen($htmlStringToPtString);			if ($diffLength <= 0)			{				return $htmlString . '...';			}			// Set new $maxlength that adjusts for the HTML tags			$maxLength += $diffLength;		}	}	/**	 * Abridges text strings over the specified character limit. The	 * behavior will insert an ellipsis into the text replacing a section	 * of variable size to ensure the string does not exceed the defined	 * maximum length. This method is UTF-8 safe.	 *	 * For example, it transforms "Really long title" to "Really...title".	 *	 * Note that this method does not scan for HTML tags so will potentially break them.	 *	 * @param   string   $text    The text to abridge.	 * @param   integer  $length  The maximum length of the text (default is 50).	 * @param   integer  $intro   The maximum length of the intro text (default is 30).	 *	 * @return  string   The abridged text.	 *	 * @since   11.1	 */	public static function abridge($text, $length = 50, $intro = 30)	{		// Abridge the item text if it is too long.		if (JString::strlen($text) > $length)		{			// Determine the remaining text length.			$remainder = $length - ($intro + 3);			// Extract the beginning and ending text sections.			$beg = JString::substr($text, 0, $intro);			$end = JString::substr($text, JString::strlen($text) - $remainder);			// Build the resulting string.			$text = $beg . '...' . $end;		}		return $text;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Clients list controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerClients extends JControllerAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_CLIENTS';	/**	 * Method to get a model object, loading it if required.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'Client', $prefix = 'BannersModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Less * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;require_once __DIR__ . '/lessc.php';/** * Help system class * * @package     Joomla.Libraries * @subpackage  Less * @since       3.0 */class JLess extends lessc{	public function __construct($fname = null, $formatter = null)	{		parent::__construct($fname);		if ($formatter === null)		{			$formatter = new JLessFormatterJoomla;		}		$this->setFormatter($formatter);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Plugin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JPlugin Class * * @package     Joomla.Platform * @subpackage  Plugin * @since       11.1 */abstract class JPlugin extends JEvent{	/**	 * A JRegistry object holding the parameters for the plugin	 *	 * @var    JRegistry	 * @since  11.1	 */	public $params = null;	/**	 * The name of the plugin	 *	 * @var    string	 * @since  11.1	 */	protected $_name = null;	/**	 * The plugin type	 *	 * @var    string	 * @since  11.1	 */	protected $_type = null;	/**	 * Affects constructor behavior. If true, language files will be loaded automatically.	 *	 * @var    boolean	 * @since  12.3	 */	protected $autoloadLanguage = false;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe	 * @param   array   $config    An optional associative array of configuration settings.	 *                             Recognized key values include 'name', 'group', 'params', 'language'	 *                             (this list is not meant to be comprehensive).	 *	 * @since   11.1	 */	public function __construct(&$subject, $config = array())	{		// Get the parameters.		if (isset($config['params']))		{			if ($config['params'] instanceof JRegistry)			{				$this->params = $config['params'];			}			else			{				$this->params = new JRegistry;				$this->params->loadString($config['params']);			}		}		// Get the plugin name.		if (isset($config['name']))		{			$this->_name = $config['name'];		}		// Get the plugin type.		if (isset($config['type']))		{			$this->_type = $config['type'];		}		// Load the language files if needed.		if ($this->autoloadLanguage)		{			$this->loadLanguage();		}		parent::__construct($subject);	}	/**	 * Loads the plugin language file	 *	 * @param   string  $extension  The extension for which a language file should be loaded	 * @param   string  $basePath   The basepath to use	 *	 * @return  boolean  True, if the file has successfully loaded.	 *	 * @since   11.1	 */	public function loadLanguage($extension = '', $basePath = JPATH_ADMINISTRATOR)	{		if (empty($extension))		{			$extension = 'plg_' . $this->_type . '_' . $this->_name;		}		$lang = JFactory::getLanguage();		return $lang->load(strtolower($extension), $basePath, null, false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, null, false, false)			|| $lang->load(strtolower($extension), $basePath, $lang->getDefault(), false, false)			|| $lang->load(strtolower($extension), JPATH_PLUGINS . '/' . $this->_type . '/' . $this->_name, $lang->getDefault(), false, false);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Calendar data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataCalendar extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/calendar');		}	}	/**	 * Method to remove a calendar from a user's calendar list	 *	 * @param   string  $calendarID  ID of calendar to delete	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function removeCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID), null, null, 'delete');			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get a calendar's settings from Google	 *	 * @param   string  $calendarID  ID of calendar to get.	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$jdata = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID));			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to add a calendar to a user's Google Calendar list	 *	 * @param   string  $calendarID  New calendar ID	 * @param   array   $options     New calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function addCalendar($calendarID, $options = array())	{		if ($this->isAuthenticated())		{			$options['id'] = $calendarID;			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve calendar list from Google	 *	 * @param   array  $options   Search settings	 * @param   int    $maxpages  Maximum number of pages of calendars to return	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listCalendars($options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar's settings	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendarSettings($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to clear a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to clear	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function clearCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/clear', null, null, 'post');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to delete a calendar from Google	 *	 * @param   string  $calendarID  ID of calendar to delete.	 *	 * @return  boolean  Success or failure	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteCalendar($calendarID)	{		if ($this->isAuthenticated())		{			$data = $this->query('https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID), null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar	 *	 * @param   string  $title    New calendar title	 * @param   array   $options  New calendar settings	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function createCalendar($title, $options = array())	{		if ($this->isAuthenticated())		{			$options['summary'] = $title;			$url = 'https://www.googleapis.com/calendar/v3/calendars';			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar	 *	 * @param   string  $calendarID  Calendar ID.	 * @param   array   $options     Calendar settings.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editCalendar($calendarID, $options)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID);			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			$data = json_decode($jdata->body, true);			if ($data && array_key_exists('items', $data))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to delete an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar to delete from	 * @param   string  $eventID     ID of event to delete.	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function deleteEvent($calendarID, $eventID)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID);			$data = $this->query($url, null, null, 'delete');			if ($data->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$data->body}`.");			}			return true;		}		else		{			return false;		}	}	/**	 * Method to get an event from a Google Calendar	 *	 * @param   string  $calendarID  ID of calendar	 * @param   string  $eventID     ID of event to get	 * @param   array   $options     Options to send to Google	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function getEvent($calendarID, $eventID, $options = array())	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendarList/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . '?' . http_build_query($options);			$jdata = $this->query($url);			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to create a Google Calendar event	 *	 * @param   string   $calendarID  ID of calendar	 * @param   mixed    $start       Event start time	 * @param   mixed    $end         Event end time	 * @param   array    $options     New event settings	 * @param   mixed    $timezone    Timezone for event	 * @param   boolean  $allday      Treat event as an all-day event	 * @param   boolean  $notify      Notify participants	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws InvalidArgumentException	 * @throws UnexpectedValueException	 */	public function createEvent($calendarID, $start, $end = false, $options = array(), $timezone = false, $allday = false, $notify = false)	{		if ($this->isAuthenticated())		{			if (!$start)			{				$startobj = new DateTime;			}			elseif (is_int($start))			{				$startobj = new DateTime;				$startobj->setTimestamp($start);			}			elseif (is_string($start))			{				$startobj = new DateTime($start);			}			elseif (is_a($start, 'DateTime'))			{				$startobj = $start;			}			else			{				throw new InvalidArgumentException('Invalid event start time.');			}			if (!$end)			{				$endobj = $startobj;			}			elseif (is_int($end))			{				$endobj = new DateTime;				$endobj->setTimestamp($end);			}			elseif (is_string($end))			{				$endobj = new DateTime($end);			}			elseif (is_a($end, 'DateTime'))			{				$endobj = $end;			}			else			{				throw new InvalidArgumentException('Invalid event end time.');			}			if ($allday)			{				$options['start'] = array('date' => $startobj->format('Y-m-d'));				$options['end'] = array('date' => $endobj->format('Y-m-d'));			}			else			{				$options['start'] = array('dateTime' => $startobj->format(DateTime::RFC3339));				$options['end'] = array('dateTime' => $endobj->format(DateTime::RFC3339));			}			if ($timezone === true)			{				$options['start']['timeZone'] = $startobj->getTimezone()->getName();				$options['end']['timeZone'] = $endobj->getTimezone()->getName();			}			elseif (is_a($timezone, 'DateTimeZone'))			{				$options['start']['timeZone'] = $timezone->getName();				$options['end']['timeZone'] = $timezone->getName();			}			elseif (is_string($timezone))			{				$options['start']['timeZone'] = $timezone;				$options['end']['timeZone'] = $timezone;			}			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events' . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   string  $eventID     ID of the event to change	 * @param   array   $options     Search settings	 * @param   int     $maxpages    Minimum number of events to retrieve (more may be retrieved depending on page size)	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listRecurrences($calendarID, $eventID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/users/me/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/instances';			$url .= '?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of events on a Google calendar	 *	 * @param   string  $calendarID  Calendar ID	 * @param   array   $options     Calendar settings	 * @param   int     $maxpages    Cycle through pages of data to generate a complete list	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listEvents($calendarID, $options = array(), $maxpages = 1)	{		if ($this->isAuthenticated())		{			$next = array_key_exists('nextPageToken', $options) ? $options['nextPage'] : null;			unset($options['nextPageToken']);			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events?' . http_build_query($options);			return $this->listGetData($url, $maxpages, $next);		}		else		{			return false;		}	}	/**	 * Method to move an event from one calendar to another	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   string   $destID      Calendar ID	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function moveEvent($calendarID, $eventID, $destID, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/' . urlencode($calendarID) . '/events/' . urlencode($eventID) . '/move';			$url .= '?destination=' . $destID . ($notify ? '&sendNotifications=true' : '');			$jdata = $this->query($url, null, null, 'post');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Method to edit a Google Calendar event	 *	 * @param   string   $calendarID  Calendar ID	 * @param   string   $eventID     ID of the event to change	 * @param   array    $options     Event settings	 * @param   boolean  $notify      Notify participants of changes	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function editEvent($calendarID, $eventID, $options, $notify = false)	{		if ($this->isAuthenticated())		{			$url = 'https://www.googleapis.com/calendar/v3/calendars/';			$url .= urlencode($calendarID) . '/events/' . urlencode($eventID) . ($notify ? '?sendNotifications=true' : '');			$jdata = $this->query($url, json_encode($options), array('Content-type' => 'application/json'), 'put');			if ($data = json_decode($jdata->body, true))			{				return $data;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Stemmer base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerStemmer{	/**	 * An internal cache of stemmed tokens.	 *	 * @var    array	 * @since  2.5	 */	public $cache = array();	/**	 * Method to get a stemmer, creating it if necessary.	 *	 * @param   string  $adapter  The type of stemmer to load.	 *	 * @return  FinderIndexerStemmer  A FinderIndexerStemmer instance.	 *	 * @since   2.5	 * @throws  Exception on invalid stemmer.	 */	public static function getInstance($adapter)	{		static $instances;		// Only create one stemmer for each adapter.		if (isset($instances[$adapter]))		{			return $instances[$adapter];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the stemmer.		$adapter = JFilterInput::getInstance()->clean($adapter, 'cmd');		$path = __DIR__ . '/stemmer/' . $adapter . '.php';		$class = 'FinderIndexerStemmer' . ucfirst($adapter);		// Check if a stemmer exists for the adapter.		if (file_exists($path))		{			// Instantiate the stemmer.			include_once $path;			$instances[$adapter] = new $class;		}		else		{			// Throw invalid adapter exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_STEMMER', $adapter));		}		return $instances[$adapter];	}	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	abstract public function stem($token, $lang);}
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><a href="<?php echo $link ?>" class="syndicate-module<?php echo $moduleclass_sfx ?>">	<?php echo JHtml::_('image', 'system/livemarks.png', 'feed-image', null, true); ?>	<?php if ($params->get('display_text', 1)) : ?>		<span>		<?php if (str_replace(' ', '', $text) != '') : ?>			<?php echo $text; ?>		<?php else : ?>			<?php echo JText::_('MOD_SYNDICATE_DEFAULT_FEED_ENTRIES'); ?>		<?php endif; ?>		</span>	<?php endif; ?></a>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Create a shortcut for params.$params = &$this->item->params;$images = json_decode($this->item->images);$canEdit = $this->item->params->get('access-edit');$info    = $this->item->params->get('info_block_position', 0);?><?php if ($this->item->state == 0) : ?>	<div class="system-unpublished"><?php endif; ?><?php if ($params->get('show_title')) : ?>	<h2 class="item-title">	<?php if ($params->get('link_titles') && $params->get('access-view')) : ?>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid)); ?>"> <?php echo $this->escape($this->item->title); ?></a>	<?php else : ?>		<?php echo $this->escape($this->item->title); ?>	<?php endif; ?>	</h2><?php endif; ?><?php if ($this->item->state == 0) : ?>	<span class="label label-warning"><?php echo JText::_('JUNPUBLISHED'); ?></span><?php endif; ?><?php if ($params->get('show_print_icon') || $params->get('show_email_icon') || $canEdit) : ?>	<div class="btn-group pull-right"> <a class="btn dropdown-toggle" data-toggle="dropdown" href="#" role="button"> <span class="icon-cog"></span> <span class="caret"></span> </a>		<ul class="dropdown-menu">		<?php if ($params->get('show_print_icon')) : ?>			<li class="print-icon"> <?php echo JHtml::_('icon.print_popup', $this->item, $params); ?> </li>		<?php endif; ?>		<?php if ($params->get('show_email_icon')) : ?>			<li class="email-icon"> <?php echo JHtml::_('icon.email', $this->item, $params); ?> </li>		<?php endif; ?>		<?php if ($canEdit) : ?>			<li class="edit-icon"> <?php echo JHtml::_('icon.edit', $this->item, $params); ?> </li>		<?php endif; ?>		</ul>	</div><?php endif; ?><?php // Todo Not that elegant would be nice to group the params ?><?php $useDefList = ($params->get('show_modify_date') || $params->get('show_publish_date') || $params->get('show_create_date')	|| $params->get('show_hits') || $params->get('show_category') || $params->get('show_parent_category') || $params->get('show_author') ); ?><?php if ($useDefList && ($info == 0 ||  $info == 2)) : ?>	<dl class="article-info  muted">		<dt class="article-info-term">		<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>		</dt>		<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>			<dd class="createdby">				<?php $author = $this->item->author; ?>				<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author); ?>				<?php if (!empty($this->item->contactid ) && $params->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$this->item->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>			<dd class="parent-category-name">				<?php $title = $this->escape($this->item->parent_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>				<?php if ($params->get('link_parent_category') && !empty($this->item->parent_slug)) : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_category')) : ?>			<dd class="category-name">				<?php $title = $this->escape($this->item->category_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>				<?php if ($params->get('link_category') && $this->item->catslug) : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>				<?php endif; ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_publish_date')) : ?>			<dd class="published">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($info == 0) : ?>			<?php if ($params->get('show_modify_date')) : ?>				<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_create_date')) : ?>				<dd class="create">					<span class="icon-calendar"></span>					<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->created, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_hits')) : ?>				<dd class="hits">					<span class="icon-eye-open"></span>					<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>				</dd>			<?php endif; ?>		<?php endif; ?>	</dl><?php endif; ?><?php if (isset($images->image_intro) && !empty($images->image_intro)) : ?>	<?php $imgfloat = (empty($images->float_intro)) ? $params->get('float_intro') : $images->float_intro; ?>	<div class="pull-<?php echo htmlspecialchars($imgfloat); ?> item-image"> <img	<?php if ($images->image_intro_caption):		echo 'class="caption"'.' title="' .htmlspecialchars($images->image_intro_caption) .'"';	endif; ?>	src="<?php echo htmlspecialchars($images->image_intro); ?>" alt="<?php echo htmlspecialchars($images->image_intro_alt); ?>"/> </div><?php endif; ?><?php if (!$params->get('show_intro')) : ?>	<?php echo $this->item->event->afterDisplayTitle; ?><?php endif; ?><?php echo $this->item->event->beforeDisplayContent; ?><?php if ($params->get('show_intro')) : ?><?php echo $this->item->introtext; ?><?php endif; ?><?php if ($useDefList && ($info == 1 ||  $info == 2)) : ?>	<dl class="article-info muted">		<dt class="article-info-term">			<?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?>		</dt>		<?php if ($info == 1) : ?>			<?php if ($params->get('show_author') && !empty($this->item->author )) : ?>				<dd class="createdby">					<?php $author = $this->item->author; ?>					<?php $author = ($this->item->created_by_alias ? $this->item->created_by_alias : $author); ?>					<?php if (!empty($this->item->contactid ) && $params->get('link_author') == true) : ?>						<?php						echo JText::sprintf('COM_CONTENT_WRITTEN_BY',							JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$this->item->contactid), $author)						); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_parent_category') && !empty($this->item->parent_slug)) : ?>				<dd class="parent-category-name">					<?php	$title = $this->escape($this->item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->parent_slug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_parent_category') && $this->item->parent_slug) : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_category')) : ?>				<dd class="category-name">					<?php $title = $this->escape($this->item->category_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($this->item->catslug)).'">'.$title.'</a>';?>					<?php if ($params->get('link_category') && $this->item->catslug) : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>					<?php else : ?>						<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>					<?php endif; ?>				</dd>			<?php endif; ?>			<?php if ($params->get('show_publish_date')) : ?>				<dd class="published">					<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $this->item->publish_up, JText::_('DATE_FORMAT_LC3'))); ?>				</dd>			<?php endif; ?>		<?php endif; ?>		<?php if ($params->get('show_create_date')) : ?>			<dd class="create">				<span class="icon-calendar"></span> <?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_modify_date')) : ?>			<dd class="modified">				<span class="icon-calendar"></span>				<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $this->item->modified, JText::_('DATE_FORMAT_LC3'))); ?>			</dd>		<?php endif; ?>		<?php if ($params->get('show_hits')) : ?>			<dd class="hits">				<span class="icon-eye-open"></span> <?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $this->item->hits); ?>			</dd>		<?php endif; ?>	</dl>	<?php if ($this->params->get('show_tags', 1)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?><?php endif; ?><?php if ($params->get('show_readmore') && $this->item->readmore) :	if ($params->get('access-view')) :		$link = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));	else :		$menu = JFactory::getApplication()->getMenu();		$active = $menu->getActive();		$itemId = $active->id;		$link1 = JRoute::_('index.php?option=com_users&view=login&Itemid=' . $itemId);		$returnURL = JRoute::_(ContentHelperRoute::getArticleRoute($this->item->slug, $this->item->catid));		$link = new JURI($link1);		$link->setVar('return', base64_encode($returnURL));	endif; ?>	<p class="readmore"><a class="btn" href="<?php echo $link; ?>"> <span class="icon-chevron-right"></span>	<?php if (!$params->get('access-view')) :		echo JText::_('COM_CONTENT_REGISTER_TO_READ_MORE');	elseif ($readmore = $this->item->alternative_readmore) :		echo $readmore;		if ($params->get('show_readmore_title', 0) != 0) :		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));		endif;	elseif ($params->get('show_readmore_title', 0) == 0) :		echo JText::sprintf('COM_CONTENT_READ_MORE_TITLE');	else :		echo JText::_('COM_CONTENT_READ_MORE');		echo JHtml::_('string.truncate', ($this->item->title), $params->get('readmore_limit'));	endif; ?>	</a></p><?php endif; ?><?php if ($this->item->state == 0) : ?></div><?php endif; ?><?php echo $this->item->event->afterDisplayContent; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Base controller class for Menu Manager. * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/menus.php';		$view   = $this->input->get('view', 'menus');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'menu' && $layout == 'edit' && !$this->checkEditId('com_menus.edit.menu', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));			return false;		}		elseif ($view == 'item' && $layout == 'edit' && !$this->checkEditId('com_menus.edit.item', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to negate the colors of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterNegate extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the negative filter.		imagefilter($this->handle, IMG_FILTER_NEGATE);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_SERVER_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('server') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JGrid class to dynamically generate HTML tables * * @package     Joomla.Platform * @subpackage  Grid * @since       11.3 */class JGrid{	/**	 * Array of columns	 * @var array	 * @since 11.3	 */	protected $columns = array();	/**	 * Current active row	 * @var int	 * @since 11.3	 */	protected $activeRow = 0;	/**	 * Rows of the table (including header and footer rows)	 * @var array	 * @since 11.3	 */	protected $rows = array();	/**	 * Header and Footer row-IDs	 * @var array	 * @since 11.3	 */	protected $specialRows = array('header' => array(), 'footer' => array());	/**	 * Associative array of attributes for the table-tag	 * @var array	 * @since 11.3	 */	protected $options;	/**	 * Constructor for a JGrid object	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 *	 * @since 11.3	 */	public function __construct($options = array())	{		$this->setTableOptions($options, true);	}	/**	 * Magic function to render this object as a table.	 *	 * @return  string	 *	 * @since 11.3	 */	public function __toString()	{		return $this->toString();	}	/**	 * Method to set the attributes for a table-tag	 *	 * @param   array  $options  Associative array of attributes for the table-tag	 * @param   bool   $replace  Replace possibly existing attributes	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setTableOptions($options = array(), $replace = false)	{		if ($replace)		{			$this->options = $options;		}		else		{			$this->options = array_merge($this->options, $options);		}		return $this;	}	/**	 * Get the Attributes of the current table	 *	 * @return  array Associative array of attributes	 *	 * @since 11.3	 */	public function getTableOptions()	{		return $this->options;	}	/**	 * Add new column name to process	 *	 * @param   string  $name  Internal column name	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addColumn($name)	{		$this->columns[] = $name;		return $this;	}	/**	 * Returns the list of internal columns	 *	 * @return  array List of internal columns	 *	 * @since 11.3	 */	public function getColumns()	{		return $this->columns;	}	/**	 * Delete column by name	 *	 * @param   string  $name  Name of the column to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteColumn($name)	{		$index = array_search($name, $this->columns);		if ($index !== false)		{			unset($this->columns[$index]);			$this->columns = array_values($this->columns);		}		return $this;	}	/**	 * Method to set a whole range of columns at once	 * This can be used to re-order the columns, too	 *	 * @param   array  $columns  List of internal column names	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setColumns($columns)	{		$this->columns = array_values($columns);		return $this;	}	/**	 * Adds a row to the table and sets the currently	 * active row to the new row	 *	 * @param   array  $options  Associative array of attributes for the row	 * @param   int    $special  1 for a new row in the header, 2 for a new row in the footer	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function addRow($options = array(), $special = false)	{		$this->rows[]['_row'] = $options;		$this->activeRow = count($this->rows) - 1;		if ($special)		{			if ($special === 1)			{				$this->specialRows['header'][] = $this->activeRow;			}			else			{				$this->specialRows['footer'][] = $this->activeRow;			}		}		return $this;	}	/**	 * Method to get the attributes of the currently active row	 *	 * @return array Associative array of attributes	 *	 * @since 11.3	 */	public function getRowOptions()	{		return $this->rows[$this->activeRow]['_row'];	}	/**	 * Method to set the attributes of the currently active row	 *	 * @param   array  $options  Associative array of attributes	 *	 * @return JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowOptions($options)	{		$this->rows[$this->activeRow]['_row'] = $options;		return $this;	}	/**	 * Get the currently active row ID	 *	 * @return  int ID of the currently active row	 *	 * @since 11.3	 */	public function getActiveRow()	{		return $this->activeRow;	}	/**	 * Set the currently active row	 *	 * @param   int  $id  ID of the row to be set to current	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setActiveRow($id)	{		$this->activeRow = (int) $id;		return $this;	}	/**	 * Set cell content for a specific column for the	 * currently active row	 *	 * @param   string  $name     Name of the column	 * @param   string  $content  Content for the cell	 * @param   array   $option   Associative array of attributes for the td-element	 * @param   bool    $replace  If false, the content is appended to the current content of the cell	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function setRowCell($name, $content, $option = array(), $replace = true)	{		if ($replace || !isset($this->rows[$this->activeRow][$name]))		{			$cell = new stdClass;			$cell->options = $option;			$cell->content = $content;			$this->rows[$this->activeRow][$name] = $cell;		}		else		{			$this->rows[$this->activeRow][$name]->content .= $content;			$this->rows[$this->activeRow][$name]->options = $option;		}		return $this;	}	/**	 * Get all data for a row	 *	 * @param   int  $id  ID of the row to return	 *	 * @return  array Array of columns of a table row	 *	 * @since 11.3	 */	public function getRow($id = false)	{		if ($id === false)		{			$id = $this->activeRow;		}		if (isset($this->rows[(int) $id]))		{			return $this->rows[(int) $id];		}		else		{			return false;		}	}	/**	 * Get the IDs of all rows in the table	 *	 * @param   int  $special  false for the standard rows, 1 for the header rows, 2 for the footer rows	 *	 * @return  array Array of IDs	 *	 * @since 11.3	 */	public function getRows($special = false)	{		if ($special)		{			if ($special === 1)			{				return $this->specialRows['header'];			}			else			{				return $this->specialRows['footer'];			}		}		return array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));	}	/**	 * Delete a row from the object	 *	 * @param   int  $id  ID of the row to be deleted	 *	 * @return  JGrid This object for chaining	 *	 * @since 11.3	 */	public function deleteRow($id)	{		unset($this->rows[$id]);		if (in_array($id, $this->specialRows['header']))		{			unset($this->specialRows['header'][array_search($id, $this->specialRows['header'])]);		}		if (in_array($id, $this->specialRows['footer']))		{			unset($this->specialRows['footer'][array_search($id, $this->specialRows['footer'])]);		}		if ($this->activeRow == $id)		{			end($this->rows);			$this->activeRow = key($this->rows);		}		return $this;	}	/**	 * Render the HTML table	 *	 * @return  string The rendered HTML table	 *	 * @since 11.3	 */	public function toString()	{		$output = array();		$output[] = '<table' . $this->renderAttributes($this->getTableOptions()) . '>';		if (count($this->specialRows['header']))		{			$output[] = $this->renderArea($this->specialRows['header'], 'thead', 'th');		}		if (count($this->specialRows['footer']))		{			$output[] = $this->renderArea($this->specialRows['footer'], 'tfoot');		}		$ids = array_diff(array_keys($this->rows), array_merge($this->specialRows['header'], $this->specialRows['footer']));		if (count($ids))		{			$output[] = $this->renderArea($ids);		}		$output[] = '</table>';		return implode('', $output);	}	/**	 * Render an area of the table	 *	 * @param   array   $ids   IDs of the rows to render	 * @param   string  $area  Name of the area to render. Valid: tbody, tfoot, thead	 * @param   string  $cell  Name of the cell to render. Valid: td, th	 *	 * @return string The rendered table area	 *	 * @since 11.3	 */	protected function renderArea($ids, $area = 'tbody', $cell = 'td')	{		$output = array();		$output[] = '<' . $area . ">\n";		foreach ($ids as $id)		{			$output[] = "\t<tr" . $this->renderAttributes($this->rows[$id]['_row']) . ">\n";			foreach ($this->getColumns() as $name)			{				if (isset($this->rows[$id][$name]))				{					$column = $this->rows[$id][$name];					$output[] = "\t\t<" . $cell . $this->renderAttributes($column->options) . '>' . $column->content . '</' . $cell . ">\n";				}			}			$output[] = "\t</tr>\n";		}		$output[] = '</' . $area . '>';		return implode('', $output);	}	/**	 * Renders an HTML attribute from an associative array	 *	 * @param   array  $attributes  Associative array of attributes	 *	 * @return  string The HTML attribute string	 *	 * @since 11.3	 */	protected function renderAttributes($attributes)	{		if (count((array) $attributes) == 0)		{			return '';		}		$return = array();		foreach ($attributes as $key => $option)		{			$return[] = $key . '="' . $option . '"';		}		return ' ' . implode(' ', $return);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  System.Highlight * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die;/** * System plugin to highlight terms. * * @package     Joomla.Plugin * @subpackage  System.Highlight * @since       2.5 */class PlgSystemHighlight extends JPlugin{	/**	 * Method to catch the onAfterDispatch event.	 *	 * This is where we setup the click-through content highlighting for.	 * The highlighting is done with JavaScript so we just	 * need to check a few parameters and the JHtml behavior will do the rest.	 *	 * @return  boolean  True on success	 *	 * @since   2.5	 */	public function onAfterDispatch()	{		// Check that we are in the site application.		if (JFactory::getApplication()->isAdmin())		{			return true;		}		// Set the variables		$input = JFactory::getApplication()->input;		$extension = $input->get('option', '', 'cmd');		// Check if the highlighter is enabled.		if (!JComponentHelper::getParams($extension)->get('highlight_terms', 1))		{			return true;		}		// Check if the highlighter should be activated in this environment.		if (JFactory::getDocument()->getType() !== 'html' || $input->get('tmpl', '', 'cmd') === 'component')		{			return true;		}		// Get the terms to highlight from the request.		$terms = $input->request->get('highlight', null, 'base64');		$terms = $terms ? json_decode(base64_decode($terms)) : null;		// Check the terms.		if (empty($terms))		{			return true;		}		// Clean the terms array		$filter = JFilterInput::getInstance();		$cleanTerms = array();		foreach ($terms as $term)		{			$cleanTerms[] = htmlspecialchars($filter->clean($term, 'string'));		}		// Activate the highlighter.		JHtml::_('behavior.highlighter', $cleanTerms);		// Adjust the component buffer.		$doc = JFactory::getDocument();		$buf = $doc->getBuffer('component');		$buf = '<br id="highlighter-start" />' . $buf . '<br id="highlighter-end" />';		$doc->setBuffer($buf, 'component');		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php	echo JHtml::_('bootstrap.startAccordion', 'categoryOptions', array('active' => 'collapse0'));	$fieldSets = $this->form->getFieldsets('params');	$i = 0;	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('bootstrap.addSlide', 'categoryOptions', JText::_($label), 'collapse' . $i++);			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>				<?php foreach ($this->form->getFieldset($name) as $field) : ?>					<div class="control-group">						<div class="control-label">							<?php echo $field->label; ?>						</div>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>				<?php if ($name == 'basic'):?>					<div class="control-group">						<div class="control-label">							<?php echo $this->form->getLabel('note'); ?>						</div>						<div class="controls">							<?php echo $this->form->getInput('note'); ?>						</div>					</div>				<?php endif;		echo JHtml::_('bootstrap.endSlide');	endforeach;echo JHtml::_('bootstrap.endAccordion');
<?php/** * Parses and verifies the doc comments for functions. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_FunctionCommentParser', true) === false) {    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_CommentParser_FunctionCommentParser not found');}/** * Parses and verifies the doc comments for functions. * * Verifies that : * <ul> *  <li>A comment exists</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>Parameter names represent those in the method.</li> *  <li>Parameter comments are in the correct order</li> *  <li>Parameter comments are complete</li> *  <li>A space is present before the first and after the last parameter</li> *  <li>A return type exists</li> *  <li>There must be one blank line between body and headline comments.</li> *  <li>Any throw tag must have an exception class.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_FunctionCommentSniff implements PHP_CodeSniffer_Sniff{    /**     * The name of the method that we are currently processing.     *     * @var string     */    private $_methodName = '';    /**     * The position in the stack where the fucntion token was found.     *     * @var int     */    private $_functionToken = null;    /**     * The position in the stack where the class token was found.     *     * @var int     */    private $_classToken = null;    /**     * The function comment parser for the current method.     *     * @var PHP_CodeSniffer_Comment_Parser_FunctionCommentParser     */    protected $commentParser = null;    /**     * The current PHP_CodeSniffer_File object we are processing.     *     * @var PHP_CodeSniffer_File     */    protected $currentFile = null;    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_FUNCTION);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $find = array(                 T_COMMENT,                 T_DOC_COMMENT,                 T_CLASS,                 T_FUNCTION,                 T_OPEN_TAG,                );        $commentEnd = $phpcsFile->findPrevious($find, ($stackPtr - 1));        if ($commentEnd === false) {            return;        }        $this->currentFile = $phpcsFile;        $tokens            = $phpcsFile->getTokens();        // If the token that we found was a class or a function, then this        // function has no doc comment.        $code = $tokens[$commentEnd]['code'];        if ($code === T_COMMENT) {            $error = 'You must use "/**" style comments for a function comment';            $phpcsFile->addError($error, $stackPtr, 'WrongStyle');            return;        } else if ($code !== T_DOC_COMMENT) {            $phpcsFile->addError('Missing function doc comment', $stackPtr, 'Missing');            return;        }        // If there is any code between the function keyword and the doc block        // then the doc block is not for us.        $ignore    = PHP_CodeSniffer_Tokens::$scopeModifiers;        $ignore[]  = T_STATIC;        $ignore[]  = T_WHITESPACE;        $ignore[]  = T_ABSTRACT;        $ignore[]  = T_FINAL;        $prevToken = $phpcsFile->findPrevious($ignore, ($stackPtr - 1), null, true);        if ($prevToken !== $commentEnd) {            $phpcsFile->addError('Missing function doc comment', $stackPtr, 'Missing');            return;        }        $this->_functionToken = $stackPtr;        $this->_classToken = null;        foreach ($tokens[$stackPtr]['conditions'] as $condPtr => $condition) {            if ($condition === T_CLASS || $condition === T_INTERFACE) {                $this->_classToken = $condPtr;                break;            }        }        // If the first T_OPEN_TAG is right before the comment, it is probably        // a file comment.        $commentStart = ($phpcsFile->findPrevious(T_DOC_COMMENT, ($commentEnd - 1), null, true) + 1);        $prevToken    = $phpcsFile->findPrevious(T_WHITESPACE, ($commentStart - 1), null, true);        if ($tokens[$prevToken]['code'] === T_OPEN_TAG) {            // Is this the first open tag?            if ($stackPtr === 0 || $phpcsFile->findPrevious(T_OPEN_TAG, ($prevToken - 1)) === false) {                $phpcsFile->addError('Missing function doc comment', $stackPtr, 'Missing');                return;            }        }        $comment           = $phpcsFile->getTokensAsString($commentStart, ($commentEnd - $commentStart + 1));        $this->_methodName = $phpcsFile->getDeclarationName($stackPtr);        try {            $this->commentParser = new PHP_CodeSniffer_CommentParser_FunctionCommentParser($comment, $phpcsFile);            $this->commentParser->parse();        } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {            $line = ($e->getLineWithinComment() + $commentStart);            $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');            return;        }        $comment = $this->commentParser->getComment();        if (is_null($comment) === true) {            $error = 'Function doc comment is empty';            $phpcsFile->addError($error, $commentStart, 'Empty');            return;        }        $this->processParams($commentStart);        $this->processReturn($commentStart, $commentEnd);        $this->processThrows($commentStart);        // No extra newline before short description.        $short        = $comment->getShortComment();        $newlineCount = 0;        $newlineSpan  = strspn($short, $phpcsFile->eolChar);        if ($short !== '' && $newlineSpan > 0) {            $error = 'Extra newline(s) found before function comment short description';            $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBeforeShort');        }        $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);        // Exactly one blank line between short and long description.        $long = $comment->getLongComment();        if (empty($long) === false) {            $between        = $comment->getWhiteSpaceBetween();            $newlineBetween = substr_count($between, $phpcsFile->eolChar);            if ($newlineBetween !== 2) {                $error = 'There must be exactly one blank line between descriptions in function comment';                $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'SpacingAfterShort');            }            $newlineCount += $newlineBetween;        }        // Exactly one blank line before tags.        $params = $this->commentParser->getTagOrders();        if (count($params) > 1) {            $newlineSpan = $comment->getNewlineAfter();            if ($newlineSpan !== 2) {                $error = 'There must be exactly one blank line before the tags in function comment';                if ($long !== '') {                    $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                }                $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags');                $short = rtrim($short, $phpcsFile->eolChar.' ');            }        }    }//end process()    /**     * Process any throw tags that this function comment has.     *     * @param int $commentStart The position in the stack where the     *                          comment started.     *     * @return void     */    protected function processThrows($commentStart)    {        if (count($this->commentParser->getThrows()) === 0) {            return;        }        foreach ($this->commentParser->getThrows() as $throw) {            $exception = $throw->getValue();            $errorPos  = ($commentStart + $throw->getLine());            if ($exception === '') {                $error = '@throws tag must contain the exception class name';                $this->currentFile->addError($error, $errorPos, 'EmptyThrows');            }        }    }//end processThrows()    /**     * Process the return comment of this function comment.     *     * @param int $commentStart The position in the stack where the comment started.     * @param int $commentEnd   The position in the stack where the comment ended.     *     * @return void     */    protected function processReturn($commentStart, $commentEnd)    {        // Skip constructor and destructor.        $className = '';        if ($this->_classToken !== null) {            $className = $this->currentFile->getDeclarationName($this->_classToken);            $className = strtolower(ltrim($className, '_'));        }        $methodName      = strtolower(ltrim($this->_methodName, '_'));        $isSpecialMethod = ($this->_methodName === '__construct' || $this->_methodName === '__destruct');        if ($isSpecialMethod === false && $methodName !== $className) {            // Report missing return tag.            if ($this->commentParser->getReturn() === null) {                $error = 'Missing @return tag in function comment';                $this->currentFile->addError($error, $commentEnd, 'MissingReturn');            } else if (trim($this->commentParser->getReturn()->getRawContent()) === '') {                $error    = '@return tag is empty in function comment';                $errorPos = ($commentStart + $this->commentParser->getReturn()->getLine());                $this->currentFile->addError($error, $errorPos, 'EmptyReturn');            } else {            	if (substr_count($this->commentParser->getReturn()->getWhitespaceAfter(), $this->currentFile->eolChar) !== 2) {	                $error    = 'Return comment requires a blank newline after it';	                $errorPos = ($this->commentParser->getReturn()->getLine() + $commentStart);	                $this->currentFile->addError($error, $errorPos, 'SpacingAfterReturn');            	}            }        }        else        {        	if ($this->commentParser->getReturn() != null)        	{        		$error    = 'Constructor and destructor comments must not have a @return tag';        		$errorPos = ($this->commentParser->getReturn()->getLine() + $commentStart);        		$this->currentFile->addError($error, $errorPos, 'UselessReturn');        	}        }    }//end processReturn()    /**     * Process the function parameter comments.     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processParams($commentStart)    {        $realParams = $this->currentFile->getMethodParameters($this->_functionToken);        $params      = $this->commentParser->getParams();        $foundParams = array();        if (empty($params) === false) {            $lastParm = (count($params) - 1);            if (substr_count($params[$lastParm]->getWhitespaceAfter(), $this->currentFile->eolChar) !== 2) {                $error    = 'Last parameter comment requires a blank newline after it';                $errorPos = ($params[$lastParm]->getLine() + $commentStart);                $this->currentFile->addError($error, $errorPos, 'SpacingAfterParams');            }            // Parameters must appear immediately after the comment.            if ($params[0]->getOrder() !== 2) {                $error    = 'Parameters must appear immediately after the comment';                $errorPos = ($params[0]->getLine() + $commentStart);                $this->currentFile->addError($error, $errorPos, 'SpacingBeforeParams');            }            $previousParam      = null;            $spaceBeforeVar     = 10000;            $spaceBeforeComment = 10000;            $longestType        = 0;            $longestVar         = 0;            foreach ($params as $param) {                $paramComment = trim($param->getComment());                $errorPos     = ($param->getLine() + $commentStart);                // Make sure that there is only one space before the var type.                // Joomla change: 3 spaces to make it line up with the @return tag with a 2 space gap.                if ($param->getWhitespaceBeforeType() !== '   ') {                    $error = 'Expected 3 spaces before variable type';                    $this->currentFile->addError($error, $errorPos, 'BeforeParamType');                }                $spaceCount = substr_count($param->getWhitespaceBeforeVarName(), ' ');                if ($spaceCount < $spaceBeforeVar) {                    $spaceBeforeVar = $spaceCount;                    $longestType    = $errorPos;                }                $spaceCount = substr_count($param->getWhitespaceBeforeComment(), ' ');                if ($spaceCount < $spaceBeforeComment && $paramComment !== '') {                    $spaceBeforeComment = $spaceCount;                    $longestVar         = $errorPos;                }                // Make sure they are in the correct order,                // and have the correct name.                $pos = $param->getPosition();                $paramName = ($param->getVarName() !== '') ? $param->getVarName() : '[ UNKNOWN ]';                if ($previousParam !== null) {                    $previousName = ($previousParam->getVarName() !== '') ? $previousParam->getVarName() : 'UNKNOWN';                    // Check to see if the parameters align properly.                    if ($param->alignsVariableWith($previousParam) === false) {                        $error = 'The variable names for parameters %s (%s) and %s (%s) do not align';                        $data  = array(                                  $previousName,                                  ($pos - 1),                                  $paramName,                                  $pos,                                 );                        $this->currentFile->addError($error, $errorPos, 'ParameterNamesNotAligned', $data);                    }                    if ($param->alignsCommentWith($previousParam) === false) {                        $error = 'The comments for parameters %s (%s) and %s (%s) do not align';                        $data  = array(                                  $previousName,                                  ($pos - 1),                                  $paramName,                                  $pos,                                 );                        $this->currentFile->addError($error, $errorPos, 'ParameterCommentsNotAligned', $data);                    }                }//end if                // Make sure the names of the parameter comment matches the                // actual parameter.                if (isset($realParams[($pos - 1)]) === true) {                    $realName      = $realParams[($pos - 1)]['name'];                    $foundParams[] = $realName;                    // Append ampersand to name if passing by reference.                    if ($realParams[($pos - 1)]['pass_by_reference'] === true) {                        $realName = '&'.$realName;                    }                    if ($realName !== $paramName) {                        $code = 'ParamNameNoMatch';                        $data = array(                                    $paramName,                                    $realName,                                    $pos,                                );                        $error  = 'Doc comment for var %s does not match ';                        if (strtolower($paramName) === strtolower($realName)) {                            $error .= 'case of ';                            $code   = 'ParamNameNoCaseMatch';                        }                        $error .= 'actual variable name %s at position %s';                        $this->currentFile->addError($error, $errorPos, $code, $data);                    }                } else {                    // We must have an extra parameter comment.                    $error = 'Superfluous doc comment at position '.$pos;                    $this->currentFile->addError($error, $errorPos, 'ExtraParamComment');                }                if ($param->getVarName() === '') {                    $error = 'Missing parameter name at position '.$pos;                     $this->currentFile->addError($error, $errorPos, 'MissingParamName');                }                if ($param->getType() === '') {                    $error = 'Missing type at position '.$pos;                    $this->currentFile->addError($error, $errorPos, 'MissingParamType');                }                if ($paramComment === '') {                    $error = 'Missing comment for param "%s" at position %s';                    $data  = array(                              $paramName,                              $pos,                             );                    $this->currentFile->addError($error, $errorPos, 'MissingParamComment', $data);                }                $previousParam = $param;            }//end foreach			// Joomla modification to 2 spaces.            if ($spaceBeforeVar !== 2 && $spaceBeforeVar !== 10000 && $spaceBeforeComment !== 10000) {                $error = 'Expected 2 spaces after the longest type';                $this->currentFile->addError($error, $longestType, 'SpacingAfterLongType');            }			// Joomla modification to 2 spaces.            if ($spaceBeforeComment !== 2 && $spaceBeforeComment !== 10000) {                $error = 'Expected 2 spaces after the longest variable name';                $this->currentFile->addError($error, $longestVar, 'SpacingAfterLongName');            }        }//end if        $realNames = array();        foreach ($realParams as $realParam) {            $realNames[] = $realParam['name'];        }        // Report and missing comments.        $diff = array_diff($realNames, $foundParams);        foreach ($diff as $neededParam) {            if (count($params) !== 0) {                $errorPos = ($params[(count($params) - 1)]->getLine() + $commentStart);            } else {                $errorPos = $commentStart;            }            $error = 'Doc comment for "%s" missing';            $data  = array($neededParam);            $this->currentFile->addError($error, $errorPos, 'MissingParamTag', $data);        }    }//end processParams()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :	if (!isset($this->children[$this->category->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<span class="item-title"><a href="<?php echo JRoute::_(NewsfeedsHelperRoute::getCategoryRoute($child->id));?>">				<?php echo $this->escape($child->title); ?></a>			</span>			<?php if ($this->params->get('show_subcat_desc') == 1) :?>			<?php if ($child->description) : ?>				<div class="category-desc">					<?php echo JHtml::_('content.prepare', $child->description, '', 'com_newsfeeds.category'); ?>				</div>			<?php endif; ?>            <?php endif; ?>            <?php if ($this->params->get('show_cat_items') == 1) :?>			<dl class="newsfeed-count"><dt>				<?php echo JText::_('COM_NEWSFEEDS_CAT_NUM'); ?></dt>				<dd><?php echo $child->numitems; ?></dd>			</dl>		<?php endif; ?>			<?php if (count($child->getChildren()) > 0) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>		</li>	<?php endif; ?>	<?php endforeach; ?>	</ul><?php endif;
<?php/** * @package     Joomla.Legacy * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla Administrator Controller * * Controller (controllers are where you put all the actual code) Provides basic * functionality, such as rendering views (aka displaying templates). * * @package     Joomla.Legacy * @subpackage  Controller * @since       12.2 */class JControllerAdmin extends JControllerLegacy{	/**	 * The URL option for the component.	 *	 * @var    string	 * @since  12.2	 */	protected $option;	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix;	/**	 * The URL view list variable.	 *	 * @var    string	 * @since  12.2	 */	protected $view_list;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JControllerLegacy	 * @since   12.2	 * @throws  Exception	 */	public function __construct($config = array())	{		parent::__construct($config);		// Define standard task mappings.		// Value = 0		$this->registerTask('unpublish', 'publish');		// Value = 2		$this->registerTask('archive', 'publish');		// Value = -2		$this->registerTask('trash', 'publish');		// Value = -3		$this->registerTask('report', 'publish');		$this->registerTask('orderup', 'reorder');		$this->registerTask('orderdown', 'reorder');		// Guess the option as com_NameOfController.		if (empty($this->option))		{			$this->option = 'com_' . strtolower($this->getName());		}		// Guess the JText message prefix. Defaults to the option.		if (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}		// Guess the list view as the suffix, eg: OptionControllerSuffix.		if (empty($this->view_list))		{			$r = null;			if (!preg_match('/(.*)Controller(.*)/i', get_class($this), $r))			{				throw new Exception(JText::_('JLIB_APPLICATION_ERROR_CONTROLLER_GET_NAME'), 500);			}			$this->view_list = strtolower($r[2]);		}	}	/**	 * Removes an item.	 *	 * @return  void	 *	 * @since   12.2	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to remove from the request.		$cid = JFactory::getApplication()->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			JLog::add(JText::_($this->text_prefix . '_NO_ITEM_SELECTED'), JLog::WARNING, 'jerror');		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			jimport('joomla.utilities.arrayhelper');			JArrayHelper::toInteger($cid);			// Remove the items.			if ($model->delete($cid))			{				$this->setMessage(JText::plural($this->text_prefix . '_N_ITEMS_DELETED', count($cid)));			}			else			{				$this->setMessage($model->getError());			}		}		// Invoke the postDelete method to allow for the child class to access the model.		$this->postDeleteHook($model, $cid);		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false));	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $id     The validated data.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $id = null)	{	}	/**	 * Display is not supported by this controller.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  A JControllerLegacy object to support chaining.	 *	 * @since   12.2	 */	public function display($cachable = false, $urlparams = array())	{		return $this;	}	/**	 * Method to publish a list of items	 *	 * @return  void	 *	 * @since   12.2	 */	public function publish()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to publish from the request.		$cid = JFactory::getApplication()->input->get('cid', array(), 'array');		$data = array('publish' => 1, 'unpublish' => 0, 'archive' => 2, 'trash' => -2, 'report' => -3);		$task = $this->getTask();		$value = JArrayHelper::getValue($data, $task, 0, 'int');		if (empty($cid))		{			JLog::add(JText::_($this->text_prefix . '_NO_ITEM_SELECTED'), JLog::WARNING, 'jerror');		}		else		{			// Get the model.			$model = $this->getModel();			// Make sure the item ids are integers			JArrayHelper::toInteger($cid);			// Publish the items.			try			{				$model->publish($cid, $value);				if ($value == 1)				{					$ntext = $this->text_prefix . '_N_ITEMS_PUBLISHED';				}				elseif ($value == 0)				{					$ntext = $this->text_prefix . '_N_ITEMS_UNPUBLISHED';				}				elseif ($value == 2)				{					$ntext = $this->text_prefix . '_N_ITEMS_ARCHIVED';				}				else				{					$ntext = $this->text_prefix . '_N_ITEMS_TRASHED';				}				$this->setMessage(JText::plural($ntext, count($cid)));			}			catch (Exception $e)			{				$this->setMessage(JText::_('JLIB_DATABASE_ERROR_ANCESTOR_NODES_LOWER_STATE'), 'error');			}		}		$extension = $this->input->get('extension');		$extensionURL = ($extension) ? '&extension=' . $extension : '';		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $extensionURL, false));	}	/**	 * Changes the order of one or more records.	 *	 * @return  boolean  True on success	 *	 * @since   12.2	 */	public function reorder()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = JFactory::getApplication()->input->post->get('cid', array(), 'array');		$inc = ($this->getTask() == 'orderup') ? -1 : +1;		$model = $this->getModel();		$return = $model->reorder($ids, $inc);		if ($return === false)		{			// Reorder failed.			$message = JText::sprintf('JLIB_APPLICATION_ERROR_REORDER_FAILED', $model->getError());			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message, 'error');			return false;		}		else		{			// Reorder succeeded.			$message = JText::_('JLIB_APPLICATION_SUCCESS_ITEM_REORDERED');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message);			return true;		}	}	/**	 * Method to save the submitted ordering values for records.	 *	 * @return  boolean  True on success	 *	 * @since   12.2	 */	public function saveorder()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Get the input		$pks = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return === false)		{			// Reorder failed			$message = JText::sprintf('JLIB_APPLICATION_ERROR_REORDER_FAILED', $model->getError());			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message, 'error');			return false;		}		else		{			// Reorder succeeded.			$this->setMessage(JText::_('JLIB_APPLICATION_SUCCESS_ORDERING_SAVED'));			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false));			return true;		}	}	/**	 * Check in of one or more records.	 *	 * @return  boolean  True on success	 *	 * @since   12.2	 */	public function checkin()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = JFactory::getApplication()->input->post->get('cid', array(), 'array');		$model = $this->getModel();		$return = $model->checkin($ids);		if ($return === false)		{			// Checkin failed.			$message = JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError());			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message, 'error');			return false;		}		else		{			// Checkin succeeded.			$message = JText::plural($this->text_prefix . '_N_ITEMS_CHECKED_IN', count($ids));			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list, false), $message);			return true;		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * DocumentRAW class, provides an easy interface to parse and display raw output * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRaw extends JDocument{	/**	 * Class constructor	 *	 * @param   array  $options  Associative array of options	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);		// Set mime type		$this->_mime = 'text/html';		// Set document type		$this->_type = 'raw';	}	/**	 * Render the document.	 *	 * @param   boolean  $cache   If true, cache the output	 * @param   array    $params  Associative array of attributes	 *	 * @return  The rendered data	 *	 * @since   11.1	 */	public function render($cache = false, $params = array())	{		parent::render();		return $this->getBuffer();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.folder');/** * Tar format adapter for the JArchive class * * This class is inspired from and draws heavily in code and concept from the Compress package of * The Horde Project <http://www.horde.org> * * @contributor  Michael Slusarz <slusarz@horde.org> * @contributor  Michael Cochrane <mike@graftonhall.co.nz> * * @package     Joomla.Platform * @subpackage  Archive * @since       11.1 */class JArchiveTar implements JArchiveExtractable{	/**	 * Tar file types.	 *	 * @var    array	 * @since  11.1	 */	private $_types = array(		0x0 => 'Unix file',		0x30 => 'File',		0x31 => 'Link',		0x32 => 'Symbolic link',		0x33 => 'Character special file',		0x34 => 'Block special file',		0x35 => 'Directory',		0x36 => 'FIFO special file',		0x37 => 'Contiguous file');	/**	 * Tar file data buffer	 *	 * @var    string	 * @since  11.1	 */	private $_data = null;	/**	 * Tar file metadata array	 *	 * @var    array	 * @since  11.1	 */	private $_metadata = null;	/**	 * Extract a ZIP compressed file to a given path	 *	 * @param   string  $archive      Path to ZIP archive to extract	 * @param   string  $destination  Path to extract archive into	 * @param   array   $options      Extraction options [unused]	 *	 * @return  boolean True if successful	 *	 * @throws  RuntimeException	 * @since   11.1	 */	public function extract($archive, $destination, array $options = array())	{		$this->_data = null;		$this->_metadata = null;		$this->_data = file_get_contents($archive);		if (!$this->_data)		{			if (class_exists('JError'))			{				return JError::raiseWarning(100, 'Unable to read archive');			}			else			{				throw new RuntimeException('Unable to read archive');			}		}		$this->_getTarInfo($this->_data);		for ($i = 0, $n = count($this->_metadata); $i < $n; $i++)		{			$type = strtolower($this->_metadata[$i]['type']);			if ($type == 'file' || $type == 'unix file')			{				$buffer = $this->_metadata[$i]['data'];				$path = JPath::clean($destination . '/' . $this->_metadata[$i]['name']);				// Make sure the destination folder exists				if (!JFolder::create(dirname($path)))				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to create destination');					}					else					{						throw new RuntimeException('Unable to create destination');					}				}				if (JFile::write($path, $buffer) === false)				{					if (class_exists('JError'))					{						return JError::raiseWarning(100, 'Unable to write entry');					}					else					{						throw new RuntimeException('Unable to write entry');					}				}			}		}		return true;	}	/**	 * Tests whether this adapter can unpack files on this computer.	 *	 * @return  boolean  True if supported	 *	 * @since   11.3	 */	public static function isSupported()	{		return true;	}	/**	 * Get the list of files/data from a Tar archive buffer.	 *	 * @param   string  &$data  The Tar archive buffer.	 *	 * @return   array  Archive metadata array	 * <pre>	 * KEY: Position in the array	 * VALUES: 'attr'  --  File attributes	 * 'data'  --  Raw file contents	 * 'date'  --  File modification time	 * 'name'  --  Filename	 * 'size'  --  Original file size	 * 'type'  --  File type	 * </pre>	 *	 * @since    11.1	 */	protected function _getTarInfo(& $data)	{		$position = 0;		$return_array = array();		while ($position < strlen($data))		{			$info = @unpack(				"a100filename/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/Ctypeflag/a100link/a6magic/a2version/a32uname/a32gname/a8devmajor/a8devminor",				substr($data, $position)			);			if (!$info)			{				if (class_exists('JError'))				{					return JError::raiseWarning(100, 'Unable to decompress data');				}				else				{					throw new RuntimeException('Unable to decompress data');				}			}			$position += 512;			$contents = substr($data, $position, octdec($info['size']));			$position += ceil(octdec($info['size']) / 512) * 512;			if ($info['filename'])			{				$file = array(					'attr' => null,					'data' => null,					'date' => octdec($info['mtime']),					'name' => trim($info['filename']),					'size' => octdec($info['size']),					'type' => isset($this->_types[$info['typeflag']]) ? $this->_types[$info['typeflag']] : null);				if (($info['typeflag'] == 0) || ($info['typeflag'] == 0x30) || ($info['typeflag'] == 0x35))				{					/* File or folder. */					$file['data'] = $contents;					$mode = hexdec(substr($info['mode'], 4, 3));					$file['attr'] = (($info['typeflag'] == 0x35) ? 'd' : '-') . (($mode & 0x400) ? 'r' : '-') . (($mode & 0x200) ? 'w' : '-') .						(($mode & 0x100) ? 'x' : '-') . (($mode & 0x040) ? 'r' : '-') . (($mode & 0x020) ? 'w' : '-') . (($mode & 0x010) ? 'x' : '-') .						(($mode & 0x004) ? 'r' : '-') . (($mode & 0x002) ? 'w' : '-') . (($mode & 0x001) ? 'x' : '-');				}				else				{					/* Some other type. */				}				$return_array[] = $file;			}		}		$this->_metadata = $return_array;		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_SYSTEM_INFORMATION'); ?></legend>	<table class="table table-striped">		<thead>			<tr>				<th width="25%">					<?php echo JText::_('COM_ADMIN_SETTING'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_VALUE'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_BUILT_ON'); ?></strong>				</td>				<td>					<?php echo $this->info['php'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_DATABASE_COLLATION'); ?></strong>				</td>				<td>					<?php echo $this->info['dbcollation'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PHP_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['phpversion'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEB_SERVER'); ?></strong>				</td>				<td>					<?php echo JHtml::_('system.server', $this->info['server']); ?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_WEBSERVER_TO_PHP_INTERFACE'); ?></strong>				</td>				<td>					<?php echo $this->info['sapi_name'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_JOOMLA_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['version'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_PLATFORM_VERSION'); ?></strong>				</td>				<td>					<?php echo $this->info['platform'];?>				</td>			</tr>			<tr>				<td>					<strong><?php echo JText::_('COM_ADMIN_USER_AGENT'); ?></strong>				</td>				<td>					<?php echo htmlspecialchars($this->info['useragent']);?>				</td>			</tr>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ROOT . '/components/com_banners/helpers/banner.php';$baseurl = JURI::base();?><div class="bannergroup<?php echo $moduleclass_sfx ?>"><?php if ($headerText) : ?>	<?php echo $headerText; ?><?php endif; ?><?php foreach ($list as $item) : ?>	<div class="banneritem">		<?php $link = JRoute::_('index.php?option=com_banners&task=click&id='. $item->id);?>		<?php if ($item->type == 1) :?>			<?php // Text based banners ?>			<?php echo str_replace(array('{CLICKURL}', '{NAME}'), array($link, $item->name), $item->custombannercode);?>		<?php else:?>			<?php $imageurl = $item->params->get('imageurl');?>			<?php $width = $item->params->get('width');?>			<?php $height = $item->params->get('height');?>			<?php if (BannerHelper::isImage($imageurl)) :?>				<?php // Image based banner ?>				<?php $alt = $item->params->get('alt');?>				<?php $alt = $alt ? $alt : $item->name; ?>				<?php $alt = $alt ? $alt : JText::_('MOD_BANNERS_BANNER'); ?>				<?php if ($item->clickurl) :?>					<?php // Wrap the banner in a link?>					<?php $target = $params->get('target', 1);?>					<?php if ($target == 1) :?>						<?php // Open in a new window?>						<a							href="<?php echo $link; ?>" target="_blank"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php elseif ($target == 2):?>						<?php // open in a popup window?>						<a							href="<?php echo $link;?>" onclick="window.open(this.href, '',								'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550');								return false"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php else :?>						<?php // open in parent window?>						<a							href="<?php echo $link;?>"							title="<?php echo htmlspecialchars($item->name, ENT_QUOTES, 'UTF-8');?>">							<img								src="<?php echo $baseurl . $imageurl;?>"								alt="<?php echo $alt;?>"								<?php if (!empty($width)) echo 'width ="'. $width.'"';?>								<?php if (!empty($height)) echo 'height ="'. $height.'"';?>							/>						</a>					<?php endif;?>				<?php else :?>					<?php // Just display the image if no link specified?>					<img						src="<?php echo $baseurl . $imageurl;?>"						alt="<?php echo $alt;?>"						<?php if (!empty($width)) echo 'width ="'. $width.'"';?>						<?php if (!empty($height)) echo 'height ="'. $height.'"';?>					/>				<?php endif;?>			<?php elseif (BannerHelper::isFlash($imageurl)) :?>				<object					classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"					codebase="http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0"					<?php if (!empty($width)) echo 'width ="'. $width.'"';?>					<?php if (!empty($height)) echo 'height ="'. $height.'"';?>				>					<param name="movie" value="<?php echo $imageurl;?>" />					<embed						src="<?php echo $imageurl;?>"						loop="false"						pluginspage="http://www.macromedia.com/go/get/flashplayer"						type="application/x-shockwave-flash"						<?php if (!empty($width)) echo 'width ="'. $width.'"';?>						<?php if (!empty($height)) echo 'height ="'. $height.'"';?>					/>				</object>			<?php endif;?>		<?php endif;?>		<div class="clr"></div>	</div><?php endforeach; ?><?php if ($footerText) : ?>	<div class="bannerfooter">		<?php echo $footerText; ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;defined('_JEXEC') or die;$app	= JFactory::getApplication();$doc	= JFactory::getDocument();$lang	= JFactory::getLanguage();$input	= $app->input;$user	= JFactory::getUser();// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load system style CSS$doc->addStyleSheet('templates/system/css/system.css');// Loadtemplate CSS$doc->addStyleSheet('templates/'.$this->template.'/css/template.css');// Load additional CSS styles for colorsif (!$this->params->get('colourChoice')) :$colour = 'standard';else :$colour = htmlspecialchars($this->params->get('colourChoice'));endif;$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'.css');// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for rtl sitesif ($this->direction == 'rtl'){	$doc->addStyleSheet('templates/'.$this->template.'/css/template_rtl.css');	$doc->addStyleSheet('templates/'.$this->template.'/css/colour_'.$colour.'_rtl.css');}// Load specific language related CSS$file = 'language/'.$lang->getTag().'/'.$lang->getTag().'.css';if (JFile::exists($file)){	$doc->addStyleSheet($file);}// Load additional CSS styles for bold Textif ($this->params->get('boldText')){	$doc->addStyleSheet('templates/'.$this->template.'/css/boldtext.css');}// Load template javascript$doc->addScript('templates/'.$this->template.'/js/template.js', 'text/javascript');// Logo fileif ($this->params->get('logoFile')){	$logo = JURI::root() . $this->params->get('logoFile');}else{	$logo = $this->baseurl . "/templates/" . $this->template . "/images/logo.png";}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo  $this->language; ?>" lang="<?php echo  $this->language; ?>" dir="<?php echo  $this->direction; ?>"><head><jdoc:include type="head" /><!-- Load additional CSS styles for Internet Explorer --><!--[if IE 8]>	<link href="templates/<?php echo  $this->template ?>/css/ie8.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if IE 7]>	<link href="templates/<?php echo  $this->template ?>/css/ie7.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="../media/jui/js/html5.js"></script><![endif]--></head><body id="minwidth" class="cpanel-page"><div id="containerwrap">	<!-- Header Logo -->	<div id="header">		<!-- Site Title and Skip to Content -->		<div class="title-ua">			<h1 class="title"><?php echo $this->params->get('showSiteName') ? $app->getCfg('sitename') . " " . JText::_('JADMINISTRATION') : JText::_('JADMINISTRATION'); ?></h1>			<div id="skiplinkholder"><p><a id="skiplink" href="#skiptarget"><?php echo JText::_('TPL_HATHOR_SKIP_TO_MAIN_CONTENT'); ?></a></p></div>      	</div>	</div><!-- end header -->	<!-- Main Menu Navigation -->	<div id="nav">		<div id="module-menu">			<h2 class="element-invisible"><?php echo JText::_('TPL_HATHOR_MAIN_MENU'); ?></h2>			<jdoc:include type="modules" name="menu" />		</div>		<div class="clr"></div>	</div><!-- end nav -->	<!-- Status Module -->	<div id="module-status">		<jdoc:include type="modules" name="status"/>			<?php			//Display an harcoded logout			$task = $app->input->get('task');			if ($task == 'edit' || $task == 'editA' || $app->input->getInt('hidemainmenu'))			{				$logoutLink = '';			} else {				$logoutLink = JRoute::_('index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1');			}			$hideLinks = $app->input->getBool('hidemainmenu');			$output = array();			// Print the Preview link to Main site.			//$output[] = '<span class="viewsite"><a href="'.JURI::root().'" target="_blank">'.JText::_('JGLOBAL_VIEW_SITE').'</a></span>';			// Print the logout link.			//$output[] = '<span class="logout">' .($hideLinks ? '' : '<a href="'.$logoutLink.'">').JText::_('JLOGOUT').($hideLinks ? '' : '</a>').'</span>';			// Output the items.			foreach ($output as $item) :			echo $item;			endforeach;			?>	</div>	<!-- Content Area -->	<div id="content">		<!-- Component Title -->		<jdoc:include type="modules" name="title" />		<!-- System Messages -->		<jdoc:include type="message" />		<!-- Sub Menu Navigation -->		<div id="no-submenu"></div>   		<div class="clr"></div>		<!-- Beginning of Actual Content -->		<div id="element-box">			<p id="skiptargetholder"><a id="skiptarget" class="skip" tabindex="-1"></a></p>				<div class="adminform">					<!-- Display the Quick Icon Shortcuts -->					<div class="cpanel-icons">						<?php if ($this->countModules('icon') > 1):?>							<?php echo JHtml::_('sliders.start', 'position-icon', array('useCookie' => 1));?>							<jdoc:include type="modules" name="icon" />							<?php echo JHtml::_('sliders.end');?>						<?php else:?>							<jdoc:include type="modules" name="icon" />						<?php endif;?>					</div>					<!-- Display Admin Information Panels -->					<div class="cpanel-component">						<jdoc:include type="component" />					</div>				</div>				<div class="clr"></div>		</div><!-- end element-box -->		<noscript>			<?php echo  JText::_('JGLOBAL_WARNJAVASCRIPT') ?>		</noscript>		<div class="clr"></div>	</div><!-- end content -->		<div class="clr"></div>	</div><!-- end containerwrap -->	<!-- Footer -->	<div id="footer">		<jdoc:include type="modules" name="footer" style="none"  />		<p class="copyright">			<?php $joomla = '<a href="http://www.joomla.org">Joomla!&#174;</a>';			echo JText::sprintf('JGLOBAL_ISFREESOFTWARE', $joomla) ?>		</p>	</div></body></html>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_popular * * @package     Joomla.Site * @subpackage  mod_articles_popular */abstract class ModArticlesPopularHelper{	public static function getList(&$params)	{		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$app = JFactory::getApplication();		$appParams = $app->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('filter.featured', $params->get('show_front', 1) == 1 ? 'show' : 'hide');		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Ordering		$model->setState('list.ordering', 'a.hits');		$model->setState('list.direction', 'DESC');		$items = $model->getItems();		foreach ($items as &$item)		{			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catslug));			} else {				$item->link = JRoute::_('index.php?option=com_users&view=login');			}		}		return $items;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQueryMysqli extends JDatabaseQuery implements JDatabaseQueryLimitable{	/**	 * @var    interger  The offset for the result set.	 * @since  12.1	 */	protected $offset;	/**	 * @var    integer  The limit for the result set.	 * @since  12.1	 */	protected $limit;	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return string	 *	 * @since 12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Concatenates an array of column names or values.	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.1	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			$concat_string = 'CONCAT_WS(' . $this->quote($separator);			foreach ($values as $value)			{				$concat_string .= ', ' . $value;			}			return $concat_string . ')';		}		else		{			return 'CONCAT(' . implode(',', $values) . ')';		}	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit  = (int) $limit;		$this->offset = (int) $offset;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of newsfeeds * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$newsfeedId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__newsfeeds' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $newsfeedId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.htmlspecialchars($this->value).'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $newsfeedId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->error) : ?><div class="error">			<?php echo $this->escape($this->error); ?></div><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';?><?php if ($this->params->get('show_articles')) : ?><div class="contact-articles">	<ol>		<?php foreach ($this->item->articles as $article) :	?>			<li>				<?php echo JHtml::_('link', JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catslug)), htmlspecialchars($article->title, ENT_COMPAT, 'UTF-8')); ?>			</li>		<?php endforeach; ?>	</ol></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app	= JFactory::getApplication();$style = $app->getUserStateFromRequest('media.list.layout', 'layout', 'thumbs', 'word');?><div class="media btn-group">	<a href="#" id="thumbs" onclick="MediaManager.setViewType('thumbs')" class="btn <?php echo ($style == "thumbs") ? 'active' : '';?>">	<i class="icon-grid-view-2"></i> <?php echo JText::_('COM_MEDIA_THUMBNAIL_VIEW'); ?></a>	<a href="#" id="details" onclick="MediaManager.setViewType('details')" class="btn <?php echo ($style == "details") ? 'active' : '';?>">	<i class="icon-list-view"></i> <?php echo JText::_('COM_MEDIA_DETAIL_VIEW'); ?></a></div>
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base View Class * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */abstract class JViewBase implements JView{	/**	 * The model object.	 *	 * @var    JModel	 * @since  12.1	 */	protected $model;	/**	 * Method to instantiate the view.	 *	 * @param   JModel  $model  The model object.	 *	 * @since  12.1	 */	public function __construct(JModel $model)	{		// Setup dependencies.		$this->model = $model;	}	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @see     JView::escape()	 * @since   12.1	 */	public function escape($output)	{		return $output;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JHtml::_('behavior.framework');JHtml::_('behavior.keepalive');?><div id="finder-indexer-container">	<br /><br />	<h1 id="finder-progress-header"><?php echo JText::_('COM_FINDER_INDEXER_HEADER_INIT'); ?></h1>	<p id="finder-progress-message"><?php echo JText::_('COM_FINDER_INDEXER_MESSAGE_INIT'); ?></p>	<form id="finder-progress-form"></form>	<div id="finder-progress-container"></div>	<input id="finder-indexer-token" type="hidden" name="<?php echo JFactory::getSession()->getFormToken(); ?>" value="1" /></div>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using PHP streams. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportStream implements JHttpTransport{	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		// Verify that fopen() is available.		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a stream transport when fopen() is not available.');		}		// Verify that URLs can be used with fopen();		if (!ini_get('allow_url_fopen'))		{			throw new RuntimeException('Cannot use a stream transport when "allow_url_fopen" is disabled.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		// Create the stream context options array with the required method offset.		$options = array('method' => strtoupper($method));		// If data exists let's encode it and make sure our Content-Type header is set.		if (isset($data))		{			// If the data is a scalar value simply add it to the stream context options.			if (is_scalar($data))			{				$options['content'] = $data;			}			// Otherwise we need to encode the value first.			else			{				$options['content'] = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($options['content']);		}		// Build the headers string for the request.		$headerString = null;		if (isset($headers))		{			foreach ($headers as $key => $value)			{				$headerString .= $key . ': ' . $value . "\r\n";			}			// Add the headers string into the stream context options array.			$options['header'] = trim($headerString, "\r\n");		}		// If an explicit timeout is given user it.		if (isset($timeout))		{			$options['timeout'] = (int) $timeout;		}		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$options['user_agent'] = $userAgent;		}		// Ignore HTTP errors so that we can capture them.		$options['ignore_errors'] = 1;		// Follow redirects.		$options['follow_location'] = (int) $this->options->get('follow_location', 1);		// Create the stream context for the request.		$context = stream_context_create(array('http' => $options));		// Open the stream for reading.		$stream = @fopen((string) $uri, 'r', false, $context);		// Check if the stream is open.		if (!$stream)		{			throw new RuntimeException(sprintf('Could not connect to resource: %s', $uri));		}		// Get the metadata for the stream, including response headers.		$metadata = stream_get_meta_data($stream);		// Get the contents from the stream.		$content = stream_get_contents($stream);		// Close the stream.		fclose($stream);		if (isset($metadata['wrapper_data']['headers']))		{			$headers = $metadata['wrapper_data']['headers'];		}		elseif (isset($metadata['wrapper_data']))		{			$headers = $metadata['wrapper_data'];		}		else		{			$headers = array();		}		return $this->getResponse($headers, $content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   array   $headers  The response headers as an array.	 * @param   string  $body     The response body as a string.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse(array $headers, $body)	{		// Create the response object.		$return = new JHttpResponse;		// Set the body for the response.		$return->body = $body;		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * method to check if http transport stream available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fopen') && is_callable('fopen');	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Less * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('lessphp.lessc');/** * Help system class * * @package     Joomla.Libraries * @subpackage  Less * @since       3.0 */class JLessFormatterJoomla extends lessc_formatter_classic{	public $disableSingle = true;	public $breakSelectors = true;	public $assignSeparator = ": ";	public $selectorSeparator = ",";	public $indentChar = "\t";}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banner controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerBanner extends JControllerForm{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_BANNERS_BANNER';	/**	 * Method override to check if you can add a new record.	 *	 * @param   array  $data  An array of input data.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowAdd($data = array())	{		$user       = JFactory::getUser();		$filter     = $this->input->getInt('filter_category_id');		$categoryId = JArrayHelper::getValue($data, 'catid', $filter, 'int');		$allow      = null;		if ($categoryId)		{			// If the category has been passed in the URL check it.			$allow	= $user->authorise('core.create', $this->option . '.category.' . $categoryId);		}		if ($allow === null)		{			// In the absence of better information, revert to the component permissions.			return parent::allowAdd($data);		}		else		{			return $allow;		}	}	/**	 * Method override to check if you can edit an existing record.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		$user		= JFactory::getUser();		$recordId	= (int) isset($data[$key]) ? $data[$key] : 0;		$categoryId = 0;		if ($recordId)		{			$categoryId = (int) $this->getModel()->getItem($recordId)->catid;		}		if ($categoryId)		{			// The category has been set. Check the category permissions.			return $user->authorise('core.edit', $this->option . '.category.' . $categoryId);		}		else		{			// Since there is no asset tracking, revert to the component permissions.			return parent::allowEdit($data, $key);		}	}	/**	 * Method to run batch operations.	 *	 * @param   string  $model  The model	 *	 * @return  boolean  True on success.	 *	 * @since	2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model	= $this->getModel('Banner', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Recaptcha Plugin. * Based on the oficial recaptcha library( http://recaptcha.net/plugins/php/ ) * * @package     Joomla.Plugin * @subpackage  Captcha * @since       2.5 */class PlgCaptchaRecaptcha extends JPlugin{	const RECAPTCHA_API_SERVER = "http://api.recaptcha.net";	const RECAPTCHA_API_SECURE_SERVER = "https://www.google.com/recaptcha/api";	const RECAPTCHA_VERIFY_SERVER = "api-verify.recaptcha.net";	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * Initialise the captcha	 *	 * @param   string	$id	The id of the field.	 *	 * @return  Boolean	True on success, false otherwise	 *	 * @since  2.5	 */	public function onInit($id)	{		$document = JFactory::getDocument();		$app      = JFactory::getApplication();		$lang   = $this->_getLanguage();		$pubkey = $this->params->get('public_key', '');		$theme  = $this->params->get('theme', 'clean');		if ($pubkey == null || $pubkey == '')		{			throw new Exception(JText::_('PLG_RECAPTCHA_ERROR_NO_PUBLIC_KEY'));		}		$server = self::RECAPTCHA_API_SERVER;		if ($app->isSSLConnection())		{			$server = self::RECAPTCHA_API_SECURE_SERVER;		}		JHtml::_('script', $server.'/js/recaptcha_ajax.js');		$document->addScriptDeclaration('window.addEvent(\'domready\', function()		{			Recaptcha.create("'.$pubkey.'", "dynamic_recaptcha_1", {theme: "'.$theme.'",'.$lang.'tabindex: 0});});'		);		return true;	}	/**	 * Gets the challenge HTML	 *	 * @return  string  The HTML to be embedded in the form.	 *	 * @since  2.5	 */	public function onDisplay($name, $id, $class)	{		return '<div id="dynamic_recaptcha_1"></div>';	}	/**	  * Calls an HTTP POST function to verify if the user's guess was correct	  *	  * @return  True if the answer is correct, false otherwise	  *	  * @since  2.5	  */	public function onCheckAnswer($code)	{		$input      = JFactory::getApplication()->input;		$privatekey = $this->params->get('private_key');		$remoteip   = $input->server->get('REMOTE_ADDR', '', 'string');		$challenge  = $input->get('recaptcha_challenge_field', '', 'string');		$response   = $input->get('recaptcha_response_field', '', 'string');		// Check for Private Key		if (empty($privatekey))		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_NO_PRIVATE_KEY'));			return false;		}		// Check for IP		if (empty($remoteip))		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_NO_IP'));			return false;		}		// Discard spam submissions		if ($challenge == null || strlen($challenge) == 0 || $response == null || strlen($response) == 0)		{			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_EMPTY_SOLUTION'));			return false;		}		$response = $this->_recaptcha_http_post(			self::RECAPTCHA_VERIFY_SERVER, "/verify",			array(				'privatekey' => $privatekey,				'remoteip'   => $remoteip,				'challenge'  => $challenge,				'response'   => $response			)	);		$answers = explode("\n", $response[1]);		if (trim($answers[0]) == 'true')			{				return true;		}		else		{			//@todo use exceptions here			$this->_subject->setError(JText::_('PLG_RECAPTCHA_ERROR_'.strtoupper(str_replace('-', '_', $answers[1]))));			return false;		}	}	/**	 * Encodes the given data into a query string format.	 *	 * @param   string  $data  Array of string elements to be encoded	 *	 * @return  string  Encoded request	 *	 * @since  2.5	 */	private function _recaptcha_qsencode($data)	{		$req = "";		foreach ($data as $key => $value)		{			$req .= $key . '=' . urlencode(stripslashes($value)) . '&';		}		// Cut the last '&'		$req = rtrim($req, '&');		return $req;	}	/**	 * Submits an HTTP POST to a reCAPTCHA server.	 *	 * @param   string  $host	 * @param   string  $path	 * @param   array   $data	 * @param   int     $port	 *	 * @return  array   Response	 *	 * @since  2.5	 */	private function _recaptcha_http_post($host, $path, $data, $port = 80)	{		$req = $this->_recaptcha_qsencode($data);		$http_request  = "POST $path HTTP/1.0\r\n";		$http_request .= "Host: $host\r\n";		$http_request .= "Content-Type: application/x-www-form-urlencoded;\r\n";		$http_request .= "Content-Length: " . strlen($req) . "\r\n";		$http_request .= "User-Agent: reCAPTCHA/PHP\r\n";		$http_request .= "\r\n";		$http_request .= $req;		$response = '';		if (($fs = @fsockopen($host, $port, $errno, $errstr, 10)) == false )		{			die('Could not open socket');		}		fwrite($fs, $http_request);		while (!feof($fs))		{			// One TCP-IP packet			$response .= fgets($fs, 1160);		}		fclose($fs);		$response = explode("\r\n\r\n", $response, 2);		return $response;	}	/**	 * Get the language tag or a custom translation	 *	 * @return  string	 *	 * @since  2.5	 */	private function _getLanguage()	{		$language = JFactory::getLanguage();		$tag = explode('-', $language->getTag());		$tag = $tag[0];		$available = array('en', 'pt', 'fr', 'de', 'nl', 'ru', 'es', 'tr');		if (in_array($tag, $available))		{			return "lang : '" . $tag . "',";		}		// If the default language is not available, let's search for a custom translation		if ($language->hasKey('PLG_RECAPTCHA_CUSTOM_LANG'))		{			$custom[] = 'custom_translations : {';			$custom[] = "\t".'instructions_visual : "' . JText::_('PLG_RECAPTCHA_INSTRUCTIONS_VISUAL') . '",';			$custom[] = "\t".'instructions_audio : "' . JText::_('PLG_RECAPTCHA_INSTRUCTIONS_AUDIO') . '",';			$custom[] = "\t".'play_again : "' . JText::_('PLG_RECAPTCHA_PLAY_AGAIN') . '",';			$custom[] = "\t".'cant_hear_this : "' . JText::_('PLG_RECAPTCHA_CANT_HEAR_THIS') . '",';			$custom[] = "\t".'visual_challenge : "' . JText::_('PLG_RECAPTCHA_VISUAL_CHALLENGE') . '",';			$custom[] = "\t".'audio_challenge : "' . JText::_('PLG_RECAPTCHA_AUDIO_CHALLENGE') . '",';			$custom[] = "\t".'refresh_btn : "' . JText::_('PLG_RECAPTCHA_REFRESH_BTN') . '",';			$custom[] = "\t".'help_btn : "' . JText::_('PLG_RECAPTCHA_HELP_BTN') . '",';			$custom[] = "\t".'incorrect_try_again : "' . JText::_('PLG_RECAPTCHA_INCORRECT_TRY_AGAIN') . '",';			$custom[] = '},';			$custom[] = "lang : '" . $tag . "',";			return implode("\n", $custom);		}		// If nothing helps fall back to english		return '';	}}
<?php/** * @package     Joomla.Platform * @subpackage  FileSystem * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * String Controller * * @package     Joomla.Platform * @subpackage  FileSystem * @since       11.1 */class JStringController{	/**	 * Defines a variable as an array	 *	 * @return  array	 *	 * @since   11.1	 */	public function _getArray()	{		static $strings = array();		return $strings;	}	/**	 * Create a reference	 *	 * @param   string  $reference  The key	 * @param   string  &$string    The value	 *	 * @return  void	 *	 * @since   11.1	 */	public function createRef($reference, &$string)	{		$ref = &self::_getArray();		$ref[$reference] = & $string;	}	/**	 * Get reference	 *	 * @param   string  $reference  The key for the reference.	 *	 * @return  mixed  False if not set, reference if it it exists	 *	 * @since   11.1	 */	public function getRef($reference)	{		$ref = &self::_getArray();		if (isset($ref[$reference]))		{			return $ref[$reference];		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexer', __DIR__ . '/indexer.php');/** * Result class for the Finder indexer package. * * This class uses magic __get() and __set() methods to prevent properties * being added that might confuse the system. All properties not explicitly * declared will be pushed into the elements array and can be accessed * explicitly using the getElement() method. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerResult{	/**	 * An array of extra result properties.	 *	 * @var    array	 * @since  2.5	 */	protected $elements = array();	/**	 * This array tells the indexer which properties should be indexed and what	 * weights to use for those properties.	 *	 * @var    array	 * @since  2.5	 */	protected $instructions = array(		FinderIndexer::TITLE_CONTEXT => array('title', 'subtitle', 'id'),		FinderIndexer::TEXT_CONTEXT => array('summary', 'body'),		FinderIndexer::META_CONTEXT => array('meta', 'list_price', 'sale_price'),		FinderIndexer::PATH_CONTEXT => array('path', 'alias'),		FinderIndexer::MISC_CONTEXT => array('comments')	);	/**	 * The indexer will use this data to create taxonomy mapping entries for	 * the item so that it can be filtered by type, label, category,	 * or whatever.	 *	 * @var    array	 * @since  2.5	 */	protected $taxonomy = array();	/**	 * The content URL.	 *	 * @var    string	 * @since  2.5	 */	public $url;	/**	 * The content route.	 *	 * @var    string	 * @since  2.5	 */	public $route;	/**	 * The content title.	 *	 * @var    string	 * @since  2.5	 */	public $title;	/**	 * The content description.	 *	 * @var    string	 * @since  2.5	 */	public $description;	/**	 * The published state of the result.	 *	 * @var    integer	 * @since  2.5	 */	public $published;	/**	 * The content published state.	 *	 * @var    integer	 * @since  2.5	 */	public $state;	/**	 * The content access level.	 *	 * @var    integer	 * @since  2.5	 */	public $access;	/**	 * The content language.	 *	 * @var    string	 * @since  2.5	 */	public $language = '*';	/**	 * The publishing start date.	 *	 * @var    string	 * @since  2.5	 */	public $publish_start_date;	/**	 * The publishing end date.	 *	 * @var    string	 * @since  2.5	 */	public $publish_end_date;	/**	 * The generic start date.	 *	 * @var    string	 * @since  2.5	 */	public $start_date;	/**	 * The generic end date.	 *	 * @var    string	 * @since  2.5	 */	public $end_date;	/**	 * The item list price.	 *	 * @var    mixed	 * @since  2.5	 */	public $list_price;	/**	 * The item sale price.	 *	 * @var    mixed	 * @since  2.5	 */	public $sale_price;	/**	 * The content type id. This is set by the adapter.	 *	 * @var    integer	 * @since  2.5	 */	public $type_id;	/**	 * The default language for content.	 *	 * @var    string	 * @since  3.0.2	 */	public $defaultLanguage;	/**	 * Constructor	 *	 * @since   3.0.3	 */	public function __construct()	{		$this->defaultLanguage = JComponentHelper::getParams('com_languages')->get('site', 'en-GB');	}	/**	 * The magic set method is used to push additional values into the elements	 * array in order to preserve the cleanliness of the object.	 *	 * @param   string  $name   The name of the element.	 * @param   mixed   $value  The value of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function __set($name, $value)	{		$this->elements[$name] = $value;	}	/**	 * The magic get method is used to retrieve additional element values	 * from the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  mixed  The value of the element if set, null otherwise.	 *	 * @since   2.5	 */	public function __get($name)	{		// Get the element value if set.		if (array_key_exists($name, $this->elements))		{			return $this->elements[$name];		}		else		{			return null;		}	}	/**	 * The magic isset method is used to check the state of additional element	 * values in the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  boolean  True if set, false otherwise.	 *	 * @since   2.5	 */	public function __isset($name)	{		return isset($this->elements[$name]);	}	/**	 * The magic unset method is used to unset additional element values in the	 * elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function __unset($name)	{		unset($this->elements[$name]);	}	/**	 * Method to retrieve additional element values from the elements array.	 *	 * @param   string  $name  The name of the element.	 *	 * @return  mixed  The value of the element if set, null otherwise.	 *	 * @since   2.5	 */	public function getElement($name)	{		// Get the element value if set.		if (array_key_exists($name, $this->elements))		{			return $this->elements[$name];		}		else		{			return null;		}	}	/**	 * Method to set additional element values in the elements array.	 *	 * @param   string  $name   The name of the element.	 * @param   mixed   $value  The value of the element.	 *	 * @return  void	 *	 * @since   2.5	 */	public function setElement($name, $value)	{		$this->elements[$name] = $value;	}	/**	 * Method to get all processing instructions.	 *	 * @return  array  An array of processing instructions.	 *	 * @since   2.5	 */	public function getInstructions()	{		return $this->instructions;	}	/**	 * Method to add a processing instruction for an item property.	 *	 * @param   string  $group     The group to associate the property with.	 * @param   string  $property  The property to process.	 *	 * @return  void	 *	 * @since   2.5	 */	public function addInstruction($group, $property)	{		// Check if the group exists. We can't add instructions for unknown groups.		if (array_key_exists($group, $this->instructions))		{			// Check if the property exists in the group.			if (!in_array($property, $this->instructions[$group]))			{				// Add the property to the group.				$this->instructions[$group][] = $property;			}		}	}	/**	 * Method to remove a processing instruction for an item property.	 *	 * @param   string  $group     The group to associate the property with.	 * @param   string  $property  The property to process.	 *	 * @return  void	 *	 * @since   2.5	 */	public function removeInstruction($group, $property)	{		// Check if the group exists. We can't remove instructions for unknown groups.		if (array_key_exists($group, $this->instructions))		{			// Search for the property in the group.			$key = array_search($property, $this->instructions[$group]);			// If the property was found, remove it.			if ($key !== false)			{				unset($this->instructions[$group][$key]);			}		}	}	/**	 * Method to get the taxonomy maps for an item.	 *	 * @param   string  $branch  The taxonomy branch to get. [optional]	 *	 * @return  array  An array of taxonomy maps.	 *	 * @since   2.5	 */	public function getTaxonomy($branch = null)	{		// Get the taxonomy branch if available.		if ($branch !== null && isset($this->taxonomy[$branch]))		{			// Filter the input.			$branch = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $branch);			return $this->taxonomy[$branch];		}		return $this->taxonomy;	}	/**	 * Method to add a taxonomy map for an item.	 *	 * @param   string   $branch  The title of the taxonomy branch to add the node to.	 * @param   string   $title   The title of the taxonomy node.	 * @param   integer  $state   The published state of the taxonomy node. [optional]	 * @param   integer  $access  The access level of the taxonomy node. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	public function addTaxonomy($branch, $title, $state = 1, $access = 1)	{		// Filter the input.		$branch = preg_replace('#[^\pL\pM\pN\p{Pi}\p{Pf}\'+-.,]+#mui', ' ', $branch);		// Create the taxonomy node.		$node = new JObject;		$node->title = $title;		$node->state = (int) $state;		$node->access = (int) $access;		// Add the node to the taxonomy branch.		$this->taxonomy[$branch][$node->title] = $node;	}	/**	 * Method to set the item language	 *	 * @return  void	 *	 * @since   3.0	 */	public function setLanguage()	{		if ($this->language == '*' || $this->language == '')		{			$this->language = $this->defaultLanguage;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die; ?><?php echo JHtml::_('sliders.panel', JText::_('JGLOBAL_FIELDSET_PUBLISHING'), 'publishing-details'); ?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_('COM_CONTENT_FIELDSET_PUBLISHING'); ?></legend>		<ul class="adminformlist">			<li><?php echo $this->form->getLabel('created_user_id'); ?>			<?php echo $this->form->getInput('created_user_id'); ?></li>			<?php if ((int) $this->item->created_time) : ?>				<li><?php echo $this->form->getLabel('created_time'); ?>				<?php echo $this->form->getInput('created_time'); ?></li>			<?php endif; ?>			<?php if ($this->item->modified_user_id) : ?>				<li><?php echo $this->form->getLabel('modified_user_id'); ?>				<?php echo $this->form->getInput('modified_user_id'); ?></li>				<li><?php echo $this->form->getLabel('modified_time'); ?>				<?php echo $this->form->getInput('modified_time'); ?></li>			<?php endif; ?>		</ul>	</fieldset><?php $fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($label); ?></legend>	<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		<?php if ($name == 'basic'):?>			<li><?php echo $this->form->getLabel('note'); ?>			<?php echo $this->form->getInput('note'); ?></li>		<?php endif;?>	</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_version * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_version * * @package     Joomla.Administrator * @subpackage  mod_version * @since       1.6 */abstract class ModVersionHelper{	/**	 * Get the member items of the submenu.	 *	 * @param   JRegistry  &$params  The parameters object.	 *	 * @return  string  String containing the current Joomla version based on the selected format.	 */	public static function getVersion(&$params)	{		$format  = $params->get('format', 'short');		$product = $params->get('product', 0);		$method  = 'get' . ucfirst($format) . "Version";		// Get the joomla version		$instance = new JVersion;		$version  = call_user_func(array($instance, $method));		if ($format == 'short' && !empty($product))		{			// Add the product name to short format only (in long format it's included)			$version = $instance->PRODUCT . ' ' . $version;		}		return $version;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusActivities extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{	parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * List all of the activities in the specified collection for a particular user.	 *	 * @param   string   $userId      The ID of the user to get activities for. The special value "me" can be used to indicate the authenticated user.	 * @param   string   $collection  The collection of activities to list. Acceptable values are: "public".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 *								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 * @param   string   $alt         Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listActivities($userId, $collection, $fields = null, $max = 10, $token = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $userId . '/activities/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check if token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Get an activity.	 *	 * @param   string  $id      The ID of the activity to get.	 * @param   string  $fields  Used to specify the fields you want returned.	 * @param   string  $alt     Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getActivity($id, $fields = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public activities.	 *	 * @param   string   $query     Full-text search query string.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $order     Specifies how to order search results. Acceptable values are "best" and "recent".	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $order = null, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check if order is specified.			if ($order)			{				$url .= '&orderBy=' . $order;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * JMenu class. * * @package     Joomla.Libraries * @subpackage  Menu * @since       1.5 */class JMenuAdministrator extends JMenu{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * HTML Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserHtml extends FinderIndexerParser{	/**	 * Method to process HTML input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		// Strip invalid UTF-8 characters.		$input = iconv("utf-8", "utf-8//IGNORE", $input);		// Strip all script tags.		$input = preg_replace('#<script[^>]*>.*?</script>#si', ' ', $input);		// Deal with spacing issues in the input.		$input = str_replace('>', '> ', $input);		$input = str_replace(array('&nbsp;', '&#160;'), ' ', $input);		$input = trim(preg_replace('#\s+#u', ' ', $input));		// Strip the tags from the input and decode entities.		$input = strip_tags($input);		$input = html_entity_decode($input, ENT_QUOTES, 'UTF-8');		$input = trim(preg_replace('#\s+#u', ' ', $input));		return $input;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_messages')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$task = JFactory::getApplication()->input->get('task');$controller	= JControllerLegacy::getInstance('Messages');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_DIRECTORY_PERMISSIONS'); ?></legend>	<table class="adminlist">		<thead>			<tr>				<th width="650">					<?php echo JText::_('COM_ADMIN_DIRECTORY'); ?>				</th>				<th>					<?php echo JText::_('COM_ADMIN_STATUS'); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="2">&#160;</td>			</tr>		</tfoot>		<tbody>			<?php foreach ($this->directory as $dir => $info) : ?>			<tr>				<td>					<?php echo JHtml::_('directory.message', $dir, $info['message']);?>				</td>				<td>					<?php echo JHtml::_('directory.writable', $info['writable']);?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Data * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JData is a class that is used to store data but allowing you to access the data * by mimicking the way PHP handles class properties. * * @package     Joomla.Platform * @subpackage  Data * @since       12.3 */class JData implements JDataDumpable, IteratorAggregate, JsonSerializable, Countable{	/**	 * The data properties.	 *	 * @var    array	 * @since  12.3	 */	private $_properties = array();	/**	 * The class constructor.	 *	 * @param   mixed  $properties  Either an associative array or another object	 *                              by which to set the initial properties of the new object.	 *	 * @since   11.1	 * @throws  InvalidArgumentException	 */	public function __construct($properties = array())	{		// Check the properties input.		if (!empty($properties))		{			// Bind the properties.			$this->bind($properties);		}	}	/**	 * The magic get method is used to get a data property.	 *	 * This method is a public proxy for the protected getProperty method.	 *	 * Note: Magic __get does not allow recursive calls. This can be tricky because the error generated by recursing into	 * __get is "Undefined property:  {CLASS}::{PROPERTY}" which is misleading. This is relevant for this class because	 * requesting a non-visible property can trigger a call to a sub-function. If that references the property directly in	 * the object, it will cause a recursion into __get.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property, or null if the data property does not exist.	 *	 * @see     JData::getProperty()	 * @since   12.3	 */	public function __get($property)	{		return $this->getProperty($property);	}	/**	 * The magic isset method is used to check the state of an object property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  boolean  True if set, otherwise false is returned.	 *	 * @since   12.3	 */	public function __isset($property)	{		return isset($this->_properties[$property]);	}	/**	 * The magic set method is used to set a data property.	 *	 * This is a public proxy for the protected setProperty method.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  void	 *	 * @see     JData::setProperty()	 * @since   12.3	 */	public function __set($property, $value)	{		$this->setProperty($property, $value);	}	/**	 * The magic unset method is used to unset a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  void	 *	 * @since   12.3	 */	public function __unset($property)	{		unset($this->_properties[$property]);	}	/**	 * Binds an array or object to this object.	 *	 * @param   mixed    $properties   An associative array of properties or an object.	 * @param   boolean  $updateNulls  True to bind null values, false to ignore null values.	 *	 * @return  JData  Returns itself to allow chaining.	 *	 * @since   12.3	 * @throws  InvalidArgumentException	 */	public function bind($properties, $updateNulls = true)	{		// Check the properties data type.		if (!is_array($properties) && !is_object($properties))		{			throw new InvalidArgumentException(sprintf('%s(%s)', __METHOD__, gettype($properties)));		}		// Check if the object is traversable.		if ($properties instanceof Traversable)		{			// Convert iterator to array.			$properties = iterator_to_array($properties);		}		// Check if the object needs to be converted to an array.		elseif (is_object($properties))		{			// Convert properties to an array.			$properties = (array) $properties;		}		// Bind the properties.		foreach ($properties as $property => $value)		{			// Check if the value is null and should be bound.			if ($value === null && !$updateNulls)			{				continue;			}			// Set the property.			$this->setProperty($property, $value);		}		return $this;	}	/**	 * Dumps the data properties into a stdClass object, recursively if appropriate.	 *	 * @param   integer           $depth   The maximum depth of recursion (default = 3).	 *                                     For example, a depth of 0 will return a stdClass with all the properties in native	 *                                     form. A depth of 1 will recurse into the first level of properties only.	 * @param   SplObjectStorage  $dumped  An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  stdClass  The data properties as a simple PHP stdClass object.	 *	 * @since   12.3	 */	public function dump($depth = 3, SplObjectStorage $dumped = null)	{		// Check if we should initialise the recursion tracker.		if ($dumped === null)		{			$dumped = new SplObjectStorage;		}		// Add this object to the dumped stack.		$dumped->attach($this);		// Setup a container.		$dump = new stdClass;		// Dump all object properties.		foreach (array_keys($this->_properties) as $property)		{			// Get the property.			$dump->$property = $this->dumpProperty($property, $depth, $dumped);		}		return $dump;	}	/**	 * Gets this object represented as an ArrayIterator.	 *	 * This allows the data properties to be access via a foreach statement.	 *	 * @return  ArrayIterator  This object represented as an ArrayIterator.	 *	 * @see     IteratorAggregate::getIterator()	 * @since   12.3	 */	public function getIterator()	{		return new ArrayIterator($this->dump(0));	}	/**	 * Gets the data properties in a form that can be serialised to JSON format.	 *	 * @return  string  An object that can be serialised by json_encode().	 *	 * @since   12.3	 */	public function jsonSerialize()	{		return $this->dump();	}	/**	 * Dumps a data property.	 *	 * If recursion is set, this method will dump any object implementing JDumpable (like JData and JDataSet); it will	 * convert a JDate object to a string; and it will convert a JRegistry to an object.	 *	 * @param   string            $property  The name of the data property.	 * @param   integer           $depth     The current depth of recursion (a value of 0 will ignore recursion).	 * @param   SplObjectStorage  $dumped    An array of already serialized objects that is used to avoid infinite loops.	 *	 * @return  mixed  The value of the dumped property.	 *	 * @since   12.3	 */	protected function dumpProperty($property, $depth, SplObjectStorage $dumped)	{		$value = $this->getProperty($property);		if ($depth > 0)		{			// Check if the object is also an dumpable object.			if ($value instanceof JDataDumpable)			{				// Do not dump the property if it has already been dumped.				if (!$dumped->contains($value))				{					$value = $value->dump($depth - 1, $dumped);				}			}			// Check if the object is a date.			if ($value instanceof JDate)			{				$value = (string) $value;			}			// Check if the object is a registry.			elseif ($value instanceof JRegistry)			{				$value = $value->toObject();			}		}		return $value;	}	/**	 * Gets a data property.	 *	 * @param   string  $property  The name of the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__get()	 * @since   12.3	 */	protected function getProperty($property)	{		// Get the raw value.		$value = array_key_exists($property, $this->_properties) ? $this->_properties[$property] : null;		return $value;	}	/**	 * Sets a data property.	 *	 * If the name of the property starts with a null byte, this method will return null.	 *	 * @param   string  $property  The name of the data property.	 * @param   mixed   $value     The value to give the data property.	 *	 * @return  mixed  The value of the data property.	 *	 * @see     JData::__set()	 * @since   12.3	 */	protected function setProperty($property, $value)	{		/*		 * Check if the property starts with a null byte. If so, discard it because a later attempt to try to access it		 * can cause a fatal error. See http://us3.php.net/manual/en/language.types.array.php#language.types.array.casting		 */		if (strpos($property, "\0") === 0)		{			return null;		}		// Set the value.		$this->_properties[$property] = $value;		return $value;	}	/**	 * Count the number of data properties.	 *	 * @return  integer  The number of data properties.	 *	 * @since   12.3	 */	public function count()	{		return count($this->_properties);	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla Installation Database Helper Class. * * @package  Joomla.Installation * @since    1.6 */abstract class InstallationHelperDatabase{	/**	 * Method to get a JDatabaseDriver object.	 *	 * @param   string   $driver    The database driver to use.	 * @param   string   $host      The hostname to connect on.	 * @param   string   $user      The user name to connect with.	 * @param   string   $password  The password to use for connection authentication.	 * @param   string   $database  The database to use.	 * @param   string   $prefix    The table prefix to use.	 * @param   boolean  $select    True if the database should be selected.	 *	 * @return  JDatabaseDriver	 *	 * @since   1.6	 */	public static function getDBO($driver, $host, $user, $password, $database, $prefix, $select = true)	{		static $db;		if (!$db)		{			// Build the connection options array.			$options = array(				'driver' => $driver,				'host' => $host,				'user' => $user,				'password' => $password,				'database' => $database,				'prefix' => $prefix,				'select' => $select			);			// Get a database object.			$db = JDatabaseDriver::getInstance($options);		}		return $db;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Access * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JAccessRule class. * * @package     Joomla.Platform * @subpackage  Access * @since       11.4 */class JAccessRule{	/**	 * A named array	 *	 * @var    array	 * @since  11.1	 */	protected $data = array();	/**	 * Constructor.	 *	 * The input array must be in the form: array(-42 => true, 3 => true, 4 => false)	 * or an equivalent JSON encoded string.	 *	 * @param   mixed  $identities  A JSON format string (probably from the database) or a named array.	 *	 * @since   11.1	 */	public function __construct($identities)	{		// Convert string input to an array.		if (is_string($identities))		{			$identities = json_decode($identities, true);		}		$this->mergeIdentities($identities);	}	/**	 * Get the data for the action.	 *	 * @return  array  A named array	 *	 * @since   11.1	 */	public function getData()	{		return $this->data;	}	/**	 * Merges the identities	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentities($identities)	{		if ($identities instanceof JAccessRule)		{			$identities = $identities->getData();		}		if (is_array($identities))		{			foreach ($identities as $identity => $allow)			{				$this->mergeIdentity($identity, $allow);			}		}	}	/**	 * Merges the values for an identity.	 *	 * @param   integer  $identity  The identity.	 * @param   boolean  $allow     The value for the identity (true == allow, false == deny).	 *	 * @return  void	 *	 * @since   11.1	 */	public function mergeIdentity($identity, $allow)	{		$identity = (int) $identity;		$allow = (int) ((boolean) $allow);		// Check that the identity exists.		if (isset($this->data[$identity]))		{			// Explicit deny always wins a merge.			if ($this->data[$identity] !== 0)			{				$this->data[$identity] = $allow;			}		}		else		{			$this->data[$identity] = $allow;		}	}	/**	 * Checks that this action can be performed by an identity.	 *	 * The identity is an integer where +ve represents a user group,	 * and -ve represents a user.	 *	 * @param   mixed  $identities  An integer or array of integers representing the identities to check.	 *	 * @return  mixed  True if allowed, false for an explicit deny, null for an implicit deny.	 *	 * @since   11.1	 */	public function allow($identities)	{		// Implicit deny by default.		$result = null;		// Check that the inputs are valid.		if (!empty($identities))		{			if (!is_array($identities))			{				$identities = array($identities);			}			foreach ($identities as $identity)			{				// Technically the identity just needs to be unique.				$identity = (int) $identity;				// Check if the identity is known.				if (isset($this->data[$identity]))				{					$result = (boolean) $this->data[$identity];					// An explicit deny wins.					if ($result === false)					{						break;					}				}			}		}		return $result;	}	/**	 * Convert this object into a JSON encoded string.	 *	 * @return  string  JSON encoded string	 *	 * @since   11.1	 */	public function __toString()	{		return json_encode($this->data);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><form action="<?php echo JRoute::_('index.php?option=com_cache'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?><table class="adminlist">	<thead>		<tr>			<th>				<?php echo JText::_('COM_CACHE_PURGE_EXPIRED_ITEMS'); ?>			</th>		</tr>	</thead>	<tbody>		<tr>			<td>			<p class="mod-purge-instruct"><?php echo JText::_('COM_CACHE_PURGE_INSTRUCTIONS'); ?></p>			<p class="warning"><?php echo JText::_('COM_CACHE_RESOURCE_INTENSIVE_WARNING'); ?></p>			</td>		</tr>	</tbody></table><div>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></div></div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User notes controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersControllerNotes extends JControllerAdmin{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_USERS_NOTES';	/**	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   2.5	 */	public function getModel($name = 'Note', $prefix = 'UsersModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Contact Component Category Tree * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__contact_details';		$options['extension'] = 'com_contact';		$options['statefield'] = 'published';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for creating a sortable table list * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlSortablelist{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the Sortable script and make table sortable	 *	 * @param   string   $tableId                 DOM id of the table	 * @param   string   $formId                  DOM id of the form	 * @param   string   $sortDir                 Sort direction	 * @param   string   $saveOrderingUrl         Save ordering url, ajax-load after an item dropped	 * @param   boolean  $proceedSaveOrderButton  Set whether a save order button is displayed	 * @param   boolean  $nestedList              Set whether the list is a nested list	 *	 * @return  void	 *	 * @since   3.0	 */	public static function sortable($tableId, $formId, $sortDir = 'asc', $saveOrderingUrl, $proceedSaveOrderButton = true, $nestedList = false)	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on jQuery UI		JHtml::_('jquery.ui', array('core', 'sortable'));		JHtml::_('script', 'jui/sortablelist.js', false, true);		JHtml::_('stylesheet', 'jui/sortablelist.css', false, true, false);		// Attach sortable to document		JFactory::getDocument()->addScriptDeclaration("			(function ($){				$(document).ready(function (){					var sortableList = new $.JSortableList('#" . $tableId . " tbody','" . $formId . "','" . $sortDir . "' , '" . $saveOrderingUrl . "','','" . $nestedList . "');				});			})(jQuery);			"		);		if ($proceedSaveOrderButton)		{			self::_proceedSaveOrderButton();		}		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to inject script for enabled and disable Save order button	 * when changing value of ordering input boxes	 *	 * @return  void	 *	 * @since   3.0	 */	public static function _proceedSaveOrderButton()	{		JFactory::getDocument()->addScriptDeclaration(			"(function ($){				$(document).ready(function (){					var saveOrderButton = $('.saveorder');					saveOrderButton.css({'opacity':'0.2', 'cursor':'default'}).attr('onclick','return false;');					var oldOrderingValue = '';					$('.text-area-order').focus(function ()					{						oldOrderingValue = $(this).attr('value');					})					.keyup(function (){						var newOrderingValue = $(this).attr('value');						if (oldOrderingValue != newOrderingValue)						{							saveOrderButton.css({'opacity':'1', 'cursor':'pointer'}).removeAttr('onclick')						}					});				});			})(jQuery);"		);		return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Controller Interface * * @package     Joomla.Platform * @subpackage  Controller * @since       12.1 */interface JController extends Serializable{	/**	 * Execute the controller.	 *	 * @return  boolean  True if controller finished execution, false if the controller did not	 *                   finish execution. A controller might return false if some precondition for	 *                   the controller to run has not been satisfied.	 *	 * @since   12.1	 * @throws  LogicException	 * @throws  RuntimeException	 */	public function execute();	/**	 * Get the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	public function getApplication();	/**	 * Get the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function getInput();}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Static class to handle loading of libraries. * * @package  Joomla.Platform * @since    11.1 */abstract class JLoader{	/**	 * Container for already imported library paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $classes = array();	/**	 * Container for already imported library paths.	 *	 * @var    array	 * @since  11.1	 */	protected static $imported = array();	/**	 * Container for registered library class prefixes and path lookups.	 *	 * @var    array	 * @since  12.1	 */	protected static $prefixes = array();	/**	 * Method to discover classes of a given type in a given path.	 *	 * @param   string   $classPrefix  The class name prefix to use for discovery.	 * @param   string   $parentPath   Full path to the parent folder for the classes to discover.	 * @param   boolean  $force        True to overwrite the autoload path value for the class if it already exists.	 * @param   boolean  $recurse      Recurse through all child directories as well as the parent path.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function discover($classPrefix, $parentPath, $force = true, $recurse = false)	{		try		{			if ($recurse)			{				$iterator = new RecursiveIteratorIterator(					new RecursiveDirectoryIterator($parentPath),					RecursiveIteratorIterator::SELF_FIRST				);			}			else			{				$iterator = new DirectoryIterator($parentPath);			}			foreach ($iterator as $file)			{				$fileName = $file->getFilename();				// Only load for php files.				// Note: DirectoryIterator::getExtension only available PHP >= 5.3.6				if ($file->isFile() && substr($fileName, strrpos($fileName, '.') + 1) == 'php')				{					// Get the class name and full path for each file.					$class = strtolower($classPrefix . preg_replace('#\.php$#', '', $fileName));					// Register the class with the autoloader if not already registered or the force flag is set.					if (empty(self::$classes[$class]) || $force)					{						self::register($class, $file->getPath() . '/' . $fileName);					}				}			}		}		catch (UnexpectedValueException $e)		{			// Exception will be thrown if the path is not a directory. Ignore it.		}	}	/**	 * Method to get the list of registered classes and their respective file paths for the autoloader.	 *	 * @return  array  The array of class => path values for the autoloader.	 *	 * @since   11.1	 */	public static function getClassList()	{		return self::$classes;	}	/**	 * Loads a class from specified directories.	 *	 * @param   string  $key   The class name to look for (dot notation).	 * @param   string  $base  Search this directory for the class.	 *	 * @return  boolean  True on success.	 *	 * @since   11.1	 */	public static function import($key, $base = null)	{		// Only import the library if not already attempted.		if (!isset(self::$imported[$key]))		{			// Setup some variables.			$success = false;			$parts = explode('.', $key);			$class = array_pop($parts);			$base = (!empty($base)) ? $base : __DIR__;			$path = str_replace('.', DIRECTORY_SEPARATOR, $key);			// Handle special case for helper classes.			if ($class == 'helper')			{				$class = ucfirst(array_pop($parts)) . ucfirst($class);			}			// Standard class.			else			{				$class = ucfirst($class);			}			// If we are importing a library from the Joomla namespace set the class to autoload.			if (strpos($path, 'joomla') === 0)			{				// Since we are in the Joomla namespace prepend the classname with J.				$class = 'J' . $class;				// Only register the class for autoloading if the file exists.				if (is_file($base . '/' . $path . '.php'))				{					self::$classes[strtolower($class)] = $base . '/' . $path . '.php';					$success = true;				}			}			/*			 * If we are not importing a library from the Joomla namespace directly include the			* file since we cannot assert the file/folder naming conventions.			*/			else			{				// If the file exists attempt to include it.				if (is_file($base . '/' . $path . '.php'))				{					$success = (bool) include_once $base . '/' . $path . '.php';				}			}			// Add the import key to the memory cache container.			self::$imported[$key] = $success;		}		return self::$imported[$key];	}	/**	 * Load the file for a class.	 *	 * @param   string  $class  The class to be loaded.	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public static function load($class)	{		// Sanitize class name.		$class = strtolower($class);		// If the class already exists do nothing.		if (class_exists($class))		{			return true;		}		// If the class is registered include the file.		if (isset(self::$classes[$class]))		{			include_once self::$classes[$class];			return true;		}		return false;	}	/**	 * Directly register a class to the autoload list.	 *	 * @param   string   $class  The class name to register.	 * @param   string   $path   Full path to the file that holds the class to register.	 * @param   boolean  $force  True to overwrite the autoload path value for the class if it already exists.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function register($class, $path, $force = true)	{		// Sanitize class name.		$class = strtolower($class);		// Only attempt to register the class if the name and file exist.		if (!empty($class) && is_file($path))		{			// Register the class with the autoloader if not already registered or the force flag is set.			if (empty(self::$classes[$class]) || $force)			{				self::$classes[$class] = $path;			}		}	}	/**	 * Register a class prefix with lookup path.  This will allow developers to register library	 * packages with different class prefixes to the system autoloader.  More than one lookup path	 * may be registered for the same class prefix, but if this method is called with the reset flag	 * set to true then any registered lookups for the given prefix will be overwritten with the current	 * lookup path.	 *	 * @param   string   $prefix  The class prefix to register.	 * @param   string   $path    Absolute file path to the library root where classes with the given prefix can be found.	 * @param   boolean  $reset   True to reset the prefix with only the given lookup path.	 *	 * @return  void	 *	 * @since   12.1	 */	public static function registerPrefix($prefix, $path, $reset = false)	{		// Verify the library path exists.		if (!file_exists($path))		{			throw new RuntimeException('Library path ' . $path . ' cannot be found.', 500);		}		// If the prefix is not yet registered or we have an explicit reset flag then set set the path.		if (!isset(self::$prefixes[$prefix]) || $reset)		{			self::$prefixes[$prefix] = array($path);		}		// Otherwise we want to simply add the path to the prefix.		else		{			self::$prefixes[$prefix][] = $path;		}	}	/**	 * Method to setup the autoloaders for the Joomla Platform.  Since the SPL autoloaders are	 * called in a queue we will add our explicit, class-registration based loader first, then	 * fall back on the autoloader based on conventions.  This will allow people to register a	 * class in a specific location and override platform libraries as was previously possible.	 *	 * @return  void	 *	 * @since   11.3	 */	public static function setup()	{		// Register the base path for Joomla platform libraries.		self::registerPrefix('J', JPATH_PLATFORM . '/joomla');		// Register the autoloader functions.		spl_autoload_register(array('JLoader', 'load'));		spl_autoload_register(array('JLoader', '_autoload'));	}	/**	 * Autoload a class based on name.	 *	 * @param   string  $class  The class to be loaded.	 *	 * @return  void	 *	 * @since   11.3	 */	private static function _autoload($class)	{		foreach (self::$prefixes as $prefix => $lookup)		{			$chr = strlen($prefix) < strlen($class) ? $class[strlen($prefix)] : 0;			if (strpos($class, $prefix) === 0 && ($chr === strtoupper($chr)))			{				return self::_load(substr($class, strlen($prefix)), $lookup);			}		}	}	/**	 * Load a class based on name and lookup array.	 *	 * @param   string  $class   The class to be loaded (wihtout prefix).	 * @param   array   $lookup  The array of base paths to use for finding the class file.	 *	 * @return  void	 *	 * @since   12.1	 */	private static function _load($class, $lookup)	{		// Split the class name into parts separated by camelCase.		$parts = preg_split('/(?<=[a-z0-9])(?=[A-Z])/x', $class);		// If there is only one part we want to duplicate that part for generating the path.		$parts = (count($parts) === 1) ? array($parts[0], $parts[0]) : $parts;		foreach ($lookup as $base)		{			// Generate the path based on the class name parts.			$path = $base . '/' . implode('/', array_map('strtolower', $parts)) . '.php';			// Load the file if it exists.			if (file_exists($path))			{				return include $path;			}		}	}}/** * Global application exit. * * This function provides a single exit point for the platform. * * @param   mixed  $message  Exit code or string. Defaults to zero. * * @return  void * * @codeCoverageIgnore * @since   11.1 */function jexit($message = 0){	exit($message);}/** * Intelligent file importer. * * @param   string  $path  A dot syntax path. * * @return  boolean  True on success. * * @since   11.1 */function jimport($path){	return JLoader::import($path);}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class adjust the smoothness of an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterSmooth extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Validate that the smoothing value exists and is an integer.		if (!isset($options[IMG_FILTER_SMOOTH]) || !is_int($options[IMG_FILTER_SMOOTH]))		{			throw new InvalidArgumentException('No valid smoothing value was given.  Expected integer.');		}		// Perform the smoothing filter.		imagefilter($this->handle, IMG_FILTER_SMOOTH, $options[IMG_FILTER_SMOOTH]);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.oauth.v2client');/** * Google OAuth authentication class * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleAuthOauth2 extends JGoogleAuth{	/**	 * @var    JOAuth2Client  OAuth client for the Google authentication object.	 * @since  12.3	 */	protected $client;	/**	 * Constructor.	 *	 * @param   JRegistry      $options  JGoogleAuth options object.	 * @param   JOAuth2Client  $client   OAuth client for Google authentication.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JOAuth2Client $client = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->client = isset($client) ? $client : new JOAuth2Client($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		$this->googlize();		return $this->client->authenticate();	}	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->client->isAuthenticated();	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function query($url, $data = null, $headers = null, $method = 'get')	{		$this->googlize();		return $this->client->query($url, $data, $headers, $method);	}	/**	 * Method to fill in Google-specific OAuth settings	 *	 * @return  JOAuth2Client  Google-configured Oauth2 client.	 *	 * @since   12.3	 */	protected function googlize()	{		if (!$this->client->getOption('authurl'))		{			$this->client->setOption('authurl', 'https://accounts.google.com/o/oauth2/auth');		}		if (!$this->client->getOption('tokenurl'))		{			$this->client->setOption('tokenurl', 'https://accounts.google.com/o/oauth2/token');		}		if (!$this->client->getOption('requestparams'))		{			$this->client->setOption('requestparams', Array());		}		$params = $this->client->getOption('requestparams');		if (!array_key_exists('access_type', $params))		{			$params['access_type'] = 'offline';		}		if ($params['access_type'] == 'offline' && $this->client->getOption('userefresh') === null)		{			$this->client->setOption('userefresh', true);		}		if (!array_key_exists('approval_prompt', $params))		{			$params['approval_prompt'] = 'auto';		}		$this->client->setOption('requestparams', $params);		return $this->client;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Type Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerMenu extends JControllerForm{	/**	 * Dummy method to redirect back to standard controller	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));	}	/**	 * Method to save a menu item.	 *	 * @return  void	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app      = JFactory::getApplication();		$data     = $this->input->post->get('jform', array(), 'array');		$context  = 'com_menus.edit.menu';		$task     = $this->getTask();		$recordId = $this->input->getInt('id');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and saved it - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list.$this->getRedirectToListAppend(), false));			return false;		}		// Make sure we are not trying to modify an administrator menu.		if (isset($data['client_id']) && $data['client_id'] == 1){			JError::raiseNotice(0, JText::_('COM_MENUS_MENU_TYPE_NOT_ALLOWED'));			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		// Populate the row id from the session.		$data['id'] = $recordId;		// Get the model and attempt to validate the posted data.		$model	= $this->getModel('Menu');		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data	= $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_menus.edit.menu.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState('com_menus.edit.menu.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));			return false;		}		$this->setMessage(JText::_('COM_MENUS_MENU_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the record data in the session.				$recordId = $model->getState($this->context.'.id');				$this->holdEditId($context, $recordId);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit'.$this->getRedirectToItemAppend($recordId), false));				break;			case 'save2new':				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context.'.data', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menu&layout=edit', false));				break;			default:				// Clear the record id and data from the session.				$this->releaseEditId($context, $recordId);				$app->setUserState($context.'.data', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=com_menus&view=menus', false));				break;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client model. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelClient extends JModelAdmin{	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))			{				if ($record->state != -2)				{					return;				}			$user = JFactory::getUser();			if (!empty($record->catid))			{				return $user->authorise('core.delete', 'com_banners.category.'.(int) $record->catid);			}			else {				return $user->authorise('core.delete', 'com_banners');			}		}	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_banners.category.'.(int) $record->catid);		}		else		{			return $user->authorise('core.edit.state', 'com_banners');		}	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	 */	public function getTable($type = 'Client', $prefix = 'BannersTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		Data for the form.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  mixed  A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_banners.client', 'client', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_banners.edit.client.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_banners.client', $data);		return $data;	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable	A JTable object.	 * @since   1.6	 */	protected function prepareTable($table)	{		$table->name = htmlspecialchars_decode($table->name, ENT_QUOTES);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract observer class to implement the observer design pattern * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */abstract class JObserver extends JObject{	/**	 * Event object to observe.	 *	 * @var    object	 * @since  11.1	 * @deprecated  12.3	 */	protected $_subject = null;	/**	 * Constructor	 *	 * @param   object  &$subject  The object to observe.	 *	 * @since   11.1	 * @deprecated  12.3	 */	public function __construct(&$subject)	{		// Register the observer ($this) so we can be notified		$subject->attach($this);		// Set the subject to observe		$this->_subject = &$subject;	}	/**	 * Method to update the state of observable objects	 *	 * @param   array  &$args  An array of arguments to pass to the listener.	 *	 * @return  mixed	 *	 * @since   11.1	 * @deprecated  12.3	 */	public abstract function update(&$args);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?><form target="_parent" action="index.php?option=com_media&amp;tmpl=index&amp;folder=<?php echo $this->state->folder; ?>" method="post" id="mediamanager-form" name="mediamanager-form">	<div class="manager">	<table class="table table-striped table-condensed">	<thead>		<tr>			<th width="1%"><?php echo JText::_('JGLOBAL_PREVIEW'); ?></th>			<th><?php echo JText::_('COM_MEDIA_NAME'); ?></th>			<th width="15%"><?php echo JText::_('COM_MEDIA_PIXEL_DIMENSIONS'); ?></th>			<th width="8%"><?php echo JText::_('COM_MEDIA_FILESIZE'); ?></th>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<th width="8%"><?php echo JText::_('JACTION_DELETE'); ?></th>		<?php endif;?>		</tr>	</thead>	<tbody>		<?php echo $this->loadTemplate('up'); ?>		<?php for ($i = 0, $n = count($this->folders); $i < $n; $i++) :			$this->setFolder($i);			echo $this->loadTemplate('folder');		endfor; ?>		<?php for ($i = 0, $n = count($this->documents); $i < $n; $i++) :			$this->setDoc($i);			echo $this->loadTemplate('doc');		endfor; ?>		<?php for ($i = 0, $n = count($this->images); $i < $n; $i++) :			$this->setImage($i);			echo $this->loadTemplate('img');		endfor; ?>	</tbody>	</table>	<input type="hidden" name="task" value="list" />	<input type="hidden" name="username" value="" />	<input type="hidden" name="password" value="" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Each object represents one query, which is one line from a DDL SQL query. * This class is used to check the site's database to see if the DDL query has been run. * If not, it provides the ability to fix the database by re-running the DDL query. * The queries are parsed from the update files in the folder * administrator/components/com_admin/sql/updates/<database>. * These updates are run automatically if the site was updated using com_installer. * However, it is possible that the program files could be updated without udpating * the database (for example, if a user just copies the new files over the top of an * existing installation). * * This is an abstract class. We need to extend it for each database and add a * buildCheckQuery() method that creates the query to check that a DDL query has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */abstract class JSchemaChangeitem{	/**	 * Update file: full path file name where query was found	 *	 * @var    string	 * @since  2.5	 */	public $file = null;	/**	 * Update query: query used to change the db schema (one line from the file)	 *	 * @var    string	 * @since  2.5	 */	public $updateQuery = null;	/**	 * Check query: query used to check the db schema	 *	 * @var    string	 * @since  2.5	 */	public $checkQuery = null;	/**	 * Check query result: expected result of check query if database is up to date	 *	 * @var    string	 * @since  2.5	 */	public $checkQueryExpected = 1;	/**	 * JDatabaseDriver object	 *	 * @var    JDatabaseDriver	 * @since  2.5	 */	public $db = null;	/**	 * Query type: To be used in building a language key for a	 * message to tell user what was checked / changed	 * Possible values: ADD_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX	 *	 * @var    string	 * @since  2.5	 */	public $queryType = null;	/**	 * Array with values for use in a JText::sprintf statment indicating what was checked	 *	 * Tells you what the message should be, based on which elements are defined, as follows:	 *     For ADD_TABLE: table	 *     For ADD_COLUMN: table, column	 *     For CHANGE_COLUMN_TYPE: table, column, type	 *     For ADD_INDEX: table, index	 *	 * @var    array	 * @since  2.5	 */	public $msgElements = array();	/**	 * Checked status	 *	 * @var    integer   0=not checked, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $checkStatus = 0;	/**	 * Rerun status	 *	 * @var    int   0=not rerun, -1=skipped, -2=failed, 1=succeeded	 * @since  2.5	 */	public $rerunStatus = 0;	/**	 * Constructor: builds check query and message from $updateQuery	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @since   2.5	 */	public function __construct($db, $file, $query)	{		$this->updateQuery = $query;		$this->file = $file;		$this->db = $db;		$this->buildCheckQuery();	}	/**	 * Returns a reference to the JSchemaChangeitem object.	 *	 * @param   JDatabaseDriver  $db     Database connector object	 * @param   string           $file   Full path name of the sql file	 * @param   string           $query  Text of the sql query (one line of the file)	 *	 * @return  JSchemaChangeitem instance based on the database driver	 *	 * @since   2.5	 * @throws  RuntimeException if class for database driver not found	 */	public static function getInstance($db, $file, $query)	{		// Get the class name		$dbname = $db->name;		if ($dbname == 'mysqli')		{			$dbname = 'mysql';		}		elseif ($dbname == 'sqlazure')		{			$dbname = 'sqlsrv';		}		$class = 'JSchemaChangeitem' . ucfirst($dbname);		// If the class exists, return it.		if (class_exists($class))		{			return new $class($db, $file, $query);		}		throw new RuntimeException(sprintf('JSchemaChangeitem child class not found for the %s database driver', $dbname), 500);	}	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	abstract protected function buildCheckQuery();	/**	 * Runs the check query and checks that 1 row is returned	 * If yes, return true, otherwise return false	 *	 * @return  boolean  true on success, false otherwise	 *	 * @since  2.5	 */	public function check()	{		$this->checkStatus = -1;		if ($this->checkQuery)		{			$this->db->setQuery($this->checkQuery);			$rows = $this->db->loadObject();			if ($rows !== false)			{				if (count($rows) === $this->checkQueryExpected)				{					$this->checkStatus = 1;				}				else				{					$this->checkStatus = -2;				}			}			else			{				$this->checkStatus = -2;			}		}		return $this->checkStatus;	}	/**	 * Runs the update query to apply the change to the database	 *	 * @return  void	 *	 * @since   2.5	 */	public function fix()	{		if ($this->checkStatus === -2)		{			// At this point we have a failed query			$this->db->setQuery($this->updateQuery);			if ($this->db->execute())			{				if ($this->check())				{					$this->checkStatus = 1;					$this->rerunStatus = 1;				}				else				{					$this->rerunStatus = -2;				}			}			else			{				$this->rerunStatus = -2;			}		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class JHtmlMessages{	/**	 * @param   int $value	The state value	 * @param   int $i	 */	public static function state($value = 0, $i, $canChange)	{		// Array of image, task, title, action.		$states	= array(			-2	=> array('trash.png',		'messages.unpublish',	'JTRASHED',				'COM_MESSAGES_MARK_AS_UNREAD'),			1	=> array('tick.png',		'messages.unpublish',	'COM_MESSAGES_OPTION_READ',		'COM_MESSAGES_MARK_AS_UNREAD'),			0	=> array('publish_x.png',	'messages.publish',		'COM_MESSAGES_OPTION_UNREAD',	'COM_MESSAGES_MARK_AS_READ')		);		$state	= JArrayHelper::getValue($states, (int) $value, $states[0]);		$html	= JHtml::_('image', 'admin/'.$state[0], JText::_($state[2]), null, true);		if ($canChange)		{			$html = '<a href="#" onclick="return listItemTask(\'cb'.$i.'\',\''.$state[1].'\')" title="'.JText::_($state[3]).'">'					.$html.'</a>';		}		return $html;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$toolbar = JToolbar::getInstance('toolbar')->render('toolbar');require JModuleHelper::getLayoutPath('mod_toolbar', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDaemon has been renamed to JApplicationDaemon.', JLog::WARNING, 'deprecated');/** * Backward Compatability Stub for JApplicationDaemon * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 * @deprecated  12.3 Use JApplicationDaemon instead. */class JDaemon extends JApplicationDaemon{	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @since   11.1	 * @deprecated  12.3 Use JApplicationDaemon instead.	 * @throws  RuntimeException	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		JLog::add('JDaemon is deprecated. Use JApplicationDaemon instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $config, $dispatcher);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="contact-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_contact.category'); ?></h2><?php endif; ?><?php if ($this->params->def('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_contact.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?><div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?></div><?php endif; ?></div>
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners Controller * * @package     Joomla.Site * @subpackage  com_banners * @since       1.5 */class BannersController extends JControllerLegacy{	public function click()	{		$id = $this->input->getInt('id', 0);		if ($id)		{			$model = $this->getModel('Banner', 'BannersModel', array('ignore_request' => true));			$model->setState('banner.id', $id);			$model->click();			$this->setRedirect($model->getUrl());		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$params =& $this->item->params;$app = JFactory::getApplication();JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');?><div class="items-more"><h3><?php echo JText::_('COM_CONTENT_MORE_ARTICLES'); ?></h3><ol><?php	foreach ($this->link_items as &$item) :?>		 <li>		  		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>		</li><?php endforeach; ?>	</ol></div>
<?php/** * @package     Joomla.Libraries * @subpackage  Editor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JEditor class to handle WYSIWYG editors * * @package     Joomla.Libraries * @subpackage  Editor * @since       1.5 */class JEditor extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  1.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  1.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  1.5	 */	protected $_methods = array();	/**	 * Editor Plugin object	 *	 * @var    object	 * @since  1.5	 */	protected $_editor = null;	/**	 * Editor Plugin name	 *	 * @var    string	 * @since  1.5	 */	protected $_name = null;	/**	 * Object asset	 *	 * @var    string	 * @since  1.6	 */	protected $asset = null;	/**	 * Object author	 *	 * @var    string	 * @since  1.6	 */	protected $author = null;	/**	 * @var    array  JEditor instances container.	 * @since  2.5	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   string  $editor  The editor name	 */	public function __construct($editor = 'none')	{		$this->_name = $editor;	}	/**	 * Returns the global Editor object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $editor  The editor to use.	 *	 * @return  JEditor The Editor object.	 *	 * @since   1.5	 */	public static function getInstance($editor = 'none')	{		$signature = serialize($editor);		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JEditor($editor);		}		return self::$instances[$signature];	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed    The state of the object.	 *	 * @since   1.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   1.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   1.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}	/**	 * Initialise the editor	 *	 * @return  void	 *	 * @since   1.5	 */	public function initialise()	{		// Check if editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args['event'] = 'onInit';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				// @todo remove code: $return .= $result;				$return = $result;			}		}		$document = JFactory::getDocument();		$document->addCustomTag($return);	}	/**	 * Display the editor area.	 *	 * @param   string   $name     The control name.	 * @param   string   $html     The contents of the text area.	 * @param   string   $width    The width of the text area (px or %).	 * @param   string   $height   The height of the text area (px or %).	 * @param   integer  $col      The number of columns for the textarea.	 * @param   integer  $row      The number of rows for the textarea.	 * @param   boolean  $buttons  True and the editor buttons will be displayed.	 * @param   string   $id       An optional ID for the textarea (note: since 1.6). If not supplied the name is used.	 * @param   string   $asset    The object asset	 * @param   object   $author   The author.	 * @param   array    $params   Associative array of editor parameters.	 *	 * @return  string	 *	 * @since   1.5	 */	public function display($name, $html, $width, $height, $col, $row, $buttons = true, $id = null, $asset = null, $author = null, $params = array())	{		$this->asset = $asset;		$this->author = $author;		$this->_loadEditor($params);		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		// Backwards compatibility. Width and height should be passed without a semicolon from now on.		// If editor plugins need a unit like "px" for CSS styling, they need to take care of that		$width = str_replace(';', '', $width);		$height = str_replace(';', '', $height);		$return = null;		$args['name'] = $name;		$args['content'] = $html;		$args['width'] = $width;		$args['height'] = $height;		$args['col'] = $col;		$args['row'] = $row;		$args['buttons'] = $buttons;		$args['id'] = $id ? $id : $name;		$args['event'] = 'onDisplay';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Save the editor content	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function save($editor)	{		$this->_loadEditor();		// Check whether editor is already loaded		if (is_null(($this->_editor)))		{			return;		}		$args[] = $editor;		$args['event'] = 'onSave';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor contents	 *	 * @param   string  $editor  The name of the editor control	 *	 * @return  string	 *	 * @since   1.5	 */	public function getContent($editor)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['event'] = 'onGetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Set the editor contents	 *	 * @param   string  $editor  The name of the editor control	 * @param   string  $html    The contents of the text area	 *	 * @return  string	 *	 * @since   1.5	 */	public function setContent($editor, $html)	{		$this->_loadEditor();		$args['name'] = $editor;		$args['html'] = $html;		$args['event'] = 'onSetContent';		$return = '';		$results[] = $this->_editor->update($args);		foreach ($results as $result)		{			if (trim($result))			{				$return .= $result;			}		}		return $return;	}	/**	 * Get the editor extended buttons (usually from plugins)	 *	 * @param   string  $editor   The name of the editor.	 * @param   mixed   $buttons  Can be boolean or array, if boolean defines if the buttons are	 *                            displayed, if array defines a list of buttons not to show.	 *	 * @return  array	 *	 * @since   1.5	 */	public function getButtons($editor, $buttons = true)	{		$result = array();		if (is_bool($buttons) && !$buttons)		{			return $result;		}		// Get plugins		$plugins = JPluginHelper::getPlugin('editors-xtd');		foreach ($plugins as $plugin)		{			if (is_array($buttons) && in_array($plugin->name, $buttons))			{				continue;			}			JPluginHelper::importPlugin('editors-xtd', $plugin->name, false);			$className = 'plgButton' . $plugin->name;			if (class_exists($className))			{				$plugin = new $className($this, (array) $plugin);			}			// Try to authenticate			if ($temp = $plugin->onDisplay($editor, $this->asset, $this->author))			{				$result[] = $temp;			}		}		return $result;	}	/**	 * Load the editor	 *	 * @param   array  $config  Associative array of editor config paramaters	 *	 * @return  mixed	 *	 * @since   1.5	 */	protected function _loadEditor($config = array())	{		// Check whether editor is already loaded		if (!is_null(($this->_editor)))		{			return;		}		// Build the path to the needed editor plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/editors/' . $name . '.php';		if (!is_file($path))		{			$path = JPATH_PLUGINS . '/editors/' . $name . '/' . $name . '.php';			if (!is_file($path))			{				JLog::add(JText::_('JLIB_HTML_EDITOR_CANNOT_LOAD'), JLog::WARNING, 'jerror');				return false;			}		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('editors', $this->_name);		$params = new JRegistry;		$params->loadString($plugin->params);		$params->loadArray($config);		$plugin->params = $params;		// Build editor plugin classname		$name = 'plgEditor' . $this->_name;		if ($this->_editor = new $name($this, (array) $plugin))		{			// Load plugin parameters			$this->initialise();			JPluginHelper::importPlugin('editors-xtd');		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Password Hashing Interface * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.2 */interface JCryptPassword{	const BLOWFISH = '$2y$';	const JOOMLA = 'Joomla';	const PBKDF = '$pbkdf$';	const MD5 = '$1$';	/**	 * Creates a password hash	 *	 * @param   string  $password  The password to hash.	 * @param   string  $prefix    The prefix of the hashing function.	 *	 * @return  string  The hashed password.	 *	 * @since   12.2	 */	public function create($password, $prefix = '$2a$');	/**	 * Verifies a password hash	 *	 * @param   string  $password  The password to verify.	 * @param   string  $hash      The password hash to check.	 *	 * @return  boolean  True if the password is valid, false otherwise.	 *	 * @since   12.2	 */	public function verify($password, $hash);}
<?php/** * @package     Joomla.Legacy * @subpackage  Menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JMenu class * * @package     Joomla.Legacy * @subpackage  Menu * @since       11.1 */class JMenu{	/**	 * Array to hold the menu items	 *	 * @var    array	 * @since   11.1	 */	protected $_items = array();	/**	 * Identifier of the default menu item	 *	 * @var    integer	 * @since   11.1	 */	protected $_default = array();	/**	 * Identifier of the active menu item	 *	 * @var    integer	 * @since  11.1	 */	protected $_active = 0;	/**	 * @var    array  JMenu instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Class constructor	 *	 * @param   array  $options  An array of configuration options.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		// Load the menu items		$this->load();		foreach ($this->_items as $item)		{			if ($item->home)			{				$this->_default[trim($item->language)] = $item->id;			}			// Decode the item params			$result = new JRegistry;			$result->loadString($item->params);			$item->params = $result;		}	}	/**	 * Returns a JMenu object	 *	 * @param   string  $client   The name of the client	 * @param   array   $options  An associative array of options	 *	 * @return  JMenu  A menu object.	 *	 * @since   11.1	 */	public static function getInstance($client, $options = array())	{		if (empty(self::$instances[$client]))		{			// Create a JMenu object			$classname = 'JMenu' . ucfirst($client);			if (!class_exists($classname))			{				// @deprecated 13.3 Everything in this block is deprecated but the warning is only logged after the file_exists				// Load the menu object				$info = JApplicationHelper::getClientInfo($client, true);				if (is_object($info))				{					$path = $info->path . '/includes/menu.php';					if (file_exists($path))					{						JLog::add('Non-autoloadable JMenu subclasses are deprecated.', JLog::WARNING, 'deprecated');						include_once $path;					}				}			}			if (class_exists($classname))			{				self::$instances[$client] = new $classname($options);			}			else			{				throw new Exception(JText::sprintf('JLIB_APPLICATION_ERROR_MENU_LOAD', $client), 500);			}		}		return self::$instances[$client];	}	/**	 * Get menu item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed    The item object, or null if not found	 *	 * @since   11.1	 */	public function getItem($id)	{		$result = null;		if (isset($this->_items[$id]))		{			$result = &$this->_items[$id];		}		return $result;	}	/**	 * Set the default item by id and language code.	 *	 * @param   integer  $id        The menu item id.	 * @param   string   $language  The language cod (since 1.6).	 *	 * @return  boolean  True, if successful	 *	 * @since   11.1	 */	public function setDefault($id, $language = '')	{		if (isset($this->_items[$id]))		{			$this->_default[$language] = $id;			return true;		}		return false;	}	/**	 * Get the default item by language code.	 *	 * @param   string  $language  The language code, default value of * means all.	 *	 * @return  object  The item object	 *	 * @since   11.1	 */	public function getDefault($language = '*')	{		if (array_key_exists($language, $this->_default))		{			return $this->_items[$this->_default[$language]];		}		elseif (array_key_exists('*', $this->_default))		{			return $this->_items[$this->_default['*']];		}		else		{			return 0;		}	}	/**	 * Set the default item by id	 *	 * @param   integer  $id  The item id	 *	 * @return  mixed  If successful the active item, otherwise null	 *	 * @since   11.1	 */	public function setActive($id)	{		if (isset($this->_items[$id]))		{			$this->_active = $id;			$result = &$this->_items[$id];			return $result;		}		return null;	}	/**	 * Get menu item by id.	 *	 * @return  object  The item object.	 *	 * @since   11.1	 */	public function getActive()	{		if ($this->_active)		{			$item = &$this->_items[$this->_active];			return $item;		}		return null;	}	/**	 * Gets menu items by attribute	 *	 * @param   string   $attributes  The field name	 * @param   string   $values      The value of the field	 * @param   boolean  $firstonly   If true, only returns the first item found	 *	 * @return  array	 *	 * @since   11.1	 */	public function getItems($attributes, $values, $firstonly = false)	{		$items = array();		$attributes = (array) $attributes;		$values = (array) $values;		foreach ($this->_items as $item)		{			if (!is_object($item))			{				continue;			}			$test = true;			for ($i = 0, $count = count($attributes); $i < $count; $i++)			{				if (is_array($values[$i]))				{					if (!in_array($item->$attributes[$i], $values[$i]))					{						$test = false;						break;					}				}				else				{					if ($item->$attributes[$i] != $values[$i])					{						$test = false;						break;					}				}			}			if ($test)			{				if ($firstonly)				{					return $item;				}				$items[] = $item;			}		}		return $items;	}	/**	 * Gets the parameter object for a certain menu item	 *	 * @param   integer  $id  The item id	 *	 * @return  JRegistry  A JRegistry object	 *	 * @since   11.1	 */	public function getParams($id)	{		if ($menu = $this->getItem($id))		{			return $menu->params;		}		else		{			return new JRegistry;		}	}	/**	 * Getter for the menu array	 *	 * @return  array	 *	 * @since   11.1	 */	public function getMenu()	{		return $this->_items;	}	/**	 * Method to check JMenu object authorization against an access control	 * object and optionally an access extension object	 *	 * @param   integer  $id  The menu id	 *	 * @return  boolean  True if authorised	 *	 * @since   11.1	 */	public function authorise($id)	{		$menu = $this->getItem($id);		$user = JFactory::getUser();		if ($menu)		{			return in_array((int) $menu->access, $user->getAuthorisedViewLevels());		}		else		{			return true;		}	}	/**	 * Loads the menu items	 *	 * @return  array	 *	 * @since   11.1	 */	public function load()	{		return array();	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML helper class for rendering numbers. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlNumber{	/**	 * Converts bytes to more distinguishable formats such as:	 * kilobytes, megabytes, etc.	 *	 * By default, the proper format will automatically be chosen.	 * However, one of the allowed unit types may also be used instead.	 *	 * @param   integer  $bytes      The number of bytes.	 * @param   string   $unit       The type of unit to return.	 * @param   integer  $precision  The number of digits to be used after the decimal place.	 *	 * @return  string   The number of bytes in the proper units.	 *	 * @since   11.1	 */	public static function bytes($bytes, $unit = 'auto', $precision = 2)	{		// No explicit casting $bytes to integer here, since it might overflow		// on 32-bit systems		$precision = (int) $precision;		if (empty($bytes))		{			return 0;		}		$unitTypes = array('b', 'kb', 'MB', 'GB', 'TB', 'PB');		// Default automatic method.		$i = floor(log($bytes, 1024));		// User supplied method:		if ($unit !== 'auto' && in_array($unit, $unitTypes))		{			$i = array_search($unit, $unitTypes, true);		}		// TODO Allow conversion of units where $bytes = '32M'.		return round($bytes / pow(1024, $i), $precision) . ' ' . $unitTypes[$i];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect link list controller class. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectControllerLinks extends JControllerAdmin{	/**	 * Method to update a record.	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids     = $this->input->get('cid', array(), 'array');		$newUrl  = $this->input->getString('new_url');		$comment = $this->input->getString('comment');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_REDIRECT_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			JArrayHelper::toInteger($ids);			// Remove the items.			if (!$model->activate($ids, $newUrl, $comment))			{				JError::raiseWarning(500, $model->getError());			}			else {				$this->setMessage(JText::plural('COM_REDIRECT_N_LINKS_UPDATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_redirect&view=links');	}	/**	 * Proxy for getModel.	 * @since   1.6	 */	public function getModel($name = 'Link', $prefix = 'RedirectModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Event * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to handle dispatching of events. * * This is the Observable part of the Observer design pattern * for the event architecture. * * @package     Joomla.Platform * @subpackage  Event * @link        http://docs.joomla.org/Tutorial:Plugins Plugin tutorials * @see         JPlugin * @since       12.1 */class JEventDispatcher extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  11.3	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  11.3	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  11.3	 */	protected $_methods = array();	/**	 * Stores the singleton instance of the dispatcher.	 *	 * @var    JEventDispatcher	 * @since  11.3	 */	protected static $instance = null;	/**	 * Returns the global Event Dispatcher object, only creating it	 * if it doesn't already exist.	 *	 * @return  JEventDispatcher  The EventDispatcher object.	 *	 * @since   11.1	 */	public static function getInstance()	{		if (self::$instance === null)		{			self::$instance = new static;		}		return self::$instance;	}	/**	 * Get the state of the JEventDispatcher object	 *	 * @return  mixed    The state of the object.	 *	 * @since   11.3	 */	public function getState()	{		return $this->_state;	}	/**	 * Registers an event handler to the event dispatcher	 *	 * @param   string  $event    Name of the event to register handler for	 * @param   string  $handler  Name of the event handler	 *	 * @return  void	 *	 * @since   11.1	 * @throws InvalidArgumentException	 */	public function register($event, $handler)	{		// Are we dealing with a class or callback type handler?		if (is_callable($handler))		{			// Ok, function type event handler... let's attach it.			$method = array('event' => $event, 'handler' => $handler);			$this->attach($method);		}		elseif (class_exists($handler))		{			// Ok, class type event handler... let's instantiate and attach it.			$this->attach(new $handler($this));		}		else		{			throw new InvalidArgumentException('Invalid event handler.');		}	}	/**	 * Triggers an event by dispatching arguments to all observers that handle	 * the event and returning their return values.	 *	 * @param   string  $event  The event to trigger.	 * @param   array   $args   An array of arguments.	 *	 * @return  array  An array of results from each function call.	 *	 * @since   11.1	 */	public function trigger($event, $args = array())	{		$result = array();		/*		 * If no arguments were passed, we still need to pass an empty array to		 * the call_user_func_array function.		 */		$args = (array) $args;		$event = strtolower($event);		// Check if any plugins are attached to the event.		if (!isset($this->_methods[$event]) || empty($this->_methods[$event]))		{			// No Plugins Associated To Event!			return $result;		}		// Loop through all plugins having a method matching our event		foreach ($this->_methods[$event] as $key)		{			// Check if the plugin is present.			if (!isset($this->_observers[$key]))			{				continue;			}			// Fire the event for an object based observer.			if (is_object($this->_observers[$key]))			{				$args['event'] = $event;				$value = $this->_observers[$key]->update($args);			}			// Fire the event for a function based observer.			elseif (is_array($this->_observers[$key]))			{				$value = call_user_func_array($this->_observers[$key]['handler'], $args);			}			if (isset($value))			{				$result[] = $value;			}		}		return $result;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   11.3	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEvent))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   11.3	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher interface. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */interface JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 */	public function decrypt($data, JCryptKey $key);	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 */	public function encrypt($data, JCryptKey $key);	/**	 * Method to generate a new encryption key[/pair] object.	 * 	 * @param   array  $options  Key generation options.	 * 	 * @return  JCryptKey	 * 	 * @since   12.1	 */	public function generateKey(array $options = array());}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Displays the multilang status. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.7.1 */class LanguagesViewMultilangstatus extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		require_once JPATH_COMPONENT . '/helpers/multilangstatus.php';		$this->homes			= MultilangstatusHelper::getHomes();		$this->language_filter	= JLanguageMultilang::isEnabled();		$this->switchers		= MultilangstatusHelper::getLangswitchers();		$this->listUsersError	= MultilangstatusHelper::getContacts();		$this->contentlangs		= MultilangstatusHelper::getContentlangs();		$this->site_langs		= MultilangstatusHelper::getSitelangs();		$this->statuses			= MultilangstatusHelper::getStatus();		$this->homepages		= MultilangstatusHelper::getHomepages();		parent::display($tpl);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusPeople extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Get a person's profile.	 *	 * @param   string  $id      The ID of the person to get the profile for. The special value "me" can be used to indicate the authenticated user.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getPeople($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Search all public profiles.	 *	 * @param   string   $query     Specify a query string for full text search of public text in all profiles.	 * @param   string   $fields    Used to specify the fields you want returned.	 * @param   string   $language  Specify the preferred language to search with. https://developers.google.com/+/api/search#available-languages	 * @param   integer  $max       The maximum number of people to include in the response, used for paging.	 * @param   string   $token     The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function search($query, $fields = null, $language = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'people?query=' . urlencode($query);			// Check if fields is specified.			if ($fields)			{				$url .= '&fields=' . $fields;			}			// Check if language is specified.			if ($language)			{				$url .= '&language=' . $language;			}			// Check if max is specified.			if ($max != 10)			{				$url .= '&maxResults=' . $max;			}			// Check of token is specified.			if ($token)			{				$url .= '&pageToken=' . $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * List all of the people in the specified collection for a particular activity.	 *	 * @param   string   $activityId  The ID of the activity to get the list of people for.	 * @param   string   $collection  The collection of people to list. Acceptable values are "plusoners" and "resharers".	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listByActivity($activityId, $collection, $fields = null, $max = 10, $token = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/people/' . $collection;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 10)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Help * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Help system class * * @package     Joomla.Libraries * @subpackage  Help * @since       1.5 */class JHelp{	/**	 * Create a URL for a given help key reference	 *	 * @param   string   $ref           The name of the help screen (its key reference)	 * @param   boolean  $useComponent  Use the help file in the component directory	 * @param   string   $override      Use this URL instead of any other	 * @param   string   $component     Name of component (or null for current component)	 *	 * @return  string	 *	 * @since   1.5	 */	public static function createURL($ref, $useComponent = false, $override = null, $component = null)	{		$local = false;		$app = JFactory::getApplication();		if (is_null($component))		{			$component = JApplicationHelper::getComponentName();		}		//  Determine the location of the help file.  At this stage the URL		//  can contain substitution codes that will be replaced later.		if ($override)		{			$url = $override;		}		else		{			// Get the user help URL.			$user = JFactory::getUser();			$url = $user->getParam('helpsite');			// If user hasn't specified a help URL, then get the global one.			if ($url == '')			{				$url = $app->getCfg('helpurl');			}			// Component help URL overrides user and global.			if ($useComponent)			{				// Look for help URL in component parameters.				$params = JComponentHelper::getParams($component);				$url = $params->get('helpURL');				if ($url == '')				{					$local = true;					$url = 'components/{component}/help/{language}/{keyref}';				}			}			// Set up a local help URL.			if (!$url)			{				$local = true;				$url = 'help/{language}/{keyref}';			}		}		// If the URL is local then make sure we have a valid file extension on the URL.		if ($local)		{			if (!preg_match('#\.html$|\.xml$#i', $ref))			{				$url .= '.html';			}		}		/*		 *  Replace substitution codes in the URL.		 */		$lang = JFactory::getLanguage();		$version = new JVersion;		$jver = explode('.', $version->getShortVersion());		$jlang = explode('-', $lang->getTag());		$debug = $lang->setDebug(false);		$keyref = JText::_($ref);		$lang->setDebug($debug);		// Replace substitution codes in help URL.		$search = array(			// Application name (eg. 'Administrator')			'{app}',			// Component name (eg. 'com_content')			'{component}',			// Help screen key reference			'{keyref}',			// Full language code (eg. 'en-GB')			'{language}',			// Short language code (eg. 'en')			'{langcode}',			// Region code (eg. 'GB')			'{langregion}',			// Joomla major version number			'{major}',			// Joomla minor version number			'{minor}',			// Joomla maintenance version number			'{maintenance}'		);		$replace = array(			// {app}			$app->getName(),			// {component}			$component,			// {keyref}			$keyref,			// {language}			$lang->getTag(),			// {langcode}			$jlang[0],			// {langregion}			$jlang[1],			// {major}			$jver[0],			// {minor}			$jver[1],			// {maintenance}			$jver[2]		);		// If the help file is local then check it exists.		// If it doesn't then fallback to English.		if ($local)		{			$try = str_replace($search, $replace, $url);			if (!is_file(JPATH_BASE . '/' . $try))			{				$replace[3] = 'en-GB';				$replace[4] = 'en';				$replace[5] = 'GB';			}		}		$url = str_replace($search, $replace, $url);		return $url;	}	/**	 * Builds a list of the help sites which can be used in a select option.	 *	 * @param   string  $pathToXml  Path to an XML file.	 *	 * @return  array  An array of arrays (text, value, selected).	 *	 * @since   1.5	 */	public static function createSiteList($pathToXml)	{		$list = array();		$xml = false;		if (!empty($pathToXml))		{			$xml = simplexml_load_file($pathToXml);		}		if (!$xml)		{			$option['text'] = 'English (GB) help.joomla.org';			$option['value'] = 'http://help.joomla.org';			$list[] = $option;		}		else		{			$option = array();			foreach ($xml->sites->site as $site)			{				$option['text'] = (string) $site;				$option['value'] = (string) $site->attributes()->url;				$list[] = $option;			}		}		return $list;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to add an edge detect effect to an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEdgedetect extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			// @codeCoverageIgnoreStart			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');			// @codeCoverageIgnoreEnd		}		// Perform the edge detection filter.		imagefilter($this->handle, IMG_FILTER_EDGEDETECT);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * WINCACHE cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.wincache.php * @since       11.1 */class JCacheStorageWincache extends JCacheStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		parent::__construct($options);	}	/**	 * Get cached data from WINCACHE by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$cache_content = wincache_ucache_get($cache_id);		return $cache_content;	}	/**	 * Get all cached data	 *	 * @return  array    data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = wincache_ucache_info();		$keys = $allinfo['cache_entries'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$name = $key['key_name'];			$namearr = explode('-', $name);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				if (isset($key['value_size']))				{					$item->updateSize($key['value_size'] / 1024);				}				else				{					// Dummy, WINCACHE version is too low.					$item->updateSize(1);				}				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data to WINCACHE by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		return wincache_ucache_set($cache_id, $data, $this->_lifetime);	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		return wincache_ucache_delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = wincache_ucache_info();		$keys = $allinfo['cache_entries'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['key_name'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				wincache_ucache_delete($key['key_name']);			}		}		return true;	}	/**	 * Force garbage collect expired cache data as items are removed only on get/add/delete/info etc	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		$allinfo = wincache_ucache_info();		$keys = $allinfo['cache_entries'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['key_name'], $secret . '-cache-'))			{				wincache_ucache_get($key['key_name']);			}		}	}	/**	 * Test to see if the cache storage is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		$test = extension_loaded('wincache') && function_exists('wincache_ucache_get') && !strcmp(ini_get('wincache.ucenabled'), '1');		return $test;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;include_once __DIR__ . '/../default/view.php';/** * Extension Manager Templates View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       1.6 */class InstallerViewWarnings extends InstallerViewDefault{	/**	 * Display the view	 *	 * @param   string  $tpl  Template	 *	 * @return  void	 *	 * @since   1.6	 */	public function display($tpl = null)	{		$items = $this->get('Items');		$this->messages = &$items;		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @return  void	 *	 * @since   1.6	 */	protected function addToolbar()	{		parent::addToolbar();		JToolbarHelper::help('JHELP_EXTENSIONS_EXTENSION_MANAGER_WARNINGS');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user = JFactory::getUser();?>		<tr>			<td class="imgTotal">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">					<i class="icon-arrow-up"></i></a>			</td>			<td class="description">				<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->parent; ?>" target="folderframe">..</a>			</td>			<td>&#160;</td>			<td>&#160;</td>		<?php if ($user->authorise('core.delete', 'com_media')):?>			<td>&#160;</td>		<?php endif;?>		</tr>
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.multiselect');JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));$version = new JVersion;?><div id="installer-languages">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=languages');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if (count($this->items) || $this->escape($this->state->get('filter.search'))) : ?>			<?php echo $this->loadTemplate('filter'); ?>			<table class="adminlist">				<thead>					<tr>						<th width="20" class="nowrap hidden-phone">							<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />						</th>						<th class="nowrap">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_NAME', 'name', $listDirn, $listOrder); ?>						</th>						<th width="10%" class="center">							<?php echo JText::_('JVERSION'); ?>						</th>						<th class="center nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_TYPE'); ?>						</th>						<th width="35%" class="nowrap hidden-phone">							<?php echo JText::_('COM_INSTALLER_HEADING_DETAILS_URL'); ?>						</th>						<th width="30" class="nowrap hidden-phone">							<?php echo JHtml::_('grid.sort', 'COM_INSTALLER_HEADING_ID', 'update_id', $listDirn, $listOrder); ?>						</th>					</tr>				</thead>				<tbody>					<?php foreach ($this->items as $i => $language) : ?>					<tr class="row<?php echo $i % 2; ?>">						<td class="hidden-phone">							<?php echo JHtml::_('grid.id', $i, $language->update_id, false, 'cid'); ?>						</td>						<td>							<?php echo $language->name; ?>							<?php // Display a Note if language pack version is not equal to Joomla version ?>							<?php if (substr($language->version, 0, 3) != $version->RELEASE									|| substr($language->version, 0, 5) != $version->RELEASE . "." . $version->DEV_LEVEL) : ?>								<div class="small"><?php echo JText::_('JGLOBAL_LANGUAGE_VERSION_NOT_PLATFORM'); ?></div>							<?php endif; ?>						</td>						<td class="center">							<?php echo $language->version; ?>						</td>						<td class="center">							<?php echo JText::_('COM_INSTALLER_TYPE_' . strtoupper($language->type)); ?>						</td>						<td>							<?php echo $language->detailsurl; ?>						</td>						<td class="center">							<?php echo $language->update_id; ?>						</td>					</tr>					<?php endforeach; ?>				</tbody>			</table>			<?php echo $this->pagination->getListFooter(); ?>		<?php else : ?>			<div class="alert"><?php echo JText::_('COM_INSTALLER_MSG_LANGUAGES_NOLANGUAGES'); ?></div>		<?php endif; ?>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Plugin * @subpackage  Quickicon.Joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! udpate notification plugin * * @package     Joomla.Plugin * @subpackage  Quickicon.Joomlaupdate * @since       2.5 */class PlgQuickiconJoomlaupdate extends JPlugin{	/**	 * Load the language file on instantiation.	 *	 * @var    boolean	 * @since  3.1	 */	protected $autoloadLanguage = true;	/**	 * This method is called when the Quick Icons module is constructing its set	 * of icons. You can return an array which defines a single icon and it will	 * be rendered right after the stock Quick Icons.	 *	 * @param  $context  The calling context	 *	 * @return array A list of icon definition associative arrays, consisting of the	 *				 keys link, image, text and access.	 *	 * @since       2.5	 */	public function onGetIcons($context)	{		if ($context != $this->params->get('context', 'mod_quickicon') || !JFactory::getUser()->authorise('core.manage', 'com_installer'))		{			return;		}		JHtml::_('jquery.framework');		$cur_template = JFactory::getApplication()->getTemplate();		$ajax_url = JURI::base().'index.php?option=com_installer&view=update&task=update.ajax';		$script = "var plg_quickicon_joomlaupdate_ajax_url = '$ajax_url';\n";		$script .= 'var plg_quickicon_jupdatecheck_jversion = "'.JVERSION.'";'."\n";		$script .= 'var plg_quickicon_joomlaupdate_text = {"UPTODATE" : "'.			JText::_('PLG_QUICKICON_JOOMLAUPDATE_UPTODATE', true).'", "UPDATEFOUND": "'.			JText::_('PLG_QUICKICON_JOOMLAUPDATE_UPDATEFOUND', true).'", "ERROR": "'.			JText::_('PLG_QUICKICON_JOOMLAUPDATE_ERROR', true)."\"};\n";		$script .= 'var plg_quickicon_joomlaupdate_img = {"UPTODATE" : "'.			JURI::base(true) .'/templates/'. $cur_template .'/images/header/icon-48-jupdate-uptodate.png'.'", "ERROR": "'.			JURI::base(true) .'/templates/'. $cur_template .'/images/header/icon-48-deny.png'.'", "UPDATEFOUND": "'.			JURI::base(true) .'/templates/'. $cur_template .'/images/header/icon-48-jupdate-updatefound.png'."\"};\n";		$document = JFactory::getDocument();		$document->addScriptDeclaration($script);		JHtml::_('script', 'plg_quickicon_joomlaupdate/jupdatecheck.js', false, true);		return array(array(			'link' => 'index.php?option=com_joomlaupdate',			'image' => 'download',			'icon' => 'header/icon-48-download.png',			'text' => JText::_('PLG_QUICKICON_JOOMLAUPDATE_CHECKING'),			'id' => 'plg_quickicon_joomlaupdate'		));	}}
#!/usr/bin/php<?phpif (php_sapi_name() != "cli"){	echo "Error: phptidy has to be run on command line with CLI SAPI\n";	exit(1);}function getDirectory($path = '.', $level = 0){	$iterator  = new RecursiveDirectoryIterator($path, FilesystemIterator::KEY_AS_PATHNAME | FilesystemIterator::CURRENT_AS_FILEINFO | FilesystemIterator::SKIP_DOTS);	$flattened = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);	foreach ($flattened as $path => $dir)	{		if (!$dir->isDir())		{			continue;		}		// Add an index.html if neither an index.html nor an index.php exist		if (!(file_exists($path . '/index.html') || file_exists($path . '/index.php')))		{			file_put_contents($path . '/index.html', '<!DOCTYPE html><title></title>' . "\n");		}	}}$work = $_SERVER['argv'][1];echo "Working on directory " . $work . "\n";getDirectory($_SERVER['argv'][1]);
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! W3c Logging class * * This class is designed to build log files based on the W3c specification * at: http://www.w3.org/TR/WD-logfile.html * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerW3c extends JLogLoggerFormattedtext{	/**	 * @var    string  The format which each entry follows in the log file.  All fields must be	 * named in all caps and be within curly brackets eg. {FOOBAR}.	 * @since  11.1	 */	protected $format = '{DATE}	{TIME}	{PRIORITY}	{CLIENTIP}	{CATEGORY}	{MESSAGE}';	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// The name of the text file defaults to 'error.w3c.php' if not explicitly given.		if (empty($options['text_file']))		{			$options['text_file'] = 'error.w3c.php';		}		// Call the parent constructor.		parent::__construct($options);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_CONFIGURATION_FILE'); ?></legend>		<table class="table table-striped">			<thead>				<tr>					<th width="300">						<?php echo JText::_('COM_ADMIN_SETTING'); ?>					</th>					<th>						<?php echo JText::_('COM_ADMIN_VALUE'); ?>					</th>				</tr>			</thead>			<tfoot>				<tr>					<td colspan="2">&#160;</td>				</tr>			</tfoot>			<tbody>				<?php foreach ($this->config as $key => $value):?>					<tr>						<td>							<?php echo $key;?>						</td>						<td>							<?php echo htmlspecialchars($value, ENT_QUOTES);?>						</td>					</tr>				<?php endforeach;?>			</tbody>		</table></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$pageClass = $this->params->get('pageclass_sfx');?><section class="category-list<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title') or $this->params->get('page_subheading'))) : ?><hgroup><?php endif; ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading')) : ?><h2>	<?php echo $this->escape($this->params->get('page_subheading')); ?>	<?php if ($this->params->get('show_category_title'))	{		echo '<span class="subheading-category">'.$this->category->title.'</span>';	}	?></h2><?php if ($this->params->get('show_page_heading') and ($this->params->get('show_category_title', 1) or $this->params->get('page_subheading'))) : ?></hgroup><?php endif; ?><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_content.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php if (is_array($this->children[$this->category->id]) && count($this->children[$this->category->id]) > 0 && $this->params->get('maxLevel') != 0) : ?>		<div class="cat-children">	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '<h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '<h2>';	} ?>    <?php if ($this->params->get('show_category_heading_title_text', 1) == 1) : ?>		<?php echo JTEXT::_('JGLOBAL_SUBCATEGORIES'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_category_title') or $this->params->get('page_subheading'))	{		echo '</h3>';	}	elseif ($this->params->get('show_category_heading_title_text', 1) == 1)	{		echo '</h2>';	} ?>		</div>	<?php endif; ?>		<?php echo $this->loadTemplate('children'); ?>			<div class="cat-items">		<?php echo $this->loadTemplate('articles'); ?>	</div></section>
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="category-name">				<?php $title = $this->escape($displayData['item']->category_title);				$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($displayData['item']->catslug)).'">'.$title.'</a>';?>				<?php if ($displayData['params']->get('link_category') && $displayData['item']->catslug) : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>					<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Utility class working with languages * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */abstract class JHtmlLanguages{	/**	 * Method to generate an information about the default language	 *	 * @param   boolean	$published is the language the default?	 *	 * @return  string	html code	 */	public static function published($published)	{		if ($published)		{			return JHtml::_('image', 'menu/icon-16-default.png', JText::_('COM_LANGUAGES_HEADING_DEFAULT'), null, true);		}		else		{			return '&#160;';		}	}	/**	 * Method to generate an input radio button	 *	 * @param   integer  $rowNum the row number	 * @param   string	language tag	 *	 * @return  string	html code	 */	public static function id($rowNum, $language)	{		return '<input type="radio" id="cb' . $rowNum . '" name="cid" value="' . htmlspecialchars($language) . '" onclick="Joomla.isChecked(this.checked);" title="' . ($rowNum + 1) . '"/>';	}	public static function clients()	{		return array(			JHtml::_('select.option', 0, JText::_('JSITE')),			JHtml::_('select.option', 1, JText::_('JADMINISTRATOR'))		);	}	/**	 * Returns an array of published state filter options.	 *	 * @return  string  	The HTML code for the select tag	 * @since   1.6	 */	public static function publishedOptions()	{		// Build the active state filter options.		$options	= array();		$options[]	= JHtml::_('select.option', '1', 'JPUBLISHED');		$options[]	= JHtml::_('select.option', '0', 'JUNPUBLISHED');		$options[]	= JHtml::_('select.option', '-2', 'JTRASHED');		$options[]	= JHtml::_('select.option', '*', 'JALL');		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (JPluginHelper::isEnabled('user', 'profile')) :	$fields = $this->item->profile->getFieldset('profile'); ?><div class="contact-profile" id="users-profile-custom">	<dl class="dl-horizontal">	<?php foreach ($fields as $profile) :		if ($profile->value) :			echo '<dt>'.$profile->label.'</dt>';			$profile->text = htmlspecialchars($profile->value, ENT_COMPAT, 'UTF-8');			switch ($profile->id) :				case "profile_website":					$v_http = substr($profile->profile_value, 0, 4);					if ($v_http == "http") :						echo '<dd><a href="'.$profile->text.'">'.$profile->text.'</a></dd>';					else :						echo '<dd><a href="http://'.$profile->text.'">'.$profile->text.'</a></dd>';					endif;					break;				default:					echo '<dd>'.$profile->text.'</dd>';					break;			endswitch;		endif;	endforeach; ?>	</dl></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Model * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheModelCache extends JModelList{	/**	 * An Array of CacheItems indexed by cache group ID	 *	 * @var Array	 */	protected $_data = array();	/**	 * Group total	 *	 * @var integer	 */	protected $_total = null;	/**	 * Pagination object	 *	 * @var object	 */	protected $_pagination = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$clientId = $this->getUserStateFromRequest($this->context.'.filter.client_id', 'filter_client_id', 0, 'int');		$this->setState('clientId', $clientId == 1 ? 1 : 0);		$client	= JApplicationHelper::getClientInfo($clientId);		$this->setState('client', $client);		parent::populateState('group', 'asc');	}	/**	 * Method to get cache data	 *	 * @return array	 */	public function getData()	{		if (empty($this->_data))		{			$cache = $this->getCache();			$data  = $cache->getAll();			if ($data != false)			{				$this->_data = $data;				$this->_total = count($data);				if ($this->_total)				{					// Apply custom ordering					$ordering 	= $this->getState('list.ordering');					$direction 	= ($this->getState('list.direction') == 'asc') ? 1 : -1;					jimport('joomla.utilities.arrayhelper');					$this->_data = JArrayHelper::sortObjects($data, $ordering, $direction);					// Apply custom pagination					if ($this->_total > $this->getState('list.limit') && $this->getState('list.limit'))					{						$this->_data = array_slice($this->_data, $this->getState('list.start'), $this->getState('list.limit'));					}				}			} else {				$this->_data = array();			}		}		return $this->_data;	}	/**	 * Method to get cache instance	 *	 * @return object	 */	public function getCache()	{		$conf = JFactory::getConfig();		$options = array(			'defaultgroup'	=> '',			'storage' 		=> $conf->get('cache_handler', ''),			'caching'		=> true,			'cachebase'		=> ($this->getState('clientId') == 1) ? JPATH_ADMINISTRATOR . '/cache' : $conf->get('cache_path', JPATH_SITE . '/cache')		);		$cache = JCache::getInstance('', $options);		return $cache;	}	/**	 * Method to get client data	 *	 * @return array	 */	public function getClient()	{		return $this->getState('client');	}	/**	 * Get the number of current Cache Groups	 *	 * @return  int	 */	public function getTotal()	{		if (empty($this->_total))		{			$this->_total = count($this->getData());		}		return $this->_total;	}	/**	 * Method to get a pagination object for the cache	 *	 * @return  integer	 */	public function getPagination()	{		if (empty($this->_pagination))		{			$this->_pagination = new JPagination($this->getTotal(), $this->getState('list.start'), $this->getState('list.limit'));		}		return $this->_pagination;	}	/**	 * Clean out a cache group as named by param.	 * If no param is passed clean all cache groups.	 *	 * @param String $group	 */	public function clean($group = '')	{		$cache = $this->getCache();		$cache->clean($group);	}	public function cleanlist($array)	{		foreach ($array as $group)		{			$this->clean($group);		}	}	public function purge()	{		$cache = JFactory::getCache('');		return $cache->gc();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Base class for a Joomla! command line application. * * @package     Joomla.Platform * @subpackage  Application * @since       11.4 */class JApplicationCli extends JApplicationBase{	/**	 * @var    JRegistry  The application configuration object.	 * @since  11.1	 */	protected $config;	/**	 * @var    JApplicationCli  The application instance.	 * @since  11.1	 */	protected static $instance;	/**	 * Class constructor.	 *	 * @param   mixed  $input       An optional argument to provide dependency injection for the application's	 *                              input object.  If the argument is a JInputCli object that object will become	 *                              the application's input object, otherwise a default input object is created.	 * @param   mixed  $config      An optional argument to provide dependency injection for the application's	 *                              config object.  If the argument is a JRegistry object that object will become	 *                              the application's config object, otherwise a default config object is created.	 * @param   mixed  $dispatcher  An optional argument to provide dependency injection for the application's	 *                              event dispatcher.  If the argument is a JEventDispatcher object that object will become	 *                              the application's event dispatcher, if it is null then the default event dispatcher	 *                              will be created based on the application's loadDispatcher() method.	 *	 * @see     loadDispatcher()	 * @since   11.1	 */	public function __construct(JInputCli $input = null, JRegistry $config = null, JEventDispatcher $dispatcher = null)	{		// Close the application if we are not executed from the command line.		// @codeCoverageIgnoreStart		if (!defined('STDOUT') || !defined('STDIN') || !isset($_SERVER['argv']))		{			$this->close();		}		// @codeCoverageIgnoreEnd		// If a input object is given use it.		if ($input instanceof JInput)		{			$this->input = $input;		}		// Create the input based on the application logic.		else		{			if (class_exists('JInput'))			{				$this->input = new JInputCLI;			}		}		// If a config object is given use it.		if ($config instanceof JRegistry)		{			$this->config = $config;		}		// Instantiate a new configuration object.		else		{			$this->config = new JRegistry;		}		$this->loadDispatcher($dispatcher);		// Load the configuration object.		$this->loadConfiguration($this->fetchConfigurationData());		// Set the execution datetime and timestamp;		$this->set('execution.datetime', gmdate('Y-m-d H:i:s'));		$this->set('execution.timestamp', time());		// Set the current directory.		$this->set('cwd', getcwd());	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $key      The name of the property.	 * @param   mixed   $default  The default value (optional) if none is set.	 *	 * @return  mixed   The value of the configuration.	 *	 * @since   11.3	 */	public function get($key, $default = null)	{		return $this->config->get($key, $default);	}	/**	 * Returns a reference to the global JApplicationCli object, only creating it if it doesn't already exist.	 *	 * This method must be invoked as: $cli = JApplicationCli::getInstance();	 *	 * @param   string  $name  The name (optional) of the JApplicationCli class to instantiate.	 *	 * @return  JApplicationCli	 *	 * @since   11.1	 */	public static function getInstance($name = null)	{		// Only create the object if it doesn't exist.		if (empty(self::$instance))		{			if (class_exists($name) && (is_subclass_of($name, 'JApplicationCli')))			{				self::$instance = new $name;			}			else			{				self::$instance = new JApplicationCli;			}		}		return self::$instance;	}	/**	 * Execute the application.	 *	 * @return  void	 *	 * @since   11.1	 */	public function execute()	{		// Trigger the onBeforeExecute event.		$this->triggerEvent('onBeforeExecute');		// Perform application routines.		$this->doExecute();		// Trigger the onAfterExecute event.		$this->triggerEvent('onAfterExecute');	}	/**	 * Load an object or array into the application configuration object.	 *	 * @param   mixed  $data  Either an array or object to be loaded into the configuration object.	 *	 * @return  JApplicationCli  Instance of $this to allow chaining.	 *	 * @since   11.1	 */	public function loadConfiguration($data)	{		// Load the data into the configuration object.		if (is_array($data))		{			$this->config->loadArray($data);		}		elseif (is_object($data))		{			$this->config->loadObject($data);		}		return $this;	}	/**	 * Write a string to standard output.	 *	 * @param   string   $text  The text to display.	 * @param   boolean  $nl    True (default) to append a new line at the end of the output string.	 *	 * @return  JApplicationCli  Instance of $this to allow chaining.	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function out($text = '', $nl = true)	{		fwrite(STDOUT, $text . ($nl ? "\n" : null));		return $this;	}	/**	 * Get a value from standard input.	 *	 * @return  string  The input string from standard input.	 *	 * @codeCoverageIgnore	 * @since   11.1	 */	public function in()	{		return rtrim(fread(STDIN, 8192), "\n");	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $key    The name of the property.	 * @param   mixed   $value  The value of the property to set (optional).	 *	 * @return  mixed   Previous value of the property	 *	 * @since   11.3	 */	public function set($key, $value = null)	{		$previous = $this->config->get($key);		$this->config->set($key, $value);		return $previous;	}	/**	 * Method to load a PHP configuration class file based on convention and return the instantiated data object.  You	 * will extend this method in child classes to provide configuration data from whatever data source is relevant	 * for your specific application.	 *	 * @param   string  $file   The path and filename of the configuration file. If not provided, configuration.php	 *                          in JPATH_BASE will be used.	 * @param   string  $class  The class name to instantiate.	 *	 * @return  mixed   Either an array or object to be loaded into the configuration object.	 *	 * @since   11.1	 */	protected function fetchConfigurationData($file = '', $class = 'JConfig')	{		// Instantiate variables.		$config = array();		if (empty($file) && defined('JPATH_BASE'))		{			$file = JPATH_BASE . '/configuration.php';			// Applications can choose not to have any configuration data			// by not implementing this method and not having a config file.			if (!file_exists($file))			{				$file = '';			}		}		if (!empty($file))		{			JLoader::register($class, $file);			if (class_exists($class))			{				$config = new $class;			}			else			{				throw new RuntimeException('Configuration class does not exist.');			}		}		return $config;	}	/**	 * Method to run the application routines.  Most likely you will want to instantiate a controller	 * and execute it, or perform some sort of task directly.	 *	 * @return  void	 *	 * @codeCoverageIgnore	 * @since   11.3	 */	protected function doExecute()	{		// Your application routines go here.	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JDocumentRenderer_Atom is a feed that implements the atom specification * * Please note that just by using this class you won't automatically * produce valid atom files. For example, you have to specify either an editor * for the feed or an author for every single feed item. * * @package     Joomla.Platform * @subpackage  Document * @see         http://www.atomenabled.org/developers/syndication/atom-format-spec.php * @since       11.1 */class JDocumentRendererAtom extends JDocumentRenderer{	/**	 * Document mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "application/atom+xml";	/**	 * Render the feed.	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @see JDocumentRenderer::render()	 * @since   11.1	 */	public function render($name = '', $params = null, $content = null)	{		$app = JFactory::getApplication();		// Gets and sets timezone offset from site configuration		$tz = new DateTimeZone($app->getCfg('offset'));		$now = JFactory::getDate();		$now->setTimeZone($tz);		$data = $this->_doc;		$uri = JURI::getInstance();		$url = $uri->toString(array('scheme', 'user', 'pass', 'host', 'port'));		$syndicationURL = JRoute::_('&format=feed&type=atom');		if ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $data->title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $data->title, $app->getCfg('sitename'));		}		else		{			$title = $data->title;		}		$feed_title = htmlspecialchars($title, ENT_COMPAT, 'UTF-8');		$feed = "<feed xmlns=\"http://www.w3.org/2005/Atom\" ";		if ($data->language != "")		{			$feed .= " xml:lang=\"" . $data->language . "\"";		}		$feed .= ">\n";		$feed .= "	<title type=\"text\">" . $feed_title . "</title>\n";		$feed .= "	<subtitle type=\"text\">" . htmlspecialchars($data->description, ENT_COMPAT, 'UTF-8') . "</subtitle>\n";		if (empty($data->category) === false)		{			if (is_array($data->category))			{				foreach ($data->category as $cat)				{					$feed .= "	<category term=\"" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "\" />\n";				}			}			else			{				$feed .= "	<category term=\"" . htmlspecialchars($data->category, ENT_COMPAT, 'UTF-8') . "\" />\n";			}		}		$feed .= "	<link rel=\"alternate\" type=\"text/html\" href=\"" . $url . "\"/>\n";		$feed .= "	<id>" . str_replace(' ', '%20', $data->getBase()) . "</id>\n";		$feed .= "	<updated>" . htmlspecialchars($now->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</updated>\n";		if ($data->editor != "")		{			$feed .= "	<author>\n";			$feed .= "		<name>" . $data->editor . "</name>\n";			if ($data->editorEmail != "")			{				$feed .= "		<email>" . htmlspecialchars($data->editorEmail, ENT_COMPAT, 'UTF-8') . "</email>\n";			}			$feed .= "	</author>\n";		}		$feed .= "	<generator uri=\"http://joomla.org\" version=\"1.6\">" . $data->getGenerator() . "</generator>\n";		$feed .= '	<link rel="self" type="application/atom+xml" href="' . str_replace(' ', '%20', $url . $syndicationURL) . "\"/>\n";		for ($i = 0, $count = count($data->items); $i < $count; $i++)		{			$feed .= "	<entry>\n";			$feed .= "		<title>" . htmlspecialchars(strip_tags($data->items[$i]->title), ENT_COMPAT, 'UTF-8') . "</title>\n";			$feed .= '		<link rel="alternate" type="text/html" href="' . $url . $data->items[$i]->link . "\"/>\n";			if ($data->items[$i]->date == "")			{				$data->items[$i]->date = $now->toUnix();			}			$itemDate = JFactory::getDate($data->items[$i]->date);			$itemDate->setTimeZone($tz);			$feed .= "		<published>" . htmlspecialchars($itemDate->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</published>\n";			$feed .= "		<updated>" . htmlspecialchars($itemDate->toISO8601(true), ENT_COMPAT, 'UTF-8') . "</updated>\n";			if (empty($data->items[$i]->guid) === true)			{				$feed .= "		<id>" . str_replace(' ', '%20', $url . $data->items[$i]->link) . "</id>\n";			}			else			{				$feed .= "		<id>" . htmlspecialchars($data->items[$i]->guid, ENT_COMPAT, 'UTF-8') . "</id>\n";			}			if ($data->items[$i]->author != "")			{				$feed .= "		<author>\n";				$feed .= "			<name>" . htmlspecialchars($data->items[$i]->author, ENT_COMPAT, 'UTF-8') . "</name>\n";				if ($data->items[$i]->authorEmail != "")				{					$feed .= "			<email>" . htmlspecialchars($data->items[$i]->authorEmail, ENT_COMPAT, 'UTF-8') . "</email>\n";				}				$feed .= "		</author>\n";			}			if ($data->items[$i]->description != "")			{				$feed .= "		<summary type=\"html\">" . htmlspecialchars($data->items[$i]->description, ENT_COMPAT, 'UTF-8') . "</summary>\n";				$feed .= "		<content type=\"html\">" . htmlspecialchars($data->items[$i]->description, ENT_COMPAT, 'UTF-8') . "</content>\n";			}			if (empty($data->items[$i]->category) === false)			{				if (is_array($data->items[$i]->category))				{					foreach ($data->items[$i]->category as $cat)					{						$feed .= "		<category term=\"" . htmlspecialchars($cat, ENT_COMPAT, 'UTF-8') . "\" />\n";					}				}				else				{					$feed .= "		<category term=\"" . htmlspecialchars($data->items[$i]->category, ENT_COMPAT, 'UTF-8') . "\" />\n";				}			}			if ($data->items[$i]->enclosure != null)			{				$feed .= "		<link rel=\"enclosure\" href=\"" . $data->items[$i]->enclosure->url . "\" type=\""					. $data->items[$i]->enclosure->type . "\"  length=\"" . $data->items[$i]->enclosure->length . "\" />\n";			}			$feed .= "	</entry>\n";		}		$feed .= "</feed>\n";		return $feed;	}}
<?php/** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FunctionCallSignatureSniff.php 284575 2009-07-22 02:58:19Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_Functions_FunctionCallSignatureSniff. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Functions_FunctionCallSignatureSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_STRING);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Find the next non-empty token.        $openBracket = $phpcsFile->findNext(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr + 1), null, true);        if ($tokens[$openBracket]['code'] !== T_OPEN_PARENTHESIS) {            // Not a function call.            return;        }        if (isset($tokens[$openBracket]['parenthesis_closer']) === false) {            // Not a function call.            return;        }        // Find the previous non-empty token.        $search   = PHP_CodeSniffer_Tokens::$emptyTokens;        $search[] = T_BITWISE_AND;        $previous = $phpcsFile->findPrevious($search, ($stackPtr - 1), null, true);        if ($tokens[$previous]['code'] === T_FUNCTION) {            // It's a function definition, not a function call.            return;        }        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        if (($stackPtr + 1) !== $openBracket) {            // Checking this: $value = my_function[*](...).            $error = 'Space before opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceBeforeOpenBracket');        }        $next = $phpcsFile->findNext(T_WHITESPACE, ($closeBracket + 1), null, true);        if ($tokens[$next]['code'] === T_SEMICOLON) {            if (in_array($tokens[($closeBracket + 1)]['code'], PHP_CodeSniffer_Tokens::$emptyTokens) === true) {                $error = 'Space after closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closeBracket, 'SpaceAfterCloseBracket');            }        }        // Check if this is a single line or multi-line function call.        if ($tokens[$openBracket]['line'] === $tokens[$closeBracket]['line']) {            $this->processSingleLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        } else {            $this->processMultiLineCall($phpcsFile, $stackPtr, $openBracket, $tokens);        }    }//end process()    /**     * Processes single-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processSingleLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        if ($tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function([*]...).            $error = 'Space after opening parenthesis of function call prohibited';            $phpcsFile->addError($error, $stackPtr, 'SpaceAfterOpenBracket');        }        $closer = $tokens[$openBracket]['parenthesis_closer'];        if ($tokens[($closer - 1)]['code'] === T_WHITESPACE) {            // Checking this: $value = my_function(...[*]).            $between = $phpcsFile->findNext(T_WHITESPACE, ($openBracket + 1), null, true);            // Only throw an error if there is some content between the parenthesis.            // i.e., Checking for this: $value = my_function().            // If there is no content, then we would have thrown an error in the            // previous IF statement because it would look like this:            // $value = my_function( ).            if ($between !== $closer) {                $error = 'Space before closing parenthesis of function call prohibited';                $phpcsFile->addError($error, $closer, 'SpaceBeforeCloseBracket');            }        }    }//end processSingleLineCall()    /**     * Processes multi-line calls.     *     * @param PHP_CodeSniffer_File $phpcsFile   The file being scanned.     * @param int                  $stackPtr    The position of the current token     *                                          in the stack passed in $tokens.     * @param int                  $openBracket The position of the openning bracket     *                                          in the stack passed in $tokens.     * @param array                $tokens      The stack of tokens that make up     *                                          the file.     *     * @return void     */    public function processMultiLineCall(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $openBracket, $tokens)    {        // We need to work out how far indented the function        // call itself is, so we can work out how far to        // indent the arguments.        $functionIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($tokens[$i]['code'] === T_WHITESPACE) {            $functionIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces.        $closeBracket = $tokens[$openBracket]['parenthesis_closer'];        $lastLine     = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i < $closeBracket; $i++) {            // Skip nested function calls.            if ($tokens[$i]['code'] === T_OPEN_PARENTHESIS) {                $i        = $tokens[$i]['parenthesis_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }            if ($tokens[$i]['line'] !== $lastLine) {                $lastLine = $tokens[$i]['line'];                // We changed lines, so this should be a whitespace indent token.                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$heredocTokens) === true) {                    // Ignore heredoc indentation.                    continue;                }                if (in_array($tokens[$i]['code'], PHP_CodeSniffer_Tokens::$stringTokens) === true) {                    if ($tokens[$i]['code'] === $tokens[($i - 1)]['code']) {                        // Ignore multi-line string indentation.                        continue;                    }                }                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    // Closing brace needs to be indented to the same level                    // as the function call.                    $expectedIndent = $functionIndent;                } else {                    $expectedIndent = ($functionIndent + 4);                }                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {// TODO AJE Allow for tab indents instead of spaces//                    $error = 'Multi-line function call not indented correctly; expected %s spaces but found %s';//                    $data  = array(//                              $expectedIndent,//                              $foundIndent,//                             );//                    $phpcsFile->addError($error, $i, 'Indent', $data);                }            }//end if            // Skip the rest of a closure.            if ($tokens[$i]['code'] === T_CLOSURE) {                $i        = $tokens[$i]['scope_closer'];                $lastLine = $tokens[$i]['line'];                continue;            }        }//end for        if ($tokens[($openBracket + 1)]['content'] !== $phpcsFile->eolChar        && T_CONSTANT_ENCAPSED_STRING != $tokens[($openBracket + 1)]['code'])// allow a '"'        {            $error = 'Opening parenthesis of a multi-line function call must be the last content on the line';            $phpcsFile->addError($error, $stackPtr, 'ContentAfterOpenBracket');        }        $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($closeBracket - 1), null, true);        if ($tokens[$prev]['line'] === $tokens[$closeBracket]['line']        && T_CONSTANT_ENCAPSED_STRING != $tokens[$prev]['code'])// allow a '"'        {            $error = 'Closing parenthesis of a multi-line function call must be on a line by itself';            $phpcsFile->addError($error, $closeBracket, 'CloseBracketLine');        }    }//end processMultiLineCall()}//end class?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');?><?php echo JHtml::_('access.usergroups', 'jform[groups]', $this->groups, true); ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * French stemmer class for Smart Search indexer. * * First contributed by Eric Sanou (bobotche@hotmail.fr) * This class is inspired in  Alexis Ulrich's French stemmer code (http://alx2002.free.fr) * * @package     Joomla.Administrator * @subpackage  com_finder * @since       3.0 */class FinderIndexerStemmerFr extends FinderIndexerStemmer{	/**	 * Stemming rules.	 *	 * @var    Array	 * @since  3.0	 */	private static $_stemRules = null;	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   3.0	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is French or All.		if ($lang !== 'fr' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = static::_getStem($token);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * French stemmer rules variables.	 *	 * @return  array  The rules	 *	 * @since   3.0	 */	protected static function getStemRules()	{		if (static::$_stemRules)		{			return static::$_stemRules;		}		$vars = array();		// French accented letters in ISO-8859-1 encoding		$vars['accents'] = chr(224) . chr(226) . chr(232) . chr(233) . chr(234) . chr(235) . chr(238) . chr(239) . chr(244) . chr(251) . chr(249) . chr(231);		// The rule patterns include all accented words for french language		$vars['rule_pattern'] = "/^([a-z" . $vars['accents'] . "]*)(\*){0,1}(\d)([a-z" . $vars['accents'] . "]*)([.|>])/";		// French vowels (including y) in ISO-8859-1 encoding		$vars['vowels'] = chr(97) . chr(224) . chr(226) . chr(101) . chr(232) . chr(233) . chr(234) . chr(235) . chr(105) . chr(238) . chr(239) . chr(111) . chr(244) . chr(117) . chr(251) . chr(249) . chr(121);		// The French rules in ISO-8859-1 encoding		$vars['rules'] = array(			'esre1>','esio1>','siol1.','siof0.','sioe0.','sio3>','st1>','sf1>','sle1>',			'slo1>','s'.chr(233).'1>',chr(233).'tuae5.',chr(233).'tuae2.','tnia0.','tniv1.','tni3>','suor1.',			'suo0.','sdrail5.','sdrai4.','er'.chr(232).'i1>','sesue3x>','esuey5i.','esue2x>',			'se1>','er'.chr(232).'g3.','eca1>','esiah0.','esi1>','siss2.','sir2>','sit2>','egan'.chr(233).'1.',			'egalli6>','egass1.','egas0.','egat3.','ega3>','ette4>','ett2>','etio1.',			'tio'.chr(231).'4c.','tio0.','et1>','eb1>','snia1>','eniatnau8>','eniatn4.','enia1>',			'niatnio3.','niatg3.','e'.chr(233).'1>',''.chr(233).'hcat1.',''.chr(233).'hca4.',''.chr(233).'tila5>',''.chr(233).'tici5.',''.chr(233).'tir1.',			''.chr(233).'ti3>',''.chr(233).'gan1.',''.chr(233).'ga3>',''.chr(233).'tehc1.',''.chr(233).'te3>',''.chr(233).'it0.',''.chr(233).'1>','eire4.','eirue5.',			'eio1.','eia1.','ei1>','eng1.','xuaessi7.','xuae1>','uaes0.','uae3.',			'xuave2l.','xuav2li>','xua3la>','ela1>','lart2.','lani2>','la'.chr(233).'2>','siay4i.',			'siassia7.','siarv1*.','sia1>','tneiayo6i.','tneiay6i.','tneiassia9.',			'tneiareio7.','tneia5>','tneia4>','tiario4.','tiarim3.','tiaria3.',			'tiaris3.','tiari5.','tiarve6>','tiare5>','iare4>','are3>','tiay4i.',			'tia3>','tnay4i.','em'.chr(232).'iu5>','em'.chr(232).'i4>','tnaun3.','tnauqo3.','tnau4>','tnaf0.',			'tnat'.chr(233).'2>','tna3>','tno3>','zeiy4i.','zey3i.','zeire5>','zeird4.','zeirio4.',			'ze2>','ssiab0.','ssia4.','ssi3.','tnemma6>','tnemesuey9i.','tnemesue8>',			'tnemevi7.','tnemessia5.','tnemessi8.','tneme5>','tnemia4.','tnem'.chr(233).'5>',			'el2l>','lle3le>','let'.chr(244).'0.','lepp0.','le2>','srei1>','reit3.','reila2.',			'rei3>','ert'.chr(226).'e5.','ert'.chr(226).''.chr(233).'1.','ert'.chr(226).'4.','drai4.','erdro0.','erute5.','ruta0.',			'eruta1.','erutiov1.','erub3.','eruh3.','erul3.','er2r>','nn1>','r'.chr(232).'i3.',			'srev0.','sr1>','rid2>','re2>','xuei4.','esuei5.','lbati3.','lba3>',			'rueis0.','ruehcn4.','ecirta6.','ruetai6.','rueta5.','rueir0.','rue3>',			'esseti6.','essere6>','esserd1.','esse4>','essiab1.','essia5.','essio1.',			'essi4.','essal4.','essa1>','ssab1.','essurp1.','essu4.','essi1.','ssor1.',			'essor2.','esso1>','ess2>','tio3.','r'.chr(232).'s2re.','r'.chr(232).'0e.','esn1.','eu1>',			'sua0.','su1>','utt1>','tu'.chr(231).'3c.','u'.chr(231).'2c.','ur1.','ehcn2>','ehcu1>','snorr3.',			'snoru3.','snorua3.','snorv3.','snorio4.','snori5.','snore5>','snortt4>',			'snort'.chr(238).'a7.','snort3.','snor4.','snossi6.','snoire6.','snoird5.','snoitai7.',			'snoita6.','snoits1>','noits0.','snoi4>','noitaci7>','noitai6.','noita5.',			'noitu4.','noi3>','snoya0.','snoy4i.','sno'.chr(231).'a1.','sno'.chr(231).'r1.','snoe4.',			'snosiar1>','snola1.','sno3>','sno1>','noll2.','tnennei4.','ennei2>',			'snei1>','sne'.chr(233).'1>','enne'.chr(233).'5e.','ne'.chr(233).'3e.','neic0.','neiv0.','nei3.','sc1.',			'sd1.','sg1.','sni1.','tiu0.','ti2.','sp1>','sna1>','sue1.','enn2>','nong2.',			'noss2.','rioe4.','riot0.','riorc1.','riovec5.','rio3.','ric2.','ril2.',			'tnerim3.','tneris3>','tneri5.','t'.chr(238).'a3.','riss2.','t'.chr(238).'2.','t'.chr(226).'2>','ario2.',			'arim1.','ara1.','aris1.','ari3.','art1>','ardn2.','arr1.','arua1.','aro1.',			'arv1.','aru1.','ar2.','rd1.','ud1.','ul1.','ini1.','rin2.','tnessiab3.',			'tnessia7.','tnessi6.','tnessni4.','sini2.','sl1.','iard3.','iario3.','ia2>',			'io0.','iule2.','i1>','sid2.','sic2.','esoi4.','ed1.','ai2>','a1>','adr1.',			'tner'.chr(232).'5>','evir1.','evio4>','evi3.','fita4.','fi2>','enie1.','sare4>',			'sari4>','sard3.','sart2>','sa2.','tnessa6>','tnessu6>','tnegna3.','tnegi3.',			'tneg0.','tneru5>','tnemg0.','tnerni4.','tneiv1.','tne3>','une1.','en1>',			'nitn2.','ecnay5i.','ecnal1.','ecna4.','ec1>','nn1.','rit2>','rut2>','rud2.',			'ugn1>','eg1>','tuo0.','tul2>','t'.chr(251).'2>','ev1>','v'.chr(232).'2ve>','rtt1>','emissi6.',			'em1.','ehc1.','c'.chr(233).'i2c'.chr(232).'.','libi2l.','llie1.','liei4i.','xuev1.','xuey4i.',			'xueni5>','xuell4.','xuere5.','xue3>','rb'.chr(233).'3rb'.chr(232).'.','tur2.','rir'.chr(233).'4re.','rir2.',			'c'.chr(226).'2ca.','snu1.','rt'.chr(238).'a4.','long2.','vec2.',''.chr(231).'1c>','ssilp3.','silp2.',			't'.chr(232).'hc2te.','n'.chr(232).'m2ne.','llepp1.','tan2.','rv'.chr(232).'3rve.','rv'.chr(233).'3rve.','r'.chr(232).'2re.',			'r'.chr(233).'2re.','t'.chr(232).'2te.','t'.chr(233).'2te.','epp1.','eya2i.','ya1i.','yo1i.','esu1.','ugi1.',			'tt1.',			'end0.'		);		static::$_stemRules = $vars;		return static::$_stemRules;	}	/**	 * Returns the number of the first rule from the rule number	 * that can be applied to the given reversed input.	 * returns -1 if no rule can be applied, ie the stem has been found	 *	 * @param   string   $reversed_input	 * @param   integer  $rule_number	 *	 * @return  integer  Number of the first rule	 *	 * @since   3.0	 */	private static function _getFirstRule($reversed_input, $rule_number)	{		$vars = static::getStemRules();		$nb_rules = count($vars['rules']);		for ($i = $rule_number; $i < $nb_rules; $i++)		{			// Gets the letters from the current rule			$rule = $vars['rules'][$i];			$rule = preg_replace($vars['rule_pattern'], "\\1", $rule);			if (strncasecmp(utf8_decode($rule), $reversed_input, strlen(utf8_decode($rule))) == 0)			{				return $i;			}		}		return -1;	}	/**	 * Check the acceptability of a stem for French language	 *	 * @param   string  $reversed_stem  The stem to check in reverse form	 *	 * @return  boolean  True if stem is acceptable	 *	 * @since   3.0	 */	private static function _check($reversed_stem)	{		$vars = static::getStemRules();		if (preg_match('/[' . $vars['vowels'] . ']$/', utf8_encode($reversed_stem)))		{			// If the form starts with a vowel then at least two letters must remain after stemming (e.g.: "etaient" --> "et")			return (strlen($reversed_stem) > 2);		}		else		{			// If the reversed stem starts with a consonant then at least two letters must remain after stemming			if (strlen($reversed_stem) <= 2)			{				return false;			}			// And at least one of these must be a vowel or "y"			return (preg_match('/[' . $vars['vowels'] . ']/', utf8_encode($reversed_stem)));		}	}	/**	 * Paice/Husk stemmer which returns a stem for the given $input	 *	 * @param   string  $input  The word for which we want the stem in UTF-8	 *	 * @return  string  The stem	 *	 * @since   3.0	 */	private static function _getStem($input)	{		$vars = static::getStemRules();		$intact = true;		$reversed_input = strrev(utf8_decode($input));		$rule_number = 0;		// This loop goes through the rules' array until it finds an ending one (ending by '.') or the last one ('end0.')		while (true)		{			$rule_number = static::_getFirstRule($reversed_input, $rule_number);			if ($rule_number == -1)			{				// No other rule can be applied => the stem has been found				break;			}			$rule = $vars['rules'][$rule_number];			preg_match($vars['rule_pattern'], $rule, $matches);			if (($matches[2] != '*') || ($intact))			{				$reversed_stem = utf8_decode($matches[4]) . substr($reversed_input, $matches[3], strlen($reversed_input) - $matches[3]);				if (self::_check($reversed_stem))				{					$reversed_input = $reversed_stem;					if ($matches[5] == '.')					{						break;					}				}				else				{					// Go to another rule					$rule_number++;				}			}			else			{				// Go to another rule				$rule_number++;			}		}		return utf8_encode(strrev($reversed_input));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorSqlite extends JDatabaseIteratorPdo{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages component helper. * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName   The name of the active view.	 * @param   int     $client  The client id of the active view. Maybe be 0 or 1	 *	 * @return  void	 */	public static function addSubmenu($vName, $client = 0)	{		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_SITE'),			'index.php?option=com_languages&view=installed&client=0',			$vName == 'installed' && $client === 0		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_INSTALLED_ADMINISTRATOR'),			'index.php?option=com_languages&view=installed&client=1',			$vName == 'installed' && $client === 1		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_CONTENT'),			'index.php?option=com_languages&view=languages',			$vName == 'languages'		);		JHtmlSidebar::addEntry(			JText::_('COM_LANGUAGES_SUBMENU_OVERRIDES'),			'index.php?option=com_languages&view=overrides',			$vName == 'overrides'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user		= JFactory::getUser();		$result		= new JObject;		$assetName	= 'com_languages';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}	/**	 * Method for parsing ini files	 *	 * @param   string  $filename Path and name of the ini file to parse	 *	 * @return  array   Array of strings found in the file, the array indices will be the keys. On failure an empty array will be returned	 *	 * @since   2.5	 */	public static function parseFile($filename)	{		if (!is_file($filename))		{			return array();		}		$contents = file_get_contents($filename);		$contents = str_replace('_QQ_', '"\""', $contents);		$strings  = @parse_ini_string($contents);		if ($strings === false)		{			return array();		}		return $strings;	}	/**	 * Filter method for language keys.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language key to filter	 *	 * @return  string	The filtered language key	 *	 * @since		2.5	 */	public static function filterKey($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return strtoupper($filter->clean($value, 'cmd'));	}	/**	 * Filter method for language strings.	 * This method will be called by JForm while filtering the form data.	 *	 * @param   	string	$value	The language string to filter	 *	 * @return  string	The filtered language string	 *	 * @since		2.5	 */	public static function filterText($value)	{		$filter = JFilterInput::getInstance(null, null, 1, 1);		return $filter->clean($value);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$notice_homes     = $this->homes == 2 || $this->homes == 1 || $this->homes - 1 != count($this->contentlangs) && ($this->language_filter || $this->switchers != 0);$notice_disabled  = !$this->language_filter	&& ($this->homes > 1 || $this->switchers != 0);$notice_switchers = !$this->switchers && ($this->homes > 1 || $this->language_filter);?><div class="mod-multilangstatus">	<?php if (!$this->language_filter && $this->switchers == 0) : ?>		<?php if ($this->homes == 1) : ?>			<div class="alert alert-info"><?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_NONE'); ?></div>		<?php else: ?>			<div class="alert alert-info"><?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_USELESS_HOMES'); ?></div>		<?php endif; ?>	<?php else: ?>	<table class="table table-striped table-condensed">		<tbody>		<?php if ($notice_homes) : ?>			<tr class="warning">				<td>					<i class="icon-warning"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_MISSING'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($notice_disabled) : ?>			<tr class="warning">				<td>					<i class="icon-warning"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGUAGEFILTER_DISABLED'); ?>				</td>			</tr>		<?php endif; ?>		<?php if ($notice_switchers) : ?>			<tr class="warning">				<td>					<i class="icon-warning"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGSWITCHER_UNPUBLISHED'); ?>				</td>			</tr>		<?php endif; ?>		<?php foreach ($this->contentlangs as $contentlang) : ?>			<?php if (array_key_exists($contentlang->lang_code, $this->homepages) && (!array_key_exists($contentlang->lang_code, $this->site_langs) || !$contentlang->published)) : ?>				<tr class="warning">					<td>						<i class="icon-warning"></i>					</td>					<td>						<?php echo JText::sprintf('COM_LANGUAGES_MULTILANGSTATUS_ERROR_CONTENT_LANGUAGE', $contentlang->lang_code); ?>					</td>				</tr>			<?php endif; ?>		<?php endforeach; ?>		<?php if ($this->listUsersError) : ?>			<tr class="info">				<td>					<i class="icon-help"></i>				</td>				<td>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_CONTACTS_ERROR_TIP'); ?>					<ul>					<?php foreach ($this->listUsersError as $user) : ?>						<li>						<?php echo JText::sprintf('COM_LANGUAGES_MULTILANGSTATUS_CONTACTS_ERROR', $user->name); ?>						</li>					<?php endforeach; ?>					</ul>				</td>			</tr>		<?php endif; ?>		</tbody>	</table>	<table class="table table-striped table-condensed" style="border-top: 1px solid #CCCCCC;">		<thead>			<tr>				<th>					<?php echo JText::_('JDETAILS'); ?>				</th>				<th>					<?php echo JText::_('JSTATUS'); ?>				</th>			</tr>		</thead>		<tbody>			<tr>				<th scope="row">					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGUAGEFILTER'); ?>				</th>				<td class="center">					<?php if ($this->language_filter) : ?>						<?php echo JText::_('JENABLED'); ?>					<?php else : ?>						<?php echo JText::_('JDISABLED'); ?>					<?php endif; ?>				</td>			</tr>			<tr>				<th scope="row">					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_LANGSWITCHER_PUBLISHED'); ?>				</th>				<td class="center">					<?php if ($this->switchers != 0) : ?>						<?php echo $this->switchers; ?>					<?php else : ?>						<?php echo JText::_('JNONE'); ?>					<?php endif; ?>				</td>			</tr>			<tr>				<th scope="row">					<?php if ($this->homes > 1) : ?>						<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED_INCLUDING_ALL'); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED'); ?>					<?php endif; ?>				</th>				<td class="center">					<?php if ($this->homes > 1) : ?>						<?php echo $this->homes; ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED_ALL'); ?>					<?php endif; ?>				</td>			</tr>		</tbody>	</table>	<table class="table table-striped table-condensed" style="border-top: 1px solid #CCCCCC;">		<thead>			<tr>				<th>					<?php echo JText::_('JGRID_HEADING_LANGUAGE'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_SITE_LANG_PUBLISHED'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_CONTENT_LANGUAGE_PUBLISHED'); ?>				</th>				<th>					<?php echo JText::_('COM_LANGUAGES_MULTILANGSTATUS_HOMES_PUBLISHED'); ?>				</th>			</tr>		</thead>		<tbody>			<?php foreach ($this->statuses as $status) : ?>				<?php if ($status->element) : ?>					<tr>						<td>							<?php echo $status->element; ?>						</td>				<?php endif; ?>				<?php if ($status->element) : // Published Site languages ?>						<td class="center">							<i class="icon-checkmark"></i>						</td>				<?php else : ?>						<td class="center">							<?php echo JText::_('JNO'); ?>						</td>				<?php endif; ?>				<?php if ($status->lang_code && $status->published) : // Published Content languages ?>						<td class="center">							<i class="icon-checkmark"></i>						</td>				<?php else : ?>						<td class="center">							<i class="icon-warning"></i>						</td>				<?php endif; ?>				<?php if ($status->home_language) : // Published Home pages ?>						<td class="center">							<i class="icon-checkmark"></i>						</td>				<?php else : ?>						<td class="center">							<i class="icon-minus"></i>						</td>				<?php endif; ?>				</tr>			<?php endforeach; ?>			<?php foreach ($this->contentlangs as $contentlang) : ?>				<?php if (!array_key_exists($contentlang->lang_code, $this->site_langs)) : ?>					<tr>						<td>							<?php echo $contentlang->lang_code; ?>						</td>						<td class="center">							<i class="icon-warning"></i>						</td>						<td class="center">							<?php if ($contentlang->published) : ?>								<i class="icon-checkmark"></i>							<?php elseif (!$contentlang->published && array_key_exists($contentlang->lang_code, $this->homepages)) : ?>								<i class="icon-minus"></i>							<?php elseif (!$contentlang->published) : ?>								<i class="icon-warning"></i>							<?php endif; ?>						</td>						<td class="center">							<?php if (!array_key_exists($contentlang->lang_code, $this->homepages)) : ?>								<i class="icon-warning"></i>							<?php else : ?>								<i class="icon-checkmark"></i>							<?php endif; ?>						</td>				<?php endif; ?>			<?php endforeach; ?>			</tr>		</tbody>	</table>	<?php endif; ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Cache callback type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerCallback extends JCacheController{	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * Since arguments to this function are read with func_get_args you can pass any number of	 * arguments to this method	 * as long as the first argument passed is the callback definition.	 *	 * The callback definition can be in several forms:	 * - Standard PHP Callback array see <http://php.net/callback> [recommended]	 * - Function name as a string eg. 'foo' for function foo()	 * - Static method name as a string eg. 'MyClass::myMethod' for method myMethod() of class MyClass	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function call()	{		// Get callback and arguments		$args = func_get_args();		$callback = array_shift($args);		return $this->get($callback, $args);	}	/**	 * Executes a cacheable callback if not found in cache else returns cached output and result	 *	 * @param   mixed    $callback    Callback or string shorthand for a callback	 * @param   array    $args        Callback arguments	 * @param   string   $id          Cache id	 * @param   boolean  $wrkarounds  True to use wrkarounds	 * @param   array    $woptions    Workaround options	 *	 * @return  mixed  Result of the callback	 *	 * @since   11.1	 */	public function get($callback, $args = array(), $id = false, $wrkarounds = false, $woptions = array())	{		// Normalize callback		if (is_array($callback))		{			// We have a standard php callback array -- do nothing		}		elseif (strstr($callback, '::'))		{			// This is shorthand for a static method callback classname::methodname			list ($class, $method) = explode('::', $callback);			$callback = array(trim($class), trim($method));		}		elseif (strstr($callback, '->'))		{			/*			 * This is a really not so smart way of doing this... we provide this for backward compatability but this			 * WILL! disappear in a future version.  If you are using this syntax change your code to use the standard			 * PHP callback array syntax: <http://php.net/callback>			 *			 * We have to use some silly global notation to pull it off and this is very unreliable			 */			list ($object_123456789, $method) = explode('->', $callback);			global $$object_123456789;			$callback = array($$object_123456789, $method);		}		else		{			// We have just a standard function -- do nothing		}		if (!$id)		{			// Generate an ID			$id = $this->_makeId($callback, $args);		}		$data = $this->cache->get($id);		$locktest = new stdClass;		$locktest->locked = null;		$locktest->locklooped = null;		if ($data === false)		{			$locktest = $this->cache->lock($id);			if ($locktest->locked == true && $locktest->locklooped == true)			{				$data = $this->cache->get($id);			}		}		$coptions = array();		if ($data !== false)		{			$cached = unserialize(trim($data));			$coptions['mergehead'] = isset($woptions['mergehead']) ? $woptions['mergehead'] : 0;			$output = ($wrkarounds == false) ? $cached['output'] : JCache::getWorkarounds($cached['output'], $coptions);			$result = $cached['result'];			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		else		{			if (!is_array($args))			{				$Args = !empty($args) ? array(&$args) : array();			}			else			{				$Args = &$args;			}			if ($locktest->locked == false)			{				$locktest = $this->cache->lock($id);			}			if (isset($woptions['modulemode']) && $woptions['modulemode'] == 1)			{				$document = JFactory::getDocument();				$coptions['modulemode'] = 1;				$coptions['headerbefore'] = $document->getHeadData();			}			else			{				$coptions['modulemode'] = 0;			}			ob_start();			ob_implicit_flush(false);			$result = call_user_func_array($callback, $Args);			$output = ob_get_contents();			ob_end_clean();			$cached = array();			$coptions['nopathway'] = isset($woptions['nopathway']) ? $woptions['nopathway'] : 1;			$coptions['nohead'] = isset($woptions['nohead']) ? $woptions['nohead'] : 1;			$coptions['nomodules'] = isset($woptions['nomodules']) ? $woptions['nomodules'] : 1;			$cached['output'] = ($wrkarounds == false) ? $output : JCache::setWorkarounds($output, $coptions);			$cached['result'] = $result;			// Store the cache data			$this->cache->store(serialize($cached), $id);			if ($locktest->locked == true)			{				$this->cache->unlock($id);			}		}		echo $output;		return $result;	}	/**	 * Generate a callback cache id	 *	 * @param   callback  $callback  Callback to cache	 * @param   array     $args      Arguments to the callback method to cache	 *	 * @return  string  MD5 Hash : function cache id	 *	 * @since   11.1	 */	protected function _makeId($callback, $args)	{		if (is_array($callback) && is_object($callback[0]))		{			$vars = get_object_vars($callback[0]);			$vars[] = strtolower(get_class($callback[0]));			$callback[0] = $vars;		}		return md5(serialize(array($callback, $args)));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$document = JFactory::getDocument();$direction = $document->direction == 'rtl' ? 'pull-right' : '';require JModuleHelper::getLayoutPath('mod_menu', $enabled ? 'default_enabled' : 'default_disabled');$menu->renderMenu('menu', $enabled ? 'nav ' . $direction : 'nav disabled ' . $direction);
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MySQL export driver. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseExporterMysql extends JDatabaseExporterMysqli{	/**	 * Checks if all data and options are in order prior to exporting.	 *	 * @return  JDatabaseExporterMySQL  Method supports chaining.	 *	 * @since   11.1	 *	 * @throws  Exception if an error is encountered.	 */	public function check()	{		// Check if the db connector has been set.		if (!($this->db instanceof JDatabaseDriverMysql))		{			throw new Exception('JPLATFORM_ERROR_DATABASE_CONNECTOR_WRONG_TYPE');		}		// Check if the tables have been specified.		if (empty($this->from))		{			throw new Exception('JPLATFORM_ERROR_NO_TABLES_SPECIFIED');		}		return $this;	}	/**	 * Sets the database connector to use for exporting structure and/or data from MySQL.	 *	 * @param   JDatabaseDriverMysql  $db  The database connector.	 *	 * @return  JDatabaseExporterMysql  Method supports chaining.	 *	 * @since   11.1	 */	public function setDbo(JDatabaseDriverMysql $db)	{		$this->db = $db;		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');?><fieldset>	<?php foreach ($fields as $field) : ?>		<div class="control-group">			<div class="control-label">				<?php echo $field->label ?>			</div>			<div class="controls">				<?php echo $field->input; ?>			</div>		</div>	<?php endforeach; ?></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Input * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Input JSON Class * * This class decodes a JSON string from the raw request data and makes it available via * the standard JInput interface. * * @package     Joomla.Platform * @subpackage  Input * @since       12.2 */class JInputJSON extends JInput{	/**	 * @var    string  The raw JSON string from the request.	 * @since  12.2	 */	private $_raw;	/**	 * Constructor.	 *	 * @param   array  $source   Source data (Optional, default is the raw HTTP input decoded from JSON)	 * @param   array  $options  Array of configuration parameters (Optional)	 *	 * @since   12.2	 */	public function __construct(array $source = null, array $options = array())	{		if (isset($options['filter']))		{			$this->filter = $options['filter'];		}		else		{			$this->filter = JFilterInput::getInstance();		}		if (is_null($source))		{			$this->_raw = file_get_contents('php://input');			$this->data = json_decode($this->_raw, true);		}		else		{			$this->data = & $source;		}		// Set the options for the class.		$this->options = $options;	}	/**	 * Gets the raw JSON string from the request.	 *	 * @return  string  The raw JSON string from the request.	 *	 * @since   12.2	 */	public function getRaw()	{		return $this->_raw;	}}
<?php/** * @package     Joomla.Platform * @subpackage  String * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// PHP mbstring and iconv local configuration// Check if mbstring extension is loaded and attempt to load it if not present except for windowsif (extension_loaded('mbstring')){	// Make sure to suppress the output in case ini_set is disabled	@ini_set('mbstring.internal_encoding', 'UTF-8');	@ini_set('mbstring.http_input', 'UTF-8');	@ini_set('mbstring.http_output', 'UTF-8');}// Same for iconvif (function_exists('iconv')){	// These are settings that can be set inside code	iconv_set_encoding("internal_encoding", "UTF-8");	iconv_set_encoding("input_encoding", "UTF-8");	iconv_set_encoding("output_encoding", "UTF-8");}/** * Include the utf8 package */jimport('phputf8.utf8');jimport('phputf8.strcasecmp');/** * String handling class for utf-8 data * Wraps the phputf8 library * All functions assume the validity of utf-8 strings. * * @package     Joomla.Platform * @subpackage  String * @since       11.1 */abstract class JString{	/**	 * Increment styles.	 *	 * @var    array	 * @since  11.3	 */	protected static $incrementStyles = array(		'dash' => array(			'#-(\d+)$#',			'-%d'		),		'default' => array(			array('#\((\d+)\)$#', '#\(\d+\)$#'),			array(' (%d)', '(%d)'),		),	);	/**	 * Split a string in camel case format	 *	 * "FooBarABCDef"            becomes  array("Foo", "Bar", "ABC", "Def");	 * "JFooBar"                 becomes  array("J", "Foo", "Bar");	 * "J001FooBar002"           becomes  array("J001", "Foo", "Bar002");	 * "abcDef"                  becomes  array("abc", "Def");	 * "abc_defGhi_Jkl"          becomes  array("abc_def", "Ghi_Jkl");	 * "ThisIsA_NASAAstronaut"   becomes  array("This", "Is", "A_NASA", "Astronaut")),	 * "JohnFitzgerald_Kennedy"  becomes  array("John", "Fitzgerald_Kennedy")),	 *	 * @param   string  $string  The source string.	 *	 * @return  array   The splitted string.	 *	 * @deprecated  12.3 Use JStringNormalise::fromCamelCase()	 * @since   11.3	 */	public static function splitCamelCase($string)	{		JLog::add('JString::splitCamelCase has been deprecated. Use JStringNormalise::fromCamelCase.', JLog::WARNING, 'deprecated');		return JStringNormalise::fromCamelCase($string, true);	}	/**	 * Increments a trailing number in a string.	 *	 * Used to easily create distinct labels when copying objects. The method has the following styles:	 *	 * default: "Label" becomes "Label (2)"	 * dash:    "Label" becomes "Label-2"	 *	 * @param   string   $string  The source string.	 * @param   string   $style   The the style (default|dash).	 * @param   integer  $n       If supplied, this number is used for the copy, otherwise it is the 'next' number.	 *	 * @return  string  The incremented string.	 *	 * @since   11.3	 */	public static function increment($string, $style = 'default', $n = 0)	{		$styleSpec = isset(self::$incrementStyles[$style]) ? self::$incrementStyles[$style] : self::$incrementStyles['default'];		// Regular expression search and replace patterns.		if (is_array($styleSpec[0]))		{			$rxSearch = $styleSpec[0][0];			$rxReplace = $styleSpec[0][1];		}		else		{			$rxSearch = $rxReplace = $styleSpec[0];		}		// New and old (existing) sprintf formats.		if (is_array($styleSpec[1]))		{			$newFormat = $styleSpec[1][0];			$oldFormat = $styleSpec[1][1];		}		else		{			$newFormat = $oldFormat = $styleSpec[1];		}		// Check if we are incrementing an existing pattern, or appending a new one.		if (preg_match($rxSearch, $string, $matches))		{			$n = empty($n) ? ($matches[1] + 1) : $n;			$string = preg_replace($rxReplace, sprintf($oldFormat, $n), $string);		}		else		{			$n = empty($n) ? 2 : $n;			$string .= sprintf($newFormat, $n);		}		return $string;	}	/**	 * UTF-8 aware alternative to strpos.	 *	 * Find position of first occurrence of a string.	 *	 * @param   string   $str     String being examined	 * @param   string   $search  String being searched for	 * @param   integer  $offset  Optional, specifies the position from which the search should be performed	 *	 * @return  mixed  Number of characters before the first match or FALSE on failure	 *	 * @see     http://www.php.net/strpos	 * @since   11.1	 */	public static function strpos($str, $search, $offset = false)	{		if ($offset === false)		{			return utf8_strpos($str, $search);		}		else		{			return utf8_strpos($str, $search, $offset);		}	}	/**	 * UTF-8 aware alternative to strrpos	 * Finds position of last occurrence of a string	 *	 * @param   string   $str     String being examined.	 * @param   string   $search  String being searched for.	 * @param   integer  $offset  Offset from the left of the string.	 *	 * @return  mixed  Number of characters before the last match or false on failure	 *	 * @see     http://www.php.net/strrpos	 * @since   11.1	 */	public static function strrpos($str, $search, $offset = 0)	{		return utf8_strrpos($str, $search, $offset);	}	/**	 * UTF-8 aware alternative to substr	 * Return part of a string given character offset (and optionally length)	 *	 * @param   string   $str     String being processed	 * @param   integer  $offset  Number of UTF-8 characters offset (from left)	 * @param   integer  $length  Optional length in UTF-8 characters from offset	 *	 * @return  mixed string or FALSE if failure	 *	 * @see     http://www.php.net/substr	 * @since   11.1	 */	public static function substr($str, $offset, $length = false)	{		if ($length === false)		{			return utf8_substr($str, $offset);		}		else		{			return utf8_substr($str, $offset, $length);		}	}	/**	 * UTF-8 aware alternative to strtlower	 *	 * Make a string lowercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in lowercase or FALSE is UTF-8 invalid	 *	 * @see http://www.php.net/strtolower	 * @since   11.1	 */	public static function strtolower($str)	{		return utf8_strtolower($str);	}	/**	 * UTF-8 aware alternative to strtoupper	 * Make a string uppercase	 * Note: The concept of a characters "case" only exists is some alphabets	 * such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does	 * not exist in the Chinese alphabet, for example. See Unicode Standard	 * Annex #21: Case Mappings	 *	 * @param   string  $str  String being processed	 *	 * @return  mixed  Either string in uppercase or FALSE is UTF-8 invalid	 *	 * @see     http://www.php.net/strtoupper	 * @since   11.1	 */	public static function strtoupper($str)	{		return utf8_strtoupper($str);	}	/**	 * UTF-8 aware alternative to strlen.	 *	 * Returns the number of characters in the string (NOT THE NUMBER OF BYTES),	 *	 * @param   string  $str  UTF-8 string.	 *	 * @return  integer  Number of UTF-8 characters in string.	 *	 * @see http://www.php.net/strlen	 * @since   11.1	 */	public static function strlen($str)	{		return utf8_strlen($str);	}	/**	 * UTF-8 aware alternative to str_ireplace	 * Case-insensitive version of str_replace	 *	 * @param   string   $search   String to search	 * @param   string   $replace  Existing string to replace	 * @param   string   $str      New string to replace with	 * @param   integer  $count    Optional count value to be passed by referene	 *	 * @return  string  UTF-8 String	 *	 * @see     http://www.php.net/str_ireplace	 * @since   11.1	 */	public static function str_ireplace($search, $replace, $str, $count = null)	{		jimport('phputf8.str_ireplace');		if ($count === false)		{			return utf8_ireplace($search, $replace, $str);		}		else		{			return utf8_ireplace($search, $replace, $str, $count);		}	}	/**	 * UTF-8 aware alternative to str_split	 * Convert a string to an array	 *	 * @param   string   $str        UTF-8 encoded string to process	 * @param   integer  $split_len  Number to characters to split string by	 *	 * @return  array	 *	 * @see     http://www.php.net/str_split	 * @since   11.1	 */	public static function str_split($str, $split_len = 1)	{		jimport('phputf8.str_split');		return utf8_str_split($str, $split_len);	}	/**	 * UTF-8/LOCALE aware alternative to strcasecmp	 * A case insensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer   < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcasecmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcasecmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll(utf8_strtolower($str1), utf8_strtolower($str2));			}			else			{				return strcoll(					self::transcode(utf8_strtolower($str1), 'UTF-8', $encoding),					self::transcode(utf8_strtolower($str2), 'UTF-8', $encoding)				);			}		}		else		{			return utf8_strcasecmp($str1, $str2);		}	}	/**	 * UTF-8/LOCALE aware alternative to strcmp	 * A case sensitive string comparison	 *	 * @param   string  $str1    string 1 to compare	 * @param   string  $str2    string 2 to compare	 * @param   mixed   $locale  The locale used by strcoll or false to use classical comparison	 *	 * @return  integer  < 0 if str1 is less than str2; > 0 if str1 is greater than str2, and 0 if they are equal.	 *	 * @see     http://www.php.net/strcmp	 * @see     http://www.php.net/strcoll	 * @see     http://www.php.net/setlocale	 * @since   11.1	 */	public static function strcmp($str1, $str2, $locale = false)	{		if ($locale)		{			// Get current locale			$locale0 = setlocale(LC_COLLATE, 0);			if (!$locale = setlocale(LC_COLLATE, $locale))			{				$locale = $locale0;			}			// See if we have successfully set locale to UTF-8			if (!stristr($locale, 'UTF-8') && stristr($locale, '_') && preg_match('~\.(\d+)$~', $locale, $m))			{				$encoding = 'CP' . $m[1];			}			elseif (stristr($locale, 'UTF-8') || stristr($locale, 'utf8'))			{				$encoding = 'UTF-8';			}			else			{				$encoding = 'nonrecodable';			}			// If we successfully set encoding it to utf-8 or encoding is sth weird don't recode			if ($encoding == 'UTF-8' || $encoding == 'nonrecodable')			{				return strcoll($str1, $str2);			}			else			{				return strcoll(self::transcode($str1, 'UTF-8', $encoding), self::transcode($str2, 'UTF-8', $encoding));			}		}		else		{			return strcmp($str1, $str2);		}	}	/**	 * UTF-8 aware alternative to strcspn	 * Find length of initial segment not matching mask	 *	 * @param   string   $str     The string to process	 * @param   string   $mask    The mask	 * @param   integer  $start   Optional starting character position (in characters)	 * @param   integer  $length  Optional length	 *	 * @return  integer  The length of the initial segment of str1 which does not contain any of the characters in str2	 *	 * @see     http://www.php.net/strcspn	 * @since   11.1	 */	public static function strcspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strcspn');		if ($start === false && $length === false)		{			return utf8_strcspn($str, $mask);		}		elseif ($length === false)		{			return utf8_strcspn($str, $mask, $start);		}		else		{			return utf8_strcspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware alternative to stristr	 * Returns all of haystack from the first occurrence of needle to the end.	 * needle and haystack are examined in a case-insensitive manner	 * Find first occurrence of a string using case insensitive comparison	 *	 * @param   string  $str     The haystack	 * @param   string  $search  The needle	 *	 * @return string the sub string	 *	 * @see     http://www.php.net/stristr	 * @since   11.1	 */	public static function stristr($str, $search)	{		jimport('phputf8.stristr');		return utf8_stristr($str, $search);	}	/**	 * UTF-8 aware alternative to strrev	 * Reverse a string	 *	 * @param   string  $str  String to be reversed	 *	 * @return  string   The string in reverse character order	 *	 * @see     http://www.php.net/strrev	 * @since   11.1	 */	public static function strrev($str)	{		jimport('phputf8.strrev');		return utf8_strrev($str);	}	/**	 * UTF-8 aware alternative to strspn	 * Find length of initial segment matching mask	 *	 * @param   string   $str     The haystack	 * @param   string   $mask    The mask	 * @param   integer  $start   Start optional	 * @param   integer  $length  Length optional	 *	 * @return  integer	 *	 * @see     http://www.php.net/strspn	 * @since   11.1	 */	public static function strspn($str, $mask, $start = null, $length = null)	{		jimport('phputf8.strspn');		if ($start === null && $length === null)		{			return utf8_strspn($str, $mask);		}		elseif ($length === null)		{			return utf8_strspn($str, $mask, $start);		}		else		{			return utf8_strspn($str, $mask, $start, $length);		}	}	/**	 * UTF-8 aware substr_replace	 * Replace text within a portion of a string	 *	 * @param   string   $str     The haystack	 * @param   string   $repl    The replacement string	 * @param   integer  $start   Start	 * @param   integer  $length  Length (optional)	 *	 * @return  string	 *	 * @see     http://www.php.net/substr_replace	 * @since   11.1	 */	public static function substr_replace($str, $repl, $start, $length = null)	{		// Loaded by library loader		if ($length === false)		{			return utf8_substr_replace($str, $repl, $start);		}		else		{			return utf8_substr_replace($str, $repl, $start, $length);		}	}	/**	 * UTF-8 aware replacement for ltrim()	 *	 * Strip whitespace (or other characters) from the beginning of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise ltrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/ltrim	 * @since   11.1	 */	public static function ltrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_ltrim($str);		}		else		{			return utf8_ltrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for rtrim()	 * Strip whitespace (or other characters) from the end of a string	 * You only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise rtrim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/rtrim	 * @since   11.1	 */	public static function rtrim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_rtrim($str);		}		else		{			return utf8_rtrim($str, $charlist);		}	}	/**	 * UTF-8 aware replacement for trim()	 * Strip whitespace (or other characters) from the beginning and end of a string	 * Note: you only need to use this if you are supplying the charlist	 * optional arg and it contains UTF-8 characters. Otherwise trim will	 * work normally on a UTF-8 string	 *	 * @param   string  $str       The string to be trimmed	 * @param   string  $charlist  The optional charlist of additional characters to trim	 *	 * @return  string  The trimmed string	 *	 * @see     http://www.php.net/trim	 * @since   11.1	 */	public static function trim($str, $charlist = false)	{		if (empty($charlist) && $charlist !== false)		{			return $str;		}		jimport('phputf8.trim');		if ($charlist === false)		{			return utf8_trim($str);		}		else		{			return utf8_trim($str, $charlist);		}	}	/**	 * UTF-8 aware alternative to ucfirst	 * Make a string's first character uppercase or all words' first character uppercase	 *	 * @param   string  $str           String to be processed	 * @param   string  $delimiter     The words delimiter (null means do not split the string)	 * @param   string  $newDelimiter  The new words delimiter (null means equal to $delimiter)	 *	 * @return  string  If $delimiter is null, return the string with first character as upper case (if applicable)	 *                  else consider the string of words separated by the delimiter, apply the ucfirst to each words	 *                  and return the string with the new delimiter	 *	 * @see     http://www.php.net/ucfirst	 * @since   11.1	 */	public static function ucfirst($str, $delimiter = null, $newDelimiter = null)	{		jimport('phputf8.ucfirst');		if ($delimiter === null)		{			return utf8_ucfirst($str);		}		else		{			if ($newDelimiter === null)			{				$newDelimiter = $delimiter;			}			return implode($newDelimiter, array_map('utf8_ucfirst', explode($delimiter, $str)));		}	}	/**	 * UTF-8 aware alternative to ucwords	 * Uppercase the first character of each word in a string	 *	 * @param   string  $str  String to be processed	 *	 * @return  string  String with first char of each word uppercase	 *	 * @see     http://www.php.net/ucwords	 * @since   11.1	 */	public static function ucwords($str)	{		jimport('phputf8.ucwords');		return utf8_ucwords($str);	}	/**	 * Transcode a string.	 *	 * @param   string  $source         The string to transcode.	 * @param   string  $from_encoding  The source encoding.	 * @param   string  $to_encoding    The target encoding.	 *	 * @return  mixed  The transcoded string, or null if the source was not a string.	 *	 * @link    https://bugs.php.net/bug.php?id=48147	 *	 * @since   11.1	 */	public static function transcode($source, $from_encoding, $to_encoding)	{		if (is_string($source))		{			switch (ICONV_IMPL)			{				case 'glibc':				return @iconv($from_encoding, $to_encoding . '//TRANSLIT,IGNORE', $source);				case 'libiconv':				default:				return iconv($from_encoding, $to_encoding . '//IGNORE//TRANSLIT', $source);			}		}		return null;	}	/**	 * Tests a string as to whether it's valid UTF-8 and supported by the Unicode standard.	 *	 * Note: this function has been modified to simple return true or false.	 *	 * @param   string  $str  UTF-8 encoded string.	 *	 * @return  boolean  true if valid	 *	 * @author  <hsivonen@iki.fi>	 * @see     http://hsivonen.iki.fi/php-utf8/	 * @see     compliant	 * @since   11.1	 */	public static function valid($str)	{		// Cached expected number of octets after the current octet		// until the beginning of the next UTF8 character sequence		$mState = 0;		// Cached Unicode character		$mUcs4 = 0;		// Cached expected number of octets in the current sequence		$mBytes = 1;		$len = strlen($str);		for ($i = 0; $i < $len; $i++)		{			$in = ord($str{$i});			if ($mState == 0)			{				// When mState is zero we expect either a US-ASCII character or a				// multi-octet sequence.				if (0 == (0x80 & ($in)))				{					// US-ASCII, pass straight through.					$mBytes = 1;				}				elseif (0xC0 == (0xE0 & ($in)))				{					// First octet of 2 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x1F) << 6;					$mState = 1;					$mBytes = 2;				}				elseif (0xE0 == (0xF0 & ($in)))				{					// First octet of 3 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x0F) << 12;					$mState = 2;					$mBytes = 3;				}				elseif (0xF0 == (0xF8 & ($in)))				{					// First octet of 4 octet sequence					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x07) << 18;					$mState = 3;					$mBytes = 4;				}				elseif (0xF8 == (0xFC & ($in)))				{					/* First octet of 5 octet sequence.					 *					 * This is illegal because the encoded codepoint must be either					 * (a) not the shortest form or					 * (b) outside the Unicode range of 0-0x10FFFF.					 * Rather than trying to resynchronize, we will carry on until the end					 * of the sequence and let the later error handling code catch it.					 */					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 0x03) << 24;					$mState = 4;					$mBytes = 5;				}				elseif (0xFC == (0xFE & ($in)))				{					// First octet of 6 octet sequence, see comments for 5 octet sequence.					$mUcs4 = ($in);					$mUcs4 = ($mUcs4 & 1) << 30;					$mState = 5;					$mBytes = 6;				}				else				{					/* Current octet is neither in the US-ASCII range nor a legal first					 * octet of a multi-octet sequence.					 */					return false;				}			}			else			{				// When mState is non-zero, we expect a continuation of the multi-octet				// sequence				if (0x80 == (0xC0 & ($in)))				{					// Legal continuation.					$shift = ($mState - 1) * 6;					$tmp = $in;					$tmp = ($tmp & 0x0000003F) << $shift;					$mUcs4 |= $tmp;					/**					 * End of the multi-octet sequence. mUcs4 now contains the final					 * Unicode codepoint to be output					 */					if (0 == --$mState)					{						/*						 * Check for illegal sequences and codepoints.						 */						// From Unicode 3.1, non-shortest form is illegal						if (((2 == $mBytes) && ($mUcs4 < 0x0080)) || ((3 == $mBytes) && ($mUcs4 < 0x0800)) || ((4 == $mBytes) && ($mUcs4 < 0x10000))							|| (4 < $mBytes)							|| (($mUcs4 & 0xFFFFF800) == 0xD800) // From Unicode 3.2, surrogate characters are illegal							|| ($mUcs4 > 0x10FFFF)) // Codepoints outside the Unicode range are illegal						{							return false;						}						// Initialize UTF8 cache.						$mState = 0;						$mUcs4 = 0;						$mBytes = 1;					}				}				else				{					/**					 *((0xC0 & (*in) != 0x80) && (mState != 0))					 * Incomplete multi-octet sequence.					 */					return false;				}			}		}		return true;	}	/**	 * Tests whether a string complies as UTF-8. This will be much	 * faster than utf8_is_valid but will pass five and six octet	 * UTF-8 sequences, which are not supported by Unicode and	 * so cannot be displayed correctly in a browser. In other words	 * it is not as strict as utf8_is_valid but it's faster. If you use	 * it to validate user input, you place yourself at the risk that	 * attackers will be able to inject 5 and 6 byte sequences (which	 * may or may not be a significant risk, depending on what you are	 * are doing)	 *	 * @param   string  $str  UTF-8 string to check	 *	 * @return  boolean  TRUE if string is valid UTF-8	 *	 * @see     valid	 * @see     http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805	 * @since   11.1	 */	public static function compliant($str)	{		if (strlen($str) == 0)		{			return true;		}		/*		 * If even just the first character can be matched, when the /u		 * modifier is used, then it's valid UTF-8. If the UTF-8 is somehow		 * invalid, nothing at all will match, even if the string contains		 * some valid sequences		 */		return (preg_match('/^.{1}/us', $str, $ar) == 1);	}	/**	 * Does a UTF-8 safe version of PHP parse_url function	 *	 * @param   string  $url  URL to parse	 *	 * @return  mixed  Associative array or false if badly formed URL.	 *	 * @see     http://us3.php.net/manual/en/function.parse-url.php	 * @since   11.1	 */	public static function parse_url($url)	{		$result = false;		// Build arrays of values we need to decode before parsing		$entities = array('%21', '%2A', '%27', '%28', '%29', '%3B', '%3A', '%40', '%26', '%3D', '%24', '%2C', '%2F', '%3F', '%23', '%5B', '%5D');		$replacements = array('!', '*', "'", "(", ")", ";", ":", "@", "&", "=", "$", ",", "/", "?", "#", "[", "]");		// Create encoded URL with special URL characters decoded so it can be parsed		// All other characters will be encoded		$encodedURL = str_replace($entities, $replacements, urlencode($url));		// Parse the encoded URL		$encodedParts = parse_url($encodedURL);		// Now, decode each value of the resulting array		if ($encodedParts)		{			foreach ($encodedParts as $key => $value)			{				$result[$key] = urldecode(str_replace($replacements, $entities, $value));			}		}		return $result;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var InstallationViewRemoveHtml $this */?><form action="index.php" method="post" id="adminForm" class="form-validate form-horizontal">	<div class="alert alert-error inlineError" id="theDefaultError" style="display: none">		<h4 class="alert-heading"><?php echo JText::_('JERROR'); ?></h4>		<p id="theDefaultErrorMessage"></p>	</div>	<div class="alert alert-success">	<h3><?php echo JText::_('INSTL_COMPLETE_TITLE'); ?></h3>	</div>	<div class="alert">		<p><?php echo JText::_('INSTL_COMPLETE_REMOVE_INSTALLATION'); ?></p>		<input type="button" class="btn btn-warning" name="instDefault" onclick="Install.removeFolder(this);" value="<?php echo JText::_('INSTL_COMPLETE_REMOVE_FOLDER'); ?>" />	</div>	<div class="btn-toolbar">		<div class="btn-group">			<a class="btn" href="<?php echo JURI::root(); ?>" title="<?php echo JText::_('JSITE'); ?>"><i class="icon-eye-open"></i> <?php echo JText::_('JSITE'); ?></a>		</div>		<div class="btn-group">			<a class="btn btn-primary" href="<?php echo JURI::root(); ?>administrator/" title="<?php echo JText::_('JADMINISTRATOR'); ?>"><i class="icon-lock icon-white"></i> <?php echo JText::_('JADMINISTRATOR'); ?></a>		</div>	</div>	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Site * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note. It is important to remove spaces between elements.$class = $item->anchor_css ? 'class="'.$item->anchor_css.'" ' : '';$title = $item->anchor_title ? 'title="'.$item->anchor_title.'" ' : '';if ($item->menu_image)	{		$item->params->get('menu_text', 1) ?		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" /><span class="image-title">'.$item->title.'</span> ' :		$linktype = '<img src="'.$item->menu_image.'" alt="'.$item->title.'" />';}else { $linktype = $item->title;}switch ($item->browserNav) :	default:	case 0:?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 1:		// _blank?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" target="_blank" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;	case 2:	// window.open?><a <?php echo $class; ?>href="<?php echo $item->flink; ?>" onclick="window.open(this.href,'targetWindow','toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes');return false;" <?php echo $title; ?>><?php echo $linktype; ?></a><?php		break;endswitch;
<?php/** * @package     Joomla.Administrator * @subpackage  mod_multilangstatus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require JModuleHelper::getLayoutPath('mod_multilangstatus', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform View Interface * * @package     Joomla.Platform * @subpackage  View * @since       12.1 */interface JView{	/**	 * Method to escape output.	 *	 * @param   string  $output  The output to escape.	 *	 * @return  string  The escaped output.	 *	 * @since   12.1	 */	public function escape($output);	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   12.1	 * @throws  RuntimeException	 */	public function render();}
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Image Filter class to emboss an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */class JImageFilterEmboss extends JImageFilter{	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function execute(array $options = array())	{		// Verify that image filter support for PHP is available.		if (!function_exists('imagefilter'))		{			JLog::add('The imagefilter function for PHP is not available.', JLog::ERROR);			throw new RuntimeException('The imagefilter function for PHP is not available.');		}		// Perform the emboss filter.		imagefilter($this->handle, IMG_FILTER_EMBOSS);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Site * @subpackage  com_mailto * @since       1.5 */class MailtoViewSent extends JViewLegacy{	/**	 * @since  1.5	 */	public function display($tpl = null)	{		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* @var $menu JAdminCSSMenu */$shownew = (boolean) $params->get('shownew', 1);$showhelp = $params->get('showhelp', 1);$user = JFactory::getUser();$lang = JFactory::getLanguage();//// Site SubMenu//$menu->addChild(	new JMenuNode(JText::_('MOD_MENU_CONTROL_PANEL'), 'index.php', 'class:cpanel'), true);$menu->getParent();//// Users Submenu//if ($user->authorise('core.manage', 'com_users')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USERS'), '#'), true	);	$createUser = $shownew && $user->authorise('core.create', 'com_users');	$createGrp = $user->authorise('core.admin', 'com_users');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_USER_MANAGER'), 'index.php?option=com_users&view=users', 'class:user'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_USER'), 'index.php?option=com_users&task=user.add', 'class:newarticle')		);		$menu->getParent();	}	if ($createGrp)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_GROUPS'), 'index.php?option=com_users&view=groups', 'class:groups'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_GROUP'), 'index.php?option=com_users&task=group.add', 'class:newarticle')			);			$menu->getParent();		}		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_LEVELS'), 'index.php?option=com_users&view=levels', 'class:levels'), $createUser		);		if ($createUser)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_LEVEL'), 'index.php?option=com_users&task=level.add', 'class:newarticle')			);			$menu->getParent();		}	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTES'), 'index.php?option=com_users&view=notes', 'class:user-note'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_USERS_ADD_NOTE'), 'index.php?option=com_users&task=note.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_USERS_NOTE_CATEGORIES'), 'index.php?option=com_categories&view=categories&extension=com_users.notes', 'class:category'), $createUser	);	if ($createUser)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_users.notes', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MASS_MAIL_USERS'), 'index.php?option=com_users&view=mail', 'class:massmail')	);	$menu->getParent();}//// Menus Submenu//if ($user->authorise('core.manage', 'com_menus')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENUS'), '#'), true	);	$createMenu = $shownew && $user->authorise('core.create', 'com_menus');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER'), 'index.php?option=com_menus&view=menus', 'class:menumgr'), $createMenu	);	if ($createMenu)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU'), 'index.php?option=com_menus&view=menu&layout=edit', 'class:newarticle')		);		$menu->getParent();	}	$menu->addSeparator();	// Menu Types	foreach (ModMenuHelper::getMenus() as $menuType)	{		$alt = '*' .$menuType->sef. '*';		if ($menuType->home == 0)		{			$titleicon = '';		}		elseif ($menuType->home == 1 && $menuType->language == '*')		{			$titleicon = ' <i class="icon-home"></i>';		}		elseif ($menuType->home > 1)		{			$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $menuType->home, array('title' => JText::_('MOD_MENU_HOME_MULTIPLE')), true).'</span>';		}		else		{			$image = JHtml::_('image', 'mod_languages/'.$menuType->image.'.gif', null, null, true, true);			if (!$image)			{				$titleicon = ' <span>'.JHtml::_('image', 'mod_languages/icon-16-language.png', $alt, array('title' => $menuType->title_native), true).'</span>';			}			else			{				$titleicon = ' <span>' . JHtml::_('image', 'mod_languages/' . $menuType->image . '.gif', $alt, array('title' => $menuType->title_native), true) . '</span>';			}		}		$menu->addChild(			new JMenuNode($menuType->title,	'index.php?option=com_menus&view=items&menutype='.$menuType->menutype, 'class:menu', null, null, $titleicon), $createMenu		);		if ($createMenu)		{			$menu->addChild(				new JMenuNode(JText::_('MOD_MENU_MENU_MANAGER_NEW_MENU_ITEM'), 'index.php?option=com_menus&view=item&layout=edit&menutype='.$menuType->menutype, 'class:newarticle')			);			$menu->getParent();		}	}	$menu->getParent();}//// Content Submenu//if ($user->authorise('core.manage', 'com_content')){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT'), '#'), true	);	$createContent = $shownew && $user->authorise('core.create', 'com_content');	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_ARTICLE_MANAGER'), 'index.php?option=com_content', 'class:article'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_ARTICLE'), 'index.php?option=com_content&task=article.add', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_CATEGORY_MANAGER'), 'index.php?option=com_categories&extension=com_content', 'class:category'), $createContent	);	if ($createContent)	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_NEW_CATEGORY'), 'index.php?option=com_categories&task=category.add&extension=com_content', 'class:newarticle')		);		$menu->getParent();	}	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_COM_CONTENT_FEATURED'), 'index.php?option=com_content&view=featured', 'class:featured')	);	$menu->addSeparator();	if ($user->authorise('core.manage', 'com_media'))	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_MEDIA_MANAGER'), 'index.php?option=com_media', 'class:media'));	}	$menu->getParent();}//// Components Submenu//// Get the authorised components and sub-menus.$components = ModMenuHelper::getComponents(true);// Check if there are any components, otherwise, don't render the menuif ($components){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_COMPONENTS'), '#'), true);	foreach ($components as &$component)	{		if (!empty($component->submenu))		{			// This component has a db driven submenu.			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img), true);			foreach ($component->submenu as $sub)			{				$menu->addChild(new JMenuNode($sub->text, $sub->link, $sub->img));			}			$menu->getParent();		}		else		{			$menu->addChild(new JMenuNode($component->text, $component->link, $component->img));		}	}	$menu->getParent();}//// Extensions Submenu//$im = $user->authorise('core.manage', 'com_installer');$mm = $user->authorise('core.manage', 'com_modules');$pm = $user->authorise('core.manage', 'com_plugins');$tm = $user->authorise('core.manage', 'com_templates');$lm = $user->authorise('core.manage', 'com_languages');if ($im || $mm || $pm || $tm || $lm){	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSIONS'), '#'), true);	if ($im)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_EXTENSION_MANAGER'), 'index.php?option=com_installer', 'class:install'));		$menu->addSeparator();	}	if ($mm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_MODULE_MANAGER'), 'index.php?option=com_modules', 'class:module'));	}	if ($pm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_PLUGIN_MANAGER'), 'index.php?option=com_plugins', 'class:plugin'));	}	if ($tm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_TEMPLATE_MANAGER'), 'index.php?option=com_templates', 'class:themes'));	}	if ($lm)	{		$menu->addChild(new JMenuNode(JText::_('MOD_MENU_EXTENSIONS_LANGUAGE_MANAGER'), 'index.php?option=com_languages', 'class:language'));	}	$menu->getParent();}//// Help Submenu//if ($showhelp == 1){	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP'), '#'), true	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_JOOMLA'), 'index.php?option=com_admin&view=help', 'class:help')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_FORUM'), 'http://forum.joomla.org', 'class:help-forum', false, '_blank')	);	if ($forum_url = $params->get('forum_url'))	{		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_CUSTOM_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$debug = $lang->setDebug(false);	if ($lang->hasKey('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') && JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE') != '')	{		$forum_url = 'http://forum.joomla.org/viewforum.php?f=' . (int) JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM_VALUE');		$lang->setDebug($debug);		$menu->addChild(			new JMenuNode(JText::_('MOD_MENU_HELP_SUPPORT_OFFICIAL_LANGUAGE_FORUM'), $forum_url, 'class:help-forum', false, '_blank')		);	}	$lang->setDebug($debug);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DOCUMENTATION'), 'http://docs.joomla.org', 'class:help-docs', false, '_blank')	);	$menu->addSeparator();	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_EXTENSIONS'), 'http://extensions.joomla.org', 'class:help-jed', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_TRANSLATIONS'), 'http://community.joomla.org/translations.html', 'class:help-trans', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_RESOURCES'), 'http://resources.joomla.org', 'class:help-jrd', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_COMMUNITY'), 'http://community.joomla.org', 'class:help-community', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SECURITY'), 'http://developer.joomla.org/security.html', 'class:help-security', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_DEVELOPER'), 'http://developer.joomla.org', 'class:help-dev', false, '_blank')	);	$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_HELP_SHOP'), 'http://shop.joomla.org', 'class:help-shop', false, '_blank')	);	$menu->getParent();}//// Admin Settingss Submenu//$su = $user->authorise('core.admin');$cam = $user->authorise('core.manage', 'com_cache');$cim = $user->authorise('core.manage', 'com_checkin');	$menu->addChild(new JMenuNode(JText::_('MOD_MENU_SETTINGS'), '#'), true);	if ($su):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CONFIGURATION'), 'index.php?option=com_config', 'class:config')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_SYSTEM_INFORMATION'), 'index.php?option=com_admin&view=sysinfo', 'class:info')	);	endif;	if  ($cam):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_CLEAR_CACHE'), 'index.php?option=com_cache', 'class:clear')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_PURGE_EXPIRED_CACHE'), 'index.php?option=com_cache&view=purge', 'class:purge')		);	endif;	if  ($cim):		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_GLOBAL_CHECKIN'), 'index.php?option=com_checkin', 'class:checkin')		);	endif;		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_USER_PROFILE'), 'index.php?option=com_admin&task=profile.edit&id='. $user->id, 'class:profile')		);		$menu->addChild(		new JMenuNode(JText::_('MOD_MENU_LOGOUT'), 'index.php?option=com_login&task=logout&'. JSession::getFormToken() .'=1', 'class:logout')		);	$menu->getParent();
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;require_once JPATH_COMPONENT . '/helpers/route.php';$controller = JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  Template.system * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!isset($this->error)){	$this->error = JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));	$this->debug = false;}//get language and direction$doc = JFactory::getDocument();$this->language = $doc->language;$this->direction = $doc->direction;?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<title><?php echo $this->error->getCode(); ?> - <?php echo $this->title; ?></title>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error.css" type="text/css" />	<?php if ($this->direction == 'rtl') : ?>	<link rel="stylesheet" href="<?php echo $this->baseurl; ?>/templates/system/css/error_rtl.css" type="text/css" />	<?php endif; ?>	<?php		$debug = JFactory::getConfig()->get('debug_lang');		if (JDEBUG || $debug)		{	?>		<link rel="stylesheet" href="<?php echo $this->baseurl ?>/media/cms/css/debug.css" type="text/css" />	<?php		}	?></head><body>	<div class="error">		<div id="outline">		<div id="errorboxoutline">			<div id="errorboxheader"><?php echo $this->error->getCode(); ?> - <?php echo $this->error->getMessage(); ?></div>			<div id="errorboxbody">			<p><strong><?php echo JText::_('JERROR_LAYOUT_NOT_ABLE_TO_VISIT'); ?></strong></p>				<ol>					<li><?php echo JText::_('JERROR_LAYOUT_AN_OUT_OF_DATE_BOOKMARK_FAVOURITE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_SEARCH_ENGINE_OUT_OF_DATE_LISTING'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_MIS_TYPED_ADDRESS'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_YOU_HAVE_NO_ACCESS_TO_THIS_PAGE'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_REQUESTED_RESOURCE_WAS_NOT_FOUND'); ?></li>					<li><?php echo JText::_('JERROR_LAYOUT_ERROR_HAS_OCCURRED_WHILE_PROCESSING_YOUR_REQUEST'); ?></li>				</ol>			<p><strong><?php echo JText::_('JERROR_LAYOUT_PLEASE_TRY_ONE_OF_THE_FOLLOWING_PAGES'); ?></strong></p>				<ul>					<li><a href="<?php echo $this->baseurl; ?>/index.php" title="<?php echo JText::_('JERROR_LAYOUT_GO_TO_THE_HOME_PAGE'); ?>"><?php echo JText::_('JERROR_LAYOUT_HOME_PAGE'); ?></a></li>				</ul>			<p><?php echo JText::_('JERROR_LAYOUT_PLEASE_CONTACT_THE_SYSTEM_ADMINISTRATOR'); ?>.</p>			<div id="techinfo">			<p><?php echo $this->error->getMessage(); ?></p>			<p>				<?php if ($this->debug) :					echo $this->renderBacktrace();				endif; ?>			</p>			</div>			</div>		</div>		</div>	</div></body></html>
<?php/** * @package     Joomla.Site * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="custom<?php echo $moduleclass_sfx ?>" <?php if ($params->get('backgroundimage')) : ?> style="background-image:url(<?php echo $params->get('backgroundimage');?>)"<?php endif;?> >	<?php echo $module->content;?></div>
<?php/** * Parses and verifies the doc comments for files. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: FileCommentSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_CommentParser_ClassCommentParser', true) === false) {    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_CommentParser_ClassCommentParser not found');}/** * Parses and verifies the doc comments for files. * * Verifies that : * <ul> *  <li>A doc comment exists.</li> *  <li>There is a blank newline after the short description.</li> *  <li>There is a blank newline between the long and short description.</li> *  <li>There is a blank newline between the long description and tags.</li> *  <li>A PHP version is specified.</li> *  <li>Check the order of the tags.</li> *  <li>Check the indentation of each tag.</li> *  <li>Check required and optional tags and the format of their content.</li> * </ul> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Commenting_FileCommentSniff implements PHP_CodeSniffer_Sniff{    /**     * The header comment parser for the current file.     *     * @var PHP_CodeSniffer_Comment_Parser_ClassCommentParser     */    protected $commentParser = null;    /**     * The current PHP_CodeSniffer_File object we are processing.     *     * @var PHP_CodeSniffer_File     */    protected $currentFile = null;    /**     * Tags in correct order and related info.     *     * @var array     */    protected $tags = array(                       'version'    => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must be first',                                       ),                       'category'   => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'precedes @package',                                       ),                       'package'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @category (if used)',                                       ),                       'subpackage' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @package',                                       ),                       'author'     => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @subpackage (if used) or @package',                                       ),                       'copyright'  => array(                                        'required'       => true,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @author (if used), @subpackage (if used) or @package',                                       ),                       'license'    => array(                                        'required'       => true,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @copyright',                                       ),                       'link'       => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @license',                                       ),                       'see'        => array(                                        'required'       => false,                                        'allow_multiple' => true,                                        'order_text'     => 'must follow @link (if used) or @license',                                       ),                       'since'      => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follows @see (if used), @link (if used) or @license',                                       ),                       'deprecated' => array(                                        'required'       => false,                                        'allow_multiple' => false,                                        'order_text'     => 'must follow @since (if used), @see (if used), @link (if used) or @license',                                       ),                );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_OPEN_TAG);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $this->currentFile = $phpcsFile;        // We are only interested if this is the first open tag.        if ($stackPtr !== 0) {            if ($phpcsFile->findPrevious(T_OPEN_TAG, ($stackPtr - 1)) !== false) {                return;            }        }        $tokens = $phpcsFile->getTokens();        // Find the next non whitespace token.        $commentStart            = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);        // Allow declare() statements at the top of the file.        if ($tokens[$commentStart]['code'] === T_DECLARE) {            $semicolon = $phpcsFile->findNext(T_SEMICOLON, ($commentStart + 1));            $commentStart                = $phpcsFile->findNext(T_WHITESPACE, ($semicolon + 1), null, true);        }        // Ignore vim header.        if ($tokens[$commentStart]['code'] === T_COMMENT) {            if (strstr($tokens[$commentStart]['content'], 'vim:') !== false) {                $commentStart = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentStart + 1),                    null,                    true                );            }        }        $errorToken = ($stackPtr + 1);        if (isset($tokens[$errorToken]) === false) {            $errorToken--;        }        if ($tokens[$commentStart]['code'] === T_CLOSE_TAG) {            // We are only interested if this is the first open tag.            return;        } else if ($tokens[$commentStart]['code'] === T_COMMENT) {            $error = 'You must use "/**" style comments for a file comment';            $phpcsFile->addError($error, $errorToken, 'WrongStyle');            return;        } else if ($commentStart === false            || $tokens[$commentStart]['code'] !== T_DOC_COMMENT        ) {            $phpcsFile->addError('Missing file doc comment', $errorToken, 'Missing');            return;        } else {            // Extract the header comment docblock.            $commentEnd = $phpcsFile->findNext(                T_DOC_COMMENT,                ($commentStart + 1),                null,                true            );            $commentEnd--;            // Check if there is only 1 doc comment between the            // open tag and class token.            $nextToken   = array(                            T_ABSTRACT,                            T_CLASS,                            T_FUNCTION,                            T_DOC_COMMENT,                           );            $commentNext = $phpcsFile->findNext($nextToken, ($commentEnd + 1));            if ($commentNext !== false                && $tokens[$commentNext]['code'] !== T_DOC_COMMENT            ) {                // Found a class token right after comment doc block.                $newlineToken = $phpcsFile->findNext(                    T_WHITESPACE,                    ($commentEnd + 1),                    $commentNext,                    false,                    $phpcsFile->eolChar                );                if ($newlineToken !== false) {                    $newlineToken = $phpcsFile->findNext(                        T_WHITESPACE,                        ($newlineToken + 1),                        $commentNext,                        false,                        $phpcsFile->eolChar                    );                    if ($newlineToken === false) {                        // No blank line between the class token and the doc block.                        // The doc block is most likely a class comment.                        $error = 'Missing file doc comment';                        $phpcsFile->addError($error, $errorToken, 'Missing');                        return;                    }                }            }//end if            $comment = $phpcsFile->getTokensAsString(                $commentStart,                ($commentEnd - $commentStart + 1)            );            // Parse the header comment docblock.            try {                $this->commentParser = new PHP_CodeSniffer_CommentParser_ClassCommentParser($comment, $phpcsFile);                $this->commentParser->parse();            } catch (PHP_CodeSniffer_CommentParser_ParserException $e) {                $line = ($e->getLineWithinComment() + $commentStart);                $phpcsFile->addError($e->getMessage(), $line, 'FailedParse');                return;            }            $comment = $this->commentParser->getComment();            if (is_null($comment) === true) {                $error = 'File doc comment is empty';                $phpcsFile->addError($error, $commentStart, 'Empty');                return;            }            // No extra newline before short description.            $short        = $comment->getShortComment();            $newlineCount = 0;            $newlineSpan  = strspn($short, $phpcsFile->eolChar);            if ($short !== '' && $newlineSpan > 0) {                $error = 'Extra newline(s) found before file comment short description';                $phpcsFile->addError($error, ($commentStart + 1), 'SpacingBefore');            }            $newlineCount = (substr_count($short, $phpcsFile->eolChar) + 1);            // Exactly one blank line between short and long description.            $long = $comment->getLongComment();            if (empty($long) === false) {                $between        = $comment->getWhiteSpaceBetween();                $newlineBetween = substr_count($between, $phpcsFile->eolChar);                if ($newlineBetween !== 2) {                    $error = 'There must be exactly one blank line between descriptions in file comment';                    $phpcsFile->addError($error, ($commentStart + $newlineCount + 1), 'DescriptionSpacing');                }                $newlineCount += $newlineBetween;            }            // Exactly one blank line before tags if short description is present.            $tags = $this->commentParser->getTagOrders();            if (count($tags) > 1 && $short !== '' && $newlineSpan > 0) {                $newlineSpan = $comment->getNewlineAfter();                if ($newlineSpan !== 2) {                    $error = 'There must be exactly one blank line before the tags in file comment';                    if ($long !== '') {                        $newlineCount += (substr_count($long, $phpcsFile->eolChar) - $newlineSpan + 1);                    }                    $phpcsFile->addError($error, ($commentStart + $newlineCount), 'SpacingBeforeTags');                    $short = rtrim($short, $phpcsFile->eolChar.' ');                }            }//            // Check the PHP Version.//            $this->processPHPVersion($commentStart, $commentEnd, $long);            // Check each tag.            $this->processTags($commentStart, $commentEnd);        }//end if    }//end process()//    /**//     * Check that the PHP version is specified.//     *//     * @param int    $commentStart Position in the stack where the comment started.//     * @param int    $commentEnd   Position in the stack where the comment ended.//     * @param string $commentText  The text of the function comment.//     *//     * @return void//     *///    protected function processPHPVersion($commentStart, $commentEnd, $commentText)//    {//        if (strstr(strtolower($commentText), 'php version') === false) {//            $error = 'PHP version not specified';//             $this->currentFile->addWarning($error, $commentEnd, 'MissingVersion');//        }////    }//end processPHPVersion()    /**     * Processes each required or optional tag.     *     * @param int $commentStart Position in the stack where the comment started.     * @param int $commentEnd   Position in the stack where the comment ended.     *     * @return void     */    protected function processTags($commentStart, $commentEnd)    {        $docBlock    = (get_class($this) === 'Joomla_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';        $foundTags   = $this->commentParser->getTagOrders();        $orderIndex  = 0;        $indentation = array();        $longestTag  = 0;        $errorPos    = 0;        foreach ($this->tags as $tag => $info) {            // Required tag missing.            if ($info['required'] === true && in_array($tag, $foundTags) === false) {                $error = 'Missing @%s tag in %s comment';                $data  = array(                              $tag,                              $docBlock,                             );                $this->currentFile->addError($error, $commentEnd, 'MissingTag', $data);                continue;            }             // Get the line number for current tag.            $tagName = ucfirst($tag);            if ($info['allow_multiple'] === true) {                $tagName .= 's';            }            $getMethod  = 'get'.$tagName;            $tagElement = $this->commentParser->$getMethod();            if (is_null($tagElement) === true || empty($tagElement) === true) {                continue;            }            $errorPos = $commentStart;            if (is_array($tagElement) === false) {                $errorPos = ($commentStart + $tagElement->getLine());            }            // Get the tag order.            $foundIndexes = array_keys($foundTags, $tag);            if (count($foundIndexes) > 1) {                // Multiple occurance not allowed.                if ($info['allow_multiple'] === false) {                    $error = 'Only 1 @%s tag is allowed in a %s comment';                    $data  = array(                              $tag,                              $docBlock,                             );                    $this->currentFile->addError($error, $errorPos, 'DuplicateTag', $data);                } else {                    // Make sure same tags are grouped together.                    $i     = 0;                    $count = $foundIndexes[0];                    foreach ($foundIndexes as $index) {                        if ($index !== $count) {                            $errorPosIndex                                = ($errorPos + $tagElement[$i]->getLine());                            $error = '@%s tags must be grouped together';                            $data  = array($tag);                            $this->currentFile->addError($error, $errorPosIndex, 'TagsNotGrouped', $data);                        }                        $i++;                        $count++;                    }                }            }//end if            // Check tag order.            if ($foundIndexes[0] > $orderIndex) {                $orderIndex = $foundIndexes[0];            } else {                if (is_array($tagElement) === true && empty($tagElement) === false) {                    $errorPos += $tagElement[0]->getLine();                }                $error = 'The @%s tag is in the wrong order; the tag %s';                $data  = array(                          $tag,                          $info['order_text'],                         );                $this->currentFile->addError($error, $errorPos, 'WrongTagOrder', $data);            }            // Store the indentation for checking.            $len = strlen($tag);            if ($len > $longestTag) {                $longestTag = $len;            }            if (is_array($tagElement) === true) {                foreach ($tagElement as $key => $element) {                    $indentation[] = array(                                      'tag'   => $tag,                                      'space' => $this->getIndentation($tag, $element),                                      'line'  => $element->getLine(),                                     );                }            } else {                $indentation[] = array(                                  'tag'   => $tag,                                  'space' => $this->getIndentation($tag, $tagElement),                                 );            }            $method = 'process'.$tagName;            if (method_exists($this, $method) === true) {                // Process each tag if a method is defined.                call_user_func(array($this, $method), $errorPos);            } else {                if (is_array($tagElement) === true) {                    foreach ($tagElement as $key => $element) {                        $element->process(                            $this->currentFile,                            $commentStart,                            $docBlock                        );                    }                } else {                     $tagElement->process(                         $this->currentFile,                         $commentStart,                         $docBlock                     );                }            }        }//end foreach        foreach ($indentation as $indentInfo) {            if ($indentInfo['space'] !== 0            // Joomla change: allow for 2 space gap.                && $indentInfo['space'] !== ($longestTag + 2)            ) {                $expected = (($longestTag - strlen($indentInfo['tag'])) + 2);                $space    = ($indentInfo['space'] - strlen($indentInfo['tag']));                $error    = '@%s tag comment indented incorrectly; expected %s spaces but found %s';                $data     = array(                             $indentInfo['tag'],                             $expected,                             $space,                            );                $getTagMethod = 'get'.ucfirst($indentInfo['tag']);                if ($this->tags[$indentInfo['tag']]['allow_multiple'] === true) {                    $line = $indentInfo['line'];                } else {                    $tagElem = $this->commentParser->$getTagMethod();                    $line    = $tagElem->getLine();                }                $this->currentFile->addError($error, ($commentStart + $line), 'TagIndent', $data);            }        }    }//end processTags()    /**     * Get the indentation information of each tag.     *     * @param string                                   $tagName    The name of the     *                                                             doc comment     *                                                             element.     * @param PHP_CodeSniffer_CommentParser_DocElement $tagElement The doc comment     *                                                             element.     *     * @return void     */    protected function getIndentation($tagName, $tagElement)    {        if ($tagElement instanceof PHP_CodeSniffer_CommentParser_SingleElement) {            if ($tagElement->getContent() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeContent(), ' '));            }        } else if ($tagElement instanceof PHP_CodeSniffer_CommentParser_PairElement) {            if ($tagElement->getValue() !== '') {                return (strlen($tagName) + substr_count($tagElement->getWhitespaceBeforeValue(), ' '));            }        }        return 0;    }//end getIndentation()    /**     * Process the category tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processCategory($errorPos)    {        $category = $this->commentParser->getCategory();        if ($category !== null) {            $content = $category->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = ucfirst($firstBit).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= ucfirst($bit).'_';//                    }////                    $error     = 'Category name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidCategory', $data);                }            } else {                $error = '@category tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyCategory');            }        }    }//end processCategory()    /**     * Process the package tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processPackage($errorPos)    {        $package = $this->commentParser->getPackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {                    $newContent = str_replace(' ', '_', $content);                    $nameBits   = explode('_', $newContent);                    $firstBit   = array_shift($nameBits);                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';                    foreach ($nameBits as $bit) {                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';                    }                    $error     = 'Package name "%s" is not valid; consider "%s" instead';                    $validName = trim($newName, '_');                    $data      = array(                                  $content,                                  $validName,                                 );                    $this->currentFile->addError($error, $errorPos, 'InvalidPackage', $data);                }            } else {                $error = '@package tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptyPackage');            }        }    }//end processPackage()    /**     * Process the subpackage tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processSubpackage($errorPos)    {        $package = $this->commentParser->getSubpackage();        if ($package !== null) {            $content = $package->getContent();            if ($content !== '') {                if (PHP_CodeSniffer::isUnderscoreName($content) !== true) {//                    $newContent = str_replace(' ', '_', $content);//                    $nameBits   = explode('_', $newContent);//                    $firstBit   = array_shift($nameBits);//                    $newName    = strtoupper($firstBit{0}).substr($firstBit, 1).'_';//                    foreach ($nameBits as $bit) {//                        $newName .= strtoupper($bit{0}).substr($bit, 1).'_';//                    }////                    $error     = 'Subpackage name "%s" is not valid; consider "%s" instead';//                    $validName = trim($newName, '_');//                    $data      = array(//                                  $content,//                                  $validName,//                                 );//                    $this->currentFile->addError($error, $errorPos, 'InvalidSubpackage', $data);                }            } else {                $error = '@subpackage tag must contain a name';                $this->currentFile->addError($error, $errorPos, 'EmptySubpackage');            }        }    }//end processSubpackage()    /**     * Process the author tag(s) that this header comment has.     *     * This function is different from other _process functions     * as $authors is an array of SingleElements, so we work out     * the errorPos for each element separately     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processAuthors($commentStart)    {         $authors = $this->commentParser->getAuthors();        // Report missing return.        if (empty($authors) === false) {            foreach ($authors as $author) {                $errorPos = ($commentStart + $author->getLine());                $content  = $author->getContent();                if ($content !== '') {                    $local = '\da-zA-Z-_+';                    // Dot character cannot be the first or last character                    // in the local-part.                    $localMiddle = $local.'.\w';                    if (preg_match('/^([^<]*)\s+<(['.$local.']['.$localMiddle.']*['.$local.']@[\da-zA-Z][-.\w]*[\da-zA-Z]\.[a-zA-Z]{2,7})>$/', $content) === 0) {                        $error = 'Content of the @author tag must be in the form "Display Name <username@example.com>"';                        $this->currentFile->addError($error, $errorPos, 'InvalidAuthors');                    }                } else {                    $error    = 'Content missing for @author tag in %s comment';                    $docBlock = (get_class($this) === 'PEAR_Sniffs_Commenting_FileCommentSniff') ? 'file' : 'class';                    $data     = array($docBlock);                    $this->currentFile->addError($error, $errorPos, 'EmptyAuthors', $data);                }            }        }    }//end processAuthors()    /**     * Process the copyright tags.     *     * @param int $commentStart The position in the stack where     *                          the comment started.     *     * @return void     */    protected function processCopyrights($commentStart)    {        $copyrights = $this->commentParser->getCopyrights();        foreach ($copyrights as $copyright) {            $errorPos = ($commentStart + $copyright->getLine());            $content  = $copyright->getContent();            if ($content !== '') {                $matches = array();                if (preg_match('/^.*?([0-9]{4})((.{1})([0-9]{4}))? (.+)$/', $content, $matches) !== 0) {                    // Check earliest-latest year order.                    if ($matches[3] !== '') {                        if ($matches[3] !== '-') {                            $error = 'A hyphen must be used between the earliest and latest year';                            $this->currentFile->addError($error, $errorPos, 'CopyrightHyphen');                        }                        if ($matches[4] !== '' && $matches[4] < $matches[1]) {                            $error = "Invalid year span \"$matches[1]$matches[3]$matches[4]\" found; consider \"$matches[4]-$matches[1]\" instead";                            $this->currentFile->addWarning($error, $errorPos, 'InvalidCopyright');                        }                    }                } else {                    $error = '@copyright tag must contain a year and the name of the copyright holder';                    $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');                }            } else {                $error = '@copyright tag must contain a year and the name of the copyright holder';                $this->currentFile->addError($error, $errorPos, 'EmptyCopyright');            }//end if        }//end if    }//end processCopyrights()    /**     * Process the license tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processLicense($errorPos)    {        $license = $this->commentParser->getLicense();        if ($license !== null) {            $value   = $license->getValue();            $comment = $license->getComment();            if ($value === '' || $comment === '') {                $error = '@license tag must contain a URL and a license name';                $this->currentFile->addError($error, $errorPos, 'EmptyLicense');            }        }    }//end processLicense()    /**     * Process the version tag.     *     * @param int $errorPos The line number where the error occurs.     *     * @return void     */    protected function processVersion($errorPos)    {        $version = $this->commentParser->getVersion();        if ($version !== null) {            $content = $version->getContent();            $matches = array();            if (empty($content) === true) {                $error = 'Content missing for @version tag in file comment';                $this->currentFile->addError($error, $errorPos, 'EmptyVersion');            } else if (strstr($content, 'CVS:') === false                && strstr($content, 'SVN:') === false                && strstr($content, 'Id:') === false            ) {                $error = 'Invalid version "%s" in file comment; consider "CVS: <cvs_id>" or "SVN: <svn_id>" instead';                $data  = array($content);                $this->currentFile->addWarning($error, $errorPos, 'InvalidVersion', $data);            }        }    }//end processVersion()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');?><div class="archive<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading', 1)) : ?><div class="page-header"><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1></div><?php endif; ?><form id="adminForm" action="<?php echo JRoute::_('index.php')?>" method="post" class="form-inline">	<fieldset class="filters">	<div class="filter-search alert alert-info">		<?php if ($this->params->get('filter_field') != 'hide') : ?>		<label class="filter-search-lbl" for="filter-search"><?php echo JText::_('COM_CONTENT_'.$this->params->get('filter_field').'_FILTER_LABEL').'&#160;'; ?></label>		<input type="text" name="filter-search" id="filter-search" value="<?php echo $this->escape($this->filter); ?>" class="inputbox span2" onchange="document.getElementById('adminForm').submit();" />		<?php endif; ?>		<?php echo $this->form->monthField; ?>		<?php echo $this->form->yearField; ?>		<?php echo $this->form->limitField; ?>	</div>	<button type="submit" class="btn btn-primary"><?php echo JText::_('JGLOBAL_FILTER_BUTTON'); ?></button>	<input type="hidden" name="view" value="archive" />	<input type="hidden" name="option" value="com_content" />	<input type="hidden" name="limitstart" value="0" />	</fieldset>	<?php echo $this->loadTemplate('items'); ?></form></div>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using sockets directly. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportSocket implements JHttpTransport{	/**	 * @var    array  Reusable socket connections.	 * @since  11.3	 */	protected $connections;	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!self::isSupported())		{			throw new RuntimeException('Cannot use a socket transport when fsockopen() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  RuntimeException	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		$connection = $this->connect($uri, $timeout);		// Make sure the connection is alive and valid.		if (is_resource($connection))		{			// Make sure the connection has not timed out.			$meta = stream_get_meta_data($connection);			if ($meta['timed_out'])			{				throw new RuntimeException('Server connection timed out.');			}		}		else		{			throw new RuntimeException('Not connected to server.');		}		// Get the request path from the URI object.		$path = $uri->toString(array('path', 'query'));		// If we have data to send make sure our request is setup for it.		if (!empty($data))		{			// If the data is not a scalar value encode it to be sent with the request.			if (!is_scalar($data))			{				$data = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			$headers['Content-Length'] = strlen($data);		}		// Build the request payload.		$request = array();		$request[] = strtoupper($method) . ' ' . ((empty($path)) ? '/' : $path) . ' HTTP/1.0';		$request[] = 'Host: ' . $uri->getHost();		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers['User-Agent'] = $userAgent;		}		// If there are custom headers to send add them to the request payload.		if (is_array($headers))		{			foreach ($headers as $k => $v)			{				$request[] = $k . ': ' . $v;			}		}		// If we have data to send add it to the request payload.		if (!empty($data))		{			$request[] = null;			$request[] = $data;		}		// Send the request to the server.		fwrite($connection, implode("\r\n", $request) . "\r\n\r\n");		// Get the response data from the server.		$content = '';		while (!feof($connection))		{			$content .= fgets($connection, 4096);		}		return $this->getResponse($content);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content)	{		// Create the response object.		$return = new JHttpResponse;		// Split the response into headers and body.		$response = explode("\r\n\r\n", $content, 2);		// Get the response headers as an array.		$headers = explode("\r\n", $response[0]);		// Set the body for the response.		$return->body = $response[1];		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = $matches[0];		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to connect to a server and get the resource.	 *	 * @param   JUri     $uri      The URI to connect with.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  resource  Socket connection resource.	 *	 * @since   11.3	 * @throws  RuntimeException	 */	protected function connect(JUri $uri, $timeout = null)	{		$errno = null;		$err = null;		// Get the host from the uri.		$host = ($uri->isSSL()) ? 'ssl://' . $uri->getHost() : $uri->getHost();		// If the port is not explicitly set in the URI detect it.		if (!$uri->getPort())		{			$port = ($uri->getScheme() == 'https') ? 443 : 80;		}		// Use the set port.		else		{			$port = $uri->getPort();		}		// Build the connection key for resource memory caching.		$key = md5($host . $port);		// If the connection already exists, use it.		if (!empty($this->connections[$key]) && is_resource($this->connections[$key]))		{			// Connection reached EOF, cannot be used anymore			$meta = stream_get_meta_data($this->connections[$key]);			if ($meta['eof'])			{				if (!fclose($this->connections[$key]))				{					throw new RuntimeException('Cannot close connection');				}			}			// Make sure the connection has not timed out.			elseif (!$meta['timed_out'])			{				return $this->connections[$key];			}		}		if (!is_numeric($timeout))		{			$timeout = ini_get("default_socket_timeout");		}		// Attempt to connect to the server.		$connection = fsockopen($host, $port, $errno, $err, $timeout);		if (!$connection)		{			throw new RuntimeException($err, $errno);		}		// Since the connection was successful let's store it in case we need to use it later.		$this->connections[$key] = $connection;		// If an explicit timeout is set, set it.		if (isset($timeout))		{			stream_set_timeout($this->connections[$key], (int) $timeout);		}		return $this->connections[$key];	}	/**	 * method to check if http transport socket available for using	 *	 * @return bool true if available else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('fsockopen') && is_callable('fsockopen');	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="categories-module<?php echo $moduleclass_sfx; ?>"><?phprequire JModuleHelper::getLayoutPath('mod_articles_categories', $params->get('layout', 'default').'_items');?></ul>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE.'/components/com_content/helpers/route.php';JModelLegacy::addIncludePath(JPATH_SITE.'/components/com_content/models', 'ContentModel');/** * Helper for mod_articles_news * * @package     Joomla.Site * @subpackage  mod_articles_news */abstract class ModArticlesNewsHelper{	public static function getList(&$params)	{		$app = JFactory::getApplication();		// Get an instance of the generic articles model		$model = JModelLegacy::getInstance('Articles', 'ContentModel', array('ignore_request' => true));		// Set application parameters in model		$appParams = JFactory::getApplication()->getParams();		$model->setState('params', $appParams);		// Set the filters based on the module params		$model->setState('list.start', 0);		$model->setState('list.limit', (int) $params->get('count', 5));		$model->setState('filter.published', 1);		$model->setState('list.select', 'a.fulltext, a.id, a.title, a.alias, a.introtext, a.state, a.catid, a.created, a.created_by, a.created_by_alias,' .			' a.modified, a.modified_by, a.publish_up, a.publish_down, a.images, a.urls, a.attribs, a.metadata, a.metakey, a.metadesc, a.access,' .			' a.hits, a.featured' );		// Access filter		$access = !JComponentHelper::getParams('com_content')->get('show_noauth');		$authorised = JAccess::getAuthorisedViewLevels(JFactory::getUser()->get('id'));		$model->setState('filter.access', $access);		// Category filter		$model->setState('filter.category_id', $params->get('catid', array()));		// Filter by language		$model->setState('filter.language', $app->getLanguageFilter());		// Set ordering		$ordering = $params->get('ordering', 'a.publish_up');		$model->setState('list.ordering', $ordering);		if (trim($ordering) == 'rand()')		{			$model->setState('list.direction', '');		}		else		{			$model->setState('list.direction', 'DESC');		}		//	Retrieve Content		$items = $model->getItems();		foreach ($items as &$item)		{			$item->readmore = strlen(trim($item->fulltext));			$item->slug = $item->id.':'.$item->alias;			$item->catslug = $item->catid.':'.$item->category_alias;			if ($access || in_array($item->access, $authorised))			{				// We know that user has the privilege to view the article				$item->link = JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid));				$item->linkText = JText::_('MOD_ARTICLES_NEWS_READMORE');			}			else {				$item->link = JRoute::_('index.php?option=com_users&view=login');				$item->linkText = JText::_('MOD_ARTICLES_NEWS_READMORE_REGISTER');			}			$item->introtext = JHtml::_('content.prepare', $item->introtext, '', 'mod_articles_news.content');			//new			if (!$params->get('image'))			{				$item->introtext = preg_replace('/<img[^>]*>/', '', $item->introtext);			}			$results = $app->triggerEvent('onContentAfterDisplay', array('com_content.article', &$item, &$params, 1));			$item->afterDisplayTitle = trim(implode("\n", $results));			$results = $app->triggerEvent('onContentBeforeDisplay', array('com_content.article', &$item, &$params, 1));			$item->beforeDisplayContent = trim(implode("\n", $results));		}		return $items;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the module helper classes.if (!class_exists('ModMenuHelper')){	require __DIR__ . '/helper.php';}if (!class_exists('JAdminCssMenu')){	require __DIR__ . '/menu.php';}$lang    = JFactory::getLanguage();$user    = JFactory::getUser();$input   = JFactory::getApplication()->input;$menu    = new JAdminCSSMenu;$enabled = $input->getBool('hidemainmenu') ? false : true;// Render the module layoutrequire JModuleHelper::getLayoutPath('mod_menu', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Keychain * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Keychain Class * * @package     Joomla.Platform * @subpackage  Keychain * @since       12.3 */class JKeychain extends JRegistry{	/**	 * @var    string  Method to use for encryption.	 * @since  12.3	 */	public $method = 'aes-128-cbc';	/**	 * @var    string  Initialisation vector for encryption method.	 * @since  12.3	 */	public $iv = "1234567890123456";	/**	 * Create a passphrase file	 *	 * @param   string  $passphrase            The passphrase to store in the passphrase file.	 * @param   string  $passphraseFile        Path to the passphrase file to create.	 * @param   string  $privateKeyFile        Path to the private key file to encrypt the passphrase file.	 * @param   string  $privateKeyPassphrase  The passphrase for the private key.	 *	 * @return  boolean  Result of writing the passphrase file to disk.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase)	{		$privateKey = openssl_get_privatekey(file_get_contents($privateKeyFile), $privateKeyPassphrase);		if (!$privateKey)		{			throw new RuntimeException("Failed to load private key.");		}		$crypted = '';		if (!openssl_private_encrypt($passphrase, $crypted, $privateKey))		{			throw new RuntimeException("Failed to encrypt data using private key.");		}		return file_put_contents($passphraseFile, $crypted);	}	/**	 * Delete a registry value (very simple method)	 *	 * @param   string  $path  Registry Path (e.g. joomla.content.showauthor)	 *	 * @return  mixed  Value of old value or boolean false if operation failed	 *	 * @since   12.3	 */	public function deleteValue($path)	{		$result = null;		// Explode the registry path into an array		$nodes = explode('.', $path);		if ($nodes)		{			// Initialize the current node to be the registry root.			$node = $this->data;			// Traverse the registry to find the correct node for the result.			for ($i = 0, $n = count($nodes) - 1; $i < $n; $i++)			{			if (!isset($node->$nodes[$i]) && ($i != $n))			{			$node->$nodes[$i] = new stdClass;			}			$node = $node->$nodes[$i];			}			// Get the old value if exists so we can return it			$result = $node->$nodes[$i];			unset($node->$nodes[$i]);		}		return $result;	}	/**	 * Load a keychain file into this object.	 *	 * @param   string  $keychainFile    Path to the keychain file.	 * @param   string  $passphraseFile  The path to the passphrase file to decript the keychain.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  boolean  Result of loading the object.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function loadKeychain($keychainFile, $passphraseFile, $publicKeyFile)	{		if (!file_exists($keychainFile))		{			throw new RuntimeException('Attempting to load non-existent keychain file');		}		$passphrase = $this->getPassphraseFromFile($passphraseFile, $publicKeyFile);		$cleartext = openssl_decrypt(file_get_contents($keychainFile), $this->method, $passphrase, true, $this->iv);		if ($cleartext === false)		{			throw new RuntimeException("Failed to decrypt keychain file");		}		return $this->loadObject(json_decode($cleartext));	}	/**	 * Save this keychain to a file.	 *	 * @param   string  $keychainFile    The path to the keychain file.	 * @param   string  $passphraseFile  The path to the passphrase file to encrypt the keychain.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  boolean  Result of storing the file.	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function saveKeychain($keychainFile, $passphraseFile, $publicKeyFile)	{		$passphrase = $this->getPassphraseFromFile($passphraseFile, $publicKeyFile);		$data = $this->toString('JSON');		$encrypted = @openssl_encrypt($data, $this->method, $passphrase, true, $this->iv);		if ($encrypted === false)		{			throw new RuntimeException('Unable to encrypt keychain');		}		return file_put_contents($keychainFile, $encrypted);	}	/**	 * Get the passphrase for this keychain	 *	 * @param   string  $passphraseFile  The file containing the passphrase to encrypt and decrypt.	 * @param   string  $publicKeyFile   The file containing the public key to decrypt the passphrase file.	 *	 * @return  string  The passphrase in from passphraseFile	 *	 * @since   12.3	 * @throws  RuntimeException	 */	protected function getPassphraseFromFile($passphraseFile, $publicKeyFile)	{		if (!file_exists($publicKeyFile))		{			throw new RuntimeException('Missing public key file');		}		$publicKey = openssl_get_publickey(file_get_contents($publicKeyFile));		if (!$publicKey)		{			throw new RuntimeException("Failed to load public key.");		}		if (!file_exists($passphraseFile))		{			throw new RuntimeException('Missing passphrase file');		}		$passphrase = '';		if (!openssl_public_decrypt(file_get_contents($passphraseFile), $passphrase, $publicKey))		{			throw new RuntimeException('Failed to decrypt passphrase file');		}		return $passphrase;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one MySQL DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemMysql extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD COLUMN')			{				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD_COLUMN';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'ADD INDEX' || $alterCommand == 'ADD UNIQUE')			{				if ($pos = strpos($wordArray[5], '('))				{					$index = $this->fixQuote(substr($wordArray[5], 0, $pos));				}				else				{					$index = $this->fixQuote($wordArray[5]);				}				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'ADD_INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP INDEX')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW INDEXES IN ' . $wordArray[2] . ' WHERE Key_name = ' . $index;				$this->queryType = 'DROP_INDEX';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif ($alterCommand == 'DROP COLUMN')			{				$index = $this->fixQuote($wordArray[5]);				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE Field = ' . $index;				$this->queryType = 'DROP_COLUMN';				$this->checkQueryExpected = 0;				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SHOW COLUMNS IN ' . $wordArray[2] . ' WHERE field = ' . $this->fixQuote($wordArray[4]) . ' AND type = ' . $type;				$this->queryType = 'CHANGE_COLUMN_TYPE';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]), $type);			}		}		if ($command == 'CREATE TABLE')		{			if (strtoupper($wordArray[2] . $wordArray[3] . $wordArray[4]) == 'IFNOTEXISTS')			{				$table = $wordArray[5];			}			else			{				$table = $wordArray[2];			}			$result = 'SHOW TABLES LIKE ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == "integer" && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int(10) unsigned';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="weblinks<?php echo $moduleclass_sfx; ?>"><?php foreach ($list as $item) :	?><li>	<?php	$link = $item->link;	switch ($params->get('target', 3))	{		case 1:			// open in a new window			echo '<a href="'. $link .'" target="_blank" rel="'.$params->get('follow', 'nofollow').'">'.			htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		case 2:			// open in a popup window			echo "<a href=\"#\" onclick=\"window.open('". $link ."', '', 'toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=780,height=550'); return false\">".				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;		default:			// open in parent window			echo '<a href="'. $link .'" rel="'.$params->get('follow', 'nofollow').'">'.				htmlspecialchars($item->title, ENT_COMPAT, 'UTF-8') .'</a>';			break;	}	?>	<?php if ($params->get('description', 0)) : ?>		<?php echo nl2br($item->description); ?>	<?php endif; ?>	<?php if ($params->get('hits', 0)) : ?>		<?php echo '(' . $item->hits . ' ' . JText::_('MOD_WEBLINKS_HITS') . ')'; ?>	<?php endif; ?></li><?php endforeach; ?></ul>
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Application helper functions * * @package     Joomla.Legacy * @subpackage  Application * @since       11.1 */class JApplicationHelper{	/**	 * Client information array	 *	 * @var    array	 * @since  11.1	 */	protected static $_clients = null;	/**	 * Return the name of the request component [main component]	 *	 * @param   string  $default  The default option	 *	 * @return  string  Option (e.g. com_something)	 *	 * @since   11.1	 */	public static function getComponentName($default = null)	{		static $option;		if ($option)		{			return $option;		}		$input = JFactory::getApplication()->input;		$option = strtolower($input->get('option'));		if (empty($option))		{			$option = $default;		}		$input->set('option', $option);		return $option;	}	/**	 * Gets information on a specific client id.  This method will be useful in	 * future versions when we start mapping applications in the database.	 *	 * This method will return a client information array if called	 * with no arguments which can be used to add custom application information.	 *	 * @param   integer  $id      A client identifier	 * @param   boolean  $byName  If True, find the client by its name	 *	 * @return  mixed  Object describing the client or false if not known	 *	 * @since   11.1	 */	public static function getClientInfo($id = null, $byName = false)	{		// Only create the array if it does not exist		if (self::$_clients === null)		{			$obj = new stdClass;			// Site Client			$obj->id = 0;			$obj->name = 'site';			$obj->path = JPATH_SITE;			self::$_clients[0] = clone $obj;			// Administrator Client			$obj->id = 1;			$obj->name = 'administrator';			$obj->path = JPATH_ADMINISTRATOR;			self::$_clients[1] = clone $obj;			// Installation Client			$obj->id = 2;			$obj->name = 'installation';			$obj->path = JPATH_INSTALLATION;			self::$_clients[2] = clone $obj;		}		// If no client id has been passed return the whole array		if (is_null($id))		{			return self::$_clients;		}		// Are we looking for client information by id or by name?		if (!$byName)		{			if (isset(self::$_clients[$id]))			{				return self::$_clients[$id];			}		}		else		{			foreach (self::$_clients as $client)			{				if ($client->name == strtolower($id))				{					return $client;				}			}		}		return null;	}	/**	 * Adds information for a client.	 *	 * @param   mixed  $client  A client identifier either an array or object	 *	 * @return  boolean  True if the information is added. False on error	 *	 * @since   11.1	 */	public static function addClientInfo($client)	{		if (is_array($client))		{			$client = (object) $client;		}		if (!is_object($client))		{			return false;		}		$info = self::getClientInfo();		if (!isset($client->id))		{			$client->id = count($info);		}		self::$_clients[$client->id] = clone $client;		return true;	}	/**	 * Parse a XML install manifest file.	 *	 * XML Root tag should be 'install' except for languages which use meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @since   11.1	 * @deprecated  13.3 Use JInstaller::parseXMLInstallFile instead.	 */	public static function parseXMLInstallFile($path)	{		JLog::add('JApplicationHelper::parseXMLInstallFile is deprecated. Use JInstaller::parseXMLInstallFile instead.', JLog::WARNING, 'deprecated');		return JInstaller::parseXMLInstallFile($path);	}	/**	 * Parse a XML language meta file.	 *	 * XML Root tag  for languages which is meta file.	 *	 * @param   string  $path  Full path to XML file.	 *	 * @return  array  XML metadata.	 *	 * @deprecated  13.3 Use JInstaller::parseXMLInstallFile instead.	 */	public static function parseXMLLangMetaFile($path)	{		JLog::add('JApplicationHelper::parseXMLLangMetaFile is deprecated. Use JInstaller::parseXMLInstallFile instead.', JLog::WARNING, 'deprecated');		// Read the file to see if it's a valid component XML file		$xml = simplexml_load_file($path);		if (!$xml)		{			return false;		}		/*		 * Check for a valid XML root tag.		 *		 * Should be 'metafile'.		 */		if ($xml->getName() != 'metafile')		{			unset($xml);			return false;		}		$data = array();		$data['name'] = (string) $xml->name;		$data['type'] = $xml->attributes()->type;		$data['creationDate'] = ((string) $xml->creationDate) ? (string) $xml->creationDate : JText::_('JLIB_UNKNOWN');		$data['author'] = ((string) $xml->author) ? (string) $xml->author : JText::_('JLIB_UNKNOWN');		$data['copyright'] = (string) $xml->copyright;		$data['authorEmail'] = (string) $xml->authorEmail;		$data['authorUrl'] = (string) $xml->authorUrl;		$data['version'] = (string) $xml->version;		$data['description'] = (string) $xml->description;		$data['group'] = (string) $xml->group;		return $data;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->showMessage) : ?><?php echo $this->loadTemplate('message'); ?><?php endif; ?><?php echo $this->loadTemplate('form'); ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit messages user configuration. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesViewConfig extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->form		= $this->get('Form');		$this->item		= $this->get('Item');		$this->state	= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Bind the record to the form.		$this->form->bind($this->item);		parent::display($tpl);	}}
<?php/** * Sniffs_Squiz_WhiteSpace_OperatorSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: OperatorSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Verifies that operators have valid spacing surrounding them. * * Example: * <b class="bad">$a=$b+$c;</b> * <b class="good">$a = $b + $c;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_OperatorSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        $comparison = PHP_CodeSniffer_Tokens::$comparisonTokens;        $operators  = PHP_CodeSniffer_Tokens::$operators;        $assignment = PHP_CodeSniffer_Tokens::$assignmentTokens;        return array_unique(array_merge($comparison, $operators, $assignment));    }//function    /**     * Processes this sniff, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The current file being checked.     * @param integer                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // Skip default values in function declarations.        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['code'] === T_MINUS        )        {            if(isset($tokens[$stackPtr]['nested_parenthesis']) === true)            {                $bracket = end($tokens[$stackPtr]['nested_parenthesis']);                if(isset($tokens[$bracket]['parenthesis_owner']) === true)                {                    $function = $tokens[$bracket]['parenthesis_owner'];                    if($tokens[$function]['code'] === T_FUNCTION)                    {                        return;                    }                }            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL)        {            // Skip for '=&' case.            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_BITWISE_AND            || $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_EQUAL        || $tokens[$stackPtr]['content'] === '.='        || $tokens[$stackPtr]['content'] === '+=')        {            // Skip for '=(' case.            // Skip also '.=('            if(isset($tokens[($stackPtr + 1)]) === true            && $tokens[($stackPtr + 1)]['code'] === T_OPEN_PARENTHESIS)            {                return;            }        }        if($tokens[$stackPtr]['code'] === T_BITWISE_AND)        {            // If its not a reference, then we expect one space either side of the            // bitwise operator.            if($phpcsFile->isReference($stackPtr) === false)            {                // Check there is one space before the & operator.                if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space before "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceBeforeAmp');                }                else                {                    if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr - 1)]['content']);                        $error = sprintf('Expected 1 space before "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingBeforeAmp');                    }                }                // Check there is one space after the & operator.                if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)                {                    $error = 'Expected 1 space after "&" operator; 0 found';                    $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfterAmp');                }                else                {                    if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)                    {                        $found = strlen($tokens[($stackPtr + 1)]['content']);                        $error = sprintf('Expected 1 space after "&" operator; %s found'                        , $found);                        $phpcsFile->addError($error, $stackPtr, 'SpacingAfterAmp');                    }                }            }        }        else        {            if($tokens[$stackPtr]['code'] === T_MINUS            || $tokens[$stackPtr]['code'] === T_PLUS)            {                // Check minus spacing, but make sure we aren't just assigning                // a minus value or returning one.                $prev = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if($tokens[$prev]['code'] === T_RETURN)                {                    // Just returning a negative value; eg. return -1.                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$operators) === true)                {                    // Just trying to operate on a negative value; eg. ($var * -1).                    return;                }                if(in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$comparisonTokens) === true)                {                    // Just trying to compare a negative value; eg. ($var === -1).                    return;                }                // A list of tokens that indicate that the token is not                // part of an arithmetic operation.                $invalidTokens = array(                T_COMMA,                T_OPEN_PARENTHESIS,                T_OPEN_SQUARE_BRACKET,                T_DOUBLE_ARROW,                T_COLON,                T_INLINE_THEN, // the ternary "?"                T_CASE                );                if(in_array($tokens[$prev]['code'], $invalidTokens) === true)                {                    // Just trying to use a negative value; eg. myFunction($var, -2).                    return;                }                $number = $phpcsFile->findNext(T_WHITESPACE, ($stackPtr + 1), null, true);                if(in_array($tokens[$number]['code'], array(T_LNUMBER, T_VARIABLE)) === true)                {                    $semi = $phpcsFile->findNext(T_WHITESPACE, ($number + 1), null, true);                    if($tokens[$semi]['code'] === T_SEMICOLON)                    {                        if($prev !== false                        && (in_array($tokens[$prev]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === true))                        {                            // This is a negative assignment.                            return;                        }                    }                }            }            $operator = $tokens[$stackPtr]['content'];            if($tokens[($stackPtr - 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space before \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceBefore');            }            else if(strlen($tokens[($stackPtr - 1)]['content']) !== 1)            {                // Don't throw an error for assignments, because other standards allow                // multiple spaces there to align multiple assignments.                if(in_array($tokens[$stackPtr]['code'], PHP_CodeSniffer_Tokens::$assignmentTokens) === false)                {                    $found = strlen($tokens[($stackPtr - 1)]['content']);                    $error = sprintf('Expected 1 space before "%s"; %s found'                    , $operator, $found);                    $phpcsFile->addError($error, $stackPtr, 'SpacingBefore');                }            }            if($tokens[($stackPtr + 1)]['code'] !== T_WHITESPACE)            {                $error = "Expected 1 space after \"$operator\"; 0 found";                $phpcsFile->addError($error, $stackPtr, 'NoSpaceAfter');            }            else if(strlen($tokens[($stackPtr + 1)]['content']) !== 1)            {                $found = strlen($tokens[($stackPtr + 1)]['content']);                $error = sprintf('Expected 1 space after "%s"; %s found'                , $operator, $found);                $phpcsFile->addError($error, $stackPtr, 'SpacingAfter');            }        }    }//function}//class
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the files_joomla file in the current language (without allowing the loading of the file in the default language)$lang->load('files_joomla.sys', JPATH_SITE, null, false, false)// Fallback to the files_joomla file in the default language|| $lang->load('files_joomla.sys', JPATH_SITE, null, true);/** * A command line cron job to attempt to remove files that should have been deleted at update. * * @package  Joomla.CLI * @since    3.0 */class DeletefilesCli extends JApplicationCli{	/**	 * Entry point for CLI script	 *	 * @return  void	 *	 * @since   3.0	 */	public function doExecute()	{		// Import the dependencies		jimport('joomla.filesystem.file');		jimport('joomla.filesystem.folder');		// We need the update script		JLoader::register('JoomlaInstallerScript', JPATH_ADMINISTRATOR . '/components/com_admin/script.php');		// Instantiate the class		$class = new JoomlaInstallerScript;		// Run the delete method		$class->deleteUnexistingFiles();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('DeletefilesCli')->execute();
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelper{	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 *	 * @since	2.5.4	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$assetName = 'com_joomlaupdate';		$actions = JAccess::getActions($assetName);		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform">	<legend><?php echo JText::_('COM_ADMIN_PHP_INFORMATION'); ?></legend>	<?php echo $this->php_info;?></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset id="users-profile-core">	<legend>		<?php echo JText::_('COM_USERS_PROFILE_CORE_LEGEND'); ?>	</legend>	<dl class="dl-horizontal">		<dt>			<?php echo JText::_('COM_USERS_PROFILE_NAME_LABEL'); ?>		</dt>		<dd>			<?php echo $this->data->name; ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_USERNAME_LABEL'); ?>		</dt>		<dd>			<?php echo htmlspecialchars($this->data->username); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_REGISTERED_DATE_LABEL'); ?>		</dt>		<dd>			<?php echo JHtml::_('date', $this->data->registerDate); ?>		</dd>		<dt>			<?php echo JText::_('COM_USERS_PROFILE_LAST_VISITED_DATE_LABEL'); ?>		</dt>		<?php if ($this->data->lastvisitDate != '0000-00-00 00:00:00'){?>			<dd>				<?php echo JHtml::_('date', $this->data->lastvisitDate); ?>			</dd>		<?php }		else		{?>			<dd>				<?php echo JText::_('COM_USERS_PROFILE_NEVER_VISITED'); ?>			</dd>		<?php } ?>	</dl></fieldset>
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to strrev* Reverse a string* @param string UTF-8 encoded* @return string characters in string reverses* @see http://www.php.net/strrev* @package utf8* @subpackage strings*/function utf8_strrev($str){    preg_match_all('/./us', $str, $ar);    return join('',array_reverse($ar[0]));}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.folder');jimport('joomla.filesystem.file');/** * Media Component List Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelList extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input  = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	public function getImages()	{		$list = $this->getList();		return $list['images'];	}	public function getFolders()	{		$list = $this->getList();		return $list['folders'];	}	public function getDocuments()	{		$list = $this->getList();		return $list['docs'];	}	/**	 * Build imagelist	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	public function getList()	{		static $list;		// Only process the list once per request		if (is_array($list))		{			return $list;		}		// Get current path from request		$current = $this->getState('folder');		// If undefined, set to empty		if ($current == 'undefined')		{			$current = '';		}		if (strlen($current) > 0)		{			$basePath = COM_MEDIA_BASE.'/'.$current;		}		else		{			$basePath = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		$images		= array ();		$folders	= array ();		$docs		= array ();		$fileList = false;		$folderList = false;		if (file_exists($basePath))		{			// Get the list of files and folders from the given folder			$fileList	= JFolder::files($basePath);			$folderList = JFolder::folders($basePath);		}		// Iterate over the files if they exist		if ($fileList !== false)		{			foreach ($fileList as $file)			{				if (is_file($basePath.'/'.$file) && substr($file, 0, 1) != '.' && strtolower($file) !== 'index.html')				{					$tmp = new JObject;					$tmp->name = $file;					$tmp->title = $file;					$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $file));					$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);					$tmp->size = filesize($tmp->path);					$ext = strtolower(JFile::getExt($file));					switch ($ext)					{						// Image						case 'jpg':						case 'png':						case 'gif':						case 'xcf':						case 'odg':						case 'bmp':						case 'jpeg':						case 'ico':							$info = @getimagesize($tmp->path);							$tmp->width		= @$info[0];							$tmp->height	= @$info[1];							$tmp->type		= @$info[2];							$tmp->mime		= @$info['mime'];							if (($info[0] > 60) || ($info[1] > 60))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 60);								$tmp->width_60 = $dimensions[0];								$tmp->height_60 = $dimensions[1];							}							else {								$tmp->width_60 = $tmp->width;								$tmp->height_60 = $tmp->height;							}							if (($info[0] > 16) || ($info[1] > 16))							{								$dimensions = MediaHelper::imageResize($info[0], $info[1], 16);								$tmp->width_16 = $dimensions[0];								$tmp->height_16 = $dimensions[1];							}							else {								$tmp->width_16 = $tmp->width;								$tmp->height_16 = $tmp->height;							}							$images[] = $tmp;							break;						// Non-image document						default:							$tmp->icon_32 = "media/mime-icon-32/".$ext.".png";							$tmp->icon_16 = "media/mime-icon-16/".$ext.".png";							$docs[] = $tmp;							break;					}				}			}		}		// Iterate over the folders if they exist		if ($folderList !== false)		{			foreach ($folderList as $folder)			{				$tmp = new JObject;				$tmp->name = basename($folder);				$tmp->path = str_replace(DIRECTORY_SEPARATOR, '/', JPath::clean($basePath . '/' . $folder));				$tmp->path_relative = str_replace($mediaBase, '', $tmp->path);				$count = MediaHelper::countFiles($tmp->path);				$tmp->files = $count[0];				$tmp->folders = $count[1];				$folders[] = $tmp;			}		}		$list = array('folders' => $folders, 'docs' => $docs, 'images' => $images);		return $list;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Helper class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderHelper{	/**	 * @var		string	The extension name.	 * @since	2.5	 */	public static $extension = 'com_finder';	/**	 * Configure the Linkbar.	 *	 * @param   string  $vName  The name of the active view.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_INDEX'),			'index.php?option=com_finder&view=index',			$vName == 'index'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_MAPS'),			'index.php?option=com_finder&view=maps',			$vName == 'maps'		);		JHtmlSidebar::addEntry(			JText::_('COM_FINDER_SUBMENU_FILTERS'),			'index.php?option=com_finder&view=filters',			$vName == 'filters'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject  A JObject containing the allowed actions.	 *	 * @since   2.5	 */	public static function getActions()	{		$user = JFactory::getUser();		$result = new JObject;		$assetName = 'com_finder';		$actions = JAccess::getActions($assetName, 'component');		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-80">	<fieldset class="adminform">		<legend><?php echo JText::_('COM_CONFIG_TEXT_FILTER_SETTINGS'); ?></legend>		<p><?php echo JText::_('COM_CONFIG_TEXT_FILTERS_DESC'); ?></p>		<?php foreach ($this->form->getFieldset('filters') as $field) : ?>			<?php echo $field->label; ?>			<div class="clr"> </div>			<?php echo $field->input; ?>		<?php endforeach; ?>	</fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Content Component Controller * * @package     Joomla.Site * @subpackage  com_wrapper * @since       1.5 */class WrapperController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JControllerLegacy  This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$cachable = true;		// Set the default view name and format from the Request.		$vName = $this->input->get('view', 'wrapper');		$this->input->set('view', $vName);		return parent::display($cachable, array('Itemid' => 'INT'));	}}
<?php/** * @package     Joomla.Installation * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Controller class to refresh the preinstall view for the Joomla Installer. * * @package     Joomla.Installation * @subpackage  Controller * @since       3.1 */class InstallationControllerPreinstall extends JControllerBase{	/**	 * Execute the controller.	 *	 * @return  void	 *	 * @since   3.1	 */	public function execute()	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = $this->getApplication();		// Check for request forgeries.		JSession::checkToken() or $app->sendJsonResponse(new Exception(JText::_('JINVALID_TOKEN'), 403));		// Redirect to the page.		$r = new stdClass;		$r->view = 'preinstall';		$app->sendJsonResponse($r);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();?>		<script type="text/javascript">			window.addEvent('domready', function(){				validate();				document.getElements('select').addEvent('change', function(e){validate();});			});			function validate(){				var value	= document.id('jform_assignment').value;				var list	= document.id('menu-assignment');				if (value == '-' || value == '0'){					$$('.jform-assignments-button').each(function(el) {el.setProperty('disabled', true); });					list.getElements('input').each(function(el){						el.setProperty('disabled', true);						if (value == '-'){							el.setProperty('checked', false);						} else {							el.setProperty('checked', true);						}					});				} else {					$$('.jform-assignments-button').each(function(el) {el.setProperty('disabled', false); });					list.getElements('input').each(function(el){						el.setProperty('disabled', false);					});				}			}		</script>		<fieldset class="adminform">			<legend><?php echo JText::_('COM_MODULES_MENU_ASSIGNMENT'); ?></legend>			<label id="jform_menus-lbl" for="jform_menus"><?php echo JText::_('COM_MODULES_MODULE_ASSIGN'); ?></label>			<fieldset id="jform_menus" class="radio">				<select name="jform[assignment]" id="jform_assignment">					<?php echo JHtml::_('select.options', ModulesHelper::getAssignmentOptions($this->item->client_id), 'value', 'text', $this->item->assignment, true);?>				</select>			</fieldset>			<label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = !el.checked; });">				<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>			</button>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = false; });">				<?php echo JText::_('JGLOBAL_SELECTION_NONE'); ?>			</button>			<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.chkbox').each(function(el) { el.checked = true; });">				<?php echo JText::_('JGLOBAL_SELECTION_ALL'); ?>			</button>			<div class="clr"></div>			<div id="menu-assignment">			<?php echo JHtml::_('tabs.start', 'module-menu-assignment-tabs', array('useCookie' => 1));?>			<?php foreach ($menuTypes as &$type) :				echo JHtml::_('tabs.panel', $type->title ? $type->title : $type->menutype, $type->menutype.'-details');				$chkbox_class = 'chk-menulink-' . $type->id; ?>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = !el.checked; });">					<?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = false; });">					<?php echo JText::_('JGLOBAL_SELECTION_NONE'); ?>				</button>				<button type="button" class="jform-assignments-button jform-rightbtn" onclick="$$('.<?php echo $chkbox_class; ?>').each(function(el) { el.checked = true; });">					<?php echo JText::_('JGLOBAL_SELECTION_ALL'); ?>				</button>				<div class="clr"></div>				<?php				$count 	= count($type->links);				$i		= 0;				if ($count) :				?>				<ul class="menu-links">					<?php					foreach ($type->links as $link) :						if (trim($this->item->assignment) == '-'):							$checked = '';						elseif ($this->item->assignment == 0):							$checked = ' checked="checked"';						elseif ($this->item->assignment < 0):							$checked = in_array(-$link->value, $this->item->assigned) ? ' checked="checked"' : '';						elseif ($this->item->assignment > 0) :							$checked = in_array($link->value, $this->item->assigned) ? ' checked="checked"' : '';						endif;					?>					<li class="menu-link">						<input type="checkbox" class="chkbox <?php echo $chkbox_class; ?>" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php echo $checked;?>/>						<label for="link<?php echo (int) $link->value;?>">							<?php echo $link->text; ?>						</label>					</li>					<?php if ($count > 20 && ++$i == ceil($count / 2)) :?>					</ul><ul class="menu-links">					<?php endif; ?>					<?php endforeach; ?>				</ul>				<div class="clr"></div>				<?php endif; ?>			<?php endforeach; ?>			<?php echo JHtml::_('tabs.end');?>			</div>		</fieldset>
<?php// {{{ license/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 foldmethod=marker: *///// +----------------------------------------------------------------------+// | This library is free software; you can redistribute it and/or modify |// | it under the terms of the GNU Lesser General Public License as       |// | published by the Free Software Foundation; either version 2.1 of the |// | License, or (at your option) any later version.                      |// |                                                                      |// | This library is distributed in the hope that it will be useful, but  |// | WITHOUT ANY WARRANTY; without even the implied warranty of           |// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |// | Lesser General Public License for more details.                      |// |                                                                      |// | You should have received a copy of the GNU Lesser General Public     |// | License along with this library; if not, write to the Free Software  |// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 |// | USA.                                                                 |// +----------------------------------------------------------------------+//// }}}/** * Encode/decode Internationalized Domain Names. * * The class allows to convert internationalized domain names * (see RFC 3490 for details) as they can be used with various registries worldwide * to be translated between their original (localized) form and their encoded form * as it will be used in the DNS (Domain Name System). * * The class provides two public methods, encode() and decode(), which do exactly * what you would expect them to do. You are allowed to use complete domain names, * simple strings and complete email addresses as well. That means, that you might * use any of the following notations: * * - www.nrgler.com * - xn--nrgler-wxa * - xn--brse-5qa.xn--knrz-1ra.info * * Unicode input might be given as either UTF-8 string, UCS-4 string or UCS-4 * array. Unicode output is available in the same formats. * You can select your preferred format via {@link set_paramter()}. * * ACE input and output is always expected to be ASCII. * * @author  Matthias Sommerfeld <mso@phlylabs.de> * @copyright 2004-2007 phlyLabs Berlin, http://phlylabs.de * @version 0.5.1 * */class idna_convert{    /**     * Holds all relevant mapping tables, loaded from a seperate file on construct     * See RFC3454 for details     *     * @var array     * @access private     */    var $NP = array();    // Internal settings, do not mess with them    var $_punycode_prefix = 'xn--';    var $_invalid_ucs =     0x80000000;    var $_max_ucs =         0x10FFFF;    var $_base =            36;    var $_tmin =            1;    var $_tmax =            26;    var $_skew =            38;    var $_damp =            700;    var $_initial_bias =    72;    var $_initial_n =       0x80;    var $_sbase =           0xAC00;    var $_lbase =           0x1100;    var $_vbase =           0x1161;    var $_tbase =           0x11A7;    var $_lcount =          19;    var $_vcount =          21;    var $_tcount =          28;    var $_ncount =          588;   // _vcount * _tcount    var $_scount =          11172; // _lcount * _tcount * _vcount    var $_error =           false;    // See {@link set_paramter()} for details of how to change the following    // settings from within your script / application    var $_api_encoding   =  'utf8'; // Default input charset is UTF-8    var $_allow_overlong =  false;  // Overlong UTF-8 encodings are forbidden    var $_strict_mode    =  false;  // Behave strict or not    // The constructor    function idna_convert($options = false)    {        $this->slast = $this->_sbase + $this->_lcount * $this->_vcount * $this->_tcount;        if (function_exists('file_get_contents')) {            $this->NP = unserialize(file_get_contents(dirname(__FILE__).'/npdata.ser'));        } else {            $this->NP = unserialize(join('', file(dirname(__FILE__).'/npdata.ser')));        }        // If parameters are given, pass these to the respective method        if (is_array($options)) {            return $this->set_parameter($options);        }        return true;    }    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function set_parameter($option, $value = false)    {        if (!is_array($option)) {            $option = array($option => $value);        }        foreach ($option as $k => $v) {            switch ($k) {            case 'encoding':                switch ($v) {                case 'utf8':                case 'ucs4_string':                case 'ucs4_array':                    $this->_api_encoding = $v;                    break;                default:                    $this->_error('Set Parameter: Unknown parameter '.$v.' for option '.$k);                    return false;                }                break;            case 'overlong':                $this->_allow_overlong = ($v) ? true : false;                break;            case 'strict':                $this->_strict_mode = ($v) ? true : false;                break;            default:                $this->_error('Set Parameter: Unknown option '.$k);                return false;            }        }        return true;    }    /**     * Decode a given ACE domain name     * @param    string   Domain name (ACE string)     * [@param    string   Desired output encoding, see {@link set_parameter}]     * @return   string   Decoded Domain name (UTF-8 or UCS-4)     * @access   public     */    function decode($input, $one_time_encoding = false)    {        // Optionally set        if ($one_time_encoding) {            switch ($one_time_encoding) {            case 'utf8':            case 'ucs4_string':            case 'ucs4_array':                break;            default:                $this->_error('Unknown encoding '.$one_time_encoding);                return false;            }        }        // Make sure to drop any newline characters around        $input = trim($input);        // Negotiate input and try to determine, whether it is a plain string,        // an email address or something like a complete URL        if (strpos($input, '@')) { // Maybe it is an email address            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            list ($email_pref, $input) = explode('@', $input, 2);            $arr = explode('.', $input);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $input = join('.', $arr);            $arr = explode('.', $email_pref);            foreach ($arr as $k => $v) {                if (preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $v)) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }            }            $email_pref = join('.', $arr);            $return = $email_pref . '@' . $input;        } elseif (preg_match('![:\./]!', $input)) { // Or a complete domain name (with or without paths / parameters)            // No no in strict mode            if ($this->_strict_mode) {                $this->_error('Only simple domain name parts can be handled in strict mode');                return false;            }            $parsed = parse_url($input);            if (isset($parsed['host'])) {                $arr = explode('.', $parsed['host']);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    if ($conv) $arr[$k] = $conv;                }                $parsed['host'] = join('.', $arr);                $return =                        (empty($parsed['scheme']) ? '' : $parsed['scheme'].(strtolower($parsed['scheme']) == 'mailto' ? ':' : '://'))                        .(empty($parsed['user']) ? '' : $parsed['user'].(empty($parsed['pass']) ? '' : ':'.$parsed['pass']).'@')                        .$parsed['host']                        .(empty($parsed['port']) ? '' : ':'.$parsed['port'])                        .(empty($parsed['path']) ? '' : $parsed['path'])                        .(empty($parsed['query']) ? '' : '?'.$parsed['query'])                        .(empty($parsed['fragment']) ? '' : '#'.$parsed['fragment']);            } else { // parse_url seems to have failed, try without it                $arr = explode('.', $input);                foreach ($arr as $k => $v) {                    $conv = $this->_decode($v);                    $arr[$k] = ($conv) ? $conv : $v;                }                $return = join('.', $arr);            }        } else { // Otherwise we consider it being a pure domain name string            $return = $this->_decode($input);            if (!$return) $return = $input;        }        // The output is UTF-8 by default, other output formats need conversion here        // If one time encoding is given, use this, else the objects property        switch (($one_time_encoding) ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            return $return;            break;        case 'ucs4_string':           return $this->_ucs4_to_ucs4_string($this->_utf8_to_ucs4($return));           break;        case 'ucs4_array':            return $this->_utf8_to_ucs4($return);            break;        default:            $this->_error('Unsupported output format');            return false;        }    }    /**     * Encode a given UTF-8 domain name     * @param    string   Domain name (UTF-8 or UCS-4)     * [@param    string   Desired input encoding, see {@link set_parameter}]     * @return   string   Encoded Domain name (ACE string)     * @access   public     */    function encode($decoded, $one_time_encoding = false)    {        // Forcing conversion of input to UCS4 array        // If one time encoding is given, use this, else the objects property        switch ($one_time_encoding ? $one_time_encoding : $this->_api_encoding) {        case 'utf8':            $decoded = $this->_utf8_to_ucs4($decoded);            break;        case 'ucs4_string':           $decoded = $this->_ucs4_string_to_ucs4($decoded);        case 'ucs4_array':           break;        default:            $this->_error('Unsupported input format: '.($one_time_encoding ? $one_time_encoding : $this->_api_encoding));            return false;        }        // No input, no output, what else did you expect?        if (empty($decoded)) return '';        // Anchors for iteration        $last_begin = 0;        // Output string        $output = '';        foreach ($decoded as $k => $v) {            // Make sure to use just the plain dot            switch($v) {            case 0x3002:            case 0xFF0E:            case 0xFF61:                $decoded[$k] = 0x2E;                // Right, no break here, the above are converted to dots anyway            // Stumbling across an anchoring character            case 0x2E:            case 0x2F:            case 0x3A:            case 0x3F:            case 0x40:                // Neither email addresses nor URLs allowed in strict mode                if ($this->_strict_mode) {                   $this->_error('Neither email addresses nor URLs are allowed in strict mode.');                   return false;                } else {                    // Skip first char                    if ($k) {                        $encoded = '';                        $encoded = $this->_encode(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        if ($encoded) {                            $output .= $encoded;                        } else {                            $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($k)-$last_begin)));                        }                        $output .= chr($decoded[$k]);                    }                    $last_begin = $k + 1;                }            }        }        // Catch the rest of the string        if ($last_begin) {            $inp_len = sizeof($decoded);            $encoded = '';            $encoded = $this->_encode(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            if ($encoded) {                $output .= $encoded;            } else {                $output .= $this->_ucs4_to_utf8(array_slice($decoded, $last_begin, (($inp_len)-$last_begin)));            }            return $output;        } else {            if ($output = $this->_encode($decoded)) {                return $output;            } else {                return $this->_ucs4_to_utf8($decoded);            }        }    }    /**     * Use this method to get the last error ocurred     * @param    void     * @return   string   The last error, that occured     * @access   public     */    function get_last_error()    {        return $this->_error;    }    /**     * The actual decoding algorithm     * @access   private     */    function _decode($encoded)    {        // We do need to find the Punycode prefix        if (!preg_match('!^'.preg_quote($this->_punycode_prefix, '!').'!', $encoded)) {            $this->_error('This is not a punycode string');            return false;        }        $encode_test = preg_replace('!^'.preg_quote($this->_punycode_prefix, '!').'!', '', $encoded);        // If nothing left after removing the prefix, it is hopeless        if (!$encode_test) {            $this->_error('The given encoded string was empty');            return false;        }        // Find last occurence of the delimiter        $delim_pos = strrpos($encoded, '-');        if ($delim_pos > strlen($this->_punycode_prefix)) {            for ($k = strlen($this->_punycode_prefix); $k < $delim_pos; ++$k) {                $decoded[] = ord($encoded{$k});            }        } else {            $decoded = array();        }        $deco_len = count($decoded);        $enco_len = strlen($encoded);        // Wandering through the strings; init        $is_first = true;        $bias     = $this->_initial_bias;        $idx      = 0;        $char     = $this->_initial_n;        for ($enco_idx = ($delim_pos) ? ($delim_pos + 1) : 0; $enco_idx < $enco_len; ++$deco_len) {            for ($old_idx = $idx, $w = 1, $k = $this->_base; 1 ; $k += $this->_base) {                $digit = $this->_decode_digit($encoded{$enco_idx++});                $idx += $digit * $w;                $t = ($k <= $bias) ? $this->_tmin :                        (($k >= $bias + $this->_tmax) ? $this->_tmax : ($k - $bias));                if ($digit < $t) break;                $w = (int) ($w * ($this->_base - $t));            }            $bias = $this->_adapt($idx - $old_idx, $deco_len + 1, $is_first);            $is_first = false;            $char += (int) ($idx / ($deco_len + 1));            $idx %= ($deco_len + 1);            if ($deco_len > 0) {                // Make room for the decoded char                for ($i = $deco_len; $i > $idx; $i--) {                    $decoded[$i] = $decoded[($i - 1)];                }            }            $decoded[$idx++] = $char;        }        return $this->_ucs4_to_utf8($decoded);    }    /**     * The actual encoding algorithm     * @access   private     */    function _encode($decoded)    {        // We cannot encode a domain name containing the Punycode prefix        $extract = strlen($this->_punycode_prefix);        $check_pref = $this->_utf8_to_ucs4($this->_punycode_prefix);        $check_deco = array_slice($decoded, 0, $extract);        if ($check_pref == $check_deco) {            $this->_error('This is already a punycode string');            return false;        }        // We will not try to encode strings consisting of basic code points only        $encodable = false;        foreach ($decoded as $k => $v) {            if ($v > 0x7a) {                $encodable = true;                break;            }        }        if (!$encodable) {            $this->_error('The given string does not contain encodable chars');            return false;        }        // Do NAMEPREP        $decoded = $this->_nameprep($decoded);        if (!$decoded || !is_array($decoded)) return false; // NAMEPREP failed        $deco_len  = count($decoded);        if (!$deco_len) return false; // Empty array        $codecount = 0; // How many chars have been consumed        $encoded = '';        // Copy all basic code points to output        for ($i = 0; $i < $deco_len; ++$i) {            $test = $decoded[$i];            // Will match [-0-9a-zA-Z]            if ((0x2F < $test && $test < 0x40) || (0x40 < $test && $test < 0x5B)                    || (0x60 < $test && $test <= 0x7B) || (0x2D == $test)) {                $encoded .= chr($decoded[$i]);                $codecount++;            }        }        if ($codecount == $deco_len) return $encoded; // All codepoints were basic ones        // Start with the prefix; copy it to output        $encoded = $this->_punycode_prefix.$encoded;        // If we have basic code points in output, add an hyphen to the end        if ($codecount) $encoded .= '-';        // Now find and encode all non-basic code points        $is_first  = true;        $cur_code  = $this->_initial_n;        $bias      = $this->_initial_bias;        $delta     = 0;        while ($codecount < $deco_len) {            // Find the smallest code point >= the current code point and            // remember the last ouccrence of it in the input            for ($i = 0, $next_code = $this->_max_ucs; $i < $deco_len; $i++) {                if ($decoded[$i] >= $cur_code && $decoded[$i] <= $next_code) {                    $next_code = $decoded[$i];                }            }            $delta += ($next_code - $cur_code) * ($codecount + 1);            $cur_code = $next_code;            // Scan input again and encode all characters whose code point is $cur_code            for ($i = 0; $i < $deco_len; $i++) {                if ($decoded[$i] < $cur_code) {                    $delta++;                } elseif ($decoded[$i] == $cur_code) {                    for ($q = $delta, $k = $this->_base; 1; $k += $this->_base) {                        $t = ($k <= $bias) ? $this->_tmin :                                (($k >= $bias + $this->_tmax) ? $this->_tmax : $k - $bias);                        if ($q < $t) break;                        $encoded .= $this->_encode_digit(intval($t + (($q - $t) % ($this->_base - $t)))); //v0.4.5 Changed from ceil() to intval()                        $q = (int) (($q - $t) / ($this->_base - $t));                    }                    $encoded .= $this->_encode_digit($q);                    $bias = $this->_adapt($delta, $codecount+1, $is_first);                    $codecount++;                    $delta = 0;                    $is_first = false;                }            }            $delta++;            $cur_code++;        }        return $encoded;    }    /**     * Adapt the bias according to the current code point and position     * @access   private     */    function _adapt($delta, $npoints, $is_first)    {        $delta = intval($is_first ? ($delta / $this->_damp) : ($delta / 2));        $delta += intval($delta / $npoints);        for ($k = 0; $delta > (($this->_base - $this->_tmin) * $this->_tmax) / 2; $k += $this->_base) {            $delta = intval($delta / ($this->_base - $this->_tmin));        }        return intval($k + ($this->_base - $this->_tmin + 1) * $delta / ($delta + $this->_skew));    }    /**     * Encoding a certain digit     * @access   private     */    function _encode_digit($d)    {        return chr($d + 22 + 75 * ($d < 26));    }    /**     * Decode a certain digit     * @access   private     */    function _decode_digit($cp)    {        $cp = ord($cp);        return ($cp - 48 < 10) ? $cp - 22 : (($cp - 65 < 26) ? $cp - 65 : (($cp - 97 < 26) ? $cp - 97 : $this->_base));    }    /**     * Internal error handling method     * @access   private     */    function _error($error = '')    {        $this->_error = $error;    }    /**     * Do Nameprep according to RFC3491 and RFC3454     * @param    array    Unicode Characters     * @return   string   Unicode Characters, Nameprep'd     * @access   private     */    function _nameprep($input)    {        $output = array();        $error = false;        //        // Mapping        // Walking through the input array, performing the required steps on each of        // the input chars and putting the result into the output array        // While mapping required chars we apply the cannonical ordering        foreach ($input as $v) {            // Map to nothing == skip that code point            if (in_array($v, $this->NP['map_nothing'])) continue;            // Try to find prohibited input            if (in_array($v, $this->NP['prohibit']) || in_array($v, $this->NP['general_prohibited'])) {                $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                return false;            }            foreach ($this->NP['prohibit_ranges'] as $range) {                if ($range[0] <= $v && $v <= $range[1]) {                    $this->_error('NAMEPREP: Prohibited input U+'.sprintf('%08X', $v));                    return false;                }            }            //            // Hangul syllable decomposition            if (0xAC00 <= $v && $v <= 0xD7AF) {                foreach ($this->_hangul_decompose($v) as $out) {                    $output[] = (int) $out;                }            // There's a decomposition mapping for that code point            } elseif (isset($this->NP['replacemaps'][$v])) {                foreach ($this->_apply_cannonical_ordering($this->NP['replacemaps'][$v]) as $out) {                    $output[] = (int) $out;                }            } else {                $output[] = (int) $v;            }        }        // Before applying any Combining, try to rearrange any Hangul syllables        $output = $this->_hangul_compose($output);        //        // Combine code points        //        $last_class   = 0;        $last_starter = 0;        $out_len      = count($output);        for ($i = 0; $i < $out_len; ++$i) {            $class = $this->_get_combining_class($output[$i]);            if ((!$last_class || $last_class > $class) && $class) {                // Try to match                $seq_len = $i - $last_starter;                $out = $this->_combine(array_slice($output, $last_starter, $seq_len));                // On match: Replace the last starter with the composed character and remove                // the now redundant non-starter(s)                if ($out) {                    $output[$last_starter] = $out;                    if (count($out) != $seq_len) {                        for ($j = $i+1; $j < $out_len; ++$j) {                            $output[$j-1] = $output[$j];                        }                        unset($output[$out_len]);                    }                    // Rewind the for loop by one, since there can be more possible compositions                    $i--;                    $out_len--;                    $last_class = ($i == $last_starter) ? 0 : $this->_get_combining_class($output[$i-1]);                    continue;                }            }            // The current class is 0            if (!$class) $last_starter = $i;            $last_class = $class;        }        return $output;    }    /**     * Decomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    integer  32bit UCS4 code point     * @return   array    Either Hangul Syllable decomposed or original 32bit value as one value array     * @access   private     */    function _hangul_decompose($char)    {        $sindex = (int) $char - $this->_sbase;        if ($sindex < 0 || $sindex >= $this->_scount) {            return array($char);        }        $result = array();        $result[] = (int) $this->_lbase + $sindex / $this->_ncount;        $result[] = (int) $this->_vbase + ($sindex % $this->_ncount) / $this->_tcount;        $T = intval($this->_tbase + $sindex % $this->_tcount);        if ($T != $this->_tbase) $result[] = $T;        return $result;    }    /**     * Ccomposes a Hangul syllable     * (see http://www.unicode.org/unicode/reports/tr15/#Hangul     * @param    array    Decomposed UCS4 sequence     * @return   array    UCS4 sequence with syllables composed     * @access   private     */    function _hangul_compose($input)    {        $inp_len = count($input);        if (!$inp_len) return array();        $result = array();        $last = (int) $input[0];        $result[] = $last; // copy first char from input to output        for ($i = 1; $i < $inp_len; ++$i) {            $char = (int) $input[$i];            $sindex = $last - $this->_sbase;            $lindex = $last - $this->_lbase;            $vindex = $char - $this->_vbase;            $tindex = $char - $this->_tbase;            // Find out, whether two current characters are LV and T            if (0 <= $sindex && $sindex < $this->_scount && ($sindex % $this->_tcount == 0)                    && 0 <= $tindex && $tindex <= $this->_tcount) {                // create syllable of form LVT                $last += $tindex;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // Find out, whether two current characters form L and V            if (0 <= $lindex && $lindex < $this->_lcount && 0 <= $vindex && $vindex < $this->_vcount) {                // create syllable of form LV                $last = (int) $this->_sbase + ($lindex * $this->_vcount + $vindex) * $this->_tcount;                $result[(count($result) - 1)] = $last; // reset last                continue; // discard char            }            // if neither case was true, just add the character            $last = $char;            $result[] = $char;        }        return $result;    }    /**     * Returns the combining class of a certain wide char     * @param    integer    Wide char to check (32bit integer)     * @return   integer    Combining class if found, else 0     * @access   private     */    function _get_combining_class($char)    {        return isset($this->NP['norm_combcls'][$char]) ? $this->NP['norm_combcls'][$char] : 0;    }    /**     * Apllies the cannonical ordering of a decomposed UCS4 sequence     * @param    array      Decomposed UCS4 sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _apply_cannonical_ordering($input)    {        $swap = true;        $size = count($input);        while ($swap) {            $swap = false;            $last = $this->_get_combining_class(intval($input[0]));            for ($i = 0; $i < $size-1; ++$i) {                $next = $this->_get_combining_class(intval($input[$i+1]));                if ($next != 0 && $last > $next) {                    // Move item leftward until it fits                    for ($j = $i + 1; $j > 0; --$j) {                        if ($this->_get_combining_class(intval($input[$j-1])) <= $next) break;                        $t = intval($input[$j]);                        $input[$j] = intval($input[$j-1]);                        $input[$j-1] = $t;                        $swap = true;                    }                    // Reentering the loop looking at the old character again                    $next = $last;                }                $last = $next;            }        }        return $input;    }    /**     * Do composition of a sequence of starter and non-starter     * @param    array      UCS4 Decomposed sequence     * @return   array      Ordered USC4 sequence     * @access   private     */    function _combine($input)    {        $inp_len = count($input);        foreach ($this->NP['replacemaps'] as $np_src => $np_target) {            if ($np_target[0] != $input[0]) continue;            if (count($np_target) != $inp_len) continue;            $hit = false;            foreach ($input as $k2 => $v2) {                if ($v2 == $np_target[$k2]) {                    $hit = true;                } else {                    $hit = false;                    break;                }            }            if ($hit) return $np_src;        }        return false;    }    /**     * This converts an UTF-8 encoded string to its UCS-4 representation     * By talking about UCS-4 "strings" we mean arrays of 32bit integers representing     * each of the "chars". This is due to PHP not being able to handle strings with     * bit depth different from 8. This apllies to the reverse method _ucs4_to_utf8(), too.     * The following UTF-8 encodings are supported:     * bytes bits  representation     * 1        7  0xxxxxxx     * 2       11  110xxxxx 10xxxxxx     * 3       16  1110xxxx 10xxxxxx 10xxxxxx     * 4       21  11110xxx 10xxxxxx 10xxxxxx 10xxxxxx     * 5       26  111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * 6       31  1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx     * Each x represents a bit that can be used to store character data.     * The five and six byte sequences are part of Annex D of ISO/IEC 10646-1:2000     * @access   private     */    function _utf8_to_ucs4($input)    {        $output = array();        $out_len = 0;        $inp_len = strlen($input);        $mode = 'next';        $test = 'none';        for ($k = 0; $k < $inp_len; ++$k) {            $v = ord($input{$k}); // Extract byte from input string            if ($v < 128) { // We found an ASCII char - put into stirng as is                $output[$out_len] = $v;                ++$out_len;                if ('add' == $mode) {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                continue;            }            if ('next' == $mode) { // Try to find the next start byte; determine the width of the Unicode char                $start_byte = $v;                $mode = 'add';                $test = 'range';                if ($v >> 5 == 6) { // &110xxxxx 10xxxxx                    $next_byte = 0; // Tells, how many times subsequent bitmasks must rotate 6bits to the left                    $v = ($v - 192) << 6;                } elseif ($v >> 4 == 14) { // &1110xxxx 10xxxxxx 10xxxxxx                    $next_byte = 1;                    $v = ($v - 224) << 12;                } elseif ($v >> 3 == 30) { // &11110xxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 2;                    $v = ($v - 240) << 18;                } elseif ($v >> 2 == 62) { // &111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 3;                    $v = ($v - 248) << 24;                } elseif ($v >> 1 == 126) { // &1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx                    $next_byte = 4;                    $v = ($v - 252) << 30;                } else {                    $this->_error('This might be UTF-8, but I don\'t understand it at byte '.$k);                    return false;                }                if ('add' == $mode) {                    $output[$out_len] = (int) $v;                    ++$out_len;                    continue;                }            }            if ('add' == $mode) {                if (!$this->_allow_overlong && $test == 'range') {                    $test = 'none';                    if (($v < 0xA0 && $start_byte == 0xE0) || ($v < 0x90 && $start_byte == 0xF0) || ($v > 0x8F && $start_byte == 0xF4)) {                        $this->_error('Bogus UTF-8 character detected (out of legal range) at byte '.$k);                        return false;                    }                }                if ($v >> 6 == 2) { // Bit mask must be 10xxxxxx                    $v = ($v - 128) << ($next_byte * 6);                    $output[($out_len - 1)] += $v;                    --$next_byte;                } else {                    $this->_error('Conversion from UTF-8 to UCS-4 failed: malformed input at byte '.$k);                    return false;                }                if ($next_byte < 0) {                    $mode = 'next';                }            }        } // for        return $output;    }    /**     * Convert UCS-4 string into UTF-8 string     * See _utf8_to_ucs4() for details     * @access   private     */    function _ucs4_to_utf8($input)    {        $output = '';        $k = 0;        foreach ($input as $v) {            ++$k;            // $v = ord($v);            if ($v < 128) { // 7bit are transferred literally                $output .= chr($v);            } elseif ($v < (1 << 11)) { // 2 bytes                $output .= chr(192 + ($v >> 6)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 16)) { // 3 bytes                $output .= chr(224 + ($v >> 12)) . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 21)) { // 4 bytes                $output .= chr(240 + ($v >> 18)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } elseif ($v < (1 << 26)) { // 5 bytes                $output .= chr(248 + ($v >> 24)) . chr(128 + (($v >> 18) & 63))                         . chr(128 + (($v >> 12) & 63)) . chr(128 + (($v >> 6) & 63))                         . chr(128 + ($v & 63));            } elseif ($v < (1 << 31)) { // 6 bytes                $output .= chr(252 + ($v >> 30)) . chr(128 + (($v >> 24) & 63))                         . chr(128 + (($v >> 18) & 63)) . chr(128 + (($v >> 12) & 63))                         . chr(128 + (($v >> 6) & 63)) . chr(128 + ($v & 63));            } else {                $this->_error('Conversion from UCS-4 to UTF-8 failed: malformed input at byte '.$k);                return false;            }        }        return $output;    }    /**      * Convert UCS-4 array into UCS-4 string      *      * @access   private      */    function _ucs4_to_ucs4_string($input)    {        $output = '';        // Take array values and split output to 4 bytes per value        // The bit mask is 255, which reads &11111111        foreach ($input as $v) {            $output .= chr(($v >> 24) & 255).chr(($v >> 16) & 255).chr(($v >> 8) & 255).chr($v & 255);        }        return $output;    }    /**      * Convert UCS-4 strin into UCS-4 garray      *      * @access   private      */    function _ucs4_string_to_ucs4($input)    {        $output = array();        $inp_len = strlen($input);        // Input length must be dividable by 4        if ($inp_len % 4) {            $this->_error('Input UCS4 string is broken');            return false;        }        // Empty input - return empty output        if (!$inp_len) return $output;        for ($i = 0, $out_len = -1; $i < $inp_len; ++$i) {            // Increment output position every 4 input bytes            if (!($i % 4)) {                $out_len++;                $output[$out_len] = 0;            }            $output[$out_len] += ord($input{$i}) << (8 * (3 - ($i % 4) ) );        }        return $output;    }}/*** Adapter class for aligning the API of idna_convert with that of Net_IDNA* @author  Matthias Sommerfeld <mso@phlylabs.de>*/class Net_IDNA_php4 extends idna_convert{    /**     * Sets a new option value. Available options and values:     * [encoding - Use either UTF-8, UCS4 as array or UCS4 as string as input ('utf8' for UTF-8,     *         'ucs4_string' and 'ucs4_array' respectively for UCS4); The output is always UTF-8]     * [overlong - Unicode does not allow unnecessarily long encodings of chars,     *             to allow this, set this parameter to true, else to false;     *             default is false.]     * [strict - true: strict mode, good for registration purposes - Causes errors     *           on failures; false: loose mode, ideal for "wildlife" applications     *           by silently ignoring errors and returning the original input instead     *     * @param    mixed     Parameter to set (string: single parameter; array of Parameter => Value pairs)     * @param    string    Value to use (if parameter 1 is a string)     * @return   boolean   true on success, false otherwise     * @access   public     */    function setParams($option, $param = false)    {        return $this->IC->set_parameters($option, $param);    }}?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Text Parser class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerParserTxt extends FinderIndexerParser{	/**	 * Method to process Text input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	protected function process($input)	{		return $input;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.application.router');/** * Class to create and parse routes * * @package  Joomla.Installation * @since    1.5 */class JRouterInstallation extends JRouter{	/**	 * Function to convert a route to an internal URI	 *	 * @param   JURI  $url  The uri.	 *	 * @return  boolean	 *	 * @since   1.5	 */	public function parse($url)	{		return true;	}	/**	 * Function to convert an internal URI to a route	 *	 * @param   string  $url  The internal URL	 *	 * @return  string  The absolute search engine friendly URL	 *	 * @since   1.5	 */	public function build($url)	{		$url = str_replace('&amp;', '&', $url);		return new JUri($url);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_breadcrumbs * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_breadcrumbs * * @package     Joomla.Site * @subpackage  mod_breadcrumbs * @since       1.5 */class ModBreadCrumbsHelper{	public static function getList(&$params)	{		// Get the PathWay object from the application		$app		= JFactory::getApplication();		$pathway	= $app->getPathway();		$items		= $pathway->getPathWay();		$count = count($items);		// Don't use $items here as it references JPathway properties directly		$crumbs	= array();		for ($i = 0; $i < $count; $i ++)		{			$crumbs[$i] = new stdClass;			$crumbs[$i]->name = stripslashes(htmlspecialchars($items[$i]->name, ENT_COMPAT, 'UTF-8'));			$crumbs[$i]->link = JRoute::_($items[$i]->link);		}		if ($params->get('showHome', 1))		{			$item = new stdClass;			$item->name = htmlspecialchars($params->get('homeText', JText::_('MOD_BREADCRUMBS_HOME')));			$item->link = JRoute::_('index.php?Itemid=' . $app->getMenu()->getDefault()->id);			array_unshift($crumbs, $item);		}		return $crumbs;	}	/**	 * Set the breadcrumbs separator for the breadcrumbs display.	 *	 * @param   string	$custom	Custom xhtml complient string to separate the	 * items of the breadcrumbs	 * @return  string	Separator string	 * @since   1.5	 */	public static function setSeparator($custom = null)	{		$lang = JFactory::getLanguage();		// If a custom separator has not been provided we try to load a template		// specific one first, and if that is not present we load the default separator		if ($custom == null)		{			if ($lang->isRTL())			{				$_separator = JHtml::_('image', 'system/arrow_rtl.png', null, null, true);			}			else			{				$_separator = JHtml::_('image', 'system/arrow.png', null, null, true);			}		}		else		{			$_separator = htmlspecialchars($custom);		}		return $_separator;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Parser base class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexerParser{	/**	 * Method to get a parser, creating it if necessary.	 *	 * @param   string  $format  The type of parser to load.	 *	 * @return  FinderIndexerParser  A FinderIndexerParser instance.	 *	 * @since   2.5	 * @throws  Exception on invalid parser.	 */	public static function getInstance($format)	{		static $instances;		// Only create one parser for each format.		if (isset($instances[$format]))		{			return $instances[$format];		}		// Create an array of instances if necessary.		if (!is_array($instances))		{			$instances = array();		}		// Setup the adapter for the parser.		$format = JFilterInput::getInstance()->clean($format, 'cmd');		$path = __DIR__ . '/parser/' . $format . '.php';		$class = 'FinderIndexerParser' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			$instances[$format] = new $class;		}		else		{			// Throw invalid format exception.			throw new Exception(JText::sprintf('COM_FINDER_INDEXER_INVALID_PARSER', $format));		}		return $instances[$format];	}	/**	 * Method to parse input and extract the plain text. Because this method is	 * called from both inside and outside the indexer, it needs to be able to	 * batch out its parsing functionality to deal with the inefficiencies of	 * regular expressions. We will parse recursively in 2KB chunks.	 *	 * @param   string  $input  The input to parse.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	public function parse($input)	{		$return = null;		// Parse the input in batches if bigger than 2KB.		if (strlen($input) > 2048)		{			$start = 0;			$end = strlen($input);			$chunk = 2048;			while ($start < $end)			{				// Setup the string.				$string = substr($input, $start, $chunk);				// Find the last space character if we aren't at the end.				$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);				// Truncate to the last space character.				if ($ls !== false)				{					$string = substr($string, 0, $ls);				}				// Adjust the start position for the next iteration.				$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);				// Parse the chunk.				$return .= $this->process($string);			}		}		// The input is less than 2KB so we can parse it efficiently.		else		{			// Parse the chunk.			$return .= $this->process($input);		}		return $return;	}	/**	 * Method to process input and extract the plain text.	 *	 * @param   string  $input  The input to process.	 *	 * @return  string  The plain text input.	 *	 * @since   2.5	 */	abstract protected function process($input);}
<?php/** * Joomla_Sniffs_ControlStructures_MultiLineConditionSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MultiLineConditionSniff.php 289839 2009-10-21 23:11:33Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_ControlStructures_MultiLineConditionSniff. * * Ensure multi-line IF conditions are defined correctly. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_MultiLineConditionSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_IF);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        // We need to work out how far indented the if statement        // itself is, so we can work out how far to indent conditions.        $statementIndent = 0;        for ($i = ($stackPtr - 1); $i >= 0; $i--) {            if ($tokens[$i]['line'] !== $tokens[$stackPtr]['line']) {                $i++;                break;            }        }        if ($i >= 0 && $tokens[$i]['code'] === T_WHITESPACE) {            $statementIndent = strlen($tokens[$i]['content']);        }        // Each line between the parenthesis should be indented 4 spaces        // and start with an operator, unless the line is inside a        // function call, in which case it is ignored.        $openBracket  = $tokens[$stackPtr]['parenthesis_opener'];        $closeBracket = $tokens[$stackPtr]['parenthesis_closer'];        $lastLine = $tokens[$openBracket]['line'];        for ($i = ($openBracket + 1); $i <= $closeBracket; $i++) {            if ($tokens[$i]['line'] !== $lastLine) {                if ($tokens[$i]['line'] === $tokens[$closeBracket]['line']) {                    $next = $phpcsFile->findNext(T_WHITESPACE, $i, null, true);                    if ($next == $closeBracket) {	                    $error = 'Closing parenthesis of a multi-line IF statement must be on the same line';	                    $phpcsFile->addError($error, $i, 'CloseBracketNewLine');	                    $i ++;	                    continue;                    }                }                    $expectedIndent = ($statementIndent + 1);                // We changed lines, so this should be a whitespace indent token.                if ($tokens[$i]['code'] !== T_WHITESPACE) {                    $foundIndent = 0;                } else {                    $foundIndent = strlen($tokens[$i]['content']);                }                if ($expectedIndent !== $foundIndent) {                    $error = 'Multi-line IF statement not indented correctly; expected %s spaces but found %s';                    $data  = array(                              $expectedIndent,                              $foundIndent,                             );                    $phpcsFile->addError($error, $i, 'Alignment', $data);                }                $next = $phpcsFile->findNext(T_WHITESPACE, $i, null, true);                if (in_array($tokens[$next]['code'], PHP_CodeSniffer_Tokens::$booleanOperators) === false) {                    $error = 'Each line in a multi-line IF statement must begin with a boolean operator';                    $phpcsFile->addError($error, $i, 'StartWithBoolean');                }                $lastLine = $tokens[$i]['line'];            }//end if            if ($tokens[$i]['code'] === T_STRING) {                $next = $phpcsFile->findNext(T_WHITESPACE, ($i + 1), null, true);                if ($tokens[$next]['code'] === T_OPEN_PARENTHESIS) {                    // This is a function call, so skip to the end as they                    // have their own indentation rules.                    $i        = $tokens[$next]['parenthesis_closer'];                    $lastLine = $tokens[$i]['line'];                    continue;                }            }        }//end for    }//end process()}//end class?>
<?php/** * @package     Joomla.Site * @subpackage  mod_stats * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><dl class="stats-module<?php echo $moduleclass_sfx ?>"><?php foreach ($list as $item) : ?>	<dt><?php echo $item->title;?></dt>	<dd><?php echo $item->data;?></dd><?php endforeach; ?></dl>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;
<?php/** * @package     Joomla.Administrator * @subpackage  mod_submenu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$list    = JSubMenuHelper::getEntries();$filters = JSubMenuHelper::getFilters();$action  = JSubMenuHelper::getAction();$displayMenu    = count($list);$displayFilters = count($filters);$hide = JFactory::getApplication()->input->getBool('hidemainmenu');if ($displayMenu || $displayFilters){	require JModuleHelper::getLayoutPath('mod_submenu', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a list of content languages * * @package     Joomla.Libraries * @subpackage  Form * @see         JFormFieldLanguage for a select list of application languages. * @since       1.6 */class JFormFieldContentlanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'ContentLanguage';	/**	 * Method to get the field options for content languages.	 *	 * @return  array  The options the field is going to show.	 *	 * @since   1.6	 */	protected function getOptions()	{		return array_merge(parent::getOptions(), JHtml::_('contentlanguage.existing'));	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Deprecated class placeholder.  You should use JApplicationWeb instead. * * @package     Joomla.Legacy * @subpackage  Application * @since       11.3 * @deprecated  12.3 Use JApplicationWeb instead. */class JWeb extends JApplicationWeb{	/**	 * Class constructor.	 *	 * @param   mixed  $input   An optional argument to provide dependency injection for the application's	 *                          input object.  If the argument is a JInput object that object will become	 *                          the application's input object, otherwise a default input object is created.	 * @param   mixed  $config  An optional argument to provide dependency injection for the application's	 *                          config object.  If the argument is a JRegistry object that object will become	 *                          the application's config object, otherwise a default config object is created.	 * @param   mixed  $client  An optional argument to provide dependency injection for the application's	 *                          client object.  If the argument is a JApplicationWebClient object that object will become	 *                          the application's client object, otherwise a default client object is created.	 *	 * @since   11.3	 * @deprecated  12.3 Use JApplicationWeb instead.	 */	public function __construct(JInput $input = null, JRegistry $config = null, JApplicationWebClient $client = null)	{		JLog::add('JWeb is deprecated. Use JApplicationWeb instead.', JLog::WARNING, 'deprecated');		parent::__construct($input, $registry, $client);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_DEBUG_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('debug') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Supports an HTML select list of banners * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldOrdering extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Ordering';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$html = array();		$attr = '';		// Initialize some field attributes.		$attr .= $this->element['class'] ? ' class="'.(string) $this->element['class'].'"' : '';		$attr .= ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$attr .= $this->element['size'] ? ' size="'.(int) $this->element['size'].'"' : '';		// Initialize JavaScript field attributes.		$attr .= $this->element['onchange'] ? ' onchange="'.(string) $this->element['onchange'].'"' : '';		// Get some field values from the form.		$bannerId	= (int) $this->form->getValue('id');		$categoryId	= (int) $this->form->getValue('catid');		// Build the query for the ordering list.		$query = 'SELECT ordering AS value, name AS text' .				' FROM #__banners' .				' WHERE catid = ' . (int) $categoryId .				' ORDER BY ordering';		// Create a read-only list (no name) with a hidden input to store the value.		if ((string) $this->element['readonly'] == 'true')		{			$html[] = JHtml::_('list.ordering', '', $query, trim($attr), $this->value, $bannerId ? 0 : 1);			$html[] = '<input type="hidden" name="'.$this->name.'" value="'.$this->value.'"/>';		}		// Create a regular list.		else {			$html[] = JHtml::_('list.ordering', $this->name, $query, trim($attr), $this->value, $bannerId ? 0 : 1);		}		return implode($html);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesHelper{	/**	 * Configure the Linkbar.	 *	 * @param   string	The name of the active view.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($vName)	{		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_ADD'),			'index.php?option=com_messages&view=message&layout=edit',			$vName == 'message'		);		JHtmlSidebar::addEntry(			JText::_('COM_MESSAGES_READ'),			'index.php?option=com_messages',			$vName == 'messages'		);	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @return  JObject	 */	public static function getActions()	{		$user	= JFactory::getUser();		$result	= new JObject;		$actions = JAccess::getActions('com_messages');		foreach ($actions as $action)		{			$result->set($action->name,	$user->authorise($action->name, 'com_messages'));		}		return $result;	}	/**	 * Get a list of filter options for the state of a module.	 *	 * @return  array  An array of JHtmlOption elements.	 */	public static function getStateOptions()	{		// Build the filter options.		$options	= array();		$options[]	= JHtml::_('select.option',	'1',	JText::_('COM_MESSAGES_OPTION_READ'));		$options[]	= JHtml::_('select.option',	'0',	JText::_('COM_MESSAGES_OPTION_UNREAD'));		$options[]	= JHtml::_('select.option',	'-2',	JText::_('JTRASHED'));		return $options;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTML utility class for building a dropdown menu * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlDropdown{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * @var    string  HTML markup for the dropdown list	 * @since  3.0	 */	protected static $dropDownList = null;	/**	 * Method to inject needed script	 *	 * @return  void	 *	 * @since   3.0	 */	public static function init()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Depends on Bootstrap		JHtml::_('bootstrap.framework');		JFactory::getDocument()->addScriptDeclaration("			(function($){				$(document).ready(function (){					$('.has-context')					.mouseenter(function (){						$('.btn-group',$(this)).show();					})					.mouseleave(function (){						$('.btn-group',$(this)).hide();						$('.btn-group',$(this)).removeClass('open');					});					contextAction =function (cbId, task)					{						$('input[name=\"cid[]\"]').removeAttr('checked');						$('#' + cbId).attr('checked','checked');						Joomla.submitbutton(task);					}				});			})(jQuery);			"		);		// Set static array		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to start a new dropdown menu	 *	 * @return  void	 *	 * @since   3.0	 */	public static function start()	{		// Only start once		if (isset(self::$loaded[__METHOD__]) && self::$loaded[__METHOD__] == true)		{			return;		}		$dropDownList = '<div class="btn-group" style="margin-left:6px;display:none">							<a href="#" data-toggle="dropdown" class="dropdown-toggle btn btn-mini">								<span class="caret"></span>							</a>							<ul class="dropdown-menu">';		self::$dropDownList = $dropDownList;		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to render current dropdown menu	 *	 * @return  string  HTML markup for the dropdown list	 *	 * @since   3.0	 */	public static function render()	{		$dropDownList = self::$dropDownList;		$dropDownList .= '</ul></div>';		self::$dropDownList	= null;		self::$loaded['JHtmlDropdown::start'] = false;		return $dropDownList;	}	/**	 * Append an edit item to the current dropdown menu	 *	 * @param   integer  $id          Record ID	 * @param   string   $prefix      Task prefix	 * @param   string   $customLink  The custom link if dont use default Joomla action format	 *	 * @return  void	 *	 * @since   3.0	 */	public static function edit($id, $prefix = '', $customLink = '')	{		self::start();		if (!$customLink)		{			$option = JFactory::getApplication()->input->getCmd('option');			$link = 'index.php?option=' . $option;		}		else		{			$link = $customLink;		}		$link .= '&task=' . $prefix . 'edit&id=' . $id;		$link = JRoute::_($link);		self::addCustomItem(JText::_('JACTION_EDIT'), $link);		return;	}	/**	 * Append a publish item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function publish($checkboxId, $prefix = '')	{		$task = $prefix . 'publish';		self::addCustomItem(JText::_('JTOOLBAR_PUBLISH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unpublish item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unpublish($checkboxId, $prefix = '')	{		$task = $prefix . 'unpublish';		self::addCustomItem(JText::_('JTOOLBAR_UNPUBLISH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a featured item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function featured($checkboxId, $prefix = '')	{		$task = $prefix . 'featured';		self::addCustomItem(JText::_('JFEATURED'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unfeatured item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unfeatured($checkboxId, $prefix = '')	{		$task = $prefix . 'unfeatured';		self::addCustomItem(JText::_('JUNFEATURED'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an archive item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function archive($checkboxId, $prefix = '')	{		$task = $prefix . 'archive';		self::addCustomItem(JText::_('JTOOLBAR_ARCHIVE'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an unarchive item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function unarchive($checkboxId, $prefix = '')	{		$task = $prefix . 'unpublish';		self::addCustomItem(JText::_('JTOOLBAR_UNARCHIVE'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a trash item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function trash($checkboxId, $prefix = '')	{		$task = $prefix . 'trash';		self::addCustomItem(JText::_('JTOOLBAR_TRASH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append an untrash item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function untrash($checkboxId, $prefix = '')	{		$task = $prefix . 'publish';		self::addCustomItem(JText::_('JTOOLBAR_UNTRASH'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Append a checkin item to the current dropdown menu	 *	 * @param   string  $checkboxId  ID of corresponding checkbox of the record	 * @param   string  $prefix      The task prefix	 *	 * @return  void	 *	 * @since   3.0	 */	public static function checkin($checkboxId, $prefix = '')	{		$task = $prefix . 'checkin';		self::addCustomItem(JText::_('JTOOLBAR_CHECKIN'), 'javascript:void(0)', 'onclick="contextAction(\'' . $checkboxId . '\', \'' . $task . '\')"');		return;	}	/**	 * Writes a divider between dropdown items	 *	 * @return  void	 *	 * @since   3.0	 */	public static function divider()	{		self::$dropDownList .= '<li class="divider"></li>';		return;	}	/**	 * Append a custom item to current dropdown menu	 *	 * @param   string   $label           The label of item	 * @param   string   $link            The link of item	 * @param   string   $linkAttributes  Custom link attributes	 * @param   string   $className       Class name of item	 * @param   boolean  $ajaxLoad        True if using ajax load when item clicked	 * @param   string   $jsCallBackFunc  Javascript function name, called when ajax load successfully	 *	 * @return  void	 *	 * @since   3.0	 */	public static function addCustomItem($label, $link = 'javascript:void(0)', $linkAttributes = '', $className = '', $ajaxLoad = false,		$jsCallBackFunc = null)	{		self::start();		if ($ajaxLoad)		{			$href = ' href = "javascript:void(0)" onclick="loadAjax(\'' . $link . '\', \'' . $jsCallBackFunc . '\')"';		}		else		{			$href = ' href = "' . $link . '" ';		}		$dropDownList = self::$dropDownList;		$dropDownList .= '<li class="' . $className . '"><a ' . $linkAttributes . $href . ' >';		$dropDownList .= $label;		$dropDownList .= '</a></li>';		self::$dropDownList = $dropDownList;		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Set up the sanitised target for the ul$ulTarget = str_replace('/', '-', $this->folders['data']->relative);?><ul class="nav nav-list collapse in" id="collapseFolder-<?php echo $ulTarget; ?>"><?php if (isset($this->folders['children'])) :	foreach ($this->folders['children'] as $folder) :	// Get a sanitised name for the target	$target = str_replace('/', '-', $folder['data']->relative); ?>	<li id="<?php echo $target; ?>">		<i class="icon-folder-2 pull-left" data-toggle="collapse" data-target="#collapseFolder-<?php echo $target; ?>"></i>		<a href="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $folder['data']->relative; ?>" target="folderframe">			<?php echo $folder['data']->name; ?>		</a>		<?php echo $this->getFolderLevel($folder); ?>	</li><?php endforeach;endif; ?></ul>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$user  = JFactory::getUser();$input = JFactory::getApplication()->input;?><div class="row-fluid">	<!-- Begin Sidebar -->	<div class="span2">		<div id="treeview">			<div id="media-tree_tree" class="sidebar-nav">				<?php echo $this->loadTemplate('folders'); ?>			</div>		</div>	</div>	<style>		.overall-progress,		.current-progress {			width: 150px;		}	</style>	<!-- End Sidebar -->	<!-- Begin Content -->	<div class="span10">		<?php echo $this->loadTemplate('navigation'); ?>		<?php if (($user->authorise('core.create', 'com_media')) and $this->require_ftp) : ?>			<form action="index.php?option=com_media&amp;task=ftpValidate" name="ftpForm" id="ftpForm" method="post">				<fieldset title="<?php echo JText::_('COM_MEDIA_DESCFTPTITLE'); ?>">					<legend><?php echo JText::_('COM_MEDIA_DESCFTPTITLE'); ?></legend>					<?php echo JText::_('COM_MEDIA_DESCFTP'); ?>					<label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>					<input type="text" id="username" name="username" class="inputbox" size="70" value="" />					<label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>					<input type="password" id="password" name="password" class="inputbox" size="70" value="" />				</fieldset>			</form>		<?php endif; ?>		<form action="index.php?option=com_media" name="adminForm" id="mediamanager-form" method="post" enctype="multipart/form-data" >			<input type="hidden" name="task" value="" />			<input type="hidden" name="cb1" id="cb1" value="0" />			<input class="update-folder" type="hidden" name="folder" id="folder" value="<?php echo $this->state->folder; ?>" />		</form>		<?php if ($user->authorise('core.create', 'com_media')):?>		<!-- File Upload Form -->		<div id="collapseUpload" class="collapse">			<form action="<?php echo JURI::base(); ?>index.php?option=com_media&amp;task=file.upload&amp;tmpl=component&amp;<?php echo $this->session->getName().'='.$this->session->getId(); ?>&amp;<?php echo JSession::getFormToken();?>=1&amp;format=html" id="uploadForm" class="form-inline" name="uploadForm" method="post" enctype="multipart/form-data">				<div id="uploadform">					<fieldset id="upload-noflash" class="actions">							<label for="upload-file" class="control-label"><?php echo JText::_('COM_MEDIA_UPLOAD_FILE'); ?></label>								<input type="file" id="upload-file" name="Filedata[]" multiple /> <button class="btn btn-primary" id="upload-submit"><i class="icon-upload icon-white"></i> <?php echo JText::_('COM_MEDIA_START_UPLOAD'); ?></button>								<p class="help-block"><?php echo $this->config->get('upload_maxsize') == '0' ? JText::_('COM_MEDIA_UPLOAD_FILES_NOLIMIT') : JText::sprintf('COM_MEDIA_UPLOAD_FILES', $this->config->get('upload_maxsize')); ?></p>					</fieldset>					<input class="update-folder" type="hidden" name="folder" id="folder" value="<?php echo $this->state->folder; ?>" />					<input type="hidden" name="return-url" value="<?php echo base64_encode('index.php?option=com_media'); ?>" />				</div>			</form>		</div>		<div id="collapseFolder" class="collapse">			<form action="index.php?option=com_media&amp;task=folder.create&amp;tmpl=<?php echo $input->getCmd('tmpl', 'index');?>" name="folderForm" id="folderForm" class="form-inline" method="post">					<div class="path">						<input class="inputbox" type="text" id="folderpath" readonly="readonly" />						<input class="inputbox" type="text" id="foldername" name="foldername"  />						<input class="update-folder" type="hidden" name="folderbase" id="folderbase" value="<?php echo $this->state->folder; ?>" />						<button type="submit" class="btn"><i class="icon-folder-open"></i> <?php echo JText::_('COM_MEDIA_CREATE_FOLDER'); ?></button>					</div>					<?php echo JHtml::_('form.token'); ?>			</form>		</div>		<?php endif;?>		<form action="index.php?option=com_media&amp;task=folder.create&amp;tmpl=<?php echo $input->getCmd('tmpl', 'index');?>" name="folderForm" id="folderForm" method="post">			<div id="folderview">				<div class="view">					<iframe class="thumbnail" src="index.php?option=com_media&amp;view=mediaList&amp;tmpl=component&amp;folder=<?php echo $this->state->folder;?>" id="folderframe" name="folderframe" width="100%" height="500px" marginwidth="0" marginheight="0" scrolling="auto"></iframe>				</div>				<?php echo JHtml::_('form.token'); ?>			</div>		</form>	</div>	<!-- End Content --></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$rssurl	= $params->get('rssurl', '');$rssrtl	= $params->get('rssrtl', 0);//check if feed URL has been setif (empty ($rssurl)){	echo '<div>';	echo JText::_('MOD_FEED_ERR_NO_URL');	echo '</div>';	return;}$feed = ModFeedHelper::getFeed($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_feed', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Database Importer Class * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */abstract class JDatabaseImporter{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users list controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerUsers extends JControllerAdmin{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_USERS_USERS';	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @return  UsersControllerUsers	 *	 * @since   1.6	 * @see     JController	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('block', 'changeBlock');		$this->registerTask('unblock', 'changeBlock');	}	/**	 * Proxy for getModel.	 *	 * @param   string  $name    The model name. Optional.	 * @param   string  $prefix  The class prefix. Optional.	 * @param   array   $config  Configuration array for model. Optional.	 *	 * @return  object  The model.	 *	 * @since   1.6	 */	public function getModel($name = 'User', $prefix = 'UsersModel', $config = array('ignore_request' => true))	{		return parent::getModel($name, $prefix, $config);	}	/**	 * Method to change the block status on a record.	 *	 * @return  void	 *	 * @since   1.6	 */	public function changeBlock()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids    = $this->input->get('cid', array(), 'array');		$values = array('block' => 1, 'unblock' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Change the state of the records.			if (!$model->block($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}			else			{				if ($value == 1)				{					$this->setMessage(JText::plural('COM_USERS_N_USERS_BLOCKED', count($ids)));				}				elseif ($value == 0)				{					$this->setMessage(JText::plural('COM_USERS_N_USERS_UNBLOCKED', count($ids)));				}			}		}		$this->setRedirect('index.php?option=com_users&view=users');	}	/**	 * Method to activate a record.	 *	 * @return  void	 *	 * @since   1.6	 */	public function activate()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$ids = $this->input->get('cid', array(), 'array');		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_USERS_USERS_NO_ITEM_SELECTED'));		}		else		{			// Get the model.			$model = $this->getModel();			// Change the state of the records.			if (!$model->activate($ids))			{				JError::raiseWarning(500, $model->getError());			}			else			{				$this->setMessage(JText::plural('COM_USERS_N_USERS_ACTIVATED', count($ids)));			}		}		$this->setRedirect('index.php?option=com_users&view=users');	}}
<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Version information class for the Joomla Platform. * * @package  Joomla.Platform * @since    11.1 */final class JPlatform{	// Product name.	const PRODUCT = 'Joomla Platform';	// Release version.	const RELEASE = '12.2';	// Maintenance version.	const MAINTENANCE = '0';	// Development STATUS.	const STATUS = 'Stable';	// Build number.	const BUILD = 0;	// Code name.	const CODE_NAME = 'Neil Armstrong';	// Release date.	const RELEASE_DATE = '21-September-2012';	// Release time.	const RELEASE_TIME = '00:00';	// Release timezone.	const RELEASE_TIME_ZONE = 'GMT';	// Copyright Notice.	const COPYRIGHT = 'Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.';	// Link text.	const LINK_TEXT = '<a href="http://www.joomla.org">Joomla!</a> is Free Software released under the GNU General Public License.';	/**	 * Compares two a "PHP standardized" version number against the current Joomla Platform version.	 *	 * @param   string  $minimum  The minimum version of the Joomla Platform which is compatible.	 *	 * @return  boolean  True if the version is compatible.	 *	 * @see     http://www.php.net/version_compare	 * @since   11.1	 */	public static function isCompatible($minimum)	{		return (version_compare(self::getShortVersion(), $minimum, 'eq') == 1);	}	/**	 * Gets a "PHP standardized" version string for the current Joomla Platform.	 *	 * @return  string  Version string.	 *	 * @since   11.1	 */	public static function getShortVersion()	{		return self::RELEASE . '.' . self::MAINTENANCE;	}	/**	 * Gets a version string for the current Joomla Platform with all release information.	 *	 * @return  string  Complete version string.	 *	 * @since   11.1	 */	public static function getLongVersion()	{		return self::PRODUCT . ' ' . self::RELEASE . '.' . self::MAINTENANCE . ' ' . self::STATUS . ' [ ' . self::CODE_NAME . ' ] '			. self::RELEASE_DATE . ' ' . self::RELEASE_TIME . ' ' . self::RELEASE_TIME_ZONE;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Media Component Manager Model * * @package     Joomla.Administrator * @subpackage  com_media * @since       1.5 */class MediaModelManager extends JModelLegacy{	public function getState($property = null, $default = null)	{		static $set;		if (!$set)		{			$input = JFactory::getApplication()->input;			$folder = $input->get('folder', '', 'path');			$this->setState('folder', $folder);			$fieldid = $input->get('fieldid', '');			$this->setState('field.id', $fieldid);			$parent = str_replace("\\", "/", dirname($folder));			$parent = ($parent == '.') ? null : $parent;			$this->setState('parent', $parent);			$set = true;		}		return parent::getState($property, $default);	}	/**	 * Image Manager Popup	 *	 * @param string $listFolder The image directory to display	 * @since 1.5	 */	function getFolderList($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		//corrections for windows paths		$base = str_replace(DIRECTORY_SEPARATOR, '/', $base);		$com_media_base_uni = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE);		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$document = JFactory::getDocument();		$document->setTitle(JText::_('COM_MEDIA_INSERT_IMAGE'));		// Build the array of select options for the folder list		$options[] = JHtml::_('select.option', "", "/");		foreach ($folders as $folder)		{			$folder		= str_replace($com_media_base_uni, "", str_replace(DIRECTORY_SEPARATOR, '/', $folder));			$value		= substr($folder, 1);			$text		= str_replace(DIRECTORY_SEPARATOR, "/", $folder);			$options[]	= JHtml::_('select.option', $value, $text);		}		// Sort the folder list array		if (is_array($options))		{			sort($options);		}		// Get asset and author id (use integer filter)		$input = JFactory::getApplication()->input;		$asset = $input->get('asset', 0, 'integer');		$author = $input->get('author', 0, 'integer');		// Create the drop-down folder select list		$list = JHtml::_('select.genericlist', $options, 'folderlist', 'class="inputbox" size="1" onchange="ImageManager.setFolder(this.options[this.selectedIndex].value, '.$asset.', '.$author.')" ', 'value', 'text', $base);		return $list;	}	function getFolderTree($base = null)	{		// Get some paths from the request		if (empty($base))		{			$base = COM_MEDIA_BASE;		}		$mediaBase = str_replace(DIRECTORY_SEPARATOR, '/', COM_MEDIA_BASE.'/');		// Get the list of folders		jimport('joomla.filesystem.folder');		$folders = JFolder::folders($base, '.', true, true);		$tree = array();		foreach ($folders as $folder)		{			$folder		= str_replace(DIRECTORY_SEPARATOR, '/', $folder);			$name		= substr($folder, strrpos($folder, '/') + 1);			$relative	= str_replace($mediaBase, '', $folder);			$absolute	= $folder;			$path		= explode('/', $relative);			$node		= (object) array('name' => $name, 'relative' => $relative, 'absolute' => $absolute);			$tmp = &$tree;			for ($i = 0, $n = count($path); $i < $n; $i++)			{				if (!isset($tmp['children']))				{					$tmp['children'] = array();				}				if ($i == $n - 1)				{					// We need to place the node					$tmp['children'][$relative] = array('data' => $node, 'children' => array());					break;				}				if (array_key_exists($key = implode('/', array_slice($path, 0, $i + 1)), $tmp['children']))				{					$tmp = &$tmp['children'][$key];				}			}		}		$tree['data'] = (object) array('name' => JText::_('COM_MEDIA_MEDIA'), 'relative' => '', 'absolute' => $base);		return $tree;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client table * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersTableClient extends JTable{	public function __construct(&$_db)	{		$this->checked_out_time = $_db->getNullDate();		parent::__construct('#__banner_clients', 'id', $_db);	}	/**	 * Method to set the publishing state for a row or list of rows in the database	 * table.  The method respects checked out rows by other users and will attempt	 * to checkin rows that it can after adjustments are made.	 *	 * @param   mixed	An optional array of primary key values to update.  If not	 *					set the instance property value is used.	 * @param   integer The publishing state. eg. [0 = unpublished, 1 = published]	 * @param   integer The user id of the user performing the operation.	 * @return  boolean  True on success.	 * @since   1.0.4	 */	public function publish($pks = null, $state = 1, $userId = 0)	{		$k = $this->_tbl_key;		// Sanitize input.		JArrayHelper::toInteger($pks);		$userId = (int) $userId;		$state  = (int) $state;		// If there are no primary keys set check to see if the instance key is set.		if (empty($pks))		{			if ($this->$k)			{				$pks = array($this->$k);			}			// Nothing to set publishing state on, return false.			else {				$this->setError(JText::_('JLIB_DATABASE_ERROR_NO_ROWS_SELECTED'));				return false;			}		}		// Build the WHERE clause for the primary keys.		$where = $k.'='.implode(' OR '.$k.'=', $pks);		// Determine if there is checkin support for the table.		if (!property_exists($this, 'checked_out') || !property_exists($this, 'checked_out_time'))		{			$checkin = '';		}		else		{			$checkin = ' AND (checked_out = 0 OR checked_out = '.(int) $userId.')';		}		// Update the publishing state for rows with the given primary keys.		$this->_db->setQuery(			'UPDATE '.$this->_db->quoteName($this->_tbl).			' SET '.$this->_db->quoteName('state').' = '.(int) $state .			' WHERE ('.$where.')' .			$checkin		);		try		{			$this->_db->execute();		}		catch (RuntimeException $e)		{			$this->setError($e->getMessage());			return false;		}		// If checkin is supported and all rows were adjusted, check them in.		if ($checkin && (count($pks) == $this->_db->getAffectedRows()))		{			// Checkin the rows.			foreach ($pks as $pk)			{				$this->checkin($pk);			}		}		// If the JTable instance value is in the list of primary keys that were set, set the instance.		if (in_array($this->$k, $pks))		{			$this->state = $state;		}		$this->setError('');		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * Requires the value entered be one of the options in a field of type="list" * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleOptions extends JFormRule{	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check each value and return true if we get a match		foreach ($element->option as $option)		{			if ($value == (string) $option->attributes()->value)			{				return true;			}		}		return false;	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_syndicate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params->def('format', 'rss');$link = ModSyndicateHelper::getLink($params);if (is_null($link)){	return;}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$text = htmlspecialchars($params->get('text'));require JModuleHelper::getLayoutPath('mod_syndicate', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR.'/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();$user = JFactory::getUser();?><label id="jform_menuselect-lbl" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label><div class="btn-toolbar">	<button class="btn" type="button" class="jform-rightbtn" onclick="$$('.chk-menulink').each(function(el) { el.checked = !el.checked; });">		<i class="icon-checkbox-partial"></i> <?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>	</button></div><div id="menu-assignment">	<ul class="menu-links thumbnails">		<?php foreach ($menuTypes as &$type) : ?>			<li class="span3">				<div class="thumbnail">				<button class="btn" type="button" class="jform-rightbtn" onclick="$$('.<?php echo $type->menutype; ?>').each(function(el) { el.checked = !el.checked; });">					<i class="icon-checkbox-partial"></i> <?php echo JText::_('JGLOBAL_SELECTION_INVERT'); ?>				</button>				<h5><?php echo $type->title ? $type->title : $type->menutype; ?></h5>				<?php foreach ($type->links as $link) : ?>					<label class="checkbox small" for="link<?php echo (int) $link->value;?>" >					<input type="checkbox" name="jform[assigned][]" value="<?php echo (int) $link->value;?>" id="link<?php echo (int) $link->value;?>"<?php if ($link->template_style_id == $this->item->id):?> checked="checked"<?php endif;?><?php if ($link->checked_out && $link->checked_out != $user->id):?> disabled="disabled"<?php else:?> class="chk-menulink <?php echo $type->menutype; ?>"<?php endif;?> />					<?php echo $link->text; ?>					</label>				<?php endforeach; ?>				</div>			</li>		<?php endforeach; ?>	</ul></div>
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP client class. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttp{	/**	 * @var    JRegistry  Options for the HTTP client.	 * @since  11.3	 */	protected $options;	/**	 * @var    JHttpTransport  The HTTP transport object to use in sending HTTP requests.	 * @since  11.3	 */	protected $transport;	/**	 * Constructor.	 *	 * @param   JRegistry       $options    Client options object. If the registry contains any headers.* elements,	 *                                      these will be added to the request headers.	 * @param   JHttpTransport  $transport  The HTTP transport object.	 *	 * @since   11.3	 */	public function __construct(JRegistry $options = null, JHttpTransport $transport = null)	{		$this->options   = isset($options) ? $options : new JRegistry;		$this->transport = isset($transport) ? $transport : JHttpFactory::getAvailableDriver($this->options);	}	/**	 * Get an option from the HTTP client.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   11.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the HTTP client.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JHttp  This object for method chaining.	 *	 * @since   11.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}	/**	 * Method to send the OPTIONS command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function options($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('OPTIONS', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the HEAD command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function head($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('HEAD', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the GET command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function get($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('GET', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the POST command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function post($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('POST', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the PUT command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function put($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('PUT', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the DELETE command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function delete($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('DELETE', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the TRACE command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function trace($url, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('TRACE', new JUri($url), null, $headers, $timeout, $this->options->get('userAgent', null));	}	/**	 * Method to send the PATCH command to the server.	 *	 * @param   string   $url      Path to the resource.	 * @param   mixed    $data     Either an associative array or a string to be sent with the request.	 * @param   array    $headers  An array of name-value pairs to include in the header of the request.	 * @param   integer  $timeout  Read timeout in seconds.	 *	 * @return  JHttpResponse	 *	 * @since   12.2	 */	public function patch($url, $data, array $headers = null, $timeout = null)	{		// Look for headers set in the options.		$temp = (array) $this->options->get('headers');		foreach ($temp as $key => $val)		{			if (!isset($headers[$key]))			{				$headers[$key] = $val;			}		}		// Look for timeout set in the options.		if ($timeout === null && $this->options->exists('timeout'))		{			$timeout = $this->options->get('timeout');		}		return $this->transport->request('PATCH', new JUri($url), $data, $headers, $timeout, $this->options->get('userAgent', null));	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages master display controller. * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/messages.php';		$view   = $this->input->get('view', 'messages');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'message' && $layout == 'edit' && !$this->checkEditId('com_messages.edit.message', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Load the submenu.		MessagesHelper::addSubmenu($this->input->get('view', 'messages'));		parent::display();	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Captcha * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_PLATFORM') or die;/** * Joomla! Captcha base object * * @abstract * @package     Joomla.Libraries * @subpackage  Captcha * @since       2.5 */class JCaptcha extends JObject{	/**	 * An array of Observer objects to notify	 *	 * @var    array	 * @since  2.5	 */	protected $_observers = array();	/**	 * The state of the observable object	 *	 * @var    mixed	 * @since  2.5	 */	protected $_state = null;	/**	 * A multi dimensional array of [function][] = key for observers	 *	 * @var    array	 * @since  2.5	 */	protected $_methods = array();	/**	 * Captcha Plugin object	 *	 * @var	   JPlugin	 * @since  2.5	 */	private $_captcha;	/**	 * Editor Plugin name	 *	 * @var string	 * @since  2.5	 */	private $_name;	/**	 * Array of instances of this class.	 *	 * @var	array	 */	private static $_instances = array();	/**	 * Class constructor.	 *	 * @param   string  $captcha  The editor to use.	 * @param   array   $options  Associative array of options.	 *	 * @since 2.5	 */	public function __construct($captcha, $options)	{		$this->_name = $captcha;		$this->_load($options);	}	/**	 * Returns the global Captcha object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $captcha  The plugin to use.	 * @param   array   $options  Associative array of options.	 *	 * @return  JCaptcha  Instance of this class.	 *	 * @since 2.5	 */	public static function getInstance($captcha, array $options = array())	{		$signature = md5(serialize(array($captcha, $options)));		if (empty(self::$_instances[$signature]))		{			try			{				self::$_instances[$signature] = new JCaptcha($captcha, $options);			}			catch (RuntimeException $e)			{				JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');				return null;			}		}		return self::$_instances[$signature];	}	/**	 * Fire the onInit event to initialise the captcha plug-in.	 *	 * @param   string  $id  The id of the field.	 *	 * @return  boolean  True on success	 *	 * @since	2.5	 */	public function initialise($id)	{		$args['id']    = $id;		$args['event'] = 'onInit';		try		{			$this->_captcha->update($args);		}		catch (Exception $e)		{			JFactory::getApplication()->enqueueMessage($e->getMessage(), 'error');			return false;		}		return true;	}	/**	 * Get the HTML for the captcha.	 *	 * @param   string  $name   The control name.	 * @param   string  $id     The id for the control.	 * @param   string  $class  Value for the HTML class attribute	 *	 * @return  mixed  The return value of the function "onDisplay" of the selected Plugin.	 *	 * @since   2.5	 */	public function display($name, $id, $class = '')	{		// Check if captcha is already loaded.		if (is_null($this->_captcha))		{			return;		}		// Initialise the Captcha.		if (!$this->initialise($id))		{			return;		}		$args['name']  = $name;		$args['id']    = $id ? $id : $name;		$args['class'] = $class ? 'class="' . $class . '"' : '';		$args['event'] = 'onDisplay';		return $this->_captcha->update($args);	}	/**	 * Checks if the answer is correct.	 *	 * @param   string  $code  The answer.	 *	 * @return  mixed   The return value of the function "onCheckAnswer" of the selected Plugin.	 *	 * @since	2.5	 */	public function checkAnswer($code)	{		// Check if captcha is already loaded		if (is_null(($this->_captcha)))		{			return;		}		$args['code']  = $code;		$args['event'] = 'onCheckAnswer';		return $this->_captcha->update($args);	}	/**	 * Load the Captcha plug-in.	 *	 * @param   array  $options  Associative array of options.	 *	 * @return  void	 *	 * @since	2.5	 * @throws  RuntimeException	 */	private function _load(array $options = array())	{		// Build the path to the needed captcha plugin		$name = JFilterInput::getInstance()->clean($this->_name, 'cmd');		$path = JPATH_PLUGINS . '/captcha/' . $name . '/' . $name . '.php';		if (!is_file($path))		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		// Require plugin file		require_once $path;		// Get the plugin		$plugin = JPluginHelper::getPlugin('captcha', $this->_name);		if (!$plugin)		{			throw new RuntimeException(JText::sprintf('JLIB_CAPTCHA_ERROR_PLUGIN_NOT_FOUND', $name));		}		$params = new JRegistry($plugin->params);		$plugin->params = $params;		// Build captcha plugin classname		$name = 'plgCaptcha' . $this->_name;		$this->_captcha = new $name($this, (array) $plugin, $options);	}	/**	 * Get the state of the JEditor object	 *	 * @return  mixed  The state of the object.	 *	 * @since   2.5	 */	public function getState()	{		return $this->_state;	}	/**	 * Attach an observer object	 *	 * @param   object  $observer  An observer object to attach	 *	 * @return  void	 *	 * @since   2.5	 */	public function attach($observer)	{		if (is_array($observer))		{			if (!isset($observer['handler']) || !isset($observer['event']) || !is_callable($observer['handler']))			{				return;			}			// Make sure we haven't already attached this array as an observer			foreach ($this->_observers as $check)			{				if (is_array($check) && $check['event'] == $observer['event'] && $check['handler'] == $observer['handler'])				{					return;				}			}			$this->_observers[] = $observer;			end($this->_observers);			$methods = array($observer['event']);		}		else		{			if (!($observer instanceof JEditor))			{				return;			}			// Make sure we haven't already attached this object as an observer			$class = get_class($observer);			foreach ($this->_observers as $check)			{				if ($check instanceof $class)				{					return;				}			}			$this->_observers[] = $observer;			$methods = array_diff(get_class_methods($observer), get_class_methods('JPlugin'));		}		$key = key($this->_observers);		foreach ($methods as $method)		{			$method = strtolower($method);			if (!isset($this->_methods[$method]))			{				$this->_methods[$method] = array();			}			$this->_methods[$method][] = $key;		}	}	/**	 * Detach an observer object	 *	 * @param   object  $observer  An observer object to detach.	 *	 * @return  boolean  True if the observer object was detached.	 *	 * @since   2.5	 */	public function detach($observer)	{		$retval = false;		$key = array_search($observer, $this->_observers);		if ($key !== false)		{			unset($this->_observers[$key]);			$retval = true;			foreach ($this->_methods as &$method)			{				$k = array_search($key, $method);				if ($k !== false)				{					unset($method[$k]);				}			}		}		return $retval;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>	<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>	</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('JHtmlUsers', JPATH_COMPONENT . '/helpers/html/users.php');JHtml::register('users.spacer', array('JHtmlUsers', 'spacer'));$fieldsets = $this->form->getFieldsets();if (isset($fieldsets['core']))   unset($fieldsets['core']);if (isset($fieldsets['params'])) unset($fieldsets['params']);foreach ($fieldsets as $group => $fieldset): // Iterate through the form fieldsets	$fields = $this->form->getFieldset($group);	if (count($fields)):?><?php //if ($this->params->get('show_tags')) : ?>		<?php  //$this->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php //echo $this->tagLayout->render($this->tags); ?>	<?php // endif; ?><fieldset id="users-profile-custom" class="users-profile-custom-<?php echo $group;?>">	<?php if (isset($fieldset->label)):// If the fieldset has a label set, display it as the legend.?>	<legend><?php echo JText::_($fieldset->label); ?></legend>	<?php endif;?>	<dl class="dl-horizontal">	<?php foreach ($fields as $field):		if (!$field->hidden) :?>		<dt><?php echo $field->title; ?></dt>		<dd>			<?php if (JHtml::isRegistered('users.'.$field->id)):?>				<?php echo JHtml::_('users.'.$field->id, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->fieldname)):?>				<?php echo JHtml::_('users.'.$field->fieldname, $field->value);?>			<?php elseif (JHtml::isRegistered('users.'.$field->type)):?>				<?php echo JHtml::_('users.'.$field->type, $field->value);?>			<?php else:?>				<?php echo JHtml::_('users.value', $field->value);?>			<?php endif;?>		</dd>		<?php endif;?>	<?php endforeach;?>	</dl></fieldset>	<?php endif;?><?php endforeach;?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Modules manager master display controller. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/modules.php';		// Load the submenu.		ModulesHelper::addSubmenu($this->input->get('view', 'modules'));		$view   = $this->input->get('view', 'modules');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'module' && $layout == 'edit' && !$this->checkEditId('com_modules.edit.module', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_modules&view=modules', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$cparams = JComponentHelper::getParams('com_media');?><div class="contact<?php echo $this->pageclass_sfx?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?>	<?php if ($this->contact->name && $this->params->get('show_name')) : ?>		<div class="page-header">			<h2>				<span class="contact-name"><?php echo $this->contact->name; ?></span>			</h2>		</div>	<?php endif;  ?>	<?php if ($this->params->get('show_contact_category') == 'show_no_link') : ?>		<h3>			<span class="contact-category"><?php echo $this->contact->category_title; ?></span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_category') == 'show_with_link') : ?>		<?php $contactLink = ContactHelperRoute::getCategoryRoute($this->contact->catid);?>		<h3>			<span class="contact-category"><a href="<?php echo $contactLink; ?>">				<?php echo $this->escape($this->contact->category_title); ?></a>			</span>		</h3>	<?php endif; ?>	<?php if ($this->params->get('show_contact_list') && count($this->contacts) > 1) : ?>		<form action="#" method="get" name="selectForm" id="selectForm">			<?php echo JText::_('COM_CONTACT_SELECT_CONTACT'); ?>			<?php echo JHtml::_('select.genericlist',  $this->contacts, 'id', 'class="inputbox" onchange="document.location.href = this.value"', 'link', 'name', $this->contact->link);?>		</form>	<?php endif; ?>	<?php if ($this->params->get('show_tags', 1) && !empty($this->item->tags)) : ?>		<?php $this->item->tagLayout = new JLayoutFile('joomla.content.tags'); ?>		<?php echo $this->item->tagLayout->render($this->item->tags->itemTags); ?>	<?php endif; ?>	<?php  if ($this->params->get('presentation_style') == 'sliders'):?>		<div class="accordion" id="accordionContact">			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#basic-details">					<?php echo JText::_('COM_CONTACT_DETAILS');?>					</a>				</div>				<div id="basic-details" class="accordion-body collapse in">					<div class="accordion-inner">	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'plain'):?>		<?php  echo '<h3>' . JText::_('COM_CONTACT_DETAILS') . '</h3>';  ?>	<?php endif; ?>	<?php if ($this->contact->image && $this->params->get('show_image')) : ?>		<div class="thumbnail pull-right">			<?php echo JHtml::_('image', $this->contact->image, JText::_('COM_CONTACT_IMAGE_DETAILS'), array('align' => 'middle')); ?>		</div>	<?php endif; ?>	<?php if ($this->contact->con_position && $this->params->get('show_position')) : ?>		<dl class="contact-position dl-horizontal">			<dd>				<?php echo $this->contact->con_position; ?>			</dd>		</dl>	<?php endif; ?>	<?php echo $this->loadTemplate('address'); ?>	<?php if ($this->params->get('allow_vcard')) :	?>		<?php echo JText::_('COM_CONTACT_DOWNLOAD_INFORMATION_AS');?>			<a href="<?php echo JRoute::_('index.php?option=com_contact&amp;view=contact&amp;id='.$this->contact->id . '&amp;format=vcf'); ?>">			<?php echo JText::_('COM_CONTACT_VCARD');?></a>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		</div>	<?php endif; ?>	<?php if ($this->params->get('show_email_form') && ($this->contact->email_to || $this->contact->user_id)) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-form">					<?php echo JText::_('COM_CONTACT_EMAIL_FORM');?>					</a>				</div>				<div id="display-form" class="accordion-body collapse">					<div class="accordion-inner">		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php  echo '<h3>'. JText::_('COM_CONTACT_EMAIL_FORM').'</h3>';  ?>		<?php endif; ?>		<?php  echo $this->loadTemplate('form');  ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_links')) : ?>		<?php echo $this->loadTemplate('links'); ?>	<?php endif; ?>	<?php if ($this->params->get('show_articles') && $this->contact->user_id && $this->contact->articles) : ?>			<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-articles">					<?php echo JText::_('JGLOBAL_ARTICLES');?>					</a>				</div>				<div id="display-articles" class="accordion-body collapse">					<div class="accordion-inner">			<?php endif; ?>			<?php if  ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('JGLOBAL_ARTICLES').'</h3>'; ?>			<?php endif; ?>			<?php echo $this->loadTemplate('articles'); ?>			<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>			<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('show_profile') && $this->contact->user_id && JPluginHelper::isEnabled('user', 'profile')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-profile">					<?php echo JText::_('COM_CONTACT_PROFILE');?>					</a>				</div>				<div id="display-profile" class="accordion-body collapse">					<div class="accordion-inner">		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_PROFILE').'</h3>'; ?>		<?php endif; ?>		<?php echo $this->loadTemplate('profile'); ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->contact->misc && $this->params->get('show_misc')) : ?>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>			<div class="accordion-group">				<div class="accordion-heading">					<a class="accordion-toggle" data-toggle="collapse" data-parent="accordionContact" href="#display-misc">					<?php echo JText::_('COM_CONTACT_OTHER_INFORMATION');?>					</a>				</div>				<div id="display-misc" class="accordion-body collapse">					<div class="accordion-inner">		<?php endif; ?>		<?php if ($this->params->get('presentation_style') == 'plain'):?>			<?php echo '<h3>'. JText::_('COM_CONTACT_OTHER_INFORMATION').'</h3>'; ?>		<?php endif; ?>				<div class="contact-miscinfo">					<dl class="dl-horizontal">						<dt>							<span class="<?php echo $this->params->get('marker_class'); ?>">								<?php echo $this->params->get('marker_misc'); ?>							</span>						</dt>						<dd>							<span class="contact-misc">								<?php echo $this->contact->misc; ?>							</span>						</dd>					</dl>				</div>		<?php if ($this->params->get('presentation_style') == 'sliders'):?>					</div>				</div>			</div>		<?php endif; ?>	<?php endif; ?>	<?php if ($this->params->get('presentation_style') == 'sliders'):?>		</div>	<?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of search terms. * * @package     Joomla.Administrator * @subpackage  com_search * @since       1.5 */class SearchViewSearches extends JViewLegacy{	protected $enabled;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->enabled		= $this->state->params->get('enabled');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$canDo	= SearchHelper::getActions();		JToolbarHelper::title(JText::_('COM_SEARCH_MANAGER_SEARCHES'), 'search.png');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::custom('searches.reset', 'refresh.png', 'refresh_f2.png', 'JSEARCH_RESET', false);		}		JToolbarHelper::divider();		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_search');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_SEARCH');	}}
<?php/*** Locate a byte index given a UTF-8 character index* @version $Id$* @package utf8* @subpackage position*///--------------------------------------------------------------------/*** Given a string and a character index in the string, in* terms of the UTF-8 character position, returns the byte* index of that character. Can be useful when you want to* PHP's native string functions but we warned, locating* the byte can be expensive* Takes variable number of parameters - first must be* the search string then 1 to n UTF-8 character positions* to obtain byte indexes for - it is more efficient to search* the string for multiple characters at once, than make* repeated calls to this function** @author Chris Smith<chris@jalakai.co.uk>* @param string string to locate index in* @param int (n times)* @return mixed - int if only one input int, array if more* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage position*/function utf8_byte_position() {    $args = func_get_args();    $str =& array_shift($args);    if (!is_string($str)) return false;    $result = array();    // trivial byte index, character offset pair    $prev = array(0,0);    // use a short piece of str to estimate bytes per character    // $i (& $j) -> byte indexes into $str    $i = utf8_locate_next_chr($str, 300);    // $c -> character offset into $str    $c = strlen(utf8_decode(substr($str,0,$i)));    // deal with arguments from lowest to highest    sort($args);    foreach ($args as $offset) {        // sanity checks FIXME        // 0 is an easy check        if ($offset == 0) { $result[] = 0; continue; }        // ensure no endless looping        $safety_valve = 50;        do {            if ( ($c - $prev[1]) == 0 ) {                // Hack: gone past end of string                $error = 0;                $i = strlen($str);                break;            }            $j = $i + (int)(($offset-$c) * ($i - $prev[0]) / ($c - $prev[1]));            // correct to utf8 character boundary            $j = utf8_locate_next_chr($str, $j);            // save the index, offset for use next iteration            $prev = array($i,$c);            if ($j > $i) {                // determine new character offset                $c += strlen(utf8_decode(substr($str,$i,$j-$i)));            } else {                // ditto                $c -= strlen(utf8_decode(substr($str,$j,$i-$j)));            }            $error = abs($c-$offset);            // ready for next time around            $i = $j;        // from 7 it is faster to iterate over the string        } while ( ($error > 7) && --$safety_valve) ;        if ($error && $error <= 7) {            if ($c < $offset) {                // move up                while ($error--) { $i = utf8_locate_next_chr($str,++$i); }            } else {                // move down                while ($error--) { $i = utf8_locate_current_chr($str,--$i); }            }            // ready for next arg            $c = $offset;        }        $result[] = $i;    }    if ( count($result) == 1 ) {        return $result[0];    }    return $result;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the current UTF-8 character, relative to supplied* position. If the current character begins at the same place as the* supplied byte index, that byte index will be returned. Otherwise* this function will step backwards, looking for the index where* curent UTF-8 character begins* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_current_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while ($idx && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx--;    return $idx;}//--------------------------------------------------------------------/*** Given a string and any byte index, returns the byte index* of the start of the next UTF-8 character, relative to supplied* position. If the next character begins at the same place as the* supplied byte index, that byte index will be returned.* @author Chris Smith<chris@jalakai.co.uk>* @param string* @param int byte index in the string* @return int byte index of start of next UTF-8 character* @package utf8* @subpackage position*/function utf8_locate_next_chr( &$str, $idx ) {    if ($idx <= 0) return 0;    $limit = strlen($str);    if ($idx >= $limit) return $limit;    // Binary value for any byte after the first in a multi-byte UTF-8 character    // will be like 10xxxxxx so & 0xC0 can be used to detect this kind    // of byte - assuming well formed UTF-8    while (($idx < $limit) && ((ord($str[$idx]) & 0xC0) == 0x80)) $idx++;    return $idx;}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;?>			<dd class="createdby">				<?php $author = $displayData['item']->author; ?>				<?php $author = ($displayData['item']->created_by_alias ? $displayData['item']->created_by_alias : $author); ?>				<?php if (!empty($displayData['item']->contactid ) && $displayData['params']->get('link_author') == true) : ?>					<?php					echo JText::sprintf('COM_CONTENT_WRITTEN_BY',						JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id='.$displayData['item']->contactid), $author)					); ?>				<?php else :?>					<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>				<?php endif; ?>			</dd>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_MAIL_SETTINGS'); ?></legend>		<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('mail') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */JText::script('TPL_BEEZ3_ALTOPEN');JText::script('TPL_BEEZ3_ALTCLOSE');JText::script('TPL_BEEZ3_TEXTRIGHTOPEN');JText::script('TPL_BEEZ3_TEXTRIGHTCLOSE');JText::script('TPL_BEEZ3_FONTSIZE');JText::script('TPL_BEEZ3_BIGGER');JText::script('TPL_BEEZ3_RESET');JText::script('TPL_BEEZ3_SMALLER');JText::script('TPL_BEEZ3_INCREASE_SIZE');JText::script('TPL_BEEZ3_REVERT_STYLES_TO_DEFAULT');JText::script('TPL_BEEZ3_DECREASE_SIZE');JText::script('TPL_BEEZ3_OPENMENU');JText::script('TPL_BEEZ3_CLOSEMENU');?><script type="text/javascript">	var big = '<?php echo (int) $this->params->get('wrapperLarge');?>%';	var small = '<?php echo (int) $this->params->get('wrapperSmall'); ?>%';	var bildauf = '<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/images/plus.png';	var bildzu = '<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/images/minus.png';	var rightopen='<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTOPEN', true); ?>';	var rightclose='<?php echo JText::_('TPL_BEEZ3_TEXTRIGHTCLOSE', true); ?>';	var altopen='<?php echo JText::_('TPL_BEEZ3_ALTOPEN', true); ?>';	var altclose='<?php echo JText::_('TPL_BEEZ3_ALTCLOSE', true); ?>';</script>
<?php/** * @package     Joomla.Administrator * @subpackage  com_media * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('formbehavior.chosen', 'select');$user  = JFactory::getUser();$input = JFactory::getApplication()->input;?><script type='text/javascript'>var image_base_path = '<?php $params = JComponentHelper::getParams('com_media');echo $params->get('image_path', 'images'); ?>/';</script><form action="index.php?option=com_media&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author'); ?>" class="form-vertical" id="imageForm" method="post" enctype="multipart/form-data">	<div id="messages" style="display: none;">		<span id="message"></span><?php echo JHtml::_('image', 'media/dots.gif', '...', array('width' => 22, 'height' => 12), true) ?>	</div>	<div class="well">		<div class="row">			<div class="span9 control-group">				<div class="control-label">					<label class="control-label" for="folder"><?php echo JText::_('COM_MEDIA_DIRECTORY') ?></label>				</div>				<div class="controls">					<?php echo $this->folderList; ?>					<button class="btn" type="button" id="upbutton" title="<?php echo JText::_('COM_MEDIA_DIRECTORY_UP') ?>"><?php echo JText::_('COM_MEDIA_UP') ?></button>				</div>			</div>			<div class="pull-right">				<button class="btn btn-primary" type="button" onclick="<?php if ($this->state->get('field.id')):?>window.parent.jInsertFieldValue(document.id('f_url').value,'<?php echo $this->state->get('field.id');?>');<?php else:?>ImageManager.onok();<?php endif;?>window.parent.SqueezeBox.close();"><?php echo JText::_('COM_MEDIA_INSERT') ?></button>				<button class="btn" type="button" onclick="window.parent.SqueezeBox.close();"><?php echo JText::_('JCANCEL') ?></button>			</div>		</div>	</div>	<iframe id="imageframe" name="imageframe" src="index.php?option=com_media&amp;view=imagesList&amp;tmpl=component&amp;folder=<?php echo $this->state->folder?>&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>"></iframe>	<div class="well">		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_url"><?php echo JText::_('COM_MEDIA_IMAGE_URL') ?></label>				</div>				<div class="controls">					<input type="text" id="f_url" value="" />				</div>			</div>			<?php if (!$this->state->get('field.id')):?>			<div class="span6 control-group">				<div class="control-label">					<label for="f_align"><?php echo JText::_('COM_MEDIA_ALIGN') ?></label>				</div>				<div class="controls">					<select size="1" id="f_align">						<option value="" selected="selected"><?php echo JText::_('COM_MEDIA_NOT_SET') ?></option>						<option value="left"><?php echo JText::_('JGLOBAL_LEFT') ?></option>						<option value="right"><?php echo JText::_('JGLOBAL_RIGHT') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_ALIGN_DESC');?></p>				</div>			</div>			<?php endif;?>		</div>		<?php if (!$this->state->get('field.id')):?>		<div class="row">			<div class="span6 control-group">				<div class="control-label">					<label for="f_alt"><?php echo JText::_('COM_MEDIA_IMAGE_DESCRIPTION') ?></label>				</div>				<div class="controls">					<input type="text" id="f_alt" value="" />				</div>			</div>			<div class="span6 control-group">				<div class="control-label">					<label for="f_title"><?php echo JText::_('COM_MEDIA_TITLE') ?></label>				</div>				<div class="controls">					<input type="text" id="f_title" value="" />				</div>			</div>		</div>		<div class="row">			<div class="span12 control-group">				<div class="control-label">					<label for="f_caption"><?php echo JText::_('COM_MEDIA_CAPTION') ?></label>				</div>				<div class="controls">					<select size="1" id="f_caption" >						<option value="" selected="selected" ><?php echo JText::_('JNO') ?></option>						<option value="1"><?php echo JText::_('JYES') ?></option>					</select>					<p class="help-block"><?php echo JText::_('COM_MEDIA_CAPTION_DESC');?></p>				</div>			</div>		</div>		<?php endif;?>		<input type="hidden" id="dirPath" name="dirPath" />		<input type="hidden" id="f_file" name="f_file" />		<input type="hidden" id="tmpl" name="component" />	</div></form><?php if ($user->authorise('core.create', 'com_media')) : ?>	<form action="<?php echo JURI::base(); ?>index.php?option=com_media&amp;task=file.upload&amp;tmpl=component&amp;<?php echo $this->session->getName() . '=' . $this->session->getId(); ?>&amp;<?php echo JSession::getFormToken();?>=1&amp;asset=<?php echo $input->getCmd('asset');?>&amp;author=<?php echo $input->getCmd('author');?>&amp;view=images" id="uploadForm" class="form-horizontal" name="uploadForm" method="post" enctype="multipart/form-data">		<div id="uploadform" class="well">			<fieldset id="upload-noflash" class="actions">				<div class="control-group">					<div class="control-label">						<label for="upload-file" class="control-label"><?php echo JText::_('COM_MEDIA_UPLOAD_FILE'); ?></label>					</div>					<div class="controls">						<input type="file" id="upload-file" name="Filedata[]" multiple /><button class="btn btn-primary" id="upload-submit"><i class="icon-upload icon-white"></i> <?php echo JText::_('COM_MEDIA_START_UPLOAD'); ?></button>						<p class="help-block"><?php echo $this->config->get('upload_maxsize') == '0' ? JText::_('COM_MEDIA_UPLOAD_FILES_NOLIMIT') : JText::sprintf('COM_MEDIA_UPLOAD_FILES', $this->config->get('upload_maxsize')); ?></p>					</div>				</div>			</fieldset>			<input type="hidden" name="return-url" value="<?php echo base64_encode('index.php?option=com_media&view=images&tmpl=component&fieldid=' . $input->getCmd('fieldid', '') . '&e_name=' . $input->getCmd('e_name') . '&asset=' . $input->getCmd('asset') . '&author=' . $input->getCmd('author')); ?>" />		</div>	</form><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** Error Codes: * - 30 : Unable to connect to host * - 31 : Not connected * - 32 : Unable to send command to server * - 33 : Bad username * - 34 : Bad password * - 35 : Bad response * - 36 : Passive mode failed * - 37 : Data transfer error * - 38 : Local filesystem error */if (!defined('CRLF')){	define('CRLF', "\r\n");}if (!defined("FTP_AUTOASCII")){	define("FTP_AUTOASCII", -1);}if (!defined("FTP_BINARY")){	define("FTP_BINARY", 1);}if (!defined("FTP_ASCII")){	define("FTP_ASCII", 0);}if (!defined('FTP_NATIVE')){	define('FTP_NATIVE', (function_exists('ftp_connect')) ? 1 : 0);}/** * FTP client class * * @package     Joomla.Platform * @subpackage  Client * @since       12.1 */class JClientFtp{	/**	 * @var    resource  Socket resource	 * @since  12.1	 */	private $_conn = null;	/**	 * @var    resource  Data port connection resource	 * @since  12.1	 */	private $_dataconn = null;	/**	 * @var    array  Passive connection information	 * @since  12.1	 */	private $_pasv = null;	/**	 * @var    string  Response Message	 * @since  12.1	 */	private $_response = null;	/**	 * @var    integer  Timeout limit	 * @since  12.1	 */	private $_timeout = 15;	/**	 * @var    integer  Transfer Type	 * @since  12.1	 */	private $_type = null;	/**	 * @var    array  Array to hold ascii format file extensions	 * @since   12.1	 */	private $_autoAscii = array(		"asp",		"bat",		"c",		"cpp",		"csv",		"h",		"htm",		"html",		"shtml",		"ini",		"inc",		"log",		"php",		"php3",		"pl",		"perl",		"sh",		"sql",		"txt",		"xhtml",		"xml");	/**	 * Array to hold native line ending characters	 *	 * @var    array	 * @since  12.1	 */	private $_lineEndings = array('UNIX' => "\n", 'WIN' => "\r\n");	/**	 * @var    array  JClientFtp instances container.	 * @since  12.1	 */	protected static $instances = array();	/**	 * JClientFtp object constructor	 *	 * @param   array  $options  Associative array of options to set	 *	 * @since   12.1	 */	public function __construct(array $options = array())	{		// If default transfer type is not set, set it to autoascii detect		if (!isset($options['type']))		{			$options['type'] = FTP_BINARY;		}		$this->setOptions($options);		if (FTP_NATIVE)		{			// Import the generic buffer stream handler			jimport('joomla.utilities.buffer');			// Autoloading fails for JBuffer as the class is used as a stream handler			JLoader::load('JBuffer');		}	}	/**	 * JClientFtp object destructor	 *	 * Closes an existing connection, if we have one	 *	 * @since   12.1	 */	public function __destruct()	{		if (is_resource($this->_conn))		{			$this->quit();		}	}	/**	 * Returns the global FTP connector object, only creating it	 * if it doesn't already exist.	 *	 * You may optionally specify a username and password in the parameters. If you do so,	 * you may not login() again with different credentials using the same object.	 * If you do not use this option, you must quit() the current connection when you	 * are done, to free it for use by others.	 *	 * @param   string  $host     Host to connect to	 * @param   string  $port     Port to connect to	 * @param   array   $options  Array with any of these options: type=>[FTP_AUTOASCII|FTP_ASCII|FTP_BINARY], timeout=>(int)	 * @param   string  $user     Username to use for a connection	 * @param   string  $pass     Password to use for a connection	 *	 * @return  JClientFtp        The FTP Client object.	 *	 * @since   12.1	 */	public static function getInstance($host = '127.0.0.1', $port = '21', array $options = array(), $user = null, $pass = null)	{		$signature = $user . ':' . $pass . '@' . $host . ":" . $port;		// Create a new instance, or set the options of an existing one		if (!isset(self::$instances[$signature]) || !is_object(self::$instances[$signature]))		{			self::$instances[$signature] = new static($options);		}		else		{			self::$instances[$signature]->setOptions($options);		}		// Connect to the server, and login, if requested		if (!self::$instances[$signature]->isConnected())		{			$return = self::$instances[$signature]->connect($host, $port);			if ($return && $user !== null && $pass !== null)			{				self::$instances[$signature]->login($user, $pass);			}		}		return self::$instances[$signature];	}	/**	 * Set client options	 *	 * @param   array  $options  Associative array of options to set	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function setOptions(array $options)	{		if (isset($options['type']))		{			$this->_type = $options['type'];		}		if (isset($options['timeout']))		{			$this->_timeout = $options['timeout'];		}		return true;	}	/**	 * Method to connect to a FTP server	 *	 * @param   string  $host  Host to connect to [Default: 127.0.0.1]	 * @param   string  $port  Port to connect on [Default: port 21]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function connect($host = '127.0.0.1', $port = 21)	{		$errno = null;		$err = null;		// If already connected, return		if (is_resource($this->_conn))		{			return true;		}		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			$this->_conn = @ftp_connect($host, $port, $this->_timeout);			if ($this->_conn === false)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_NO_CONNECT', $host, $port), JLog::WARNING, 'jerror');				return false;			}			// Set the timeout for this connection			ftp_set_option($this->_conn, FTP_TIMEOUT_SEC, $this->_timeout);			return true;		}		// Connect to the FTP server.		$this->_conn = @ fsockopen($host, $port, $errno, $err, $this->_timeout);		if (!$this->_conn)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_NO_CONNECT_SOCKET', $host, $port, $errno, $err), JLog::WARNING, 'jerror');			return false;		}		// Set the timeout for this connection		socket_set_timeout($this->_conn, $this->_timeout, 0);		// Check for welcome response code		if (!$this->_verifyResponse(220))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to determine if the object is connected to an FTP server	 *	 * @return  boolean  True if connected	 *	 * @since   12.1	 */	public function isConnected()	{		return is_resource($this->_conn);	}	/**	 * Method to login to a server once connected	 *	 * @param   string  $user  Username to login to the server	 * @param   string  $pass  Password to login to the server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function login($user = 'anonymous', $pass = 'jftp@joomla.org')	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_login($this->_conn, $user, $pass) === false)			{				JLog::add('JFTP::login: Unable to login', JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send the username		if (!$this->_putCmd('USER ' . $user, array(331, 503)))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_USERNAME', $this->_response, $user), JLog::WARNING, 'jerror');			return false;		}		// If we are already logged in, continue :)		if ($this->_responseCode == 503)		{			return true;		}		// Send the password		if (!$this->_putCmd('PASS ' . $pass, 230))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_BAD_PASSWORD', $this->_response, str_repeat('*', strlen($pass))), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to quit and close the connection	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function quit()	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			@ftp_close($this->_conn);			return true;		}		// Logout and close connection		@fwrite($this->_conn, "QUIT\r\n");		@fclose($this->_conn);		return true;	}	/**	 * Method to retrieve the current working directory on the FTP server	 *	 * @return  string   Current working directory	 *	 * @since   12.1	 */	public function pwd()	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (($ret = @ftp_pwd($this->_conn)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PWD_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return $ret;		}		$match = array(null);		// Send print working directory command and verify success		if (!$this->_putCmd('PWD', 257))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PWD_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Match just the path		preg_match('/"[^"\r\n]*"/', $this->_response, $match);		// Return the cleaned path		return preg_replace("/\"/", "", $match[0]);	}	/**	 * Method to system string from the FTP server	 *	 * @return  string   System identifier string	 *	 * @since   12.1	 */	public function syst()	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			if (($ret = @ftp_systype($this->_conn)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_SYS_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}		}		else		{			// Send print working directory command and verify success			if (!$this->_putCmd('SYST', 215))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_SYST_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');				return false;			}			$ret = $this->_response;		}		// Match the system string to an OS		if (strpos(strtoupper($ret), 'MAC') !== false)		{			$ret = 'MAC';		}		elseif (strpos(strtoupper($ret), 'WIN') !== false)		{			$ret = 'WIN';		}		else		{			$ret = 'UNIX';		}		// Return the os type		return $ret;	}	/**	 * Method to change the current working directory on the FTP server	 *	 * @param   string  $path  Path to change into on the server	 *	 * @return  boolean True if successful	 *	 * @since   12.1	 */	public function chdir($path)	{		// If native FTP support is enabled lets use it...		if (FTP_NATIVE)		{			if (@ftp_chdir($this->_conn, $path) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CHDIR_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send change directory command and verify success		if (!$this->_putCmd('CWD ' . $path, 250))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CHDIR_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to reinitialise the server, ie. need to login again	 *	 * NOTE: This command not available on all servers	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function reinit()	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'REIN') === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_REINIT_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send reinitialise command to the server		if (!$this->_putCmd('REIN', 220))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_REINIT_BAD_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to rename a file/folder on the FTP server	 *	 * @param   string  $from  Path to change file/folder from	 * @param   string  $to    Path to change file/folder to	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function rename($from, $to)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_rename($this->_conn, $from, $to) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send rename from command to the server		if (!$this->_putCmd('RNFR ' . $from, 350))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_FROM', $this->_response, $from), JLog::WARNING, 'jerror');			return false;		}		// Send rename to command to the server		if (!$this->_putCmd('RNTO ' . $to, 250))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RENAME_BAD_RESPONSE_TO', $this->_response, $to), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to change mode for a path on the FTP server	 *	 * @param   string  $path  Path to change mode on	 * @param   mixed   $mode  Octal value to change mode to, e.g. '0777', 0777 or 511 (string or integer)	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function chmod($path, $mode)	{		// If no filename is given, we assume the current directory is the target		if ($path == '')		{			$path = '.';		}		// Convert the mode to a string		if (is_int($mode))		{			$mode = decoct($mode);		}		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'CHMOD ' . $mode . ' ' . $path) === false)			{				if (!IS_WIN)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CHMOD_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				}				return false;			}			return true;		}		// Send change mode command and verify success [must convert mode from octal]		if (!$this->_putCmd('SITE CHMOD ' . $mode . ' ' . $path, array(200, 250)))		{			if (!IS_WIN)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CHMOD_BAD_RESPONSE', $this->_response, $path, $mode), JLog::WARNING, 'jerror');			}			return false;		}		return true;	}	/**	 * Method to delete a path [file/folder] on the FTP server	 *	 * @param   string  $path  Path to delete	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function delete($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_delete($this->_conn, $path) === false)			{				if (@ftp_rmdir($this->_conn, $path) === false)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_DELETE_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');					return false;				}			}			return true;		}		// Send delete file command and if that doesn't work, try to remove a directory		if (!$this->_putCmd('DELE ' . $path, 250))		{			if (!$this->_putCmd('RMD ' . $path, 250))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_DELETE_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}	/**	 * Method to create a directory on the FTP server	 *	 * @param   string  $path  Directory to create	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function mkdir($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_mkdir($this->_conn, $path) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_MKDIR_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send change directory command and verify success		if (!$this->_putCmd('MKD ' . $path, 257))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MKDIR_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to restart data transfer at a given byte	 *	 * @param   integer  $point  Byte to restart transfer at	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function restart($point)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			if (@ftp_site($this->_conn, 'REST ' . $point) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_RESTART_BAD_RESPONSE_NATIVE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		// Send restart command and verify success		if (!$this->_putCmd('REST ' . $point, 350))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_RESTART_BAD_RESPONSE', $this->_response, $point), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to create an empty file on the FTP server	 *	 * @param   string  $path  Path local file to store on the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function create($path)	{		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$buffer = fopen('buffer://tmp', 'r');			if (@ftp_fput($this->_conn, $path, $buffer, FTP_ASCII) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_BUFFER'), JLog::WARNING, 'jerror');				fclose($buffer);				return false;			}			fclose($buffer);			return true;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('STOR ' . $path, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		// To create a zero byte upload close the data port connection		fclose($this->_dataconn);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_CREATE_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to read a file from the FTP server's contents into a buffer	 *	 * @param   string  $remote   Path to remote file to read on the FTP server	 * @param   string  &$buffer  Buffer variable to read file contents into	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function read($remote, &$buffer)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$tmp = fopen('buffer://tmp', 'br+');			if (@ftp_fget($this->_conn, $tmp, $remote, $mode) === false)			{				fclose($tmp);				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_BUFFER'), JLog::WARNING, 'jerror');				return false;			}			// Read tmp buffer contents			rewind($tmp);			$buffer = '';			while (!feof($tmp))			{				$buffer .= fread($tmp, 8192);			}			fclose($tmp);			return true;		}		$this->_mode($mode);		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('RETR ' . $remote, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Read data from data port connection and add to the buffer		$buffer = '';		while (!feof($this->_dataconn))		{			$buffer .= fread($this->_dataconn, 4096);		}		// Close the data port connection		fclose($this->_dataconn);		// Let's try to cleanup some line endings if it is ascii		if ($mode == FTP_ASCII)		{			$os = 'UNIX';			if (IS_WIN)			{				$os = 'WIN';			}			$buffer = preg_replace("/" . CRLF . "/", $this->_lineEndings[$os], $buffer);		}		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_READ_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to get a file from the FTP server and save it to a local file	 *	 * @param   string  $local   Local path to save remote file to	 * @param   string  $remote  Path to remote file to get on the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function get($local, $remote)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (@ftp_get($this->_conn, $local, $remote, $mode) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		$this->_mode($mode);		// Check to see if the local file can be opened for writing		$fp = fopen($local, "wb");		if (!$fp)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_WRITING_LOCAL', $local), JLog::WARNING, 'jerror');			return false;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_GET_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('RETR ' . $remote, array(150, 125)))		{			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE_RETR', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Read data from data port connection and add to the buffer		while (!feof($this->_dataconn))		{			$buffer = fread($this->_dataconn, 4096);			fwrite($fp, $buffer, 4096);		}		// Close the data port connection and file pointer		fclose($this->_dataconn);		fclose($fp);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_GET_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to store a file to the FTP server	 *	 * @param   string  $local   Path to local file to store on the FTP server	 * @param   string  $remote  FTP path to file to create	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function store($local, $remote = null)	{		// If remote file is not given, use the filename of the local file in the current		// working directory.		if ($remote == null)		{			$remote = basename($local);		}		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (@ftp_put($this->_conn, $remote, $local, $mode) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			return true;		}		$this->_mode($mode);		// Check to see if the local file exists and if so open it for reading		if (@ file_exists($local))		{			$fp = fopen($local, "rb");			if (!$fp)			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_READING_LOCAL', $local), JLog::WARNING, 'jerror');				return false;			}		}		else		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_FIND_LOCAL', $local), JLog::WARNING, 'jerror');			return false;		}		// Start passive mode		if (!$this->_passive())		{			@ fclose($fp);			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		// Send store command to the FTP server		if (!$this->_putCmd('STOR ' . $remote, array(150, 125)))		{			@ fclose($fp);			@ fclose($this->_dataconn);			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE_STOR', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		// Do actual file transfer, read local file and write to data port connection		while (!feof($fp))		{			$line = fread($fp, 4096);			do			{				if (($result = @ fwrite($this->_dataconn, $line)) === false)				{					JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_STORE_DATA_PORT'), JLog::WARNING, 'jerror');					return false;				}				$line = substr($line, $result);			}			while ($line != "");		}		fclose($fp);		fclose($this->_dataconn);		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_STORE_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to write a string to the FTP server	 *	 * @param   string  $remote  FTP path to file to write to	 * @param   string  $buffer  Contents to write to the FTP server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function write($remote, $buffer)	{		// Determine file type		$mode = $this->_findMode($remote);		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			$tmp = fopen('buffer://tmp', 'br+');			fwrite($tmp, $buffer);			rewind($tmp);			if (@ftp_fput($this->_conn, $remote, $tmp, $mode) === false)			{				fclose($tmp);				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			fclose($tmp);			return true;		}		// First we need to set the transfer mode		$this->_mode($mode);		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		// Send store command to the FTP server		if (!$this->_putCmd('STOR ' . $remote, array(150, 125)))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE_STOR', $this->_response, $remote), JLog::WARNING, 'jerror');			@ fclose($this->_dataconn);			return false;		}		// Write buffer to the data connection port		do		{			if (($result = @ fwrite($this->_dataconn, $buffer)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_WRITE_DATA_PORT'), JLog::WARNING, 'jerror');				return false;			}			$buffer = substr($buffer, $result);		}		while ($buffer != "");		// Close the data connection port [Data transfer complete]		fclose($this->_dataconn);		// Verify that the server recieved the transfer		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_WRITE_BAD_RESPONSE_TRANSFER', $this->_response, $remote), JLog::WARNING, 'jerror');			return false;		}		return true;	}	/**	 * Method to list the filenames of the contents of a directory on the FTP server	 *	 * Note: Some servers also return folder names. However, to be sure to list folders on all	 * servers, you should use listDetails() instead if you also need to deal with folders	 *	 * @param   string  $path  Path local file to store on the FTP server	 *	 * @return  string  Directory listing	 *	 * @since   12.1	 */	public function listNames($path = null)	{		$data = null;		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (($list = @ftp_nlist($this->_conn, $path)) === false)			{				// Workaround for empty directories on some servers				if ($this->listDetails($path, 'files') === array())				{					return array();				}				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}			$list = preg_replace('#^' . preg_quote($path, '#') . '[/\\\\]?#', '', $list);			if ($keys = array_merge(array_keys($list, '.'), array_keys($list, '..')))			{				foreach ($keys as $key)				{					unset($list[$key]);				}			}			return $list;		}		/*		 * If a path exists, prepend a space		 */		if ($path != null)		{			$path = ' ' . $path;		}		// Start passive mode		if (!$this->_passive())		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_PASSIVE'), JLog::WARNING, 'jerror');			return false;		}		if (!$this->_putCmd('NLST' . $path, array(150, 125)))		{			@ fclose($this->_dataconn);			// Workaround for empty directories on some servers			if ($this->listDetails($path, 'files') === array())			{				return array();			}			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE_NLST', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		// Read in the file listing.		while (!feof($this->_dataconn))		{			$data .= fread($this->_dataconn, 4096);		}		fclose($this->_dataconn);		// Everything go okay?		if (!$this->_verifyResponse(226))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTNAMES_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');			return false;		}		$data = preg_split("/[" . CRLF . "]+/", $data, -1, PREG_SPLIT_NO_EMPTY);		$data = preg_replace('#^' . preg_quote(substr($path, 1), '#') . '[/\\\\]?#', '', $data);		if ($keys = array_merge(array_keys($data, '.'), array_keys($data, '..')))		{			foreach ($keys as $key)			{				unset($data[$key]);			}		}		return $data;	}	/**	 * Method to list the contents of a directory on the FTP server	 *	 * @param   string  $path  Path to the local file to be stored on the FTP server	 * @param   string  $type  Return type [raw|all|folders|files]	 *	 * @return  mixed  If $type is raw: string Directory listing, otherwise array of string with file-names	 *	 * @since   12.1	 */	public function listDetails($path = null, $type = 'all')	{		$dir_list = array();		$data = null;		$regs = null;		// TODO: Deal with recurse -- nightmare		// For now we will just set it to false		$recurse = false;		// If native FTP support is enabled let's use it...		if (FTP_NATIVE)		{			// Turn passive mode on			if (@ftp_pasv($this->_conn, true) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			if (($contents = @ftp_rawlist($this->_conn, $path)) === false)			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE'), JLog::WARNING, 'jerror');				return false;			}		}		else		{			// Non Native mode			// Start passive mode			if (!$this->_passive())			{				JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_PASSIVE'), JLog::WARNING, 'jerror');				return false;			}			// If a path exists, prepend a space			if ($path != null)			{				$path = ' ' . $path;			}			// Request the file listing			if (!$this->_putCmd(($recurse == true) ? 'LIST -R' : 'LIST' . $path, array(150, 125)))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE_LIST', $this->_response, $path), JLog::WARNING, 'jerror');				@ fclose($this->_dataconn);				return false;			}			// Read in the file listing.			while (!feof($this->_dataconn))			{				$data .= fread($this->_dataconn, 4096);			}			fclose($this->_dataconn);			// Everything go okay?			if (!$this->_verifyResponse(226))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_BAD_RESPONSE_TRANSFER', $this->_response, $path), JLog::WARNING, 'jerror');				return false;			}			$contents = explode(CRLF, $data);		}		// If only raw output is requested we are done		if ($type == 'raw')		{			return $data;		}		// If we received the listing of an empty directory, we are done as well		if (empty($contents[0]))		{			return $dir_list;		}		// If the server returned the number of results in the first response, let's dump it		if (strtolower(substr($contents[0], 0, 6)) == 'total ')		{			array_shift($contents);			if (!isset($contents[0]) || empty($contents[0]))			{				return $dir_list;			}		}		// Regular expressions for the directory listing parsing.		$regexps = array(			'UNIX' => '#([-dl][rwxstST-]+).* ([0-9]*) ([a-zA-Z0-9]+).* ([a-zA-Z0-9]+).* ([0-9]*)'				. ' ([a-zA-Z]+[0-9: ]*[0-9])[ ]+(([0-9]{1,2}:[0-9]{2})|[0-9]{4}) (.+)#',			'MAC' => '#([-dl][rwxstST-]+).* ?([0-9 ]*)?([a-zA-Z0-9]+).* ([a-zA-Z0-9]+).* ([0-9]*)'				. ' ([a-zA-Z]+[0-9: ]*[0-9])[ ]+(([0-9]{2}:[0-9]{2})|[0-9]{4}) (.+)#',			'WIN' => '#([0-9]{2})-([0-9]{2})-([0-9]{2}) +([0-9]{2}):([0-9]{2})(AM|PM) +([0-9]+|<DIR>) +(.+)#'		);		// Find out the format of the directory listing by matching one of the regexps		$osType = null;		foreach ($regexps as $k => $v)		{			if (@preg_match($v, $contents[0]))			{				$osType = $k;				$regexp = $v;				break;			}		}		if (!$osType)		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_LISTDETAILS_UNRECOGNISED'), JLog::WARNING, 'jerror');			return false;		}		/*		 * Here is where it is going to get dirty....		 */		if ($osType == 'UNIX' || $osType == 'MAC')		{			foreach ($contents as $file)			{				$tmp_array = null;				if (@preg_match($regexp, $file, $regs))				{					$fType = (int) strpos("-dl", $regs[1]{0});					// $tmp_array['line'] = $regs[0];					$tmp_array['type'] = $fType;					$tmp_array['rights'] = $regs[1];					// $tmp_array['number'] = $regs[2];					$tmp_array['user'] = $regs[3];					$tmp_array['group'] = $regs[4];					$tmp_array['size'] = $regs[5];					$tmp_array['date'] = @date("m-d", strtotime($regs[6]));					$tmp_array['time'] = $regs[7];					$tmp_array['name'] = $regs[9];				}				// If we just want files, do not add a folder				if ($type == 'files' && $tmp_array['type'] == 1)				{					continue;				}				// If we just want folders, do not add a file				if ($type == 'folders' && $tmp_array['type'] == 0)				{					continue;				}				if (is_array($tmp_array) && $tmp_array['name'] != '.' && $tmp_array['name'] != '..')				{					$dir_list[] = $tmp_array;				}			}		}		else		{			foreach ($contents as $file)			{				$tmp_array = null;				if (@preg_match($regexp, $file, $regs))				{					$fType = (int) ($regs[7] == '<DIR>');					$timestamp = strtotime("$regs[3]-$regs[1]-$regs[2] $regs[4]:$regs[5]$regs[6]");					// $tmp_array['line'] = $regs[0];					$tmp_array['type'] = $fType;					$tmp_array['rights'] = '';					// $tmp_array['number'] = 0;					$tmp_array['user'] = '';					$tmp_array['group'] = '';					$tmp_array['size'] = (int) $regs[7];					$tmp_array['date'] = date('m-d', $timestamp);					$tmp_array['time'] = date('H:i', $timestamp);					$tmp_array['name'] = $regs[8];				}				// If we just want files, do not add a folder				if ($type == 'files' && $tmp_array['type'] == 1)				{					continue;				}				// If we just want folders, do not add a file				if ($type == 'folders' && $tmp_array['type'] == 0)				{					continue;				}				if (is_array($tmp_array) && $tmp_array['name'] != '.' && $tmp_array['name'] != '..')				{					$dir_list[] = $tmp_array;				}			}		}		return $dir_list;	}	/**	 * Send command to the FTP server and validate an expected response code	 *	 * @param   string  $cmd               Command to send to the FTP server	 * @param   mixed   $expectedResponse  Integer response code or array of integer response codes	 *	 * @return  boolean  True if command executed successfully	 *	 * @since   12.1	 */	protected function _putCmd($cmd, $expectedResponse)	{		// Make sure we have a connection to the server		if (!is_resource($this->_conn))		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PUTCMD_UNCONNECTED'), JLog::WARNING, 'jerror');			return false;		}		// Send the command to the server		if (!fwrite($this->_conn, $cmd . "\r\n"))		{			JLog::add(JText::sprintf('DDD', JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PUTCMD_SEND', $cmd)), JLog::WARNING, 'jerror');		}		return $this->_verifyResponse($expectedResponse);	}	/**	 * Verify the response code from the server and log response if flag is set	 *	 * @param   mixed  $expected  Integer response code or array of integer response codes	 *	 * @return  boolean  True if response code from the server is expected	 *	 * @since   12.1	 */	protected function _verifyResponse($expected)	{		$parts = null;		// Wait for a response from the server, but timeout after the set time limit		$endTime = time() + $this->_timeout;		$this->_response = '';		do		{			$this->_response .= fgets($this->_conn, 4096);		}		while (!preg_match("/^([0-9]{3})(-(.*" . CRLF . ")+\\1)? [^" . CRLF . "]+" . CRLF . "$/", $this->_response, $parts) && time() < $endTime);		// Catch a timeout or bad response		if (!isset($parts[1]))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_VERIFYRESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Separate the code from the message		$this->_responseCode = $parts[1];		$this->_responseMsg = $parts[0];		// Did the server respond with the code we wanted?		if (is_array($expected))		{			if (in_array($this->_responseCode, $expected))			{				$retval = true;			}			else			{				$retval = false;			}		}		else		{			if ($this->_responseCode == $expected)			{				$retval = true;			}			else			{				$retval = false;			}		}		return $retval;	}	/**	 * Set server to passive mode and open a data port connection	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	protected function _passive()	{		$match = array();		$parts = array();		$errno = null;		$err = null;		// Make sure we have a connection to the server		if (!is_resource($this->_conn))		{			JLog::add(JText::_('JLIB_CLIENT_ERROR_JFTP_PASSIVE_CONNECT_PORT'), JLog::WARNING, 'jerror');			return false;		}		// Request a passive connection - this means, we'll talk to you, you don't talk to us.		@ fwrite($this->_conn, "PASV\r\n");		// Wait for a response from the server, but timeout after the set time limit		$endTime = time() + $this->_timeout;		$this->_response = '';		do		{			$this->_response .= fgets($this->_conn, 4096);		}		while (!preg_match("/^([0-9]{3})(-(.*" . CRLF . ")+\\1)? [^" . CRLF . "]+" . CRLF . "$/", $this->_response, $parts) && time() < $endTime);		// Catch a timeout or bad response		if (!isset($parts[1]))		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_RESPONSE', $this->_response), JLog::WARNING, 'jerror');			return false;		}		// Separate the code from the message		$this->_responseCode = $parts[1];		$this->_responseMsg = $parts[0];		// If it's not 227, we weren't given an IP and port, which means it failed.		if ($this->_responseCode != '227')		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_IP_OBTAIN', $this->_responseMsg), JLog::WARNING, 'jerror');			return false;		}		// Snatch the IP and port information, or die horribly trying...		if (preg_match('~\((\d+),\s*(\d+),\s*(\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+))\)~', $this->_responseMsg, $match) == 0)		{			JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_IP_VALID', $this->_responseMsg), JLog::WARNING, 'jerror');			return false;		}		// This is pretty simple - store it for later use ;).		$this->_pasv = array('ip' => $match[1] . '.' . $match[2] . '.' . $match[3] . '.' . $match[4], 'port' => $match[5] * 256 + $match[6]);		// Connect, assuming we've got a connection.		$this->_dataconn = @fsockopen($this->_pasv['ip'], $this->_pasv['port'], $errno, $err, $this->_timeout);		if (!$this->_dataconn)		{			JLog::add(				JText::sprintf('JLIB_CLIENT_ERROR_JFTP_PASSIVE_CONNECT', $this->_pasv['ip'], $this->_pasv['port'], $errno, $err),				JLog::WARNING,				'jerror'			);			return false;		}		// Set the timeout for this connection		socket_set_timeout($this->_conn, $this->_timeout, 0);		return true;	}	/**	 * Method to find out the correct transfer mode for a specific file	 *	 * @param   string  $fileName  Name of the file	 *	 * @return  integer Transfer-mode for this filetype [FTP_ASCII|FTP_BINARY]	 *	 * @since   12.1	 */	protected function _findMode($fileName)	{		if ($this->_type == FTP_AUTOASCII)		{			$dot = strrpos($fileName, '.') + 1;			$ext = substr($fileName, $dot);			if (in_array($ext, $this->_autoAscii))			{				$mode = FTP_ASCII;			}			else			{				$mode = FTP_BINARY;			}		}		elseif ($this->_type == FTP_ASCII)		{			$mode = FTP_ASCII;		}		else		{			$mode = FTP_BINARY;		}		return $mode;	}	/**	 * Set transfer mode	 *	 * @param   integer  $mode  Integer representation of data transfer mode [1:Binary|0:Ascii]	 * Defined constants can also be used [FTP_BINARY|FTP_ASCII]	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	protected function _mode($mode)	{		if ($mode == FTP_BINARY)		{			if (!$this->_putCmd("TYPE I", 200))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MODE_BINARY', $this->_response), JLog::WARNING, 'jerror');				return false;			}		}		else		{			if (!$this->_putCmd("TYPE A", 200))			{				JLog::add(JText::sprintf('JLIB_CLIENT_ERROR_JFTP_MODE_ASCII', $this->_response), JLog::WARNING, 'jerror');				return false;			}		}		return true;	}}/** * Deprecated class placeholder. You should use JClientFtp instead. * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 * @deprecated  12.3 */class JFTP extends JClientFtp{	/**	 * JFTP object constructor	 *	 * @param   array  $options  Associative array of options to set	 *	 * @since   11.1	 */	public function __construct($options)	{		JLog::add('JFTP is deprecated. Use JClientFtp instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Model Interface * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */interface JModel{	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState();	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state);}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Weblinks Component Model for a Weblink record * * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelWeblink extends JModelItem{	/**	 * Model context string.	 *	 * @access	protected	 * @var		string	 */	protected $_context = 'com_weblinks.weblink';	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		$app = JFactory::getApplication();		$params	= $app->getParams();		// Load the object state.		$id	= $app->input->getInt('id');		$this->setState('weblink.id', $id);		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Method to get an object.	 *	 * @param   integer	The id of the object to get.	 *	 * @return  mixed  Object on success, false on failure.	 */	public function getItem($id = null)	{		if ($this->_item === null)		{			$this->_item = false;			if (empty($id))			{				$id = $this->getState('weblink.id');			}			// Get a level row instance.			$table = JTable::getInstance('Weblink', 'WeblinksTable');			// Attempt to load the row.			if ($table->load($id))			{				// Check published state.				if ($published = $this->getState('filter.published'))				{					if ($table->state != $published)					{						return $this->_item;					}				}				// Convert the JTable to a clean JObject.				$properties = $table->getProperties(1);				$this->_item = JArrayHelper::toObject($properties, 'JObject');			}			elseif ($error = $table->getError())			{				$this->setError($error);			}		}		return $this->_item;	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param	type	The table type to instantiate	 * @param	string	A prefix for the table class name. Optional.	 * @param	array	Configuration array for model. Optional.	 * @return	JTable	A database object	 * @since	1.6	 */	public function getTable($type = 'Weblink', $prefix = 'WeblinksTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to increment the hit counter for the weblink	 *	 * @param   integer  $id  Optional ID of the weblink.	 *	 * @return  boolean  True on success	 */	public function hit($id = null)	{		if (empty($id))		{			$id = $this->getState('weblink.id');		}		$weblink = $this->getTable('Weblink', 'WeblinksTable');		return $weblink->hit($id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Porter English stemmer class for the Finder indexer package. * * This class was adapted from one written by Richard Heyes. * See copyright and link information above. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerPorter_En extends FinderIndexerStemmer{	/**	 * Regex for matching a consonant.	 *	 * @var    string	 * @since  2.5	 */	private static $_regex_consonant = '(?:[bcdfghjklmnpqrstvwxz]|(?<=[aeiou])y|^y)';	/**	 * Regex for matching a vowel	 * @var    string	 * @since  2.5	 */	private static $_regex_vowel = '(?:[aeiou]|(?<![aeiou])y)';	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Check if the token is long enough to merit stemming.		if (strlen($token) <= 2)		{			return $token;		}		// Check if the language is English or All.		if ($lang !== 'en' && $lang != '*')		{			return $token;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Stem the token.			$result = $token;			$result = self::_step1ab($result);			$result = self::_step1c($result);			$result = self::_step2($result);			$result = self::_step3($result);			$result = self::_step4($result);			$result = self::_step5($result);			// Add the token to the cache.			$this->cache[$lang][$token] = $result;		}		return $this->cache[$lang][$token];	}	/**	 * Step 1	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1ab($word)	{		// Part a		if (substr($word, -1) == 's')		{				self::_replace($word, 'sses', 'ss')			or self::_replace($word, 'ies', 'i')			or self::_replace($word, 'ss', 'ss')			or self::_replace($word, 's', '');		}		// Part b		if (substr($word, -2, 1) != 'e' or !self::_replace($word, 'eed', 'ee', 0))		{			// First rule			$v = self::$_regex_vowel;			// ing and ed			// Note use of && and OR, for precedence reasons			if (preg_match("#$v+#", substr($word, 0, -3)) && self::_replace($word, 'ing', '')				or preg_match("#$v+#", substr($word, 0, -2)) && self::_replace($word, 'ed', ''))			{				// If one of above two test successful				if (!self::_replace($word, 'at', 'ate') and !self::_replace($word, 'bl', 'ble') and !self::_replace($word, 'iz', 'ize'))				{					// Double consonant ending					if (self::_doubleConsonant($word) and substr($word, -2) != 'll' and substr($word, -2) != 'ss' and substr($word, -2) != 'zz')					{						$word = substr($word, 0, -1);					}					elseif (self::_m($word) == 1 and self::_cvc($word))					{						$word .= 'e';					}				}			}		}		return $word;	}	/**	 * Step 1c	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step1c($word)	{		$v = self::$_regex_vowel;		if (substr($word, -1) == 'y' && preg_match("#$v+#", substr($word, 0, -1)))		{			self::_replace($word, 'y', 'i');		}		return $word;	}	/**	 * Step 2	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step2($word)	{		switch (substr($word, -2, 1))		{			case 'a':					self::_replace($word, 'ational', 'ate', 0)				or self::_replace($word, 'tional', 'tion', 0);				break;			case 'c':					self::_replace($word, 'enci', 'ence', 0)				or self::_replace($word, 'anci', 'ance', 0);				break;			case 'e':				self::_replace($word, 'izer', 'ize', 0);				break;			case 'g':				self::_replace($word, 'logi', 'log', 0);				break;			case 'l':					self::_replace($word, 'entli', 'ent', 0)				or self::_replace($word, 'ousli', 'ous', 0)				or self::_replace($word, 'alli', 'al', 0)				or self::_replace($word, 'bli', 'ble', 0)				or self::_replace($word, 'eli', 'e', 0);				break;			case 'o':					self::_replace($word, 'ization', 'ize', 0)				or self::_replace($word, 'ation', 'ate', 0)				or self::_replace($word, 'ator', 'ate', 0);				break;			case 's':					self::_replace($word, 'iveness', 'ive', 0)				or self::_replace($word, 'fulness', 'ful', 0)				or self::_replace($word, 'ousness', 'ous', 0)				or self::_replace($word, 'alism', 'al', 0);				break;			case 't':					self::_replace($word, 'biliti', 'ble', 0)				or self::_replace($word, 'aliti', 'al', 0)				or self::_replace($word, 'iviti', 'ive', 0);				break;		}		return $word;	}	/**	 * Step 3	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step3($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'ical', 'ic', 0);				break;			case 's':				self::_replace($word, 'ness', '', 0);				break;			case 't':					self::_replace($word, 'icate', 'ic', 0)				or self::_replace($word, 'iciti', 'ic', 0);				break;			case 'u':				self::_replace($word, 'ful', '', 0);				break;			case 'v':				self::_replace($word, 'ative', '', 0);				break;			case 'z':				self::_replace($word, 'alize', 'al', 0);				break;		}		return $word;	}	/**	 * Step 4	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step4($word)	{		switch (substr($word, -2, 1))		{			case 'a':				self::_replace($word, 'al', '', 1);				break;			case 'c':					self::_replace($word, 'ance', '', 1)				or self::_replace($word, 'ence', '', 1);				break;			case 'e':				self::_replace($word, 'er', '', 1);				break;			case 'i':				self::_replace($word, 'ic', '', 1);				break;			case 'l':					self::_replace($word, 'able', '', 1)				or self::_replace($word, 'ible', '', 1);				break;			case 'n':					self::_replace($word, 'ant', '', 1)				or self::_replace($word, 'ement', '', 1)				or self::_replace($word, 'ment', '', 1)				or self::_replace($word, 'ent', '', 1);				break;			case 'o':				if (substr($word, -4) == 'tion' or substr($word, -4) == 'sion')				{					self::_replace($word, 'ion', '', 1);				}				else				{					self::_replace($word, 'ou', '', 1);				}				break;			case 's':				self::_replace($word, 'ism', '', 1);				break;			case 't':					self::_replace($word, 'ate', '', 1)				or self::_replace($word, 'iti', '', 1);				break;			case 'u':				self::_replace($word, 'ous', '', 1);				break;			case 'v':				self::_replace($word, 'ive', '', 1);				break;			case 'z':				self::_replace($word, 'ize', '', 1);				break;		}		return $word;	}	/**	 * Step 5	 *	 * @param   string  $word  The token to stem.	 *	 * @return  string	 *	 * @since   2.5	 */	private static function _step5($word)	{		// Part a		if (substr($word, -1) == 'e')		{			if (self::_m(substr($word, 0, -1)) > 1)			{				self::_replace($word, 'e', '');			}			elseif (self::_m(substr($word, 0, -1)) == 1)			{				if (!self::_cvc(substr($word, 0, -1)))				{					self::_replace($word, 'e', '');				}			}		}		// Part b		if (self::_m($word) > 1 and self::_doubleConsonant($word) and substr($word, -1) == 'l')		{			$word = substr($word, 0, -1);		}		return $word;	}	/**	 * Replaces the first string with the second, at the end of the string. If third	 * arg is given, then the preceding string must match that m count at least.	 *	 * @param   string   &$str   String to check	 * @param   string   $check  Ending to check for	 * @param   string   $repl   Replacement string	 * @param   integer  $m      Optional minimum number of m() to meet	 *	 * @return  boolean  Whether the $check string was at the end	 *                   of the $str string. True does not necessarily mean	 *                   that it was replaced.	 *	 * @since   2.5	 */	private static function _replace(&$str, $check, $repl, $m = null)	{		$len = 0 - strlen($check);		if (substr($str, $len) == $check)		{			$substr = substr($str, 0, $len);			if (is_null($m) or self::_m($substr) > $m)			{				$str = $substr . $repl;			}			return true;		}		return false;	}	/**	 * m() measures the number of consonant sequences in $str. if c is	 * a consonant sequence and v a vowel sequence, and <..> indicates arbitrary	 * presence,	 *	 * <c><v>       gives 0	 * <c>vc<v>     gives 1	 * <c>vcvc<v>   gives 2	 * <c>vcvcvc<v> gives 3	 *	 * @param   string  $str  The string to return the m count for	 *	 * @return  integer  The m count	 *	 * @since   2.5	 */	private static function _m($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		$str = preg_replace("#^$c+#", '', $str);		$str = preg_replace("#$v+$#", '', $str);		preg_match_all("#($v+$c+)#", $str, $matches);		return count($matches[1]);	}	/**	 * Returns true/false as to whether the given string contains two	 * of the same consonant next to each other at the end of the string.	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _doubleConsonant($str)	{		$c = self::$_regex_consonant;		return preg_match("#$c{2}$#", $str, $matches) and $matches[0]{0} == $matches[0]{1};	}	/**	 * Checks for ending CVC sequence where second C is not W, X or Y	 *	 * @param   string  $str  String to check	 *	 * @return  boolean  Result	 *	 * @since   2.5	 */	private static function _cvc($str)	{		$c = self::$_regex_consonant;		$v = self::$_regex_vowel;		return preg_match("#($c$v$c)$#", $str, $matches) and strlen($matches[1]) == 3 and $matches[1]{2} != 'w' and $matches[1]{2} != 'x' and $matches[1]{2} != 'y';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_COMPLETE_HEADING') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_COMPLETE_MESSAGE', JVERSION); ?>	</p></fieldset>
<?php/** * @package     Joomla.Site * @subpackage  Template.beez5 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$templateparams = $app->getTemplate(true)->params;if (!$templateparams->get('html5', 0)){	require JPATH_BASE.'/components/com_content/views/archive/tmpl/default_items.php';	//evtl. ersetzen durch JPATH_COMPONENT.'/views/...'} else {JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');$params = &$this->params;?><ul id="archive-items"><?php foreach ($this->items as $i => $item) : ?>	<li class="row<?php echo $i % 2; ?>">		<h2>		<?php if ($params->get('link_titles')) : ?>			<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug)); ?>">				<?php echo $this->escape($item->title); ?></a>		<?php else: ?>				<?php echo $this->escape($item->title); ?>		<?php endif; ?>		</h2><?php if (($params->get('show_author')) or ($params->get('show_parent_category')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))  or ($params->get('show_hits'))) : ?> <dl class="article-info"> <dt class="article-info-term"><?php echo JText::_('COM_CONTENT_ARTICLE_INFO'); ?></dt><?php endif; ?><?php if ($params->get('show_parent_category')) : ?>		<dd class="parent-category-name">			<?php	$title = $this->escape($item->parent_title);					$url = '<a href="'.JRoute::_(ContentHelperRoute::getCategoryRoute($item->parent_slug)).'">'.$title.'</a>';?>			<?php if ($params->get('link_parent_category') && $item->parent_slug) : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_PARENT', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_category')) : ?>		<dd class="category-name">			<?php	$title = $this->escape($item->category_title);					$url = '<a href="' . JRoute::_(ContentHelperRoute::getCategoryRoute($item->catslug)) . '">' . $title . '</a>'; ?>			<?php if ($params->get('link_category') && $item->catslug) : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $url); ?>				<?php else : ?>				<?php echo JText::sprintf('COM_CONTENT_CATEGORY', $title); ?>			<?php endif; ?>		</dd><?php endif; ?><?php if ($params->get('show_create_date')) : ?>		<dd class="create">		<?php echo JText::sprintf('COM_CONTENT_CREATED_DATE_ON', JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_modify_date')) : ?>		<dd class="modified">		<?php echo JText::sprintf('COM_CONTENT_LAST_UPDATED', JHtml::_('date', $item->modified, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_publish_date')) : ?>		<dd class="published">		<?php echo JText::sprintf('COM_CONTENT_PUBLISHED_DATE_ON', JHtml::_('date', $item->publish_up, JText::_('DATE_FORMAT_LC2'))); ?>		</dd><?php endif; ?><?php if ($params->get('show_author') && !empty($item->author )) : ?>	<dd class="createdby">		<?php $author = $item->author; ?>		<?php $author = ($item->created_by_alias ? $item->created_by_alias : $author);?>			<?php if (!empty($item->contactid ) &&  $params->get('link_author') == true):?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY',					JHtml::_('link', JRoute::_('index.php?option=com_contact&view=contact&id=' . $item->contactid), $author)				); ?>			<?php else :?>				<?php echo JText::sprintf('COM_CONTENT_WRITTEN_BY', $author); ?>			<?php endif; ?>	</dd><?php endif; ?><?php if ($params->get('show_hits')) : ?>		<dd class="hits">		<?php echo JText::sprintf('COM_CONTENT_ARTICLE_HITS', $item->hits); ?>		</dd><?php endif; ?><?php if (($params->get('show_author')) or ($params->get('show_category')) or ($params->get('show_create_date')) or ($params->get('show_modify_date')) or ($params->get('show_publish_date'))  or ($params->get('show_hits'))) :?>	 </dl><?php endif; ?><?php  if ($params->get('show_intro')) :?>		<div class="intro">			<?php echo JHtml::_('string.truncate', $item->introtext, $params->get('introtext_limit')); ?>		</div>		<?php endif; ?>	</li><?php endforeach; ?></ul><div id="pagination">	<span><?php echo $this->pagination->getPagesLinks(); ?></span>	<span><?php echo $this->pagination->getPagesCounter(); ?></span></div><?php } ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="registration-complete<?php echo $this->pageclass_sfx;?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo $module->content;
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$doc = JFactory::getDocument();$color = $this->params->get('templatecolor');$doc->addStyleSheet($this->baseurl.'/templates/system/css/system.css');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/template.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/position.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/layout.css', $type = 'text/css', $media = 'screen,projection');$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/print.css', $type = 'text/css', $media = 'print');$files = JHtml::_('stylesheet', 'templates/'.$this->template.'/css/general.css', null, false, true);if ($files):	if (!is_array($files)):		$files = array($files);	endif;	foreach ($files as $file) :		$doc->addStyleSheet($file);	endforeach;endif;$doc->addStyleSheet('templates/'.$this->template.'/css/'.htmlspecialchars($color).'.css');if ($this->direction == 'rtl'){	$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/template_rtl.css');	if (file_exists(JPATH_SITE . '/templates/' . $this->template . '/css/' . $color . '_rtl.css'))	{		$doc->addStyleSheet($this->baseurl.'/templates/'.$this->template.'/css/'.htmlspecialchars($color).'_rtl.css');	}}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" /><!--[if lte IE 6]>	<link href="<?php echo $this->baseurl ?>/templates/<?php echo $this->template; ?>/css/ieonly.css" rel="stylesheet" type="text/css" /><![endif]--><!--[if lt IE 9]>	<script src="<?php echo $this->baseurl ?>/media/jui/js/html5.js"></script><![endif]--></head><body class="contentpane">	<div id="all">		<div id="main">			<jdoc:include type="message" />			<jdoc:include type="component" />		</div>	</div></body></html>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Initiasile related data.require_once JPATH_ADMINISTRATOR . '/components/com_menus/helpers/menus.php';$menuTypes = MenusHelper::getMenuLinks();JHtml::_('script', 'jui/treeselectmenu.jquery.min.js', false, true);$script = "	jQuery(document).ready(function()	{		menuHide(jQuery('#jform_assignment').val());		jQuery('#jform_assignment').change(function()		{			menuHide(jQuery(this).val());		})	});	function menuHide(val)	{		if (val == 0 || val == '-')		{			jQuery('#menuselect-group').hide();		}		else		{			jQuery('#menuselect-group').show();		}	}";// Add the script to the document headJFactory::getDocument()->addScriptDeclaration($script);?><div class="control-group">	<label id="jform_menus-lbl" class="control-label" for="jform_menus"><?php echo JText::_('COM_MODULES_MODULE_ASSIGN'); ?></label>	<div id="jform_menus" class="controls">		<select name="jform[assignment]" id="jform_assignment">			<?php echo JHtml::_('select.options', ModulesHelper::getAssignmentOptions($this->item->client_id), 'value', 'text', $this->item->assignment, true); ?>		</select>	</div></div><div id="menuselect-group" class="control-group">	<label id="jform_menuselect-lbl" class="control-label" for="jform_menuselect"><?php echo JText::_('JGLOBAL_MENU_SELECTION'); ?></label>	<div id="jform_menuselect" class="controls">		<?php if (!empty($menuTypes)) : ?>		<?php $id = 'jform_menuselect'; ?>		<div class="well well-small">			<div class="form-inline">				<span class="small"><?php echo JText::_('JSELECT'); ?>:					<a id="treeCheckAll" href="javascript://"><?php echo JText::_('JALL'); ?></a>,					<a id="treeUncheckAll" href="javascript://"><?php echo JText::_('JNONE'); ?></a>				</span>				<span class="width-20">|</span>				<span class="small"><?php echo JText::_('COM_MODULES_EXPAND'); ?>:					<a id="treeExpandAll" href="javascript://"><?php echo JText::_('JALL'); ?></a>,					<a id="treeCollapseAll" href="javascript://"><?php echo JText::_('JNONE'); ?></a>				</span>				<input type="text" id="treeselectfilter" name="treeselectfilter" class="input-medium search-query pull-right" size="16"					autocomplete="off" placeholder="<?php echo JText::_('JSEARCH_FILTER'); ?>" aria-invalid="false" tabindex="-1">			</div>			<div class="clearfix"></div>			<hr class="hr-condensed" />			<ul class="treeselect">				<?php foreach ($menuTypes as &$type) : ?>				<?php if (count($type->links)) : ?>					<?php $prevlevel = 0; ?>					<li>						<div class="treeselect-item pull-left">							<label class="pull-left nav-header"><?php echo $type->title; ?></label></div>					<?php foreach ($type->links as $i => $link) : ?>						<?php						if ($prevlevel < $link->level)						{							echo '<ul class="treeselect-sub">';						} elseif ($prevlevel > $link->level)						{							echo str_repeat('</li></ul>', $prevlevel - $link->level);						} else {							echo '</li>';						}						$selected = 0;						if ($this->item->assignment == 0)						{							$selected = 1;						} elseif ($this->item->assignment < 0)						{							$selected = in_array(-$link->value, $this->item->assigned);						} elseif ($this->item->assignment > 0)						{							$selected = in_array($link->value, $this->item->assigned);						}						?>							<li>								<div class="treeselect-item pull-left">									<input type="checkbox" class="pull-left" name="jform[assigned][]" id="<?php echo $id . $link->value; ?>" value="<?php echo (int) $link->value; ?>"<?php echo $selected ? ' checked="checked"' : ''; ?> />									<label for="<?php echo $id . $link->value; ?>" class="pull-left"><?php echo $link->text; ?></label>								</div>						<?php						if (!isset($type->links[$i + 1]))						{							echo str_repeat('</li></ul>', $link->level);						}						$prevlevel = $link->level;						?>						<?php endforeach; ?>					</li>					<?php endif; ?>				<?php endforeach; ?>			</ul>			<div style="display:none;" id="treeselectmenu">				<div class="pull-left nav-hover treeselect-menu">					<div class="btn-group">						<a href="#" data-toggle="dropdown" class="dropdown-toggle btn btn-micro">							<span class="caret"></span>						</a>						<ul class="dropdown-menu">							<li class="nav-header"><?php echo JText::_('COM_MODULES_SUBITEMS'); ?></li>							<li class="divider"></li>							<li class=""><a class="checkall" href="javascript://"><i class="icon-checkbox"></i> <?php echo JText::_('JSELECT'); ?></a>							</li>							<li><a class="uncheckall" href="javascript://"><i class="icon-checkbox-unchecked"></i> <?php echo JText::_('COM_MODULES_DESELECT'); ?></a>							</li>							<div class="treeselect-menu-expand">							<li class="divider"></li>							<li><a class="expandall" href="javascript://"><i class="icon-plus"></i> <?php echo JText::_('COM_MODULES_EXPAND'); ?></a></li>							<li><a class="collapseall" href="javascript://"><i class="icon-minus"></i> <?php echo JText::_('COM_MODULES_COLLAPSE'); ?></a></li>							</div>						</ul>					</div>				</div>			</div>		</div>		<?php endif; ?>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Base controller class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderController extends JControllerLegacy{	/**	 * @var    string  The default view.	 * @since  2.5	 */	protected $default_view = 'index';	/**	 * Method to display a view.	 *	 * @param   boolean  $cachable   If true, the view output will be cached	 * @param   array    $urlparams  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController  A JController object to support chaining.	 *	 * @since	2.5	 */	public function display($cachable = false, $urlparams = array())	{		include_once JPATH_COMPONENT . '/helpers/finder.php';		$view   = $this->input->get('view', 'index', 'word');		$layout = $this->input->get('layout', 'index', 'word');		$f_id   = $this->input->get('filter_id', null, 'int');		// Check for edit form.		if ($view == 'filter' && $layout == 'edit' && !$this->checkEditId('com_finder.edit.filter', $f_id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $f_id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_finder&view=filters', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRuleUrl extends JFormRule{	/**	 * Method to test an external url for a valid parts.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @link    http://www.w3.org/Addressing/URL/url-spec.txt	 * @see	    Jstring	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// If the field is empty and not required, the field is valid.		$required = ((string) $element['required'] == 'true' || (string) $element['required'] == 'required');		if (!$required && empty($value))		{			return true;		}		$urlParts = JString::parse_url($value);		// See http://www.w3.org/Addressing/URL/url-spec.txt		// Use the full list or optionally specify a list of permitted schemes.		if ($element['schemes'] == '')		{			$scheme = array('http', 'https', 'ftp', 'ftps', 'gopher', 'mailto', 'news', 'prospero', 'telnet', 'rlogin', 'tn3270', 'wais', 'url',				'mid', 'cid', 'nntp', 'tel', 'urn', 'ldap', 'file', 'fax', 'modem', 'git');		}		else		{			$scheme = explode(',', $element['schemes']);		}		/*		 * This rule is only for full URLs with schemes because parse_url does not parse		 * accurately without a scheme.		 * @see http://php.net/manual/en/function.parse-url.php		 */		if ($urlParts && !array_key_exists('scheme', $urlParts))		{			return false;		}		$urlScheme = (string) $urlParts['scheme'];		$urlScheme = strtolower($urlScheme);		if (in_array($urlScheme, $scheme) == false)		{			return false;		}		// For some schemes here must be two slashes.		if (($urlScheme == 'http' || $urlScheme == 'https' || $urlScheme == 'ftp' || $urlScheme == 'sftp' || $urlScheme == 'gopher'			|| $urlScheme == 'wais' || $urlScheme == 'gopher' || $urlScheme == 'prospero' || $urlScheme == 'telnet' || $urlScheme == 'git')			&& ((substr($value, strlen($urlScheme), 3)) !== '://'))		{			return false;		}		// The best we can do for the rest is make sure that the strings are valid UTF-8		// and the port is an integer.		if (array_key_exists('host', $urlParts) && !JString::valid((string) $urlParts['host']))		{			return false;		}		if (array_key_exists('port', $urlParts) && !is_int((int) $urlParts['port']))		{			return false;		}		if (array_key_exists('path', $urlParts) && !JString::valid((string) $urlParts['path']))		{			return false;		}		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Package Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerManifestPackage extends JInstallerManifest{	/**	 * Unique name of the package	 *	 * @var    string	 * @since  3.1	 */	public $packagename = '';	/**	 * Website for the package	 *	 * @var    string	 * @since  3.1	 */	public $url = '';	/**	 * Scriptfile for the package	 *	 * @var    string	 * @since  3.1	 */	public $scriptfile = '';	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	protected function loadManifestFromData(SimpleXMLElement $xml)	{		$this->name        = (string) $xml->name;		$this->packagename = (string) $xml->packagename;		$this->update      = (string) $xml->update;		$this->authorurl   = (string) $xml->authorUrl;		$this->author      = (string) $xml->author;		$this->authoremail = (string) $xml->authorEmail;		$this->description = (string) $xml->description;		$this->packager    = (string) $xml->packager;		$this->packagerurl = (string) $xml->packagerurl;		$this->scriptfile  = (string) $xml->scriptfile;		$this->version     = (string) $xml->version;		if (isset($xml->files->file) && count($xml->files->file))		{			foreach ($xml->files->file as $file)			{				// NOTE: JInstallerExtension doesn't expect a string.				// DO NOT CAST $file				$this->filelist[] = new JInstallerExtension($file);			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlusComments extends JGoogleData{	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * List all of the comments for an activity.	 *	 * @param   string   $activityId  The ID of the activity to get comments for.	 * @param   string   $fields      Used to specify the fields you want returned.	 * @param   integer  $max         The maximum number of people to include in the response, used for paging.	 * @param   string   $order       The order in which to sort the list of comments. Acceptable values are "ascending" and "descending".	 * @param   string   $token       The continuation token, used to page through large result sets. To get the next page of results, set this	 * 								  parameter to the value of "nextPageToken" from the previous response. This token may be of any length.	 * @param   string   $alt         Specifies an alternative representation type. Acceptable values are: "json" - Use JSON format (default)	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function listComments($activityId, $fields = null, $max = 20, $order = null, $token = null, $alt = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'activities/' . $activityId . '/comments';			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			// Check if max is specified.			if ($max != 20)			{				$url .= (strpos($url, '?') === false) ? '?maxResults=' : '&maxResults=';				$url .= $max;			}			// Check if order is specified.			if ($order)			{				$url .= (strpos($url, '?') === false) ? '?orderBy=' : '&orderBy=';				$url .= $order;			}			// Check of token is specified.			if ($token)			{				$url .= (strpos($url, '?') === false) ? '?pageToken=' : '&pageToken=';				$url .= $token;			}			// Check if alt is specified.			if ($alt)			{				$url .= (strpos($url, '?') === false) ? '?alt=' : '&alt=';				$url .= $alt;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}	/**	 * Get a comment.	 *	 * @param   string  $id      The ID of the comment to get.	 * @param   string  $fields  Used to specify the fields you want returned.	 *	 * @return  mixed  Data from Google	 *	 * @since   1234	 */	public function getComment($id, $fields = null)	{		if ($this->isAuthenticated())		{			$url = $this->getOption('api.url') . 'comments/' . $id;			// Check if fields is specified.			if ($fields)			{				$url .= '?fields=' . $fields;			}			$jdata = $this->auth->query($url);			return json_decode($jdata->body, true);		}		else		{			return false;		}	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Summary View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewSummaryHtml extends InstallationViewDefault{	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * The PHP options checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpoptions;	/**	 * The PHP settings checked by the installer	 *	 * @var    array	 * @since  3.1	 */	protected $phpsettings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options     = $this->model->getOptions();		$this->phpoptions  = $this->model->getPhpOptions();		$this->phpsettings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_COMPONENT.'/controller.php';/** * Registration controller class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersControllerRegistration extends UsersController{	/**	 * Method to activate a user.	 *	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function activate()	{		$user  = JFactory::getUser();		$input = JFactory::getApplication()->input;		$uParams = JComponentHelper::getParams('com_users');		// If the user is logged in, return them back to the homepage.		if ($user->get('id'))		{			$this->setRedirect('index.php');			return true;		}		// If user registration or account activation is disabled, throw a 403.		if ($uParams->get('useractivation') == 0 || $uParams->get('allowUserRegistration') == 0)		{			JError::raiseError(403, JText::_('JLIB_APPLICATION_ERROR_ACCESS_FORBIDDEN'));			return false;		}		$model = $this->getModel('Registration', 'UsersModel');		$token = $input->getAlnum('token');		// Check that the token is in a valid format.		if ($token === null || strlen($token) !== 32)		{			JError::raiseError(403, JText::_('JINVALID_TOKEN'));			return false;		}		// Attempt to activate the user.		$return = $model->activate($token);		// Check for errors.		if ($return === false)		{			// Redirect back to the homepage.			$this->setMessage(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect('index.php');			return false;		}		$useractivation = $uParams->get('useractivation');		// Redirect to the login screen.		if ($useractivation == 0)		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_SAVE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		elseif ($useractivation == 1)		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_ACTIVATE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		elseif ($return->getParam('activate'))		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_VERIFY_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		else		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_ADMINACTIVATE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		return true;	}	/**	 * Method to register a user.	 *	 * @return  boolean  True on success, false on failure.	 * @since   1.6	 */	public function register()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// If registration is disabled - Redirect to login page.		if (JComponentHelper::getParams('com_users')->get('allowUserRegistration') == 0)		{			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));			return false;		}		$app	= JFactory::getApplication();		$model	= $this->getModel('Registration', 'UsersModel');		// Get the user data.		$requestData = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data	= $model->validate($form, $requestData);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_users.registration.data', $requestData);			// Redirect back to the registration screen.			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration', false));			return false;		}		// Attempt to save the data.		$return	= $model->register($data);		// Check for errors.		if ($return === false)		{			// Save the data in the session.			$app->setUserState('com_users.registration.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('COM_USERS_REGISTRATION_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration', false));			return false;		}		// Flush the data from the session.		$app->setUserState('com_users.registration.data', null);		// Redirect to the profile screen.		if ($return === 'adminactivate'){			$this->setMessage(JText::_('COM_USERS_REGISTRATION_COMPLETE_VERIFY'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		} elseif ($return === 'useractivate')		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_COMPLETE_ACTIVATE'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=registration&layout=complete', false));		}		else		{			$this->setMessage(JText::_('COM_USERS_REGISTRATION_SAVE_SUCCESS'));			$this->setRedirect(JRoute::_('index.php?option=com_users&view=login', false));		}		return true;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Custom session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @see         http://www.php.net/manual/en/function.session-set-save-handler.php * @todo        When dropping compatibility with PHP 5.3 use the SessionHandlerInterface and the SessionHandler class * @since       11.1 */abstract class JSessionStorage{	/**	 * @var    array  JSessionStorage instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 */	public function __construct($options = array())	{		$this->register($options);	}	/**	 * Returns a session storage handler object, only creating it if it doesn't already exist.	 *	 * @param   string  $name     The session store to instantiate	 * @param   array   $options  Array of options	 *	 * @return  JSessionStorage	 *	 * @since   11.1	 */	public static function getInstance($name = 'none', $options = array())	{		$name = strtolower(JFilterInput::getInstance()->clean($name, 'word'));		if (empty(self::$instances[$name]))		{			$class = 'JSessionStorage' . ucfirst($name);			if (!class_exists($class))			{				$path = __DIR__ . '/storage/' . $name . '.php';				if (file_exists($path))				{					require_once $path;				}				else				{					// No attempt to die gracefully here, as it tries to close the non-existing session					jexit('Unable to load session storage class: ' . $name);				}			}			self::$instances[$name] = new $class($options);		}		return self::$instances[$name];	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   11.1	 */	public function register()	{		// Use this object as the session handler		session_set_save_handler(			array($this, 'open'), array($this, 'close'), array($this, 'read'), array($this, 'write'),			array($this, 'destroy'), array($this, 'gc')		);	}	/**	 * Open the SessionHandler backend.	 *	 * @param   string  $save_path     The path to the session object.	 * @param   string  $session_name  The name of the session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function open($save_path, $session_name)	{		return true;	}	/**	 * Close the SessionHandler backend.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function close()	{		return true;	}	/**	 * Read the data for a particular session identifier from the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		return;	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		return true;	}	/**	 * Destroy the data for a particular session identifier in the	 * SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		return true;	}	/**	 * Garbage collect stale sessions from the SessionHandler backend.	 *	 * @param   integer  $maxlifetime  The maximum age of a session.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc($maxlifetime = null)	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return true;	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 * @deprecated  12.3 Use JSessionStorage::isSupported() instead.	 */	public static function test()	{		JLog::add('JSessionStorage::test() is deprecated. Use JSessionStorage::isSupported() instead.', JLog::WARNING, 'deprecated');		return static::isSupported();	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');?><section class="blog-featured<?php echo $this->pageclass_sfx;?>"><?php if ( $this->params->get('show_page_heading') != 0) : ?>	<h1>	<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1><?php endif; ?><?php $leadingcount = 0; ?><?php if (!empty($this->lead_items)) : ?><div class="items-leading">	<?php foreach ($this->lead_items as &$item) : ?>		<article class="leading-<?php echo $leadingcount; ?><?php echo $item->state == 0 ? ' system-unpublished' : null; ?>">			<?php				$this->item = &$item;				echo $this->loadTemplate('item');			?>		</article>		<?php			$leadingcount++;		?>	<?php endforeach; ?></div><?php endif; ?><?php	$introcount = (count($this->intro_items));	$counter = 0;?><?php if (!empty($this->intro_items)) : ?>	<?php foreach ($this->intro_items as $key => &$item) : ?>	<?php		$key = ($key - $leadingcount) + 1;		$rowcount = (((int) $key - 1) % (int) $this->columns) + 1;		$row = $counter / $this->columns;		if ($rowcount == 1) : ?>			<div class="items-row cols-<?php echo (int) $this->columns;?> <?php echo 'row-'.$row; ?>">		<?php endif; ?>		<article class="item column-<?php echo $rowcount;?><?php echo $item->state == 0 ? ' system-unpublished"' : null; ?>">			<?php					$this->item = &$item;					echo $this->loadTemplate('item');			?>		</article>		<?php $counter++; ?>			<?php if (($rowcount == $this->columns) or ($counter == $introcount)) : ?>				<span class="row-separator"></span>				</div>			<?php endif; ?>	<?php endforeach; ?><?php endif; ?><?php if (!empty($this->link_items)) : ?>	<div class="items-more">	<?php echo $this->loadTemplate('links'); ?>	</div><?php endif; ?><?php if ($this->params->def('show_pagination', 2) == 1  || ($this->params->get('show_pagination') == 2 && $this->pagination->pagesTotal > 1)) : ?>	<div class="pagination">		<?php if ($this->params->def('show_pagination_results', 1)) : ?>			<p class="counter">				<?php echo $this->pagination->getPagesCounter(); ?>			</p>		<?php  endif; ?>				<?php echo $this->pagination->getPagesLinks(); ?>	</div><?php endif; ?></section>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Reset view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.5 */class UsersViewReset extends JViewLegacy{	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.5	 */	public function display($tpl = null)	{		// This name will be used to get the model		$name = $this->getLayout();		// Check that the name is valid - has an associated model.		if (!in_array($name, array('confirm', 'complete')))		{			$name = 'default';		}		if ('default' == $name)		{			$formname = 'Form';		}		else		{			$formname = ucfirst($this->_name).ucfirst($name).'Form';		}		// Get the view data.		$this->form	= $this->get($formname);		$this->state	= $this->get('State');		$this->params	= $this->state->params;		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_RESET'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware substr_replace.* Note: requires utf8_substr to be loaded* @see http://www.php.net/substr_replace* @see utf8_strlen* @see utf8_substr*/function utf8_substr_replace($str, $repl, $start , $length = NULL ) {    preg_match_all('/./us', $str, $ar);    preg_match_all('/./us', $repl, $rar);    if( $length === NULL ) {        $length = utf8_strlen($str);    }    array_splice( $ar[0], $start, $length, $rar[0] );    return join('',$ar[0]);}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$this->subtemplatename = 'items';echo JLayoutHelper::render('joomla.content.category_default', $this);
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset title="<?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?>" class="form-horizontal">	<legend><?php echo JText::_('COM_CONFIG_FTP_DETAILS'); ?></legend>	<?php echo JText::_('COM_CONFIG_FTP_DETAILS_TIP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->message); ?></p>	<?php endif; ?>	<div class="control-group">		<div class="control-label"><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label></div>		<div class="controls"><input type="text" id="username" name="username" class="input_box" size="70" value="" /></div>	</div>	<div class="control-group">		<div class="control-label"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></div>		<div class="controls"><input type="password" id="password" name="password" class="input_box" size="70" value="" /></div>	</div></fieldset>
<?php/** * @package     Joomla.Platform * @subpackage  Controller * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Controller Class * * @package     Joomla.Platform * @subpackage  Controller * @since       12.1 */abstract class JControllerBase implements JController{	/**	 * The application object.	 *	 * @var    JApplicationBase	 * @since  12.1	 */	protected $app;	/**	 * The input object.	 *	 * @var    JInput	 * @since  12.1	 */	protected $input;	/**	 * Instantiate the controller.	 *	 * @param   JInput            $input  The input object.	 * @param   JApplicationBase  $app    The application object.	 *	 * @since  12.1	 */	public function __construct(JInput $input = null, JApplicationBase $app = null)	{		// Setup dependencies.		$this->app = isset($app) ? $app : $this->loadApplication();		$this->input = isset($input) ? $input : $this->loadInput();	}	/**	 * Get the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	public function getApplication()	{		return $this->app;	}	/**	 * Get the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	public function getInput()	{		return $this->input;	}	/**	 * Serialize the controller.	 *	 * @return  string  The serialized controller.	 *	 * @since   12.1	 */	public function serialize()	{		return serialize($this->input);	}	/**	 * Unserialize the controller.	 *	 * @param   string  $input  The serialized controller.	 *	 * @return  JController  Supports chaining.	 *	 * @since   12.1	 * @throws  UnexpectedValueException if input is not the right class.	 */	public function unserialize($input)	{		// Setup dependencies.		$this->app = $this->loadApplication();		// Unserialize the input.		$this->input = unserialize($input);		if (!($this->input instanceof JInput))		{			throw new UnexpectedValueException(sprintf('%s::unserialize would not accept a `%s`.', get_class($this), gettype($this->input)));		}		return $this;	}	/**	 * Load the application object.	 *	 * @return  JApplicationBase  The application object.	 *	 * @since   12.1	 */	protected function loadApplication()	{		return JFactory::getApplication();	}	/**	 * Load the input object.	 *	 * @return  JInput  The input object.	 *	 * @since   12.1	 */	protected function loadInput()	{		return $this->app->input;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google authentication class abstract * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleAuth{	/**	 * @var    JRegistry  Options for the Google authentication object.	 * @since  12.3	 */	protected $options;	/**	 * Abstract method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	abstract public function authenticate();	/**	 * Verify if the client has been authenticated	 *	 * @return  boolean  Is authenticated	 *	 * @since   12.3	 */	abstract public function isAuthenticated();	/**	 * Abstract method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	abstract public function query($url, $data = null, $headers = null, $method = 'get');	/**	 * Get an option from the JGoogleAuth object.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleAuth object.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleAuth  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Rest model class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersModelLogin extends JModelForm{	/**	 * Method to get the login form.	 *	 * The base form is loaded from XML and then an event is fired	 * for users plugins to extend the form with extra fields.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		// Get the form.		$form = $this->loadForm('com_users.login', 'login', array('load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  array  The default data is an empty array.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered login form data.		$app  = JFactory::getApplication();		$data = $app->getUserState('users.login.form.data', array());		// check for return URL from the request first		if ($return = JRequest::getVar('return', '', 'method', 'base64'))		{			$data['return'] = base64_decode($return);			if (!JURI::isInternal($data['return']))			{				$data['return'] = '';			}		}		// Set the return URL if empty.		if (!isset($data['return']) || empty($data['return']))		{			$data['return'] = 'index.php?option=com_users&view=profile';		}		$app->setUserState('users.login.form.data', $data);		$this->preprocessData('com_users.login', $data);		return $data;	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState()	{		// Get the application object.		$params	= JFactory::getApplication()->getParams('com_users');		// Load the parameters.		$this->setState('params', $params);	}	/**	 * Override JModelAdmin::preprocessForm to ensure the correct plugin group is loaded.	 *	 * @param   JForm   $form   A JForm object.	 * @param   mixed   $data   The data expected for the form.	 * @param   string  $group  The name of the plugin group to import (defaults to "content").	 *	 * @return  void	 *	 * @since   1.6	 * @throws  Exception if there is an error in the form event.	 */	protected function preprocessForm(JForm $form, $data, $group = 'user')	{		parent::preprocessForm($form, $data, $group);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/index.php';
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$selector = empty($displayData['selector']) ? '' : $displayData['selector'];echo "(function($){					$('#$selector a').click(function (e)					{						e.preventDefault();						$(this).tab('show');					});				})(jQuery);";
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Callback Log class * * This class allows logging to be handled by a callback function. * This allows unprecedented flexibility in the way logging can be handled. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */class JLogLoggerCallback extends JLogLogger{	/**	 * @var    callable  The function to call when an entry is added - should return True on success	 * @since  12.2	 */	protected $callback;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Throw an exception if there is not a valid callback		if (isset($this->options['callback']) && is_callable($this->options['callback']))		{			$this->callback = $this->options['callback'];		}		else		{			throw new JLogException(JText::_('JLogLoggerCallback created without valid callback function.'));		}	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 * @throws  LogException	 */	public function addEntry(JLogEntry $entry)	{		// Pass the log entry to the callback function		call_user_func($this->callback, $entry);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Banners master display controller. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/banners.php';		BannersHelper::updateReset();		$view   = $this->input->get('view', 'banners');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'banner' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.banner', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=banners', false));			return false;		}		elseif ($view == 'client' && $layout == 'edit' && !$this->checkEditId('com_banners.edit.client', $id)) {			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_banners&view=clients', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_login * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$input = JFactory::getApplication()->input;$task = $input->get('task');if ($task != 'login' && $task != 'logout'){	$input->set('task', '');	$task = '';}$controller = JControllerLegacy::getInstance('Login');$controller->execute($task);$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_search')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Search');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcache session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageMemcache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Memcache Extension is not available', 404);		}		parent::__construct($options);		$config = JFactory::getConfig();		// This will be an array of loveliness		// @todo: multiple servers		$this->_servers = array(			array(				'host' => $config->get('memcache_server_host', 'localhost'),				'port' => $config->get('memcache_server_port', 11211)			)		);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_path', $this->_servers['host'] . ':' . $this->_servers['port']);		ini_set('session.save_handler', 'memcache');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('memcache') && class_exists('Memcache'));	}}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MemberVarScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractVariableSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractVariableSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">private $foo</b> *     <b class="bad">var $foo</b> * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MemberVarScopeSniff extends PHP_CodeSniffer_Standards_AbstractVariableSniff{    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processMemberVar(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('Scope modifier not specified for member variable "%s"'            , $tokens[$stackPtr]['content']);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function    /**     * Processes normal variables.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariable(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function    /**     * Processes variables in double quoted strings.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     *     * @return void     */    protected function processVariableInString(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        // We don't care about normal variables.        return;    }//function}//class
<?php/** * @package     Joomla.Installation * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* * Joomla system checks. */error_reporting(E_ALL);ini_set('display_errors', true);const JDEBUG = false;@ini_set('magic_quotes_runtime', 0);/* * Check if a configuration file already exists. */if (file_exists(JPATH_CONFIGURATION . '/configuration.php')	&& (filesize(JPATH_CONFIGURATION . '/configuration.php') > 10)	&& !file_exists(JPATH_INSTALLATION . '/index.php')){	header('Location: ../index.php');	exit();}/* * Joomla system startup. */// Import the Joomla Platform.require_once JPATH_LIBRARIES . '/import.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Overrides Controller * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesControllerOverrides extends JControllerAdmin{	/**	 * The prefix to use with controller messages	 *	 * @var		string	 * @since	2.5	 */	protected $text_prefix = 'COM_LANGUAGES_VIEW_OVERRIDES';	/**	 * Method for deleting one or more overrides	 *	 * @return  void	 *	 * @since		2.5	 */	public function delete()	{		// Check for request forgeries		JSession::checkToken() or die(JText::_('JINVALID_TOKEN'));		// Get items to dlete from the request		$cid = $this->input->get('cid', array(), 'array');		if (!is_array($cid) || count($cid) < 1)		{			$this->setMessage(JText::_($this->text_prefix.'_NO_ITEM_SELECTED'), 'warning');		}		else		{			// Get the model			$model = $this->getModel('overrides');			// Remove the items			if ($model->delete($cid))			{				$this->setMessage(JText::plural($this->text_prefix.'_N_ITEMS_DELETED', count($cid)));			}			else			{				$this->setMessage($model->getError());			}		}		$this->setRedirect(JRoute::_('index.php?option='.$this->option.'&view='.$this->view_list, false));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL Server database driver * * @package     Joomla.Platform * @subpackage  Database * @see         http://msdn.microsoft.com/en-us/library/ee336279.aspx * @since       12.1 */class JDatabaseDriverSqlazure extends JDatabaseDriverSqlsrv{	/**	 * The name of the database driver.	 *	 * @var    string	 * @since  12.1	 */	public $name = 'sqlzure';}
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JResponse Class. * * This class serves to provide the Joomla Platform with a common interface to access * response variables.  This includes header and body. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JResponse{	/**	 * @var    array  Body	 * @since  11.1	 */	protected static $body = array();	/**	 * @var    boolean  Cachable	 * @since  11.1	 */	protected static $cachable = false;	/**	 * @var    array  Headers	 * @since  11.1	 */	protected static $headers = array();	/**	 * Set/get cachable state for the response.	 *	 * If $allow is set, sets the cachable state of the response.  Always returns current state.	 *	 * @param   boolean  $allow  True to allow browser caching.	 *	 * @return  boolean  True if browser caching should be allowed	 *	 * @since   11.1	 */	public static function allowCache($allow = null)	{		if (!is_null($allow))		{			self::$cachable = (bool) $allow;		}		return self::$cachable;	}	/**	 * Set a header.	 *	 * If $replace is true, replaces any headers already defined with that $name.	 *	 * @param   string   $name     The name of the header to set.	 * @param   string   $value    The value of the header to set.	 * @param   boolean  $replace  True to replace any existing headers by name.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setHeader($name, $value, $replace = false)	{		$name = (string) $name;		$value = (string) $value;		if ($replace)		{			foreach (self::$headers as $key => $header)			{				if ($name == $header['name'])				{					unset(self::$headers[$key]);				}			}		}		self::$headers[] = array('name' => $name, 'value' => $value);	}	/**	 * Return array of headers.	 *	 * @return  array	 *	 * @since   11.1	 */	public static function getHeaders()	{		return self::$headers;	}	/**	 * Clear headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function clearHeaders()	{		self::$headers = array();	}	/**	 * Send all headers.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function sendHeaders()	{		if (!headers_sent())		{			foreach (self::$headers as $header)			{				if ('status' == strtolower($header['name']))				{					// 'status' headers indicate an HTTP status, and need to be handled slightly differently					header(ucfirst(strtolower($header['name'])) . ': ' . $header['value'], null, (int) $header['value']);				}				else				{					header($header['name'] . ': ' . $header['value'], false);				}			}		}	}	/**	 * Set body content.	 *	 * If body content already defined, this will replace it.	 *	 * @param   string  $content  The content to set to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function setBody($content)	{		self::$body = array((string) $content);	}	/**	 * Prepend content to the body content	 *	 * @param   string  $content  The content to prepend to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function prependBody($content)	{		array_unshift(self::$body, (string) $content);	}	/**	 * Append content to the body content	 *	 * @param   string  $content  The content to append to the response body.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function appendBody($content)	{		array_push(self::$body, (string) $content);	}	/**	 * Return the body content	 *	 * @param   boolean  $toArray  Whether or not to return the body content as an array of strings or as a single string; defaults to false.	 *	 * @return  string  array	 *	 * @since   11.1	 */	public static function getBody($toArray = false)	{		if ($toArray)		{			return self::$body;		}		ob_start();		foreach (self::$body as $content)		{			echo $content;		}		return ob_get_clean();	}	/**	 * Sends all headers prior to returning the string	 *	 * @param   boolean  $compress  If true, compress the data	 *	 * @return  string	 *	 * @since   11.1	 */	public static function toString($compress = false)	{		$data = self::getBody();		// Don't compress something if the server is going to do it anyway. Waste of time.		if ($compress && !ini_get('zlib.output_compression') && ini_get('output_handler') != 'ob_gzhandler')		{			$data = self::compress($data);		}		if (self::allowCache() === false)		{			self::setHeader('Cache-Control', 'no-cache', false);			// HTTP 1.0			self::setHeader('Pragma', 'no-cache');		}		self::sendHeaders();		return $data;	}	/**	 * Compress the data	 *	 * Checks the accept encoding of the browser and compresses the data before	 * sending it to the client.	 *	 * @param   string  $data  Content to compress for output.	 *	 * @return  string  compressed data	 *	 * @note    Replaces _compress method in 11.1	 * @since   11.1	 */	protected static function compress($data)	{		$encoding = self::clientEncoding();		if (!$encoding)		{			return $data;		}		if (!extension_loaded('zlib') || ini_get('zlib.output_compression'))		{			return $data;		}		if (headers_sent())		{			return $data;		}		if (connection_status() !== 0)		{			return $data;		}		// Ideal level		$level = 4;		/*		$size		= strlen($data);		$crc		= crc32($data);		$gzdata		= "\x1f\x8b\x08\x00\x00\x00\x00\x00";		$gzdata		.= gzcompress($data, $level);		$gzdata	= substr($gzdata, 0, strlen($gzdata) - 4);		$gzdata	.= pack("V",$crc) . pack("V", $size);		*/		$gzdata = gzencode($data, $level);		self::setHeader('Content-Encoding', $encoding);		self::setHeader('X-Content-Encoded-By', 'Joomla! 1.6');		return $gzdata;	}	/**	 * Check, whether client supports compressed data	 *	 * @return  boolean	 *	 * @since   11.1	 * @note    Replaces _clientEncoding method from 11.1	 */	protected static function clientEncoding()	{		if (!isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			return false;		}		$encoding = false;		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip'))		{			$encoding = 'gzip';		}		if (false !== strpos($_SERVER['HTTP_ACCEPT_ENCODING'], 'x-gzip'))		{			$encoding = 'x-gzip';		}		return $encoding;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Abstract class for a renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRenderer{	/**	 * Reference to the JDocument object that instantiated the renderer	 *	 * @var    JDocument	 * @since  11.1	 */	protected $_doc = null;	/**	 * Renderer mime type	 *	 * @var    string	 * @since  11.1	 */	protected $_mime = "text/html";	/**	 * Class constructor	 *	 * @param   JDocument  $doc  A reference to the JDocument object that instantiated the renderer	 *	 * @since   11.1	 */	public function __construct(JDocument $doc)	{		$this->_doc = $doc;	}	/**	 * Renders a script and returns the results as a string	 *	 * @param   string  $name     The name of the element to render	 * @param   array   $params   Array of values	 * @param   string  $content  Override the output of the renderer	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($name, $params = null, $content = null)	{	}	/**	 * Return the content type of the renderer	 *	 * @return  string  The contentType	 *	 * @since   11.1	 */	public function getContentType()	{		return $this->_mime;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_feed * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$rssurl = $params->get('rssurl', '');$rssrtl = $params->get('rssrtl', 0);// Check if feed URL has been setif (empty ($rssurl)){	echo '<div>';	echo JText::_('MOD_FEED_ERR_NO_URL');	echo '</div>';	return;}$feed            = ModFeedHelper::getFeed($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_feed', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Application * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to model a Web Client. * * @property-read  integer  $platform        The detected platform on which the web client runs. * @property-read  boolean  $mobile          True if the web client is a mobile device. * @property-read  integer  $engine          The detected rendering engine used by the web client. * @property-read  integer  $browser         The detected browser used by the web client. * @property-read  string   $browserVersion  The detected browser version used by the web client. * @property-read  array    $languages       The priority order detected accepted languages for the client. * @property-read  array    $encodings       The priority order detected accepted encodings for the client. * @property-read  string   $userAgent       The web client's user agent string. * @property-read  string   $acceptEncoding  The web client's accepted encoding string. * @property-read  string   $acceptLanguage  The web client's accepted languages string. * @property-read  array    $detection       An array of flags determining whether or not a detection routine has been run. * @property-read  boolean  $robot           True if the web client is a robot * * @package     Joomla.Platform * @subpackage  Application * @since       12.1 */class JApplicationWebClient{	const WINDOWS = 1;	const WINDOWS_PHONE = 2;	const WINDOWS_CE = 3;	const IPHONE = 4;	const IPAD = 5;	const IPOD = 6;	const MAC = 7;	const BLACKBERRY = 8;	const ANDROID = 9;	const LINUX = 10;	const TRIDENT = 11;	const WEBKIT = 12;	const GECKO = 13;	const PRESTO = 14;	const KHTML = 15;	const AMAYA = 16;	const IE = 17;	const FIREFOX = 18;	const CHROME = 19;	const SAFARI = 20;	const OPERA = 21;	const ANDROIDTABLET = 22;	/**	 * @var    integer  The detected platform on which the web client runs.	 * @since  12.1	 */	protected $platform;	/**	 * @var    boolean  True if the web client is a mobile device.	 * @since  12.1	 */	protected $mobile = false;	/**	 * @var    integer  The detected rendering engine used by the web client.	 * @since  12.1	 */	protected $engine;	/**	 * @var    integer  The detected browser used by the web client.	 * @since  12.1	 */	protected $browser;	/**	 * @var    string  The detected browser version used by the web client.	 * @since  12.1	 */	protected $browserVersion;	/**	 * @var    array  The priority order detected accepted languages for the client.	 * @since  12.1	 */	protected $languages = array();	/**	 * @var    array  The priority order detected accepted encodings for the client.	 * @since  12.1	 */	protected $encodings = array();	/**	 * @var    string  The web client's user agent string.	 * @since  12.1	 */	protected $userAgent;	/**	 * @var    string  The web client's accepted encoding string.	 * @since  12.1	 */	protected $acceptEncoding;	/**	 * @var    string  The web client's accepted languages string.	 * @since  12.1	 */	protected $acceptLanguage;	/**	 * @var    boolean  True if the web client is a robot.	 * @since  12.3	 */	protected $robot = false;	/**	 * @var    array  An array of flags determining whether or not a detection routine has been run.	 * @since  12.1	 */	protected $detection = array();	/**	 * Class constructor.	 *	 * @param   string  $userAgent       The optional user-agent string to parse.	 * @param   string  $acceptEncoding  The optional client accept encoding string to parse.	 * @param   string  $acceptLanguage  The optional client accept language string to parse.	 *	 * @since   12.1	 */	public function __construct($userAgent = null, $acceptEncoding = null, $acceptLanguage = null)	{		// If no explicit user agent string was given attempt to use the implicit one from server environment.		if (empty($userAgent) && isset($_SERVER['HTTP_USER_AGENT']))		{			$this->userAgent = $_SERVER['HTTP_USER_AGENT'];		}		else		{			$this->userAgent = $userAgent;		}		// If no explicit acceptable encoding string was given attempt to use the implicit one from server environment.		if (empty($acceptEncoding) && isset($_SERVER['HTTP_ACCEPT_ENCODING']))		{			$this->acceptEncoding = $_SERVER['HTTP_ACCEPT_ENCODING'];		}		else		{			$this->acceptEncoding = $acceptEncoding;		}		// If no explicit acceptable languages string was given attempt to use the implicit one from server environment.		if (empty($acceptLanguage) && isset($_SERVER['HTTP_ACCEPT_LANGUAGE']))		{			$this->acceptLanguage = $_SERVER['HTTP_ACCEPT_LANGUAGE'];		}		else		{			$this->acceptLanguage = $acceptLanguage;		}	}	/**	 * Magic method to get an object property's value by name.	 *	 * @param   string  $name  Name of the property for which to return a value.	 *	 * @return  mixed  The requested value if it exists.	 *	 * @since   12.1	 */	public function __get($name)	{		switch ($name)		{			case 'mobile':			case 'platform':				if (empty($this->detection['platform']))				{					$this->detectPlatform($this->userAgent);				}				break;			case 'engine':				if (empty($this->detection['engine']))				{					$this->detectEngine($this->userAgent);				}				break;			case 'browser':			case 'browserVersion':				if (empty($this->detection['browser']))				{					$this->detectBrowser($this->userAgent);				}				break;			case 'languages':				if (empty($this->detection['acceptLanguage']))				{					$this->detectLanguage($this->acceptLanguage);				}				break;			case 'encodings':				if (empty($this->detection['acceptEncoding']))				{					$this->detectEncoding($this->acceptEncoding);				}				break;			case 'robot':				if (empty($this->detection['robot']))				{					$this->detectRobot($this->userAgent);				}				break;		}		// Return the property if it exists.		if (isset($this->$name))		{			return $this->$name;		}	}	/**	 * Detects the client browser and version in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectBrowser($userAgent)	{		// Attempt to detect the browser type.  Obviously we are only worried about major browsers.		if ((stripos($userAgent, 'MSIE') !== false) && (stripos($userAgent, 'Opera') === false))		{			$this->browser = self::IE;			$patternBrowser = 'MSIE';		}		elseif ((stripos($userAgent, 'Firefox') !== false) && (stripos($userAgent, 'like Firefox') === false))		{			$this->browser = self::FIREFOX;			$patternBrowser = 'Firefox';		}		elseif (stripos($userAgent, 'Chrome') !== false)		{			$this->browser = self::CHROME;			$patternBrowser = 'Chrome';		}		elseif (stripos($userAgent, 'Safari') !== false)		{			$this->browser = self::SAFARI;			$patternBrowser = 'Safari';		}		elseif (stripos($userAgent, 'Opera') !== false)		{			$this->browser = self::OPERA;			$patternBrowser = 'Opera';		}		// If we detected a known browser let's attempt to determine the version.		if ($this->browser)		{			// Build the REGEX pattern to match the browser version string within the user agent string.			$pattern = '#(?<browser>Version|' . $patternBrowser . ')[/ ]+(?<version>[0-9.|a-zA-Z.]*)#';			// Attempt to find version strings in the user agent string.			$matches = array();			if (preg_match_all($pattern, $userAgent, $matches))			{				// Do we have both a Version and browser match?				if (count($matches['browser']) == 2)				{					// See whether Version or browser came first, and use the number accordingly.					if (strripos($userAgent, 'Version') < strripos($userAgent, $patternBrowser))					{						$this->browserVersion = $matches['version'][0];					}					else					{						$this->browserVersion = $matches['version'][1];					}				}				elseif (count($matches['browser']) > 2)				{						$key = array_search('Version', $matches['browser']);						if ($key)						{							$this->browserVersion = $matches['version'][$key];						}				}				// We only have a Version or a browser so use what we have.				else				{					$this->browserVersion = $matches['version'][0];				}			}		}		// Mark this detection routine as run.		$this->detection['browser'] = true;	}	/**	 * Method to detect the accepted response encoding by the client.	 *	 * @param   string  $acceptEncoding  The client accept encoding string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEncoding($acceptEncoding)	{		// Parse the accepted encodings.		$this->encodings = array_map('trim', (array) explode(',', $acceptEncoding));		// Mark this detection routine as run.		$this->detection['acceptEncoding'] = true;	}	/**	 * Detects the client rendering engine in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectEngine($userAgent)	{		// Attempt to detect the client engine -- starting with the most popular ... for now.		if (stripos($userAgent, 'MSIE') !== false || stripos($userAgent, 'Trident') !== false)		{			$this->engine = self::TRIDENT;		}		// Evidently blackberry uses WebKit and doesn't necessarily report it.  Bad RIM.		elseif (stripos($userAgent, 'AppleWebKit') !== false || stripos($userAgent, 'blackberry') !== false)		{			$this->engine = self::WEBKIT;		}		// We have to check for like Gecko because some other browsers spoof Gecko.		elseif (stripos($userAgent, 'Gecko') !== false && stripos($userAgent, 'like Gecko') === false)		{			$this->engine = self::GECKO;		}		// Sometimes Opera browsers don't say Presto.		elseif (stripos($userAgent, 'Opera') !== false || stripos($userAgent, 'Presto') !== false)		{			$this->engine = self::PRESTO;		}		// *sigh*		elseif (stripos($userAgent, 'KHTML') !== false)		{			$this->engine = self::KHTML;		}		// Lesser known engine but it finishes off the major list from Wikipedia :-)		elseif (stripos($userAgent, 'Amaya') !== false)		{			$this->engine = self::AMAYA;		}		// Mark this detection routine as run.		$this->detection['engine'] = true;	}	/**	 * Method to detect the accepted languages by the client.	 *	 * @param   mixed  $acceptLanguage  The client accept language string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectLanguage($acceptLanguage)	{		// Parse the accepted encodings.		$this->languages = array_map('trim', (array) explode(',', $acceptLanguage));		// Mark this detection routine as run.		$this->detection['acceptLanguage'] = true;	}	/**	 * Detects the client platform in a user agent string.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.1	 */	protected function detectPlatform($userAgent)	{		// Attempt to detect the client platform.		if (stripos($userAgent, 'Windows') !== false)		{			$this->platform = self::WINDOWS;			// Let's look at the specific mobile options in the Windows space.			if (stripos($userAgent, 'Windows Phone') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_PHONE;			}			elseif (stripos($userAgent, 'Windows CE') !== false)			{				$this->mobile = true;				$this->platform = self::WINDOWS_CE;			}		}		// Interestingly 'iPhone' is present in all iOS devices so far including iPad and iPods.		elseif (stripos($userAgent, 'iPhone') !== false)		{			$this->mobile = true;			$this->platform = self::IPHONE;			// Let's look at the specific mobile options in the iOS space.			if (stripos($userAgent, 'iPad') !== false)			{				$this->platform = self::IPAD;			}			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->platform = self::IPOD;			}		}			// In case where iPhone is not mentioed in iPad user agent string			elseif (stripos($userAgent, 'iPad') !== false)			{				$this->mobile = true;				$this->platform = self::IPAD;			}			// In case where iPhone is not mentioed in iPod user agent string			elseif (stripos($userAgent, 'iPod') !== false)			{				$this->mobile = true;				$this->platform = self::IPOD;			}		// This has to come after the iPhone check because mac strings are also present in iOS devices.		elseif (preg_match('/macintosh|mac os x/i', $userAgent))		{			$this->platform = self::MAC;		}		elseif (stripos($userAgent, 'Blackberry') !== false)		{			$this->mobile = true;			$this->platform = self::BLACKBERRY;		}		elseif (stripos($userAgent, 'Android') !== false)		{			$this->mobile = true;			$this->platform = self::ANDROID;			/**			 * Attempt to distinguish between Android phones and tablets			 * There is no totally foolproof method but certain rules almost always hold			 *   Android 3.x is only used for tablets			 *   Some devices and browsers encourage users to change their UA string to include Tablet.			 *   Google encourages manufacturers to exclude the string Mobile from tablet device UA strings.			 *   In some modes Kindle Android devices include the string Mobile but they include the string Silk.			 */			if (stripos($userAgent, 'Android 3') !== false || stripos($userAgent, 'Tablet') !== false				|| stripos($userAgent, 'Mobile') === false || stripos($userAgent, 'Silk') !== false )			{				$this->platform = self::ANDROIDTABLET;			}		}		elseif (stripos($userAgent, 'Linux') !== false)		{			$this->platform = self::LINUX;		}		// Mark this detection routine as run.		$this->detection['platform'] = true;	}	/**	 * Determines if the browser is a robot or not.	 *	 * @param   string  $userAgent  The user-agent string to parse.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function detectRobot($userAgent)	{		if (preg_match('/http|bot|robot|spider|crawler|curl|^$/i', $userAgent))		{			$this->robot = true;		}		else		{			$this->robot = false;		}		$this->detection['robot'] = true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Library Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */class JInstallerManifestLibrary extends JInstallerManifest{	/**	 * File system name of the library	 *	 * @var    string	 * @since  3.1	 */	public $libraryname = '';	/**	 * Creation Date of the library	 *	 * @var    string	 * @since  3.1	 */	public $creationDate = '';	/**	 * Copyright notice for the library	 *	 * @var    string	 * @since  3.1	 */	public $copyright = '';	/**	 * License for the library	 *	 * @var    string	 * @since  3.1	 */	public $license = '';	/**	 * Author for the library	 *	 * @var    string	 * @since  3.1	 */	public $author = '';	/**	 * Author email for the library	 *	 * @var    string	 * @since  3.1	 */	public $authoremail = '';	/**	 * Author URL for the library	 *	 * @var    string	 * @since  3.1	 */	public $authorurl = '';	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	protected function loadManifestFromData(SimpleXMLElement $xml)	{		$this->name         = (string) $xml->name;		$this->libraryname  = (string) $xml->libraryname;		$this->version      = (string) $xml->version;		$this->description  = (string) $xml->description;		$this->creationdate = (string) $xml->creationDate;		$this->author       = (string) $xml->author;		$this->authoremail  = (string) $xml->authorEmail;		$this->authorurl    = (string) $xml->authorUrl;		$this->packager     = (string) $xml->packager;		$this->packagerurl  = (string) $xml->packagerurl;		$this->update       = (string) $xml->update;		if (isset($xml->files) && isset($xml->files->file) && count($xml->files->file))		{			foreach ($xml->files->file as $file)			{				$this->filelist[] = (string) $file;			}		}	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_custom * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if ($params->def('prepare_content', 1)){	JPluginHelper::importPlugin('content');	$module->content = JHtml::_('content.prepare', $module->content, '', 'mod_custom.content');}$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_custom', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_finder')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Finder');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Simple encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherSimple implements JCryptCipher{	/**	 * Method to decrypt a data string.	 *	 * @param   string     $data  The encrypted string to decrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for decryption.	 *	 * @return  string  The decrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function decrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$decrypted = '';		$tmp = $key->public;		// Convert the HEX input into an array of integers and get the number of characters.		$chars = $this->_hexToIntArray($data);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$decrypted .= chr($chars[$i] ^ ord($tmp[$i]));		}		return $decrypted;	}	/**	 * Method to encrypt a data string.	 *	 * @param   string     $data  The data string to encrypt.	 * @param   JCryptKey  $key   The key[/pair] object to use for encryption.	 *	 * @return  string  The encrypted data string.	 *	 * @since   12.1	 * @throws  InvalidArgumentException	 */	public function encrypt($data, JCryptKey $key)	{		// Validate key.		if ($key->type != 'simple')		{			throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.');		}		$encrypted = '';		$tmp = $key->private;		// Split up the input into a character array and get the number of characters.		$chars = preg_split('//', $data, -1, PREG_SPLIT_NO_EMPTY);		$charCount = count($chars);		// Repeat the key as many times as necessary to ensure that the key is at least as long as the input.		for ($i = 0; $i < $charCount; $i = strlen($tmp))		{			$tmp = $tmp . $tmp;		}		// Get the XOR values between the ASCII values of the input and key characters for all input offsets.		for ($i = 0; $i < $charCount; $i++)		{			$encrypted .= $this->_intToHex(ord($tmp[$i]) ^ ord($chars[$i]));		}		return $encrypted;	}	/**	 * Method to generate a new encryption key[/pair] object.	 *	 * @param   array  $options  Key generation options.	 *	 * @return  JCryptKey	 *	 * @since   12.1	 */	public function generateKey(array $options = array())	{		// Create the new encryption key[/pair] object.		$key = new JCryptKey('simple');		// Just a random key of a given length.		$key->private = $this->_getRandomKey();		$key->public  = $key->private;		return $key;	}	/**	 * Method to generate a random key of a given length.	 *	 * @param   integer  $length  The length of the key to generate.	 *	 * @return  string	 *	 * @since   12.1	 */	private function _getRandomKey($length = 256)	{		$key = '';		$salt = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';		$saltLength = strlen($salt);		// Build the random key.		for ($i = 0; $i < $length; $i++)		{			$key .= $salt[mt_rand(0, $saltLength - 1)];		}		return $key;	}	/**	 * Convert hex to an integer	 *	 * @param   string   $s  The hex string to convert.	 * @param   integer  $i  The offset?	 *	 * @return  integer	 *	 * @since   11.1	 */	private function _hexToInt($s, $i)	{		$j = (int) $i * 2;		$k = 0;		$s1 = (string) $s;		// Get the character at position $j.		$c = substr($s1, $j, 1);		// Get the character at position $j + 1.		$c1 = substr($s1, $j + 1, 1);		switch ($c)		{			case 'A':				$k += 160;				break;			case 'B':				$k += 176;				break;			case 'C':				$k += 192;				break;			case 'D':				$k += 208;				break;			case 'E':				$k += 224;				break;			case 'F':				$k += 240;				break;			case ' ':				$k += 0;				break;			default:				(int) $k = $k + (16 * (int) $c);				break;		}		switch ($c1)		{			case 'A':				$k += 10;				break;			case 'B':				$k += 11;				break;			case 'C':				$k += 12;				break;			case 'D':				$k += 13;				break;			case 'E':				$k += 14;				break;			case 'F':				$k += 15;				break;			case ' ':				$k += 0;				break;			default:				$k += (int) $c1;				break;		}		return $k;	}	/**	 * Convert hex to an array of integers	 *	 * @param   string  $hex  The hex string to convert to an integer array.	 *	 * @return  array  An array of integers.	 *	 * @since   11.1	 */	private function _hexToIntArray($hex)	{		$array = array();		$j = (int) strlen($hex) / 2;		for ($i = 0; $i < $j; $i++)		{			$array[$i] = (int) $this->_hexToInt($hex, $i);		}		return $array;	}	/**	 * Convert an integer to a hexadecimal string.	 *	 * @param   integer  $i  An integer value to convert to a hex string.	 *	 * @return  string	 *	 * @since   11.1	 */	private function _intToHex($i)	{		// Sanitize the input.		$i = (int) $i;		// Get the first character of the hexadecimal string if there is one.		$j = (int) ($i / 16);		if ($j === 0)		{			$s = ' ';		}		else		{			$s = strtoupper(dechex($j));		}		// Get the second character of the hexadecimal string.		$k = $i - $j * 16;		$s = $s . strtoupper(dechex($k));		return $s;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Component Controller * * @package     Joomla.Administrator * @subpackage  com_content * @since       1.5 */class ContentController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'articles';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 *	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		$view   = $this->input->get('view', 'articles');		$layout = $this->input->get('layout', 'articles');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'article' && $layout == 'edit' && !$this->checkEditId('com_content.edit.article', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_content&view=articles', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * Verifies that class members have scope modifiers. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: MethodScopeSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if(class_exists('PHP_CodeSniffer_Standards_AbstractScopeSniff', true) === false){    throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractScopeSniff not found');}/** * Verifies that class members have scope modifiers. * * Example: * class Foo * { *     <b class="good">public function foo()</b> *     { *     } * *     <b class="bad">function foo()</b> *     { *     } * } * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_Classes_MethodScopeSniff extends PHP_CodeSniffer_Standards_AbstractScopeSniff{    /**     * Constructs a Squiz_Sniffs_Scope_MethodScopeSniff.     */    public function __construct()    {        parent::__construct(array(T_CLASS, T_INTERFACE), array(T_FUNCTION));    }//function    /**     * Processes the function tokens within the class.     *     * @param PHP_CodeSniffer_File $phpcsFile The file where this token was found.     * @param integer                  $stackPtr  The position where the token was found.     * @param integer                  $currScope The current scope opener token.     *     * @return void     */    protected function processTokenWithinScope(PHP_CodeSniffer_File $phpcsFile, $stackPtr, $currScope)    {        $tokens = $phpcsFile->getTokens();        $methodName = $phpcsFile->getDeclarationName($stackPtr);        if($methodName === null)        {            // Ignore closures.            return;        }        $modifier = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$scopeModifiers, $stackPtr);        if(($modifier === false) || ($tokens[$modifier]['line'] !== $tokens[$stackPtr]['line']))        {            $error = sprintf('No scope modifier specified for function "%s"'            , $methodName);            $phpcsFile->addWarning($error, $stackPtr, 'Missing');        }    }//function}//class
<?php/** * @package     Joomla.Site * @subpackage  mod_random_image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="random-image<?php echo $moduleclass_sfx ?>"><?php if ($link) : ?><a href="<?php echo $link; ?>"><?php endif; ?>	<?php echo JHtml::_('image', $image->folder.'/'.$image->name, $image->name, array('width' => $image->width, 'height' => $image->height)); ?><?php if ($link) : ?></a><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	?>	<div class="tab-pane" id="params-<?php echo $name;?>">	<?php	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="alert alert-info">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label"><?php echo $field->label; ?></div>					<div class="controls"><?php echo $field->input; ?></div>				</div>			<?php endforeach; ?>	</div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fields = $this->form->getFieldset('item_associations');foreach ($fields as $field) :?><div class="control-group">	<div class="control-label">		<?php echo $field->label ?>	</div>	<div class="controls">		<?php echo $field->input; ?>	</div></div><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_PLUGINS_'.$name.'_FIELDSET_LABEL';	echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($label) ?></legend>		<?php $hidden_fields = ''; ?>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<?php if (!$field->hidden) : ?>			<li>				<?php echo $field->label; ?>				<?php echo $field->input; ?>			</li>			<?php else : $hidden_fields .= $field->input; ?>			<?php endif; ?>			<?php endforeach; ?>		</ul>		<?php echo $hidden_fields; ?>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Base * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Tree Class. * * @package     Joomla.Legacy * @subpackage  Base * @since       11.1 * @deprecated  12.3 * @codeCoverageIgnore */class JTree extends JObject{	/**	 * Root node	 *	 * @var    object	 * @since  11.1	 */	protected $_root = null;	/**	 * Current working node	 *	 * @var    object	 * @since  11.1	 */	protected $_current = null;	/**	 * Constructor	 *	 * @since   11.1	 */	public function __construct()	{		JLog::add('JTree::__construct() is deprecated.', JLog::WARNING, 'deprecated');		$this->_root = new JNode('ROOT');		$this->_current = & $this->_root;	}	/**	 * Method to add a child	 *	 * @param   array    &$node       The node to process	 * @param   boolean  $setCurrent  True to set as current working node	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function addChild(&$node, $setCurrent = false)	{		JLog::add('JTree::addChild() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current->addChild($node);		if ($setCurrent)		{			$this->_current = &$node;		}	}	/**	 * Method to get the parent	 *	 * @return  void	 *	 * @since   11.1	 */	public function getParent()	{		JLog::add('JTree::getParent() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current = &$this->_current->getParent();	}	/**	 * Method to get the parent	 *	 * @return  void	 *	 * @since   11.1	 */	public function reset()	{		JLog::add('JTree::reset() is deprecated.', JLog::WARNING, 'deprecated');		$this->_current = &$this->_root;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_ADMINISTRATOR . '/components/com_templates/helpers/templates.php';JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');$clientId       = $this->item->client_id;$state          = 1;$templates      = array_keys(ModulesHelper::getTemplates($clientId, $state));$templateGroups = array();// Add an empty value to be able to deselect a module position$option = ModulesHelper::createOption();$templateGroups[''] = ModulesHelper::createOptionGroup('', array($option));// Add positions from templates$isTemplatePosition = false;foreach ($templates as $template){	$options = array();	$positions = TemplatesHelper::getPositions($clientId, $template);	foreach ($positions as $position)	{		$text = ModulesHelper::getTranslatedModulePosition($clientId, $template, $position) . ' [' . $position . ']';		$options[] = ModulesHelper::createOption($position, $text);		if (!$isTemplatePosition && $this->item->position === $position)		{			$isTemplatePosition = true;		}	}	$templateGroups[$template] = ModulesHelper::createOptionGroup(ucfirst($template), $options);}// Add custom position to options$customGroupText = JText::_('COM_MODULES_CUSTOM_POSITION');$editPositions = true;$customPositions = ModulesHelper::getPositions($clientId, $editPositions);$templateGroups[$customGroupText] = ModulesHelper::createOptionGroup($customGroupText, $customPositions);// Build field$attr = array(	'id'          => 'jform_position',	'list.select' => $this->item->position,	'list.attr'   => 'class="chzn-custom-value input-xlarge" '		. 'data-custom_group_text="' . $customGroupText . '" '		. 'data-no_results_text="' . JText::_('COM_MODULES_ADD_CUSTOM_POSITION') . '" '		. 'data-placeholder="' . JText::_('COM_MODULES_TYPE_OR_SELECT_POSITION') . '" ');echo JHtml::_('select.groupedlist', $templateGroups, 'jform[position]', $attr);
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Indexer model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelIndexer extends JModelLegacy{}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to stristr* Find first occurrence of a string using case insensitive comparison* Note: requires utf8_strtolower* @param string* @param string* @return int* @see http://www.php.net/strcasecmp* @see utf8_strtolower* @package utf8* @subpackage strings*/function utf8_stristr($str, $search) {    if ( strlen($search) == 0 ) {        return $str;    }    $lstr = utf8_strtolower($str);    $lsearch = utf8_strtolower($search);    //JOOMLA SPECIFIC FIX - BEGIN    preg_match('/^(.*)'.preg_quote($lsearch, '/').'/Us',$lstr, $matches);    //JOOMLA SPECIFIC FIX - END    if ( count($matches) == 2 ) {        return substr($str, strlen($matches[1]));    }    return FALSE;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Client controller class. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersControllerClient extends JControllerForm{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_BANNERS_CLIENT';}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.1 */class JDatabaseQuerySqlazure extends JDatabaseQuerySqlsrv{	/**	 * The character(s) used to quote SQL statement names such as table names or field names,	 * etc.  The child classes should define this as necessary.  If a single character string the	 * same character is used for both sides of the quoted name, else the first character will be	 * used for the opening quote and the second for the closing quote.	 *	 * @var    string	 *	 * @since  11.1	 */	protected $name_quotes = '';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Newsfeeds master display controller. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/newsfeeds.php';		$view   = $this->input->get('view', 'newsfeeds');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'newsfeed' && $layout == 'edit' && !$this->checkEditId('com_newsfeeds.edit.newsfeed', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTTP * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * HTTP transport class for using cURL. * * @package     Joomla.Platform * @subpackage  HTTP * @since       11.3 */class JHttpTransportCurl implements JHttpTransport{	/**	 * @var    JRegistry  The client options.	 * @since  11.3	 */	protected $options;	/**	 * Constructor. CURLOPT_FOLLOWLOCATION must be disabled when open_basedir or safe_mode are enabled.	 *	 * @param   JRegistry  $options  Client options object.	 *	 * @see     http://www.php.net/manual/en/function.curl-setopt.php	 * @since   11.3	 * @throws  RuntimeException	 */	public function __construct(JRegistry $options)	{		if (!function_exists('curl_init') || !is_callable('curl_init'))		{			throw new RuntimeException('Cannot use a cURL transport when curl_init() is not available.');		}		$this->options = $options;	}	/**	 * Send a request to the server and return a JHttpResponse object with the response.	 *	 * @param   string   $method     The HTTP method for sending the request.	 * @param   JUri     $uri        The URI to the resource to request.	 * @param   mixed    $data       Either an associative array or a string to be sent with the request.	 * @param   array    $headers    An array of request headers to send with the request.	 * @param   integer  $timeout    Read timeout in seconds.	 * @param   string   $userAgent  The optional user agent string to send with the request.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 */	public function request($method, JUri $uri, $data = null, array $headers = null, $timeout = null, $userAgent = null)	{		// Setup the cURL handle.		$ch = curl_init();		// Set the request method.		$options[CURLOPT_CUSTOMREQUEST] = strtoupper($method);		// Don't wait for body when $method is HEAD		$options[CURLOPT_NOBODY] = ($method === 'HEAD');		// Initialize the certificate store		$options[CURLOPT_CAINFO] = $this->options->get('curl.certpath', __DIR__ . '/cacert.pem');		// If data exists let's encode it and make sure our Content-type header is set.		if (isset($data))		{			// If the data is a scalar value simply add it to the cURL post fields.			if (is_scalar($data) || (isset($headers['Content-Type']) && strpos($headers['Content-Type'], 'multipart/form-data') === 0))			{				$options[CURLOPT_POSTFIELDS] = $data;			}			// Otherwise we need to encode the value first.			else			{				$options[CURLOPT_POSTFIELDS] = http_build_query($data);			}			if (!isset($headers['Content-Type']))			{				$headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';			}			// Add the relevant headers.			if (is_scalar($options[CURLOPT_POSTFIELDS]))			{				$headers['Content-Length'] = strlen($options[CURLOPT_POSTFIELDS]);			}		}		// Build the headers string for the request.		$headerArray = array();		if (isset($headers))		{			foreach ($headers as $key => $value)			{				$headerArray[] = $key . ': ' . $value;			}			// Add the headers string into the stream context options array.			$options[CURLOPT_HTTPHEADER] = $headerArray;		}		// If an explicit timeout is given user it.		if (isset($timeout))		{			$options[CURLOPT_TIMEOUT] = (int) $timeout;			$options[CURLOPT_CONNECTTIMEOUT] = (int) $timeout;		}		// If an explicit user agent is given use it.		if (isset($userAgent))		{			$headers[CURLOPT_USERAGENT] = $userAgent;		}		// Set the request URL.		$options[CURLOPT_URL] = (string) $uri;		// We want our headers. :-)		$options[CURLOPT_HEADER] = true;		// Return it... echoing it would be tacky.		$options[CURLOPT_RETURNTRANSFER] = true;		// Override the Expect header to prevent cURL from confusing itself in its own stupidity.		// Link: http://the-stickman.com/web-development/php-and-curl-disabling-100-continue-header/		$options[CURLOPT_HTTPHEADER][] = 'Expect:';		// Follow redirects.		$options[CURLOPT_FOLLOWLOCATION] = (bool) $this->options->get('follow_location', true);		// Set the cURL options.		curl_setopt_array($ch, $options);		// Execute the request and close the connection.		$content = curl_exec($ch);		// Get the request information.		$info = curl_getinfo($ch);		// Close the connection.		curl_close($ch);		return $this->getResponse($content, $info);	}	/**	 * Method to get a response object from a server response.	 *	 * @param   string  $content  The complete server response, including headers.	 * @param   array   $info     The cURL request information.	 *	 * @return  JHttpResponse	 *	 * @since   11.3	 * @throws  UnexpectedValueException	 */	protected function getResponse($content, $info)	{		// Create the response object.		$return = new JHttpResponse;		// Check if the content is actually a string.		if (!is_string($content))		{			throw new UnexpectedValueException('No HTTP response received.');		}		// Get the number of redirects that occurred.		$redirects = isset($info['redirect_count']) ? $info['redirect_count'] : 0;		/*		 * Split the response into headers and body. If cURL encountered redirects, the headers for the redirected requests will		 * also be included. So we split the response into header + body + the number of redirects and only use the last two		 * sections which should be the last set of headers and the actual body.		 */		$response = explode("\r\n\r\n", $content, 2 + $redirects);		// Set the body for the response.		$return->body = array_pop($response);		// Get the last set of response headers as an array.		$headers = explode("\r\n", array_pop($response));		// Get the response code from the first offset of the response headers.		preg_match('/[0-9]{3}/', array_shift($headers), $matches);		$code = count($matches) ? $matches[0] : null;		if (is_numeric($code))		{			$return->code = (int) $code;		}		// No valid response code was detected.		else		{			throw new UnexpectedValueException('No HTTP response code found.');		}		// Add the response headers to the response object.		foreach ($headers as $header)		{			$pos = strpos($header, ':');			$return->headers[trim(substr($header, 0, $pos))] = trim(substr($header, ($pos + 1)));		}		return $return;	}	/**	 * Method to check if HTTP transport cURL is available for use	 *	 * @return boolean true if available, else false	 *	 * @since   12.1	 */	static public function isSupported()	{		return function_exists('curl_version') && curl_version();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! update selection list helper. * * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * @since       2.5.4 */class JoomlaupdateHelperSelect{	/**	 * Returns an HTML select element with the different extraction modes	 *	 * @param   string  $default  The default value of the select element	 *	 * @return  string	 *	 * @since   2.5.4	 */	public static function getMethods($default = 'direct')	{		$options = array();		$options[] = JHtml::_('select.option', 'direct', JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD_DIRECT'));		$options[] = JHtml::_('select.option', 'ftp', JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD_FTP'));		return JHtml::_('select.genericlist', $options, 'method', '', 'value', 'text', $default, 'extraction_method');	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_archive * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$params->def('count', 10);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));$list = ModArchiveHelper::getList($params);require JModuleHelper::getLayoutPath('mod_articles_archive', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Component Category Tree * * @static * @package     Joomla.Site * @subpackage  com_weblinks * @since       1.6 */class WeblinksCategories extends JCategories{	public function __construct($options = array())	{		$options['table'] = '#__weblinks';		$options['extension'] = 'com_weblinks';		parent::__construct($options);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * WINCACHE session storage handler for PHP * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageWincache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('Wincache Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Register the functions of this class with PHP's session handler	 *	 * @return  void	 *	 * @since   12.2	 */	public function register()	{		ini_set('session.save_handler', 'wincache');	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('wincache') && function_exists('wincache_ucache_get') && !strcmp(ini_get('wincache.ucenabled'), "1"));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Utilities * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Generic Buffer stream handler * * This class provides a generic buffer stream.  It can be used to store/retrieve/manipulate * string buffers with the standard PHP filesystem I/O methods. * * @package     Joomla.Platform * @subpackage  Utilities * @since       11.1 */class JBuffer{	/**	 * Stream position	 *	 * @var    integer	 * @since  11.1	 */	public $position = 0;	/**	 * Buffer name	 *	 * @var    string	 * @since  11.1	 */	public $name = null;	/**	 * Buffer hash	 *	 * @var    array	 * @since  12.1	 */	public $buffers = array();	/**	 * Function to open file or url	 *	 * @param   string   $path          The URL that was passed	 * @param   string   $mode          Mode used to open the file @see fopen	 * @param   integer  $options       Flags used by the API, may be STREAM_USE_PATH and	 *                                  STREAM_REPORT_ERRORS	 * @param   string   &$opened_path  Full path of the resource. Used with STREAN_USE_PATH option	 *	 * @return  boolean	 *	 * @since   11.1	 * @see     streamWrapper::stream_open	 */	public function stream_open($path, $mode, $options, &$opened_path)	{		$url = parse_url($path);		$this->name = $url['host'];		$this->buffers[$this->name] = null;		$this->position = 0;		return true;	}	/**	 * Read stream	 *	 * @param   integer  $count  How many bytes of data from the current position should be returned.	 *	 * @return  mixed    The data from the stream up to the specified number of bytes (all data if	 *                   the total number of bytes in the stream is less than $count. Null if	 *                   the stream is empty.	 *	 * @see     streamWrapper::stream_read	 * @since   11.1	 */	public function stream_read($count)	{		$ret = substr($this->buffers[$this->name], $this->position, $count);		$this->position += strlen($ret);		return $ret;	}	/**	 * Write stream	 *	 * @param   string  $data  The data to write to the stream.	 *	 * @return  integer	 *	 * @see     streamWrapper::stream_write	 * @since   11.1	 */	public function stream_write($data)	{		$left = substr($this->buffers[$this->name], 0, $this->position);		$right = substr($this->buffers[$this->name], $this->position + strlen($data));		$this->buffers[$this->name] = $left . $data . $right;		$this->position += strlen($data);		return strlen($data);	}	/**	 * Function to get the current position of the stream	 *	 * @return  integer	 *	 * @see     streamWrapper::stream_tell	 * @since   11.1	 */	public function stream_tell()	{		return $this->position;	}	/**	 * Function to test for end of file pointer	 *	 * @return  boolean  True if the pointer is at the end of the stream	 *	 * @see     streamWrapper::stream_eof	 * @since   11.1	 */	public function stream_eof()	{		return $this->position >= strlen($this->buffers[$this->name]);	}	/**	 * The read write position updates in response to $offset and $whence	 *	 * @param   integer  $offset  The offset in bytes	 * @param   integer  $whence  Position the offset is added to	 *                            Options are SEEK_SET, SEEK_CUR, and SEEK_END	 *	 * @return  boolean  True if updated	 *	 * @see     streamWrapper::stream_seek	 * @since   11.1	 */	public function stream_seek($offset, $whence)	{		switch ($whence)		{			case SEEK_SET:				if ($offset < strlen($this->buffers[$this->name]) && $offset >= 0)				{					$this->position = $offset;					return true;				}				else				{					return false;				}				break;			case SEEK_CUR:				if ($offset >= 0)				{					$this->position += $offset;					return true;				}				else				{					return false;				}				break;			case SEEK_END:				if (strlen($this->buffers[$this->name]) + $offset >= 0)				{					$this->position = strlen($this->buffers[$this->name]) + $offset;					return true;				}				else				{					return false;				}				break;			default:				return false;		}	}}// Register the streamstream_wrapper_register('buffer', 'JBuffer');
<?php/** * @package     Joomla.Plugin * @subpackage  System.log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Logging Plugin * * @package     Joomla.Plugin * @subpackage  System.log * @since       1.5 */class PlgSystemLog extends JPlugin{	public function onUserLoginFailure($response)	{		$errorlog = array();		switch($response['status'])		{			case JAuthentication::STATUS_SUCCESS:				$errorlog['status']  = $response['type'] . " CANCELED: ";				$errorlog['comment'] = $response['error_message'];				break;			case JAuthentication::STATUS_FAILURE:				$errorlog['status']  = $response['type'] . " FAILURE: ";				if ($this->params->get('log_username', 0))				{					$errorlog['comment'] = $response['error_message'] . ' ("' . $response['username'] . '")';				}				else				{					$errorlog['comment'] = $response['error_message'];				}				break;			default:				$errorlog['status']  = $response['type'] . " UNKNOWN ERROR: ";				$errorlog['comment'] = $response['error_message'];				break;		}		JLog::addLogger(array(), JLog::INFO);		JLog::add($errorlog['comment'], JLog::INFO, $errorlog['status']);	}}
<?php/** * @package     Joomla.Installation * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;jimport('joomla.filesystem.file');jimport('joomla.filesystem.path');/** * FTP configuration model for the Joomla Core Installer. * * @package     Joomla.Installation * @subpackage  Model * @since       3.1 */class InstallationModelFtp extends JModelBase{	/**	 * Find the ftp filesystem root for a given user/pass pair.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function detectFtpRoot($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		// Use binary transfer mode to be able to compare files.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'), array('type' => FTP_BINARY));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage($options->get('ftp_host') . ':' . $options->get('ftp_port') . ' ' . JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Get the current working directory from the FTP server.		$cwd = $ftp->pwd();		if ($cwd === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		$cwd = rtrim($cwd, '/');		// Get a list of folders in the current working directory.		$cwdFolders = $ftp->listDetails(null, 'folders');		if ($cwdFolders === false || count($cwdFolders) == 0)		{			$app->enqueueMessage(JText::_('INSTL_FTP_NODIRECTORYLISTING'), 'error');			return false;		}		// Get just the folder names from the list of folder data.		for ($i = 0, $n = count($cwdFolders); $i < $n; $i++)		{			$cwdFolders[$i] = $cwdFolders[$i]['name'];		}		// Check to see if Joomla is installed at the FTP current working directory.		$paths = array();		$known = array('administrator', 'components', 'installation', 'language', 'libraries', 'plugins');		if (count(array_diff($known, $cwdFolders)) == 0)		{			$paths[] = $cwd . '/';		}		// Search through the segments of JPATH_SITE looking for root possibilities.		$parts = explode(DIRECTORY_SEPARATOR, JPATH_SITE);		$tmp = '';		for ($i = count($parts) - 1; $i >= 0; $i--)		{			$tmp = '/' . $parts[$i] . $tmp;			if (in_array($parts[$i], $cwdFolders))			{				$paths[] = $cwd . $tmp;			}		}		// Check all possible paths for the real Joomla installation by comparing version files.		$rootPath = false;		$checkValue = file_get_contents(JPATH_LIBRARIES . '/cms/version/version.php');		foreach ($paths as $tmp)		{			$filePath = rtrim($tmp, '/') . '/libraries/cms/version/version.php';			$buffer = null;			@ $ftp->read($filePath, $buffer);			if ($buffer == $checkValue)			{				$rootPath = $tmp;				break;			}		}		// Close the FTP connection.		$ftp->quit();		// Return an error if no root path was found.		if ($rootPath === false)		{			$app->enqueueMessage(JText::_('INSTL_FTP_UNABLE_DETECT_ROOT_FOLDER'), 'error');			return false;		}		return $rootPath;	}	/**	 * Verify the FTP settings as being functional and correct.	 *	 * @param   array  $options  Configuration options.	 *	 * @return  mixed  FTP root for given FTP user, or boolean false if not found.	 *	 * @since   3.1	 */	public function verifyFtpSettings($options)	{		// Get the application		/* @var InstallationApplicationWeb $app */		$app = JFactory::getApplication();		// Get the options as a object for easier handling.		$options = JArrayHelper::toObject($options);		// Connect and login to the FTP server.		@$ftp = JClientFtp::getInstance($options->get('ftp_host'), $options->get('ftp_port'));		// Check to make sure FTP is connected and authenticated.		if (!$ftp->isConnected())		{			$app->enqueueMessage(JText::_('INSTL_FTP_NOCONNECT'), 'error');			return false;		}		if (!$ftp->login($options->get('ftp_user'), $options->get('ftp_pass')))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLOGIN'), 'error');			return false;		}		// Since the root path will be trimmed when it gets saved to configuration.php,		// we want to test with the same value as well.		$root = rtrim($options->get('ftp_root'), '/');		// Verify PWD function		if ($ftp->pwd() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOPWD'), 'error');			return false;		}		// Verify root path exists		if (!$ftp->chdir($root))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOROOT'), 'error');			return false;		}		// Verify NLST function		if (($rootList = $ftp->listNames()) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NONLST'), 'error');			return false;		}		// Verify LIST function		if ($ftp->listDetails() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOLIST'), 'error');			return false;		}		// Verify SYST function		if ($ftp->syst() === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSYST'), 'error');			return false;		}		// Verify valid root path, part one		$checkList = array('robots.txt', 'index.php');		if (count(array_diff($checkList, $rootList)))		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify RETR function		$buffer = null;		if ($ftp->read($root . '/libraries/cms/version/version.php', $buffer) === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORETR'), 'error');			return false;		}		// Verify valid root path, part two		$checkValue = file_get_contents(JPATH_ROOT . '/libraries/cms/version/version.php');		if ($buffer !== $checkValue)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_INVALIDROOT'), 'error');			return false;		}		// Verify STOR function		if ($ftp->create($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOSTOR'), 'error');			return false;		}		// Verify DELE function		if ($ftp->delete($root . '/ftp_testfile') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NODELE'), 'error');			return false;		}		// Verify MKD function		if ($ftp->mkdir($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NOMKD'), 'error');			return false;		}		// Verify RMD function		if ($ftp->delete($root . '/ftp_testdir') === false)		{			$ftp->quit();			$app->enqueueMessage(JText::_('INSTL_FTP_NORMD'), 'error');			return false;		}		$ftp->quit();		return true;	}}
<?php/** * Joomla_Sniffs_ControlStructures_InlineControlStructureSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: InlineControlStructureSniff.php 258843 2008-05-01 00:49:32Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Joomla_Sniffs_ControlStructures_InlineControlStructureSniff. * * Verifies that inline control statements are not present. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_InlineControlStructureSniff extends Generic_Sniffs_ControlStructures_InlineControlStructureSniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',                                  );    /**     * If true, an error will be thrown; otherwise a warning.     *     * @var bool     */    public $error = false;    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(                T_IF,                T_ELSE,                T_FOREACH,                T_WHILE,                T_DO,                T_SWITCH,                T_FOR,               );    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        if (isset($tokens[$stackPtr]['scope_opener']) === false) {            // Ignore the ELSE in ELSE IF. We'll process the IF part later.            if (($tokens[$stackPtr]['code'] === T_ELSE) && ($tokens[($stackPtr + 2)]['code'] === T_IF)) {                return;            }            if ($tokens[$stackPtr]['code'] === T_WHILE) {                // This could be from a DO WHILE, which doesn't have an opening brace.                $lastContent = $phpcsFile->findPrevious(T_WHITESPACE, ($stackPtr - 1), null, true);                if ($tokens[$lastContent]['code'] === T_CLOSE_CURLY_BRACKET) {                    $brace = $tokens[$lastContent];                    if (isset($brace['scope_condition']) === true) {                        $condition = $tokens[$brace['scope_condition']];                        if ($condition['code'] === T_DO) {                            return;                        }                    }                }            }            // This is a control structure without an opening brace,            // so it is an inline statement.            if ($this->error === true) {                $phpcsFile->addError('Inline control structures are not allowed', $stackPtr, 'NotAllowed');            } else {                $phpcsFile->addWarning('Inline control structures are discouraged', $stackPtr, 'Discouraged');            }            return;        }//end if    }//end process()}//end class?>
<?php/*** @version $Id$* Tools for validing a UTF-8 string is well formed.* The Original Code is Mozilla Communicator client code.* The Initial Developer of the Original Code is* Netscape Communications Corporation.* Portions created by the Initial Developer are Copyright (C) 1998* the Initial Developer. All Rights Reserved.* Ported to PHP by Henri Sivonen (http://hsivonen.iki.fi)* Slight modifications to fit with phputf8 library by Harry Fuecks (hfuecks gmail com)* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUTF8ToUnicode.cpp* @see http://lxr.mozilla.org/seamonkey/source/intl/uconv/src/nsUnicodeToUTF8.cpp* @see http://hsivonen.iki.fi/php-utf8/* @package utf8* @subpackage validation*///--------------------------------------------------------------------/*** Tests a string as to whether it's valid UTF-8 and supported by the* Unicode standard* Note: this function has been modified to simple return true or false* @author <hsivonen@iki.fi>* @param string UTF-8 encoded string* @return boolean true if valid* @see http://hsivonen.iki.fi/php-utf8/* @see utf8_compliant* @package utf8* @subpackage validation*/function utf8_is_valid($str) {    $mState = 0;     // cached expected number of octets after the current octet                     // until the beginning of the next UTF8 character sequence    $mUcs4  = 0;     // cached Unicode character    $mBytes = 1;     // cached expected number of octets in the current sequence    $len = strlen($str);    for($i = 0; $i < $len; $i++) {        $in = ord($str{$i});        if ( $mState == 0) {            // When mState is zero we expect either a US-ASCII character or a            // multi-octet sequence.            if (0 == (0x80 & ($in))) {                // US-ASCII, pass straight through.                $mBytes = 1;            } else if (0xC0 == (0xE0 & ($in))) {                // First octet of 2 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x1F) << 6;                $mState = 1;                $mBytes = 2;            } else if (0xE0 == (0xF0 & ($in))) {                // First octet of 3 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x0F) << 12;                $mState = 2;                $mBytes = 3;            } else if (0xF0 == (0xF8 & ($in))) {                // First octet of 4 octet sequence                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x07) << 18;                $mState = 3;                $mBytes = 4;            } else if (0xF8 == (0xFC & ($in))) {                /* First octet of 5 octet sequence.                *                * This is illegal because the encoded codepoint must be either                * (a) not the shortest form or                * (b) outside the Unicode range of 0-0x10FFFF.                * Rather than trying to resynchronize, we will carry on until the end                * of the sequence and let the later error handling code catch it.                */                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 0x03) << 24;                $mState = 4;                $mBytes = 5;            } else if (0xFC == (0xFE & ($in))) {                // First octet of 6 octet sequence, see comments for 5 octet sequence.                $mUcs4 = ($in);                $mUcs4 = ($mUcs4 & 1) << 30;                $mState = 5;                $mBytes = 6;            } else {                /* Current octet is neither in the US-ASCII range nor a legal first                 * octet of a multi-octet sequence.                 */                return FALSE;            }        } else {            // When mState is non-zero, we expect a continuation of the multi-octet            // sequence            if (0x80 == (0xC0 & ($in))) {                // Legal continuation.                $shift = ($mState - 1) * 6;                $tmp = $in;                $tmp = ($tmp & 0x0000003F) << $shift;                $mUcs4 |= $tmp;                /**                * End of the multi-octet sequence. mUcs4 now contains the final                * Unicode codepoint to be output                */                if (0 == --$mState) {                    /*                    * Check for illegal sequences and codepoints.                    */                    // From Unicode 3.1, non-shortest form is illegal                    if (((2 == $mBytes) && ($mUcs4 < 0x0080)) ||                        ((3 == $mBytes) && ($mUcs4 < 0x0800)) ||                        ((4 == $mBytes) && ($mUcs4 < 0x10000)) ||                        (4 < $mBytes) ||                        // From Unicode 3.2, surrogate characters are illegal                        (($mUcs4 & 0xFFFFF800) == 0xD800) ||                        // Codepoints outside the Unicode range are illegal                        ($mUcs4 > 0x10FFFF)) {                        return FALSE;                    }                    //initialize UTF8 cache                    $mState = 0;                    $mUcs4  = 0;                    $mBytes = 1;                }            } else {                /**                *((0xC0 & (*in) != 0x80) && (mState != 0))                * Incomplete multi-octet sequence.                */                return FALSE;            }        }    }    return TRUE;}//--------------------------------------------------------------------/*** Tests whether a string complies as UTF-8. This will be much* faster than utf8_is_valid but will pass five and six octet* UTF-8 sequences, which are not supported by Unicode and* so cannot be displayed correctly in a browser. In other words* it is not as strict as utf8_is_valid but it's faster. If you use* is to validate user input, you place yourself at the risk that* attackers will be able to inject 5 and 6 byte sequences (which* may or may not be a significant risk, depending on what you are* are doing)* @see utf8_is_valid* @see http://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#54805* @param string UTF-8 string to check* @return boolean TRUE if string is valid UTF-8* @package utf8* @subpackage validation*/function utf8_compliant($str) {    if ( strlen($str) == 0 ) {        return TRUE;    }    // If even just the first character can be matched, when the /u    // modifier is used, then it's valid UTF-8. If the UTF-8 is somehow    // invalid, nothing at all will match, even if the string contains    // some valid sequences    return (preg_match('/^.{1}/us',$str,$ar) == 1);}
<?php/** * @package     Joomla.Site * @subpackage  com_mailto * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('mailtoForm');		// do field validation		if (form.mailto.value == "" || form.from.value == "")		{			alert('<?php echo JText::_('COM_MAILTO_EMAIL_ERR_NOINFO'); ?>');			return false;		}		form.submit();	}</script><?php$data	= $this->get('data');?><div id="mailto-window">	<h2>		<?php echo JText::_('COM_MAILTO_EMAIL_TO_A_FRIEND'); ?>	</h2>	<div class="mailto-close">		<a href="javascript: void window.close()" title="<?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?>">		 <span><?php echo JText::_('COM_MAILTO_CLOSE_WINDOW'); ?> </span></a>	</div>	<form action="<?php echo JURI::base() ?>index.php" id="mailtoForm" method="post">		<div class="formelm">			<label for="mailto_field"><?php echo JText::_('COM_MAILTO_EMAIL_TO'); ?></label>			<input type="text" id="mailto_field" name="mailto" class="inputbox" size="25" value="<?php echo $this->escape($data->mailto); ?>"/>		</div>		<div class="formelm">			<label for="sender_field">			<?php echo JText::_('COM_MAILTO_SENDER'); ?></label>			<input type="text" id="sender_field" name="sender" class="inputbox" value="<?php echo $this->escape($data->sender); ?>" size="25" />		</div>		<div class="formelm">			<label for="from_field">			<?php echo JText::_('COM_MAILTO_YOUR_EMAIL'); ?></label>			<input type="text" id="from_field" name="from" class="inputbox" value="<?php echo $this->escape($data->from); ?>" size="25" />		</div>		<div class="formelm">			<label for="subject_field">			<?php echo JText::_('COM_MAILTO_SUBJECT'); ?></label>			<input type="text" id="subject_field" name="subject" class="inputbox" value="<?php echo $this->escape($data->subject); ?>" size="25" />		</div>		<p>			<button class="button" onclick="return Joomla.submitbutton('send');">				<?php echo JText::_('COM_MAILTO_SEND'); ?>			</button>			<button class="button" onclick="window.close();return false;">				<?php echo JText::_('COM_MAILTO_CANCEL'); ?>			</button>		</p>		<input type="hidden" name="layout" value="<?php echo $this->getLayout();?>" />		<input type="hidden" name="option" value="com_mailto" />		<input type="hidden" name="task" value="send" />		<input type="hidden" name="tmpl" value="component" />		<input type="hidden" name="link" value="<?php echo $data->link; ?>" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-complete<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.complete'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Checkin component * * @package     Joomla.Administrator * @subpackage  com_checkin * @since       1.0 */class CheckinViewCheckin extends JViewLegacy{	protected $tables;	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CHECKIN_GLOBAL_CHECK_IN'), 'checkin.png');		if (JFactory::getUser()->authorise('core.admin', 'com_checkin'))		{			JToolbarHelper::custom('checkin', 'checkin.png', 'checkin_f2.png', 'JTOOLBAR_CHECKIN', true);			JToolbarHelper::divider();			JToolbarHelper::preferences('com_checkin');			JToolbarHelper::divider();		}		JToolbarHelper::help('JHELP_SITE_MAINTENANCE_GLOBAL_CHECK-IN');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Environment * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Browser class, provides capability information about the current web client. * * Browser identification is performed by examining the HTTP_USER_AGENT * environment variable provided by the web server. * * This class has many influences from the lib/Browser.php code in * version 3 of Horde by Chuck Hagenbuch and Jon Parise. * * @package     Joomla.Platform * @subpackage  Environment * @since       11.1 */class JBrowser{	/**	 * @var    integer  Major version number	 * @since  12.1	 */	protected $majorVersion = 0;	/**	 * @var    integer  Minor version number	 * @since  12.1	 */	protected $minorVersion = 0;	/**	 * @var    string  Browser name.	 * @since  12.1	 */	protected $browser = '';	/**	 * @var    string  Full user agent string.	 * @since  12.1	 */	protected $agent = '';	/**	 * @var    string  Lower-case user agent string	 * @since  12.1	 */	protected $lowerAgent = '';	/**	 * @var    string  HTTP_ACCEPT string.	 * @since  12.1	 */	protected $accept = '';	/**	 * @var    array  Parsed HTTP_ACCEPT string	 * @since  12.1	 */	protected $acceptParsed = array();	/**	 * @var    string  Platform the browser is running on	 * @since  12.1	 */	protected $platform = '';	/**	 * @var    array  Known robots.	 * @since  12.1	 */	protected $robots = array(		/* The most common ones. */		'Googlebot',		'msnbot',		'Slurp',		'Yahoo',		/* The rest alphabetically. */		'Arachnoidea',		'ArchitextSpider',		'Ask Jeeves',		'B-l-i-t-z-Bot',		'Baiduspider',		'BecomeBot',		'cfetch',		'ConveraCrawler',		'ExtractorPro',		'FAST-WebCrawler',		'FDSE robot',		'fido',		'geckobot',		'Gigabot',		'Girafabot',		'grub-client',		'Gulliver',		'HTTrack',		'ia_archiver',		'InfoSeek',		'kinjabot',		'KIT-Fireball',		'larbin',		'LEIA',		'lmspider',		'Lycos_Spider',		'Mediapartners-Google',		'MuscatFerret',		'NaverBot',		'OmniExplorer_Bot',		'polybot',		'Pompos',		'Scooter',		'Teoma',		'TheSuBot',		'TurnitinBot',		'Ultraseek',		'ViolaBot',		'webbandit',		'www.almaden.ibm.com/cs/crawler',		'ZyBorg');	/**	 * @var    boolean  Is this a mobile browser?	 * @since  12.1	 */	protected $mobile = false;	/**	 * List of viewable image MIME subtypes.	 * This list of viewable images works for IE and Netscape/Mozilla.	 *	 * @var    array	 * @since  12.1	 */	protected $images = array('jpeg', 'gif', 'png', 'pjpeg', 'x-png', 'bmp');	/**	 * @var    array  JBrowser instances container.	 * @since  11.3	 */	protected static $instances = array();	/**	 * Create a browser instance (constructor).	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @since   11.1	 */	public function __construct($userAgent = null, $accept = null)	{		$this->match($userAgent, $accept);	}	/**	 * Returns the global Browser object, only creating it	 * if it doesn't already exist.	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @return JBrowser  The Browser object.	 *	 * @since  11.1	 */	static public function getInstance($userAgent = null, $accept = null)	{		$signature = serialize(array($userAgent, $accept));		if (empty(self::$instances[$signature]))		{			self::$instances[$signature] = new JBrowser($userAgent, $accept);		}		return self::$instances[$signature];	}	/**	 * Parses the user agent string and inititializes the object with	 * all the known features and quirks for the given browser.	 *	 * @param   string  $userAgent  The browser string to parse.	 * @param   string  $accept     The HTTP_ACCEPT settings to use.	 *	 * @return  void	 *	 * @since   11.1	 */	public function match($userAgent = null, $accept = null)	{		// Set our agent string.		if (is_null($userAgent))		{			if (isset($_SERVER['HTTP_USER_AGENT']))			{				$this->agent = trim($_SERVER['HTTP_USER_AGENT']);			}		}		else		{			$this->agent = $userAgent;		}		$this->lowerAgent = strtolower($this->agent);		// Set our accept string.		if (is_null($accept))		{			if (isset($_SERVER['HTTP_ACCEPT']))			{				$this->accept = strtolower(trim($_SERVER['HTTP_ACCEPT']));			}		}		else		{			$this->accept = strtolower($accept);		}		if (!empty($this->agent))		{			$this->_setPlatform();			if (strpos($this->lowerAgent, 'mobileexplorer') !== false				|| strpos($this->lowerAgent, 'openwave') !== false				|| strpos($this->lowerAgent, 'opera mini') !== false				|| strpos($this->lowerAgent, 'opera mobi') !== false				|| strpos($this->lowerAgent, 'operamini') !== false)			{				$this->mobile = true;			}			elseif (preg_match('|Opera[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('opera');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);				/* Due to changes in Opera UA, we need to check Version/xx.yy,				 * but only if version is > 9.80. See: http://dev.opera.com/articles/view/opera-ua-string-changes/ */				if ($this->majorVersion == 9 && $this->minorVersion >= 80)				{					$this->identifyBrowserVersion();				}			}			elseif (preg_match('|Chrome[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('chrome');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (preg_match('|CrMo[/ ]([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('chrome');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (strpos($this->lowerAgent, 'elaine/') !== false				|| strpos($this->lowerAgent, 'palmsource') !== false				|| strpos($this->lowerAgent, 'digital paths') !== false)			{				$this->setBrowser('palm');				$this->mobile = true;			}			elseif ((preg_match('|MSIE ([0-9.]+)|', $this->agent, $version)) || (preg_match('|Internet Explorer/([0-9.]+)|', $this->agent, $version)))			{				$this->setBrowser('msie');				if (strpos($version[1], '.') !== false)				{					list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);				}				else				{					$this->majorVersion = $version[1];					$this->minorVersion = 0;				}				/* Some Handhelds have their screen resolution in the				 * user agent string, which we can use to look for				 * mobile agents.				 */				if (preg_match('/; (120x160|240x280|240x320|320x320)\)/', $this->agent))				{					$this->mobile = true;				}			}			elseif (preg_match('|amaya/([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('amaya');				$this->majorVersion = $version[1];				if (isset($version[2]))				{					$this->minorVersion = $version[2];				}			}			elseif (preg_match('|ANTFresco/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('fresco');			}			elseif (strpos($this->lowerAgent, 'avantgo') !== false)			{				$this->setBrowser('avantgo');				$this->mobile = true;			}			elseif (preg_match('|Konqueror/([0-9]+)|', $this->agent, $version) || preg_match('|Safari/([0-9]+)\.?([0-9]+)?|', $this->agent, $version))			{				// Konqueror and Apple's Safari both use the KHTML				// rendering engine.				$this->setBrowser('konqueror');				$this->majorVersion = $version[1];				if (isset($version[2]))				{					$this->minorVersion = $version[2];				}				if (strpos($this->agent, 'Safari') !== false && $this->majorVersion >= 60)				{					// Safari.					$this->setBrowser('safari');					$this->identifyBrowserVersion();				}			}			elseif (preg_match('|Mozilla/([0-9.]+)|', $this->agent, $version))			{				$this->setBrowser('mozilla');				list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			}			elseif (preg_match('|Lynx/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('lynx');			}			elseif (preg_match('|Links \(([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('links');			}			elseif (preg_match('|HotJava/([0-9]+)|', $this->agent, $version))			{				$this->setBrowser('hotjava');			}			elseif (strpos($this->agent, 'UP/') !== false || strpos($this->agent, 'UP.B') !== false || strpos($this->agent, 'UP.L') !== false)			{				$this->setBrowser('up');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Xiino/') !== false)			{				$this->setBrowser('xiino');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Palmscape/') !== false)			{				$this->setBrowser('palmscape');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Nokia') !== false)			{				$this->setBrowser('nokia');				$this->mobile = true;			}			elseif (strpos($this->agent, 'Ericsson') !== false)			{				$this->setBrowser('ericsson');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'wap') !== false)			{				$this->setBrowser('wap');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'docomo') !== false || strpos($this->lowerAgent, 'portalmmm') !== false)			{				$this->setBrowser('imode');				$this->mobile = true;			}			elseif (strpos($this->agent, 'BlackBerry') !== false)			{				$this->setBrowser('blackberry');				$this->mobile = true;			}			elseif (strpos($this->agent, 'MOT-') !== false)			{				$this->setBrowser('motorola');				$this->mobile = true;			}			elseif (strpos($this->lowerAgent, 'j-') !== false)			{				$this->setBrowser('mml');				$this->mobile = true;			}		}	}	/**	 * Match the platform of the browser.	 *	 * This is a pretty simplistic implementation, but it's intended	 * to let us tell what line breaks to send, so it's good enough	 * for its purpose.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _setPlatform()	{		if (strpos($this->lowerAgent, 'wind') !== false)		{			$this->platform = 'win';		}		elseif (strpos($this->lowerAgent, 'mac') !== false)		{			$this->platform = 'mac';		}		else		{			$this->platform = 'unix';		}	}	/**	 * Return the currently matched platform.	 *	 * @return  string  The user's platform.	 *	 * @since   11.1	 */	public function getPlatform()	{		return $this->platform;	}	/**	 * Set browser version, not by engine version	 * Fallback to use when no other method identify the engine version	 *	 * @return void	 */	protected function identifyBrowserVersion()	{		if (preg_match('|Version[/ ]([0-9.]+)|', $this->agent, $version))		{			list ($this->majorVersion, $this->minorVersion) = explode('.', $version[1]);			return;		}		// Can't identify browser version		$this->majorVersion = 0;		$this->minorVersion = 0;		JLog::add("Can't identify browser version. Agent: " . $this->agent, JLog::NOTICE);	}	/**	 * Sets the current browser.	 *	 * @param   string  $browser  The browser to set as current.	 *	 * @return  void	 *	 * @since   11.1	 */	public function setBrowser($browser)	{		$this->browser = $browser;	}	/**	 * Retrieve the current browser.	 *	 * @return  string  The current browser.	 *	 * @since   11.1	 */	public function getBrowser()	{		return $this->browser;	}	/**	 * Retrieve the current browser's major version.	 *	 * @return  integer  The current browser's major version	 *	 * @since   11.1.	 */	public function getMajor()	{		return $this->majorVersion;	}	/**	 * Retrieve the current browser's minor version.	 *	 * @return  integer  The current browser's minor version.	 *	 * @since   11.1	 */	public function getMinor()	{		return $this->minorVersion;	}	/**	 * Retrieve the current browser's version.	 *	 * @return  string  The current browser's version.	 *	 * @since   11.1	 */	public function getVersion()	{		return $this->majorVersion . '.' . $this->minorVersion;	}	/**	 * Return the full browser agent string.	 *	 * @return  string  The browser agent string	 *	 * @since   11.1	 */	public function getAgentString()	{		return $this->agent;	}	/**	 * Returns the server protocol in use on the current server.	 *	 * @return  string  The HTTP server protocol version.	 *	 * @since   11.1	 */	public function getHTTPProtocol()	{		if (isset($_SERVER['SERVER_PROTOCOL']))		{			if (($pos = strrpos($_SERVER['SERVER_PROTOCOL'], '/')))			{				return substr($_SERVER['SERVER_PROTOCOL'], $pos + 1);			}		}		return null;	}	/**	 * Determines if a browser can display a given MIME type.	 *	 * Note that  image/jpeg and image/pjpeg *appear* to be the same	 * entity, but Mozilla doesn't seem to want to accept the latter.	 * For our purposes, we will treat them the same.	 *	 * @param   string  $mimetype  The MIME type to check.	 *	 * @return  boolean  True if the browser can display the MIME type.	 *	 * @since   11.1	 */	public function isViewable($mimetype)	{		$mimetype = strtolower($mimetype);		list ($type, $subtype) = explode('/', $mimetype);		if (!empty($this->accept))		{			$wildcard_match = false;			if (strpos($this->accept, $mimetype) !== false)			{				return true;			}			if (strpos($this->accept, '*/*') !== false)			{				$wildcard_match = true;				if ($type != 'image')				{					return true;				}			}			// Deal with Mozilla pjpeg/jpeg issue			if ($this->isBrowser('mozilla') && ($mimetype == 'image/pjpeg') && (strpos($this->accept, 'image/jpeg') !== false))			{				return true;			}			if (!$wildcard_match)			{				return false;			}		}		if (!$this->hasFeature('images') || ($type != 'image'))		{			return false;		}		return (in_array($subtype, $this->images));	}	/**	 * Determine if the given browser is the same as the current.	 *	 * @param   string  $browser  The browser to check.	 *	 * @return  boolean  Is the given browser the same as the current?	 *	 * @since   11.1	 */	public function isBrowser($browser)	{		return ($this->browser === $browser);	}	/**	 * Determines if the browser is a robot or not.	 *	 * @return  boolean  True if browser is a known robot.	 *	 * @since   11.1	 */	public function isRobot()	{		foreach ($this->robots as $robot)		{			if (strpos($this->agent, $robot) !== false)			{				return true;			}		}		return false;	}	/**	 * Determines if the browser is mobile version or not.	 *	 * @return boolean  True if browser is a known mobile version.	 *	 * @since   11.1	 */	public function isMobile()	{		return $this->mobile;	}	/**	 * Determine if we are using a secure (SSL) connection.	 *	 * @return  boolean  True if using SSL, false if not.	 *	 * @since   11.1	 * @deprecated  13.3  Use the isSSLConnection method on the application object.	 */	public function isSSLConnection()	{		JLog::add('JBrowser::isSSLConnection() is deprecated. Use the isSSLConnection method on the application object instead.',			JLog::WARNING, 'deprecated');		return ((isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] == 'on')) || getenv('SSL_PROTOCOL_VERSION'));	}}
<?php/** * @package     Joomla.Platform * @subpackage  Language * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Text handling class. * * @package     Joomla.Platform * @subpackage  Language * @since       11.1 */class JText{	/**	 * javascript strings	 *	 * @var    array	 * @since  11.1	 */	protected static $strings = array();	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::_("JDEFAULT", array("script"=>true));?>'));</script>	 * will generate an alert message containing 'Default'	 * <?php echo JText::_("JDEFAULT");?> it will generate a 'Default' string	 *	 * @param   string   $string                The string to translate.	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be push in the javascript language store	 *	 * @return  string  The translated string or the key is $script is true	 *	 * @since   11.1	 */	public static function _($string, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('script', $jsSafe))			{				$script = (boolean) $jsSafe['script'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		if ($script)		{			self::$strings[$string] = $lang->_($string, $jsSafe, $interpretBackSlashes);			return $string;		}		else		{			return $lang->_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Translates a string into the current language.	 *	 * Examples:	 * <?php echo JText::alt("JALL","language");?> it will generate a 'All' string in English but a "Toutes" string in French	 * <?php echo JText::alt("JALL","module");?> it will generate a 'All' string in English but a "Tous" string in French	 *	 * @param   string   $string                The string to translate.	 * @param   string   $alt                   The alternate option for global string	 * @param   mixed    $jsSafe                Boolean: Make the result javascript safe.	 * @param   boolean  $interpretBackSlashes  To interpret backslashes (\\=\, \n=carriage return, \t=tabulation)	 * @param   boolean  $script                To indicate that the string will be pushed in the javascript language store	 *	 * @return  string  The translated string or the key if $script is true	 *	 * @since   11.1	 */	public static function alt($string, $alt, $jsSafe = false, $interpretBackSlashes = true, $script = false)	{		$lang = JFactory::getLanguage();		if ($lang->hasKey($string . '_' . $alt))		{			return self::_($string . '_' . $alt, $jsSafe, $interpretBackSlashes);		}		else		{			return self::_($string, $jsSafe, $interpretBackSlashes);		}	}	/**	 * Like JText::sprintf but tries to pluralise the string.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * Examples:	 * <script>alert(Joomla.JText._('<?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1, array("script"=>true));?>'));</script>	 * will generate an alert message containing '1 plugin successfully disabled'	 * <?php echo JText::plural("COM_PLUGINS_N_ITEMS_UNPUBLISHED", 1);?> it will generate a '1 plugin successfully disabled' string	 *	 * @param   string   $string  The format string.	 * @param   integer  $n       The number of items	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options	 *	 * @since   11.1	 */	public static function plural($string, $n)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 1)		{			// Try the key from the language plural potential suffixes			$found = false;			$suffixes = $lang->getPluralSuffixes((int) $n);			array_unshift($suffixes, (int) $n);			foreach ($suffixes as $suffix)			{				$key = $string . '_' . $suffix;				if ($lang->hasKey($key))				{					$found = true;					break;				}			}			if (!$found)			{				// Not found so revert to the original.				$key = $string;			}			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$key, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$key] = call_user_func_array('sprintf', $args);					return $key;				}			}			else			{				$args[0] = $lang->_($key);			}			return call_user_func_array('sprintf', $args);		}		elseif ($count > 0)		{			// Default to the normal sprintf handling.			$args[0] = $lang->_($string);			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru a sprintf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * The last argument can take an array of options:	 *	 * array('jsSafe'=>boolean, 'interpretBackSlashes'=>boolean, 'script'=>boolean)	 *	 * where:	 *	 * jsSafe is a boolean to generate a javascript safe strings.	 * interpretBackSlashes is a boolean to interpret backslashes \\->\, \n->new line, \t->tabulation.	 * script is a boolean to indicate that the string will be push in the javascript language store.	 *	 * @param   string  $string  The format string.	 *	 * @return  string  The translated strings or the key if 'script' is true in the array of options.	 *	 * @since   11.1	 */	public static function sprintf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);				if (array_key_exists('script', $args[$count - 1]) && $args[$count - 1]['script'])				{					self::$strings[$string] = call_user_func_array('sprintf', $args);					return $string;				}			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('sprintf', $args);		}		return '';	}	/**	 * Passes a string thru an printf.	 *	 * Note that this method can take a mixed number of arguments as for the sprintf function.	 *	 * @param   format  $string  The format string.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public static function printf($string)	{		$lang = JFactory::getLanguage();		$args = func_get_args();		$count = count($args);		if ($count > 0)		{			if (is_array($args[$count - 1]))			{				$args[0] = $lang->_(					$string, array_key_exists('jsSafe', $args[$count - 1]) ? $args[$count - 1]['jsSafe'] : false,					array_key_exists('interpretBackSlashes', $args[$count - 1]) ? $args[$count - 1]['interpretBackSlashes'] : true				);			}			else			{				$args[0] = $lang->_($string);			}			return call_user_func_array('printf', $args);		}		return '';	}	/**	 * Translate a string into the current language and stores it in the JavaScript language store.	 *	 * @param   string   $string                The JText key.	 * @param   boolean  $jsSafe                Ensure the output is JavaScript safe.	 * @param   boolean  $interpretBackSlashes  Interpret \t and \n.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function script($string = null, $jsSafe = false, $interpretBackSlashes = true)	{		if (is_array($jsSafe))		{			if (array_key_exists('interpretBackSlashes', $jsSafe))			{				$interpretBackSlashes = (boolean) $jsSafe['interpretBackSlashes'];			}			if (array_key_exists('jsSafe', $jsSafe))			{				$jsSafe = (boolean) $jsSafe['jsSafe'];			}			else			{				$jsSafe = false;			}		}		// Add the string to the array if not null.		if ($string !== null)		{			// Normalize the key and translate the string.			self::$strings[strtoupper($string)] = JFactory::getLanguage()->_($string, $jsSafe, $interpretBackSlashes);		}		return self::$strings;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Snowball stemmer class for the Finder indexer package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderIndexerStemmerSnowball extends FinderIndexerStemmer{	/**	 * Method to stem a token and return the root.	 *	 * @param   string  $token  The token to stem.	 * @param   string  $lang   The language of the token.	 *	 * @return  string  The root token.	 *	 * @since   2.5	 */	public function stem($token, $lang)	{		// Language to use if All is specified.		static $defaultLang = '';		// If language is All then try to get site default language.		if ($lang == '*' && $defaultLang == '')		{			$languages = JLanguageHelper::getLanguages();			$defaultLang = isset($languages[0]->sef) ? $languages[0]->sef : '*';			$lang = $defaultLang;		}		// Stem the token if it is not in the cache.		if (!isset($this->cache[$lang][$token]))		{			// Get the stem function from the language string.			switch ($lang)			{				// Danish stemmer.				case 'da':					$function = 'stem_danish';					break;				// German stemmer.				case 'de':					$function = 'stem_german';					break;				// English stemmer.				default:				case 'en':					$function = 'stem_english';					break;				// Spanish stemmer.				case 'es':					$function = 'stem_spanish';					break;				// Finnish stemmer.				case 'fi':					$function = 'stem_finnish';					break;				// French stemmer.				case 'fr':					$function = 'stem_french';					break;				// Hungarian stemmer.				case 'hu':					$function = 'stem_hungarian';					break;				// Italian stemmer.				case 'it':					$function = 'stem_italian';					break;				// Norwegian stemmer.				case 'nb':					$function = 'stem_norwegian';					break;				// Dutch stemmer.				case 'nl':					$function = 'stem_dutch';					break;				// Portuguese stemmer.				case 'pt':					$function = 'stem_portuguese';					break;				// Romanian stemmer.				case 'ro':					$function = 'stem_romanian';					break;				// Russian stemmer.				case 'ru':					$function = 'stem_russian_unicode';					break;				// Swedish stemmer.				case 'sv':					$function = 'stem_swedish';					break;				// Turkish stemmer.				case 'tr':					$function = 'stem_turkish_unicode';					break;			}			// Stem the word if the stemmer method exists.			$this->cache[$lang][$token] = function_exists($function) ? $function($token) : $token;		}		return $this->cache[$lang][$token];	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Method to build a SEF route. * * @param   array  &$query  An array of route variables. * * @return  array  An array of route segments. * * @since   2.5 */function FinderBuildRoute(&$query){	static $menu;	$segments = array();	// Load the menu if necessary.	if (!$menu)	{		$menu = JFactory::getApplication('site')->getMenu();	}	/*	 * First, handle menu item routes first. When the menu system builds a	 * route, it only provides the option and the menu item id. We don't have	 * to do anything to these routes.	 */	if (count($query) === 2 && isset($query['Itemid']) && isset($query['option']))	{		return $segments;	}	/*	 * Next, handle a route with a supplied menu item id. All system generated	 * routes should fall into this group. We can assume that the menu item id	 * is the best possible match for the query but we need to go through and	 * see which variables we can eliminate from the route query string because	 * they are present in the menu item route already.	 */	if (!empty($query['Itemid']))	{		// Get the menu item.		$item = $menu->getItem($query['Itemid']);		// Check if the view matches.		if ($item && @$item->query['view'] === @$query['view'])		{			unset($query['view']);		}		// Check if the search query filter matches.		if ($item && @$item->query['f'] === @$query['f'])		{			unset($query['f']);		}		// Check if the search query string matches.		if ($item && @$item->query['q'] === @$query['q'])		{			unset($query['q']);		}		return $segments;	}	/*	 * Lastly, handle a route with no menu item id. Fortunately, we only need	 * to deal with the view as the other route variables are supposed to stay	 * in the query string.	 */	if (isset($query['view']))	{		// Add the view to the segments.		$segments[] = $query['view'];		unset($query['view']);	}	return $segments;}/** * Method to parse a SEF route. * * @param   array  $segments  An array of route segments. * * @return  array  An array of route variables. * * @since   2.5 */function FinderParseRoute($segments){	$vars = array();	// Check if the view segment is set and it equals search or advanced.	if (@$segments[0] === 'search' || @$segments[0] === 'advanced')	{		$vars['view'] = $segments[0];	}	return $vars;}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype item model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelItem extends JModelLegacy{	/**	 * An item.	 *	 * @var    array	 */	protected $_item = null;	/**	 * Model context string.	 *	 * @var    string	 * @since  12.2	 */	protected $_context = 'group.type';	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id.	 *	 * @return  string  A store id.	 *	 * @since   12.2	 */	protected function getStoreId($id = '')	{		// Compile the store id.		return md5($id);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="submenu-box">	<ul id="submenu" class="configuration">		<li><a href="#" onclick="return false;" id="site" class="active"><?php echo JText::_('JSITE'); ?></a></li>		<li><a href="#" onclick="return false;" id="system"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></a></li>		<li><a href="#" onclick="return false;" id="server"><?php echo JText::_('COM_CONFIG_SERVER'); ?></a></li>		<li><a href="#" onclick="return false;" id="permissions"><?php echo JText::_('COM_CONFIG_PERMISSIONS'); ?></a></li>		<li><a href="#" onclick="return false;" id="filters"><?php echo JText::_('COM_CONFIG_TEXT_FILTERS')?></a></li>	</ul>	<div class="clr"></div></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_news * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$item_heading = $params->get('item_heading', 'h4');?><?php if ($params->get('item_title')) : ?>	<<?php echo $item_heading; ?> class="newsflash-title<?php echo $params->get('moduleclass_sfx'); ?>">	<?php if ($params->get('link_titles') && $item->link != '') : ?>		<a href="<?php echo $item->link;?>">			<?php echo $item->title;?></a>	<?php else : ?>		<?php echo $item->title; ?>	<?php endif; ?>	</<?php echo $item_heading; ?>><?php endif; ?><?php if (!$params->get('intro_only')) :	echo $item->afterDisplayTitle;endif; ?><?php echo $item->beforeDisplayContent; ?><?php echo $item->introtext; ?><?php if (isset($item->link) && $item->readmore != 0 && $params->get('readmore')) :	echo '<a class="readmore" href="'.$item->link.'">'.$item->linkText.'</a>';endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google+ data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       1234 */class JGoogleDataPlus extends JGoogleData{	/**	* @var    JGoogleDataPlusPeople  Google+ API object for people.	* @since  12.3	*/	protected $people;	/**	* @var    JGoogleDataPlusActivities  Google+ API object for people.	* @since  12.3	*/	protected $activities;	/**	* @var    JGoogleDataPlusComments  Google+ API object for people.	* @since  12.3	*/	protected $comments;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object	 * @param   JGoogleAuth  $auth     Google data http client object	 *	 * @since   1234	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		// Setup the default API url if not already set.		$options->def('api.url', 'https://www.googleapis.com/plus/v1/');		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://www.googleapis.com/auth/plus.me');		}	}	/**	 * Magic method to lazily create API objects	 *	 * @param   string  $name  Name of property to retrieve	 *	 * @return  JGoogleDataPlus  Google+ API object (people, activities, comments).	 *	 * @since   12.3	 */	public function __get($name)	{		switch ($name)		{			case 'people':				if ($this->people == null)				{					$this->people = new JGoogleDataPlusPeople($this->options, $this->auth);				}				return $this->people;			case 'activities':				if ($this->activities == null)				{					$this->activities = new JGoogleDataPlusActivities($this->options, $this->auth);				}				return $this->activities;			case 'comments':				if ($this->comments == null)				{					$this->comments = new JGoogleDataPlusComments($this->options, $this->auth);				}				return $this->comments;		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_installer */class InstallerControllerInstall extends JControllerLegacy{	/**	 * Install an extension.	 *	 * @return  void	 * @since   1.5	 */	public function install()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('install');		if ($model->install())		{			$cache = JFactory::getCache('mod_menu');			$cache->clean();			// TODO: Reset the users acl here as well to kill off any missing bits		}		$app = JFactory::getApplication();		$redirect_url = $app->getUserState('com_installer.redirect_url');		if (empty($redirect_url))		{			$redirect_url = JRoute::_('index.php?option=com_installer&view=install', false);		} else		{			// wipe out the user state when we're going to redirect			$app->setUserState('com_installer.redirect_url', '');			$app->setUserState('com_installer.message', '');			$app->setUserState('com_installer.extension_message', '');		}		$this->setRedirect($redirect_url);	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.filesystem.file');/** * Joomla! Package Manifest File * * @package     Joomla.Libraries * @subpackage  Installer * @since       3.1 */abstract class JInstallerManifest{	/**	 * Path to the manifest file	 *	 * @var    string	 * @since  3.1	 */	public $manifest_file = '';	/**	 * Name of the extension	 *	 * @var    string	 * @since  3.1	 */	public $name = '';	/**	 * Version of the extension	 *	 * @var    string	 * @since  3.1	 */	public $version = '';	/**	 * Description of the extension	 *	 * @var    string	 * @since  3.1	 */	public $description = '';	/**	 * Packager of the extension	 *	 * @var    string	 * @since  3.1	 */	public $packager = '';	/**	 * Packager's URL of the extension	 *	 * @var    string	 * @since  3.1	 */	public $packagerurl = '';	/**	 * Update site for the extension	 *	 * @var    string	 * @since  3.1	 */	public $update = '';	/**	 * List of files in the extension	 *	 * @var    array	 * @since  3.1	 */	public $filelist = array();	/**	 * Constructor	 *	 * @param   string  $xmlpath  Path to XML manifest file.	 *	 * @since   3.1	 */	public function __construct($xmlpath = '')	{		if (strlen($xmlpath))		{			$this->loadManifestFromXML($xmlpath);		}	}	/**	 * Load a manifest from a file	 *	 * @param   string  $xmlfile  Path to file to load	 *	 * @return  boolean	 *	 * @since   3.1	 */	public function loadManifestFromXML($xmlfile)	{		$this->manifest_file = basename($xmlfile, '.xml');		$xml = simplexml_load_file($xmlfile);		if (!$xml)		{			$this->_errors[] = JText::sprintf('JLIB_INSTALLER_ERROR_LOAD_XML', $xmlfile);			return false;		}		else		{			$this->loadManifestFromData($xml);			return true;		}	}	/**	 * Apply manifest data from a SimpleXMLElement to the object.	 *	 * @param   SimpleXMLElement  $xml  Data to load	 *	 * @return  void	 *	 * @since   3.1	 */	abstract protected function loadManifestFromData(SimpleXmlElement $xml);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_LOCATION_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('locale') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_FTP_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('ftp') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Cache storage helper functions. * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheStorageHelper{	/**	 * Cache data group	 *	 * @var    string	 * @since  11.1	 */	public $group = '';	/**	 * Cached item size	 *	 * @var    string	 * @since  11.1	 */	public $size = 0;	/**	 * Counter	 *	 * @var    integer	 * @since  11.1	 */	public $count = 0;	/**	 * Constructor	 *	 * @param   string  $group  The cache data group	 *	 * @since   11.1	 */	public function __construct($group)	{		$this->group = $group;	}	/**	 * Increase cache items count.	 *	 * @param   string  $size  Cached item size	 *	 * @return  void	 *	 * @since   11.1	 */	public function updateSize($size)	{		$this->size = number_format($this->size + $size, 2);		$this->count++;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if (JPluginHelper::isEnabled('user', 'profile')) :	$fields = $this->item->profile->getFieldset('profile'); ?><div class="contact-profile" id="users-profile-custom">	<dl class="dl-horizontal">	<?php foreach ($fields as $profile) :		if ($profile->value) :			echo '<dt>'.$profile->label.'</dt>';			$profile->text = htmlspecialchars($profile->value, ENT_COMPAT, 'UTF-8');			switch ($profile->id) :				case "profile_website" :					$v_http = substr($profile->profile_value, 0, 4);					if ($v_http == "http") :						echo '<dd><a href="'.$profile->text.'">'.$profile->text.'</a></dd>';					else :						echo '<dd><a href="http://'.$profile->text.'">'.$profile->text.'</a></dd>';					endif;					break;				default:					echo '<dd>'.$profile->text.'</dd>';					break;			endswitch;		endif;	endforeach; ?>	</dl></div><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks Weblink Controller * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksController extends JControllerLegacy{	/**	 * Method to display a view.	 *	 * @param   boolean			$cachable	If true, the view output will be cached	 * @param   array  $urlparams	An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/weblinks.php';		$view   = $this->input->get('view', 'weblinks');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'weblink' && $layout == 'edit' && !$this->checkEditId('com_weblinks.edit.weblink', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_weblinks&view=weblinks', false));			return false;		}		parent::display();		return $this;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_admin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Sysinfo View class for the Admin component * * @package     Joomla.Administrator * @subpackage  com_admin * @since       1.6 */class AdminViewSysinfo extends JViewLegacy{	/**	 * @var array some php settings	 */	protected $php_settings = null;	/**	 * @var array config values	 */	protected $config = null;	/**	 * @var array somme system values	 */	protected $info = null;	/**	 * @var string php info	 */	protected $php_info = null;	/**	 * @var array informations about writable state of directories	 */	protected $directory = null;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.admin'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->php_settings	= $this->get('PhpSettings');		$this->config		= $this->get('config');		$this->info			= $this->get('info');		$this->php_info		= $this->get('PhpInfo');		$this->directory	= $this->get('directory');		$this->addToolbar();		$this->_setSubMenu();		parent::display($tpl);	}	/**	 * Setup the SubMenu	 *	 * @return  void	 *	 * @since   1.6	 * @note    Necessary for Hathor compatibility	 */	protected function _setSubMenu()	{		try		{			$contents = $this->loadTemplate('navigation');			$document = JFactory::getDocument();			$document->setBuffer($contents, 'modules', 'submenu');		}		catch (Exception $e)		{		}	}	/**	 * Setup the Toolbar	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_ADMIN_SYSTEM_INFORMATION'), 'systeminfo.png');		JToolbarHelper::help('JHELP_SITE_SYSTEM_INFORMATION');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerGroup extends JControllerForm{		/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_USERS_GROUP';	/**	 * Method to check if you can save a new or existing record.	 *	 * Overrides JControllerForm::allowSave to check the core.admin permission.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowSave($data, $key = 'id')	{		return (JFactory::getUser()->authorise('core.admin', $this->option) && parent::allowSave($data, $key));	}	/**	 * Overrides JControllerForm::allowEdit	 *	 * Checks that non-Super Admins are not editing Super Admins.	 *	 * @param   array  An array of input data.	 * @param   string	The name of the key for the primary key.	 *	 * @return  boolean	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		// Check if this group is a Super Admin		if (JAccess::checkGroup($data[$key], 'core.admin'))		{			// If I'm not a Super Admin, then disallow the edit.			if (!JFactory::getUser()->authorise('core.admin'))			{				return false;			}		}		return parent::allowEdit($data, $key);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Base Model Class * * @package     Joomla.Platform * @subpackage  Model * @since       12.1 */abstract class JModelBase implements JModel{	/**	 * The model state.	 *	 * @var    JRegistry	 * @since  12.1	 */	protected $state;	/**	 * Instantiate the model.	 *	 * @param   JRegistry  $state  The model state.	 *	 * @since   12.1	 */	public function __construct(JRegistry $state = null)	{		// Setup the model.		$this->state = isset($state) ? $state : $this->loadState();	}	/**	 * Get the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	public function getState()	{		return $this->state;	}	/**	 * Set the model state.	 *	 * @param   JRegistry  $state  The state object.	 *	 * @return  void	 *	 * @since   12.1	 */	public function setState(JRegistry $state)	{		$this->state = $state;	}	/**	 * Load the model state.	 *	 * @return  JRegistry  The state object.	 *	 * @since   12.1	 */	protected function loadState()	{		return new JRegistry;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User note controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       2.5 */class UsersControllerNote extends JControllerForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  2.5	 */	protected $text_prefix = 'COM_USERS_NOTE';	/**	 * Gets the URL arguments to append to an item redirect.	 *	 * @param   integer  $recordId  The primary key id for the item.	 * @param   string   $key       The name of the primary key variable.	 *	 * @return  string  The arguments to append to the redirect URL.	 *	 * @since   2.5	 */	protected function getRedirectToItemAppend($recordId = null, $key = 'id')	{		$append = parent::getRedirectToItemAppend($recordId, $key);		$userId = JFactory::getApplication()->input->get('u_id', 0, 'int');		if ($userId)		{			$append .= '&u_id=' . $userId;		}		return $append;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_tags * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Note that there are certain parts of this layout used only when there is exactly one tag.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');$description = $this->params->get('all_tags_description');$descriptionImage = $this->params->get('all_tags_description_image');?><div class="tag-category<?php echo $this->pageclass_sfx; ?>">	<?php  if ($this->state->get('show_page_heading')) : ?>		<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	<?php endif;?>	<?php if ($this->params->get('all_tags_show_description_image') && !empty($descriptionImage)):?>		<div><?php echo '<img src="' . $descriptionImage . '">';?></div>	<?php endif;?>	<?php if (!empty($description)):?>		<div><?php echo $description;?></div>	<?php endif;?>	<?php echo $this->loadTemplate('items'); ?></div>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google API data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */abstract class JGoogleData{	/**	 * @var    JRegistry  Options for the Google data object.	 * @since  12.3	 */	protected $options;	/**	 * @var    JGoogleAuth  Authentication client for the Google data object.	 * @since  12.3	 */	protected $auth;	/**	 * Constructor.	 *	 * @param   JRegistry    $options  Google options object.	 * @param   JGoogleAuth  $auth     Google data http client object.	 *	 * @since   12.3	 */	public function __construct(JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->options = isset($options) ? $options : new JRegistry;		$this->auth = isset($auth) ? $auth : new JGoogleAuthOauth2($this->options);	}	/**	 * Method to authenticate to Google	 *	 * @return  boolean  True on success.	 *	 * @since   12.3	 */	public function authenticate()	{		return $this->auth->authenticate();	}	/**	 * Check authentication	 *	 * @return  boolean  True if authenticated.	 *	 * @since   12.3	 */	public function isAuthenticated()	{		return $this->auth->isAuthenticated();	}	/**	 * Method to validate XML	 *	 * @param   string  $data  XML data to be parsed	 *	 * @return  SimpleXMLElement  XMLElement of parsed data	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected static function safeXML($data)	{		try		{			return new SimpleXMLElement($data, LIBXML_NOWARNING | LIBXML_NOERROR);		}		catch (Exception $e)		{			throw new UnexpectedValueException("Unexpected data received from Google: `$data`.");		}	}	/**	 * Method to retrieve a list of data	 *	 * @param   array   $url       URL to GET	 * @param   int     $maxpages  Maximum number of pages to return	 * @param   string  $token     Next page token	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function listGetData($url, $maxpages = 1, $token = null)	{		$qurl = $url;		if (strpos($url, '&') && isset($token))		{			$qurl .= '&pageToken=' . $token;		}		elseif (isset($token))		{			$qurl .= 'pageToken=' . $token;		}		$jdata = $this->query($qurl);		$data = json_decode($jdata->body, true);		if ($data && array_key_exists('items', $data))		{			if ($maxpages != 1 && array_key_exists('nextPageToken', $data))			{				$data['items'] = array_merge($data['items'], $this->listGetData($url, $maxpages - 1, $data['nextPageToken']));			}			return $data['items'];		}		elseif ($data)		{			return array();		}		else		{			throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");		}	}	/**	 * Method to retrieve data from Google	 *	 * @param   string  $url      The URL for the request.	 * @param   mixed   $data     The data to include in the request.	 * @param   array   $headers  The headers to send with the request.	 * @param   string  $method   The type of http request to send.	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	protected function query($url, $data = null, $headers = null, $method = 'get')	{		return $this->auth->query($url, $data, $headers, $method);	}	/**	 * Get an option from the JGoogleData instance.	 *	 * @param   string  $key  The name of the option to get.	 *	 * @return  mixed  The option value.	 *	 * @since   12.3	 */	public function getOption($key)	{		return $this->options->get($key);	}	/**	 * Set an option for the JGoogleData instance.	 *	 * @param   string  $key    The name of the option to set.	 * @param   mixed   $value  The option value to set.	 *	 * @return  JGoogleData  This object for method chaining.	 *	 * @since   12.3	 */	public function setOption($key, $value)	{		$this->options->set($key, $value);		return $this;	}}
#!/usr/bin/env php<?php/** * @package    Joomla.Platform * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE */define('_JEXEC', 1);define('JPATH_BASE', dirname(__FILE__));// Load the Joomla! Platformrequire_once realpath('../libraries/import.php');/** * Keychain Manager * * @package  Joomla.Platform * @since    12.3 */class KeychainManager extends JApplicationCli{	/**	 * @var    boolean  A flag if the keychain has been updated to trigger saving the keychain	 * @since  12.3	 */	protected $updated = false;	/**	 * @var    JKeychain  The keychain object being manipulated.	 * @since  12.3	 */	protected $keychain = null;	/**	 * Execute the application	 *	 * @return  void	 *	 * @since   12.3	 */	public function execute( )	{		if (!count($this->input->args))		{			// Check if they passed --help in otherwise display short usage summary			if ($this->input->get('help', false) === false)			{				$this->out("usage: {$this->input->executable} [options] [command] [<args>]");				exit(1);			}			else			{				$this->displayHelp();				exit(0);			}		}		// For all tasks but help and init we use the keychain		if (!in_array($this->input->args[0], array('help', 'init')))		{			$this->loadKeychain();		}		switch ($this->input->args[0])		{			case 'init':				$this->initPassphraseFile();				break;			case 'list':				$this->listEntries();				break;			case 'create':				$this->create();				break;			case 'change':				$this->change();			case 'delete':				$this->delete();				break;			case 'read':				$this->read();				break;			case 'help':				$this->displayHelp();				break;			default:				$this->out('Invalid command.');				break;		}		if ($this->updated)		{			$this->saveKeychain();		}		exit(0);	}	/**	 * Load the keychain from a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function loadKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$this->keychain = new JKeychain;		if (file_exists($keychain))		{			if (file_exists($publicKeyFile))			{				$this->keychain->loadKeychain($keychain, $passphraseFile, $publicKeyFile);			}			else			{				$this->out('Public key not specified or missing!');				exit(1);			}		}	}	/**	 * Save this keychain to a file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function saveKeychain()	{		$keychain = $this->input->get('keychain', '', 'raw');		$publicKeyFile = $this->input->get('public-key', '', 'raw');		$passphraseFile = $this->input->get('passphrase', '', 'raw');		if (!file_exists($publicKeyFile))		{			$this->out("Public key file specified doesn't exist: $publicKeyFile");			exit(1);		}		$this->keychain->saveKeychain($keychain, $passphraseFile, $publicKeyFile);	}	/**	 * Initialise a new passphrase file.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function initPassphraseFile()	{		$keychain = new JKeychain;		$passphraseFile = $this->input->get('passphrase', '', 'raw');		$privateKeyFile = $this->input->get('private-key', '', 'raw');		if (!strlen($passphraseFile))		{			$this->out('A passphrase file must be specified with --passphrase');			exit(1);		}		if (!file_exists($privateKeyFile))		{			$this->out("protected key file specified doesn't exist: $privateKeyFile");			exit(1);		}		$this->out('Please enter the new passphrase:');		$passphrase = $this->in();		$this->out('Please enter the passphrase for the protected key:');		$privateKeyPassphrase = $this->in();		$keychain->createPassphraseFile($passphrase, $passphraseFile, $privateKeyFile, $privateKeyPassphrase);	}	/**	 * Create a new entry	 *	 * @return  void	 *	 * @since   12.3	 */	protected function create()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] create entry_name entry_value");			exit(1);		}		if ($this->keychain->exists($this->input->args[1]))		{			$this->out('error: entry already exists. To change this entry, use "change"');			exit(1);		}		$this->change();	}	/**	 * Change an existing entry to a new value or create an entry if missing.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function change()	{		if (count($this->input->args) != 3)		{			$this->out("usage: {$this->input->executable} [options] change entry_name entry_value");			exit(1);		}		$this->updated = true;		$this->keychain->setValue($this->input->args[1], $this->input->args[2]);	}	/**	 * Read an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function read()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] read entry_name");			exit(1);		}		$key = $this->input->args[1];		$this->out($key . ': ' . $this->dumpVar($this->keychain->get($key)));	}	/**	 * Get the string from var_dump	 *	 * @param   mixed  $var  The variable you want to have dumped.	 *	 * @return  string  The result of var_dump	 *	 * @since   12.3	 */	private function dumpVar($var)	{		ob_start();		var_dump($var);		$result = trim(ob_get_contents());		ob_end_clean();		return $result;	}	/**	 * Delete an entry from the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function delete()	{		if (count($this->input->args) != 2)		{			$this->out("usage: {$this->input->executable} [options] delete entry_name");			exit(1);		}		$this->updated = true;		$this->keychain->deleteValue($this->input->args[1], null);	}	/**	 * List entries in the keychain	 *	 * @return  void	 *	 * @since   12.3	 */	protected function listEntries()	{		foreach ($this->keychain->toArray() as $key => $value)		{			$line = $key;			if ($this->input->get('print-values'))			{				$line .= ': ' . $this->dumpVar($value);			}			$this->out($line);		}	}	/**	 * Display the help information	 *	 * @return  void	 *	 * @since   12.3	 */	protected function displayHelp()	{/*COMMANDS - list - create entry_name entry_value - change entry_name entry_value - delete entry_name - read   entry_name*/		$help = <<<HELPKeychain Management Utilityusage: {$this->input->executable} [--keychain=/path/to/keychain]	[--passphrase=/path/to/passphrase.dat] [--public-key=/path/to/public.pem]	[command] [<args>]OPTIONS  --keychain=/path/to/keychain    Path to a keychain file to manipulate.  --passphrase=/path/to/passphrase.dat    Path to a passphrase file containing the encryption/decryption key.  --public-key=/path/to/public.pem    Path to a public key file to decrypt the passphrase file.COMMANDS  list:    Usage: list [--print-values]    Lists all entries in the keychain. Optionally pass --print-values to print the values as well.  create:    Usage: create entry_name entry_value    Creates a new entry in the keychain called "entry_name" with the plaintext value "entry_value".    NOTE: This is an alias for change.  change:    Usage: change entry_name entry_value    Updates the keychain entry called "entry_name" with the value "entry_value".  delete:    Usage: delete entry_name    Removes an entry called "entry_name" from the keychain.  read:    Usage: read entry_name    Outputs the plaintext value of "entry_name" from the keychain.  init:    Usage: init    Creates a new passphrase file and prompts for a new passphrase.HELP;		$this->out($help);	}}try{	JApplicationCli::getInstance('KeychainManager')->execute();}catch (Exception $e){	echo $e->getMessage() . "\n";	exit(1);}
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination object representing a particular item in the pagination lists. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPaginationObject{	/**	 * @var    string  The link text.	 * @since  11.1	 */	public $text;	/**	 * @var    integer  The number of rows as a base offset.	 * @since  11.1	 */	public $base;	/**	 * @var    string  The link URL.	 * @since  11.1	 */	public $link;	/**	 * @var    integer  The prefix used for request variables.	 * @since  11.1	 */	public $prefix;	/**	 * @var    boolean  Flag whether the object is the 'active' page	 * @since  12.2	 */	public $active;	/**	 * Class constructor.	 *	 * @param   string   $text    The link text.	 * @param   integer  $prefix  The prefix used for request variables.	 * @param   integer  $base    The number of rows as a base offset.	 * @param   string   $link    The link URL.	 * @param   boolean  $active  Flag whether the object is the 'active' page	 *	 * @since   11.1	 */	public function __construct($text, $prefix = '', $base = null, $link = null, $active = false)	{		$this->text   = $text;		$this->prefix = $prefix;		$this->base   = $base;		$this->link   = $link;		$this->active = $active;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Clicks Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldClicks extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Clicks';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$onclick	= ' onclick="document.id(\''.$this->id.'\').value=\'0\';"';		return '<input class="input-small" type="text" name="' . $this->name . '" id="' . $this->id . '" value="' . htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '" readonly="readonly" /> <a class="btn" ' . $onclick . '><i class="icon-refresh"></i> ' . JText::_('COM_BANNERS_RESET_CLICKS') . '</a>';	}}
<?php/** * @package     Joomla.Plugin * @subpackage  Content.pagenavigation * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="pager pagenav"><?php if ($row->prev) : ?>	<li class="previous">		<a href="<?php echo $row->prev; ?>" rel="prev"><?php echo JText::_('JGLOBAL_LT') . $pnSpace . JText::_('JPREV'); ?></a>	</li><?php endif; ?><?php if ($row->next) : ?>	<li class="next">		<a href="<?php echo $row->next; ?>" rel="next"><?php echo JText::_('JNEXT') . $pnSpace . JText::_('JGLOBAL_GT'); ?></a>	</li><?php endif; ?></ul>
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$pageClass = $this->params->get('pageclass_sfx');?><div class="newsfeed-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_newsfeeds.category'); ?></h2><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_newsfeeds.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?><div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?></div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;/** * Impressions Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class JFormFieldImpTotal extends JFormField{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'ImpTotal';	/**	 * Method to get the field input markup.	 *	 * @return  string	The field input markup.	 * @since   1.6	 */	protected function getInput()	{		$class		= ' class="validate-numeric text_area"';		$onchange	= ' onchange="document.id(\''.$this->id.'_unlimited\').checked=document.id(\''.$this->id.'\').value==\'\';"';		$onclick	= ' onclick="if (document.id(\''.$this->id.'_unlimited\').checked) document.id(\''.$this->id.'\').value=\'\';"';		$value		= empty($this->value) ? '' : $this->value;		$checked	= empty($this->value) ? ' checked="checked"' : '';		return '<input type="text" name="'.$this->name.'" id="'.$this->id.'" size="9" value="'.htmlspecialchars($value, ENT_COMPAT, 'UTF-8').'" '.$class.$onchange.' />		<fieldset class="checkboxes impunlimited"><input id="'.$this->id.'_unlimited" type="checkbox"'.$checked.$onclick.' />		<label for="'.$this->id.'_unlimited" id="jform-imp" type="text">'.JText::_('COM_BANNERS_UNLIMITED').'</label></fieldset>';	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/* marker_class: Class based on the selection of text, none, or icons * jicon-text, jicon-none, jicon-icon */?><dl class="contact-address dl-horizontal"><?php if (($this->params->get('address_check') > 0) &&  ($this->contact->address || $this->contact->suburb  || $this->contact->state || $this->contact->country || $this->contact->postcode)) : ?>	<?php if ($this->params->get('address_check') > 0) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_address'); ?>		</span>	</dt>	<dd>	<address>	<?php endif; ?>	<?php if ($this->contact->address && $this->params->get('show_street_address')) : ?>		<span class="contact-street">			<?php echo nl2br($this->contact->address); ?>		</span>	<?php endif; ?>	<?php if ($this->contact->suburb && $this->params->get('show_suburb')) : ?>		<span class="contact-suburb">			<?php echo $this->contact->suburb; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->state && $this->params->get('show_state')) : ?>		<span class="contact-state">			<?php echo $this->contact->state; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->postcode && $this->params->get('show_postcode')) : ?>		<span class="contact-postcode">			<?php echo $this->contact->postcode; ?>		</span>	<?php endif; ?>	<?php if ($this->contact->country && $this->params->get('show_country')) : ?>		<span class="contact-country">			<?php echo $this->contact->country; ?>		</span>	<?php endif; ?><?php endif; ?><?php if ($this->params->get('address_check') > 0) : ?>	</address>	</dd><?php endif; ?><?php if ($this->contact->email_to && $this->params->get('show_email')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_email'); ?>		</span>	</dt>	<dd>		<span class="contact-emailto">			<?php echo $this->contact->email_to; ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->telephone && $this->params->get('show_telephone')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_telephone'); ?>		</span>	</dt>	<dd>		<span class="contact-telephone">			<?php echo nl2br($this->contact->telephone); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->fax && $this->params->get('show_fax')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_fax'); ?>		</span>	</dt>	<dd>		<span class="contact-fax">		<?php echo nl2br($this->contact->fax); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->mobile && $this->params->get('show_mobile')) :?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >			<?php echo $this->params->get('marker_mobile'); ?>		</span>	</dt>	<dd>		<span class="contact-mobile">			<?php echo nl2br($this->contact->mobile); ?>		</span>	</dd><?php endif; ?><?php if ($this->contact->webpage && $this->params->get('show_webpage')) : ?>	<dt>		<span class="<?php echo $this->params->get('marker_class'); ?>" >		</span>	</dt>	<dd>		<span class="contact-webpage">			<a href="<?php echo $this->contact->webpage; ?>" target="_blank">			<?php echo $this->contact->webpage; ?></a>		</span>	</dd><?php endif; ?></dl>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;// Detect if we have full UTF-8 and unicode PCRE support.if (!defined('JCOMPAT_UNICODE_PROPERTIES')){	define('JCOMPAT_UNICODE_PROPERTIES', (bool) @preg_match('/\pL/u', 'a'));}/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormRule{	/**	 * The regular expression to use in testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $regex;	/**	 * The regular expression modifiers to use when testing a form field value.	 *	 * @var    string	 * @since  11.1	 */	protected $modifiers;	/**	 * Method to test the value.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.1	 * @throws  UnexpectedValueException if rule is invalid.	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		// Check for a valid regex.		if (empty($this->regex))		{			throw new UnexpectedValueException(sprintf('%s has invalid regex.', get_class($this)));		}		// Add unicode property support if available.		if (JCOMPAT_UNICODE_PROPERTIES)		{			$this->modifiers = (strpos($this->modifiers, 'u') !== false) ? $this->modifiers : $this->modifiers . 'u';		}		// Test the value against the regular expression.		if (preg_match(chr(1) . $this->regex . chr(1) . $this->modifiers, $value))		{			return true;		}		return false;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the mod_popular functions only once.require_once __DIR__ . '/helper.php';// Get module data.$list = ModPopularHelper::getList($params);// Render the modulerequire JModuleHelper::getLayoutPath('mod_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_popular * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesPopularHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_articles_popular', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Encryption key object for the Joomla Platform. * * @property-read  string  $type  The key type. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptKey{	/**	 * @var    string  The private key.	 * @since  12.1	 */	public $private;	/**	 * @var    string  The public key.	 * @since  12.1	 */	public $public;	/**	 * @var    string  The key type.	 * @since  12.1	 */	protected $type;	/**	 * Constructor.	 *	 * @param   string  $type     The key type.	 * @param   string  $private  The private key.	 * @param   string  $public   The public key.	 *	 * @since   12.1	 */	public function __construct($type, $private = null, $public = null)	{		// Set the key type.		$this->type = (string) $type;		// Set the optional public/private key strings.		$this->private = isset($private) ? (string) $private : null;		$this->public  = isset($public) ? (string) $public : null;	}	/**	 * Magic method to return some protected property values.	 *	 * @param   string  $name  The name of the property to return.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function __get($name)	{		if ($name == 'type')		{			return $this->type;		}		else		{			trigger_error('Cannot access property ' . __CLASS__ . '::' . $name, E_USER_WARNING);		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Default View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewDefault extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 *	 * @since  2.5.4	 */	public function display($tpl=null)	{		// Get data from the model		$this->state = $this->get('State');		// Load useful classes		$model = $this->getModel();		$this->loadHelper('select');		// Assign view variables		$ftp = $model->getFTPOptions();		$this->assign('updateInfo', $model->getUpdateInformation());		$this->assign('methodSelect', JoomlaupdateHelperSelect::getMethods($ftp['enabled']));		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolbarHelper::custom('update.purge', 'purge', 'purge', 'JTOOLBAR_PURGE_CACHE', false, false);		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Load mooTools		JHtml::_('behavior.framework', true);		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/default.js');		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		// Render the view		parent::display($tpl);	}}
<?php/*** PCRE Regular expressions for UTF-8. Note this file is not actually used by* the rest of the library but these regular expressions can be useful to have* available.* @version $Id$* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*///--------------------------------------------------------------------/*** PCRE Pattern to check a UTF-8 string is valid* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_VALID = '^('.    '[\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.              # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.          # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.   # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.          # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.       # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.           # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.       # plane 16    ')*$';//--------------------------------------------------------------------/*** PCRE Pattern to match single UTF-8 characters* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_MATCH =    '([\x00-\x7F])'.                          # ASCII (including control chars)    '|([\xC2-\xDF][\x80-\xBF])'.              # non-overlong 2-byte    '|(\xE0[\xA0-\xBF][\x80-\xBF])'.          # excluding overlongs    '|([\xE1-\xEC\xEE\xEF][\x80-\xBF]{2})'.   # straight 3-byte    '|(\xED[\x80-\x9F][\x80-\xBF])'.          # excluding surrogates    '|(\xF0[\x90-\xBF][\x80-\xBF]{2})'.       # planes 1-3    '|([\xF1-\xF3][\x80-\xBF]{3})'.           # planes 4-15    '|(\xF4[\x80-\x8F][\x80-\xBF]{2})';       # plane 16//--------------------------------------------------------------------/*** PCRE Pattern to locate bad bytes in a UTF-8 string* Comes from W3 FAQ: Multilingual Forms* Note: modified to include full ASCII range including control chars* @see http://www.w3.org/International/questions/qa-forms-utf-8* @package utf8* @subpackage patterns*/$UTF8_BAD =    '([\x00-\x7F]'.                          # ASCII (including control chars)    '|[\xC2-\xDF][\x80-\xBF]'.               # non-overlong 2-byte    '|\xE0[\xA0-\xBF][\x80-\xBF]'.           # excluding overlongs    '|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}'.    # straight 3-byte    '|\xED[\x80-\x9F][\x80-\xBF]'.           # excluding surrogates    '|\xF0[\x90-\xBF][\x80-\xBF]{2}'.        # planes 1-3    '|[\xF1-\xF3][\x80-\xBF]{3}'.            # planes 4-15    '|\xF4[\x80-\x8F][\x80-\xBF]{2}'.        # plane 16    '|(.{1}))';                              # invalid byte
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Redirect master display controller. * * @package     Joomla.Administrator * @subpackage  com_redirect * @since       1.6 */class RedirectController extends JControllerLegacy{	/**	 * @var		string	The default view.	 * @since   1.6	 */	protected $default_view = 'links';	/**	 * Method to display a view.	 *	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/redirect.php';		// Load the submenu.		RedirectHelper::addSubmenu($this->input->get('view', 'links'));		$view   = $this->input->get('view', 'links');		$layout = $this->input->get('layout', 'default');		$id     = $this->input->getInt('id');		// Check for edit form.		if ($view == 'link' && $layout == 'edit' && !$this->checkEditId('com_redirect.edit.link', $id))		{			// Somehow the person just went to the form - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $id));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_redirect&view=links', false));			return false;		}		parent::display();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php  $fieldSets = $this->form->getFieldsets('attribs'); ?>	<?php foreach ($fieldSets as $name => $fieldSet) : ?>		<?php $label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_CATEGORIES_'.$name.'_FIELDSET_LABEL'; ?>		<?php if ($name != 'editorConfig' && $name != 'basic-limited') : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'attrib-'.$name, trim($label)); ?>			<fieldset>			<?php if (isset($fieldSet->description) && trim($fieldSet->description)) : ?>				<p class="tip"><?php echo $this->escape(JText::_($fieldSet->description));?></p>			<?php endif;			foreach ($this->form->getFieldset($name) as $field) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $field->label; ?>					</div>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach;?>			</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<?php endforeach; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Logger Base Class * * This class is used to be the basis of logger classes to allow for defined functions * to exist regardless of the child class. * * @package     Joomla.Platform * @subpackage  Log * @since       12.2 */abstract class JLogLogger{	/**	 * Options array for the JLog instance.	 * @var    array	 * @since  12.2	 */	protected $options = array();	/**	 * @var    array  Translation array for JLogEntry priorities to text strings.	 * @since  12.2	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERGENCY',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRITICAL',		JLog::ERROR => 'ERROR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   12.2	 */	public function __construct(array &$options)	{		// Set the options for the class.		$this->options = & $options;	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   12.2	 */	abstract public function addEntry(JLogEntry $entry);}/** * Deprecated class placeholder.  You should use JAccessRule instead. * * @package     Joomla.Platform * @subpackage  Access * @since       11.1 * @deprecated  13.3 */abstract class JLogger extends JLogLogger{	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 * @deprecated  13.3	 */	public function __construct(array &$options)	{		JLog::add('JLogger is deprecated. Use JLogLogger instead.', JLog::WARNING, 'deprecated');		parent::__construct($options);	}}
<?php/** * @package     Joomla.Site * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers');?><div class="weblink-category<?php echo $this->pageclass_sfx;?>"><?php if ($this->params->get('show_page_heading')) : ?><h1>	<?php echo $this->escape($this->params->get('page_heading')); ?></h1><?php endif; ?><?php if ($this->params->get('show_category_title', 1)) : ?><h2>	<?php echo JHtml::_('content.prepare', $this->category->title, '', 'com_weblinks.category'); ?></h2><?php endif; ?><?php if ($this->params->get('show_description', 1) || $this->params->def('show_description_image', 1)) : ?>	<div class="category-desc">	<?php if ($this->params->get('show_description_image') && $this->category->getParams()->get('image')) : ?>		<img src="<?php echo $this->category->getParams()->get('image'); ?>"/>	<?php endif; ?>	<?php if ($this->params->get('show_description') && $this->category->description) : ?>		<?php echo JHtml::_('content.prepare', $this->category->description, '', 'com_weblinks.category'); ?>	<?php endif; ?>	<div class="clr"></div>	</div><?php endif; ?><?php echo $this->loadTemplate('items'); ?><?php if (!empty($this->children[$this->category->id])&& $this->maxLevel != 0) : ?>	<div class="cat-children">	<h3><?php echo JText::_('JGLOBAL_SUBCATEGORIES'); ?></h3>	<?php echo $this->loadTemplate('children'); ?>	</div><?php endif; ?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="btn-toolbar">	<div class="btn-group">		<button type="button" class="btn btn-primary" onclick="Joomla.submitbutton('module.save');">		<?php echo JText::_('JSAVE');?></button>	</div>	<div class="btn-group">		<button type="button" class="btn" onclick="window.parent.SqueezeBox.close();">		<?php echo JText::_('JCANCEL');?></button>	</div>	<div class="clearfix"></div></div><?php$this->setLayout('edit');echo $this->loadTemplate();
<?php/** * @package     Joomla.Administrator * @subpackage  mod_toolbar * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Echo the toolbar.echo $toolbar;
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.addSlide', 'slide-contact', JText::_('COM_CONTACT_LINKS'), 'display-links'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'display-links', JText::_('COM_CONTACT_LINKS', true)); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'plain'):?>	<?php echo '<h3>'. JText::_('COM_CONTACT_LINKS').'</h3>';  ?><?php endif; ?><div class="contact-links">	<ul class="nav nav-tabs nav-stacked">		<?php		foreach (range('a', 'e') as $char) :// letters 'a' to 'e'			$link = $this->contact->params->get('link'.$char);			$label = $this->contact->params->get('link'.$char.'_name');			if (!$link) :				continue;			endif;			// Add 'http://' if not present			$link = (0 === strpos($link, 'http')) ? $link : 'http://'.$link;			// If no label is present, take the link			$label = ($label) ? $label : $link;			?>			<li>				<a href="<?php echo $link; ?>">					<?php echo $label; ?>				</a>			</li>		<?php endforeach; ?>	</ul></div><?php if ($this->params->get('presentation_style') == 'sliders') : ?>	<?php echo JHtml::_('bootstrap.endSlide'); ?><?php endif; ?><?php if ($this->params->get('presentation_style') == 'tabs') : ?>	<?php echo JHtml::_('bootstrap.endTab'); ?><?php endif; ?>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('behavior.keepalive');JHtml::_('behavior.formvalidation');?><div class="reset-confirm<?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php echo $this->escape($this->params->get('page_heading')); ?>	</h1>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=reset.confirm'); ?>" method="post" class="form-validate">		<?php foreach ($this->form->getFieldsets() as $fieldset) : ?>		<p><?php echo JText::_($fieldset->label); ?></p>		<fieldset>			<dl>			<?php foreach ($this->form->getFieldset($fieldset->name) as $name => $field) : ?>				<dt><?php echo $field->label; ?></dt>				<dd><?php echo $field->input; ?></dd>			<?php endforeach; ?>			</dl>		</fieldset>		<?php endforeach; ?>		<div>			<button type="submit" class="validate"><?php echo JText::_('JSUBMIT'); ?></button>			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This view is displayed after successfull saving of config data. * Use it to show a message informing about success or simply close a modal window. * * @package     Joomla.Administrator * @subpackage  com_config */class ConfigViewClose extends JViewLegacy{	/**	 * Display the view	 */	public function display($tpl = null)	{		// close a modal window		JFactory::getDocument()->addScriptDeclaration('			window.parent.location.href=window.parent.location.href;			window.parent.SqueezeBox.close();		');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewPositions extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		parent::display($tpl);	}}
<?phpclass Joomla_Sniffs_Commenting_SingleCommentSniff implements PHP_CodeSniffer_Sniff{	/**	 * Returns the token types that this sniff is interested in.	 *	 * @return array(int)	 */	public function register()	{		return array(T_COMMENT);	}	/**	 * Processes the tokens that this sniff is interested in.	 *	 * @param PHP_CodeSniffer_File $phpcsFile The file where the token was found.	 * @param int                  $stackPtr  The position in the stack where	 *                                        the token was found.	 *	 * @return void	 */	public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)	{		$tokens = $phpcsFile->getTokens();		$comment = trim($tokens[$stackPtr]['content']);		/*		 * Hash comments are not allowed.		*/		if (0 === strpos($comment, '#'))		{			$phpcsFile->addError('Hash comments are prohibited; found %s'					, $stackPtr, 'HashComment', array($comment));			return;		}		if (0 !== strpos($comment, '//'))		{			// Not of our concern			return;		}		/*		 * Always have a space between // and the start of comment text.		* The exception to this is if the preceding line consists of a single open bracket.		*/		if (isset($comment{2}) && $comment{2} != ' ')		{			$phpcsFile->addError('Please put a space between the // and the start of comment text; found "%s"'					, $stackPtr, 'NoSpace', array($comment));			return;		}		/*		 * New lines should always start with an upper case letter unless		*    The line is a continuation of a complete sentence		*    The term is code and is case sensitive.(@todo)		*/		if (isset($comment{3}) && $comment{3} != strtoupper($comment{3}))		{			// Comment does not start with an upper case letter			$previous = $phpcsFile->findPrevious(T_COMMENT, $stackPtr - 1);			if ($tokens[$previous]['line'] == $tokens[$stackPtr]['line'] - 1)			{				// There is a comment on the previous line.				$test = trim($tokens[$previous]['content']);				if ('.' != substr($test, strlen($test) - 1))				{					// If the previous comment does not end with a full stop "." we					// assume a sentence spanned over multiple lines.					return;				}			}			$phpcsFile->addError('Please start your comment with a capital letter; found "%s"'					, $stackPtr, 'LowerCase', array($comment));			return;		}		/*		 * Comments should not be on the same line as the code to which they refer		* (which puts them after the code they reference).		* They should be on their own lines.		*/		$previous = $phpcsFile->findPrevious(T_SEMICOLON, $stackPtr);		if ($tokens[$previous]['line'] == $tokens[$stackPtr]['line'])		{			$phpcsFile->addError('Please put your comment on a separate line *preceding* your code; found "%s"'					, $stackPtr, 'Inline', array($comment));			return;		}		/*		 * Always have a single blank line before a comment or block of comments.		 * -- Don't allow preceding "code" - identified by a semicolon ;)		 */		if ($tokens[$previous]['line'] == $tokens[$stackPtr]['line'] - 1)		{			$phpcsFile->addError('Please consider a blank line preceding your comment'					, $stackPtr, 'TooClose');			return;		}		/*		 * Comment blocks that introduce large sections of code and are more than 3 lines long		* should use /* * /  and should use * on each line with the same space/tab rules as doc blocks.		* If you need a large introduction consider whether this block should be separated into a		* method to reduce complexity and therefore providing a full docblock.		*/		$next = $phpcsFile->findNext(T_COMMENT, $stackPtr + 1);		if ($tokens[$next]['line'] == $tokens[$stackPtr]['line'] + 1)		{			// The following line contains also a comment			$nextNext = $phpcsFile->findNext(T_COMMENT, $next + 1);			if ($tokens[$nextNext]['line'] == $tokens[$next]['line'] + 1)			{				// Found 3 lines of // comments - too much.				$phpcsFile->addError('Please consider the /* */ style for comments that span over multiple lines.'						, $stackPtr, 'MultiLine');				return;			}		}	}//function}//class
<?php/** * @package     Joomla.Platform * @subpackage  Image * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Class to manipulate an image. * * @package     Joomla.Platform * @subpackage  Image * @since       11.3 */abstract class JImageFilter{	/**	 * @var    resource  The image resource handle.	 * @since  11.3	 */	protected $handle;	/**	 * Class constructor.	 *	 * @param   resource  $handle  The image resource on which to apply the filter.	 *	 * @since   11.3	 * @throws  InvalidArgumentException	 */	public function __construct($handle)	{		// Make sure the file handle is valid.		if (!is_resource($handle) || (get_resource_type($handle) != 'gd'))		{			JLog::add('The image handle is invalid for the image filter.', JLog::ERROR);			throw new InvalidArgumentException('The image handle is invalid for the image filter.');		}		$this->handle = $handle;	}	/**	 * Method to apply a filter to an image resource.	 *	 * @param   array  $options  An array of options for the filter.	 *	 * @return  void	 *	 * @since   11.3	 */	abstract public function execute(array $options = array());}
<?php/** * @package     Joomla.Plugin * @subpackage  Authentication.ldap * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * LDAP Authentication Plugin * * @package     Joomla.Plugin * @subpackage  Authentication.ldap * @since       1.5 */class PlgAuthenticationLdap extends JPlugin{	/**	 * This method should handle any authentication and report back to the subject	 *	 * @access	public	 * @param   array  $credentials Array holding the user credentials	 * @param   array   $options	Array of extra options	 * @param   object	$response	Authentication response object	 * @return  object  boolean	 * @since 1.5	 */	public function onUserAuthenticate($credentials, $options, &$response)	{		$userdetails = null;		$success = 0;		$userdetails = array();		// For JLog		$response->type = 'LDAP';		// LDAP does not like Blank passwords (tries to Anon Bind which is bad)		if (empty($credentials['password']))		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_PASS_BLANK');			return false;		}		// load plugin params info		$ldap_email		= $this->params->get('ldap_email');		$ldap_fullname	= $this->params->get('ldap_fullname');		$ldap_uid		= $this->params->get('ldap_uid');		$auth_method	= $this->params->get('auth_method');		$ldap = new JClientLdap($this->params);		if (!$ldap->connect())		{			$response->status = JAuthentication::STATUS_FAILURE;			$response->error_message = JText::_('JGLOBAL_AUTH_NO_CONNECT');			return;		}		switch($auth_method)		{			case 'search':			{				// Bind using Connect Username/password				// Force anon bind to mitigate misconfiguration like [#7119]				if (strlen($this->params->get('username')))				{					$bindtest = $ldap->bind();				}				else				{					$bindtest = $ldap->anonymous_bind();				}				if ($bindtest)				{					// Search for users DN					$binddata = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));					if (isset($binddata[0]) && isset($binddata[0]['dn']))					{						// Verify Users Credentials						$success = $ldap->bind($binddata[0]['dn'], $credentials['password'], 1);						// Get users details						$userdetails = $binddata;					} else {						$response->status = JAuthentication::STATUS_FAILURE;						$response->error_message = JText::_('JGLOBAL_AUTH_USER_NOT_FOUND');					}				}				else				{					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_NO_BIND');				}			}	break;			case 'bind':			{				// We just accept the result here				$success = $ldap->bind($credentials['username'], $credentials['password']);				if ($success)				{					$userdetails = $ldap->simple_search(str_replace("[search]", $credentials['username'], $this->params->get('search_string')));				} else {					$response->status = JAuthentication::STATUS_FAILURE;					$response->error_message = JText::_('JGLOBAL_AUTH_BIND_FAILED');				}			}	break;		}		if (!$success)		{			$response->status = JAuthentication::STATUS_FAILURE;			if (!strlen($response->error_message))			{				$response->error_message = JText::_('JGLOBAL_AUTH_INCORRECT');			}		}		else		{			// Grab some details from LDAP and return them			if (isset($userdetails[0][$ldap_uid][0]))			{				$response->username = $userdetails[0][$ldap_uid][0];			}			if (isset($userdetails[0][$ldap_email][0]))			{				$response->email = $userdetails[0][$ldap_email][0];			}			if (isset($userdetails[0][$ldap_fullname][0]))			{				$response->fullname = $userdetails[0][$ldap_fullname][0];			} else {				$response->fullname = $credentials['username'];			}			// Were good - So say so.			$response->status		= JAuthentication::STATUS_SUCCESS;			$response->error_message = '';		}		$ldap->close();	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Complete View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewCompleteHtml extends JViewHtml{	/**	 * The JConfiguration data if present	 *	 * @var    JRegistry	 * @since  3.1	 */	protected $config;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelSetup	 * @since   3.1	 */	protected $model;	/**	 * The session options	 *	 * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options = $this->model->getOptions();		// Get the config string from the session.		$session = JFactory::getSession();		$this->config = $session->get('setup.config', null);		return parent::render();	}}
<?php/** * @package    Joomla.Cli * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt *//** * Finder CLI Bootstrap * * Run the framework bootstrap with a couple of mods based on the script's needs */// We are a valid entry point.const _JEXEC = 1;// Load system definesif (file_exists(dirname(__DIR__) . '/defines.php')){	require_once dirname(__DIR__) . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', dirname(__DIR__));	require_once JPATH_BASE . '/includes/defines.php';}// Get the framework.require_once JPATH_LIBRARIES . '/import.legacy.php';// Bootstrap the CMS libraries.require_once JPATH_LIBRARIES . '/cms.php';// Import the configuration.require_once JPATH_CONFIGURATION . '/configuration.php';// System configuration.$config = new JConfig;// Configure error reporting to maximum for CLI output.error_reporting(E_ALL);ini_set('display_errors', 1);// Load Library language$lang = JFactory::getLanguage();// Try the finder_cli file in the current language (without allowing the loading of the file in the default language)$lang->load('finder_cli', JPATH_SITE, null, false, false)// Fallback to the finder_cli file in the default language|| $lang->load('finder_cli', JPATH_SITE, null, true);/** * A command line cron job to run the Finder indexer. * * @package     Joomla.CLI * @subpackage  com_finder * @since       2.5 */class FinderCli extends JApplicationCli{	/**	 * Start time for the index process	 *	 * @var    string	 * @since  2.5	 */	private $_time = null;	/**	 * Start time for each batch	 *	 * @var    string	 * @since  2.5	 */	private $_qtime = null;	/**	 * Entry point for Finder CLI script	 *	 * @return  void	 *	 * @since   2.5	 */	public function doExecute()	{		// Print a blank line.		$this->out(JText::_('FINDER_CLI'));		$this->out('============================');		$this->out();		$this->_index();		// Print a blank line at the end.		$this->out();	}	/**	 * Run the indexer	 *	 * @return  void	 *	 * @since   2.5	 */	private function _index()	{		$this->_time = microtime(true);		require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/indexer.php';		// Fool the system into thinking we are running as JSite with Finder as the active component		JFactory::getApplication('site');		$_SERVER['HTTP_HOST'] = 'domain.com';		define('JPATH_COMPONENT_ADMINISTRATOR', JPATH_ADMINISTRATOR . '/components/com_finder');		// Disable caching.		$config = JFactory::getConfig();		$config->set('caching', 0);		$config->set('cache_handler', 'file');		// Reset the indexer state.		FinderIndexer::resetState();		// Import the finder plugins.		JPluginHelper::importPlugin('finder');		// Starting Indexer.		$this->out(JText::_('FINDER_CLI_STARTING_INDEXER'), true);		// Trigger the onStartIndex event.		JEventDispatcher::getInstance()->trigger('onStartIndex');		// Remove the script time limit.		@set_time_limit(0);		// Get the indexer state.		$state = FinderIndexer::getState();		// Setting up plugins.		$this->out(JText::_('FINDER_CLI_SETTING_UP_PLUGINS'), true);		// Trigger the onBeforeIndex event.		JEventDispatcher::getInstance()->trigger('onBeforeIndex');		// Startup reporting.		$this->out(JText::sprintf('FINDER_CLI_SETUP_ITEMS', $state->totalItems, round(microtime(true) - $this->_time, 3)), true);		// Get the number of batches.		$t = (int) $state->totalItems;		$c = (int) ceil($t / $state->batchSize);		$c = $c === 0 ? 1 : $c;		try		{			// Process the batches.			for ($i = 0; $i < $c; $i++)			{				// Set the batch start time.				$this->_qtime = microtime(true);				// Reset the batch offset.				$state->batchOffset = 0;				// Trigger the onBuildIndex event.				JEventDispatcher::getInstance()->trigger('onBuildIndex');				// Batch reporting.				$this->out(JText::sprintf('FINDER_CLI_BATCH_COMPLETE', ($i + 1), round(microtime(true) - $this->_qtime, 3)), true);			}		}		catch (Exception $e)		{			// Display the error			$this->out($e->getMessage(), true);			// Reset the indexer state.			FinderIndexer::resetState();			// Close the app			$this->close($e->getCode());		}		// Total reporting.		$this->out(JText::sprintf('FINDER_CLI_PROCESS_COMPLETE', round(microtime(true) - $this->_time, 3)), true);		// Reset the indexer state.		FinderIndexer::resetState();	}}// Instantiate the application object, passing the class name to JCli::getInstance// and use chaining to execute the application.JApplicationCli::getInstance('FinderCli')->execute();
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Client helper class * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 */class JClientHelper{	/**	 * Method to return the array of client layer configuration options	 *	 * @param   string   $client  Client name, currently only 'ftp' is supported	 * @param   boolean  $force   Forces re-creation of the login credentials. Set this to	 *                            true if login credentials in the session storage have changed	 *	 * @return  array    Client layer configuration options, consisting of at least	 *                   these fields: enabled, host, port, user, pass, root	 *	 * @since   11.1	 */	public static function getCredentials($client, $force = false)	{		static $credentials = array();		$client = strtolower($client);		if (!isset($credentials[$client]) || $force)		{			$config = JFactory::getConfig();			// Fetch the client layer configuration options for the specific client			switch ($client)			{				case 'ftp':					$options = array(						'enabled' => $config->get('ftp_enable'),						'host' => $config->get('ftp_host'),						'port' => $config->get('ftp_port'),						'user' => $config->get('ftp_user'),						'pass' => $config->get('ftp_pass'),						'root' => $config->get('ftp_root'));					break;				default:					$options = array('enabled' => false, 'host' => '', 'port' => '', 'user' => '', 'pass' => '', 'root' => '');					break;			}			// If user and pass are not set in global config lets see if they are in the session			if ($options['enabled'] == true && ($options['user'] == '' || $options['pass'] == ''))			{				$session = JFactory::getSession();				$options['user'] = $session->get($client . '.user', null, 'JClientHelper');				$options['pass'] = $session->get($client . '.pass', null, 'JClientHelper');			}			// If user or pass are missing, disable this client			if ($options['user'] == '' || $options['pass'] == '')			{				$options['enabled'] = false;			}			// Save the credentials for later use			$credentials[$client] = $options;		}		return $credentials[$client];	}	/**	 * Method to set client login credentials	 *	 * @param   string  $client  Client name, currently only 'ftp' is supported	 * @param   string  $user    Username	 * @param   string  $pass    Password	 *	 * @return  boolean  True if the given login credentials have been set and are valid	 *	 * @since   11.1	 */	public static function setCredentials($client, $user, $pass)	{		$return = false;		$client = strtolower($client);		// Test if the given credentials are valid		switch ($client)		{			case 'ftp':				$config = JFactory::getConfig();				$options = array('enabled' => $config->get('ftp_enable'), 'host' => $config->get('ftp_host'), 'port' => $config->get('ftp_port'));				if ($options['enabled'])				{					$ftp = JClientFtp::getInstance($options['host'], $options['port']);					// Test the connection and try to log in					if ($ftp->isConnected())					{						if ($ftp->login($user, $pass))						{							$return = true;						}						$ftp->quit();					}				}				break;			default:				break;		}		if ($return)		{			// Save valid credentials to the session			$session = JFactory::getSession();			$session->set($client . '.user', $user, 'JClientHelper');			$session->set($client . '.pass', $pass, 'JClientHelper');			// Force re-creation of the data saved within JClientHelper::getCredentials()			self::getCredentials($client, true);		}		return $return;	}	/**	 * Method to determine if client login credentials are present	 *	 * @param   string  $client  Client name, currently only 'ftp' is supported	 *	 * @return  boolean  True if login credentials are available	 *	 * @since   11.1	 */	public static function hasCredentials($client)	{		$return = false;		$client = strtolower($client);		// Get (unmodified) credentials for this client		switch ($client)		{			case 'ftp':				$config = JFactory::getConfig();				$options = array('enabled' => $config->get('ftp_enable'), 'user' => $config->get('ftp_user'), 'pass' => $config->get('ftp_pass'));				break;			default:				$options = array('enabled' => false, 'user' => '', 'pass' => '');				break;		}		if ($options['enabled'] == false)		{			// The client is disabled in global config, so let's pretend we are OK			$return = true;		}		elseif ($options['user'] != '' && $options['pass'] != '')		{			// Login credentials are available in global config			$return = true;		}		else		{			// Check if login credentials are available in the session			$session = JFactory::getSession();			$user = $session->get($client . '.user', null, 'JClientHelper');			$pass = $session->get($client . '.pass', null, 'JClientHelper');			if ($user != '' && $pass != '')			{				$return = true;			}		}		return $return;	}	/**	 * Determine whether input fields for client settings need to be shown	 *	 * If valid credentials were passed along with the request, they are saved to the session.	 * This functions returns an exception if invalid credentials have been given or if the	 * connection to the server failed for some other reason.	 *	 * @param   string  $client  The name of the client.	 *	 * @return  mixed  True, if FTP settings; JError if using legacy tree.	 *	 * @since   11.1	 * @throws  InvalidArgumentException if credentials invalid	 */	public static function setCredentialsFromRequest($client)	{		// Determine whether FTP credentials have been passed along with the current request		$input = JFactory::getApplication()->input;		$user = $input->post->getString('username', null);		$pass = $input->post->getString('password', null);		if ($user != '' && $pass != '')		{			// Add credentials to the session			if (self::setCredentials($client, $user, $pass))			{				$return = false;			}			else			{				if (class_exists('JError'))				{					$return = JError::raiseWarning('SOME_ERROR_CODE', JText::_('JLIB_CLIENT_ERROR_HELPER_SETCREDENTIALSFROMREQUEST_FAILED'));				}				else				{					throw new InvalidArgumentException('Invalid user credentials');				}			}		}		else		{			// Just determine if the FTP input fields need to be shown			$return = !self::hasCredentials('ftp');		}		return $return;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XCache cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @link        http://xcache.lighttpd.net/ * @since       11.1 */class JCacheStorageXcache extends JCacheStorage{	/**	 * Get cached data by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   11.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$cache_content = xcache_get($cache_id);		if ($cache_content === null)		{			return false;		}		return $cache_content;	}	/**	 * Get all cached data	 *	 * This requires the php.ini setting xcache.admin.enable_auth = Off.	 *	 * @return  array  data	 *	 * @since   11.1	 */	public function getAll()	{		parent::getAll();		$allinfo = xcache_list(XC_TYPE_VAR, 0);		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		$data = array();		foreach ($keys as $key)		{			$namearr = explode('-', $key['name']);			if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')			{				$group = $namearr[2];				if (!isset($data[$group]))				{					$item = new JCacheStorageHelper($group);				}				else				{					$item = $data[$group];				}				$item->updateSize($key['size'] / 1024);				$data[$group] = $item;			}		}		return $data;	}	/**	 * Store the data by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		$store = xcache_set($cache_id, $data, $this->_lifetime);		return $store;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		if (!xcache_isset($cache_id))		{			return true;		}		return xcache_unset($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * This requires the php.ini setting xcache.admin.enable_auth = Off.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode  : cleans all cache in the group	 * notgroup mode  : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   11.1	 */	public function clean($group, $mode = null)	{		$allinfo = xcache_list(XC_TYPE_VAR, 0);		$keys = $allinfo['cache_list'];		$secret = $this->_hash;		foreach ($keys as $key)		{			if (strpos($key['name'], $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				xcache_unset($key['name']);			}		}		return true;	}	/**	 * Garbage collect expired cache data	 *	 * This is a dummy, since xcache has built in garbage collector, turn it	 * on in php.ini by changing default xcache.gc_interval setting from	 * 0 to 3600 (=1 hour)	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function gc()	{		/*		$now = time();		$cachecount = xcache_count(XC_TYPE_VAR);			for ($i = 0; $i < $cachecount; $i ++) {				$allinfo  = xcache_list(XC_TYPE_VAR, $i);				$keys = $allinfo ['cache_list'];				foreach($keys as $key) {					if (strstr($key['name'], $this->_hash)) {						if (($key['ctime'] + $this->_lifetime ) < $this->_now) xcache_unset($key['name']);					}				}			}		 */		return true;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		return (extension_loaded('xcache'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$state			= $this->get('State');$message1		= $state->get('message');$message2		= $state->get('extension_message');?><table class="adminform">	<tbody>		<?php if ($message1) : ?>		<tr>			<th><?php echo $message1 ?></th>		</tr>		<?php endif; ?>		<?php if ($message2) : ?>		<tr>			<td><?php echo $message2; ?></td>		</tr>		<?php endif; ?>	</tbody></table>
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class to fire onContentPrepare for non-article based content. * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlContent{	/**	 * Fire onContentPrepare for content that isn't part of an article.	 *	 * @param   string  $text     The content to be transformed.	 * @param   array   $params   The content params.	 * @param   string  $context  The context of the content to be transformed.	 *	 * @return  string   The content after transformation.	 *	 * @since   11.1	 */	public static function prepare($text, $params = null, $context = 'text')	{		if ($params === null)		{			$params = new JObject;		}		$article = new stdClass;		$article->text = $text;		JPluginHelper::importPlugin('content');		$dispatcher = JEventDispatcher::getInstance();		$dispatcher->trigger('onContentPrepare', array($context, &$article, &$params, 0));		return $article->text;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="items-more"><ol class="nav nav-tabs nav-stacked"><?php	foreach ($this->link_items as &$item) :?>	<li>		<a href="<?php echo JRoute::_(ContentHelperRoute::getArticleRoute($item->slug, $item->catid)); ?>">			<?php echo $item->title; ?></a>	</li><?php endforeach; ?></ol></div>
<?php/** * @package     Joomla.Libraries * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for jQuery JavaScript behaviors * * @package     Joomla.Libraries * @subpackage  HTML * @since       3.0 */abstract class JHtmlJquery{	/**	 * @var    array  Array containing information for loaded files	 * @since  3.0	 */	protected static $loaded = array();	/**	 * Method to load the jQuery JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of jQuery is included for easier debugging.	 *	 * @param   boolean  $noConflict  True to load jQuery in noConflict mode [optional]	 * @param   mixed    $debug       Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function framework($noConflict = true, $debug = null)	{		// Only load once		if (!empty(self::$loaded[__METHOD__]))		{			return;		}		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		JHtml::_('script', 'jui/jquery.min.js', false, true, false, false, $debug);		// Check if we are loading in noConflict		if ($noConflict)		{			JHtml::_('script', 'jui/jquery-noconflict.js', false, true, false, false, false);		}		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Method to load the jQuery UI JavaScript framework into the document head	 *	 * If debugging mode is on an uncompressed version of jQuery UI is included for easier debugging.	 *	 * @param   array  $components  The jQuery UI components to load [optional]	 * @param   mixed  $debug       Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   3.0	 */	public static function ui(array $components = array('core'), $debug = null)	{		// Set an array containing the supported jQuery UI components handled by this method		$supported = array('core', 'sortable');		// Include jQuery		self::framework();		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug  = (boolean) $config->get('debug');		}		// Load each of the requested components		foreach ($components as $component)		{			// Only attempt to load the component if it's supported in core and hasn't already been loaded			if (in_array($component, $supported) && empty(self::$loaded[__METHOD__][$component]))			{				JHtml::_('script', 'jui/jquery.ui.' . $component . '.min.js', false, true, false, false, $debug);				self::$loaded[__METHOD__][$component] = true;			}		}		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_messages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Messages Component Message Model * * @package     Joomla.Administrator * @subpackage  com_messages * @since       1.6 */class MessagesControllerConfig extends JControllerLegacy{	/**	 * Method to save a record.	 */	public function save()	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app   = JFactory::getApplication();		$model = $this->getModel('Config', 'MessagesModel');		$data  = $this->input->post->get('jform', array(), 'array');		// Validate the posted data.		$form	= $model->getForm();		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors	= $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				} else {					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Redirect back to the main list.			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Redirect back to the main list.			$this->setMessage(JText::sprintf('JERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));			return false;		}		// Redirect to the list screen.		$this->setMessage(JText::_('COM_MESSAGES_CONFIG_SAVED'));		$this->setRedirect(JRoute::_('index.php?option=com_messages&view=messages', false));		return true;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><jdoc:include type="component" />
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform" >	<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li><?php echo $field->label; ?>				<?php echo $field->input; ?></li>			<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('JDatabaseException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Database subpackage. * * @package     Joomla.Legacy * @subpackage  Database * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class JDatabaseException extends RuntimeException{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Cache Controller * * @package     Joomla.Administrator * @subpackage  com_cache * @since       1.6 */class CacheController extends JControllerLegacy{	/**	 * @param   boolean			If true, the view output will be cached	 * @param   array  An array of safe url parameters and their variable types, for valid values see {@link JFilterInput::clean()}.	 *	 * @return  JController		This object to support chaining.	 * @since   1.5	 */	public function display($cachable = false, $urlparams = false)	{		require_once JPATH_COMPONENT.'/helpers/cache.php';		// Get the document object.		$document = JFactory::getDocument();		// Set the default view name and format from the Request.		$vName   = $this->input->get('view', 'cache');		$vFormat = $document->getType();		$lName   = $this->input->get('layout', 'default');		// Get and render the view.		if ($view = $this->getView($vName, $vFormat))		{			switch ($vName)			{				case 'purge':					break;				case 'cache':				default:					$model = $this->getModel($vName);					$view->setModel($model, true);					break;			}			$view->setLayout($lName);			// Push document object into the view.			$view->document = $document;			// Load the submenu.			CacheHelper::addSubmenu($this->input->get('view', 'cache'));			$view->display();		}	}	public function delete()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$cid = $this->input->post->get('cid', array(), 'array');		$model = $this->getModel('cache');		if (empty($cid))		{			JError::raiseWarning(500, JText::_('JERROR_NO_ITEMS_SELECTED'));		}		else		{			$model->cleanlist($cid);		}		$this->setRedirect('index.php?option=com_cache&client='.$model->getClient()->id);	}	public function purge()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JInvalid_Token'));		$model = $this->getModel('cache');		$ret = $model->purge();		$msg = JText::_('COM_CACHE_EXPIRED_ITEMS_HAVE_BEEN_PURGED');		$msgType = 'message';		if ($ret === false)		{			$msg = JText::_('Error purging expired items');			$msgType = 'error';		}		$this->setRedirect('index.php?option=com_cache&view=purge', $msg, $msgType);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Analytics embed class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleEmbedAnalytics extends JGoogleEmbed{	/**	 * Method to get the tracking code	 *	 * @return  string  The Google Analytics tracking code	 *	 * @since   12.3	 */	public function getCode()	{		return $this->getOption('code');	}	/**	 * Method to set the tracking code	 *	 * @param   string  $code  The Google Analytics tracking code	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function setCode($code)	{		$this->setOption('code', $code);		return $this;	}	/**	 * Checks if the javascript is set to be asynchronous	 *	 * @return  boolean  True if asynchronous	 *	 * @since   12.3	 */	public function isAsync()	{		return $this->getOption('async') === null ? true : $this->getOption('async');	}	/**	 * Load javascript asynchronously	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function useAsync()	{		$this->setOption('async', true);		return $this;	}	/**	 * Load javascript synchronously	 *	 * @return  JGoogleEmbedAnalytics  The object for method chaining	 *	 * @since   12.3	 */	public function useSync()	{		$this->setOption('async', false);		return $this;	}	/**	 * Add an analytics call	 *	 * @param   string  $method  The name of the function	 * @param   array   $params  The parameters for the call	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addCall($method, $params = array())	{		$call = array('name' => $method, 'params' => $params);		$calls = $this->listCalls();		$calls[] = $call;		$this->setOption('calls', $calls);		return $call;	}	/**	 * List the analytics calls to be executed	 *	 * @return  array  A list of calls	 *	 * @since   12.3	 */	public function listCalls()	{		return $this->getOption('calls') ? $this->getOption('calls') : array();	}	/**	 * Delete a call from the stack	 *	 * @param   int  $index  Index of call to delete (defaults to last added call)	 *	 * @return  array  The deleted call	 *	 * @since   12.3	 */	public function deleteCall($index = null)	{		$calls = $this->listCalls();		if ($index === null)		{			$index = count($calls) - 1;		}		$call = $calls[$index];		unset($calls[$index]);		$calls = array_values($calls);		$this->setOption('calls', $calls);		return $call;	}	/**	 * Create a javascript function from the call parameters	 *	 * @param   string  $method  The name of the function	 * @param   array   $params  The parameters for the call	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createCall($method, $params = array())	{		$params = array_values($params);		if ($this->isAsync())		{			$output = "_gaq.push(['{$method}',";			$output .= substr(json_encode($params), 1, -1);			$output .= ']);';		}		else		{			$output = "pageTracker.{$method}(";			$output .= substr(json_encode($params), 1, -1);			$output .= ');';		}		return $output;	}	/**	 * Add a custom variable to the analytics	 *	 * @param   int     $slot   The slot to store the variable in (1-5)	 * @param   string  $name   The variable name	 * @param   string  $value  The variable value	 * @param   int     $scope  The scope of the variable (1: visitor level, 2: session level, 3: page level)	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addCustomVar($slot, $name, $value, $scope = 3)	{		return $this->addCall('_setCustomVar', array($slot, $name, $value, $scope));	}	/**	 * Get the code to create a custom analytics variable	 *	 * @param   int     $slot   The slot to store the variable in (1-5)	 * @param   string  $name   The variable name	 * @param   string  $value  The variable value	 * @param   int     $scope  The scope of the variable (1: visitor level, 2: session level, 3: page level)	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createCustomVar($slot, $name, $value, $scope = 3)	{		return $this->createCall('_setCustomVar', array($slot, $name, $value, $scope));	}	/**	 * Track an analytics event	 *	 * @param   string   $category     The general event category	 * @param   string   $action       The event action	 * @param   string   $label        The event description	 * @param   string   $value        The value of the event	 * @param   boolean  $noninteract  Don't allow this event to impact bounce statistics	 *	 * @return  array  The added call	 *	 * @since   12.3	 */	public function addEvent($category, $action, $label = null, $value = null, $noninteract = false)	{		return $this->addCall('_trackEvent', array($category, $action, $label, $value, $noninteract));	}	/**	 * Get the code to track an analytics event	 *	 * @param   string   $category     The general event category	 * @param   string   $action       The event action	 * @param   string   $label        The event description	 * @param   string   $value        The value of the event	 * @param   boolean  $noninteract  Don't allow this event to impact bounce statistics	 *	 * @return  string  The created call	 *	 * @since   12.3	 */	public function createEvent($category, $action, $label = null, $value = null, $noninteract = false)	{		return $this->createCall('_trackEvent', array($category, $action, $label, $value, $noninteract));	}	/**	 * Get code to load Google Analytics javascript	 *	 * @return  string  Javascript code	 *	 * @since   12.3	 */	public function getHeader()	{		if (!$this->isAsync())		{			// Synchronous code is included only in the body			return '';		}		if (!$this->getOption('code'))		{			throw new UnexpectedValueException('A Google Analytics tracking code is required.');		}		$code = $this->getOption('code');		$output = '<script type="text/javascript">';		$output .= 'var _gaq = _gaq || [];';		$output .= "_gaq.push(['_setAccount', '{$code}']);";		foreach ($this->listCalls() as $call)		{			$output .= $this->createCall($call['name'], $call['params']);		}		$output .= '_gaq.push(["_trackPageview"]);';		$output .= '</script>';		return $output;	}	/**	 * Google Analytics only needs to be included in the header	 *	 * @return  null	 *	 * @since   12.3	 */	public function getBody()	{		if (!$this->getOption('code'))		{			throw new UnexpectedValueException('A Google Analytics tracking code is required.');		}		$prefix = $this->isSecure() ? 'https://ssl' : 'http://www';		$code = $this->getOption('code');		if ($this->isAsync())		{			$output = '<script type="text/javascript">';			$output .= '(function() {';			$output .= 'var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;';			$output .= "ga.src = '{$prefix}.google-analytics.com/ga.js';";			$output .= 'var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);';			$output .= '})();';			$output .= '</script>';		}		else		{			$output = '<script type="text/javascript">';			$output .= "document.write(unescape(\"%3Cscript src='{$prefix}.google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));";			$output .= '</script>';			$output .= '<script type="text/javascript">';			$output .= 'try{';			$output .= "var pageTracker = _gat._getTracker('{$code}');";			foreach ($this->listCalls() as $call)			{				$output .= $this->createCall($call['name'], $call['params']);			}			$output .= 'pageTracker._trackPageview();';			$output .= '} catch(err) {}</script>';		}		return $output;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once dirname(dirname(__DIR__)) . '/helper/component.php';/** * View for the global configuration * * @package     Joomla.Administrator * @subpackage  com_config * @since       1.5 */class ConfigViewApplication extends JViewLegacy{	public $state;	public $form;	public $data;	/**	 * Method to display the view.	 */	public function display($tpl = null)	{		$form	= $this->get('Form');		$data	= $this->get('Data');		$user = JFactory::getUser();		// Check for model errors.		if ($errors = $this->get('Errors'))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Bind the form to the data.		if ($form && $data)		{			$form->bind($data);		}		// Get the params for com_users.		$usersParams = JComponentHelper::getParams('com_users');		// Get the params for com_media.		$mediaParams = JComponentHelper::getParams('com_media');		// Load settings for the FTP layer.		$ftp = JClientHelper::setCredentialsFromRequest('ftp');		$this->form = &$form;		$this->data = &$data;		$this->ftp = &$ftp;		$this->usersParams = &$usersParams;		$this->mediaParams = &$mediaParams;		$this->components = ConfigHelperComponent::getComponentsWithConfig();		ConfigHelperComponent::loadLanguageForComponents($this->components);		$this->userIsSuperAdmin = $user->authorise('core.admin');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'), 'config.png');		JToolbarHelper::apply('application.apply');		JToolbarHelper::save('application.save');		JToolbarHelper::divider();		JToolbarHelper::cancel('application.cancel');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_SITE_GLOBAL_CONFIGURATION');	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The HTML Joomla Core Pre-Install View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewPreinstallHtml extends InstallationViewDefault{	/**	 * Array of PHP config options     *     * @var    array	 * @since  3.1	 */	protected $options;	/**	 * Array of PHP settings     *     * @var    array	 * @since  3.1	 */	protected $settings;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->options  = $this->model->getPhpOptions();		$this->settings = $this->model->getPhpSettings();		return parent::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderIndexerHelper', __DIR__ . '/helper.php');JLoader::register('FinderIndexerParser', __DIR__ . '/parser.php');JLoader::register('FinderIndexerStemmer', __DIR__ . '/stemmer.php');JLoader::register('FinderIndexerTaxonomy', __DIR__ . '/taxonomy.php');JLoader::register('FinderIndexerToken', __DIR__ . '/token.php');jimport('joomla.filesystem.file');/** * Main indexer class for the Finder indexer package. * * The indexer class provides the core functionality of the Finder * search engine. It is responsible for adding and updating the * content links table; extracting and scoring tokens; and maintaining * all referential information for the content. * * Note: All exceptions thrown from within this class should be caught * by the controller. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */abstract class FinderIndexer{	/**	 * The title context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TITLE_CONTEXT = 1;	/**	 * The text context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const TEXT_CONTEXT = 2;	/**	 * The meta context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const META_CONTEXT = 3;	/**	 * The path context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const PATH_CONTEXT = 4;	/**	 * The misc context identifier.	 *	 * @var    integer	 * @since  2.5	 */	const MISC_CONTEXT = 5;	/**	 * The indexer state object.	 *	 * @var    object	 * @since  2.5	 */	public static $state;	/**	 * The indexer profiler object.	 *	 * @var    object	 * @since  2.5	 */	public static $profiler;	/**	 * Returns a reference to the FinderIndexer object.	 *	 * @return  FinderIndexer instance based on the database driver	 *	 * @since   3.0	 * @throws  RuntimeException if driver class for indexer not present.	 */	public static function getInstance()	{		// Setup the adapter for the indexer.		$format = JFactory::getDbo()->name;		if ($format == 'mysqli')		{			$format = 'mysql';		}		elseif ($format == 'sqlazure')		{			$format = 'sqlsrv';		}		$path = __DIR__ . '/driver/' . $format . '.php';		$class = 'FinderIndexerDriver' . ucfirst($format);		// Check if a parser exists for the format.		if (file_exists($path))		{			// Instantiate the parser.			include_once $path;			return new $class;		}		else		{			// Throw invalid format exception.			throw new RuntimeException(JText::sprintf('COM_FINDER_INDEXER_INVALID_DRIVER', $format));		}	}	/**	 * Method to get the indexer state.	 *	 * @return  object  The indexer state object.	 *	 * @since   2.5	 */	public static function getState()	{		// First, try to load from the internal state.		if (!empty(self::$state))		{			return self::$state;		}		// If we couldn't load from the internal state, try the session.		$session = JFactory::getSession();		$data = $session->get('_finder.state', null);		// If the state is empty, load the values for the first time.		if (empty($data))		{			$data = new JObject;			// Load the default configuration options.			$data->options = JComponentHelper::getParams('com_finder');			// Setup the weight lookup information.			$data->weights = array(				self::TITLE_CONTEXT	=> round($data->options->get('title_multiplier', 1.7), 2),				self::TEXT_CONTEXT	=> round($data->options->get('text_multiplier', 0.7), 2),				self::META_CONTEXT	=> round($data->options->get('meta_multiplier', 1.2), 2),				self::PATH_CONTEXT	=> round($data->options->get('path_multiplier', 2.0), 2),				self::MISC_CONTEXT	=> round($data->options->get('misc_multiplier', 0.3), 2)			);			// Set the current time as the start time.			$data->startTime = JFactory::getDate()->toSQL();			// Set the remaining default values.			$data->batchSize = (int) $data->options->get('batch_size', 50);			$data->batchOffset = 0;			$data->totalItems = 0;			$data->pluginState = array();		}		// Setup the profiler if debugging is enabled.		if (JFactory::getApplication()->getCfg('debug'))		{			self::$profiler = JProfiler::getInstance('FinderIndexer');		}		// Setup the stemmer.		if ($data->options->get('stem', 1) && $data->options->get('stemmer', 'porter_en'))		{			FinderIndexerHelper::$stemmer = FinderIndexerStemmer::getInstance($data->options->get('stemmer', 'porter_en'));		}		// Set the state.		self::$state = $data;		return self::$state;	}	/**	 * Method to set the indexer state.	 *	 * @param   object  $data  A new indexer state object.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 */	public static function setState($data)	{		// Check the state object.		if (empty($data) || !$data instanceof JObject)		{			return false;		}		// Set the new internal state.		self::$state = $data;		// Set the new session state.		$session = JFactory::getSession();		$session->set('_finder.state', $data);		return true;	}	/**	 * Method to reset the indexer state.	 *	 * @return  void	 *	 * @since   2.5	 */	public static function resetState()	{		// Reset the internal state to null.		self::$state = null;		// Reset the session state to null.		$session = JFactory::getSession();		$session->set('_finder.state', null);	}	/**	 * Method to index a content item.	 *	 * @param   FinderIndexerResult  $item    The content item to index.	 * @param   string               $format  The format of the content. [optional]	 *	 * @return  integer  The ID of the record in the links table.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function index($item, $format = 'html');	/**	 * Method to remove a link from the index.	 *	 * @param   integer  $linkId  The id of the link.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function remove($linkId);	/**	 * Method to optimize the index. We use this method to remove unused terms	 * and any other optimizations that might be necessary.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract public function optimize();	/**	 * Method to get a content item's signature.	 *	 * @param   object  $item  The content item to index.	 *	 * @return  string  The content item's signature.	 *	 * @since   2.5	 */	protected static function getSignature($item)	{		// Get the indexer state.		$state = self::getState();		// Get the relevant configuration variables.		$config = array();		$config[] = $state->weights;		$config[] = $state->options->get('stem', 1);		$config[] = $state->options->get('stemmer', 'porter_en');		return md5(serialize(array($item, $config)));	}	/**	 * Method to parse input, tokenize it, and then add it to the database.	 *	 * @param   mixed    $input    String or resource to use as input. A resource	 *                             input will automatically be chunked to conserve	 *                             memory. Strings will be chunked if longer than	 *                             2K in size.	 * @param   integer  $context  The context of the input. See context constants.	 * @param   string   $lang     The language of the input.	 * @param   string   $format   The format of the input.	 *	 * @return  integer  The number of tokens extracted from the input.	 *	 * @since   2.5	 */	protected function tokenizeToDB($input, $context, $lang, $format)	{		$count = 0;		$buffer = null;		if (!empty($input))		{			// If the input is a resource, batch the process out.			if (is_resource($input))			{				// Batch the process out to avoid memory limits.				while (!feof($input))				{					// Read into the buffer.					$buffer .= fread($input, 2048);					// If we haven't reached the end of the file, seek to the last					// space character and drop whatever is after that to make sure					// we didn't truncate a term while reading the input.					if (!feof($input))					{						// Find the last space character.						$ls = strrpos($buffer, ' ');						// Adjust string based on the last space character.						if ($ls)						{							// Truncate the string to the last space character.							$string = substr($buffer, 0, $ls);							// Adjust the buffer based on the last space for the							// next iteration and trim.							$buffer = JString::trim(substr($buffer, $ls));						}						// No space character was found.						else						{							$string = $buffer;						}					}					// We've reached the end of the file, so parse whatever remains.					else					{						$string = $buffer;					}					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}					unset($string);					unset($tokens);				}			}			// If the input is greater than 2K in size, it is more efficient to			// batch out the operation into smaller chunks of work.			elseif (strlen($input) > 2048)			{				$start = 0;				$end = strlen($input);				$chunk = 2048;				// As it turns out, the complex regular expressions we use for				// sanitizing input are not very efficient when given large				// strings. It is much faster to process lots of short strings.				while ($start < $end)				{					// Setup the string.					$string = substr($input, $start, $chunk);					// Find the last space character if we aren't at the end.					$ls = (($start + $chunk) < $end ? strrpos($string, ' ') : false);					// Truncate to the last space character.					if ($ls !== false)					{						$string = substr($string, 0, $ls);					}					// Adjust the start position for the next iteration.					$start += ($ls !== false ? ($ls + 1 - $chunk) + $chunk : $chunk);					// Parse the input.					$string = FinderIndexerHelper::parse($string, $format);					// Check the input.					if (empty($string))					{						continue;					}					// Tokenize the input.					$tokens = FinderIndexerHelper::tokenize($string, $lang);					// Add the tokens to the database.					$count += $this->addTokensToDB($tokens, $context);					// Check if we're approaching the memory limit of the token table.					if ($count > self::$state->options->get('memory_table_limit', 30000))					{						self::toggleTables(false);					}				}			}			else			{				// Parse the input.				$input = FinderIndexerHelper::parse($input, $format);				// Check the input.				if (empty($input))				{					return $count;				}				// Tokenize the input.				$tokens = FinderIndexerHelper::tokenize($input, $lang);				// Add the tokens to the database.				$count = $this->addTokensToDB($tokens, $context);			}		}		return $count;	}	/**	 * Method to add a set of tokens to the database.	 *	 * @param   mixed  $tokens   An array or single FinderIndexerToken object.	 * @param   mixed  $context  The context of the tokens. See context constants. [optional]	 *	 * @return  integer  The number of tokens inserted into the database.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function addTokensToDB($tokens, $context = '');	/**	 * Method to switch the token tables from Memory tables to MyISAM tables	 * when they are close to running out of memory.	 *	 * @param   boolean  $memory  Flag to control how they should be toggled.	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 * @throws  Exception on database error.	 */	abstract protected function toggleTables($memory);}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div id="installer-database">	<form action="<?php echo JRoute::_('index.php?option=com_installer&view=database');?>" method="post" name="adminForm" id="adminForm">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>		<?php if ($this->errorCount === 0) : ?>			<div class="alert alert-info">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_DATABASE_OK'); ?>			</div>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'other')); ?>		<?php else : ?>			<div class="alert alert-error">				<a class="close" data-dismiss="alert" href="#">&times;</a>				<?php echo JText::_('COM_INSTALLER_MSG_DATABASE_ERRORS'); ?>			</div>			<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'problems')); ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'problems', JText::plural('COM_INSTALLER_MSG_N_DATABASE_ERROR_PANEL', $this->errorCount)); ?>				<fieldset class="panelform">						<ul>						<?php if (!$this->filterParams) : ?>							<li><?php echo JText::_('COM_INSTALLER_MSG_DATABASE_FILTER_ERROR'); ?>						<?php endif; ?>						<?php if (!(strncmp($this->schemaVersion, JVERSION, 5) === 0)) : ?>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_ERROR', $this->schemaVersion, JVERSION); ?></li>						<?php endif; ?>						<?php if (($this->updateVersion != JVERSION)) : ?>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATEVERSION_ERROR', $this->updateVersion, JVERSION); ?></li>						<?php endif; ?>						<?php foreach ($this->errors as $line => $error) : ?>							<?php $key = 'COM_INSTALLER_MSG_DATABASE_' . $error->queryType;							$msgs = $error->msgElements;							$file = basename($error->file);							$msg0 = (isset($msgs[0])) ? $msgs[0] : ' ';							$msg1 = (isset($msgs[1])) ? $msgs[1] : ' ';							$msg2 = (isset($msgs[2])) ? $msgs[2] : ' ';							$message = JText::sprintf($key, $file, $msg0, $msg1, $msg2); ?>							<li><?php echo $message; ?></li>						<?php endforeach; ?>						</ul>					</fieldset>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'other', JText::_('COM_INSTALLER_MSG_DATABASE_INFO', true)); ?>				<div class="control-group" >					<fieldset class="panelform">						<ul>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SCHEMA_VERSION', $this->schemaVersion); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_UPDATE_VERSION', $this->updateVersion); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_DRIVER', JFactory::getDbo()->name); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_CHECKED_OK', count($this->results['ok'])); ?></li>							<li><?php echo JText::sprintf('COM_INSTALLER_MSG_DATABASE_SKIPPED', count($this->results['skipped'])); ?></li>						</ul>					</fieldset>				</div>				<?php echo JHtml::_('bootstrap.endTab'); ?>			<input type="hidden" name="task" value="" />			<input type="hidden" name="boxchecked" value="0" />			<?php echo JHtml::_('form.token'); ?>		</div>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform long">	<legend><?php echo JText::_('COM_CONFIG_SEO_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('seo') as $field):			?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>			<?php			endforeach;			?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include dependancies.require_once __DIR__ . '/helper.php';$users = ModLoggedHelper::getList($params);require JModuleHelper::getLayoutPath('mod_logged', $params->get('layout', 'default'));
<?php/** * Squiz_Sniffs_WhiteSpace_SemicolonSpacingSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: SemicolonSpacingSniff.php 8 2010-11-06 00:40:23Z elkuku $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Ensure there is no whitespace before a semicolon <b>;</b>. * * Example: * <b class="bad">echo $a ;</b> * <b class="good">echo $a;</b> * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC1 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_WhiteSpace_SemicolonSpacingSniff implements PHP_CodeSniffer_Sniff{    /**     * A list of tokenizers this sniff supports.     *     * @var array     */    public $supportedTokenizers = array(                                   'PHP',                                   'JS',    );    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_SEMICOLON);    }//function    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param integer                  $stackPtr  The position of the current token     *                                        in the stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {        $tokens = $phpcsFile->getTokens();        $prevType = $tokens[($stackPtr - 1)]['code'];        if(in_array($prevType, PHP_CodeSniffer_Tokens::$emptyTokens) === true)        {            $nonSpace = $phpcsFile->findPrevious(PHP_CodeSniffer_Tokens::$emptyTokens, ($stackPtr - 2), null, true);            $expected = $tokens[$nonSpace]['content'].';';            $found    = $phpcsFile->getTokensAsString($nonSpace, ($stackPtr - $nonSpace)).';';            $error    = sprintf('Space found before semicolon; expected "%s" but found "%s"'            , $expected, $found);            $phpcsFile->addError($error, $stackPtr, 'Incorrect');        }    }//function}//class
<?php/** * @package    Joomla.Language * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * en-GB localise class * * @package  Joomla.Language * @since    1.6 */abstract class En_GBLocalise{	/**	 * Returns the potential suffixes for a specific number of items	 *	 * @param   int  $count  The number of items.	 *	 * @return  array  An array of potential suffixes.	 *	 * @since   1.6	 */	public static function getPluralSuffixes($count)	{		if ($count == 0)		{			$return = array('0');		}		elseif ($count == 1)		{			$return = array('1');		}		else		{			$return = array('MORE');		}		return $return;	}	/**	 * Returns the ignored search words	 *	 * @return  array  An array of ignored search words.	 *	 * @since   1.6	 */	public static function getIgnoredSearchWords()	{		$search_ignore = array();		$search_ignore[] = "and";		$search_ignore[] = "in";		$search_ignore[] = "on";		return $search_ignore;	}	/**	 * Returns the lower length limit of search words	 *	 * @return  integer  The lower length limit of search words.	 *	 * @since   1.6	 */	public static function getLowerLimitSearchWord()	{		return 3;	}	/**	 * Returns the upper length limit of search words	 *	 * @return  integer  The upper length limit of search words.	 *	 * @since   1.6	 */	public static function getUpperLimitSearchWord()	{		return 20;	}	/**	 * Returns the number of chars to display when searching	 *	 * @return  integer  The number of chars to display when searching.	 *	 * @since   1.6	 */	public static function getSearchDisplayedCharactersNumber()	{		return 200;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$fieldSets = $this->form->getFieldsets('params');foreach ($fieldSets as $name => $fieldSet) :	echo JHtml::_('sliders.panel', JText::_($fieldSet->label), $name.'-params');	if (isset($fieldSet->description) && trim($fieldSet->description)) :		echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';	endif;	?>	<fieldset class="panelform">		<legend class="element-invisible"><?php echo JText::_($fieldSet->label); ?></legend>		<ul class="adminformlist">		<?php foreach ($this->form->getFieldset($name) as $field) : ?>			<li><?php echo $field->label; ?>			<?php echo $field->input; ?></li>		<?php endforeach; ?>		</ul>	</fieldset><?php endforeach; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_quickicon * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once __DIR__ . '/helper.php';$buttons = ModQuickIconHelper::getButtons($params);require JModuleHelper::getLayoutPath('mod_quickicon', $params->get('layout', 'default'));
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for creating HTML Grids * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlGrid{	/**	 * Display a boolean setting widget.	 *	 * @param   integer  $i        The row index.	 * @param   integer  $value    The value of the boolean field.	 * @param   string   $taskOn   Task to turn the boolean setting on.	 * @param   string   $taskOff  Task to turn the boolean setting off.	 *	 * @return  string   The boolean setting widget.	 *	 * @since    11.1	 */	public static function boolean($i, $value, $taskOn = null, $taskOff = null)	{		// Load the behavior.		self::behavior();		// Build the title.		$title = ($value) ? JText::_('JYES') : JText::_('JNO');		$title .= '::' . JText::_('JGLOBAL_CLICK_TO_TOGGLE_STATE');		// Build the <a> tag.		$bool = ($value) ? 'true' : 'false';		$task = ($value) ? $taskOff : $taskOn;		$toggle = (!$task) ? false : true;		if ($toggle)		{			$html = '<a class="grid_' . $bool . ' hasTip" title="' . $title . '" rel="{id:\'cb' . $i . '\', task:\'' . $task				. '\'}" href="#toggle"></a>';		}		else		{			$html = '<a class="grid_' . $bool . '"></a>';		}		return $html;	}	/**	 * Method to sort a column in a grid	 *	 * @param   string  $title          The link title	 * @param   string  $order          The order field for the column	 * @param   string  $direction      The current direction	 * @param   string  $selected       The selected ordering	 * @param   string  $task           An optional task override	 * @param   string  $new_direction  An optional direction for the new column	 * @param   string  $tip            An optional text shown as tooltip title instead of $title	 *	 * @return  string	 *	 * @since   11.1	 */	public static function sort($title, $order, $direction = 'asc', $selected = 0, $task = null, $new_direction = 'asc', $tip = '')	{		JHtml::_('behavior.tooltip');		$direction = strtolower($direction);		$icon = array('arrow-up-3', 'arrow-down-3');		$index = (int) ($direction == 'desc');		if ($order != $selected)		{			$direction = $new_direction;		}		else		{			$direction = ($direction == 'desc') ? 'asc' : 'desc';		}		$html = '<a href="#" onclick="Joomla.tableOrdering(\'' . $order . '\',\'' . $direction . '\',\'' . $task . '\');return false;"'			. ' class="hasTip" title="' . JText::_($tip ? $tip : $title) . '::' . JText::_('JGLOBAL_CLICK_TO_SORT_THIS_COLUMN') . '">';		$html .= JText::_($title);		if ($order == $selected)		{			$html .= ' <i class="icon-' . $icon[$index] . '"></i>';		}		$html .= '</a>';		return $html;	}	/**	 * Method to create a checkbox for a grid row.	 *	 * @param   integer  $rowNum      The row index	 * @param   integer  $recId       The record id	 * @param   boolean  $checkedOut  True if item is checke out	 * @param   string   $name        The name of the form element	 *	 * @return  mixed    String of html with a checkbox if item is not checked out, null if checked out.	 */	public static function id($rowNum, $recId, $checkedOut = false, $name = 'cid')	{		if ($checkedOut)		{			return '';		}		else		{			return '<input type="checkbox" id="cb' . $rowNum . '" name="' . $name . '[]" value="' . $recId				. '" onclick="Joomla.isChecked(this.checked);" title="' . JText::sprintf('JGRID_CHECKBOX_ROW_N', ($rowNum + 1)) . '" />';		}	}	/**	 * Displays a checked out icon.	 *	 * @param   object   &$row        A data object (must contain checkedout as a property).	 * @param   integer  $i           The index of the row.	 * @param   string   $identifier  The property name of the primary key or index of the row.	 *	 * @return  string	 *	 * @since   11.1	 */	public static function checkedOut(&$row, $i, $identifier = 'id')	{		$user = JFactory::getUser();		$userid = $user->get('id');		$result = false;		if ($row instanceof JTable)		{			$result = $row->isCheckedOut($userid);		}		else		{			$result = false;		}		$checked = '';		if ($result)		{			$checked = self::_checkedOut($row);		}		else		{			if ($identifier == 'id')			{				$checked = JHtml::_('grid.id', $i, $row->$identifier);			}			else			{				$checked = JHtml::_('grid.id', $i, $row->$identifier, $result, $identifier);			}		}		return $checked;	}	/**	 * Method to create a clickable icon to change the state of an item	 *	 * @param   mixed    $value   Either the scalar value or an object (for backward compatibility, deprecated)	 * @param   integer  $i       The index	 * @param   string   $img1    Image for a positive or on value	 * @param   string   $img0    Image for the empty or off value	 * @param   string   $prefix  An optional prefix for the task	 *	 * @return  string	 *	 * @since   11.1	 */	public static function published($value, $i, $img1 = 'tick.png', $img0 = 'publish_x.png', $prefix = '')	{		if (is_object($value))		{			$value = $value->published;		}		$img = $value ? $img1 : $img0;		$task = $value ? 'unpublish' : 'publish';		$alt = $value ? JText::_('JPUBLISHED') : JText::_('JUNPUBLISHED');		$action = $value ? JText::_('JLIB_HTML_UNPUBLISH_ITEM') : JText::_('JLIB_HTML_PUBLISH_ITEM');		$href = '		<a href="#" onclick="return listItemTask(\'cb' . $i . '\',\'' . $prefix . $task . '\')" title="' . $action . '">'			. JHtml::_('image', 'admin/' . $img, $alt, null, true) . '</a>';		return $href;	}	/**	 * Method to create a select list of states for filtering	 * By default the filter shows only published and unpublished items	 *	 * @param   string  $filter_state  The initial filter state	 * @param   string  $published     The JText string for published	 * @param   string  $unpublished   The JText string for Unpublished	 * @param   string  $archived      The JText string for Archived	 * @param   string  $trashed       The JText string for Trashed	 *	 * @return  string	 *	 * @since   11.1	 */	public static function state($filter_state = '*', $published = 'Published', $unpublished = 'Unpublished', $archived = null, $trashed = null)	{		$state = array('' => '- ' . JText::_('JLIB_HTML_SELECT_STATE') . ' -', 'P' => JText::_($published), 'U' => JText::_($unpublished));		if ($archived)		{			$state['A'] = JText::_($archived);		}		if ($trashed)		{			$state['T'] = JText::_($trashed);		}		return JHtml::_(			'select.genericlist',			$state,			'filter_state',			array(				'list.attr' => 'class="inputbox" size="1" onchange="Joomla.submitform();"',				'list.select' => $filter_state,				'option.key' => null			)		);	}	/**	 * Method to create an icon for saving a new ordering in a grid	 *	 * @param   array   $rows   The array of rows of rows	 * @param   string  $image  The image [UNUSED]	 * @param   string  $task   The task to use, defaults to save order	 *	 * @return  string	 *	 * @since   11.1	 */	public static function order($rows, $image = 'filesave.png', $task = 'saveorder')	{		$href = '<a href="javascript:saveorder(' . (count($rows) - 1) . ', \'' . $task . '\')" rel="tooltip" class="saveorder btn btn-micro pull-right" title="'			. JText::_('JLIB_HTML_SAVE_ORDER') . '"><i class="icon-menu-2"></i></a>';		return $href;	}	/**	 * Method to create a checked out icon with optional overlib in a grid.	 *	 * @param   object   &$row     The row object	 * @param   boolean  $overlib  True if an overlib with checkout information should be created.	 *	 * @return  string   HTMl for the icon and overlib	 *	 * @since   11.1	 */	protected static function _checkedOut(&$row, $overlib = true)	{		$hover = '';		if ($overlib)		{			$text = addslashes(htmlspecialchars($row->editor, ENT_COMPAT, 'UTF-8'));			$date = JHtml::_('date', $row->checked_out_time, JText::_('DATE_FORMAT_LC1'));			$time = JHtml::_('date', $row->checked_out_time, 'H:i');			$hover = '<span class="editlinktip hasTip" title="' . JText::_('JLIB_HTML_CHECKED_OUT') . '::' . $text . '<br />' . $date . '<br />'				. $time . '">';		}		$checked = $hover . JHtml::_('image', 'admin/checked_out.png', null, null, true) . '</span>';		return $checked;	}	/**	 * Method to build the behavior script and add it to the document head.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function behavior()	{		static $loaded;		if (!$loaded)		{			// Build the behavior script.			$js = '		window.addEvent(\'domready\', function(){			actions = $$(\'a.move_up\');			actions.combine($$(\'a.move_down\'));			actions.combine($$(\'a.grid_true\'));			actions.combine($$(\'a.grid_false\'));			actions.combine($$(\'a.grid_trash\'));			actions.each(function(a){				a.addEvent(\'click\', function(){					args = JSON.decode(this.rel);					listItemTask(args.id, args.task);				});			});			$$(\'input.check-all-toggle\').each(function(el){				el.addEvent(\'click\', function(){					if (el.checked) {						document.id(this.form).getElements(\'input[type=checkbox]\').each(function(i){							i.checked = true;						})					}					else {						document.id(this.form).getElements(\'input[type=checkbox]\').each(function(i){							i.checked = false;						})					}				});			});		});';			// Add the behavior to the document head.			$document = JFactory::getDocument();			$document->addScriptDeclaration($js);			$loaded = true;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;require_once JPATH_SITE . '/components/com_content/helpers/route.php';?><?php if ($this->params->get('show_articles')) : ?><div class="contact-articles">	<ul class="nav nav-tabs nav-stacked">		<?php foreach ($this->item->articles as $article) :	?>			<li>				<?php echo JHtml::_('link', JRoute::_(ContentHelperRoute::getArticleRoute($article->slug, $article->catslug)), htmlspecialchars($article->title, ENT_COMPAT, 'UTF-8')); ?>			</li>		<?php endforeach; ?>	</ul></div><?php endif; ?>
<?php/** * @package     Joomla.Platform * @subpackage  Pagination * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Pagination Class. Provides a common interface for content pagination for the * Joomla! Platform. * * @package     Joomla.Platform * @subpackage  Pagination * @since       11.1 */class JPagination{	/**	 * @var    integer  The record number to start displaying from.	 * @since  11.1	 */	public $limitstart = null;	/**	 * @var    integer  Number of rows to display per page.	 * @since  11.1	 */	public $limit = null;	/**	 * @var    integer  Total number of rows.	 * @since  11.1	 */	public $total = null;	/**	 * @var    integer  Prefix used for request variables.	 * @since  11.1	 */	public $prefix = null;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStart;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesStop;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesCurrent;	/**	 * @var    integer	 * @since  12.2	 */	public $pagesTotal;	/**	 * @var    boolean  View all flag	 * @since  12.1	 */	protected $viewall = false;	/**	 * Additional URL parameters to be added to the pagination URLs generated by the class.  These	 * may be useful for filters and extra values when dealing with lists and GET requests.	 *	 * @var    array	 * @since  12.1	 */	protected $additionalUrlParams = array();	/**	 * Constructor.	 *	 * @param   integer  $total       The total number of items.	 * @param   integer  $limitstart  The offset of the item to start at.	 * @param   integer  $limit       The number of items to display per page.	 * @param   string   $prefix      The prefix used for request variables.	 *	 * @since   11.1	 */	public function __construct($total, $limitstart, $limit, $prefix = '')	{		// Value/type checking.		$this->total = (int) $total;		$this->limitstart = (int) max($limitstart, 0);		$this->limit = (int) max($limit, 0);		$this->prefix = $prefix;		if ($this->limit > $this->total)		{			$this->limitstart = 0;		}		if (!$this->limit)		{			$this->limit = $total;			$this->limitstart = 0;		}		/*		 * If limitstart is greater than total (i.e. we are asked to display records that don't exist)		 * then set limitstart to display the last natural page of results		 */		if ($this->limitstart > $this->total - $this->limit)		{			$this->limitstart = max(0, (int) (ceil($this->total / $this->limit) - 1) * $this->limit);		}		// Set the total pages and current page values.		if ($this->limit > 0)		{			$this->pagesTotal = ceil($this->total / $this->limit);			$this->pagesCurrent = ceil(($this->limitstart + 1) / $this->limit);		}		// Set the pagination iteration loop values.		$displayedPages = 10;		$this->pagesStart = $this->pagesCurrent - ($displayedPages / 2);		if ($this->pagesStart < 1)		{			$this->pagesStart = 1;		}		if ($this->pagesStart + $displayedPages > $this->pagesTotal)		{			$this->pagesStop = $this->pagesTotal;			if ($this->pagesTotal < $displayedPages)			{				$this->pagesStart = 1;			}			else			{				$this->pagesStart = $this->pagesTotal - $displayedPages + 1;			}		}		else		{			$this->pagesStop = $this->pagesStart + $displayedPages - 1;		}		// If we are viewing all records set the view all flag to true.		if ($limit == 0)		{			$this->viewall = true;		}	}	/**	 * Method to set an additional URL parameter to be added to all pagination class generated	 * links.	 *	 * @param   string  $key    The name of the URL parameter for which to set a value.	 * @param   mixed   $value  The value to set for the URL parameter.	 *	 * @return  mixed  The old value for the parameter.	 *	 * @since   11.1	 */	public function setAdditionalUrlParam($key, $value)	{		// Get the old value to return and set the new one for the URL parameter.		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		// If the passed parameter value is null unset the parameter, otherwise set it to the given value.		if ($value === null)		{			unset($this->additionalUrlParams[$key]);		}		else		{			$this->additionalUrlParams[$key] = $value;		}		return $result;	}	/**	 * Method to get an additional URL parameter (if it exists) to be added to	 * all pagination class generated links.	 *	 * @param   string  $key  The name of the URL parameter for which to get the value.	 *	 * @return  mixed  The value if it exists or null if it does not.	 *	 * @since   11.1	 */	public function getAdditionalUrlParam($key)	{		$result = isset($this->additionalUrlParams[$key]) ? $this->additionalUrlParams[$key] : null;		return $result;	}	/**	 * Return the rationalised offset for a row with a given index.	 *	 * @param   integer  $index  The row index	 *	 * @return  integer  Rationalised offset for a row with a given index.	 *	 * @since   11.1	 */	public function getRowOffset($index)	{		return $index + 1 + $this->limitstart;	}	/**	 * Return the pagination data object, only creating it if it doesn't already exist.	 *	 * @return  object   Pagination data object.	 *	 * @since   11.1	 */	public function getData()	{		static $data;		if (!is_object($data))		{			$data = $this->_buildDataObject();		}		return $data;	}	/**	 * Create and return the pagination pages counter string, ie. Page 2 of 4.	 *	 * @return  string   Pagination pages counter string.	 *	 * @since   11.1	 */	public function getPagesCounter()	{		$html = null;		if ($this->pagesTotal > 1)		{			$html .= JText::sprintf('JLIB_HTML_PAGE_CURRENT_OF_TOTAL', $this->pagesCurrent, $this->pagesTotal);		}		return $html;	}	/**	 * Create and return the pagination result set counter string, e.g. Results 1-10 of 42	 *	 * @return  string   Pagination result set counter string.	 *	 * @since   11.1	 */	public function getResultsCounter()	{		$html = null;		$fromResult = $this->limitstart + 1;		// If the limit is reached before the end of the list.		if ($this->limitstart + $this->limit < $this->total)		{			$toResult = $this->limitstart + $this->limit;		}		else		{			$toResult = $this->total;		}		// If there are results found.		if ($this->total > 0)		{			$msg = JText::sprintf('JLIB_HTML_RESULTS_OF', $fromResult, $toResult, $this->total);			$html .= "\n" . $msg;		}		else		{			$html .= "\n" . JText::_('JLIB_HTML_NO_RECORDS_FOUND');		}		return $html;	}	/**	 * Create and return the pagination page list string, ie. Previous, Next, 1 2 3 ... x.	 *	 * @return  string  Pagination page list string.	 *	 * @since   11.1	 */	public function getPagesLinks()	{		$app = JFactory::getApplication();		// Build the page navigation list.		$data = $this->_buildDataObject();		$list = array();		$list['prefix'] = $this->prefix;		$itemOverride = false;		$listOverride = false;		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_item_active') && function_exists('pagination_item_inactive'))			{				$itemOverride = true;			}			if (function_exists('pagination_list_render'))			{				$listOverride = true;			}		}		// Build the select list		if ($data->all->base !== null)		{			$list['all']['active'] = true;			$list['all']['data'] = ($itemOverride) ? pagination_item_active($data->all) : $this->_item_active($data->all);		}		else		{			$list['all']['active'] = false;			$list['all']['data'] = ($itemOverride) ? pagination_item_inactive($data->all) : $this->_item_inactive($data->all);		}		if ($data->start->base !== null)		{			$list['start']['active'] = true;			$list['start']['data'] = ($itemOverride) ? pagination_item_active($data->start) : $this->_item_active($data->start);		}		else		{			$list['start']['active'] = false;			$list['start']['data'] = ($itemOverride) ? pagination_item_inactive($data->start) : $this->_item_inactive($data->start);		}		if ($data->previous->base !== null)		{			$list['previous']['active'] = true;			$list['previous']['data'] = ($itemOverride) ? pagination_item_active($data->previous) : $this->_item_active($data->previous);		}		else		{			$list['previous']['active'] = false;			$list['previous']['data'] = ($itemOverride) ? pagination_item_inactive($data->previous) : $this->_item_inactive($data->previous);		}		// Make sure it exists		$list['pages'] = array();		foreach ($data->pages as $i => $page)		{			if ($page->base !== null)			{				$list['pages'][$i]['active'] = true;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_active($page) : $this->_item_active($page);			}			else			{				$list['pages'][$i]['active'] = false;				$list['pages'][$i]['data'] = ($itemOverride) ? pagination_item_inactive($page) : $this->_item_inactive($page);			}		}		if ($data->next->base !== null)		{			$list['next']['active'] = true;			$list['next']['data'] = ($itemOverride) ? pagination_item_active($data->next) : $this->_item_active($data->next);		}		else		{			$list['next']['active'] = false;			$list['next']['data'] = ($itemOverride) ? pagination_item_inactive($data->next) : $this->_item_inactive($data->next);		}		if ($data->end->base !== null)		{			$list['end']['active'] = true;			$list['end']['data'] = ($itemOverride) ? pagination_item_active($data->end) : $this->_item_active($data->end);		}		else		{			$list['end']['active'] = false;			$list['end']['data'] = ($itemOverride) ? pagination_item_inactive($data->end) : $this->_item_inactive($data->end);		}		if ($this->total > $this->limit)		{			return ($listOverride) ? pagination_list_render($list) : $this->_list_render($list);		}		else		{			return '';		}	}	/**	 * Return the pagination footer.	 *	 * @return  string   Pagination footer.	 *	 * @since   11.1	 */	public function getListFooter()	{		$app = JFactory::getApplication();		$list = array();		$list['prefix'] = $this->prefix;		$list['limit'] = $this->limit;		$list['limitstart'] = $this->limitstart;		$list['total'] = $this->total;		$list['limitfield'] = $this->getLimitBox();		$list['pagescounter'] = $this->getPagesCounter();		$list['pageslinks'] = $this->getPagesLinks();		$chromePath = JPATH_THEMES . '/' . $app->getTemplate() . '/html/pagination.php';		if (file_exists($chromePath))		{			include_once $chromePath;			if (function_exists('pagination_list_footer'))			{				return pagination_list_footer($list);			}		}		return $this->_list_footer($list);	}	/**	 * Creates a dropdown box for selecting how many records to show per page.	 *	 * @return  string  The HTML for the limit # input box.	 *	 * @since   11.1	 */	public function getLimitBox()	{		$app = JFactory::getApplication();		$limits = array();		// Make the option list.		for ($i = 5; $i <= 30; $i += 5)		{			$limits[] = JHtml::_('select.option', "$i");		}		$limits[] = JHtml::_('select.option', '50', JText::_('J50'));		$limits[] = JHtml::_('select.option', '100', JText::_('J100'));		$limits[] = JHtml::_('select.option', '0', JText::_('JALL'));		$selected = $this->viewall ? 0 : $this->limit;		// Build the select list.		if ($app->isAdmin())		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="Joomla.submitform();"',				'value',				'text',				$selected			);		}		else		{			$html = JHtml::_(				'select.genericlist',				$limits,				$this->prefix . 'limit',				'class="inputbox input-mini" size="1" onchange="this.form.submit()"',				'value',				'text',				$selected			);		}		return $html;	}	/**	 * Return the icon to move an item UP.	 *	 * @param   integer  $i          The row index.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item up or a space.	 *	 * @since   11.1	 */	public function orderUpIcon($i, $condition = true, $task = 'orderup', $alt = 'JLIB_HTML_MOVE_UP', $enabled = true, $checkbox = 'cb')	{		if (($i > 0 || ($i + $this->limitstart > 0)) && $condition)		{			return JHtml::_('jgrid.orderUp', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Return the icon to move an item DOWN.	 *	 * @param   integer  $i          The row index.	 * @param   integer  $n          The number of items in the list.	 * @param   boolean  $condition  True to show the icon.	 * @param   string   $task       The task to fire.	 * @param   string   $alt        The image alternative text string.	 * @param   boolean  $enabled    An optional setting for access control on the action.	 * @param   string   $checkbox   An optional prefix for checkboxes.	 *	 * @return  string   Either the icon to move an item down or a space.	 *	 * @since   11.1	 */	public function orderDownIcon($i, $n, $condition = true, $task = 'orderdown', $alt = 'JLIB_HTML_MOVE_DOWN', $enabled = true, $checkbox = 'cb')	{		if (($i < $n - 1 || $i + $this->limitstart < $this->total - 1) && $condition)		{			return JHtml::_('jgrid.orderDown', $i, $task, '', $alt, $enabled, $checkbox);		}		else		{			return '&#160;';		}	}	/**	 * Create the HTML for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list footer	 *	 * @since   11.1	 */	protected function _list_footer($list)	{		$html = "<div class=\"list-footer\">\n";		$html .= "\n<div class=\"limit\">" . JText::_('JGLOBAL_DISPLAY_NUM') . $list['limitfield'] . "</div>";		$html .= $list['pageslinks'];		$html .= "\n<div class=\"counter\">" . $list['pagescounter'] . "</div>";		$html .= "\n<input type=\"hidden\" name=\"" . $list['prefix'] . "limitstart\" value=\"" . $list['limitstart'] . "\" />";		$html .= "\n</div>";		return $html;	}	/**	 * Create the html for a list footer	 *	 * @param   array  $list  Pagination list data structure.	 *	 * @return  string  HTML for a list start, previous, next,end	 *	 * @since   11.1	 */	protected function _list_render($list)	{		// Reverse output rendering for right-to-left display.		$html = '<ul>';		$html .= '<li class="pagination-start">' . $list['start']['data'] . '</li>';		$html .= '<li class="pagination-prev">' . $list['previous']['data'] . '</li>';		foreach ($list['pages'] as $page)		{			$html .= '<li>' . $page['data'] . '</li>';		}		$html .= '<li class="pagination-next">' . $list['next']['data'] . '</li>';		$html .= '<li class="pagination-end">' . $list['end']['data'] . '</li>';		$html .= '</ul>';		return $html;	}	/**	 * Method to create an active pagination link to the item	 *	 * @param   JPaginationObject  $item  The object with which to make an active link.	 *	 * @return   string  HTML link	 *	 * @since    11.1	 */	protected function _item_active(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			if ($item->base > 0)			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix . "limitstart.value=" . $item->base					. "; Joomla.submitform();return false;\">" . $item->text . "</a>";			}			else			{				return "<a title=\"" . $item->text . "\" onclick=\"document.adminForm." . $this->prefix					. "limitstart.value=0; Joomla.submitform();return false;\">" . $item->text . "</a>";			}		}		else		{			return "<a title=\"" . $item->text . "\" href=\"" . $item->link . "\" class=\"pagenav\">" . $item->text . "</a>";		}	}	/**	 * Method to create an inactive pagination string	 *	 * @param   JPaginationObject  $item  The item to be processed	 *	 * @return  string	 *	 * @since   11.1	 */	protected function _item_inactive(JPaginationObject $item)	{		$app = JFactory::getApplication();		if ($app->isAdmin())		{			return "<span>" . $item->text . "</span>";		}		else		{			return "<span class=\"pagenav\">" . $item->text . "</span>";		}	}	/**	 * Create and return the pagination data object.	 *	 * @return  object  Pagination data object.	 *	 * @since   11.1	 */	protected function _buildDataObject()	{		$data = new stdClass;		// Build the additional URL parameters string.		$params = '';		if (!empty($this->additionalUrlParams))		{			foreach ($this->additionalUrlParams as $key => $value)			{				$params .= '&' . $key . '=' . $value;			}		}		$data->all = new JPaginationObject(JText::_('JLIB_HTML_VIEW_ALL'), $this->prefix);		if (!$this->viewall)		{			$data->all->base = '0';			$data->all->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=');		}		// Set the start and previous data objects.		$data->start = new JPaginationObject(JText::_('JLIB_HTML_START'), $this->prefix);		$data->previous = new JPaginationObject(JText::_('JPREV'), $this->prefix);		if ($this->pagesCurrent > 1)		{			$page = ($this->pagesCurrent - 2) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $page = $page == 0 ? '' : $page;			$data->start->base = '0';			$data->start->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=0');			$data->previous->base = $page;			$data->previous->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $page);		}		// Set the next and end data objects.		$data->next = new JPaginationObject(JText::_('JNEXT'), $this->prefix);		$data->end = new JPaginationObject(JText::_('JLIB_HTML_END'), $this->prefix);		if ($this->pagesCurrent < $this->pagesTotal)		{			$next = $this->pagesCurrent * $this->limit;			$end = ($this->pagesTotal - 1) * $this->limit;			$data->next->base = $next;			$data->next->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $next);			$data->end->base = $end;			$data->end->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $end);		}		$data->pages = array();		$stop = $this->pagesStop;		for ($i = $this->pagesStart; $i <= $stop; $i++)		{			$offset = ($i - 1) * $this->limit;			// Set the empty for removal from route			// @todo remove code: $offset = $offset == 0 ? '' : $offset;			$data->pages[$i] = new JPaginationObject($i, $this->prefix);			if ($i != $this->pagesCurrent || $this->viewall)			{				$data->pages[$i]->base = $offset;				$data->pages[$i]->link = JRoute::_($params . '&' . $this->prefix . 'limitstart=' . $offset);			}			elseif ($i = $this->pagesCurrent)			{				$data->pages[$i]->active = true;			}		}		return $data;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  void	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function set($property, $value = null)	{		JLog::add('JPagination::set() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		$this->$property = $value;	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   12.2	 * @deprecated  13.3  Access the properties directly.	 */	public function get($property, $default = null)	{		JLog::add('JPagination::get() is deprecated. Access the properties directly.', JLog::WARNING, 'deprecated');		if (strpos($property, '.'))		{			$prop = explode('.', $property);			$prop[1] = ucfirst($prop[1]);			$property = implode($prop);		}		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Language Form Field class. * * @package  Joomla.Installation * @since    1.6 */class JFormFieldLanguage extends JFormFieldList{	/**	 * The form field type.	 *	 * @var		string	 * @since   1.6	 */	protected $type = 'Language';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   1.6	 */	protected function getOptions()	{		$app = JFactory::getApplication();		// Detect the native language.		$native = JLanguageHelper::detectLanguage();		if (empty($native))		{			$native = 'en-GB';		}		// Get a forced language if it exists.		$forced = $app->getLocalise();		if (!empty($forced['language']))		{			$native = $forced['language'];		}		// If a language is already set in the session, use this instead		$model   = new InstallationModelSetup;		$options = $model->getOptions();		if (isset($options['language']))		{			$native = $options['language'];		}		// Get the list of available languages.		$options = JLanguageHelper::createLanguageList($native);		if (!$options || $options  instanceof Exception)		{			$options = array();		}		// Sort languages by name		else		{			usort($options, array($this, '_sortLanguages'));		}		// Set the default value from the native language.		$this->value = $native;		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}	/**	 * Method to sort languages by name.	 *	 * @param   string  $a  The first value to determine sort	 * @param   string  $b  The second value to determine sort	 *	 * @return  string	 *	 * @since    3.1	 */	protected function _sortLanguages($a, $b)	{		return strcmp($a['text'], $b['text']);	}}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for javascript behaviors * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlBehavior{	/**	 * @var   array   array containing information for loaded files	 */	protected static $loaded = array();	/**	 * Method to load the MooTools framework into the document head	 *	 * If debugging mode is on an uncompressed version of MooTools is included for easier debugging.	 *	 * @param   string  $extras  MooTools file to load	 * @param   mixed   $debug   Is debugging mode on? [optional]	 *	 * @return  void	 *	 * @since   11.1	 */	public static function framework($extras = false, $debug = null)	{		$type = $extras ? 'more' : 'core';		// Only load once		if (!empty(self::$loaded[__METHOD__][$type]))		{			return;		}		// If no debugging value is set, use the configuration setting		if ($debug === null)		{			$config = JFactory::getConfig();			$debug = $config->get('debug');		}		if ($type != 'core' && empty(self::$loaded[__METHOD__]['core']))		{			self::framework(false, $debug);		}		JHtml::_('script', 'system/mootools-' . $type . '.js', false, true, false, false, $debug);		JHtml::_('script', 'system/core.js', false, true);		self::$loaded[__METHOD__][$type] = true;		return;	}	/**	 * Add unobtrusive javascript support for image captions.	 *	 * @param   string  $selector  The selector for which a caption behaviour is to be applied.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function caption($selector = 'img.caption')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$selector]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/caption.js', true, true);		// Attach caption to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('load', function() {				new JCaption('" . $selector . "');			});"		);		// Set static array		self::$loaded[__METHOD__][$selector] = true;	}	/**	 * Add unobtrusive javascript support for form validation.	 *	 * To enable form validation the form tag must have class="form-validate".	 * Each field that needs to be validated needs to have class="validate".	 * Additional handlers can be added to the handler for username, password,	 * numeric and email. To use these add class="validate-email" and so on.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function formvalidation()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Add validate.js language strings		JText::script('JLIB_FORM_FIELD_INVALID');		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/validate.js', true, true);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for submenu switcher support in	 * Global Configuration and System Information.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function switcher()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/switcher.js', true, true);		$script = "			document.switcher = null;			window.addEvent('domready', function(){				toggler = document.id('submenu');				element = document.id('config-document');				if (element) {					document.switcher = new JSwitcher(toggler, element, {cookieName: toggler.getProperty('class')});				}			});";		JFactory::getDocument()->addScriptDeclaration($script);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a combobox effect.	 *	 * Note that this control is only reliable in absolutely positioned elements.	 * Avoid using a combobox in a slider or dynamic pane.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function combobox()	{		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/combobox.js', true, true);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a hover tooltips.	 *	 * Add a title attribute to any element in the form	 * title="title::text"	 *	 *	 * Uses the core Tips class in MooTools.	 *	 * @param   string  $selector  The class selector for the tooltip.	 * @param   array   $params    An array of options for the tooltip.	 *                             Options for the tooltip can be:	 *                             - maxTitleChars  integer   The maximum number of characters in the tooltip title (defaults to 50).	 *                             - offsets        object    The distance of your tooltip from the mouse (defaults to {'x': 16, 'y': 16}).	 *                             - showDelay      integer   The millisecond delay the show event is fired (defaults to 100).	 *                             - hideDelay      integer   The millisecond delay the hide hide is fired (defaults to 100).	 *                             - className      string    The className your tooltip container will get.	 *                             - fixed          boolean   If set to true, the toolTip will not follow the mouse.	 *                             - onShow         function  The default function for the show event, passes the tip element	 *                               and the currently hovered element.	 *                             - onHide         function  The default function for the hide event, passes the currently	 *                               hovered element.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function tooltip($selector = '.hasTip', $params = array())	{		$sig = md5(serialize(array($selector, $params)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		// Include MooTools framework		self::framework(true);		// Setup options object		$opt['maxTitleChars'] = (isset($params['maxTitleChars']) && ($params['maxTitleChars'])) ? (int) $params['maxTitleChars'] : 50;		// Offsets needs an array in the format: array('x'=>20, 'y'=>30)		$opt['offset']    = (isset($params['offset']) && (is_array($params['offset']))) ? $params['offset'] : null;		$opt['showDelay'] = (isset($params['showDelay'])) ? (int) $params['showDelay'] : null;		$opt['hideDelay'] = (isset($params['hideDelay'])) ? (int) $params['hideDelay'] : null;		$opt['className'] = (isset($params['className'])) ? $params['className'] : null;		$opt['fixed']     = (isset($params['fixed']) && ($params['fixed'])) ? true : false;		$opt['onShow']    = (isset($params['onShow'])) ? '\\' . $params['onShow'] : null;		$opt['onHide']    = (isset($params['onHide'])) ? '\\' . $params['onHide'] : null;		$options = JHtml::getJSObject($opt);		// Attach tooltips to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('domready', function() {			$$('$selector').each(function(el) {				var title = el.get('title');				if (title) {					var parts = title.split('::', 2);					el.store('tip:title', parts[0]);					el.store('tip:text', parts[1]);				}			});			var JTooltips = new Tips($$('$selector'), $options);		});"		);		// Set static array		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * Add unobtrusive javascript support for modal links.	 *	 * @param   string  $selector  The selector for which a modal behaviour is to be applied.	 * @param   array   $params    An array of parameters for the modal behaviour.	 *                             Options for the modal behaviour can be:	 *                            - ajaxOptions	 *                            - size	 *                            - shadow	 *                            - overlay	 *                            - onOpen	 *                            - onClose	 *                            - onUpdate	 *                            - onResize	 *                            - onShow	 *                            - onHide	 *	 * @return  void	 *	 * @since   11.1	 */	public static function modal($selector = 'a.modal', $params = array())	{		$document = JFactory::getDocument();		// Load the necessary files if they haven't yet been loaded		if (!isset(self::$loaded[__METHOD__]))		{			// Include MooTools framework			self::framework(true);			// Load the javascript and css			JHtml::_('script', 'system/modal.js', true, true);			JHtml::_('stylesheet', 'system/modal.css', array(), true);		}		$sig = md5(serialize(array($selector, $params)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		// Setup options object		$opt['ajaxOptions']   = (isset($params['ajaxOptions']) && (is_array($params['ajaxOptions']))) ? $params['ajaxOptions'] : null;		$opt['handler']       = (isset($params['handler'])) ? $params['handler'] : null;		$opt['parseSecure']   = (isset($params['parseSecure'])) ? (bool) $params['parseSecure'] : null;		$opt['closable']      = (isset($params['closable'])) ? (bool) $params['closable'] : null;		$opt['closeBtn']      = (isset($params['closeBtn'])) ? (bool) $params['closeBtn'] : null;		$opt['iframePreload'] = (isset($params['iframePreload'])) ? (bool) $params['iframePreload'] : null;		$opt['iframeOptions'] = (isset($params['iframeOptions']) && (is_array($params['iframeOptions']))) ? $params['iframeOptions'] : null;		$opt['size']          = (isset($params['size']) && (is_array($params['size']))) ? $params['size'] : null;		$opt['shadow']        = (isset($params['shadow'])) ? $params['shadow'] : null;		$opt['overlay']       = (isset($params['overlay'])) ? $params['overlay'] : null;		$opt['onOpen']        = (isset($params['onOpen'])) ? $params['onOpen'] : null;		$opt['onClose']       = (isset($params['onClose'])) ? $params['onClose'] : null;		$opt['onUpdate']      = (isset($params['onUpdate'])) ? $params['onUpdate'] : null;		$opt['onResize']      = (isset($params['onResize'])) ? $params['onResize'] : null;		$opt['onMove']        = (isset($params['onMove'])) ? $params['onMove'] : null;		$opt['onShow']        = (isset($params['onShow'])) ? $params['onShow'] : null;		$opt['onHide']        = (isset($params['onHide'])) ? $params['onHide'] : null;		if (isset($params['fullScreen']) && (bool) $params['fullScreen'])		{			$opt['size']      = array('x' => '\\window.getSize().x-80', 'y' => '\\window.getSize().y-80');		}		$options = JHtml::getJSObject($opt);		// Attach modal behavior to document		$document			->addScriptDeclaration(			"		window.addEvent('domready', function() {			SqueezeBox.initialize(" . $options . ");			SqueezeBox.assign($$('" . $selector . "'), {				parse: 'rel'			});		});"		);		// Set static array		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * JavaScript behavior to allow shift select in grids	 *	 * @param   string  $id  The id of the form for which a multiselect behaviour is to be applied.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function multiselect($id = 'adminForm')	{		// Only load once		if (isset(self::$loaded[__METHOD__][$id]))		{			return;		}		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/multiselect.js', true, true);		// Attach multiselect to document		JFactory::getDocument()->addScriptDeclaration(			"window.addEvent('domready', function() {				new Joomla.JMultiSelect('" . $id . "');			});"		);		// Set static array		self::$loaded[__METHOD__][$id] = true;		return;	}	/**	 * Add unobtrusive javascript support for a collapsible tree.	 *	 * @param   string  $id      An index	 * @param   array   $params  An array of options.	 * @param   array   $root    The root node	 *	 * @return  void	 *	 * @since   11.1	 */	public static function tree($id, $params = array(), $root = array())	{		// Include MooTools framework		self::framework();		JHtml::_('script', 'system/mootree.js', true, true, false, false);		JHtml::_('stylesheet', 'system/mootree.css', array(), true);		if (isset(self::$loaded[__METHOD__][$id]))		{			return;		}		// Setup options object		$opt['div']   = (array_key_exists('div', $params)) ? $params['div'] : $id . '_tree';		$opt['mode']  = (array_key_exists('mode', $params)) ? $params['mode'] : 'folders';		$opt['grid']  = (array_key_exists('grid', $params)) ? '\\' . $params['grid'] : true;		$opt['theme'] = (array_key_exists('theme', $params)) ? $params['theme'] : JHtml::_('image', 'system/mootree.gif', '', array(), true, true);		// Event handlers		$opt['onExpand'] = (array_key_exists('onExpand', $params)) ? '\\' . $params['onExpand'] : null;		$opt['onSelect'] = (array_key_exists('onSelect', $params)) ? '\\' . $params['onSelect'] : null;		$opt['onClick']  = (array_key_exists('onClick', $params)) ? '\\' . $params['onClick']		: '\\function(node){  window.open(node.data.url, node.data.target != null ? node.data.target : \'_self\'); }';		$options = JHtml::getJSObject($opt);		// Setup root node		$rt['text']     = (array_key_exists('text', $root)) ? $root['text'] : 'Root';		$rt['id']       = (array_key_exists('id', $root)) ? $root['id'] : null;		$rt['color']    = (array_key_exists('color', $root)) ? $root['color'] : null;		$rt['open']     = (array_key_exists('open', $root)) ? '\\' . $root['open'] : true;		$rt['icon']     = (array_key_exists('icon', $root)) ? $root['icon'] : null;		$rt['openicon'] = (array_key_exists('openicon', $root)) ? $root['openicon'] : null;		$rt['data']     = (array_key_exists('data', $root)) ? $root['data'] : null;		$rootNode = JHtml::getJSObject($rt);		$treeName = (array_key_exists('treeName', $params)) ? $params['treeName'] : '';		$js = '		window.addEvent(\'domready\', function(){			tree' . $treeName . ' = new MooTreeControl(' . $options . ',' . $rootNode . ');			tree' . $treeName . '.adopt(\'' . $id . '\');})';		// Attach tooltips to document		$document = JFactory::getDocument();		$document->addScriptDeclaration($js);		// Set static array		self::$loaded[__METHOD__][$id] = true;		return;	}	/**	 * Add unobtrusive javascript support for a calendar control.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function calendar()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		$document = JFactory::getDocument();		$tag = JFactory::getLanguage()->getTag();		JHtml::_('stylesheet', 'system/calendar-jos.css', array(' title' => JText::_('JLIB_HTML_BEHAVIOR_GREEN'), ' media' => 'all'), true);		JHtml::_('script', $tag . '/calendar.js', false, true);		JHtml::_('script', $tag . '/calendar-setup.js', false, true);		$translation = self::_calendartranslation();		if ($translation)		{			$document->addScriptDeclaration($translation);		}		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a color picker.	 *	 * @return  void	 *	 * @since   11.2	 */	public static function colorpicker()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		JHtml::_('script', 'jui/jquery.minicolors.min.js', false, true);		JHtml::_('stylesheet', 'jui/jquery.minicolors.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('.minicolors').each(function() {						jQuery(this).minicolors({							control: jQuery(this).attr('data-control') || 'hue',							position: jQuery(this).attr('data-position') || 'right',							theme: 'bootstrap'						});					});				});			"		);		self::$loaded[__METHOD__] = true;	}	/**	 * Add unobtrusive javascript support for a simple color picker.	 *	 * @return  void	 *	 * @since   11.2	 */	public static function simplecolorpicker()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include jQuery		JHtml::_('jquery.framework');		JHtml::_('script', 'jui/jquery.simplecolors.min.js', false, true);		JHtml::_('stylesheet', 'jui/jquery.simplecolors.css', false, true);		JFactory::getDocument()->addScriptDeclaration("				jQuery(document).ready(function (){					jQuery('select.simplecolors').simplecolors();				});			"		);		self::$loaded[__METHOD__] = true;	}	/**	 * Keep session alive, for example, while editing or creating an article.	 *	 * @return  void	 *	 * @since   11.1	 */	public static function keepalive()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		$config = JFactory::getConfig();		$lifetime = ($config->get('lifetime') * 60000);		$refreshTime = ($lifetime <= 60000) ? 30000 : $lifetime - 60000;		// Refresh time is 1 minute less than the liftime assined in the configuration.php file.		// The longest refresh period is one hour to prevent integer overflow.		if ($refreshTime > 3600000 || $refreshTime <= 0)		{			$refreshTime = 3600000;		}		$document = JFactory::getDocument();		$script = '';		$script .= 'function keepAlive() {';		$script .= '	var myAjax = new Request({method: "get", url: "index.php"}).send();';		$script .= '}';		$script .= ' window.addEvent("domready", function()';		$script .= '{ keepAlive.periodical(' . $refreshTime . '); }';		$script .= ');';		$document->addScriptDeclaration($script);		self::$loaded[__METHOD__] = true;		return;	}	/**	 * Highlight some words via Javascript.	 *	 * @param   array   $terms      Array of words that should be highlighted.	 * @param   string  $start      ID of the element that marks the begin of the section in which words	 *                              should be highlighted. Note this element will be removed from the DOM.	 * @param   string  $end        ID of the element that end this section.	 *                              Note this element will be removed from the DOM.	 * @param   string  $className  Class name of the element highlights are wrapped in.	 * @param   string  $tag        Tag that will be used to wrap the highlighted words.	 *	 * @return  void	 *	 * @since   11.4	 */	public static function highlighter(array $terms, $start = 'highlighter-start', $end = 'highlighter-end', $className = 'highlight', $tag = 'span')	{		$sig = md5(serialize(array($terms, $start, $end)));		if (isset(self::$loaded[__METHOD__][$sig]))		{			return;		}		JHtml::_('script', 'system/highlighter.js', true, true);		$terms = str_replace('"', '\"', $terms);		$document = JFactory::getDocument();		$document->addScriptDeclaration("			window.addEvent('domready', function () {				var start = document.id('" . $start . "');				var end = document.id('" . $end . "');				if (!start || !end || !Joomla.Highlighter) {					return true;				}				highlighter = new Joomla.Highlighter({					startElement: start,					endElement: end,					className: '" . $className . "',					onlyWords: false,					tag: '" . $tag . "'				}).highlight([\"" . implode('","', $terms) . "\"]);				start.dispose();				end.dispose();			});		");		self::$loaded[__METHOD__][$sig] = true;		return;	}	/**	 * Break us out of any containing iframes	 *	 * @return  void	 *	 * @since   11.1	 */	public static function noframes()	{		// Only load once		if (isset(self::$loaded[__METHOD__]))		{			return;		}		// Include MooTools framework		self::framework();		$js = "window.addEvent('domready', function () {if (top == self) {document.documentElement.style.display = 'block'; }" .			" else {top.location = self.location; }});";		$document = JFactory::getDocument();		$document->addStyleDeclaration('html { display:none }');		$document->addScriptDeclaration($js);		JResponse::setHeader('X-Frames-Options', 'SAME-ORIGIN');		self::$loaded[__METHOD__] = true;	}	/**	 * Internal method to get a JavaScript object notation string from an array	 *	 * @param   array  $array  The array to convert to JavaScript object notation	 *	 * @return  string  JavaScript object notation representation of the array	 *	 * @since   11.1	 * @deprecated  13.3 Use JHtml::getJSObject() instead.	 */	protected static function _getJSObject($array = array())	{		JLog::add('JHtmlBehavior::_getJSObject() is deprecated. JHtml::getJSObject() instead..', JLog::WARNING, 'deprecated');		JHtml::getJSObject($array);	}	/**	 * Internal method to translate the JavaScript Calendar	 *	 * @return  string  JavaScript that translates the object	 *	 * @since   11.1	 */	protected static function _calendartranslation()	{		static $jsscript = 0;		// Guard clause, avoids unnecessary nesting		if ($jsscript)		{			return false;		}		$jsscript = 1;		// To keep the code simple here, run strings through JText::_() using array_map()		$callback = array('JText','_');		$weekdays_full = array_map(			$callback, array(				'SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'			)		);		$weekdays_short = array_map(			$callback,			array(				'SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'			)		);		$months_long = array_map(			$callback, array(				'JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE',				'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER'			)		);		$months_short = array_map(			$callback, array(				'JANUARY_SHORT', 'FEBRUARY_SHORT', 'MARCH_SHORT', 'APRIL_SHORT', 'MAY_SHORT', 'JUNE_SHORT',				'JULY_SHORT', 'AUGUST_SHORT', 'SEPTEMBER_SHORT', 'OCTOBER_SHORT', 'NOVEMBER_SHORT', 'DECEMBER_SHORT'			)		);		// This will become an object in Javascript but define it first in PHP for readability		$text = array(			'INFO'			=> JText::_('JLIB_HTML_BEHAVIOR_ABOUT_THE_CALENDAR'),			'ABOUT'			=> "DHTML Date/Time Selector\n"				. "(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n"				. "For latest version visit: http://www.dynarch.com/projects/calendar/\n"				. "Distributed under GNU LGPL.  See http://gnu.org/licenses/lgpl.html for details."				. "\n\n"				. JText::_('JLIB_HTML_BEHAVIOR_DATE_SELECTION')				. JText::_('JLIB_HTML_BEHAVIOR_YEAR_SELECT')				. JText::_('JLIB_HTML_BEHAVIOR_MONTH_SELECT')				. JText::_('JLIB_HTML_BEHAVIOR_HOLD_MOUSE'),			'ABOUT_TIME'	=> "\n\n"				. "Time selection:\n"				. "- Click on any of the time parts to increase it\n"				. "- or Shift-click to decrease it\n"				. "- or click and drag for faster selection.",			'PREV_YEAR'		=> JText::_('JLIB_HTML_BEHAVIOR_PREV_YEAR_HOLD_FOR_MENU'),			'PREV_MONTH'	=> JText::_('JLIB_HTML_BEHAVIOR_PREV_MONTH_HOLD_FOR_MENU'),			'GO_TODAY'		=> JText::_('JLIB_HTML_BEHAVIOR_GO_TODAY'),			'NEXT_MONTH'	=> JText::_('JLIB_HTML_BEHAVIOR_NEXT_MONTH_HOLD_FOR_MENU'),			'SEL_DATE'		=> JText::_('JLIB_HTML_BEHAVIOR_SELECT_DATE'),			'DRAG_TO_MOVE'	=> JText::_('JLIB_HTML_BEHAVIOR_DRAG_TO_MOVE'),			'PART_TODAY'	=> JText::_('JLIB_HTML_BEHAVIOR_TODAY'),			'DAY_FIRST'		=> JText::_('JLIB_HTML_BEHAVIOR_DISPLAY_S_FIRST'),			'WEEKEND'		=> "0,6",			'CLOSE'			=> JText::_('JLIB_HTML_BEHAVIOR_CLOSE'),			'TODAY'			=> JText::_('JLIB_HTML_BEHAVIOR_TODAY'),			'TIME_PART'		=> JText::_('JLIB_HTML_BEHAVIOR_SHIFT_CLICK_OR_DRAG_TO_CHANGE_VALUE'),			'DEF_DATE_FORMAT'	=> "%Y-%m-%d",			'TT_DATE_FORMAT'	=> JText::_('JLIB_HTML_BEHAVIOR_TT_DATE_FORMAT'),			'WK'			=> JText::_('JLIB_HTML_BEHAVIOR_WK'),			'TIME'			=> JText::_('JLIB_HTML_BEHAVIOR_TIME')		);		return 'Calendar._DN = ' . json_encode($weekdays_full) . ';'			. ' Calendar._SDN = ' . json_encode($weekdays_short) . ';'			. ' Calendar._FD = 0;'			. ' Calendar._MN = ' . json_encode($months_long) . ';'			. ' Calendar._SMN = ' . json_encode($months_short) . ';'			. ' Calendar._TT = ' . json_encode($text) . ';';	}}
<?php/** * @package     Joomla.Platform * @subpackage  Table * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Viewlevels table class. * * @package     Joomla.Platform * @subpackage  Table * @since       11.1 */class JTableViewlevel extends JTable{	/**	 * Constructor	 *	 * @param   JDatabaseDriver  $db  Database driver object.	 *	 * @since   11.1	 */	public function __construct($db)	{		parent::__construct('#__viewlevels', 'id', $db);	}	/**	 * Method to bind the data.	 *	 * @param   array  $array   The data to bind.	 * @param   mixed  $ignore  An array or space separated list of fields to ignore.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   11.1	 */	public function bind($array, $ignore = '')	{		// Bind the rules as appropriate.		if (isset($array['rules']))		{			if (is_array($array['rules']))			{				$array['rules'] = json_encode($array['rules']);			}		}		return parent::bind($array, $ignore);	}	/**	 * Method to check the current record to save	 *	 * @return  boolean  True on success	 *	 * @since   11.1	 */	public function check()	{		// Validate the title.		if ((trim($this->title)) == '')		{			$this->setError(JText::_('JLIB_DATABASE_ERROR_VIEWLEVEL'));			return false;		}		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Templates.isis * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$app = JFactory::getApplication();$doc = JFactory::getDocument();$lang = JFactory::getLanguage();$this->language = $doc->language;$this->direction = $doc->direction;// Add JavaScript FrameworksJHtml::_('bootstrap.framework');$doc->addScript('templates/' .$this->template. '/js/template.js');// Add Stylesheets$doc->addStyleSheet('templates/' .$this->template. '/css/template.css');// Load optional RTL Bootstrap CSSJHtml::_('bootstrap.loadCss', false, $this->direction);// Load specific language related CSS$file = 'language/' . $lang->getTag() . '/' . $lang->getTag() . '.css';if (is_file($file)) :	$doc->addStyleSheet($file);endif;?><!DOCTYPE html><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $this->language; ?>" lang="<?php echo $this->language; ?>" dir="<?php echo $this->direction; ?>"><head>	<jdoc:include type="head" />	<!--[if lt IE 9]>		<script src="../media/jui/js/html5.js"></script>	<![endif]--></head><body class="contentpane component">	<jdoc:include type="message" />	<jdoc:include type="component" /></body></html>
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the syndicate functions only oncerequire_once __DIR__ . '/helper.php';$headerText	= trim($params->get('header_text'));$footerText	= trim($params->get('footer_text'));require_once JPATH_ADMINISTRATOR . '/components/com_banners/helpers/banners.php';BannersHelper::updateReset();$list = &ModBannersHelper::getList($params);$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));require JModuleHelper::getLayoutPath('mod_banners', $params->get('layout', 'default'));
<?php/** * Squiz_Sniffs_ControlStructures_ElseIfDeclarationSniff. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ElseIfDeclarationSniff.php 301632 2010-07-28 01:57:56Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer *//** * Squiz_Sniffs_ControlStructures_ElseIfDeclarationSniff. * * Verifies that there are no "else if" statements. The else and the if should * be a single word "elseif". * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ElseIfDeclarationSniff implements PHP_CodeSniffer_Sniff{    /**     * Returns an array of tokens this test wants to listen for.     *     * @return array     */    public function register()    {        return array(T_ELSE);    }//end register()    /**     * Processes this test, when one of its tokens is encountered.     *     * @param PHP_CodeSniffer_File $phpcsFile The file being scanned.     * @param int                  $stackPtr  The position of the current token in the     *                                        stack passed in $tokens.     *     * @return void     */    public function process(PHP_CodeSniffer_File $phpcsFile, $stackPtr)    {      $tokens = $phpcsFile->getTokens();      $nextNonWhiteSpace = $phpcsFile->findNext(        T_WHITESPACE,        $stackPtr + 1,        null,        true,        null,        true      );      if($tokens[$nextNonWhiteSpace]['code'] == T_IF)      {        $error = 'Usage of ELSE IF is not allowed; use ELSEIF instead';        $phpcsFile->addError($error, $stackPtr, 'NotAllowed');      }    }//end process()}//end class
<?php/** * @package     Joomla.Platform * @subpackage  Document * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Component renderer * * @package     Joomla.Platform * @subpackage  Document * @since       11.1 */class JDocumentRendererComponent extends JDocumentRenderer{	/**	 * Renders a component script and returns the results as a string	 *	 * @param   string  $component  The name of the component to render	 * @param   array   $params     Associative array of values	 * @param   string  $content    Content script	 *	 * @return  string  The output of the script	 *	 * @since   11.1	 */	public function render($component = null, $params = array(), $content = null)	{		return $content;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * @copyright   Copyright (C) 2005 - 2010 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */// no direct accessdefined('_JEXEC') or die;$class = ' class="first"';if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?><ul><?php foreach ($this->items[$this->parent->id] as $id => $item) : ?>	<?php	if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :	if (!isset($this->items[$this->parent->id][$id + 1]))	{		$class = ' class="last"';	}	?>	<li<?php echo $class; ?>>	<?php $class = ''; ?>		<h3 class="item-title"><a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($item->id));?>">			<?php echo $this->escape($item->title); ?></a>		</h3>		<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>		<?php if ($item->description) : ?>			<div class="category-desc">				<?php echo JHtml::_('content.prepare', $item->description); ?>			</div>		<?php endif; ?>        <?php endif; ?>		<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>			<dl class="article-count"><dt>				<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?></dt>				<dd><?php echo $item->numitems; ?></dd>			</dl>		<?php endif; ?>		<?php if (count($item->getChildren()) > 0) :			$this->items[$item->id] = $item->getChildren();			$this->parent = $item;			$this->maxLevelcat--;			echo $this->loadTemplate('items');			$this->parent = $item->getParent();			$this->maxLevelcat++;		endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Legacy * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JLog::add('LogException is deprecated, use SPL Exceptions instead.', JLog::WARNING, 'deprecated');/** * Exception class definition for the Log subpackage. * * @package     Joomla.Legacy * @subpackage  Log * @since       11.1 * @deprecated  12.3 Use semantic exceptions instead */class LogException extends RuntimeException{}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Users mail view. * * @package     Joomla.Administrator * @subpackage  com_users */class UsersViewMail extends JViewLegacy{	/**	 * @var object form object	 */	protected $form;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Get data from the model		$this->form = $this->get('Form');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		JToolbarHelper::title(JText::_('COM_USERS_MASS_MAIL'), 'massmail.png');		JToolbarHelper::custom('mail.send', 'envelope.png', 'send_f2.png', 'COM_USERS_TOOLBAR_MAIL_SEND_MAIL', false);		JToolbarHelper::cancel('mail.cancel');		JToolbarHelper::divider();		JToolbarHelper::preferences('com_users');		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_MASS_MAIL_USERS');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$ftpFieldsDisplay = $this->ftp['enabled'] ? '' : 'style = "display: none"';?><form action="index.php" method="post" id="adminForm"><?php if (is_null($this->updateInfo['object'])) : ?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_NOUPDATES') ?>	</legend>	<p>		<?php echo JText::sprintf('COM_JOOMLAUPDATE_VIEW_DEFAULT_NOUPDATESNOTICE', JVERSION); ?>	</p></fieldset><?php else: ?><fieldset>	<legend>		<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_UPDATEFOUND') ?>	</legend>	<table class="adminlist">		<tbody>			<tr class="row0">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_INSTALLED') ?>				</td>				<td>					<?php echo $this->updateInfo['installed'] ?>				</td>			</tr>			<tr class="row1">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_LATEST') ?>				</td>				<td>					<?php echo $this->updateInfo['latest'] ?>				</td>			</tr>			<tr class="row0">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_PACKAGE') ?>				</td>				<td>					<a href="<?php echo $this->updateInfo['object']->downloadurl->_data ?>">						<?php echo $this->updateInfo['object']->downloadurl->_data ?>					</a>				</td>			</tr>			<tr class="row1">				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_METHOD') ?>				</td>				<td>					<?php echo $this->methodSelect ?>				</td>			</tr>			<tr class="row0" id="row_ftp_hostname" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_HOSTNAME') ?>				</td>				<td>					<input type="text" name="ftp_host" value="<?php echo $this->ftp['host'] ?>" />				</td>			</tr>			<tr class="row1" id="row_ftp_port" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_PORT') ?>				</td>				<td>					<input type="text" name="ftp_port" value="<?php echo $this->ftp['port'] ?>" />				</td>			</tr>			<tr class="row0" id="row_ftp_username" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_USERNAME') ?>				</td>				<td>					<input type="text" name="ftp_user" value="<?php echo $this->ftp['username'] ?>" />				</td>			</tr>			<tr class="row1" id="row_ftp_password" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_PASSWORD') ?>				</td>				<td>					<input type="text" name="ftp_pass" value="<?php echo $this->ftp['password'] ?>" />				</td>			</tr>			<tr class="row0" id="row_ftp_directory" <?php echo $ftpFieldsDisplay ?>>				<td>					<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_FTP_DIRECTORY') ?>				</td>				<td>					<input type="text" name="ftp_root" value="<?php echo $this->ftp['directory'] ?>" />				</td>			</tr>		</tbody>		<tfoot>			<tr>				<td>					&nbsp;				</td>				<td>					<button class="submit" type="submit">						<?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_INSTALLUPDATE') ?>					</button>				</td>			</tr>		</tfoot>	</table></fieldset><?php endif; ?><?php echo JHtml::_('form.token'); ?><input type="hidden" name="task" value="update.download" /><input type="hidden" name="option" value="com_joomlaupdate" /></form><div class="download_message" style="display: none">	<p></p>	<p class="nowarning"> <?php echo JText::_('COM_JOOMLAUPDATE_VIEW_DEFAULT_DOWNLOAD_IN_PROGRESS'); ?></p>	<div class="joomlaupdate_spinner"></div></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_banners * * @package     Joomla.Site * @subpackage  mod_banners * @since       1.5 */class ModBannersHelper{	public static function &getList(&$params)	{		JModelLegacy::addIncludePath(JPATH_ROOT.'/components/com_banners/models', 'BannersModel');		$document	= JFactory::getDocument();		$app		= JFactory::getApplication();		$keywords	= explode(',', $document->getMetaData('keywords'));		$model = JModelLegacy::getInstance('Banners', 'BannersModel', array('ignore_request' => true));		$model->setState('filter.client_id', (int) $params->get('cid'));		$model->setState('filter.category_id', $params->get('catid', array()));		$model->setState('list.limit', (int) $params->get('count', 1));		$model->setState('list.start', 0);		$model->setState('filter.ordering', $params->get('ordering'));		$model->setState('filter.tag_search', $params->get('tag_search'));		$model->setState('filter.keywords', $keywords);		$model->setState('filter.language', $app->getLanguageFilter());		$banners = $model->getItems();		$model->impress();		return $banners;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*///---------------------------------------------------------------/*** UTF-8 aware alternative to str_split* Convert a string to an array* Note: requires utf8_strlen to be loaded* @param string UTF-8 encoded* @param int number to characters to split string by* @return string characters in string reverses* @see http://www.php.net/str_split* @see utf8_strlen* @package utf8* @subpackage strings*/function utf8_str_split($str, $split_len = 1) {    if ( !preg_match('/^[0-9]+$/',$split_len) || $split_len < 1 ) {        return FALSE;    }    $len = utf8_strlen($str);    if ( $len <= $split_len ) {        return array($str);    }    preg_match_all('/.{'.$split_len.'}|[^\x00]{1,'.$split_len.'}$/us', $str, $ar);    return $ar[0];}
<?php/** * @package     Joomla.Platform * @subpackage  Session * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * XCache session storage handler * * @package     Joomla.Platform * @subpackage  Session * @since       11.1 */class JSessionStorageXcache extends JSessionStorage{	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   11.1	 * @throws  RuntimeException	 */	public function __construct($options = array())	{		if (!self::isSupported())		{			throw new RuntimeException('XCache Extension is not available', 404);		}		parent::__construct($options);	}	/**	 * Read the data for a particular session identifier from the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  string  The session data.	 *	 * @since   11.1	 */	public function read($id)	{		$sess_id = 'sess_' . $id;		// Check if id exists		if (!xcache_isset($sess_id))		{			return;		}		return (string) xcache_get($sess_id);	}	/**	 * Write session data to the SessionHandler backend.	 *	 * @param   string  $id            The session identifier.	 * @param   string  $session_data  The session data.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function write($id, $session_data)	{		$sess_id = 'sess_' . $id;		return xcache_set($sess_id, $session_data, ini_get("session.gc_maxlifetime"));	}	/**	 * Destroy the data for a particular session identifier in the SessionHandler backend.	 *	 * @param   string  $id  The session identifier.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   11.1	 */	public function destroy($id)	{		$sess_id = 'sess_' . $id;		if (!xcache_isset($sess_id))		{			return true;		}		return xcache_unset($sess_id);	}	/**	 * Test to see if the SessionHandler is available.	 *	 * @return boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	static public function isSupported()	{		return (extension_loaded('xcache'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><p class="nowarning"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_INPROGRESS') ?></p><div class="joomlaupdate_spinner" ></div><div id="update-progress">	<div id="extprogress">		<div class="extprogrow">			<?php			echo JHtml::_(				'image', 'media/bar.gif', JText::_('COM_JOOMLAUPDATE_VIEW_PROGRESS'),				array('class' => 'progress', 'id' => 'progress'), true			); ?>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_PERCENT'); ?></span>			<span class="extvalue" id="extpercent"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESREAD'); ?></span>			<span class="extvalue" id="extbytesin"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_BYTESEXTRACTED'); ?></span>			<span class="extvalue" id="extbytesout"></span>		</div>		<div class="extprogrow">			<span class="extlabel"><?php echo JText::_('COM_JOOMLAUPDATE_VIEW_UPDATE_FILESEXTRACTED'); ?></span>			<span class="extvalue" id="extfiles"></span>		</div>	</div></div>
<?php/** * @package     Joomla.Legacy * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Supports an HTML select list of categories * * @package     Joomla.Legacy * @subpackage  Form * @since       11.1 */class JFormFieldCategory extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	public $type = 'Category';	/**	 * Method to get the field options for category	 * Use the extension attribute in a form to specify the.specific extension for	 * which categories should be displayed.	 * Use the show_root attribute to specify whether to show the global category root in the list.	 *	 * @return  array    The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		$extension = $this->element['extension'] ? (string) $this->element['extension'] : (string) $this->element['scope'];		$published = (string) $this->element['published'];		// Load the category options for a given extension.		if (!empty($extension))		{			// Filter over published state or not depending upon if it is present.			if ($published)			{				$options = JHtml::_('category.options', $extension, array('filter.published' => explode(',', $published)));			}			else			{				$options = JHtml::_('category.options', $extension);			}			// Verify permissions.  If the action attribute is set, then we scan the options.			if ((string) $this->element['action'])			{				// Get the current user object.				$user = JFactory::getUser();				foreach ($options as $i => $option)				{					/*					 * To take save or create in a category you need to have create rights for that category					 * unless the item is already in that category.					 * Unset the option if the user isn't authorised for it. In this field assets are always categories.					 */					if ($user->authorise('core.create', $extension . '.category.' . $option->value) != true)					{						unset($options[$i]);					}				}			}			if (isset($this->element['show_root']))			{				array_unshift($options, JHtml::_('select.option', '0', JText::_('JGLOBAL_ROOT')));			}		}		else		{			JLog::add(JText::_('JLIB_FORM_ERROR_FIELDS_CATEGORY_ERROR_EXTENSION_EMPTY'), JLog::WARNING, 'jerror');		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  Templates.beez3 * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class = "breadcrumbs<?php echo $moduleclass_sfx; ?>"><?php if ($params->get('showHere', 1))	{		echo '<span class="showHere">' .JText::_('MOD_BREADCRUMBS_HERE').'</span>';	}	// Get rid of duplicated entries on trail including home page when using multilanguage	for ($i = 0; $i < $count; $i++)	{		if ($i == 1 && !empty($list[$i]->link) && !empty($list[$i - 1]->link) && $list[$i]->link == $list[$i - 1]->link)		{			unset($list[$i]);		}	}	// Find last and penultimate items in breadcrumbs list	end($list);	$last_item_key = key($list);	prev($list);	$penult_item_key = key($list);	// Generate the trail	foreach ($list as $key => $item) :	// Make a link if not the last item in the breadcrumbs	$show_last = $params->get('showLast', 1);	if ($key != $last_item_key)	{		// Render all but last item - along with separator		if (!empty($item->link))		{			echo '<a href="' . $item->link . '" class="pathway">' . $item->name . '</a>';		}		else		{			echo '<span>' . $item->name . '</span>';		}		if (($key != $penult_item_key) || $show_last)		{			echo ' '.$separator.' ';		}	}	elseif ($show_last)	{		// Render last item if reqd.		echo '<span>' . $item->name . '</span>';	}	endforeach; ?></div>
<?php/*** Tools to help with ASCII in UTF-8* @version $Id$* @package utf8* @subpackage ascii*///--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes.* You might use this to conditionally check whether a string* needs handling as UTF-8 or not, potentially offering performance* benefits by using the native PHP equivalent if it's just ASCII e.g.;** <code>* if ( utf8_is_ascii($someString) ) {*     // It's just ASCII - use the native PHP version*     $someString = strtolower($someString);* } else {*     $someString = utf8_strtolower($someString);* }* </code>** @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii* @see utf8_is_ascii_ctrl*/function utf8_is_ascii($str) {    // Search for any bytes which are outside the ASCII range...    return (preg_match('/(?:[^\x00-\x7F])/',$str) !== 1);}//--------------------------------------------------------------------/*** Tests whether a string contains only 7bit ASCII bytes with device* control codes omitted. The device control codes can be found on the* second table here: http://www.w3schools.com/tags/ref_ascii.asp** @param string* @return boolean TRUE if it's all ASCII without device control codes* @package utf8* @subpackage ascii* @see utf8_is_ascii*/function utf8_is_ascii_ctrl($str) {    if ( strlen($str) > 0 ) {        // Search for any bytes which are outside the ASCII range,        // or are device control codes        return (preg_match('/[^\x09\x0A\x0D\x20-\x7E]/',$str) !== 1);    }    return FALSE;}//--------------------------------------------------------------------/*** Strip out all non-7bit ASCII bytes* If you need to transmit a string to system which you know can only* support 7bit ASCII, you could use this function.* @param string* @return string with non ASCII bytes removed* @package utf8* @subpackage ascii* @see utf8_strip_non_ascii_ctrl*/function utf8_strip_non_ascii($str) {    ob_start();    while ( preg_match(        '/^([\x00-\x7F]+)|([^\x00-\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out device control codes in the ASCII range* which are not permitted in XML. Note that this leaves* multi-byte characters untouched - it only removes device* control codes* @see http://hsivonen.iki.fi/producing-xml/#controlchar* @param string* @return string control codes removed*/function utf8_strip_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([^\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)|([\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//--------------------------------------------------------------------/*** Strip out all non 7bit ASCII bytes and ASCII device control codes.* For a list of ASCII device control codes see the 2nd table here:* http://www.w3schools.com/tags/ref_ascii.asp** @param string* @return boolean TRUE if it's all ASCII* @package utf8* @subpackage ascii*/function utf8_strip_non_ascii_ctrl($str) {    ob_start();    while ( preg_match(        '/^([\x09\x0A\x0D\x20-\x7E]+)|([^\x09\x0A\x0D\x20-\x7E]+)/S',            $str, $matches) ) {        if ( !isset($matches[2]) ) {            echo $matches[0];        }        $str = substr($str, strlen($matches[0]));    }    $result = ob_get_contents();    ob_end_clean();    return $result;}//---------------------------------------------------------------/*** Replace accented UTF-8 characters by unaccented ASCII-7 "equivalents".* The purpose of this function is to replace characters commonly found in Latin* alphabets with something more or less equivalent from the ASCII range. This can* be useful for converting a UTF-8 to something ready for a filename, for example.* Following the use of this function, you would probably also pass the string* through utf8_strip_non_ascii to clean out any other non-ASCII chars* Use the optional parameter to just deaccent lower ($case = -1) or upper ($case = 1)* letters. Default is to deaccent both cases ($case = 0)** For a more complete implementation of transliteration, see the utf8_to_ascii package* available from the phputf8 project downloads:* http://prdownloads.sourceforge.net/phputf8** @param string UTF-8 string* @param int (optional) -1 lowercase only, +1 uppercase only, 1 both cases* @param string UTF-8 with accented characters replaced by ASCII chars* @return string accented chars replaced with ascii equivalents* @author Andreas Gohr <andi@splitbrain.org>* @package utf8* @subpackage ascii*/function utf8_accents_to_ascii( $str, $case=0 ){    static $UTF8_LOWER_ACCENTS = NULL;    static $UTF8_UPPER_ACCENTS = NULL;    if($case <= 0){        if ( is_null($UTF8_LOWER_ACCENTS) ) {            $UTF8_LOWER_ACCENTS = array(  '' => 'a', '' => 'o', '' => 'd', '' => 'f', '' => 'e', '' => 's', '' => 'o',  '' => 'ss', '' => 'a', '' => 'r', '' => 't', '' => 'n', '' => 'a', '' => 'k',  '' => 's', '' => 'y', '' => 'n', '' => 'l', '' => 'h', '' => 'p', '' => 'o',  '' => 'u', '' => 'e', '' => 'e', '' => 'c', '' => 'w', '' => 'c', '' => 'o',  '' => 's', '' => 'o', '' => 'g', '' => 't', '' => 's', '' => 'e', '' => 'c',  '' => 's', '' => 'i', '' => 'u', '' => 'c', '' => 'e', '' => 'w', '' => 't',  '' => 'u', '' => 'c', '' => 'oe', '' => 'e', '' => 'y', '' => 'a', '' => 'l',  '' => 'u', '' => 'u', '' => 's', '' => 'g', '' => 'l', '' => 'f', '' => 'z',  '' => 'w', '' => 'b', '' => 'a', '' => 'i', '' => 'i', '' => 'd', '' => 't',  '' => 'r', '' => 'ae', '' => 'i', '' => 'r', '' => 'e', '' => 'ue', '' => 'o',  '' => 'e', '' => 'n', '' => 'n', '' => 'h', '' => 'g', '' => 'd', '' => 'j',  '' => 'y', '' => 'u', '' => 'u', '' => 'u', '' => 't', '' => 'y', '' => 'o',  '' => 'a', '' => 'l', '' => 'w', '' => 'z', '' => 'i', '' => 'a', '' => 'g',  '' => 'm', '' => 'o', '' => 'i', '' => 'u', '' => 'i', '' => 'z', '' => 'a',  '' => 'u', '' => 'th', '' => 'dh', '' => 'ae', '' => 'u', '' => 'e',            );        }        $str = str_replace(                array_keys($UTF8_LOWER_ACCENTS),                array_values($UTF8_LOWER_ACCENTS),                $str            );    }    if($case >= 0){        if ( is_null($UTF8_UPPER_ACCENTS) ) {            $UTF8_UPPER_ACCENTS = array(  '' => 'A', '' => 'O', '' => 'D', '' => 'F', '' => 'E', '' => 'S', '' => 'O',  '' => 'A', '' => 'R', '' => 'T', '' => 'N', '' => 'A', '' => 'K',  '' => 'S', '' => 'Y', '' => 'N', '' => 'L', '' => 'H', '' => 'P', '' => 'O',  '' => 'U', '' => 'E', '' => 'E', '' => 'C', '' => 'W', '' => 'C', '' => 'O',  '' => 'S', '' => 'O', '' => 'G', '' => 'T', '' => 'S', '' => 'E', '' => 'C',  '' => 'S', '' => 'I', '' => 'U', '' => 'C', '' => 'E', '' => 'W', '' => 'T',  '' => 'U', '' => 'C', '' => 'Oe', '' => 'E', '' => 'Y', '' => 'A', '' => 'L',  '' => 'U', '' => 'U', '' => 'S', '' => 'G', '' => 'L', '' => 'F', '' => 'Z',  '' => 'W', '' => 'B', '' => 'A', '' => 'I', '' => 'I', '' => 'D', '' => 'T',  '' => 'R', '' => 'Ae', '' => 'I', '' => 'R', '' => 'E', '' => 'Ue', '' => 'O',  '' => 'E', '' => 'N', '' => 'N', '' => 'H', '' => 'G', '' => 'D', '' => 'J',  '' => 'Y', '' => 'U', '' => 'U', '' => 'U', '' => 'T', '' => 'Y', '' => 'O',  '' => 'A', '' => 'L', '' => 'W', '' => 'Z', '' => 'I', '' => 'A', '' => 'G',  '' => 'M', '' => 'O', '' => 'I', '' => 'U', '' => 'I', '' => 'Z', '' => 'A',  '' => 'U', '' => 'Th', '' => 'Dh', '' => 'Ae', '' => 'E',            );        }        $str = str_replace(                array_keys($UTF8_UPPER_ACCENTS),                array_values($UTF8_UPPER_ACCENTS),                $str            );    }    return $str;}
<?php/** * @package     Joomla.Administrator * @subpackage  com_templates * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;	$fieldSets = $this->form->getFieldsets('params');	foreach ($fieldSets as $name => $fieldSet) :		$label = !empty($fieldSet->label) ? $fieldSet->label : 'COM_TEMPLATES_'.$name.'_FIELDSET_LABEL';		echo JHtml::_('sliders.panel', JText::_($label), $name.'-options');			if (isset($fieldSet->description) && trim($fieldSet->description)) :				echo '<p class="tip">'.$this->escape(JText::_($fieldSet->description)).'</p>';			endif;			?>		<fieldset class="panelform">			<ul class="adminformlist">			<?php foreach ($this->form->getFieldset($name) as $field) : ?>				<li>				<?php if (!$field->hidden) : ?>					<?php echo $field->label; ?>				<?php endif; ?>					<?php echo $field->input; ?>				</li>			<?php endforeach; ?>			</ul>		</fieldset>	<?php endforeach;  ?>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="width-100"><fieldset class="adminform">	<legend><?php echo JText::_('COM_CONFIG_CACHE_SETTINGS'); ?></legend>	<ul class="adminformlist">			<?php			foreach ($this->form->getFieldset('cache') as $field):			?>					<li><?php echo $field->label; ?>					<?php echo $field->input; ?></li>			<?php			endforeach;			?>		<?php if (isset($this->data['cache_handler']) && $this->data['cache_handler'] == 'memcache' || $this->data['session_handler'] == 'memcache') : ?>					<?php			foreach ($this->form->getFieldset('memcache') as $mfield):			?>					<li><?php echo $mfield->label; ?>					<?php echo $mfield->input; ?></li>			<?php			endforeach;			?>		<?php endif; ?>		</ul></fieldset></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_config * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><ul class="nav nav-list">	<?php		if ($this->userIsSuperAdmin):	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_SYSTEM'); ?></li>	<li class="active"><a href="index.php?option=com_config"><?php echo JText::_('COM_CONFIG_GLOBAL_CONFIGURATION'); ?></a></li>	<li class="divider"></li>	<?php		endif;	?>	<li class="nav-header"><?php echo JText::_('COM_CONFIG_COMPONENT_FIELDSET_LABEL'); ?></li>	<?php		foreach ($this->components as $component) :	?>		<li><a href="index.php?option=com_config&view=component&component=<?php echo $component; ?>"><?php echo JText::_($component); ?></a></li>	<?php		endforeach;	?></ul>
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><div class="logout <?php echo $this->pageclass_sfx?>">	<?php if ($this->params->get('show_page_heading')) : ?>	<div class="page-header">		<h1>			<?php echo $this->escape($this->params->get('page_heading')); ?>		</h1>	</div>	<?php endif; ?>	<?php if (($this->params->get('logoutdescription_show') == 1 && str_replace(' ', '', $this->params->get('logout_description')) != '')|| $this->params->get('logout_image') != '') : ?>	<div class="logout-description">	<?php endif; ?>		<?php if ($this->params->get('logoutdescription_show') == 1) : ?>			<?php echo $this->params->get('logout_description'); ?>		<?php endif; ?>		<?php if (($this->params->get('logout_image') != '')) :?>			<img src="<?php echo $this->escape($this->params->get('logout_image')); ?>" class="thumbnail pull-right logout-image" alt="<?php echo JTEXT::_('COM_USER_LOGOUT_IMAGE_ALT')?>"/>		<?php endif; ?>	<?php if (($this->params->get('logoutdescription_show') == 1 && str_replace(' ', '', $this->params->get('logout_description')) != '')|| $this->params->get('logout_image') != '') : ?>	</div>	<?php endif; ?>	<form action="<?php echo JRoute::_('index.php?option=com_users&task=user.logout'); ?>" method="post" class="form-horizontal">		<div class="control-group">			<div class="controls">				<button type="submit" class="btn btn-primary"><span class="icon-arrow-left icon-white"></span> <?php echo JText::_('JLOGOUT'); ?></button>			</div>		</div>		<input type="hidden" name="return" value="<?php echo base64_encode($this->params->get('logout_redirect_url', $this->form->getValue('return'))); ?>" />		<?php echo JHtml::_('form.token'); ?>	</form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit an language override * * @package     Joomla.Administrator * @subpackage  com_languages * @since       2.5 */class LanguagesViewOverride extends JViewLegacy{	/**	 * The form to use for the view	 *	 * @var		object	 * @since	2.5	 */	protected $form;	/**	 * The item to edit	 *	 * @var		object	 * @since	2.5	 */	protected $item;	/**	 * The model state	 *	 * @var		object	 * @since	2.5	 */	protected $state;	/**	 * Displays the view	 *	 * @param   	string	$tpl	The name of the template file to parse	 *	 * @return  void	 *	 * @since		2.5	 */	public function display($tpl = null)	{		JHtml::_('stylesheet', 'overrider/overrider.css', array(), true);		JHtml::_('behavior.framework');		JHtml::_('script', 'overrider/overrider.js', false, true);		$this->form  = $this->get('Form');		$this->item  = $this->get('Item');		$this->state = $this->get('State');		// Check for errors		if (count($errors = $this->get('Errors')))		{			throw new Exception(implode("\n", $errors));		}		// Check whether the cache has to be refreshed		$cached_time = JFactory::getApplication()->getUserState('com_languages.overrides.cachedtime.'.$this->state->get('filter.client').'.'.$this->state->get('filter.language'), 0);		if (time() - $cached_time > 60 * 5)		{			$this->state->set('cache_expired', true);		}		// Add strings for translations in Javascript		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_NO_RESULTS');		JText::script('COM_LANGUAGES_VIEW_OVERRIDE_REQUEST_ERROR');		$this->addToolbar();		parent::display($tpl);	}	/**	 * Adds the page title and toolbar	 *	 * @return void	 *	 * @since	2.5	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$canDo	= LanguagesHelper::getActions();		JToolbarHelper::title(JText::_('COM_LANGUAGES_VIEW_OVERRIDE_EDIT_TITLE'), 'langmanager');		if ($canDo->get('core.edit'))		{			JToolbarHelper::apply('override.apply');			JToolbarHelper::save('override.save');		}		// This component does not support Save as Copy		if ($canDo->get('core.edit') && $canDo->get('core.create'))		{			JToolbarHelper::save2new('override.save2new');		}		if (empty($this->item->key))		{			JToolbarHelper::cancel('override.cancel');		}		else		{			JToolbarHelper::cancel('override.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_EXTENSIONS_LANGUAGE_MANAGER_OVERRIDES_EDIT');	}}
<?php/** * @package     Joomla.Installation * @subpackage  View * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Installation Languages View * * @package     Joomla.Installation * @subpackage  View * @since       3.1 */class InstallationViewLanguagesHtml extends JViewHtml{	/**	 * Container with all available languages	 *	 * @var    array	 * @since  3.1	 */	protected $items;	/**	 * Redefine the model so the correct type hinting is available.	 *	 * @var     InstallationModelLanguages	 * @since   3.1	 */	protected $model;	/**	 * Method to render the view.	 *	 * @return  string  The rendered view.	 *	 * @since   3.1	 */	public function render()	{		$this->items = $this->model->getItems();		return parent::render();	}}
<?php/** * @package     Joomla.Platform * @subpackage  Crypt * * @copyright   Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * JCrypt cipher for Blowfish encryption, decryption and key generation. * * @package     Joomla.Platform * @subpackage  Crypt * @since       12.1 */class JCryptCipherBlowfish extends JCryptCipherMcrypt{	/**	 * @var    integer  The mcrypt cipher constant.	 * @see    http://www.php.net/manual/en/mcrypt.ciphers.php	 * @since  12.1	 */	protected $type = MCRYPT_BLOWFISH;	/**	 * @var    integer  The mcrypt block cipher mode.	 * @see    http://www.php.net/manual/en/mcrypt.constants.php	 * @since  12.1	 */	protected $mode = MCRYPT_MODE_CBC;	/**	 * @var    string  The JCrypt key type for validation.	 * @since  12.1	 */	protected $keyType = 'blowfish';}
<?php/** * @package     Joomla.Site * @subpackage  com_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">function iFrameHeight(){	var h = 0;	if (!document.all)	{		h = document.getElementById('blockrandom').contentDocument.height;		document.getElementById('blockrandom').style.height = h + 60 + 'px';	} else if (document.all)	{		h = document.frames('blockrandom').document.body.scrollHeight;		document.all.blockrandom.style.height = h + 20 + 'px';	}}</script><div class="contentpane<?php echo $this->pageclass_sfx; ?>"><?php if ($this->params->get('show_page_heading')) : ?>	<h1>		<?php if ($this->escape($this->params->get('page_heading'))) :?>			<?php echo $this->escape($this->params->get('page_heading')); ?>		<?php else : ?>			<?php echo $this->escape($this->params->get('page_title')); ?>		<?php endif; ?>	</h1><?php endif; ?><iframe <?php echo $this->wrapper->load; ?>	id="blockrandom"	name="iframe"	src="<?php echo $this->escape($this->wrapper->url); ?>"	width="<?php echo $this->escape($this->params->get('width')); ?>"	height="<?php echo $this->escape($this->params->get('height')); ?>"	scrolling="<?php echo $this->escape($this->params->get('scrolling')); ?>"	frameborder="<?php echo $this->escape($this->params->get('frameborder', 1)); ?>"	class="wrapper<?php echo $this->pageclass_sfx; ?>">	<?php echo JText::_('COM_WRAPPER_NO_IFRAMES'); ?></iframe></div>
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQL azure database iterator. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseIteratorAzure extends JDatabaseIteratorSqlsrv{}
<?php/** * @package     Joomla.Site * @subpackage  mod_articles_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the helper functions only oncerequire_once __DIR__ . '/helper.php';$list = ModArticlesCategoriesHelper::getList($params);if (!empty($list)){	$moduleclass_sfx = htmlspecialchars($params->get('moduleclass_sfx'));	$startLevel = reset($list)->getParent()->level;	require JModuleHelper::getLayoutPath('mod_articles_categories', $params->get('layout', 'default'));}
<?php/** * @package     Joomla.Site * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Registration view class for Users. * * @package     Joomla.Site * @subpackage  com_users * @since       1.6 */class UsersViewRegistration extends JViewLegacy{	protected $data;	protected $form;	protected $params;	protected $state;	/**	 * Method to display the view.	 *	 * @param   string	The template file to include	 * @since   1.6	 */	public function display($tpl = null)	{		// Get the view data.		$this->data		= $this->get('Data');		$this->form		= $this->get('Form');		$this->state	= $this->get('State');		$this->params	= $this->state->get('params');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode('<br />', $errors));			return false;		}		// Check for layout override		$active = JFactory::getApplication()->getMenu()->getActive();		if (isset($active->query['layout']))		{			$this->setLayout($active->query['layout']);		}		//Escape strings for HTML output		$this->pageclass_sfx = htmlspecialchars($this->params->get('pageclass_sfx'));		$this->prepareDocument();		parent::display($tpl);	}	/**	 * Prepares the document.	 *	 * @since   1.6	 */	protected function prepareDocument()	{		$app		= JFactory::getApplication();		$menus		= $app->getMenu();		$title 		= null;		// Because the application sets a default page title,		// we need to get it from the menu item itself		$menu = $menus->getActive();		if ($menu)		{			$this->params->def('page_heading', $this->params->get('page_title', $menu->title));		}		else		{			$this->params->def('page_heading', JText::_('COM_USERS_REGISTRATION'));		}		$title = $this->params->get('page_title', '');		if (empty($title))		{			$title = $app->getCfg('sitename');		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 1)		{			$title = JText::sprintf('JPAGETITLE', $app->getCfg('sitename'), $title);		}		elseif ($app->getCfg('sitename_pagetitles', 0) == 2)		{			$title = JText::sprintf('JPAGETITLE', $title, $app->getCfg('sitename'));		}		$this->document->setTitle($title);		if ($this->params->get('menu-meta_description'))		{			$this->document->setDescription($this->params->get('menu-meta_description'));		}		if ($this->params->get('menu-meta_keywords'))		{			$this->document->setMetadata('keywords', $this->params->get('menu-meta_keywords'));		}		if ($this->params->get('robots'))		{			$this->document->setMetadata('robots', $this->params->get('robots'));		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  GitHub * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * GitHub API Account class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  GitHub * @since       12.3 */class JGithubAccount extends JGithubObject{	/**	 * Method to create an authorisation.	 *	 * @param   array   $scopes  A list of scopes that this authorisation is in.	 * @param   string  $note    A note to remind you what the OAuth token is for.	 * @param   string  $url     A URL to remind you what app the OAuth token is for.	 *	 * @return  object	 *	 * @since   12.3	 */	public function createAuthorisation(array $scopes = array(), $note = '', $url = '')	{		// Build the request path.		$path = '/authorizations';		$data = json_encode(			array('scopes' => $scopes, 'note' => $note, 'note_url' => $url)		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 201)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to delete an authorisation	 *	 * @param   integer  $id  ID of the authorisation to delete	 *	 * @return  object	 *	 * @since   12.3	 */	public function deleteAuthorisation($id)	{		// Build the request path.		$path = '/authorizations/' . $id;		// Send the request.		$response = $this->client->delete($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 204)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to edit an authorisation.	 *	 * @param   integer  $id            ID of the authorisation to edit	 * @param   array    $scopes        Replaces the authorisation scopes with these.	 * @param   array    $addScopes     A list of scopes to add to this authorisation.	 * @param   array    $removeScopes  A list of scopes to remove from this authorisation.	 * @param   string   $note          A note to remind you what the OAuth token is for.	 * @param   string   $url           A URL to remind you what app the OAuth token is for.	 *	 * @return  object	 *	 * @since   12.3	 * @throws  RuntimeException	 */	public function editAuthorisation($id, array $scopes = array(), array $addScopes = array(), array $removeScopes = array(), $note = '', $url = '')	{		// Check if more than one scopes array contains data		$scopesCount = 0;		if (!empty($scopes))		{			$scope = 'scopes';			$scopeData = $scopes;			$scopesCount++;		}		if (!empty($addScopes))		{			$scope = 'add_scopes';			$scopeData = $addScopes;			$scopesCount++;		}		if (!empty($removeScopes))		{			$scope = 'remove_scopes';			$scopeData = $removeScopes;			$scopesCount++;		}		// Only allowed to send data for one scope parameter		if ($scopesCount >= 2)		{			throw new RuntimeException('You can only send one scope key in this request.');		}		// Build the request path.		$path = '/authorizations/' . $id;		$data = json_encode(			array(				$scope => $scopeData,				'note' => $note,				'note_url' => $url			)		);		// Send the request.		$response = $this->client->patch($this->fetchUrl($path), $data);		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get details about an authorised application for the authenticated user.	 *	 * @param   integer  $id  ID of the authorisation to retrieve	 *	 * @return  object	 *	 * @since   12.3	 * @note    This method will only accept Basic Authentication	 */	public function getAuthorisation($id)	{		// Build the request path.		$path = '/authorizations/' . $id;		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the authorised applications for the authenticated user.	 *	 * @return  object	 *	 * @since   12.3	 * @note    This method will only accept Basic Authentication	 */	public function getAuthorisations()	{		// Build the request path.		$path = '/authorizations';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}	/**	 * Method to get the rate limit for the authenticated user.	 *	 * @return  object	 *	 * @since   12.3	 */	public function getRateLimit()	{		// Build the request path.		$path = '/rate_limit';		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		// Validate the response code.		if ($response->code != 200)		{			// Decode the error response and throw an exception.			$error = json_decode($response->body);			throw new DomainException($error->message, $response->code);		}		return json_decode($response->body);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_redirect * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_redirect')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Redirect');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * This models supports retrieving lists of contact categories. * * @package     Joomla.Site * @subpackage  com_contact * @since       1.6 */class ContactModelCategories extends JModelList{	/**	 * Model context string.	 *	 * @var		string	 */	public $_context = 'com_contact.categories';	/**	 * The category context (allows other extensions to derived from this model).	 *	 * @var		string	 */	protected $_extension = 'com_contact';	private $_parent = null;	private $_items = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication();		$this->setState('filter.extension', $this->_extension);		// Get the parent id if defined.		$parentId = $app->input->getInt('id');		$this->setState('filter.parentId', $parentId);		$params = $app->getParams();		$this->setState('params', $params);		$this->setState('filter.published',	1);		$this->setState('filter.access',	true);	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.extension');		$id	.= ':'.$this->getState('filter.published');		$id	.= ':'.$this->getState('filter.access');		$id	.= ':'.$this->getState('filter.parentId');		return parent::getStoreId($id);	}	/**	 * redefine the function an add some properties to make the styling more easy	 *	 * @return mixed An array of data items on success, false on failure.	 */	public function getItems()	{		if (!count($this->_items))		{			$app = JFactory::getApplication();			$menu = $app->getMenu();			$active = $menu->getActive();			$params = new JRegistry;			if ($active)			{				$params->loadString($active->params);			}			$options = array();			$options['countItems'] = $params->get('show_cat_items_cat', 1) || !$params->get('show_empty_categories_cat', 0);			$categories = JCategories::getInstance('Contact', $options);			$this->_parent = $categories->get($this->getState('filter.parentId', 'root'));			if (is_object($this->_parent))			{				$this->_items = $this->_parent->getChildren();			} else {				$this->_items = false;			}		}		return $this->_items;	}	public function getParent()	{		if (!is_object($this->_parent))		{			$this->getItems();		}		return $this->_parent;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT . '/helpers');JHtml::_('behavior.caption');echo JLayoutHelper::render('joomla.content.categories_default', $this);echo $this->loadTemplate('items');?></div>
<?php/** * @package     Joomla.Site * @subpackage  mod_search * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_search * * @package     Joomla.Site * @subpackage  mod_search * @since       1.5 */class ModSearchHelper{	/**	 * Display the search button as an image.	 *	 * @param   string	$button_text	The alt text for the button.	 *	 * @return  string	The HTML for the image.	 * @since   1.5	 */	public static function getSearchImage($button_text)	{		$img = JHtml::_('image', 'searchButton.gif', $button_text, null, true, true);		return $img;	}}
<?php/*** @version $Id$* @package utf8* @subpackage strings*//*** Define UTF8_CORE as required*/if ( !defined('UTF8_CORE') ) {    define('UTF8_CORE',TRUE);}//--------------------------------------------------------------------/*** Wrapper round mb_strlen* Assumes you have mb_internal_encoding to UTF-8 already* Note: this function does not count bad bytes in the string - these* are simply ignored* @param string UTF-8 string* @return int number of UTF-8 characters in string* @package utf8* @subpackage strings*/function utf8_strlen($str){    return mb_strlen($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strpos* Find position of first occurrence of a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer offset in characters (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        return mb_strpos($str, $search);    } else {        return mb_strpos($str, $search, $offset);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strrpos* Find position of last occurrence of a char in a string* @param string haystack* @param string needle (you should validate this with utf8_is_valid)* @param integer (optional) offset (from left)* @return mixed integer position or FALSE on failure* @package utf8* @subpackage strings*/function utf8_strrpos($str, $search, $offset = FALSE){    if ( $offset === FALSE ) {        # Emulate behaviour of strrpos rather than raising warning        if ( empty($str) ) {            return FALSE;        }        return mb_strrpos($str, $search);    } else {        if ( !is_int($offset) ) {            trigger_error('utf8_strrpos expects parameter 3 to be long',E_USER_WARNING);            return FALSE;        }        $str = mb_substr($str, $offset);        if ( FALSE !== ( $pos = mb_strrpos($str, $search) ) ) {            return $pos + $offset;        }        return FALSE;    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_substr* Return part of a string given character offset (and optionally length)* @param string* @param integer number of UTF-8 characters offset (from left)* @param integer (optional) length in UTF-8 characters from offset* @return mixed string or FALSE if failure* @package utf8* @subpackage strings*/function utf8_substr($str, $offset, $length = FALSE){    if ( $length === FALSE ) {        return mb_substr($str, $offset);    } else {        return mb_substr($str, $offset, $length);    }}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtolower* Make a string lowercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtolower($str){    return mb_strtolower($str);}//--------------------------------------------------------------------/*** Assumes mbstring internal encoding is set to UTF-8* Wrapper around mb_strtoupper* Make a string uppercase* Note: The concept of a characters "case" only exists is some alphabets* such as Latin, Greek, Cyrillic, Armenian and archaic Georgian - it does* not exist in the Chinese alphabet, for example. See Unicode Standard* Annex #21: Case Mappings* @param string* @return mixed either string in lowercase or FALSE is UTF-8 invalid* @package utf8* @subpackage strings*/function utf8_strtoupper($str){    return mb_strtoupper($str);}
<?php/** * @package     Joomla.Platform * @subpackage  HTML * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Utility class for cloaking email addresses * * @package     Joomla.Platform * @subpackage  HTML * @since       11.1 */abstract class JHtmlEmail{	/**	 * Simple Javascript email Cloaker	 *	 * By default replaces an email with a mailto link with email cloaked	 *	 * @param   string   $mail    The -mail address to cloak.	 * @param   boolean  $mailto  True if text and mailing address differ	 * @param   string   $text    Text for the link	 * @param   boolean  $email   True if text is an e-mail address	 *	 * @return  string  The cloaked email.	 *	 * @since   11.1	 */	public static function cloak($mail, $mailto = true, $text = '', $email = true)	{		// Convert text		$mail = self::_convertEncoding($mail);		// Split email by @ symbol		$mail = explode('@', $mail);		$mail_parts = explode('.', $mail[1]);		// Random number		$rand = rand(1, 100000);		$replacement = "\n <script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n var prefix = '&#109;a' + 'i&#108;' + '&#116;o';";		$replacement .= "\n var path = 'hr' + 'ef' + '=';";		$replacement .= "\n var addy" . $rand . " = '" . @$mail[0] . "' + '&#64;';";		$replacement .= "\n addy" . $rand . " = addy" . $rand . " + '" . implode("' + '&#46;' + '", $mail_parts) . "';";		if ($mailto)		{			// Special handling when mail text is different from mail address			if ($text)			{				if ($email)				{					// Convert text					$text = self::_convertEncoding($text);					// Split email by @ symbol					$text = explode('@', $text);					$text_parts = explode('.', $text[1]);					$replacement .= "\n var addy_text" . $rand . " = '" . @$text[0] . "' + '&#64;' + '" . implode("' + '&#46;' + '", @$text_parts)						. "';";				}				else				{					$replacement .= "\n var addy_text" . $rand . " = '" . $text . "';";				}				$replacement .= "\n document.write('<a ' + path + '\'' + prefix + ':' + addy" . $rand . " + '\'>');";				$replacement .= "\n document.write(addy_text" . $rand . ");";				$replacement .= "\n document.write('<\/a>');";			}			else			{				$replacement .= "\n document.write('<a ' + path + '\'' + prefix + ':' + addy" . $rand . " + '\'>');";				$replacement .= "\n document.write(addy" . $rand . ");";				$replacement .= "\n document.write('<\/a>');";			}		}		else		{			$replacement .= "\n document.write(addy" . $rand . ");";		}		$replacement .= "\n //-->";		$replacement .= '\n </script>';		// XHTML compliance no Javascript text handling		$replacement .= "<script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n document.write('<span style=\'display: none;\'>');";		$replacement .= "\n //-->";		$replacement .= "\n </script>";		$replacement .= JText::_('JLIB_HTML_CLOAKING');		$replacement .= "\n <script type='text/javascript'>";		$replacement .= "\n <!--";		$replacement .= "\n document.write('</');";		$replacement .= "\n document.write('span>');";		$replacement .= "\n //-->";		$replacement .= "\n </script>";		return $replacement;	}	/**	 * Convert encoded text	 *	 * @param   string  $text  Text to convert	 *	 * @return  string  The converted text.	 *	 * @since   11.1	 */	protected static function _convertEncoding($text)	{		// Replace vowels with character encoding		$text = str_replace('a', '&#97;', $text);		$text = str_replace('e', '&#101;', $text);		$text = str_replace('i', '&#105;', $text);		$text = str_replace('o', '&#111;', $text);		$text = str_replace('u', '&#117;', $text);		return $text;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! Syslog Log class * * This class is designed to call the PHP Syslog function call which is then sent to the * system wide log system. For Linux/Unix based systems this is the syslog subsystem, for * the Windows based implementations this can be found in the Event Log. For Windows, * permissions may prevent PHP from properly outputting messages. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerSyslog extends JLogLogger{	/**	 * @var array Translation array for JLogEntry priorities to SysLog priority names.	 * @since 11.1	 */	protected $priorities = array(		JLog::EMERGENCY => 'EMERG',		JLog::ALERT => 'ALERT',		JLog::CRITICAL => 'CRIT',		JLog::ERROR => 'ERR',		JLog::WARNING => 'WARNING',		JLog::NOTICE => 'NOTICE',		JLog::INFO => 'INFO',		JLog::DEBUG => 'DEBUG');	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// Ensure that we have an identity string for the Syslog entries.		if (empty($this->options['sys_ident']))		{			$this->options['sys_ident'] = 'Joomla Platform';		}		// If the option to add the process id to Syslog entries is set use it, otherwise default to true.		if (isset($this->options['sys_add_pid']))		{			$this->options['sys_add_pid'] = (bool) $this->options['sys_add_pid'];		}		else		{			$this->options['sys_add_pid'] = true;		}		// If the option to also send Syslog entries to STDERR is set use it, otherwise default to false.		if (isset($this->options['sys_use_stderr']))		{			$this->options['sys_use_stderr'] = (bool) $this->options['sys_use_stderr'];		}		else		{			$this->options['sys_use_stderr'] = false;		}		// Build the Syslog options from our log object options.		$sysOptions = 0;		if ($this->options['sys_add_pid'])		{			$sysOptions = $sysOptions | LOG_PID;		}		if ($this->options['sys_use_stderr'])		{			$sysOptions = $sysOptions | LOG_PERROR;		}		// Open the Syslog connection.		openlog((string) $this->options['sys_ident'], $sysOptions, LOG_USER);	}	/**	 * Destructor.	 *	 * @since   11.1	 */	public function __destruct()	{		closelog();	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Generate the value for the priority based on predefined constants.		$priority = constant(strtoupper('LOG_' . $this->priorities[$entry->priority]));		// Send the entry to Syslog.		syslog($priority, '[' . $entry->category . '] ' . $entry->message);	}}
<?php/** * @package     Joomla.Site * @subpackage  mod_wrapper * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	function iFrameHeight()	{		var h = 0;		if (!document.all)		{			h = document.getElementById('blockrandom').contentDocument.height;			document.getElementById('blockrandom').style.height = h + 60 + 'px';		} else if (document.all)		{			h = document.frames('blockrandom').document.body.scrollHeight;			document.all.blockrandom.style.height = h + 20 + 'px';		}	}</script><iframe <?php echo $load; ?>	id="blockrandom"	name="<?php echo $target ?>"	src="<?php echo $url; ?>"	width="<?php echo $width ?>"	height="<?php echo $height ?>"	scrolling="<?php echo $scroll ?>"	frameborder="<?php echo $frameborder?>"	class="wrapper<?php echo $moduleclass_sfx ?>" >	<?php echo JText::_('MOD_WRAPPER_NO_IFRAMES'); ?></iframe>
<?php/** * @package     Joomla.Platform * @subpackage  Google * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Google Picasa data class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Google * @since       12.3 */class JGoogleDataPicasaAlbum extends JGoogleData{	/**	 * @var    SimpleXMLElement  The album's XML	 * @since  12.3	 */	protected $xml;	/**	 * Constructor.	 *	 * @param   SimpleXMLElement  $xml      XML from Google	 * @param   JRegistry         $options  Google options object	 * @param   JGoogleAuth       $auth     Google data http client object	 *	 * @since   12.3	 */	public function __construct(SimpleXMLElement $xml, JRegistry $options = null, JGoogleAuth $auth = null)	{		$this->xml = $xml;		parent::__construct($options, $auth);		if (isset($this->auth) && !$this->auth->getOption('scope'))		{			$this->auth->setOption('scope', 'https://picasaweb.google.com/data/');		}	}	/**	 * Method to delete a Picasa album	 *	 * @param   mixed  $match  Check for most up to date album	 *	 * @return  boolean  Success or failure.	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function delete($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$jdata = $this->query($url, null, array('GData-Version' => 2, 'If-Match' => $match), 'delete');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			if ($jdata->body != '')			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}			$this->xml = null;			return true;		}		else		{			return false;		}	}	/**	 * Method to get the album link	 *	 * @param   string  $type  Type of link to return	 *	 * @return  string  Link or false on failure	 *	 * @since   12.3	 */	public function getLink($type = 'edit')	{		$links = $this->xml->link;		foreach ($links as $link)		{			if ($link->attributes()->rel == $type)			{				return (string) $link->attributes()->href;			}		}		return false;	}	/**	 * Method to get the title of the album	 *	 * @return  string  Album title	 *	 * @since   12.3	 */	public function getTitle()	{		return (string) $this->xml->children()->title;	}	/**	 * Method to get the summary of the album	 *	 * @return  string  Album summary	 *	 * @since   12.3	 */	public function getSummary()	{		return (string) $this->xml->children()->summary;	}	/**	 * Method to get the location of the album	 *	 * @return  string  Album location	 *	 * @since   12.3	 */	public function getLocation()	{		return (string) $this->xml->children('gphoto', true)->location;	}	/**	 * Method to get the access level of the album	 *	 * @return  string  Album access level	 *	 * @since   12.3	 */	public function getAccess()	{		return (string) $this->xml->children('gphoto', true)->access;	}	/**	 * Method to get the time of the album	 *	 * @return  double  Album time	 *	 * @since   12.3	 */	public function getTime()	{		return (double) $this->xml->children('gphoto', true)->timestamp / 1000;	}	/**	 * Method to set the title of the album	 *	 * @param   string  $title  New album title	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setTitle($title)	{		$this->xml->children()->title = $title;		return $this;	}	/**	 * Method to set the summary of the album	 *	 * @param   string  $summary  New album summary	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setSummary($summary)	{		$this->xml->children()->summary = $summary;		return $this;	}	/**	 * Method to set the location of the album	 *	 * @param   string  $location  New album location	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setLocation($location)	{		$this->xml->children('gphoto', true)->location = $location;		return $this;	}	/**	 * Method to set the access level of the album	 *	 * @param   string  $access  New album access	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setAccess($access)	{		$this->xml->children('gphoto', true)->access = $access;		return $this;	}	/**	 * Method to set the time of the album	 *	 * @param   int  $time  New album time	 *	 * @return  JGoogleDataPicasaAlbum  The object for method chaining	 *	 * @since   12.3	 */	public function setTime($time)	{		$this->xml->children('gphoto', true)->timestamp = $time * 1000;		return $this;	}	/**	 * Method to modify a Picasa Album	 *	 * @param   string  $match  Optional eTag matching parameter	 *	 * @return  mixed  Data from Google.	 *	 * @since   12.3	 */	public function save($match = '*')	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			if ($match === true)			{				$match = $this->xml->xpath('./@gd:etag');				$match = $match[0];			}			try			{				$headers = array('GData-Version' => 2, 'Content-type' => 'application/atom+xml', 'If-Match' => $match);				$jdata = $this->query($url, $this->xml->asXML(), $headers, 'put');			}			catch (Exception $e)			{				if (strpos($e->getMessage(), 'Error code 412 received requesting data: Mismatch: etags') === 0)				{					throw new RuntimeException("Etag match failed: `$match`.");				}				throw $e;			}			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Refresh Picasa Album	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function refresh()	{		if ($this->isAuthenticated())		{			$url = $this->getLink();			$jdata = $this->query($url, null, array('GData-Version' => 2));			$this->xml = $this->safeXML($jdata->body);			return $this;		}		else		{			return false;		}	}	/**	 * Method to retrieve a list of Picasa Photos	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function listPhotos()	{		if ($this->isAuthenticated())		{			$url = $this->getLink('http://schemas.google.com/g/2005#feed');			$jdata = $this->query($url, null, array('GData-Version' => 2));			$xml = $this->safeXML($jdata->body);			if (isset($xml->children()->entry))			{				$items = array();				foreach ($xml->children()->entry as $item)				{					$items[] = new JGoogleDataPicasaPhoto($item, $this->options, $this->auth);				}				return $items;			}			else			{				throw new UnexpectedValueException("Unexpected data received from Google: `{$jdata->body}`.");			}		}		else		{			return false;		}	}	/**	 * Add photo	 *	 * @param   string  $file     Path of file to upload	 * @param   string  $title    Title to give to file (defaults to filename)	 * @param   string  $summary  Description of the file	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	public function upload($file, $title = '', $summary = '')	{		if ($this->isAuthenticated())		{			$title = $title != '' ? $title : JFile::getName($file);			if (!($type = $this->getMIME($file)))			{				throw new RuntimeException("Inappropriate file type.");			}			if (!($data = JFile::read($file)))			{				throw new RuntimeException("Cannot access file: `$file`");			}			$xml = new SimpleXMLElement('<entry></entry>');			$xml->addAttribute('xmlns', 'http://www.w3.org/2005/Atom');			$xml->addChild('title', $title);			$xml->addChild('summary', $summary);			$cat = $xml->addChild('category', '');			$cat->addAttribute('scheme', 'http://schemas.google.com/g/2005#kind');			$cat->addAttribute('term', 'http://schemas.google.com/photos/2007#photo');			$post = "Media multipart posting\n";			$post .= "--END_OF_PART\n";			$post .= "Content-Type: application/atom+xml\n\n";			$post .= $xml->asXML() . "\n";			$post .= "--END_OF_PART\n";			$post .= "Content-Type: {$type}\n\n";			$post .= $data;			$jdata = $this->query($this->getLink(), $post, array('GData-Version' => 2, 'Content-Type: multipart/related'), 'post');			return new JGoogleDataPicasaPhoto($this->safeXML($jdata->body), $this->options, $this->auth);		}		else		{			return false;		}	}	/**	 * Add photo	 *	 * @param   string  $file  Filename	 *	 * @return  mixed  Data from Google	 *	 * @since   12.3	 * @throws UnexpectedValueException	 */	protected function getMIME($file)	{		switch (strtolower(JFile::getExt($file)))		{			case 'bmp':			case 'bm':			return 'image/bmp';			case 'gif':			return 'image/gif';			case 'jpg':			case 'jpeg':			case 'jpe':			case 'jif':			case 'jfif':			case 'jfi':			return 'image/jpeg';			case 'png':			return 'image/png';			case '3gp':			return 'video/3gpp';			case 'avi':			return 'video/avi';			case 'mov':			case 'moov':			case 'qt':			return 'video/quicktime';			case 'mp4':			case 'm4a':			case 'm4p':			case 'm4b':			case 'm4r':			case 'm4v':			return 'video/mp4';			case 'mpg':			case 'mpeg':			case 'mp1':			case 'mp2':			case 'mp3':			case 'm1v':			case 'm1a':			case 'm2a':			case 'mpa':			case 'mpv':			return 'video/mpeg';			case 'asf':			return 'video/x-ms-asf';			case 'wmv':			return 'video/x-ms-wmv';			default:			return false;		}	}}
<?php/** * @package     Joomla.Site * @subpackage  Layout * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?></div>
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Add specific helper files for html generationJHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');// Load switcher behaviorJHtml::_('behavior.switcher');?><form action="<?php echo JRoute::_('index.php'); ?>" method="post" name="adminForm" id="adminForm">	<div id="config-document">		<div id="page-site" class="tab">			<div class="noshow">				<div class="width-100">					<?php echo $this->loadTemplate('system'); ?>				</div>			</div>		</div>		<div id="page-phpsettings" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('phpsettings'); ?>				</div>			</div>		</div>		<div id="page-config" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('config'); ?>				</div>			</div>		</div>		<div id="page-directory" class="tab">			<div class="noshow">				<div class="width-60">					<?php echo $this->loadTemplate('directory'); ?>				</div>			</div>		</div>		<div id="page-phpinfo" class="tab">			<div class="noshow">				<div class="width-100">					<?php echo $this->loadTemplate('phpinfo'); ?>				</div>			</div>		</div>	</div>	<div class="clr"></div></form>
<?php/** * Verifies that control statements conform to their coding standards. * * PHP version 5 * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   CVS: $Id: ControlSignatureSniff.php 244676 2007-10-23 06:05:14Z squiz $ * @link      http://pear.php.net/package/PHP_CodeSniffer */if (class_exists('PHP_CodeSniffer_Standards_AbstractPatternSniff', true) === false) {	throw new PHP_CodeSniffer_Exception('Class PHP_CodeSniffer_Standards_AbstractPatternSniff not found');}/** * Verifies that control statements conform to their coding standards. * * @category  PHP * @package   PHP_CodeSniffer * @author    Greg Sherwood <gsherwood@squiz.net> * @author    Marc McIntyre <mmcintyre@squiz.net> * @copyright 2006 Squiz Pty Ltd (ABN 77 084 670 600) * @license   http://matrix.squiz.net/developer/tools/php_cs/licence BSD Licence * @version   Release: 1.3.0RC2 * @link      http://pear.php.net/package/PHP_CodeSniffer */class Joomla_Sniffs_ControlStructures_ControlSignatureSniff extends PHP_CodeSniffer_Standards_AbstractPatternSniff{	/**	 * Constructs a Joomla_Sniffs_ControlStructures_ControlSignatureSniff.	 */	public function __construct()	{		parent::__construct(true);	}//end __construct()	/**	 * Returns the patterns that this test wishes to verify.	 *	 * @return array(string)	 */	protected function getPatterns()	{		return array(			'if (...)EOL...{...}EOL...elseEOL',			'if (...)EOL...{...}EOL...elseif (...)EOL',			'if (...)EOL',			'tryEOL...{EOL...}EOL',			'catch (...)EOL...{EOL',			'doEOL...{...}EOL',			'while (...)EOL...{EOL',			'for (...)EOL...{EOL',			'foreach (...)EOL...{EOL',			'switch (...)EOL...{EOL',		);	}//end getPatterns()	/**	 * Process a pattern.	 *	 * Returns if we are inside a "tmpl" folder - workaround for the Joomla! CMS :(	 *	 * @param array $patternInfo Information about the pattern used for checking, which includes are	 *               parsed token representation of the pattern.	 * @param PHP_CodeSniffer_File $phpcsFile The PHP_CodeSniffer file where the token occured.	 * @param integer $stackPtr The postion in the tokens stack where the listening token type was found.	 *	 * @return return_type	 */	protected function processPattern($patternInfo, PHP_CodeSniffer_File $phpcsFile	, $stackPtr)	{		if (0)		{			/*			 * @todo disabled - This is a special sniff for the Joomla! CMS to exclude			* the tmpl folder which may contain constructs in colon notation			*/			$parts = explode(DIRECTORY_SEPARATOR, $phpcsFile->getFileName());			if ('tmpl' == $parts[count($parts) - 2])			{				return false;			}		}		return parent::processPattern($patternInfo, $phpcsFile, $stackPtr);	}//function}//end class?>
<?php/** * @package     Joomla.Platform * @subpackage  Object * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Platform Object Class * * This class allows for simple but smart objects with get and set methods * and an internal error handler. * * @package     Joomla.Platform * @subpackage  Object * @since       11.1 */class JObject{	/**	 * An array of error messages or Exception objects.	 *	 * @var    array	 * @since  11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	protected $_errors = array();	/**	 * Class constructor, overridden in descendant classes.	 *	 * @param   mixed  $properties  Either and associative array or another	 *                              object to set the initial properties of the object.	 *	 * @since   11.1	 */	public function __construct($properties = null)	{		if ($properties !== null)		{			$this->setProperties($properties);		}	}	/**	 * Magic method to convert the object to a string gracefully.	 *	 * @return  string  The classname.	 *	 * @since   11.1	 * @deprecated 12.3  Classes should provide their own __toString() implementation.	 */	public function __toString()	{		return get_class($this);	}	/**	 * Sets a default value if not alreay assigned	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed	 *	 * @since   11.1	 */	public function def($property, $default = null)	{		$value = $this->get($property, $default);		return $this->set($property, $value);	}	/**	 * Returns a property of the object or the default value if the property is not set.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $default   The default value.	 *	 * @return  mixed    The value of the property.	 *	 * @since   11.1	 *	 * @see     getProperties()	 */	public function get($property, $default = null)	{		if (isset($this->$property))		{			return $this->$property;		}		return $default;	}	/**	 * Returns an associative array of object properties.	 *	 * @param   boolean  $public  If true, returns only the public properties.	 *	 * @return  array	 *	 * @since   11.1	 *	 * @see     get()	 */	public function getProperties($public = true)	{		$vars = get_object_vars($this);		if ($public)		{			foreach ($vars as $key => $value)			{				if ('_' == substr($key, 0, 1))				{					unset($vars[$key]);				}			}		}		return $vars;	}	/**	 * Get the most recent error message.	 *	 * @param   integer  $i         Option error index.	 * @param   boolean  $toString  Indicates if JError objects should return their error message.	 *	 * @return  string   Error message	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getError($i = null, $toString = true)	{		// Find the error		if ($i === null)		{			// Default, return the last message			$error = end($this->_errors);		}		elseif (!array_key_exists($i, $this->_errors))		{			// If $i has been specified but does not exist, return false			return false;		}		else		{			$error = $this->_errors[$i];		}		// Check if only the string is requested		if ($error instanceof Exception && $toString)		{			return (string) $error;		}		return $error;	}	/**	 * Return all errors, if any.	 *	 * @return  array  Array of error messages or JErrors.	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function getErrors()	{		return $this->_errors;	}	/**	 * Modifies a property of the object, creating it if it does not already exist.	 *	 * @param   string  $property  The name of the property.	 * @param   mixed   $value     The value of the property to set.	 *	 * @return  mixed  Previous value of the property.	 *	 * @since   11.1	 */	public function set($property, $value = null)	{		$previous = isset($this->$property) ? $this->$property : null;		$this->$property = $value;		return $previous;	}	/**	 * Set the object properties based on a named array/hash.	 *	 * @param   mixed  $properties  Either an associative array or another object.	 *	 * @return  boolean	 *	 * @since   11.1	 *	 * @see     set()	 */	public function setProperties($properties)	{		if (is_array($properties) || is_object($properties))		{			foreach ((array) $properties as $k => $v)			{				// Use the set function which might be overridden.				$this->set($k, $v);			}			return true;		}		return false;	}	/**	 * Add an error message.	 *	 * @param   string  $error  Error message.	 *	 * @return  void	 *	 * @since   11.1	 * @see     JError	 * @deprecated 12.3  JError has been deprecated	 */	public function setError($error)	{		array_push($this->_errors, $error);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('JPATH_BASE') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Framework. * * @package     Joomla.Administrator * @subpackage  com_modules * @since       3.0 */class JFormFieldHeadertag extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  3.0	 */	protected $type = 'HeaderTag';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   3.0	 */	protected function getOptions()	{		$options = array();		$tags = array('h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p');		// Create one new option object for each tag		foreach ($tags as $tag)		{			$tmp = JHtml::_('select.option', $tag, $tag);			$options[] = $tmp;		}		reset($options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * OpenSearch View class for Finder * * @package     Joomla.Site * @subpackage  com_finder * @since       2.5 */class FinderViewSearch extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  JError object on failure, void on success.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		$doc = JFactory::getDocument();		$app = JFactory::getApplication();		$params = JComponentHelper::getParams('com_finder');		$doc->setShortName($params->get('opensearch_name', $app->getCfg('sitename')));		$doc->setDescription($params->get('opensearch_description', $app->getCfg('MetaDesc')));		// Add the URL for the search		$searchUri = JURI::base() . 'index.php?option=com_finder&q={searchTerms}';		// Find the menu item for the search		$menu = $app->getMenu();		$items = $menu->getItems('link', 'index.php?option=com_finder&view=search');		if (isset($items[0]))		{			$searchUri .= '&Itemid=' . $items[0]->id;		}		$htmlSearch = new JOpenSearchUrl;		$htmlSearch->template = JRoute::_($searchUri);		$doc->addUrl($htmlSearch);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><fieldset class="adminform" title="<?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?>">	<legend><?php echo JText::_('COM_INSTALLER_MSG_DESCFTPTITLE'); ?></legend>	<?php echo JText::_('COM_INSTALLER_MSG_DESCFTP'); ?>	<?php if ($this->ftp instanceof Exception) : ?>		<p><?php echo JText::_($this->ftp->getMessage()); ?></p>	<?php endif; ?>	<ul class="adminformlist">		<li><label for="username"><?php echo JText::_('JGLOBAL_USERNAME'); ?></label>		<input type="text" id="username" name="username" class="inputbox" value="" /></li>		<li><label for="password"><?php echo JText::_('JGLOBAL_PASSWORD'); ?></label>		<input type="password" id="password" name="password" class="input_box" value="" /></li>	</ul></fieldset>
<?php/** * @package     Joomla.Administrator * @subpackage  com_plugins * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Plugin controller class. * * @package     Joomla.Administrator * @subpackage  com_plugins * @since       1.6 */class PluginsControllerPlugin extends JControllerForm{}
