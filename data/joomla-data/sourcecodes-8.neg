<?php/** * @package     Joomla.Administrator * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of tracks. * * @package     Joomla.Administrator * @subpackage  com_banners * @since       1.6 */class BannersModelTracks extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'name', 'b.name',				'cl.name', 'client_name',				'cat.title', 'category_title',				'track_type', 'a.track_type',				'count', 'a.count',				'track_date', 'a.track_date',			);		}		parent::__construct($config);	}	/**	 * @since   1.6	 */	protected $basename;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type');		$this->setState('filter.type', $type);		$begin = $this->getUserStateFromRequest($this->context . '.filter.begin', 'filter_begin', '', 'string');		$this->setState('filter.begin', $begin);		$end = $this->getUserStateFromRequest($this->context . '.filter.end', 'filter_end', '', 'string');		$this->setState('filter.end', $end);		$categoryId = $this->getUserStateFromRequest($this->context . '.filter.category_id', 'filter_category_id', '');		$this->setState('filter.category_id', $categoryId);		$clientId = $this->getUserStateFromRequest($this->context . '.filter.client_id', 'filter_client_id', '');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_banners');		$this->setState('params', $params);		// List state information.		parent::populateState('b.name', 'asc');	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 * @since   1.6	 */	protected function getListQuery()	{		require_once JPATH_COMPONENT . '/helpers/banners.php';		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			'a.track_date as track_date,'				. 'a.track_type as track_type,'				. $db->quoteName('a.count') . ' as ' . $db->quoteName('count')		);		$query->from($db->quoteName('#__banner_tracks') . ' AS a');		// Join with the banners		$query->join('LEFT', $db->quoteName('#__banners') . ' as b ON b.id=a.banner_id')			->select('b.name as name');		// Join with the client		$query->join('LEFT', $db->quoteName('#__banner_clients') . ' as cl ON cl.id=b.cid')			->select('cl.name as client_name');		// Join with the category		$query->join('LEFT', $db->quoteName('#__categories') . ' as cat ON cat.id=b.catid')			->select('cat.title as category_title');		// Filter by type		$type = $this->getState('filter.type');		if (!empty($type))		{			$query->where('a.track_type = ' . (int) $type);		}		// Filter by client		$clientId = $this->getState('filter.client_id');		if (is_numeric($clientId))		{			$query->where('b.cid = ' . (int) $clientId);		}		// Filter by category		$catedoryId = $this->getState('filter.category_id');		if (is_numeric($catedoryId))		{			$query->where('b.catid = ' . (int) $catedoryId);		}		// Filter by begin date		$begin = $this->getState('filter.begin');		if (!empty($begin))		{			$query->where('a.track_date >= ' . $db->quote($begin));		}		// Filter by end date		$end = $this->getState('filter.end');		if (!empty($end))		{			$query->where('a.track_date <= ' . $db->quote($end));		}		// Add the list ordering clause.		$orderCol = $this->getState('list.ordering', 'name');		$query->order($db->escape($orderCol) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		return $query;	}	/**	 * Method to delete rows.	 *	 * @param   array  An array of item ids.	 *	 * @return  boolean  Returns true on success, false on failure.	 */	public function delete()	{		$user = JFactory::getUser();		$categoryId = $this->getState('category_id');		// Access checks.		if ($categoryId)		{			$allow = $user->authorise('core.delete', 'com_banners.category.' . (int) $categoryId);		}		else		{			$allow = $user->authorise('core.delete', 'com_banners');		}		if ($allow)		{			// Delete tracks from this banner			$db = $this->getDbo();			$query = $db->getQuery(true)				->delete($db->quoteName('#__banner_tracks'));			// Filter by type			$type = $this->getState('filter.type');			if (!empty($type))			{				$query->where('track_type = ' . (int) $type);			}			// Filter by begin date			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$query->where('track_date >= ' . $db->quote($begin));			}			// Filter by end date			$end = $this->getState('filter.end');			if (!empty($end))			{				$query->where('track_date <= ' . $db->quote($end));			}			$where = '1';			// Filter by client			$clientId = $this->getState('filter.client_id');			if (!empty($clientId))			{				$where .= ' AND cid = ' . (int) $clientId;			}			// Filter by category			if (!empty($categoryId))			{				$where .= ' AND catid = ' . (int) $categoryId;			}			$query->where('banner_id IN (SELECT id FROM ' . $db->quoteName('#__banners') . ' WHERE ' . $where . ')');			$db->setQuery($query);			$this->setError((string) $query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			JError::raiseWarning(403, JText::_('JERROR_CORE_DELETE_NOT_PERMITTED'));		}		return true;	}	/**	 * Get file name	 *	 * @return  string    The file name	 * @since   1.6	 */	public function getBaseName()	{		if (!isset($this->basename))		{			$app = JFactory::getApplication();			$basename = $this->getState('basename');			$basename = str_replace('__SITE__', $app->getCfg('sitename'), $basename);			$categoryId = $this->getState('filter.category_id');			if (is_numeric($categoryId))			{				if ($categoryId > 0)				{					$basename = str_replace('__CATID__', $categoryId, $basename);				}				else				{					$basename = str_replace('__CATID__', '', $basename);				}				$categoryName = $this->getCategoryName();				$basename = str_replace('__CATNAME__', $categoryName, $basename);			}			else			{				$basename = str_replace('__CATID__', '', $basename);				$basename = str_replace('__CATNAME__', '', $basename);			}			$clientId = $this->getState('filter.client_id');			if (is_numeric($clientId))			{				if ($clientId > 0)				{					$basename = str_replace('__CLIENTID__', $clientId, $basename);				}				else				{					$basename = str_replace('__CLIENTID__', '', $basename);				}				$clientName = $this->getClientName();				$basename = str_replace('__CLIENTNAME__', $clientName, $basename);			}			else			{				$basename = str_replace('__CLIENTID__', '', $basename);				$basename = str_replace('__CLIENTNAME__', '', $basename);			}			$type = $this->getState('filter.type');			if ($type > 0)			{				$basename = str_replace('__TYPE__', $type, $basename);				$typeName = JText::_('COM_BANNERS_TYPE' . $type);				$basename = str_replace('__TYPENAME__', $typeName, $basename);			}			else			{				$basename = str_replace('__TYPE__', '', $basename);				$basename = str_replace('__TYPENAME__', '', $basename);			}			$begin = $this->getState('filter.begin');			if (!empty($begin))			{				$basename = str_replace('__BEGIN__', $begin, $basename);			}			else			{				$basename = str_replace('__BEGIN__', '', $basename);			}			$end = $this->getState('filter.end');			if (!empty($end))			{				$basename = str_replace('__END__', $end, $basename);			}			else			{				$basename = str_replace('__END__', '', $basename);			}			$this->basename = $basename;		}		return $this->basename;	}	/**	 * Get the category name.	 *	 * @return  string    The category name	 * @since   1.6	 */	protected function getCategoryName()	{		$categoryId = $this->getState('filter.category_id');		if ($categoryId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('title')				->from($db->quoteName('#__categories'))				->where($db->quoteName('id') . '=' . $db->quote($categoryId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCATEGORYNAME');		}		return $name;	}	/**	 * Get the category name	 *	 * @return  string    The category name.	 * @since   1.6	 */	protected function getClientName()	{		$clientId = $this->getState('filter.client_id');		if ($clientId)		{			$db = $this->getDbo();			$query = $db->getQuery(true)				->select('name')				->from($db->quoteName('#__banner_clients'))				->where($db->quoteName('id') . '=' . $db->quote($clientId));			$db->setQuery($query);			try			{				$name = $db->loadResult();			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage());				return false;			}		}		else		{			$name = JText::_('COM_BANNERS_NOCLIENTNAME');		}		return $name;	}	/**	 * Get the file type.	 *	 * @return  string    The file type	 * @since   1.6	 */	public function getFileType()	{		return $this->getState('compressed') ? 'zip' : 'csv';	}	/**	 * Get the mime type.	 *	 * @return  string    The mime type.	 * @since   1.6	 */	public function getMimeType()	{		return $this->getState('compressed') ? 'application/zip' : 'text/csv';	}	/**	 * Get the content	 *	 * @return  string    The content.	 * @since   1.6	 */	public function getContent()	{		if (!isset($this->content))		{			$this->content = '';			$this->content .=				'"' . str_replace('"', '""', JText::_('COM_BANNERS_HEADING_NAME')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_CLIENT')) . '","' .					str_replace('"', '""', JText::_('JCATEGORY')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_TYPE')) . '","' .					str_replace('"', '""', JText::_('COM_BANNERS_HEADING_COUNT')) . '","' .					str_replace('"', '""', JText::_('JDATE')) . '"' . "\n";			foreach ($this->getItems() as $item)			{				$this->content .=					'"' . str_replace('"', '""', $item->name) . '","' .						str_replace('"', '""', $item->client_name) . '","' .						str_replace('"', '""', $item->category_title) . '","' .						str_replace('"', '""', ($item->track_type == 1 ? JText::_('COM_BANNERS_IMPRESSION') : JText::_('COM_BANNERS_CLICK'))) . '","' .						str_replace('"', '""', $item->count) . '","' .						str_replace('"', '""', $item->track_date) . '"' . "\n";			}			if ($this->getState('compressed'))			{				$app = JFactory::getApplication('administrator');				$files = array();				$files['track'] = array();				$files['track']['name'] = $this->getBasename() . '.csv';				$files['track']['data'] = $this->content;				$files['track']['time'] = time();				$ziproot = $app->getCfg('tmp_path') . '/' . uniqid('banners_tracks_') . '.zip';				// run the packager				jimport('joomla.filesystem.folder');				jimport('joomla.filesystem.file');				$delete = JFolder::files($app->getCfg('tmp_path') . '/', uniqid('banners_tracks_'), false, true);				if (!empty($delete))				{					if (!JFile::delete($delete))					{						// JFile::delete throws an error						$this->setError(JText::_('COM_BANNERS_ERR_ZIP_DELETE_FAILURE'));						return false;					}				}				if (!$packager = JArchive::getAdapter('zip'))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_ADAPTER_FAILURE'));					return false;				}				elseif (!$packager->create($ziproot, $files))				{					$this->setError(JText::_('COM_BANNERS_ERR_ZIP_CREATE_FAILURE'));					return false;				}				$this->content = file_get_contents($ziproot);			}		}		return $this->content;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Methods supporting a list of user group records. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelGroups extends JModelList{	/**	 * Constructor.	 *	 * @param   array  An optional associative array of configuration settings.	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'parent_id', 'a.parent_id',				'title', 'a.title',				'lft', 'a.lft',				'rgt', 'a.rgt',			);		}		parent::__construct($config);	}	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// Load the parameters.		$params = JComponentHelper::getParams('com_users');		$this->setState('params', $params);		// List state information.		parent::populateState('a.lft', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id    A prefix for the store id.	 *	 * @return  string  A store id.	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.search');		return parent::getStoreId($id);	}	/**	 * Gets the list of groups and adds expensive joins to the result set.	 *	 * @return  mixed  An array of data items on success, false on failure.	 * @since   1.6	 */	public function getItems()	{		$db = $this->getDbo();		// Get a storage key.		$store = $this->getStoreId();		// Try to load the data from internal storage.		if (empty($this->cache[$store]))		{			$items = parent::getItems();			// Bail out on an error or empty list.			if (empty($items))			{				$this->cache[$store] = $items;				return $items;			}			// First pass: get list of the group id's and reset the counts.			$groupIds = array();			foreach ($items as $item)			{				$groupIds[] = (int) $item->id;				$item->user_count = 0;			}			// Get the counts from the database only for the users in the list.			$query = $db->getQuery(true);			// Count the objects in the user group.			$query->select('map.group_id, COUNT(DISTINCT map.user_id) AS user_count')				->from($db->quoteName('#__user_usergroup_map') . ' AS map')				->where('map.group_id IN (' . implode(',', $groupIds) . ')')				->group('map.group_id');			$db->setQuery($query);			// Load the counts into an array indexed on the user id field.			try			{				$users = $db->loadObjectList('group_id');			}			catch (RuntimeException $e)			{				$this->setError($e->getMessage);				return false;			}			// Second pass: collect the group counts into the master items array.			foreach ($items as &$item)			{				if (isset($users[$item->id]))				{					$item->user_count = $users[$item->id]->user_count;				}			}			// Add the items to the internal cache.			$this->cache[$store] = $items;		}		return $this->cache[$store];	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.*'			)		);		$query->from($db->quoteName('#__usergroups') . ' AS a');		// Add the level in the tree.		$query->select('COUNT(DISTINCT c2.id) AS level')			->join('LEFT OUTER', $db->quoteName('#__usergroups') . ' AS c2 ON a.lft > c2.lft AND a.rgt < c2.rgt')			->group('a.id, a.lft, a.rgt, a.parent_id, a.title');		// Filter the comments over the search string if set.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			else			{				$search = $db->quote('%' . $db->escape($search, true) . '%');				$query->where('a.title LIKE ' . $search);			}		}		// Add the list ordering clause.		$query->order($db->escape($this->getState('list.ordering', 'a.lft')) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));		//echo nl2br(str_replace('#__','jos_',$query));		return $query;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories view class for the Category package. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesViewCategories extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	protected $assoc;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state		= $this->get('State');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->assoc		= $this->get('Assoc');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		// Preprocess the list of items to find ordering divisions.		foreach ($this->items as &$item)		{			$this->ordering[$item->parent_id][] = $item->id;		}		// Levels filter.		$options	= array();		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));		$this->f_levels = $options;		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		$categoryId	= $this->state->get('filter.category_id');		$component	= $this->state->get('filter.component');		$section	= $this->state->get('filter.section');		$canDo		= null;		$user		= JFactory::getUser();		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Avoid nonsense situation.		if ($component == 'com_categories')		{			return;		}		// Need to load the menu language file as mod_menu hasn't been loaded yet.		$lang = JFactory::getLanguage();			$lang->load($component, JPATH_BASE, null, false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, null, false, false)		||	$lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)		||	$lang->load($component, JPATH_ADMINISTRATOR.'/components/'.$component, $lang->getDefault(), false, false);		// Load the category helper.		require_once JPATH_COMPONENT.'/helpers/categories.php';		// Get the results for each action.		$canDo = CategoriesHelper::getActions($component, $categoryId);		// If a component categories title string is present, let's use it.		if ($lang->hasKey($component_title_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_TITLE'))		{			$title = JText::_($component_title_key);		}		// Else if the component section string exits, let's use it		elseif ($lang->hasKey($component_section_key = strtoupper($component.($section?"_$section":''))))		{			$title = JText::sprintf('COM_CATEGORIES_CATEGORIES_TITLE', $this->escape(JText::_($component_section_key)));		}		// Else use the base title		else		{			$title = JText::_('COM_CATEGORIES_CATEGORIES_BASE_TITLE');		}		// Load specific css component		JHtml::_('stylesheet', $component.'/administrator/categories.css', array(), true);		// Prepare the toolbar.		JToolbarHelper::title($title, 'categories '.substr($component, 4).($section?"-$section":'').'-categories');		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories($component, 'core.create'))) > 0 )		{			JToolbarHelper::addNew('category.add');		}		if ($canDo->get('core.edit') || $canDo->get('core.edit.own'))		{			JToolbarHelper::editList('category.edit');		}		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publish('categories.publish', 'JTOOLBAR_PUBLISH', true);			JToolbarHelper::unpublish('categories.unpublish', 'JTOOLBAR_UNPUBLISH', true);			JToolbarHelper::archiveList('categories.archive');		}		if (JFactory::getUser()->authorise('core.admin'))		{			JToolbarHelper::checkin('categories.checkin');		}		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete', $component))		{			JToolbarHelper::deleteList('', 'categories.delete', 'JTOOLBAR_EMPTY_TRASH');		}		elseif ($canDo->get('core.edit.state'))		{			JToolbarHelper::trash('categories.trash');		}		// Add a batch button		if ($canDo->get('core.edit'))		{			JHtml::_('bootstrap.modal', 'collapseModal');			$title = JText::_('JTOOLBAR_BATCH');			$dhtml = "<button data-toggle=\"modal\" data-target=\"#collapseModal\" class=\"btn btn-small\">						<i class=\"icon-checkbox-partial\" title=\"$title\"></i>						$title</button>";			$bar->appendButton('Custom', $dhtml, 'batch');		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::custom('categories.rebuild', 'refresh.png', 'refresh_f2.png', 'JTOOLBAR_REBUILD', false);			JToolbarHelper::preferences($component);		}		// Compute the ref_key if it does exist in the component		if (!$lang->hasKey($ref_key = strtoupper($component.($section?"_$section":'')).'_CATEGORIES_HELP_KEY'))		{			$ref_key = 'JHELP_COMPONENTS_'.strtoupper(substr($component, 4).($section?"_$section":'')).'_CATEGORIES';		}		// Get help for the categories view for the component by		// -remotely searching in a language defined dedicated URL: *component*_HELP_URL		// -locally  searching in a component help file if helpURL param exists in the component and is set to ''		// -remotely searching in a component URL if helpURL param exists in the component and is NOT set to ''		if ($lang->hasKey($lang_help_url = strtoupper($component).'_HELP_URL'))		{			$debug = $lang->setDebug(false);			$url = JText::_($lang_help_url);			$lang->setDebug($debug);		}		else		{			$url = null;		}		JToolbarHelper::help($ref_key, JComponentHelper::getParams($component)->exists('helpURL'), $url);		JHtmlSidebar::setAction('index.php?option=com_categories&view=categories');		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_MAX_LEVELS'),			'filter_level',			JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_PUBLISHED'),			'filter_published',			JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true)		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_ACCESS'),			'filter_access',			JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'))		);		JHtmlSidebar::addFilter(			JText::_('JOPTION_SELECT_LANGUAGE'),			'filter_language',			JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'))		);		JHtmlSidebar::addFilter(		'-' . JText::_('JSELECT') . ' ' . JText::_('JTAG') . '-',		'filter_tag',		JHtml::_('select.options', JHtml::_('tag.options', true, true), 'value', 'text', $this->state->get('filter.tag'))		);	}	/**	 * Returns an array of fields the table can be sorted by	 *	 * @return  array  Array containing the field name to sort by as the key and display text as value	 *	 * @since   3.0	 */	protected function getSortFields()	{		return array(			'a.lft' => JText::_('JGRID_HEADING_ORDERING'),			'a.state' => JText::_('JSTATUS'),			'a.title' => JText::_('JGLOBAL_TITLE'),			'a.access' => JText::_('JGRID_HEADING_ACCESS'),			'language' => JText::_('JGRID_HEADING_LANGUAGE'),			'a.id' => JText::_('JGRID_HEADING_ID')		);	}}
<?php/** * @package     Joomla.Legacy * @subpackage  Model * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Prototype admin model. * * @package     Joomla.Legacy * @subpackage  Model * @since       12.2 */abstract class JModelAdmin extends JModelForm{	/**	 * The prefix to use with controller messages.	 *	 * @var    string	 * @since  12.2	 */	protected $text_prefix = null;	/**	 * The event to trigger after deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_delete = null;	/**	 * The event to trigger after saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_after_save = null;	/**	 * The event to trigger before deleting the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_delete = null;	/**	 * The event to trigger before saving the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_before_save = null;	/**	 * The event to trigger after changing the published state of the data.	 *	 * @var    string	 * @since  12.2	 */	protected $event_change_state = null;	/**	 * Constructor.	 *	 * @param   array  $config  An optional associative array of configuration settings.	 *	 * @see     JModelLegacy	 * @since   12.2	 */	public function __construct($config = array())	{		parent::__construct($config);		if (isset($config['event_after_delete']))		{			$this->event_after_delete = $config['event_after_delete'];		}		elseif (empty($this->event_after_delete))		{			$this->event_after_delete = 'onContentAfterDelete';		}		if (isset($config['event_after_save']))		{			$this->event_after_save = $config['event_after_save'];		}		elseif (empty($this->event_after_save))		{			$this->event_after_save = 'onContentAfterSave';		}		if (isset($config['event_before_delete']))		{			$this->event_before_delete = $config['event_before_delete'];		}		elseif (empty($this->event_before_delete))		{			$this->event_before_delete = 'onContentBeforeDelete';		}		if (isset($config['event_before_save']))		{			$this->event_before_save = $config['event_before_save'];		}		elseif (empty($this->event_before_save))		{			$this->event_before_save = 'onContentBeforeSave';		}		if (isset($config['event_change_state']))		{			$this->event_change_state = $config['event_change_state'];		}		elseif (empty($this->event_change_state))		{			$this->event_change_state = 'onContentChangeState';		}		// Guess the JText message prefix. Defaults to the option.		if (isset($config['text_prefix']))		{			$this->text_prefix = strtoupper($config['text_prefix']);		}		elseif (empty($this->text_prefix))		{			$this->text_prefix = strtoupper($this->option);		}	}	/**	 * Method to perform batch operations on an item or a set of items.	 *	 * @param   array  $commands  An array of commands to perform.	 * @param   array  $pks       An array of item ids.	 * @param   array  $contexts  An array of item contexts.	 *	 * @return  boolean  Returns true on success, false on failure.	 *	 * @since   12.2	 */	public function batch($commands, $pks, $contexts)	{		// Sanitize ids.		$pks = array_unique($pks);		JArrayHelper::toInteger($pks);		// Remove any values of zero.		if (array_search(0, $pks, true))		{			unset($pks[array_search(0, $pks, true)]);		}		if (empty($pks))		{			$this->setError(JText::_('JGLOBAL_NO_ITEM_SELECTED'));			return false;		}		$done = false;		if (!empty($commands['category_id']))		{			$cmd = JArrayHelper::getValue($commands, 'move_copy', 'c');			if ($cmd == 'c')			{				$result = $this->batchCopy($commands['category_id'], $pks, $contexts);				if (is_array($result))				{					$pks = $result;				}				else				{					return false;				}			}			elseif ($cmd == 'm' && !$this->batchMove($commands['category_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['assetgroup_id']))		{			if (!$this->batchAccess($commands['assetgroup_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['language_id']))		{			if (!$this->batchLanguage($commands['language_id'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!empty($commands['tag']))		{			if (!$this->batchTag($commands['tag'], $pks, $contexts))			{				return false;			}			$done = true;		}		if (!$done)		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_INSUFFICIENT_BATCH_INFORMATION'));			return false;		}		// Clear the cache		$this->cleanCache();		return true;	}	/**	 * Batch access level changes for a group of rows.	 *	 * @param   integer  $value     The new value matching an Asset Group ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   12.2	 */	protected function batchAccess($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->access = (int) $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch copy items to a new category or current.	 *	 * @param   integer  $value     The new category.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  mixed  An array of new IDs on success, boolean false on failure.	 *	 * @since	12.2	 */	protected function batchCopy($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		$i = 0;		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that the user has create permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we let's proceed		while (!empty($pks))		{			// Pop the first ID off the stack			$pk = array_shift($pks);			$table->reset();			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Alter the title & alias			$data = $this->generateNewTitle($categoryId, $table->alias, $table->title);			$table->title = $data['0'];			$table->alias = $data['1'];			// Reset the ID because we are making a copy			$table->id = 0;			// New category ID			$table->catid = $categoryId;			// TODO: Deal with ordering?			// $table->ordering	= 1;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Get the new item ID			$newId = $table->get('id');			// Add the new ID to the array			$newIds[$i]	= $newId;			$i++;		}		// Clean the cache		$this->cleanCache();		return $newIds;	}	/**	 * Batch language changes for a group of rows.	 *	 * @param   string  $value     The new value matching a language.	 * @param   array   $pks       An array of row IDs.	 * @param   array   $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since   11.3	 */	protected function batchLanguage($value, $pks, $contexts)	{		// Set the variables		$user	= JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$table->language = $value;				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch move items to a new category	 *	 * @param   integer  $value     The new category ID.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  boolean  True if successful, false otherwise and internal error is set.	 *	 * @since	12.2	 */	protected function batchMove($value, $pks, $contexts)	{		$categoryId = (int) $value;		$table = $this->getTable();		// Check that the category exists		if ($categoryId)		{			$categoryTable = JTable::getInstance('Category');			if (!$categoryTable->load($categoryId))			{				if ($error = $categoryTable->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));					return false;				}			}		}		if (empty($categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_MOVE_CATEGORY_NOT_FOUND'));			return false;		}		// Check that user has create and edit permission for the component		$extension = JFactory::getApplication()->input->get('option', '');		$user = JFactory::getUser();		if (!$user->authorise('core.create', $extension . '.category.' . $categoryId))		{			$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_CREATE'));			return false;		}		// Parent exists so we proceed		foreach ($pks as $pk)		{			if (!$user->authorise('core.edit', $contexts[$pk]))			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}			// Check that the row actually exists			if (!$table->load($pk))			{				if ($error = $table->getError())				{					// Fatal error					$this->setError($error);					return false;				}				else				{					// Not fatal error					$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_BATCH_MOVE_ROW_NOT_FOUND', $pk));					continue;				}			}			// Set the new category ID			$table->catid = $categoryId;			// Check the row.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Store the row.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Batch tag a list of item.	 *	 * @param   integer  $value     The value of the new tag.	 * @param   array    $pks       An array of row IDs.	 * @param   array    $contexts  An array of item contexts.	 *	 * @return  void.	 *	 * @since   3.1	 */	protected function batchTag($value, $pks, $contexts)	{		// Set the variables		$user = JFactory::getUser();		$table = $this->getTable();		foreach ($pks as $pk)		{			if ($user->authorise('core.edit', $contexts[$pk]))			{				$table->reset();				$table->load($pk);				$metaObject = json_decode($table->metadata);				$metaObject->tags = (isset($metaObject->tags) && is_array($metaObject->tags)) ? $metaObject->tags : array();				$metaObject->tags[] = (int) $value;				$metaObject->tags = array_unique($metaObject->tags);				$table->metadata = json_encode($metaObject);				if (!$table->store())				{					$this->setError($table->getError());					return false;				}			}			else			{				$this->setError(JText::_('JLIB_APPLICATION_ERROR_BATCH_CANNOT_EDIT'));				return false;			}		}		// Clean the cache		$this->cleanCache();		return true;	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   12.2	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method override to check-in a record or an array of record	 *	 * @param   mixed  $pks  The ID of the primary key or an array of IDs	 *	 * @return  mixed  Boolean false if there is an error, otherwise the count of records checked in.	 *	 * @since   12.2	 */	public function checkin($pks = array())	{		$pks = (array) $pks;		$table = $this->getTable();		$count = 0;		if (empty($pks))		{			$pks = array((int) $this->getState($this->getName() . '.id'));		}		// Check in all items.		foreach ($pks as $pk)		{			if ($table->load($pk))			{				if ($table->checked_out > 0)				{					if (!parent::checkin($pk))					{						return false;					}					$count++;				}			}			else			{				$this->setError($table->getError());				return false;			}		}		return $count;	}	/**	 * Method override to check-out a record.	 *	 * @param   integer  $pk  The ID of the primary key.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function checkout($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		return parent::checkout($pk);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   12.2	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger($this->event_before_delete, array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger($this->event_after_delete, array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						JLog::add($error, JLog::WARNING, 'jerror');						return false;					}					else					{						JLog::add(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'), JLog::WARNING, 'jerror');						return false;					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $category_id  The id of the category.	 * @param   string   $alias        The alias.	 * @param   string   $title        The title.	 *	 * @return	array  Contains the modified title and alias.	 *	 * @since	12.2	 */	protected function generateNewTitle($category_id, $alias, $title)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			$title = JString::increment($title);			$alias = JString::increment($alias, 'dash');		}		return array($title, $alias);	}	/**	 * Method to get a single record.	 *	 * @param   integer  $pk  The id of the primary key.	 *	 * @return  mixed    Object on success, false on failure.	 *	 * @since   12.2	 */	public function getItem($pk = null)	{		$pk = (!empty($pk)) ? $pk : (int) $this->getState($this->getName() . '.id');		$table = $this->getTable();		if ($pk > 0)		{			// Attempt to load the row.			$return = $table->load($pk);			// Check for a table object error.			if ($return === false && $table->getError())			{				$this->setError($table->getError());				return false;			}		}		// Convert to the JObject before adding other data.		$properties = $table->getProperties(1);		$item = JArrayHelper::toObject($properties, 'JObject');		if (property_exists($item, 'params'))		{			$registry = new JRegistry;			$registry->loadString($item->params);			$item->params = $registry->toArray();		}		return $item;	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   JTable  $table  A JTable object.	 *	 * @return  array  An array of conditions to add to ordering queries.	 *	 * @since   12.2	 */	protected function getReorderConditions($table)	{		return array();	}	/**	 * Stock method to auto-populate the model state.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function populateState()	{		$table = $this->getTable();		$key = $table->getKeyName();		// Get the pk of the record from the request.		$pk = JFactory::getApplication()->input->getInt($key);		$this->setState($this->getName() . '.id', $pk);		// Load the parameters.		$value = JComponentHelper::getParams($this->option);		$this->setState('params', $value);	}	/**	 * Prepare and sanitise the table data prior to saving.	 *	 * @param   JTable  $table  A reference to a JTable object.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function prepareTable($table)	{		// Derived class will provide its own implementation if required.	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state.	 *	 * @return  boolean  True on success.	 *	 * @since   12.2	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger($this->event_change_state, array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Method to adjust the ordering of a row.	 *	 * Returns NULL if the user did not have edit	 * privileges for any of the selected primary keys.	 *	 * @param   integer  $pks    The ID of the primary key to move.	 * @param   integer  $delta  Increment, usually +1 or -1	 *	 * @return  mixed  False on failure or error, true on success, null if the $pk is empty (no items selected).	 *	 * @since   12.2	 */	public function reorder($pks, $delta = 0)	{		$table = $this->getTable();		$pks = (array) $pks;		$result = true;		$allowed = true;		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk) && $this->checkout($pk))			{				// Access checks.				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->checkin($pk);					JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');					$allowed = false;					continue;				}				$where = array();				$where = $this->getReorderConditions($table);				if (!$table->move($delta, $where))				{					$this->setError($table->getError());					unset($pks[$i]);					$result = false;				}				$this->checkin($pk);			}			else			{				$this->setError($table->getError());				unset($pks[$i]);				$result = false;			}		}		if ($allowed === false && empty($pks))		{			$result = null;		}		// Clear the component's cache		if ($result == true)		{			$this->cleanCache();		}		return $result;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success, False on error.	 *	 * @since   12.2	 */	public function save($data)	{		$dispatcher = JEventDispatcher::getInstance();		$table = $this->getTable();		$key = $table->getKeyName();		$pk = (!empty($data[$key])) ? $data[$key] : (int) $this->getState($this->getName() . '.id');		$isNew = true;		// Include the content plugins for the on save events.		JPluginHelper::importPlugin('content');		// Allow an exception to be thrown.		try		{			// Load the row if saving an existing record.			if ($pk > 0)			{				$table->load($pk);				$isNew = false;			}			// Bind the data.			if (!$table->bind($data))			{				$this->setError($table->getError());				return false;			}			// Prepare the row for saving			$this->prepareTable($table);			// Check the data.			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// Trigger the onContentBeforeSave event.			$result = $dispatcher->trigger($this->event_before_save, array($this->option . '.' . $this->name, $table, $isNew));			if (in_array(false, $result, true))			{				$this->setError($table->getError());				return false;			}			// Store the data.			if (!$table->store())			{				$this->setError($table->getError());				return false;			}			// Clean the cache.			$this->cleanCache();			// Trigger the onContentAfterSave event.			$dispatcher->trigger($this->event_after_save, array($this->option . '.' . $this->name, $table, $isNew));		}		catch (Exception $e)		{			$this->setError($e->getMessage());			return false;		}		$pkName = $table->getKeyName();		if (isset($table->$pkName))		{			$this->setState($this->getName() . '.id', $table->$pkName);		}		$this->setState($this->getName() . '.new', $isNew);		return true;	}	/**	 * Saves the manually set order of records.	 *	 * @param   array    $pks    An array of primary key ids.	 * @param   integer  $order  +1 or -1	 *	 * @return  mixed	 *	 * @since   12.2	 */	public function saveorder($pks = null, $order = null)	{		$table = $this->getTable();		$conditions = array();		if (empty($pks))		{			return JError::raiseWarning(500, JText::_($this->text_prefix . '_ERROR_NO_ITEMS_SELECTED'));		}		// Update ordering values		foreach ($pks as $i => $pk)		{			$table->load((int) $pk);			// Access checks.			if (!$this->canEditState($table))			{				// Prune items that you can't change.				unset($pks[$i]);				JLog::add(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'), JLog::WARNING, 'jerror');			}			elseif ($table->ordering != $order[$i])			{				$table->ordering = $order[$i];				if (!$table->store())				{					$this->setError($table->getError());					return false;				}				// Remember to reorder within position and client_id				$condition = $this->getReorderConditions($table);				$found = false;				foreach ($conditions as $cond)				{					if ($cond[1] == $condition)					{						$found = true;						break;					}				}				if (!$found)				{					$key = $table->getKeyName();					$conditions[] = array($table->$key, $condition);				}			}		}		// Execute reorder for each category.		foreach ($conditions as $cond)		{			$table->load($cond[0]);			$table->reorder($cond[1]);		}		// Clear the component's cache		$this->cleanCache();		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_modules * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * HTML View class for the Modules component * * @package     Joomla.Administrator * @subpackage  com_modules * @since       1.6 */class ModulesViewSelect extends JViewLegacy{	protected $state;	protected $items;	/**	 * Display the view	 */	public function display($tpl = null)	{		$state		= $this->get('State');		$items		= $this->get('Items');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->state = &$state;		$this->items = &$items;		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   3.0	 */	protected function addToolbar()	{		// Add page title		JToolbarHelper::title(JText::_('COM_MODULES_MANAGER_MODULES'), 'module.png');		// Get the toolbar object instance		$bar = JToolBar::getInstance('toolbar');		// Cancel		$title = JText::_('JTOOLBAR_CANCEL');		$dhtml = "<button onClick=\"location.href='index.php?option=com_modules'\" class=\"btn\">					<i class=\"icon-remove\" title=\"$title\"></i>					$title</button>";		$bar->appendButton('Custom', $dhtml, 'new');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Field class for the Joomla Platform. * Provides and input field for e-mail addresses * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.email.html#input.email * @see         JFormRuleEmail * @since       11.1 */class JFormFieldEMail extends JFormField{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Email';	/**	 * Method to get the field input markup for e-mail addresses.	 *	 * @return  string  The field input markup.	 *	 * @since   11.1	 */	protected function getInput()	{		// Initialize some field attributes.		$size = $this->element['size'] ? ' size="' . (int) $this->element['size'] . '"' : '';		$maxLength = $this->element['maxlength'] ? ' maxlength="' . (int) $this->element['maxlength'] . '"' : '';		$class = $this->element['class'] ? ' ' . (string) $this->element['class'] : '';		$readonly = ((string) $this->element['readonly'] == 'true') ? ' readonly="readonly"' : '';		$disabled = ((string) $this->element['disabled'] == 'true') ? ' disabled="disabled"' : '';		$required = $this->required ? ' required="required" aria-required="true"' : '';		// Initialize JavaScript field attributes.		$onchange = $this->element['onchange'] ? ' onchange="' . (string) $this->element['onchange'] . '"' : '';		return '<input type="text" name="' . $this->name . '" class="validate-email' . $class . '" id="' . $this->id . '" value="'			. htmlspecialchars($this->value, ENT_COMPAT, 'UTF-8') . '"' . $size . $disabled . $readonly . $onchange . $maxLength . $required . '/>';	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MENUS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MENUS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0)		{		?>			<div id="batch-choose-action" class="combo control-group">				<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">					<?php echo JText::_('COM_MENUS_BATCH_MENU_LABEL'); ?>				</label>				<div class="controls">					<select name="batch[menu_id]" class="inputbox" id="batch-menu-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('menu.menuitems', array('published' => $published)));?>					</select>				</div>			</div>			<div id="batch-copy-move" class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php		}		?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-menu-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('item.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Form Rule class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Form * @since       11.2 */class JFormRuleColor extends JFormRule{	/**	 * Method to test for a valid color in hexadecimal.	 *	 * @param   SimpleXMLElement  $element  The SimpleXMLElement object representing the <field /> tag for the form field object.	 * @param   mixed             $value    The form field value to validate.	 * @param   string            $group    The field name group control value. This acts as as an array container for the field.	 *                                      For example if the field has name="foo" and the group value is set to "bar" then the	 *                                      full field name would end up being "bar[foo]".	 * @param   JRegistry         $input    An optional JRegistry object with the entire data set to validate against the entire form.	 * @param   JForm             $form     The form object for which the field is being tested.	 *	 * @return  boolean  True if the value is valid, false otherwise.	 *	 * @since   11.2	 */	public function test(SimpleXMLElement $element, $value, $group = null, JRegistry $input = null, JForm $form = null)	{		$value = trim($value);		if (empty($value))		{			// A color field can't be empty, we default to black. This is the same as the HTML5 spec.			$value = '#000000';			return true;		}		if ($value[0] != '#')		{			return false;		}		// Remove the leading # if present to validate the numeric part		$value = ltrim($value, '#');		// The value must be 6 or 3 characters long		if (!((strlen($value) == 6 || strlen($value) == 3) && ctype_xdigit($value)))		{			return false;		}		// Prepend the # again		$value = '#' . $value;		return true;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;if (!JFactory::getUser()->authorise('core.manage', 'com_weblinks')){	return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));}$controller	= JControllerLegacy::getInstance('Weblinks');$controller->execute(JFactory::getApplication()->input->get('task'));$controller->redirect();
<?php/** * @package     Joomla.Administrator * @subpackage  com_weblinks * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Weblinks model. * * @package     Joomla.Administrator * @subpackage  com_weblinks * @since       1.5 */class WeblinksModelWeblink extends JModelAdmin{	/**	 * @var		string	The prefix to use with controller messages.	 * @since   1.6	 */	protected $text_prefix = 'COM_WEBLINKS';	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		if (!empty($record->id))		{			if ($record->state != -2)			{				return;			}			$user = JFactory::getUser();			if ($record->catid)			{				return $user->authorise('core.delete', 'com_weblinks.category.'.(int) $record->catid);			}			else			{				return parent::canDelete($record);			}		}	}	/**	 * Method to test whether a record can have its state changed.	 *	 * @param   object	A record object.	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		if (!empty($record->catid))		{			return $user->authorise('core.edit.state', 'com_weblinks.category.'.(int) $record->catid);		}		else		{			return parent::canEditState($record);		}	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	 */	public function getTable($type = 'Weblink', $prefix = 'WeblinksTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_weblinks.weblink', 'weblink', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		// Determine correct permissions to check.		if ($this->getState('weblink.id'))		{			// Existing record. Can only edit in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.edit');		}		else		{			// New record. Can only create in selected categories.			$form->setFieldAttribute('catid', 'action', 'core.create');		}		// Modify the form based on access controls.		if (!$this->canEditState((object) $data))		{			// Disable fields for display.			$form->setFieldAttribute('ordering', 'disabled', 'true');			$form->setFieldAttribute('state', 'disabled', 'true');			$form->setFieldAttribute('publish_up', 'disabled', 'true');			$form->setFieldAttribute('publish_down', 'disabled', 'true');			// Disable fields while saving.			// The controller has already verified this is a record you can edit.			$form->setFieldAttribute('ordering', 'filter', 'unset');			$form->setFieldAttribute('state', 'filter', 'unset');			$form->setFieldAttribute('publish_up', 'filter', 'unset');			$form->setFieldAttribute('publish_down', 'filter', 'unset');		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_weblinks.edit.weblink.data', array());		if (empty($data))		{			$data = $this->getItem();			// Prime some default values.			if ($this->getState('weblink.id') == 0)			{				$app = JFactory::getApplication();				$data->set('catid', $app->input->get('catid', $app->getUserState('com_weblinks.weblinks.filter.category_id'), 'int'));			}		}		$this->preprocessData('com_weblinks.weblink', $data);		return $data;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 *	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		if ($item = parent::getItem($pk))		{			// Convert the metadata field to an array.			$registry = new JRegistry;			$registry->loadString($item->metadata);			$item->metadata = $registry->toArray();			// Convert the images field to an array.			$registry = new JRegistry;			$registry->loadString($item->images);			$item->images = $registry->toArray();			if (!empty($item->id))			{				$item->tags = new JHelperTags;				$item->tags->getTagIds($item->id, 'com_weblinks.weblink');				$item->metadata['tags'] = $item->tags;			}		}		return $item;	}	/**	 * Prepare and sanitise the table prior to saving.	 *	 * @since   1.6	 */	protected function prepareTable($table)	{		$date = JFactory::getDate();		$user = JFactory::getUser();		$table->title		= htmlspecialchars_decode($table->title, ENT_QUOTES);		$table->alias		= JApplication::stringURLSafe($table->alias);		if (empty($table->alias))		{			$table->alias = JApplication::stringURLSafe($table->title);		}		if (empty($table->id))		{			// Set the values			// Set ordering to the last item if not set			if (empty($table->ordering))			{				$db = JFactory::getDbo();				$db->setQuery('SELECT MAX(ordering) FROM #__weblinks');				$max = $db->loadResult();				$table->ordering = $max + 1;			}			else			{				// Set the values				$table->modified	= $date->toSql();				$table->modified_by	= $user->get('id');			}			// Increment the content version number.			$table->version++;		}	}	/**	 * A protected method to get a set of ordering conditions.	 *	 * @param   object	A record object.	 * @return  array  An array of conditions to add to add to ordering queries.	 * @since   1.6	 */	protected function getReorderConditions($table)	{		$condition = array();		$condition[] = 'catid = '.(int) $table->catid;		return $condition;	}	/**	 * Method to save the form data.	 *	 * @param   array  $data  The form data.	 *	 * @return  boolean  True on success.	 *	 * @since	3.1	 */	public function save($data)	{		$app = JFactory::getApplication();		// Alter the title for save as copy		if ($app->input->get('task') == 'save2copy')		{			list($name, $alias) = $this->generateNewTitle($data['catid'], $data['alias'], $data['title']);			$data['title']	= $name;			$data['alias']	= $alias;			$data['state']	= 0;		}		$return = parent::save($data);		return $return;	}	/**	 * Method to change the title & alias.	 *	 * @param   integer  $category_id  The id of the parent.	 * @param   string   $alias        The alias.	 * @param   string   $name         The title.	 *	 * @return  array  Contains the modified title and alias.	 *	 * @since   3.1	 */	protected function generateNewTitle($category_id, $alias, $name)	{		// Alter the title & alias		$table = $this->getTable();		while ($table->load(array('alias' => $alias, 'catid' => $category_id)))		{			if ($name == $table->title)			{				$name = JString::increment($name);			}			$alias = JString::increment($alias, 'dash');		}		return array($name, $alias);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Updater * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;jimport('joomla.updater.updateadapter');/** * Extension class for updater * * @package     Joomla.Platform * @subpackage  Updater * @since       11.1 * */class JUpdaterExtension extends JUpdateAdapter{	/**	 * Start element parser callback.	 *	 * @param   object  $parser  The parser object.	 * @param   string  $name    The name of the element.	 * @param   array   $attrs   The attributes of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _startElement($parser, $name, $attrs = array())	{		array_push($this->stack, $name);		$tag = $this->_getStackLocation();		// Reset the data		if (isset($this->$tag))		{			$this->$tag->_data = "";		}		switch ($name)		{			case 'UPDATE':				$this->current_update = JTable::getInstance('update');				$this->current_update->update_site_id = $this->updateSiteId;				$this->current_update->detailsurl = $this->_url;				$this->current_update->folder = "";				$this->current_update->client_id = 1;				break;			// Don't do anything			case 'UPDATES':				break;			default:				if (in_array($name, $this->updatecols))				{					$name = strtolower($name);					$this->current_update->$name = '';				}				if ($name == 'TARGETPLATFORM')				{					$this->current_update->targetplatform = $attrs;				}				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $name    The name of the element.	 *	 * @return  void	 *	 * @since   11.1	 */	protected function _endElement($parser, $name)	{		array_pop($this->stack);		// @todo remove code: echo 'Closing: '. $name .'<br />';		switch ($name)		{			case 'UPDATE':				$ver = new JVersion;				// Lower case and remove the exclamation mark				$product = strtolower(JFilterInput::getInstance()->clean($ver->PRODUCT, 'cmd'));				// Check that the product matches and that the version matches (optionally a regexp)				// Check for optional min_dev_level and max_dev_level attributes to further specify targetplatform (e.g., 3.0.1)				if ($product == $this->current_update->targetplatform['NAME']					&& preg_match('/' . $this->currentUpdate->targetplatform->version . '/', $ver->RELEASE)					&& ((!isset($this->currentUpdate->targetplatform->min_dev_level)) || $ver->DEV_LEVEL >= $this->currentUpdate->targetplatform->min_dev_level)					&& ((!isset($this->currentUpdate->targetplatform->max_dev_level)) || $ver->DEV_LEVEL <= $this->currentUpdate->targetplatform->max_dev_level))				{					// Target platform isn't a valid field in the update table so unset it to prevent J! from trying to store it					unset($this->current_update->targetplatform);					if (isset($this->latest))					{						if (version_compare($this->current_update->version, $this->latest->version, '>') == 1)						{							$this->latest = $this->current_update;						}					}					else					{						$this->latest = $this->current_update;					}				}				break;			case 'UPDATES':				// :D				break;		}	}	/**	 * Character Parser Function	 *	 * @param   object  $parser  Parser object.	 * @param   object  $data    The data.	 *	 * @return  void	 *	 * @note    This is public because its called externally.	 * @since   11.1	 */	protected function _characterData($parser, $data)	{		$tag = $this->_getLastTag();		/**		 * @todo remove code		 * if(!isset($this->$tag->_data)) $this->$tag->_data = '';		 * $this->$tag->_data .= $data;		 */		if (in_array($tag, $this->updatecols))		{			$tag = strtolower($tag);			$this->current_update->$tag .= $data;		}	}	/**	 * Finds an update.	 *	 * @param   array  $options  Update options.	 *	 * @return  array  Array containing the array of update sites and array of updates	 *	 * @since   11.1	 */	public function findUpdate($options)	{		$url = $options['location'];		$this->_url = &$url;		$this->updateSiteId = $options['update_site_id'];		if (substr($url, -4) != '.xml')		{			if (substr($url, -1) != '/')			{				$url .= '/';			}			$url .= 'extension.xml';		}		$db = $this->parent->getDBO();		$http = JHttpFactory::getHttp();		$response = $http->get($url);		if (!empty($response->code) && 200 != $response->code)		{			$query = $db->getQuery(true)				->update('#__update_sites')				->set('enabled = 0')				->where('update_site_id = ' . $this->updateSiteId);			$db->setQuery($query);			$db->execute();			JLog::add("Error opening url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_OPEN_URL', $url), 'warning');			return false;		}		$this->xmlParser = xml_parser_create('');		xml_set_object($this->xmlParser, $this);		xml_set_element_handler($this->xmlParser, '_startElement', '_endElement');		xml_set_character_data_handler($this->xmlParser, '_characterData');		if (!xml_parse($this->xmlParser, $response->body))		{			JLog::add("Error parsing url: " . $url, JLog::WARNING, 'updater');			$app = JFactory::getApplication();			$app->enqueueMessage(JText::sprintf('JLIB_UPDATER_ERROR_EXTENSION_PARSE_URL', $url), 'warning');			return false;		}		xml_parser_free($this->xmlParser);		if (isset($this->latest))		{			if (isset($this->latest->client) && strlen($this->latest->client))			{				if (is_numeric($this->latest->client))				{					$byName = false;					// <client> has to be 'administrator' or 'site', numeric values are depreceated. See http://docs.joomla.org/Design_of_JUpdate					JLog::add(						'Using numeric values for <client> in the updater xml is deprecated. Use \'administrator\' or \'site\' instead.',						JLog::WARNING, 'deprecated'					);				}				else				{					$byName = true;				}				$this->latest->client_id = JApplicationHelper::getClientInfo($this->latest->client, $byName)->id;				unset($this->latest->client);			}			$updates = array($this->latest);		}		else		{			$updates = array();		}		return array('update_sites' => array(), 'updates' => $updates);	}}
<?php/** * @package    Joomla.Installation * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);// Bootstrap the applicationrequire_once dirname(__FILE__) . '/application/bootstrap.php';// Get the application$app = JApplicationWeb::getInstance('InstallationApplicationWeb');// Execute the application$app->execute();
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * SQLite Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       12.1 */class JDatabaseQuerySqlite extends JDatabaseQueryPdo implements JDatabaseQueryPreparable, JDatabaseQueryLimitable{	/**	 * @var integer	 * @since 12.1	 */	protected $limit;	/**	 * @var integer	 * @since 12.1	 */	protected $offset;	/**	 * @var mixed	 * @since 12.1	 */	protected $bounded = array();	/**	 * Method to add a variable to an internal array that will be bound to a prepared SQL statement before query execution. Also	 * removes a variable that has been bounded from the internal bounded array when the passed in value is null.	 *	 * @param   string|integer  $key            The key that will be used in your SQL query to reference the value. Usually of	 *                                          the form ':key', but can also be an integer.	 * @param   mixed           &$value         The value that will be bound. The value is passed by reference to support output	 *                                          parameters such as those possible with stored procedures.	 * @param   integer         $dataType       Constant corresponding to a SQL datatype.	 * @param   integer         $length         The length of the variable. Usually required for OUTPUT parameters.	 * @param   array           $driverOptions  Optional driver options to be used.	 *	 * @return  JDatabaseQuery	 *	 * @since   12.1	 */	public function bind($key = null, &$value = null, $dataType = PDO::PARAM_STR, $length = 0, $driverOptions = array())	{		// Case 1: Empty Key (reset $bounded array)		if (empty($key))		{			$this->bounded = array();			return $this;		}		// Case 2: Key Provided, null value (unset key from $bounded array)		if (is_null($value))		{			if (isset($this->bounded[$key]))			{				unset($this->bounded[$key]);			}			return $this;		}		$obj = new stdClass;		$obj->value = &$value;		$obj->dataType = $dataType;		$obj->length = $length;		$obj->driverOptions = $driverOptions;		// Case 3: Simply add the Key/Value into the bounded array		$this->bounded[$key] = $obj;		return $this;	}	/**	 * Retrieves the bound parameters array when key is null and returns it by reference. If a key is provided then that item is	 * returned.	 *	 * @param   mixed  $key  The bounded variable key to retrieve.	 *	 * @return  mixed	 *	 * @since   12.1	 */	public function &getBounded($key = null)	{		if (empty($key))		{			return $this->bounded;		}		else		{			if (isset($this->bounded[$key]))			{				return $this->bounded[$key];			}		}	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function clear($clause = null)	{		switch ($clause)		{			case null:				$this->bounded = array();				break;		}		parent::clear($clause);		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset. This method is used	 * automatically by the __toString() method if it detects that the	 * query implements the JDatabaseQueryLimitable interface.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  string	 *	 * @since   12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0 || $offset > 0)		{			$query .= ' LIMIT ' . $offset . ', ' . $limit;		}		return $query;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Add to the current date and time.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date or datetime to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @link http://www.sqlite.org/lang_datefunc.html	 */	public function dateAdd($date, $interval, $datePart)	{		// SQLite does not support microseconds as a separate unit. Convert the interval to seconds		if (strcasecmp($datePart, 'microseconds') == 0)		{			$interval = .001 * $interval;			$datePart = 'seconds';		}		if (substr($interval, 0, 1) != '-')		{			return "datetime('" . $date . "', '+" . $interval . " " . $datePart . "')";		}		else		{			return "datetime('" . $date . "', '" . $interval . " " . $datePart . "')";		}	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_installer * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;?><script type="text/javascript">	Joomla.submitbutton = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_package.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_PACKAGE', true); ?>");		}		else		{			form.installtype.value = 'upload';			form.submit();		}	}	Joomla.submitbutton3 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_directory.value == ""){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_PLEASE_SELECT_A_DIRECTORY', true); ?>");		}		else		{			form.installtype.value = 'folder';			form.submit();		}	}	Joomla.submitbutton4 = function(pressbutton)	{		var form = document.getElementById('adminForm');		// do field validation		if (form.install_url.value == "" || form.install_url.value == "http://"){			alert("<?php echo JText::_('COM_INSTALLER_MSG_INSTALL_ENTER_A_URL', true); ?>");		}		else		{			form.installtype.value = 'url';			form.submit();		}	}</script><div id="installer-install"><form enctype="multipart/form-data" action="<?php echo JRoute::_('index.php?option=com_installer&view=install');?>" method="post" name="adminForm" id="adminForm" class="form-horizontal">	<?php if (!empty( $this->sidebar)) : ?>		<div id="j-sidebar-container" class="span2">			<?php echo $this->sidebar; ?>		</div>		<div id="j-main-container" class="span10">	<?php else : ?>		<div id="j-main-container">	<?php endif;?>	<!-- Render messages set by extension install scripts here -->	<?php if ($this->showMessage) : ?>		<?php echo $this->loadTemplate('message'); ?>	<?php endif; ?>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'upload')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'upload', JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_UPLOAD_PACKAGE_FILE'); ?></legend>				<div class="control-group">					<label for="install_package" class="control-label"><?php echo JText::_('COM_INSTALLER_PACKAGE_FILE'); ?></label>					<div class="controls">						<input class="input_box" id="install_package" name="install_package" type="file" size="57" />					</div>				</div>				<div class="form-actions">					<input class="btn btn-primary" type="button" value="<?php echo JText::_('COM_INSTALLER_UPLOAD_AND_INSTALL'); ?>" onclick="Joomla.submitbutton()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'directory', JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_DIRECTORY'); ?></legend>				<div class="control-group">					<label for="install_directory" class="control-label"><?php echo JText::_('COM_INSTALLER_INSTALL_DIRECTORY'); ?></label>					<div class="controls">						<input type="text" id="install_directory" name="install_directory" class="span5 input_box" size="70" value="<?php echo $this->state->get('install.directory'); ?>" />					</div>				</div>				<div class="form-actions">					<input type="button" class="btn btn-primary" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton3()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'url', JText::_('COM_INSTALLER_INSTALL_FROM_URL', true)); ?>			<fieldset class="uploadform">				<legend><?php echo JText::_('COM_INSTALLER_INSTALL_FROM_URL'); ?></legend>				<div class="control-group">					<label for="install_url" class="control-label"><?php echo JText::_('COM_INSTALLER_INSTALL_URL'); ?></label>					<div class="controls">						<input type="text" id="install_url" name="install_url" class="span5 input_box" size="70" value="http://" />					</div>				</div>				<div class="form-actions">					<input type="button" class="btn btn-primary" value="<?php echo JText::_('COM_INSTALLER_INSTALL_BUTTON'); ?>" onclick="Joomla.submitbutton4()" />				</div>			</fieldset>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php if ($this->ftp) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'ftp', JText::_('COM_INSTALLER_MSG_DESCFTPTITLE', true)); ?>				<?php echo $this->loadTemplate('ftp'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>	<input type="hidden" name="type" value="" />	<input type="hidden" name="installtype" value="upload" />	<input type="hidden" name="task" value="install.install" />	<?php echo JHtml::_('form.token'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?></form></div>
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('list');/** * Form Field class for the Joomla Platform. * Provides a select list of session handler options. * * @package     Joomla.Platform * @subpackage  Form * @since       11.1 */class JFormFieldSessionHandler extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'SessionHandler';	/**	 * Method to get the session handler field options.	 *	 * @return  array  The field option objects.	 *	 * @since   11.1	 */	protected function getOptions()	{		$options = array();		// Get the options from JSession.		foreach (JSession::getStores() as $store)		{			$options[] = JHtml::_('select.option', $store, JText::_('JLIB_FORM_VALUE_SESSION_' . $store), 'value', 'text');		}		// Merge any additional options in the XML definition.		$options = array_merge(parent::getOptions(), $options);		return $options;	}}
<?php/** * @package     Joomla.Site * @subpackage  com_content * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';JHtml::_('bootstrap.tooltip');$lang	= JFactory::getLanguage();if (count($this->items[$this->parent->id]) > 0 && $this->maxLevelcat != 0) :?>	<?php foreach($this->items[$this->parent->id] as $id => $item) : ?>		<?php		if ($this->params->get('show_empty_categories_cat') || $item->numitems || count($item->getChildren())) :		if (!isset($this->items[$this->parent->id][$id + 1]))		{			$class = ' class="last"';		}		?>		<div <?php echo $class; ?> >		<?php $class = ''; ?>			<h3 class="page-header item-title">				<a href="<?php echo JRoute::_(ContentHelperRoute::getCategoryRoute($item->id));?>">				<?php echo $this->escape($item->title); ?></a>				<?php if ($this->params->get('show_cat_num_articles_cat') == 1) :?>					<span class="badge badge-info tip hasTooltip" title="<?php echo JText::_('COM_CONTENT_NUM_ITEMS'); ?>">						<?php echo $item->numitems; ?>					</span>				<?php endif; ?>				<?php if (count($item->getChildren()) > 0) : ?>					<a href="#category-<?php echo $item->id;?>" data-toggle="collapse" data-toggle="button" class="btn btn-mini pull-right"><span class="icon-plus"></span></a>				<?php endif;?>			</h3>			<?php if ($this->params->get('show_subcat_desc_cat') == 1) :?>				<?php if ($item->description) : ?>					<div class="category-desc">						<?php echo JHtml::_('content.prepare', $item->description, '', 'com_content.categories'); ?>					</div>				<?php endif; ?>			<?php endif; ?>			<?php if (count($item->getChildren()) > 0) :?>				<div class="collapse fade" id="category-<?php echo $item->id;?>">				<?php				$this->items[$item->id] = $item->getChildren();				$this->parent = $item;				$this->maxLevelcat--;				echo $this->loadTemplate('items');				$this->parent = $item->getParent();				$this->maxLevelcat++;				?>				</div>			<?php endif; ?>		</div>		<?php endif; ?>	<?php endforeach; ?><?php endif; ?>
<?php/** * @package     Joomla.Administrator * @subpackage  mod_logged * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_logged * * @package     Joomla.Administrator * @subpackage  mod_logged * @since       1.5 */abstract class ModLoggedHelper{	/**	 * Get a list of logged users.	 *	 * @param   JRegistry  $params  The module parameters.	 *	 * @return  mixed  An array of users, or false on error.	 */	public static function getList($params)	{		$db    = JFactory::getDbo();		$user  = JFactory::getUser();		$query = $db->getQuery(true)			->select('s.time, s.client_id, u.id, u.name, u.username')			->from('#__session AS s')			->join('LEFT', '#__users AS u ON s.userid = u.id')			->where('s.guest = 0');		$db->setQuery($query, 0, $params->get('count', 5));		try		{			$results = $db->loadObjectList();		}		catch (RuntimeException $e)		{			throw new RuntimeException($e->getMessage());			return false;		}		foreach ($results as $k => $result)		{			$results[$k]->logoutLink = '';			if ($user->authorise('core.manage', 'com_users'))			{				$results[$k]->editLink   = JRoute::_('index.php?option=com_users&task=user.edit&id=' . $result->id);				$results[$k]->logoutLink = JRoute::_('index.php?option=com_login&task=logout&uid=' . $result->id . '&' . JSession::getFormToken() . '=1');			}			if ($params->get('name', 1) == 0)			{				$results[$k]->name = $results[$k]->username;			}		}		return $results;	}	/**	 * Get the alternate title for the module	 *	 * @param   JRegistry  $params  The module parameters.	 *	 * @return  string    The alternate title for the module.	 */	public static function getTitle($params)	{		return JText::plural('MOD_LOGGED_TITLE', $params->get('count'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Articles list controller class. * * @package     Joomla.Administrator * @subpackage  com_contact * @since       1.6 */class ContactControllerContacts extends JControllerAdmin{	/**	 * Constructor.	 *	 * @param   array  $config	An optional associative array of configuration settings.	 *	 * @return  ContactControllerContacts	 * @see     JController	 * @since   1.6	 */	public function __construct($config = array())	{		parent::__construct($config);		$this->registerTask('unfeatured',	'featured');	}	/**	 * Method to toggle the featured setting of a list of contacts.	 *	 * @return  void	 * @since   1.6	 */	public function featured()	{		// Check for request forgeries		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$user   = JFactory::getUser();		$ids    = $this->input->get('cid', array(), 'array');		$values = array('featured' => 1, 'unfeatured' => 0);		$task   = $this->getTask();		$value  = JArrayHelper::getValue($values, $task, 0, 'int');		// Get the model.		$model  = $this->getModel();		// Access checks.		foreach ($ids as $i => $id)		{			$item = $model->getItem($id);			if (!$user->authorise('core.edit.state', 'com_contact.category.'.(int) $item->catid))			{				// Prune items that you can't change.				unset($ids[$i]);				JError::raiseNotice(403, JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));			}		}		if (empty($ids))		{			JError::raiseWarning(500, JText::_('COM_CONTACT_NO_ITEM_SELECTED'));		}		else		{			// Publish the items.			if (!$model->featured($ids, $value))			{				JError::raiseWarning(500, $model->getError());			}		}		$this->setRedirect('index.php?option=com_contact&view=contacts');	}	/**	 * Proxy for getModel.	 *	 * @param   string	$name	The name of the model.	 * @param   string	$prefix	The prefix for the PHP class name.	 *	 * @return  JModel	 * @since   1.6	 */	public function getModel($name = 'Contact', $prefix = 'ContactModel', $config = array('ignore_request' => true))	{		$model = parent::getModel($name, $prefix, $config);		return $model;	}	/**	 * Method to save the submitted ordering values for records via AJAX.	 *	 * @return  void	 *	 * @since   3.0	 */	public function saveOrderAjax()	{		// Get the input		$pks   = $this->input->post->get('cid', array(), 'array');		$order = $this->input->post->get('order', array(), 'array');		// Sanitize the input		JArrayHelper::toInteger($pks);		JArrayHelper::toInteger($order);		// Get the model		$model = $this->getModel();		// Save the ordering		$return = $model->saveorder($pks, $order);		if ($return)		{			echo "1";		}		// Close the application		JFactory::getApplication()->close();	}	/**	 * Function that allows child controller access to model data	 * after the item has been deleted.	 *	 * @param   JModelLegacy  $model  The data model object.	 * @param   integer       $ids    The array of ids for items being deleted.	 *	 * @return  void	 *	 * @since   12.2	 */	protected function postDeleteHook(JModelLegacy $model, $ids = null)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  mod_menu * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Helper for mod_menu * * @package     Joomla.Administrator * @subpackage  mod_menu * @since       1.5 */abstract class ModMenuHelper{	/**	 * Get a list of the available menus.	 *	 * @return  array  An array of the available menus (from the menu types table).	 * @since   1.6	 */	public static function getMenus()	{		$db		= JFactory::getDbo();		$query	= $db->getQuery(true)			->select('a.*, SUM(b.home) AS home')			->from('#__menu_types AS a')			->join('LEFT', '#__menu AS b ON b.menutype = a.menutype AND b.home != 0')			->select('b.language')			->join('LEFT', '#__languages AS l ON l.lang_code = language')			->select('l.image')			->select('l.sef')			->select('l.title_native')			->where('(b.client_id = 0 OR b.client_id IS NULL)');		//sqlsrv change		$query->group('a.id, a.menutype, a.description, a.title, b.menutype,b.language,l.image,l.sef,l.title_native');		$db->setQuery($query);		$result = $db->loadObjectList();		return $result;	}	/**	 * Get a list of the authorised, non-special components to display in the components menu.	 *	 * @param   boolean	$authCheck	An optional switch to turn off the auth check (to support custom layouts 'grey out' behaviour).	 *	 * @return  array  A nest array of component objects and submenus	 * @since   1.6	 */	public static function getComponents($authCheck = true)	{		$lang	= JFactory::getLanguage();		$user	= JFactory::getUser();		$db		= JFactory::getDbo();		$query	= $db->getQuery(true);		$result	= array();		$langs	= array();		// Prepare the query.		$query->select('m.id, m.title, m.alias, m.link, m.parent_id, m.img, e.element')			->from('#__menu AS m');		// Filter on the enabled states.		$query->join('LEFT', '#__extensions AS e ON m.component_id = e.extension_id')			->where('m.client_id = 1')			->where('e.enabled = 1')			->where('m.id > 1');		// Order by lft.		$query->order('m.lft');		$db->setQuery($query);		// component list		$components	= $db->loadObjectList();		// Parse the list of extensions.		foreach ($components as &$component)		{			// Trim the menu link.			$component->link = trim($component->link);			if ($component->parent_id == 1)			{				// Only add this top level if it is authorised and enabled.				if ($authCheck == false || ($authCheck && $user->authorise('core.manage', $component->element)))				{					// Root level.					$result[$component->id] = $component;					if (!isset($result[$component->id]->submenu))					{						$result[$component->id]->submenu = array();					}					// If the root menu link is empty, add it in.					if (empty($component->link))					{						$component->link = 'index.php?option='.$component->element;					}					if (!empty($component->element))					{						// Load the core file then						// Load extension-local file.						$lang->load($component->element.'.sys', JPATH_BASE, null, false, false)					||	$lang->load($component->element.'.sys', JPATH_ADMINISTRATOR.'/components/'.$component->element, null, false, false)					||	$lang->load($component->element.'.sys', JPATH_BASE, $lang->getDefault(), false, false)					||	$lang->load($component->element.'.sys', JPATH_ADMINISTRATOR.'/components/'.$component->element, $lang->getDefault(), false, false);					}					$component->text = $lang->hasKey($component->title) ? JText::_($component->title) : $component->alias;				}			} else {				// Sub-menu level.				if (isset($result[$component->parent_id]))				{					// Add the submenu link if it is defined.					if (isset($result[$component->parent_id]->submenu) && !empty($component->link))					{						$component->text = $lang->hasKey($component->title) ? JText::_($component->title) : $component->alias;						$result[$component->parent_id]->submenu[] = &$component;					}				}			}		}		$result = JArrayHelper::sortObjects($result, 'text', 1, true, $lang->getLocale());		return $result;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = LanguagesHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'language.cancel' || document.formvalidator.isValid(document.id('language-form')))		{			Joomla.submitform(task, document.getElementById('language-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_languages&layout=edit&lang_id='.(int) $this->item->lang_id); ?>" method="post" name="adminForm" id="language-form" class="form-validate form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', JText::_('JDETAILS', true)); ?>			<div class="control-group">				<div class="controls">					<?php if ($this->item->lang_id) : ?>						<?php echo JText::sprintf('JGLOBAL_RECORD_NUMBER', $this->item->lang_id); ?>					<?php else : ?>						<?php echo JText::_('COM_LANGUAGES_VIEW_LANGUAGE_EDIT_NEW_TITLE'); ?>					<?php endif; ?>				</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('title_native'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('title_native'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('sef'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('sef'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('image'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('image'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_code'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_code'); ?>					</div>			</div>			<?php if ($canDo->get('core.edit.state')) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('published'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('published'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('access'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('access'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('description'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('description'); ?>					</div>			</div>			<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('lang_id'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('lang_id'); ?>					</div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'metadata', JText::_('JGLOBAL_FIELDSET_METADATA_OPTIONS', true)); ?>			<?php foreach ($this->form->getFieldset('metadata') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'site_name', JText::_('COM_LANGUAGES_FIELDSET_SITE_NAME_LABEL', true)); ?>			<?php foreach ($this->form->getFieldset('site_name') as $field) : ?>				<div class="control-group">					<?php if (!$field->hidden) : ?>						<div class="control-label">							<?php echo $field->label; ?>						</div>					<?php endif; ?>					<div class="controls">						<?php echo $field->input; ?>					</div>				</div>			<?php endforeach; ?>		<?php echo JHtml::_('bootstrap.endTab'); ?>	<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User view level model. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersModelLevel extends JModelAdmin{	/**	 * @var	array	A list of the access levels in use.	 * @since   1.6	 */	protected $levelsInUse = null;	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object	$record	A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission set in the component.	 * @since   1.6	 */	protected function canDelete($record)	{		// Check if the access level is being used by any content.		if ($this->levelsInUse === null)		{			// Populate the list once.			$this->levelsInUse = array();			$db		= $this->getDbo();			$query	= $db->getQuery(true)				->select('DISTINCT access');				// from is added dynamically			// Get all the tables and the prefix			$tables = $db->getTableList();			//$fields = $db->getTableFields($tables);			$prefix = $db->getPrefix();			foreach ($tables as $table)			{				// Get all of the columns in the table				$fields = $db->getTableColumns($table);				// We are looking for the access field.  If custom tables are using something other				// than the 'access' field they are on their own unfortunately.				// Also make sure the table prefix matches the live db prefix (eg, it is not a "bak_" table)				if ((strpos($table, $prefix) === 0) && (isset($fields['access'])))				{					// Lookup the distinct values of the field.					$query->clear('from')						->from($db->quoteName($table));					$db->setQuery($query);					try					{						$values = $db->loadColumn();					}					catch (RuntimeException $e)					{						$this->setError($e->getMessage());						return false;					}					$this->levelsInUse = array_merge($this->levelsInUse, $values);					// TODO Could assemble an array of the tables used by each view level list those,					// giving the user a clue in the error where to look.				}			}			// Get uniques.			$this->levelsInUse = array_unique($this->levelsInUse);			// Ok, after all that we are ready to check the record :)		}		if (in_array($record->id, $this->levelsInUse))		{			$this->setError(JText::sprintf('COM_USERS_ERROR_VIEW_LEVEL_IN_USE', $record->id, $record->title));			return false;		}		return parent::canDelete($record);	}	/**	 * Returns a reference to the a Table object, always creating it.	 *	 * @param   type	The table type to instantiate	 * @param   string	A prefix for the table class name. Optional.	 * @param   array  Configuration array for model. Optional.	 * @return  JTable	A database object	 * @since   1.6	*/	public function getTable($type = 'Viewlevel', $prefix = 'JTable', $config = array())	{		$return = JTable::getInstance($type, $prefix, $config);		return $return;	}	/**	 * Method to get a single record.	 *	 * @param   integer	The id of the primary key.	 * @return  mixed  Object on success, false on failure.	 * @since   1.6	 */	public function getItem($pk = null)	{		$result = parent::getItem($pk);		// Convert the params field to an array.		$result->rules = json_decode($result->rules);		return $result;	}	/**	 * Method to get the record form.	 *	 * @param   array  $data		An optional array of data for the form to interogate.	 * @param   boolean	$loadData	True if the form is to load its own data (default case), false if not.	 * @return  JForm	A JForm object on success, false on failure	 * @since   1.6	 */	public function getForm($data = array(), $loadData = true)	{		$app = JFactory::getApplication();		// Get the form.		$form = $this->loadForm('com_users.level', 'level', array('control' => 'jform', 'load_data' => $loadData));		if (empty($form))		{			return false;		}		return $form;	}	/**	 * Method to get the data that should be injected in the form.	 *	 * @return  mixed  The data for the form.	 * @since   1.6	 */	protected function loadFormData()	{		// Check the session for previously entered form data.		$data = JFactory::getApplication()->getUserState('com_users.edit.level.data', array());		if (empty($data))		{			$data = $this->getItem();		}		$this->preprocessData('com_users.level', $data);		return $data;	}	/**	 * Override preprocessForm to load the user plugin group instead of content.	 *	 * @param   object	A form object.	 * @param   mixed	The data expected for the form.	 * @throws	Exception if there is an error in the form event.	 * @since   1.6	 */	protected function preprocessForm(JForm $form, $data, $groups = '')	{		parent::preprocessForm($form, $data, 'user');	}	/**	 * Method to save the form data.	 *	 * @param   array  The form data.	 * @return  boolean  True on success.	 * @since   1.6	 */	public function save($data)	{		if (!isset($data['rules']))		{			$data['rules'] = array();		}		return parent::save($data);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Index model class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderModelIndex extends JModelList{	/**	 * The event to trigger after deleting the data.	 *	 * @var    string	 * @since  2.5	 */	protected $event_after_delete = 'onContentAfterDelete';	/**	 * The event to trigger before deleting the data.	 *	 * @var    string	 * @since  2.5	 */	protected $event_before_delete = 'onContentBeforeDelete';	/**	 * Constructor.	 *	 * @param   array  $config  An associative array of configuration settings. [optional]	 *	 * @since   2.5	 * @see     JController	 */	public function __construct($config = array())	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'published', 'l.published',				'title', 'l.title',				'type_id', 'l.type_id',				'url', 'l.url',				'indexdate', 'l.indexdate'			);		}		parent::__construct($config);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to delete the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canDelete($record)	{		$user = JFactory::getUser();		return $user->authorise('core.delete', $this->option);	}	/**	 * Method to test whether a record can be deleted.	 *	 * @param   object  $record  A record object.	 *	 * @return  boolean  True if allowed to change the state of the record. Defaults to the permission for the component.	 *	 * @since   2.5	 */	protected function canEditState($record)	{		$user = JFactory::getUser();		return $user->authorise('core.edit.state', $this->option);	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   2.5	 */	public function delete(&$pks)	{		$dispatcher = JEventDispatcher::getInstance();		$pks = (array) $pks;		$table = $this->getTable();		// Include the content plugins for the on delete events.		JPluginHelper::importPlugin('content');		// Iterate the items to delete each one.		foreach ($pks as $i => $pk)		{			if ($table->load($pk))			{				if ($this->canDelete($table))				{					$context = $this->option . '.' . $this->name;					// Trigger the onContentBeforeDelete event.					$result = $dispatcher->trigger($this->event_before_delete, array($context, $table));					if (in_array(false, $result, true))					{						$this->setError($table->getError());						return false;					}					if (!$table->delete($pk))					{						$this->setError($table->getError());						return false;					}					// Trigger the onContentAfterDelete event.					$dispatcher->trigger($this->event_after_delete, array($context, $table));				}				else				{					// Prune items that you can't change.					unset($pks[$i]);					$error = $this->getError();					if ($error)					{						$this->setError($error);					}					else					{						$this->setError(JText::_('JLIB_APPLICATION_ERROR_DELETE_NOT_PERMITTED'));					}				}			}			else			{				$this->setError($table->getError());				return false;			}		}		// Clear the component's cache		$this->cleanCache();		return true;	}	/**	 * Build an SQL query to load the list data.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object	 *	 * @since   2.5	 */	protected function getListQuery()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('l.*')			->select('t.title AS t_title')			->from($db->quoteName('#__finder_links') . ' AS l')			->join('INNER', $db->quoteName('#__finder_types') . ' AS t ON t.id = l.type_id');		// Check the type filter.		if ($this->getState('filter.type'))		{			$query->where('l.type_id = ' . (int) $this->getState('filter.type'));		}		// Check for state filter.		if (is_numeric($this->getState('filter.state')))		{			$query->where('l.published = ' . (int) $this->getState('filter.state'));		}		// Check the search phrase.		if ($this->getState('filter.search') != '')		{			$search = $db->escape($this->getState('filter.search'));			$query->where('l.title LIKE ' . $db->quote('%' . $db->escape($search) . '%') . ' OR l.url LIKE ' . $db->quote('%' . $db->escape($search) . '%') . ' OR l.indexdate LIKE  ' . $db->quote('%' . $db->escape($search) . '%'));		}		// Handle the list ordering.		$ordering = $this->getState('list.ordering');		$direction = $this->getState('list.direction');		if (!empty($ordering))		{			$query->order($db->escape($ordering) . ' ' . $db->escape($direction));		}		return $query;	}	/**	 * Method to get the state of the Smart Search plug-ins.	 *	 * @return  array   Array of relevant plug-ins and whether they are enabled or not.	 *	 * @since   2.5	 */	public function getPluginState()	{		$db = $this->getDbo();		$query = $db->getQuery(true)			->select('name, enabled')			->from($db->quoteName('#__extensions'))			->where($db->quoteName('type') . ' = ' .  $db->quote('plugin'))			->where($db->quoteName('folder') . ' IN(' .  $db->quote('system') . ',' . $db->quote('content') . ')')			->where($db->quoteName('element') . ' = ' .  $db->quote('finder'));		$db->setQuery($query);		$db->execute();		$plugins = $db->loadObjectList('name');		return $plugins;	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id  A prefix for the store id. [optional]	 *	 * @return  string  A store id.	 *	 * @since   2.5	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id .= ':' . $this->getState('filter.search');		$id .= ':' . $this->getState('filter.state');		$id .= ':' . $this->getState('filter.type');		return parent::getStoreId($id);	}	/**	 * Returns a JTable object, always creating it.	 *	 * @param   string  $type    The table type to instantiate. [optional]	 * @param   string  $prefix  A prefix for the table class name. [optional]	 * @param   array   $config  Configuration array for model. [optional]	 *	 * @return  JTable  A database object	 *	 * @since   2.5	 */	public function getTable($type = 'Link', $prefix = 'FinderTable', $config = array())	{		return JTable::getInstance($type, $prefix, $config);	}	/**	 * Method to purge the index, deleting all links.	 *	 * @return  boolean  True on success, false on failure.	 *	 * @since   2.5	 * @throws  Exception on database error	 */	public function purge()	{		$db = $this->getDbo();		// Truncate the links table.		$db->truncateTable('#__finder_links');		// Truncate the links terms tables.		for ($i = 0; $i <= 15; $i++)		{			// Get the mapping table suffix.			$suffix = dechex($i);			$db->truncateTable('#__finder_links_terms' . $suffix);		}		// Truncate the terms table.		$db->truncateTable('#__finder_terms');		// Truncate the taxonomy map table.		$db->truncateTable('#__finder_taxonomy_map');		// Delete all the taxonomy nodes except the root.		$query = $db->getQuery(true)			->delete($db->quoteName('#__finder_taxonomy'))			->where($db->quoteName('id') . ' > 1');		$db->setQuery($query);		$db->execute();		// Truncate the tokens tables.		$db->truncateTable('#__finder_tokens');		// Truncate the tokens aggregate table.		$db->truncateTable('#__finder_tokens_aggregate');		return true;	}	/**	 * Method to auto-populate the model state.  Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field. [optional]	 * @param   string  $direction  An optional direction. [optional]	 *	 * @return  void	 *	 * @since   2.5	 */	protected function populateState($ordering = null, $direction = null)	{		// Load the filter state.		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$state = $this->getUserStateFromRequest($this->context . '.filter.state', 'filter_state', '', 'string');		$this->setState('filter.state', $state);		$type = $this->getUserStateFromRequest($this->context . '.filter.type', 'filter_type', '', 'string');		$this->setState('filter.type', $type);		// Load the parameters.		$params = JComponentHelper::getParams('com_finder');		$this->setState('params', $params);		// List state information.		parent::populateState('l.title', 'asc');	}	/**	 * Method to change the published state of one or more records.	 *	 * @param   array    &$pks   A list of the primary keys to change.	 * @param   integer  $value  The value of the published state. [optional]	 *	 * @return  boolean  True on success.	 *	 * @since   2.5	 */	public function publish(&$pks, $value = 1)	{		$dispatcher = JEventDispatcher::getInstance();		$user = JFactory::getUser();		$table = $this->getTable();		$pks = (array) $pks;		// Include the content plugins for the change of state event.		JPluginHelper::importPlugin('content');		// Access checks.		foreach ($pks as $i => $pk)		{			$table->reset();			if ($table->load($pk))			{				if (!$this->canEditState($table))				{					// Prune items that you can't change.					unset($pks[$i]);					$this->setError(JText::_('JLIB_APPLICATION_ERROR_EDITSTATE_NOT_PERMITTED'));					return false;				}			}		}		// Attempt to change the state of the records.		if (!$table->publish($pks, $value, $user->get('id')))		{			$this->setError($table->getError());			return false;		}		$context = $this->option . '.' . $this->name;		// Trigger the onContentChangeState event.		$result = $dispatcher->trigger('onContentChangeState', array($context, $pks, $value));		if (in_array(false, $result, true))		{			$this->setError($table->getError());			return false;		}		// Clear the component's cache		$this->cleanCache();		return true;	}}
<?php/** * @package     Joomla.Libraries * @subpackage  Schema * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;/** * Checks the database schema against one SQL Server DDL query to see if it has been run. * * @package     Joomla.Libraries * @subpackage  Schema * @since       2.5 */class JSchemaChangeitemSqlsrv extends JSchemaChangeitem{	/**	 * Checks a DDL query to see if it is a known type	 * If yes, build a check query to see if the DDL has been run on the database.	 * If successful, the $msgElements, $queryType, $checkStatus and $checkQuery fields are populated.	 * The $msgElements contains the text to create the user message.	 * The $checkQuery contains the SQL query to check whether the schema change has	 * been run against the current database. The $queryType contains the type of	 * DDL query that was run (for example, CREATE_TABLE, ADD_COLUMN, CHANGE_COLUMN_TYPE, ADD_INDEX).	 * The $checkStatus field is set to zero if the query is created	 *	 * If not successful, $checkQuery is empty and , and $checkStatus is -1.	 * For example, this will happen if the current line is a non-DDL statement.	 *	 * @return void	 *	 * @since  2.5	 */	protected function buildCheckQuery()	{		// Initialize fields in case we can't create a check query		$this->checkStatus = -1; // change status to skipped		$result = null;		// Remove any newlines		$this->updateQuery = str_replace("\n", '', $this->updateQuery);		// Fix up extra spaces around () and in general		$find = array('#((\s*)\(\s*([^)\s]+)\s*)(\))#', '#(\s)(\s*)#');		$replace = array('($3)', '$1');		$updateQuery = preg_replace($find, $replace, $this->updateQuery);		$wordArray = explode(' ', $updateQuery);		// First, make sure we have an array of at least 6 elements		// if not, we can't make a check query for this one		if (count($wordArray) < 6)		{			// Done with method			return;		}		// We can only make check queries for alter table and create table queries		$command = strtoupper($wordArray[0] . ' ' . $wordArray[1]);		if ($command === 'ALTER TABLE')		{			$alterCommand = strtoupper($wordArray[3] . ' ' . $wordArray[4]);			if ($alterCommand == 'ADD')			{				$result = 'SELECT * FROM INFORMATION_SCHEMA.Columns ' . $wordArray[2] . ' WHERE COLUMN_NAME = ' . $this->fixQuote($wordArray[5]);				$this->queryType = 'ADD';				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[5]));			}			elseif ($alterCommand == 'CREATE INDEX')			{				$index = $this->fixQuote(substr($wordArray[5], 0, strpos($wordArray[5], '(')));				$result = 'SELECT * FROM SYS.INDEXES ' . $wordArray[2] . ' WHERE name = ' . $index;				$this->queryType = 'CREATE INDEX';				$this->msgElements = array($this->fixQuote($wordArray[2]), $index);			}			elseif (strtoupper($wordArray[3]) == 'MODIFY')			{				$type = $this->fixQuote($wordArray[5]);				if (isset($wordArray[6]))				{					$type = $this->fixQuote($this->fixInteger($wordArray[5], $wordArray[6]));				}				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}			elseif (strtoupper($wordArray[3]) == 'CHANGE')			{				// Kludge to fix problem with "integer unsigned"				$type = $this->fixQuote($this->fixInteger($wordArray[6], $wordArray[7]));				$result = 'SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS  WHERE table_name = ' . $this->fixQuote($wordArray[2]);				$this->fixQuote($wordArray[4]);				$this->queryType = 'ALTER COLUMN COLUMN_NAME =' . $this->fixQuote($wordArray[4]);				$this->msgElements = array($this->fixQuote($wordArray[2]), $this->fixQuote($wordArray[4]));			}		}		if ($command == 'CREATE TABLE')		{			$table = $wordArray[5];			$result = 'SELECT * FROM sys.TABLES WHERE NAME = ' . $this->fixQuote($table);			$this->queryType = 'CREATE_TABLE';			$this->msgElements = array($this->fixQuote($table));		}		// Set fields based on results		if ($this->checkQuery = $result)		{			// Unchecked status			$this->checkStatus = 0;		}		else		{			// Skipped			$this->checkStatus = -1;		}	}	/**	 * Fix up integer. Fixes problem with MySQL integer descriptions.	 * If you change a column to "integer unsigned" it shows	 * as "int(10) unsigned" in the check query.	 *	 * @param   string  $type1  the column type	 * @param   string  $type2  the column attributes	 *	 * @return  string  The original or changed column type.	 *	 * @since   2.5	 */	private function fixInteger($type1, $type2)	{		$result = $type1;		if (strtolower($type1) == 'integer' && strtolower(substr($type2, 0, 8)) == 'unsigned')		{			$result = 'int';		}		return $result;	}	/**	 * Fixes up a string for inclusion in a query.	 * Replaces name quote character with normal quote for literal.	 * Drops trailing semi-colon. Injects the database prefix.	 *	 * @param   string  $string  The input string to be cleaned up.	 *	 * @return  string  The modified string.	 *	 * @since   2.5	 */	private function fixQuote($string)	{		$string = str_replace('`', '', $string);		$string = str_replace(';', '', $string);		$string = str_replace('#__', $this->db->getPrefix(), $string);		return $this->db->quote($string);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla Cache output type object * * @package     Joomla.Platform * @subpackage  Cache * @since       11.1 */class JCacheControllerOutput extends JCacheController{	/**	 * @since   11.1	 */	protected $_id;	/**	 * @since   11.1	 */	protected $_group;	/**	 * @since   11.1	 */	protected $_locktest = null;	/**	 * Start the cache	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True if the cache is hit (false else)	 *	 * @since   11.1	 */	public function start($id, $group = null)	{		// If we have data in cache use that.		$data = $this->cache->get($id, $group);		$this->_locktest = new stdClass;		$this->_locktest->locked = null;		$this->_locktest->locklooped = null;		if ($data === false)		{			$this->_locktest = $this->cache->lock($id, $group);			if ($this->_locktest->locked == true && $this->_locktest->locklooped == true)			{				$data = $this->cache->get($id, $group);			}		}		if ($data !== false)		{			$data = unserialize(trim($data));			echo $data;			if ($this->_locktest->locked == true)			{				$this->cache->unlock($id, $group);			}			return true;		}		else		{			// Nothing in cache... let's start the output buffer and start collecting data for next time.			if ($this->_locktest->locked == false)			{				$this->_locktest = $this->cache->lock($id, $group);			}			ob_start();			ob_implicit_flush(false);			// Set id and group placeholders			$this->_id = $id;			$this->_group = $group;			return false;		}	}	/**	 * Stop the cache buffer and store the cached data	 *	 * @return  boolean  True if cache stored	 *	 * @since   11.1	 */	public function end()	{		// Get data from output buffer and echo it		$data = ob_get_contents();		ob_end_clean();		echo $data;		// Get id and group and reset them placeholders		$id = $this->_id;		$group = $this->_group;		$this->_id = null;		$this->_group = null;		// Get the storage handler and store the cached data		$ret = $this->cache->store(serialize($data), $id, $group);		if ($this->_locktest->locked == true)		{			$this->cache->unlock($id, $group);		}		return $ret;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Database * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Query Building Class. * * @package     Joomla.Platform * @subpackage  Database * @since       11.3 */class JDatabaseQueryPostgresql extends JDatabaseQuery implements JDatabaseQueryLimitable{	/**	 * @var    object  The FOR UPDATE element used in "FOR UPDATE"  lock	 * @since  11.3	 */	protected $forUpdate = null;	/**	 * @var    object  The FOR SHARE element used in "FOR SHARE"  lock	 * @since  11.3	 */	protected $forShare = null;	/**	 * @var    object  The NOWAIT element used in "FOR SHARE" and "FOR UPDATE" lock	 * @since  11.3	 */	protected $noWait = null;	/**	 * @var    object  The LIMIT element	 * @since  11.3	 */	protected $limit = null;	/**	 * @var    object  The OFFSET element	 * @since  11.3	 */	protected $offset = null;	/**	 * @var    object  The RETURNING element of INSERT INTO	 * @since  11.3	 */	protected $returning = null;	/**	 * Magic function to convert the query to a string, only for postgresql specific query	 *	 * @return  string	The completed query.	 *	 * @since   11.3	 */	public function __toString()	{		$query = '';		switch ($this->type)		{			case 'select':				$query .= (string) $this->select;				$query .= (string) $this->from;				if ($this->join)				{					// Special case for joins					foreach ($this->join as $join)					{						$query .= (string) $join;					}				}				if ($this->where)				{					$query .= (string) $this->where;				}				if ($this->group)				{					$query .= (string) $this->group;				}				if ($this->having)				{					$query .= (string) $this->having;				}				if ($this->order)				{					$query .= (string) $this->order;				}				if ($this->limit)				{					$query .= (string) $this->limit;				}				if ($this->offset)				{					$query .= (string) $this->offset;				}				if ($this->forUpdate)				{					$query .= (string) $this->forUpdate;				}				else				{					if ($this->forShare)					{						$query .= (string) $this->forShare;					}				}				if ($this->noWait)				{					$query .= (string) $this->noWait;				}				break;			case 'update':				$query .= (string) $this->update;				$query .= (string) $this->set;				if ($this->join)				{					$onWord = ' ON ';					// Workaround for special case of JOIN with UPDATE					foreach ($this->join as $join)					{						$joinElem = $join->getElements();						$joinArray = explode($onWord, $joinElem[0]);						$this->from($joinArray[0]);						$this->where($joinArray[1]);					}					$query .= (string) $this->from;				}				if ($this->where)				{					$query .= (string) $this->where;				}				break;			case 'insert':				$query .= (string) $this->insert;				if ($this->values)				{					if ($this->columns)					{						$query .= (string) $this->columns;					}					$elements = $this->values->getElements();					if (!($elements[0] instanceof $this))					{						$query .= ' VALUES ';					}					$query .= (string) $this->values;					if ($this->returning)					{						$query .= (string) $this->returning;					}				}				break;			default:				$query = parent::__toString();				break;		}		return $query;	}	/**	 * Clear data from the query or a specific clause of the query.	 *	 * @param   string  $clause  Optionally, the name of the clause to clear, or nothing to clear the whole query.	 *	 * @return  void	 *	 * @since   11.3	 */	public function clear($clause = null)	{		switch ($clause)		{			case 'limit':				$this->limit = null;				break;			case 'offset':				$this->offset = null;				break;			case 'forUpdate':				$this->forUpdate = null;				break;			case 'forShare':				$this->forShare = null;				break;			case 'noWait':				$this->noWait = null;				break;			case 'returning':				$this->returning = null;				break;			case 'select':			case 'update':			case 'delete':			case 'insert':			case 'from':			case 'join':			case 'set':			case 'where':			case 'group':			case 'having':			case 'order':			case 'columns':			case 'values':				parent::clear($clause);				break;			default:				$this->type = null;				$this->limit = null;				$this->offset = null;				$this->forUpdate = null;				$this->forShare = null;				$this->noWait = null;				$this->returning = null;				parent::clear($clause);				break;		}		return $this;	}	/**	 * Casts a value to a char.	 *	 * Ensure that the value is properly quoted before passing to the method.	 *	 * Usage:	 * $query->select($query->castAsChar('a'));	 *	 * @param   string  $value  The value to cast as a char.	 *	 * @return  string  Returns the cast value.	 *	 * @since   11.1	 */	public function castAsChar($value)	{		return $value . '::text';	}	/**	 * Concatenates an array of column names or values.	 *	 * Usage:	 * $query->select($query->concatenate(array('a', 'b')));	 *	 * @param   array   $values     An array of values to concatenate.	 * @param   string  $separator  As separator to place between each value.	 *	 * @return  string  The concatenated values.	 *	 * @since   11.3	 */	public function concatenate($values, $separator = null)	{		if ($separator)		{			return implode(' || ' . $this->quote($separator) . ' || ', $values);		}		else		{			return implode(' || ', $values);		}	}	/**	 * Gets the current date and time.	 *	 * @return  string  Return string used in query to obtain	 *	 * @since   11.3	 */	public function currentTimestamp()	{		return 'NOW()';	}	/**	 * Sets the FOR UPDATE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR UPDATE query element	 *	 * @since   11.3	 */	public function forUpdate ($table_name, $glue = ',')	{		$this->type = 'forUpdate';		if ( is_null($this->forUpdate) )		{			$glue = strtoupper($glue);			$this->forUpdate = new JDatabaseQueryElement('FOR UPDATE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forUpdate->append($table_name);		}		return $this;	}	/**	 * Sets the FOR SHARE lock on select's output row	 *	 * @param   string   $table_name  The table to lock	 * @param   boolean  $glue        The glue by which to join the conditions. Defaults to ',' .	 *	 * @return  JDatabaseQuery  FOR SHARE query element	 *	 * @since   11.3	 */	public function forShare ($table_name, $glue = ',')	{		$this->type = 'forShare';		if ( is_null($this->forShare) )		{			$glue = strtoupper($glue);			$this->forShare = new JDatabaseQueryElement('FOR SHARE', 'OF ' . $table_name, "$glue ");		}		else		{			$this->forShare->append($table_name);		}		return $this;	}	/**	 * Used to get a string to extract year from date column.	 *	 * Usage:	 * $query->select($query->year($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing year to be extracted.	 *	 * @return  string  Returns string to extract year from a date.	 *	 * @since   12.1	 */	public function year($date)	{		return 'EXTRACT (YEAR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract month from date column.	 *	 * Usage:	 * $query->select($query->month($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing month to be extracted.	 *	 * @return  string  Returns string to extract month from a date.	 *	 * @since   12.1	 */	public function month($date)	{		return 'EXTRACT (MONTH FROM ' . $date . ')';	}	/**	 * Used to get a string to extract day from date column.	 *	 * Usage:	 * $query->select($query->day($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing day to be extracted.	 *	 * @return  string  Returns string to extract day from a date.	 *	 * @since   12.1	 */	public function day($date)	{		return 'EXTRACT (DAY FROM ' . $date . ')';	}	/**	 * Used to get a string to extract hour from date column.	 *	 * Usage:	 * $query->select($query->hour($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing hour to be extracted.	 *	 * @return  string  Returns string to extract hour from a date.	 *	 * @since   12.1	 */	public function hour($date)	{		return 'EXTRACT (HOUR FROM ' . $date . ')';	}	/**	 * Used to get a string to extract minute from date column.	 *	 * Usage:	 * $query->select($query->minute($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing minute to be extracted.	 *	 * @return  string  Returns string to extract minute from a date.	 *	 * @since   12.1	 */	public function minute($date)	{		return 'EXTRACT (MINUTE FROM ' . $date . ')';	}	/**	 * Used to get a string to extract seconds from date column.	 *	 * Usage:	 * $query->select($query->second($query->quoteName('dateColumn')));	 *	 * @param   string  $date  Date column containing second to be extracted.	 *	 * @return  string  Returns string to extract second from a date.	 *	 * @since   12.1	 */	public function second($date)	{		return 'EXTRACT (SECOND FROM ' . $date . ')';	}	/**	 * Sets the NOWAIT lock on select's output row	 *	 * @return  JDatabaseQuery  NO WAIT query element	 *	 * @since   11.3	 */	public function noWait ()	{		$this->type = 'noWait';		if ( is_null($this->noWait) )		{			$this->noWait = new JDatabaseQueryElement('NOWAIT', null);		}		return $this;	}	/**	 * Set the LIMIT clause to the query	 *	 * @param   int  $limit  An int of how many row will be returned	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function limit( $limit = 0 )	{		if (is_null($this->limit))		{			$this->limit = new JDatabaseQueryElement('LIMIT', (int) $limit);		}		return $this;	}	/**	 * Set the OFFSET clause to the query	 *	 * @param   int  $offset  An int for skipping row	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function offset( $offset = 0 )	{		if (is_null($this->offset))		{			$this->offset = new JDatabaseQueryElement('OFFSET', (int) $offset);		}		return $this;	}	/**	 * Add the RETURNING element to INSERT INTO statement.	 *	 * @param   mixed  $pkCol  The name of the primary key column.	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   11.3	 */	public function returning( $pkCol )	{		if (is_null($this->returning))		{			$this->returning = new JDatabaseQueryElement('RETURNING', $pkCol);		}		return $this;	}	/**	 * Sets the offset and limit for the result set, if the database driver supports it.	 *	 * Usage:	 * $query->setLimit(100, 0); (retrieve 100 rows, starting at first record)	 * $query->setLimit(50, 50); (retrieve 50 rows, starting at 50th record)	 *	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return  JDatabaseQuery  Returns this object to allow chaining.	 *	 * @since   12.1	 */	public function setLimit($limit = 0, $offset = 0)	{		$this->limit  = (int) $limit;		$this->offset = (int) $offset;		return $this;	}	/**	 * Method to modify a query already in string format with the needed	 * additions to make the query limited to a particular number of	 * results, or start at a particular offset.	 *	 * @param   string   $query   The query in string format	 * @param   integer  $limit   The limit for the result set	 * @param   integer  $offset  The offset for the result set	 *	 * @return string	 *	 * @since 12.1	 */	public function processLimit($query, $limit, $offset = 0)	{		if ($limit > 0)		{			$query .= ' LIMIT ' . $limit;		}		if ($offset > 0)		{			$query .= ' OFFSET ' . $offset;		}		return $query;	}	/**	 * Add to the current date and time in Postgresql.	 * Usage:	 * $query->select($query->dateAdd());	 * Prefixing the interval with a - (negative sign) will cause subtraction to be used.	 *	 * @param   datetime  $date      The date to add to	 * @param   string    $interval  The string representation of the appropriate number of units	 * @param   string    $datePart  The part of the date to perform the addition on	 *	 * @return  string  The string with the appropriate sql for addition of dates	 *	 * @since   13.1	 * @note Not all drivers support all units. Check appropriate references	 * @link http://www.postgresql.org/docs/9.0/static/functions-datetime.html.	 */	public function dateAdd($date, $interval, $datePart)	{		if (substr($interval, 0, 1) != '-')		{			return "timestamp '" . $date . "' + interval '" . $interval . " " . $datePart . "'";		}		else		{			return "timestamp '" . $date . "' - interval '" . ltrim($interval, '-') . " " . $datePart . "'";		}	}}
<?php/** * lessphp v0.3.8 * http://leafo.net/lessphp * * LESS css compiler, adapted from http://lesscss.org * * Copyright 2012, Leaf Corcoran <leafot@gmail.com> * Licensed under MIT or GPLv3, see LICENSE *//** * The less compiler and parser. * * Converting LESS to CSS is a three stage process. The incoming file is parsed * by `lessc_parser` into a syntax tree, then it is compiled into another tree * representing the CSS structure by `lessc`. The CSS tree is fed into a * formatter, like `lessc_formatter` which then outputs CSS as a string. * * During the first compile, all values are *reduced*, which means that their * types are brought to the lowest form before being dump as strings. This * handles math equations, variable dereferences, and the like. * * The `parse` function of `lessc` is the entry point. * * In summary: * * The `lessc` class creates an intstance of the parser, feeds it LESS code, * then transforms the resulting tree to a CSS tree. This class also holds the * evaluation context, such as all available mixins and variables at any given * time. * * The `lessc_parser` class is only concerned with parsing its input. * * The `lessc_formatter` takes a CSS tree, and dumps it to a formatted string, * handling things like indentation. */class lessc {	static public $VERSION = "v0.3.8";	static protected $TRUE = array("keyword", "true");	static protected $FALSE = array("keyword", "false");	protected $libFunctions = array();	protected $registeredVars = array();	protected $preserveComments = false;	public $vPrefix = '@'; // prefix of abstract properties	public $mPrefix = '$'; // prefix of abstract blocks	public $parentSelector = '&';	public $importDisabled = false;	public $importDir = '';	protected $numberPrecision = null;	// set to the parser that generated the current line when compiling	// so we know how to create error messages	protected $sourceParser = null;	protected $sourceLoc = null;	static public $defaultValue = array("keyword", "");	static protected $nextImportId = 0; // uniquely identify imports	// attempts to find the path of an import url, returns null for css files	protected function findImport($url)	{		foreach ((array)$this->importDir as $dir)		{			$full = $dir.(substr($dir, -1) != '/' ? '/' : '').$url;			if ($this->fileExists($file = $full.'.less') || $this->fileExists($file = $full))			{				return $file;			}		}		return null;	}	protected function fileExists($name)	{		return is_file($name);	}	static public function compressList($items, $delim)	{		if (!isset($items[1]) && isset($items[0])) return $items[0];		else return array('list', $delim, $items);	}	static public function preg_quote($what)	{		return preg_quote($what, '/');	}	protected function tryImport($importPath, $parentBlock, $out)	{		if ($importPath[0] == "function" && $importPath[1] == "url")		{			$importPath = $this->flattenList($importPath[2]);		}		$str = $this->coerceString($importPath);		if ($str === null) return false;		$url = $this->compileValue($this->lib_e($str));		// don't import if it ends in css		if (substr_compare($url, '.css', -4, 4) === 0) return false;		$realPath = $this->findImport($url);		if ($realPath === null) return false;		if ($this->importDisabled)		{			return array(false, "/* import disabled */");		}		$this->addParsedFile($realPath);		$parser = $this->makeParser($realPath);		$root = $parser->parse(file_get_contents($realPath));		// set the parents of all the block props		foreach ($root->props as $prop)		{			if ($prop[0] == "block")			{				$prop[1]->parent = $parentBlock;			}		}		// copy mixins into scope, set their parents		// bring blocks from import into current block		// TODO: need to mark the source parser	these came from this file		foreach ($root->children as $childName => $child)		{			if (isset($parentBlock->children[$childName]))			{				$parentBlock->children[$childName] = array_merge(					$parentBlock->children[$childName],					$child);			} else {				$parentBlock->children[$childName] = $child;			}		}		$pi = pathinfo($realPath);		$dir = $pi["dirname"];		list($top, $bottom) = $this->sortProps($root->props, true);		$this->compileImportedProps($top, $parentBlock, $out, $parser, $dir);		return array(true, $bottom, $parser, $dir);	}	protected function compileImportedProps($props, $block, $out, $sourceParser, $importDir)	{		$oldSourceParser = $this->sourceParser;		$oldImport = $this->importDir;		// TODO: this is because the importDir api is stupid		$this->importDir = (array)$this->importDir;		array_unshift($this->importDir, $importDir);		foreach ($props as $prop)		{			$this->compileProp($prop, $block, $out);		}		$this->importDir = $oldImport;		$this->sourceParser = $oldSourceParser;	}	/**	 * Recursively compiles a block.	 *	 * A block is analogous to a CSS block in most cases. A single LESS document	 * is encapsulated in a block when parsed, but it does not have parent tags	 * so all of it's children appear on the root level when compiled.	 *	 * Blocks are made up of props and children.	 *	 * Props are property instructions, array tuples which describe an action	 * to be taken, eg. write a property, set a variable, mixin a block.	 *	 * The children of a block are just all the blocks that are defined within.	 * This is used to look up mixins when performing a mixin.	 *	 * Compiling the block involves pushing a fresh environment on the stack,	 * and iterating through the props, compiling each one.	 *	 * See lessc::compileProp()	 *	 */	protected function compileBlock($block)	{		switch ($block->type)	{		case "root":			$this->compileRoot($block);			break;		case null:			$this->compileCSSBlock($block);			break;		case "media":			$this->compileMedia($block);			break;		case "directive":			$name = "@" . $block->name;			if (!empty($block->value))			{				$name .= " " . $this->compileValue($this->reduce($block->value));			}			$this->compileNestedBlock($block, array($name));			break;		default:			$this->throwError("unknown block type: $block->type\n");		}	}	protected function compileCSSBlock($block)	{		$env = $this->pushEnv();		$selectors = $this->compileSelectors($block->tags);		$env->selectors = $this->multiplySelectors($selectors);		$out = $this->makeOutputBlock(null, $env->selectors);		$this->scope->children[] = $out;		$this->compileProps($block, $out);		$block->scope = $env; // mixins carry scope with them!		$this->popEnv();	}	protected function compileMedia($media)	{		$env = $this->pushEnv($media);		$parentScope = $this->mediaParent($this->scope);		$query = $this->compileMediaQuery($this->multiplyMedia($env));		$this->scope = $this->makeOutputBlock($media->type, array($query));		$parentScope->children[] = $this->scope;		$this->compileProps($media, $this->scope);		if (count($this->scope->lines) > 0)		{			$orphanSelelectors = $this->findClosestSelectors();			if (!is_null($orphanSelelectors))			{				$orphan = $this->makeOutputBlock(null, $orphanSelelectors);				$orphan->lines = $this->scope->lines;				array_unshift($this->scope->children, $orphan);				$this->scope->lines = array();			}		}		$this->scope = $this->scope->parent;		$this->popEnv();	}	protected function mediaParent($scope)	{		while (!empty($scope->parent))		{			if (!empty($scope->type) && $scope->type != "media")			{				break;			}			$scope = $scope->parent;		}		return $scope;	}	protected function compileNestedBlock($block, $selectors)	{		$this->pushEnv($block);		$this->scope = $this->makeOutputBlock($block->type, $selectors);		$this->scope->parent->children[] = $this->scope;		$this->compileProps($block, $this->scope);		$this->scope = $this->scope->parent;		$this->popEnv();	}	protected function compileRoot($root)	{		$this->pushEnv();		$this->scope = $this->makeOutputBlock($root->type);		$this->compileProps($root, $this->scope);		$this->popEnv();	}	protected function compileProps($block, $out)	{		foreach ($this->sortProps($block->props) as $prop)		{			$this->compileProp($prop, $block, $out);		}	}	protected function sortProps($props, $split = false)	{		$vars = array();		$imports = array();		$other = array();		foreach ($props as $prop)		{			switch ($prop[0])		{			case "assign":				if (isset($prop[1][0]) && $prop[1][0] == $this->vPrefix)				{					$vars[] = $prop;				} else {					$other[] = $prop;				}				break;			case "import":				$id = self::$nextImportId++;				$prop[] = $id;				$imports[] = $prop;				$other[] = array("import_mixin", $id);				break;			default:				$other[] = $prop;			}		}		if ($split)		{			return array(array_merge($vars, $imports), $other);		}		else		{			return array_merge($vars, $imports, $other);		}	}	protected function compileMediaQuery($queries)	{		$compiledQueries = array();		foreach ($queries as $query)		{			$parts = array();			foreach ($query as $q)			{				switch ($q[0])			{				case "mediaType":					$parts[] = implode(" ", array_slice($q, 1));					break;				case "mediaExp":					if (isset($q[2]))					{						$parts[] = "($q[1]: " .							$this->compileValue($this->reduce($q[2])) . ")";					} else {						$parts[] = "($q[1])";					}					break;				}			}			if (count($parts) > 0)			{				$compiledQueries[] =  implode(" and ", $parts);			}		}		$out = "@media";		if (!empty($parts))		{			$out .= " " .				implode($this->formatter->selectorSeparator, $compiledQueries);		}		return $out;	}	protected function multiplyMedia($env, $childQueries = null)	{		if (is_null($env) ||			!empty($env->block->type) && $env->block->type != "media")		{			return $childQueries;		}		// plain old block, skip		if (empty($env->block->type))		{			return $this->multiplyMedia($env->parent, $childQueries);		}		$out = array();		$queries = $env->block->queries;		if (is_null($childQueries))		{			$out = $queries;		}		else		{			foreach ($queries as $parent)			{				foreach ($childQueries as $child)				{					$out[] = array_merge($parent, $child);				}			}		}		return $this->multiplyMedia($env->parent, $out);	}	protected function expandParentSelectors(&$tag, $replace)	{		$parts = explode("$&$", $tag);		$count = 0;		foreach ($parts as &$part)		{			$part = str_replace($this->parentSelector, $replace, $part, $c);			$count += $c;		}		$tag = implode($this->parentSelector, $parts);		return $count;	}	protected function findClosestSelectors()	{		$env = $this->env;		$selectors = null;		while ($env !== null)		{			if (isset($env->selectors))			{				$selectors = $env->selectors;				break;			}			$env = $env->parent;		}		return $selectors;	}	// multiply $selectors against the nearest selectors in env	protected function multiplySelectors($selectors)	{		// find parent selectors		$parentSelectors = $this->findClosestSelectors();		if (is_null($parentSelectors))		{			// kill parent reference in top level selector			foreach ($selectors as &$s)			{				$this->expandParentSelectors($s, "");			}			return $selectors;		}		$out = array();		foreach ($parentSelectors as $parent)		{			foreach ($selectors as $child)			{				$count = $this->expandParentSelectors($child, $parent);				// don't prepend the parent tag if & was used				if ($count > 0)				{					$out[] = trim($child);				} else {					$out[] = trim($parent . ' ' . $child);				}			}		}		return $out;	}	// reduces selector expressions	protected function compileSelectors($selectors)	{		$out = array();		foreach ($selectors as $s)		{			if (is_array($s))			{				list(, $value) = $s;				$out[] = $this->compileValue($this->reduce($value));			} else {				$out[] = $s;			}		}		return $out;	}	protected function eq($left, $right)	{		return $left == $right;	}	protected function patternMatch($block, $callingArgs)	{		// match the guards if it has them		// any one of the groups must have all its guards pass for a match		if (!empty($block->guards))		{			$groupPassed = false;			foreach ($block->guards as $guardGroup)			{				foreach ($guardGroup as $guard)				{					$this->pushEnv();					$this->zipSetArgs($block->args, $callingArgs);					$negate = false;					if ($guard[0] == "negate")					{						$guard = $guard[1];						$negate = true;					}					$passed = $this->reduce($guard) == self::$TRUE;					if ($negate) $passed = !$passed;					$this->popEnv();					if ($passed)					{						$groupPassed = true;					} else {						$groupPassed = false;						break;					}				}				if ($groupPassed) break;			}			if (!$groupPassed)			{				return false;			}		}		$numCalling = count($callingArgs);		if (empty($block->args))		{			return $block->isVararg || $numCalling == 0;		}		$i = -1; // no args		// try to match by arity or by argument literal		foreach ($block->args as $i => $arg)		{			switch ($arg[0])		{			case "lit":				if (empty($callingArgs[$i]) || !$this->eq($arg[1], $callingArgs[$i]))				{					return false;				}				break;			case "arg":				// no arg and no default value				if (!isset($callingArgs[$i]) && !isset($arg[2]))				{					return false;				}				break;			case "rest":				$i--; // rest can be empty				break 2;			}		}		if ($block->isVararg)		{			return true; // not having enough is handled above		}		else		{			$numMatched = $i + 1;			// greater than becuase default values always match			return $numMatched >= $numCalling;		}	}	protected function patternMatchAll($blocks, $callingArgs)	{		$matches = null;		foreach ($blocks as $block)		{			if ($this->patternMatch($block, $callingArgs))			{				$matches[] = $block;			}		}		return $matches;	}	// attempt to find blocks matched by path and args	protected function findBlocks($searchIn, $path, $args, $seen=array())	{		if ($searchIn == null) return null;		if (isset($seen[$searchIn->id])) return null;		$seen[$searchIn->id] = true;		$name = $path[0];		if (isset($searchIn->children[$name]))		{			$blocks = $searchIn->children[$name];			if (count($path) == 1)			{				$matches = $this->patternMatchAll($blocks, $args);				if (!empty($matches))				{					// This will return all blocks that match in the closest					// scope that has any matching block, like lessjs					return $matches;				}			} else {				$matches = array();				foreach ($blocks as $subBlock)				{					$subMatches = $this->findBlocks($subBlock,						array_slice($path, 1), $args, $seen);					if (!is_null($subMatches))					{						foreach ($subMatches as $sm)						{							$matches[] = $sm;						}					}				}				return count($matches) > 0 ? $matches : null;			}		}		if ($searchIn->parent === $searchIn) return null;		return $this->findBlocks($searchIn->parent, $path, $args, $seen);	}	// sets all argument names in $args to either the default value	// or the one passed in through $values	protected function zipSetArgs($args, $values)	{		$i = 0;		$assignedValues = array();		foreach ($args as $a)		{			if ($a[0] == "arg")			{				if ($i < count($values) && !is_null($values[$i]))				{					$value = $values[$i];				} elseif (isset($a[2]))				{					$value = $a[2];				} else $value = null;				$value = $this->reduce($value);				$this->set($a[1], $value);				$assignedValues[] = $value;			}			$i++;		}		// check for a rest		$last = end($args);		if ($last[0] == "rest")		{			$rest = array_slice($values, count($args) - 1);			$this->set($last[1], $this->reduce(array("list", " ", $rest)));		}		$this->env->arguments = $assignedValues;	}	// compile a prop and update $lines or $blocks appropriately	protected function compileProp($prop, $block, $out)	{		// set error position context		$this->sourceLoc = isset($prop[-1]) ? $prop[-1] : -1;		switch ($prop[0])	{		case 'assign':			list(, $name, $value) = $prop;			if ($name[0] == $this->vPrefix)			{				$this->set($name, $value);			} else {				$out->lines[] = $this->formatter->property($name,						$this->compileValue($this->reduce($value)));			}			break;		case 'block':			list(, $child) = $prop;			$this->compileBlock($child);			break;		case 'mixin':			list(, $path, $args, $suffix) = $prop;			$args = array_map(array($this, "reduce"), (array)$args);			$mixins = $this->findBlocks($block, $path, $args);			if ($mixins === null)			{				// fwrite(STDERR,"failed to find block: ".implode(" > ", $path)."\n");				break; // throw error here??			}			foreach ($mixins as $mixin)			{				$haveScope = false;				if (isset($mixin->parent->scope))				{					$haveScope = true;					$mixinParentEnv = $this->pushEnv();					$mixinParentEnv->storeParent = $mixin->parent->scope;				}				$haveArgs = false;				if (isset($mixin->args))				{					$haveArgs = true;					$this->pushEnv();					$this->zipSetArgs($mixin->args, $args);				}				$oldParent = $mixin->parent;				if ($mixin != $block) $mixin->parent = $block;				foreach ($this->sortProps($mixin->props) as $subProp)				{					if ($suffix !== null &&						$subProp[0] == "assign" &&						is_string($subProp[1]) &&						$subProp[1]{0} != $this->vPrefix)					{						$subProp[2] = array(							'list', ' ',							array($subProp[2], array('keyword', $suffix))						);					}					$this->compileProp($subProp, $mixin, $out);				}				$mixin->parent = $oldParent;				if ($haveArgs) $this->popEnv();				if ($haveScope) $this->popEnv();			}			break;		case 'raw':			$out->lines[] = $prop[1];			break;		case "directive":			list(, $name, $value) = $prop;			$out->lines[] = "@$name " . $this->compileValue($this->reduce($value)).';';			break;		case "comment":			$out->lines[] = $prop[1];			break;		case "import";			list(, $importPath, $importId) = $prop;			$importPath = $this->reduce($importPath);			if (!isset($this->env->imports))			{				$this->env->imports = array();			}			$result = $this->tryImport($importPath, $block, $out);			$this->env->imports[$importId] = $result === false ?				array(false, "@import " . $this->compileValue($importPath).";") :				$result;			break;		case "import_mixin":			list(,$importId) = $prop;			$import = $this->env->imports[$importId];			if ($import[0] === false)			{				$out->lines[] = $import[1];			} else {				list(, $bottom, $parser, $importDir) = $import;				$this->compileImportedProps($bottom, $block, $out, $parser, $importDir);			}			break;		default:			$this->throwError("unknown op: {$prop[0]}\n");		}	}	/**	 * Compiles a primitive value into a CSS property value.	 *	 * Values in lessphp are typed by being wrapped in arrays, their format is	 * typically:	 *	 *     array(type, contents [, additional_contents]*)	 *	 * The input is expected to be reduced. This function will not work on	 * things like expressions and variables.	 */	protected function compileValue($value)	{		switch ($value[0])	{		case 'list':			// [1] - delimiter			// [2] - array of values			return implode($value[1], array_map(array($this, 'compileValue'), $value[2]));		case 'raw_color':			if (!empty($this->formatter->compressColors))			{				return $this->compileValue($this->coerceColor($value));			}			return $value[1];		case 'keyword':			// [1] - the keyword			return $value[1];		case 'number':			list(, $num, $unit) = $value;			// [1] - the number			// [2] - the unit			if ($this->numberPrecision !== null)			{				$num = round($num, $this->numberPrecision);			}			return $num . $unit;		case 'string':			// [1] - contents of string (includes quotes)			list(, $delim, $content) = $value;			foreach ($content as &$part)			{				if (is_array($part))				{					$part = $this->compileValue($part);				}			}			return $delim . implode($content) . $delim;		case 'color':			// [1] - red component (either number or a %)			// [2] - green component			// [3] - blue component			// [4] - optional alpha component			list(, $r, $g, $b) = $value;			$r = round($r);			$g = round($g);			$b = round($b);			if (count($value) == 5 && $value[4] != 1) { // rgba				return 'rgba('.$r.','.$g.','.$b.','.$value[4].')';			}			$h = sprintf("#%02x%02x%02x", $r, $g, $b);			if (!empty($this->formatter->compressColors))			{				// Converting hex color to short notation (e.g. #003399 to #039)				if ($h[1] === $h[2] && $h[3] === $h[4] && $h[5] === $h[6])				{					$h = '#' . $h[1] . $h[3] . $h[5];				}			}			return $h;		case 'function':			list(, $name, $args) = $value;			return $name.'('.$this->compileValue($args).')';		default: // assumed to be unit			$this->throwError("unknown value type: $value[0]");		}	}	protected function lib_isnumber($value)	{		return $this->toBool($value[0] == "number");	}	protected function lib_isstring($value)	{		return $this->toBool($value[0] == "string");	}	protected function lib_iscolor($value)	{		return $this->toBool($this->coerceColor($value));	}	protected function lib_iskeyword($value)	{		return $this->toBool($value[0] == "keyword");	}	protected function lib_ispixel($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "px");	}	protected function lib_ispercentage($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "%");	}	protected function lib_isem($value)	{		return $this->toBool($value[0] == "number" && $value[2] == "em");	}	protected function lib_rgbahex($color)	{		$color = $this->coerceColor($color);		if (is_null($color))			$this->throwError("color expected for rgbahex");		return sprintf("#%02x%02x%02x%02x",			isset($color[4]) ? $color[4]*255 : 255,			$color[1],$color[2], $color[3]);	}	protected function lib_argb($color){		return $this->lib_rgbahex($color);	}	// utility func to unquote a string	protected function lib_e($arg)	{		switch ($arg[0])		{			case "list":				$items = $arg[2];				if (isset($items[0]))				{					return $this->lib_e($items[0]);				}				return self::$defaultValue;			case "string":				$arg[1] = "";				return $arg;			case "keyword":				return $arg;			default:				return array("keyword", $this->compileValue($arg));		}	}	protected function lib__sprintf($args)	{		if ($args[0] != "list") return $args;		$values = $args[2];		$string = array_shift($values);		$template = $this->compileValue($this->lib_e($string));		$i = 0;		if (preg_match_all('/%[dsa]/', $template, $m))		{			foreach ($m[0] as $match)			{				$val = isset($values[$i]) ?					$this->reduce($values[$i]) : array('keyword', '');				// lessjs compat, renders fully expanded color, not raw color				if ($color = $this->coerceColor($val))				{					$val = $color;				}				$i++;				$rep = $this->compileValue($this->lib_e($val));				$template = preg_replace('/'.self::preg_quote($match).'/',					$rep, $template, 1);			}		}		$d = $string[0] == "string" ? $string[1] : '"';		return array("string", $d, array($template));	}	protected function lib_floor($arg)	{		$value = $this->assertNumber($arg);		return array("number", floor($value), $arg[2]);	}	protected function lib_ceil($arg)	{		$value = $this->assertNumber($arg);		return array("number", ceil($value), $arg[2]);	}	protected function lib_round($arg)	{		$value = $this->assertNumber($arg);		return array("number", round($value), $arg[2]);	}	/**	 * Helper function to get arguments for color manipulation functions.	 * takes a list that contains a color like thing and a percentage	 */	protected function colorArgs($args)	{		if ($args[0] != 'list' || count($args[2]) < 2)		{			return array(array('color', 0, 0, 0), 0);		}		list($color, $delta) = $args[2];		$color = $this->assertColor($color);		$delta = floatval($delta[1]);		return array($color, $delta);	}	protected function lib_darken($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[3] = $this->clamp($hsl[3] - $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_lighten($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[3] = $this->clamp($hsl[3] + $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_saturate($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[2] = $this->clamp($hsl[2] + $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_desaturate($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[2] = $this->clamp($hsl[2] - $delta, 100);		return $this->toRGB($hsl);	}	protected function lib_spin($args)	{		list($color, $delta) = $this->colorArgs($args);		$hsl = $this->toHSL($color);		$hsl[1] = $hsl[1] + $delta % 360;		if ($hsl[1] < 0) $hsl[1] += 360;		return $this->toRGB($hsl);	}	protected function lib_fadeout($args)	{		list($color, $delta) = $this->colorArgs($args);		$color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) - $delta/100);		return $color;	}	protected function lib_fadein($args)	{		list($color, $delta) = $this->colorArgs($args);		$color[4] = $this->clamp((isset($color[4]) ? $color[4] : 1) + $delta/100);		return $color;	}	protected function lib_hue($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[1]);	}	protected function lib_saturation($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[2]);	}	protected function lib_lightness($color)	{		$hsl = $this->toHSL($this->assertColor($color));		return round($hsl[3]);	}	// get the alpha of a color	// defaults to 1 for non-colors or colors without an alpha	protected function lib_alpha($value)	{		if (!is_null($color = $this->coerceColor($value)))		{			return isset($color[4]) ? $color[4] : 1;		}	}	// set the alpha of the color	protected function lib_fade($args)	{		list($color, $alpha) = $this->colorArgs($args);		$color[4] = $this->clamp($alpha / 100.0);		return $color;	}	protected function lib_percentage($arg)	{		$num = $this->assertNumber($arg);		return array("number", $num*100, "%");	}	// mixes two colors by weight	// mix(@color1, @color2, @weight);	// http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html#mix-instance_method	protected function lib_mix($args)	{		if ($args[0] != "list" || count($args[2]) < 3)			$this->throwError("mix expects (color1, color2, weight)");		list($first, $second, $weight) = $args[2];		$first = $this->assertColor($first);		$second = $this->assertColor($second);		$first_a = $this->lib_alpha($first);		$second_a = $this->lib_alpha($second);		$weight = $weight[1] / 100.0;		$w = $weight * 2 - 1;		$a = $first_a - $second_a;		$w1 = (($w * $a == -1 ? $w : ($w + $a)/(1 + $w * $a)) + 1) / 2.0;		$w2 = 1.0 - $w1;		$new = array('color',			$w1 * $first[1] + $w2 * $second[1],			$w1 * $first[2] + $w2 * $second[2],			$w1 * $first[3] + $w2 * $second[3],		);		if ($first_a != 1.0 || $second_a != 1.0)		{			$new[] = $first_a * $weight + $second_a * ($weight - 1);		}		return $this->fixColor($new);	}	protected function assertColor($value, $error = "expected color value")	{		$color = $this->coerceColor($value);		if (is_null($color)) $this->throwError($error);		return $color;	}	protected function assertNumber($value, $error = "expecting number")	{		if ($value[0] == "number") return $value[1];		$this->throwError($error);	}	protected function toHSL($color)	{		if ($color[0] == 'hsl') return $color;		$r = $color[1] / 255;		$g = $color[2] / 255;		$b = $color[3] / 255;		$min = min($r, $g, $b);		$max = max($r, $g, $b);		$L = ($min + $max) / 2;		if ($min == $max)		{			$S = $H = 0;		}		else		{			if ($L < 0.5)				$S = ($max - $min)/($max + $min);			else				$S = ($max - $min)/(2.0 - $max - $min);			if ($r == $max) $H = ($g - $b)/($max - $min);			elseif ($g == $max) $H = 2.0 + ($b - $r)/($max - $min);			elseif ($b == $max) $H = 4.0 + ($r - $g)/($max - $min);		}		$out = array('hsl',			($H < 0 ? $H + 6 : $H)*60,			$S*100,			$L*100,		);		if (count($color) > 4) $out[] = $color[4]; // copy alpha		return $out;	}	protected function toRGB_helper($comp, $temp1, $temp2)	{		if ($comp < 0) $comp += 1.0;		elseif ($comp > 1) $comp -= 1.0;		if (6 * $comp < 1) return $temp1 + ($temp2 - $temp1) * 6 * $comp;		if (2 * $comp < 1) return $temp2;		if (3 * $comp < 2) return $temp1 + ($temp2 - $temp1)*((2/3) - $comp) * 6;		return $temp1;	}	/**	 * Converts a hsl array into a color value in rgb.	 * Expects H to be in range of 0 to 360, S and L in 0 to 100	 */	protected function toRGB($color)	{		if ($color == 'color') return $color;		$H = $color[1] / 360;		$S = $color[2] / 100;		$L = $color[3] / 100;		if ($S == 0)		{			$r = $g = $b = $L;		}		else		{			$temp2 = $L < 0.5 ?				$L*(1.0 + $S) :				$L + $S - $L * $S;			$temp1 = 2.0 * $L - $temp2;			$r = $this->toRGB_helper($H + 1/3, $temp1, $temp2);			$g = $this->toRGB_helper($H, $temp1, $temp2);			$b = $this->toRGB_helper($H - 1/3, $temp1, $temp2);		}		// $out = array('color', round($r*255), round($g*255), round($b*255));		$out = array('color', $r*255, $g*255, $b*255);		if (count($color) > 4) $out[] = $color[4]; // copy alpha		return $out;	}	protected function clamp($v, $max = 1, $min = 0)	{		return min($max, max($min, $v));	}	/**	 * Convert the rgb, rgba, hsl color literals of function type	 * as returned by the parser into values of color type.	 */	protected function funcToColor($func)	{		$fname = $func[1];		if ($func[2][0] != 'list') return false; // need a list of arguments		$rawComponents = $func[2][2];		if ($fname == 'hsl' || $fname == 'hsla')		{			$hsl = array('hsl');			$i = 0;			foreach ($rawComponents as $c)			{				$val = $this->reduce($c);				$val = isset($val[1]) ? floatval($val[1]) : 0;				if ($i == 0) $clamp = 360;				elseif ($i < 3) $clamp = 100;				else $clamp = 1;				$hsl[] = $this->clamp($val, $clamp);				$i++;			}			while (count($hsl) < 4) $hsl[] = 0;			return $this->toRGB($hsl);		} elseif ($fname == 'rgb' || $fname == 'rgba')		{			$components = array();			$i = 1;			foreach	($rawComponents as $c)			{				$c = $this->reduce($c);				if ($i < 4)				{					if ($c[0] == "number" && $c[2] == "%")					{						$components[] = 255 * ($c[1] / 100);					} else {						$components[] = floatval($c[1]);					}				} elseif ($i == 4)				{					if ($c[0] == "number" && $c[2] == "%")					{						$components[] = 1.0 * ($c[1] / 100);					} else {						$components[] = floatval($c[1]);					}				} else break;				$i++;			}			while (count($components) < 3) $components[] = 0;			array_unshift($components, 'color');			return $this->fixColor($components);		}		return false;	}	protected function reduce($value, $forExpression = false)	{		switch ($value[0])	{		case "variable":			$key = $value[1];			if (is_array($key))			{				$key = $this->reduce($key);				$key = $this->vPrefix . $this->compileValue($this->lib_e($key));			}			$seen =& $this->env->seenNames;			if (!empty($seen[$key]))			{				$this->throwError("infinite loop detected: $key");			}			$seen[$key] = true;			$out = $this->reduce($this->get($key, self::$defaultValue));			$seen[$key] = false;			return $out;		case "list":			foreach ($value[2] as &$item)			{				$item = $this->reduce($item, $forExpression);			}			return $value;		case "expression":			return $this->evaluate($value);		case "string":			foreach ($value[2] as &$part)			{				if (is_array($part))				{					$strip = $part[0] == "variable";					$part = $this->reduce($part);					if ($strip) $part = $this->lib_e($part);				}			}			return $value;		case "escape":			list(,$inner) = $value;			return $this->lib_e($this->reduce($inner));		case "function":			$color = $this->funcToColor($value);			if ($color) return $color;			list(, $name, $args) = $value;			if ($name == "%") $name = "_sprintf";			$f = isset($this->libFunctions[$name]) ?				$this->libFunctions[$name] : array($this, 'lib_'.$name);			if (is_callable($f))			{				if ($args[0] == 'list')					$args = self::compressList($args[2], $args[1]);				$ret = call_user_func($f, $this->reduce($args, true), $this);				if (is_null($ret))				{					return array("string", "", array(						$name, "(", $args, ")"					));				}				// convert to a typed value if the result is a php primitive				if (is_numeric($ret)) $ret = array('number', $ret, "");				elseif (!is_array($ret)) $ret = array('keyword', $ret);				return $ret;			}			// plain function, reduce args			$value[2] = $this->reduce($value[2]);			return $value;		case "unary":			list(, $op, $exp) = $value;			$exp = $this->reduce($exp);			if ($exp[0] == "number")			{				switch ($op)			{				case "+":					return $exp;				case "-":					$exp[1] *= -1;					return $exp;				}			}			return array("string", "", array($op, $exp));		}		if ($forExpression)		{			switch ($value[0])		{			case "keyword":				if ($color = $this->coerceColor($value))				{					return $color;				}				break;			case "raw_color":				return $this->coerceColor($value);			}		}		return $value;	}	// coerce a value for use in color operation	protected function coerceColor($value)	{		switch($value[0])		{			case 'color': return $value;			case 'raw_color':				$c = array("color", 0, 0, 0);				$colorStr = substr($value[1], 1);				$num = hexdec($colorStr);				$width = strlen($colorStr) == 3 ? 16 : 256;				for ($i = 3; $i > 0; $i--) { // 3 2 1					$t = $num % $width;					$num /= $width;					$c[$i] = $t * (256/$width) + $t * floor(16/$width);				}				return $c;			case 'keyword':				$name = $value[1];				if (isset(self::$cssColors[$name]))				{					list($r, $g, $b) = explode(',', self::$cssColors[$name]);					return array('color', $r, $g, $b);				}				return null;		}	}	// make something string like into a string	protected function coerceString($value)	{		switch ($value[0])	{		case "string":			return $value;		case "keyword":			return array("string", "", array($value[1]));		}		return null;	}	// turn list of length 1 into value type	protected function flattenList($value)	{		if ($value[0] == "list" && count($value[2]) == 1)		{			return $this->flattenList($value[2][0]);		}		return $value;	}	protected function toBool($a)	{		if ($a) return self::$TRUE;		else return self::$FALSE;	}	// evaluate an expression	protected function evaluate($exp)	{		list(, $op, $left, $right, $whiteBefore, $whiteAfter) = $exp;		$left = $this->reduce($left, true);		$right = $this->reduce($right, true);		if ($leftColor = $this->coerceColor($left))		{			$left = $leftColor;		}		if ($rightColor = $this->coerceColor($right))		{			$right = $rightColor;		}		$ltype = $left[0];		$rtype = $right[0];		// operators that work on all types		if ($op == "and")		{			return $this->toBool($left == self::$TRUE && $right == self::$TRUE);		}		if ($op == "=")		{			return $this->toBool($this->eq($left, $right) );		}		if ($op == "+" && !is_null($str = $this->stringConcatenate($left, $right)))		{			return $str;		}		// type based operators		$fname = "op_${ltype}_${rtype}";		if (is_callable(array($this, $fname)))		{			$out = $this->$fname($op, $left, $right);			if (!is_null($out)) return $out;		}		// make the expression look it did before being parsed		$paddedOp = $op;		if ($whiteBefore) $paddedOp = " " . $paddedOp;		if ($whiteAfter) $paddedOp .= " ";		return array("string", "", array($left, $paddedOp, $right));	}	protected function stringConcatenate($left, $right)	{		if ($strLeft = $this->coerceString($left))		{			if ($right[0] == "string")			{				$right[1] = "";			}			$strLeft[2][] = $right;			return $strLeft;		}		if ($strRight = $this->coerceString($right))		{			array_unshift($strRight[2], $left);			return $strRight;		}	}	// make sure a color's components don't go out of bounds	protected function fixColor($c)	{		foreach (range(1, 3) as $i)		{			if ($c[$i] < 0) $c[$i] = 0;			if ($c[$i] > 255) $c[$i] = 255;		}		return $c;	}	protected function op_number_color($op, $lft, $rgt)	{		if ($op == '+' || $op == '*')		{			return $this->op_color_number($op, $rgt, $lft);		}	}	protected function op_color_number($op, $lft, $rgt)	{		if ($rgt[0] == '%') $rgt[1] /= 100;		return $this->op_color_color($op, $lft,			array_fill(1, count($lft) - 1, $rgt[1]));	}	protected function op_color_color($op, $left, $right)	{		$out = array('color');		$max = count($left) > count($right) ? count($left) : count($right);		foreach (range(1, $max - 1) as $i)		{			$lval = isset($left[$i]) ? $left[$i] : 0;			$rval = isset($right[$i]) ? $right[$i] : 0;			switch ($op)		{			case '+':				$out[] = $lval + $rval;				break;			case '-':				$out[] = $lval - $rval;				break;			case '*':				$out[] = $lval * $rval;				break;			case '%':				$out[] = $lval % $rval;				break;			case '/':				if ($rval == 0) $this->throwError("evaluate error: can't divide by zero");				$out[] = $lval / $rval;				break;			default:				$this->throwError('evaluate error: color op number failed on op '.$op);			}		}		return $this->fixColor($out);	}	// operator on two numbers	protected function op_number_number($op, $left, $right)	{		$unit = empty($left[2]) ? $right[2] : $left[2];		$value = 0;		switch ($op)	{		case '+':			$value = $left[1] + $right[1];			break;		case '*':			$value = $left[1] * $right[1];			break;		case '-':			$value = $left[1] - $right[1];			break;		case '%':			$value = $left[1] % $right[1];			break;		case '/':			if ($right[1] == 0) $this->throwError('parse error: divide by zero');			$value = $left[1] / $right[1];			break;		case '<':			return $this->toBool($left[1] < $right[1]);		case '>':			return $this->toBool($left[1] > $right[1]);		case '>=':			return $this->toBool($left[1] >= $right[1]);		case '=<':			return $this->toBool($left[1] <= $right[1]);		default:			$this->throwError('parse error: unknown number operator: '.$op);		}		return array("number", $value, $unit);	}	/* environment functions */	protected function makeOutputBlock($type, $selectors = null)	{		$b = new stdclass;		$b->lines = array();		$b->children = array();		$b->selectors = $selectors;		$b->type = $type;		$b->parent = $this->scope;		return $b;	}	// the state of execution	protected function pushEnv($block = null)	{		$e = new stdclass;		$e->parent = $this->env;		$e->store = array();		$e->block = $block;		$this->env = $e;		return $e;	}	// pop something off the stack	protected function popEnv()	{		$old = $this->env;		$this->env = $this->env->parent;		return $old;	}	// set something in the current env	protected function set($name, $value)	{		$this->env->store[$name] = $value;	}	// get the highest occurrence entry for a name	protected function get($name, $default=null)	{		$current = $this->env;		$isArguments = $name == $this->vPrefix . 'arguments';		while ($current)		{			if ($isArguments && isset($current->arguments))			{				return array('list', ' ', $current->arguments);			}			if (isset($current->store[$name]))				return $current->store[$name];			else {				$current = isset($current->storeParent) ?					$current->storeParent : $current->parent;			}		}		return $default;	}	// inject array of unparsed strings into environment as variables	protected function injectVariables($args)	{		$this->pushEnv();		$parser = new lessc_parser($this, __METHOD__);		foreach ($args as $name => $strValue)		{			if ($name{0} != '@') $name = '@'.$name;			$parser->count = 0;			$parser->buffer = (string)$strValue;			if (!$parser->propertyValue($value))			{				throw new Exception("failed to parse passed in variable $name: $strValue");			}			$this->set($name, $value);		}	}	/**	 * Initialize any static state, can initialize parser for a file	 * $opts isn't used yet	 */	public function __construct($fname = null)	{		if ($fname !== null)		{			// used for deprecated parse method			$this->_parseFile = $fname;		}	}	public function compile($string, $name = null)	{		$locale = setlocale(LC_NUMERIC, 0);		setlocale(LC_NUMERIC, "C");		$this->parser = $this->makeParser($name);		$root = $this->parser->parse($string);		$this->env = null;		$this->scope = null;		$this->formatter = $this->newFormatter();		if (!empty($this->registeredVars))		{			$this->injectVariables($this->registeredVars);		}		$this->sourceParser = $this->parser; // used for error messages		$this->compileBlock($root);		ob_start();		$this->formatter->block($this->scope);		$out = ob_get_clean();		setlocale(LC_NUMERIC, $locale);		return $out;	}	public function compileFile($fname, $outFname = null)	{		if (!is_readable($fname))		{			throw new Exception('load error: failed to find '.$fname);		}		$pi = pathinfo($fname);		$oldImport = $this->importDir;		$this->importDir = (array)$this->importDir;		$this->importDir[] = $pi['dirname'].'/';		$this->allParsedFiles = array();		$this->addParsedFile($fname);		$out = $this->compile(file_get_contents($fname), $fname);		$this->importDir = $oldImport;		if ($outFname !== null)		{			return file_put_contents($outFname, $out);		}		return $out;	}	// compile only if changed input has changed or output doesn't exist	public function checkedCompile($in, $out)	{		if (!is_file($out) || filemtime($in) > filemtime($out))		{			$this->compileFile($in, $out);			return true;		}		return false;	}	/**	 * Execute lessphp on a .less file or a lessphp cache structure	 *	 * The lessphp cache structure contains information about a specific	 * less file having been parsed. It can be used as a hint for future	 * calls to determine whether or not a rebuild is required.	 *	 * The cache structure contains two important keys that may be used	 * externally:	 *	 * compiled: The final compiled CSS	 * updated: The time (in seconds) the CSS was last compiled	 *	 * The cache structure is a plain-ol' PHP associative array and can	 * be serialized and unserialized without a hitch.	 *	 * @param mixed $in Input	 * @param bool $force Force rebuild?	 * @return array lessphp cache structure	 */	public function cachedCompile($in, $force = false)	{		// assume no root		$root = null;		if (is_string($in))		{			$root = $in;		} elseif (is_array($in) and isset($in['root']))		{			if ($force or ! isset($in['files']))			{				// If we are forcing a recompile or if for some reason the				// structure does not contain any file information we should				// specify the root to trigger a rebuild.				$root = $in['root'];			} elseif (isset($in['files']) and is_array($in['files']))			{				foreach ($in['files'] as $fname => $ftime )				{					if (!file_exists($fname) or filemtime($fname) > $ftime)					{						// One of the files we knew about previously has changed						// so we should look at our incoming root again.						$root = $in['root'];						break;					}				}			}		}		else		{			// TODO: Throw an exception? We got neither a string nor something			// that looks like a compatible lessphp cache structure.			return null;		}		if ($root !== null)		{			// If we have a root value which means we should rebuild.			$out = array();			$out['root'] = $root;			$out['compiled'] = $this->compileFile($root);			$out['files'] = $this->allParsedFiles();			$out['updated'] = time();			return $out;		}		else		{			// No changes, pass back the structure			// we were given initially.			return $in;		}	}	// parse and compile buffer	// This is deprecated	public function parse($str = null, $initialVariables = null)	{		if (is_array($str))		{			$initialVariables = $str;			$str = null;		}		$oldVars = $this->registeredVars;		if ($initialVariables !== null)		{			$this->setVariables($initialVariables);		}		if ($str == null)		{			if (empty($this->_parseFile))			{				throw new exception("nothing to parse");			}			$out = $this->compileFile($this->_parseFile);		}		else		{			$out = $this->compile($str);		}		$this->registeredVars = $oldVars;		return $out;	}	protected function makeParser($name)	{		$parser = new lessc_parser($this, $name);		$parser->writeComments = $this->preserveComments;		return $parser;	}	public function setFormatter($name)	{		$this->formatterName = $name;	}	protected function newFormatter()	{		$className = "lessc_formatter_lessjs";		if (!empty($this->formatterName))		{			if (!is_string($this->formatterName))				return $this->formatterName;			$className = "lessc_formatter_$this->formatterName";		}		return new $className;	}	public function setPreserveComments($preserve)	{		$this->preserveComments = $preserve;	}	public function registerFunction($name, $func)	{		$this->libFunctions[$name] = $func;	}	public function unregisterFunction($name)	{		unset($this->libFunctions[$name]);	}	public function setVariables($variables)	{		$this->registeredVars = array_merge($this->registeredVars, $variables);	}	public function unsetVariable($name)	{		unset($this->registeredVars[$name]);	}	public function setImportDir($dirs)	{		$this->importDir = (array)$dirs;	}	public function addImportDir($dir)	{		$this->importDir = (array)$this->importDir;		$this->importDir[] = $dir;	}	public function allParsedFiles()	{		return $this->allParsedFiles;	}	protected function addParsedFile($file)	{		$this->allParsedFiles[realpath($file)] = filemtime($file);	}	/**	 * Uses the current value of $this->count to show line and line number	 */	protected function throwError($msg = null)	{		if ($this->sourceLoc >= 0)		{			$this->sourceParser->throwError($msg, $this->sourceLoc);		}		throw new exception($msg);	}	// compile file $in to file $out if $in is newer than $out	// returns true when it compiles, false otherwise	public static function ccompile($in, $out, $less = null)	{		if ($less === null)		{			$less = new self;		}		return $less->checkedCompile($in, $out);	}	public static function cexecute($in, $force = false, $less = null)	{		if ($less === null)		{			$less = new self;		}		return $less->cachedCompile($in, $force);	}	static protected $cssColors = array(		'aliceblue' => '240,248,255',		'antiquewhite' => '250,235,215',		'aqua' => '0,255,255',		'aquamarine' => '127,255,212',		'azure' => '240,255,255',		'beige' => '245,245,220',		'bisque' => '255,228,196',		'black' => '0,0,0',		'blanchedalmond' => '255,235,205',		'blue' => '0,0,255',		'blueviolet' => '138,43,226',		'brown' => '165,42,42',		'burlywood' => '222,184,135',		'cadetblue' => '95,158,160',		'chartreuse' => '127,255,0',		'chocolate' => '210,105,30',		'coral' => '255,127,80',		'cornflowerblue' => '100,149,237',		'cornsilk' => '255,248,220',		'crimson' => '220,20,60',		'cyan' => '0,255,255',		'darkblue' => '0,0,139',		'darkcyan' => '0,139,139',		'darkgoldenrod' => '184,134,11',		'darkgray' => '169,169,169',		'darkgreen' => '0,100,0',		'darkgrey' => '169,169,169',		'darkkhaki' => '189,183,107',		'darkmagenta' => '139,0,139',		'darkolivegreen' => '85,107,47',		'darkorange' => '255,140,0',		'darkorchid' => '153,50,204',		'darkred' => '139,0,0',		'darksalmon' => '233,150,122',		'darkseagreen' => '143,188,143',		'darkslateblue' => '72,61,139',		'darkslategray' => '47,79,79',		'darkslategrey' => '47,79,79',		'darkturquoise' => '0,206,209',		'darkviolet' => '148,0,211',		'deeppink' => '255,20,147',		'deepskyblue' => '0,191,255',		'dimgray' => '105,105,105',		'dimgrey' => '105,105,105',		'dodgerblue' => '30,144,255',		'firebrick' => '178,34,34',		'floralwhite' => '255,250,240',		'forestgreen' => '34,139,34',		'fuchsia' => '255,0,255',		'gainsboro' => '220,220,220',		'ghostwhite' => '248,248,255',		'gold' => '255,215,0',		'goldenrod' => '218,165,32',		'gray' => '128,128,128',		'green' => '0,128,0',		'greenyellow' => '173,255,47',		'grey' => '128,128,128',		'honeydew' => '240,255,240',		'hotpink' => '255,105,180',		'indianred' => '205,92,92',		'indigo' => '75,0,130',		'ivory' => '255,255,240',		'khaki' => '240,230,140',		'lavender' => '230,230,250',		'lavenderblush' => '255,240,245',		'lawngreen' => '124,252,0',		'lemonchiffon' => '255,250,205',		'lightblue' => '173,216,230',		'lightcoral' => '240,128,128',		'lightcyan' => '224,255,255',		'lightgoldenrodyellow' => '250,250,210',		'lightgray' => '211,211,211',		'lightgreen' => '144,238,144',		'lightgrey' => '211,211,211',		'lightpink' => '255,182,193',		'lightsalmon' => '255,160,122',		'lightseagreen' => '32,178,170',		'lightskyblue' => '135,206,250',		'lightslategray' => '119,136,153',		'lightslategrey' => '119,136,153',		'lightsteelblue' => '176,196,222',		'lightyellow' => '255,255,224',		'lime' => '0,255,0',		'limegreen' => '50,205,50',		'linen' => '250,240,230',		'magenta' => '255,0,255',		'maroon' => '128,0,0',		'mediumaquamarine' => '102,205,170',		'mediumblue' => '0,0,205',		'mediumorchid' => '186,85,211',		'mediumpurple' => '147,112,219',		'mediumseagreen' => '60,179,113',		'mediumslateblue' => '123,104,238',		'mediumspringgreen' => '0,250,154',		'mediumturquoise' => '72,209,204',		'mediumvioletred' => '199,21,133',		'midnightblue' => '25,25,112',		'mintcream' => '245,255,250',		'mistyrose' => '255,228,225',		'moccasin' => '255,228,181',		'navajowhite' => '255,222,173',		'navy' => '0,0,128',		'oldlace' => '253,245,230',		'olive' => '128,128,0',		'olivedrab' => '107,142,35',		'orange' => '255,165,0',		'orangered' => '255,69,0',		'orchid' => '218,112,214',		'palegoldenrod' => '238,232,170',		'palegreen' => '152,251,152',		'paleturquoise' => '175,238,238',		'palevioletred' => '219,112,147',		'papayawhip' => '255,239,213',		'peachpuff' => '255,218,185',		'peru' => '205,133,63',		'pink' => '255,192,203',		'plum' => '221,160,221',		'powderblue' => '176,224,230',		'purple' => '128,0,128',		'red' => '255,0,0',		'rosybrown' => '188,143,143',		'royalblue' => '65,105,225',		'saddlebrown' => '139,69,19',		'salmon' => '250,128,114',		'sandybrown' => '244,164,96',		'seagreen' => '46,139,87',		'seashell' => '255,245,238',		'sienna' => '160,82,45',		'silver' => '192,192,192',		'skyblue' => '135,206,235',		'slateblue' => '106,90,205',		'slategray' => '112,128,144',		'slategrey' => '112,128,144',		'snow' => '255,250,250',		'springgreen' => '0,255,127',		'steelblue' => '70,130,180',		'tan' => '210,180,140',		'teal' => '0,128,128',		'thistle' => '216,191,216',		'tomato' => '255,99,71',		'turquoise' => '64,224,208',		'violet' => '238,130,238',		'wheat' => '245,222,179',		'white' => '255,255,255',		'whitesmoke' => '245,245,245',		'yellow' => '255,255,0',		'yellowgreen' => '154,205,50'	);}// responsible for taking a string of LESS code and converting it into a// syntax treeclass lessc_parser {	static protected $nextBlockId = 0; // used to uniquely identify blocks	static protected $precedence = array(		'=<' => 0,		'>=' => 0,		'=' => 0,		'<' => 0,		'>' => 0,		'+' => 1,		'-' => 1,		'*' => 2,		'/' => 2,		'%' => 2,	);	static protected $whitePattern;	static protected $commentMulti;	static protected $commentSingle = "//";	static protected $commentMultiLeft = "/*";	static protected $commentMultiRight = "*/";	// regex string to match any of the operators	static protected $operatorString;	// these properties will supress division unless it's inside parenthases	static protected $supressDivisionProps =		array('/border-radius$/i', '/^font$/i');	protected $blockDirectives = array("font-face", "keyframes", "page", "-moz-document");	protected $lineDirectives = array("charset");	/**	 * if we are in parens we can be more liberal with whitespace around	 * operators because it must evaluate to a single value and thus is less	 * ambiguous.	 *	 * Consider:	 *     property1: 10 -5; // is two numbers, 10 and -5	 *     property2: (10 -5); // should evaluate to 5	 */	protected $inParens = false;	// caches preg escaped literals	static protected $literalCache = array();	public function __construct($lessc, $sourceName = null)	{		$this->eatWhiteDefault = true;		// reference to less needed for vPrefix, mPrefix, and parentSelector		$this->lessc = $lessc;		$this->sourceName = $sourceName; // name used for error messages		$this->writeComments = false;		if (!self::$operatorString)		{			self::$operatorString =				'('.implode('|', array_map(array('lessc', 'preg_quote'),					array_keys(self::$precedence))).')';			$commentSingle = lessc::preg_quote(self::$commentSingle);			$commentMultiLeft = lessc::preg_quote(self::$commentMultiLeft);			$commentMultiRight = lessc::preg_quote(self::$commentMultiRight);			self::$commentMulti = $commentMultiLeft.'.*?'.$commentMultiRight;			self::$whitePattern = '/'.$commentSingle.'[^\n]*\s*|('.self::$commentMulti.')\s*|\s+/Ais';		}	}	public function parse($buffer)	{		$this->count = 0;		$this->line = 1;		$this->env = null; // block stack		$this->buffer = $this->writeComments ? $buffer : $this->removeComments($buffer);		$this->pushSpecialBlock("root");		$this->eatWhiteDefault = true;		$this->seenComments = array();		// trim whitespace on head		// if (preg_match('/^\s+/', $this->buffer, $m))		//{		// 	$this->line += substr_count($m[0], "\n");		// 	$this->buffer = ltrim($this->buffer);		// }		$this->whitespace();		// parse the entire file		$lastCount = $this->count;		while (false !== $this->parseChunk());		if ($this->count != strlen($this->buffer))			$this->throwError();		// TODO report where the block was opened		if (!is_null($this->env->parent))			throw new exception('parse error: unclosed block');		return $this->env;	}	/**	 * Parse a single chunk off the head of the buffer and append it to the	 * current parse environment.	 * Returns false when the buffer is empty, or when there is an error.	 *	 * This function is called repeatedly until the entire document is	 * parsed.	 *	 * This parser is most similar to a recursive descent parser. Single	 * functions represent discrete grammatical rules for the language, and	 * they are able to capture the text that represents those rules.	 *	 * Consider the function lessc::keyword(). (all parse functions are	 * structured the same)	 *	 * The function takes a single reference argument. When calling the	 * function it will attempt to match a keyword on the head of the buffer.	 * If it is successful, it will place the keyword in the referenced	 * argument, advance the position in the buffer, and return true. If it	 * fails then it won't advance the buffer and it will return false.	 *	 * All of these parse functions are powered by lessc::match(), which behaves	 * the same way, but takes a literal regular expression. Sometimes it is	 * more convenient to use match instead of creating a new function.	 *	 * Because of the format of the functions, to parse an entire string of	 * grammatical rules, you can chain them together using &&.	 *	 * But, if some of the rules in the chain succeed before one fails, then	 * the buffer position will be left at an invalid state. In order to	 * avoid this, lessc::seek() is used to remember and set buffer positions.	 *	 * Before parsing a chain, use $s = $this->seek() to remember the current	 * position into $s. Then if a chain fails, use $this->seek($s) to	 * go back where we started.	 */	protected function parseChunk()	{		if (empty($this->buffer)) return false;		$s = $this->seek();		// setting a property		if ($this->keyword($key) && $this->assign() &&			$this->propertyValue($value, $key) && $this->end())		{			$this->append(array('assign', $key, $value), $s);			return true;		}		else		{			$this->seek($s);		}		// look for special css blocks		if ($this->literal('@', false))		{			$this->count--;			// media			if ($this->literal('@media'))			{				if (($this->mediaQueryList($mediaQueries) || true)					&& $this->literal('{'))				{					$media = $this->pushSpecialBlock("media");					$media->queries = is_null($mediaQueries) ? array() : $mediaQueries;					return true;				} else {					$this->seek($s);					return false;				}			}			if ($this->literal("@", false) && $this->keyword($dirName))			{				if ($this->isDirective($dirName, $this->blockDirectives))				{					if (($this->openString("{", $dirValue, null, array(";")) || true) &&						$this->literal("{"))					{						$dir = $this->pushSpecialBlock("directive");						$dir->name = $dirName;						if (isset($dirValue)) $dir->value = $dirValue;						return true;					}				} elseif ($this->isDirective($dirName, $this->lineDirectives))				{					if ($this->propertyValue($dirValue) && $this->end())					{						$this->append(array("directive", $dirName, $dirValue));						return true;					}				}			}			$this->seek($s);		}		// setting a variable		if ($this->variable($var) && $this->assign() &&			$this->propertyValue($value) && $this->end())		{			$this->append(array('assign', $var, $value), $s);			return true;		}		else		{			$this->seek($s);		}		if ($this->import($importValue))		{			$this->append($importValue, $s);			return true;		}		// opening parametric mixin		if ($this->tag($tag, true) && $this->argumentDef($args, $isVararg) &&			($this->guards($guards) || true) &&			$this->literal('{'))		{			$block = $this->pushBlock($this->fixTags(array($tag)));			$block->args = $args;			$block->isVararg = $isVararg;			if (!empty($guards)) $block->guards = $guards;			return true;		}		else		{			$this->seek($s);		}		// opening a simple block		if ($this->tags($tags) && $this->literal('{'))		{			$tags = $this->fixTags($tags);			$this->pushBlock($tags);			return true;		}		else		{			$this->seek($s);		}		// closing a block		if ($this->literal('}', false))		{			try {				$block = $this->pop();			} catch (exception $e)			{				$this->seek($s);				$this->throwError($e->getMessage());			}			$hidden = false;			if (is_null($block->type))			{				$hidden = true;				if (!isset($block->args))				{					foreach ($block->tags as $tag)					{						if (!is_string($tag) || $tag{0} != $this->lessc->mPrefix)						{							$hidden = false;							break;						}					}				}				foreach ($block->tags as $tag)				{					if (is_string($tag))					{						$this->env->children[$tag][] = $block;					}				}			}			if (!$hidden)			{				$this->append(array('block', $block), $s);			}			// this is done here so comments aren't bundled into he block that			// was just closed			$this->whitespace();			return true;		}		// mixin		if ($this->mixinTags($tags) &&			($this->argumentValues($argv) || true) &&			($this->keyword($suffix) || true) && $this->end())		{			$tags = $this->fixTags($tags);			$this->append(array('mixin', $tags, $argv, $suffix), $s);			return true;		}		else		{			$this->seek($s);		}		// spare ;		if ($this->literal(';')) return true;		return false; // got nothing, throw error	}	protected function isDirective($dirname, $directives)	{		// TODO: cache pattern in parser		$pattern = implode("|",			array_map(array("lessc", "preg_quote"), $directives));		$pattern = '/^(-[a-z-]+-)?(' . $pattern . ')$/i';		return preg_match($pattern, $dirname);	}	protected function fixTags($tags)	{		// move @ tags out of variable namespace		foreach ($tags as &$tag)		{			if ($tag{0} == $this->lessc->vPrefix)				$tag[0] = $this->lessc->mPrefix;		}		return $tags;	}	// a list of expressions	protected function expressionList(&$exps)	{		$values = array();		while ($this->expression($exp))		{			$values[] = $exp;		}		if (count($values) == 0) return false;		$exps = lessc::compressList($values, ' ');		return true;	}	/**	 * Attempt to consume an expression.	 * @link http://en.wikipedia.org/wiki/Operator-precedence_parser#Pseudo-code	 */	protected function expression(&$out)	{		if ($this->value($lhs))		{			$out = $this->expHelper($lhs, 0);			// look for / shorthand			if (!empty($this->env->supressedDivision))			{				unset($this->env->supressedDivision);				$s = $this->seek();				if ($this->literal("/") && $this->value($rhs))				{					$out = array("list", "",						array($out, array("keyword", "/"), $rhs));				} else {					$this->seek($s);				}			}			return true;		}		return false;	}	/**	 * recursively parse infix equation with $lhs at precedence $minP	 */	protected function expHelper($lhs, $minP)	{		$this->inExp = true;		$ss = $this->seek();		while (true)		{			$whiteBefore = isset($this->buffer[$this->count - 1]) &&				ctype_space($this->buffer[$this->count - 1]);			// If there is whitespace before the operator, then we require			// whitespace after the operator for it to be an expression			$needWhite = $whiteBefore && !$this->inParens;			if ($this->match(self::$operatorString.($needWhite ? '\s' : ''), $m) && self::$precedence[$m[1]] >= $minP)			{				if (!$this->inParens && isset($this->env->currentProperty) && $m[1] == "/" && empty($this->env->supressedDivision))				{					foreach (self::$supressDivisionProps as $pattern)					{						if (preg_match($pattern, $this->env->currentProperty))						{							$this->env->supressedDivision = true;							break 2;						}					}				}				$whiteAfter = isset($this->buffer[$this->count - 1]) &&					ctype_space($this->buffer[$this->count - 1]);				if (!$this->value($rhs)) break;				// peek for next operator to see what to do with rhs				if ($this->peek(self::$operatorString, $next) && self::$precedence[$next[1]] > self::$precedence[$m[1]])				{					$rhs = $this->expHelper($rhs, self::$precedence[$next[1]]);				}				$lhs = array('expression', $m[1], $lhs, $rhs, $whiteBefore, $whiteAfter);				$ss = $this->seek();				continue;			}			break;		}		$this->seek($ss);		return $lhs;	}	// consume a list of values for a property	public function propertyValue(&$value, $keyName = null)	{		$values = array();		if ($keyName !== null) $this->env->currentProperty = $keyName;		$s = null;		while ($this->expressionList($v))		{			$values[] = $v;			$s = $this->seek();			if (!$this->literal(',')) break;		}		if ($s) $this->seek($s);		if ($keyName !== null) unset($this->env->currentProperty);		if (count($values) == 0) return false;		$value = lessc::compressList($values, ', ');		return true;	}	protected function parenValue(&$out)	{		$s = $this->seek();		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != "(")		{			return false;		}		$inParens = $this->inParens;		if ($this->literal("(") &&			($this->inParens = true) && $this->expression($exp) &&			$this->literal(")"))		{			$out = $exp;			$this->inParens = $inParens;			return true;		}		else		{			$this->inParens = $inParens;			$this->seek($s);		}		return false;	}	// a single value	protected function value(&$value)	{		$s = $this->seek();		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] == "-")		{			// negation			if ($this->literal("-", false) &&				(($this->variable($inner) && $inner = array("variable", $inner)) ||				$this->unit($inner) ||				$this->parenValue($inner)))			{				$value = array("unary", "-", $inner);				return true;			} else {				$this->seek($s);			}		}		if ($this->parenValue($value)) return true;		if ($this->unit($value)) return true;		if ($this->color($value)) return true;		if ($this->func($value)) return true;		if ($this->string($value)) return true;		if ($this->keyword($word))		{			$value = array('keyword', $word);			return true;		}		// try a variable		if ($this->variable($var))		{			$value = array('variable', $var);			return true;		}		// unquote string (should this work on any type?		if ($this->literal("~") && $this->string($str))		{			$value = array("escape", $str);			return true;		}		else		{			$this->seek($s);		}		// css hack: \0		if ($this->literal('\\') && $this->match('([0-9]+)', $m))		{			$value = array('keyword', '\\'.$m[1]);			return true;		}		else		{			$this->seek($s);		}		return false;	}	// an import statement	protected function import(&$out)	{		$s = $this->seek();		if (!$this->literal('@import')) return false;		// @import "something.css" media;		// @import url("something.css") media;		// @import url(something.css) media;		if ($this->propertyValue($value))		{			$out = array("import", $value);			return true;		}	}	protected function mediaQueryList(&$out)	{		if ($this->genericList($list, "mediaQuery", ",", false))		{			$out = $list[2];			return true;		}		return false;	}	protected function mediaQuery(&$out)	{		$s = $this->seek();		$expressions = null;		$parts = array();		if (($this->literal("only") && ($only = true) || $this->literal("not") && ($not = true) || true) && $this->keyword($mediaType))		{			$prop = array("mediaType");			if (isset($only)) $prop[] = "only";			if (isset($not)) $prop[] = "not";			$prop[] = $mediaType;			$parts[] = $prop;		}		else		{			$this->seek($s);		}		if (!empty($mediaType) && !$this->literal("and"))		{			// ~		}		else		{			$this->genericList($expressions, "mediaExpression", "and", false);			if (is_array($expressions)) $parts = array_merge($parts, $expressions[2]);		}		if (count($parts) == 0)		{			$this->seek($s);			return false;		}		$out = $parts;		return true;	}	protected function mediaExpression(&$out)	{		$s = $this->seek();		$value = null;		if ($this->literal("(") &&			$this->keyword($feature) &&			($this->literal(":") && $this->expression($value) || true) &&			$this->literal(")"))		{			$out = array("mediaExp", $feature);			if ($value) $out[] = $value;			return true;		}		$this->seek($s);		return false;	}	// an unbounded string stopped by $end	protected function openString($end, &$out, $nestingOpen=null, $rejectStrs = null)	{		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = false;		$stop = array("'", '"', "@{", $end);		$stop = array_map(array("lessc", "preg_quote"), $stop);		// $stop[] = self::$commentMulti;		if (!is_null($rejectStrs))		{			$stop = array_merge($stop, $rejectStrs);		}		$patt = '(.*?)('.implode("|", $stop).')';		$nestingLevel = 0;		$content = array();		while ($this->match($patt, $m, false))		{			if (!empty($m[1]))			{				$content[] = $m[1];				if ($nestingOpen)				{					$nestingLevel += substr_count($m[1], $nestingOpen);				}			}			$tok = $m[2];			$this->count-= strlen($tok);			if ($tok == $end)			{				if ($nestingLevel == 0)				{					break;				} else {					$nestingLevel--;				}			}			if (($tok == "'" || $tok == '"') && $this->string($str))			{				$content[] = $str;				continue;			}			if ($tok == "@{" && $this->interpolation($inter))			{				$content[] = $inter;				continue;			}			if (in_array($tok, $rejectStrs))			{				$count = null;				break;			}			$content[] = $tok;			$this->count+= strlen($tok);		}		$this->eatWhiteDefault = $oldWhite;		if (count($content) == 0) return false;		// trim the end		if (is_string(end($content)))		{			$content[count($content) - 1] = rtrim(end($content));		}		$out = array("string", "", $content);		return true;	}	protected function string(&$out)	{		$s = $this->seek();		if ($this->literal('"', false))		{			$delim = '"';		} elseif ($this->literal("'", false))		{			$delim = "'";		}		else		{			return false;		}		$content = array();		// look for either ending delim , escape, or string interpolation		$patt = '([^\n]*?)(@\{|\\\\|' .			lessc::preg_quote($delim).')';		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = false;		while ($this->match($patt, $m, false))		{			$content[] = $m[1];			if ($m[2] == "@{")			{				$this->count -= strlen($m[2]);				if ($this->interpolation($inter, false))				{					$content[] = $inter;				} else {					$this->count += strlen($m[2]);					$content[] = "@{"; // ignore it				}			} elseif ($m[2] == '\\')			{				$content[] = $m[2];				if ($this->literal($delim, false))				{					$content[] = $delim;				}			} else {				$this->count -= strlen($delim);				break; // delim			}		}		$this->eatWhiteDefault = $oldWhite;		if ($this->literal($delim))		{			$out = array("string", $delim, $content);			return true;		}		$this->seek($s);		return false;	}	protected function interpolation(&$out)	{		$oldWhite = $this->eatWhiteDefault;		$this->eatWhiteDefault = true;		$s = $this->seek();		if ($this->literal("@{") &&			$this->keyword($var) &&			$this->literal("}", false))		{			$out = array("variable", $this->lessc->vPrefix . $var);			$this->eatWhiteDefault = $oldWhite;			if ($this->eatWhiteDefault) $this->whitespace();			return true;		}		$this->eatWhiteDefault = $oldWhite;		$this->seek($s);		return false;	}	protected function unit(&$unit)	{		// speed shortcut		if (isset($this->buffer[$this->count]))		{			$char = $this->buffer[$this->count];			if (!ctype_digit($char) && $char != ".") return false;		}		if ($this->match('([0-9]+(?:\.[0-9]*)?|\.[0-9]+)([%a-zA-Z]+)?', $m))		{			$unit = array("number", $m[1], empty($m[2]) ? "" : $m[2]);			return true;		}		return false;	}	// a # color	protected function color(&$out)	{		if ($this->match('(#(?:[0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{3}))', $m))		{			if (strlen($m[1]) > 7)			{				$out = array("string", "", array($m[1]));			} else {				$out = array("raw_color", $m[1]);			}			return true;		}		return false;	}	// consume a list of property values delimited by ; and wrapped in ()	protected function argumentValues(&$args, $delim = ',')	{		$s = $this->seek();		if (!$this->literal('(')) return false;		$values = array();		while (true)		{			if ($this->expressionList($value)) $values[] = $value;			if (!$this->literal($delim)) break;			else {				if ($value == null) $values[] = null;				$value = null;			}		}		if (!$this->literal(')'))		{			$this->seek($s);			return false;		}		$args = $values;		return true;	}	// consume an argument definition list surrounded by ()	// each argument is a variable name with optional value	// or at the end a ... or a variable named followed by ...	protected function argumentDef(&$args, &$isVararg, $delim = ',')	{		$s = $this->seek();		if (!$this->literal('(')) return false;		$values = array();		$isVararg = false;		while (true)		{			if ($this->literal("..."))			{				$isVararg = true;				break;			}			if ($this->variable($vname))			{				$arg = array("arg", $vname);				$ss = $this->seek();				if ($this->assign() && $this->expressionList($value))				{					$arg[] = $value;				} else {					$this->seek($ss);					if ($this->literal("..."))					{						$arg[0] = "rest";						$isVararg = true;					}				}				$values[] = $arg;				if ($isVararg) break;				continue;			}			if ($this->value($literal))			{				$values[] = array("lit", $literal);			}			if (!$this->literal($delim)) break;		}		if (!$this->literal(')'))		{			$this->seek($s);			return false;		}		$args = $values;		return true;	}	// consume a list of tags	// this accepts a hanging delimiter	protected function tags(&$tags, $simple = false, $delim = ',')	{		$tags = array();		while ($this->tag($tt, $simple))		{			$tags[] = $tt;			if (!$this->literal($delim)) break;		}		if (count($tags) == 0) return false;		return true;	}	// list of tags of specifying mixin path	// optionally separated by > (lazy, accepts extra >)	protected function mixinTags(&$tags)	{		$s = $this->seek();		$tags = array();		while ($this->tag($tt, true))		{			$tags[] = $tt;			$this->literal(">");		}		if (count($tags) == 0) return false;		return true;	}	// a bracketed value (contained within in a tag definition)	protected function tagBracket(&$value)	{		// speed shortcut		if (isset($this->buffer[$this->count]) && $this->buffer[$this->count] != "[")		{			return false;		}		$s = $this->seek();		if ($this->literal('[') && $this->to(']', $c, true) && $this->literal(']', false))		{			$value = '['.$c.']';			// whitespace?			if ($this->whitespace()) $value .= " ";			// escape parent selector, (yuck)			$value = str_replace($this->lessc->parentSelector, "$&$", $value);			return true;		}		$this->seek($s);		return false;	}	protected function tagExpression(&$value)	{		$s = $this->seek();		if ($this->literal("(") && $this->expression($exp) && $this->literal(")"))		{			$value = array('exp', $exp);			return true;		}		$this->seek($s);		return false;	}	// a single tag	protected function tag(&$tag, $simple = false)	{		if ($simple)			$chars = '^,:;{}\][>\(\) "\'';		else			$chars = '^,;{}["\'';		if (!$simple && $this->tagExpression($tag))		{			return true;		}		$tag = '';		while ($this->tagBracket($first)) $tag .= $first;		while (true)		{			if ($this->match('(['.$chars.'0-9]['.$chars.']*)', $m))			{				$tag .= $m[1];				if ($simple) break;				while ($this->tagBracket($brack)) $tag .= $brack;				continue;			} elseif ($this->unit($unit)) { // for keyframes				$tag .= $unit[1] . $unit[2];				continue;			}			break;		}		$tag = trim($tag);		if ($tag == '') return false;		return true;	}	// a css function	protected function func(&$func)	{		$s = $this->seek();		if ($this->match('(%|[\w\-_][\w\-_:\.]+|[\w_])', $m) && $this->literal('('))		{			$fname = $m[1];			$sPreArgs = $this->seek();			$args = array();			while (true)			{				$ss = $this->seek();				// this ugly nonsense is for ie filter properties				if ($this->keyword($name) && $this->literal('=') && $this->expressionList($value))				{					$args[] = array("string", "", array($name, "=", $value));				} else {					$this->seek($ss);					if ($this->expressionList($value))					{						$args[] = $value;					}				}				if (!$this->literal(',')) break;			}			$args = array('list', ',', $args);			if ($this->literal(')'))			{				$func = array('function', $fname, $args);				return true;			} elseif ($fname == 'url')			{				// couldn't parse and in url? treat as string				$this->seek($sPreArgs);				if ($this->openString(")", $string) && $this->literal(")"))				{					$func = array('function', $fname, $string);					return true;				}			}		}		$this->seek($s);		return false;	}	// consume a less variable	protected function variable(&$name)	{		$s = $this->seek();		if ($this->literal($this->lessc->vPrefix, false) &&			($this->variable($sub) || $this->keyword($name)))		{			if (!empty($sub))			{				$name = array('variable', $sub);			} else {				$name = $this->lessc->vPrefix.$name;			}			return true;		}		$name = null;		$this->seek($s);		return false;	}	/**	 * Consume an assignment operator	 * Can optionally take a name that will be set to the current property name	 */	protected function assign($name = null)	{		if ($name) $this->currentProperty = $name;		return $this->literal(':') || $this->literal('=');	}	// consume a keyword	protected function keyword(&$word)	{		if ($this->match('([\w_\-\*!"][\w\-_"]*)', $m))		{			$word = $m[1];			return true;		}		return false;	}	// consume an end of statement delimiter	protected function end()	{		if ($this->literal(';'))		{			return true;		} elseif ($this->count == strlen($this->buffer) || $this->buffer{$this->count} == '}')		{			// if there is end of file or a closing block next then we don't need a ;			return true;		}		return false;	}	protected function guards(&$guards)	{		$s = $this->seek();		if (!$this->literal("when"))		{			$this->seek($s);			return false;		}		$guards = array();		while ($this->guardGroup($g))		{			$guards[] = $g;			if (!$this->literal(",")) break;		}		if (count($guards) == 0)		{			$guards = null;			$this->seek($s);			return false;		}		return true;	}	// a bunch of guards that are and'd together	// TODO rename to guardGroup	protected function guardGroup(&$guardGroup)	{		$s = $this->seek();		$guardGroup = array();		while ($this->guard($guard))		{			$guardGroup[] = $guard;			if (!$this->literal("and")) break;		}		if (count($guardGroup) == 0)		{			$guardGroup = null;			$this->seek($s);			return false;		}		return true;	}	protected function guard(&$guard)	{		$s = $this->seek();		$negate = $this->literal("not");		if ($this->literal("(") && $this->expression($exp) && $this->literal(")"))		{			$guard = $exp;			if ($negate) $guard = array("negate", $guard);			return true;		}		$this->seek($s);		return false;	}	/* raw parsing functions */	protected function literal($what, $eatWhitespace = null)	{		if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;		// shortcut on single letter		if (!isset($what[1]) && isset($this->buffer[$this->count]))		{			if ($this->buffer[$this->count] == $what)			{				if (!$eatWhitespace)				{					$this->count++;					return true;				}				// goes below...			} else {				return false;			}		}		if (!isset(self::$literalCache[$what]))		{			self::$literalCache[$what] = lessc::preg_quote($what);		}		return $this->match(self::$literalCache[$what], $m, $eatWhitespace);	}	protected function genericList(&$out, $parseItem, $delim="", $flatten=true)	{		$s = $this->seek();		$items = array();		while ($this->$parseItem($value))		{			$items[] = $value;			if ($delim)			{				if (!$this->literal($delim)) break;			}		}		if (count($items) == 0)		{			$this->seek($s);			return false;		}		if ($flatten && count($items) == 1)		{			$out = $items[0];		}		else		{			$out = array("list", $delim, $items);		}		return true;	}	// advance counter to next occurrence of $what	// $until - don't include $what in advance	// $allowNewline, if string, will be used as valid char set	protected function to($what, &$out, $until = false, $allowNewline = false)	{		if (is_string($allowNewline))		{			$validChars = $allowNewline;		}		else		{			$validChars = $allowNewline ? "." : "[^\n]";		}		if (!$this->match('('.$validChars.'*?)'.lessc::preg_quote($what), $m, !$until)) return false;		if ($until) $this->count -= strlen($what); // give back $what		$out = $m[1];		return true;	}	// try to match something on head of buffer	protected function match($regex, &$out, $eatWhitespace = null)	{		if ($eatWhitespace === null) $eatWhitespace = $this->eatWhiteDefault;		$r = '/'.$regex.($eatWhitespace && !$this->writeComments ? '\s*' : '').'/Ais';		if (preg_match($r, $this->buffer, $out, null, $this->count))		{			$this->count += strlen($out[0]);			if ($eatWhitespace && $this->writeComments) $this->whitespace();			return true;		}		return false;	}	// match some whitespace	protected function whitespace()	{		if ($this->writeComments)		{			$gotWhite = false;			while (preg_match(self::$whitePattern, $this->buffer, $m, null, $this->count))			{				if (isset($m[1]) && empty($this->commentsSeen[$this->count]))				{					$this->append(array("comment", $m[1]));					$this->commentsSeen[$this->count] = true;				}				$this->count += strlen($m[0]);				$gotWhite = true;			}			return $gotWhite;		}		else		{			$this->match("", $m);			return strlen($m[0]) > 0;		}	}	// match something without consuming it	protected function peek($regex, &$out = null, $from=null)	{		if (is_null($from)) $from = $this->count;		$r = '/'.$regex.'/Ais';		$result = preg_match($r, $this->buffer, $out, null, $from);		return $result;	}	// seek to a spot in the buffer or return where we are on no argument	protected function seek($where = null)	{		if ($where === null) return $this->count;		else $this->count = $where;		return true;	}	/* misc functions */	public function throwError($msg = "parse error", $count = null)	{		$count = is_null($count) ? $this->count : $count;		$line = $this->line +			substr_count(substr($this->buffer, 0, $count), "\n");		if (!empty($this->sourceName))		{			$loc = "$this->sourceName on line $line";		}		else		{			$loc = "line: $line";		}		// TODO this depends on $this->count		if ($this->peek("(.*?)(\n|$)", $m, $count))		{			throw new exception("$msg: failed at `$m[1]` $loc");		}		else		{			throw new exception("$msg: $loc");		}	}	protected function pushBlock($selectors=null, $type=null)	{		$b = new stdclass;		$b->parent = $this->env;		$b->type = $type;		$b->id = self::$nextBlockId++;		$b->isVararg = false; // TODO: kill me from here		$b->tags = $selectors;		$b->props = array();		$b->children = array();		$this->env = $b;		return $b;	}	// push a block that doesn't multiply tags	protected function pushSpecialBlock($type)	{		return $this->pushBlock(null, $type);	}	// append a property to the current block	protected function append($prop, $pos = null)	{		if ($pos !== null) $prop[-1] = $pos;		$this->env->props[] = $prop;	}	// pop something off the stack	protected function pop()	{		$old = $this->env;		$this->env = $this->env->parent;		return $old;	}	// remove comments from $text	// todo: make it work for all functions, not just url	protected function removeComments($text)	{		$look = array(			'url(', '//', '/*', '"', "'"		);		$out = '';		$min = null;		while (true)		{			// find the next item			foreach ($look as $token)			{				$pos = strpos($text, $token);				if ($pos !== false)				{					if (!isset($min) || $pos < $min[1]) $min = array($token, $pos);				}			}			if (is_null($min)) break;			$count = $min[1];			$skip = 0;			$newlines = 0;			switch ($min[0])		{			case 'url(':				if (preg_match('/url\(.*?\)/', $text, $m, 0, $count))					$count += strlen($m[0]) - strlen($min[0]);				break;			case '"':			case "'":				if (preg_match('/'.$min[0].'.*?'.$min[0].'/', $text, $m, 0, $count))					$count += strlen($m[0]) - 1;				break;			case '//':				$skip = strpos($text, "\n", $count);				if ($skip === false) $skip = strlen($text) - $count;				else $skip -= $count;				break;			case '/*':				if (preg_match('/\/\*.*?\*\//s', $text, $m, 0, $count))				{					$skip = strlen($m[0]);					$newlines = substr_count($m[0], "\n");				}				break;			}			if ($skip == 0) $count += strlen($min[0]);			$out .= substr($text, 0, $count).str_repeat("\n", $newlines);			$text = substr($text, $count + $skip);			$min = null;		}		return $out.$text;	}}class lessc_formatter_classic {	public $indentChar = "  ";	public $break = "\n";	public $open = " {";	public $close = "}";	public $selectorSeparator = ", ";	public $assignSeparator = ":";	public $openSingle = " { ";	public $closeSingle = " }";	public $disableSingle = false;	public $breakSelectors = false;	public $compressColors = false;	public function __construct()	{		$this->indentLevel = 0;	}	public function indentStr($n = 0)	{		return str_repeat($this->indentChar, max($this->indentLevel + $n, 0));	}	public function property($name, $value)	{		return $name . $this->assignSeparator . $value . ";";	}	protected function isEmpty($block)	{		if (empty($block->lines))		{			foreach ($block->children as $child)			{				if (!$this->isEmpty($child)) return false;			}			return true;		}		return false;	}	public function block($block)	{		if ($this->isEmpty($block)) return;		$inner = $pre = $this->indentStr();		$isSingle = !$this->disableSingle &&			is_null($block->type) && count($block->lines) == 1;		if (!empty($block->selectors))		{			$this->indentLevel++;			if ($this->breakSelectors)			{				$selectorSeparator = $this->selectorSeparator . $this->break . $pre;			} else {				$selectorSeparator = $this->selectorSeparator;			}			echo $pre .				implode($selectorSeparator, $block->selectors);			if ($isSingle)			{				echo $this->openSingle;				$inner = "";			} else {				echo $this->open . $this->break;				$inner = $this->indentStr();			}		}		if (!empty($block->lines))		{			$glue = $this->break.$inner;			echo $inner . implode($glue, $block->lines);			if (!$isSingle && !empty($block->children))			{				echo $this->break;			}		}		foreach ($block->children as $child)		{			$this->block($child);		}		if (!empty($block->selectors))		{			if (!$isSingle && empty($block->children)) echo $this->break;			if ($isSingle)			{				echo $this->closeSingle . $this->break;			} else {				echo $pre . $this->close . $this->break;			}			$this->indentLevel--;		}	}}class lessc_formatter_compressed extends lessc_formatter_classic {	public $disableSingle = true;	public $open = "{";	public $selectorSeparator = ",";	public $assignSeparator = ":";	public $break = "";	public $compressColors = true;	public function indentStr($n = 0)	{		return "";	}}class lessc_formatter_lessjs extends lessc_formatter_classic {	public $disableSingle = true;	public $breakSelectors = true;	public $assignSeparator = ": ";	public $selectorSeparator = ",";}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');// Load the tooltip behavior.JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('formbehavior.chosen', 'select');$canDo = UsersHelper::getActions();?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'group.cancel' || document.formvalidator.isValid(document.id('group-form')))		{			Joomla.submitform(task, document.getElementById('group-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_users&layout=edit&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="group-form" class="form-validate form-horizontal">	<fieldset>		<legend><?php echo JText::_('COM_USERS_USERGROUP_DETAILS');?></legend>		<div class="control-group">			<div class="control-label">				<?php echo $this->form->getLabel('title'); ?>			</div>			<div class="controls">				<?php echo $this->form->getInput('title'); ?>			</div>		</div>		<div class="control-group">			<?php $parent_id = $this->form->getField('parent_id');?>			<?php if (!$parent_id->hidden) : ?>				<div class="control-label">					<?php echo $parent_id->label; ?>				</div>			<?php endif;?>			<div class="controls">				<?php echo $parent_id->input; ?>			</div>		</div>	</fieldset>	<input type="hidden" name="task" value="" />	<?php echo JHtml::_('form.token'); ?></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CONTACT_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CONTACT_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.user'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_contact');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-user-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('contact.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.formvalidation');JHtml::_('behavior.keepalive');JHtml::_('formbehavior.chosen', 'select');$app = JFactory::getApplication();$input = $app->input;$assoc = isset($app->item_associations) ? $app->item_associations : 0;?><script type="text/javascript">	Joomla.submitbutton = function(task)	{		if (task == 'newsfeed.cancel' || document.formvalidator.isValid(document.id('newsfeed-form')))		{			Joomla.submitform(task, document.getElementById('newsfeed-form'));		}	}</script><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&id='.(int) $this->item->id); ?>" method="post" name="adminForm" id="newsfeed-form" class="form-validate form-horizontal">	<div class="row-fluid">		<!-- Begin Newsfeed -->		<div class="span10 form-horizontal">	<fieldset>	<?php echo JHtml::_('bootstrap.startTabSet', 'myTab', array('active' => 'details')); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'details', empty($this->item->id) ? JText::_('COM_NEWSFEEDS_NEW_NEWSFEED', true) : JText::sprintf('COM_NEWSFEEDS_EDIT_NEWSFEED', $this->item->id, true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('name'); ?></div>				<div class="controls"><?php echo $this->form->getInput('name'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('link'); ?></div>				<div class="controls"><?php echo $this->form->getInput('link'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('catid'); ?></div>				<div class="controls"><?php echo $this->form->getInput('catid'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('description'); ?></div>				<div class="controls"><?php echo $this->form->getInput('description'); ?></div>			</div>			<div class="span6">				<h4><?php echo JText::_('COM_NEWSFEEDS_FIELDSET_IMAGES');?></h4>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('images'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('images'); ?>					</div>				</div>				<?php foreach ($this->form->getGroup('images') as $field) : ?>					<div class="control-group">						<?php if (!$field->hidden) : ?>							<div class="control-label">								<?php echo $field->label; ?>							</div>						<?php endif; ?>						<div class="controls">							<?php echo $field->input; ?>						</div>					</div>				<?php endforeach; ?>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'publishing', JText::_('JGLOBAL_FIELDSET_PUBLISHING', true)); ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('id'); ?></div>				<div class="controls"><?php echo $this->form->getInput('id'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created_by_alias'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created_by_alias'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('created'); ?></div>				<div class="controls"><?php echo $this->form->getInput('created'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_up'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_up'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('publish_down'); ?></div>				<div class="controls"><?php echo $this->form->getInput('publish_down'); ?></div>			</div>			<?php if ($this->item->modified_by) : ?>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified_by'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified_by'); ?></div>				</div>				<div class="control-group">					<div class="control-label"><?php echo $this->form->getLabel('modified'); ?></div>					<div class="controls"><?php echo $this->form->getInput('modified'); ?></div>				</div>			<?php endif; ?>			<?php if ($this->item->version) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('version'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('version'); ?>					</div>				</div>			<?php endif; ?>			<?php if ($this->item->hits) : ?>				<div class="control-group">					<div class="control-label">						<?php echo $this->form->getLabel('hits'); ?>					</div>					<div class="controls">						<?php echo $this->form->getInput('hits'); ?>					</div>				</div>			<?php endif; ?>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('ordering'); ?></div>				<div class="controls"><?php echo $this->form->getInput('ordering'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('numarticles'); ?></div>				<div class="controls"><?php echo $this->form->getInput('numarticles'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('cache_time'); ?></div>				<div class="controls"><?php echo $this->form->getInput('cache_time'); ?></div>			</div>			<div class="control-group">				<div class="control-label"><?php echo $this->form->getLabel('rtl'); ?></div>				<div class="controls"><?php echo $this->form->getInput('rtl'); ?></div>			</div>		<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php $fieldSets = $this->form->getFieldsets('params'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $paramstabs = 'params-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $paramstabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('params'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php $fieldSets = $this->form->getFieldsets('metadata'); ?>		<?php foreach ($fieldSets as $name => $fieldSet) : ?>			<?php $metadatatabs = 'metadata-' . $name; ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', $metadatatabs, JText::_($fieldSet->label, true)); ?>				<?php echo $this->loadTemplate('metadata'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endforeach; ?>		<?php if ($assoc) : ?>			<?php echo JHtml::_('bootstrap.addTab', 'myTab', 'associations', JText::_('JGLOBAL_FIELDSET_ASSOCIATIONS', true)); ?>				<?php echo $this->loadTemplate('associations'); ?>			<?php echo JHtml::_('bootstrap.endTab'); ?>		<?php endif; ?>		<?php echo JHtml::_('bootstrap.endTabSet'); ?>	</fieldset>		<input type="hidden" name="task" value="" />		<?php echo JHtml::_('form.token'); ?>		</div>		<!-- End Newsfeed -->		<!-- Begin Sidebar -->			<?php echo JLayoutHelper::render('joomla.edit.details', $this); ?>		<!-- End Sidebar -->	</div></form>
<?php/** * @package    Joomla.Administrator * * @copyright  Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license    GNU General Public License version 2 or later; see LICENSE.txt */if (version_compare(PHP_VERSION, '5.3.1', '<')){	die('Your host needs to use PHP 5.3.1 or higher to run this version of Joomla!');}/** * Constant that is checked in included files to prevent direct access. * define() is used in the installation folder rather than "const" to not error for PHP 5.2 and lower */define('_JEXEC', 1);if (file_exists(__DIR__ . '/defines.php')){	include_once __DIR__ . '/defines.php';}if (!defined('_JDEFINES')){	define('JPATH_BASE', __DIR__);	require_once JPATH_BASE.'/includes/defines.php';}require_once JPATH_BASE.'/includes/framework.php';require_once JPATH_BASE.'/includes/helper.php';require_once JPATH_BASE.'/includes/toolbar.php';// Mark afterLoad in the profiler.JDEBUG ? $_PROFILER->mark('afterLoad') : null;// Instantiate the application.$app = JFactory::getApplication('administrator');// Initialise the application.$app->initialise(	array('language' => $app->getUserState('application.lang')));// Mark afterIntialise in the profiler.JDEBUG ? $_PROFILER->mark('afterInitialise') : null;// Route the application.$app->route();// Mark afterRoute in the profiler.JDEBUG ? $_PROFILER->mark('afterRoute') : null;// Dispatch the application.$app->dispatch();// Mark afterDispatch in the profiler.JDEBUG ? $_PROFILER->mark('afterDispatch') : null;// Render the application.$app->render();// Mark afterRender in the profiler.JDEBUG ? $_PROFILER->mark('afterRender') : null;// Return the response.echo $app;
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a text field telephone numbers. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.tel.html * @see         JFormRuleTel for telephone number validation * @see         JHtmlTel for rendering of telephone numbers * @since       11.1 */class JFormFieldTel extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Tel';}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::_('bootstrap.tooltip');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_checkin');?>" method="post" name="adminForm" id="adminForm">  <?php if (!empty( $this->sidebar)) : ?>    <div id="j-sidebar-container" class="span2">      <?php echo $this->sidebar; ?>    </div>      <div id="j-main-container" class="span10">  <?php else : ?>    <div id="j-main-container">  <?php endif;?>  	<div id="filter-bar" class="btn-toolbar">  		<div class="filter-search btn-group pull-left">  			<input type="text" name="filter_search" id="filter_search" placeholder="<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CHECKIN_FILTER_SEARCH_DESC'); ?>" />  		</div>  		<div class="btn-group pull-left">  			<button class="btn tip hasTooltip" type="submit" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>"><i class="icon-search"></i></button>  			<button class="btn tip hasTooltip" type="button" onclick="document.id('filter_search').value='';this.form.submit();" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>"><i class="icon-remove"></i></button>  		</div>  	</div>  	<div class="clearfix"> </div>  	<table id="global-checkin" class="table table-striped">  		<thead>  			<tr>  				<th width="1%">  					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />  				</th>  				<th class="left"><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_DATABASE_TABLE', 'table', $listDirn, $listOrder); ?></th>  				<th><?php echo JHtml::_('grid.sort', 'COM_CHECKIN_ITEMS_TO_CHECK_IN', 'count', $listDirn, $listOrder); ?></th>  			</tr>  		</thead>  		<tbody>  		<?php foreach ($this->items as $table => $count): $i = 0;?>  			<tr class="row<?php echo $i % 2; ?>">  				<td class="center"><?php echo JHtml::_('grid.id', $i, $table); ?></td>  				<td><?php echo JText::sprintf('COM_CHECKIN_TABLE', $table); ?></td>  				<td width="200" class="center"><span class="label label-info"><?php echo $count; ?></span></td>  			</tr>  		<?php endforeach;?>  		</tbody>  		<tfoot>  			<tr>  				<td colspan="15">  					<?php echo $this->pagination->getListFooter(); ?>  				</td>  			</tr>  		</tfoot>  	</table>  	<input type="hidden" name="task" value="" />  	<input type="hidden" name="boxchecked" value="0" />  	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />  	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />  	<?php echo JHtml::_('form.token'); ?>	</div></form>
