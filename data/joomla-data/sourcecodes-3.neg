<?php/** * @package     Joomla.Libraries * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('groupedlist');/** * Form Field class for the Joomla CMS. * Supports a select grouped list of template styles * * @package     Joomla.Libraries * @subpackage  Form * @since       1.6 */class JFormFieldTemplatestyle extends JFormFieldGroupedList{	/**	 * The form field type.	 *	 * @var    string	 * @since  1.6	 */	public $type = 'TemplateStyle';	/**	 * Method to get the list of template style options	 * grouped by template.	 * Use the client attribute to specify a specific client.	 * Use the template attribute to specify a specific template	 *	 * @return  array  The field option objects as a nested array in groups.	 *	 * @since   1.6	 */	protected function getGroups()	{		$groups = array();		$lang = JFactory::getLanguage();		// Get the client and client_id.		$clientName = $this->element['client'] ? (string) $this->element['client'] : 'site';		$client = JApplicationHelper::getClientInfo($clientName, true);		// Get the template.		$template = (string) $this->element['template'];		// Get the database object and a new query object.		$db = JFactory::getDbo();		$query = $db->getQuery(true);		// Build the query.		$query->select('s.id, s.title, e.name as name, s.template')			->from('#__template_styles as s')			->where('s.client_id = ' . (int) $client->id)			->order('template')			->order('title');		if ($template)		{			$query->where('s.template = ' . $db->quote($template));		}		$query->join('LEFT', '#__extensions as e on e.element=s.template')			->where('e.enabled=1')			->where($db->quoteName('e.type') . '=' . $db->quote('template'));		// Set the query and load the styles.		$db->setQuery($query);		$styles = $db->loadObjectList();		// Build the grouped list array.		if ($styles)		{			foreach ($styles as $style)			{				$template = $style->template;				$lang->load('tpl_' . $template . '.sys', $client->path, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, null, false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path, $lang->getDefault(), false, false)					|| $lang->load('tpl_' . $template . '.sys', $client->path . '/templates/' . $template, $lang->getDefault(), false, false);				$name = JText::_($style->name);				// Initialize the group if necessary.				if (!isset($groups[$name]))				{					$groups[$name] = array();				}				$groups[$name][] = JHtml::_('select.option', $style->id, $style->title);			}		}		// Merge any additional groups in the XML definition.		$groups = array_merge(parent::getGroups(), $groups);		return $groups;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_BASE') or die();JFormHelper::loadFieldClass('list');/** * Search Filter field for the Finder package. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class JFormFieldSearchFilter extends JFormFieldList{	/**	 * The form field type.	 *	 * @var    string	 * @since  2.5	 */	protected $type = 'SearchFilter';	/**	 * Method to get the field options.	 *	 * @return  array  The field option objects.	 *	 * @since   2.5	 */	public function getOptions()	{		$options = array();		// Build the query.		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->select('f.title AS text, f.filter_id AS value')			->from($db->quoteName('#__finder_filters') . ' AS f')			->where('f.state = 1')			->order('f.title ASC');		$db->setQuery($query);		$options = $db->loadObjectList();		array_unshift($options, JHtml::_('select.option', '', JText::_('COM_FINDER_SELECT_SEARCH_FILTER'), 'value', 'text'));		return $options;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;// Include the component HTML helpers.JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$app		= JFactory::getApplication();$user		= JFactory::getUser();$userId		= $user->get('id');$extension	= $this->escape($this->state->get('filter.extension'));$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$ordering 	= ($listOrder == 'a.lft');$saveOrder 	= ($listOrder == 'a.lft' && $listDirn == 'asc');$assoc		= isset($app->item_associations) ? $app->item_associations : 0;?><div class="categories"><form action="<?php echo JRoute::_('index.php?option=com_categories&view=categories');?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">		<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CATEGORIES_ITEMS_SEARCH_FILTER'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS');?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level'));?>			</select>			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>            <label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.published', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'a.lft', $listDirn, $listOrder); ?>					<?php if ($saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'categories.saveorder'); ?>					<?php endif; ?>				</th>				<th class="access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<?php if ($assoc) : ?>				<th width="5%">					<?php echo JHtml::_('grid.sort', 'COM_CATEGORY_HEADING_ASSOCIATION', 'association', $listDirn, $listOrder); ?>				</th>				<?php endif;?>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $this->state->get('list.direction'), $this->state->get('list.ordering')); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>			<?php			$originalOrders = array();			foreach ($this->items as $i => $item) :				$orderkey   = array_search($item->id, $this->ordering[$item->parent_id]);				$canEdit    = $user->authorise('core.edit',       $extension . '.category.' . $item->id);				$canCheckin = $user->authorise('core.admin',      'com_checkin') || $item->checked_out == $userId || $item->checked_out == 0;				$canEditOwn = $user->authorise('core.edit.own',   $extension . '.category.' . $item->id) && $item->created_user_id == $userId;				$canChange  = $user->authorise('core.edit.state', $extension . '.category.' . $item->id) && $canCheckin;			?>				<tr class="row<?php echo $i % 2; ?>">					<th class="center">						<?php echo JHtml::_('grid.id', $i, $item->id); ?>					</th>					<td>						<?php echo str_repeat('<span class="gi">|&mdash;</span>', $item->level - 1) ?>						<?php if ($item->checked_out) : ?>							<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'categories.', $canCheckin); ?>						<?php endif; ?>						<?php if ($canEdit || $canEditOwn) : ?>							<a href="<?php echo JRoute::_('index.php?option=com_categories&task=category.edit&id='.$item->id.'&extension='.$extension);?>">								<?php echo $this->escape($item->title); ?></a>						<?php else : ?>							<?php echo $this->escape($item->title); ?>						<?php endif; ?>						<p class="smallsub" title="<?php echo $this->escape($item->path);?>">							<?php echo str_repeat('<span class="gtr">|&mdash;</span>', $item->level - 1) ?>							<?php if (empty($item->note)) : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias));?>							<?php else : ?>								<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS_NOTE', $this->escape($item->alias), $this->escape($item->note));?>							<?php endif; ?></p>					</td>					<td class="center">						<?php echo JHtml::_('jgrid.published', $item->published, $i, 'categories.', $canChange);?>					</td>					<td class="order">						<?php if ($canChange) : ?>							<?php if ($saveOrder) : ?>								<span><?php echo $this->pagination->orderUpIcon($i, isset($this->ordering[$item->parent_id][$orderkey - 1]), 'categories.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, isset($this->ordering[$item->parent_id][$orderkey + 1]), 'categories.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>							<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>							<input type="text" name="order[]" value="<?php echo $orderkey + 1;?>" <?php echo $disabled ?> class="text-area-order" title="<?php echo $item->title; ?> order" />							<?php $originalOrders[] = $orderkey + 1; ?>						<?php else : ?>							<?php echo $orderkey + 1;?>						<?php endif; ?>					</td>					<td class="center">						<?php echo $this->escape($item->access_level); ?>					</td>					<?php if ($assoc) : ?>					<td class="center">						<?php if ($item->association):?>							<?php echo JHtml::_('CategoriesAdministrator.association', $item->id, $extension);?>						<?php endif;?>					</td>					<?php endif;?>					<td class="center nowrap">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>					</td>					<td class="center">						<span title="<?php echo sprintf('%d-%d', $item->lft, $item->rgt);?>">							<?php echo (int) $item->id; ?></span>					</td>				</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<div class="clr"> </div>	<?php //Load the batch processing form. ?>	<?php echo $this->loadTemplate('batch'); ?>	<input type="hidden" name="extension" value="<?php echo $extension;?>" />	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<input type="hidden" name="original_order_values" value="<?php echo implode($originalOrders, ','); ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('bootstrap.tooltip');$input     = JFactory::getApplication()->input;$function  = JFactory::getApplication()->input->getCmd('function', 'jSelectNewsfeed');$listOrder = $this->escape($this->state->get('list.ordering'));$listDirn  = $this->escape($this->state->get('list.direction'));?><form action="<?php echo JRoute::_('index.php?option=com_newsfeeds&view=newsfeeds&layout=modal&tmpl=component&function='.$function);?>" method="post" name="adminForm" id="adminForm" class="form-inline">	<fieldset class="filter clearfix">		<div class="btn-toolbar">			<div class="btn-group pull-left">				<label for="filter_search">					<?php echo JText::_('JSEARCH_FILTER_LABEL'); ?>				</label>				<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" size="30" title="<?php echo JText::_('COM_NEWSFEEDS_FILTER_SEARCH_DESC'); ?>" />			</div>			<div class="btn-group pull-left">				<button type="submit" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?>">					<i class="icon-search"></i></button>				<button type="button" class="btn hasTooltip" data-placement="bottom" title="<?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?>" onclick="document.id('filter_search').value='';this.form.submit();">					<i class="icon-remove"></i></button>			</div>				<input onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('0', '<?php echo $this->escape(addslashes(JText::_('COM_NEWSFEEDS_SELECT_A_FEED'))); ?>', null, null);" class="btn" type="button" value="<?php echo JText::_('COM_NEWSFEEDS_FIELD_VALUE_NONE'); ?>" />			<div class="clearfix"></div>		</div>		<hr class="hr-condensed" />		<div class="filters">			<select name="filter_access" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access'));?>			</select>			<select name="filter_published" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED');?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true);?>			</select>			<?php if ($this->state->get('filter.forcedLanguage')) : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds', array('filter.language' => array('*', $this->state->get('filter.forcedLanguage')))), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<input type="hidden" name="forcedLanguage" value="<?php echo $this->escape($this->state->get('filter.forcedLanguage')); ?>" />			<input type="hidden" name="filter_language" value="<?php echo $this->escape($this->state->get('filter.language')); ?>" />			<?php else : ?>			<select name="filter_category_id" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY');?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_newsfeeds'), 'value', 'text', $this->state->get('filter.category_id'));?>			</select>			<select name="filter_language" class="input-medium" onchange="this.form.submit()">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE');?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language'));?>			</select>			<?php endif; ?>		</div>	</fieldset>	<table class="table table-striped table-condensed">		<thead>			<tr>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.name', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'access_level', $listDirn, $listOrder); ?>				</th>				<th width="15%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th width="5%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th width="1%" class="nowrap center">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tfoot>			<tr>				<td colspan="15">					<?php echo $this->pagination->getListFooter(); ?>				</td>			</tr>		</tfoot>		<tbody>		<?php foreach ($this->items as $i => $item) : ?>			<tr class="row<?php echo $i % 2; ?>">				<td>					<a class="pointer" onclick="if (window.parent) window.parent.<?php echo $this->escape($function);?>('<?php echo $item->id; ?>', '<?php echo $this->escape(addslashes($item->name)); ?>');">						<?php echo $this->escape($item->name); ?></a>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="center">					<?php if ($item->language == '*'):?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else:?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td align="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table>	<div>		<input type="hidden" name="task" value="" />		<input type="hidden" name="boxchecked" value="0" />		<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />		<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />		<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Site * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$class = ' class="first"';if (count($this->children[$this->category->id]) > 0 && $this->maxLevel != 0) :?><ul class="list-striped list-condensed"><?php foreach ($this->children[$this->category->id] as $id => $child) : ?>	<?php	if ($this->params->get('show_empty_categories') || $child->numitems || count($child->getChildren())) :		if (!isset($this->children[$this->category->id][$id + 1]))		{			$class = ' class="last"';		}	?>	<li<?php echo $class; ?>>		<?php $class = ''; ?>			<h4 class="item-title">				<a href="<?php echo JRoute::_(ContactHelperRoute::getCategoryRoute($child->id)); ?>">				<?php echo $this->escape($child->title); ?>				</a>				<?php if ($this->params->get('show_cat_items') == 1) :?>					<span class="badge badge-info pull-right" title="<?php echo JText::_('COM_CONTACT_CAT_NUM'); ?>"><?php echo $child->numitems; ?></span>				<?php endif; ?>			</h4>			<?php if ($this->params->get('show_subcat_desc') == 1) : ?>				<?php if ($child->description) : ?>					<small class="category-desc">						<?php echo JHtml::_('content.prepare', $child->description, '', 'com_contact.category'); ?>					</small>				<?php endif; ?>			<?php endif; ?>			<?php if (count($child->getChildren()) > 0 ) :				$this->children[$child->id] = $child->getChildren();				$this->category = $child;				$this->maxLevel--;				echo $this->loadTemplate('children');				$this->category = $child->getParent();				$this->maxLevel++;			endif; ?>	</li>	<?php endif; ?><?php endforeach; ?></ul><?php endif; ?>
<?php/** * @package     Joomla.Plugin * @subpackage  System.remember * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! System Remember Me Plugin * * @package     Joomla.Plugin * @subpackage  System.remember * @since       1.5 */class PlgSystemRemember extends JPlugin{	public function onAfterInitialise()	{		$app = JFactory::getApplication();		// No remember me for admin		if ($app->isAdmin())		{			return;		}		$user = JFactory::getUser();		if ($user->get('guest'))		{			$hash = JApplication::getHash('JLOGIN_REMEMBER');			if ($str = JRequest::getString($hash, '', 'cookie', JREQUEST_ALLOWRAW | JREQUEST_NOTRIM))			{				$credentials = array();				$goodCookie = true;				$filter = JFilterInput::getInstance();				// Create the encryption key, apply extra hardening using the user agent string.				// Since we're decoding, no UA validity check is required.				$privateKey = JApplication::getHash(@$_SERVER['HTTP_USER_AGENT']);				$key = new JCryptKey('simple', $privateKey, $privateKey);				$crypt = new JCrypt(new JCryptCipherSimple, $key);				try				{					$str = $crypt->decrypt($str);					if (!is_string($str))					{						throw new Exception('Decoded cookie is not a string.');					}					$cookieData = json_decode($str);					if (null === $cookieData)					{						throw new Exception('JSON could not be docoded.');					}					if (!is_object($cookieData))					{						throw new Exception('Decoded JSON is not an object.');					}					// json_decoded cookie could be any object structure, so make sure the					// credentials are well structured and only have user and password.					if (isset($cookieData->username) && is_string($cookieData->username))					{						$credentials['username'] = $filter->clean($cookieData->username, 'username');					}					else					{						throw new Exception('Malformed username.');					}					if (isset($cookieData->password) && is_string($cookieData->password))					{						$credentials['password'] = $filter->clean($cookieData->password, 'string');					}					else					{						throw new Exception('Malformed password.');					}					$return = $app->login($credentials, array('silent' => true));					if (!$return)					{						throw new Exception('Log-in failed.');					}				}				catch (Exception $e)				{					$config = JFactory::getConfig();					$cookie_domain = $config->get('cookie_domain', '');					$cookie_path = $config->get('cookie_path', '/');					// Clear the remember me cookie					setcookie(						JApplication::getHash('JLOGIN_REMEMBER'), false, time() - 86400,						$cookie_path, $cookie_domain					);					JLog::add('A remember me cookie was unset for the following reason: ' . $e->getMessage(), JLog::WARNING, 'security');				}			}		}	}}
<?php/** * @package     Joomla.Platform * @subpackage  Client * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * LDAP client class * * @package     Joomla.Platform * @subpackage  Client * @since       12.1 */class JClientLdap{	/**	 * @var    string  Hostname of LDAP server	 * @since  12.1	 */	public $host = null;	/**	 * @var    bool  Authorization Method to use	 * @since  12.1	 */	public $auth_method = null;	/**	 * @var    int  Port of LDAP server	 * @since  12.1	 */	public $port = null;	/**	 * @var    string  Base DN (e.g. o=MyDir)	 * @since  12.1	 */	public $base_dn = null;	/**	 * @var    string  User DN (e.g. cn=Users,o=MyDir)	 * @since  12.1	 */	public $users_dn = null;	/**	 * @var    string  Search String	 * @since  12.1	 */	public $search_string = null;	/**	 * @var    boolean  Use LDAP Version 3	 * @since  12.1	 */	public $use_ldapV3 = null;	/**	 * @var    boolean  No referrals (server transfers)	 * @since  11.1	 */	public $no_referrals = null;	/**	 * @var    boolean  Negotiate TLS (encrypted communications)	 * @since  12.1	 */	public $negotiate_tls = null;	/**	 * @var    string  Username to connect to server	 * @since  12.1	 */	public $username = null;	/**	 *	 * @var    string  Password to connect to server	 * @since  12.1	 */	public $password = null;	/**	 * @var    mixed  LDAP Resource Identifier	 * @since  12.1	 */	private $_resource = null;	/**	 *	 * @var    string  Current DN	 * @since  12.1	 */	private $_dn = null;	/**	 * Constructor	 *	 * @param   object  $configObj  An object of configuration variables	 *	 * @since   12.1	 */	public function __construct($configObj = null)	{		if (is_object($configObj))		{			$vars = get_class_vars(get_class($this));			foreach (array_keys($vars) as $var)			{				if (substr($var, 0, 1) != '_')				{					$param = $configObj->get($var);					if ($param)					{						$this->$var = $param;					}				}			}		}	}	/**	 * Connect to server	 *	 * @return  boolean  True if successful	 *	 * @since   12.1	 */	public function connect()	{		if ($this->host == '')		{			return false;		}		$this->_resource = @ ldap_connect($this->host, $this->port);		if ($this->_resource)		{			if ($this->use_ldapV3)			{				if (!@ldap_set_option($this->_resource, LDAP_OPT_PROTOCOL_VERSION, 3))				{					return false;				}			}			if (!@ldap_set_option($this->_resource, LDAP_OPT_REFERRALS, (int) $this->no_referrals))			{				return false;			}			if ($this->negotiate_tls)			{				if (!@ldap_start_tls($this->_resource))				{					return false;				}			}			return true;		}		else		{			return false;		}	}	/**	 * Close the connection	 *	 * @return  void	 *	 * @since   12.1	 */	public function close()	{		@ ldap_close($this->_resource);	}	/**	 * Sets the DN with some template replacements	 *	 * @param   string  $username  The username	 * @param   string  $nosub     ...	 *	 * @return  void	 *	 * @since   12.1	 */	public function setDN($username, $nosub = 0)	{		if ($this->users_dn == '' || $nosub)		{			$this->_dn = $username;		}		elseif (strlen($username))		{			$this->_dn = str_replace('[username]', $username, $this->users_dn);		}		else		{			$this->_dn = '';		}	}	/**	 * Get the DN	 *	 * @return  string  The current dn	 *	 * @since   12.1	 */	public function getDN()	{		return $this->_dn;	}	/**	 * Anonymously binds to LDAP directory	 *	 * @return  array	 *	 * @since   12.1	 */	public function anonymous_bind()	{		$bindResult = @ldap_bind($this->_resource);		return $bindResult;	}	/**	 * Binds to the LDAP directory	 *	 * @param   string  $username  The username	 * @param   string  $password  The password	 * @param   string  $nosub     ...	 *	 * @return  boolean	 *	 * @since   12.1	 */	public function bind($username = null, $password = null, $nosub = 0)	{		if (is_null($username))		{			$username = $this->username;		}		if (is_null($password))		{			$password = $this->password;		}		$this->setDN($username, $nosub);		$bindResult = @ldap_bind($this->_resource, $this->getDN(), $password);		return $bindResult;	}	/**	 * Perform an LDAP search using comma separated search strings	 *	 * @param   string  $search  search string of search values	 *	 * @return  array  Search results	 *	 * @since    12.1	 */	public function simple_search($search)	{		$results = explode(';', $search);		foreach ($results as $key => $result)		{			$results[$key] = '(' . $result . ')';		}		return $this->search($results);	}	/**	 * Performs an LDAP search	 *	 * @param   array   $filters     Search Filters (array of strings)	 * @param   string  $dnoverride  DN Override	 * @param   array   $attributes  An array of attributes to return (if empty, all fields are returned).	 *	 * @return  array  Multidimensional array of results	 *	 * @since   12.1	 */	public function search(array $filters, $dnoverride = null, array $attributes = array())	{		$result = array();		if ($dnoverride)		{			$dn = $dnoverride;		}		else		{			$dn = $this->base_dn;		}		$resource = $this->_resource;		foreach ($filters as $search_filter)		{			$search_result = @ldap_search($resource, $dn, $search_filter, $attributes);			if ($search_result && ($count = @ldap_count_entries($resource, $search_result)) > 0)			{				for ($i = 0; $i < $count; $i++)				{					$result[$i] = array();					if (!$i)					{						$firstentry = @ldap_first_entry($resource, $search_result);					}					else					{						$firstentry = @ldap_next_entry($resource, $firstentry);					}					// Load user-specified attributes					$result_array = @ldap_get_attributes($resource, $firstentry);					// LDAP returns an array of arrays, fit this into attributes result array					foreach ($result_array as $ki => $ai)					{						if (is_array($ai))						{							$subcount = $ai['count'];							$result[$i][$ki] = array();							for ($k = 0; $k < $subcount; $k++)							{								$result[$i][$ki][$k] = $ai[$k];							}						}					}					$result[$i]['dn'] = @ldap_get_dn($resource, $firstentry);				}			}		}		return $result;	}	/**	 * Replace an entry and return a true or false result	 *	 * @param   string  $dn         The DN which contains the attribute you want to replace	 * @param   string  $attribute  The attribute values you want to replace	 *	 * @return  mixed  result of comparison (true, false, -1 on error)	 *	 * @since   12.1	 */	public function replace($dn, $attribute)	{		return @ldap_mod_replace($this->_resource, $dn, $attribute);	}	/**	 * Modifies an entry and return a true or false result	 *	 * @param   string  $dn         The DN which contains the attribute you want to modify	 * @param   string  $attribute  The attribute values you want to modify	 *	 * @return  mixed  result of comparison (true, false, -1 on error)	 *	 * @since   12.1	 */	public function modify($dn, $attribute)	{		return @ldap_modify($this->_resource, $dn, $attribute);	}	/**	 * Removes attribute value from given dn and return a true or false result	 *	 * @param   string  $dn         The DN which contains the attribute you want to remove	 * @param   string  $attribute  The attribute values you want to remove	 *	 * @return  mixed  result of comparison (true, false, -1 on error)	 *	 * @since   12.1	 */	public function remove($dn, $attribute)	{		$resource = $this->_resource;		return @ldap_mod_del($resource, $dn, $attribute);	}	/**	 * Compare an entry and return a true or false result	 *	 * @param   string  $dn         The DN which contains the attribute you want to compare	 * @param   string  $attribute  The attribute whose value you want to compare	 * @param   string  $value      The value you want to check against the LDAP attribute	 *	 * @return  mixed  result of comparison (true, false, -1 on error)	 *	 * @since   12.1	 */	public function compare($dn, $attribute, $value)	{		return @ldap_compare($this->_resource, $dn, $attribute, $value);	}	/**	 * Read all or specified attributes of given dn	 *	 * @param   string  $dn  The DN of the object you want to read	 *	 * @return  mixed  array of attributes or -1 on error	 *	 * @since   12.1	 */	public function read($dn)	{		$base = substr($dn, strpos($dn, ',') + 1);		$cn = substr($dn, 0, strpos($dn, ','));		$result = @ldap_read($this->_resource, $base, $cn);		if ($result)		{			return @ldap_get_entries($this->_resource, $result);		}		else		{			return $result;		}	}	/**	 * Deletes a given DN from the tree	 *	 * @param   string  $dn  The DN of the object you want to delete	 *	 * @return  boolean  Result of operation	 *	 * @since   12.1	 */	public function delete($dn)	{		return @ldap_delete($this->_resource, $dn);	}	/**	 * Create a new DN	 *	 * @param   string  $dn       The DN where you want to put the object	 * @param   array   $entries  An array of arrays describing the object to add	 *	 * @return  boolean  Result of operation	 *	 * @since   12.1	 */	public function create($dn, array $entries)	{		return @ldap_add($this->_resource, $dn, $entries);	}	/**	 * Add an attribute to the given DN	 * Note: DN has to exist already	 *	 * @param   string  $dn     The DN of the entry to add the attribute	 * @param   array   $entry  An array of arrays with attributes to add	 *	 * @return  boolean   Result of operation	 *	 * @since   12.1	 */	public function add($dn, array $entry)	{		return @ldap_mod_add($this->_resource, $dn, $entry);	}	/**	 * Rename the entry	 *	 * @param   string   $dn           The DN of the entry at the moment	 * @param   string   $newdn        The DN of the entry should be (only cn=newvalue)	 * @param   string   $newparent    The full DN of the parent (null by default)	 * @param   boolean  $deleteolddn  Delete the old values (default)	 *	 * @return  boolean  Result of operation	 *	 * @since   12.1	 */	public function rename($dn, $newdn, $newparent, $deleteolddn)	{		return @ldap_rename($this->_resource, $dn, $newdn, $newparent, $deleteolddn);	}	/**	 * Returns the error message	 *	 * @return  string   error message	 *	 * @since   12.1	 */	public function getErrorMsg()	{		return @ldap_error($this->_resource);	}	/**	 * Converts a dot notation IP address to net address (e.g. for Netware, etc)	 *	 * @param   string  $ip  IP Address (e.g. xxx.xxx.xxx.xxx)	 *	 * @return  string  Net address	 *	 * @since   12.1	 */	public static function ipToNetAddress($ip)	{		$parts = explode('.', $ip);		$address = '1#';		foreach ($parts as $int)		{			$tmp = dechex($int);			if (strlen($tmp) != 2)			{				$tmp = '0' . $tmp;			}			$address .= '\\' . $tmp;		}		return $address;	}	/**	 * Extract readable network address from the LDAP encoded networkAddress attribute.	 *	 * Please keep this document block and author attribution in place.	 *	 * Novell Docs, see: http://developer.novell.com/ndk/doc/ndslib/schm_enu/data/sdk5624.html#sdk5624	 * for Address types: http://developer.novell.com/ndk/doc/ndslib/index.html?page=/ndk/doc/ndslib/schm_enu/data/sdk4170.html	 * LDAP Format, String:	 * taggedData = uint32String "#" octetstring	 * byte 0 = uint32String = Address Type: 0= IPX Address; 1 = IP Address	 * byte 1 = char = "#" - separator	 * byte 2+ = octetstring - the ordinal value of the address	 * Note: with eDirectory 8.6.2, the IP address (type 1) returns	 * correctly, however, an IPX address does not seem to.  eDir 8.7 may correct this.	 * Enhancement made by Merijn van de Schoot:	 * If addresstype is 8 (UDP) or 9 (TCP) do some additional parsing like still returning the IP address	 *	 * @param   string  $networkaddress  The network address	 *	 * @return  array	 *	 * @author  Jay Burrell, Systems & Networks, Mississippi State University	 * @since   12.1	 */	public static function LDAPNetAddr($networkaddress)	{		$addr = "";		$addrtype = (int) substr($networkaddress, 0, 1);		// Throw away bytes 0 and 1 which should be the addrtype and the "#" separator		$networkaddress = substr($networkaddress, 2);		if (($addrtype == 8) || ($addrtype = 9))		{			// TODO 1.6: If UDP or TCP, (TODO fill addrport and) strip portnumber information from address			$networkaddress = substr($networkaddress, (strlen($networkaddress) - 4));		}		$addrtypes = array(			'IPX',			'IP',			'SDLC',			'Token Ring',			'OSI',			'AppleTalk',			'NetBEUI',			'Socket',			'UDP',			'TCP',			'UDP6',			'TCP6',			'Reserved (12)',			'URL',			'Count');		$len = strlen($networkaddress);		if ($len > 0)		{			for ($i = 0; $i < $len; $i++)			{				$byte = substr($networkaddress, $i, 1);				$addr .= ord($byte);				if (($addrtype == 1) || ($addrtype == 8) || ($addrtype = 9))				{					// Dot separate IP addresses...					$addr .= ".";				}			}			if (($addrtype == 1) || ($addrtype == 8) || ($addrtype = 9))			{				// Strip last period from end of $addr				$addr = substr($addr, 0, strlen($addr) - 1);			}		}		else		{			$addr .= JText::_('JLIB_CLIENT_ERROR_LDAP_ADDRESS_NOT_AVAILABLE');		}		return array('protocol' => $addrtypes[$addrtype], 'address' => $addr);	}	/**	 * Generates a LDAP compatible password	 *	 * @param   string  $password  Clear text password to encrypt	 * @param   string  $type      Type of password hash, either md5 or SHA	 *	 * @return  string   Encrypted password	 *	 * @since   12.1	 */	public static function generatePassword($password, $type = 'md5')	{		$userpassword = '';		switch (strtolower($type))		{			case 'sha':				$userpassword = '{SHA}' . base64_encode(pack('H*', sha1($password)));				break;			case 'md5':			default:				$userpassword = '{MD5}' . base64_encode(pack('H*', md5($password)));				break;		}		return $userpassword;	}}/** * Deprecated class placeholder. You should use JClientLdap instead. * * @package     Joomla.Platform * @subpackage  Client * @since       11.1 * @deprecated  12.3 */class JLDAP extends JClientLdap{	/**	 * Constructor	 *	 * @param   object  $configObj  An object of configuration variables	 *	 * @since   11.1	 */	public function __construct($configObj)	{		JLog::add('JLDAP is deprecated. Use JClientLdap instead.', JLog::WARNING, 'deprecated');		parent::__construct($configObj);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  Template.hathor * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt *//* add accessibility, labels on input forms */defined('_JEXEC') or die;JHtml::addIncludePath(JPATH_COMPONENT.'/helpers/html');JHtml::_('behavior.tooltip');JHtml::_('behavior.multiselect');$user		= JFactory::getUser();$listOrder	= $this->escape($this->state->get('list.ordering'));$listDirn	= $this->escape($this->state->get('list.direction'));$canOrder	= $user->authorise('core.edit.state', 'com_content.article');$saveOrder	= $listOrder == 'fp.ordering';$n			= count($this->items);?><form action="<?php echo JRoute::_('index.php?option=com_content&view=featured'); ?>" method="post" name="adminForm" id="adminForm"><?php if (!empty( $this->sidebar)) : ?>	<div id="j-sidebar-container" class="span2">		<?php echo $this->sidebar; ?>	</div>	<div id="j-main-container" class="span10"><?php else : ?>	<div id="j-main-container"><?php endif;?>	<fieldset id="filter-bar">	<legend class="element-invisible"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></legend>		<div class="filter-search">			<label class="filter-search-lbl" for="filter_search"><?php echo JText::_('JSEARCH_FILTER_LABEL'); ?></label>			<input type="text" name="filter_search" id="filter_search" value="<?php echo $this->escape($this->state->get('filter.search')); ?>" title="<?php echo JText::_('COM_CONTENT_FILTER_SEARCH_DESC'); ?>" />			<button type="submit"><?php echo JText::_('JSEARCH_FILTER_SUBMIT'); ?></button>			<button type="button" onclick="document.id('filter_search').value='';this.form.submit();"><?php echo JText::_('JSEARCH_FILTER_CLEAR'); ?></button>		</div>		<div class="filter-select">			<label class="selectlabel" for="filter_published"><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></label>			<select name="filter_published" class="inputbox" id="filter_published">				<option value=""><?php echo JText::_('JOPTION_SELECT_PUBLISHED'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('jgrid.publishedOptions'), 'value', 'text', $this->state->get('filter.published'), true); ?>			</select>			<label class="selectlabel" for="filter_category_id"><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></label>			<select name="filter_category_id" class="inputbox" id="filter_category_id">				<option value=""><?php echo JText::_('JOPTION_SELECT_CATEGORY'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('category.options', 'com_content'), 'value', 'text', $this->state->get('filter.category_id')); ?>			</select>			<label class="selectlabel" for="filter_level"><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></label>			<select name="filter_level" class="inputbox" id="filter_level">				<option value=""><?php echo JText::_('JOPTION_SELECT_MAX_LEVELS'); ?></option>				<?php echo JHtml::_('select.options', $this->f_levels, 'value', 'text', $this->state->get('filter.level')); ?>			</select>			<label class="selectlabel" for="filter_access"><?php echo JText::_('JOPTION_SELECT_ACCESS'); ?></label>			<select name="filter_access" class="inputbox" id="filter_access">				<option value=""><?php echo JText::_('JOPTION_SELECT_ACCESS');?></option>				<?php echo JHtml::_('select.options', JHtml::_('access.assetgroups'), 'value', 'text', $this->state->get('filter.access')); ?>			</select>			<label class="selectlabel" for="filter_language"><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></label>			<select name="filter_language" class="inputbox" id="filter_language">				<option value=""><?php echo JText::_('JOPTION_SELECT_LANGUAGE'); ?></option>				<?php echo JHtml::_('select.options', JHtml::_('contentlanguage.existing', true, true), 'value', 'text', $this->state->get('filter.language')); ?>			</select>			<button type="submit" id="filter-go">				<?php echo JText::_('JSUBMIT'); ?></button>		</div>	</fieldset>	<div class="clr"> </div>	<table class="adminlist">		<thead>			<tr>				<th class="checkmark-col">					<input type="checkbox" name="checkall-toggle" value="" title="<?php echo JText::_('JGLOBAL_CHECK_ALL'); ?>" onclick="Joomla.checkAll(this)" />				</th>				<th class="title">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_TITLE', 'a.title', $listDirn, $listOrder); ?>				</th>				<th class="nowrap state-col">					<?php echo JHtml::_('grid.sort', 'JSTATUS', 'a.state', $listDirn, $listOrder); ?>				</th>				<th class="title category-col">					<?php echo JHtml::_('grid.sort', 'JCATEGORY', 'a.catid', $listDirn, $listOrder); ?>				</th>				<th class="nowrap ordering-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ORDERING', 'fp.ordering', $listDirn, $listOrder); ?>					<?php if ($canOrder && $saveOrder) :?>						<?php echo JHtml::_('grid.order', $this->items, 'filesave.png', 'featured.saveorder'); ?>					<?php endif; ?>				</th>				<th class="title access-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ACCESS', 'a.access', $listDirn, $listOrder); ?>				</th>				<th class="title created-by-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_CREATED_BY', 'a.created_by', $listDirn, $listOrder); ?>				</th>				<th class="title date-col">					<?php echo JHtml::_('grid.sort', 'JDATE', 'a.created', $listDirn, $listOrder); ?>				</th>				<th class="hits-col">					<?php echo JHtml::_('grid.sort', 'JGLOBAL_HITS', 'a.hits', $listDirn, $listOrder); ?>				</th>				<th class="language-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_LANGUAGE', 'language', $listDirn, $listOrder); ?>				</th>				<th class="nowrap id-col">					<?php echo JHtml::_('grid.sort', 'JGRID_HEADING_ID', 'a.id', $listDirn, $listOrder); ?>				</th>			</tr>		</thead>		<tbody>		<?php		foreach ($this->items as $i => $item) :			$item->max_ordering = 0; //??			$ordering   = ($listOrder == 'fp.ordering');			$assetId    = 'com_content.article.' . $item->id;			$canCreate  = $user->authorise('core.create',     'com_content.category.' . $item->catid);			$canEdit    = $user->authorise('core.edit',       'com_content.article.' . $item->id);			$canCheckin = $user->authorise('core.manage',     'com_checkin') || $item->checked_out == $user->get('id')|| $item->checked_out == 0;			$canChange  = $user->authorise('core.edit.state', 'com_content.article.' . $item->id) && $canCheckin;			?>			<tr class="row<?php echo $i % 2; ?>">				<th class="center">					<?php echo JHtml::_('grid.id', $i, $item->id); ?>				</th>				<td>					<?php if ($item->checked_out) : ?>						<?php echo JHtml::_('jgrid.checkedout', $i, $item->editor, $item->checked_out_time, 'featured.', $canCheckin); ?>					<?php endif; ?>					<?php if ($canEdit) : ?>					<a href="<?php echo JRoute::_('index.php?option=com_content&task=article.edit&return=featured&id='.$item->id);?>">						<?php echo $this->escape($item->title); ?></a>					<?php else : ?>						<?php echo $this->escape($item->title); ?>					<?php endif; ?>					<p class="smallsub">						<?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->alias)); ?></p>				</td>				<td class="center">					<?php echo JHtml::_('jgrid.published', $item->state, $i, 'articles.', $canChange, 'cb', $item->publish_up, $item->publish_down); ?>				</td>				<td class="center">					<?php echo $this->escape($item->category_title); ?>				</td>				<td class="order">					<?php if ($canChange) : ?>						<?php if ($saveOrder) : ?>							<?php if ($listDirn == 'asc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderup', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'featured.orderdown', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php elseif ($listDirn == 'desc') : ?>								<span><?php echo $this->pagination->orderUpIcon($i, true, 'featured.orderdown', 'JLIB_HTML_MOVE_UP', $ordering); ?></span>								<span><?php echo $this->pagination->orderDownIcon($i, $this->pagination->total, true, 'featured.orderup', 'JLIB_HTML_MOVE_DOWN', $ordering); ?></span>							<?php endif; ?>						<?php endif; ?>						<?php $disabled = $saveOrder ?  '' : 'disabled="disabled"'; ?>						<input type="text" name="order[]" value="<?php echo $item->ordering; ?>" <?php echo $disabled; ?> class="text-area-order" title="<?php echo $item->title; ?> order" />					<?php else : ?>						<?php echo $item->ordering; ?>					<?php endif; ?>				</td>				<td class="center">					<?php echo $this->escape($item->access_level); ?>				</td>				<td class="center">					<?php if ($item->created_by_alias) : ?>						<?php echo $this->escape($item->author_name); ?>						<p class="smallsub"> <?php echo JText::sprintf('JGLOBAL_LIST_ALIAS', $this->escape($item->created_by_alias)); ?></p>					<?php else : ?>						<?php echo $this->escape($item->author_name); ?>					<?php endif; ?>				</td>				<td class="center nowrap">					<?php echo JHtml::_('date', $item->created, JText::_('DATE_FORMAT_LC4')); ?>				</td>				<td class="center">					<?php echo (int) $item->hits; ?>				</td>				<td class="center">					<?php if ($item->language == '*') : ?>						<?php echo JText::alt('JALL', 'language'); ?>					<?php else : ?>						<?php echo $item->language_title ? $this->escape($item->language_title) : JText::_('JUNDEFINED'); ?>					<?php endif;?>				</td>				<td class="center">					<?php echo (int) $item->id; ?>				</td>			</tr>			<?php endforeach; ?>		</tbody>	</table><?php echo $this->pagination->getListFooter(); ?>	<input type="hidden" name="task" value="" />	<input type="hidden" name="boxchecked" value="0" />	<input type="hidden" name="filter_order" value="<?php echo $listOrder; ?>" />	<input type="hidden" name="filter_order_Dir" value="<?php echo $listDirn; ?>" />	<?php echo JHtml::_('form.token'); ?>	</div></form>
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$options = array(	JHtml::_('select.option', 'c', JText::_('JLIB_HTML_BATCH_COPY')),	JHtml::_('select.option', 'm', JText::_('JLIB_HTML_BATCH_MOVE')));$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_MENUS_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_MENUS_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<?php if ($published >= 0)		{		?>			<div id="batch-choose-action" class="combo control-group">				<label id="batch-choose-action-lbl" class="control-label" for="batch-choose-action">					<?php echo JText::_('COM_MENUS_BATCH_MENU_LABEL'); ?>				</label>				<div class="controls">					<select name="batch[menu_id]" class="inputbox" id="batch-menu-id">						<option value=""><?php echo JText::_('JSELECT') ?></option>						<?php echo JHtml::_('select.options', JHtml::_('menu.menuitems', array('published' => $published)));?>					</select>				</div>			</div>			<div id="batch-copy-move" class="control-group radio">				<?php echo JHtml::_('select.radiolist', $options, 'batch[move_copy]', '', 'value', 'text', 'm'); ?>			</div>		<?php		}		?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-menu-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('item.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;$published = $this->state->get('filter.published');?><div class="modal hide fade" id="collapseModal">	<div class="modal-header">		<button type="button" class="close" data-dismiss="modal">x</button>		<h3><?php echo JText::_('COM_CONTACT_BATCH_OPTIONS');?></h3>	</div>	<div class="modal-body">		<p><?php echo JText::_('COM_CONTACT_BATCH_TIP'); ?></p>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.access');?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.language'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.user'); ?>			</div>		</div>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.tag');?>			</div>		</div>		<?php if ($published >= 0) : ?>		<div class="control-group">			<div class="controls">				<?php echo JHtml::_('batch.item', 'com_contact');?>			</div>		</div>		<?php endif; ?>	</div>	<div class="modal-footer">		<button class="btn" type="button" onclick="document.id('batch-category-id').value='';document.id('batch-access').value='';document.id('batch-language-id').value='';document.id('batch-user-id').value='';document.id('batch-tag-id)').value=''" data-dismiss="modal">			<?php echo JText::_('JCANCEL'); ?>		</button>		<button class="btn btn-primary" type="submit" onclick="Joomla.submitbutton('contact.batch');">			<?php echo JText::_('JGLOBAL_BATCH_PROCESS'); ?>		</button>	</div></div>
<?php/** * @package     Joomla.Platform * @subpackage  Openstreetmap * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Openstreetmap API Elements class for the Joomla Platform * * @package     Joomla.Platform * @subpackage  Openstreetmap * * @since       13.1 */class JOpenstreetmapElements extends JOpenstreetmapObject{	/**	 * Method to create a node	 * 	 * @param   int    $changeset  change set id	 * @param   float  $latitude   latitude of the node	 * @param   float  $longitude  longitude of the node	 * @param   arary  $tags       array of tags for a node	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createNode($changeset,$latitude,$longitude,$tags)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'node/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<node changeset="' . $changeset . '" lat="' . $latitude . '" lon="' . $longitude . '">'				. $tag_list .				'</node>				</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to create a way	 * 	 * @param   int    $changeset  change set id	 * @param   array  $tags       array of tags for a way	 * @param   array  $nds        node ids to refer	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createWay($changeset,$tags,$nds)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'way/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		$nd_list = "";		if (!empty($nds))		{			foreach ($nds as $value)			{				$nd_list .= '<nd ref="' . $value . '"/>';			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<way changeset="' . $changeset . '">'					. $tag_list					. $nd_list .				'</way>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to create a relation	 * 	 * @param   int    $changeset  change set id	 * @param   array  $tags       array of tags for a relation	 * @param   array  $members    array of members for a relation 	 *                             eg:$members=array(array("type"=>"node","role"=>"stop","ref"=>"123"),array("type"=>"way","ref"=>"123"))	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 */	public function createRelation($changeset,$tags,$members)	{		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = 'relation/create';		// Build the request path.		$path = $this->getOption('api.url') . $base;		$tag_list = "";		// Create XML node		if (!empty($tags))		{			foreach ($tags as $key => $value)			{				$tag_list .= '<tag k="' . $key . '" v="' . $value . '"/>';			}		}		// Members		$member_list = "";		if (!empty($members))		{			foreach ($members as $member)			{				if ($member['type'] == "node")				{					$member_list .= '<member type="' . $member['type'] . '" role="' . $member['role'] . '" ref="' . $member['ref'] . '"/>';				}				elseif ($member['type'] == "way")				{					$member_list .= '<member type="' . $member['type'] . '" ref="' . $member['ref'] . '"/>';				}			}		}		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<relation relation="' . $changeset . '" >'					. $tag_list					. $member_list .				'</relation>			</osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to read an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function readElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to update an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   string  $xml      full reperentation of the element with a version number	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function updateElement($element, $xml, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to delete an element [node|way|relation]	 * 	 * @param   string  $element    [node|way|relation]	 * @param   int     $id         element identifier	 * @param   int     $version    element versioln	 * @param   int     $changeset  changeset identifier	 * @param   float   $latitude   latitude of the element	 * @param   float   $longitude  longitude of the element	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function deleteElement($element, $id, $version, $changeset, $latitude=null, $longitude=null)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Create xml		$xml = '<?xml version="1.0" encoding="UTF-8"?>				<osm version="0.6" generator="JOpenstreetmap">				<' . $element . ' id="' . $id . '" version="' . $version . '" changeset="' . $changeset . '"';		if (!empty($latitude) && !empty($longitude))		{			$xml .= ' lat="' . $latitude . '" lon="' . $longitude . '"';		}		$xml .= '/></osm>';		$header['Content-Type'] = 'text/xml';		// Send the request.		$response = $this->oauth->oauthRequest($path, 'DELETE', $parameters, $xml, $header);		return $response->body;	}	/**	 * Method to get history of an element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function historyOfElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/history';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get details about a version of an element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * @param   int     $version  element version	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function versionOfElement($element, $id ,$version)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/' . $version;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get data about multiple ids of an element [node|way|relation]	 *	 * @param   string  $element  [nodes|ways|relations] - use plural word	 * @param   string  $params   Comma separated list ids belongto type $element	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function multiFetchElements($element, $params)	{		if ($element != 'nodes' && $element != 'ways' && $element != 'relations')		{			throw new DomainException("Element should be nodes, ways or relations");		}		// Get singular word		$single_element = substr($element, 0, strlen($element) - 1);		// Set the API base, $params is a string with comma seperated values		$base = $element . '?' . $element . "=" . $params;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$single_element;	}	/**	 * Method to get relations for an Element [node|way|relation]	 *	 * @param   string  $element  [node|way|relation]	 * @param   int     $id       element identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function relationsForElement($element, $id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/relations';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->$element;	}	/**	 * Method to get ways for a Node element	 *	 * @param   int  $id  node identifier	 * 	 * @return  array    The xml response	 * 	 * @since   13.1	 */	public function waysForNode($id)	{		// Set the API base		$base = 'node/' . $id . '/ways';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->way;	}	/**	 * Method to get full information about an element [way|relation]	 *	 * @param   string  $element  [way|relation]	 * @param   int     $id       identifier	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function fullElement($element, $id)	{		if ($element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a way or a relation");		}		// Set the API base		$base = $element . '/' . $id . '/full';		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$xml_string = $this->sendRequest($path);		return $xml_string->node;	}	/**	 * Method used by the DWG to hide old versions of elements containing data privacy or copyright infringements	 *  	 * @param   string  $element       [node|way|relation]	 * @param   int     $id            element identifier	 * @param   int     $version       element version	 * @param   int     $redaction_id  redaction id	 * 	 * @return  array   The xml response	 * 	 * @since   13.1	 * @throws  DomainException	 */	public function redaction($element, $id, $version, $redaction_id)	{		if ($element != 'node' && $element != 'way' && $element != 'relation')		{			throw new DomainException("Element should be a node, a way or a relation");		}		$token = $this->oauth->getToken();		// Set parameters.		$parameters = array(				'oauth_token' => $token['key']		);		// Set the API base		$base = $element . '/' . $id . '/' . $version . '/redact?redaction=' . $redaction_id;		// Build the request path.		$path = $this->getOption('api.url') . $base;		// Send the request.		$response = $this->oauth->oauthRequest($path, 'PUT', $parameters);		$xml_string = simplexml_load_string($response->body);		return $xml_string;	}}
<?php/** * @package     Joomla.Platform * @subpackage  Cache * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Memcached cache storage handler * * @package     Joomla.Platform * @subpackage  Cache * @see         http://php.net/manual/en/book.memcached.php * @since       12.1 */class JCacheStorageMemcached extends JCacheStorage{	/**	 * @var    Memcached	 * @since  12.1	 */	protected static $_db = null;	/**	 * @var    boolean	 * @since  12.1	 */	protected $_persistent = false;	/**	 * @var	 * @since   12.1	 */	protected $_compress = 0;	/**	 * Constructor	 *	 * @param   array  $options  Optional parameters.	 *	 * @since   12.1	 */	public function __construct($options = array())	{		parent::__construct($options);		if (self::$_db === null)		{			$this->getConnection();		}	}	/**	 * Return memcached connection object	 *	 * @return  object   memcached connection object	 *	 * @since   12.1	 * @throws  RuntimeException	 */	protected function getConnection()	{		if ((extension_loaded('memcached') && class_exists('Memcached')) != true)		{			return false;		}		$config = JFactory::getConfig();		$this->_persistent = $config->get('memcache_persist', true);		$this->_compress = $config->get('memcache_compress', false) == false ? 0 : Memcached::OPT_COMPRESSION;		/*		 * This will be an array of loveliness		 * @todo: multiple servers		 * $servers	= (isset($params['servers'])) ? $params['servers'] : array();		 */		$server = array();		$server['host'] = $config->get('memcache_server_host', 'localhost');		$server['port'] = $config->get('memcache_server_port', 11211);		// Create the memcache connection		if ($this->_persistent)		{			$session = JFactory::getSession();			self::$_db = new Memcached($session->getId());		}		else		{			self::$_db = new Memcached;		}		$memcachedtest = self::$_db->addServer($server['host'], $server['port']);		if ($memcachedtest == false)		{			throw new RuntimeException('Could not connect to memcached server', 404);		}		self::$_db->setOption(Memcached::OPT_COMPRESSION, $this->_compress);		// Memcached has no list keys, we do our own accounting, initialise key index		if (self::$_db->get($this->_hash . '-index') === false)		{			$empty = array();			self::$_db->set($this->_hash . '-index', $empty, 0);		}		return;	}	/**	 * Get cached data from memcached by id and group	 *	 * @param   string   $id         The cache data id	 * @param   string   $group      The cache data group	 * @param   boolean  $checkTime  True to verify cache time expiration threshold	 *	 * @return  mixed  Boolean false on failure or a cached data string	 *	 * @since   12.1	 */	public function get($id, $group, $checkTime = true)	{		$cache_id = $this->_getCacheId($id, $group);		$back = self::$_db->get($cache_id);		return $back;	}	/**	 * Get all cached data	 *	 * @return  array    data	 *	 * @since   12.1	 */	public function getAll()	{		parent::getAll();		$keys = self::$_db->get($this->_hash . '-index');		$secret = $this->_hash;		$data = array();		if (!empty($keys) && is_array($keys))		{			foreach ($keys as $key)			{				if (empty($key))				{					continue;				}				$namearr = explode('-', $key->name);				if ($namearr !== false && $namearr[0] == $secret && $namearr[1] == 'cache')				{					$group = $namearr[2];					if (!isset($data[$group]))					{						$item = new JCacheStorageHelper($group);					}					else					{						$item = $data[$group];					}					$item->updateSize($key->size / 1024);					$data[$group] = $item;				}			}		}		return $data;	}	/**	 * Store the data to memcached by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 * @param   string  $data   The data to store in cache	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   12.1	 */	public function store($id, $group, $data)	{		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$tmparr = new stdClass;		$tmparr->name = $cache_id;		$tmparr->size = strlen($data);		$index[] = $tmparr;		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		// Prevent double writes, write only if it doesn't exist else replace		if (!self::$_db->replace($cache_id, $data, $this->_lifetime))		{			self::$_db->set($cache_id, $data, $this->_lifetime);		}		return true;	}	/**	 * Remove a cached data entry by id and group	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   12.1	 */	public function remove($id, $group)	{		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		foreach ($index as $key => $value)		{			if ($value->name == $cache_id)			{				unset($index[$key]);			}			break;		}		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		return self::$_db->delete($cache_id);	}	/**	 * Clean cache for a group given a mode.	 *	 * @param   string  $group  The cache data group	 * @param   string  $mode   The mode for cleaning cache [group|notgroup]	 * group mode    : cleans all cache in the group	 * notgroup mode : cleans all cache not in the group	 *	 * @return  boolean  True on success, false otherwise	 *	 * @since   12.1	 */	public function clean($group, $mode = null)	{		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$secret = $this->_hash;		foreach ($index as $key => $value)		{			if (strpos($value->name, $secret . '-cache-' . $group . '-') === 0 xor $mode != 'group')			{				self::$_db->delete($value->name, 0);				unset($index[$key]);			}		}		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		return true;	}	/**	 * Test to see if the cache storage is available.	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public static function isSupported()	{		if ((extension_loaded('memcached') && class_exists('Memcached')) != true)		{			return false;		}		$config = JFactory::getConfig();		$host = $config->get('memcache_server_host', 'localhost');		$port = $config->get('memcache_server_port', 11211);		$memcached = new Memcached;		$memcachedtest = @$memcached->addServer($host, $port);		if (!$memcachedtest)		{			return false;		}		else		{			return true;		}	}	/**	 * Lock cached item - override parent as this is more efficient	 *	 * @param   string   $id        The cache data id	 * @param   string   $group     The cache data group	 * @param   integer  $locktime  Cached item max lock time	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public function lock($id, $group, $locktime)	{		$returning = new stdClass;		$returning->locklooped = false;		$looptime = $locktime * 10;		$cache_id = $this->_getCacheId($id, $group);		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		$tmparr = new stdClass;		$tmparr->name = $cache_id;		$tmparr->size = 1;		$index[] = $tmparr;		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		$data_lock = self::$_db->add($cache_id . '_lock', 1, $locktime);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.			// That implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					$returning->locked = false;					$returning->locklooped = true;					break;				}				usleep(100);				$data_lock = self::$_db->add($cache_id . '_lock', 1, $locktime);				$lock_counter++;			}		}		$returning->locked = $data_lock;		return $returning;	}	/**	 * Unlock cached item - override parent for cacheid compatibility with lock	 *	 * @param   string  $id     The cache data id	 * @param   string  $group  The cache data group	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	public function unlock($id, $group = null)	{		$cache_id = $this->_getCacheId($id, $group) . '_lock';		if (!$this->lockindex())		{			return false;		}		$index = self::$_db->get($this->_hash . '-index');		if ($index === false)		{			$index = array();		}		foreach ($index as $key => $value)		{			if ($value->name == $cache_id)			{				unset($index[$key]);			}			break;		}		self::$_db->replace($this->_hash . '-index', $index, 0);		$this->unlockindex();		return self::$_db->delete($cache_id);	}	/**	 * Lock cache index	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	protected function lockindex()	{		$looptime = 300;		$data_lock = self::$_db->add($this->_hash . '-index_lock', 1, 30);		if ($data_lock === false)		{			$lock_counter = 0;			// Loop until you find that the lock has been released.  that implies that data get from other thread has finished			while ($data_lock === false)			{				if ($lock_counter > $looptime)				{					return false;					break;				}				usleep(100);				$data_lock = self::$_db->add($this->_hash . '-index_lock', 1, 30);				$lock_counter++;			}		}		return true;	}	/**	 * Unlock cache index	 *	 * @return  boolean  True on success, false otherwise.	 *	 * @since   12.1	 */	protected function unlockindex()	{		return self::$_db->delete($this->_hash . '-index_lock');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Feed Parser class. * * @package     Joomla.Platform * @subpackage  Feed * @since       12.3 */abstract class JFeedParser{	/**	 * @var    string  The feed element name for the entry elements.	 * @since  12.3	 */	protected $entryElementName = 'entry';	/**	 * @var    array	 * @since  12.3	 */	protected $namespaces = array();	/**	 * @var    XMLReader	 * @since  12.3	 */	protected $stream;	/**	 * Constructor.	 *	 * @param   XMLReader  $stream  The XMLReader stream object for the feed.	 *	 * @since   12.3	 */	public function __construct(XMLReader $stream)	{		$this->stream  = $stream;	}	/**	 * Method to parse the feed into a JFeed object.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function parse()	{		$feed = new JFeed;		// Detect the feed version.		$this->initialise();		// Let's get this party started...		do		{			// Expand the element for processing.			$el = new SimpleXMLElement($this->stream->readOuterXml());			// Get the list of namespaces used within this element.			$ns = $el->getNamespaces(true);			// Get an array of available namespace objects for the element.			$namespaces = array();			foreach ($ns as $prefix => $uri)			{				// Ignore the empty namespace prefix.				if (empty($prefix))				{					continue;				}				// Get the necessary namespace objects for the element.				$namespace = $this->fetchNamespace($prefix);				if ($namespace)				{					$namespaces[] = $namespace;				}			}			// Process the element.			$this->processElement($feed, $el, $namespaces);			// Skip over this element's children since it has been processed.			$this->moveToClosingElement();		}		while ($this->moveToNextElement());		return $feed;	}	/**	 * Method to register a namespace handler object.	 *	 * @param   string                $prefix     The XML namespace prefix for which to register the namespace object.	 * @param   JFeedParserNamespace  $namespace  The namespace object to register.	 *	 * @return  JFeed	 *	 * @since   12.3	 */	public function registerNamespace($prefix, JFeedParserNamespace $namespace)	{		$this->namespaces[$prefix] = $namespace;		return $this;	}	/**	 * Method to initialise the feed for parsing.  If child parsers need to detect versions or other	 * such things this is where you'll want to implement that logic.	 *	 * @return  void	 *	 * @since   12.3	 */	abstract protected function initialise();	/**	 * Method to parse a specific feed element.	 *	 * @param   JFeed             $feed        The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el          The current XML element object to handle.	 * @param   array             $namespaces  The array of relevant namespace objects to process for the element.	 *	 * @return  void	 *	 * @since   12.3	 */	protected function processElement(JFeed $feed, SimpleXMLElement $el, array $namespaces)	{		// Build the internal method name.		$method = 'handle' . ucfirst($el->getName());		// If we are dealing with an item then it is feed entry time.		if ($el->getName() == $this->entryElementName)		{			// Create a new feed entry for the item.			$entry = new JFeedEntry;			// First call the internal method.			$this->processFeedEntry($entry, $el);			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeedEntry($entry, $el);				}			}			// Add the new entry to the feed.			$feed->addEntry($entry);		}		// Otherwise we treat it like any other element.		else		{			// First call the internal method.			if (is_callable(array($this, $method)))			{				$this->$method($feed, $el);			}			foreach ($namespaces as $namespace)			{				if ($namespace instanceof JFeedParserNamespace)				{					$namespace->processElementForFeed($feed, $el);				}			}		}	}	/**	 * Method to get a namespace object for a given namespace prefix.	 *	 * @param   string  $prefix  The XML prefix for which to fetch the namespace object.	 *	 * @return  mixed  JFeedParserNamespace or false if none exists.	 *	 * @since   12.3	 */	protected function fetchNamespace($prefix)	{		if (isset($this->namespaces[$prefix]))		{			return $this->namespaces[$prefix];		}		$className = get_class($this) . ucfirst($prefix);		if (class_exists($className))		{			$this->namespaces[$prefix] = new $className;			return $this->namespaces[$prefix];		}		return false;	}	/**	 * Method to move the stream parser to the next XML element node.	 *	 * @param   string  $name  The name of the element for which to move the stream forward until is found.	 *	 * @return  boolean  True if the stream parser is on an XML element node.	 *	 * @since   12.3	 */	protected function moveToNextElement($name = null)	{		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// As soon as we get to the next ELEMENT node we are done.			if ($this->stream->nodeType == XMLReader::ELEMENT)			{				// If we are looking for a specific name make sure we have it.				if (isset($name) && ($this->stream->name != $name))				{					continue;				}				return true;			}		}		return false;	}	/**	 * Method to move the stream parser to the closing XML node of the current element.	 *	 * @return  void	 *	 * @since   12.3	 * @throws  RuntimeException  If the closing tag cannot be found.	 */	protected function moveToClosingElement()	{		// If we are on a self-closing tag then there is nothing to do.		if ($this->stream->isEmptyElement)		{			return;		}		// Get the name and depth for the current node so that we can match the closing node.		$name  = $this->stream->name;		$depth = $this->stream->depth;		// Only keep looking until the end of the stream.		while ($this->stream->read())		{			// If we have an END_ELEMENT node with the same name and depth as the node we started with we have a bingo. :-)			if (($this->stream->name == $name) && ($this->stream->depth == $depth) && ($this->stream->nodeType == XMLReader::END_ELEMENT))			{				return;			}		}		throw new RuntimeException('Unable to find the closing XML node.');	}}
<?php/** * @package     Joomla.Platform * @subpackage  Log * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * Joomla! MySQL Database Log class * * This class is designed to output logs to a specific MySQL database table. Fields in this * table are based on the Syslog style of log output. This is designed to allow quick and * easy searching. * * @package     Joomla.Platform * @subpackage  Log * @since       11.1 */class JLogLoggerDatabase extends JLogLogger{	/**	 * @var    string  The name of the database driver to use for connecting to the database.	 * @since  11.1	 */	protected $driver = 'mysqli';	/**	 * @var    string  The host name (or IP) of the server with which to connect for the logger.	 * @since  11.1	 */	protected $host = '127.0.0.1';	/**	 * @var    string  The database server user to connect as for the logger.	 * @since  11.1	 */	protected $user = 'root';	/**	 * @var    string  The password to use for connecting to the database server.	 * @since  11.1	 */	protected $password = '';	/**	 * @var    string  The name of the database table to use for the logger.	 * @since  11.1	 */	protected $database = 'logging';	/**	 * @var    string  The database table to use for logging entries.	 * @since  11.1	 */	protected $table = 'jos_';	/**	 * @var    JDatabaseDriver  The database driver object for the logger.	 * @since  11.1	 */	protected $db;	/**	 * Constructor.	 *	 * @param   array  &$options  Log object options.	 *	 * @since   11.1	 */	public function __construct(array &$options)	{		// Call the parent constructor.		parent::__construct($options);		// If both the database object and driver options are empty we want to use the system database connection.		if (empty($this->options['db_driver']))		{			$this->db = JFactory::getDbo();			$this->driver = null;			$this->host = null;			$this->user = null;			$this->password = null;			$this->database = null;			$this->prefix = null;		}		else		{			$this->db = null;			$this->driver = (empty($this->options['db_driver'])) ? 'mysqli' : $this->options['db_driver'];			$this->host = (empty($this->options['db_host'])) ? '127.0.0.1' : $this->options['db_host'];			$this->user = (empty($this->options['db_user'])) ? 'root' : $this->options['db_user'];			$this->password = (empty($this->options['db_pass'])) ? '' : $this->options['db_pass'];			$this->database = (empty($this->options['db_database'])) ? 'logging' : $this->options['db_database'];			$this->prefix = (empty($this->options['db_prefix'])) ? 'jos_' : $this->options['db_prefix'];		}		// The table name is independent of how we arrived at the connection object.		$this->table = (empty($this->options['db_table'])) ? '#__log_entries' : $this->options['db_table'];	}	/**	 * Method to add an entry to the log.	 *	 * @param   JLogEntry  $entry  The log entry object to add to the log.	 *	 * @return  void	 *	 * @since   11.1	 */	public function addEntry(JLogEntry $entry)	{		// Connect to the database if not connected.		if (empty($this->db))		{			$this->connect();		}		// Convert the date.		$entry->date = $entry->date->toSql(false, $this->db);		$this->db->insertObject($this->table, $entry);	}	/**	 * Method to connect to the database server based on object properties.	 *	 * @return  void	 *	 * @since   11.1	 * @throws  RuntimeException	 */	protected function connect()	{		// Build the configuration object to use for JDatabaseDriver.		$options = array(			'driver' => $this->driver,			'host' => $this->host,			'user' => $this->user,			'password' => $this->password,			'database' => $this->database,			'prefix' => $this->prefix);		$db = JDatabaseDriver::getInstance($options);		// Assign the database connector to the class.		$this->db = $db;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_finder * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('_JEXEC') or die;JLoader::register('FinderHelperLanguage', JPATH_ADMINISTRATOR . '/components/com_finder/helpers/language.php');/** * Groups view class for Finder. * * @package     Joomla.Administrator * @subpackage  com_finder * @since       2.5 */class FinderViewMaps extends JViewLegacy{	/**	 * Method to display the view.	 *	 * @param   string  $tpl  A template file to load. [optional]	 *	 * @return  mixed  A string if successful, otherwise a JError object.	 *	 * @since   2.5	 */	public function display($tpl = null)	{		// Load plug-in language files.		FinderHelperLanguage::loadPluginLanguage();		// Load the view data.		$this->items		= $this->get('Items');		$this->total		= $this->get('Total');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		FinderHelper::addSubmenu('maps');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		JHtml::addIncludePath(JPATH_COMPONENT . '/helpers/html');		// Prepare the view.		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Method to configure the toolbar for this view.	 *	 * @return  void	 *	 * @since   2.5	 */	protected function addToolbar()	{		// For whatever reason, the helper isn't being found		include_once JPATH_COMPONENT . '/helpers/finder.php';		$canDo	= FinderHelper::getActions();		JToolbarHelper::title(JText::_('COM_FINDER_MAPS_TOOLBAR_TITLE'), 'finder');		$toolbar = JToolbar::getInstance('toolbar');		if ($canDo->get('core.edit.state'))		{			JToolbarHelper::publishList('maps.publish');			JToolbarHelper::unpublishList('maps.unpublish');			JToolbarHelper::divider();		}		if ($canDo->get('core.delete'))		{			JToolbarHelper::deleteList('', 'maps.delete');			JToolbarHelper::divider();		}		if ($canDo->get('core.admin'))		{			JToolbarHelper::preferences('com_finder');		}		JToolbarHelper::divider();		$toolbar->appendButton('Popup', 'stats', 'COM_FINDER_STATISTICS', 'index.php?option=com_finder&view=statistics&tmpl=component', 550, 350);		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_FINDER_MANAGE_CONTENT_MAPS');		JHtmlSidebar::setAction('index.php?option=com_finder&view=maps');		JHtmlSidebar::addFilter(			'',			'filter_branch',			JHtml::_('select.options', JHtml::_('finder.mapslist'), 'value', 'text', $this->state->get('filter.branch')),			true		);		JHtmlSidebar::addFilter(			JText::_('COM_FINDER_INDEX_FILTER_BY_STATE'),			'filter_state',			JHtml::_('select.options', JHtml::_('finder.statelist'), 'value', 'text', $this->state->get('filter.state'))		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Feed * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * RSS Feed Parser Namespace handler for iTunes. * * @package     Joomla.Platform * @subpackage  Feed * @see         http://www.apple.com/itunes/podcasts/specs.html * @since       12.3 */class JFeedParserRssItunes implements JFeedParserNamespace{	/**	 * Method to handle an element for the feed given that the itunes namespace is present.	 *	 * @param   JFeed             $feed  The JFeed object being built from the parsed feed.	 * @param   SimpleXMLElement  $el    The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeed(JFeed $feed, SimpleXMLElement $el)	{	}	/**	 * Method to handle the feed entry element for the feed given that the itunes namespace is present.	 *	 * @param   JFeedEntry        $entry  The JFeedEntry object being built from the parsed feed entry.	 * @param   SimpleXMLElement  $el     The current XML element object to handle.	 *	 * @return  void	 *	 * @since   12.3	 */	public function processElementForFeedEntry(JFeedEntry $entry, SimpleXMLElement $el)	{	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a user group. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewGroup extends JViewLegacy{	protected $form;	protected $item;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user  = JFactory::getUser();		$isNew = ($this->item->id == 0);		$canDo = UsersHelper::getActions();		JToolbarHelper::title(JText::_($isNew ? 'COM_USERS_VIEW_NEW_GROUP_TITLE' : 'COM_USERS_VIEW_EDIT_GROUP_TITLE'), 'groups-add');		if ($canDo->get('core.edit') || $canDo->get('core.create'))		{			JToolbarHelper::apply('group.apply');			JToolbarHelper::save('group.save');		}		if ($canDo->get('core.create'))		{			JToolbarHelper::save2new('group.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('group.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('group.cancel');		}		else		{			JToolbarHelper::cancel('group.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_USERS_GROUPS_EDIT');	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_menus * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * The Menu Item Controller * * @package     Joomla.Administrator * @subpackage  com_menus * @since       1.6 */class MenusControllerItem extends JControllerForm{	/**	 * Method to add a new menu item.	 *	 * @return  mixed  True if the record can be added, a JError object if not.	 *	 * @since   1.6	 */	public function add()	{		$app = JFactory::getApplication();		$context = 'com_menus.edit.item';		$result = parent::add();		if ($result)		{			$app->setUserState($context . '.type', null);			$app->setUserState($context . '.link', null);			$menuType = $app->getUserStateFromRequest($this->context . '.filter.menutype', 'menutype', 'mainmenu', 'cmd');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=item&menutype=' . $menuType . $this->getRedirectToItemAppend(), false));		}		return $result;	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean	 True if successful, false otherwise and internal error is set.	 *	 * @since   1.6	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$model = $this->getModel('Item', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Method to cancel an edit.	 *	 * @param   string  $key  The name of the primary key of the URL variable.	 *	 * @return  boolean  True if access level checks pass, false otherwise.	 *	 * @since   1.6	 */	public function cancel($key = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app = JFactory::getApplication();		$context = 'com_menus.edit.item';		$result = parent::cancel();		if ($result)		{			// Clear the ancillary data from the session.			$app->setUserState($context . '.type', null);			$app->setUserState($context . '.link', null);		}	}	/**	 * Method to edit an existing record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key	 * (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if access level check and checkout passes, false otherwise.	 *	 * @since   1.6	 */	public function edit($key = null, $urlVar = null)	{		$app = JFactory::getApplication();		$result = parent::edit();		if ($result)		{			// Push the new ancillary data into the session.			$app->setUserState('com_menus.edit.item.type', null);			$app->setUserState('com_menus.edit.item.link', null);		}		return true;	}	/**	 * Method to save a record.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = null)	{		// Check for request forgeries.		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		$app      = JFactory::getApplication();		$model    = $this->getModel('Item', '', array());		$data     = $this->input->post->get('jform', array(), 'array');		$task     = $this->getTask();		$context  = 'com_menus.edit.item';		$recordId = $this->input->getInt('id');		if (!$this->checkEditId($context, $recordId))		{			// Somehow the person just went to the form and saved it - we don't allow that.			$this->setError(JText::sprintf('JLIB_APPLICATION_ERROR_UNHELD_ID', $recordId));			$this->setMessage($this->getError(), 'error');			$this->setRedirect(JRoute::_('index.php?option=com_menus&view=items' . $this->getRedirectToListAppend(), false));			return false;		}		// Populate the row id from the session.		$data['id'] = $recordId;		// The save2copy task needs to be handled slightly differently.		if ($task == 'save2copy')		{			// Check-in the original row.			if ($model->checkin($data['id']) === false)			{				// Check-in failed, go back to the item and display a notice.				$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()), 'warning');				return false;			}			// Reset the ID and then treat the request as for Apply.			$data['id'] = 0;			$data['associations'] = array();			$task = 'apply';		}		// Validate the posted data.		// This post is made up of two forms, one for the item and one for params.		$form = $model->getForm($data);		if (!$form)		{			JError::raiseError(500, $model->getError());			return false;		}		$data = $model->validate($form, $data);		// Check for the special 'request' entry.		if ($data['type'] == 'component' && isset($data['request']) && is_array($data['request']) && !empty($data['request']))		{			// Parse the submitted link arguments.			$args = array();			parse_str(parse_url($data['link'], PHP_URL_QUERY), $args);			// Merge in the user supplied request arguments.			$args = array_merge($args, $data['request']);			$data['link'] = 'index.php?' . urldecode(http_build_query($args, '', '&'));			unset($data['request']);		}		// Check for validation errors.		if ($data === false)		{			// Get the validation messages.			$errors = $model->getErrors();			// Push up to three validation messages out to the user.			for ($i = 0, $n = count($errors); $i < $n && $i < 3; $i++)			{				if ($errors[$i] instanceof Exception)				{					$app->enqueueMessage($errors[$i]->getMessage(), 'warning');				}				else				{					$app->enqueueMessage($errors[$i], 'warning');				}			}			// Save the data in the session.			$app->setUserState('com_menus.edit.item.data', $data);			// Redirect back to the edit screen.			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		// Attempt to save the data.		if (!$model->save($data))		{			// Save the data in the session.			$app->setUserState('com_menus.edit.item.data', $data);			// Redirect back to the edit screen.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_SAVE_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		// Save succeeded, check-in the row.		if ($model->checkin($data['id']) === false)		{			// Check-in failed, go back to the row and display a notice.			$this->setMessage(JText::sprintf('JLIB_APPLICATION_ERROR_CHECKIN_FAILED', $model->getError()), 'warning');			$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));			return false;		}		$this->setMessage(JText::_('COM_MENUS_SAVE_SUCCESS'));		// Redirect the user and adjust session state based on the chosen task.		switch ($task)		{			case 'apply':				// Set the row data in the session.				$recordId = $model->getState($this->context . '.id');				$this->holdEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));				break;			case 'save2new':				// Clear the row id and data in the session.				$this->releaseEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				$app->setUserState('com_menus.edit.item.menutype', $model->getState('item.menutype'));				// Redirect back to the edit screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend(), false));				break;			default:				// Clear the row id and data in the session.				$this->releaseEditId($context, $recordId);				$app->setUserState('com_menus.edit.item.data', null);				$app->setUserState('com_menus.edit.item.type', null);				$app->setUserState('com_menus.edit.item.link', null);				// Redirect to the list screen.				$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_list . $this->getRedirectToListAppend(), false));				break;		}	}	/**	 * Sets the type of the menu item currently being edited.	 *	 * @return  void	 *	 * @since   1.6	 */	public function setType()	{		$app = JFactory::getApplication();		// Get the posted values from the request.		$data = $this->input->post->get('jform', array(), 'array');		$recordId = $this->input->getInt('id');		// Get the type.		$type = $data['type'];		$type = json_decode(base64_decode($type));		$title = isset($type->title) ? $type->title : null;		$recordId = isset($type->id) ? $type->id : 0;		$specialTypes = array('alias', 'separator', 'url', 'heading');		if (!in_array($title, $specialTypes))		{			$title = 'component';		}		$app->setUserState('com_menus.edit.item.type', $title);		if ($title == 'component')		{			if (isset($type->request))			{				$component = JComponentHelper::getComponent($type->request->option);				$data['component_id'] = $component->id;				$app->setUserState('com_menus.edit.item.link', 'index.php?' . JURI::buildQuery((array) $type->request));			}		}		// If the type is alias you just need the item id from the menu item referenced.		elseif ($title == 'alias')		{			$app->setUserState('com_menus.edit.item.link', 'index.php?Itemid=');		}		unset($data['request']);		$data['type'] = $title;		if ($this->input->get('fieldtype') == 'type')		{			$data['link'] = $app->getUserState('com_menus.edit.item.link');		}		//Save the data in the session.		$app->setUserState('com_menus.edit.item.data', $data);		$this->type = $type;		$this->setRedirect(JRoute::_('index.php?option=' . $this->option . '&view=' . $this->view_item . $this->getRedirectToItemAppend($recordId), false));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugGroup extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->group		= $this->get('Group');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_GROUP_TITLE', $this->group->id, $this->group->title), 'groups');		JToolbarHelper::help('JHELP_USERS_DEBUG_GROUPS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuggroup&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Facebook * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die();/** * Facebook API User class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  Facebook * * @see         http://developers.facebook.com/docs/reference/api/event/ * @since       13.1 */class JFacebookEvent extends JFacebookObject{	/**	 * Method to get information about an event visible to the current user. Requires authentication.	 *	 * @param   string  $event  The event id.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getEvent($event)	{		return $this->get($event);	}	/**	 * Method to get the event's wall. Requires authentication.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getFeed($event, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($event, 'feed', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a link on event's feed which the current_user is or maybe attending. Requires authentication and publish_stream permission.	 *	 * @param   string  $event    The event id.	 * @param   string  $link     Link URL.	 * @param   string  $message  Link message.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createLink($event, $link, $message = null)	{		// Set POST request parameters.		$data = array();		$data['link'] = $link;		$data['message'] = $message;		return $this->createConnection($event, 'feed', $data);	}	/**	 * Method to delete a link. Requires authentication and publish_stream permission.	 *	 * @param   mixed  $link  The Link ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteLink($link)	{		return $this->deleteConnection($link);	}	/**	 * Method to post on event's wall. Message or link parameter is required. Requires authentication and publish_stream permission.	 *	 * @param   string  $event        The event id.	 * @param   string  $message      Post message.	 * @param   string  $link         Post URL.	 * @param   string  $picture      Post thumbnail image (can only be used if link is specified)	 * @param   string  $name         Post name (can only be used if link is specified).	 * @param   string  $caption      Post caption (can only be used if link is specified).	 * @param   string  $description  Post description (can only be used if link is specified).	 * @param   array   $actions      Post actions array of objects containing name and link.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPost($event, $message = null, $link = null, $picture = null, $name = null, $caption = null,		$description = null, $actions = null)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		$data['link'] = $link;		$data['name'] = $name;		$data['caption'] = $caption;		$data['description'] = $description;		$data['actions'] = $actions;		$data['picture'] = $picture;		return $this->createConnection($event, 'feed', $data);	}	/**	 * Method to delete a post. Note: you can only delete the post if it was created by the current user.	 * Requires authentication and publish_stream permission.	 *	 * @param   string  $post  The Post ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deletePost($post)	{		return $this->deleteConnection($post);	}	/**	 * Method to post a status message on behalf of the user on the event's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $event    The event id.	 * @param   string  $message  Status message content.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createStatus($event, $message)	{		// Set POST request parameters.		$data = array();		$data['message'] = $message;		return $this->createConnection($event, 'feed', $data);	}	/**	 * Method to delete a status. Note: you can only delete the post if it was created by the current user.	 * Requires authentication and publish_stream permission.	 *	 * @param   string  $status  The Status ID.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteStatus($status)	{		return $this->deleteConnection($status);	}	/**	 * Method to get the list of invitees for the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getInvited($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'invited', '', $limit, $offset);	}	/**	 * Method to check if a user is invited to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isInvited($event, $user)	{		return $this->getConnection($event, 'invited/' . $user);	}	/**	 * Method to invite users to the event. Requires authentication and create_event permission.	 *	 * @param   string  $event  The event id.	 * @param   string  $users  Comma separated list of user ids.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createInvite($event, $users)	{		// Set POST request parameters.		$data = array();		$data['users'] = $users;		return $this->createConnection($event, 'invited', $data);	}	/**	 * Method to delete a invitation. Note: you can only delete the invite if the current user is the event admin.	 * Requires authentication and rsvp_event permission.	 *	 * @param   string  $event  The event id.	 * @param   string  $user   The user id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function deleteInvite($event, $user)	{		return $this->deleteConnection($event, 'invited/' . $user);	}	/**	 * Method to get the list of attending users. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getAttending($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'attending', '', $limit, $offset);	}	/**	 * Method to check if a user is attending an event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isAttending($event, $user)	{		return $this->getConnection($event, 'attending/' . $user);	}	/**	 * Method to set the current user as attending. Requires authentication and rsvp_event permission.	 *	 * @param   string  $event  The event id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createAttending($event)	{		return $this->createConnection($event, 'attending');	}	/**	 * Method to get the list of maybe attending users. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getMaybe($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'maybe', '', $limit, $offset);	}	/**	 * Method to check if a user is maybe attending an event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isMaybe($event, $user)	{		return $this->getConnection($event, 'maybe/' . $user);	}	/**	 * Method to set the current user as maybe attending. Requires authentication and rscp_event permission.	 *	 * @param   string  $event  The event id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createMaybe($event)	{		return $this->createConnection($event, 'maybe');	}	/**	 * Method to get the list of users which declined the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getDeclined($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'declined', '', $limit, $offset);	}	/**	 * Method to check if a user responded 'no' to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isDeclined($event, $user)	{		return $this->getConnection($event, 'declined/' . $user);	}	/**	 * Method to set the current user as declined. Requires authentication and rscp_event permission.	 *	 * @param   string  $event  The event id.	 *	 * @return  boolean   Returns true if successful, and false otherwise.	 *	 * @since   13.1	 */	public function createDeclined($event)	{		return $this->createConnection($event, 'declined');	}	/**	 * Method to get the list of users which have not replied to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getNoreply($event, $limit = 0, $offset = 0)	{		return $this->getConnection($event, 'noreply', '', $limit, $offset);	}	/**	 * Method to check if a user has not replied to the event. Requires authentication and user_events or friends_events permission.	 *	 * @param   string  $event  The event id.	 * @param   mixed   $user   Either an integer containing the user ID or a string containing the username.	 *	 * @return  array   The decoded JSON response or an empty array if the user is not invited.	 *	 * @since   13.1	 */	public function isNoreply($event, $user)	{		return $this->getConnection($event, 'noreply/' . $user);	}	/**	 * Method to get the event's profile picture. Requires authentication and user_events or friends_events permission.	 *	 * @param   string   $event     The event id.	 * @param   boolean  $redirect  If false this will return the URL of the picture without a 302 redirect.	 * @param   string   $type      To request a different photo use square | small | normal | large.	 *	 * @return  string   The URL to the event's profile picture.	 *	 * @since   13.1	 */	public function getPicture($event, $redirect = true, $type = null)	{		$extra_fields = '';		if ($redirect == false)		{			$extra_fields = '?redirect=false';		}		if ($type)		{			$extra_fields .= (strpos($extra_fields, '?') === false) ? '?type=' . $type : '&type=' . $type;		}		return $this->getConnection($event, 'picture', $extra_fields);	}	/**	 * Method to get photos published on event's wall. Requires authentication.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getPhotos($event, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($event, 'photos', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a photo on event's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $event    The event id.	 * @param   string  $source   Path to photo.	 * @param   string  $message  Photo description.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createPhoto($event, $source, $message = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		if ($message)		{			$data['message'] = $message;		}		return $this->createConnection($event, 'photos', $data, array('Content-Type' => 'multipart/form-data'));	}	/**	 * Method to get videos published on event's wall. Requires authentication.	 *	 * @param   string   $event   The event id.	 * @param   integer  $limit   The number of objects per page.	 * @param   integer  $offset  The object's number on the page.	 * @param   string   $until   A unix timestamp or any date accepted by strtotime.	 * @param   string   $since   A unix timestamp or any date accepted by strtotime.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function getVideos($event, $limit = 0, $offset = 0, $until = null, $since = null)	{		return $this->getConnection($event, 'videos', '', $limit, $offset, $until, $since);	}	/**	 * Method to post a video on event's wall. Requires authentication and publish_stream permission.	 *	 * @param   string  $event        The event id.	 * @param   string  $source       Path to photo.	 * @param   string  $title        Video title.	 * @param   string  $description  Video description.	 *	 * @return  mixed   The decoded JSON response or false if the client is not authenticated.	 *	 * @since   13.1	 */	public function createVideo($event, $source, $title = null, $description = null)	{		// Set POST request parameters.		$data = array();		$data[basename($source)] = '@' . realpath($source);		if ($title)		{			$data['title'] = $title;		}		if ($description)		{			$data['description'] = $description;		}		return $this->createConnection($event, 'videos', $data, array('Content-Type' => 'multipart/form-data'));	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * User controller class. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersControllerUser extends JControllerForm{	/**	 * @var    string  The prefix to use with controller messages.	 * @since  1.6	 */	protected $text_prefix = 'COM_USERS_USER';	/**	 * Overrides JControllerForm::allowEdit	 *	 * Checks that non-Super Admins are not editing Super Admins.	 *	 * @param   array   $data  An array of input data.	 * @param   string  $key   The name of the key for the primary key.	 *	 * @return  boolean  True if allowed, false otherwise.	 *	 * @since   1.6	 */	protected function allowEdit($data = array(), $key = 'id')	{		// Check if this person is a Super Admin		if (JAccess::check($data[$key], 'core.admin'))		{			// If I'm not a Super Admin, then disallow the edit.			if (!JFactory::getUser()->authorise('core.admin'))			{				return false;			}		}		return parent::allowEdit($data, $key);	}	/**	 * Method to run batch operations.	 *	 * @param   object  $model  The model.	 *	 * @return  boolean  True on success, false on failure	 *	 * @since   2.5	 */	public function batch($model = null)	{		JSession::checkToken() or jexit(JText::_('JINVALID_TOKEN'));		// Set the model		$model = $this->getModel('User', '', array());		// Preset the redirect		$this->setRedirect(JRoute::_('index.php?option=com_users&view=users' . $this->getRedirectToListAppend(), false));		return parent::batch($model);	}	/**	 * Overrides parent save method to check the submitted passwords match.	 *	 * @param   string  $key     The name of the primary key of the URL variable.	 * @param   string  $urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).	 *	 * @return  boolean  True if successful, false otherwise.	 *	 * @since   1.6	 */	public function save($key = null, $urlVar = null)	{		$data = $this->input->post->get('jform', array(), 'array');		// TODO: JForm should really have a validation handler for this.		if (isset($data['password']) && isset($data['password2']))		{			// Check the passwords match.			if ($data['password'] != $data['password2'])			{				$this->setMessage(JText::_('JLIB_USER_ERROR_PASSWORD_NOT_MATCH'), 'warning');				$this->setRedirect(JRoute::_('index.php?option=com_users&view=user&layout=edit', false));			}			unset($data['password2']);		}		return parent::save();	}	/**	 * Function that allows child controller access to model data after the data has been saved.	 *	 * @param   JModelLegacy  $model      The data model object.	 * @param   array         $validData  The validated data.	 *	 * @return  void	 *	 * @since   3.1	 */	protected function postSaveHook(JModelLegacy $model, $validData = array())	{		return;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_categories * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Categories helper. * * @package     Joomla.Administrator * @subpackage  com_categories * @since       1.6 */class CategoriesHelper{	/**	 * Configure the Submenu links.	 *	 * @param   string    The extension being used for the categories.	 *	 * @return  void	 * @since   1.6	 */	public static function addSubmenu($extension)	{		// Avoid nonsense situation.		if ($extension == 'com_categories')		{			return;		}		$parts = explode('.', $extension);		$component = $parts[0];		if (count($parts) > 1)		{			$section = $parts[1];		}		// Try to find the component helper.		$eName = str_replace('com_', '', $component);		$file = JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component . '/helpers/' . $eName . '.php');		if (file_exists($file))		{			require_once $file;			$prefix = ucfirst(str_replace('com_', '', $component));			$cName = $prefix . 'Helper';			if (class_exists($cName))			{				if (is_callable(array($cName, 'addSubmenu')))				{					$lang = JFactory::getLanguage();					// loading language file from the administrator/language directory then					// loading language file from the administrator/components/*extension*/language directory					$lang->load($component, JPATH_BASE, null, false, false)						|| $lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), null, false, false)						|| $lang->load($component, JPATH_BASE, $lang->getDefault(), false, false)						|| $lang->load($component, JPath::clean(JPATH_ADMINISTRATOR . '/components/' . $component), $lang->getDefault(), false, false);					call_user_func(array($cName, 'addSubmenu'), 'categories' . (isset($section) ? '.' . $section : ''));				}			}		}	}	/**	 * Gets a list of the actions that can be performed.	 *	 * @param   string    $extension     The extension.	 * @param   integer   $categoryId    The category ID.	 *	 * @return  JObject	 * @since   1.6	 */	public static function getActions($extension, $categoryId = 0)	{		$user = JFactory::getUser();		$result = new JObject;		$parts = explode('.', $extension);		$component = $parts[0];		if (empty($categoryId))		{			$assetName = $component;			$level = 'component';		}		else		{			$assetName = $component . '.category.' . (int) $categoryId;			$level = 'category';		}		$actions = JAccess::getActions($component, $level);		foreach ($actions as $action)		{			$result->set($action->name, $user->authorise($action->name, $assetName));		}		return $result;	}	public static function getAssociations($pk, $extension = 'com_content')	{		$associations = array();		$db = JFactory::getDbo();		$query = $db->getQuery(true)			->from('#__categories as c')			->join('INNER', '#__associations as a ON a.id = c.id AND a.context=' . $db->quote('com_categories.item'))			->join('INNER', '#__associations as a2 ON a.key = a2.key')			->join('INNER', '#__categories as c2 ON a2.id = c2.id AND c2.extension = ' . $db->quote($extension))			->where('c.id =' . (int) $pk)			->where('c.extension = ' . $db->quote($extension));		$select = array(			'c2.language',			$query->concatenate(array('c2.id', 'c2.alias'), ':') . ' AS id'		);		$query->select($select);		$db->setQuery($query);		$contentitems = $db->loadObjectList('language');		// Check for a database error.		if ($error = $db->getErrorMsg())		{			JError::raiseWarning(500, $error);			return false;		}		foreach ($contentitems as $tag => $item)		{			$associations[$tag] = $item->id;		}		return $associations;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_contact * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;echo JLayoutHelper::render('joomla.edit.metadata', $this);
<?php/** * @package     Joomla.Administrator * @subpackage  com_users * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View class for a list of users. * * @package     Joomla.Administrator * @subpackage  com_users * @since       1.6 */class UsersViewDebugUser extends JViewLegacy{	protected $actions;	protected $items;	protected $pagination;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		// Access check.		if (!JFactory::getUser()->authorise('core.manage', 'com_users') || !JFactory::getConfig()->get('debug'))		{			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));		}		$this->actions		= $this->get('DebugActions');		$this->items		= $this->get('Items');		$this->pagination	= $this->get('Pagination');		$this->state		= $this->get('State');		$this->user			= $this->get('User');		$this->levels		= UsersHelperDebug::getLevelsOptions();		$this->components	= UsersHelperDebug::getComponents();		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::sprintf('COM_USERS_VIEW_DEBUG_USER_TITLE', $this->user->id, $this->user->name), 'user');		JToolbarHelper::help('JHELP_USERS_DEBUG_USERS');		JHtmlSidebar::setAction('index.php?option=com_users&view=debuguser&user_id=' . (int) $this->state->get('filter.user_id'));		$option = '';		if (!empty($this->components))		{			$option = JHtml::_('select.options', $this->components, 'value', 'text', $this->state->get('filter.component'));		}		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_COMPONENT'),			'filter_component',			$option		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_START'),			'filter_level_start',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_start'))		);		JHtmlSidebar::addFilter(			JText::_('COM_USERS_OPTION_SELECT_LEVEL_END'),			'filter_level_end',			JHtml::_('select.options', $this->levels, 'value', 'text', $this->state->get('filter.level_end'))		);		$this->sidebar = JHtmlSidebar::render();	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_checkin * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Checkin Model * * @package     Joomla.Administrator * @subpackage  com_checkin * @since       1.6 */class CheckinModelCheckin extends JModelList{	protected $total;	protected $tables;	/**	 * Method to auto-populate the model state.	 *	 * @Note. Calling getState in this method will result in recursion.	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		// List state information.		parent::populateState('table', 'asc');	}	/**	 * Checks in requested tables	 *	 * @param   array  $ids  An array of table names. Optional.	 *	 * @return  integer   Checked in item count	 * @since   1.6	 */	public function checkin($ids = array())	{		$app = JFactory::getApplication();		$db = $this->_db;		$nullDate = $db->getNullDate();		if (!is_array($ids))		{			return;		}		// this int will hold the checked item count		$results = 0;		foreach ($ids as $tn)		{			// make sure we get the right tables based on prefix			if (stripos($tn, $app->getCfg('dbprefix')) !== 0)			{				continue;			}			$fields = $db->getTableColumns($tn);			if (!(isset($fields['checked_out']) && isset($fields['checked_out_time'])))			{				continue;			}			$query = $db->getQuery(true)				->update($db->quoteName($tn))				->set('checked_out = 0')				->set('checked_out_time = ' . $db->quote($nullDate))				->where('checked_out > 0');			if (isset($fields[$tn]['editor']))			{				$query->set('editor = NULL');			}			$db->setQuery($query);			if ($db->execute())			{				$results = $results + $db->getAffectedRows();			}		}		return $results;	}	/**	 * Get total of tables	 *	 * @return  int    Total to check-in tables	 * @since   1.6	 */	public function getTotal()	{		if (!isset($this->total))		{			$this->getItems();		}		return $this->total;	}	/**	 * Get tables	 *	 * @return  array  Checked in table names as keys and checked in item count as values	 * @since   1.6	 */	public function getItems()	{		if (!isset($this->items))		{			$app = JFactory::getApplication();			$db = $this->_db;			$tables = $db->getTableList();			// this array will hold table name as key and checked in item count as value			$results = array();			foreach ($tables as $i => $tn)			{				// make sure we get the right tables based on prefix				if (stripos($tn, $app->getCfg('dbprefix')) !== 0)				{					unset($tables[$i]);					continue;				}				if ($this->getState('filter.search') && stripos($tn, $this->getState('filter.search')) === false)				{					unset($tables[$i]);					continue;				}				$fields = $db->getTableColumns($tn);				if (!(isset($fields['checked_out']) && isset($fields['checked_out_time'])))				{					unset($tables[$i]);					continue;				}			}			foreach ($tables as $tn)			{				$query = $db->getQuery(true)					->select('COUNT(*)')					->from($db->quoteName($tn))					->where('checked_out > 0');				$db->setQuery($query);				if ($db->execute())				{					$results[$tn] = $db->loadResult();				}				else				{					continue;				}			}			$this->total = count($results);			if ($this->getState('list.ordering') == 'table')			{				if ($this->getState('list.direction') == 'asc')				{					ksort($results);				}				else				{					krsort($results);				}			}			else			{				if ($this->getState('list.direction') == 'asc')				{					asort($results);				}				else				{					arsort($results);				}			}			$results = array_slice($results, $this->getState('list.start'), $this->getState('list.limit') ? $this->getState('list.limit') : null);			$this->items = $results;		}		return $this->items;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_languages * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Languages Component Languages Model * * @package     Joomla.Administrator * @subpackage  com_languages * @since       1.6 */class LanguagesModelInstalled extends JModelList{	/**	 * @var object client object	 */	protected $client = null;	/**	 * @var object user object	 */	protected $user = null;	/**	 * @var boolean|JExeption True, if FTP settings should be shown, or an exeption	 */	protected $ftp = null;	/**	 * @var string option name	 */	protected $option = null;	/**	 * @var array languages description	 */	protected $data = null;	/**	 * @var int total number pf languages	 */	protected $total = null;	/**	 * @var int total number pf languages installed	 */	protected $langlist = null;	/**	 * @var string language path	 */	protected $path = null;	/**	 * Method to auto-populate the model state.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @return  void	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		// Load the filter state.		$clientId = $app->input->getInt('client');		$this->setState('filter.client_id', $clientId);		// Load the parameters.		$params = JComponentHelper::getParams('com_languages');		$this->setState('params', $params);		// List state information.		parent::populateState('a.name', 'asc');	}	/**	 * Method to get a store id based on model configuration state.	 *	 * This is necessary because the model is used by the component and	 * different modules that might need different sets of data or different	 * ordering requirements.	 *	 * @param   string  $id	A prefix for the store id.	 *	 * @return  string  A store id.	 * @since   1.6	 */	protected function getStoreId($id = '')	{		// Compile the store id.		$id	.= ':'.$this->getState('filter.client_id');		return parent::getStoreId($id);	}	/**	 * Method to get the client object	 *	 * @return  object	 * @since   1.6	 */	public function &getClient()	{		if (is_null($this->client))		{			$this->client = JApplicationHelper::getClientInfo($this->getState('filter.client_id', 0));		}		return $this->client;	}	/**	 * Method to get the ftp credentials	 *	 * @return  object	 * @since   1.6	 */	public function &getFtp()	{		if (is_null($this->ftp))		{			$this->ftp = JClientHelper::setCredentialsFromRequest('ftp');		}		return $this->ftp;	}	/**	 * Method to get the option	 *	 * @return  object	 * @since   1.6	 */	public function &getOption()	{		$option = $this->getState('option');		return $option;	}	/**	 * Method to get Languages item data	 *	 * @return  array	 * @since   1.6	 */	public function &getData()	{		if (is_null($this->data)) {			// Get information			$path		= $this->getPath();			$client		= $this->getClient();			$langlist   = $this->getLanguageList();			// Compute all the languages			$data	= array ();			foreach ($langlist as $lang) {				$file = $path . '/' . $lang . '/' . $lang.'.xml';				$info = JApplicationHelper::parseXMLLangMetaFile($file);				$row = new JObject;				$row->language = $lang;				if (!is_array($info))				{					continue;				}				foreach ($info as $key => $value)				{					$row->$key = $value;				}				// if current than set published				$params = JComponentHelper::getParams('com_languages');				if ($params->get($client->name, 'en-GB') == $row->language)				{					$row->published	= 1;				}				else {					$row->published = 0;				}				$row->checked_out = 0;				$data[] = $row;			}			usort($data, array($this, 'compareLanguages'));			// Prepare data			$limit = $this->getState('list.limit');			$start = $this->getState('list.start');			$total = $this->getTotal();			if ($limit == 0)			{				$start = 0;				$end = $total;			}			else {				if ($start > $total)				{					$start = $total - $total % $limit;				}				$end = $start + $limit;				if ($end > $total)				{					$end = $total;				}			}			// Compute the displayed languages			$this->data	= array();			for ($i = $start;$i < $end;$i++)			{				$this->data[] = & $data[$i];			}		}		return $this->data;	}	/**	 * Method to get installed languages data.	 *	 * @return  string	An SQL query	 * @since   1.6	 */	protected function getLanguageList()	{		// Create a new db object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$client = $this->getState('filter.client_id');		$type = "language";		// Select field element from the extensions table.		$query->select($this->getState('list.select', 'a.element'))			->from('#__extensions AS a');		$type = $db->quote($type);		$query->where('(a.type = '.$type.')')			->where('state = 0')			->where('enabled = 1')			->where('client_id=' . (int) $client);		// for client_id = 1 do we need to check language table also ?		$db->setQuery($query);		$this->langlist = $db->loadColumn();		return $this->langlist;	}	/**	 * Method to get the total number of Languages items	 *	 * @return  integer	 * @since   1.6	 */	public function getTotal()	{		if (is_null($this->total))		{			$langlist = $this->getLanguageList();			$this->total = count($langlist);		}		return $this->total;	}	/**	 * Method to set the default language	 *	 * @return  boolean	 * @since   1.6	 */	public function publish($cid)	{		if ($cid)		{			$client	= $this->getClient();			$params = JComponentHelper::getParams('com_languages');			$params->set($client->name, $cid);			$table = JTable::getInstance('extension');			$id = $table->find(array('element' => 'com_languages'));			// Load			if (!$table->load($id))			{				$this->setError($table->getError());				return false;			}			$table->params = (string) $params;			// pre-save checks			if (!$table->check())			{				$this->setError($table->getError());				return false;			}			// save the changes			if (!$table->store())			{				$this->setError($table->getError());				return false;			}		}		else		{			$this->setError(JText::_('COM_LANGUAGES_ERR_NO_LANGUAGE_SELECTED'));			return false;		}		// Clean the cache of com_languages and component cache.		$this->cleanCache();		$this->cleanCache('_system');		return true;	}	/**	 * Method to get the folders	 *	 * @return  array  Languages folders	 * @since   1.6	 */	protected function getFolders()	{		if (is_null($this->folders))		{			$path = $this->getPath();			jimport('joomla.filesystem.folder');			$this->folders = JFolder::folders($path, '.', false, false, array('.svn', 'CVS', '.DS_Store', '__MACOSX', 'pdf_fonts', 'overrides'));		}		return $this->folders;	}	/**	 * Method to get the path	 *	 * @return  string	The path to the languages folders	 * @since   1.6	 */	protected function getPath()	{		if (is_null($this->path))		{			$client = $this->getClient();			$this->path = JLanguage::getLanguagePath($client->path);		}		return $this->path;	}	/**	 * Method to compare two languages in order to sort them	 *	 * @param   object	$lang1 the first language	 * @param   object	$lang2 the second language	 *	 * @return  integer	 * @since   1.6	 */	protected function compareLanguages($lang1, $lang2)	{		return strcmp($lang1->name, $lang2->name);	}}
<?php/** * @package     Joomla.Platform * @subpackage  Form * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;JFormHelper::loadFieldClass('text');/** * Form Field class for the Joomla Platform. * Supports a text field telephone numbers. * * @package     Joomla.Platform * @subpackage  Form * @link        http://www.w3.org/TR/html-markup/input.tel.html * @see         JFormRuleTel for telephone number validation * @see         JHtmlTel for rendering of telephone numbers * @since       11.1 */class JFormFieldTel extends JFormFieldText{	/**	 * The form field type.	 *	 * @var    string	 * @since  11.1	 */	protected $type = 'Tel';}
<?php/** * @package     Joomla.Site * @subpackage  com_banners * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JTable::addIncludePath(JPATH_COMPONENT_ADMINISTRATOR . '/tables');/** * Banner model for the Joomla Banners component. * * @package     Joomla.Site * @subpackage  com_banners * @since       1.5 */class BannersModelBanner extends JModelLegacy{	protected $_item;	/**	 * Clicks the URL, incrementing the counter	 *	 * @return  void	 *	 * @since   1.5	 */	public function click()	{		$id = $this->getState('banner.id');		// update click count		$db = $this->getDbo();		$query = $db->getQuery(true)			->update('#__banners')			->set('clicks = (clicks + 1)')			->where('id = ' . (int) $id);		$db->setQuery($query);		try		{			$db->execute();		}		catch (RuntimeException $e)		{			JError::raiseError(500, $e->getMessage());		}		// track clicks		$item = $this->getItem();		$trackClicks = $item->track_clicks;		if ($trackClicks < 0 && $item->cid)		{			$trackClicks = $item->client_track_clicks;		}		if ($trackClicks < 0)		{			$config = JComponentHelper::getParams('com_banners');			$trackClicks = $config->get('track_clicks');		}		if ($trackClicks > 0)		{			$trackDate = JFactory::getDate()->format('Y-m-d H');			$query->clear()				->select($db->quoteName('count'))				->from('#__banner_tracks')				->where('track_type=2')				->where('banner_id=' . (int) $id)				->where('track_date=' . $db->quote($trackDate));			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}			$count = $db->loadResult();			$query->clear();			if ($count)			{				// update count				$query->update('#__banner_tracks')					->set($db->quoteName('count') . ' = (' . $db->quote('count') . ' + 1)')					->where('track_type=2')					->where('banner_id=' . (int) $id)					->where('track_date=' . $db->quote($trackDate));			}			else			{				// insert new count				//sqlsrv change				$query->insert('#__banner_tracks')					->columns(						array(							$db->quoteName('count'), $db->quoteName('track_type'),							$db->quoteName('banner_id'), $db->quoteName('track_date')						)					)					->values('1, 2,' . (int) $id . ',' . $db->quote($trackDate));			}			$db->setQuery($query);			try			{				$db->execute();			}			catch (RuntimeException $e)			{				JError::raiseError(500, $e->getMessage());			}		}	}	/**	 * Get the data for a banner.	 *	 * @return  object	 */	public function &getItem()	{		if (!isset($this->_item))		{			$cache = JFactory::getCache('com_banners', '');			$id = $this->getState('banner.id');			$this->_item = $cache->get($id);			if ($this->_item === false)			{				// redirect to banner url				$db = $this->getDbo();				$query = $db->getQuery(true)					->select(						'a.clickurl as clickurl,' .							'a.cid as cid,' .							'a.track_clicks as track_clicks'					)					->from('#__banners as a')					->where('a.id = ' . (int) $id)					->join('LEFT', '#__banner_clients AS cl ON cl.id = a.cid')					->select('cl.track_clicks as client_track_clicks');				$db->setQuery($query);				try				{					$db->execute();				}				catch (RuntimeException $e)				{					JError::raiseError(500, $e->getMessage());				}				$this->_item = $db->loadObject();				$cache->store($this->_item, $id);			}		}		return $this->_item;	}	/**	 * Get the URL for a banner	 *	 * @return  string	 *	 * @since   1.5	 */	public function getUrl()	{		$item = $this->getItem();		$url = $item->clickurl;		// check for links		if (!preg_match('#http[s]?://|index[2]?\.php#', $url))		{			$url = "http://$url";		}		return $url;	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_joomlaupdate * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * Joomla! Update's Update View * * @package     Joomla.Administrator * @subpackage  com_installer * @since       2.5.4 */class JoomlaupdateViewUpdate extends JViewLegacy{	/**	 * Renders the view	 *	 * @param   string  $tpl  Template name	 *	 * @return void	 */	public function display($tpl=null)	{		$password = JFactory::getApplication()->getUserState('com_joomlaupdate.password', null);		$filesize = JFactory::getApplication()->getUserState('com_joomlaupdate.filesize', null);		$ajaxUrl = JURI::base().'components/com_joomlaupdate/restore.php';		$returnUrl = 'index.php?option=com_joomlaupdate&task=update.finalise';		// Set the toolbar information		JToolbarHelper::title(JText::_('COM_JOOMLAUPDATE_OVERVIEW'), 'install');		JToolBarHelper::divider();		JToolBarHelper::help('JHELP_COMPONENTS_JOOMLA_UPDATE');		// Add toolbar buttons		if (JFactory::getUser()->authorise('core.admin', 'com_joomlaupdate'))		{			JToolbarHelper::preferences('com_joomlaupdate');		}		// Load mooTools		JHtml::_('behavior.framework', true);		$updateScript = <<<ENDSCRIPTvar joomlaupdate_password = '$password';var joomlaupdate_totalsize = '$filesize';var joomlaupdate_ajax_url = '$ajaxUrl';var joomlaupdate_return_url = '$returnUrl';ENDSCRIPT;		// Load our Javascript		$document = JFactory::getDocument();		$document->addScript('../media/com_joomlaupdate/json2.js');		$document->addScript('../media/com_joomlaupdate/encryption.js');		$document->addScript('../media/com_joomlaupdate/update.js');		JHtml::_('script', 'system/progressbar.js', true, true);		JHtml::_('stylesheet', 'media/mediamanager.css', array(), true);		$document->addScriptDeclaration($updateScript);		// Render the view		parent::display($tpl);	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;/** * View to edit a newsfeed. * * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.6 */class NewsfeedsViewNewsfeed extends JViewLegacy{	protected $item;	protected $form;	protected $state;	/**	 * Display the view	 */	public function display($tpl = null)	{		$this->state	= $this->get('State');		$this->item		= $this->get('Item');		$this->form		= $this->get('Form');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JError::raiseError(500, implode("\n", $errors));			return false;		}		$this->addToolbar();		parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since   1.6	 */	protected function addToolbar()	{		JFactory::getApplication()->input->set('hidemainmenu', true);		$user		= JFactory::getUser();		$userId		= $user->get('id');		$isNew		= ($this->item->id == 0);		$checkedOut	= !($this->item->checked_out == 0 || $this->item->checked_out == $user->get('id'));		// Since we don't track these assets at the item level, use the category id.		$canDo		= NewsfeedsHelper::getActions($this->item->catid, 0);		JToolbarHelper::title(JText::_('COM_NEWSFEEDS_MANAGER_NEWSFEED'), 'newsfeeds.png');		// If not checked out, can save the item.		if (!$checkedOut && ($canDo->get('core.edit') || count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0))		{			JToolbarHelper::apply('newsfeed.apply');			JToolbarHelper::save('newsfeed.save');		}		if (!$checkedOut && count($user->getAuthorisedCategories('com_newsfeeds', 'core.create')) > 0){			JToolbarHelper::save2new('newsfeed.save2new');		}		// If an existing item, can save to a copy.		if (!$isNew && $canDo->get('core.create'))		{			JToolbarHelper::save2copy('newsfeed.save2copy');		}		if (empty($this->item->id))		{			JToolbarHelper::cancel('newsfeed.cancel');		}		else		{			JToolbarHelper::cancel('newsfeed.cancel', 'JTOOLBAR_CLOSE');		}		JToolbarHelper::divider();		JToolbarHelper::help('JHELP_COMPONENTS_NEWSFEEDS_FEEDS_EDIT');	}}
<?php/** * @package     Joomla.Platform * @subpackage  MediaWiki * * @copyright   Copyright (C) 2005 - 2012 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE */defined('JPATH_PLATFORM') or die;/** * MediaWiki API Pages class for the Joomla Platform. * * @package     Joomla.Platform * @subpackage  MediaWiki * @since       12.3 */class JMediawikiPages extends JMediawikiObject{	/**     * Method to edit a page.	 *	 * @param   string  $title         Page title.	 * @param   int     $section       Section number.	 * @param   string  $sectiontitle  The title for a new section.	 * @param   string  $text          Page content.	 * @param   string  $summary       Title of the page you want to delete.     *     * @return  object     *     * @since   12.3     */	public function editPage($title, $section = null, $sectiontitle = null, $text = null, $summary = null)	{		// Get the token.		$token = $this->getToken($title, 'edit');		// Build the request path.		$path = '?action=edit';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'section' => $section,			'sectiontitle' => $section,			'text' => $text,			'summary' => $summary		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $title      Title of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByName($title, $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($title, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to delete a page.	 *	 * @param   string  $pageid     Page ID of the page you want to delete.	 * @param   string  $reason     Reason for the deletion.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlis.	 * @param   string  $oldimage   The name of the old image to delete.	 *	 * @return  object	 *	 * @since   12.3	 */	public function deletePageByID($pageid,  $reason = null, $watchlist = null, $oldimage = null)	{		// Get the token.		$token = $this->getToken($pageid, 'delete');		// Build the request path.		$path = '?action=delete';		// Build the request data.		$data = array(			'pageid' => $pageid,			'token' => $token,			'reason' => $reason,			'watchlist' => $watchlist,			'oldimage' => $oldimage		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to restore certain revisions of a deleted page.	 *	 * @param   string  $title      Title of the page you want to restore.	 * @param   string  $reason     Reason for restoring (optional).	 * @param   string  $timestamp  Timestamps of the revisions to restore.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function undeletePage($title, $reason = null, $timestamp = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'undelete');		// Build the request path.		$path = '?action=undelete';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'reason' => $reason,			'timestamp' => $timestamp,			'watchlist' => $watchlist,		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to move a page.	 *	 * @param   string   $from            Title of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.     *     * @return  object     *     * @since   12.3     */	public function movePageByName($from, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($from, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'from' => $from,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**	 * Method to move a page.	 *	 * @param   int      $fromid          Page ID of the page you want to move.	 * @param   string   $to              Title you want to rename the page to.	 * @param   string   $reason          Reason for the move (optional).	 * @param   string   $movetalk        Move the talk page, if it exists.	 * @param   string   $movesubpages    Move subpages, if applicable.	 * @param   boolean  $noredirect      Don't create a redirect.	 * @param   string   $watchlist       Unconditionally add or remove the page from your watchlist.	 * @param   boolean  $ignorewarnings  Ignore any warnings.	 *	 * @return  object	 *	 * @since   12.3	 */	public function movePageByID($fromid, $to, $reason = null, $movetalk = null, $movesubpages = null, $noredirect = null,		$watchlist =null, $ignorewarnings = null)	{		// Get the token.		$token = $this->getToken($fromid, 'move');		// Build the request path.		$path = '?action=move';		// Build the request data.		$data = array(			'fromid' => $fromid,			'to' => $reason,			'token' => $token,			'reason' => $reason,			'movetalk' => $movetalk,			'movesubpages' => $movesubpages,			'noredirect' => $noredirect,			'watchlist' => $watchlist,			'ignorewarnings' => $ignorewarnings		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to undo the last edit to the page.	 *	 * @param   string  $title      Title of the page you want to rollback.	 * @param   string  $user       Name of the user whose edits are to be rolled back.	 * @param   string  $summary    Custom edit summary. If not set, default summary will be used.	 * @param   string  $markbot    Mark the reverted edits and the revert as bot edits.	 * @param   string  $watchlist  Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function rollback($title, $user, $summary = null, $markbot = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'rollback');		// Build the request path.		$path = '?action=rollback';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'user' => $user,			'expiry' => $summary,			'markbot' => $markbot,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to change the protection level of a page.	 *	 * @param   string  $title        Title of the page you want to (un)protect.	 * @param   string  $protections  Pipe-separated list of protection levels.	 * @param   string  $expiry       Expiry timestamps.	 * @param   string  $reason       Reason for (un)protecting (optional).	 * @param   string  $cascade      Enable cascading protection.	 * @param   string  $watchlist    Unconditionally add or remove the page from your watchlist.     *     * @return  object     *     * @since   12.3     */	public function changeProtection($title, $protections, $expiry = null, $reason = null, $cascade = null, $watchlist = null)	{		// Get the token.		$token = $this->getToken($title, 'unblock');		// Build the request path.		$path = '?action=protect';		// Build the request data.		$data = array(			'title' => $title,			'token' => $token,			'protections' => $protections,			'expiry' => $expiry,			'reason' => $reason,			'cascade' => $cascade,			'watchlist' => $watchlist		);		// Send the request.		$response = $this->client->post($this->fetchUrl($path), $data);		return $this->validateResponse($response);	}	/**     * Method to get basic page information.     *     * @param   array    $titles      Page titles to retrieve info.     * @param   array    $inprop      Which additional properties to get.     * @param   array    $intoken     Request a token to perform a data-modifying action on a page     * @param   boolean  $incontinue  When more results are available, use this to continue.     *     * @return  object     *     * @since   12.3     */	public function getPageInfo(array $titles, array $inprop = null, array $intoken = null, $incontinue = null)	{		// Build the request		$path = '?action=query&prop=info';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($inprop))		{			$path .= '&inprop=' . $this->buildParameter($inprop);		}		if (isset($intoken))		{			$path .= '&intoken=' . $this->buildParameter($intoken);		}		if ($incontinue)		{			$path .= '&incontinue=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get various properties defined in the page content.     *     * @param   array    $titles      Page titles to retrieve properties.     * @param   boolean  $ppcontinue  When more results are available, use this to continue.     * @param   string   $ppprop      Page prop to look on the page for.     *     * @return  object     *     * @since   12.3     */	public function getPageProperties(array $titles, $ppcontinue = null, $ppprop = null)	{		// Build the request		$path = '?action=query&prop=pageprops';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if ($ppcontinue)		{			$path .= '&ppcontinue=';		}		if (isset($ppprop))		{			$path .= '&ppprop=' . $ppprop;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get a list of revisions.     *	 * @param   array    $titles   Page titles to retrieve revisions.	 * @param   array    $rvprop   Which properties to get for each revision.	 * @param   boolean  $rvparse  Parse revision content.	 * @param   int      $rvlimit  Limit how many revisions will be returned.	 *     * @return  object     *     * @since   12.3     */	public function getRevisions(array $titles, array $rvprop = null, $rvparse = null, $rvlimit = null)	{		// Build the request		$path = '?action=query&prop=revisions';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($rvprop))		{			$path .= '&rvprop=' . $this->buildParameter($rvprop);		}		if ($rvparse)		{			$path .= '&rvparse=';		}		if (isset($rvlimit))		{			$path .= '&rvlimit=' . $rvlimit;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all page templates from the given page.     *     * @param   array    $titles       Page titles to retrieve templates.     * @param   array    $tlnamespace  Show templates in this namespace(s) only.     * @param   integer  $tllimit      How many templates to return.     * @param   boolean  $tlcontinue   When more results are available, use this to continue.     * @param   string   $tltemplates  Only list these templates.     * @param   string   $tldir        The direction in which to list.     *     * @return  object     *     * @since   12.3     */	public function getPageTemplates(array $titles, array $tlnamespace = null, $tllimit = null, $tlcontinue = null, $tltemplates = null, $tldir = null)	{		// Build the request.		$path = '?action=query&prop=templates';		// Append titles to the request.		$path .= '&titles=' . $this->buildParameter($titles);		if (isset($tlnamespace))		{			$path .= '&tlnamespace=' . $this->buildParameter($tlnamespace);		}		if (isset($tllimit))		{			$path .= '&tllimit=' . $tllimit;		}		if ($tlcontinue)		{			$path .= '&tlcontinue=';		}		if (isset($tltemplates))		{			$path .= '&tltemplates=' . $tltemplates;		}		if (isset($tldir))		{			$path .= '&tldir=' . $tldir;		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given page.     *     * @param   string   $bltitle           Title to search.     * @param   integer  $blpageid          Pageid to search.     * @param   boolean  $blcontinue        When more results are available, use this to continue.     * @param   array    $blnamespace       The namespace to enumerate.     * @param   string   $blfilterredirect  How to filter for redirects..     * @param   integer  $bllimit           How many total pages to return.     * @param   boolean  $blredirect        If linking page is a redirect, find all pages that link to that redirect as well.     *     * @return  object     *     * @since   12.3     */	public function getBackLinks($bltitle, $blpageid = null, $blcontinue = null, array $blnamespace = null, $blfilterredirect = null,		$bllimit = null, $blredirect = null)	{		// Build the request.		$path = '?action=query&list=backlinks';		if (isset($bltitle))		{			$path .= '&bltitle=' . $bltitle;		}		if (isset($blpageid))		{			$path .= '&blpageid=' . $blpageid;		}		if ($blcontinue)		{			$path .= '&blcontinue=';		}		if (isset($blnamespace))		{			$path .= '&blnamespace=' . $this->buildParameter($blnamespace);		}		if (isset($blfilterredirect))		{			$path .= '&blfilterredirect=' . $blfilterredirect;		}		if (isset($bllimit))		{			$path .= '&bllimit=' . $bllimit;		}		if ($blredirect)		{			$path .= '&blredirect=';		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**     * Method to get all pages that link to the given interwiki link.     *     * @param   string   $iwbltitle     Interwiki link to search for. Must be used with iwblprefix.     * @param   string   $iwblprefix    Prefix for the interwiki.     * @param   boolean  $iwblcontinue  When more results are available, use this to continue.     * @param   integer  $iwbllimit     How many total pages to return.     * @param   array    $iwblprop      Which properties to get.     *     * @return  object     *     * @since   12.3     */	public function getIWBackLinks($iwbltitle, $iwblprefix = null, $iwblcontinue = null, $iwbllimit = null, array $iwblprop = null)	{		// Build the request		$path = '?action=query&list=iwbacklinks';		if (isset($iwbltitle))		{			$path .= '&iwbltitle=' . $iwbltitle;		}		if (isset($iwblprefix))		{			$path .= '&iwblprefix=' . $iwblprefix;		}		if ($iwblcontinue)		{			$path .= '&iwblcontinue=';		}		if (isset($iwbllimit))		{			$path .= '&bllimit=' . $iwbllimit;		}		if (isset($iwblprop))		{			$path .= '&iwblprop=' . $this->buildParameter($iwblprop);		}		// Send the request.		$response = $this->client->get($this->fetchUrl($path));		return $this->validateResponse($response);	}	/**	 * Method to get access token.	 *	 * @param   string  $user     The User to get token.	 * @param   string  $intoken  The type of token.	 *	 * @return  object	 *	 * @since   12.1	 */	public function getToken($user, $intoken)	{		// Build the request path.		$path = '?action=query&prop=info&intoken=' . $intoken . '&titles=User:' . $user;		// Send the request.		$response = $this->client->post($this->fetchUrl($path), null);		return (string) $this->validateResponse($response)->query->pages->page[$intoken . 'token'];	}}
<?php/** * @package     Joomla.Administrator * @subpackage  com_newsfeeds * * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved. * @license     GNU General Public License version 2 or later; see LICENSE.txt */defined('_JEXEC') or die;JLoader::register('NewsfeedsHelper', JPATH_ADMINISTRATOR . '/components/com_newsfeeds/helpers/newsfeeds.php');/** * Utility class for creating HTML Grids * * @static * @package     Joomla.Administrator * @subpackage  com_newsfeeds * @since       1.5 */class JHtmlNewsfeed{	/**	 * Get the associated language flags	 *	 * @param   int  $newsfeedid  The item id to search associations	 *	 * @return  string  The language HTML	 */	public static function association($newsfeedid)	{		// Defaults		$html = '';		// Get the associations		if ($associations = JLanguageAssociations::getAssociations('com_newsfeeds', '#__newsfeeds', 'com_newsfeeds.item', $newsfeedid))		{			foreach ($associations as $tag => $associated)			{				$associations[$tag] = (int) $associated->id;			}			// Get the associated newsfeed items			$db = JFactory::getDbo();			$query = $db->getQuery(true)				->select('c.*')				->from('#__newsfeeds as c')				->select('cat.title as category_title')				->join('LEFT', '#__categories as cat ON cat.id=c.catid')				->where('c.id IN (' . implode(',', array_values($associations)) . ')')				->join('LEFT', '#__languages as l ON c.language=l.lang_code')				->select('l.image')				->select('l.title as language_title');			$db->setQuery($query);			try			{				$items = $db->loadObjectList('id');			}			catch (runtimeException $e)			{				throw new Exception($e->getMessage(), 500);				return false;			}			$tags = array();			// Construct html			foreach ($associations as $tag => $associated)			{				if ($associated != $newsfeedid)				{					$tags[] = JText::sprintf('COM_NEWSFEEDS_TIP_ASSOCIATED_LANGUAGE',						JHtml::_('image', 'mod_languages/' . $items[$associated]->image . '.gif',							$items[$associated]->language_title,							array('title' => $items[$associated]->language_title),							true						),						$items[$associated]->name, $items[$associated]->category_title					);				}			}			$html = JHtml::_('tooltip', implode('<br />', $tags), JText::_('COM_NEWSFEEDS_TIP_ASSOCIATION'), 'admin/icon-16-links.png');		}		return $html;	}}
