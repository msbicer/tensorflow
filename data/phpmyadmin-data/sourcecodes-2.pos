<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays and handles the form where the user can change his password * linked from main.php * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_privileges.js';/** * Displays an error message and exits if the user isn't allowed to use this * script */if (!$cfg['ShowChgPassword']) {    $cfg['ShowChgPassword'] = PMA_DBI_select_db('mysql');}if ($cfg['Server']['auth_type'] == 'config' || !$cfg['ShowChgPassword']) {    include_once './libraries/header.inc.php';    PMA_Message::error(__('You don\'t have sufficient privileges to be here right now!'))->display();    include './libraries/footer.inc.php';} // end if/** * If the "change password" form has been submitted, checks for valid values * and submit the query or logout */if (isset($_REQUEST['nopass'])) {    // similar logic in server_privileges.php    $_error = false;    if ($_REQUEST['nopass'] == '1') {        $password = '';    } elseif (empty($_REQUEST['pma_pw']) || empty($_REQUEST['pma_pw2'])) {        $message = PMA_Message::error(__('The password is empty!'));        $_error = true;    } elseif ($_REQUEST['pma_pw'] != $_REQUEST['pma_pw2']) {        $message = PMA_Message::error(__('The passwords aren\'t the same!'));        $_error = true;    } else {        $password = $_REQUEST['pma_pw'];    }    if ($GLOBALS['is_ajax_request'] == true && $_error == true) {        /**         * If in an Ajax request, we don't need to show the rest of the page         */        PMA_ajaxResponse($message, false);    }    if (! $_error) {        // Defines the url to return to in case of error in the sql statement        $_url_params = array();        $err_url          = 'user_password.php' . PMA_generate_common_url($_url_params);        if (PMA_isValid($_REQUEST['pw_hash'], 'identical', 'old')) {            $hashing_function = 'OLD_PASSWORD';        } else {            $hashing_function = 'PASSWORD';        }        $sql_query        = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'***\')');        $local_query      = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($password) . '\')');        $result           = @PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        // Changes password cookie if required        // Duration = till the browser is closed for password (we don't want this to be saved)        if ($cfg['Server']['auth_type'] == 'cookie') {            $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $server,                PMA_blowfish_encrypt($password, $GLOBALS['cfg']['blowfish_secret']));        } // end if        // For http auth. mode, the "back" link will also enforce new        // authentication        if ($cfg['Server']['auth_type'] == 'http') {            $_url_params['old_usr'] = 'relog';        }        $message = PMA_Message::success(__('The profile has been updated.'));        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage($message, $sql_query, 'success');            PMA_ajaxResponse($message, true, $extra_data);        }        // Displays the page        include_once './libraries/header.inc.php';        echo '<h1>' . __('Change password') . '</h1>' . "\n\n";        PMA_showMessage($message, $sql_query, 'success');        ?>        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">            <strong><?php echo __('Back'); ?></strong></a>        <?php        include './libraries/footer.inc.php';    } // end if} // end if/** * If the "change password" form hasn't been submitted or the values submitted * aren't valid -> displays the form */// Loads the headersrequire_once './libraries/header.inc.php';echo '<h1>' . __('Change password') . '</h1>' . "\n\n";// Displays an error message if requiredif (isset($message)) {    $message->display();}require_once './libraries/display_change_password.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'b_bookmark' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '18',            'width'    => '8',            'height'   => '13'        ),        'b_docs' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '22',            'width'    => '10',            'height'   => '10'        ),        'bd_select' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '33',            'width'    => '11',            'height'   => '11'        ),        'b_home' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '37',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '40',            'width'    => '9',            'height'   => '9'        ),        'b_more' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '43',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '45',            'width'    => '9',            'height'   => '9'        ),        'b_primary' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '53',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '57',            'width'    => '10',            'height'   => '10'        ),        'b_spatial' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '63',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '78',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '81',            'width'    => '5',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '82',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '83',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '90',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '93',            'width'    => '11',            'height'   => '9'        ),        's_cancel' => array(            'position' => '94',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '95',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '96',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '97',            'width'    => '11',            'height'   => '9'        ),        's_error2' => array(            'position' => '98',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '105',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '109',            'width'    => '11',            'height'   => '15'        ),        's_status' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '116',            'width'    => '10',            'height'   => '10'        ),        'window-new' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__download_info(){    return array(        'info' =>  __('Displays a link to download the binary data of the column. You can use the first option to specify the filename, or use the second option as the name of a column which contains the filename. If you use the second option, you need to set the first option to the empty string.'),        );}/** * */function PMA_transformation_application_octetstream__download(&$buffer, $options = array(), $meta = ''){    global $row, $fields_meta;    if (isset($options[0]) && !empty($options[0])) {        $cn = $options[0]; // filename    } else {        if (isset($options[1]) && !empty($options[1])) {            foreach ($fields_meta as $key => $val) {                if ($val->name == $options[1]) {                    $pos = $key;                    break;                }            }            if (isset($pos)) {                $cn = $row[$pos];            }        }        if (empty($cn)) {            $cn = 'binary_file.dat';        }    }    return      sprintf(        '<a href="transformation_wrapper.php%s&amp;ct=application/octet-stream&amp;cn=%s" title="%s">%s</a>',        $options['wrapper_link'],        urlencode($cn),        htmlspecialchars($cn),        htmlspecialchars($cn)      );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */// Run common workrequire_once './libraries/common.inc.php';define('TABLE_MAY_BE_ABSENT', true);require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_tracking.php&amp;back=tbl_tracking.php';$url_params['goto'] = 'tbl_tracking.php';;$url_params['back'] = 'tbl_tracking.php';// Init vars for tracking reportif (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    $selection_schema = false;    $selection_data   = false;    $selection_both  = false;    if (! isset($_REQUEST['logtype'])) {        $_REQUEST['logtype'] = 'schema_and_data';    }    if ($_REQUEST['logtype'] == 'schema') {        $selection_schema = true;    } elseif ($_REQUEST['logtype'] == 'data') {        $selection_data   = true;    } else {        $selection_both   = true;    }    if (! isset($_REQUEST['date_from'])) {        $_REQUEST['date_from'] = $data['date_from'];    }    if (! isset($_REQUEST['date_to'])) {        $_REQUEST['date_to'] = $data['date_to'];    }    if (! isset($_REQUEST['users'])) {        $_REQUEST['users'] = '*';    }    $filter_ts_from = strtotime($_REQUEST['date_from']);    $filter_ts_to   = strtotime($_REQUEST['date_to']);    $filter_users   = array_map('trim', explode(',', $_REQUEST['users']));}// Prepare exportif (isset($_REQUEST['report_export'])) {/** * Filters tracking entries * * @param array   the entries to filter * @param string  "from" date * @param string  "to" date * @param string  users * * @return  array   filtered entries * */    function PMA_filter_tracking($data, $filter_ts_from, $filter_ts_to, $filter_users) {        $tmp_entries = array();        $id = 0;        foreach ( $data as $entry ) {            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {                $tmp_entries[] = array( 'id' => $id,                                    'timestamp' => $timestamp,                                    'username'  => $entry['username'],                                    'statement' => $entry['statement']                             );            }            $id++;        }        return($tmp_entries);    }    $entries = array();    // Filtering data definition statements    if ($_REQUEST['logtype'] == 'schema' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['ddlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Filtering data manipulation statements    if ($_REQUEST['logtype'] == 'data' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['dmlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Sort it    foreach ($entries as $key => $row) {        $ids[$key]        = $row['id'];        $timestamps[$key] = $row['timestamp'];        $usernames[$key]  = $row['username'];        $statements[$key] = $row['statement'];    }    array_multisort($timestamps, SORT_ASC, $ids, SORT_ASC, $usernames, SORT_ASC, $statements, SORT_ASC, $entries);}// Export as file downloadif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldumpfile') {    @ini_set('url_rewriter.tags', '');    $dump = "# " . sprintf(__('Tracking report for table `%s`'), htmlspecialchars($_REQUEST['table'])) . "\n" .            "# " . date('Y-m-d H:i:s') . "\n";    foreach ($entries as $entry) {        $dump .= $entry['statement'];    }    $filename = 'log_' . htmlspecialchars($_REQUEST['table']) . '.sql';    PMA_download_header($filename, 'text/x-sql', strlen($dump));    echo $dump;    exit();}/** * Gets tables informations *//** * Displays top menu links */require_once './libraries/tbl_links.inc.php';echo '<br />';/** * Actions */// Create tracking versionif (isset($_REQUEST['submit_create_version'])) {    $tracking_set = '';    if ($_REQUEST['alter_table'] == true) {        $tracking_set .= 'ALTER TABLE,';    }    if ($_REQUEST['rename_table'] == true) {        $tracking_set .= 'RENAME TABLE,';    }    if ($_REQUEST['create_table'] == true) {        $tracking_set .= 'CREATE TABLE,';    }    if ($_REQUEST['drop_table'] == true) {        $tracking_set .= 'DROP TABLE,';    }    if ($_REQUEST['create_index'] == true) {        $tracking_set .= 'CREATE INDEX,';    }    if ($_REQUEST['drop_index'] == true) {        $tracking_set .= 'DROP INDEX,';    }    if ($_REQUEST['insert'] == true) {        $tracking_set .= 'INSERT,';    }    if ($_REQUEST['update'] == true) {        $tracking_set .= 'UPDATE,';    }    if ($_REQUEST['delete'] == true) {        $tracking_set .= 'DELETE,';    }    if ($_REQUEST['truncate'] == true) {        $tracking_set .= 'TRUNCATE,';    }    $tracking_set = rtrim($tracking_set, ',');    if (PMA_Tracker::createVersion($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'], $tracking_set )) {        $msg = PMA_Message::success(sprintf(__('Version %s is created, tracking for %s.%s is activated.'), htmlspecialchars($_REQUEST['version']), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])));        $msg->display();    }}// Deactivate trackingif (isset($_REQUEST['submit_deactivate_now'])) {    if (PMA_Tracker::deactivateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is deactivated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Activate trackingif (isset($_REQUEST['submit_activate_now'])) {    if (PMA_Tracker::activateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is activated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Export as SQL executionif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'execution') {    foreach ($entries as $entry) {        $sql_result = PMA_DBI_query( "/*NOTRACK*/\n" . $entry['statement'] );    }    $msg = PMA_Message::success(__('SQL statements executed.'));    $msg->display();}// Export as SQL dumpif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldump') {    $new_query =    "# " . __('You can execute the dump by creating and using a temporary database. Please ensure that you have the privileges to do so.') . "\n" .                    "# " . __('Comment out these two lines if you do not need them.') . "\n" .                    "\n" .                    "CREATE database IF NOT EXISTS pma_temp_db; \n" .                    "USE pma_temp_db; \n" .                    "\n";    foreach ($entries as $entry) {        $new_query .= $entry['statement'];    }    $msg = PMA_Message::success(__('SQL statements exported. Please copy the dump or execute it.'));    $msg->display();    $db_temp = $db;    $table_temp = $table;    $db = $table = '';    include_once './libraries/sql_query_form.lib.php';    PMA_sqlQueryForm($new_query, 'sql');    $db = $db_temp;    $table = $table_temp;}/* * Schema snapshot */if (isset($_REQUEST['snapshot'])) {?>    <h3><?php echo __('Structure snapshot');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3><?php    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    // Get first DROP TABLE and CREATE TABLE statements    $drop_create_statements = $data['ddlog'][0]['statement'];    if (strstr($data['ddlog'][0]['statement'], 'DROP TABLE')) {        $drop_create_statements .= $data['ddlog'][1]['statement'];    }    // Print SQL code    PMA_showMessage(sprintf(__('Version %s snapshot (SQL code)'), htmlspecialchars($_REQUEST['version'])), $drop_create_statements);    // Unserialize snapshot    $temp = unserialize($data['schema_snapshot']);    $columns = $temp['COLUMNS'];    $indexes = $temp['INDEXES'];?>    <h3><?php echo __('Structure');?></h3>    <table id="tablestructure" class="data">    <thead>    <tr>        <th><?php echo __('Column'); ?></th>        <th><?php echo __('Type'); ?></th>        <th><?php echo __('Collation'); ?></th>        <th><?php echo __('Null'); ?></th>        <th><?php echo __('Default'); ?></th>        <th><?php echo __('Extra'); ?></th>        <th><?php echo __('Comment'); ?></th>    </tr>    </thead>    <tbody><?php    $style = 'odd';    foreach ($columns as $field_index => $field) {?>        <tr class="noclick <?php echo $style; ?>">            <?php            if ($field['Key'] == 'PRI') {                echo '<td><b><u>' . htmlspecialchars($field['Field']) . '</u></b></td>' . "\n";            } else {                echo '<td><b>' . htmlspecialchars($field['Field']) . '</b></td>' . "\n";            }            ?>            <td><?php echo htmlspecialchars($field['Type']);?></td>            <td><?php echo htmlspecialchars($field['Collation']);?></td>            <td><?php echo (($field['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>            <td><?php            if (isset($field['Default'])) {                $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);                if ($extracted_fieldspec['type'] == 'bit') {                    // here, $field['Default'] contains something like b'010'                    echo PMA_convert_bit_default_value($field['Default']);                } else {                    echo htmlspecialchars($field['Default']);                }            } else {                if ($field['Null'] == 'YES') {                    echo '<i>NULL</i>';                } else {                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';                }            } ?></td>            <td><?php echo htmlspecialchars($field['Extra']);?></td>            <td><?php echo htmlspecialchars($field['Comment']);?></td>        </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }    }?>    </tbody>    </table><?php    if (count($indexes) > 0) {?>        <h3><?php echo __('Indexes');?></h3>        <table id="tablestructure_indexes" class="data">        <thead>        <tr>            <th><?php echo __('Keyname');?></th>            <th><?php echo __('Type');?></th>            <th><?php echo __('Unique');?></th>            <th><?php echo __('Packed');?></th>            <th><?php echo __('Column');?></th>            <th><?php echo __('Cardinality');?></th>            <th><?php echo __('Collation');?></th>            <th><?php echo __('Null');?></th>            <th><?php echo __('Comment');?></th>        </tr>        <tbody><?php        $style = 'odd';        foreach ($indexes as $indexes_index => $index) {            if ($index['Non_unique'] == 0) {                $str_unique = __('Yes');            } else {                $str_unique = __('No');            }            if ($index['Packed'] != '') {                $str_packed = __('Yes');            } else {                $str_packed = __('No');            }?>            <tr class="noclick <?php echo $style; ?>">                <td><b><?php echo htmlspecialchars($index['Key_name']);?></b></td>                <td><?php echo htmlspecialchars($index['Index_type']);?></td>                <td><?php echo $str_unique;?></td>                <td><?php echo $str_packed;?></td>                <td><?php echo htmlspecialchars($index['Column_name']);?></td>                <td><?php echo htmlspecialchars($index['Cardinality']);?></td>                <td><?php echo htmlspecialchars($index['Collation']);?></td>                <td><?php echo htmlspecialchars($index['Null']);?></td>                <td><?php echo htmlspecialchars($index['Comment']);?></td>            </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }?>    </tbody>    </table><?php    } // endif?>    <br /><hr /><br /><?php}// end of snapshot report/* *  Tracking report */if (isset($_REQUEST['report']) && (isset($_REQUEST['delete_ddlog']) || isset($_REQUEST['delete_dmlog']))) {    if (isset($_REQUEST['delete_ddlog'])) {        // Delete ddlog row data        $delete_id = $_REQUEST['delete_ddlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['ddlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DDL', $data['ddlog']))                $msg = PMA_Message::success(__('Tracking data definition successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }    if (isset($_REQUEST['delete_dmlog'])) {        // Delete dmlog row data        $delete_id = $_REQUEST['delete_dmlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['dmlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DML', $data['dmlog']))                $msg = PMA_Message::success(__('Tracking data manipulation successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }}if (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    ?>    <h3><?php echo __('Tracking report');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3>    <small><?php echo __('Tracking statements') . ' ' . htmlspecialchars($data['tracking']); ?></small><br/>    <br/>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    $str1 = '<select name="logtype">' .            '<option value="schema"' . ($selection_schema ? ' selected="selected"' : '') . '>' . __('Structure only') . '</option>' .            '<option value="data"' . ($selection_data ? ' selected="selected"' : ''). '>' . __('Data only') . '</option>' .            '<option value="schema_and_data"' . ($selection_both ? ' selected="selected"' : '') . '>' . __('Structure and data') . '</option>' .            '</select>';    $str2 = '<input type="text" name="date_from" value="' . htmlspecialchars($_REQUEST['date_from']) . '" size="19" />';    $str3 = '<input type="text" name="date_to" value="' . htmlspecialchars($_REQUEST['date_to']) . '" size="19" />';    $str4 = '<input type="text" name="users" value="' . htmlspecialchars($_REQUEST['users']) . '" />';    $str5 = '<input type="submit" name="list_report" value="' . __('Go') . '" />';    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    // Prepare delete link content here    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Delete');    }    /*     *  First, list tracked data definition statements     */    $i = 1;    if (count($data['ddlog']) == 0 && count($data['dmlog']) == 0) {        $msg = PMA_Message::notice(__('No data'));        $msg->display();    }    if ($selection_schema || $selection_both  && count($data['ddlog']) > 0) {    ?>        <table id="ddl_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data definition statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['ddlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i;?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']);?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_ddlog=<?php echo $i-1; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }        ?>        </tbody>        </table>    <?php    } //endif    // Memorize data definition amount    $ddlog_count = $i;    /*     *  Secondly, list tracked data manipulation statements     */    if (($selection_data || $selection_both) && count($data['dmlog']) > 0) {    ?>        <table id="dml_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data manipulation statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['dmlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i; ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']); ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_dmlog=<?php echo $i-$ddlog_count; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }    ?>        </tbody>        </table>    <?php    }    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    $str_export1 =  '<select name="export_type">' .                    '<option value="sqldumpfile">' . __('SQL dump (file download)') . '</option>' .                    '<option value="sqldump">' . __('SQL dump') . '</option>' .                    '<option value="execution" onclick="alert(\'' . PMA_escapeJsString(__('This option will replace your table and contained data.')) .'\')">' . __('SQL execution') . '</option>' .                    '</select>';    $str_export2 = '<input type="submit" name="report_export" value="' . __('Go') .'" />';    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <input type="hidden" name="logtype" value="<?php echo htmlspecialchars($_REQUEST['logtype']);?>" />    <input type="hidden" name="date_from" value="<?php echo htmlspecialchars($_REQUEST['date_from']);?>" />    <input type="hidden" name="date_to" value="<?php echo htmlspecialchars($_REQUEST['date_to']);?>" />    <input type="hidden" name="users" value="<?php echo htmlspecialchars($_REQUEST['users']);?>" />    <?php    echo "<br/>" . sprintf(__('Export as %s'), $str_export1) . $str_export2 . "<br/>";    ?>    </form>    <?php    echo "<br/><br/><hr/><br/>\n";} // end of report/* * List selectable tables */$sql_query = " SELECT DISTINCT db_name, table_name FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($GLOBALS['db']) . "' " .             " ORDER BY db_name, table_name";$sql_result = PMA_query_as_controluser($sql_query);if (PMA_DBI_num_rows($sql_result) > 0) {?>    <form method="post" action="tbl_tracking.php?<?php echo $url_query;?>">    <select name="table">    <?php    while ($entries = PMA_DBI_fetch_array($sql_result)) {        if (PMA_Tracker::isTracked($entries['db_name'], $entries['table_name'])) {            $status = ' (' . __('active') . ')';        } else {            $status = ' (' . __('not active') . ')';        }        if ($entries['table_name'] == $_REQUEST['table']) {            $s = ' selected="selected"';        } else {            $s = '';        }        echo '<option value="' . htmlspecialchars($entries['table_name']) . '"' . $s . '>' . htmlspecialchars($entries['db_name']) . ' . ' . htmlspecialchars($entries['table_name']) . $status . '</option>' . "\n";    }    ?>    </select>    <input type="submit" name="show_versions_submit" value="<?php echo __('Show versions');?>" />    </form><?php}?><br /><?php/* * List versions of current table */$sql_query = " SELECT * FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($_REQUEST['db']) . "' ".             " AND table_name = '" . PMA_sqlAddSlashes($_REQUEST['table']) ."' ".             " ORDER BY version DESC ";$sql_result = PMA_query_as_controluser($sql_query);$last_version = 0;$maxversion = PMA_DBI_fetch_array($sql_result);$last_version = $maxversion['version'];if ($last_version > 0) {?>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    $style = 'odd';    PMA_DBI_data_seek($sql_result, 0);    while ($version = PMA_DBI_fetch_array($sql_result)) {        if ($version['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        if ($version['version'] == $last_version) {            if ($version['tracking_active'] == 1) {                $tracking_active = true;            } else {                $tracking_active = false;            }        }    ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version['db_name']);?></td>            <td><?php echo htmlspecialchars($version['table_name']);?></td>            <td><?php echo htmlspecialchars($version['version']);?></td>            <td><?php echo htmlspecialchars($version['date_created']);?></td>            <td><?php echo htmlspecialchars($version['date_updated']);?></td>            <td><?php echo $version_status;?></td>            <td> <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $version['version']));?>"><?php echo __('Tracking report');?></a>                | <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('snapshot' => 'true', 'version' => $version['version']));?>"><?php echo __('Structure snapshot');?></a>            </td>        </tr>    <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    ?>    </tbody>    </table>    <?php if ($tracking_active == true) {?>        <div id="div_deactivate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Deactivate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_deactivate_now" value="<?php echo __('Deactivate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }    ?>    <?php if ($tracking_active == false) {?>        <div id="div_activate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Activate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_activate_now" value="<?php echo __('Activate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }}?><div id="div_create_version"><form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset>    <legend><?php printf(__('Create version %s of %s.%s'), ($last_version + 1), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>    <input type="hidden" name="version" value="<?php echo ($last_version + 1); ?>" />    <p><?php echo __('Track these data definition statements:');?></p>    <input type="checkbox" name="alter_table" value="true" checked="checked" /> ALTER TABLE<br/>    <input type="checkbox" name="rename_table" value="true" checked="checked" /> RENAME TABLE<br/>    <input type="checkbox" name="create_table" value="true" checked="checked" /> CREATE TABLE<br/>    <input type="checkbox" name="drop_table" value="true" checked="checked" /> DROP TABLE<br/>    <br/>    <input type="checkbox" name="create_index" value="true" checked="checked" /> CREATE INDEX<br/>    <input type="checkbox" name="drop_index" value="true" checked="checked" /> DROP INDEX<br/>    <p><?php echo __('Track these data manipulation statements:');?></p>    <input type="checkbox" name="insert" value="true" checked="checked" /> INSERT<br/>    <input type="checkbox" name="update" value="true" checked="checked" /> UPDATE<br/>    <input type="checkbox" name="delete" value="true" checked="checked" /> DELETE<br/>    <input type="checkbox" name="truncate" value="true" checked="checked" /> TRUNCATE<br/></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_create_version" value="<?php echo __('Create version'); ?>" /></fieldset></form></div><br class="clearfloat"/><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Spreadsheet dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'mime_type' => 'application/vnd.oasis.opendocument.spreadsheet',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    $GLOBALS['ods_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        $GLOBALS['ods_buffer'] .= '</office:spreadsheet>'            . '</office:body>'            . '</office:document-content>';        if (!PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.spreadsheet', $GLOBALS['ods_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        $GLOBALS['ods_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:automatic-styles>'                . '<number:date-style style:name="N37" number:automatic-order="true">'                . '<number:month number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:day number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:year/>'              . '</number:date-style>'              . '<number:time-style style:name="N43">'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:seconds number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:time-style>'              . '<number:date-style style:name="N50" number:automatic-order="true" number:format-source="language">'                . '<number:month/>'                . '<number:text>/</number:text>'                . '<number:day/>'                . '<number:text>/</number:text>'                . '<number:year/>'                . '<number:text> </number:text>'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:date-style>'              . '<style:style style:name="DateCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>'              . '<style:style style:name="TimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N43"/>'              . '<style:style style:name="DateTimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N50"/>'            . '</office:automatic-styles>'            . '<office:body>'            . '<office:spreadsheet>';        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in ODS format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['ods_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '">';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "date") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d", strtotime($row[$j])) . '" table:style-name="DateCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "time") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="time" office:time-value="' . date("\P\TH\Hi\Ms\S", strtotime($row[$j])) . '" table:style-name="TimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "datetime") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d\TH:i:s", strtotime($row[$j])) . '" table:style-name="DateTimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['ods_buffer'] .= '</table:table>';        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//****/require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_synchronize.js';require_once './libraries/server_common.inc.php';/*** Contains all the functions specific to synchronization*/require './libraries/server_synchronize.lib.php';/** * Increases the time limit up to the configured maximum */@set_time_limit($cfg['ExecTimeLimit']);/** * Displays the links */require './libraries/server_links.inc.php';/*** Enables warnings on the page*///$cfg['Error_Handler']['display'] = true;//$cfg['Error_Handler']['gather'] = true;/*** Save the value of token generated for this page*/if (isset($_REQUEST['token'])) {    $_SESSION['token'] = $_REQUEST['token'];}// variable for code saving$cons = array ("src", "trg");/** * Displays the page when 'Go' is pressed */if ((isset($_REQUEST['submit_connect']))) {    foreach ($cons as $con) {        ${"{$con}_host"}     = $_REQUEST[$con . '_host'];        ${"{$con}_username"} = $_REQUEST[$con . '_username'];        ${"{$con}_password"} = $_REQUEST[$con . '_pass'];        ${"{$con}_port"}     = $_REQUEST[$con . '_port'];        ${"{$con}_socket"}   = $_REQUEST[$con . '_socket'];        ${"{$con}_db"}       = $_REQUEST[$con . '_db'];        ${"{$con}_type"}     = $_REQUEST[$con . '_type'];        if (${"{$con}_type"} == 'cur') {            ${"{$con}_connection"} = null;            ${"{$con}_server"} = null;            ${"{$con}_db"}       = $_REQUEST[$con . '_db_sel'];            continue;        }        if (isset(${"{$con}_socket"}) && ! empty(${"{$con}_socket"})) {            ${"{$con}_server"}['socket'] = ${"{$con}_socket"};        } else {            ${"{$con}_server"}['host'] = ${"{$con}_host"};            if (isset(${"{$con}_port"})                && ! empty(${"{$con}_port"})                && ((int)${"{$con}_port"} * 1) > 0            ) {                ${"{$con}_server"}['port'] = (int)${"{$con}_port"};            }        }        ${"{$con}_connection"} = PMA_DBI_connect(${"{$con}_username"},            ${"{$con}_password"}, $is_controluser = false,            ${"{$con}_server"}, $auxiliary_connection = true);    } // end foreach ($cons as $con)    if ((! $src_connection && $src_type != 'cur')        || (! $trg_connection && $trg_type != 'cur')    ) {        /**        * Displays the connection error string if        * connections are not established        */        echo '<div class="error">';        if (! $src_connection && $src_type != 'cur') {            echo __('Could not connect to the source') . '<br />';        }        if (! $trg_connection && $trg_type != 'cur') {            echo __('Could not connect to the target');        }        echo '</div>';        unset($_REQUEST['submit_connect']);    } else {        /**        * Creating the link object for both source and target databases and        * selecting the source and target databases using these links        */        foreach ($cons as $con) {            if (${"{$con}_connection"} != null) {                ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                    ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});            } else {                ${"{$con}_link"} = null;            }            ${"{$con}_db_selected"} = PMA_DBI_select_db(${"{$con}_db"}, ${"{$con}_link"});            ${"{$con}_version"} = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, ${"{$con}_link"});            ${"{$con}_is_drizzle"} = (bool)preg_match('/\d{4}\./', ${"{$con}_version"});        } // end foreach ($cons as $con)        if (($src_db_selected != 1) || ($trg_db_selected != 1)) {            /**            * Displays error string if the database(s) did not exist            */            echo '<div class="error">';            if ($src_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($src_db));            }            if ($trg_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($trg_db));            }            echo '</div>';            unset($_REQUEST['submit_connect']);        } else if (($src_db_selected == 1) && ($trg_db_selected == 1)) {            /**            * Using PMA_DBI_get_tables() to get all the tables            * from target and source databases.            */            $src_tables = PMA_DBI_get_tables($src_db, $src_link);            $source_tables_num = sizeof($src_tables);            $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);            $target_tables_num = sizeof($trg_tables);            /**            * initializing arrays to save matching and non-matching            * table names from target and source databases.            */            $unmatched_num_src = 0;            $source_tables_uncommon = array();            $unmatched_num_trg = 0;            $target_tables_uncommon = array();            $matching_tables = array();            $matching_tables_num = 0;            /**            * Using PMA_getMatchingTables to find which of the tables' names match            * in target and source database.            */            PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);            /**            * Finding the uncommon tables for the target database            * using function PMA_getNonMatchingTargetTables()            */            PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);            /**            * Initializing several arrays to save the data and structure            * difference between the source and target databases.            */            $row_count = array();   //number of rows in source table that needs to be created in target database            $fields_num = array();  //number of fields in each matching table            $delete_array = array(); //stores the primary key values for target tables that have excessive rows than corresponding source tables.            $insert_array = array(array(array()));// stores the primary key values for the rows in each source table that are not present in target tables.            $update_array = array(array(array())); //stores the primary key values, name of field to be updated, value of the field to be updated for                                                    // each row of matching table.            $matching_tables_fields = array(); //contains the fields' names for each matching table            $matching_tables_keys   = array(); //contains the primary keys' names for each matching table            $uncommon_tables_fields = array(); //coantains the fields for all the source tables that are not present in target            $matching_tables_num = sizeof($matching_tables);            $source_columns = array();  //contains the full columns' information for all the source tables' columns            $target_columns = array();  //contains the full columns' information for all the target tables' columns            $uncommon_columns = array(); //contains names of columns present in source table but absent from the corresponding target table            $source_indexes = array();   //contains indexes on all the source tables            $target_indexes = array();   //contains indexes on all the target tables            $add_indexes_array = array(); //contains the indexes name present in source but absent from target tables            $target_tables_keys = array(); //contains the keys of all the target tables            $alter_indexes_array = array();  //contains the names of all the indexes for each table that need to be altered in target database            $remove_indexes_array = array();  //contains the names of indexes that are excessive in target tables            $alter_str_array = array(array());  //contains the criteria for each column that needs to be altered in target tables            $add_column_array = array(array()); //contains the name of columns that need to be added in target tables            /**            * The criteria array contains all the criteria against which columns are compared for differences.            */            $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');            for ($i = 0; $i < sizeof($matching_tables); $i++) {                /**                * Finding out all the differences structure, data and index diff                * for all the matching tables only                */                PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $matching_tables_fields, $update_array,                    $insert_array, $delete_array, $fields_num, $i,                    $matching_tables_keys);                PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_columns, $target_columns,                    $alter_str_array, $add_column_array, $uncommon_columns,                    $criteria, $target_tables_keys, $i);                PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_indexes, $target_indexes,                    $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $i);            }            for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {                /**                * Finding out the number of rows to be added in tables                * that need to be added in target database                */                PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db,                    $src_link, $j, $row_count);            }            /**            * Storing all arrays in session for use when page is reloaded            * for each button press            */            $_SESSION['matching_tables'] = $matching_tables;            $_SESSION['update_array'] = $update_array;            $_SESSION['insert_array'] = $insert_array;            $_SESSION['src_db'] = $src_db;            $_SESSION['trg_db'] =  $trg_db;            $_SESSION['matching_fields'] = $matching_tables_fields;            $_SESSION['src_uncommon_tables'] = $source_tables_uncommon;            $_SESSION['src_username'] = $src_username ;            $_SESSION['trg_username'] = $trg_username;            $_SESSION['src_password'] = $src_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['src_server']   = $src_server;            $_SESSION['trg_server']   = $trg_server;            $_SESSION['src_type']     = $src_type;            $_SESSION['trg_type']     = $trg_type;            $_SESSION['matching_tables_keys'] = $matching_tables_keys;            $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;            $_SESSION['uncommon_tables_row_count'] = $row_count;            $_SESSION['target_tables_uncommon'] = $target_tables_uncommon;            $_SESSION['uncommon_tables'] = $source_tables_uncommon;            $_SESSION['delete_array'] = $delete_array;            $_SESSION['uncommon_columns'] = $uncommon_columns;            $_SESSION['source_columns'] = $source_columns;            $_SESSION['alter_str_array'] = $alter_str_array;            $_SESSION['target_tables_keys'] = $target_tables_keys;            $_SESSION['add_column_array'] = $add_column_array;            $_SESSION['criteria'] = $criteria;            $_SESSION['target_tables'] = $trg_tables;            $_SESSION['add_indexes_array'] = $add_indexes_array;            $_SESSION['alter_indexes_array'] = $alter_indexes_array;            $_SESSION['remove_indexes_array'] = $remove_indexes_array;            $_SESSION['source_indexes'] = $source_indexes;            $_SESSION['target_indexes'] = $target_indexes;            /**            * Displays the sub-heading and icons showing Structure Synchronization            * and Data Synchronization            */            ?>            <form name="synchronize_form" id="synchronize_form" method="post" action="server_synchronize.php">                <?php echo PMA_generate_common_hidden_inputs('', ''); ?>            <table width="40%">            <tr>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_struct.png" width="16" height="16" alt="" />                    <?php echo __('Structure Synchronization'); ?>                </td>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_data.png" width="16" height="16" alt="" />                    <?php echo __('Data Synchronization'); ?>                </td>            </tr>            </table>            <?php            /**            * Displays the tables containing the source tables names,            * their difference with the target tables and target tables names.            */            PMA_syncDisplayHeaderCompare($src_db, $trg_db);            $rows = array();            /**            * Display the matching tables' names and difference, first            */            for ($i = 0; $i < count($matching_tables); $i++) {                /**                * Calculating the number of updates for each matching table                */                if (isset($update_array[$i]) && isset($update_array[$i][0])                        && !empty($matching_tables_keys[$i][0])                        && isset($update_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }                /**                * Calculating the number of insertions for each matching table                */                if (isset($insert_array[$i]) && isset($insert_array[$i][0])                        && !empty($matching_tables_keys[$i])                        && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }                /**                * Calculating the number of alter columns, number of columns to be                * added, number of columns to be removed,                * number of index to be added and removed.                */                $num_alter_cols  = 0;                $num_insert_cols = 0;                $num_remove_cols = 0;                $num_add_index   = 0;                $num_remove_index = 0;                if (isset($alter_str_array[$i])) {                    $num_alter_cols = sizeof($alter_str_array[$i]);                }                if (isset($add_column_array[$i])) {                    $num_insert_cols = sizeof($add_column_array[$i]);                }                if (isset($uncommon_columns[$i])) {                    $num_remove_cols = sizeof($uncommon_columns[$i]);                }                if (isset($add_indexes_array[$i])) {                    $num_add_index = sizeof($add_indexes_array[$i]);                }                if (isset($remove_indexes_array[$i])) {                    $num_remove_index = sizeof($remove_indexes_array[$i]);                }                if (isset($alter_indexes_array[$i])) {                    $num_add_index += sizeof($alter_indexes_array[$i]);                    $num_remove_index += sizeof($alter_indexes_array[$i]);                }                $btn_structure_params = null;                $btn_data_params = null;                /**                * Display the red button of structure synchronization if there                * exists any structure difference or index difference.                */                if (($num_alter_cols > 0)                    || ($num_insert_cols > 0)                    || ($num_remove_cols > 0)                    || ($num_add_index > 0)                    || ($num_remove_index > 0)                ) {                    $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                        $num_remove_cols, $num_add_index, $num_remove_index);                }                /**                * Display the green button of data synchronization if there exists                * any data difference.                */                if ((isset($update_array[$i])                    || isset($insert_array[$i]))                    && !empty($matching_tables_keys[$i])                ) {                    if (isset($update_array[$i][0][$matching_tables_keys[$i][0]])                        || isset($insert_array[$i][0][$matching_tables_keys[$i][0]])                    ) {                        $btn_data_params = array($i, $num_of_updates,                            $num_of_insertions, null, null, null);                    }                }                $rows[] = array(                    'src_table_name' => $matching_tables[$i],                    'dst_table_name' => $matching_tables[$i],                    'btn_type' => 'M',                    'btn_structure' => $btn_structure_params,                    'btn_data' => $btn_data_params                );            }            /**            * Displays the tables' names present in source but missing from target            */            for ($j = 0; $j < count($source_tables_uncommon); $j++) {                $row = array(                    'src_table_name' => '+ ' . $source_tables_uncommon[$j],                    'dst_table_name' => $source_tables_uncommon[$j] . ' (' . __('not present') . ')',                    'btn_type' => 'U',                    'btn_structure' => array($j, null, null, null, null, null),                    'btn_data' => null                );                if ($row_count[$j] > 0) {                    $row['btn_data'] = array($j, null, $row_count[$j], null, null, null);                }                $rows[] = $row;            }            foreach ($target_tables_uncommon as $tbl_nc_name) {                $rows[] = array(                    'src_table_name' => '',                    'dst_table_name' => $tbl_nc_name);            }            /**            * Displays the target tables names            */            PMA_syncDisplayDataCompare($rows);            echo '</table>                </div>                </fieldset>';            /**            * This "list" div will contain a table and each row will depict            * information about structure/data difference in tables.            * Rows will be generated dynamically as soon as the colored            * buttons "D" or "S"  are clicked.            */            echo '<fieldset style="padding:0"><div id="list" style="overflow:auto; height:140px; padding:1em">            <table>                <thead>                <tr style="width: 100%;">                    <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                    <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                    <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>                </tr>                <tr style="width: 100%;">                    <th style="width: 10%;">' . __('Table name') . '</th>                    <th style="width: 10%;">' . __('Create table'). '</th>                    <th style="width: 11%;">' . __('Add column(s)') . '</th>                    <th style="width: 13%;">' . __('Remove column(s)') . '</th>                    <th style="width: 11%;">' . __('Alter column(s)') . '</th>                    <th style="width: 12%;">' . __('Remove index(s)') . '</th>                    <th style="width: 11%;">' . __('Apply index(s)') . '</th>                    <th style="width: 10%;">'.  __('Update row(s)') . '</th>                    <th style="width: 10%;">' . __('Insert row(s)') . '</th>                </tr>                </thead>                <tbody></tbody>            </table>            </div></fieldset>';            /**            *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables            */            echo '<fieldset>            <p><input type= "checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'                . __('Would you like to delete all the previous rows from target tables?')                . '</label> </p>            </fieldset>            <fieldset class="tblFooters">';            echo '<input type="button" name="apply_changes" value="'                . __('Apply Selected Changes')                . '" onclick ="ApplySelectedChanges('                . "'" . htmlspecialchars($_SESSION['token']) . "'" . ')" />';            echo '<input type="submit" name="synchronize_db" value="'                . __('Synchronize Databases') . '" />' . '</fieldset>';            echo '</form>';        }    }} // end if ((isset($_REQUEST['submit_connect']))) /** * Display the page when 'Apply Selected Changes' is pressed */if (isset($_REQUEST['Table_ids'])) {    /**    * Displays success message    */    echo '<div class="success">'        . __('Selected target tables have been synchronized with source tables.')        . '</div>';    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $src_server   = $_SESSION['src_server'];    $trg_server   = $_SESSION['trg_server'];    $src_type     = $_SESSION['src_type'];    $trg_type     = $_SESSION['trg_type'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;    /**    * Creating link object for source and target databases    */    foreach ($cons as $con) {        if (${"{$con}_type"} != "cur") {            ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});        } else {            ${"{$con}_link"} = null;            // working on current server, so initialize this for tracking            // (does not work if user defined current server as a remote one)            $GLOBALS['db'] = ${"{$con}_db"};        }    } // end foreach ($cons as $con)    /**    * Initializing arrays to save the table ids whose data and structure difference is to be applied    */    $matching_table_data_diff = array();  //stores id of matching table having data difference    $matching_table_structure_diff = array(); //stores id of matching tables having structure difference    $uncommon_table_structure_diff = array(); //stores id of uncommon tables having structure difference    $uncommon_table_data_diff = array();     //stores id of uncommon tables having data difference    for ($i = 0; isset($_REQUEST[$i]); $i++ ) {        if (isset($_REQUEST[$i])) {            $table_id = explode("US", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_structure_diff[] = $table_id[1];            }            $table_id = explode("UD", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_data_diff[] = $table_id[1];            }            $table_id = explode("MS", $_REQUEST[$i]);            if (isset($table_id[1])) {                $matching_table_structure_diff[] = $table_id[1];            }            $table_id = explode("MD", $_REQUEST[$i]);            if (isset($table_id[1])) {                 $matching_table_data_diff[] = $table_id[1];            }        }    } // end for    /**    * Applying the structure difference on selected matching tables    */    for ($q = 0; $q < sizeof($matching_table_structure_diff); $q++) {        if (isset($alter_str_array[$matching_table_structure_diff[$q]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_structure_diff[$q], false);            unset($alter_str_array[$matching_table_structure_diff[$q]]);        }        if (isset($add_column_array[$matching_table_structure_diff[$q]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_structure_diff[$q], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_structure_diff[$q]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_structure_diff[$q], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_structure_diff[$q]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_structure_diff[$q], $uncommon_cols, false);            unset($add_column_array[$matching_table_structure_diff[$q]]);        }        if (isset($uncommon_columns[$matching_table_structure_diff[$q]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_structure_diff[$q], false);            unset($uncommon_columns[$matching_table_structure_diff[$q]]);        }        if (isset($add_indexes_array[$matching_table_structure_diff[$q]])            || isset($remove_indexes_array[$matching_table_structure_diff[$q]])            || isset($alter_indexes_array[$matching_table_structure_diff[$q]])        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }    }    /**    * Applying the data difference. First checks if structure diff is applied or not.    * If not, then apply structure difference first then apply data difference.    */    for ($p = 0; $p < sizeof($matching_table_data_diff); $p++) {        if ($_REQUEST['checked'] == 'true') {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }        }        if (isset($alter_str_array[$matching_table_data_diff[$p]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_data_diff[$p], false);            unset($alter_str_array[$matching_table_data_diff[$p]]);        }        if (isset($add_column_array[$matching_table_data_diff[$p]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_data_diff[$p], $uncommon_cols, false);            unset($add_column_array[$matching_table_data_diff[$p]]);        }        if (isset($uncommon_columns[$matching_table_data_diff[$p]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_data_diff[$p], false);            unset($uncommon_columns[$matching_table_data_diff[$p]]);        }        if ((isset($matching_table_structure_diff[$q])            && isset($add_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($remove_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($alter_indexes_array[$matching_table_structure_diff[$q]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }        /**        * Applying the data difference.        */        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $matching_table_data_diff[$p], $matching_tables_keys, false);        PMA_insertIntoTargetTable($matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array,            $matching_table_data_diff[$p], $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array,            $source_indexes, $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, false);    }    /**    * Updating the session variables to the latest values of the arrays.    */    $_SESSION['delete_array'] = $delete_array;    $_SESSION['uncommon_columns'] = $uncommon_columns;    $_SESSION['alter_str_array']  = $alter_str_array;    $_SESSION['add_column_array'] = $add_column_array;    $_SESSION['add_indexes_array'] = $add_indexes_array;    $_SESSION['remove_indexes_array'] = $remove_indexes_array;    $_SESSION['insert_array'] = $insert_array;    $_SESSION['update_array'] = $update_array;    /**    * Applying structure difference to selected non-matching tables    * (present in Source but absent from Target).    */    for ($s = 0; $s < sizeof($uncommon_table_structure_diff); $s++) {        PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,            $uncommon_tables, $uncommon_table_structure_diff[$s],            $uncommon_tables_fields, false);        $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;        unset($uncommon_tables[$uncommon_table_structure_diff[$s]]);    }    /**    * Applying data difference to selected non-matching tables    * (present in Source but absent from Target).    * Before data synchronization, structure synchronization is confirmed.    */    for ($r = 0; $r < sizeof($uncommon_table_data_diff); $r++) {        if (!(in_array($uncommon_table_data_diff[$r], $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$uncommon_table_data_diff[$r]])) {                PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                    $uncommon_tables, $uncommon_table_data_diff[$r],                    $uncommon_tables_fields, false);                $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;                unset($uncommon_tables[$uncommon_table_data_diff[$r]]);            }        }        PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,            $source_tables_uncommon, $uncommon_table_data_diff[$r],            $_SESSION['uncommon_tables_fields'], false);        unset($row_count[$uncommon_table_data_diff[$r]]);    }    /**    * Again all the tables from source and target database are displayed with their differences.    * The differences have been removed from tables that have been synchronized    */    echo '<form name="applied_difference" id="synchronize_form" method="post" action="server_synchronize.php">'        . PMA_generate_common_hidden_inputs('', '');    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $num_alter_cols  = 0;        $num_insert_cols = 0;        $num_remove_cols = 0;        $num_add_index = 0;        $num_remove_index = 0;        if (isset($alter_str_array[$i])) {            $num_alter_cols = sizeof($alter_str_array[$i]);        }        if (isset($add_column_array[$i])) {            $num_insert_cols = sizeof($add_column_array[$i]);        }        if (isset($uncommon_columns[$i])) {            $num_remove_cols = sizeof($uncommon_columns[$i]);        }        if (isset($add_indexes_array[$i])) {            $num_add_index = sizeof($add_indexes_array[$i]);        }        if (isset($remove_indexes_array[$i])) {            $num_remove_index = sizeof($remove_indexes_array[$i]);        }        $btn_structure_params = null;        $btn_data_params = null;        if (($num_alter_cols > 0)            || ($num_insert_cols > 0)            || ($num_remove_cols > 0)            || ($num_add_index > 0)            || ($num_remove_index > 0)        ) {            $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                $num_remove_cols, $num_add_index, $num_remove_index);        }        if (!(in_array($i, $matching_table_data_diff))) {            if (isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($update_array[$i])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }            } else {                $num_of_updates = 0;            }            if (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($insert_array[$i])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }            } else {                $num_of_insertions = 0;            }            if ((isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]]))                || (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]]))            ) {                $btn_data_params = array($i, $num_of_updates, $num_of_insertions,                    null, null, null);            }        } else {            unset($update_array[$i]);            unset($insert_array[$i]);        }        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i],            'btn_type' => 'M',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing updated value of arrays in session    *    */    $_SESSION['update_array'] = $update_array;    $_SESSION['insert_array'] = $insert_array;    for ($j = 0; $j < count($source_tables_uncommon); $j++) {        $btn_structure_params = null;        $btn_data_params = null;        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$j])) {                $btn_structure_params = array($j, null, null, null, null, null);            }            $dst_table_name = $source_tables_uncommon[$j] . ' (' .  __('not present') . ')';        } else {            unset($uncommon_tables[$j]);            $dst_table_name = $source_tables_uncommon[$j];        }        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_data_diff))) {            if (isset($row_count[$j]) && ($row_count[$j] > 0)) {                $btn_data_params = array($j, null, $row_count[$j], null, null, null);            }        } else {            unset($row_count[$j]);        }        $rows[] = array(            'src_table_name' => $source_tables_uncommon[$j],            'dst_table_name' => $dst_table_name,            'btn_type' => 'U',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing the latest values of arrays in session    */    $_SESSION['uncommon_tables'] = $uncommon_tables;    $_SESSION['uncommon_tables_row_count'] = $row_count;    /**    * Displaying the target database tables    */    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * This "list" div will contain a table and each row will depict information about    * structure/data difference in tables.    * Rows will be generated dynamically as soon as the colored buttons "D" or "S"    * are clicked.    */    echo '<fieldset style="padding:0"><div id="list" style = "overflow:auto; height:140px; padding:1em">';    echo '<table>          <thead>            <tr style="width: 100%;">                <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>            </tr>            <tr style="width: 100%;">                <th style="width: 10%;">' . __('Table name') . '</th>                <th style="width: 10%;">' . __('Create table'). '</th>                <th style="width: 11%;">' . __('Add column(s)') . '</th>                <th style="width: 13%;">' . __('Remove column(s)') . '</th>                <th style="width: 11%;">' . __('Alter column(s)') . '</th>                <th style="width: 12%;">' . __('Remove index(s)') . '</th>                <th style="width: 11%;">' . __('Apply index(s)') . '</th>                <th style="width: 10%;">' . __('Update row(s)') . '</th>                <th style="width: 10%;">' . __('Insert row(s)') . '</th>            </tr>            </thead>            <tbody></tbody>         </table>        </div></fieldset>';    /**    *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables    */    echo '<fieldset>        <p><input type="checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'        . __('Would you like to delete all the previous rows from target tables?') . '</label> </p>        </fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="button" name="apply_changes" value="'        . __('Apply Selected Changes') . '" onclick ="ApplySelectedChanges('        . "'" . htmlspecialchars($_SESSION['token']) . "'" .')" />';    echo '<input type="submit" name="synchronize_db" value="'        . __('Synchronize Databases') . '" />'        . '</fieldset>';    echo '</form>';}/*** Displays the page when 'Synchronize Databases' is pressed.*/if (isset($_REQUEST['synchronize_db'])) {    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;   /**   * Display success message.   */    echo '<div class="success">'        . __('Target database has been synchronized with source database')        . '</div>';    /**    * Displaying all the tables of source and target database    * and now no difference is there.    */    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i]);    }    foreach ($source_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '+ ' . $tbl_nc_name,            'dst_table_name' => $tbl_nc_name);    }    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * connecting the source and target servers    */    if ('cur' != $_SESSION['src_type']) {        $src_link = PMA_DBI_connect($src_username, $src_password, $is_controluser = false, $_SESSION['src_server']);        $src_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $src_link);        $src_is_drizzle = (bool)preg_match('/\d{4}\./', $src_version);    } else {        $src_link = $GLOBALS['userlink'];        $src_version = PMA_MYSQL_STR_VERSION;        $src_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        // (does not work if user defined current server as a remote one)        $GLOBALS['db'] = $_SESSION['src_db'];    }    if ('cur' != $_SESSION['trg_type']) {        $trg_link = PMA_DBI_connect($trg_username, $trg_password, $is_controluser = false, $_SESSION['trg_server']);        $trg_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $trg_link);        $trg_is_drizzle = (bool)preg_match('/\d{4}\./', $trg_version);    } else {        $trg_link = $GLOBALS['userlink'];        $trg_version = PMA_MYSQL_STR_VERSION;        $trg_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        $GLOBALS['db'] = $_SESSION['trg_db'];    }    /**    * Displaying the queries.    */    echo '<fieldset><legend>' . __('Executed queries') . '</legend>';    /**    * Applying all sorts of differences for each matching table    */    for ($p = 0; $p < sizeof($matching_tables); $p++) {        /**        *  If the check box is checked for deleting previous rows from the target database tables then        *  first find out rows to be deleted and then delete the rows.        */        if (isset($_REQUEST['delete_rows'])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }        }        if (isset($alter_str_array[$p])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys, $p, true);            unset($alter_str_array[$p]);        }        if (! empty($add_column_array[$p])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $p, $uncommon_cols, true);            unset($add_column_array[$p]);        }        if (isset($uncommon_columns[$p])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $p, true);            unset($uncommon_columns[$p]);        }        if (isset($matching_table_structure_diff)            && (isset($add_indexes_array[$matching_table_structure_diff[$p]])            || isset($remove_indexes_array[$matching_table_structure_diff[$p]])            || isset($alter_indexes_array[$matching_table_structure_diff[$p]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$p], true);            unset($add_indexes_array[$matching_table_structure_diff[$p]]);            unset($alter_indexes_array[$matching_table_structure_diff[$p]]);            unset($remove_indexes_array[$matching_table_structure_diff[$p]]);        }        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $p, $matching_tables_keys, true);        PMA_insertIntoTargetTable(            $matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array, $p,            $matching_tables_keys, $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes,            $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, true        );    }    /**    *  Creating and populating tables present in source but absent    *  from target database.    */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($uncommon_tables[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }        if (isset($row_count[$q])) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }    }    echo "</fieldset>";}/** * Displays the main page when none of the following buttons is pressed */if (! isset($_REQUEST['submit_connect'])    && ! isset($_REQUEST['synchronize_db'])    && ! isset($_REQUEST['Table_ids'])) {/*** Displays the sub-page heading*/    echo '<h2>' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_sync.png')    : '')    . __('Synchronize')    .'</h2>';    echo  '<div id="serverstatus">    <form name="connection_form" id="connection_form" method="post" action="server_synchronize.php"   >' // TODO: add check if all var. are filled in    . PMA_generate_common_hidden_inputs('', '');    echo '<fieldset>';    echo '<legend>' . __('Synchronize') . '</legend>';    /**     * Displays the forms     */    $databases = PMA_DBI_get_databases_full(null, false, null, 'SCHEMA_NAME',        'ASC', 0, true);    $databases_to_hide = array(        'information_schema',        'mysql'    );    if (PMA_DRIZZLE) {        $databases_to_hide[] = 'data_dictionary';    }    if ($GLOBALS['cfg']['AllowArbitraryServer'] === false) {        $possibly_readonly = ' readonly="readonly"';    } else {        $possibly_readonly = '';    }    foreach ($cons as $type) {        if ('src' == $type) {            $database_header = __('Source database');        } else {            $database_header = __('Target database');        }        $database_header .= PMA_showHint(PMA_sanitize(sprintf('%sAllowArbitraryServer%s',            '[a@./Documentation.html#AllowArbitraryServer@_blank]', '[/a]')));?>      <table id="serverconnection_<?php echo $type; ?>_remote" class="data noclick">      <caption class="tblHeaders"><?php echo $database_header; ?></caption>      <tr class="odd">      <td colspan="2" style="text-align: center">         <select name="<?php echo $type; ?>_type" id="<?php echo $type; ?>_type" class="server_selector"><?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            $preselected_option = 'rmt';            echo '<option value="rmt" selected="selected">' . __('Enter manually') . '</option>';        } else {            $preselected_option = 'cur';        }        echo '<option value="cur"';        if ('cur' == $preselected_option) {            echo ' selected="selected"';        }        echo '>' .  __('Current connection') . '</option>';        $loaded_dbi = $GLOBALS['cfg']['Server']['extension'];        foreach ($GLOBALS['cfg']['Servers'] as $key => $tmp_server) {            if (empty($tmp_server['host']) && empty($tmp_server['socket'])) {                continue;            }            if (!empty($tmp_server['verbose'])) {                $label = $tmp_server['verbose'];            } else {                $label = $tmp_server['host'];                if (!empty($tmp_server['port'])) {                    $label .= ':' . $tmp_server['port'];                }            }            if ($loaded_dbi == 'drizzle' && $tmp_server['extension'] != 'drizzle'                    || $loaded_dbi != 'drizzle' && $tmp_server['extension'] == 'drizzle') {                // incompatible connection protocols                $disabled = ' disabled="disabled"';                $value = '';            } else {                $disabled = '';                $value = $tmp_server['host'];                $value .= '||||';                if (empty($tmp_server['port']) && empty($tmp_server['socket'])) {                    $value .= '3306';                } else {                    $value .= $tmp_server['port'];                }                $value .= '||||';                $value .= $tmp_server['socket'];                $value .= '||||';                $value .= $tmp_server['user'];                $value .= '||||';                $value .= $tmp_server['only_db'];            }            echo '<option value="' . $value . '"' . $disabled . '>'                . sprintf(__('Configuration: %s'), htmlspecialchars($label)) . '</option>';        } // end foreach?>         </select>      </td>      </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Server'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_host" class="server-host" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Port'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_port" class="server-port" <?php echo $possibly_readonly; ?> value="3306" maxlength="5" size="5" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Socket'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_socket" class="server-socket" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('User name'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_username" class="server-user" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Password'); ?></td>        <td><input type="password" name="<?php echo $type; ?>_pass" class="server-pass" /> </td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Database'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_db" class="server-db" /></td>    </tr>    <tr class="even toggler current-server" style="display: none;">        <td><?php echo __('Database'); ?></td>        <td><?php    $options_list = '';    foreach ($databases as $array_key => $db) {        if (in_array($db['SCHEMA_NAME'], $databases_to_hide)) {            unset($databases[$array_key]);        } else {            $options_list .= '<option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';        }    }    if (count($databases) == 0) {        echo __('No databases');    } else {        echo '<select name="' . $type . '_db_sel">'         . $options_list         . '</select>';        unset($options_list);    }    echo '</td> </tr>      </table>';   }   unset ($types, $type);    echo '    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_connect" value="' . __('Go') .'" id="buttonGo" />    </fieldset>    </form>    </div>    <div class="notice">' . __('Target database will be completely synchronized with source database. Source database will remain unchanged.') . '</div>';} /** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY = "UPLOAD_IDENTIFIER";/** * Returns upload status. * * This is implementation for uploadprogress extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_uploadprogressCheck() || $ret['finished']) {        return $ret;    }    $status = uploadprogress_get_info($id);    if ($status) {        if ($status['bytes_uploaded'] == $status['bytes_total']) {            $ret['finished'] = true;        } else {            $ret['finished'] = false;        }        $ret['total']    = $status['bytes_total'];        $ret['complete'] = $status['bytes_uploaded'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }    } else {       $ret = array(                    'id'       => $id,                    'finished' => true,                    'percent'  => 100,                    'total'    => $ret['total'],                    'complete' => $ret['total'],                    'plugin'   => $ID_KEY                );    }    $_SESSION[$SESSION_KEY][$id] = $ret;    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating the footer for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a fieldset for adding a new item, if the user has the privileges. * * @param    string   $docu   String used to create a link to the MySQL docs * @param    string   $priv   Privilege to check for adding a new item * @param    string   $name   MySQL name of the item * * @return   string   An HTML snippet with the link to add a new item */function PMA_RTE_getFooterLinks($docu, $priv, $name){    global $db, $url_query, $ajax_class;    $icon = 'b_' . strtolower($name) . '_add.png';    $retval  = "";    $retval .= "<!-- ADD " . $name . " FORM START -->\n";    $retval .= "<fieldset class='left'>\n";    $retval .= "    <legend>" . __('New'). "</legend>\n";    $retval .= "        <div class='wrap'>\n";    if (PMA_currentUserHasPrivilege($priv, $db)) {        $retval .= "            <a {$ajax_class['add']} ";        $retval .= "href='db_" . strtolower($name) . "s.php";        $retval .= "?$url_query&amp;add_item=1'>";        $retval .= PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('add') . "</a>\n";    } else {        $retval .= "            " . PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('no_create') . "\n";    }    $retval .= "            " . PMA_showMySQLDocu('SQL-Syntax', $docu) . "\n";    $retval .= "        </div>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- ADD " . $name . " FORM END -->\n\n";    return $retval;} // end PMA_RTE_getFooterLinks()/** * Creates a fieldset for adding a new routine, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_RTN_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');}// end PMA_RTN_getFooterLinks()/** * Creates a fieldset for adding a new trigger, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_TRI_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');} // end PMA_TRI_getFooterLinks()/** * Creates a fieldset for adding a new event, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_EVN_getFooterLinks(){    global $db, $url_query;    /**     * For events, we show the usual 'Add event' form and also     * a form for toggling the state of the event scheduler     */    // Init options for the event scheduler toggle functionality    $es_state = PMA_DBI_fetch_value(        "SHOW GLOBAL VARIABLES LIKE 'event_scheduler'",        0,        1    );    $es_state = strtolower($es_state);    $options = array(                    0 => array(                        'label' => __('OFF'),                        'value' => "SET GLOBAL event_scheduler=\"OFF\"",                        'selected' => ($es_state != 'on')                    ),                    1 => array(                        'label' => __('ON'),                        'value' => "SET GLOBAL event_scheduler=\"ON\"",                        'selected' => ($es_state == 'on')                    )               );    // Generate output    $retval  = "<!-- FOOTER LINKS START -->\n";    $retval .= "<div class='doubleFieldset'>\n";    // show the usual footer    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');    $retval .= "    <fieldset class='right'>\n";    $retval .= "        <legend>\n";    $retval .= "            " . __('Event scheduler status') . "\n";    $retval .= "        </legend>\n";    $retval .= "        <div class='wrap'>\n";    // show the toggle button    $retval .= PMA_toggleButton(        "sql.php?$url_query&amp;goto=db_events.php" . urlencode("?db=$db"),        'sql_query',        $options,        'PMA_slidingMessage(data.sql_query);'    );    $retval .= "        </div>\n";    $retval .= "    </fieldset>\n";    $retval .= "    <div style='clear: both;'></div>\n";    $retval .= "</div>";    $retval .= "<!-- FOOTER LINKS END -->\n";    return $retval;} // end PMA_EVN_getFooterLinks()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run single signon authentication. * * @package PhpMyAdmin-Auth-Signon *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    unset($_SESSION['LAST_SIGNON_URL']);    if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {        PMA_fatalError('You must set SignonURL!');    } elseif (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        /* Perform logout to custom URL */        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);    } else {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);    }    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    /* Check if we're using same sigon server */    if (isset($_SESSION['LAST_SIGNON_URL']) && $_SESSION['LAST_SIGNON_URL'] != $GLOBALS['cfg']['Server']['SignonURL']) {        return false;    }    /* Script name */    $script_name = $GLOBALS['cfg']['Server']['SignonScript'];    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Login URL */    $signon_url = $GLOBALS['cfg']['Server']['SignonURL'];    /* Current host */    $single_signon_host = $GLOBALS['cfg']['Server']['host'];    /* Current port */    $single_signon_port = $GLOBALS['cfg']['Server']['port'];    /* No configuration updates */    $single_signon_cfgupdate = array();    /* Are we requested to do logout? */    $do_logout = !empty($_REQUEST['old_usr']);    /* Handle script based auth */    if (!empty($script_name)) {        if (! file_exists($script_name)) {            PMA_fatalError(__('Can not find signon authentication script:') . ' ' . $script_name);        }        include $script_name;        list ($PHP_AUTH_USER, $PHP_AUTH_PW) = get_login_credentials($cfg['Server']['user']);    /* Does session exist? */    } elseif (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Clear error message */        unset($_SESSION['PMA_single_signon_error_message']);        /* Grab credentials if they exist */        if (isset($_SESSION['PMA_single_signon_user'])) {            if ($do_logout) {                $PHP_AUTH_USER = '';            } else {                $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];            }        }        if (isset($_SESSION['PMA_single_signon_password'])) {            if ($do_logout) {                $PHP_AUTH_PW = '';            } else {                $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];            }        }        if (isset($_SESSION['PMA_single_signon_host'])) {            $single_signon_host = $_SESSION['PMA_single_signon_host'];        }        if (isset($_SESSION['PMA_single_signon_port'])) {            $single_signon_port = $_SESSION['PMA_single_signon_port'];        }        if (isset($_SESSION['PMA_single_signon_cfgupdate'])) {            $single_signon_cfgupdate = $_SESSION['PMA_single_signon_cfgupdate'];        }        /* Also get token as it is needed to access subpages */        if (isset($_SESSION['PMA_single_signon_token'])) {            /* No need to care about token on logout */            $pma_token = $_SESSION['PMA_single_signon_token'];        }        /* End single signon session */        session_write_close();        /* Restart phpMyAdmin session */        session_name($old_session);        if (!empty($old_id)) {            session_id($old_id);        }        session_start();        /* Set the single signon host */        $GLOBALS['cfg']['Server']['host'] = $single_signon_host;        /* Set the single signon port */        $GLOBALS['cfg']['Server']['port'] = $single_signon_port;        /* Configuration update */        $GLOBALS['cfg']['Server'] = array_merge($GLOBALS['cfg']['Server'], $single_signon_cfgupdate);        /* Restore our token */        if (!empty($pma_token)) {            $_SESSION[' PMA_token '] = $pma_token;        }        /**         * Clear user cache.         */        PMA_clearUserCache();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        unset($_SESSION['LAST_SIGNON_URL']);        return false;    } else {        $_SESSION['LAST_SIGNON_URL'] = $GLOBALS['cfg']['Server']['SignonURL'];        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Does session exist? */    if (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Set error message */        if (! empty($GLOBALS['login_without_password_is_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Login without a password is forbidden by configuration (see AllowNoPassword)');        } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Access denied');        } elseif (! empty($GLOBALS['no_activity'])) {            $_SESSION['PMA_single_signon_error_message'] = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        } elseif (PMA_DBI_getError()) {            $_SESSION['PMA_single_signon_error_message'] = PMA_sanitize(PMA_DBI_getError());        } else {            $_SESSION['PMA_single_signon_error_message'] = __('Cannot log in to the MySQL server');        }    }    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/** * Handles the visualization of GIS LINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Linestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        return $this->setMinMax($linesrting, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                $temp_point = $point;            }        }        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                $temp_point = $point;            }        }        // print label        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        $row = '<polyline points="';        foreach ($points_arr as $point) {            $row .= $point[0] . ',' . $point[1] . ' ';        }        $row .= '"';        foreach ($line_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS LINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, null);        $row = 'new Array(';        foreach ($points_arr as $point) {            $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject()), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')';        $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.LineString(' . $row . '), null, '            . json_encode($style_options) . '));';        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_points = isset($gis_data[$index]['LINESTRING']['no_of_points'])            ? $gis_data[$index]['LINESTRING']['no_of_points'] : 2;        if ($no_of_points < 2) {            $no_of_points = 2;        }        $wkt = 'LINESTRING(';        for ($i = 0; $i < $no_of_points; $i++) {            $wkt .= ((isset($gis_data[$index]['LINESTRING'][$i]['x'])                && trim($gis_data[$index]['LINESTRING'][$i]['x']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['x'] : $empty)                . ' ' . ((isset($gis_data[$index]['LINESTRING'][$i]['y'])                && trim($gis_data[$index]['LINESTRING'][$i]['y']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['y'] : $empty) .',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'LINESTRING';            $wkt = $value;        }        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linestring = substr($wkt, 11, (strlen($wkt) - 12));        $points_arr = $this->extractPoints($linestring, null);        $no_of_points = count($points_arr);        $params[$index]['LINESTRING']['no_of_points'] = $no_of_points;        for ($i = 0; $i < $no_of_points; $i++) {            $params[$index]['LINESTRING'][$i]['x'] = $points_arr[$i][0];            $params[$index]['LINESTRING'][$i]['y'] = $points_arr[$i][1];        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__link_info(){    return array(        'info' => __('Displays a link to download this image.'),        );}/** * */function PMA_transformation_image_jpeg__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]">[BLOB]</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various checks and message functions used on index page. * * Security checks are the idea of Aung Khant <aungkhant[at]yehg.net>, http://yehg.net/lab * Version check taken from the old setup script by Michal iha <michal@cihar.com> * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Initializes message list */function messages_begin(){    if (! isset($_SESSION['messages']) || !is_array($_SESSION['messages'])) {        $_SESSION['messages'] = array('error' => array(), 'notice' => array());    } else {        // reset message states        foreach ($_SESSION['messages'] as &$messages) {            foreach ($messages as &$msg) {                $msg['fresh'] = false;                $msg['active'] = false;            }        }    }}/** * Adds a new message to message list * * @param string $type one of: notice, error * @param string $id unique message identifier * @param string $title language string id (in $str array) * @param string $message message text */function messages_set($type, $id, $title, $message){    $fresh = ! isset($_SESSION['messages'][$type][$id]);    $_SESSION['messages'][$type][$id] = array(        'fresh' => $fresh,        'active' => true,        'title' => $title,        'message' => $message);}/** * Cleans up message list */function messages_end(){    foreach ($_SESSION['messages'] as &$messages) {        $remove_ids = array();        foreach ($messages as $id => &$msg) {            if ($msg['active'] == false) {                $remove_ids[] = $id;            }        }        foreach ($remove_ids as $id) {            unset($messages[$id]);        }    }}/** * Prints message list, must be called after messages_end() */function messages_show_html(){    $old_ids = array();    foreach ($_SESSION['messages'] as $type => $messages) {        foreach ($messages as $id => $msg) {            echo '<div class="' . $type . '" id="' . $id . '">' . '<h4>' . $msg['title'] . '</h4>' . $msg['message'] . '</div>';            if (!$msg['fresh'] && $type != 'error') {                $old_ids[] = $id;            }        }    }    echo "\n" . '<script type="text/javascript">';    foreach ($old_ids as $id) {        echo "\nhiddenMessages.push('$id');";    }    echo "\n</script>\n";}/** * Checks for newest phpMyAdmin version and sets result as a new notice */function PMA_version_check(){    // version check messages should always be visible so let's make    // a unique message id each time we run it    $message_id = uniqid('version_check');    // wait 3s at most for server response, it's enough to get information    // from a working server    $connection_timeout = 3;    $url = 'http://phpmyadmin.net/home_page/version.php';    $context = stream_context_create(array(        'http' => array(            'timeout' => $connection_timeout)));    $data = @file_get_contents($url, null, $context);    if ($data === false) {        if (function_exists('curl_init')) {            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HEADER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            curl_setopt($ch, CURLOPT_TIMEOUT, $connection_timeout);            $data = curl_exec($ch);            curl_close($ch);        } else {            messages_set(                'error',                $message_id,                __('Version check'),                __('Neither URL wrapper nor CURL is available. Version check is not possible.'));            return;        }    }    if (empty($data)) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Reading of version failed. Maybe you\'re offline or the upgrade server does not respond.'));        return;    }    /* Format: version\ndate\n(download\n)* */    $data_list = explode("\n", $data);    if (count($data_list) > 1) {        $version = $data_list[0];        $date = $data_list[1];    } else {        $version = $date = '';    }    $version_upstream = version_to_int($version);    if ($version_upstream === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Got invalid version string from server'));        return;    }    $version_local = version_to_int($GLOBALS['PMA_Config']->get('PMA_VERSION'));    if ($version_local === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Unparsable version string'));        return;    }    if ($version_upstream > $version_local) {        $version = htmlspecialchars($version);        $date = htmlspecialchars($date);        messages_set(            'notice',            $message_id,            __('Version check'),            sprintf(__('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.'), $version, $date));    } else {        if ($version_local % 100 == 0) {            messages_set(                'notice',                $message_id,                __('Version check'),                PMA_sanitize(sprintf(__('You are using Git version, run [kbd]git pull[/kbd] :-)[br]The latest stable version is %s, released on %s.'), $version, $date)));        } else {            messages_set(                'notice',                $message_id,                __('Version check'),                __('No newer stable version is available'));        }    }}/** * Calculates numerical equivalent of phpMyAdmin version string * * @param string  $version * @return mixed  false on failure, integer on success */function version_to_int($version){    $matches = array();    if (!preg_match('/^(\d+)\.(\d+)\.(\d+)((\.|-(pl|rc|dev|beta|alpha))(\d+)?(-dev)?)?$/', $version, $matches)) {        return false;    }    if (!empty($matches[6])) {        switch ($matches[6]) {            case 'pl':                $added = 60;                break;            case 'rc':                $added = 30;                break;            case 'beta':                $added = 20;                break;            case 'alpha':                $added = 10;                break;            case 'dev':                $added = 0;                break;            default:                messages_set(                    'notice',                    'version_match',                    __('Version check'),                    'Unknown version part: ' . htmlspecialchars($matches[6]));                $added = 0;                break;        }    } else {        $added = 50; // for final    }    if (!empty($matches[7])) {        $added = $added + $matches[7];    }    return $matches[1] * 1000000 + $matches[2] * 10000 + $matches[3] * 100 + $added;}/** * Checks whether config file is readable/writable * * @param bool &$is_readable * @param bool &$is_writable * @param bool &$file_exists */function check_config_rw(&$is_readable, &$is_writable, &$file_exists){    $file_path = ConfigFile::getInstance()->getFilePath();    $file_dir = dirname($file_path);    $is_readable = true;    $is_writable = is_dir($file_dir);    if (SETUP_DIR_WRITABLE) {        $is_writable = $is_writable && is_writable($file_dir);    }    $file_exists = file_exists($file_path);    if ($file_exists) {        $is_readable = is_readable($file_path);        $is_writable = $is_writable && is_writable($file_path);    }}/** * Performs various compatibility, security and consistency checks on current config * * Outputs results to message list, must be called between messages_begin() * and messages_end() */function perform_config_checks(){    $cf = ConfigFile::getInstance();    $blowfish_secret = $cf->get('blowfish_secret');    $blowfish_secret_set = false;    $cookie_auth_used = false;    $strAllowArbitraryServerWarning = __('This %soption%s should be disabled as it allows attackers to bruteforce login to any MySQL server. If you feel this is necessary, use %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strAllowArbitraryServerWarning = sprintf($strAllowArbitraryServerWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strBlowfishSecretMsg = __('You didn\'t have blowfish secret set and have enabled cookie authentication, so a key was automatically generated for you. It is used to encrypt cookies; you don\'t need to remember it.');    $strBZipDumpWarning = __('%sBzip2 compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strBZipDumpWarning = sprintf($strBZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strDirectoryNotice = __('This value should be double checked to ensure that this directory is neither world accessible nor readable or writable by other users on your server.');    $strForceSSLNotice = __('This %soption%s should be enabled if your web server supports it.');    $strForceSSLNotice = sprintf($strForceSSLNotice, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strGZipDumpWarning = __('%sGZip compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strGZipDumpWarning = sprintf($strGZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strLoginCookieValidityWarning = __('%sLogin cookie validity%s greater than 1440 seconds may cause random session invalidation if %ssession.gc_maxlifetime%s is lower than its value (currently %d).');    $strLoginCookieValidityWarning = sprintf($strLoginCookieValidityWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@' . PMA_getPHPDocLink('session.configuration.php#ini.session.gc-maxlifetime') . ']', '[/a]', ini_get('session.gc_maxlifetime'));    $strLoginCookieValidityWarning2 = __('%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) at most. Values larger than 1800 may pose a security risk such as impersonation.');    $strLoginCookieValidityWarning2 = sprintf($strLoginCookieValidityWarning2, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strLoginCookieValidityWarning3 = __('If using cookie authentication and %sLogin cookie store%s is not 0, %sLogin cookie validity%s must be set to a value less or equal to it.');    $strLoginCookieValidityWarning3 = sprintf($strLoginCookieValidityWarning3, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strSecurityInfoMsg = __('If you feel this is necessary, use additional protection settings - %shost authentication%s settings and %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strSecurityInfoMsg = sprintf($strSecurityInfoMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server_config]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strServerAuthConfigMsg = __('You set the [kbd]config[/kbd] authentication type and included username and password for auto-login, which is not a desirable option for live hosts. Anyone who knows or guesses your phpMyAdmin URL can directly access your phpMyAdmin panel. Set %sauthentication type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].');    $strServerAuthConfigMsg = sprintf($strServerAuthConfigMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server]', '[/a]');    $strZipDumpExportWarning = __('%sZip compression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpExportWarning = sprintf($strZipDumpExportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strZipDumpImportWarning = __('%sZip decompression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpImportWarning = sprintf($strZipDumpImportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    for ($i = 1, $server_cnt = $cf->getServerCount(); $i <= $server_cnt; $i++) {        $cookie_auth_server = ($cf->getValue("Servers/$i/auth_type") == 'cookie');        $cookie_auth_used |= $cookie_auth_server;        $server_name = $cf->getServerName($i);        if ($server_name == 'localhost') {            $server_name .=  " [$i]";        }        $server_name = htmlspecialchars($server_name);        if ($cookie_auth_server && $blowfish_secret === null) {            $blowfish_secret = uniqid('', true);            $blowfish_secret_set = true;            $cf->set('blowfish_secret', $blowfish_secret);        }        //        // $cfg['Servers'][$i]['ssl']        // should be enabled if possible        //        if (!$cf->getValue("Servers/$i/ssl")) {            $title = PMA_lang(PMA_lang_name('Servers/1/ssl')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/ssl",                $title,                __('You should use SSL connections if your database server supports it.'));        }        //        // $cfg['Servers'][$i]['extension']        // warn about using 'mysql'        //        if ($cf->getValue("Servers/$i/extension") == 'mysql') {            $title = PMA_lang(PMA_lang_name('Servers/1/extension')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/extension",                $title,                __('You should use mysqli for performance reasons.'));        }        //        // $cfg['Servers'][$i]['auth_type']        // warn about full user credentials if 'auth_type' is 'config'        //        if ($cf->getValue("Servers/$i/auth_type") == 'config'                && $cf->getValue("Servers/$i/user") != ''                && $cf->getValue("Servers/$i/password") != '') {            $title = PMA_lang(PMA_lang_name('Servers/1/auth_type')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/auth_type",                $title,                PMA_lang($strServerAuthConfigMsg, $i) . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }        //        // $cfg['Servers'][$i]['AllowRoot']        // $cfg['Servers'][$i]['AllowNoPassword']        // serious security flaw        //        if ($cf->getValue("Servers/$i/AllowRoot")                && $cf->getValue("Servers/$i/AllowNoPassword")) {            $title = PMA_lang(PMA_lang_name('Servers/1/AllowNoPassword')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/AllowNoPassword",                $title,                __('You allow for connecting to the server without a password.') . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }    }    //    // $cfg['blowfish_secret']    // it's required for 'cookie' authentication    //    if ($cookie_auth_used) {        if ($blowfish_secret_set) {            // 'cookie' auth used, blowfish_secret was generated            messages_set(                'notice',                'blowfish_secret_created',                PMA_lang(PMA_lang_name('blowfish_secret')),                $strBlowfishSecretMsg);        } else {            $blowfish_warnings = array();            // check length            if (strlen($blowfish_secret) < 8) {                // too short key                $blowfish_warnings[] = __('Key is too short, it should have at least 8 characters.');            }            // check used characters            $has_digits = (bool) preg_match('/\d/', $blowfish_secret);            $has_chars = (bool) preg_match('/\S/', $blowfish_secret);            $has_nonword = (bool) preg_match('/\W/', $blowfish_secret);            if (!$has_digits || !$has_chars || !$has_nonword) {                $blowfish_warnings[] = PMA_lang(__('Key should contain letters, numbers [em]and[/em] special characters.'));            }            if (!empty($blowfish_warnings)) {                messages_set(                    'error',                    'blowfish_warnings' . count($blowfish_warnings),                    PMA_lang(PMA_lang_name('blowfish_secret')),                    implode('<br />', $blowfish_warnings));            }        }    }    //    // $cfg['ForceSSL']    // should be enabled if possible    //    if (!$cf->getValue('ForceSSL')) {        messages_set(            'notice',            'ForceSSL',            PMA_lang(PMA_lang_name('ForceSSL')),            PMA_lang($strForceSSLNotice));    }    //    // $cfg['AllowArbitraryServer']    // should be disabled    //    if ($cf->getValue('AllowArbitraryServer')) {        messages_set(            'notice',            'AllowArbitraryServer',            PMA_lang(PMA_lang_name('AllowArbitraryServer')),            PMA_lang($strAllowArbitraryServerWarning));    }    //    // $cfg['LoginCookieValidity']    // value greater than session.gc_maxlifetime will cause random session invalidation after that time    //    if ($cf->getValue('LoginCookieValidity') > 1440            || $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')) {        $message_type = $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')            ? 'error'            : 'notice';        messages_set(            $message_type,            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning));    }    //    // $cfg['LoginCookieValidity']    // should be at most 1800 (30 min)    //    if ($cf->getValue('LoginCookieValidity') > 1800) {        messages_set(            'notice',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning2));    }    //    // $cfg['LoginCookieValidity']    // $cfg['LoginCookieStore']    // LoginCookieValidity must be less or equal to LoginCookieStore    //    if ($cf->getValue('LoginCookieStore') != 0 && $cf->getValue('LoginCookieValidity') > $cf->getValue('LoginCookieStore')) {        messages_set(            'error',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning3));    }    //    // $cfg['SaveDir']    // should not be world-accessible    //    if ($cf->getValue('SaveDir') != '') {        messages_set(            'notice',            'SaveDir',            PMA_lang(PMA_lang_name('SaveDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['TempDir']    // should not be world-accessible    //    if ($cf->getValue('TempDir') != '') {        messages_set(            'notice',            'TempDir',            PMA_lang(PMA_lang_name('TempDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['GZipDump']    // requires zlib functions    //    if ($cf->getValue('GZipDump')            && (@!function_exists('gzopen') || @!function_exists('gzencode'))) {        messages_set(            'error',            'GZipDump',            PMA_lang(PMA_lang_name('GZipDump')),            PMA_lang($strGZipDumpWarning, 'gzencode'));    }    //    // $cfg['BZipDump']    // requires bzip2 functions    //    if ($cf->getValue('BZipDump')            && (!@function_exists('bzopen') || !@function_exists('bzcompress'))) {        $functions = @function_exists('bzopen')                ? '' :                'bzopen';        $functions .= @function_exists('bzcompress')                ? ''                : ($functions ? ', ' : '') . 'bzcompress';        messages_set(            'error',            'BZipDump',            PMA_lang(PMA_lang_name('BZipDump')),            PMA_lang($strBZipDumpWarning, $functions));    }    //    // $cfg['ZipDump']    // requires zip_open in import    //    if ($cf->getValue('ZipDump') && !@function_exists('zip_open')) {        messages_set(            'error',            'ZipDump_import',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpImportWarning, 'zip_open'));    }    //    // $cfg['ZipDump']    // requires gzcompress in export    //    if ($cf->getValue('ZipDump') && !@function_exists('gzcompress')) {        messages_set(            'error',            'ZipDump_export',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpExportWarning, 'gzcompress'));    }}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='core';$name='Helvetica';$up=-100;$ut=50;$dw=513;$diff='';$enc='';$desc=array('Flags'=>32,'FontBBox'=>'[-166 -225 1000 931]','ItalicAngle'=>0,'Ascent'=>931,'Descent'=>-225,'Leading'=>0,'CapHeight'=>718,'XHeight'=>523,'StemV'=>88,'StemH'=>76,'AvgWidth'=>513,'MaxWidth'=>1015,'MissingWidth'=>513);$cw=array(0=>500,1=>500,2=>500,3=>500,4=>500,5=>500,6=>500,7=>500,8=>500,9=>500,10=>500,11=>500,12=>500,13=>500,14=>500,15=>500,16=>500,17=>500,18=>500,19=>500,20=>500,21=>500,22=>500,23=>500,24=>500,25=>500,26=>500,27=>500,28=>500,29=>500,30=>500,31=>500,32=>278,33=>278,34=>355,35=>556,36=>556,37=>889,38=>667,39=>191,40=>333,41=>333,42=>389,43=>584,44=>278,45=>333,46=>278,47=>278,48=>556,49=>556,50=>556,51=>556,52=>556,53=>556,54=>556,55=>556,56=>556,57=>556,58=>278,59=>278,60=>584,61=>584,62=>584,63=>556,64=>1015,65=>667,66=>667,67=>722,68=>722,69=>667,70=>611,71=>778,72=>722,73=>278,74=>500,75=>667,76=>556,77=>833,78=>722,79=>778,80=>667,81=>778,82=>722,83=>667,84=>611,85=>722,86=>667,87=>944,88=>667,89=>667,90=>611,91=>278,92=>278,93=>277,94=>469,95=>556,96=>333,97=>556,98=>556,99=>500,100=>556,101=>556,102=>278,103=>556,104=>556,105=>222,106=>222,107=>500,108=>222,109=>833,110=>556,111=>556,112=>556,113=>556,114=>333,115=>500,116=>278,117=>556,118=>500,119=>722,120=>500,121=>500,122=>500,123=>334,124=>260,125=>334,126=>584,127=>500,128=>655,129=>500,130=>222,131=>278,132=>333,133=>1000,134=>556,135=>556,136=>333,137=>1000,138=>667,139=>250,140=>1000,141=>500,142=>611,143=>500,144=>500,145=>222,146=>221,147=>333,148=>333,149=>350,150=>556,151=>1000,152=>333,153=>1000,154=>500,155=>250,156=>938,157=>500,158=>500,159=>667,160=>278,161=>278,162=>556,163=>556,164=>556,165=>556,166=>260,167=>556,168=>333,169=>737,170=>370,171=>448,172=>584,173=>333,174=>737,175=>333,176=>606,177=>584,178=>350,179=>350,180=>333,181=>556,182=>537,183=>278,184=>333,185=>350,186=>365,187=>448,188=>869,189=>869,190=>879,191=>556,192=>667,193=>667,194=>667,195=>667,196=>667,197=>667,198=>1000,199=>722,200=>667,201=>667,202=>667,203=>667,204=>278,205=>278,206=>278,207=>278,208=>722,209=>722,210=>778,211=>778,212=>778,213=>778,214=>778,215=>584,216=>778,217=>722,218=>722,219=>722,220=>722,221=>667,222=>666,223=>611,224=>556,225=>556,226=>556,227=>556,228=>556,229=>556,230=>896,231=>500,232=>556,233=>556,234=>556,235=>556,236=>251,237=>251,238=>251,239=>251,240=>556,241=>556,242=>556,243=>556,244=>556,245=>556,246=>556,247=>584,248=>611,249=>556,250=>556,251=>556,252=>556,253=>500,254=>555,255=>500);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface for the zip extension * @package    phpMyAdmin *//** * Gets zip file contents * * @param string $file           zip file * @param string $specific_entry regular expression to match a file * * @return array ($error_message, $file_data); $error_message *                  is empty if no error */function PMA_getZipContents($file, $specific_entry = null){    $error_message = '';    $file_data = '';    $zip_handle = zip_open($file);    if (is_resource($zip_handle)) {        $first_zip_entry = zip_read($zip_handle);        if (false === $first_zip_entry) {            $error_message = __('No files found inside ZIP archive!');        } else {            /* Is the the zip really an ODS file? */            $read = zip_entry_read($first_zip_entry);            $ods_mime = 'application/vnd.oasis.opendocument.spreadsheet';            if (!strcmp($ods_mime, $read)) {                $specific_entry = '/^content\.xml$/';            }            if (isset($specific_entry)) {                /* Return the correct contents, not just the first entry */                for ( ; ; ) {                    $entry = zip_read($zip_handle);                    if (is_resource($entry)) {                        if (preg_match($specific_entry, zip_entry_name($entry))) {                            zip_entry_open($zip_handle, $entry, 'r');                            $file_data = zip_entry_read($entry, zip_entry_filesize($entry));                            zip_entry_close($entry);                            break;                        }                    } else {                        /**                         * Either we have reached the end of the zip and still                         * haven't found $specific_entry or there was a parsing                         * error that we must display                         */                        if ($entry === false) {                            $error_message = __('Error in ZIP archive:') . ' Could not find "' . $specific_entry . '"';                        } else {                            $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);                        }                        break;                    }                }            } else {                zip_entry_open($zip_handle, $first_zip_entry, 'r');                /* File pointer has already been moved, so include what was read above */                $file_data = $read;                $file_data .= zip_entry_read($first_zip_entry, zip_entry_filesize($first_zip_entry));                zip_entry_close($first_zip_entry);            }        }    } else {        $error_message = __('Error in ZIP archive:') . ' ' . PMA_getZipError($zip_handle);    }    zip_close($zip_handle);    return (array('error' => $error_message, 'data' => $file_data));}/** * Returns the file name of the first file that matches the given $file_regexp. * * @param string $file_regexp regular expression for the file name to match * @param string $file        zip archive * * @return string the file name of the first file that matches the given regexp */function PMA_findFileFromZipArchive ($file_regexp, $file){    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            if (preg_match($file_regexp, zip_entry_name($entry))) {                $file_name = zip_entry_name($entry);                zip_close($zip_handle);                return $file_name;            }            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return false;}/** * Returns the number of files in the zip archive. * * @param string $file zip archive * * @return int the number of files in the zip archive */function PMA_getNoOfFilesInZip($file){    $count = 0;    $zip_handle = zip_open($file);    $found = false;    if (is_resource($zip_handle)) {        $entry = zip_read($zip_handle);        while (is_resource($entry)) {            $count++;            $entry = zip_read($zip_handle);        }    }    zip_close($zip_handle);    return $count;}/** * Extracts a set of files from the given zip archive to a given destinations. * * @param string $zip_path    path to the zip archive * @param string $destination destination to extract files * @param array  $entries     files in archive that should be extracted * * @return bool true on sucess, false otherwise */function PMA_zipExtract($zip_path, $destination, $entries){    $zip = new ZipArchive;    if ($zip->open($zip_path) === true) {        $zip->extractTo($destination, $entries);        $zip->close();        return true;    }    return false;}/**  * Gets zip error message  *  * @param integer $code error code  *  * @return string error message */function PMA_getZipError($code){    // I don't think this needs translation    switch ($code) {    case ZIPARCHIVE::ER_MULTIDISK:        $message = 'Multi-disk zip archives not supported';        break;    case ZIPARCHIVE::ER_READ:        $message = 'Read error';        break;    case ZIPARCHIVE::ER_CRC:        $message = 'CRC error';        break;    case ZIPARCHIVE::ER_NOZIP:        $message = 'Not a zip archive';        break;    case ZIPARCHIVE::ER_INCONS:        $message = 'Zip archive inconsistent';        break;    default:        $message = $code;    }    return $message;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common config manipulation functions * * @package PhpMyAdmin *//** * Returns sanitized language string, taking into account our special codes * for formatting. Takes variable number of arguments. * Based on PMA_sanitize from sanitize.lib.php. * * @param  string  $lang_key  key in $GLOBALS WITHOUT 'strSetup' prefix * @param  mixed   $args,...  arguments for sprintf * @return string */function PMA_lang($lang_key, $args = null){    $message = isset($GLOBALS["strConfig$lang_key"]) ? $GLOBALS["strConfig$lang_key"] : $lang_key;    $message = PMA_sanitize($message);    if (func_num_args() == 1) {        return $message;    } else {        $args = func_get_args();        array_shift($args);        return vsprintf($message, $args);    }}/** * Returns translated field name/description or comment * * @param string $canonical_path * @param string $type  'name', 'desc' or 'cmt' * @param mixed  $default * @return string */function PMA_lang_name($canonical_path, $type = 'name', $default = 'key'){    $lang_key = str_replace(        array('Servers/1/', '/'),        array('Servers/', '_'),        $canonical_path) . '_' . $type;    return isset($GLOBALS["strConfig$lang_key"])        ? ($type == 'desc' ? PMA_lang($lang_key) : $GLOBALS["strConfig$lang_key"])        : ($default == 'key' ? $lang_key : $default);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as JSON * * @package PhpMyAdmin-Export * @subpackage JSON */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['json'] = array(        'text'          => 'JSON',        'extension'     => 'json',        'mime_type'     => 'text/plain',        'options'       => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),            array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(            '/**' . $GLOBALS['crlf']            . ' Export to JSON plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' @version 0.1' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('// Database \'' . $db . '\'' . $GLOBALS['crlf'] );        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in JSON format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= '// ' . $db . '.' . $table . $crlf . $crlf;                $buffer .= '[{';            } else {                $buffer .= ', {';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $isLastLine = ($i + 1 >= $columns_cnt);                $column = $columns[$i];                if (is_null($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": null' . (! $isLastLine ? ',' : '');                } elseif (is_numeric($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": ' . $record[$i] . (! $isLastLine ? ',' : '');                } else {                    $buffer .= '"' . addslashes($column) . '": "' . addslashes($record[$i]) . '"' . (! $isLastLine ? ',' : '');                }            }            $buffer .= '}';        }        if ($record_cnt) {            $buffer .=  ']';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_operations.php&amp;back=tbl_operations.php';$url_params['goto'] = $url_params['back'] = 'tbl_operations.php';/** * Gets relation settings */$cfgRelation = PMA_getRelationsParam();/** * Gets available MySQL charsets and storage engines */require_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';/** * Class for partition management */require_once './libraries/Partition.class.php';// reselect current db (needed in some cases probably due to// the calling of relation.lib.php)PMA_DBI_select_db($GLOBALS['db']);/** * Gets tables informations */require './libraries/tbl_info.inc.php';// define some globals here, for improved syntax in the conditionals$is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;// set initial value of these globals, based on the current table enginePMA_set_global_variables_for_engine($tbl_type);if ($is_aria) {    // the value for transactional can be implicit    // (no create option found, in this case it means 1)    // or explicit (option found with a value of 0 or 1)    // ($transactional may have been set by libraries/tbl_info.inc.php,    // from the $create_options)    $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';    $page_checksum = (isset($page_checksum)) ? $page_checksum : '';}$reread_info = false;$table_alters = array();/** * If the table has to be moved to some other database */if (isset($_REQUEST['submit_move']) || isset($_REQUEST['submit_copy'])) {    $_message = '';    include_once './tbl_move_copy.php';}/** * If the table has to be maintained */if (isset($_REQUEST['table_maintenance'])) {    include_once './sql.php';    unset($result);}/** * Updates table comment, type and options if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'])) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }    if (isset($_REQUEST['comment'])      && urldecode($_REQUEST['prev_comment']) !== $_REQUEST['comment']) {        $table_alters[] = 'COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (! empty($_REQUEST['new_tbl_type'])      && strtolower($_REQUEST['new_tbl_type']) !== strtolower($tbl_type)) {        $table_alters[] = 'ENGINE = ' . $_REQUEST['new_tbl_type'];        $tbl_type = $_REQUEST['new_tbl_type'];        // reset the globals for the new engine        PMA_set_global_variables_for_engine($tbl_type);        if ($is_aria) {            $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';            $page_checksum = (isset($page_checksum)) ? $page_checksum : '';        }    }    if (! empty($_REQUEST['tbl_collation'])      && $_REQUEST['tbl_collation'] !== $tbl_collation) {        $table_alters[] = 'DEFAULT ' . PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (($is_myisam_or_aria || $is_isam)      && isset($_REQUEST['new_pack_keys'])      && $_REQUEST['new_pack_keys'] != (string)$pack_keys) {        $table_alters[] = 'pack_keys = ' . $_REQUEST['new_pack_keys'];    }    $checksum = empty($checksum) ? '0' : '1';    $_REQUEST['new_checksum'] = empty($_REQUEST['new_checksum']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_checksum'] !== $checksum) {        $table_alters[] = 'checksum = ' . $_REQUEST['new_checksum'];    }    $_REQUEST['new_transactional'] = empty($_REQUEST['new_transactional']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_transactional'] !== $transactional) {        $table_alters[] = 'TRANSACTIONAL = ' . $_REQUEST['new_transactional'];    }    $_REQUEST['new_page_checksum'] = empty($_REQUEST['new_page_checksum']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_page_checksum'] !== $page_checksum) {        $table_alters[] = 'PAGE_CHECKSUM = ' . $_REQUEST['new_page_checksum'];    }    $delay_key_write = empty($delay_key_write) ? '0' : '1';    $_REQUEST['new_delay_key_write'] = empty($_REQUEST['new_delay_key_write']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_delay_key_write'] !== $delay_key_write) {        $table_alters[] = 'delay_key_write = ' . $_REQUEST['new_delay_key_write'];    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_auto_increment'])      && (! isset($auto_increment) || $_REQUEST['new_auto_increment'] !== $auto_increment)) {        $table_alters[] = 'auto_increment = ' . PMA_sqlAddSlashes($_REQUEST['new_auto_increment']);    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_row_format'])      && (! isset($row_format) || strtolower($_REQUEST['new_row_format']) !== strtolower($row_format))) {        $table_alters[] = 'ROW_FORMAT = ' . PMA_sqlAddSlashes($_REQUEST['new_row_format']);    }    if (count($table_alters) > 0) {        $sql_query      = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']);        $sql_query     .= "\r\n" . implode("\r\n", $table_alters);        $result        .= PMA_DBI_query($sql_query) ? true : false;        $reread_info    = true;        unset($table_alters);        foreach (PMA_DBI_get_warnings() as $warning) {            // In MariaDB 5.1.44, when altering a table from Maria to MyISAM            // and if TRANSACTIONAL was set, the system reports an error;            // I discussed with a Maria developer and he agrees that this            // should not be reported with a Level of Error, so here            // I just ignore it. But there are other 1478 messages            // that it's better to show.            if (! ($_REQUEST['new_tbl_type'] == 'MyISAM' && $warning['Code'] == '1478' && $warning['Level'] == 'Error')) {                $warning_messages[] = $warning['Level'] . ': #' . $warning['Code']                    . ' ' . $warning['Message'];            }        }    }}/** * Reordering the table has been requested by the user */if (isset($_REQUEST['submitorderby']) && ! empty($_REQUEST['order_field'])) {    $sql_query = '        ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . '        ORDER BY ' . PMA_backquote(urldecode($_REQUEST['order_field']));    if (isset($_REQUEST['order_order']) && $_REQUEST['order_order'] === 'desc') {        $sql_query .= ' DESC';    }    $result = PMA_DBI_query($sql_query);} // end if/** * A partition operation has been requested by the user */if (isset($_REQUEST['submit_partition']) && ! empty($_REQUEST['partition_operation'])) {    $sql_query = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ' . $_REQUEST['partition_operation'] . ' PARTITION ' . $_REQUEST['partition_name'];    $result = PMA_DBI_query($sql_query);} // end ifif ($reread_info) {    // to avoid showing the old value (for example the AUTO_INCREMENT) after    // a change, clear the cache    PMA_Table::$cache = array();    $page_checksum = $checksum = $delay_key_write = 0;    include './libraries/tbl_info.inc.php';}unset($reread_info);/** * Displays top menu links in non ajax requests */if (!isset($_REQUEST['ajax_request'])) {    include_once './libraries/tbl_links.inc.php';}if (isset($result) && empty($message_to_show)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? $message = PMA_Message::success(__('Your SQL query has been executed successfully')) : PMA_Message::error(__('Error'));        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($_message, $_message->isSuccess(), $extra_data);        }    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        if ( $_REQUEST['ajax_request'] == true) {            PMA_ajaxResponse($_message, false);        }        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type);    unset($_message, $_type);}$url_params['goto'] = 'tbl_operations.php';$url_params['back'] = 'tbl_operations.php';/** * Get columns names */$columns = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);/** * Displays the page */?><!-- Order the table --><div class="operations_half_width"><form method="post" id="alterTableOrderby" action="tbl_operations.php" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset id="fieldset_table_order">    <legend><?php echo __('Alter table order by'); ?></legend>    <select name="order_field"><?phpforeach ($columns as $fieldname) {    echo '            <option value="' . htmlspecialchars($fieldname['Field']) . '">'        . htmlspecialchars($fieldname['Field']) . '</option>' . "\n";}unset($columns);?>    </select> <?php echo __('(singly)'); ?>    <select name="order_order">        <option value="asc"><?php echo __('Ascending'); ?></option>        <option value="desc"><?php echo __('Descending'); ?></option>    </select></fieldset><fieldset class="tblFooters">    <input type="submit" name="submitorderby" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Move table --><div class="operations_half_width"><form method="post" action="tbl_operations.php"    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><input type="hidden" name="what" value="data" /><fieldset id="fieldset_table_rename">    <legend><?php echo __('Move table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()"value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" /><br />    <?php    // starting with MySQL 5.0.24, SHOW CREATE TABLE includes the AUTO_INCREMENT    // next value but users can decide if they want it or not for the operation    ?>    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_mv" checked="checked" />    <label for="checkbox_auto_increment_mv"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br /></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_move" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?phpif (strstr($show_comment, '; InnoDB free') === false) {    if (strstr($show_comment, 'InnoDB free') === false) {        // only user entered comment        $comment = $show_comment;    } else {        // here we have just InnoDB generated part        $comment = '';    }} else {    // remove InnoDB comment from end, just the minimal part (*? is non greedy)    $comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);}// PACK_KEYS: MyISAM or ISAM// DELAY_KEY_WRITE, CHECKSUM, : MyISAM only// AUTO_INCREMENT: MyISAM and InnoDB since 5.0.3, PBXT// Here should be version check for InnoDB, however it is supported// in >5.0.4, >4.1.12 and >4.0.11, so I decided not to// check for version?><!-- Table options --><div class="operations_half_width clearfloat"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Table options'); ?></legend>    <table>    <!-- Change table name -->    <tr><td><?php echo __('Rename table to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    <!-- Table comments -->    <tr><td><?php echo __('Table comments'); ?></td>        <td><input type="text" name="comment" maxlength="60" size="30"                value="<?php echo htmlspecialchars($comment); ?>" onfocus="this.select()" />            <input type="hidden" name="prev_comment" value="<?php echo htmlspecialchars($comment); ?>" />        </td>    </tr>    <!-- Storage engine -->    <tr><td><?php echo __('Storage Engine'); ?>            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </td>        <td><?php echo PMA_StorageEngine::getHtmlSelect('new_tbl_type', null, $tbl_type); ?>        </td>    </tr>    <!-- Table character set -->    <tr><td><?php echo __('Collation'); ?></td>        <td><?php echo PMA_generateCharsetDropdownBox(                PMA_CSDROPDOWN_COLLATION,                'tbl_collation', null, $tbl_collation, false, 3            ); ?>        </td>    </tr><?phpif ($is_myisam_or_aria || $is_isam) {    ?>    <tr>        <td><label for="new_pack_keys">PACK_KEYS</label></td>        <td><select name="new_pack_keys" id="new_pack_keys">                <option value="DEFAULT"                    <?php if ($pack_keys == 'DEFAULT') echo 'selected="selected"'; ?>                    >DEFAULT</option>                <option value="0"                    <?php if ($pack_keys == '0') echo 'selected="selected"'; ?>                    >0</option>                <option value="1"                    <?php if ($pack_keys == '1') echo 'selected="selected"'; ?>                    >1</option>            </select>        </td>    </tr>    <?php} // end if (MYISAM|ISAM)if ($is_myisam_or_aria) {    ?>    <tr><td><label for="new_checksum">CHECKSUM</label></td>        <td><input type="checkbox" name="new_checksum" id="new_checksum"                value="1"    <?php echo (isset($checksum) && $checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_delay_key_write">DELAY_KEY_WRITE</label></td>        <td><input type="checkbox" name="new_delay_key_write" id="new_delay_key_write"                value="1"    <?php echo (isset($delay_key_write) && $delay_key_write == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (MYISAM)if ($is_aria) {    ?>    <tr><td><label for="new_transactional">TRANSACTIONAL</label></td>        <td><input type="checkbox" name="new_transactional" id="new_transactional"                value="1"    <?php echo (isset($transactional) && $transactional == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_page_checksum">PAGE_CHECKSUM</label></td>        <td><input type="checkbox" name="new_page_checksum" id="new_page_checksum"                value="1"    <?php echo (isset($page_checksum) && $page_checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (ARIA)if (isset($auto_increment) && strlen($auto_increment) > 0  && ($is_myisam_or_aria || $is_innodb || $is_pbxt)) {    ?>    <tr><td><label for="auto_increment_opt">AUTO_INCREMENT</label></td>        <td><input type="text" name="new_auto_increment" id="auto_increment_opt"                value="<?php echo $auto_increment; ?>" /></td>    </tr>    <?php} // end if (MYISAM|INNODB)// the outer array is for engines, the inner array contains the dropdown// option values as keys then the dropdown option labels$possible_row_formats = array(     'ARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MYISAM' => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'PBXT'   => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'INNODB' => array(         'COMPACT'  => 'COMPACT',         'REDUNDANT' => 'REDUNDANT'));$innodb_engine_plugin = PMA_StorageEngine::getEngine('innodb');$innodb_plugin_version = $innodb_engine_plugin->getInnodbPluginVersion();if (!empty($innodb_plugin_version)) {    $innodb_file_format = $innodb_engine_plugin->getInnodbFileFormat();} else {    $innodb_file_format = '';}if ('Barracuda' == $innodb_file_format && $innodb_engine_plugin->supportsFilePerTable()) {    $possible_row_formats['INNODB']['DYNAMIC'] = 'DYNAMIC';    $possible_row_formats['INNODB']['COMPRESSED'] = 'COMPRESSED';}unset($innodb_engine_plugin, $innodb_plugin_version, $innodb_file_format);// for MYISAM there is also COMPRESSED but it can be set only by the// myisampack utility, so don't offer here the choice because if we// try it inside an ALTER TABLE, MySQL (at least in 5.1.23-maria)// does not return a warning// (if the table was compressed, it can be seen on the Structure page)if (isset($possible_row_formats[$tbl_type])) {    $current_row_format = strtoupper($showtable['Row_format']);    echo '<tr><td><label for="new_row_format">ROW_FORMAT</label></td>';    echo '<td>';    echo PMA_generate_html_dropdown('new_row_format', $possible_row_formats[$tbl_type], $current_row_format, 'new_row_format');    unset($possible_row_formats, $current_row_format);    echo '</td>';    echo '</tr>';}?>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Copy table --><div class="operations_half_width"><form method="post" action="tbl_operations.php" name="copyTable" id="copyTable" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Copy table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()" value="<?php echo htmlspecialchars($GLOBALS['table']); ?>"/><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>    <input type="checkbox" name="drop_if_exists" value="true" id="checkbox_drop" />    <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), 'DROP TABLE'); ?></label><br />    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_cp" />    <label for="checkbox_auto_increment_cp"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br />    <?php        // display "Add constraints" choice only if there are        // foreign keys        if (PMA_getForeigners($GLOBALS['db'], $GLOBALS['table'], '', 'foreign')) {        ?>    <input type="checkbox" name="add_constraints" value="1" id="checkbox_constraints" />    <label for="checkbox_constraints"><?php echo __('Add constraints'); ?></label><br />        <?php        } // endif        if (isset($_COOKIE['pma_switch_to_new'])          && $_COOKIE['pma_switch_to_new'] == 'true') {            $pma_switch_to_new = 'true';        }    ?>    <input type="checkbox" name="switch_to_new" value="true"        id="checkbox_switch"<?php echo            isset($pma_switch_to_new) && $pma_switch_to_new == 'true'            ? ' checked="checked"'            : ''; ?> />    <label for="checkbox_switch"><?php echo __('Switch to copied table'); ?></label></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" /></fieldset></form></div><br class="clearfloat"/><div class="operations_half_width"><fieldset> <legend><?php echo __('Table maintenance'); ?></legend><ul id="tbl_maintenance" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php// Note: BERKELEY (BDB) is no longer supported, starting with MySQL 5.1if ($is_myisam_or_aria || $is_innodb || $is_berkeleydb) {    if ($is_myisam_or_aria || $is_innodb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'CHECK TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Check table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'CHECK_TABLE'); ?>    </li>        <?php    }    if ($is_innodb) {        $this_url_params = array_merge(            $url_params,            array('sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ENGINE = InnoDB')        );        ?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Defragment table'); ?></a>        <?php echo PMA_showMySQLDocu('Table_types', 'InnoDB_File_Defragmenting'); ?>    </li>        <?php    }    if ($is_myisam_or_aria || $is_berkeleydb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'ANALYZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Analyze table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'ANALYZE_TABLE');?>    </li>        <?php    }    if ($is_myisam_or_aria && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'REPAIR TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Repair table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'REPAIR_TABLE'); ?>    </li>        <?php    }    if (($is_myisam_or_aria || $is_innodb || $is_berkeleydb) && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'OPTIMIZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Optimize table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'OPTIMIZE_TABLE'); ?>    </li>        <?php    }} // end MYISAM or BERKELEYDB case$this_url_params = array_merge(    $url_params,    array(        'sql_query' => 'FLUSH TABLE ' . PMA_backquote($GLOBALS['table']),        'message_to_show' => sprintf(            __('Table %s has been flushed'),            htmlspecialchars($GLOBALS['table'])        ),        'reload'    => 1,    ));?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Flush the table (FLUSH)'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'FLUSH'); ?>    </li></ul></fieldset></div><?php if (! (isset($db_is_information_schema) && $db_is_information_schema)) { ?><div class="operations_half_width"><fieldset class="caution"> <legend><?php echo __('Delete data or table'); ?></legend><ul><?phpif (! $tbl_is_view && ! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'tbl_structure.php',            'reload' => '1',            'message_to_show' => sprintf(__('Table %s has been emptied'), htmlspecialchars($table)),        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="truncate_tbl_anchor" class="ajax"' : ''); ?>>            <?php echo __('Empty the table (TRUNCATE)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'TRUNCATE_TABLE'); ?>    </li><?php}if (! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'DROP TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'db_operations.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(($tbl_is_view ? __('View %s has been dropped') : __('Table %s has been dropped')), htmlspecialchars($table)),            // table name is needed to avoid running            // PMA_relationsCleanupDatabase() on the whole db later            'table' => $GLOBALS['table'],        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_tbl_anchor"' : ''); ?>>            <?php echo __('Delete the table (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_TABLE'); ?>    </li><?php}?></ul></fieldset></div><?php}?><br class="clearfloat"><?php if (PMA_Partition::havePartitioning()) {    $partition_names = PMA_Partition::getPartitionNames($db, $table);    // show the Partition maintenance section only if we detect a partition    if (! is_null($partition_names[0])) {    ?><div class="operations_half_width"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset> <legend><?php echo __('Partition maintenance'); ?></legend><?php        $html_select = '<select name="partition_name">' . "\n";        foreach ($partition_names as $one_partition) {            $one_partition = htmlspecialchars($one_partition);            $html_select .= '<option value="' . $one_partition . '">' . $one_partition . '</option>' . "\n";        }        $html_select .= '</select>' . "\n";        printf(__('Partition %s'), $html_select);        unset($partition_names, $one_partition, $html_select);        $choices = array(            'ANALYZE' => __('Analyze'),            'CHECK' => __('Check'),            'OPTIMIZE' => __('Optimize'),            'REBUILD' => __('Rebuild'),            'REPAIR' => __('Repair'));        PMA_display_html_radio('partition_operation', $choices, '', false);        unset($choices);        echo PMA_showMySQLDocu('partitioning_maintenance', 'partitioning_maintenance');        // I'm not sure of the best way to display that; this link does        // not depend on the Go button    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' REMOVE PARTITIONING'            )        );?>    <br /><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Remove partitioning'); ?></a></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_partition" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php        } // end if    } // end if// Referential integrity check// The Referential integrity check was intended for the non-InnoDB// tables for which the relations are defined in pmadb// so I assume that if the current table is InnoDB, I don't display// this choice (InnoDB maintains integrity by itself)if ($cfgRelation['relwork'] && ! $is_innodb) {    PMA_DBI_select_db($GLOBALS['db']);    $foreign = PMA_getForeigners($GLOBALS['db'], $GLOBALS['table']);    if ($foreign) {        ?>    <!-- Referential integrity check --><div class="operations_half_width"><fieldset> <legend><?php echo __('Check referential integrity:'); ?></legend>    <ul>        <?php        echo "\n";        foreach ($foreign AS $master => $arr) {            $join_query  = 'SELECT ' . PMA_backquote($GLOBALS['table']) . '.* FROM '                         . PMA_backquote($GLOBALS['table']) . ' LEFT JOIN '                         . PMA_backquote($arr['foreign_table']);            if ($arr['foreign_table'] == $GLOBALS['table']) {                $foreign_table = $GLOBALS['table'] . '1';                $join_query .= ' AS ' . PMA_backquote($foreign_table);            } else {                $foreign_table = $arr['foreign_table'];            }            $join_query .= ' ON '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' = ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' WHERE '                         . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' IS NULL AND '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' IS NOT NULL';            $this_url_params = array_merge(                $url_params,                array('sql_query' => $join_query)            );            echo '        <li>'                 . '<a href="sql.php'                 . PMA_generate_common_url($this_url_params)                 . '">' . $master . '&nbsp;->&nbsp;' . $arr['foreign_table'] . '.' . $arr['foreign_field']                 . '</a></li>' . "\n";        } //  foreach $foreign        unset($foreign_table, $join_query);        ?>    </ul>   </fieldset>  </div>        <?php    } // end if ($foreign)} // end  if (!empty($cfg['Server']['relation']))/** * Displays the footer */require './libraries/footer.inc.php';function PMA_set_global_variables_for_engine($tbl_type){    global $is_myisam_or_aria, $is_innodb, $is_isam, $is_berkeleydb, $is_aria, $is_pbxt;    $is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;    $upper_tbl_type = strtoupper($tbl_type);    //Options that apply to MYISAM usually apply to ARIA    $is_myisam_or_aria = ($upper_tbl_type == 'MYISAM' || $upper_tbl_type == 'ARIA' || $upper_tbl_type == 'MARIA');    $is_aria = ($upper_tbl_type == 'ARIA');    $is_isam = ($upper_tbl_type == 'ISAM');    $is_innodb = ($upper_tbl_type == 'INNODB');    $is_berkeleydb = ($upper_tbl_type == 'BERKELEYDB');    $is_pbxt = ($upper_tbl_type == 'PBXT');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Ensure the database and the table exist (else move to the "parent" script) * and display headers * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (empty($is_db)) {    if (strlen($db)) {        $is_db = @PMA_DBI_select_db($db);    } else {        $is_db = false;    }    if (! $is_db) {        // not a valid db name -> back to the welcome page        if (! defined('IS_TRANSFORMATION_WRAPPER')) {            $url_params = array('reload' => 1);            if (isset($message)) {                $url_params['message'] = $message;            }            if (! empty($sql_query)) {                $url_params['sql_query'] = $sql_query;            }            if (isset($show_as_php)) {                $url_params['show_as_php'] = $show_as_php;            }            PMA_sendHeaderLocation(                $cfg['PmaAbsoluteUri'] . 'main.php'                    . PMA_generate_common_url($url_params, '&'));        }        exit;    }} // end if (ensures db exists)if (empty($is_table) && !defined('PMA_SUBMIT_MULT') && ! defined('TABLE_MAY_BE_ABSENT')) {    // Not a valid table name -> back to the db_sql.php    if (strlen($table)) {        $is_table = isset(PMA_Table::$cache[$db][$table]);        if (! $is_table) {            $_result = PMA_DBI_try_query(                'SHOW TABLES LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';',                null, PMA_DBI_QUERY_STORE);            $is_table = @PMA_DBI_num_rows($_result);            PMA_DBI_free_result($_result);        }    } else {        $is_table = false;    }    if (! $is_table) {        if (! defined('IS_TRANSFORMATION_WRAPPER')) {            if (strlen($table)) {                // SHOW TABLES doesn't show temporary tables, so try select                // (as it can happen just in case temporary table, it should be                // fast):                /**                 * @todo should this check really only happen if IS_TRANSFORMATION_WRAPPER?                 */                $_result = PMA_DBI_try_query(                    'SELECT COUNT(*) FROM ' . PMA_backquote($table) . ';',                    null, PMA_DBI_QUERY_STORE);                $is_table = ($_result && @PMA_DBI_num_rows($_result));                PMA_DBI_free_result($_result);            }            if (! $is_table) {                include './db_sql.php';                exit;            }        }        if (! $is_table) {            exit;        }    }} // end if (ensures table exists)?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for listing directories * * @todo rename to file_listing.lib.php * @package PhpMyAdmin *//** * Returns array of filtered file names * * @param string $dir        directory to list * @param string $expression regular expression to match files * @return array   sorted file list on success, false on failure */function PMA_getDirContent($dir, $expression = ''){    if (file_exists($dir) && $handle = @opendir($dir)) {        $result = array();        if (substr($dir, -1) != '/') {            $dir .= '/';        }        while ($file = @readdir($handle)) {        // for PHP < 5.2.4, is_file() gives a warning when using open_basedir        // and verifying '..' or '.'            if ('.' != $file && '..' != $file && is_file($dir . $file) && ($expression == '' || preg_match($expression, $file))) {                $result[] = $file;            }        }        @closedir($handle);        asort($result);        return $result;    } else {        return false;    }}/** * Returns options of filtered file names * * @param string $dir        directory to list * @param string $extensions regullar expression to match files * @param string $active     currently active choice * @return array   sorted file list on success, false on failure */function PMA_getFileSelectOptions($dir, $extensions = '', $active = ''){    $list = PMA_getDirContent($dir, $extensions);    if ($list === false) {        return false;    }    $result = '';    foreach ($list as $key => $val) {        $result .= '<option value="'. htmlspecialchars($val) . '"';        if ($val == $active) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($val) . '</option>' . "\n";    }    return $result;}/** * Get currently supported decompressions. * * @return string | separated list of extensions usable in PMA_getDirContent */function PMA_supportedDecompressions(){    global $cfg;    $compressions = '';    if ($cfg['GZipDump'] && @function_exists('gzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'gz';    }    if ($cfg['BZipDump'] && @function_exists('bzopen')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'bz2';    }    if ($cfg['ZipDump'] && @function_exists('gzinflate')) {        if (!empty($compressions)) {            $compressions .= '|';        }        $compressions .= 'zip';    }    return $compressions;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Generic plugin interface. * * @package PhpMyAdmin *//** * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param) * * Reads all plugin information from directory $plugins_dir. * * @param string  $plugins_dir    directrory with plugins * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work * @return  array                   list of plugins */function PMA_getPlugins($plugins_dir, $plugin_param){    /* Scan for plugins */    $plugin_list = array();    if ($handle = @opendir($plugins_dir)) {        while ($file = @readdir($handle)) {            // In some situations, Mac OS creates a new file for each file            // (for example ._csv.php) so the following regexp            // matches a file which does not start with a dot but ends            // with ".php"            if (is_file($plugins_dir . $file) && preg_match('@^[^\.](.)*\.php$@i', $file)) {                include $plugins_dir . $file;            }        }    }    ksort($plugin_list);    return $plugin_list;}/** * string PMA_getString(string $name) * * returns locale string for $name or $name if no locale is found * * @param string  $name   for local string * @return  string          locale string for $name */function PMA_getString($name){    return isset($GLOBALS[$name]) ? $GLOBALS[$name] : $name;}/** * string PMA_pluginCheckboxCheck(string $section, string $opt) * * returns html input tag option 'checked' if plugin $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              hmtl input tag option 'checked' */function PMA_pluginCheckboxCheck($section, $opt){    // If the form is being repopulated using $_GET data, that is priority    if (isset($_GET[$opt]) || ! isset($_GET['repopulate']) && ((isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) ||        (isset($GLOBALS['cfg'][$section][$opt]) && $GLOBALS['cfg'][$section][$opt]))) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetDefault(string $section, string $opt) * * returns default value for option $opt * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              default value for option $opt */function PMA_pluginGetDefault($section, $opt){    if (isset($_GET[$opt])) { // If the form is being repopulated using $_GET data, that is priority        return htmlspecialchars($_GET[$opt]);    } elseif (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) {        return htmlspecialchars($_REQUEST[$opt]);    } elseif (isset($GLOBALS['cfg'][$section][$opt])) {        $matches = array();        /* Possibly replace localised texts */        if (preg_match_all('/(str[A-Z][A-Za-z0-9]*)/', $GLOBALS['cfg'][$section][$opt], $matches)) {            $val = $GLOBALS['cfg'][$section][$opt];            foreach ($matches[0] as $match) {                if (isset($GLOBALS[$match])) {                    $val = str_replace($match, $GLOBALS[$match], $val);                }            }            return htmlspecialchars($val);        } else {            return htmlspecialchars($GLOBALS['cfg'][$section][$opt]);        }    }    return '';}/** * string PMA_pluginIsActive(string $section, string $opt, string $val) * * returns html input tag option 'checked' if option $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @param string  $val        value of option to check against * @return  string              html input tag option 'checked' */function PMA_pluginIsActive($section, $opt, $val){    if (! empty($GLOBALS['timeout_passed']) && isset($_REQUEST[$opt])) {        if ($_REQUEST[$opt] == $val) {            return ' checked="checked"';        }    } elseif (isset($GLOBALS['cfg'][$section][$opt]) &&  $GLOBALS['cfg'][$section][$opt] == $val) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname) * * returns html select form element for plugin choice * and hidden fields denoting whether each plugin must be exported as a file * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $name       name of select element * @param array   &$list      array with plugin configuration defined in plugin file * @param string  $cfgname    name of config value, if none same as $name * @return  string              html select tag */function PMA_pluginGetChoice($section, $name, &$list, $cfgname = null){    if (! isset($cfgname)) {        $cfgname = $name;    }    $ret = '<select id="plugins" name="' . $name . '">';    $default = PMA_pluginGetDefault($section, $cfgname);    foreach ($list as $plugin_name => $val) {        $ret .= '<option';         // If the form is being repopulated using $_GET data, that is priority        if (isset($_GET[$name]) && $plugin_name == $_GET[$name] || ! isset($_GET[$name]) && $plugin_name == $default) {            $ret .= ' selected="selected"';        }         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";    }    $ret .= '</select>' . "\n";    // Whether each plugin has to be saved as a file    foreach ($list as $plugin_name => $val) {        $ret .= '<input type="hidden" id="force_file_' . $plugin_name . '" value="';        if (isset($val['force_file'])) {            $ret .= 'true';        } else {            $ret .= 'false';        }        $ret .= '" />'. "\n";    }    return $ret;}/** * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt) * * returns single option in a list element * * @param string  $section        name of config section in *                                  $GLOBALS['cfg'][$section] for plugin * @param string  $plugin_name    unique plugin name * @param string  $id             option id * @param array   &$opt           plugin option details * @return  string                  table row with option */function PMA_pluginGetOneOption($section, $plugin_name, $id, &$opt){    $ret = "\n";    if ($opt['type'] == 'bool') {        $ret .= '<li>' . "\n";        $ret .= '<input type="checkbox" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="something" id="checkbox_' . $plugin_name . '_' . $opt['name'] . '"'            . ' ' . PMA_pluginCheckboxCheck($section, $plugin_name . '_' . $opt['name']);        if (isset($opt['force'])) {            /* Same code is also few lines lower, update both if needed */            $ret .= ' onclick="if (!this.checked &amp;&amp; '                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '                . 'return false; else return true;"';        }        $ret .= ' />';        $ret .= '<label for="checkbox_' . $plugin_name . '_' . $opt['name'] . '">'            . PMA_getString($opt['text']) . '</label>';    } elseif ($opt['type'] == 'text') {        $ret .= '<li>' . "\n";        $ret .= '<label for="text_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<input type="text" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"'            . ' id="text_' . $plugin_name . '_' . $opt['name'] . '"'            . (isset($opt['size']) ? ' size="' . $opt['size'] . '"' : '')            . (isset($opt['len']) ? ' maxlength="' . $opt['len'] . '"' : '') . ' />';    } elseif ($opt['type'] == 'message_only') {        $ret .= '<li>' . "\n";        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';    } elseif ($opt['type'] == 'select') {        $ret .= '<li>' . "\n";        $ret .= '<label for="select_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<select name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' id="select_' . $plugin_name . '_' . $opt['name'] . '">';        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<option value="' . $key . '"';            if ($key == $default) {                $ret .= ' selected="selected"';            }            $ret .= '>' . PMA_getString($val) . '</option>';        }        $ret .= '</select>';    } elseif ($opt['type'] == 'radio') {        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<li><input type="radio" name="' . $plugin_name . '_' . $opt['name'] . '" value="' . $key            . '" id="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '"';            if ($key == $default) {                $ret .= 'checked="checked"';            }            $ret .= ' />' . '<label for="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '">'            . PMA_getString($val) . '</label></li>';        }    } elseif ($opt['type'] == 'hidden') {        $ret .= '<li><input type="hidden" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"' . ' /></li>';    } elseif ($opt['type'] == 'begin_group') {        $ret .= '<div class="export_sub_options" id="' . $plugin_name . '_' . $opt['name'] . '">';        if (isset($opt['text'])) {            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';        }        $ret .= '<ul>';    } elseif ($opt['type'] == 'end_group') {        $ret .= '</ul></div>';    } elseif ($opt['type'] == 'begin_subgroup') {        /* each subgroup can have a header, which may also be a form element */        $ret .=  PMA_pluginGetOneOption($section, $plugin_name, $id, $opt['subgroup_header']) . '<li class="subgroup"><ul';        if (isset($opt['subgroup_header']['name'])) {            $ret .= ' id="ul_' . $opt['subgroup_header']['name'] . '">';        } else {            $ret .= '>';        }    } elseif ($opt['type'] == 'end_subgroup') {        $ret .= '</ul></li>';    } else {        /* This should be seen only by plugin writers, so I do not thing this         * needs translation. */        $ret .= 'UNKNOWN OPTION ' . $opt['type'] . ' IN IMPORT PLUGIN ' . $plugin_name . '!';    }    if (isset($opt['doc'])) {        if (count($opt['doc']) == 3) {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1], false, $opt['doc'][2]);        } elseif (count($opt['doc']) == 1) {            $ret .= PMA_showDocu($opt['doc'][0]);        } else {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1]);        }    }    // Close the list element after $opt['doc'] link is displayed    if ($opt['type'] == 'bool' || $opt['type'] == 'text' || $opt['type'] == 'message_only' || $opt['type'] == 'select') {        $ret .= '</li>';    }    $ret .= "\n";    return $ret;}/** * string PMA_pluginGetOptions(string $section, array &$list) * * return html div with editable options for plugin * * @param string  $section    name of config section in $GLOBALS['cfg'][$section] * @param array   &$list      array with plugin configuration defined in plugin file * @return  string              html fieldset with plugin options */function PMA_pluginGetOptions($section, &$list){    $ret = '';    $default = PMA_pluginGetDefault('Export', 'format');    // Options for plugins that support them    foreach ($list as $plugin_name => $val) {        $ret .= '<div id="' . $plugin_name . '_options" class="format_specific_options">';        $count = 0;            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';        if (isset($val['options']) && count($val['options']) > 0) {            foreach ($val['options'] as $id => $opt) {                if ($opt['type'] != 'hidden' && $opt['type'] != 'begin_group' && $opt['type'] != 'end_group' && $opt['type'] != 'begin_subgroup' && $opt['type'] != 'end_subgroup') {                    $count++;                }                $ret .= PMA_pluginGetOneOption($section, $plugin_name, $id, $opt);            }        }        if ($count == 0) {            $ret .= '<p>' . __('This format has no options') . '</p>';        }        $ret .= '</div>';    }    return $ret;}
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/Message.class.php';/** * Handles the recently used tables. * * @TODO Change the release version in table pma_recent (#recent in Documentation.html) * * @package PhpMyAdmin */class PMA_RecentTable{    /**     * Defines the internal PMA table which contains recent tables.     *     * @access  private     * @var string     */    private $pma_table;    /**     * Reference to session variable containing recently used tables.     *     * @access public     * @var array     */    public $tables;    /**     * PMA_RecentTable instance.     *     * @var PMA_RecentTable     */    private static $_instance;    public function __construct()    {        if (strlen($GLOBALS['cfg']['Server']['pmadb']) &&            strlen($GLOBALS['cfg']['Server']['recent'])) {            $this->pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                               PMA_backquote($GLOBALS['cfg']['Server']['recent']);        }        $server_id = $GLOBALS['server'];        if (! isset($_SESSION['tmp_user_values']['recent_tables'][$server_id])) {            $_SESSION['tmp_user_values']['recent_tables'][$server_id] =                isset($this->pma_table) ? $this->getFromDb() : array();        }        $this->tables =& $_SESSION['tmp_user_values']['recent_tables'][$server_id];    }    /**     * Returns class instance.     *     * @return PMA_RecentTable     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new PMA_RecentTable();        }        return self::$_instance;    }    /**     * Returns recently used tables from phpMyAdmin database.     *     *     * @return array     */    public function getFromDb()    {        // Read from phpMyAdmin database, if recent tables is not in session        $sql_query            = " SELECT `tables` FROM " . $this->pma_table .            " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save recent tables into phpMyAdmin database.     *     *     * @return true|PMA_Message     */    public function saveToDb()    {        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query            = " REPLACE INTO " . $this->pma_table . " (`username`, `tables`)" .            " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes(json_encode($this->tables)) . "')";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save recent table'));            $message->addMessage('<br /><br />');            $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));            return $message;        }        return true;    }    /**     * Trim recent table according to the LeftRecentTable configuration.     *     * @return boolean True if trimming occurred     */    public function trim()    {        $max = max($GLOBALS['cfg']['LeftRecentTable'], 0);        $trimming_occured = count($this->tables) > $max;        while (count($this->tables) > $max) {            array_pop($this->tables);        }        return $trimming_occured;    }    /**     * Return options for HTML select.     *     * @return string     */    public function getHtmlSelectOption()    {        // trim and save, in case where the configuration is changed        if ($this->trim() && isset($this->pma_table)) {            $this->saveToDb();        }        $html = '<option value="">(' . __('Recent tables') . ') ...</option>';        if (count($this->tables)) {            foreach ($this->tables as $table) {                $html .= '<option value="' . htmlspecialchars(json_encode($table)) . '">' .                         htmlspecialchars('`' . $table['db'] . '`.`' . $table['table'] . '`') . '</option>';            }        } else {            $html .= '<option value="">' . __('There are no recent tables') . '</option>';        }        return $html;    }    /**     * Return HTML select.     *     * @return string     */    public function getHtmlSelect()    {        $html  = '<input type="hidden" name="goto" id="LeftDefaultTabTable" value="' .                         htmlspecialchars($GLOBALS['cfg']['LeftDefaultTabTable']) . '" />';        $html .= '<select name="selected_recent_table" id="recentTable">';        $html .= $this->getHtmlSelectOption();        $html .= '</select>';        return $html;    }    /**     * Add recently used tables.     *     * @param string $db Database name where the table is located     * @param string $table Table name     *     * @return true|PMA_Message True if success, PMA_Message if not     */    public function add($db, $table)    {        $table_arr = array();        $table_arr['db'] = $db;        $table_arr['table'] = $table;        // add only if this is new table        if (! isset($this->tables[0]) || $this->tables[0] != $table_arr) {            array_unshift($this->tables, $table_arr);            $this->tables = array_merge(array_unique($this->tables, SORT_REGULAR));            $this->trim();            if (isset($this->pma_table)) {                return $this->saveToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display list of server engines and additonal information about them * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';require './libraries/StorageEngine.class.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Did the user request information about a certain storage engine? */if (empty($_REQUEST['engine']) || ! PMA_StorageEngine::isValid($_REQUEST['engine'])) {    /**     * Displays the sub-page heading     */    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . "\n" . __('Storage Engines') . "\n"       . '</h2>' . "\n";    /**     * Displays the table header     */    echo '<table class="noclick">' . "\n"       . '<thead>' . "\n"       . '<tr><th>' . __('Storage Engine') . '</th>' . "\n"       . '    <th>' . __('Description') . '</th>' . "\n"       . '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    /**     * Listing the storage engines     */    $odd_row = true;    foreach (PMA_StorageEngine::getStorageEngines() as $engine => $details) {        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($details['Support'] == 'NO' || $details['Support'] == 'DISABLED'                ? ' disabled'                : '')           . '">' . "\n"           . '    <td><a href="./server_engines.php'           . PMA_generate_common_url(array('engine' => $engine)) . '">' . "\n"           . '            ' . htmlspecialchars($details['Engine']) . "\n"           . '        </a></td>' . "\n"           . '    <td>' . htmlspecialchars($details['Comment']) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }    $PMA_Config = $GLOBALS['PMA_Config'];    if ($PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        // Special case for PBMS daemon which is not listed as an engine        echo '<tr class="'            . ($odd_row ? 'odd' : 'even')            .  '">' . "\n"            . '    <td><a href="./server_engines.php'            . PMA_generate_common_url(array('engine' => "PBMS")) . '">' . "\n"            . '            '  . "PBMS\n"            . '        </a></td>' . "\n"            . '    <td>' . htmlspecialchars("PrimeBase MediaStream (PBMS) daemon") . '</td>' . "\n"            . '</tr>' . "\n";    }   unset($odd_row, $engine, $details);    echo '</tbody>' . "\n"       . '</table>' . "\n";} else {    /**     * Displays details about a given Storage Engine     */    $engine_plugin = PMA_StorageEngine::getEngine($_REQUEST['engine']);    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . '    ' . htmlspecialchars($engine_plugin->getTitle()) . "\n"       . '    ' . PMA_showMySQLDocu('', $engine_plugin->getMysqlHelpPage()) . "\n"       . '</h2>' . "\n\n";    echo '<p>' . "\n"       . '    <em>' . "\n"       . '        ' . htmlspecialchars($engine_plugin->getComment()) . "\n"       . '    </em>' . "\n"       . '</p>' . "\n\n";    $infoPages = $engine_plugin->getInfoPages();    if (!empty($infoPages) && is_array($infoPages)) {        echo '<p>' . "\n"           . '    <strong>[</strong>' . "\n";        if (empty($_REQUEST['page'])) {            echo '    <strong>' . __('Variables') . '</strong>' . "\n";        } else {            echo '    <a href="./server_engines.php'                . PMA_generate_common_url(array('engine' => $_REQUEST['engine'])) . '">'                . __('Variables') . '</a>' . "\n";        }        foreach ($infoPages as $current => $label) {            echo '    <strong>|</strong>' . "\n";            if (isset($_REQUEST['page']) && $_REQUEST['page'] == $current) {                echo '    <strong>' . $label . '</strong>' . "\n";            } else {                echo '    <a href="./server_engines.php'                    . PMA_generate_common_url(                        array('engine' => $_REQUEST['engine'], 'page' => $current))                    . '">' . htmlspecialchars($label) . '</a>' . "\n";            }        }        unset($current, $label);        echo '    <strong>]</strong>' . "\n"           . '</p>' . "\n\n";    }    unset($infoPages, $page_output);    if (!empty($_REQUEST['page'])) {        $page_output = $engine_plugin->getPage($_REQUEST['page']);    }    if (!empty($page_output)) {        echo $page_output;    } else {        echo '<p> ' . $engine_plugin->getSupportInformationMessage() . "\n"           . '</p>' . "\n"           . $engine_plugin->getHtmlVariables();    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the $column_order array * * @return array */function PMA_getColumnOrder(){    $column_order['DEFAULT_COLLATION_NAME'] = array(            'disp_name' => __('Collation'),            'description_function' => 'PMA_getCollationDescr',            'format'    => 'string',            'footer'    => PMA_getServerCollation(),        );    $column_order['SCHEMA_TABLES'] = array(        'disp_name' => __('Tables'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_TABLE_ROWS'] = array(        'disp_name' => __('Rows'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_LENGTH'] = array(        'disp_name' => __('Data'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_INDEX_LENGTH'] = array(        'disp_name' => __('Indexes'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_LENGTH'] = array(        'disp_name' => __('Total'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_FREE'] = array(        'disp_name' => __('Overhead'),        'format'    => 'byte',        'footer'    => 0,    );    return $column_order;}/* * Builds the HTML td elements for one database to display in the list * of databases from server_databases.php (which can be modified by * db_create.php) * * @param array $current * @param boolean $is_superuser * @param string $checkall * @param string $url_query * @param array $column_order * @param array $replication_types * @param array $replication_info * * @return array $column_order, $out */function PMA_buildHtmlForDb($current, $is_superuser, $checkall, $url_query, $column_order, $replication_types, $replication_info){    $out = '';    if ($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase']) {        $out .= '<td class="tool">';        $out .= '<input type="checkbox" name="selected_dbs[]" title="' . htmlspecialchars($current['SCHEMA_NAME']) . '" value="' . htmlspecialchars($current['SCHEMA_NAME']) . '" ';        if (!PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $out .= (empty($checkall) ? '' : 'checked="checked" ') . '/>';        } else {            $out .= ' disabled="disabled" />';        }        $out .= '</td>';    }    $out .= '<td class="name">'           . '        <a onclick="'           . 'if (window.parent.openDb &amp;&amp; window.parent.openDb(\'' . PMA_jsFormat($current['SCHEMA_NAME'], false) . '\')) return false;'           . '" href="index.php?' . $url_query . '&amp;db='           . urlencode($current['SCHEMA_NAME']) . '" title="'           . sprintf(__('Jump to database'), htmlspecialchars($current['SCHEMA_NAME']))           . '" target="_parent">'           . ' ' . htmlspecialchars($current['SCHEMA_NAME'])           . '</a>'           . '</td>';    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $current)) {            if (is_numeric($stat['footer'])) {                $column_order[$stat_name]['footer'] += $current[$stat_name];            }            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($current[$stat_name], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($current[$stat_name], 0);            } else {                $value = htmlentities($current[$stat_name], 0);            }            $out .= '<td class="value">';            if (isset($stat['description_function'])) {                $out .= '<dfn title="' . $stat['description_function']($current[$stat_name]) . '">';            }            $out .= $value;            if (isset($stat['description_function'])) {                $out .= '</dfn>';            }            $out .= '</td>';            if ($stat['format'] === 'byte') {                $out .= '<td class="unit">' . $unit . '</td>';            }        }    }    foreach ($replication_types as $type) {        if ($replication_info[$type]['status']) {            $out .= '<td class="tool" style="text-align: center;">';            if (strlen(array_search($current["SCHEMA_NAME"], $replication_info[$type]['Ignore_DB'])) > 0) {                $out .= PMA_getIcon('s_cancel.png',  __('Not replicated'));            } else {                $key = array_search($current["SCHEMA_NAME"], $replication_info[$type]['Do_DB']);                if (strlen($key) > 0 || ($replication_info[$type]['Do_DB'][0] == "" && count($replication_info[$type]['Do_DB']) == 1)) {                    // if ($key != null) did not work for index "0"                    $out .= PMA_getIcon('s_success.png', __('Replicated'));                }            }            $out .= '</td>';        }    }    if ($is_superuser && !PMA_DRIZZLE) {        $out .= '<td class="tool">'               . '<a onclick="'               . 'if (window.parent.setDb) window.parent.setDb(\'' . PMA_jsFormat($current['SCHEMA_NAME']) . '\');'               . '" href="./server_privileges.php?' . $url_query               . '&amp;checkprivs=' . urlencode($current['SCHEMA_NAME'])               . '" title="' . sprintf(__('Check privileges for database &quot;%s&quot;.'), htmlspecialchars($current['SCHEMA_NAME']))               . '">'               . ' '               . PMA_getIcon('s_rights.png', __('Check Privileges'))               . '</a></td>';    }    return array($column_order, $out);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__formatted_info(){    return array(        'info' => __('Displays the contents of the column as-is, without running it through htmlspecialchars(). That is, the column is assumed to contain valid HTML.'),        );}/** * */function PMA_transformation_text_plain__formatted($buffer, $options = array(), $meta = ''){    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__hex_info(){    return array(        'info' =>  __('Displays hexadecimal representation of data. Optional first parameter specifies how often space will be added (defaults to 2 nibbles).'),        );}/** * */function PMA_transformation_application_octetstream__hex($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    if (!isset($options[0])) {        $options[0] = 2;    } else {        $options[0] = (int)$options[0];    }    if ($options[0] < 1) {        return bin2hex($buffer);    } else {        return chunk_split(bin2hex($buffer), $options[0], ' ');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/*   Copyright (c) 2003, 2009 Danilo Segan <danilo@kvota.net>.   Copyright (c) 2005 Nico Kaiser <nico@siriux.net>   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*//** * Provides a simple gettext replacement that works independently from * the system's gettext abilities. * It can read MO files and use them for translating strings. * The files are passed to gettext_reader as a Stream (see streams.php) * * This version has the ability to cache all strings and translations to * speed up the string lookup. * While the cache is enabled by default, it can be switched off with the * second parameter in the constructor (e.g. whenusing very large MO files * that you don't want to keep in memory) */class gettext_reader {  //public:   var $error = 0; // public variable that holds error code (0 if no error)   //private:  var $BYTEORDER = 0;        // 0: low endian, 1: big endian  var $STREAM = NULL;  var $short_circuit = false;  var $enable_cache = false;  var $originals = NULL;      // offset of original table  var $translations = NULL;    // offset of translation table  var $pluralheader = NULL;    // cache header field for plural forms  var $total = 0;          // total string count  var $table_originals = NULL;  // table for original strings (offsets)  var $table_translations = NULL;  // table for translated strings (offsets)  var $cache_translations = NULL;  // original -> translation mapping  /* Methods */  /**   * Reads a 32bit Integer from the Stream   *   * @access private   * @return Integer from the Stream   */  function readint() {      if ($this->BYTEORDER == 0) {        // low endian        $input=unpack('V', $this->STREAM->read(4));        return array_shift($input);      } else {        // big endian        $input=unpack('N', $this->STREAM->read(4));        return array_shift($input);      }    }  function read($bytes) {    return $this->STREAM->read($bytes);  }  /**   * Reads an array of Integers from the Stream   *   * @param int count How many elements should be read   * @return Array of Integers   */  function readintarray($count) {    if ($this->BYTEORDER == 0) {        // low endian        return unpack('V'.$count, $this->STREAM->read(4 * $count));      } else {        // big endian        return unpack('N'.$count, $this->STREAM->read(4 * $count));      }  }  /**   * Constructor   *   * @param object Reader the StreamReader object   * @param boolean enable_cache Enable or disable caching of strings (default on)   */  function gettext_reader($Reader, $enable_cache = true) {    // If there isn't a StreamReader, turn on short circuit mode.    if (! $Reader || isset($Reader->error) ) {      $this->short_circuit = true;      return;    }    // Caching can be turned off    $this->enable_cache = $enable_cache;    $MAGIC1 = "\x95\x04\x12\xde";    $MAGIC2 = "\xde\x12\x04\x95";    $this->STREAM = $Reader;    $magic = $this->read(4);    if ($magic == $MAGIC1) {      $this->BYTEORDER = 1;    } elseif ($magic == $MAGIC2) {      $this->BYTEORDER = 0;    } else {      $this->error = 1; // not MO file      return false;    }    // FIXME: Do we care about revision? We should.    $revision = $this->readint();    $this->total = $this->readint();    $this->originals = $this->readint();    $this->translations = $this->readint();  }  /**   * Loads the translation tables from the MO file into the cache   * If caching is enabled, also loads all strings into a cache   * to speed up translation lookups   *   * @access private   */  function load_tables() {    if (is_array($this->cache_translations) &&      is_array($this->table_originals) &&      is_array($this->table_translations))      return;    /* get original and translations tables */    if (!is_array($this->table_originals)) {      $this->STREAM->seekto($this->originals);      $this->table_originals = $this->readintarray($this->total * 2);    }    if (!is_array($this->table_translations)) {      $this->STREAM->seekto($this->translations);      $this->table_translations = $this->readintarray($this->total * 2);    }    if ($this->enable_cache) {      $this->cache_translations = array ();      /* read all strings in the cache */      for ($i = 0; $i < $this->total; $i++) {        $this->STREAM->seekto($this->table_originals[$i * 2 + 2]);        $original = $this->STREAM->read($this->table_originals[$i * 2 + 1]);        $this->STREAM->seekto($this->table_translations[$i * 2 + 2]);        $translation = $this->STREAM->read($this->table_translations[$i * 2 + 1]);        $this->cache_translations[$original] = $translation;      }    }  }  /**   * Returns a string from the "originals" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_original_string($num) {    $length = $this->table_originals[$num * 2 + 1];    $offset = $this->table_originals[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Returns a string from the "translations" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_translation_string($num) {    $length = $this->table_translations[$num * 2 + 1];    $offset = $this->table_translations[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Binary search for string   *   * @access private   * @param string string   * @param int start (internally used in recursive function)   * @param int end (internally used in recursive function)   * @return int string number (offset in originals table)   */  function find_string($string, $start = -1, $end = -1) {    if (($start == -1) or ($end == -1)) {      // find_string is called with only one parameter, set start end end      $start = 0;      $end = $this->total;    }    if (abs($start - $end) <= 1) {      // We're done, now we either found the string, or it doesn't exist      $txt = $this->get_original_string($start);      if ($string == $txt)        return $start;      else        return -1;    } else if ($start > $end) {      // start > end -> turn around and start over      return $this->find_string($string, $end, $start);    } else {      // Divide table in two parts      $half = (int)(($start + $end) / 2);      $cmp = strcmp($string, $this->get_original_string($half));      if ($cmp == 0)        // string is exactly in the middle => return it        return $half;      else if ($cmp < 0)        // The string is in the upper half        return $this->find_string($string, $start, $half);      else        // The string is in the lower half        return $this->find_string($string, $half, $end);    }  }  /**   * Translates a string   *   * @access public   * @param string string to be translated   * @return string translated string (or original, if not found)   */  function translate($string) {    if ($this->short_circuit)      return $string;    $this->load_tables();    if ($this->enable_cache) {      // Caching enabled, get translated string from cache      if (array_key_exists($string, $this->cache_translations))        return $this->cache_translations[$string];      else        return $string;    } else {      // Caching not enabled, try to find string      $num = $this->find_string($string);      if ($num == -1)        return $string;      else        return $this->get_translation_string($num);    }  }  /**   * Sanitize plural form expression for use in PHP eval call.   *   * @access private   * @return string sanitized plural form expression   */  function sanitize_plural_expression($expr) {    // Get rid of disallowed characters.    $expr = preg_replace('@[^a-zA-Z0-9_:;\(\)\?\|\&=!<>+*/\%-]@', '', $expr);    // Add parenthesis for tertiary '?' operator.    $expr .= ';';    $res = '';    $p = 0;    for ($i = 0; $i < strlen($expr); $i++) {      $ch = $expr[$i];      switch ($ch) {      case '?':        $res .= ' ? (';        $p++;        break;      case ':':        $res .= ') : (';        break;      case ';':        $res .= str_repeat( ')', $p) . ';';        $p = 0;        break;      default:        $res .= $ch;      }    }    return $res;  }  /**   * Parse full PO header and extract only plural forms line.   *   * @access private   * @return string verbatim plural form header field   */  function extract_plural_forms_header_from_po_header($header) {    if (preg_match("/(^|\n)plural-forms: ([^\n]*)\n/i", $header, $regs))      $expr = $regs[2];    else      $expr = "nplurals=2; plural=n == 1 ? 0 : 1;";    return $expr;  }  /**   * Get possible plural forms from MO header   *   * @access private   * @return string plural form header   */  function get_plural_forms() {    // lets assume message number 0 is header    // this is true, right?    $this->load_tables();    // cache header field for plural forms    if (! is_string($this->pluralheader)) {      if ($this->enable_cache) {        $header = $this->cache_translations[""];      } else {        $header = $this->get_translation_string(0);      }      $expr = $this->extract_plural_forms_header_from_po_header($header);      $this->pluralheader = $this->sanitize_plural_expression($expr);    }    return $this->pluralheader;  }  /**   * Detects which plural form to take   *   * @access private   * @param n count   * @return int array index of the right plural form   */  function select_string($n) {    $string = $this->get_plural_forms();    $string = str_replace('nplurals',"\$total",$string);    $string = str_replace("n",$n,$string);    $string = str_replace('plural',"\$plural",$string);    $total = 0;    $plural = 0;    eval("$string");    if ($plural >= $total) $plural = $total - 1;    return $plural;  }  /**   * Plural version of gettext   *   * @access public   * @param string single   * @param string plural   * @param string number   * @return translated plural form   */  function ngettext($single, $plural, $number) {    if ($this->short_circuit) {      if ($number != 1)        return $plural;      else        return $single;    }    // find out the appropriate form    $select = $this->select_string($number);    // this should contains all strings separated by NULLs    $key = $single . chr(0) . $plural;    if ($this->enable_cache) {      if (! array_key_exists($key, $this->cache_translations)) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->cache_translations[$key];        $list = explode(chr(0), $result);        return $list[$select];      }    } else {      $num = $this->find_string($key);      if ($num == -1) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->get_translation_string($num);        $list = explode(chr(0), $result);        return $list[$select];      }    }  }  function pgettext($context, $msgid) {    $key = $context . chr(4) . $msgid;    $ret = $this->translate($key);    if (strpos($ret, "\004") !== FALSE) {      return $msgid;    } else {      return $ret;    }  }  function npgettext($context, $singular, $plural, $number) {    $key = $context . chr(4) . $singular;    $ret = $this->ngettext($key, $plural, $number);    if (strpos($ret, "\004") !== FALSE) {      return $singular;    } else {      return $ret;    }  }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require './libraries/tbl_common.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;if (! isset($selected_tbl)) {    include_once './libraries/header.inc.php';}// Check parametersif (! isset($the_tables) || ! is_array($the_tables)) {    $the_tables = array();}/** * Gets the relations settings */require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';$cfgRelation = PMA_getRelationsParam();/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}/** * Selects the database */PMA_DBI_select_db($db);/** * Multi-tables printview */if (isset($selected_tbl) && is_array($selected_tbl)) {    $the_tables   = $selected_tbl;} elseif (strlen($table)) {    $the_tables[] = $table;}$multi_tables     = (count($the_tables) > 1);if ($multi_tables) {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header.inc.php';    }    $tbl_list     = '';    foreach ($the_tables as $key => $table) {        $tbl_list .= (empty($tbl_list) ? '' : ', ')                  . PMA_backquote($table);    }    echo '<strong>'.  __('Showing tables') . ': ' . htmlspecialchars($tbl_list) . '</strong>' . "\n";    echo '<hr />' . "\n";} // end if$tables_cnt = count($the_tables);$counter    = 0;foreach ($the_tables as $key => $table) {    if ($counter + 1 >= $tables_cnt) {        $breakstyle = '';    } else {        $breakstyle = ' style="page-break-after: always;"';    }    $counter++;    echo '<div' . $breakstyle . '>' . "\n";    echo '<h1>' . htmlspecialchars($table) . '</h1>' . "\n";    /**     * Gets table informations     */    $showtable    = PMA_Table::sGetStatusInfo($db, $table);    $num_rows     = (isset($showtable['Rows']) ? $showtable['Rows'] : 0);    $show_comment = (isset($showtable['Comment']) ? $showtable['Comment'] : '');    $tbl_is_view = PMA_Table::isView($db, $table);    /**     * Gets fields properties     */    $columns = PMA_DBI_get_columns($db, $table);    // We need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL FIELDS or INFORMATION_SCHEMA incorrectly says NULL    // and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).    $show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    // Check if we can use Relations    // Find which tables are related with the current one and write it in    // an array    $res_rel  = PMA_getForeigners($db, $table);    $have_rel = (bool) count($res_rel);    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><!-- TABLE INFORMATIONS --><table style="width: 100%;"><thead><tr>    <th><?php echo __('Column'); ?></th>    <th><?php echo __('Type'); ?></th>    <th><?php echo __('Null'); ?></th>    <th><?php echo __('Default'); ?></th>    <?php    if ($have_rel) {        echo '<th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr></thead><tbody>    <?php    foreach ($columns as $row) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        $type             = $extracted_fieldspec['print_type'];        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != ''  && $row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = htmlspecialchars($row['Field']);        // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the        // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe        // the latter.        /**         * @todo merge this logic with the one in tbl_structure.php         * or move it in a function similar to PMA_DBI_get_columns_full()         * but based on SHOW CREATE TABLE because information_schema         * cannot be trusted in this case (MySQL bug)         */        if (!empty($analyzed_sql[0]['create_table_fields'][$field_name]['type']) && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            $row['Null'] = '';        }        echo '<tr><td>';        if (isset($pk_array[$row['Field']])) {            echo '    <u>' . $field_name . '</u>' . "\n";        } else {            echo '    ' . $field_name . "\n";        }    ?>    </td>    <td><?php echo $type; ?><bdo dir="ltr"></bdo></td>    <td><?php echo (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes')); ?>&nbsp;</td>    <td><?php if (isset($row['Default'])) { echo $row['Default']; } ?>&nbsp;</td>    <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '&nbsp;</td>' . "\n";        }        echo '    <td>';        $comments = PMA_getComments($db, $table);        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '&nbsp;</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '&nbsp;</td>' . "\n";        }    ?></tr>        <?php    } // end foreach    ?></tbody></table>    <?php    if (! $tbl_is_view && !PMA_is_system_schema($db)) {        /**         * Displays indexes         */        echo PMA_Index::getView($table, $db, true);        /**         * Displays Space usage and row statistics         *         */        if ($cfg['ShowStats']) {            $nonisam     = false;            if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {                $nonisam = true;            }            if ($nonisam == false) {                // Gets some sizes                $mergetable = PMA_Table::isMerge($db, $table);                list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length']);                if ($mergetable == false) {                    list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length']);                }                if (isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {                    list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free']);                    list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free']);                } else {                    unset($free_size);                    unset($free_unit);                    list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length']);                }                list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length']);                if ($num_rows > 0) {                    list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);                }                // Displays them                ?>    <br /><br />    <table border="0" cellspacing="0" cellpadding="0" class="noborder">    <tr>        <!-- Space usage -->        <td valign="top">            <big><?php echo __('Space usage') . ':'; ?></big>            <table width="100%">            <tr>                <th><?php echo __('Type'); ?></th>                <th colspan="2" align="center"><?php echo __('Usage'); ?></th>            </tr>            <tr>                <td style="padding-right: 10px"><?php echo __('Data'); ?></td>                <td align="right"><?php echo $data_size; ?></td>                <td><?php echo $data_unit; ?></td>            </tr>                <?php                if (isset($index_size)) {                    echo "\n";                    ?>            <tr>                <td style="padding-right: 10px"><?php echo __('Index'); ?></td>                <td align="right"><?php echo $index_size; ?></td>                <td><?php echo $index_unit; ?></td>            </tr>                    <?php                }                if (isset($free_size)) {                    echo "\n";                    ?>            <tr style="color: #bb0000">                <td style="padding-right: 10px"><?php echo __('Overhead'); ?></td>                <td align="right"><?php echo $free_size; ?></td>                <td><?php echo $free_unit; ?></td>            </tr>            <tr>                <td style="padding-right: 10px"><?php echo __('Effective'); ?></td>                <td align="right"><?php echo $effect_size; ?></td>                <td><?php echo $effect_unit; ?></td>            </tr>                    <?php                }                if (isset($tot_size) && $mergetable == false) {                    echo "\n";                    ?>            <tr>                <td style="padding-right: 10px"><?php echo __('Total'); ?></td>                <td align="right"><?php echo $tot_size; ?></td>                <td><?php echo $tot_unit; ?></td>            </tr>                    <?php                }                echo "\n";                ?>            </table>        </td>        <td width="20">&nbsp;</td>        <!-- Rows Statistic -->        <td valign="top">            <big><?php echo __('Row Statistics') . ':'; ?></big>            <table width="100%">            <tr>                <th><?php echo __('Statements'); ?></th>                <th align="center"><?php echo __('Value'); ?></th>            </tr>                <?php                if (isset($showtable['Row_format'])) {                    ?>            <tr>                <td><?php echo __('Format'); ?></td>                <td align="<?php echo $cell_align_left; ?>">                    <?php                    if ($showtable['Row_format'] == 'Fixed') {                        echo __('static');                    } elseif ($showtable['Row_format'] == 'Dynamic') {                        echo __('dynamic');                    } else {                        echo $showtable['Row_format'];                    }                    ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Rows'])) {                    ?>            <tr>                <td><?php echo __('Rows'); ?></td>                <td align="right">                    <?php echo PMA_formatNumber($showtable['Rows'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {                    ?>            <tr>                <td><?php echo __('Row length'); ?>&nbsp;&oslash;</td>                <td>                    <?php echo PMA_formatNumber($showtable['Avg_row_length'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {                    ?>            <tr>                <td><?php echo __('Row size'); ?>&nbsp;&oslash;</td>                <td align="right">                    <?php echo $avg_size . ' ' . $avg_unit . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Auto_increment'])) {                    ?>            <tr>                <td><?php echo __('Next autoindex'); ?></td>                <td align="right">                    <?php echo PMA_formatNumber($showtable['Auto_increment'], 0) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Create_time'])) {                    ?>            <tr>                <td><?php echo __('Creation'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Create_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Update_time'])) {                    ?>            <tr>                <td><?php echo __('Last update'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Update_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                if (isset($showtable['Check_time'])) {                    ?>            <tr>                <td><?php echo __('Last check'); ?></td>                <td align="right">                    <?php echo PMA_localisedDate(strtotime($showtable['Check_time'])) . "\n"; ?>                </td>            </tr>                    <?php                }                ?>            </table>        </td>    </tr>    </table>                <?php            } // end if ($nonisam == false)        } // end if ($cfg['ShowStats'])    }    if ($multi_tables) {        unset($num_rows, $show_comment);        echo '<hr />' . "\n";    } // end if    echo '</div>' . "\n";} // end while/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY      = 'noplugin';/** * Returns upload status. * * This is implementation when no webserver support exists, so it returns just zeroes. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    return $ret;}?>
<?php/** * Column types and functions supported by MySQL * * @package PhpMyAdmin */// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INT',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'TINYINT',        'SMALLINT',        'MEDIUMINT',        'INT',        'BIGINT',        '-',        'DECIMAL',        'FLOAT',        'DOUBLE',        'REAL',        '-',        'BIT',        'BOOLEAN',        'SERIAL',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',        'YEAR',    ),    // Text    'STRING' => array(        'CHAR',        'VARCHAR',        '-',        'TINYTEXT',        'TEXT',        'MEDIUMTEXT',        'LONGTEXT',        '-',        'BINARY',        'VARBINARY',        '-',        'TINYBLOB',        'MEDIUMBLOB',        'BLOB',        'LONGBLOB',        '-',        'ENUM',        'SET',    ),    'SPATIAL' => array(        'GEOMETRY',        'POINT',        'LINESTRING',        'POLYGON',        'MULTIPOINT',        'MULTILINESTRING',        'MULTIPOLYGON',        'GEOMETRYCOLLECTION',    ),);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'BINARY',   'UNSIGNED',   'UNSIGNED ZEROFILL',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'TINYINT'   => 'FUNC_NUMBER',        'SMALLINT'  => 'FUNC_NUMBER',        'MEDIUMINT' => 'FUNC_NUMBER',        'INT'       => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'FLOAT'     => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'REAL'      => 'FUNC_NUMBER',        'BIT'       => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'YEAR'      => 'FUNC_DATE',        'CHAR'       => 'FUNC_CHAR',        'VARCHAR'    => 'FUNC_CHAR',        'TINYTEXT'   => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'MEDIUMTEXT' => 'FUNC_CHAR',        'LONGTEXT'   => 'FUNC_CHAR',        'BINARY'     => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'TINYBLOB'   => 'FUNC_CHAR',        'MEDIUMBLOB' => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'LONGBLOB'   => 'FUNC_CHAR',        'ENUM'       => '',        'SET'        => '',        'GEOMETRY'           => 'FUNC_SPATIAL',        'POINT'              => 'FUNC_SPATIAL',        'LINESTRING'         => 'FUNC_SPATIAL',        'POLYGON'            => 'FUNC_SPATIAL',        'MULTIPOINT'         => 'FUNC_SPATIAL',        'MULTILINESTRING'    => 'FUNC_SPATIAL',        'MULTIPOLYGON'       => 'FUNC_SPATIAL',        'GEOMETRYCOLLECTION' => 'FUNC_SPATIAL',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'DES_DECRYPT',            'DES_ENCRYPT',            'ENCRYPT',            'HEX',            'INET_NTOA',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'OLD_PASSWORD',            'PASSWORD',            'QUOTE',            'REVERSE',            'RTRIM',            'SHA1',            'SOUNDEX',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SEC_TO_TIME',            'SYSDATE',            'TIME',            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_LENGTH',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'INET_ATON',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TO_SECONDS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            'UUID_SHORT',            'WEEK',            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),        'FUNC_SPATIAL' => array(            'GeomFromText',            'GeomFromWKB',            'GeomCollFromText',            'LineFromText',            'MLineFromText',            'PointFromText',            'MPointFromText',            'PolyFromText',            'MPolyFromText',            'GeomCollFromWKB',            'LineFromWKB',            'MLineFromWKB',            'PointFromWKB',            'MPointFromWKB',            'PolyFromWKB',            'MPolyFromWKB',        ),    );    // $restrict_functions holds all known functions, remove these that are unavailable on current server    if (PMA_MYSQL_INT_VERSION < 50500) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('TO_SECONDS'));    }    if (PMA_MYSQL_INT_VERSION < 50120) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('UUID_SHORT'));    }    if (empty($cfg['RestrictFunctions'])) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            if ($cat != 'FUNC_SPATIAL') {                $cfg['Functions'] = array_merge($cfg['Functions'], $functions);            }        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Initializes PBMS database * * @return bool */function initPBMSDatabase(){    // If no other choice then try this.    $query = "create database IF NOT EXISTS pbms;";    /*     * The user may not have privileges to create the 'pbms' database     * so if it doesn't exist then we perform a select on a pbms system     * table in an already existing database which will cause the PBMS     * daemon to create the 'pbms' database.     */    $db_array = PMA_DBI_fetch_result('SHOW DATABASES;');    if (! empty($db_array)) {        $target = "";        foreach ($db_array as $current_db) {            if ($current_db == 'pbms') {                return true;            }            if ($target == "") {                if ($current_db != 'pbxt'                    && ! PMA_is_system_schema($current_db, true)                ) {                    $target = $current_db;                }            }        }        if ($target != "") {            // If it exists this table will not contain much            $query = "select * from $target.pbms_metadata_header";        }    }    $result = PMA_DBI_query($query);    if (! $result) {        return false;    }    return true;}/** * checks whether the necessary plugins for BLOBStreaming exist * * @access  public * @return  boolean*/function checkBLOBStreamingPlugins(){    if (PMA_cacheGet('skip_blobstreaming', true) === true) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // If we don't know that we can skip blobstreaming, we continue    // verifications; anyway, in case we won't skip blobstreaming,    // we still need to set some variables in non-persistent settings,    // which is done via $PMA_Config->set().    /** Retrieve current server configuration;     *  at this point, $PMA_Config->get('Servers') contains the server parameters     *  as explicitely defined in config.inc.php, so it cannot be used; it's     *  better to use $GLOBALS['cfg']['Server'] which contains the explicit     *  parameters merged with the default ones     *     */    $serverCfg = $GLOBALS['cfg']['Server'];    // return if unable to retrieve current server configuration    if (! $serverCfg) {        return false;    }    // if PHP extension in use is 'mysql', specify element 'PersistentConnections'    if ($serverCfg['extension'] == "mysql") {        $serverCfg['PersistentConnections'] = $PMA_Config->settings['PersistentConnections'];    }    // if connection type is TCP, unload socket variable    if (strtolower($serverCfg['connect_type']) == "tcp") {        $serverCfg['socket'] = "";    }    $has_blobstreaming = PMA_cacheGet('has_blobstreaming', true);    if ($has_blobstreaming === null) {        if (! PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50109) {            // Retrieve MySQL plugins            $existing_plugins = PMA_DBI_fetch_result('SHOW PLUGINS');            foreach ($existing_plugins as $one_existing_plugin) {                // check if required plugins exist                if ( strtolower($one_existing_plugin['Library']) == 'libpbms.so'                    && $one_existing_plugin['Status'] == "ACTIVE"                ) {                    $has_blobstreaming = true;                    break;                }            }            unset($existing_plugins, $one_existing_plugin);        } else if (PMA_DRIZZLE) {            $has_blobstreaming = (bool) PMA_DBI_fetch_result(                "SELECT 1                FROM data_dictionary.plugins                WHERE module_name = 'PBMS'                    AND is_active = true                LIMIT 1"            );        }        PMA_cacheSet('has_blobstreaming', $has_blobstreaming, true);    }    // set variable indicating BS plugin existence    $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', $has_blobstreaming);    if (! $has_blobstreaming) {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    }    if ($has_blobstreaming) {        $bs_variables = PMA_BS_GetVariables();        // if no BS variables exist, set plugin existence to false and return        if (count($bs_variables) == 0) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        } // end if (count($bs_variables) <= 0)        // Check that the required pbms functions exist:        if (function_exists("pbms_connect") == false            || function_exists("pbms_error") == false            || function_exists("pbms_close") == false            || function_exists("pbms_is_blob_reference") == false            || function_exists("pbms_get_info") == false            || function_exists("pbms_get_metadata_value") == false            || function_exists("pbms_add_metadata") == false            || function_exists("pbms_read_stream") == false        ) {            // We should probably notify the user that they need to install            // the pbms client lib and PHP extension to make use of blob streaming.            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            PMA_cacheSet('has_blobstreaming', false, true);            return false;        }        if (function_exists("pbms_connection_pool_size")) {            if ( isset($PMA_Config->settings['pbms_connection_pool_size'])) {                $pool_size = $PMA_Config->settings['pbms_connection_pool_size'];                if ($pool_size == "") {                    $pool_size = 1;                }            } else {                $pool_size = 1;            }            pbms_connection_pool_size($pool_size);        }         // get BS server port        $BS_PORT = $bs_variables['pbms_port'];        // if no BS server port or 'pbms' database exists,        // set plugin existance to false and return        if ((! $BS_PORT) || (! initPBMSDatabase())) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        } // end if (!$BS_PORT)        // Ping PBMS: the database doesn't need to exist for this to work.        if (pbms_connect($serverCfg['host'], $BS_PORT, "anydb") == false) {            $PMA_Config->set('BLOBSTREAMING_PLUGINS_EXIST', false);            PMA_cacheSet('skip_blobstreaming', true, true);            return false;        }        pbms_close();        if (function_exists("pbms_pconnect")) {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', true);        } else {            $PMA_Config->set('PBMS_PCONNECT_EXISTS', false);        }        // add selected BS, CURL and fileinfo library variables to PMA configuration        $PMA_Config->set('BLOBSTREAMING_PORT', $BS_PORT);        $PMA_Config->set('BLOBSTREAMING_HOST', $serverCfg['host']);        $PMA_Config->set('BLOBSTREAMING_SERVER', $serverCfg['host'] . ':' . $BS_PORT);        $PMA_Config->set('PHP_PBMS_EXISTS', false);        $PMA_Config->set('FILEINFO_EXISTS', false);        // check if PECL's fileinfo library exist        $finfo = null;        if (function_exists("finfo_open")) {            $finfo = finfo_open(FILEINFO_MIME);        }        // fileinfo library exists, set necessary variable and close resource        if (! empty($finfo)) {            $PMA_Config->set('FILEINFO_EXISTS', true);            finfo_close($finfo);        } // end if (!empty($finfo))    } else {        PMA_cacheSet('skip_blobstreaming', true, true);        return false;    } // end if ($has_blobstreaming)    return true;}/** * returns a list of BLOBStreaming variables used by MySQL * * @access  public * @return  array - list of BLOBStreaming variables */function PMA_BS_GetVariables(){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return null;    }    // run query to retrieve BS variables    $query = "SHOW VARIABLES LIKE '%pbms%'";    $result = PMA_DBI_query($query);    $BS_Variables = array();    // while there are records to retrieve    while ($data = @PMA_DBI_fetch_assoc($result)) {        $BS_Variables[$data['Variable_name']] = $data['Value'];    }    // return BS variables    return $BS_Variables;}/** * Retrieves and shows PBMS error. * * @param sting $msg error message * * @return nothing */function PMA_BS_ReportPBMSError($msg){    $tmp_err = pbms_error();    PMA_showMessage(__('PBMS error') . " $msg $tmp_err");}/** * Tries to connect to PBMS server. * * @param string $db_name Database name * @param bool   $quiet   Whether to report errors * * @return bool Connection status. */function PMA_do_connect($db_name, $quiet){    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    // generate bs reference link    $pbms_host = $PMA_Config->get('BLOBSTREAMING_HOST');    $pbms_port = $PMA_Config->get('BLOBSTREAMING_PORT');    if ($PMA_Config->get('PBMS_PCONNECT_EXISTS')) {        // Open a persistent connection.        $ok = pbms_pconnect($pbms_host, $pbms_port, $db_name);    } else {        $ok = pbms_connect($pbms_host, $pbms_port, $db_name);    }    if ($ok == false) {        if ($quiet == false) {            PMA_BS_ReportPBMSError(                __('PBMS connection failed:')                . " pbms_connect($pbms_host, $pbms_port, $db_name)"            );        }        return false;    }    return true;}/** * Disconnects from PBMS server. * * @return nothing */function PMA_do_disconnect(){    pbms_close();}/** * Checks whether the BLOB reference looks valid * * @param string $bs_reference BLOB reference * @param string $db_name      Database name * * @return bool True on success. */function PMA_BS_IsPBMSReference($bs_reference, $db_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // You do not really need a connection to the PBMS Daemon    // to check if a reference looks valid but unfortunalty the API    // requires one at this point so until the API is updated    // we need to epen one here. If you use pool connections this    // will not be a performance problem.    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $ok = pbms_is_blob_reference($bs_reference);    return $ok ;}//------------function PMA_BS_CreateReferenceLink($bs_reference, $db_name){    if (PMA_do_connect($db_name, false) == false) {        return __('Error');    }    if (pbms_get_info(trim($bs_reference)) == false) {        PMA_BS_ReportPBMSError(            __('PBMS get BLOB info failed:')            . " pbms_get_info($bs_reference)"        );        PMA_do_disconnect();        return __('Error');    }    $content_type = pbms_get_metadata_value("Content-Type");    if ($content_type == false) {        $br = trim($bs_reference);        PMA_BS_ReportPBMSError(            "PMA_BS_CreateReferenceLink('$br', '$db_name'): "            . __('PBMS get BLOB Content-Type failed')        );    }    PMA_do_disconnect();    if (! $content_type) {        $content_type = "image/jpeg";    }    $bs_url = PMA_BS_getURL($bs_reference);    if (empty($bs_url)) {        PMA_BS_ReportPBMSError(__('No blob streaming server configured!'));        return 'Error';    }    $output = $content_type;    // specify custom HTML for various content types    switch ($content_type) {    // no content specified    case null:        $output = "NULL";        break;    // image content    case 'image/jpeg':    case 'image/png':        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('View image') . '</a>)';        break;    // audio content    case 'audio/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 120)">' . __('Play audio')            . '</a>)';        break;    // video content    case 'application/x-flash-video':    case 'video/mpeg':        $output .= ' (<a href="#" onclick="popupBSMedia(\''            . PMA_generate_common_url() . '\',\'' . urlencode($bs_reference)            . '\', \'' . urlencode($content_type) . '\','            . ($is_custom_type ? 1 : 0) . ', 640, 480)">' . __('View video')            . '</a>)';        break;    // unsupported content. specify download    default:        $output .= ' (<a href="' . $bs_url . '" target="new">'            . __('Download file') . '</a>)';    }    return $output;}/** * In the future there may be server variables to turn on/off PBMS * BLOB streaming on a per table or database basis. So in anticipation of this * PMA_BS_IsTablePBMSEnabled() passes in the table and database name even though * they are not currently needed. * * @param string $db_name  database name * @param string $tbl_name table name * @param string $tbl_type table type * * @return bool */function PMA_BS_IsTablePBMSEnabled($db_name, $tbl_name, $tbl_type){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if ((isset($tbl_type) == false) || (strlen($tbl_type) == 0)) {        return false;    }    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    // return if unable to load PMA configuration    if (empty($PMA_Config)) {        return false;    }    if (! $PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        return false;    }    // This information should be cached rather than selecting it each time.    // $query = "SELECT count(*)  FROM information_schema.TABLES T,    // pbms.pbms_enabled E where T.table_schema = ". PMA_backquote($db_name) . "    // and T.table_name = ". PMA_backquote($tbl_name) . " and T.engine = E.name";    $query = "SELECT count(*)  FROM pbms.pbms_enabled E where E.name = '"        . PMA_sqlAddSlashes($tbl_type) . "'";    $result = PMA_DBI_query($query);    $data = PMA_DBI_fetch_row($result);    if ($data[0] == 1) {        return true;    }    return false;}//------------function PMA_BS_UpLoadFile($db_name, $tbl_name, $file_type, $file_name){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    if (PMA_do_connect($db_name, false) == false) {        return false;    }    $fh = fopen($file_name, 'r');    if (! $fh) {        PMA_do_disconnect();        PMA_showMessage(sprintf(__('Could not open file: %s'), $file_name));        return false;    }    pbms_add_metadata("Content-Type", $file_type);    $pbms_blob_url = pbms_read_stream($fh, filesize($file_name), $tbl_name);    if (! $pbms_blob_url) {        PMA_BS_ReportPBMSError("pbms_read_stream()");    }    fclose($fh);    PMA_do_disconnect();    return $pbms_blob_url;}//------------function PMA_BS_SetContentType($db_name, $bsTable, $blobReference, $contentType){    if (PMA_cacheGet('skip_blobstreaming', true)) {        return false;    }    // This is a really ugly way to do this but currently there is nothing better.    // In a future version of PBMS the system tables will be redesigned to make this    // more efficient.    $query = "SELECT Repository_id, Repo_blob_offset FROM pbms_reference"        . " WHERE Blob_url='" . PMA_sqlAddSlashes($blobReference) . "'";    //error_log(" PMA_BS_SetContentType: $query\n", 3, "/tmp/mylog");    $result = PMA_DBI_query($query);    //error_log(" $query\n", 3, "/tmp/mylog");    // if record exists    if ($data = PMA_DBI_fetch_assoc($result)) {        $where = "WHERE Repository_id=" . $data['Repository_id']           . " AND Repo_blob_offset=" . $data['Repo_blob_offset'] ;        $query = "SELECT name from  pbms_metadata $where";        $result = PMA_DBI_query($query);        if (PMA_DBI_num_rows($result) == 0) {            $query = "INSERT into pbms_metadata Values( ". $data['Repository_id']                . ", " . $data['Repo_blob_offset']  . ", 'Content_type', '"                . PMA_sqlAddSlashes($contentType)  . "')";        } else {            $query = "UPDATE pbms_metadata SET name = 'Content_type', Value = '"                . PMA_sqlAddSlashes($contentType) . "' $where";        }        //error_log("$query\n", 3, "/tmp/mylog");        PMA_DBI_query($query);    } else {        return false;    }    return true;}//------------function PMA_BS_IsHiddenTable($table){    if ($table === 'pbms_repository'        || $table === 'pbms_reference'        || $table === 'pbms_metadata'        || $table === 'pbms_metadata_header'        || $table === 'pbms_dump'    ) {        return true;    }    return false;}//------------function PMA_BS_getURL($reference){    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    if (empty($PMA_Config)) {        return false;    }    // retrieve BS server variables from PMA configuration    $bs_server = $PMA_Config->get('BLOBSTREAMING_SERVER');    if (empty($bs_server)) {        return false;    }    $bs_url = PMA_linkURL('http://' . $bs_server . '/' . rtrim($reference));    return $bs_url;}?>
<?php//============================================================+// File name   : encodings_maps.php// Version     : 1.0.001// Begin       : 2011-10-01// Last Update : 2011-11-15// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2008-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Unicode data for TCPDF library.////============================================================+/** * @file * Font encodings maps class for TCPDF library. * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 5.9.123 (2011-10-01) *//** * @class TCPDF_ENCODING_MAPS * This is a PHP class containing Font encodings maps class for TCPDF library. * @package com.tecnick.tcpdf * @version 1.0.000 * @author Nicola Asuni - info@tecnick.com */class TCPDF_ENCODING_MAPS {/** * Array of Encoding Maps. * @public */public $encmap = array(// encoding map for: cp1251'cp1251' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'afii10051',129=>'afii10052',130=>'quotesinglbase',131=>'afii10100',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'Euro',137=>'perthousand',138=>'afii10058',139=>'guilsinglleft',140=>'afii10059',141=>'afii10061',142=>'afii10060',143=>'afii10145',144=>'afii10099',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'afii10106',155=>'guilsinglright',156=>'afii10107',157=>'afii10109',158=>'afii10108',159=>'afii10193',160=>'space',161=>'afii10062',162=>'afii10110',163=>'afii10057',164=>'currency',165=>'afii10050',166=>'brokenbar',167=>'section',168=>'afii10023',169=>'copyright',170=>'afii10053',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii10056',176=>'degree',177=>'plusminus',178=>'afii10055',179=>'afii10103',180=>'afii10098',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'afii10071',185=>'afii61352',186=>'afii10101',187=>'guillemotright',188=>'afii10105',189=>'afii10054',190=>'afii10102',191=>'afii10104',192=>'afii10017',193=>'afii10018',194=>'afii10019',195=>'afii10020',196=>'afii10021',197=>'afii10022',198=>'afii10024',199=>'afii10025',200=>'afii10026',201=>'afii10027',202=>'afii10028',203=>'afii10029',204=>'afii10030',205=>'afii10031',206=>'afii10032',207=>'afii10033',208=>'afii10034',209=>'afii10035',210=>'afii10036',211=>'afii10037',212=>'afii10038',213=>'afii10039',214=>'afii10040',215=>'afii10041',216=>'afii10042',217=>'afii10043',218=>'afii10044',219=>'afii10045',220=>'afii10046',221=>'afii10047',222=>'afii10048',223=>'afii10049',224=>'afii10065',225=>'afii10066',226=>'afii10067',227=>'afii10068',228=>'afii10069',229=>'afii10070',230=>'afii10072',231=>'afii10073',232=>'afii10074',233=>'afii10075',234=>'afii10076',235=>'afii10077',236=>'afii10078',237=>'afii10079',238=>'afii10080',239=>'afii10081',240=>'afii10082',241=>'afii10083',242=>'afii10084',243=>'afii10085',244=>'afii10086',245=>'afii10087',246=>'afii10088',247=>'afii10089',248=>'afii10090',249=>'afii10091',250=>'afii10092',251=>'afii10093',252=>'afii10094',253=>'afii10095',254=>'afii10096',255=>'afii10097'),// encoding map for: iso-8859-4'iso-8859-4' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'kgreenlandic',163=>'Rcommaaccent',164=>'currency',165=>'Itilde',166=>'Lcommaaccent',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Emacron',171=>'Gcommaaccent',172=>'Tbar',173=>'hyphen',174=>'Zcaron',175=>'macron',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'rcommaaccent',180=>'acute',181=>'itilde',182=>'lcommaaccent',183=>'caron',184=>'cedilla',185=>'scaron',186=>'emacron',187=>'gcommaaccent',188=>'tbar',189=>'Eng',190=>'zcaron',191=>'eng',192=>'Amacron',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Iogonek',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Edotaccent',205=>'Iacute',206=>'Icircumflex',207=>'Imacron',208=>'Dcroat',209=>'Ncommaaccent',210=>'Omacron',211=>'Kcommaaccent',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Uogonek',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Utilde',222=>'Umacron',223=>'germandbls',224=>'amacron',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'iogonek',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'edotaccent',237=>'iacute',238=>'icircumflex',239=>'imacron',240=>'dcroat',241=>'ncommaaccent',242=>'omacron',243=>'kcommaaccent',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'uogonek',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'utilde',254=>'umacron',255=>'dotaccent'),// encoding map for: cp1255'cp1255' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'afii57636',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'multiply',171=>'guillemotleft',172=>'logicalnot',173=>'sfthyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'middot',184=>'cedilla',185=>'onesuperior',186=>'divide',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'afii57799',193=>'afii57801',194=>'afii57800',195=>'afii57802',196=>'afii57793',197=>'afii57794',198=>'afii57795',199=>'afii57798',200=>'afii57797',201=>'afii57806',202=>'.notdef',203=>'afii57796',204=>'afii57807',205=>'afii57839',206=>'afii57645',207=>'afii57841',208=>'afii57842',209=>'afii57804',210=>'afii57803',211=>'afii57658',212=>'afii57716',213=>'afii57717',214=>'afii57718',215=>'gereshhebrew',216=>'gershayimhebrew',217=>'.notdef',218=>'.notdef',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'.notdef',224=>'afii57664',225=>'afii57665',226=>'afii57666',227=>'afii57667',228=>'afii57668',229=>'afii57669',230=>'afii57670',231=>'afii57671',232=>'afii57672',233=>'afii57673',234=>'afii57674',235=>'afii57675',236=>'afii57676',237=>'afii57677',238=>'afii57678',239=>'afii57679',240=>'afii57680',241=>'afii57681',242=>'afii57682',243=>'afii57683',244=>'afii57684',245=>'afii57685',246=>'afii57686',247=>'afii57687',248=>'afii57688',249=>'afii57689',250=>'afii57690',251=>'.notdef',252=>'.notdef',253=>'afii299',254=>'afii300',255=>'.notdef'),// encoding map for: iso-8859-11'iso-8859-11' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: cp1257'cp1257' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'dieresis',142=>'caron',143=>'cedilla',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'macron',158=>'ogonek',159=>'.notdef',160=>'space',161=>'.notdef',162=>'cent',163=>'sterling',164=>'currency',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'Oslash',169=>'copyright',170=>'Rcommaaccent',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'AE',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'oslash',185=>'onesuperior',186=>'rcommaaccent',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'ae',192=>'Aogonek',193=>'Iogonek',194=>'Amacron',195=>'Cacute',196=>'Adieresis',197=>'Aring',198=>'Eogonek',199=>'Emacron',200=>'Ccaron',201=>'Eacute',202=>'Zacute',203=>'Edotaccent',204=>'Gcommaaccent',205=>'Kcommaaccent',206=>'Imacron',207=>'Lcommaaccent',208=>'Scaron',209=>'Nacute',210=>'Ncommaaccent',211=>'Oacute',212=>'Omacron',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Uogonek',217=>'Lslash',218=>'Sacute',219=>'Umacron',220=>'Udieresis',221=>'Zdotaccent',222=>'Zcaron',223=>'germandbls',224=>'aogonek',225=>'iogonek',226=>'amacron',227=>'cacute',228=>'adieresis',229=>'aring',230=>'eogonek',231=>'emacron',232=>'ccaron',233=>'eacute',234=>'zacute',235=>'edotaccent',236=>'gcommaaccent',237=>'kcommaaccent',238=>'imacron',239=>'lcommaaccent',240=>'scaron',241=>'nacute',242=>'ncommaaccent',243=>'oacute',244=>'omacron',245=>'otilde',246=>'odieresis',247=>'divide',248=>'uogonek',249=>'lslash',250=>'sacute',251=>'umacron',252=>'udieresis',253=>'zdotaccent',254=>'zcaron',255=>'dotaccent'),// encoding map for: cp1258'cp1258' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'gravecomb',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Ntilde',210=>'hookabovecomb',211=>'Oacute',212=>'Ocircumflex',213=>'Ohorn',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Uhorn',222=>'tildecomb',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'acutecomb',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'ntilde',242=>'dotbelowcomb',243=>'oacute',244=>'ocircumflex',245=>'ohorn',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'uhorn',254=>'dong',255=>'ydieresis'),// encoding map for: cp1253'cp1253' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'dieresistonos',162=>'Alphatonos',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: cp874'cp874' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'ellipsis',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: iso-8859-2'iso-8859-2' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'breve',163=>'Lslash',164=>'currency',165=>'Lcaron',166=>'Sacute',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Scedilla',171=>'Tcaron',172=>'Zacute',173=>'hyphen',174=>'Zcaron',175=>'Zdotaccent',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'lslash',180=>'acute',181=>'lcaron',182=>'sacute',183=>'caron',184=>'cedilla',185=>'scaron',186=>'scedilla',187=>'tcaron',188=>'zacute',189=>'hungarumlaut',190=>'zcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: cp1250'cp1250' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'Sacute',141=>'Tcaron',142=>'Zcaron',143=>'Zacute',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'sacute',157=>'tcaron',158=>'zcaron',159=>'zacute',160=>'space',161=>'caron',162=>'breve',163=>'Lslash',164=>'currency',165=>'Aogonek',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'Scedilla',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'ogonek',179=>'lslash',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'aogonek',186=>'scedilla',187=>'guillemotright',188=>'Lcaron',189=>'hungarumlaut',190=>'lcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: iso-8859-7'iso-8859-7' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'quoteleft',162=>'quoteright',163=>'sterling',164=>'.notdef',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'.notdef',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'dieresistonos',182=>'Alphatonos',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: iso-8859-9'iso-8859-9' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: cp1252'cp1252' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'Zcaron',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'zcaron',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: cp1254'cp1254' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: iso-8859-1'iso-8859-1' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-15'iso-8859-15' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'Euro',165=>'yen',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'Zcaron',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: iso-8859-16'iso-8859-16' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'aogonek',163=>'Lslash',164=>'Euro',165=>'quotedblbase',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'Scommaaccent',171=>'guillemotleft',172=>'Zacute',173=>'hyphen',174=>'zacute',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'Ccaron',179=>'lslash',180=>'Zcaron',181=>'quotedblright',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'ccaron',186=>'scommaaccent',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'zdotaccent',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Cacute',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Nacute',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'Sacute',216=>'Uhungarumlaut',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Eogonek',222=>'Tcommaaccent',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'cacute',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'nacute',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'sacute',248=>'uhungarumlaut',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'eogonek',254=>'tcommaaccent',255=>'ydieresis'),// encoding map for: koi8-u'koi8-u' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'bullet',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'afii10101',165=>'SF390000',166=>'afii10103',167=>'afii10104',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'afii10098',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'afii10053',181=>'SF230000',182=>'afii10055',183=>'afii10056',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'afii10050',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: symbol'symbol' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'universal',35=>'numbersign',36=>'existential',37=>'percent',38=>'ampersand',39=>'suchthat',40=>'parenleft',41=>'parenright',42=>'asteriskmath',43=>'plus',44=>'comma',45=>'minus',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'congruent',65=>'Alpha',66=>'Beta',67=>'Chi',68=>'Delta',69=>'Epsilon',70=>'Phi',71=>'Gamma',72=>'Eta',73=>'Iota',74=>'theta1',75=>'Kappa',76=>'Lambda',77=>'Mu',78=>'Nu',79=>'Omicron',80=>'Pi',81=>'Theta',82=>'Rho',83=>'Sigma',84=>'Tau',85=>'Upsilon',86=>'sigma1',87=>'Omega',88=>'Xi',89=>'Psi',90=>'Zeta',91=>'bracketleft',92=>'therefore',93=>'bracketright',94=>'perpendicular',95=>'underscore',96=>'radicalex',97=>'alpha',98=>'beta',99=>'chi',100=>'delta',101=>'epsilon',102=>'phi',103=>'gamma',104=>'eta',105=>'iota',106=>'phi1',107=>'kappa',108=>'lambda',109=>'mu',110=>'nu',111=>'omicron',112=>'pi',113=>'theta',114=>'rho',115=>'sigma',116=>'tau',117=>'upsilon',118=>'omega1',119=>'omega',120=>'xi',121=>'psi',122=>'zeta',123=>'braceleft',124=>'bar',125=>'braceright',126=>'similar',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'Euro',161=>'Upsilon1',162=>'minute',163=>'lessequal',164=>'fraction',165=>'infinity',166=>'florin',167=>'club',168=>'diamond',169=>'heart',170=>'spade',171=>'arrowboth',172=>'arrowleft',173=>'arrowup',174=>'arrowright',175=>'arrowdown',176=>'degree',177=>'plusminus',178=>'second',179=>'greaterequal',180=>'multiply',181=>'proportional',182=>'partialdiff',183=>'bullet',184=>'divide',185=>'notequal',186=>'equivalence',187=>'approxequal',188=>'ellipsis',189=>'arrowvertex',190=>'arrowhorizex',191=>'carriagereturn',192=>'aleph',193=>'Ifraktur',194=>'Rfraktur',195=>'weierstrass',196=>'circlemultiply',197=>'circleplus',198=>'emptyset',199=>'intersection',200=>'union',201=>'propersuperset',202=>'reflexsuperset',203=>'notsubset',204=>'propersubset',205=>'reflexsubset',206=>'element',207=>'notelement',208=>'angle',209=>'gradient',210=>'registerserif',211=>'copyrightserif',212=>'trademarkserif',213=>'product',214=>'radical',215=>'dotmath',216=>'logicalnot',217=>'logicaland',218=>'logicalor',219=>'arrowdblboth',220=>'arrowdblleft',221=>'arrowdblup',222=>'arrowdblright',223=>'arrowdbldown',224=>'lozenge',225=>'angleleft',226=>'registersans',227=>'copyrightsans',228=>'trademarksans',229=>'summation',230=>'parenlefttp',231=>'parenleftex',232=>'parenleftbt',233=>'bracketlefttp',234=>'bracketleftex',235=>'bracketleftbt',236=>'bracelefttp',237=>'braceleftmid',238=>'braceleftbt',239=>'braceex',240=>'.notdef',241=>'angleright',242=>'integral',243=>'integraltp',244=>'integralex',245=>'integralbt',246=>'parenrighttp',247=>'parenrightex',248=>'parenrightbt',249=>'bracketrighttp',250=>'bracketrightex',251=>'bracketrightbt',252=>'bracerighttp',253=>'bracerightmid',254=>'bracerightbt',255=>'.notdef',1226=>'registered',1227=>'copyright',1228=>'trademark')); // end of encoding maps} // --- END OF CLASS ---//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of MS Visio Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_VISIO extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_VISIO" constructor     *     * Upon instantiation This starts writing the Visio XML .VDX document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Visio XML .VDX Document     *     * Visio XML document starts by first initializing VisioDocument tag     * then DocumentProperties & DocumentSettings contains all the     * attributes that needed to define the document. Order of elements     * should be maintained while generating XML of Visio.     *     * @return void     * @access public     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * _documentProperties, _documentSettings     */    function startVisioDoc()    {        $this->startElement('VisioDocument');        $this->writeAttribute('xmlns', 'http://schemas.microsoft.com/visio/2003/core');        $this->writeAttribute('xmlns:vx', 'http://schemas.microsoft.com/visio/2006/extension');        $this->writeAttribute('xml:space', 'preserve');        $this->_documentProperties();        $this->_documentSettings();    }    /**     * Set document title     *     * @param string $value title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Sets Visio XML .VDX Document Properties     *     * DocumentProperties tag contains document property elements such as       the document's Title,Subject,Creator and templates tags     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement(),XMLWriter::writeRaw()     */    private function _documentProperties()    {        $this->startElement('DocumentProperties');        $this->writeRaw('<Title>'.$this->title.'</Title>');        $this->writeRaw('<Subject>'.$this->title.'</Subject>');        $this->writeRaw('<Creator>'.$this->author.'</Creator>');        $this->writeRaw('<Company>phpMyAdmin</Company>');        $this->writeRaw('<Template>c:\program files\microsoft office\office12\1033\DBMODL_U.VST</Template>');        $this->endElement();    }    /**     * Sets Visio XML .VDX Document Settings     *     * DocumentSettings  tag contains elements that specify document settings.     *     * @return void     * @access private     * @see XMLWriter::startElement(),XMLWriter::endElement()     */    private function _documentSettings()    {        $this->startElement('DocumentSettings');        $this->endElement();    }    /**     * Ends Visio XML Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endVisioDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Visio XML .VDX Document for download     *     * @param string $fileName name of the Visio XML document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {         //if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->flush();        PMA_download_header($fileName . '.vdx', 'application/visio', strlen($output));        print $output;    }}/** * Draws tables schema */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current Visio XML document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @return void     * @access private     * @see PMA_VISIO, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $pageNumber, &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $visio, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $visio->dieSchema(                $pageNumber,                "VISIO",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($tableName) . ';', null, PMA_DBI_QUERY_STORE);        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return the title     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     font name     * @param integer $fontSize font size     *     * @global object The current Visio XML document     *     * @return void     * @see PMA_VISIO     */    private function _setWidthTable($font,$fontSize)    {        global $visio;    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return void     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function tableDraw($showColor)    {        global $visio;        //echo $this->_tableName.'<br />';        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            // code here for drawing table diagrams        }    }}/** * Draws relation links * * @access public * @see PMA_VISIO */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current Visio XML document     *     * @return void     * @access public     * @see PMA_VISIO     */    public function relationDraw($changeColor)    {        global $visio;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',                'orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // code here for making connections b/w relation objects    }}/** end of the "Relation_Stats" class*//** * Visio Relation Schema Class * * Purpose of this class is to generate the Visio XML .VDX Document which is used * for representing the database diagrams in any version of MS Visio IDE. * This class uses Software and Database Template and Database model diagram of * Visio and with the combination of these objects actually helps in preparing * Visio XML .VDX document. * * Visio XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Visio_Relation_Schema */class PMA_Visio_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * The "PMA_Visio_Relation_Schema" constructor     *     * Upon instantiation This outputs the Visio XML document     * that user can download     *     * @return void     * @see PMA_VISIO,Table_Stats,Relation_Stats     */    function __construct()    {        global $visio,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $visio = new PMA_VISIO();        $visio->setTitle(sprintf(__('Schema of the %s database - Page %s'), $db, $this->pageNumber));        $visio->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $visio->startVisioDoc();        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats($table, $this->pageNumber, $this->showKeys);            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table,                            $master_field,                            $rel['foreign_table'],                            $rel['foreign_field'],                            $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $visio->endVisioDoc();        $visio->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showKeys     Whether to display keys or not     *     * @return void     * @access private     * @see Table_Stats::__construct(), Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     * connects master table's master field to foreign table's forein field.     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/** * Column types and functions supported by Drizzle * * @package PhpMyAdmin */$auto_column_types = empty($cfg['ColumnTypes']);// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INTEGER',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'INTEGER',        'BIGINT',        '-',        'DECIMAL',        'DOUBLE',        '-',        'BOOLEAN',        'SERIAL',        'UUID',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',    ),    // Text    'STRING' => array(        'VARCHAR',        'TEXT',        '-',        'VARBINARY',        'BLOB',        '-',        'ENUM',    ),);if ($auto_column_types && PMA_MYSQL_INT_VERSION >= 20120130) {    $cfg['ColumnTypes']['STRING'][] = '-';    $cfg['ColumnTypes']['STRING'][] = 'IPV6';}unset($auto_column_types);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'INTEGER'   => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'VARCHAR'    => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'UUID'       => 'FUNC_UUID',        'ENUM'       => '',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'HEX',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'QUOTE',            'REVERSE',            'RTRIM',            'SCHEMA',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_UUID' => array(            'UUID',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SYSDATE',            //'TIME', // https://bugs.launchpad.net/drizzle/+bug/804571            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            //'WEEK', // same as TIME            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),    );    $cfg_default_restrict_funcs = empty($cfg['RestrictFunctions']);    if ($cfg_default_restrict_funcs) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            $cfg['Functions'] = array_merge($cfg['Functions'], $functions);        }        // check for some functions known to be in modules        $functions = array(            'MYSQL_PASSWORD' => 'FUNC_CHAR',            'ROT13' => 'FUNC_CHAR',        );        // add new functions        $sql = "SELECT upper(plugin_name) f            FROM data_dictionary.plugins            WHERE plugin_name IN ('" . implode("','", array_keys($functions)) . "')              AND plugin_type = 'Function'              AND is_active";        $drizzle_functions = PMA_DBI_fetch_result($sql, 'f', 'f');        $cfg['Functions'] = array_merge($cfg['Functions'], $drizzle_functions);        if ($cfg_default_restrict_funcs) {            foreach ($drizzle_functions as $function) {                $category = $functions[$function];                $cfg['RestrictFunctions'][$category][] = $function;            }            foreach ($cfg['RestrictFunctions'] as &$v) {                sort($v);            }            unset($v);        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table zoom search tab * * display table zoom search form, create SQL queries from form data * *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';require_once './libraries/relation.lib.php';require_once './libraries/tbl_info.inc.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_zoom_plot.js';$GLOBALS['js_include'][] = 'date.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';$GLOBALS['js_include'][] = 'canvg/canvg.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Handle AJAX request for data row on point select * @var post_params Object containing parameters for the POST request */if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {    $extra_data = array();    $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'        . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];    $result = PMA_DBI_query($row_info_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        // for bit fields we need to convert them to printable form        $i = 0;        foreach ($row as $col => $val) {            if ($fields_meta[$i]->type == 'bit') {                $row[$col] = PMA_printable_bit_value($val, $fields_meta[$i]->length);            }            $i++;        }        $extra_data['row_info'] = $row;    }    PMA_ajaxResponse(null, true, $extra_data);}$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));/** * Not selection yet required -> displays the selection form */// Gets some core librariesrequire_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (! isset($goto)) {    $goto = $GLOBALS['cfg']['DefaultTabTable'];}// Defines the url to return to in case of error in the next sql statement$err_url   = $goto . '?' . PMA_generate_common_url($db, $table);// Gets the list and number of fieldslist($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);$fields_cnt = count($fields_list);// retrieve keys into foreign fields, if any// check also foreigners even if relwork is FALSE (to get// foreign keys from innodb)$foreigners = PMA_getForeigners($db, $table);$flag = 1;$tbl_fields_type = $tbl_fields_collation = $tbl_fields_null = array();if (! isset($zoom_submit) && ! isset($inputs)) {    $dataLabel = PMA_getDisplayField($db, $table);}?><div id="sqlqueryresults"></div><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');/** *  Set the field name,type,collation and whether null on select of a coulmn */if (isset($inputs) && ($inputs[0] != 'pma_null' || $inputs[1] != 'pma_null')) {    $flag = 2;    for ($i = 0 ; $i < 4 ; $i++) {        if ($inputs[$i] != 'pma_null') {            $key = array_search($inputs[$i], $fields_list);            $tbl_fields_type[$i] = $fields_type[$key];            $tbl_fields_collation[$i] = $fields_collation[$key];            $tbl_fields_null[$i] = $fields_null[$key];        }    }}/* * Form for input criteria */?><form method="post" action="tbl_zoom_select.php" name="insertForm" id="zoom_search_form"    <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_zoom_select.php" /><input type="hidden" name="flag" id="id_flag" value="<?php echo $flag; ?>" /><fieldset id="inputSection"><legend><?php echo __('Do a "query by example" (wildcard: "%") for two different columns') ?></legend><table class="data"><?php echo PMA_tbl_setTableHeader();?><tbody><?php    $odd_row = true;for ($i = 0; $i < 4; $i++) {    if ($i == 2) {        echo "<tr><td>";        echo __("Additional search criteria");        echo "</td></tr>";    }    ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <th><select name="inputs[]" id="<?php echo 'tableid_' . $i; ?>" >        <option value="<?php echo 'pma_null'; ?>"><?php echo __('None');  ?></option>    <?php    for ($j = 0 ; $j < $fields_cnt ; $j++) {        if (isset($inputs[$i]) && $inputs[$i] == htmlspecialchars($fields_list[$j])) {?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        } else { ?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        }    } ?>        </select></th>        <td><?php if (isset($tbl_fields_type[$i])) echo $tbl_fields_type[$i]; ?></td>        <td><?php if (isset($tbl_fields_collation[$i])) echo $tbl_fields_collation[$i]; ?></td>        <td>    <?php    if (isset($inputs) && $inputs[$i] != 'pma_null') { ?>        <select name="zoomFunc[]">        <?php        if (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == htmlspecialchars($fc)) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } elseif (preg_match('@char|blob|text|set@i', $tbl_fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } // end if... else...        if ($tbl_fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        }        ?>        </select>        </td>        <td>        <?php        $field = $inputs[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        if (isset($fields)) {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $fields            );        } else {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], ''            );        }    } else { ?>        </td><td></td>        <?php    } ?>    </tr>    <tr><td>      <input type="hidden" name="types[<?php echo $i; ?>]" id="types_<?php echo $i; ?>"        value="<?php if(isset($tbl_fields_type[$i]))echo $tbl_fields_type[$i]; ?>" />      <input type="hidden" name="collations[<?php echo $i; ?>]"        value="<?php if(isset($tbl_fields_collation[$i]))echo $tbl_fields_collation[$i]; ?>" />    </td></tr>    <?php}//end for?>    </tbody>    </table><?php/* * Other inputs like data label and mode go after selection of column criteria *///Set default datalabel if not selectedif (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null') {    if ($dataLabel == '') {        $dataLabel = PMA_getDisplayField($db, $table);    }}?>    <table class="data">    <tr><td><label for="dataLabel"><?php echo __("Use this column to label each point"); ?></label></td>    <td><select name="dataLabel" id='dataLabel' >        <option value = ''> <?php echo __('None');  ?> </option><?phpfor ($j = 0; $j < $fields_cnt; $j++) {    if (isset($dataLabel) && $dataLabel == htmlspecialchars($fields_list[$j])) {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    } else {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" >            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    }}?>    </select>    </td></tr>    <tr><td><label for="maxRowPlotLimit"><?php echo __("Maximum rows to plot"); ?></label></td>    <td><?phpecho '<input type="text" name="maxPlotLimit" id="maxRowPlotLimit" value="';if (! empty($maxPlotLimit)) {    echo htmlspecialchars($maxPlotLimit);} else {    echo $GLOBALS['cfg']['maxRowPlotLimit'];}echo '" /></td></tr>';?>    </table></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="zoom_submit" id="inputFormSubmitId" value="<?php echo __('Go'); ?>" /></fieldset></form></fieldset><?php/* * Handle the input criteria and generate the query result * Form for displaying query results */if (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null' && $inputs[0] != $inputs[1]) {    /*     * Query generation part     */    $w = $data = array();    $sql_query = 'SELECT *';    //Add the table    $sql_query .= ' FROM ' . PMA_backquote($table);    for ($i = 0; $i < 4; $i++) {        if ($inputs[$i] == 'pma_null') {            continue;        }        $tmp = array();        // The where clause        $charsets = array();        $cnt_func = count($zoomFunc[$i]);        $func_type = $zoomFunc[$i];        list($charsets[$i]) = explode('_', $collations[$i]);        $unaryFlag = (isset($GLOBALS['cfg']['UnaryOperators'][$func_type])                      && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1)                      ? true                      : false;        $whereClause = PMA_tbl_search_getWhereClause(            $fields[$i], $inputs[$i], $types[$i],            $collations[$i], $func_type, $unaryFlag        );        if ($whereClause) {            $w[] = $whereClause;        }    } // end for    if ($w) {        $sql_query .= ' WHERE ' . implode(' AND ', $w);    }    $sql_query .= ' LIMIT ' . $maxPlotLimit;    /*     * Query execution part     */    $result = PMA_DBI_query($sql_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array        $tmpRow = array();        foreach ($row as $val) {            $tmpRow[] = $val;        }        //Get unique conditon on each row (will be needed for row update)        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);        //Append it to row array as where_clause        $row['where_clause'] = $uniqueCondition[0];        if ($dataLabel == $inputs[0] || $dataLabel == $inputs[1]) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                'where_clause' => $uniqueCondition[0]            );        } elseif ($dataLabel) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => $row[$dataLabel],                'where_clause' => $uniqueCondition[0]            );        } else {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => '',                'where_clause' => $uniqueCondition[0]            );        }    }    /*     * Form for displaying point data and also the scatter plot     */    ?>    <form method="post" action="tbl_zoom_select.php" name="displayResultForm" id="zoom_display_form"        <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="tbl_zoom_select.php" />    <fieldset id="displaySection">      <legend><?php echo __('Browse/Edit the points') ?></legend>      <center>    <?php    //JSON encode the data(query result)    if (isset($zoom_submit) && ! empty($data)) {        ?>        <div id='resizer' style="width:600px;height:400px">          <center><a href="#" onclick="displayHelp();"><?php echo __('How to use'); ?></a></center>          <div id="querydata" style="display:none">        <?php        echo json_encode($data);        ?>          </div>          <div id="querychart" style="float:right"></div>        </div>        <?php    }    ?>      </center>      <div id='dataDisplay' style="display:none">        <table>          <thead>            <tr>              <th> <?php echo __('Column'); ?> </th>              <th> <?php echo __('Null'); ?> </th>              <th> <?php echo __('Value'); ?> </th>            </tr>          </thead>          <tbody>    <?php    $odd_row = true;    for ($i = 4; $i < $fields_cnt + 4; $i++) {        $tbl_fields_type[$i] = $fields_type[$i - 4];        $fieldpopup = $fields_list[$i - 4];        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">              <th><?php echo htmlspecialchars($fields_list[$i - 4]); ?></th>              <th><?php echo ($fields_null[$i - 4] == 'YES')                  ? '<input type="checkbox" class="checkbox_null" name="fields_null[ '                      . $i . ' ]" id="fields_null_id_' . $i . '" />'                  : ''; ?>              </th>              <th> <?php              echo PMA_getForeignFields_Values(                  $foreigners, $foreignData, $fieldpopup, $tbl_fields_type,                  $i, $db, $table, $titles,                  $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', false, true              ); ?>              </th>            </tr>        <?php    }    ?>          </tbody>        </table>    </div>    <input type="hidden" id="queryID" name="sql_query" />    </form>    <?php}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for trigger management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_TRI_setGlobals(){    global $action_timings, $event_manipulations;    // Some definitions for triggers    $action_timings      = array('BEFORE',                                 'AFTER');    $event_manipulations = array('INSERT',                                 'UPDATE',                                 'DELETE');}/** * Main function for the triggers functionality */function PMA_TRI_main(){    global $db, $table;    PMA_TRI_setGlobals();    /**     * Process all requests     */    PMA_TRI_handleEditor();    PMA_TRI_handleExport();    /**     * Display a list of available triggers     */    $items = PMA_DBI_get_triggers($db, $table);    echo PMA_RTE_getList('trigger', $items);    /**     * Display a link for adding a new trigger,     * if the user has the necessary privileges     */    echo PMA_TRI_getFooterLinks();} // end PMA_TRI_main()/** * Handles editor requests for adding or editing an item */function PMA_TRI_handleEditor(){    global $_REQUEST, $_POST, $errors, $db, $table;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_TRI_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $trigger = PMA_TRI_getDataFromName($_REQUEST['item_original_name']);                $create_item = $trigger['create'];                $drop_item = $trigger['drop'] . ';';                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped trigger.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Trigger %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Trigger %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $items = PMA_DBI_get_triggers($db, $table, '');                $trigger = false;                foreach ($items as $value) {                    if ($value['name'] == $_REQUEST['item_name']) {                        $trigger = $value;                    }                }                $extra_data['insert'] = false;                if (empty($table) || ($trigger !== false && $table == $trigger['table'])) {                    $extra_data['insert'] = true;                    $extra_data['new_row'] = PMA_TRI_getRowForList($trigger);                    $extra_data['name'] = htmlspecialchars(                        strtoupper($_REQUEST['item_name'])                    );                }                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item']))) // FIXME: this must be simpler than that    ) {        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_TRI_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit trigger");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])            ) {                $item = PMA_TRI_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_TRI_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_TRI_getEditorForm($mode, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_TRI_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_table',                     'item_original_name',                     'item_action_timing',                     'item_event_manipulation',                     'item_definition',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    return $retval;} // end PMA_TRI_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit trigger" form given the name of a trigger. * * @param   string   $name   The name of the trigger. * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromName($name){    global $db, $table, $_REQUEST;    $temp = array();    $items = PMA_DBI_get_triggers($db, $table, '');    foreach ($items as $value) {        if ($value['name'] == $name) {            $temp = $value;        }    }    if (empty($temp)) {        return false;    } else {        $retval = array();        $retval['create']                  = $temp['create'];        $retval['drop']                    = $temp['drop'];        $retval['item_name']               = $temp['name'];        $retval['item_table']              = $temp['table'];        $retval['item_action_timing']      = $temp['action_timing'];        $retval['item_event_manipulation'] = $temp['event_manipulation'];        $retval['item_definition']         = $temp['definition'];        $retval['item_definer']            = $temp['definer'];        return $retval;    }} // end PMA_TRI_getDataFromName()/** * Displays a form used to add/edit a trigger * * @param   string   $mode         If the editor will be used edit a trigger *                                 or add a new one: 'edit' or 'add'. * @param   array    $item         Data for the trigger returned by *                                 PMA_TRI_getDataFromRequest() or *                                 PMA_TRI_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_TRI_getEditorForm($mode, $item){    global $db, $table, $event_manipulations, $action_timings;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_definition',                       'item_definer'                   );    foreach ($need_escape as $key => $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    $query  = "SELECT `TABLE_NAME` FROM `INFORMATION_SCHEMA`.`TABLES` ";    $query .= "WHERE `TABLE_SCHEMA`='" . PMA_sqlAddSlashes($db) . "' ";    $query .= "AND `TABLE_TYPE`='BASE TABLE'";    $tables = PMA_DBI_fetch_result($query);    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_triggers.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Trigger name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$item['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Table') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_table'>\n";    foreach ($tables as $key => $value) {        $selected = "";        if ($mode == 'add' && $value == $table) {            $selected = " selected='selected'";        } else if ($mode == 'edit' && $value == $item['item_table']) {            $selected = " selected='selected'";        }        $retval .= "            <option$selected>$value</option>\n";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . _pgettext('Trigger action time', 'Time') . "</td>\n";    $retval .= "    <td><select name='item_timing'>\n";    foreach ($action_timings as $key => $value) {        $selected = "";        if (! empty($item['item_action_timing'])            && $item['item_action_timing'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event') . "</td>\n";    $retval .= "    <td><select name='item_event'>\n";    foreach ($event_manipulations as $key => $value) {        $selected = "";        if (! empty($item['item_event_manipulation'])            && $item['item_event_manipulation'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    return $retval;} // end PMA_TRI_getEditorForm()/** * Composes the query necessary to create a trigger from an HTTP request. * * @return  string  The CREATE TRIGGER query. */function PMA_TRI_getQueryFromRequest(){    global $_REQUEST, $db, $errors, $action_timings, $event_manipulations;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'TRIGGER ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide a trigger name');    }    if (! empty($_REQUEST['item_timing']) && in_array($_REQUEST['item_timing'], $action_timings)) {        $query .= $_REQUEST['item_timing'] . ' ';    } else {        $errors[] = __('You must provide a valid timing for the trigger');    }    if (! empty($_REQUEST['item_event']) && in_array($_REQUEST['item_event'], $event_manipulations)) {        $query .= $_REQUEST['item_event'] . ' ';    } else {        $errors[] = __('You must provide a valid event for the trigger');    }    $query .= 'ON ';    if (! empty($_REQUEST['item_table']) && in_array($_REQUEST['item_table'], PMA_DBI_get_tables($db))) {        $query .= PMA_backQuote($_REQUEST['item_table']);    } else {        $errors[] = __('You must provide a valid table name');    }    $query .= ' FOR EACH ROW ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a trigger definition.');    }    return $query;} // end PMA_TRI_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__external_info(){    return array(        'info' => __('LINUX ONLY: Launches an external application and feeds it the column data via standard input. Returns the standard output of the application. The default is Tidy, to pretty-print HTML code. For security reasons, you have to manually edit the file libraries/transformations/text_plain__external.inc.php and list the tools you want to make available. The first option is then the number of the program you want to use and the second option is the parameters for the program. The third option, if set to 1, will convert the output using htmlspecialchars() (Default 1). The fourth option, if set to 1, will prevent wrapping and ensure that the output appears all on one line (Default 1).'),        );}/** * */function PMA_transformation_text_plain__external_nowrap($options = array()){    if (!isset($options[3]) || $options[3] == '') {        $nowrap = true;    } elseif ($options[3] == '1' || $options[3] == 1) {        $nowrap = true;    } else {        $nowrap = false;    }    return $nowrap;}function PMA_transformation_text_plain__external($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    $allowed_programs = array();    //    // WARNING:    //    // It's up to administrator to allow anything here. Note that users may    // specify any parameters, so when programs allow output redirection or    // any other possibly dangerous operations, you should write wrapper    // script that will publish only functions you really want.    //    // Add here program definitions like (note that these are NOT safe    // programs):    //    //$allowed_programs[0] = '/usr/local/bin/tidy';    //$allowed_programs[1] = '/usr/local/bin/validate';    // no-op when no allowed programs    if (count($allowed_programs) == 0) {        return $buffer;    }    if (!isset($options[0]) ||  $options[0] == '' || !isset($allowed_programs[$options[0]])) {        $program = $allowed_programs[0];    } else {        $program = $allowed_programs[$options[0]];    }    if (!isset($options[1]) || $options[1] == '') {        $poptions = '-f /dev/null -i -wrap -q';    } else {        $poptions = $options[1];    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = 1;    }    if (!isset($options[3]) || $options[3] == '') {        $options[3] = 1;    }    // needs PHP >= 4.3.0    $newstring = '';    $descriptorspec = array(        0 => array("pipe", "r"),        1 => array("pipe", "w")    );    $process = proc_open($program . ' ' . $poptions, $descriptorspec, $pipes);    if (is_resource($process)) {        fwrite($pipes[0], $buffer);        fclose($pipes[0]);        while (!feof($pipes[1])) {            $newstring .= fgets($pipes[1], 1024);        }        fclose($pipes[1]);        // we don't currently use the return value        $return_value = proc_close($process);    }    if ($options[2] == 1 || $options[2] == '2') {        $retstring = htmlspecialchars($newstring);    } else {        $retstring = $newstring;    }    return $retstring;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Logging functionality for webserver. * * This includes web server specific code to log some information. * * @package PhpMyAdmin *//** * Logs user information to webserver logs. */function PMA_log_user($user, $status = 'ok'){    if (function_exists('apache_note')) {        apache_note('userID', $user);        apache_note('userStatus', $status);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';require './libraries/server_common.inc.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';} else {    $replication_types = array();    $replication_info = null;}require './libraries/build_html_for_db.lib.php';/** * avoids 'undefined index' errors */if (empty($_REQUEST['sort_by'])) {    $sort_by = 'SCHEMA_NAME';} else {    $sort_by_whitelist = array(        'SCHEMA_NAME',        'DEFAULT_COLLATION_NAME',        'SCHEMA_TABLES',        'SCHEMA_TABLE_ROWS',        'SCHEMA_DATA_LENGTH',        'SCHEMA_INDEX_LENGTH',        'SCHEMA_LENGTH',        'SCHEMA_DATA_FREE'    );    if (in_array($_REQUEST['sort_by'], $sort_by_whitelist)) {        $sort_by = $_REQUEST['sort_by'];    } else {        $sort_by = 'SCHEMA_NAME';    }}if (isset($_REQUEST['sort_order']) && strtolower($_REQUEST['sort_order']) == 'desc') {    $sort_order = 'desc';} else {    $sort_order = 'asc';}$dbstats    = empty($_REQUEST['dbstats']) ? 0 : 1;$pos        = empty($_REQUEST['pos']) ? 0 : (int) $_REQUEST['pos'];/** * Drops multiple databases */// workaround for IE behavior (it returns some coordinates based on where// the mouse was on the Drop image):if (isset($_REQUEST['drop_selected_dbs_x'])) {    $_REQUEST['drop_selected_dbs'] = true;}if ((isset($_REQUEST['drop_selected_dbs']) || isset($_REQUEST['query_type']))  && ($is_superuser || $cfg['AllowUserDropDatabase'])) {    if (! isset($_REQUEST['selected_dbs']) && ! isset($_REQUEST['query_type'])) {        $message = PMA_Message::error(__('No databases selected.'));    } else {        $action = 'server_databases.php';        $submit_mult = 'drop_db' ;        $err_url = 'server_databases.php?' . PMA_generate_common_url();        if (isset($_REQUEST['selected_dbs'])) {            $selected_db = $_REQUEST['selected_dbs'];        }        include './libraries/mult_submits.inc.php';        unset($action, $submit_mult, $err_url, $selected_db, $GLOBALS['db']);        if (empty($message)) {            $message = PMA_Message::success(__('%s databases have been dropped successfully.'));            if ($mult_btn == __('Yes')) {                $message->addParam(count($selected));            } else {                $message->addParam(0);            }        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']      ? PMA_getImage('s_db.png')      : '')   . ($dbstats ? __('Databases statistics') : __('Databases')) . "\n"   .'</h2>' . "\n";/** * Create database. */if ($cfg['ShowCreateDb']) {    echo '<ul><li id="li_create_database">' . "\n";    include './libraries/display_create_database.lib.php';    echo '    </li>' . "\n";    echo '</ul>' . "\n";}/** * Gets the databases list */if ($server > 0) {    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,        $sort_order, $pos, true);    $databases_count = count($GLOBALS['pma']->databases);} else {    $databases_count = 0;}/** * Displays the page */if ($databases_count > 0) {    echo '<div id="tableslistcontainer">';    reset($databases);    $first_database = current($databases);    // table col order    $column_order = PMA_getColumnOrder();    $_url_params = array(        'pos' => $pos,        'dbstats' => $dbstats,        'sort_by' => $sort_by,        'sort_order' => $sort_order,    );    PMA_listNavigator($databases_count, $pos, $_url_params, 'server_databases.php', 'frame_content', $GLOBALS['cfg']['MaxDbList']);    $_url_params['pos'] = $pos;    echo '<form action="./server_databases.php" method="post" name="dbStatsForm" id="dbStatsForm">' . "\n"       . PMA_generate_common_hidden_inputs($_url_params);    $_url_params['sort_by'] = 'SCHEMA_NAME';    $_url_params['sort_order'] = ($sort_by == 'SCHEMA_NAME' && $sort_order == 'asc') ? 'desc' : 'asc';    echo '<table id="tabledatabases" class="data">' . "\n"       . '<thead>' . "\n"       . '<tr>' . "\n"       . ($is_superuser || $cfg['AllowUserDropDatabase'] ? '        <th></th>' . "\n" : '')       . '    <th><a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"       . '            ' . __('Database') . "\n"       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')       . '        </a></th>' . "\n";    $table_columns = 3;    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                $table_columns += 2;                $colspan = ' colspan="2"';            } else {                $table_columns++;                $colspan = '';            }            $_url_params['sort_by'] = $stat_name;            $_url_params['sort_order'] = ($sort_by == $stat_name && $sort_order == 'desc') ? 'asc' : 'desc';            echo '    <th' . $colspan . '>'                .'<a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"                .'            ' . $stat['disp_name'] . "\n"                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')                .'        </a></th>' . "\n";        }    }    foreach ($replication_types as $type) {      if ($type=="master")        $name = __('Master replication');      elseif ($type == "slave")        $name = __('Slave replication');      if (${"server_{$type}_status"})        echo '    <th>'. $name .'</th>' . "\n";    }    if ($is_superuser && !PMA_DRIZZLE) {        echo '    <th>' . ($cfg['PropertiesIconic'] ? '' : __('Action')) . "\n"           . '    </th>' . "\n";    }    echo '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    foreach ($databases as $current) {        $tr_class = $odd_row ? 'odd' : 'even';        if (PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $tr_class .= ' noclick';        }        echo '<tr class="' . $tr_class . '">' . "\n";        $odd_row = ! $odd_row;        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        echo $generated_html;        echo '</tr>' . "\n";    } // end foreach ($databases as $key => $current)    unset($current, $odd_row);    echo '<tr id="db_summary_row">' . "\n";    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        echo '    <th></th>' . "\n";    }    echo '    <th>' . __('Total') . ': <span id="databases_count">' . $databases_count . '</span></th>' . "\n";    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($stat['footer'], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($stat['footer'], 0);            } else {                $value = htmlentities($stat['footer'], 0);            }            echo '    <th class="value">';            if (isset($stat['description_function'])) {                echo '<dfn title="' . $stat['description_function']($stat['footer']) . '">';            }            echo $value;            if (isset($stat['description_function'])) {                echo '</dfn>';            }            echo '</th>' . "\n";            if ($stat['format'] === 'byte') {                echo '    <th class="unit">' . $unit . '</th>' . "\n";            }        }    }    foreach ($replication_types as $type) {        if (${"server_{$type}_status"}) {            echo '    <th></th>' . "\n";        }    }    if ($is_superuser) {        echo '    <th></th>' . "\n";    }    echo '</tr>' . "\n";    echo '</tbody>' . "\n"        .'</table>' . "\n";    unset($column_order, $stat_name, $stat, $databases, $table_columns);    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        $common_url_query = PMA_generate_common_url(array('sort_by' => $sort_by, 'sort_order' => $sort_order, 'dbstats' => $dbstats));        echo '<img class="selectallarrow" src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png" width="38" height="22" alt="' . __('With selected:') . '" />' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '&amp;checkall=1" onclick="if (markAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Check All') . '</a> / ' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '" onclick="if (unMarkAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Uncheck All') . '</a>' . "\n"           . '<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage('drop_selected_dbs', 'mult_submit', 'drop_selected_dbs', __('Drop'), 'b_deltbl.png');    }    if (empty($dbstats)) {        echo '<ul><li id="li_switch_dbstats"><strong>' . "\n";            echo '        <a href="./server_databases.php?' . $url_query . '&amp;dbstats=1"'                .' title="' . __('Enable Statistics') . '">' . "\n"                .'            ' . __('Enable Statistics');        echo '</a></strong><br />' . "\n";        PMA_Message::notice(__('Note: Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server.'))->display();        echo '</li>' . "\n" . '</ul>' . "\n";    }    echo '</form>';    echo '</div>';} else {    echo __('No databases');}unset($databases_count);/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_merge extends PMA_StorageEngine{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['data_dictionary_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'INDEXES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INDEX_PARTS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INNODB_LOCKS' => array(        'LOCK_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        )    ),    'INNODB_LOCK_WAITS' => array(        'REQUESTING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'REQUESTED_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        ),        'BLOCKING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'BLOCKING_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        )    ),    'INNODB_SYS_COLUMNS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_FIELDS' => array(        'INDEX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_INDEXES',            'foreign_field' => 'INDEX_ID'        )    ),    'INNODB_SYS_INDEXES' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_TABLESTATS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'PLUGINS' => array(        'MODULE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'MODULES',            'foreign_field' => 'MODULE_NAME'        )    ),    'SCHEMAS' => array(        'DEFAULT_COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_DEFINITION_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various validation functions * * Validation function takes two argument: id for which it is called * and array of fields' values (usually values for entire formset, as defined * in forms.inc.php). * The function must always return an array with an error (or error array) * assigned to a form element (formset name or field path). Even if there are * no errors, key must be set with an empty value. * * Valdiation functions are assigned in $cfg_db['_validators'] (config.values.php). * * @package PhpMyAdmin *//** * Returns validator list * * @return array */function PMA_config_get_validators(){    static $validators = null;    if ($validators === null) {        $cf = ConfigFile::getInstance();        $validators = $cf->getDbEntry('_validators', array());        if (!defined('PMA_SETUP')) {            // not in setup script: load additional validators for user preferences            // we need oryginal config values not overwritten by user preferences, creating a new PMA_Config            // instance is a better idea than hacking into its code            $org_cfg = $cf->getOrgConfigObj();            $uvs = $cf->getDbEntry('_userValidators', array());            foreach ($uvs as $field => $uv_list) {                $uv_list = (array)$uv_list;                foreach ($uv_list as &$uv) {                    if (!is_array($uv)) {                        continue;                    }                    for ($i = 1; $i < count($uv); $i++) {                        if (substr($uv[$i], 0, 6) == 'value:') {                            $uv[$i] = PMA_array_read(substr($uv[$i], 6), $org_cfg->settings);                        }                    }                }                $validators[$field] = isset($validators[$field])                    ? array_merge((array)$validators[$field], $uv_list)                    : $uv_list;            }        }    }    return $validators;}/** * Runs validation $validator_id on values $values and returns error list. * * Return values: * o array, keys - field path or formset id, values - array of errors *   when $isPostSource is true values is an empty array to allow for error list *   cleanup in HTML documen * o false - when no validators match name(s) given by $validator_id * * @param string|array  $validator_id * @param array         $values * @param bool          $isPostSource  tells whether $values are directly from POST request * @return bool|array */function PMA_config_validate($validator_id, &$values, $isPostSource){    // find validators    $validator_id = (array) $validator_id;    $validators = PMA_config_get_validators();    $vids = array();    $cf = ConfigFile::getInstance();    foreach ($validator_id as &$vid) {        $vid = $cf->getCanonicalPath($vid);        if (isset($validators[$vid])) {            $vids[] = $vid;        }    }    if (empty($vids)) {        return false;    }    // create argument list with canonical paths and remember path mapping    $arguments = array();    $key_map = array();    foreach ($values as $k => $v) {        $k2 = $isPostSource ? str_replace('-', '/', $k) : $k;        $k2 = strpos($k2, '/') ? $cf->getCanonicalPath($k2) : $k2;        $key_map[$k2] = $k;        $arguments[$k2] = $v;    }    // validate    $result = array();    foreach ($vids as $vid) {        // call appropriate validation functions        foreach ((array)$validators[$vid] as $validator) {            $vdef = (array) $validator;            $vname = array_shift($vdef);            $args = array_merge(array($vid, &$arguments), $vdef);            $r = call_user_func_array($vname, $args);            // merge results            if (is_array($r)) {                foreach ($r as $key => $error_list) {                    // skip empty values if $isPostSource is false                    if (!$isPostSource && empty($error_list)) {                        continue;                    }                    if (!isset($result[$key])) {                        $result[$key] = array();                    }                    $result[$key] = array_merge($result[$key], (array)$error_list);                }            }        }    }    // restore original paths    $new_result = array();    foreach ($result as $k => $v) {        $k2 = isset($key_map[$k]) ? $key_map[$k] : $k;        $new_result[$k2] = $v;    }    return empty($new_result) ? true : $new_result;}/** * Empty error handler, used to temporarily restore PHP internal error handler * * @return bool */function PMA_null_error_handler(){    return false;}/** * Ensures that $php_errormsg variable will be registered in case of an error * and enables output buffering (when $start = true). * Called with $start = false disables output buffering end restores * html_errors and track_errors. * * @param boolean $start */function test_php_errormsg($start = true){    static $old_html_errors, $old_track_errors, $old_error_reporting;    static $old_display_errors;    if ($start) {        $old_html_errors = ini_get('html_errors');        $old_track_errors = ini_get('track_errors');        $old_display_errors = ini_get('display_errors');        $old_error_reporting = error_reporting(E_ALL);        ini_set('html_errors', false);        ini_set('track_errors', true);        ini_set('display_errors', true);        set_error_handler("PMA_null_error_handler");        ob_start();    } else {        ob_end_clean();        restore_error_handler();        error_reporting($old_error_reporting);        ini_set('html_errors', $old_html_errors);        ini_set('track_errors', $old_track_errors);        ini_set('display_errors', $old_display_errors);    }}/** * Test database connection * * @param string $extension     'drizzle', 'mysql' or 'mysqli' * @param string $connect_type  'tcp' or 'socket' * @param string $host * @param string $port * @param string $socket * @param string $user * @param string $pass * @param string $error_key * @return bool|array */function test_db_connection($extension, $connect_type, $host, $port, $socket, $user, $pass = null, $error_key = 'Server'){    //    test_php_errormsg();    $socket = empty($socket) || $connect_type == 'tcp' ? null : $socket;    $port = empty($port) || $connect_type == 'socket' ? null : ':' . $port;    $error = null;    if ($extension == 'drizzle') {        while (1) {            $drizzle = @drizzle_create();            if (!$drizzle) {                $error = __('Could not initialize Drizzle connection library');                break;            }            $conn = $socket                ? @drizzle_con_add_uds($socket, $user, $pass, null, 0)                : @drizzle_con_add_tcp($drizzle, $host, $port, $user, $pass, null, 0);            if (!$conn) {                $error = __('Could not connect to Drizzle server');                drizzle_free($drizzle);                break;            }            // connection object is set up but we have to send some query to actually connect            $res = @drizzle_query($conn, 'SELECT 1');            if (!$res) {                $error = __('Could not connect to Drizzle server');            } else {                drizzle_result_free($res);            }            drizzle_con_free($conn);            drizzle_free($drizzle);            break;        }    } else if ($extension == 'mysql') {        $conn = @mysql_connect($host . $socket . $port, $user, $pass);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysql_close($conn);        }    } else {        $conn = @mysqli_connect($host, $user, $pass, null, $port, $socket);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysqli_close($conn);        }    }    //    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error .= " - $php_errormsg";    }    return is_null($error) ? true : array($error_key => $error);}/** * Validate server config * * @param string $path * @param array  $values * @return array */function validate_server($path, $values){    $result = array('Server' => '', 'Servers/1/user' => '', 'Servers/1/SignonSession' => '', 'Servers/1/SignonURL' => '');    $error = false;    if ($values['Servers/1/auth_type'] == 'config' && empty($values['Servers/1/user'])) {        $result['Servers/1/user'] = __('Empty username while using config authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonSession'])) {        $result['Servers/1/SignonSession'] = __('Empty signon session name while using signon authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonURL'])) {        $result['Servers/1/SignonURL'] = __('Empty signon URL while using signon authentication method');        $error = true;    }    if (!$error && $values['Servers/1/auth_type'] == 'config') {        $password = $values['Servers/1/nopassword'] ? null : $values['Servers/1/password'];        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'], $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'], $values['Servers/1/user'], $password, 'Server');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validate pmadb config * * @param string $path * @param array  $values * @return array */function validate_pmadb($path, $values){    //$tables = array('Servers/1/bookmarktable', 'Servers/1/relation', 'Servers/1/table_info', 'Servers/1/table_coords', 'Servers/1/pdf_pages', 'Servers/1/column_info', 'Servers/1/history', 'Servers/1/designer_coords');    $result = array('Server_pmadb' => '', 'Servers/1/controluser' => '', 'Servers/1/controlpass' => '');    $error = false;    if ($values['Servers/1/pmadb'] == '') {        return $result;    }    $result = array();    if ($values['Servers/1/controluser'] == '') {        $result['Servers/1/controluser'] = __('Empty phpMyAdmin control user while using pmadb');        $error = true;    }    if ($values['Servers/1/controlpass'] == '') {        $result['Servers/1/controlpass'] = __('Empty phpMyAdmin control user password while using pmadb');        $error = true;    }    if (!$error) {        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'],            $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'],            $values['Servers/1/controluser'], $values['Servers/1/controlpass'], 'Server_pmadb');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validates regular expression * * @param string $path * @param array  $values * @return array */function validate_regex($path, $values){    $result = array($path => '');    if ($values[$path] == '') {        return $result;    }    test_php_errormsg();    $matches = array();    // in libraries/List_Database.class.php _checkHideDatabase(),    // a '/' is used as the delimiter for hide_db    preg_match('/' . $values[$path] . '/', '', $matches);    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error = preg_replace('/^preg_match\(\): /', '', $php_errormsg);        return array($path => $error);    }    return $result;}/** * Validates TrustedProxies field * * @param string $path * @param array  $values * @return array */function validate_trusted_proxies($path, $values){    $result = array($path => array());    if (empty($values[$path])) {        return $result;    }    if (is_array($values[$path])) {        // value already processed by FormDisplay::save        $lines = array();        foreach ($values[$path] as $ip => $v) {            $lines[] = preg_match('/^-\d+$/', $ip)                ? $v                : $ip . ': ' . $v;        }    } else {        // AJAX validation        $lines = explode("\n", $values[$path]);    }    foreach ($lines as $line) {        $line = trim($line);        $matches = array();        // we catch anything that may (or may not) be an IP        if (!preg_match("/^(.+):(?:[ ]?)\\w+$/", $line, $matches)) {            $result[$path][] = __('Incorrect value') . ': ' . $line;            continue;        }        // now let's check whether we really have an IP address        if (filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === false            && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {            $ip = htmlspecialchars(trim($matches[1]));            $result[$path][] = sprintf(__('Incorrect IP address: %s'), $ip);            continue;        }    }    return $result;}/** * Tests integer value * * @param string $path * @param array  $values * @param bool   $allow_neg       allow negative values * @param bool   $allow_zero      allow zero * @param int    $max_value       max allowed value * @param string $error_string    error message key: $GLOBALS["strConfig$error_lang_key"] * @return string  empty string if test is successful */function test_number($path, $values, $allow_neg, $allow_zero, $max_value, $error_string){    if ($values[$path] === '') {        return '';    }    if (intval($values[$path]) != $values[$path] || (!$allow_neg && $values[$path] < 0) || (!$allow_zero && $values[$path] == 0) || $values[$path] > $max_value) {        return $error_string;    }    return '';}/** * Validates port number * * @param string $path * @param array  $values * @return array */function validate_port_number($path, $values){    return array($path => test_number($path, $values, false, false, 65535, __('Not a valid port number')));}/** * Validates positive number * * @param string $path * @param array  $values * @return array */function validate_positive_number($path, $values){    return array($path => test_number($path, $values, false, false, PHP_INT_MAX, __('Not a positive number')));}/** * Validates non-negative number * * @param string $path * @param array  $values * @return array */function validate_non_negative_number($path, $values){    return array($path => test_number($path, $values, false, true, PHP_INT_MAX, __('Not a non-negative number')));}/** * Validates value according to given regular expression * Pattern and modifiers must be a valid for PCRE <b>and</b> JavaScript RegExp * * @param string $path * @param array  $values * @param string $regex * @return void */function validate_by_regex($path, $values, $regex){    $result = preg_match($regex, $values[$path]);    return array($path => ($result ? '' : __('Incorrect value')));}/** * Validates upper bound for numeric inputs * * @param string $path * @param array  $values * @param int    $max_value * @return array */function validate_upper_bound($path, $values, $max_value){    $result = $values[$path] <= $max_value;    return array($path => ($result ? '' : sprintf(__('Value must be equal or lower than %s'), $max_value)));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as PHP Arrays * * @package PhpMyAdmin-Export * @subpackage PHP */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['php_array'] = array(        'text'          => __('PHP array'),        'extension'     => 'php',        'mime_type'     => 'text/plain',        'options'       => array(        array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),        array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(              '<?php' . $GLOBALS['crlf']            . '/**' . $GLOBALS['crlf']            . ' * Export to PHP Array plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' * @version 0.2b' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('//' . $GLOBALS['crlf'] . '// Database ' . PMA_backquote($db) . $GLOBALS['crlf'] . '//' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table as a fragment of PHP code     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        // fix variable names (based on http://www.php.net/manual/language.variables.basics.php)        if (preg_match('/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/', $table) == false) {            // fix invalid chars in variable names by replacing them with underscores            $tablefixed = preg_replace('/[^a-zA-Z0-9_\x7f-\xff]/', '_', $table);            // variable name must not start with a number or dash...            if (preg_match('/^[a-zA-Z_\x7f-\xff]/', $tablefixed) == false) {                $tablefixed = '_' . $tablefixed;            }        } else {            $tablefixed = $table;        }        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= $crlf . '// ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                $buffer .= '$' . $tablefixed . ' = array(' . $crlf;                $buffer .= '  array(';            } else {                $buffer .= ',' . $crlf . '  array(';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= var_export($columns[$i], true) . " => " . var_export($record[$i], true) . (($i + 1 >= $columns_cnt) ? '' : ',');            }            $buffer .= ')';        }        $buffer .= $crlf . ');' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Run common work */require_once './libraries/common.inc.php';//Get some js files needed for Ajax requests$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';/** * If we are not in an Ajax request, then do the common work and show the links etc. */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_common.inc.php';}$url_query .= '&amp;goto=tbl_tracking.php&amp;back=db_tracking.php';// Get the database structure$sub_part = '_structure';require './libraries/db_info.inc.php';// Work to do?//  (here, do not use $_REQUEST['db] as it can be crafted)if (isset($_REQUEST['delete_tracking']) && isset($_REQUEST['table'])) {    PMA_Tracker::deleteTracking($GLOBALS['db'], $_REQUEST['table']);    /**     * If in an Ajax request, generate the success message and use     * {@link PMA_ajaxResponse()} to send the output     */    if ($GLOBALS['is_ajax_request'] == true) {        $message = PMA_Message::success();        PMA_ajaxResponse($message, true);    }}// Get tracked data about the database$data = PMA_Tracker::getTrackedData($_REQUEST['db'], '', '1');// No tables present and no log existif ($num_tables == 0 && count($data['ddlog']) == 0) {    echo '<p>' . __('No tables found in database.') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    }    // Display the footer    include './libraries/footer.inc.php';    exit;}// ---------------------------------------------------------------------------/* * Display top menu links */require_once './libraries/db_links.inc.php';// Prepare statement to get HEAD version$all_tables_query = ' SELECT table_name, MAX(version) as version FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE db_name = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' ' .             ' GROUP BY table_name' .             ' ORDER BY table_name ASC';$all_tables_result = PMA_query_as_controluser($all_tables_query);// If a HEAD version existsif (PMA_DBI_num_rows($all_tables_result) > 0) {?>    <div id="tracked_tables">    <h3><?php echo __('Tracked tables');?></h3>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Last version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Action');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    // Print out information about versions    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data for this table'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Drop');    }    $style = 'odd';    while ($one_result = PMA_DBI_fetch_array($all_tables_result)) {        list($table_name, $version_number) = $one_result;        $table_query = ' SELECT * FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE `db_name` = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' AND `table_name`  = \'' . PMA_sqlAddSlashes($table_name) . '\' AND `version` = \'' . $version_number . '\'';        $table_result = PMA_query_as_controluser($table_query);        $version_data = PMA_DBI_fetch_array($table_result);        if ($version_data['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        $tmp_link = 'tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']);        $delete_link = 'db_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']) . '&amp;delete_tracking=true&amp';        ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version_data['db_name']);?></td>            <td><?php echo htmlspecialchars($version_data['table_name']);?></td>            <td><?php echo $version_data['version'];?></td>            <td><?php echo $version_data['date_created'];?></td>            <td><?php echo $version_data['date_updated'];?></td>            <td><?php echo $version_status;?></td>            <td><a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_tracking_anchor"' : ''); ?> href="<?php echo $delete_link;?>" ><?php echo $drop_image_or_text; ?></a></td>            <td> <a href="<?php echo $tmp_link; ?>"><?php echo __('Versions');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;report=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Tracking report');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;snapshot=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Structure snapshot');?></a></td>        </tr>        <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    unset($tmp_link);    ?>    </tbody>    </table>    </div><?php}$sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];// Get list of tables$table_list = PMA_getTableList($GLOBALS['db']);// For each table try to get the tracking versionforeach ($table_list as $key => $value) {    // If $value is a table group.    if (array_key_exists(('is' . $sep . 'group'), $value) && $value['is' . $sep . 'group']) {        foreach ($value as $temp_table) {            // If $temp_table is a table with the value for 'Name' is set,            // rather than a propery of the table group.            if (is_array($temp_table) && array_key_exists('Name', $temp_table)) {                if (PMA_Tracker::getVersion($GLOBALS['db'], $temp_table['Name']) == -1) {                    $my_tables[] = $temp_table['Name'];                }            }        }    // If $value is a table.    } else {        if (PMA_Tracker::getVersion($GLOBALS['db'], $value['Name']) == -1) {            $my_tables[] = $value['Name'];        }    }}// If untracked tables existif (isset($my_tables)) {?>    <h3><?php echo __('Untracked tables');?></h3>    <table id="noversions" class="data">    <thead>    <tr>        <th width="300"><?php echo __('Table');?></th>        <th></th>    </tr>    </thead>    <tbody><?php    // Print out list of untracked tables    $style = 'odd';    foreach ($my_tables as $key => $tablename) {        if (PMA_Tracker::getVersion($GLOBALS['db'], $tablename) == -1) {            $my_link = '<a href="tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($tablename) .'">';            $my_link .= PMA_getIcon('eye.png', __('Track table')) . '</a>';        ?>            <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($tablename);?></td>            <td><?php echo $my_link;?></td>            </tr>        <?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }    }    ?>    </tbody>    </table><?php}// If available print out database logif (count($data['ddlog']) > 0) {    $log = '';    foreach ($data['ddlog'] as $entry) {        $log .= '# ' . $entry['date'] . ' ' . $entry['username'] . "\n" . $entry['statement'] . "\n";    }    PMA_showMessage(__('Database Log'), $log);}/** * Display the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Javascript escaping functions. * * @package PhpMyAdmin * *//** * Format a string so it can be a string inside JavaScript code inside an * eventhandler (onclick, onchange, on..., ). * This function is used to displays a javascript confirmation box for * "DROP/DELETE/ALTER" queries. * * @param string   $a_string          the string to format * @param boolean  $add_backquotes    whether to add backquotes to the string or not * * @return  string   the formatted string * * @access  public */function PMA_jsFormat($a_string = '', $add_backquotes = true){    if (is_string($a_string)) {        $a_string = htmlspecialchars($a_string);        $a_string = PMA_escapeJsString($a_string);        // Needed for inline javascript to prevent some browsers        // treating it as a anchor        $a_string = str_replace('#', '\\#', $a_string);    }    return (($add_backquotes) ? PMA_backquote($a_string) : $a_string);} // end of the 'PMA_jsFormat()' function/** * escapes a string to be inserted as string a JavaScript block * enclosed by <![CDATA[ ... ]]> * this requires only to escape ' with \' and end of script block * * We also remove NUL byte as some browsers (namely MSIE) ignore it and * inserting it anywhere inside </script would allow to bypass this check. * * @param string  $string the string to be escaped * @return  string  the escaped string */function PMA_escapeJsString($string){    return preg_replace('@</script@i', '</\' + \'script',                        strtr($string, array(                                "\000" => '',                                '\\' => '\\\\',                                '\'' => '\\\'',                                '"' => '\"',                                "\n" => '\n',                                "\r" => '\r')));}/** * Formats a value for javascript code. * * @param string $value String to be formatted. * * @retrun string formatted value. */function PMA_formatJsVal($value){    if (is_bool($value)) {        if ($value) {            return 'true';        } else {            return 'false';        }    } elseif (is_int($value)) {        return (int)$value;    } else {        return '"' . PMA_escapeJsString($value) . '"';    }}/** * Formats an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * * @return string Javascript code. */function PMA_getJsValue($key, $value, $escape = true){    $result = $key . ' = ';    if (!$escape) {        $result .= $value;    } elseif (is_array($value)) {        $result .= '[';        foreach ($value as $id => $val) {            $result .= PMA_formatJsVal($val) . ",";        }        $result .= "];\n";    } else {        $result .= PMA_formatJsVal($value) . ";\n";    }    return $result;}/** * Prints an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key Name of value to set * @param mixed $value Value to set, can be either string or array of strings * * @return nothing */function PMA_printJsValue($key, $value){    echo PMA_getJsValue($key, $value);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Validation callback. * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';$validators = array();require './libraries/config/validate.lib.php';header('Content-type: application/json');$vids = explode(',', filter_input(INPUT_POST, 'id'));$values = json_decode(filter_input(INPUT_POST, 'values'));if (!($values instanceof stdClass)) {    die(__('Wrong data'));}$values = (array)$values;$result = PMA_config_validate($vids, $values, true);if ($result === false) {    $result = 'Wrong data or no validation for ' . $vids;}echo $result !== true ? json_encode($result) : '';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple interface for creating OASIS OpenDocument files. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load ZIP handler. */require_once './libraries/zip.lib.php';$GLOBALS['OpenDocumentNS'] = 'xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" '                . 'xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" '                . 'xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" '                . 'xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" '                . 'xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" ';/** * Minimalistic creator of OASIS OpenDocument * * @param string      desired MIME type * @param string      document content * * @return  string      OASIS OpenDocument data * * @access  public */function PMA_createOpenDocument($mime, $data){    $zipfile = new zipfile();    $zipfile -> addFile($mime, 'mimetype');    $zipfile -> addFile($data, 'content.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?'. '>'        . '<office:document-meta '            . 'xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" '            . 'xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" '            . 'office:version="1.0">'            . '<office:meta>'                . '<meta:generator>phpMyAdmin ' . PMA_VERSION . '</meta:generator>'                . '<meta:initial-creator>phpMyAdmin ' . PMA_VERSION . '</meta:initial-creator>'                . '<meta:creation-date>' . strftime('%Y-%m-%dT%H:%M:%S') . '</meta:creation-date>'            . '</office:meta>'        . '</office:document-meta>',        'meta.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?' . '>'        . '<office:document-styles '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:font-face-decls>'                . '<style:font-face style:name="Arial Unicode MS" svg:font-family="\'Arial Unicode MS\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Sans1" svg:font-family="\'DejaVu Sans\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="HG Mincho Light J" svg:font-family="\'HG Mincho Light J\'" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Serif" svg:font-family="\'DejaVu Serif\'" style:font-family-generic="roman" style:font-pitch="variable"/>'                . '<style:font-face style:name="Thorndale" svg:font-family="Thorndale" style:font-family-generic="roman" style:font-pitch="variable"/>'                . '<style:font-face style:name="DejaVu Sans" svg:font-family="\'DejaVu Sans\'" style:font-family-generic="swiss" style:font-pitch="variable"/>'            . '</office:font-face-decls>'            . '<office:styles>'                . '<style:default-style style:family="paragraph">'                    . '<style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>'                    . '<style:text-properties style:use-window-font-color="true" style:font-name="DejaVu Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:font-name-asian="DejaVu Sans1" style:font-size-asian="12pt" style:language-asian="none" style:country-asian="none" style:font-name-complex="DejaVu Sans1" style:font-size-complex="12pt" style:language-complex="none" style:country-complex="none" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>'                . '</style:default-style>'                . '<style:style style:name="Standard" style:family="paragraph" style:class="text"/>'                . '<style:style style:name="Text_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">'                    . '<style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0835in"/>'                . '</style:style>'                . '<style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_body" style:class="text">'                    . '<style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" fo:keep-with-next="always"/>'                    . '<style:text-properties style:font-name="DejaVu Sans" fo:font-size="14pt" style:font-name-asian="DejaVu Sans1" style:font-size-asian="14pt" style:font-name-complex="DejaVu Sans1" style:font-size-complex="14pt"/>'                    . '</style:style>'                . '<style:style style:name="Heading_1" style:display-name="Heading 1" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_body" style:class="text" style:default-outline-level="1">'                    . '<style:text-properties style:font-name="Thorndale" fo:font-size="24pt" fo:font-weight="bold" style:font-name-asian="HG Mincho Light J" style:font-size-asian="24pt" style:font-weight-asian="bold" style:font-name-complex="Arial Unicode MS" style:font-size-complex="24pt" style:font-weight-complex="bold"/>'                . '</style:style>'                . '<style:style style:name="Heading_2" style:display-name="Heading 2" style:family="paragraph" style:parent-style-name="Heading" style:next-style-name="Text_body" style:class="text" style:default-outline-level="2">'                    . '<style:text-properties style:font-name="DejaVu Serif" fo:font-size="18pt" fo:font-weight="bold" style:font-name-asian="DejaVu Sans1" style:font-size-asian="18pt" style:font-weight-asian="bold" style:font-name-complex="DejaVu Sans1" style:font-size-complex="18pt" style:font-weight-complex="bold"/>'                . '</style:style>'            . '</office:styles>'            . '<office:automatic-styles>'                . '<style:page-layout style:name="pm1">'                    . '<style:page-layout-properties fo:page-width="8.2673in" fo:page-height="11.6925in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="1in" fo:margin-bottom="1in" fo:margin-left="1.25in" fo:margin-right="1.25in" style:writing-mode="lr-tb" style:footnote-max-height="0in">'                        . '<style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>'                    . '</style:page-layout-properties>'                    . '<style:header-style/>'                    . '<style:footer-style/>'                . '</style:page-layout>'            . '</office:automatic-styles>'            . '<office:master-styles>'                . '<style:master-page style:name="Standard" style:page-layout-name="pm1"/>'            . '</office:master-styles>'        . '</office:document-styles>',        'styles.xml');    $zipfile -> addFile('<?xml version="1.0" encoding="UTF-8"?' . '>'        . '<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0">'        . '<manifest:file-entry manifest:media-type="' . $mime . '" manifest:full-path="/"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="content.xml"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="meta.xml"/>'        . '<manifest:file-entry manifest:media-type="text/xml" manifest:full-path="styles.xml"/>'        . '</manifest:manifest>',        'META-INF/manifest.xml');    return $zipfile -> file();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating a table (if user has privileges for that) * * for MySQL >= 4.1.0, we should be able to detect if user has a CREATE * privilege by looking at SHOW GRANTS output; * for < 4.1.0, it could be more difficult because the logic tries to * detect the current host and it might be expressed in many ways; also * on a shared server, the user might be unable to define a controluser * that has the proper rights to the "mysql" db; * so we give up and assume that user has the right to create a table * * Note: in this case we could even skip the following "foreach" logic * * Addendum, 2006-01-19: ok, I give up. We got some reports about servers * where the hostname field in mysql.user is not the same as the one * in mysql.db for a user. In this case, SHOW GRANTS does not return * the db-specific privileges. And probably, those users are on a shared * server, so can't set up a control user with rights to the "mysql" db. * We cannot reliably detect the db-specific privileges, so no more * warnings about the lack of privileges for CREATE TABLE. Tested * on MySQL 5.0.18. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';$is_create_table_priv = true;?>    <form id="create_table_form_minimal" method="post" action="tbl_create.php"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><fieldset>    <legend><?phpif ($GLOBALS['cfg']['PropertiesIconic']) {    echo PMA_getImage('b_newtbl.png');}echo __('Create table');?>    </legend>    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <div class="formelement">        <?php echo __('Name'); ?>:        <input type="text" name="table" maxlength="64" size="30" />    </div>    <div class="formelement">        <?php echo __('Number of columns'); ?>:        <input type="text" name="num_fields" size="2" />    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" value="<?php echo __('Go'); ?>" /></fieldset></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for the table-search page and zoom-search page * * @package PhpMyAdmin */require_once 'url_generating.lib.php';/** * Gets all the fields of a table along with their types, collations * and whether null or not. * * @param string $db    Selected database * @param string $table Selected table * * @return array Array containing the field list, field types, collations * and null constraint */function PMA_tbl_getFields($db, $table){    // Gets the list and number of fields    $fields = PMA_DBI_get_columns($db, $table, null, true);    $fields_list = $fields_null = $fields_type = $fields_collation = array();    $geom_column_present = false;    $geom_types = PMA_getGISDatatypes();    foreach ($fields as $key => $row) {        $fields_list[] = $row['Field'];        $type          = $row['Type'];        // check whether table contains geometric columns        if (in_array($type, $geom_types)) {            $geom_column_present = true;        }        // reformat mysql query output        if (strncasecmp($type, 'set', 3) == 0            || strncasecmp($type, 'enum', 4) == 0        ) {            $type = str_replace(',', ', ', $type);        } else {            // strip the "BINARY" attribute, except if we find "BINARY(" because            // this would be a BINARY or VARBINARY field type            if (!preg_match('@BINARY[\(]@i', $type)) {                $type = preg_replace('@BINARY@i', '', $type);            }            $type = preg_replace('@ZEROFILL@i', '', $type);            $type = preg_replace('@UNSIGNED@i', '', $type);            $type = strtolower($type);        }        if (empty($type)) {            $type = '&nbsp;';        }        $fields_null[] = $row['Null'];        $fields_type[] = $type;        $fields_collation[] = ! empty($row['Collation']) && $row['Collation'] != 'NULL'            ? $row['Collation']            : '';    } // end while    return array($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present);}/** * Sets the table header for displaying a table in query-by-example format. * * @param bool $geom_column_present whether a geometry column is present * * @return HTML content, the tags and content for table header */function PMA_tbl_setTableHeader($geom_column_present = false){    // Display the Function column only if there is alteast one geomety colum    $func = '';    if ($geom_column_present) {        $func = '<th>' . __('Function') . '</th>';    }    return '<thead>        <tr>' . $func . '<th>' .  __('Column') . '</th>        <th>' .  __('Type') . '</th>        <th>' .  __('Collation') . '</th>        <th>' .  __('Operator') . '</th>        <th>' .  __('Value') . '</th>        </tr>        </thead>';}/** * Returns an array with necessary configrations to create * sub-tabs(Table Search and Zoom Search) in the table_select page. * * @return array Array containing configuration (icon, text, link, id, args) * of sub-tabs for Table Search and Zoom search */function PMA_tbl_getSubTabs(){    $subtabs = array();    $subtabs['search']['icon'] = 'b_search.png';    $subtabs['search']['text'] = __('Table Search');    $subtabs['search']['link'] = 'tbl_select.php';    $subtabs['search']['id'] = 'tbl_search_id';    $subtabs['search']['args']['pos'] = 0;    $subtabs['zoom']['icon'] = 'b_props.png';    $subtabs['zoom']['link'] = 'tbl_zoom_select.php';    $subtabs['zoom']['text'] = __('Zoom Search');    $subtabs['zoom']['id'] = 'zoom_search_id';    return $subtabs;}/** * Creates the HTML content for: * 1) Browsing foreign data for a field. * 2) Creating elements for search criteria input on fields. * * @param array  $foreigners      Array of foreign keys * @param array  $foreignData     Foreign keys data * @param string $field           Column name * @param string $tbl_fields_type Column type * @param int    $i               Column index * @param string $db              Selected database * @param string $table           Selected table * @param array  $titles          Selected title * @param int    $foreignMaxLimit Max limit of displaying foreign elements * @param array  $fields          Array of search criteria inputs * @param bool   $in_fbs          Whether we are in 'function based search' * @param bool   $in_zoom_search_edit  Whether we are in zoom search edit  * * @return string HTML content for viewing foreing data and elements * for search criteria input. */function PMA_getForeignFields_Values($foreigners, $foreignData, $field, $tbl_fields_type, $i, $db, $table, $titles, $foreignMaxLimit, $fields, $in_fbs = false, $in_zoom_search_edit = false){    $str = '';    if ($foreigners && isset($foreigners[$field]) && is_array($foreignData['disp_row'])) {        // f o r e i g n    k e y s        $str .=  '<select name="fields[' . $i . ']" id="fieldID_' . $i .'">' . "\n";        // go back to first row        // here, the 4th parameter is empty because there is no current        // value of data for the dropdown (the search page initial values        // are displayed empty)        $str .= PMA_foreignDropdown(            $foreignData['disp_row'], $foreignData['foreign_field'],            $foreignData['foreign_display'], '', $foreignMaxLimit        );        $str .= '</select>' . "\n";    } elseif ($foreignData['foreign_link'] == true) {        if (isset($fields[$i]) && is_string($fields[$i])) {            $str .= '<input type="text" id="fieldID_' . $i . '" name="fields[' . $i . ']" value="' . $fields[$i] . '" id="field_' . md5($field) . '[' . $i .']" class="textfield" />' ;        } else {            $str .= '<input type="text" id="fieldID_' . $i . '" name="fields[' . $i . ']" id="field_' . md5($field) . '[' . $i .']" class="textfield" />' ;        }        $str .=  <<<EOT<a target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes'); return false" href="browse_foreigners.php?EOT;        $str .= '' . PMA_generate_common_url($db, $table) .  '&amp;field=' . urlencode($field) . '&amp;fieldkey=' . $i . '"';        if ($in_zoom_search_edit) {            $str .= ' class="browse_foreign"';        }        $str .= '>' . str_replace("'", "\'", $titles['Browse']) . '</a>';    } elseif (in_array($tbl_fields_type[$i], PMA_getGISDatatypes())) {        // g e o m e t r y        $str .= '<input type="text" name="fields[' . $i . ']"'        .' size="40" class="textfield" id="field_' . $i . '" />' .  "\n";        if ($in_fbs) {            $edit_url = 'gis_data_editor.php?' . PMA_generate_common_url();            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            $str .= '<span class="open_search_gis_editor">';            $str .= PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank');            $str .= '</span>';        }    } elseif (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0        || (strncasecmp($tbl_fields_type[$i], 'set', 3) == 0 && $in_zoom_search_edit)    ) {        // e n u m s   a n d   s e t s        // Enum in edit mode   --> dropdown        // Enum in search mode --> multiselect        // Set in edit mode    --> multiselect        // Set in search mode  --> input (skipped here, so the 'else'        //                                 section would handle it)        $value = explode(', ', str_replace("'", '', substr($tbl_fields_type[$i], 5, -1)));        $cnt_value = count($value);        if ((strncasecmp($tbl_fields_type[$i], 'enum', 4) && ! $in_zoom_search_edit)            || (strncasecmp($tbl_fields_type[$i], 'set', 3) && $in_zoom_search_edit)        ) {            $str .= '<select name="fields[' . ($i) . '][]" id="fieldID_' . $i .'">' . "\n";        } else {            $str .= '<select name="fields[' . ($i) . '][]" id="fieldID_' . $i .'"'                . ' multiple="multiple" size="' . min(3, $cnt_value) . '">' . "\n";        }        for ($j = 0; $j < $cnt_value; $j++) {            if (isset($fields[$i])                && is_array($fields[$i])                && in_array($value[$j], $fields[$i])            ) {                $str .= '<option value="' . $value[$j] . '" Selected>'                    . $value[$j] . '</option>';            } else {                $str .= '<option value="' . $value[$j] . '">'                    . $value[$j] . '</option>';            }        } // end for        $str .= '</select>' . "\n";    } else {        // o t h e r   c a s e s        $the_class = 'textfield';        $type = $tbl_fields_type[$i];        if ($type == 'date') {            $the_class .= ' datefield';        } elseif ($type == 'datetime' || substr($type, 0, 9) == 'timestamp') {            $the_class .= ' datetimefield';        } elseif (substr($type, 0, 3) == 'bit') {            $the_class .= ' bit';        }        if (isset($fields[$i]) && is_string($fields[$i])) {            $str .= '<input type="text" name="fields[' . $i . ']"'                .' size="40" class="' . $the_class . '" id="fieldID_'                . $i .'" value = "' . $fields[$i] . '"/>' .  "\n";        } else {            $str .= '<input type="text" name="fields[' . $i . ']"'                .' size="40" class="' . $the_class . '" id="fieldID_'                . $i .'" />' .  "\n";        }    }    return $str;}/** * Return the where clause for query generation based on the inputs provided. * * @param mixed  $fields     Search criteria input * @param string $names      Name of the column on which search is submitted * @param string $types      Type of the field * @param string $collations Field collation * @param string $func_type  Search fucntion/operator * @param bool   $unaryFlag  Whether operator unary or not * @param bool   $geom_func  Whether geometry functions should be applied * * @return string HTML content for viewing foreing data and elements * for search criteria input. */function PMA_tbl_search_getWhereClause($fields, $names, $types, $collations, $func_type, $unaryFlag, $geom_func = null){    /**     * @todo move this to a more apropriate place     */    $geom_unary_functions = array(        'IsEmpty' => 1,        'IsSimple' => 1,        'IsRing' => 1,        'IsClosed' => 1,    );    $w = '';    // If geometry function is set apply it to the field name    if ($geom_func != null && trim($geom_func) != '') {        // Get details about the geometry fucntions        $geom_funcs = PMA_getGISFunctions($types, true, false);        // If the function takes a single parameter        if ($geom_funcs[$geom_func]['params'] == 1) {            $backquoted_name = $geom_func . '(' . PMA_backquote($names) . ')';        } else {            // If the function takes two parameters            // create gis data from the string            $gis_data = PMA_createGISData($fields);            $w = $geom_func . '(' . PMA_backquote($names) . ',' . $gis_data . ')';            return $w;        }        // New output type is the output type of the function being applied        $types = $geom_funcs[$geom_func]['type'];        // If the where clause is something like 'IsEmpty(`spatial_col_name`)'        if (isset($geom_unary_functions[$geom_func]) && trim($fields) == '') {            $w = $backquoted_name;            return $w;        }    } else {        $backquoted_name = PMA_backquote($names);    }    if ($unaryFlag) {        $fields = '';        $w = $backquoted_name . ' ' . $func_type;    } elseif (in_array($types, PMA_getGISDatatypes()) && ! empty($fields)) {        // create gis data from the string        $gis_data = PMA_createGISData($fields);        $w = $backquoted_name . ' ' . $func_type . ' ' . $gis_data;    } elseif (strncasecmp($types, 'enum', 4) == 0) {        if (!empty($fields)) {            if (! is_array($fields)) {                $fields = explode(',', $fields);            }            $enum_selected_count = count($fields);            if ($func_type == '=' && $enum_selected_count > 1) {                $func_type    = 'IN';                $parens_open  = '(';                $parens_close = ')';            } elseif ($func_type == '!=' && $enum_selected_count > 1) {                $func_type    = 'NOT IN';                $parens_open  = '(';                $parens_close = ')';            } else {                $parens_open  = '';                $parens_close = '';            }            $enum_where = '\'' . PMA_sqlAddslashes($fields[0]) . '\'';            for ($e = 1; $e < $enum_selected_count; $e++) {                $enum_where .= ', \'' . PMA_sqlAddslashes($fields[$e]) . '\'';            }            $w = $backquoted_name . ' ' . $func_type . ' ' . $parens_open . $enum_where . $parens_close;        }    } elseif ($fields != '') {        // For these types we quote the value. Even if it's another type (like INT),        // for a LIKE we always quote the value. MySQL converts strings to numbers        // and numbers to strings as necessary during the comparison        if (preg_match('@char|binary|blob|text|set|date|time|year@i', $types)            || strpos(' ' . $func_type, 'LIKE')        ) {            $quot = '\'';        } else {            $quot = '';        }        // LIKE %...%        if ($func_type == 'LIKE %...%') {            $func_type = 'LIKE';            $fields = '%' . $fields . '%';        }        if ($func_type == 'REGEXP ^...$') {            $func_type = 'REGEXP';            $fields = '^' . $fields . '$';        }        if ($func_type == 'IN (...)'            || $func_type == 'NOT IN (...)'            || $func_type == 'BETWEEN'            || $func_type == 'NOT BETWEEN'        ) {            $func_type = str_replace(' (...)', '', $func_type);            // quote values one by one            $values = explode(',', $fields);            foreach ($values as &$value) {                $value = $quot . PMA_sqlAddslashes(trim($value)) . $quot;            }            if ($func_type == 'BETWEEN' || $func_type == 'NOT BETWEEN') {                $w = $backquoted_name . ' ' . $func_type . ' ' . (isset($values[0]) ? $values[0] : '')                    . ' AND ' . (isset($values[1]) ? $values[1] : '');            } else {                $w = $backquoted_name . ' ' . $func_type . ' (' . implode(',', $values) . ')';            }        } else {            $w = $backquoted_name . ' ' . $func_type . ' ' . $quot . PMA_sqlAddslashes($fields) . $quot;;        }    } // end if    return $w;}/** * Formats a SVG plot for the query results. * * @param array $data      Data for the status chart * @param array &$settings Settings used to generate the chart * * @return string HTML and JS code for the SVG plot */function PMA_SVG_scatter_plot($data, &$settings){    include_once './libraries/svg_plot/pma_scatter_plot.php';    if (empty($data)) {        // empty data        return '';    } else {        $scatter_plot = new PMA_Scatter_Plot($data, $settings);        if ($settings != null) {            foreach ($scatter_plot->getSettings() as $setting => $val) {                if (! isset($settings[$setting])) {                    $settings[$setting] = $val;                }            }        }        return $scatter_plot->asSVG();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This function is used to retreive some language strings that are used * in functionalities that are common to routines, triggers and events. * * @param   string  $index   The index of the string to get * * @return  string  The requested string or an empty string, if not available */function PMA_RTE_getWord($index){    global $_PMA_RTE;    switch ($_PMA_RTE) {    case 'RTN':        $words = array(            'add'       => __('Add routine'),            'docu'      => 'STORED_ROUTINES',            'export'    => __('Export of routine %s'),            'human'     => __('routine'),            'no_create' => __('You do not have the necessary privileges to create a routine'),            'not_found' => __('No routine with name %1$s found in database %2$s'),            'nothing'   => __('There are no routines to display.'),            'title'     => __('Routines'),        );        break;    case 'TRI':        $words = array(            'add'       => __('Add trigger'),            'docu'      => 'TRIGGERS',            'export'    => __('Export of trigger %s'),            'human'     => __('trigger'),            'no_create' => __('You do not have the necessary privileges to create a trigger'),            'not_found' => __('No trigger with name %1$s found in database %2$s'),            'nothing'   => __('There are no triggers to display.'),            'title'     => __('Triggers'),        );        break;    case 'EVN':        $words = array(            'add'       => __('Add event'),            'docu'      => 'EVENTS',            'export'    => __('Export of event %s'),            'human'     => __('event'),            'no_create' => __('You do not have the necessary privileges to create an event'),            'not_found' => __('No event with name %1$s found in database %2$s'),            'nothing'   => __('There are no events to display.'),            'title'     => __('Events'),        );        break;    default:        $words = array();        break;    }    return isset($words[$index]) ? $words[$index] : '';} // end PMA_RTE_getWord()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/innodb.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innobase extends PMA_StorageEngine_innodb{}?>
<?php/** * Handles the visualization of GIS MULTIPOLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multipolygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            // If the polygon doesn't have an inner ring, use polygon itself            if (strpos($polygon, "),(") === false) {                $ring = $polygon;            } else {                // Seperate outer ring and use it to determin min-max                $parts = explode("),(", $polygon);                $ring = $parts[0];            }            $min_max = $this->setMinMax($ring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr,                        $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            $pdf->Polygon($points_arr, 'F*', array(), $color, true);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            $pdf->SetXY($label_point[0], $label_point[1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'class'       => 'multipolygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        $row = '';        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            $row .= '<path d="';            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $row .= $this->_drawPath($polygon, $scale_data);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $row .= $this->_drawPath($outer, $scale_data);                foreach ($inner as $inner_poly) {                    $row .= $this->_drawPath($inner_poly, $scale_data);                }            }            $polygon_options['id'] = $label . rand();            $row .= '"';            foreach ($polygon_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiPolygon(new Array(';        foreach ($polygons as $polygon) {            $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_polygons = isset($gis_data[$index]['MULTIPOLYGON']['no_of_polygons'])            ? $gis_data[$index]['MULTIPOLYGON']['no_of_polygons'] : 1;        if ($no_of_polygons < 1) {            $no_of_polygons = 1;        }        $wkt = 'MULTIPOLYGON(';        for ($k = 0; $k < $no_of_polygons; $k++) {            $no_of_lines = isset($gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'])                ? $gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'] : 1;            if ($no_of_lines < 1) {                $no_of_lines = 1;            }            $wkt .= '(';            for ($i = 0; $i < $no_of_lines; $i++) {                $no_of_points = isset($gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'])                    ? $gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'] : 4;                if ($no_of_points < 4) {                    $no_of_points = 4;                }                $wkt .= '(';                for ($j = 0; $j < $no_of_points; $j++) {                    $wkt .= ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'] : $empty)                        . ' ' . ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'] : $empty) .',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= '),';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        // Determines whether each line ring is an inner ring or an outer ring.        // If it's an inner ring get a point on the surface which can be used to        // correctly classify inner rings to their respective outer rings.        include_once './libraries/gis/pma_gis_polygon.php';        foreach ($row_data['parts'] as $i => $ring) {            $row_data['parts'][$i]['isOuter'] = PMA_GIS_Polygon::isOuterRing($ring['points']);        }        // Find points on surface for inner rings        foreach ($row_data['parts'] as $i => $ring) {            if (! $ring['isOuter']) {                $row_data['parts'][$i]['pointOnSurface']                    = PMA_GIS_Polygon::getPointOnSurface($ring['points']);            }        }        // Classify inner rings to their respective outer rings.        foreach ($row_data['parts'] as $j => $ring1) {            if (! $ring1['isOuter']) {                foreach ($row_data['parts'] as $k => $ring2) {                    if ($ring2['isOuter']) {                        // If the pointOnSurface of the inner ring                        // is also inside the outer ring                        if (PMA_GIS_Polygon::isPointInsidePolygon(                            $ring1['pointOnSurface'], $ring2['points']                        )) {                            if (! isset($ring2['inner'])) {                                $row_data['parts'][$k]['inner'] = array();                            }                            $row_data['parts'][$k]['inner'][] = $j;                        }                    }                }            }        }        $wkt = 'MULTIPOLYGON(';        // for each polygon        foreach ($row_data['parts'] as $ring) {            if ($ring['isOuter']) {                $wkt .= '('; // start of polygon                $wkt .= '('; // start of outer ring                foreach ($ring['points'] as $point) {                    $wkt .= $point['x'] . ' ' . $point['y'] . ',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= ')'; // end of outer ring                // inner rings if any                if (isset($ring['inner'])) {                    foreach ($ring['inner'] as $j) {                        $wkt .= ',('; // start of inner ring                        foreach ($row_data['parts'][$j]['points'] as $innerPoint) {                            $wkt .= $innerPoint['x'] . ' ' . $innerPoint['y'] . ',';                        }                        $wkt = substr($wkt, 0, strlen($wkt) - 1);                        $wkt .= ')';  // end of inner ring                    }                }                $wkt .= '),'; // end of polygon            }        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')'; // end of multipolygon        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTIPOLYGON';            $wkt = $value;        }        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($wkt, 15, (strlen($wkt) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $params[$index]['MULTIPOLYGON']['no_of_polygons'] = count($polygons);        $k = 0;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = 1;                $points_arr = $this->extractPoints($polygon, null);                $no_of_points = count($points_arr);                $params[$index]['MULTIPOLYGON'][$k][0]['no_of_points'] = $no_of_points;                for ($i = 0; $i < $no_of_points; $i++) {                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['x'] = $points_arr[$i][0];                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['y'] = $points_arr[$i][1];                }            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = count($parts);                $j = 0;                foreach ($parts as $ring) {                    $points_arr = $this->extractPoints($ring, null);                    $no_of_points = count($points_arr);                    $params[$index]['MULTIPOLYGON'][$k][$j]['no_of_points'] = $no_of_points;                    for ($i = 0; $i < $no_of_points; $i++) {                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['x'] = $points_arr[$i][0];                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['y'] = $points_arr[$i][1];                    }                    $j++;                }            }            $k++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * A simple rules engine, that parses and executes the rules in advisory_rules.txt. Adjusted to phpMyAdmin * * * @package PhpMyAdmin */class Advisor{    var $variables;    var $parseResult;    var $runResult;    function run()    {        // HowTo: A simple Advisory system in 3 easy steps.        // Step 1: Get some variables to evaluate on        $this->variables = array_merge(            PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1),            PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1)        );        if (PMA_DRIZZLE) {            $this->variables = array_merge(                $this->variables,                PMA_DBI_fetch_result(                    "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS", 0, 1                )            );        }        // Add total memory to variables as well        include_once 'libraries/sysinfo.lib.php';        $sysinfo = getSysInfo();        $memory  = $sysinfo->memory();        $this->variables['system_memory'] = $memory['MemTotal'];        // Step 2: Read and parse the list of rules        $this->parseResult = $this->parseRulesFile();        // Step 3: Feed the variables to the rules and let them fire. Sets $runResult        $this->runRules();        return array(            'parse' => array('errors' => $this->parseResult['errors']),            'run'   => $this->runResult        );    }    function runRules()    {        $this->runResult = array(            'fired' => array(),            'notfired' => array(),            'unchecked'=> array(),            'errors' => array()        );        foreach ($this->parseResult['rules'] as $rule) {            $this->variables['value'] = 0;            $precond = true;            if (isset($rule['precondition'])) {                try {                     $precond = $this->ruleExprEvaluate($rule['precondition']);                } catch (Exception $e) {                    $this->runResult['errors'][] = 'Failed evaluating precondition for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }            }            if (! $precond) {                $this->addRule('unchecked', $rule);            } else {                try {                    $value = $this->ruleExprEvaluate($rule['formula']);                } catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed calculating value for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }                $this->variables['value'] = $value;                try {                    if ($this->ruleExprEvaluate($rule['test'])) {                        $this->addRule('fired', $rule);                    } else {                        $this->addRule('notfired', $rule);                    }                }  catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed running test for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                }            }        }        return true;    }    /**     * Escapes percent string to be used in format string.     *     * @param string $str string to escape     *     * @return string     */    function escapePercent($str)    {        return preg_replace('/%( |,|\.|$|\(|\)|<|>)/', '%%\1', $str);    }    /**     * Wrapper function for translating.     *     * @param string $str     * @param mixed  $param     *     * @return string     */    function translate($str, $param = null)    {        if (is_null($param)) {            return sprintf(_gettext(Advisor::escapePercent($str)));        } else {            $printf = 'sprintf("' . _gettext(Advisor::escapePercent($str)) . '",';            return $this->ruleExprEvaluate(                $printf . $param . ')',                strlen($printf)            );        }    }    /**     * Splits justification to text and formula.     *     * @param string $rule     *     * @return array     */    function splitJustification($rule)    {        $jst = preg_split('/\s*\|\s*/', $rule['justification'], 2);        if (count($jst) > 1) {            return array($jst[0], $jst[1]);        }        return array($rule['justification']);    }    // Adds a rule to the result list    function addRule($type, $rule)    {        switch($type) {        case 'notfired':        case 'fired':            $jst = Advisor::splitJustification($rule);            if (count($jst) > 1) {                try {                    /* Translate */                    $str = $this->translate($jst[0], $jst[1]);                } catch (Exception $e) {                    $this->runResult['errors'][] = sprintf(                        __('Failed formatting string for rule \'%s\'. PHP threw following error: %s'),                        $rule['name'],                        $e->getMessage()                    );                    return;                }                $rule['justification'] = $str;            } else {                $rule['justification'] = $this->translate($rule['justification']);            }            $rule['name'] = $this->translate($rule['name']);            $rule['issue'] = $this->translate($rule['issue']);            // Replaces {server_variable} with 'server_variable'            // linking to server_variables.php            $rule['recommendation'] = preg_replace(                '/\{([a-z_0-9]+)\}/Ui',                '<a href="server_variables.php?' . PMA_generate_common_url() . '#filter=\1">\1</a>',                $this->translate($rule['recommendation'])            );            // Replaces external Links with PMA_linkURL() generated links            $rule['recommendation'] = preg_replace(                '#href=("|\')(https?://[^\1]+)\1#ie',                '\'href="\' . PMA_linkURL("\2") . \'"\'',                $rule['recommendation']            );            break;        }        $this->runResult[$type][] = $rule;    }    private function ruleExprEvaluate_var1($matches)    {        // '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Uie'        return '1'; //isset($this->runResult[\'fired\']    }    private function ruleExprEvaluate_var2($matches)    {        // '/\b(\w+)\b/e'        return isset($this->variables[$matches[1]])            ? (is_numeric($this->variables[$matches[1]])                ? $this->variables[$matches[1]]                : '"'.$this->variables[$matches[1]].'"')            : $matches[1];    }    // Runs a code expression, replacing variable names with their respective values    // ignoreUntil: if > 0, it doesn't replace any variables until that string    // position, but still evaluates the whole expr    function ruleExprEvaluate($expr, $ignoreUntil = 0)    {        if ($ignoreUntil > 0) {            $exprIgnore = substr($expr, 0, $ignoreUntil);            $expr = substr($expr, $ignoreUntil);        }        $expr = preg_replace_callback(            '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Ui',            array($this, 'ruleExprEvaluate_var1'),            $expr        );        $expr = preg_replace_callback(            '/\b(\w+)\b/',            array($this, 'ruleExprEvaluate_var2'),            $expr        );        if ($ignoreUntil > 0) {            $expr = $exprIgnore . $expr;        }        $value = 0;        $err = 0;        ob_start();        eval('$value = '.$expr.';');        $err = ob_get_contents();        ob_end_clean();        if ($err) {            throw new Exception(                strip_tags($err) . '<br />Executed code: $value = ' . $expr . ';'            );        }        return $value;    }    // Reads the rule file into an array, throwing errors messages on syntax errors    function parseRulesFile()    {        $file = file('libraries/advisory_rules.txt');        $errors = array();        $rules = array();        $ruleSyntax = array('name', 'formula', 'test', 'issue', 'recommendation', 'justification');        $numRules = count($ruleSyntax);        $numLines = count($file);        $j = -1;        $ruleLine = -1;        for ($i = 0; $i<$numLines; $i++) {            $line = $file[$i];            if ($line[0] == '#' || $line[0] == "\n") {                continue;            }            // Reading new rule            if (substr($line, 0, 4) == 'rule') {                if ($ruleLine > 0) {                    $errors[] = 'Invalid rule declaration on line ' . ($i+1)                        . ', expected line ' . $ruleSyntax[$ruleLine++]                        . ' of previous rule' ;                    continue;                }                if (preg_match("/rule\s'(.*)'( \[(.*)\])?$/", $line, $match)) {                    $ruleLine = 1;                    $j++;                    $rules[$j] = array( 'name' => $match[1]);                    if (isset($match[3])) {                        $rules[$j]['precondition'] = $match[3];                    }                } else {                    $errors[] = 'Invalid rule declaration on line '.($i+1);                }                continue;            } else {                if ($ruleLine == -1) {                    $errors[] = 'Unexpected characters on line '.($i+1);                }            }            // Reading rule lines            if ($ruleLine > 0) {                if (!isset($line[0])) {                    continue; // Empty lines are ok                }                // Non tabbed lines are not                if ($line[0] != "\t") {                    $errors[] = 'Unexpected character on line '.($i+1).'                        . Expected tab, but found \''.$line[0].'\'';                    continue;                }                $rules[$j][$ruleSyntax[$ruleLine++]] = chop(substr($line, 1));            }            // Rule complete            if ($ruleLine == $numRules) {                $ruleLine = -1;            }        }        return array('rules' => $rules, 'errors' => $errors);    }}function PMA_bytime($num, $precision){    $per = '';    if ($num >= 1) { // per second        $per = __('per second');    } elseif ($num*60 >= 1) { // per minute        $num = $num*60;        $per = __('per minute');    } elseif ($num*60*60 >=1 ) { // per hour        $num = $num*60*60;        $per = __('per hour');    } else {        $num = $num*60*60*24;        $per = __('per day');    }    $num = round($num, $precision);    if ($num == 0) {        $num = '<' . pow(10, -$precision);    }    return "$num $per";}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Events management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/events.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_events.lib.php';/** * Do the magic */$_PMA_RTE = 'EVN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__longToIpv4_info(){    return array(        'info' => __('Converts an (IPv4) Internet network address into a string in Internet standard dotted format.'),        );}/** * returns IPv4 address * * @see http://php.net/long2ip */function PMA_transformation_text_plain__longToIpv4($buffer, $options = array(), $meta = ''){    if ($buffer < 0 || $buffer > 4294967295) {        return $buffer;    }    return long2ip($buffer);}?>
<?php/** * @package Swekey *//** * Checks Swekey authentication. */function Swekey_auth_check(){    global $cfg;    $confFile = $cfg['Server']['auth_swekey_config'];    if (! isset($_SESSION['SWEKEY'])) {        $_SESSION['SWEKEY'] = array();    }    $_SESSION['SWEKEY']['ENABLED'] = (! empty($confFile) && file_exists($confFile));    // Load the swekey.conf file the first time    if ($_SESSION['SWEKEY']['ENABLED'] && empty($_SESSION['SWEKEY']['CONF_LOADED'])) {        $_SESSION['SWEKEY']['CONF_LOADED'] = true;        $_SESSION['SWEKEY']['VALID_SWEKEYS'] = array();        $valid_swekeys = explode("\n", @file_get_contents($confFile));        foreach ($valid_swekeys as $line) {            if (preg_match("/^[0-9A-F]{32}:.+$/", $line) != false) {                $items = explode(":", $line);                if (count($items) == 2)                    $_SESSION['SWEKEY']['VALID_SWEKEYS'][$items[0]] = trim($items[1]);            } elseif (preg_match("/^[A-Z_]+=.*$/", $line) != false) {                $items = explode("=", $line);                $_SESSION['SWEKEY']['CONF_'.trim($items[0])] = trim($items[1]);            }        }        // Set default values for settings        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_CHECK']))            $_SESSION['SWEKEY']['CONF_SERVER_CHECK'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']))            $_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_STATUS']))             $_SESSION['SWEKEY']['CONF_SERVER_STATUS'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_CA_FILE']))            $_SESSION['SWEKEY']['CONF_CA_FILE'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']))            $_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE'] = true;        if (! isset($_SESSION['SWEKEY']['CONF_DEBUG']))               $_SESSION['SWEKEY']['CONF_DEBUG'] = false;     }    // check if a web key has been authenticated    if ($_SESSION['SWEKEY']['ENABLED']) {        if (empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))           return false;    }    return true;}/** * Handle Swekey authentication error. */function Swekey_auth_error(){    if (! isset($_SESSION['SWEKEY']))        return null;    if (! $_SESSION['SWEKEY']['ENABLED'])        return null;    include_once './libraries/auth/swekey/authentication.inc.php';    ?>    <script>    function Swekey_GetValidKey()    {        var valids = "<?php            foreach ($_SESSION['SWEKEY']['VALID_SWEKEYS'] as $key => $value)                echo $key.',';        ?>";        var connected_keys = Swekey_ListKeyIds().split(",");         for (i in connected_keys)               if (connected_keys[i] != null && connected_keys[i].length == 32)                if (valids.indexOf(connected_keys[i]) >= 0)                   return connected_keys[i];        if (connected_keys.length > 0)               if (connected_keys[0].length == 32)                  return "unknown_key_" + connected_keys[0];        return "none";    }    var key = Swekey_GetValidKey();    function timedCheck()    {        if (key != Swekey_GetValidKey())        {            window.location.search = "?swekey_reset";        }        else            setTimeout("timedCheck()",1000);    }    setTimeout("timedCheck()",1000);    </script>     <?php    if (! empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))        return null;    if (count($_SESSION['SWEKEY']['VALID_SWEKEYS']) == 0)        return sprintf(__('File %s does not contain any key id'), $GLOBALS['cfg']['Server']['auth_swekey_config']);    include_once "./libraries/auth/swekey/swekey.php";    Swekey_SetCheckServer($_SESSION['SWEKEY']['CONF_SERVER_CHECK']);    Swekey_SetRndTokenServer($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']);    Swekey_SetStatusServer($_SESSION['SWEKEY']['CONF_SERVER_STATUS']);    Swekey_EnableTokenCache($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']);    $caFile = $_SESSION['SWEKEY']['CONF_CA_FILE'];    if (empty($caFile)) {        $caFile = __FILE__;        $pos = strrpos($caFile, '/');        if ($pos === false)            $pos = strrpos($caFile, '\\'); // windows        $caFile = substr($caFile, 0, $pos + 1).'musbe-ca.crt';//        echo "\n<!-- $caFile -->\n";//        if (file_exists($caFile))//            echo "<!-- exists -->\n";    }    if (file_exists($caFile)) {        Swekey_SetCAFile($caFile);    } elseif (! empty($caFile) && (substr($_SESSION['SWEKEY']['CONF_SERVER_CHECK'], 0, 8) == "https://")) {        return "Internal Error: CA File $caFile not found";    }    $result = null;    $swekey_id = $_GET['swekey_id'];    $swekey_otp = $_GET['swekey_otp'];    if (isset($swekey_id)) {        unset($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']);        if (! isset($_SESSION['SWEKEY']['RND_TOKEN'])) {            unset($swekey_id);        } else {            if (strlen($swekey_id) == 32) {                $res = Swekey_CheckOtp($swekey_id, $_SESSION['SWEKEY']['RND_TOKEN'], $swekey_otp);                unset($_SESSION['SWEKEY']['RND_TOKEN']);                if (! $res) {                    $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';                } else {                    $_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY'] = $swekey_id;                    $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];                    return null;                }            } else {                $result = __('No valid authentication key plugged');                if ($_SESSION['SWEKEY']['CONF_DEBUG']) {                    $result .= "<br>" . htmlspecialchars($swekey_id);                }                unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file            }        }    } else {        unset($_SESSION['SWEKEY']);    }    $_SESSION['SWEKEY']['RND_TOKEN'] = Swekey_GetFastRndToken();    if (strlen($_SESSION['SWEKEY']['RND_TOKEN']) != 64) {        $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';        unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file    }    if (! isset($swekey_id)) {        ?>        <script>    if (key.length != 32) {        window.location.search="?swekey_id=" + key + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    } else {        var url = "" + window.location;        if (url.indexOf("?") > 0)            url = url.substr(0, url.indexOf("?"));        Swekey_SetUnplugUrl(key, "pma_login", url + "?session_to_unset=<?php echo session_id();?>&token=<?php echo $_SESSION[' PMA_token ']; ?>");        var otp = Swekey_GetOtp(key, <?php echo '"'.$_SESSION['SWEKEY']['RND_TOKEN'].'"';?>);        window.location.search="?swekey_id=" + key + "&swekey_otp=" + otp + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    }        </script>        <?php        return __('Authenticating...');    }    return $result;}/** * Perform login using Swekey. */function Swekey_login($input_name, $input_go){    $swekeyErr = Swekey_auth_error();    if ($swekeyErr != null) {        PMA_Message::error($swekeyErr)->display();        if ($GLOBALS['error_handler']->hasDisplayErrors()) {            echo '<div>';            $GLOBALS['error_handler']->dispErrors();            echo '</div>';        }    }    if (isset($_SESSION['SWEKEY']) && $_SESSION['SWEKEY']['ENABLED']) {        echo '<script type="text/javascript">';        if (empty($_SESSION['SWEKEY']['FORCE_USER'])) {            echo 'var user = null;';        } else {           echo 'var user = "'.$_SESSION['SWEKEY']['FORCE_USER'].'";';        }        ?>            function open_swekey_site()            {                window.open("<?php echo PMA_linkURL('http://phpmyadmin.net/auth_key'); ?>");            }            var input_username = document.getElementById("<?php echo $input_name; ?>");            var input_go = document.getElementById("<?php echo $input_go; ?>");            var swekey_status = document.createElement('img');            swekey_status.setAttribute('onclick', 'open_swekey_site()');            swekey_status.setAttribute('style', 'width:8px; height:16px; border:0px; vspace:0px; hspace:0px; frameborder:no');            if (user == null)            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/unplugged-8x16.png');                //swekey_status.setAttribute('title', 'No swekey plugged');                input_go.disabled = true;            }            else            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/plugged-8x16.png');                //swekey_status.setAttribute('title', 'swekey plugged');                input_username.value = user;            }             input_username.readOnly = true;            if (input_username.nextSibling == null)                input_username.parentNode.appendChild(swekey_status);            else                input_username.parentNode.insertBefore(swekey_status, input_username.nextSibling);        <?php        echo '</script>';    }}if (!empty($_GET['session_to_unset'])) {    session_write_close();    session_id($_GET['session_to_unset']);    session_start();    $_SESSION = array();    session_write_close();    session_destroy();    exit;}if (isset($_GET['swekey_reset'])) {    unset($_SESSION['SWEKEY']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Core library. */require_once './libraries/common.inc.php';// Check URL parametersPMA_checkParameters(array('reference', 'c_type'));// Increase time limit, because fetching blob might take some time@set_time_limit(0);$reference = $_REQUEST['reference'];/* * FIXME: Maybe it would be better to check MIME type against whitelist as * this code sems to support only few MIME types (check * function PMA_BS_CreateReferenceLink in libraries/blobstreaming.lib.php). */$c_type = preg_replace('/[^A-Za-z0-9/_-]/', '_', $_REQUEST['c_type']);// Get the blob streaming URL$filename = PMA_BS_getURL($reference);if (empty($filename)) {    die(__('No blob streaming server configured!'));}$hdrs = get_headers($filename, 1);if ($hdrs === false) {    die(__('Failed to fetch headers'));}$fHnd = fopen($filename, "rb");if ($fHnd === false) {    die(__('Failed to open remote URL'));}$f_size = $hdrs['Content-Length'];PMA_download_header(basename($filename), $c_type, $f_size);$pos = 0;$content = "";while (!feof($fHnd)) {    $content .= fread($fHnd, $f_size);    $pos = strlen($content);    if ($pos >= $f_size) {        break;    }}echo $content;flush();fclose($fHnd);
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file view and save screen * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';require_once './setup/lib/ConfigGenerator.class.php';$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);?><h2><?php echo __('Configuration file') ?></h2><?php display_form_top('config.php'); ?><input type="hidden" name="eol" value="<?php echo htmlspecialchars(PMA_ifSetOr($_GET['eol'], 'unix')) ?>" /><?php display_fieldset_top('', '', null, array('class' => 'simple')); ?><tr>    <td>        <textarea cols="50" rows="20" name="textconfig" id="textconfig" spellcheck="false"><?php            echo htmlspecialchars(ConfigGenerator::getConfigFile())        ?></textarea>    </td></tr><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" class="green" />        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Front controller for config view / download and clear * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/ConfigGenerator.class.php';require './libraries/config/setup.forms.php';$form_display = new FormDisplay();$form_display->registerForm('_config.php', $forms['_config.php']);$form_display->save('_config.php');$config_file_path = ConfigFile::getInstance()->getFilePath();if (isset($_POST['eol'])) {    $_SESSION['eol'] = ($_POST['eol'] == 'unix') ? 'unix' : 'win';}if (PMA_ifSetOr($_POST['submit_clear'], '')) {    //    // Clear current config and return to main page    //    ConfigFile::getInstance()->resetConfigData();    // drop post data    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} elseif (PMA_ifSetOr($_POST['submit_download'], '')) {    //    // Output generated config file    //    PMA_download_header('config.inc.php', 'text/plain');    echo ConfigGenerator::getConfigFile();    exit;} elseif (PMA_ifSetOr($_POST['submit_save'], '')) {    //    // Save generated config file on the server    //    file_put_contents($config_file_path, ConfigGenerator::getConfigFile());    header('HTTP/1.1 303 See Other');    header('Location: index.php?action_done=config_saved');    exit;} elseif (PMA_ifSetOr($_POST['submit_load'], '')) {    //    // Load config file from the server    //    $cfg = array();    include_once $config_file_path;    ConfigFile::getInstance()->setConfigData($cfg);    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} elseif (PMA_ifSetOr($_POST['submit_delete'], '')) {    //    // Delete config file on the server    //    @unlink($config_file_path);    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} else {    //    // Show generated config file in a <textarea>    //    header('HTTP/1.1 303 See Other');    header('Location: index.php?page=config');    exit;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin using LOAD DATA * * @package PhpMyAdmin-Import * @subpackage LDI */if (! defined('PHPMYADMIN')) {    exit;}/** * */if ($plugin_param !== 'table') {    return;}if (isset($plugin_list)) {    if ($GLOBALS['cfg']['Import']['ldi_local_option'] == 'auto') {        $GLOBALS['cfg']['Import']['ldi_local_option'] = false;        $result = PMA_DBI_try_query('SHOW VARIABLES LIKE \'local\\_infile\';');        if ($result != false && PMA_DBI_num_rows($result) > 0) {            $tmp = PMA_DBI_fetch_row($result);            if ($tmp[1] == 'ON') {                $GLOBALS['cfg']['Import']['ldi_local_option'] = true;            }        }        PMA_DBI_free_result($result);        unset($result);    }    $plugin_list['ldi'] = array(        'text' => __('CSV using LOAD DATA'),        'extension' => 'ldi', // This is nonsense, however we want to default to our parser for csv        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns terminated by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated by'), 'size' => 2),            array('type' => 'text', 'name' => 'columns', 'text' => __('Column names')),            array('type' => 'bool', 'name' => 'local_option', 'text' => __('Use LOCAL keyword')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}if ($import_file == 'none' || $compression != 'none' || $charset_conversion) {    // We handle only some kind of data!    $message = PMA_Message::error(__('This plugin does not support compressed imports!'));    $error = true;    return;}$sql = 'LOAD DATA';if (isset($ldi_local_option)) {    $sql .= ' LOCAL';}$sql .= ' INFILE \'' . PMA_sqlAddSlashes($import_file) . '\'';if (isset($ldi_replace)) {    $sql .= ' REPLACE';} elseif (isset($ldi_ignore)) {    $sql .= ' IGNORE';}$sql .= ' INTO TABLE ' . PMA_backquote($table);if (strlen($ldi_terminated) > 0) {    $sql .= ' FIELDS TERMINATED BY \'' . $ldi_terminated . '\'';}if (strlen($ldi_enclosed) > 0) {    $sql .= ' ENCLOSED BY \'' . PMA_sqlAddSlashes($ldi_enclosed) . '\'';}if (strlen($ldi_escaped) > 0) {    $sql .= ' ESCAPED BY \'' . PMA_sqlAddSlashes($ldi_escaped) . '\'';}if (strlen($ldi_new_line) > 0) {    if ($ldi_new_line == 'auto') {        $ldi_new_line = PMA_whichCrlf() == "\n" ? '\n' : '\r\n';    }    $sql .= ' LINES TERMINATED BY \'' . $ldi_new_line . '\'';}if ($skip_queries > 0) {    $sql .= ' IGNORE ' . $skip_queries . ' LINES';    $skip_queries = 0;}if (strlen($ldi_columns) > 0) {    $sql .= ' (';    $tmp   = preg_split('/,( ?)/', $ldi_columns);    $cnt_tmp = count($tmp);    for ($i = 0; $i < $cnt_tmp; $i++) {        if ($i > 0) {            $sql .= ', ';        }        /* Trim also `, if user already included backquoted fields */        $sql     .= PMA_backquote(trim($tmp[$i], " \t\r\n\0\x0B`"));    } // end for    $sql .= ')';}PMA_importRunQuery($sql, $sql);PMA_importRunQuery();$finished = true;?>
