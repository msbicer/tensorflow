<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Charset conversion functions. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}define('PMA_CHARSET_NONE', 0);define('PMA_CHARSET_ICONV', 1);define('PMA_CHARSET_RECODE', 2);define('PMA_CHARSET_ICONV_AIX', 3);// Finally detect which function we will use:if ($cfg['RecodingEngine'] == 'iconv') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('iconv');    }} elseif ($cfg['RecodingEngine'] == 'recode') {    if (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('recode');    }} elseif ($cfg['RecodingEngine'] == 'auto') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } elseif (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;    }} else {    $PMA_recoding_engine = PMA_CHARSET_NONE;}/* Load AIX iconv wrapper if needed */if ($PMA_recoding_engine == PMA_CHARSET_ICONV_AIX) {    include_once './libraries/iconv_wrapper.lib.php';}/** * Converts encoding of text according to parameters with detected * conversion function. * * @param string   source charset * @param string   target charset * @param string   what to convert * * @return  string   converted text * * @access  public * */function PMA_convert_string($src_charset, $dest_charset, $what){    if ($src_charset == $dest_charset) {        return $what;    }    switch ($GLOBALS['PMA_recoding_engine']) {        case PMA_CHARSET_RECODE:            return recode_string($src_charset . '..'  . $dest_charset, $what);        case PMA_CHARSET_ICONV:            return iconv($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        case PMA_CHARSET_ICONV_AIX:            return PMA_aix_iconv_wrapper($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        default:            return $what;    }} //  end of the "PMA_convert_string()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;require_once './libraries/header.inc.php';PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'db_sql.php?' . PMA_generate_common_url($db);/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Gets the list of the table in the current db and informations about these * tables if possible * * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full() *// speedup view on locked tables// Special speedup for newer MySQL Versions (in 4.0 format changed)if ($cfg['SkipLockedTables'] == true) {    $result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($result != false && PMA_DBI_num_rows($result) > 0) {        while ($tmp = PMA_DBI_fetch_row($result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[0])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($result);        if (isset($sot_cache)) {            $result      = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);            if ($result != false && PMA_DBI_num_rows($result) > 0) {                while ($tmp = PMA_DBI_fetch_row($result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        $tables[]    = $sts_tmp;                    } else { // table in use                        $tables[]    = array('Name' => $tmp[0]);                    }                }                PMA_DBI_free_result($result);                $sot_ready = true;            }        }        unset($tmp, $result);    }}if (! isset($sot_ready)) {    $result      = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ';');    if (PMA_DBI_num_rows($result) > 0) {        while ($sts_tmp = PMA_DBI_fetch_assoc($result)) {            $tables[] = $sts_tmp;        }        PMA_DBI_free_result($result);        unset($res);    }} *//** * If there is at least one table, displays the printer friendly view, else * an error message */$tables = PMA_DBI_get_tables_full($db);$num_tables = count($tables);echo '<br />';// 1. No tableif ($num_tables == 0) {    echo __('No tables found in database.');} else {// 2. Shows table information    ?><table><thead><tr>    <th><?php echo __('Table'); ?></th>    <th><?php echo __('Rows'); ?></th>    <th><?php echo __('Type'); ?></th>    <?php    if ($cfg['ShowStats']) {        echo '<th>' . __('Size') . '</th>';    }    ?>    <th><?php echo __('Comments'); ?></th></tr></thead><tbody>    <?php    $sum_entries = $sum_size = 0;    $odd_row = true;    foreach ($tables as $sts_data) {        if (PMA_Table::isMerge($db, $sts_data['TABLE_NAME'])         || strtoupper($sts_data['ENGINE']) == 'FEDERATED') {            $merged_size = true;        } else {            $merged_size = false;        }        $sum_entries += $sts_data['TABLE_ROWS'];        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">    <th>        <?php echo htmlspecialchars($sts_data['TABLE_NAME']); ?>    </th>        <?php        if (isset($sts_data['TABLE_ROWS'])) {            ?>    <td align="right">            <?php            if ($merged_size) {                echo '<i>' . PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . '</i>' . "\n";            } else {                echo PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . "\n";            }            ?>    </td>    <td nowrap="nowrap">        <?php echo $sts_data['ENGINE']; ?>    </td>            <?php            if ($cfg['ShowStats']) {                $tblsize =  $sts_data['Data_length'] + $sts_data['Index_length'];                $sum_size += $tblsize;                list($formated_size, $unit) =  PMA_formatByteDown($tblsize, 3, 1);                ?>    <td align="right" nowrap="nowrap">        <?php echo $formated_size . ' ' . $unit; ?>    </td>                <?php            } // end if        } else {            ?>    <td colspan="3" align="center">        <?php echo __('in use'); ?>    </td>            <?php        }        ?>    <td>        <?php        if (! empty($sts_data['Comment'])) {            echo htmlspecialchars($sts_data['Comment']);            $needs_break = '<br />';        } else {            $needs_break = '';        }        if (! empty($sts_data['Create_time'])         || ! empty($sts_data['Update_time'])         || ! empty($sts_data['Check_time'])) {            echo $needs_break;            ?>            <table width="100%">            <?php            if (! empty($sts_data['Create_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Creation') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Create_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Update_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last update') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Update_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Check_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last check') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Check_time'])); ?></td>                </tr>                <?php            }            ?>            </table>            <?php        }        ?>    </td></tr>        <?php    }    ?><tr>    <th align="center">        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>    </th>    <th align="right" nowrap="nowrap">        <?php echo PMA_formatNumber($sum_entries, 0); ?>    </th>    <th align="center">        --    </th>    <?php    if ($cfg['ShowStats']) {        list($sum_formated, $unit) = PMA_formatByteDown($sum_size, 3, 1);        ?>    <th align="right" nowrap="nowrap">        <?php echo $sum_formated . ' ' . $unit; ?>    </th>        <?php    }    ?>    <th></th></tr></tbody></table>    <?php}/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */# GNU iconv code set to IBM AIX libiconv code set table# Keys of this table should be in lowercase, and searches should be performed using lowercase!$gnu_iconv_to_aix_iconv_codepage_map = array (    // "iso-8859-[1-9]" --> "ISO8859-[1-9]" according to http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/basetrf2/setlocale.htm    'iso-8859-1' => 'ISO8859-1',    'iso-8859-2' => 'ISO8859-2',    'iso-8859-3' => 'ISO8859-3',    'iso-8859-4' => 'ISO8859-4',    'iso-8859-5' => 'ISO8859-5',    'iso-8859-6' => 'ISO8859-6',    'iso-8859-7' => 'ISO8859-7',    'iso-8859-8' => 'ISO8859-8',    'iso-8859-9' => 'ISO8859-9',    // "big5" --> "IBM-eucTW" according to http://kadesh.cepba.upc.es/mancpp/classref/ref/ITranscoder_DSC.htm    'big5' => 'IBM-eucTW',    // Other mappings corresponding to the phpMyAdmin dropdown box when using the charset conversion feature    'euc-jp' => 'IBM-eucJP',    'koi8-r' => 'IBM-eucKR',    'ks_c_5601-1987' => 'KSC5601.1987-0',    'tis-620' => 'TIS-620',    'utf-8' => 'UTF-8');/** * Wrapper around IBM AIX iconv(), whose character set naming differs * from the GNU version of iconv(). * * @param string   input character set * @param string   output character set * @param string   the string to convert * * @return  mixed    converted string or false on failure * * @access  public * */function PMA_aix_iconv_wrapper($in_charset, $out_charset, $str){    global $gnu_iconv_to_aix_iconv_codepage_map;    // Check for transliteration argument at the end of output character set name    $translit_search = strpos(strtolower($out_charset), '//translit');    $using_translit = (!($translit_search === false));    // Extract "plain" output character set name (without any transliteration argument)    $out_charset_plain = ($using_translit ? substr($out_charset, 0, $translit_search) : $out_charset);    // Transform name of input character set (if found)    if (array_key_exists(strtolower($in_charset), $gnu_iconv_to_aix_iconv_codepage_map)) {        $in_charset = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($in_charset)];    }    // Transform name of "plain" output character set (if found)    if (array_key_exists(strtolower($out_charset_plain), $gnu_iconv_to_aix_iconv_codepage_map)) {        $out_charset_plain = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($out_charset_plain)];    }    // Add transliteration argument again (exactly as specified by user) if used    // Build the output character set name that we will use    $out_charset = ($using_translit ? $out_charset_plain . substr($out_charset, $translit_search) : $out_charset_plain);    // NOTE: Transliteration not supported; we will use the "plain" output character set name    $out_charset = $out_charset_plain;    // Call iconv() with the possibly modified parameters    $result = iconv($in_charset, $out_charset, $str);    return $result;} //  end of the "PMA_aix_iconv_wrapper()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';extract($_POST, EXTR_SKIP);extract($_GET, EXTR_SKIP);$die_save_pos = 0;require_once 'pmd_save_pos.php';list($DB1, $T1) = explode(".", $T1);list($DB2, $T2) = explode(".", $T2);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);$try_to_delete_internal_relation = false;if (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // InnoDB    $existrel_foreign = PMA_getForeigners($DB2, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2]['constraint'])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                  . ' DROP FOREIGN KEY '                  . PMA_backquote($existrel_foreign[$F2]['constraint']);        $upd_rs     = PMA_DBI_query($upd_query);    } else {        // there can be an internal relation even if InnoDB        $try_to_delete_internal_relation = true;    }} else {    $try_to_delete_internal_relation = true;}if ($try_to_delete_internal_relation) {    // internal relations    PMA_query_as_controluser(        'DELETE FROM '        . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'        . $cfg['Server']['relation'].' WHERE '        . 'master_db = \'' . PMA_sqlAddSlashes($DB2) . '\''        . ' AND master_table = \'' . PMA_sqlAddSlashes($T2) . '\''        . ' AND master_field = \'' . PMA_sqlAddSlashes($F2) . '\''        . ' AND foreign_db = \'' . PMA_sqlAddSlashes($DB1) . '\''        . ' AND foreign_table = \'' . PMA_sqlAddSlashes($T1) . '\''        . ' AND foreign_field = \'' . PMA_sqlAddSlashes($F1) . '\'',        false,        PMA_DBI_QUERY_STORE    );}PMD_return_upd(1, __('Relation deleted'));function PMD_return_upd($b, $ret){    global $K;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_upd" return="'.$ret.'" b="'.$b.'" K="'.$K.'"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/db_common.inc.php';require './libraries/StorageEngine.class.php';$active_page = 'db_operations.php';require_once './libraries/db_common.inc.php';$url_query .= '&amp;goto=schema_edit.php';require_once './libraries/db_info.inc.php';/** * Includ settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();/** * Now in ./libraries/relation.lib.php we check for all tables * that we need, but if we don't find them we are quiet about it * so people can't work without relational variables. * This page is absolutely useless if you didn't set up your tables * correctly, so it is a good place to see which tables we can and * complain ;-) */if (! $cfgRelation['relwork']) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'relation', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('relation') . "\n";    include_once './libraries/footer.inc.php';}if (! $cfgRelation['displaywork']) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'table_info', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('table_info') . "\n";    include_once './libraries/footer.inc.php';}if (! isset($cfgRelation['table_coords'])) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'table_coords', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('table_coords') . "\n";    include_once './libraries/footer.inc.php';}if (! isset($cfgRelation['pdf_pages'])) {    echo sprintf(__('<b>%s</b> table not found or not set in %s'), 'pdf_page', 'config.inc.php') . '<br />' . "\n"         . PMA_showDocu('pdf_pages') . "\n";    include_once './libraries/footer.inc.php';}if ($cfgRelation['pdfwork']) {   /**    * User object created for presenting the HTML options    * so, user can interact with it and perform export of relations schema    */    include_once './libraries/schema/User_Schema.class.php';    $user_schema = new PMA_User_Schema();    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * @param string $do It tells what the Schema is supposed to do     *                  create and select a page, generate schema etc     */    if (isset($_REQUEST['do'])) {        $user_schema->setAction($_REQUEST['do']);        $user_schema->processUserChoice();    }    /**     * Show some possibility to select a page for the export of relation schema     * Lists all pages created before and can select and edit from them     */    $user_schema->selectPage();    /**     * Create a new page where relations will be drawn     */    $user_schema->showCreatePageDialog($db);    /**     * After selection of page or creating a page     * It will show you the list of tables     * A dashboard will also be shown where you can position the tables     */    $user_schema->showTableDashBoard();    if (isset($_REQUEST['do'])    && ($_REQUEST['do'] == 'edcoord'       || ($_REQUEST['do']== 'selectpage' && isset($user_schema->chosenPage) && $user_schema->chosenPage != 0)       || ($_REQUEST['do'] == 'createpage' && isset($user_schema->chosenPage) && $user_schema->chosenPage != 0))) {      /**       * show Export schema generation options       */       $user_schema->displaySchemaGenerationOptions();        if ((isset($showwysiwyg) && $showwysiwyg == '1')) {            ?>            <script type="text/javascript">            //<![CDATA[            ToggleDragDrop('pdflayout');            //]]>            </script>            <?php      }    } // end if} // end if ($cfgRelation['pdfwork'])/** * Displays the footer */echo "\n";require_once './libraries/footer.inc.php';?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans-Bold';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=672300;$enc='';$file='dejavusansb.z';$ctg='dejavusansb.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1069 -415 1975 1174]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>60,'StemH'=>26,'AvgWidth'=>573,'MaxWidth'=>2016,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>348,33=>456,34=>521,35=>838,36=>696,37=>1002,38=>872,39=>306,40=>457,41=>457,42=>523,43=>838,44=>380,45=>415,46=>380,47=>365,48=>696,49=>696,50=>696,51=>696,52=>696,53=>696,54=>696,55=>696,56=>696,57=>696,58=>400,59=>400,60=>838,61=>838,62=>838,63=>580,64=>1000,65=>774,66=>762,67=>734,68=>830,69=>683,70=>683,71=>821,72=>837,73=>372,74=>372,75=>775,76=>637,77=>995,78=>837,79=>850,80=>733,81=>850,82=>770,83=>720,84=>682,85=>812,86=>774,87=>1103,88=>771,89=>724,90=>725,91=>457,92=>365,93=>457,94=>838,95=>500,96=>500,97=>675,98=>716,99=>593,100=>716,101=>678,102=>435,103=>716,104=>712,105=>343,106=>343,107=>665,108=>343,109=>1042,110=>712,111=>687,112=>716,113=>716,114=>493,115=>595,116=>478,117=>712,118=>652,119=>924,120=>645,121=>652,122=>582,123=>712,124=>365,125=>712,126=>838,127=>600,128=>774,129=>774,130=>734,131=>683,132=>837,133=>850,134=>812,135=>675,136=>675,137=>675,138=>675,139=>675,140=>675,141=>593,142=>678,143=>678,144=>678,145=>678,146=>343,147=>343,148=>343,149=>343,150=>712,151=>687,152=>687,153=>687,154=>687,155=>687,156=>712,157=>712,158=>712,159=>712,160=>348,161=>456,162=>696,163=>696,164=>636,165=>696,166=>365,167=>500,168=>500,169=>1000,170=>564,171=>646,172=>838,173=>415,174=>1000,175=>500,176=>500,177=>838,178=>438,179=>438,180=>500,181=>736,182=>636,183=>380,184=>500,185=>438,186=>564,187=>646,188=>1035,189=>1035,190=>1035,191=>580,192=>774,193=>774,194=>774,195=>774,196=>774,197=>774,198=>1085,199=>734,200=>683,201=>683,202=>683,203=>683,204=>372,205=>372,206=>372,207=>372,208=>838,209=>837,210=>850,211=>850,212=>850,213=>850,214=>850,215=>838,216=>850,217=>812,218=>812,219=>812,220=>812,221=>724,222=>738,223=>719,224=>675,225=>675,226=>675,227=>675,228=>675,229=>675,230=>1048,231=>593,232=>678,233=>678,234=>678,235=>678,236=>343,237=>343,238=>343,239=>343,240=>687,241=>712,242=>687,243=>687,244=>687,245=>687,246=>687,247=>838,248=>687,249=>712,250=>712,251=>712,252=>712,253=>652,254=>716,255=>652,256=>774,257=>675,258=>774,259=>675,260=>774,261=>675,262=>734,263=>593,264=>734,265=>593,266=>734,267=>593,268=>734,269=>593,270=>830,271=>716,272=>838,273=>716,274=>683,275=>678,276=>683,277=>678,278=>683,279=>678,280=>683,281=>678,282=>683,283=>678,284=>821,285=>716,286=>821,287=>716,288=>821,289=>716,290=>821,291=>716,292=>837,293=>712,294=>974,295=>790,296=>372,297=>343,298=>372,299=>343,300=>372,301=>343,302=>372,303=>343,304=>372,305=>343,306=>744,307=>686,308=>372,309=>343,310=>775,311=>665,312=>665,313=>637,314=>343,315=>637,316=>343,317=>637,318=>479,319=>637,320=>557,321=>642,322=>371,323=>837,324=>712,325=>837,326=>712,327=>837,328=>712,329=>983,330=>837,331=>712,332=>850,333=>687,334=>850,335=>687,336=>850,337=>687,338=>1167,339=>1094,340=>770,341=>493,342=>770,343=>493,344=>770,345=>493,346=>720,347=>595,348=>720,349=>595,350=>720,351=>595,352=>720,353=>595,354=>682,355=>478,356=>682,357=>478,358=>682,359=>478,360=>812,361=>712,362=>812,363=>712,364=>812,365=>712,366=>812,367=>712,368=>812,369=>712,370=>812,371=>712,372=>1103,373=>924,374=>724,375=>652,376=>724,377=>725,378=>582,379=>725,380=>582,381=>725,382=>582,383=>435,384=>716,385=>811,386=>762,387=>716,388=>762,389=>716,390=>734,391=>734,392=>593,393=>838,394=>879,395=>757,396=>716,397=>688,398=>683,399=>849,400=>696,401=>683,402=>435,403=>821,404=>793,405=>1045,406=>436,407=>389,408=>775,409=>665,410=>360,411=>592,412=>1042,413=>837,414=>712,415=>850,416=>874,417=>687,418=>1083,419=>912,420=>782,421=>716,422=>770,423=>720,424=>595,425=>683,426=>552,427=>478,428=>707,429=>478,430=>682,431=>835,432=>712,433=>850,434=>813,435=>797,436=>778,437=>725,438=>582,439=>772,440=>772,441=>641,442=>582,443=>696,444=>772,445=>641,446=>573,447=>716,448=>372,449=>659,450=>544,451=>372,452=>1555,453=>1412,454=>1298,455=>1009,456=>980,457=>686,458=>1209,459=>1180,460=>1055,461=>774,462=>675,463=>372,464=>343,465=>850,466=>687,467=>812,468=>712,469=>812,470=>712,471=>812,472=>712,473=>812,474=>712,475=>812,476=>712,477=>678,478=>774,479=>675,480=>774,481=>675,482=>1085,483=>1048,484=>821,485=>716,486=>821,487=>716,488=>775,489=>665,490=>850,491=>687,492=>850,493=>687,494=>772,495=>582,496=>343,497=>1555,498=>1412,499=>1298,500=>821,501=>716,502=>1289,503=>787,504=>837,505=>712,506=>774,507=>675,508=>1085,509=>1048,510=>850,511=>687,512=>774,513=>675,514=>774,515=>675,516=>683,517=>678,518=>683,519=>678,520=>372,521=>343,522=>372,523=>343,524=>850,525=>687,526=>850,527=>687,528=>770,529=>493,530=>770,531=>493,532=>812,533=>712,534=>812,535=>712,536=>720,537=>595,538=>682,539=>478,540=>690,541=>607,542=>837,543=>712,544=>837,545=>865,546=>809,547=>659,548=>725,549=>582,550=>774,551=>675,552=>683,553=>678,554=>850,555=>687,556=>850,557=>687,558=>850,559=>687,560=>850,561=>687,562=>724,563=>652,564=>492,565=>867,566=>512,567=>343,568=>1088,569=>1088,570=>774,571=>734,572=>593,573=>637,574=>682,575=>595,576=>582,577=>782,578=>614,579=>762,580=>812,581=>774,582=>683,583=>678,584=>372,585=>343,586=>860,587=>791,588=>770,589=>493,590=>724,591=>652,592=>675,593=>716,594=>716,595=>716,596=>593,597=>593,598=>717,599=>792,600=>678,601=>678,602=>876,603=>557,604=>545,605=>815,606=>731,607=>343,608=>792,609=>716,610=>627,611=>644,612=>635,613=>712,614=>712,615=>712,616=>545,617=>440,618=>545,619=>559,620=>693,621=>343,622=>841,623=>1042,624=>1042,625=>1042,626=>712,627=>793,628=>707,629=>687,630=>909,631=>681,632=>796,633=>538,634=>538,635=>650,636=>493,637=>493,638=>596,639=>596,640=>642,641=>642,642=>595,643=>415,644=>435,645=>605,646=>552,647=>478,648=>478,649=>920,650=>772,651=>670,652=>652,653=>924,654=>652,655=>724,656=>694,657=>684,658=>641,659=>641,660=>573,661=>573,662=>573,663=>573,664=>850,665=>633,666=>731,667=>685,668=>691,669=>343,670=>732,671=>539,672=>792,673=>573,674=>573,675=>1156,676=>1214,677=>1155,678=>974,679=>769,680=>929,681=>1026,682=>792,683=>780,684=>591,685=>415,686=>677,687=>789,688=>456,689=>456,690=>219,691=>315,692=>315,693=>315,694=>411,695=>591,696=>417,697=>302,698=>521,699=>380,700=>380,701=>380,702=>366,703=>366,704=>326,705=>326,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>306,713=>500,714=>500,715=>500,716=>306,717=>500,718=>500,719=>500,720=>337,721=>337,722=>366,723=>366,724=>500,725=>500,726=>416,727=>328,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>351,735=>500,736=>412,737=>219,738=>381,739=>413,740=>326,741=>500,742=>500,743=>500,744=>500,745=>500,748=>500,749=>500,750=>657,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>698,881=>565,882=>1022,883=>836,884=>302,885=>302,886=>837,887=>701,890=>500,891=>593,892=>550,893=>549,894=>400,900=>441,901=>500,902=>797,903=>380,904=>846,905=>1009,906=>563,908=>891,910=>980,911=>894,912=>390,913=>774,914=>762,915=>637,916=>774,917=>683,918=>725,919=>837,920=>850,921=>372,922=>775,923=>774,924=>995,925=>837,926=>632,927=>850,928=>837,929=>733,931=>683,932=>682,933=>724,934=>850,935=>771,936=>850,937=>850,938=>372,939=>724,940=>687,941=>557,942=>712,943=>390,944=>675,945=>687,946=>716,947=>681,948=>687,949=>557,950=>591,951=>712,952=>687,953=>390,954=>710,955=>633,956=>736,957=>681,958=>591,959=>687,960=>791,961=>716,962=>593,963=>779,964=>638,965=>675,966=>782,967=>645,968=>794,969=>869,970=>390,971=>675,972=>687,973=>675,974=>869,975=>775,976=>651,977=>661,978=>746,979=>981,980=>746,981=>796,982=>869,983=>744,984=>850,985=>687,986=>734,987=>593,988=>683,989=>494,990=>702,991=>660,992=>919,993=>627,994=>1093,995=>837,996=>832,997=>716,998=>928,999=>744,1000=>733,1001=>650,1002=>789,1003=>671,1004=>752,1005=>716,1006=>682,1007=>590,1008=>744,1009=>716,1010=>593,1011=>343,1012=>850,1013=>645,1014=>644,1015=>738,1016=>716,1017=>734,1018=>995,1019=>732,1020=>716,1021=>698,1022=>734,1023=>698,1024=>683,1025=>683,1026=>878,1027=>637,1028=>734,1029=>720,1030=>372,1031=>372,1032=>372,1033=>1154,1034=>1130,1035=>878,1036=>817,1037=>837,1038=>771,1039=>837,1040=>774,1041=>762,1042=>762,1043=>637,1044=>891,1045=>683,1046=>1224,1047=>710,1048=>837,1049=>837,1050=>817,1051=>831,1052=>995,1053=>837,1054=>850,1055=>837,1056=>733,1057=>734,1058=>682,1059=>771,1060=>992,1061=>771,1062=>928,1063=>808,1064=>1235,1065=>1326,1066=>939,1067=>1036,1068=>762,1069=>734,1070=>1174,1071=>770,1072=>675,1073=>698,1074=>633,1075=>522,1076=>808,1077=>678,1078=>995,1079=>581,1080=>701,1081=>701,1082=>679,1083=>732,1084=>817,1085=>691,1086=>687,1087=>691,1088=>716,1089=>593,1090=>580,1091=>652,1092=>992,1093=>645,1094=>741,1095=>687,1096=>1062,1097=>1105,1098=>751,1099=>904,1100=>632,1101=>593,1102=>972,1103=>642,1104=>678,1105=>678,1106=>714,1107=>522,1108=>593,1109=>595,1110=>343,1111=>343,1112=>343,1113=>991,1114=>956,1115=>734,1116=>679,1117=>701,1118=>652,1119=>691,1120=>1093,1121=>869,1122=>840,1123=>736,1124=>1012,1125=>839,1126=>992,1127=>832,1128=>1358,1129=>1121,1130=>850,1131=>687,1132=>1236,1133=>1007,1134=>696,1135=>557,1136=>1075,1137=>1061,1138=>850,1139=>687,1140=>850,1141=>695,1142=>850,1143=>695,1144=>1148,1145=>1043,1146=>1074,1147=>863,1148=>1405,1149=>1173,1150=>1093,1151=>869,1152=>734,1153=>593,1154=>652,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>957,1163=>807,1164=>762,1165=>611,1166=>733,1167=>716,1168=>637,1169=>522,1170=>666,1171=>543,1172=>808,1173=>669,1174=>1224,1175=>995,1176=>710,1177=>581,1178=>775,1179=>679,1180=>817,1181=>679,1182=>817,1183=>679,1184=>1015,1185=>826,1186=>956,1187=>808,1188=>1103,1189=>874,1190=>1273,1191=>1017,1192=>952,1193=>858,1194=>734,1195=>593,1196=>682,1197=>580,1198=>724,1199=>652,1200=>724,1201=>652,1202=>771,1203=>645,1204=>1112,1205=>1000,1206=>808,1207=>687,1208=>808,1209=>687,1210=>808,1211=>712,1212=>1026,1213=>810,1214=>1026,1215=>810,1216=>372,1217=>1224,1218=>995,1219=>775,1220=>630,1221=>951,1222=>805,1223=>837,1224=>691,1225=>957,1226=>807,1227=>808,1228=>687,1229=>1115,1230=>933,1231=>343,1232=>774,1233=>675,1234=>774,1235=>675,1236=>1085,1237=>1048,1238=>683,1239=>678,1240=>849,1241=>678,1242=>849,1243=>678,1244=>1224,1245=>995,1246=>710,1247=>581,1248=>772,1249=>641,1250=>837,1251=>701,1252=>837,1253=>701,1254=>850,1255=>687,1256=>850,1257=>687,1258=>850,1259=>687,1260=>734,1261=>593,1262=>771,1263=>652,1264=>771,1265=>652,1266=>771,1267=>652,1268=>808,1269=>687,1270=>637,1271=>522,1272=>1036,1273=>904,1274=>666,1275=>543,1276=>771,1277=>645,1278=>771,1279=>645,1280=>762,1281=>608,1282=>1159,1283=>893,1284=>1119,1285=>920,1286=>828,1287=>693,1288=>1242,1289=>1017,1290=>1289,1291=>1013,1292=>839,1293=>638,1294=>938,1295=>803,1296=>696,1297=>557,1298=>831,1299=>732,1300=>1286,1301=>1068,1302=>1065,1303=>979,1304=>1082,1305=>1013,1306=>850,1307=>716,1308=>1103,1309=>924,1310=>817,1311=>679,1312=>1267,1313=>1059,1314=>1273,1315=>1017,1316=>957,1317=>807,1329=>813,1330=>729,1331=>728,1332=>731,1333=>729,1334=>733,1335=>652,1336=>720,1337=>903,1338=>728,1339=>666,1340=>558,1341=>961,1342=>788,1343=>713,1344=>651,1345=>730,1346=>715,1347=>704,1348=>780,1349=>689,1350=>715,1351=>708,1352=>731,1353=>677,1354=>867,1355=>711,1356=>780,1357=>731,1358=>715,1359=>693,1360=>666,1361=>698,1362=>576,1363=>833,1364=>698,1365=>763,1366=>855,1369=>330,1370=>342,1371=>308,1372=>374,1373=>313,1374=>461,1375=>468,1377=>938,1378=>642,1379=>704,1380=>708,1381=>642,1382=>644,1383=>565,1384=>642,1385=>756,1386=>704,1387=>643,1388=>310,1389=>984,1390=>638,1391=>643,1392=>643,1393=>603,1394=>643,1395=>642,1396=>643,1397=>309,1398=>643,1399=>486,1400=>643,1401=>366,1402=>938,1403=>573,1404=>666,1405=>643,1406=>643,1407=>934,1408=>643,1409=>643,1410=>479,1411=>934,1412=>648,1413=>620,1414=>813,1415=>812,1417=>360,1418=>374,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>415,1471=>0,1472=>372,1473=>0,1474=>0,1475=>372,1478=>497,1479=>0,1488=>728,1489=>610,1490=>447,1491=>588,1492=>687,1493=>343,1494=>400,1495=>687,1496=>679,1497=>294,1498=>578,1499=>566,1500=>605,1501=>696,1502=>724,1503=>343,1504=>453,1505=>680,1506=>666,1507=>675,1508=>658,1509=>661,1510=>653,1511=>736,1512=>602,1513=>758,1514=>683,1520=>664,1521=>567,1522=>519,1523=>444,1524=>710,1542=>667,1543=>667,1545=>884,1546=>1157,1548=>380,1557=>0,1563=>400,1567=>580,1569=>511,1570=>343,1571=>343,1572=>622,1573=>343,1574=>917,1575=>343,1576=>1005,1577=>590,1578=>1005,1579=>1005,1580=>721,1581=>721,1582=>721,1583=>513,1584=>513,1585=>576,1586=>576,1587=>1380,1588=>1380,1589=>1345,1590=>1345,1591=>1039,1592=>1039,1593=>683,1594=>683,1600=>342,1601=>1162,1602=>894,1603=>917,1604=>868,1605=>733,1606=>854,1607=>590,1608=>622,1609=>917,1610=>917,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>610,1633=>610,1634=>610,1635=>610,1636=>610,1637=>610,1638=>610,1639=>610,1640=>610,1641=>610,1642=>610,1643=>374,1644=>380,1645=>545,1646=>1005,1647=>894,1648=>0,1652=>292,1657=>1005,1658=>1005,1659=>1005,1660=>1005,1661=>1005,1662=>1005,1663=>1005,1664=>1005,1665=>721,1666=>721,1667=>721,1668=>721,1669=>721,1670=>721,1671=>721,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>576,1682=>576,1683=>576,1684=>576,1685=>681,1686=>576,1687=>576,1688=>576,1689=>576,1690=>1380,1691=>1380,1692=>1380,1693=>1345,1694=>1345,1695=>1039,1696=>683,1697=>1162,1698=>1162,1699=>1162,1700=>1162,1701=>1162,1702=>1162,1703=>894,1704=>894,1705=>1024,1706=>1271,1707=>1024,1708=>917,1709=>917,1710=>917,1711=>1024,1712=>1024,1713=>1024,1714=>1024,1715=>1024,1716=>1024,1717=>868,1718=>868,1719=>868,1720=>868,1721=>854,1722=>854,1723=>854,1724=>854,1725=>854,1726=>938,1727=>721,1734=>622,1740=>917,1742=>917,1749=>590,1776=>610,1777=>610,1778=>610,1779=>610,1780=>610,1781=>610,1782=>610,1783=>610,1784=>610,1785=>610,1984=>696,1985=>696,1986=>696,1987=>696,1988=>696,1989=>696,1990=>696,1991=>696,1992=>696,1993=>696,1994=>343,1995=>547,1996=>543,1997=>652,1998=>691,1999=>691,2000=>594,2001=>691,2002=>904,2003=>551,2004=>551,2005=>627,2006=>688,2007=>444,2008=>1022,2009=>506,2010=>826,2011=>691,2012=>652,2013=>912,2014=>627,2015=>707,2016=>506,2017=>652,2018=>574,2019=>627,2020=>627,2021=>627,2022=>574,2023=>574,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>380,2037=>380,2040=>691,2041=>691,2042=>415,3647=>696,3713=>790,3714=>748,3716=>749,3719=>569,3720=>742,3722=>744,3725=>761,3732=>706,3733=>704,3734=>747,3735=>819,3737=>730,3738=>727,3739=>727,3740=>922,3741=>827,3742=>866,3743=>866,3745=>836,3746=>761,3747=>770,3749=>769,3751=>713,3754=>827,3755=>1031,3757=>724,3758=>784,3759=>934,3760=>688,3761=>0,3762=>610,3763=>610,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>670,3776=>516,3777=>860,3778=>516,3779=>650,3780=>632,3782=>759,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>771,3793=>771,3794=>693,3795=>836,3796=>729,3797=>729,3798=>849,3799=>790,3800=>759,3801=>910,3804=>1363,3805=>1363,4256=>918,4257=>744,4258=>739,4259=>837,4260=>649,4261=>773,4262=>857,4263=>889,4264=>530,4265=>633,4266=>857,4267=>900,4268=>643,4269=>903,4270=>814,4271=>752,4272=>869,4273=>643,4274=>643,4275=>886,4276=>886,4277=>733,4278=>653,4279=>643,4280=>646,4281=>643,4282=>790,4283=>902,4284=>633,4285=>619,4286=>643,4287=>778,4288=>892,4289=>601,4290=>742,4291=>616,4292=>633,4293=>742,4304=>553,4305=>552,4306=>596,4307=>815,4308=>562,4309=>563,4310=>553,4311=>827,4312=>553,4313=>543,4314=>1074,4315=>563,4316=>563,4317=>812,4318=>552,4319=>591,4320=>822,4321=>563,4322=>690,4323=>583,4324=>813,4325=>562,4326=>813,4327=>563,4328=>563,4329=>563,4330=>632,4331=>563,4332=>563,4333=>552,4334=>563,4335=>563,4336=>558,4337=>604,4338=>552,4339=>552,4340=>553,4341=>605,4342=>852,4343=>635,4344=>563,4345=>596,4346=>542,4347=>684,4348=>368,5121=>774,5122=>774,5123=>774,5124=>774,5125=>905,5126=>905,5127=>905,5129=>905,5130=>905,5131=>905,5132=>1018,5133=>1009,5134=>1018,5135=>1009,5136=>1018,5137=>1009,5138=>1149,5139=>1140,5140=>1149,5141=>1140,5142=>905,5143=>1149,5144=>1142,5145=>1149,5146=>1142,5147=>905,5149=>310,5150=>529,5151=>425,5152=>425,5153=>395,5154=>395,5155=>395,5156=>395,5157=>564,5158=>470,5159=>310,5160=>395,5161=>395,5162=>395,5163=>1213,5164=>986,5165=>1216,5166=>1297,5167=>774,5168=>774,5169=>774,5170=>774,5171=>886,5172=>886,5173=>886,5175=>886,5176=>886,5177=>886,5178=>1018,5179=>1009,5180=>1018,5181=>1009,5182=>1018,5183=>1009,5184=>1149,5185=>1140,5186=>1149,5187=>1140,5188=>1149,5189=>1142,5190=>1149,5191=>1142,5192=>886,5193=>576,5194=>229,5196=>812,5197=>812,5198=>812,5199=>812,5200=>815,5201=>815,5202=>815,5204=>815,5205=>815,5206=>815,5207=>1056,5208=>1048,5209=>1056,5210=>1048,5211=>1056,5212=>1048,5213=>1060,5214=>1054,5215=>1060,5216=>1054,5217=>1060,5218=>1052,5219=>1060,5220=>1052,5221=>1060,5222=>483,5223=>1005,5224=>1005,5225=>1023,5226=>1017,5227=>743,5228=>743,5229=>743,5230=>743,5231=>743,5232=>743,5233=>743,5234=>743,5235=>743,5236=>1029,5237=>975,5238=>980,5239=>975,5240=>980,5241=>975,5242=>1029,5243=>975,5244=>1029,5245=>975,5246=>980,5247=>975,5248=>980,5249=>975,5250=>980,5251=>501,5252=>501,5253=>938,5254=>938,5255=>938,5256=>938,5257=>743,5258=>743,5259=>743,5260=>743,5261=>743,5262=>743,5263=>743,5264=>743,5265=>743,5266=>1029,5267=>975,5268=>1029,5269=>975,5270=>1029,5271=>975,5272=>1029,5273=>975,5274=>1029,5275=>975,5276=>1029,5277=>975,5278=>1029,5279=>975,5280=>1029,5281=>501,5282=>501,5283=>626,5284=>626,5285=>626,5286=>626,5287=>626,5288=>626,5289=>626,5290=>626,5291=>626,5292=>881,5293=>854,5294=>863,5295=>874,5296=>863,5297=>874,5298=>881,5299=>874,5300=>881,5301=>874,5302=>863,5303=>874,5304=>863,5305=>874,5306=>863,5307=>436,5308=>548,5309=>436,5312=>988,5313=>988,5314=>988,5315=>988,5316=>931,5317=>931,5318=>931,5319=>931,5320=>931,5321=>1238,5322=>1247,5323=>1200,5324=>1228,5325=>1200,5326=>1228,5327=>931,5328=>660,5329=>497,5330=>660,5331=>988,5332=>988,5333=>988,5334=>988,5335=>931,5336=>931,5337=>931,5338=>931,5339=>931,5340=>1231,5341=>1247,5342=>1283,5343=>1228,5344=>1283,5345=>1228,5346=>1228,5347=>1214,5348=>1228,5349=>1214,5350=>1283,5351=>1228,5352=>1283,5353=>1228,5354=>660,5356=>886,5357=>730,5358=>730,5359=>730,5360=>730,5361=>730,5362=>730,5363=>730,5364=>730,5365=>730,5366=>998,5367=>958,5368=>967,5369=>989,5370=>967,5371=>989,5372=>998,5373=>958,5374=>998,5375=>958,5376=>967,5377=>989,5378=>967,5379=>989,5380=>967,5381=>493,5382=>460,5383=>493,5392=>923,5393=>923,5394=>923,5395=>1136,5396=>1136,5397=>1136,5398=>1136,5399=>1209,5400=>1202,5401=>1209,5402=>1202,5403=>1209,5404=>1202,5405=>1431,5406=>1420,5407=>1431,5408=>1420,5409=>1431,5410=>1420,5411=>1431,5412=>1420,5413=>746,5414=>776,5415=>776,5416=>776,5417=>776,5418=>776,5419=>776,5420=>776,5421=>776,5422=>776,5423=>1003,5424=>1003,5425=>1013,5426=>996,5427=>1013,5428=>996,5429=>1003,5430=>1003,5431=>1003,5432=>1003,5433=>1013,5434=>996,5435=>1013,5436=>996,5437=>1013,5438=>495,5440=>395,5441=>510,5442=>1033,5443=>1033,5444=>976,5445=>976,5446=>976,5447=>976,5448=>733,5449=>733,5450=>733,5451=>733,5452=>733,5453=>733,5454=>1003,5455=>959,5456=>495,5458=>886,5459=>774,5460=>774,5461=>774,5462=>774,5463=>928,5464=>928,5465=>928,5466=>928,5467=>1172,5468=>1142,5469=>602,5470=>812,5471=>812,5472=>812,5473=>812,5474=>812,5475=>812,5476=>815,5477=>815,5478=>815,5479=>815,5480=>1060,5481=>1052,5482=>548,5492=>977,5493=>977,5494=>977,5495=>977,5496=>977,5497=>977,5498=>977,5499=>618,5500=>837,5501=>510,5502=>1238,5503=>1238,5504=>1238,5505=>1238,5506=>1238,5507=>1238,5508=>1238,5509=>989,5514=>977,5515=>977,5516=>977,5517=>977,5518=>1591,5519=>1591,5520=>1591,5521=>1295,5522=>1295,5523=>1591,5524=>1591,5525=>848,5526=>1273,5536=>988,5537=>988,5538=>931,5539=>931,5540=>931,5541=>931,5542=>660,5543=>776,5544=>776,5545=>776,5546=>776,5547=>776,5548=>776,5549=>776,5550=>495,5551=>743,5598=>830,5601=>830,5702=>496,5703=>496,5742=>413,5743=>1238,5744=>1591,5745=>2016,5746=>2016,5747=>1720,5748=>1678,5749=>2016,5750=>2016,5760=>543,5761=>637,5762=>945,5763=>1254,5764=>1563,5765=>1871,5766=>627,5767=>936,5768=>1254,5769=>1559,5770=>1871,5771=>569,5772=>877,5773=>1187,5774=>1497,5775=>1807,5776=>637,5777=>945,5778=>1240,5779=>1555,5780=>1871,5781=>569,5782=>569,5783=>789,5784=>1234,5785=>1559,5786=>740,5787=>638,5788=>638,7424=>652,7425=>833,7426=>1048,7427=>608,7428=>593,7429=>676,7430=>676,7431=>559,7432=>557,7433=>343,7434=>494,7435=>665,7436=>539,7437=>817,7438=>701,7439=>687,7440=>593,7441=>660,7442=>660,7443=>660,7444=>1094,7446=>687,7447=>687,7448=>556,7449=>642,7450=>642,7451=>580,7452=>634,7453=>737,7454=>948,7455=>695,7456=>652,7457=>924,7458=>582,7459=>646,7462=>539,7463=>652,7464=>691,7465=>556,7466=>781,7467=>732,7468=>487,7469=>683,7470=>480,7472=>523,7473=>430,7474=>430,7475=>517,7476=>527,7477=>234,7478=>234,7479=>488,7480=>401,7481=>626,7482=>527,7483=>527,7484=>535,7485=>509,7486=>461,7487=>485,7488=>430,7489=>511,7490=>695,7491=>458,7492=>458,7493=>479,7494=>712,7495=>479,7496=>479,7497=>479,7498=>479,7499=>386,7500=>386,7501=>479,7502=>219,7503=>487,7504=>664,7505=>456,7506=>488,7507=>414,7508=>488,7509=>488,7510=>479,7511=>388,7512=>456,7513=>462,7514=>664,7515=>501,7517=>451,7518=>429,7519=>433,7520=>493,7521=>406,7522=>219,7523=>315,7524=>456,7525=>501,7526=>451,7527=>429,7528=>451,7529=>493,7530=>406,7543=>716,7544=>527,7547=>545,7549=>747,7557=>514,7579=>479,7580=>414,7581=>414,7582=>488,7583=>386,7584=>377,7585=>348,7586=>479,7587=>456,7588=>347,7589=>281,7590=>347,7591=>347,7592=>431,7593=>326,7594=>330,7595=>370,7596=>664,7597=>664,7598=>562,7599=>562,7600=>448,7601=>488,7602=>542,7603=>422,7604=>396,7605=>388,7606=>583,7607=>494,7608=>399,7609=>451,7610=>501,7611=>417,7612=>523,7613=>470,7614=>455,7615=>425,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>774,7681=>675,7682=>762,7683=>716,7684=>762,7685=>716,7686=>762,7687=>716,7688=>734,7689=>593,7690=>830,7691=>716,7692=>830,7693=>716,7694=>830,7695=>716,7696=>830,7697=>716,7698=>830,7699=>716,7700=>683,7701=>678,7702=>683,7703=>678,7704=>683,7705=>678,7706=>683,7707=>678,7708=>683,7709=>678,7710=>683,7711=>435,7712=>821,7713=>716,7714=>837,7715=>712,7716=>837,7717=>712,7718=>837,7719=>712,7720=>837,7721=>712,7722=>837,7723=>712,7724=>372,7725=>343,7726=>372,7727=>343,7728=>775,7729=>665,7730=>775,7731=>665,7732=>775,7733=>665,7734=>637,7735=>343,7736=>637,7737=>343,7738=>637,7739=>343,7740=>637,7741=>343,7742=>995,7743=>1042,7744=>995,7745=>1042,7746=>995,7747=>1042,7748=>837,7749=>712,7750=>837,7751=>712,7752=>837,7753=>712,7754=>837,7755=>712,7756=>850,7757=>687,7758=>850,7759=>687,7760=>850,7761=>687,7762=>850,7763=>687,7764=>733,7765=>716,7766=>733,7767=>716,7768=>770,7769=>493,7770=>770,7771=>493,7772=>770,7773=>493,7774=>770,7775=>493,7776=>720,7777=>595,7778=>720,7779=>595,7780=>720,7781=>595,7782=>720,7783=>595,7784=>720,7785=>595,7786=>682,7787=>478,7788=>682,7789=>478,7790=>682,7791=>478,7792=>682,7793=>478,7794=>812,7795=>712,7796=>812,7797=>712,7798=>812,7799=>712,7800=>812,7801=>712,7802=>812,7803=>712,7804=>774,7805=>652,7806=>774,7807=>652,7808=>1103,7809=>924,7810=>1103,7811=>924,7812=>1103,7813=>924,7814=>1103,7815=>924,7816=>1103,7817=>924,7818=>771,7819=>645,7820=>771,7821=>645,7822=>724,7823=>652,7824=>725,7825=>582,7826=>725,7827=>582,7828=>725,7829=>582,7830=>712,7831=>478,7832=>924,7833=>652,7834=>675,7835=>435,7836=>435,7837=>435,7838=>896,7839=>687,7840=>774,7841=>675,7842=>774,7843=>675,7844=>774,7845=>675,7846=>774,7847=>675,7848=>774,7849=>675,7850=>774,7851=>675,7852=>774,7853=>675,7854=>774,7855=>675,7856=>774,7857=>675,7858=>774,7859=>675,7860=>774,7861=>675,7862=>774,7863=>675,7864=>683,7865=>678,7866=>683,7867=>678,7868=>683,7869=>678,7870=>683,7871=>678,7872=>683,7873=>678,7874=>683,7875=>678,7876=>683,7877=>678,7878=>683,7879=>678,7880=>372,7881=>343,7882=>372,7883=>343,7884=>850,7885=>687,7886=>850,7887=>687,7888=>850,7889=>687,7890=>850,7891=>687,7892=>850,7893=>687,7894=>850,7895=>687,7896=>850,7897=>687,7898=>874,7899=>687,7900=>874,7901=>687,7902=>874,7903=>687,7904=>874,7905=>687,7906=>874,7907=>687,7908=>812,7909=>712,7910=>812,7911=>712,7912=>835,7913=>712,7914=>835,7915=>712,7916=>835,7917=>712,7918=>835,7919=>712,7920=>835,7921=>712,7922=>724,7923=>652,7924=>724,7925=>652,7926=>724,7927=>652,7928=>724,7929=>652,7930=>953,7931=>644,7936=>687,7937=>687,7938=>687,7939=>687,7940=>687,7941=>687,7942=>687,7943=>687,7944=>774,7945=>774,7946=>1041,7947=>1043,7948=>935,7949=>963,7950=>835,7951=>859,7952=>557,7953=>557,7954=>557,7955=>557,7956=>557,7957=>557,7960=>792,7961=>794,7962=>1100,7963=>1096,7964=>1023,7965=>1052,7968=>712,7969=>712,7970=>712,7971=>712,7972=>712,7973=>712,7974=>712,7975=>712,7976=>945,7977=>951,7978=>1250,7979=>1250,7980=>1180,7981=>1206,7982=>1054,7983=>1063,7984=>390,7985=>390,7986=>390,7987=>390,7988=>390,7989=>390,7990=>390,7991=>390,7992=>483,7993=>489,7994=>777,7995=>785,7996=>712,7997=>738,7998=>604,7999=>604,8000=>687,8001=>687,8002=>687,8003=>687,8004=>687,8005=>687,8008=>892,8009=>933,8010=>1221,8011=>1224,8012=>1053,8013=>1082,8016=>675,8017=>675,8018=>675,8019=>675,8020=>675,8021=>675,8022=>675,8023=>675,8025=>930,8027=>1184,8029=>1199,8031=>1049,8032=>869,8033=>869,8034=>869,8035=>869,8036=>869,8037=>869,8038=>869,8039=>869,8040=>909,8041=>958,8042=>1246,8043=>1251,8044=>1076,8045=>1105,8046=>1028,8047=>1076,8048=>687,8049=>687,8050=>557,8051=>557,8052=>712,8053=>712,8054=>390,8055=>390,8056=>687,8057=>687,8058=>675,8059=>675,8060=>869,8061=>869,8064=>687,8065=>687,8066=>687,8067=>687,8068=>687,8069=>687,8070=>687,8071=>687,8072=>774,8073=>774,8074=>1041,8075=>1043,8076=>935,8077=>963,8078=>835,8079=>859,8080=>712,8081=>712,8082=>712,8083=>712,8084=>712,8085=>712,8086=>712,8087=>712,8088=>945,8089=>951,8090=>1250,8091=>1250,8092=>1180,8093=>1206,8094=>1054,8095=>1063,8096=>869,8097=>869,8098=>869,8099=>869,8100=>869,8101=>869,8102=>869,8103=>869,8104=>909,8105=>958,8106=>1246,8107=>1251,8108=>1076,8109=>1105,8110=>1028,8111=>1076,8112=>687,8113=>687,8114=>687,8115=>687,8116=>687,8118=>687,8119=>687,8120=>774,8121=>774,8122=>876,8123=>797,8124=>774,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>712,8131=>712,8132=>712,8134=>712,8135=>712,8136=>929,8137=>846,8138=>1080,8139=>1009,8140=>837,8141=>500,8142=>500,8143=>500,8144=>390,8145=>390,8146=>390,8147=>390,8150=>390,8151=>390,8152=>372,8153=>372,8154=>621,8155=>563,8157=>500,8158=>500,8159=>500,8160=>675,8161=>675,8162=>675,8163=>675,8164=>716,8165=>716,8166=>675,8167=>675,8168=>724,8169=>724,8170=>1020,8171=>980,8172=>838,8173=>500,8174=>500,8175=>500,8178=>869,8179=>869,8180=>869,8182=>869,8183=>869,8184=>1065,8185=>891,8186=>1084,8187=>894,8188=>850,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>696,8200=>380,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>415,8209=>415,8210=>696,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>380,8217=>380,8218=>380,8219=>380,8220=>657,8221=>657,8222=>657,8223=>657,8224=>500,8225=>500,8226=>639,8227=>639,8228=>333,8229=>667,8230=>1000,8231=>348,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1440,8241=>1887,8242=>264,8243=>447,8244=>630,8245=>264,8246=>447,8247=>630,8248=>733,8249=>412,8250=>412,8251=>972,8252=>627,8253=>580,8254=>500,8255=>828,8256=>828,8257=>329,8258=>1023,8259=>500,8260=>167,8261=>457,8262=>457,8263=>1030,8264=>829,8265=>829,8266=>513,8267=>636,8268=>500,8269=>500,8270=>523,8271=>400,8272=>828,8273=>523,8274=>556,8275=>1000,8276=>828,8277=>838,8278=>684,8279=>813,8280=>838,8281=>838,8282=>380,8283=>872,8284=>838,8285=>380,8286=>380,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>438,8305=>219,8308=>438,8309=>438,8310=>438,8311=>438,8312=>438,8313=>438,8314=>528,8315=>528,8316=>528,8317=>288,8318=>288,8319=>456,8320=>438,8321=>438,8322=>438,8323=>438,8324=>438,8325=>438,8326=>438,8327=>438,8328=>438,8329=>438,8330=>528,8331=>528,8332=>528,8333=>288,8334=>288,8336=>458,8337=>479,8338=>488,8339=>413,8340=>479,8341=>456,8342=>487,8343=>219,8344=>664,8345=>456,8346=>479,8347=>381,8348=>388,8352=>929,8353=>696,8354=>696,8355=>696,8356=>696,8357=>1042,8358=>837,8359=>1518,8360=>1205,8361=>1103,8362=>904,8363=>696,8364=>696,8365=>696,8366=>696,8367=>1392,8368=>696,8369=>696,8370=>696,8371=>696,8372=>859,8373=>696,8376=>696,8377=>696,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1120,8449=>1170,8450=>734,8451=>1211,8452=>896,8453=>1091,8454=>1144,8455=>614,8456=>698,8457=>1086,8459=>1073,8460=>913,8461=>888,8462=>712,8463=>712,8464=>597,8465=>697,8466=>856,8467=>472,8468=>974,8469=>837,8470=>1203,8471=>1000,8472=>697,8473=>750,8474=>850,8475=>938,8476=>814,8477=>801,8478=>896,8479=>710,8480=>1020,8481=>1281,8482=>1000,8483=>755,8484=>754,8485=>578,8486=>850,8487=>850,8488=>763,8489=>338,8490=>775,8491=>774,8492=>928,8493=>818,8494=>854,8495=>636,8496=>729,8497=>808,8498=>683,8499=>1184,8500=>465,8501=>794,8502=>731,8503=>494,8504=>684,8505=>380,8506=>945,8507=>1348,8508=>790,8509=>737,8510=>654,8511=>863,8512=>840,8513=>775,8514=>557,8515=>637,8516=>760,8517=>830,8518=>716,8519=>678,8520=>343,8521=>343,8523=>872,8526=>547,8528=>1035,8529=>1035,8530=>1483,8531=>1035,8532=>1035,8533=>1035,8534=>1035,8535=>1035,8536=>1035,8537=>1035,8538=>1035,8539=>1035,8540=>1035,8541=>1035,8542=>1035,8543=>615,8544=>372,8545=>659,8546=>945,8547=>1099,8548=>774,8549=>1099,8550=>1386,8551=>1672,8552=>1121,8553=>771,8554=>1120,8555=>1407,8556=>637,8557=>734,8558=>830,8559=>995,8560=>343,8561=>607,8562=>872,8563=>984,8564=>652,8565=>962,8566=>1227,8567=>1491,8568=>969,8569=>645,8570=>969,8571=>1233,8572=>343,8573=>593,8574=>716,8575=>1042,8576=>1289,8577=>830,8578=>1289,8579=>734,8580=>593,8581=>734,8585=>1035,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>774,8705=>696,8706=>544,8707=>683,8708=>683,8709=>856,8710=>697,8711=>697,8712=>896,8713=>896,8714=>750,8715=>896,8716=>896,8717=>750,8718=>636,8719=>787,8720=>787,8721=>718,8722=>838,8723=>838,8724=>696,8725=>365,8726=>696,8727=>838,8728=>626,8729=>380,8730=>667,8731=>667,8732=>667,8733=>712,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>812,8744=>812,8745=>812,8746=>812,8747=>610,8748=>929,8749=>1295,8750=>563,8751=>977,8752=>1313,8753=>563,8754=>563,8755=>563,8756=>696,8757=>696,8758=>294,8759=>696,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>838,8787=>838,8788=>1063,8789=>1063,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>841,8809=>841,8810=>1047,8811=>1047,8812=>500,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>812,8845=>812,8846=>812,8847=>838,8848=>838,8849=>838,8850=>838,8851=>796,8852=>796,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>914,8867=>914,8868=>914,8869=>914,8870=>542,8871=>542,8872=>914,8873=>914,8874=>914,8875=>914,8876=>914,8877=>914,8878=>914,8879=>914,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>542,8891=>812,8892=>812,8893=>812,8894=>838,8895=>838,8896=>843,8897=>843,8898=>843,8899=>843,8900=>494,8901=>380,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>812,8911=>812,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1158,8947=>896,8948=>750,8949=>896,8950=>896,8951=>750,8952=>896,8953=>896,8954=>1158,8955=>896,8956=>750,8957=>896,8958=>750,8959=>896,8960=>602,8961=>602,8962=>716,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>457,8969=>457,8970=>457,8971=>457,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>539,8984=>928,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>610,8993=>610,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>390,9076=>716,9077=>869,9082=>687,9085=>863,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>610,9166=>838,9167=>945,9187=>873,9189=>769,9192=>696,9250=>716,9251=>716,9312=>847,9313=>847,9314=>847,9315=>847,9316=>847,9317=>847,9318=>847,9319=>847,9320=>847,9321=>847,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>840,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>769,9697=>769,9698=>769,9699=>769,9700=>769,9701=>769,9702=>639,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>347,10076=>347,10077=>587,10078=>587,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>847,10103=>847,10104=>847,10105=>847,10106=>847,10107=>847,10108=>847,10109=>847,10110=>847,10111=>847,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>457,10182=>457,10208=>494,10214=>487,10215=>487,10216=>457,10217=>457,10218=>721,10219=>721,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>781,10241=>781,10242=>781,10243=>781,10244=>781,10245=>781,10246=>781,10247=>781,10248=>781,10249=>781,10250=>781,10251=>781,10252=>781,10253=>781,10254=>781,10255=>781,10256=>781,10257=>781,10258=>781,10259=>781,10260=>781,10261=>781,10262=>781,10263=>781,10264=>781,10265=>781,10266=>781,10267=>781,10268=>781,10269=>781,10270=>781,10271=>781,10272=>781,10273=>781,10274=>781,10275=>781,10276=>781,10277=>781,10278=>781,10279=>781,10280=>781,10281=>781,10282=>781,10283=>781,10284=>781,10285=>781,10286=>781,10287=>781,10288=>781,10289=>781,10290=>781,10291=>781,10292=>781,10293=>781,10294=>781,10295=>781,10296=>781,10297=>781,10298=>781,10299=>781,10300=>781,10301=>781,10302=>781,10303=>781,10304=>781,10305=>781,10306=>781,10307=>781,10308=>781,10309=>781,10310=>781,10311=>781,10312=>781,10313=>781,10314=>781,10315=>781,10316=>781,10317=>781,10318=>781,10319=>781,10320=>781,10321=>781,10322=>781,10323=>781,10324=>781,10325=>781,10326=>781,10327=>781,10328=>781,10329=>781,10330=>781,10331=>781,10332=>781,10333=>781,10334=>781,10335=>781,10336=>781,10337=>781,10338=>781,10339=>781,10340=>781,10341=>781,10342=>781,10343=>781,10344=>781,10345=>781,10346=>781,10347=>781,10348=>781,10349=>781,10350=>781,10351=>781,10352=>781,10353=>781,10354=>781,10355=>781,10356=>781,10357=>781,10358=>781,10359=>781,10360=>781,10361=>781,10362=>781,10363=>781,10364=>781,10365=>781,10366=>781,10367=>781,10368=>781,10369=>781,10370=>781,10371=>781,10372=>781,10373=>781,10374=>781,10375=>781,10376=>781,10377=>781,10378=>781,10379=>781,10380=>781,10381=>781,10382=>781,10383=>781,10384=>781,10385=>781,10386=>781,10387=>781,10388=>781,10389=>781,10390=>781,10391=>781,10392=>781,10393=>781,10394=>781,10395=>781,10396=>781,10397=>781,10398=>781,10399=>781,10400=>781,10401=>781,10402=>781,10403=>781,10404=>781,10405=>781,10406=>781,10407=>781,10408=>781,10409=>781,10410=>781,10411=>781,10412=>781,10413=>781,10414=>781,10415=>781,10416=>781,10417=>781,10418=>781,10419=>781,10420=>781,10421=>781,10422=>781,10423=>781,10424=>781,10425=>781,10426=>781,10427=>781,10428=>781,10429=>781,10430=>781,10431=>781,10432=>781,10433=>781,10434=>781,10435=>781,10436=>781,10437=>781,10438=>781,10439=>781,10440=>781,10441=>781,10442=>781,10443=>781,10444=>781,10445=>781,10446=>781,10447=>781,10448=>781,10449=>781,10450=>781,10451=>781,10452=>781,10453=>781,10454=>781,10455=>781,10456=>781,10457=>781,10458=>781,10459=>781,10460=>781,10461=>781,10462=>781,10463=>781,10464=>781,10465=>781,10466=>781,10467=>781,10468=>781,10469=>781,10470=>781,10471=>781,10472=>781,10473=>781,10474=>781,10475=>781,10476=>781,10477=>781,10478=>781,10479=>781,10480=>781,10481=>781,10482=>781,10483=>781,10484=>781,10485=>781,10486=>781,10487=>781,10488=>781,10489=>781,10490=>781,10491=>781,10492=>781,10493=>781,10494=>781,10495=>781,10502=>838,10503=>838,10506=>838,10507=>838,10560=>838,10561=>838,10627=>753,10628=>753,10702=>838,10703=>1046,10704=>1046,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1661,10765=>563,10766=>563,10767=>563,10768=>563,10769=>563,10770=>563,10771=>563,10772=>563,10773=>563,10774=>563,10775=>563,10776=>563,10777=>563,10778=>563,10779=>563,10780=>563,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>838,11023=>838,11024=>838,11025=>838,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>637,11361=>360,11362=>637,11363=>733,11364=>770,11365=>675,11366=>478,11367=>956,11368=>712,11369=>775,11370=>665,11371=>725,11372=>582,11373=>860,11374=>995,11375=>774,11376=>860,11377=>778,11378=>1221,11379=>1056,11380=>652,11381=>698,11382=>565,11383=>782,11385=>538,11386=>687,11387=>559,11388=>219,11389=>487,11390=>720,11391=>725,11568=>691,11569=>941,11570=>941,11571=>725,11572=>725,11573=>725,11574=>676,11575=>774,11576=>774,11577=>683,11578=>683,11579=>802,11580=>989,11581=>761,11582=>623,11583=>761,11584=>941,11585=>941,11586=>373,11587=>740,11588=>837,11589=>914,11590=>672,11591=>737,11592=>680,11593=>683,11594=>602,11595=>1039,11596=>778,11597=>837,11598=>683,11599=>372,11600=>778,11601=>373,11602=>725,11603=>691,11604=>941,11605=>941,11606=>837,11607=>373,11608=>836,11609=>941,11610=>941,11611=>734,11612=>876,11613=>771,11614=>734,11615=>683,11616=>774,11617=>837,11618=>683,11619=>850,11620=>697,11621=>850,11631=>716,11800=>580,11810=>457,11811=>457,11812=>457,11813=>457,11822=>580,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>720,42565=>595,42566=>436,42567=>440,42572=>1405,42573=>1173,42576=>1234,42577=>1027,42580=>1174,42581=>972,42582=>1093,42583=>958,42594=>1085,42595=>924,42596=>1096,42597=>912,42598=>1260,42599=>997,42600=>850,42601=>687,42602=>1037,42603=>868,42604=>1406,42605=>1106,42606=>961,42634=>963,42635=>787,42636=>682,42637=>580,42644=>808,42645=>712,42760=>500,42761=>500,42762=>500,42763=>500,42764=>500,42765=>500,42766=>500,42767=>500,42768=>500,42769=>500,42770=>500,42771=>500,42772=>500,42773=>500,42774=>500,42779=>400,42780=>400,42781=>287,42782=>287,42783=>287,42786=>444,42787=>390,42788=>540,42789=>540,42790=>837,42791=>712,42792=>1031,42793=>857,42794=>696,42795=>557,42800=>559,42801=>595,42802=>1349,42803=>1052,42804=>1284,42805=>1064,42806=>1216,42807=>1054,42808=>1079,42809=>922,42810=>1079,42811=>922,42812=>1035,42813=>922,42814=>698,42815=>549,42822=>850,42823=>542,42824=>683,42825=>531,42826=>918,42827=>814,42830=>1406,42831=>1106,42832=>733,42833=>716,42834=>948,42835=>937,42838=>850,42839=>716,42852=>738,42853=>716,42854=>738,42855=>716,42880=>637,42881=>343,42882=>837,42883=>712,42889=>400,42890=>386,42891=>456,42892=>306,42893=>808,42894=>693,42896=>928,42897=>768,43002=>1062,43003=>683,43004=>733,43005=>995,43006=>372,43007=>1325,61184=>216,61185=>242,61186=>267,61187=>277,61188=>282,61189=>242,61190=>216,61191=>242,61192=>267,61193=>277,61194=>267,61195=>242,61196=>216,61197=>242,61198=>267,61199=>277,61200=>267,61201=>242,61202=>216,61203=>242,61204=>282,61205=>277,61206=>267,61207=>242,61208=>216,61209=>282,63173=>687,64256=>810,64257=>741,64258=>741,64259=>1115,64260=>1116,64261=>808,64262=>1020,64275=>1388,64276=>1384,64277=>1378,64278=>1384,64279=>1713,64285=>294,64286=>0,64287=>519,64288=>665,64289=>939,64290=>788,64291=>920,64292=>786,64293=>857,64294=>869,64295=>821,64296=>890,64297=>838,64298=>758,64299=>758,64300=>758,64301=>758,64302=>728,64303=>728,64304=>728,64305=>610,64306=>447,64307=>588,64308=>687,64309=>437,64310=>485,64312=>679,64313=>435,64314=>578,64315=>566,64316=>605,64318=>724,64320=>453,64321=>680,64323=>675,64324=>658,64326=>653,64327=>736,64328=>602,64329=>758,64330=>683,64331=>343,64332=>610,64333=>566,64334=>658,64335=>710,64338=>1005,64339=>1059,64340=>375,64341=>408,64342=>1005,64343=>1059,64344=>375,64345=>408,64346=>1005,64347=>1059,64348=>375,64349=>408,64350=>1005,64351=>1059,64352=>375,64353=>408,64354=>1005,64355=>1059,64356=>375,64357=>408,64358=>1005,64359=>1059,64360=>375,64361=>408,64362=>1162,64363=>1191,64364=>655,64365=>720,64366=>1162,64367=>1191,64368=>655,64369=>720,64370=>721,64371=>721,64372=>721,64373=>721,64374=>721,64375=>721,64376=>721,64377=>721,64378=>721,64379=>721,64380=>721,64381=>721,64382=>721,64383=>721,64384=>721,64385=>721,64386=>513,64387=>578,64388=>513,64389=>578,64390=>513,64391=>578,64392=>513,64393=>578,64394=>576,64395=>622,64396=>576,64397=>622,64398=>1024,64399=>1024,64400=>582,64401=>582,64402=>1024,64403=>1024,64404=>582,64405=>582,64406=>1024,64407=>1024,64408=>582,64409=>582,64410=>1024,64411=>1024,64412=>582,64413=>582,64414=>854,64415=>900,64416=>854,64417=>900,64418=>375,64419=>408,64426=>938,64427=>880,64428=>693,64429=>660,64467=>824,64468=>843,64469=>476,64470=>552,64473=>622,64474=>627,64488=>375,64489=>408,64508=>917,64509=>1012,64510=>375,64511=>408,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>342,65137=>342,65138=>342,65139=>346,65140=>342,65142=>342,65143=>342,65144=>342,65145=>342,65146=>342,65147=>342,65148=>342,65149=>342,65150=>342,65151=>342,65152=>511,65153=>343,65154=>375,65155=>343,65156=>375,65157=>622,65158=>627,65159=>343,65160=>375,65161=>917,65162=>917,65163=>375,65164=>408,65165=>343,65166=>375,65167=>1005,65168=>1059,65169=>375,65170=>408,65171=>590,65172=>606,65173=>1005,65174=>1059,65175=>375,65176=>408,65177=>1005,65178=>1059,65179=>375,65180=>408,65181=>721,65182=>721,65183=>721,65184=>721,65185=>721,65186=>721,65187=>721,65188=>721,65189=>721,65190=>721,65191=>721,65192=>721,65193=>513,65194=>578,65195=>513,65196=>578,65197=>576,65198=>622,65199=>576,65200=>622,65201=>1380,65202=>1414,65203=>983,65204=>1018,65205=>1380,65206=>1414,65207=>983,65208=>1018,65209=>1345,65210=>1364,65211=>966,65212=>985,65213=>1345,65214=>1364,65215=>966,65216=>985,65217=>1039,65218=>1071,65219=>942,65220=>974,65221=>1039,65222=>1071,65223=>942,65224=>974,65225=>683,65226=>683,65227=>683,65228=>564,65229=>683,65230=>683,65231=>683,65232=>564,65233=>1162,65234=>1191,65235=>655,65236=>720,65237=>894,65238=>901,65239=>655,65240=>720,65241=>917,65242=>931,65243=>582,65244=>582,65245=>868,65246=>893,65247=>375,65248=>408,65249=>733,65250=>784,65251=>619,65252=>670,65253=>854,65254=>900,65255=>375,65256=>408,65257=>590,65258=>606,65259=>693,65260=>660,65261=>622,65262=>627,65263=>917,65264=>1012,65265=>917,65266=>1012,65267=>375,65268=>408,65269=>745,65270=>759,65271=>745,65272=>759,65273=>745,65274=>759,65275=>745,65276=>759,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1113,65535=>600);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         url(./themes/pmahomme/img/left_nav_bg.png) repeat-y right 0% #f3f3f3;    border-right:       1px solid #aaa;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes */.navi_dbName {    font-weight:    bold;    color:          <?php echo $GLOBALS['cfg']['NaviDatabaseNameColor']; ?>;}/******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>}div#recentTableList {    text-align: center;    margin: 20px 10px 0px 10px;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin:             5px 10px 0px 10px;}ul#databaseList {    margin: 0.8em 0px;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     0.3em;    font-style: italic;}ul#databaseList span {    padding: 5px;}ul#databaseList a {    color: #333;    background: url(./themes/pmahomme/img/database.png) no-repeat 0 5px transparent;    display: block;    text-indent: 0;    padding: 5px 5px 5px 25px;    font-style: normal;}div#navidbpageselector {    margin: 0.1em;    text-align: center;}div#navidbpageselector a,div#navidbpageselector select{    color: #333;    margin: 0.2em;}ul#databaseList ul {    margin: 0;    padding: 0;}ul#databaseList li {    list-style: none;    text-indent: 20px;    margin: 0;    padding: 0;}ul#databaseList a:hover {    background-color: #e4e4e4;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#reloadlink a img,div#leftframelinks a img.icon {    margin:        0.3em;    margin-top:    0.7em;    border:        0;}div#leftframelinks a:hover img {}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;}div#left_tableList {margin:10px 10px 0 10px;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            2px 0;    white-space:        nowrap;}#newtable {    margin-top: 15px !important;}#newtable a {    display: block;    padding: 1px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    border: 1px solid #aaa;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    border-radius: 20px;}#newtable li:hover {    background: transparent !important;}#newtable a:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}#newtable li a:hover {    text-decoration: none;}select{    -moz-border-radius:2px 2px 2px 2px;    -moz-box-shadow:0 1px 2px #DDDDDD;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(./themes/pmahomme/img/input_bg.gif);}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: #e4e4e4;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         #e4e4e4;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#reloadlink {    clear: both;    float: <?php echo $right; ?>;    display: block;    padding: 1em;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 0;    position: relative;    right: 3ex;}#fast_filter {    width: 85%;    padding: 0.1em;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the Drizzle extension * * WARNING - EXPERIMENTAL, never use in production, drizzle module segfaults often and when you least expect it to * * TODO: This file and drizzle-wrappers.lib.php should be devoid of any segault related hacks. * TODO: Crashing versions of drizzle module and/or libdrizzle should be blacklisted * * @package PhpMyAdmin-DBI-Drizzle */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';require_once './libraries/dbi/drizzle-wrappers.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    define('PMA_MYSQL_CLIENT_API', (int)drizzle_version());}/** * Helper function for connecting to the database server * * @param   PMA_Drizzle  $drizzle * @param   string       $host * @param   int          $port * @param   string       $uds * @param   string       $user * @param   string       $password * @param   string       $db * @param   int          $options * @return  PMA_DrizzleCon */function PMA_DBI_real_connect($drizzle, $host, $port, $uds, $user, $password, $db = null, $options = DRIZZLE_CON_NONE){    if ($uds) {        $con = $drizzle->addUds($uds, $user, $password, $db, $options);    } else {        $con = $drizzle->addTcp($host, $port, $user, $password, $db, $options);    }    return $con;}/** * connects to the database server * * @param   string  $user           drizzle user name * @param   string  $password       drizzle user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    if (strtolower($GLOBALS['cfg']['Server']['connect_type']) == 'tcp') {        $GLOBALS['cfg']['Server']['socket'] = '';    }    $drizzle = new PMA_Drizzle();    $client_flags = 0;    /* Optionally compress connection */    if ($GLOBALS['cfg']['Server']['compress']) {        $client_flags |= DRIZZLE_CAPABILITIES_COMPRESS;    }    /* Optionally enable SSL */    if ($GLOBALS['cfg']['Server']['ssl']) {        $client_flags |= DRIZZLE_CAPABILITIES_SSL;    }    if (!$server) {        $link = @PMA_DBI_real_connect($drizzle, $cfg['Server']['host'], $server_port, $server_socket, $user, $password, false, $client_flags);        // Retry with empty password if we're allowed to        if ($link == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = @PMA_DBI_real_connect($drizzle, $cfg['Server']['host'], $server_port, $server_socket, $user, null, false, $client_flags);        }    } else {        $link = @PMA_DBI_real_connect($drizzle, $server['host'], $server_port, $server_socket, $user, $password);    }    if ($link == false) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'drizzle-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string          $dbname  database name to select * @param PMA_DrizzleCom  $link    connection object * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return $link->selectDb($dbname);}/** * runs a query and returns the result * * @param   string          $query    query to execute * @param   PMA_DrizzleCon  $link     connection object * @param   int             $options * @return  PMA_DrizzleResult */function PMA_DBI_real_query($query, $link, $options){    $buffer_mode = $options & PMA_DBI_QUERY_UNBUFFERED        ? PMA_Drizzle::BUFFER_ROW        : PMA_Drizzle::BUFFER_RESULT;    $res = $link->query($query, $buffer_mode);    return $res;}/** * returns array of rows with associative and numeric keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_array($result){    return $result->fetchRow(PMA_Drizzle::FETCH_BOTH);}/** * returns array of rows with associative keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return $result->fetchRow(PMA_Drizzle::FETCH_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_row($result){    return $result->fetchRow(PMA_Drizzle::FETCH_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   PMA_DrizzleResult  $result * @param   int                $offset * @return  boolean true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return $result->seek($offset);}/** * Frees memory associated with the result * * @param  PMA_DrizzleResult  $result */function PMA_DBI_free_result($result){    if ($result instanceof PMA_DrizzleResult) {        $result->free();    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results() {    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  bool         false */function PMA_DBI_next_result() {    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * @param   PMA_DrizzleCon  $link   connection object * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    $str = $link->port()        ? $link->host() . ':' . $link->port() . ' via TCP/IP'        : 'Localhost via UNIX socket';    return $str;}/** * Returns the version of the Drizzle protocol used * @param   PMA_DrizzleCon  $link   connection object * @return  int         version of the Drizzle protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return $link->protocolVersion();}/** * returns a string that represents the client library version * @return  string          Drizzle client library version */function PMA_DBI_get_client_info(){    return 'libdrizzle (Drizzle ' . drizzle_version() . ')';}/** * returns last error message or false if no errors occured * * @param   PMA_DrizzleCon  $link  connection object * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = drizzle_con_errno($link->getConnectionObject());        $error_message = drizzle_con_error($link->getConnectionObject());    } else {        $error_number = drizzle_errno();        $error_message = drizzle_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   PMA_DrizzleResult  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @$result->numRows();    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   PMA_DrizzleCon  $link  connection object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // copied from mysql and mysqli    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   PMA_DrizzleResult  $link            connection object * @param   bool               $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return $link->affectedRows();    }}/** * returns metainfo for fields in $result * * @param   PMA_DrizzleResult  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    /*$typeAr[DRIZZLE_COLUMN_TYPE_DECIMAL]     = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_NEWDECIMAL]  = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_BIT]         = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_TINY]        = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_SHORT]       = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_LONG]        = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_FLOAT]       = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_DOUBLE]      = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_NULL]        = 'null';    $typeAr[DRIZZLE_COLUMN_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[DRIZZLE_COLUMN_TYPE_LONGLONG]    = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_INT24]       = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DATE]        = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_TIME]        = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_DATETIME]    = 'datetime';    $typeAr[DRIZZLE_COLUMN_TYPE_YEAR]        = 'year';    $typeAr[DRIZZLE_COLUMN_TYPE_NEWDATE]     = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_ENUM]        = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_SET]         = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_VIRTUAL]     = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_TINY_BLOB]   = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_LONG_BLOB]   = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_BLOB]        = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_VAR_STRING]  = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_VARCHAR]     = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_STRING]      = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_GEOMETRY]    = 'geometry';*/    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_BLOB]      = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DATE]      = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DATETIME]  = 'datetime';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DOUBLE]    = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_ENUM]      = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_LONG]      = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_LONGLONG]  = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_MAX]       = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_NULL]      = 'null';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_TIMESTAMP] = 'timestamp';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_TINY]      = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_VARCHAR]   = 'string';    // array of DrizzleColumn    $columns = $result->getColumns();    // columns in a standarized format    $std_columns = array();    foreach ($columns as $k => $column) {        $c = new stdClass();        $c->name = $column->name();        $c->orgname = $column->origName();        $c->table = $column->table();        $c->orgtable = $column->origTable();        $c->def = $column->defaultValue();        $c->db = $column->db();        $c->catalog = $column->catalog();        // $column->maxSize() returns always 0 while size() seems        // to return a correct value (drizzle extension v.0.5, API v.7)        $c->max_length = $column->size();        $c->decimals = $column->decimals();        $c->charsetnr = $column->charset();        $c->type = $typeAr[$column->typeDrizzle()];        $c->_type = $column->type();        $c->flags = PMA_DBI_field_flags($result, $k);        $c->_flags = $column->flags();        $c->multiple_key = (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_MULTIPLE_KEY);        $c->primary_key =  (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_PRI_KEY);        $c->unique_key =   (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY);        $c->not_null =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_NOT_NULL);        $c->unsigned =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_UNSIGNED);        $c->zerofill =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_ZEROFILL);        $c->numeric =      (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_NUM);        $c->blob =         (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_BLOB);        $std_columns[] = $c;    }    return $std_columns;}/** * return number of fields in given $result * * @param   PMA_DrizzleResult  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return $result->numColumns();}/** * returns the length of the given field $i in $result * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    $colums = $result->getColumns();    return $colums[$i]->size();}/** * returns name of $i. field in $result * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    $colums = $result->getColumns();    return $colums[$i]->name();}/** * returns concatenated string of human readable field flags * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    $columns = $result->getColumns();    $f = $columns[$i];    $type = $f->typeDrizzle();    $charsetnr = $f->charset();    $f = $f->flags();    $flags = '';    if ($f & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY) {        $flags .= 'unique ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_NUM) {        $flags .= 'num ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_PART_KEY) {        $flags .= 'part_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_SET) {        $flags .= 'set ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_TIMESTAMP) {        $flags .= 'timestamp ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_AUTO_INCREMENT) {        $flags .= 'auto_increment ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_ENUM) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == DRIZZLE_COLUMN_TYPE_DRIZZLE_BLOB || $type == DRIZZLE_COLUMN_TYPE_DRIZZLE_VARCHAR) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_ZEROFILL) {        $flags .= 'zerofill ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_UNSIGNED) {        $flags .= 'unsigned ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_BLOB) {        $flags .= 'blob ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_MULTIPLE_KEY) {        $flags .= 'multiple_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY) {        $flags .= 'unique_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_PRI_KEY) {        $flags .= 'primary_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_NOT_NULL) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/** * handles creation of the GIS visualizations. * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'openlayers/OpenLayers.js';$GLOBALS['js_include'][] = 'jquery/jquery.svg.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'jquery/jquery.event.drag-2.0.min.js';$GLOBALS['js_include'][] = 'tbl_gis_visualization.js';$GLOBALS['js_include'][] = 'OpenStreetMap.js';// Allows for resending headers even after sending some dataob_start();// Runs common workrequire_once './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'sql.php';// Import visualization functionsrequire_once './libraries/gis_visualization.lib.php';// Execute the query and return the result$result = PMA_DBI_try_query($sql_query);// Get the meta data of results$meta = PMA_DBI_get_fields_meta($result);// Find the candidate fields for label column and spatial column$labelCandidates = array(); $spatialCandidates = array();foreach ($meta as $column_meta) {    if ($column_meta->type == 'geometry') {        $spatialCandidates[] = $column_meta->name;    } else {        $labelCandidates[] = $column_meta->name;    }}// Get settings if any posted$visualizationSettings = array();if (PMA_isValid($_REQUEST['visualizationSettings'], 'array')) {    $visualizationSettings = $_REQUEST['visualizationSettings'];}if (! isset($visualizationSettings['labelColumn']) && isset($labelCandidates[0])) {    $visualizationSettings['labelColumn'] = '';}// If spatial column is not set, use first geometric colum as spatial columnif (! isset($visualizationSettings['spatialColumn'])) {    $visualizationSettings['spatialColumn'] = $spatialCandidates[0];}// Convert geometric columns from bytes to text.$modified_query = PMA_GIS_modifyQuery($sql_query, $visualizationSettings);$modified_result = PMA_DBI_try_query($modified_query);$data = array();while ($row = PMA_DBI_fetch_assoc($modified_result)) {    $data[] = $row;}// If all the rows contain SRID, use OpenStreetMaps on the initial loading.if (! isset($_REQUEST['displayVisualization'])) {    $visualizationSettings['choice'] = 'useBaseLayer';    foreach ($data as $row) {        if ($row['srid'] == 0) {            unset($visualizationSettings['choice']);            break;        }    }}if (isset($_REQUEST['saveToFile'])) {    $file_name = $_REQUEST['fileName'];    if ($file_name == '') {        $file_name = $visualizationSettings['spatialColumn'];    }    $save_format = $_REQUEST['fileFormat'];    PMA_GIS_saveToFile($data, $visualizationSettings, $save_format, $file_name);    exit();}$svg_support = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? false : true;$format = $svg_support ? 'svg' : 'png';// get the chart and settings after chart generation$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);/** * Displays the page */?><!-- Display visulalization options --><div id="div_view_options"><form method="post" action="tbl_gis_visualization.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display GIS Visualization'); ?></legend>    <div id="placeholder" style="width:<?php echo($visualizationSettings['width']); ?>px;height:<?php echo($visualizationSettings['height']); ?>px;">        <?php echo $visualization; ?>    </div>    <div id="openlayersmap"></div>    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <script language="javascript" type="text/javascript">        function drawOpenLayers() {            <?php echo (PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol')); ?>        }    </script>    <input type="hidden" name="sql_query" id="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <table class="gis_table">    <tr><td><label for="width"><?php echo __("Width"); ?></label></td>        <td><input type="text" name="visualizationSettings[width]" id="width" value="<?php echo (isset($visualizationSettings['width']) ? htmlspecialchars($visualizationSettings['width']) : ''); ?>" /></td>    </tr>    <tr><td><label for="height"><?php echo __("Height"); ?></label></td>        <td><input type="text" name="visualizationSettings[height]" id="height" value="<?php echo (isset($visualizationSettings['height']) ? htmlspecialchars($visualizationSettings['height']) : ''); ?>" /></td>    </tr>    <tr><td><label for="labelColumn"><?php echo __("Label column"); ?></label></td>        <td><select name="visualizationSettings[labelColumn]" id="labelColumn">            <option value=""><?php echo __("-- None --"); ?></option>        <?php            foreach ($labelCandidates as $labelCandidate) {                echo('<option value="' . htmlspecialchars($labelCandidate) . '"');                if ($labelCandidate == $visualizationSettings['labelColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($labelCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td><label for="spatial Column"><?php echo __("Spatial column"); ?></label></td>        <td><select name="visualizationSettings[spatialColumn]" id="spatialColumn">        <?php            foreach ($spatialCandidates as $spatialCandidate) {                echo('<option value="' . htmlspecialchars($spatialCandidate) . '"');                if ($spatialCandidate == $visualizationSettings['spatialColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($spatialCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td class="choice" colspan="2">        <input type="checkbox" name="visualizationSettings[choice]" id="choice" value="useBaseLayer"        <?php            if (isset($visualizationSettings['choice'])) {                echo(' checked="checked"');            }        ?>        />        <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>    </td></tr>    <tr><td></td>        <td class="button"><input type="submit" name="displayVisualization" value="<?php echo __('Redraw'); ?>" /></td>    </tr>    <tr><td class="save"><?php echo __("Save to file"); ?></td></tr>    <tr><td><label for="fileName"><?php echo __("File name"); ?></label></td>        <td><input type="text" name="fileName" id="fileName" /></td>    </tr>    <tr><td><label for="fileFormat"><?php echo __("Format"); ?></label></td>        <td><select name="fileFormat" id="fileFormat">            <option value="png">PNG</option>            <option value="pdf">PDF</option>            <?php            if ($svg_support) {                echo ('<option value="svg" selected="selected">SVG</option>');            }            ?>        </select></td>    </tr>    <tr><td></td>        <td class="button"><input type="submit" name="saveToFile" value="<?php echo __('Save'); ?>" /></td>    </tr>    </table></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {  exit;}$ID_KEY      = 'APC_UPLOAD_PROGRESS';/** * Returns upload status. * * This is implementation for APC extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY         );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_apcCheck() || $ret['finished']) {        return $ret;    }    $status = apc_fetch('upload_' . $id);    if ($status) {        $ret['finished'] = (bool)$status['done'];        $ret['total']    = $status['total'];        $ret['complete'] = $status['current'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }        if ($ret['percent'] == 100) {            $ret['finished'] = (bool)true;        }        $_SESSION[$SESSION_KEY][$id] = $ret;    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__sql_info(){    return array(        'info' => __('Formats text as SQL query with syntax highlighting.'),        );}/** * */function PMA_transformation_text_plain__sql($buffer, $options = array(), $meta = ''){    $result = PMA_SQP_formatHtml(PMA_SQP_parse($buffer));    // Need to clear error state not to break subsequent queries display.    PMA_SQP_resetError();    return $result;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * To define form field, use the notatnion below: * $forms['Form group']['Form name'] = array('Option/path'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin */$forms = array();$forms['Features']['General'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'LoginCookieValidity',    'ReplaceHelpImg',    'Servers/1/only_db', // saves to Server/only_db    'Servers/1/hide_db', // saves to Server/hide_db    'SkipLockedTables',    'DisableMultiTableMaintenance',    'MaxDbList',    'MaxTableList',    'ShowHint');$forms['Features']['Text_fields'] = array(    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');// settings from this form are treated specially, see prefs_forms.php and user_preferences.lib.php$forms['Features']['Developer'] = array(    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array(    'SQLQuery/Edit',    'SQLQuery/Explain',    'SQLQuery/ShowAsPHP',    'SQLQuery/Validate',    'SQLQuery/Refresh');$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'PropertiesIconic',    'ShowAll',    'MaxRows',    'Order',    'DisplayBinaryAsHex',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable');$forms['Import']['Import_defaults'] = array(    'Import/format',    'Import/charset',    'Import/allow_interrupt',    'Import/skip_queries');$forms['Import']['Sql'] = array(    'Import/sql_compatibility',    'Import/sql_no_auto_value_on_zero');$forms['Import']['Csv'] = array(    ':group:' . __('CSV'),        'Import/csv_replace',        'Import/csv_ignore',        'Import/csv_terminated',        'Import/csv_enclosed',        'Import/csv_escaped',        'Import/csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'Import/ldi_replace',        'Import/ldi_ignore',        'Import/ldi_terminated',        'Import/ldi_enclosed',        'Import/ldi_escaped',        'Import/ldi_local_option');$forms['Import']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Import/ods_col_names',        'Import/ods_empty_rows',        'Import/ods_recognize_percentages',        'Import/ods_recognize_currency');$forms['Export']['Export_defaults'] = array(    'Export/method',    ':group:' . __('Quick'),        'Export/quick_export_onserver',        'Export/quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'Export/format',        'Export/compression',        'Export/charset',        'Export/asfile' => ':group',            'Export/onserver',            'Export/onserver_overwrite',            ':group:end',        'Export/file_template_table',        'Export/file_template_database',        'Export/file_template_server');$forms['Export']['Sql'] = array(    'Export/sql_include_comments' => ':group',        'Export/sql_dates',        'Export/sql_relation',        'Export/sql_mime',        ':group:end',    'Export/sql_use_transaction',    'Export/sql_disable_fk',    'Export/sql_compatibility',    ':group:' . __('Database export options'),        'Export/sql_drop_database',        'Export/sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'Export/sql_drop_table',        'Export/sql_procedure_function',        'Export/sql_create_table_statements' => ':group',            'Export/sql_if_not_exists',            'Export/sql_auto_increment',            ':group:end',        'Export/sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'Export/sql_delayed',        'Export/sql_ignore',        'Export/sql_type',        'Export/sql_insert_syntax',        'Export/sql_max_query_size',        'Export/sql_hex_for_blob',        'Export/sql_utc_time');$forms['Export']['CodeGen'] = array(    'Export/codegen_format');$forms['Export']['Csv'] = array(    ':group:' . __('CSV'),        'Export/csv_separator',        'Export/csv_enclosed',        'Export/csv_escaped',        'Export/csv_terminated',        'Export/csv_null',        'Export/csv_removeCRLF',        'Export/csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'Export/excel_null',        'Export/excel_removeCRLF',        'Export/excel_columns',        'Export/excel_edition');$forms['Export']['Latex'] = array(    'Export/latex_caption',    'Export/latex_structure_or_data',    ':group:' . __('Structure'),        'Export/latex_structure_caption',        'Export/latex_structure_continued_caption',        'Export/latex_structure_label',        'Export/latex_relation',        'Export/latex_comments',        'Export/latex_mime',        ':group:end',    ':group:' . __('Data'),        'Export/latex_columns',        'Export/latex_data_caption',        'Export/latex_data_continued_caption',        'Export/latex_data_label',        'Export/latex_null');$forms['Export']['Microsoft_Office'] = array(    ':group:' . __('Microsoft Word 2000'),        'Export/htmlword_structure_or_data',        'Export/htmlword_null',        'Export/htmlword_columns');$forms['Export']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Export/ods_columns',        'Export/ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'Export/odt_structure_or_data',        ':group:' . __('Structure'),            'Export/odt_relation',            'Export/odt_comments',            'Export/odt_mime',            ':group:end',        ':group:' . __('Data'),            'Export/odt_columns',            'Export/odt_null');$forms['Export']['Texy'] = array(    'Export/texytext_structure_or_data',    ':group:' . __('Data'),        'Export/texytext_null',        'Export/texytext_columns');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin fatal error display page * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}header('Content-Type: text/html; charset=utf-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang; ?>" dir="<?php echo $dir; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <style type="text/css">    <!--    html {        padding: 0;        margin: 0;    }    body  {        font-family: sans-serif;        font-size: small;        color: #000000;        background-color: #F5F5F5;        margin: 1em;    }    h1 {        margin: 0;        padding: 0.3em;        font-size: 1.4em;        font-weight: bold;        color: #ffffff;        background-color: #ff0000;    }    p {        margin: 0;        padding: 0.5em;        border: 0.1em solid red;        background-color: #ffeeee;    }    //-->    </style></head><body><h1>phpMyAdmin - <?php echo $error_header; ?></h1><p><?php echo PMA_sanitize($error_message); ?></p></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * "Echo" service to allow force downloading of exported charts (png or svg) * and server status monitor settings * * @package PhpMyAdmin */require_once './libraries/common.inc.php';/* For chart exporting */if (isset($_REQUEST['filename']) && isset($_REQUEST['image'])) {    $allowed = array(        'image/png'     => 'png',        'image/svg+xml' => 'svg',    );    /* Check whether MIME type is allowed */    if (! isset($allowed[$_REQUEST['type']])) {        die(__('Invalid export type'));    }    /*     * Check file name to match mime type and not contain new lines     * to prevent response splitting.     */    $extension = $allowed[$_REQUEST['type']];    $valid_match = '/^[^\n\r]*\.' . $extension . '$/';    if (! preg_match($valid_match, $_REQUEST['filename'])) {        if (! preg_match('/^[^\n\r]*$/', $_REQUEST['filename'])) {            /* Filename is unsafe, discard it */            $filename = 'download.' . $extension;        } else {            /* Add extension */            $filename = $_REQUEST['filename'] . '.' . $extension;        }    } else {        /* Filename from request should be safe here */        $filename = $_REQUEST['filename'];    }    /* Decode data */    if ($extension != 'svg') {        $data = substr($_REQUEST['image'], strpos($_REQUEST['image'], ',') + 1);        $data = base64_decode($data);    } else {        $data = $_REQUEST['image'];    }    /* Send download header */    PMA_download_header($filename, $_REQUEST['type'], strlen($data));    /* Send data */    echo $data;/* For monitor chart config export */} else if (isset($_REQUEST['monitorconfig'])) {    PMA_download_header('monitor.cfg', 'application/force-download');    echo urldecode($_REQUEST['monitorconfig']);/* For monitor chart config import */} else if (isset($_REQUEST['import'])) {    header('Content-type: text/plain');    if(!file_exists($_FILES['file']['tmp_name'])) exit();    echo file_get_contents($_FILES['file']['tmp_name']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam(true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Theme based generator for SVG gradient. * * @package PhpMyAdmin-theme */header('Content-Type: image/svg+xml');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');function get_color($get_name, $default){    // get color from GET args, only alphanumeric chcracters    $opts = array('options' => array('regexp' => '/^[a-z0-9]+$/i'));    $color = filter_input(INPUT_GET, $get_name, FILTER_VALIDATE_REGEXP, $opts);    if (preg_match('/^[a-f0-9]{6}$/', $color)) {        return '#' . $color;    }    return $color ? $color : $default;}?><?php echo '<?xml version="1.0" ?>' ?><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" version="1.0" width="100%" height="100%">    <defs>        <linearGradient id="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%">            <stop offset="0%" stop-color="<?php echo get_color('from', 'white') ?>" stop-opacity="1" />            <stop offset="100%" stop-color="<?php echo get_color('to', 'black') ?>" stop-opacity="1" />        </linearGradient>    </defs>    <rect width="100%" height="100%" style="fill:url(#linear-gradient);" /></svg>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Parser Matching Data * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This data is used by the SQL Parser to recognize keywords * * It has been extracted from the lex.h file in the MySQL BK tree * (around 4.0.2) as well as the MySQL documentation. * * It's easier to use only uppercase for proper sorting. In case of * doubt, use the test case to verify. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (! isset($GLOBALS['sql_delimiter'])) {        $GLOBALS['sql_delimiter'] = ';';}/** * @global array MySQL function names */$PMA_SQPdata_function_name = array (    'ABS',    'ACOS',    'ADDDATE',    'ADDTIME',    'AES_DECRYPT',    'AES_ENCRYPT',    'AREA',                     // Area() polygon-property-functions.html    'ASBINARY',                 // AsBinary()    'ASCII',    'ASIN',    'ASTEXT',                   // AsText()    'ATAN',    'ATAN2',    'AVG',    'BDMPOLYFROMTEXT',          // BdMPolyFromText()    'BDMPOLYFROMWKB',           // BdMPolyFromWKB()    'BDPOLYFROMTEXT',           // BdPolyFromText()    'BDPOLYFROMWKB',            // BdPolyFromWKB()    'BENCHMARK',    'BIN',    'BIT_AND',    'BIT_COUNT',    'BIT_LENGTH',    'BIT_OR',    'BIT_XOR',                  // group-by-functions.html    'BOUNDARY',                 // Boundary() general-geometry-property-functions.html    'BUFFER',                   // Buffer()    'CAST',    'CEIL',    'CEILING',    'CENTROID',                 // Centroid() multipolygon-property-functions.html    'CHAR',                     // string-functions.html    'CHARACTER_LENGTH',    'CHARSET',                  // information-functions.html    'CHAR_LENGTH',    'COALESCE',    'COERCIBILITY',             // information-functions.html    'COLLATION',                // information-functions.html    'COMPRESS',                 // string-functions.html    'CONCAT',    'CONCAT_WS',    'CONNECTION_ID',    'CONTAINS',                 // Contains()    'CONV',    'CONVERT',    'CONVERT_TZ',    'CONVEXHULL',               // ConvexHull()    'COS',    'COT',    'COUNT',    'CRC32',                    // mathematical-functions.html    'CROSSES',                  // Crosses()    'CURDATE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURTIME',    'DATABASE',    'DATE',                     // date-and-time-functions.html    'DATEDIFF',                 // date-and-time-functions.html    'DATE_ADD',    'DATE_DIFF',    'DATE_FORMAT',    'DATE_SUB',    'DAY',    'DAYNAME',    'DAYOFMONTH',    'DAYOFWEEK',    'DAYOFYEAR',    'DECODE',    'DEFAULT',                  // miscellaneous-functions.html    'DEGREES',    'DES_DECRYPT',    'DES_ENCRYPT',    'DIFFERENCE',               // Difference()    'DIMENSION',                // Dimension() general-geometry-property-functions.html    'DISJOINT',                 // Disjoint()    'DISTANCE',                 // Distance()    'ELT',    'ENCODE',    'ENCRYPT',    'ENDPOINT',                 // EndPoint() linestring-property-functions.html    'ENVELOPE',                 // Envelope() general-geometry-property-functions.html    'EQUALS',                   // Equals()    'EXP',    'EXPORT_SET',    'EXTERIORRING',             // ExteriorRing() polygon-property-functions.html    'EXTRACT',    'EXTRACTVALUE',             // ExtractValue() xml-functions.html    'FIELD',    'FIND_IN_SET',    'FLOOR',    'FORMAT',    'FOUND_ROWS',    'FROM_DAYS',    'FROM_UNIXTIME',    'GEOMCOLLFROMTEXT',         // GeomCollFromText()    'GEOMCOLLFROMWKB',          // GeomCollFromWKB()    'GEOMETRYCOLLECTION',       // GeometryCollection()    'GEOMETRYCOLLECTIONFROMTEXT',   // GeometryCollectionFromText()    'GEOMETRYCOLLECTIONFROMWKB',    // GeometryCollectionFromWKB()    'GEOMETRYFROMTEXT',         // GeometryFromText()    'GEOMETRYFROMWKB',          // GeometryFromWKB()    'GEOMETRYN',                // GeometryN() geometrycollection-property-functions.html    'GEOMETRYTYPE',             // GeometryType() general-geometry-property-functions.html    'GEOMFROMTEXT',             // GeomFromText()    'GEOMFROMWKB',              // GeomFromWKB()    'GET_FORMAT',    'GET_LOCK',    'GLENGTH',                  // GLength() linestring-property-functions.html    'GREATEST',    'GROUP_CONCAT',    'GROUP_UNIQUE_USERS',    'HEX',    'HOUR',    'IF',                       //control-flow-functions.html    'IFNULL',    'INET_ATON',    'INET_NTOA',    'INSERT',                   // string-functions.html    'INSTR',    'INTERIORRINGN',            // InteriorRingN() polygon-property-functions.html    'INTERSECTION',             // Intersection()    'INTERSECTS',               // Intersects()    'INTERVAL',    'ISCLOSED',                 // IsClosed() multilinestring-property-functions.html    'ISEMPTY',                  // IsEmpty() general-geometry-property-functions.html    'ISNULL',    'ISRING',                   // IsRing() linestring-property-functions.html    'ISSIMPLE',                 // IsSimple() general-geometry-property-functions.html    'IS_FREE_LOCK',    'IS_USED_LOCK',             // miscellaneous-functions.html    'LAST_DAY',    'LAST_INSERT_ID',    'LCASE',    'LEAST',    'LEFT',    'LENGTH',    'LINEFROMTEXT',             // LineFromText()    'LINEFROMWKB',              // LineFromWKB()    'LINESTRING',               // LineString()    'LINESTRINGFROMTEXT',       // LineStringFromText()    'LINESTRINGFROMWKB',        // LineStringFromWKB()    'LN',    'LOAD_FILE',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCATE',    'LOG',    'LOG10',    'LOG2',    'LOWER',    'LPAD',    'LTRIM',    'MAKEDATE',    'MAKETIME',    'MAKE_SET',    'MASTER_POS_WAIT',    'MAX',    'MBRCONTAINS',              // MBRContains()    'MBRDISJOINT',              // MBRDisjoint()    'MBREQUAL',                 // MBREqual()    'MBRINTERSECTS',            // MBRIntersects()    'MBROVERLAPS',              // MBROverlaps()    'MBRTOUCHES',               // MBRTouches()    'MBRWITHIN',                // MBRWithin()    'MD5',    'MICROSECOND',    'MID',    'MIN',    'MINUTE',    'MLINEFROMTEXT',            // MLineFromText()    'MLINEFROMWKB',             // MLineFromWKB()    'MOD',    'MONTH',    'MONTHNAME',    'MPOINTFROMTEXT',           // MPointFromText()    'MPOINTFROMWKB',            // MPointFromWKB()    'MPOLYFROMTEXT',            // MPolyFromText()    'MPOLYFROMWKB',             // MPolyFromWKB()    'MULTILINESTRING',          // MultiLineString()    'MULTILINESTRINGFROMTEXT',  // MultiLineStringFromText()    'MULTILINESTRINGFROMWKB',   // MultiLineStringFromWKB()    'MULTIPOINT',               // MultiPoint()    'MULTIPOINTFROMTEXT',       // MultiPointFromText()    'MULTIPOINTFROMWKB',        // MultiPointFromWKB()    'MULTIPOLYGON',             // MultiPolygon()    'MULTIPOLYGONFROMTEXT',     // MultiPolygonFromText()    'MULTIPOLYGONFROMWKB',      // MultiPolygonFromWKB()    'NAME_CONST',               // NAME_CONST()    'NOW',                      // NOW()    'NULLIF',    'NUMGEOMETRIES',            // NumGeometries() geometrycollection-property-functions.html    'NUMINTERIORRINGS',         // NumInteriorRings() polygon-property-functions.html    'NUMPOINTS',                // NumPoints() linestring-property-functions.html    'OCT',    'OCTET_LENGTH',    'OLD_PASSWORD',    'ORD',    'OVERLAPS',                 // Overlaps()    'PASSWORD',    'PERIOD_ADD',    'PERIOD_DIFF',    'PI',    'POINT',                    // Point()    'POINTFROMTEXT',            // PointFromText()    'POINTFROMWKB',             // PointFromWKB()    'POINTN',                   // PointN() inestring-property-functions.html    'POINTONSURFACE',           // PointOnSurface() multipolygon-property-functions.html    'POLYFROMTEXT',             // PolyFromText()    'POLYFROMWKB',              // PolyFromWKB()    'POLYGON',                  // Polygon()    'POLYGONFROMTEXT',          // PolygonFromText()    'POLYGONFROMWKB',           // PolygonFromWKB()    'POSITION',    'POW',    'POWER',    'QUARTER',    'QUOTE',    'RADIANS',    'RAND',    'RELATED',                  // Related()    'RELEASE_LOCK',    'REPEAT',    'REPLACE',                  // string-functions.html    'REVERSE',    'RIGHT',    'ROUND',    'ROW_COUNT',                // information-functions.html    'RPAD',    'RTRIM',    'SCHEMA',                   // information-functions.html    'SECOND',    'SEC_TO_TIME',    'SESSION_USER',    'SHA',    'SHA1',    'SIGN',    'SIN',    'SLEEP',                    // miscellaneous-functions.html    'SOUNDEX',    'SPACE',    'SQRT',    'SRID',                     // general-geometry-property-functions.html    'STARTPOINT',               // StartPoint() linestring-property-functions.html    'STD',    'STDDEV',    'STDDEV_POP',               // group-by-functions.html    'STDDEV_SAMP',              // group-by-functions.html    'STRCMP',    'STR_TO_DATE',    'SUBDATE',    'SUBSTR',    'SUBSTRING',    'SUBSTRING_INDEX',    'SUBTIME',    'SUM',    'SYMDIFFERENCE',            // SymDifference()    'SYSDATE',    'SYSTEM_USER',    'TAN',    'TIME',    'TIMEDIFF',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TIME_FORMAT',    'TIME_TO_SEC',    'TOUCHES',                  // Touches()    'TO_DAYS',    'TRIM',    'TRUNCATE',                 // mathematical-functions.html    'UCASE',    'UNCOMPRESS',               // string-functions.html    'UNCOMPRESSED_LENGTH',      // string-functions.html    'UNHEX',                    // string-functions.html    'UNIQUE_USERS',    'UNIX_TIMESTAMP',    'UPDATEXML',                // UpdateXML() xml-functions.html    'UPPER',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',                     // miscellaneous-functions.html    'VARIANCE',                 // group-by-functions.html    'VAR_POP',                  // group-by-functions.html    'VAR_SAMP',                 // group-by-functions.html    'VERSION',    'WEEK',    'WEEKDAY',    'WEEKOFYEAR',    'WITHIN',                   // Within()    'X',                        // point-property-functions.html    'Y',                        // point-property-functions.html    'YEAR',    'YEARWEEK');/** * @global array MySQL attributes */$PMA_SQPdata_column_attrib = array (    'ARCHIVE',          // Engine    'ASCII',    'AUTO_INCREMENT',    'BDB',              // Engine    'BERKELEYDB',       // Engine alias BDB    'BINARY',    'BLACKHOLE',        // Engine    'CSV',              // Engine    'DEFAULT',    'EXAMPLE',          // Engine    'FEDERATED',        // Engine    'HEAP',             // Engine    'INNOBASE',         // Engine alias InnoDB    'INNODB',           // Engine InnoDB    'ISAM',             // Engine    'MARIA',            // Engine    'MEMORY',           // Engine alias HEAP, but preferred    'MERGE',            // Engine    'MRG_ISAM',         // Engine    'MRG_MYISAM',       // Engine alias MERGE    'MYISAM',           // Engine MyISAM    'NATIONAL',    'NDB',              // Engine alias NDBCLUSTER    'NDBCLUSTER',       // Engine    'PRECISION',    'UNDEFINED',    'UNICODE',    'UNSIGNED',    'VARYING',    'ZEROFILL');/** * words that are reserved by MySQL and may not be used as identifiers without quotes * * @see http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html * * @global array MySQL reserved words */$PMA_SQPdata_reserved_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYSE',    'ANALYZE',    'AND',    'AS',    'ASC',    'AUTOCOMMIT',    'AUTO_INCREMENT',    'AVG_ROW_LENGTH',    'BACKUP',    'BEGIN',    'BETWEEN',    'BINLOG',    'BOTH',    'BY',    'CASCADE',    'CASE',    'CHANGE',    'CHANGED',    'CHARSET',    'CHECK',    'CHECKSUM',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPRESSED',    'CONCURRENT',    'CONSTRAINT',    'CONTAINS',    'CONVERT',    'CREATE',    'CROSS',    'CURRENT_TIMESTAMP',    'DATABASE',    'DATABASES',    'DAY',    'DAY_HOUR',    'DAY_MINUTE',    'DAY_SECOND',    'DECLARE',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DETERMINISTIC',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DROP',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'ELSE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEMINI',    'GEMINI_SPIN_RETRIES',    'GENERAL',    'GLOBAL',    'GRANT',    'GRANTS',    'GROUP',    'HAVING',    'HEAP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IGNORE_SERVER_IDS',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INSERT',    'INSERT_ID',    'INSERT_METHOD',    'INTERVAL',    'INTO',    'INVOKER',    'IS',    'ISOLATION',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LAST_INSERT_ID',    'LEADING',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LOAD',    'LOCAL',    'LOCK',    'LOCKS',    'LOGS',    'LOW_PRIORITY',    'MARIA',                // 5.1 ?    'MASTER_CONNECT_RETRY',    'MASTER_HEARTBEAT_PERIOD',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_USER',    'MATCH',    'MAXVALUE',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MERGE',    'MINUTE',    'MINUTE_SECOND',    'MIN_ROWS',    'MODE',    'MODIFY',    'MONTH',    'MRG_MYISAM',    'MYISAM',    'NAMES',    'NATURAL',    // 'NO' is not allowed in SQL-99 but is allowed in MySQL    //'NO',    'NOT',    'NULL',    'OFFSET',    'ON',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PAGE',                 // 5.1-maria ?    'PAGE_CHECKSUM',        // 5.1    'PARTIAL',    'PARTITION',            // 5.1    'PARTITIONS',           // 5.1    'PASSWORD',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESS',    'PROCESSLIST',    'PURGE',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REFERENCES',    'REGEXP',    'RELOAD',    'RENAME',    'REPAIR',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'RESET',    'RESIGNAL',    'RESTORE',    'RESTRICT',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROW',    'ROWS',    'ROW_FORMAT',    'SECOND',    'SECURITY',    'SELECT',    'SEPARATOR',    'SERIALIZABLE',    'SESSION',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNAL',    'SLAVE',    'SLOW',    'SONAME',    'SOUNDS',                   // string-functions.html    'SQL',    'SQL_AUTO_IS_NULL',    'SQL_BIG_RESULT',    'SQL_BIG_SELECTS',    'SQL_BIG_TABLES',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_LOG_BIN',    'SQL_LOG_OFF',    'SQL_LOG_UPDATE',    'SQL_LOW_PRIORITY_UPDATES',    'SQL_MAX_JOIN_SIZE',    'SQL_NO_CACHE',    'SQL_QUOTE_SHOW_CREATE',    'SQL_SAFE_UPDATES',    'SQL_SELECT_LIMIT',    'SQL_SLAVE_SKIP_COUNTER',    'SQL_SMALL_RESULT',    'SQL_WARNINGS',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUPER',    'TABLE',    'TABLES',    'TEMPORARY',    'TERMINATED',    'THEN',    'TO',    'TRAILING',    'TRANSACTIONAL',    // 5.1 ?    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNION',    'UNIQUE',    'UNLOCK',    'UPDATE',    'USAGE',    'USE',    'USING',    'VALUES',    'VARIABLES',    'VIEW',    'WHEN',    'WHERE',    'WITH',    'WORK',    'WRITE',    'XOR',    'YEAR_MONTH');/** * words forbidden to be used as column or table name wihtout quotes * as seen in http://dev.mysql.com/doc/mysql/en/reserved-words.html * * @global array MySQL forbidden words */$PMA_SQPdata_forbidden_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYZE',    'AND',    'ANY',    'AS',    'ASC',    'ASCII',    'ASENSITIVE',    'AUTO_INCREMENT',    'AVG',    'AVG_ROW_LENGTH',    'BACKUP',    'BDB',    'BEFORE',    'BEGIN',    'BERKELEYDB',    'BETWEEN',    'BIGINT',    'BINARY',    'BINLOG',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',    'BOTH',    'BTREE',    'BY',    'BYTE',    'CACHE',    'CALL',    'CASCADE',    'CASCADED',    'CASE',    'CHAIN',    'CHANGE',    'CHANGED',    'CHAR',    'CHARACTER',    'CHARSET',    'CHECK',    'CHECKSUM',    'CIPHER',    'CLOSE',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPACT',    'COMPRESSED',    'CONCURRENT',    'CONDITION',    'CONNECTION',    'CONSISTENT',    'CONSTRAINT',    'CONTAINS',    'CONTINUE',    'CONVERT',    'CREATE',    'CROSS',    'CUBE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURSOR',    'DATA',    'DATABASE',    'DATABASES',    'DATE',    'DATETIME',    'DAY',    'DAY_HOUR',    'DAY_MICROSECOND',    'DAY_MINUTE',    'DAY_SECOND',    'DEALLOCATE',    'DEC',    'DECIMAL',    'DECLARE',    'DEFAULT',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DES_KEY_FILE',    'DETERMINISTIC',    'DIRECTORY',    'DISABLE',    'DISCARD',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DOUBLE',    'DROP',    'DUAL',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'EACH',    'ELSE',    'ELSEIF',    'ENABLE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ENUM',    'ERRORS',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXIT',    'EXPANSION',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FETCH',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLOAT',    'FLOAT4',    'FLOAT8',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FOUND',    'FRAC_SECOND',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEOMETRY',    'GEOMETRYCOLLECTION',    'GET_FORMAT',    'GLOBAL',    'GOTO',    'GRANT',    'GRANTS',    'GROUP',    'HANDLER',    'HASH',    'HAVING',    'HELP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MICROSECOND',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IMPORT',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INNOBASE',    'INNODB',    'INOUT',    'INSENSITIVE',    'INSERT',    'INSERT_METHOD',    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'INTERVAL',    'INTO',    'INVOKER',    'IO_THREAD',    'IS',    'ISOLATION',    'ISSUER',    'ITERATE',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LABEL',    'LANGUAGE',    'LAST',    'LEADING',    'LEAVE',    'LEAVES',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LINESTRING',    'LOAD',    'LOCAL',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCK',    'LOCKS',    'LOGS',    'LONG',    'LONGBLOB',    'LONGTEXT',    'LOOP',    'LOW_PRIORITY',    'MASTER',    'MASTER_CONNECT_RETRY',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_SERVER_ID',    'MASTER_SSL',    'MASTER_SSL_CA',    'MASTER_SSL_CAPATH',    'MASTER_SSL_CERT',    'MASTER_SSL_CIPHER',    'MASTER_SSL_KEY',    'MASTER_USER',    'MATCH',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MERGE',    'MICROSECOND',    'MIDDLEINT',    'MIGRATE',    'MINUTE',    'MINUTE_MICROSECOND',    'MINUTE_SECOND',    'MIN_ROWS',    'MOD',    'MODE',    'MODIFIES',    'MODIFY',    'MONTH',    'MULTILINESTRING',    'MULTIPOINT',    'MULTIPOLYGON',    'MUTEX',    'NAME',    'NAMES',    'NATIONAL',    'NATURAL',    'NCHAR',    'NDB',    'NDBCLUSTER',    'NEW',    'NEXT',    'NO',    'NONE',    'NOT',    'NO_WRITE_TO_BINLOG',    'NULL',    'NUMERIC',    'NVARCHAR',    'OFFSET',    'OLD_PASSWORD',    'ON',    'ONE',    'ONE_SHOT',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUT',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PARTIAL',    'PASSWORD',    'PHASE',    'POINT',    'POLYGON',    'PRECISION',    'PREPARE',    'PREV',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESSLIST',    'PURGE',    'QUARTER',    'QUERY',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READS',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REAL',    'RECOVER',    'REDUNDANT',    'REFERENCES',    'REGEXP',    'RELAY_LOG_FILE',    'RELAY_LOG_POS',    'RELAY_THREAD',    'RELEASE',    'RELOAD',    'RENAME',    'REPAIR',    'REPEAT',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'REQUIRE',    'RESET',    'RESTORE',    'RESTRICT',    'RESUME',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROLLUP',    'ROUTINE',    'ROW',    'ROWS',    'ROW_FORMAT',    'RTREE',    'SAVEPOINT',    'SCHEMA',    'SCHEMAS',    'SECOND',    'SECOND_MICROSECOND',    'SECURITY',    'SELECT',    'SENSITIVE',    'SEPARATOR',    'SERIAL',    'SERIALIZABLE',    'SESSION',    'SET',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNED',    'SIMPLE',    'SLAVE',    'SMALLINT',    'SNAPSHOT',    'SOME',    'SONAME',    'SOUNDS',    'SPATIAL',    'SPECIFIC',    'SQL',    'SQLEXCEPTION',    'SQLSTATE',    'SQLWARNING',    'SQL_BIG_RESULT',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_NO_CACHE',    'SQL_SMALL_RESULT',    'SQL_THREAD',    'SQL_TSI_DAY',    'SQL_TSI_FRAC_SECOND',    'SQL_TSI_HOUR',    'SQL_TSI_MINUTE',    'SQL_TSI_MONTH',    'SQL_TSI_QUARTER',    'SQL_TSI_SECOND',    'SQL_TSI_WEEK',    'SQL_TSI_YEAR',    'SSL',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUBJECT',    'SUPER',    'SUSPEND',    'TABLE',    'TABLES',    'TABLESPACE',    'TEMPORARY',    'TEMPTABLE',    'TERMINATED',    'TEXT',    'THEN',    'TIME',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'TO',    'TRAILING',    'TRANSACTION',    'TRIGGER',    'TRIGGERS',    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNDEFINED',    'UNDO',    'UNICODE',    'UNION',    'UNIQUE',    'UNKNOWN',    'UNLOCK',    'UNSIGNED',    'UNTIL',    'UPDATE',    'USAGE',    'USE',    'USER',    'USER_RESOURCES',    'USE_FRM',    'USING',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'VALUE',    'VALUES',    'VARBINARY',    'VARCHAR',    'VARCHARACTER',    'VARIABLES',    'VARYING',    'VIEW',    'WARNINGS',    'WEEK',    'WHEN',    'WHERE',    'WHILE',    'WITH',    'WORK',    'WRITE',    'X509',    'XA',    'XOR',    'YEAR',    'YEAR_MONTH',    'ZEROFILL');/** * the MySQL column/data types * * @see http://dev.mysql.com/doc/refman/5.1/en/data-types.html * @see http://dev.mysql.com/doc/refman/5.1/en/mysql-spatial-datatypes.html * * @global array MySQL column types */$PMA_SQPdata_column_type = array (    'BIGINT',    'BINARY',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',              // numeric-type-overview.html    'CHAR',    'CHARACTER',    'DATE',    'DATETIME',    'DEC',    'DECIMAL',    'DOUBLE',    'ENUM',    'FLOAT',    'FLOAT4',    'FLOAT8',    'GEOMETRY',             // spatial    'GEOMETRYCOLLECTION',   // spatial    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'LINESTRING',           // spatial    'LONG',    'LONGBLOB',    'LONGTEXT',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MIDDLEINT',    'MULTILINESTRING',      // spatial    'MULTIPOINT',           // spatial    'MULTIPOLYGON',         // spatial    'NCHAR',    'NUMERIC',    'POINT',                // spatial    'POLYGON',              // spatial    'REAL',    'SERIAL',               // alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY    'SET',    'SMALLINT',    'TEXT',    'TIME',    'TIMESTAMP',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'VARBINARY',    'VARCHAR',    'YEAR');/** * Documentation links for operators. */$PMA_SQPdata_operators_docs = array(   '!=' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '<>' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '!' => array('link' => 'logical-operators','anchor' => 'operator_not'),   '||' => array('link' => 'logical-operators','anchor' => 'operator_or'),   '+' => array('link' => 'arithmetic-functions','anchor' => 'operator_plus'),   '>>' => array('link' => 'bit-functions','anchor' => 'operator_right-shift'),   '-' => array('link' => 'arithmetic-functions','anchor' => 'operator_minus'),   '*' => array('link' => 'arithmetic-functions','anchor' => 'operator_times'),   '&&' => array('link' => 'logical-operators','anchor' => 'operator_and'),   '&' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-and'),   '~' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-invert'),   '|' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-or'),   '^' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-xor'),   '=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-equal'),   ':=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-value'),   '/' => array('link' => 'arithmetic-functions','anchor' => 'operator_divide'),   '<=>' => array('link' => 'comparison-operators','anchor' => 'operator_equal-to'),   '=' => array('link' => 'comparison-operators','anchor' => 'operator_equal'),   '>=' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than-or-equal'),   '>' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than'),   '<<' => array('link' => 'bit-functions','anchor' => 'operator_left-shift'),   '<=' => array('link' => 'comparison-operators','anchor' => 'operator_less-than-or-equal'),   '<' => array('link' => 'comparison-operators','anchor' => 'operator_less-than'),   '%' => array('link' => 'arithmetic-functions','anchor' => 'operator_mod'));/** * Documentation links for functions. */$PMA_SQPdata_functions_docs = array(   'ABS' => array('link' => 'mathematical-functions','anchor' => 'function_abs'),   'ACOS' => array('link' => 'mathematical-functions','anchor' => 'function_acos'),   'ADDDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_adddate'),   'ADDTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_addtime'),   'AES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_decrypt'),   'AES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_encrypt'),   'AND' => array('link' => 'logical-operators','anchor' => 'operator_and'),   'ASCII' => array('link' => 'string-functions','anchor' => 'function_ascii'),   'ASIN' => array('link' => 'mathematical-functions','anchor' => 'function_asin'),   'ATAN2' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan'),   'AVG' => array('link' => 'group-by-functions','anchor' => 'function_avg'),   'BENCHMARK' => array('link' => 'information-functions','anchor' => 'function_benchmark'),   'BIN' => array('link' => 'string-functions','anchor' => 'function_bin'),   'BINARY' => array('link' => 'cast-functions','anchor' => 'operator_binary'),   'BIT_AND' => array('link' => 'group-by-functions','anchor' => 'function_bit_and'),   'BIT_COUNT' => array('link' => 'bit-functions','anchor' => 'function_bit_count'),   'BIT_LENGTH' => array('link' => 'string-functions','anchor' => 'function_bit_length'),   'BIT_OR' => array('link' => 'group-by-functions','anchor' => 'function_bit_or'),   'BIT_XOR' => array('link' => 'group-by-functions','anchor' => 'function_bit_xor'),   'CASE' => array('link' => 'control-flow-functions','anchor' => 'operator_case'),   'CAST' => array('link' => 'cast-functions','anchor' => 'function_cast'),   'CEIL' => array('link' => 'mathematical-functions','anchor' => 'function_ceil'),   'CEILING' => array('link' => 'mathematical-functions','anchor' => 'function_ceiling'),   'CHAR_LENGTH' => array('link' => 'string-functions','anchor' => 'function_char_length'),   'CHAR' => array('link' => 'string-functions','anchor' => 'function_char'),   'CHARACTER_LENGTH' => array('link' => 'string-functions','anchor' => 'function_character_length'),   'CHARSET' => array('link' => 'information-functions','anchor' => 'function_charset'),   'COALESCE' => array('link' => 'comparison-operators','anchor' => 'function_coalesce'),   'COERCIBILITY' => array('link' => 'information-functions','anchor' => 'function_coercibility'),   'COLLATION' => array('link' => 'information-functions','anchor' => 'function_collation'),   'COMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_compress'),   'CONCAT_WS' => array('link' => 'string-functions','anchor' => 'function_concat_ws'),   'CONCAT' => array('link' => 'string-functions','anchor' => 'function_concat'),   'CONNECTION_ID' => array('link' => 'information-functions','anchor' => 'function_connection_id'),   'CONV' => array('link' => 'mathematical-functions','anchor' => 'function_conv'),   'CONVERT_TZ' => array('link' => 'date-and-time-functions','anchor' => 'function_convert_tz'),   'Convert' => array('link' => 'cast-functions','anchor' => 'function_convert'),   'COS' => array('link' => 'mathematical-functions','anchor' => 'function_cos'),   'COT' => array('link' => 'mathematical-functions','anchor' => 'function_cot'),   'COUNT' => array('link' => 'group-by-functions','anchor' => 'function_count'),   'CRC32' => array('link' => 'mathematical-functions','anchor' => 'function_crc32'),   'CURDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_curdate'),   'CURRENT_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_current_date'),   'CURRENT_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_current_time'),   'CURRENT_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_current_timestamp'),   'CURRENT_USER' => array('link' => 'information-functions','anchor' => 'function_current_user'),   'CURTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_curtime'),   'DATABASE' => array('link' => 'information-functions','anchor' => 'function_database'),   'DATE_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_date_add'),   'DATE_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_date_format'),   'DATE_SUB' => array('link' => 'date-and-time-functions','anchor' => 'function_date_sub'),   'DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_date'),   'DATEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_datediff'),   'DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_day'),   'DAYNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_dayname'),   'DAYOFMONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofmonth'),   'DAYOFWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofweek'),   'DAYOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofyear'),   'DECLARE' => array('link' => 'declare', 'anchor' => 'declare'),   'DECODE' => array('link' => 'encryption-functions','anchor' => 'function_decode'),   'DEFAULT' => array('link' => 'miscellaneous-functions','anchor' => 'function_default'),   'DEGREES' => array('link' => 'mathematical-functions','anchor' => 'function_degrees'),   'DES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_decrypt'),   'DES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_encrypt'),   'DIV' => array('link' => 'arithmetic-functions','anchor' => 'operator_div'),   'ELT' => array('link' => 'string-functions','anchor' => 'function_elt'),   'ENCODE' => array('link' => 'encryption-functions','anchor' => 'function_encode'),   'ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_encrypt'),   'EXP' => array('link' => 'mathematical-functions','anchor' => 'function_exp'),   'EXPORT_SET' => array('link' => 'string-functions','anchor' => 'function_export_set'),   'EXTRACT' => array('link' => 'date-and-time-functions','anchor' => 'function_extract'),   'ExtractValue' => array('link' => 'xml-functions','anchor' => 'function_extractvalue'),   'FIELD' => array('link' => 'string-functions','anchor' => 'function_field'),   'FIND_IN_SET' => array('link' => 'string-functions','anchor' => 'function_find_in_set'),   'FLOOR' => array('link' => 'mathematical-functions','anchor' => 'function_floor'),   'FORMAT' => array('link' => 'string-functions','anchor' => 'function_format'),   'FOUND_ROWS' => array('link' => 'information-functions','anchor' => 'function_found_rows'),   'FROM_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_from_days'),   'FROM_UNIXTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_from_unixtime'),   'GET_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_get_format'),   'GET_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_get_lock'),   'GREATEST' => array('link' => 'comparison-operators','anchor' => 'function_greatest'),   'GROUP_CONCAT' => array('link' => 'group-by-functions','anchor' => 'function_group_concat'),   'HEX' => array('link' => 'string-functions','anchor' => 'function_hex'),   'HOUR' => array('link' => 'date-and-time-functions','anchor' => 'function_hour'),   'IF' => array('link' => 'control-flow-functions','anchor' => 'function_if'),   'IFNULL' => array('link' => 'control-flow-functions','anchor' => 'function_ifnull'),   'IN' => array('link' => 'comparison-operators','anchor' => 'function_in'),   'INET_ATON' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_aton'),   'INET_NTOA' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_ntoa'),   'INSERT' => array('link' => 'string-functions','anchor' => 'function_insert'),   'INSTR' => array('link' => 'string-functions','anchor' => 'function_instr'),   'INTERVAL' => array('link' => 'comparison-operators','anchor' => 'function_interval'),   'IS_FREE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_free_lock'),   'IS_USED_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_used_lock'),   'IS' => array('link' => 'comparison-operators','anchor' => 'operator_is'),   'ISNULL' => array('link' => 'comparison-operators','anchor' => 'function_isnull'),   'LAST_DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_last_day'),   'LAST_INSERT_ID' => array('link' => 'information-functions','anchor' => 'function_last_insert_id'),   'LCASE' => array('link' => 'string-functions','anchor' => 'function_lcase'),   'LEAST' => array('link' => 'comparison-operators','anchor' => 'function_least'),   'LEFT' => array('link' => 'string-functions','anchor' => 'function_left'),   'LENGTH' => array('link' => 'string-functions','anchor' => 'function_length'),   'LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_like'),   'LN' => array('link' => 'mathematical-functions','anchor' => 'function_ln'),   'LOAD_FILE' => array('link' => 'string-functions','anchor' => 'function_load_file'),   'LOCALTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_localtime'),   'LOCALTIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_localtimestamp'),   'LOCATE' => array('link' => 'string-functions','anchor' => 'function_locate'),   'LOG10' => array('link' => 'mathematical-functions','anchor' => 'function_log10'),   'LOG2' => array('link' => 'mathematical-functions','anchor' => 'function_log2'),   'LOG' => array('link' => 'mathematical-functions','anchor' => 'function_log'),   'LOWER' => array('link' => 'string-functions','anchor' => 'function_lower'),   'LPAD' => array('link' => 'string-functions','anchor' => 'function_lpad'),   'LTRIM' => array('link' => 'string-functions','anchor' => 'function_ltrim'),   'MAKE_SET' => array('link' => 'string-functions','anchor' => 'function_make_set'),   'MAKEDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_makedate'),   'MAKETIME' => array('link' => 'date-and-time-functions','anchor' => 'function_maketime'),   'MASTER_POS_WAIT' => array('link' => 'miscellaneous-functions','anchor' => 'function_master_pos_wait'),   'MATCH' => array('link' => 'fulltext-search','anchor' => 'function_match'),   'MAX' => array('link' => 'group-by-functions','anchor' => 'function_max'),   'MD5' => array('link' => 'encryption-functions','anchor' => 'function_md5'),   'MICROSECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_microsecond'),   'MID' => array('link' => 'string-functions','anchor' => 'function_mid'),   'MIN' => array('link' => 'group-by-functions','anchor' => 'function_min'),   'MINUTE' => array('link' => 'date-and-time-functions','anchor' => 'function_minute'),   'MOD' => array('link' => 'mathematical-functions','anchor' => 'function_mod'),   'MONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_month'),   'MONTHNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_monthname'),   'NAME_CONST' => array('link' => 'miscellaneous-functions','anchor' => 'function_name_const'),   'NOT' => array('link' => 'logical-operators','anchor' => 'operator_not'),   'NOW' => array('link' => 'date-and-time-functions','anchor' => 'function_now'),   'NULLIF' => array('link' => 'control-flow-functions','anchor' => 'function_nullif'),   'OCT' => array('link' => 'mathematical-functions','anchor' => 'function_oct'),   'OCTET_LENGTH' => array('link' => 'string-functions','anchor' => 'function_octet_length'),   'OLD_PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_old_password'),   'OR' => array('link' => 'logical-operators','anchor' => 'operator_or'),   'ORD' => array('link' => 'string-functions','anchor' => 'function_ord'),   'PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_password'),   'PERIOD_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_period_add'),   'PERIOD_DIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_period_diff'),   'PI' => array('link' => 'mathematical-functions','anchor' => 'function_pi'),   'POSITION' => array('link' => 'string-functions','anchor' => 'function_position'),   'POW' => array('link' => 'mathematical-functions','anchor' => 'function_pow'),   'POWER' => array('link' => 'mathematical-functions','anchor' => 'function_power'),   'QUARTER' => array('link' => 'date-and-time-functions','anchor' => 'function_quarter'),   'QUOTE' => array('link' => 'string-functions','anchor' => 'function_quote'),   'RADIANS' => array('link' => 'mathematical-functions','anchor' => 'function_radians'),   'RAND' => array('link' => 'mathematical-functions','anchor' => 'function_rand'),   'REGEXP' => array('link' => 'regexp','anchor' => 'operator_regexp'),   'RELEASE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_release_lock'),   'REPEAT' => array('link' => 'string-functions','anchor' => 'function_repeat'),   'REPLACE' => array('link' => 'string-functions','anchor' => 'function_replace'),   'REVERSE' => array('link' => 'string-functions','anchor' => 'function_reverse'),   'RIGHT' => array('link' => 'string-functions','anchor' => 'function_right'),   'RLIKE' => array('link' => 'regexp','anchor' => 'operator_rlike'),   'ROUND' => array('link' => 'mathematical-functions','anchor' => 'function_round'),   'ROW_COUNT' => array('link' => 'information-functions','anchor' => 'function_row_count'),   'RPAD' => array('link' => 'string-functions','anchor' => 'function_rpad'),   'RTRIM' => array('link' => 'string-functions','anchor' => 'function_rtrim'),   'SCHEMA' => array('link' => 'information-functions','anchor' => 'function_schema'),   'SEC_TO_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_sec_to_time'),   'SECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_second'),   'SESSION_USER' => array('link' => 'information-functions','anchor' => 'function_session_user'),   'SHA' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SHA1' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SIGN' => array('link' => 'mathematical-functions','anchor' => 'function_sign'),   'SIN' => array('link' => 'mathematical-functions','anchor' => 'function_sin'),   'SLEEP' => array('link' => 'miscellaneous-functions','anchor' => 'function_sleep'),   'SOUNDEX' => array('link' => 'string-functions','anchor' => 'function_soundex'),   'SPACE' => array('link' => 'string-functions','anchor' => 'function_space'),   'SQRT' => array('link' => 'mathematical-functions','anchor' => 'function_sqrt'),   'STD' => array('link' => 'group-by-functions','anchor' => 'function_std'),   'STDDEV_POP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_pop'),   'STDDEV_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_samp'),   'STDDEV' => array('link' => 'group-by-functions','anchor' => 'function_stddev'),   'STR_TO_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_str_to_date'),   'STRCMP' => array('link' => 'string-comparison-functions','anchor' => 'function_strcmp'),   'SUBDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_subdate'),   'SUBSTR' => array('link' => 'string-functions','anchor' => 'function_substr'),   'SUBSTRING_INDEX' => array('link' => 'string-functions','anchor' => 'function_substring_index'),   'SUBSTRING' => array('link' => 'string-functions','anchor' => 'function_substring'),   'SUBTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_subtime'),   'SUM' => array('link' => 'group-by-functions','anchor' => 'function_sum'),   'SYSDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_sysdate'),   'SYSTEM_USER' => array('link' => 'information-functions','anchor' => 'function_system_user'),   'TAN' => array('link' => 'mathematical-functions','anchor' => 'function_tan'),   'TIME_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_time_format'),   'TIME_TO_SEC' => array('link' => 'date-and-time-functions','anchor' => 'function_time_to_sec'),   'TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_time'),   'TIMEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timediff'),   'TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_timestamp'),   'TIMESTAMPADD' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampadd'),   'TIMESTAMPDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampdiff'),   'TO_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_to_days'),   'TRIM' => array('link' => 'string-functions','anchor' => 'function_trim'),   'TRUNCATE' => array('link' => 'mathematical-functions','anchor' => 'function_truncate'),   'UCASE' => array('link' => 'string-functions','anchor' => 'function_ucase'),   'UNCOMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_uncompress'),   'UNCOMPRESSED_LENGTH' => array('link' => 'encryption-functions','anchor' => 'function_uncompressed_length'),   'UNHEX' => array('link' => 'string-functions','anchor' => 'function_unhex'),   'UNIX_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_unix_timestamp'),   'UpdateXML' => array('link' => 'xml-functions','anchor' => 'function_updatexml'),   'UPPER' => array('link' => 'string-functions','anchor' => 'function_upper'),   'USER' => array('link' => 'information-functions','anchor' => 'function_user'),   'UTC_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_date'),   'UTC_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_time'),   'UTC_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_timestamp'),   'UUID_SHORT' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid_short'),   'UUID' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid'),   'VALUES' => array('link' => 'miscellaneous-functions','anchor' => 'function_values'),   'VAR_POP' => array('link' => 'group-by-functions','anchor' => 'function_var_pop'),   'VAR_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_var_samp'),   'VARIANCE' => array('link' => 'group-by-functions','anchor' => 'function_variance'),   'VERSION' => array('link' => 'information-functions','anchor' => 'function_version'),   'WEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_week'),   'WEEKDAY' => array('link' => 'date-and-time-functions','anchor' => 'function_weekday'),   'WEEKOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_weekofyear'),   'XOR' => array('link' => 'logical-operators','anchor' => 'operator_xor'),   'YEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_year'),   'YEARWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_yearweek'),   'SOUNDS_LIKE' => array('link' => 'string-functions','anchor' => 'operator_sounds-like'),   'IS_NOT_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-not-null'),   'IS_NOT' => array('link' => 'comparison-operators','anchor' => 'operator_is-not'),   'IS_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-null'),   'NOT_LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_not-like'),   'NOT_REGEXP' => array('link' => 'regexp','anchor' => 'operator_not-regexp'),   'COUNT_DISTINCT' => array('link' => 'group-by-functions','anchor' => 'function_count-distinct'),   'NOT_IN' => array('link' => 'comparison-operators','anchor' => 'function_not-in'));?>
<?php/** * Enter description here... * @package PhpMyAdmin * *//** * Database listing. */require_once './libraries/List_Database.class.php';/** * phpMyAdmin main Controller * * * * @package PhpMyAdmin */class PMA{    /**     * Holds database list     *     * @var PMA_List_Database     */    protected $databases = null;    /**     * DBMS user link     *     * @var resource     */    protected $userlink = null;    /**     * DBMS control link     *     * @var resource     */    protected $controllink = null;    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @return mixed     */    public function __get($param)    {        switch ($param) {            case 'databases' :                return $this->getDatabaseList();                break;            case 'userlink' :                return $this->userlink;                break;            case 'controllink' :                return $this->controllink;                break;        }        return null;    }    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @param mixed  $value     */    public function __set($param, $value)    {        switch ($param) {            case 'userlink' :                $this->userlink = $value;                break;            case 'controllink' :                $this->controllink = $value;                break;        }    }    /**     * Accessor to PMA::$databases     *     * @return PMA_List_Databases     */    public function getDatabaseList()    {        if (null === $this->databases) {            $this->databases = new PMA_List_Database($this->userlink, $this->controllink);        }        return $this->databases;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays index edit/creation form and handles it * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Index.class.php';require_once './libraries/tbl_common.php';// Get fields and stores their name/type$fields = array();foreach (PMA_DBI_get_columns_full($db, $table) as $row) {    if (preg_match('@^(set|enum)\((.+)\)$@i', $row['Type'], $tmp)) {        $tmp[2]         = substr(preg_replace('@([^,])\'\'@', '\\1\\\'',            ',' . $tmp[2]), 1);        $fields[$row['Field']] = $tmp[1] . '(' . str_replace(',', ', ', $tmp[2]) . ')';    } else {        $fields[$row['Field']] = $row['Type'];    }} // end while// Prepares the form valuesif (isset($_REQUEST['index'])) {    if (is_array($_REQUEST['index'])) {        // coming already from form        $index = new PMA_Index($_REQUEST['index']);    } else {        $index = PMA_Index::singleton($db, $table, $_REQUEST['index']);    }} else {    $index = new PMA_Index;}/** * Process the data from the edit/create index form, * run the query to build the new index * and moves back to "tbl_sql.php" */if (isset($_REQUEST['do_save_data'])) {    $error = false;    // $sql_query is the one displayed in the query box    $sql_query = 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table);    // Drops the old index    if (! empty($_REQUEST['old_index'])) {        if ($_REQUEST['old_index'] == 'PRIMARY') {            $sql_query .= ' DROP PRIMARY KEY,';        } else {            $sql_query .= ' DROP INDEX ' . PMA_backquote($_REQUEST['old_index']) . ',';        }    } // end if    // Builds the new one    switch ($index->getType()) {        case 'PRIMARY':            if ($index->getName() == '') {                $index->setName('PRIMARY');            } elseif ($index->getName() != 'PRIMARY') {                $error = PMA_Message::error(__('The name of the primary key must be "PRIMARY"!'));            }            $sql_query .= ' ADD PRIMARY KEY';            break;        case 'FULLTEXT':        case 'UNIQUE':        case 'INDEX':        case 'SPATIAL':            if ($index->getName() == 'PRIMARY') {                $error = PMA_Message::error(__('Can\'t rename index to PRIMARY!'));            }            $sql_query .= ' ADD ' . $index->getType() . ' '                . ($index->getName() ? PMA_backquote($index->getName()) : '');            break;    } // end switch    $index_fields = array();    foreach ($index->getColumns() as $key => $column) {        $index_fields[$key] = PMA_backquote($column->getName());        if ($column->getSubPart()) {            $index_fields[$key] .= '(' . $column->getSubPart() . ')';        }    } // end while    if (empty($index_fields)) {        $error = PMA_Message::error(__('No index parts defined!'));    } else {        $sql_query .= ' (' . implode(', ', $index_fields) . ')';    }    if (! $error) {        PMA_DBI_query($sql_query);        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['index_table'] = PMA_Index::getView($table, $db);            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';        exit;    } else {        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['error'] = $error;            PMA_ajaxResponse($error, false);        }        $error->display();    }} // end builds the new index/** * Display the form to edit/create an index */// Displays headers (if needed)$GLOBALS['js_include'][] = 'indexes.js';require_once './libraries/tbl_info.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    include_once './libraries/tbl_links.inc.php';}if (isset($_REQUEST['index']) && is_array($_REQUEST['index'])) {    // coming already from form    $add_fields        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();    if (isset($_REQUEST['add_fields'])) {        $add_fields += $_REQUEST['added_fields'];    }} elseif (isset($_REQUEST['create_index'])) {    $add_fields = $_REQUEST['added_fields'];} else {    $add_fields = 1;}// end preparing form values?><form action="./tbl_indexes.php" method="post" name="index_frm" id="index_frm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>    onsubmit="if (typeof(this.elements['index[Key_name]'].disabled) != 'undefined') {        this.elements['index[Key_name]'].disabled = false}"><?php$form_params = array(    'db'    => $db,    'table' => $table,);if (isset($_REQUEST['create_index'])) {    $form_params['create_index'] = 1;} elseif (isset($_REQUEST['old_index'])) {    $form_params['old_index'] = $_REQUEST['old_index'];} elseif (isset($_REQUEST['index'])) {    $form_params['old_index'] = $_REQUEST['index'];}echo PMA_generate_common_hidden_inputs($form_params);?><fieldset id="index_edit_fields"><?phpif ($GLOBALS['is_ajax_request'] != true) {?>    <legend><?php    if (isset($_REQUEST['create_index'])) {        echo __('Add index');    } else {        echo __('Edit index');    }?>    </legend><?php}?><div class='index_info'>    <div>        <div class="label">            <strong>                <label for="input_index_name">                    <?php echo __('Index name:'); ?>                    <?php echo PMA_showhint(PMA_Message::notice(__('("PRIMARY" <b>must</b> be the name of and <b>only of</b> a primary key!)'))); ?>                </label>            </strong>        </div>        <input type="text" name="index[Key_name]" id="input_index_name" size="25"            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />    </div>    <div>        <div class="label">            <strong>                <label for="select_index_type">                    <?php echo __('Index type:'); ?>                    <?php echo PMA_showMySQLDocu('SQL-Syntax', 'ALTER_TABLE'); ?>                </label>            </strong>        </div>        <select name="index[Index_type]" id="select_index_type" >            <?php echo $index->generateIndexSelector(); ?>        </select>    </div>    <div class="clearfloat"></div></div><table id="index_columns"><thead><tr><th><?php echo __('Column'); ?></th>    <th><?php echo __('Size'); ?></th></tr></thead><tbody><?php$odd_row = true;$spatial_types = array(    'geometry', 'point', 'linestring', 'polygon', 'multipoint',    'multilinestring', 'multipolygon', 'geomtrycollection');foreach ($index->getColumns() as $column) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))        ) {            echo '<option value="' . htmlspecialchars($field_name) . '"'                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'                 . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'                 . '</option>' . "\n";        }    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]"            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']for ($i = 0; $i < $add_fields; $i++) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        echo '<option value="' . htmlspecialchars($field_name) . '">'             . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'             . '</option>' . "\n";    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]" value="" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']?></tbody></table></fieldset><fieldset class="tblFooters"><?php    if ($GLOBALS['is_ajax_request'] != true) {?>    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" />    <span id="addMoreColumns"><?phpecho __('Or') . ' ';printf(    __('Add to index &nbsp;%s&nbsp;column(s)') . "\n",    '<input type="text" name="added_fields" size="2" value="1" />');echo '<input type="submit" name="add_fields" value="' . __('Go') . '" />' . "\n";?>    </span><?php    } else {        $btn_value = sprintf(__('Add %d column(s) to index'), 1);        echo '<div class="slider"></div>';        echo '<div class="add_fields">';        echo '<input type="submit" value="' . $btn_value . '" />';        echo '</div>';    }?></fieldset></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * MIME detection code. * * @package PhpMyAdmin * @todo Maybe we could try to use fileinfo module if loaded *//** * Tries to detect MIME type of content. * * @param string &$test * @return string */function PMA_detectMIME(&$test){    $len = strlen($test);    if ($len >= 2 && $test[0] == chr(0xff) && $test[1] == chr(0xd8)) {        return 'image/jpeg';    }    if ($len >= 3 && substr($test, 0, 3) == 'GIF') {        return 'image/gif';    }    if ($len >= 4 && substr($test, 0, 4) == "\x89PNG") {        return 'image/png';    }    return 'application/octet-stream';}?>
<?php/** * Handles the visualization of GIS GEOMETRYCOLLECTION objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Geometrycollection extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($sub_part);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $color, $scale_data, $image)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $image = $gis_obj->prepareRowAsPng($sub_part, $label, $color, $scale_data, $image);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $pdf = $gis_obj->prepareRowAsPdf($sub_part, $label, $color, $scale_data, $pdf);        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsSvg($sub_part, $label, $color, $scale_data);        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsOl($sub_part, $srid, $label, $color, $scale_data);        }        return $row;    }    /**     * Split the GEOMETRYCOLLECTION object and get its constituents.     *     * @param string $goem_col Geometry collection string     *     * @return the constituents of the geometry collection object     */    private function _explodeGeomCol($goem_col)    {        $sub_parts = array();        $br_count = 0;        $start = 0;        $count = 0;        foreach (str_split($goem_col) as $char) {            if ($char == '(') {                $br_count++;            } elseif ($char == ')') {                $br_count--;                if ($br_count == 0) {                    $sub_parts[] = substr($goem_col, $start, ($count + 1 - $start));                    $start = $count + 2;                }            }            $count++;        }        return $sub_parts;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $geom_count = (isset($gis_data['GEOMETRYCOLLECTION']['geom_count']))            ? $gis_data['GEOMETRYCOLLECTION']['geom_count'] : 1;        $wkt = 'GEOMETRYCOLLECTION(';        for ($i = 0; $i < $geom_count; $i++) {            if (isset($gis_data[$i]['gis_type'])) {                $type = $gis_data[$i]['gis_type'];                $gis_obj = PMA_GIS_Factory::factory($type);                if (! $gis_obj) {                    continue;                }                $wkt .= $gis_obj->generateWkt($gis_data, $i, $empty) . ',';            }        }        if (isset($gis_data[0]['gis_type'])) {            $wkt = substr($wkt, 0, strlen($wkt) - 1);        }        $wkt .= ')';        return $wkt;    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value)    {        $params = array();        $data = PMA_GIS_Geometry::generateParams($value);        $params['srid'] = $data['srid'];        $wkt = $data['wkt'];        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($wkt, 19, (strlen($wkt) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        $params['GEOMETRYCOLLECTION']['geom_count'] = count($sub_parts);        $i = 0;        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $params = array_merge($params, $gis_obj->generateParams($sub_part, $i));            $i++;        }        return $params;    }}?>
<?php/** * Handles the visualization of GIS POINT objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Point extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        return $this->setMinMax($point, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $image       Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $point_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            imagearc($image, $points_arr[0][0], $points_arr[0][1], 7, 7, 0, 360, $color);            // print label if applicable            if (isset($label) && trim($label) != '') {                imagestring($image, 1, $points_arr[0][0], $points_arr[0][1], trim($label), $black);            }        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $pdf         TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $point_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $line  = array('width' => 1.25, 'color' => array($red, $green, $blue));        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $pdf->Circle($points_arr[0][0], $points_arr[0][1], 2, 0, 360, 'D', $line);            // print label if applicable            if (isset($label) && trim($label) != '') {                $pdf->SetXY($points_arr[0][0], $points_arr[0][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $point_color, $scale_data)    {        $point_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'point vector',            'fill'        => 'white',            'stroke'      => $point_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        $row = '';        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $row .= '<circle cx="' . $points_arr[0][0] . '" cy="' . $points_arr[0][1] . '" r="3"';            foreach ($point_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial     GIS POINT object     * @param int    $srid        Spatial reference ID     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $point_color, $scale_data)    {        $style_options = array(            'pointRadius'  => 3,            'fillColor'    => '#ffffff',            'strokeColor'  => $point_color,            'strokeWidth'  => 2,            'label'        => $label,            'labelYOffset' => -8,            'fontSize'     => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, null);        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(('                . 'new OpenLayers.Geometry.Point(' . $points_arr[0][0] . ', '                . $points_arr[0][1] . ').transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject())), null, '                . json_encode($style_options) . '));';        }        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Point deos not adhere to this parameter     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {         return 'POINT('             . ((isset($gis_data[$index]['POINT']['x']) && trim($gis_data[$index]['POINT']['x']) != '')             ? $gis_data[$index]['POINT']['x'] : '') . ' '             . ((isset($gis_data[$index]['POINT']['y']) && trim($gis_data[$index]['POINT']['y']) != '')             ? $gis_data[$index]['POINT']['y'] : '') . ')';    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        return 'POINT(' . (isset($row_data['x']) ? $row_data['x'] : '')             . ' ' . (isset($row_data['y']) ? $row_data['y'] : '') . ')';    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POINT';            $wkt = $value;        }        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($wkt, 6, (strlen($wkt) - 7));        $points_arr = $this->extractPoints($point, null);        $params[$index]['POINT']['x'] = $points_arr[0][0];        $params[$index]['POINT']['y'] = $points_arr[0][1];        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__imagelink_info(){    return array(        'info' => __('Displays an image and a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second and third options are the width and the height in pixels.'),        );}/** * */function PMA_transformation_text_plain__imagelink($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" target="_blank"><img src="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" border="0" width="' . (isset($options[1]) ? $options[1] : 100) . '" height="' . (isset($options[2]) ? $options[2] : 50) . '" />' . $buffer . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['information_schema_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLLATION_CHARACTER_SET_APPLICABILITY' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLUMN_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'KEY_COLUMN_USAGE' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'ROUTINES' => array(        'ROUTINE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'SCHEMATA' => array(        'DEFAULT_CHARACTER_SET_NAME' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'SCHEMA_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_PRIVILEGES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'VIEWS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'information_schema',            'foreign_table' => 'SCHEMATA',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbxt extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBXT storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'pbxt_index_cache_size' => array(                'title' => __('Index cache size'),                'desc'  => __('This is the amount of memory allocated to the index cache. Default value is 32MB. The memory allocated here is used only for caching index pages.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_record_cache_size' => array(                'title' => __('Record cache size'),                'desc'  => __('This is the amount of memory allocated to the record cache used to cache table data. The default value is 32MB. This memory is used to cache changes to the handle data (.xtd) and row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_cache_size' => array(                'title' => __('Log cache size'),                'desc'  => __('The amount of memory allocated to the transaction log cache used to cache on transaction log data. The default is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_threshold' => array(                'title' => __('Log file threshold'),                'desc'  => __('The size of a transaction log before rollover, and a new log is created. The default value is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_transaction_buffer_size' => array(                'title' => __('Transaction buffer size'),                'desc'  => __('The size of the global transaction log buffer (the engine allocates 2 buffers of this size). The default is 1MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_checkpoint_frequency' => array(                'title' => __('Checkpoint frequency'),                'desc'  => __('The amount of data written to the transaction log before a checkpoint is performed. The default value is 24MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_log_threshold' => array(                'title' => __('Data log threshold'),                'desc'  => __('The maximum size of a data log file. The default value is 64MB. PBXT can create a maximum of 32000 data logs, which are used by all tables. So the value of this variable can be increased to increase the total amount of data that can be stored in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_garbage_threshold' => array(                'title' => __('Garbage threshold'),                'desc'  => __('The percentage of garbage in a data log file before it is compacted. This is a value between 1 and 99. The default is 50.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),            'pbxt_log_buffer_size' => array(                'title' => __('Log buffer size'),                'desc'  => __('The size of the buffer used when writing a data log. The default is 256MB. The engine allocates one buffer per thread, but only if the thread is required to write a data log.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_file_grow_size' => array(                'title' => __('Data file grow size'),                'desc'  => __('The grow size of the handle data (.xtd) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_row_file_grow_size' => array(                'title' => __('Row file grow size'),                'desc'  => __('The grow size of the row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_count' => array(                'title' => __('Log file count'),                'desc'  => __('This is the number of transaction log files (pbxt/system/xlog*.xt) the system will maintain. If the number of logs exceeds this value then old logs will be deleted, otherwise they are renamed and given the next highest number.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),        );    }    /**     * returns the pbxt engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE variables.     *     * @param   string   $formatted_size   the size expression (for example 8MB)     *     * @return string the formatted value and its unit     */    function resolveTypeSize($formatted_size)    {        if (preg_match('/^[0-9]+[a-zA-Z]+$/', $formatted_size)) {            $value = PMA_extractValueFromFormattedSize($formatted_size);        } else {            $value = $formatted_size;        }        return PMA_formatByteDown($value);    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBXT can be found on the %sPrimeBase XT Home Page%s.'), '<a href="' . PMA_linkURL('http://www.primebase.com/xt/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://pbxt.blogspot.com/') . '" target="_blank">' . __('The PrimeBase XT Blog by Paul McCullagh') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">' . __('The PrimeBase Media Streaming (PBMS) home page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (!defined('PHPMYADMIN')) {    exit;}/**  * constant for differenciating array in $_SESSION variable  */$SESSION_KEY = '__upload_status';/**  * sets default plugin for handling the import process  */$_SESSION[$SESSION_KEY]["handler"] = "";/**  * unique ID for each upload  */$upload_id = uniqid("");/**  * list of available plugins  */$plugins = array(       "uploadprogress",       "apc",       "noplugin"       ); // available plugins. Each plugin has own checkfunction in display_import_ajax.lib.php and own file with functions in upload_#KEY#.php// select available pluginforeach ($plugins as $plugin) {    $check = "PMA_import_" . $plugin . "Check";    if ($check()) {        $_SESSION[$SESSION_KEY]["handler"] = $plugin;        include_once "import/upload/" . $plugin . ".php";        break;    }}/**  * Checks if APC bar extension is available and configured correctly.  *  * @return true if APC extension is available and if rfc1867 is enabled, false if it is not  */function PMA_import_apcCheck(){    if (! extension_loaded('apc') || ! function_exists('apc_fetch') || ! function_exists('getallheaders')) {        return false;    }    return (ini_get('apc.enabled') && ini_get('apc.rfc1867'));}/**  * Checks if UploadProgress bar extension is available.  *  * @return true if UploadProgress extension is available, false if it is not  */function PMA_import_uploadprogressCheck(){    if (! function_exists("uploadprogress_get_info") || ! function_exists('getallheaders')) {        return false;    }    return true;}/**  * Default plugin for handling import. If no other plugin is available, noplugin is used.  *  * @return true  */function PMA_import_nopluginCheck(){    return true;}/**  * The function outputs json encoded status of uploaded. It uses PMA_getUploadStatus, which is defined in plugin's file.  *  * @param $id - ID of transfer, usually $upload_id from display_import_ajax.lib.php  */function PMA_importAjaxStatus($id){    header('Content-type: application/json');    echo json_encode(PMA_getUploadStatus($id));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build NHibernate dumps of tables * * @package PhpMyAdmin-Export * @subpackage Codegen */if (! defined('PHPMYADMIN')) {    exit;}/** * This gets executed twice so avoid a notice */if (! defined('CG_FORMAT_NHIBERNATE_CS')) {    define("CG_FORMAT_NHIBERNATE_CS", "NHibernate C# DO");    define("CG_FORMAT_NHIBERNATE_XML", "NHibernate XML");    define("CG_HANDLER_NHIBERNATE_CS_BODY", "handleNHibernateCSBody");    define("CG_HANDLER_NHIBERNATE_XML_BODY", "handleNHibernateXMLBody");}$CG_FORMATS = array(CG_FORMAT_NHIBERNATE_CS, CG_FORMAT_NHIBERNATE_XML);$CG_HANDLERS = array(CG_HANDLER_NHIBERNATE_CS_BODY, CG_HANDLER_NHIBERNATE_XML_BODY);/** * */if (isset($plugin_list)) {    $plugin_list['codegen'] = array(        'text' => 'CodeGen',        'extension' => 'cs',        'mime_type' => 'text/cs',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'select', 'name' => 'format', 'text' => __('Format:'), 'values' => $CG_FORMATS),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in NHibernate format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $CG_FORMATS, $CG_HANDLERS, $what;        $format = $GLOBALS[$what . '_format'];        if (isset($CG_FORMATS[$format])) {            return PMA_exportOutputHandler($CG_HANDLERS[$format]($db, $table, $crlf));        }        return PMA_exportOutputHandler(sprintf("%s is not supported.", $format));    }    /**     *     * @package PhpMyAdmin-Export     * @subpackage Codegen     */    class TableProperty    {        public $name;        public $type;        public $nullable;        public $key;        public $defaultValue;        public $ext;        function __construct($row)        {            $this->name = trim($row[0]);            $this->type = trim($row[1]);            $this->nullable = trim($row[2]);            $this->key = trim($row[3]);            $this->defaultValue = trim($row[4]);            $this->ext = trim($row[5]);        }        function getPureType()        {            $pos=strpos($this->type, "(");            if ($pos > 0)                return substr($this->type, 0, $pos);            return $this->type;        }        function isNotNull()        {            return $this->nullable == "NO" ? "true" : "false";        }        function isUnique()        {            return $this->key == "PRI" || $this->key == "UNI" ? "true" : "false";        }        function getDotNetPrimitiveType()        {            if (strpos($this->type, "int") === 0) return "int";            if (strpos($this->type, "long") === 0) return "long";            if (strpos($this->type, "char") === 0) return "string";            if (strpos($this->type, "varchar") === 0) return "string";            if (strpos($this->type, "text") === 0) return "string";            if (strpos($this->type, "longtext") === 0) return "string";            if (strpos($this->type, "tinyint") === 0) return "bool";            if (strpos($this->type, "datetime") === 0) return "DateTime";            return "unknown";        }        function getDotNetObjectType()        {            if (strpos($this->type, "int") === 0) return "Int32";            if (strpos($this->type, "long") === 0) return "Long";            if (strpos($this->type, "char") === 0) return "String";            if (strpos($this->type, "varchar") === 0) return "String";            if (strpos($this->type, "text") === 0) return "String";            if (strpos($this->type, "longtext") === 0) return "String";            if (strpos($this->type, "tinyint") === 0) return "Boolean";            if (strpos($this->type, "datetime") === 0) return "DateTime";            return "Unknown";        }        function getIndexName()        {            if (strlen($this->key)>0)                return "index=\"" . htmlspecialchars($this->name, ENT_COMPAT, 'UTF-8') . "\"";            return "";        }        function isPK()        {            return $this->key=="PRI";        }        function formatCs($text)        {            $text=str_replace("#name#", cgMakeIdentifier($this->name, false), $text);            return $this->format($text);        }        function formatXml($text)        {            $text=str_replace("#name#", htmlspecialchars($this->name, ENT_COMPAT, 'UTF-8'), $text);            $text=str_replace("#indexName#", $this->getIndexName(), $text);            return $this->format($text);        }        function format($text)        {            $text=str_replace("#ucfirstName#", cgMakeIdentifier($this->name), $text);            $text=str_replace("#dotNetPrimitiveType#", $this->getDotNetPrimitiveType(), $text);            $text=str_replace("#dotNetObjectType#", $this->getDotNetObjectType(), $text);            $text=str_replace("#type#", $this->getPureType(), $text);            $text=str_replace("#notNull#", $this->isNotNull(), $text);            $text=str_replace("#unique#", $this->isUnique(), $text);            return $text;        }    }    function cgMakeIdentifier($str, $ucfirst = true)    {        // remove unsafe characters        $str = preg_replace('/[^\p{L}\p{Nl}_]/u', '', $str);        // make sure first character is a letter or _        if (!preg_match('/^\pL/u', $str)) {            $str = '_' . $str;        }        if ($ucfirst) {            $str = ucfirst($str);        }        return $str;    }    function handleNHibernateCSBody($db, $table, $crlf)    {        $lines=array();        $result=PMA_DBI_query(sprintf('DESC %s.%s', PMA_backquote($db), PMA_backquote($table)));        if ($result) {            $tableProperties=array();            while ($row = PMA_DBI_fetch_row($result)) {                $tableProperties[] = new TableProperty($row);            }            PMA_DBI_free_result($result);            $lines[] = 'using System;';            $lines[] = 'using System.Collections;';            $lines[] = 'using System.Collections.Generic;';            $lines[] = 'using System.Text;';            $lines[] = 'namespace ' . cgMakeIdentifier($db);            $lines[] = '{';            $lines[] = '    #region ' . cgMakeIdentifier($table);            $lines[] = '    public class ' . cgMakeIdentifier($table);            $lines[] = '    {';            $lines[] = '        #region Member Variables';            foreach ($tableProperties as $tablePropertie) {                $lines[] = $tablePropertie->formatCs('        protected #dotNetPrimitiveType# _#name#;');            }            $lines[] = '        #endregion';            $lines[] = '        #region Constructors';            $lines[] = '        public ' . cgMakeIdentifier($table).'() { }';            $temp = array();            foreach ($tableProperties as $tablePropertie) {                if (! $tablePropertie->isPK()) {                    $temp[] = $tablePropertie->formatCs('#dotNetPrimitiveType# #name#');                }            }            $lines[] = '        public ' . cgMakeIdentifier($table) . '(' . implode(', ', $temp) . ')';            $lines[] = '        {';            foreach ($tableProperties as $tablePropertie) {                if (! $tablePropertie->isPK()) {                    $lines[] = $tablePropertie->formatCs('            this._#name#=#name#;');                }            }            $lines[] = '        }';            $lines[] = '        #endregion';            $lines[] = '        #region Public Properties';            foreach ($tableProperties as $tablePropertie) {                $lines[] = $tablePropertie->formatCs(''                    . '        public virtual #dotNetPrimitiveType# #ucfirstName#' . "\n"                    . '        {' . "\n"                    . '            get {return _#name#;}' . "\n"                    . '            set {_#name#=value;}' . "\n"                    . '        }'                    );            }            $lines[] = '        #endregion';            $lines[] = '    }';            $lines[] = '    #endregion';            $lines[] = '}';        }        return implode("\n", $lines);    }    function handleNHibernateXMLBody($db, $table, $crlf)    {        $lines = array();        $lines[] = '<?xml version="1.0" encoding="utf-8" ?' . '>';        $lines[] = '<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" '            . 'namespace="' . cgMakeIdentifier($db) . '" '            . 'assembly="' . cgMakeIdentifier($db) . '">';        $lines[] = '    <class '            . 'name="' . cgMakeIdentifier($table) . '" '            . 'table="' . cgMakeIdentifier($table) . '">';        $result = PMA_DBI_query(sprintf("DESC %s.%s", PMA_backquote($db), PMA_backquote($table)));        if ($result) {            while ($row = PMA_DBI_fetch_row($result)) {                $tablePropertie = new TableProperty($row);                if ($tablePropertie->isPK())                    $lines[] = $tablePropertie->formatXml(''                        . '        <id name="#ucfirstName#" type="#dotNetObjectType#" unsaved-value="0">' . "\n"                        . '            <column name="#name#" sql-type="#type#" not-null="#notNull#" unique="#unique#" index="PRIMARY"/>' . "\n"                        . '            <generator class="native" />' . "\n"                        . '        </id>');                else                    $lines[] = $tablePropertie->formatXml(''                        . '        <property name="#ucfirstName#" type="#dotNetObjectType#">' . "\n"                        . '            <column name="#name#" sql-type="#type#" not-null="#notNull#" #indexName#/>' . "\n"                        . '        </property>');            }            PMA_DBI_free_result($result);        }        $lines[] = '    </class>';        $lines[] = '</hibernate-mapping>';        return implode("\n", $lines);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the partitions * * @package PhpMyAdmin *//** * base Partition Class * @package PhpMyAdmin */class PMA_Partition{    /**     * returns array of partition names for a specific db/table     *     * @access  public     * @return  array   of partition names     */    static public function getPartitionNames($db, $table)    {        if (PMA_Partition::havePartitioning()) {            return PMA_DBI_fetch_result("select `PARTITION_NAME` from `information_schema`.`PARTITIONS` where `TABLE_SCHEMA` = '" . $db . "' and `TABLE_NAME` = '" . $table . "'");        } else {            return array();        }    }    /**     * checks if MySQL server supports partitioning     *     * @static     * @staticvar boolean $have_partitioning     * @staticvar boolean $already_checked     * @access  public     * @return  boolean     */    static public function havePartitioning()    {        static $have_partitioning = false;        static $already_checked = false;        if (! $already_checked) {            $have_partitioning = PMA_MYSQL_INT_VERSION >= 50100 && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'have_partitioning';");            $already_checked = true;        }        return $have_partitioning;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying language selection * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sorts available languages by their true english names * * @param array   the array to be sorted * @param mixed   a required parameter * @return  the sorted array * @access  private */function PMA_language_cmp(&$a, &$b){    return (strcmp($a[1], $b[1]));} // end of the 'PMA_language_cmp()' function/** * Displays for for language selection * * @access  public */function PMA_select_language($use_fieldset = false, $show_doc = true){    global $cfg, $lang;    ?><form method="post" action="index.php" target="_parent">    <?php    $_form_params = array(        'db' => $GLOBALS['db'],        'table' => $GLOBALS['table'],    );    echo PMA_generate_common_hidden_inputs($_form_params);    // For non-English, display "Language" with emphasis because it's    // not a proper word in the current language; we show it to help    // people recognize the dialog    $language_title = __('Language')        . (__('Language') != 'Language' ? ' - <em>Language</em>' : '');    if ($show_doc) {        $language_title .= PMA_showDocu('faq7_2');    }    if ($use_fieldset) {        echo '<fieldset><legend xml:lang="en" dir="ltr">' . $language_title . '</legend>';    } else {        echo '<bdo xml:lang="en" dir="ltr">' . $language_title . ':</bdo>';    }    ?>    <select name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    uasort($GLOBALS['available_languages'], 'PMA_language_cmp');    foreach ($GLOBALS['available_languages'] as $id => $tmplang) {        $lang_name = PMA_langName($tmplang);        //Is current one active?        if ($lang == $id) {            $selected = ' selected="selected"';        } else {            $selected = '';        }        echo '        ';        echo '<option value="' . $id . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select>    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    <noscript>    <?php    if ($use_fieldset) {        echo '<fieldset class="tblFooters">';    }    ?>        <input type="submit" value="Go" />    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    </noscript></form>    <?php} // End of function PMA_select_language?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Validator interface for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This function uses the Mimer SQL Validator service * <http://developer.mimer.com/validator/index.htm> from phpMyAdmin * * Copyright for Server side validator systems: * "All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved." * * All data is transported over HTTP-SOAP * And uses the PEAR SOAP Module * * Install instructions for PEAR SOAP * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * Enable the SQL Validator options in the configuration file * $cfg['SQLQuery']['Validate'] = true; * $cfg['SQLValidator']['use']  = true; * * Also set a username and password if you have a private one * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need the PEAR libraries, so do a minimum version check first * I'm not sure if PEAR was available before this point * For now we actually use a configuration flag */if ($cfg['SQLValidator']['use'] == true) {    include_once './libraries/sqlvalidator.class.php';} // if ($cfg['SQLValidator']['use'] == true)/** * This function utilizes the Mimer SQL Validator service * to validate an SQL query * * <http://developer.mimer.com/validator/index.htm> * * @param string   SQL query to validate * * @return  string   Validator result string * * @global  array    The PMA configuration array */function PMA_validateSQL($sql){    global $cfg;    $str = '';    if ($cfg['SQLValidator']['use']) {        if (isset($GLOBALS['sqlvalidator_error'])            && $GLOBALS['sqlvalidator_error']) {            $str = sprintf(__('The SQL validator could not be initialized. Please check if you have installed the necessary PHP extensions as described in the %sdocumentation%s.'), '<a href="./Documentation.html#faqsqlvalidator" target="documentation">', '</a>');        } else {            // create new class instance            $srv = new PMA_SQLValidator();            // Checks for username settings            // The class defaults to anonymous with an empty password            // automatically            if ($cfg['SQLValidator']['username'] != '') {                $srv->setCredentials($cfg['SQLValidator']['username'], $cfg['SQLValidator']['password']);            }            // Identify ourselves to the server properly...            $srv->appendCallingProgram('phpMyAdmin', PMA_VERSION);            // ... and specify what database system we are using            $srv->setTargetDbms('MySQL', PMA_MYSQL_STR_VERSION);            // Log on to service            $srv->start();            // Do service validation            $str = $srv->validationString($sql);        }    } // end if    // Gives string back to caller    return $str;} // end of the "PMA_validateSQL()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * main css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (        isset($_COOKIE['pma_fontsize']) ? $_COOKIE['pma_fontsize'] : '82%'));?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    padding:            0;    margin:             0 0.5em 0 0;    color:              #444;    background:         #fff;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>textarea, tt, pre, code {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>h1 {    font-size:          140%;    font-weight:        bold;}h2 {    font-size:          2em;    font-weight:        normal;    text-shadow:        0 1px 0 #fff;    padding:            10px 0 10px 3px;    color:              #777;}/* Hiding icons in the page titles */h2 img{display:none;}h2 a img{display:inline;}.data,.data_full_width {    margin: 0 0 12px 0;}.data_full_width {    width: 100%;}#table_results td.data {border-right: 1px solid #BBBBBB;}h3 {    font-weight:        bold;}a, a:link,a:visited,a:active {    text-decoration:    none;    color:              #235a81;    cursor:             pointer;    outline: none;}a:hover {    text-decoration:    underline;    color:              #235a81;}#initials_table {    background:#f3f3f3;    border:1px solid #aaa;    margin-bottom:10px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;}#initials_table td{padding:8px !important}#initials_table a {    border:1px solid #aaa;    background:#fff;    padding:4px 8px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}dfn {    font-style:         normal;}dfn:hover {    font-style:         normal;    cursor:             help;}th {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         #f3f3f3;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}a img {    border:             0;}hr {    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background-color:   <?php echo $GLOBALS['cfg']['MainColor']; ?>;    border:             0;    height:             1px;}form {    padding:            0;    margin:             0;    display:            inline;}input[type=text]{    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    box-shadow:0 1px 2px #ddd;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);    border:1px solid #aaa;    color:#555555;    padding:4px;    margin:6px;}input[type=password]{    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    box-shadow:0 1px 2px #ddd;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);    border:1px solid #aaa;    color:#555555;    padding:4px;    margin:6px;}input[type=submit]{    font-weight:bold;    margin-left:14px;    border: 1px solid #aaa;    padding: 3px 7px;    color: #111;    text-decoration: none;    background: #ddd;    border-radius: 12px;    -webkit-border-radius: 12px;    -moz-border-radius: 12px;    text-shadow: 0 1px 0 #fff;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}input[type=submit]:hover{position: relative;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>    cursor:pointer;}input[type=submit]:active{position: relative;    top: 1px;    left: 1px;}textarea {    overflow:           visible;    height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;}textarea.char {    height:             <?php echo ceil($GLOBALS['cfg']['CharTextareaRows'] * 1.2); ?>em;}fieldset {    margin-top:         1em;    border-radius:4px 4px 0 0;    -moz-border-radius:4px 4px 0 0;    -webkit-border-radius:4px 4px 0 0;    padding:5px;    border:             #aaa solid 1px;    padding:            1.5em;    background:         #eee;    text-shadow:0 1px 0 #fff;    -moz-box-shadow: 1px 1px 2px #fff inset;    -webkit-box-shadow: 1px 1px 2px #fff inset;    box-shadow: 1px 1px 2px #fff inset;}fieldset fieldset {    margin:             0.8em;    background:#fff;    border:1px solid #aaa;    background:none repeat scroll 0 0 #E8E8E8;}fieldset legend {    font-weight:        bold;    color:              #444;    padding:5px 10px;    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    border:1px solid #aaa;    background-color:   #fff;    -moz-box-shadow:3px 3px 15px #bbb;    -webkit-box-shadow:3px 3px 15px #bbb;    box-shadow:3px 3px 15px #bbb;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}table caption,table th,table td {    padding:            0.3em;    margin:             0.1em;    vertical-align:     top;    text-shadow:0 1px 0 #FFFFFF;}/* 3.4 */table{border-collapse:collapse;}th{border-right:1px solid #fff; text-align:left;}img, button {    vertical-align:     middle;}input[type="checkbox"],input[type="radio"] {    vertical-align: -11%;}select{    -moz-border-radius:2px;    -webkit-border-radius:2px;    border-radius:2px;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    box-shadow:0 1px 2px #ddd;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif)}select[multiple] {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'f2f2f2'); ?>}/******************************************************************************//* classes */.clearfloat {    clear: both;}.floatleft {    float: <?php echo $left; ?>;    margin-<?php echo $right; ?>: 1em;}.paddingtop {    padding-top: 1em;}.separator {    color: white;    text-shadow: 0 1px 0 black;}div.tools {   /* border: 1px solid #000000; */    padding: 0.2em;}div.tools a{color:#3a7ead !important;}div.tools,fieldset.tblFooters {    margin-top:         0;    margin-bottom:      0.5em;    /* avoid a thick line since this should be used under another fieldset */    border-top:         0;    text-align:         <?php echo $right; ?>;    float:              none;    clear:              both;    -webkit-border-radius:0 0 4px 4px;    -moz-border-radius:0 0 4px 4px;    border-radius: 0 0 4px 5px;}div.null_div {    height: 20px;    text-align: center;    font-style:normal;    min-width:50px;}fieldset .formelement {    float:              <?php echo $left; ?>;    margin-<?php echo $right; ?>:       0.5em;    /* IE */    white-space:        nowrap;}/* revert for Gecko */fieldset div[class=formelement] {    white-space:        normal;}button.mult_submit {    border:             none;    background-color:   transparent;}/* odd items 1,3,5,7,... */table tr.odd th,.odd {    background: #fff;    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>}/* even items 2,4,6,8,... *//* (tested on CRTs and ACLs) */table tr.even th,.even {    background: #DFDFDF;    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>}/* odd table rows 1,3,5,7,... */table tr.odd th,table tr.odd,table tr.even th,table tr.even {    text-align:         <?php echo $left; ?>;}<?php if ($GLOBALS['cfg']['BrowseMarkerEnable']) { ?>/* marked table rows */td.marked,table tr.marked td,table tr.marked th,table tr.marked {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7;    color:   <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['BrowsePointerEnable']) { ?>/* hovered items */.odd:hover,.even:hover,.hover,.structure_actions_dropdown {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */    color: <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}/* hovered table rows */table tr.odd:hover th,table tr.even:hover th,table tr.hover th {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */    color:   <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}<?php } ?>/** * marks table rows/cells if the db field is in a where condition */.condition {    border-color: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?> !important;}th.condition {    border-width: 1px 1px 0 1px;    border-style: solid;}td.condition {    border-width: 0 1px 0 1px;    border-style: solid;}tr:last-child td.condition {    border-width: 0 1px 1px 1px;}<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>/* for first th which must have right border set (ltr only) */.before-condition {    border-right: 1px solid <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;}<?php } ?>/** * cells with the value NULL */td.null {    font-style: italic;    text-align: <?php echo $right; ?>;}table .valueHeader {    text-align:         <?php echo $right; ?>;    white-space:        normal;}table .value {    text-align:         <?php echo $right; ?>;    white-space:        normal;}/* IE doesnt handles 'pre' right */table [class=value] {    white-space:        normal;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>.value {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>.attention {    color:              red;    font-weight:        bold;}.allfine {    color:              green;}img.lightbulb {    cursor:             pointer;}.pdflayout {    overflow:           hidden;    clip:               inherit;    background-color:   #FFFFFF;    display:            none;    border:             1px solid #000000;    position:           relative;}.pdflayout_table {    background:         #D3DCE3;    color:              #000000;    overflow:           hidden;    clip:               inherit;    z-index:            2;    display:            inline;    visibility:         inherit;    cursor:             move;    position:           absolute;    font-size:          80%;    border:             1px dashed #000000;}/* MySQL Parser */.syntax {    font-family: Verdan, Arial, Tahoma;    font-size:          110%;}.syntax a {    text-decoration: none;    border-bottom:1px dotted black;}.syntax_comment {    padding-left:       4pt;    padding-right:      4pt;}.syntax_digit {}.syntax_digit_hex {}.syntax_digit_integer {}.syntax_digit_float {}.syntax_punct {}.syntax_alpha {}.syntax_alpha_columnType {    text-transform:     uppercase;}.syntax_alpha_columnAttrib {    text-transform:     uppercase;}.syntax_alpha_reservedWord {    text-transform:     uppercase;    font-weight:        bold;}.syntax_alpha_functionName {    text-transform:     uppercase;}.syntax_alpha_identifier {}.syntax_alpha_charset {}.syntax_alpha_variable {}.syntax_quote {    white-space:        pre;}.syntax_quote_backtick {}/* leave some space between icons and text */img.footnotemarker {    display: none;}/* no extra space in table cells */td .icon {    margin: 0;}.selectallarrow {    margin-<?php echo $right; ?>: 0.3em;    margin-<?php echo $left; ?>: 0.6em;}/* message boxes: error, confirmation */.success h1,.notice h1,div.error h1 {    border-bottom:      2px solid;    font-weight:        bold;    text-align:         <?php echo $left; ?>;    margin:             0 0 0.2em 0;}div.success,div.notice,div.error,div.footnotes {    margin:             0.5em 0 1.3em 0;    border:             1px solid;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            10px 10px 10px 25px;        <?php } else { ?>    background-position: 99% 50%;    padding:            25px 10px 10px 10px        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    -moz-box-shadow: 0 1px 1px #fff inset;    -webkit-box-shadow: 0 1px 1px #fff inset;    box-shadow:  0 1px 1px #fff inset;}.success  a{text-decoration:underline;}.notice a{text-decoration:underline;}.error a{text-decoration:underline;}.footnotes a{text-decoration:underline;}.success {    color:              #000000;    background-color:   #ebf8a4;}h1.success, div.success {    border-color:       #a2d246;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}.success h1 {    border-color:       #00FF00;}.notice, .footnotes {    color:              #000;    background-color:   #e8eef1;}h1.notice,div.notice,div.footnotes {    border-color:       #3a6c7e;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}.notice h1 {    border-color:       #ffb10a;}.error {    border:1px solid maroon !important;    color: #000;    background:pink;}h1.error,div.error {    border-color:       #333;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}div.error h1 {    border-color:       #ff0000;}.confirmation {    color:              #000000;    background-color:   pink;}fieldset.confirmation {}fieldset.confirmation legend {}/* end messageboxes */.tblcomment {    font-size:          70%;    font-weight:        normal;    color:              #000099;}.tblHeaders {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}div.tools,.tblFooters {    font-weight:        normal;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}.tblHeaders a:link,.tblHeaders a:active,.tblHeaders a:visited,div.tools a:link,div.tools a:visited,div.tools a:active,.tblFooters a:link,.tblFooters a:active,.tblFooters a:visited {    color:              #0000FF;}.tblHeaders a:hover,div.tools a:hover,.tblFooters a:hover {    color:              #FF0000;}/* forbidden, no privilegs */.noPrivileges {    color:              #FF0000;    font-weight:        bold;}/* disabled text */.disabled,.disabled a:link,.disabled a:active,.disabled a:visited {    color:              #666666;}.disabled a:hover {    color:              #666666;    text-decoration:    none;}tr.disabled td,td.disabled {    background-color:   #f3f3f3;    color:#aaa;}.nowrap {    white-space:        nowrap;}/** * login form */body.loginform h1,body.loginform a.logo {    display: block;    text-align: center;}body.loginform {    text-align: center;}body.loginform div.container {    text-align: <?php echo $left; ?>;    width: 30em;    margin: 0 auto;}form.login label {    float: <?php echo $left; ?>;    width: 10em;    font-weight: bolder;}.commented_column {    border-bottom: 1px dashed black;}.column_attribute {    font-size: 70%;}/******************************************************************************//* specific elements *//* topmenu */#topmenu a {    text-shadow: 0 1px 0 #fff;}#topmenu .error {    background:#eee;border: 0 !important;color:#aaa;}ul#topmenu, ul#topmenu2, ul.tabs {    font-weight:        bold;    list-style-type:    none;    margin:             0;    padding:            0;}ul#topmenu2 {    margin: 0.25em 0.5em 0;    height: 2em;    clear: both;}ul#topmenu li, ul#topmenu2 li {    float:              <?php echo $left; ?>;    margin:             0;    vertical-align:     middle;}#topmenu img, #topmenu2 img {    margin-right:0.5em;    vertical-align:-3px;}.menucontainer{    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_bg.png) repeat-x;    border-top:1px solid #aaa;}/* default tab styles */.tabactive {    background:#fff !important;}ul#topmenu a, ul#topmenu span {    display:            block;    margin:             0;    padding:            0;    white-space:        nowrap;}ul#topmenu ul a {    margin:             0;}ul#topmenu .submenu {    display:           none;    position:          relative;}ul#topmenu .shown {    display:            inline-block;}ul#topmenu ul {    margin:             0;    padding:            0;    position:           absolute;    list-style-type:    none;    display:            none;    border:             1px #ddd solid;    z-index:            2;}ul#topmenu ul.only {    left: 0;}ul#topmenu ul.notonly {    right: 0;}ul#topmenu li:hover {    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_hover_bg.png) repeat-x 50% 0%!important;}ul#topmenu li:hover ul, ul#topmenu .submenuhover ul {    display:            block;    font-weight:3em;    background:#fff;}ul#topmenu ul li {    width:              100%;}ul#topmenu2 a {    display:            block;    margin:             7px 6px 7px 0;    padding:            4px 10px;    white-space:        nowrap;    border:1px solid #ddd;    border-radius: 20px;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    background:#f2f2f2;}/* disabled tabs */ul#topmenu span.tab {    color:              #666666;}fieldset.caution a {    color:              #FF0000;}fieldset.caution a:hover {    color:              #ffffff;    background-color:   #FF0000;}<?php if ($GLOBALS['cfg']['LightTabs']) { ?>/* active tab */ul#topmenu a.tabactive, ul#topmenu2 a.tabactive {    color:              black;}ul#topmenu ul {    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php } else { ?>#topmenu {    margin-top:         0.5em;    padding:            0.1em 0.3em 0.1em 0.3em;}ul#topmenu ul {    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;}ul#topmenu > li {    border-right: 1px solid #fff;    border-left: 1px solid #ccc;}/* default tab styles */ul#topmenu a, ul#topmenu span {    padding: 0.6em;}ul#topmenu ul a {    border-width:       1pt 0 0 0;    -moz-border-radius: 0;    -webkit-border-radius: 0;    border-radius:      0;}ul#topmenu ul li:first-child a {    border-width:       0;}/* enabled hover/active tabs */ul#topmenu > li > a:hover,ul#topmenu > li > .tabactive {    text-decoration:    none;}ul#topmenu ul a:hover,ul#topmenu ul .tabactive {    text-decoration:    none;}ul#topmenu a.tab:hover,ul#topmenu .tabactive {    /* background-color:   <?php echo $GLOBALS['cfg']['MainBackground']; ?>;  */}ul#topmenu2 a.tab:hover,ul#topmenu2 a.tabactive {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    border-radius:      0.3em;    -moz-border-radius: 0.3em;    -webkit-border-radius: 0.3em;    text-decoration:    none;}/* to be able to cancel the bottom border, use <li class="active"> */ul#topmenu > li.active {    /* border-bottom:      0pt solid <?php echo $GLOBALS['cfg']['MainBackground']; ?>; */    border-right: 0;}/* disabled tabs */ul#topmenu span.tab,a.error {    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;    color:#ccc;}<?php } ?>/* end topmenu *//* zoom search */div#dataDisplay input, div#dataDisplay select {    margin: 0;    margin-<?php echo $right; ?>: 0.5em;}div#dataDisplay th {    line-height: 2em;}/* Calendar */table.calendar {    width:              100%;}table.calendar td {    text-align:         center;}table.calendar td a {    display:            block;}table.calendar td a:hover {    background-color:   #CCFFCC;}table.calendar th {    background-color:   #D3DCE3;}table.calendar td.selected {    background-color:   #FFCC99;}img.calendar {    border:             none;}form.clock {    text-align:         center;}/* end Calendar *//* table stats */div#tablestatistics table {    float: <?php echo $left; ?>;    margin-bottom: 0.5em;    margin-<?php echo $right; ?>: 1.5em;    margin-top: 0.5em;}/* END table stats *//* server privileges */#tableuserrights td,#tablespecificuserrights td,#tabledatabases td {    vertical-align: middle;}/* END server privileges *//* Heading */#topmenucontainer {    padding-right: 1em;    width: 100%;    background-color: #dcdcdc;}#serverinfo {    border-bottom:1px solid #fff;    background:#888;    padding: 0.3em 0.9em;    text-shadow:0 1px 0 #000000;    width: 10000px;    overflow: hidden;}#serverinfo .item {    white-space:        nowrap;    color:#fff;    float: <?php echo $left; ?>}#span_table_comment {    font-weight:        normal;    font-style:         italic;    white-space:        nowrap;}#serverinfo img {    margin:             0 0.1em 0 0.2em;}#textSQLDUMP {    width:              95%;    height:             95%;    font-family:        "Courier New", Courier, mono;    font-size:          110%;}#TooltipContainer {    position:           absolute;    z-index:            99;    width:              20em;    height:             auto;    overflow:           visible;    visibility:         hidden;    background-color:   #ffffcc;    color:              #006600;    border:             0.1em solid #000000;    padding:            0.5em;}/* user privileges */#fieldset_add_user_login div.item {    border-bottom:      1px solid silver;    padding-bottom:     0.3em;    margin-bottom:      0.3em;}#fieldset_add_user_login label {    float:              <?php echo $left; ?>;    display:            block;    width:              10em;    max-width:          100%;    text-align:         <?php echo $right; ?>;    padding-<?php echo $right; ?>:      0.5em;}#fieldset_add_user_login span.options #select_pred_username,#fieldset_add_user_login span.options #select_pred_hostname,#fieldset_add_user_login span.options #select_pred_password {    width:              100%;    max-width:          100%;}#fieldset_add_user_login span.options {    float: <?php echo $left; ?>;    display: block;    width: 12em;    max-width: 100%;    padding-<?php echo $right; ?>: 0.5em;}#fieldset_add_user_login input {    width: 12em;    clear: <?php echo $right; ?>;    max-width: 100%;}#fieldset_add_user_login span.options input {    width: auto;}#fieldset_user_priv div.item {    float: <?php echo $left; ?>;    width: 9em;    max-width: 100%;}#fieldset_user_priv div.item div.item {    float: none;}#fieldset_user_priv div.item label {    white-space: nowrap;}#fieldset_user_priv div.item select {    width: 100%;}#fieldset_user_global_rights fieldset {    float: <?php echo $left; ?>;}/* END user privileges *//* serverstatus */.linkElem:hover {    text-decoration:    underline;    color:              #235a81;    cursor: pointer;}h3#serverstatusqueries span {    font-size:60%;    display:inline;}img.sortableIcon {    float:right;    background-repeat:no-repeat;    margin:0;}.buttonlinks {    float: <?php echo $right; ?>;    white-space: nowrap;}.jsfeature {    display: none; /* Made visible with js */}/* Also used for the variables page */fieldset#tableFilter {    margin-bottom:1em;}div#serverStatusTabs {    margin-top:1em;}caption a.top {    float: <?php echo $right; ?>;}div#serverstatusquerieschart {    float:<?php echo $left; ?>;    width:500px;    height:350px;    padding-<?php echo $left; ?>: 30px;}table#serverstatusqueriesdetails, table#serverstatustraffic {    float: <?php echo $left; ?>;}table#serverstatusqueriesdetails th {    min-width: 35px;}table#serverstatusvariables {    width: 100%;    margin-bottom: 1em;}table#serverstatusvariables .name {    width: 18em;    white-space:nowrap;}table#serverstatusvariables .value {    width: 6em;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}div#serverstatus table tbody td.descr a,div#serverstatus table .tblFooters a {    white-space: nowrap;}div.liveChart {    clear:both;    min-width:500px;    height:400px;    padding-bottom:80px;}#addChartDialog input[type="text"] {    margin: 0;    padding: 3px;}div#chartVariableSettings {    border:1px solid #ddd;    background-color:#E6E6E6;    margin-left:10px;}table#chartGrid div.monitorChart {    background: #EBEBEB;}div#serverstatus div.tabLinks {    float:<?php echo $left; ?>;    padding-bottom: 10px;}.popupContent {    display: none;    position: absolute;    border: 1px solid #CCC;    margin:0;    padding:3px;    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;    background-color:white;    z-index: 2;}div#logTable {    padding-top: 10px;    clear: both;}div#logTable table {    width:100%;}div#queryAnalyzerDialog {    min-width: 700px;}div#queryAnalyzerDialog div.CodeMirror-scroll {    height:auto;}div#queryAnalyzerDialog div#queryProfiling {    height: 250px;}div#queryAnalyzerDialog td.explain {    width: 250px;}div#queryAnalyzerDialog table.queryNums {    display: none;    border:0;    text-align:left;}.smallIndent {    padding-left: 7px;}/* end serverstatus *//* server variables */a.editLink {    float: <?php echo $left; ?>;    font-family:sans-serif;}table.serverVariableEditTable {    border:0;    margin:0;    padding:0;    width:100%;}table.serverVariableEditTable td {    border:0;    margin:0;    padding:0;}table.serverVariableEditTable td:first-child {    white-space:nowrap;    vertical-align:middle;}table.serverVariableEditTable input {    width:95%;}table#serverVariables td {    height:18px;}/* end server variables */p.notice {    margin:             1.5em 0;    border:             1px solid #000;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            10px 10px 10px 25px;        <?php } else { ?>    background-position: 99% 50%;    padding:            25px 10px 10px 10px        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    -moz-box-shadow: 0 1px 2px #fff inset;    -webkit-box-shadow: 0 1px 2px #fff inset;    box-shadow: 0 1px 2px #fff; inset;    background:#555;    color:#d4fb6a;}p.notice a {    color:#fff;    text-decoration:underline;}/* querywindow */body#bodyquerywindow {    margin: 0;    padding: 0;    background-image: none;    background-color: #F5F5F5;}div#querywindowcontainer {    margin: 0;    padding: 0;    width: 100%;}div#querywindowcontainer fieldset {    margin-top: 0;}/* END querywindow *//* profiling */div#profilingchart {    width:550px;    height:370px;    float:left;}/* END profiling *//* table charting */#resizer {    border: 1px solid silver;}#inner-resizer { /* make room for the resize handle */    padding: 10px;}/* END table charting *//* querybox */#togglequerybox{margin:0 10px}#serverstatus h3{    margin: 15px 0;    font-weight:normal;    color:#999;    font-size:1.7em;}#sectionlinks{    padding:16px;    background:#f3f3f3;    border:1px solid #aaa;    border-radius:5px;    -webkit-border-radius:5px;    -moz-border-radius:5px;    box-shadow: 0 1px 1px #fff inset;    -webkit-box-shadow: 0 1px 1px #fff inset;    -moz-box-shadow: 0 1px 1px #fff inset;}#sectionlinks a, .buttonlinks a, a.button {    font-size:0.88em;    font-weight:bold;    text-shadow: 0 1px 0 #fff;    line-height:35px;    margin-left:7px;    border: 1px solid #aaa;    padding: 5px 10px;    color: #111;    text-decoration: none;    background: #ddd;    white-space: nowrap;    border-radius: 20px;    -webkit-border-radius: 20px;    -moz-border-radius: 20px;    box-shadow: 1px 1px 2px rgba(0,0,0,.5);    /*    -webkit-box-shadow: 1px 1px 2px rgba(0,0,0,.5);    -moz-box-shadow: 1px 1px 2px rgba(0,0,0,.5);    text-shadow: #fff 0 1px 0;    */    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}#sectionlinks a:hover, .buttonlinks a:hover, a.button:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}div#sqlquerycontainer {    float: <?php echo $left; ?>;    width: 69%;    /* height: 15em; */}div#tablefieldscontainer {    float: <?php echo $right; ?>;    width: 29%;    /* height: 15em; */}div#tablefieldscontainer select {    width: 100%;    background:#fff;    /* height: 12em; */}textarea#sqlquery {    width: 100%;    /* height: 100%; */    -moz-border-radius:4px;    -webkit-border-radius:4px;    border-raduis:4px    border:1px solid #aaa;    padding:5px;    font-family:inherit;}textarea#sql_query_edit{    height:7em;    width: 95%;    display:block;}div#queryboxcontainer div#bookmarkoptions {    margin-top: 0.5em;}/* end querybox *//* main page */#maincontainer {    /* background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png); */    /* background-position: <?php echo $right; ?> bottom; */    /* background-repeat: no-repeat; */}#mysqlmaininformation,#pmamaininformation {    float: <?php echo $left; ?>;    width: 49%;}#maincontainer ul {    list-style-type: disc;    vertical-align: middle;}#maincontainer li {    margin-bottom:  0.3em;}/* END main page */<?php if ($GLOBALS['cfg']['MainPageIconic']) { ?>/* iconic view for ul items */li#li_create_database {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);}li#li_select_lang {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);}li#li_select_mysql_collation {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_select_theme{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);}li#li_user_info{    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */}li#li_mysql_status{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);}li#li_mysql_variables{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);}li#li_mysql_processes{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);}li#li_mysql_collations{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_mysql_engines{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);}li#li_mysql_binlogs {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);}li#li_mysql_databases {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);}li#li_export {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);}li#li_import {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);}li#li_change_password {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);}li#li_log_out {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);}li#li_mysql_privilegs{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);}li#li_switch_dbstats {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);}li#li_flush_privileges {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);}li#li_user_preferences {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);}/* END iconic view for ul items */<?php } /* end if $GLOBALS['cfg']['MainPageIconic'] */ ?>#body_browse_foreigners {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    margin:             0.5em 0.5em 0 0.5em;}#bodyquerywindow {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}#bodythemes {    width: 500px;    margin: auto;    text-align: center;}#bodythemes img {    border: 0.1em solid black;}#bodythemes a:hover img {    border: 0.1em solid red;}#fieldset_select_fields {    float: <?php echo $left; ?>;}#selflink {    clear: both;    display: block;    margin-top: 1em;    margin-bottom: 1em;    background:#f3f3f3;    width: 100%;    border-top: 0.1em solid silver;    text-align: <?php echo $right; ?>;}#table_innodb_bufferpool_usage,#table_innodb_bufferpool_activity {    float: <?php echo $left; ?>;}#div_mysql_charset_collations table {    float: <?php echo $left; ?>;}.operations_half_width {    width: 48%;    float: <?php echo $left; ?>;}.operations_full_width {    width: 100%;    clear: both;}#qbe_div_table_list {    float: <?php echo $left; ?>;}#qbe_div_sql_query {    float: <?php echo $left; ?>;}label.desc {    width: 30em;    float: <?php echo $left; ?>;}label.desc sup {    position: absolute;}code.sql, div.sqlvalidate {    display:            block;    padding:            1em;    margin-top:         0;    margin-bottom:      0;    border-top:         0;    border-bottom:      0;    max-height:         10em;    overflow:           auto;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}#main_pane_left {    width:              60%;    float:              <?php echo $left; ?>;    padding-top:        1em;}#main_pane_right {    margin-<?php echo $left; ?>: 60%;    padding-top: 1em;    padding-<?php echo $left; ?>: 1em;}.group {    border:1px solid #999;    background:#f3f3f3;    -moz-border-radius:4px;    -webkit-border-radius:4px;    border-radius:4px;    -moz-box-shadow:2px 2px 5px #ccc;    -webkit-box-shadow:2px 2px 5px #ccc;    box-shadow:3px 3px 10px #ddd;    margin-bottom:      1em;    padding-bottom: 1em;}.group h2 {    background-color:   #bbb;    padding:            0.1em 0.3em;    margin-top:         0;    color:#fff;    font-size:1.6em;    font-weight:normal;    text-shadow:0 1px 0 #777;    -moz-box-shadow: 1px 1px 15px  #999 inset;    -webkit-box-shadow: 1px 1px 15px  #999 inset;    box-shadow: 1px 1px 15px  #999 inset;}.group-cnt {    padding: 0 0 0 0.5em;    display: inline-block;    width: 98%;}textarea#partitiondefinition {    height:3em;}/* for elements that should be revealed only via js */.hide {    display:            none;}#li_select_server {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);}#list_server {    list-style-image: none;}/**  *  Progress bar styles  */div.upload_progress_bar_outer{    border: 1px solid black;    width: 202px;}div.upload_progress_bar_inner{    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    width: 0;    height: 12px;    margin: 1px;}table#serverconnection_src_remote,table#serverconnection_trg_remote,table#serverconnection_src_local,table#serverconnection_trg_local  {  float:left;}/**  *  Validation error message styles  */input[type=text].invalid_value,.invalid_value {    background:#FFCCCC;}/**  *  Ajax notification styling  */ .ajax_notification {    top: 0;           /** The notification needs to be shown on the top of the page */    position: fixed;    margin-top: 0;    margin-right: auto;    margin-bottom: 0;    margin-left: auto;    padding: 5px;   /** Keep a little space on the sides of the text */    width: 350px;    z-index: 1100;      /** If this is not kept at a high z-index, the jQueryUI modal dialogs (z-index:1000) might hide this */    text-align: center;    display: inline;    left: 0;    right: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);    background-repeat: no-repeat;    background-position: 2%;    border:1px solid #e2b709; }/* additional styles */.ajax_notification{    margin-top:200px;background:#ffe57e;    border-radius:5px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    box-shadow: 0 5px 90px #888;    -moz-box-shadow: 0 5px 90px #888;    -webkit-box-shadow: 0 5px 90px #888;}#loading_parent {    /** Need this parent to properly center the notification division */    position: relative;    width: 100%; }/**  * Export and Import styles  */.exportoptions h3, .importoptions h3 {    border-bottom: 1px #999999 solid;    font-size: 110%;}.exportoptions ul, .importoptions ul, .format_specific_options ul {    list-style-type: none;    margin-bottom: 15px;}.exportoptions li, .importoptions li {    margin: 7px;}.exportoptions label, .importoptions label, .exportoptions p, .importoptions p {    margin: 5px;    float: none;}#csv_options label.desc, #ldi_options label.desc, #latex_options label.desc, #output label.desc{    float: left;    width: 15em;}.exportoptions, .importoptions {    margin: 20px 30px 30px 10px}.exportoptions #buttonGo, .importoptions #buttonGo {    font-weight:bold;    margin-left:14px;    border: 1px solid #aaa;    padding: 5px 12px;    color: #111;    text-decoration: none;    background: #ddd;    border-radius: 12px;    -webkit-border-radius: 12px;    -moz-border-radius: 12px;    text-shadow: 0 1px 0 #fff;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    cursor: pointer;}#buttonGo:hover{    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}.format_specific_options h3 {    margin: 10px 0 0 10px;    border: 0;}.format_specific_options {    border: 1px solid #999999;    margin: 7px 0;    padding: 3px;}p.desc {    margin: 5px;}/**  * Export styles only  */select#db_select, select#table_select {    width: 400px;}.export_sub_options {    margin: 20px 0 0 30px;}.export_sub_options h4 {    border-bottom: 1px #999999 solid;}.export_sub_options li.subgroup {    display: inline-block;    margin-top: 0;}.export_sub_options li {    margin-bottom: 0;}#quick_or_custom, #output_quick_export {    display: none;}/** * Import styles only */.importoptions #import_notification {    margin: 10px 0;    font-style: italic;}input#input_import_file {    margin: 5px;}.formelementrow {    margin: 5px 0 5px 0;}/** * GIS data editor styles */a.close_gis_editor {    float: right;}#gis_editor {    display: none;    position: fixed;    _position: absolute; /* hack for IE */    z-index: 1001;    overflow-y: auto;    overflow-x: hidden;}#gis_data {    min-height: 230px;}#gis_data_textarea {    height: 6em;}#gis_data_editor {    background: #D0DCE0;    padding: 15px;    min-height: 500px;}#gis_data_editor .choice {    display: none;}#gis_data_editor input[type="text"] {    width: 75px;}#popup_background {    display: none;    position: fixed;    _position: absolute; /* hack for IE6 */    width: 100%;    height: 100%;    top: 0;    left: 0;    background: #000;    z-index: 1000;    overflow: hidden;}/** * ENUM/SET editor styles */p.enum_notice {    margin: 5px 2px;    font-size: 80%;}.enum_editor_no_js fieldset {    width: 40em;}hr.enum_editor_no_js {    background-color: #aaa;}#enum_editor p {    margin-top: 0;    font-style:italic;}#enum_editor .values, #enum_editor .add, .enum_editor_no_js #values {    width: 100%;}#enum_editor .add td {    vertical-align: middle;    width: 50%;    padding: 0 0 0 1em;}#enum_editor .values td.drop {    width: 1.8em;    cursor: pointer;    vertical-align: middle;}#enum_editor .values input {    margin: 0.1em 0;    padding-right: 2em;    width: 100%;}#enum_editor .values img {    width: 1.8em;    vertical-align: middle;}#enum_editor input.add_value {    margin: 0 0.4em 0 0;}#enum_editor_output textarea,.enum_editor_no_js input {    width: 100%;    float: right;    margin: 1em 0 0 0;}.enum_editor_no_js {    width: 40em;}.enum_editor_no_js input.submit {    float: left;    margin: 1em 0;}/** * ENUM/SET editor integration for the routines editor */.enum_hint {    position: relative;}.enum_hint a {    position: absolute;    left: 81%;    bottom: 0.35em;}/** * Table structure styles */.structure_actions_dropdown {    position: absolute;    padding: 3px;    display: none;    z-index: 100;    background:#fff;    line-height:24px;    border:1px solid #aaa;    -moz-box-shadow: 0 3px 3px #ddd;}.structure_actions_dropdown span{display:block;}.structure_actions_dropdown span:hover{background:#ddd;}td.more_opts {    white-space: nowrap;}/** * Indexes */#index_frm .index_info input,#index_frm .index_info select {    width: 14em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#index_frm .index_info div {    padding: 0.2em 0;}#index_frm .index_info .label {    float: left;    min-width: 12em;}#index_frm .slider {    width: 10em;    margin: 0.6em;    float: <?php echo $left; ?>;}#index_frm .add_fields {    float: <?php echo $left; ?>;}#index_frm .add_fields input {    margin-<?php echo $left; ?>: 1em;}#index_frm input {    margin: 0;}#index_frm td {    vertical-align: middle;}table#index_columns {    width: 100%;}table#index_columns select {    width: 100%;}iframe.IE_hack {    z-index: 1;    position: absolute;    display: none;    border: 0;    filter: alpha(opacity=0);}/* config forms */.config-form ul.tabs {    margin:      1.1em 0.2em 0;    padding:     0 0 0.3em 0;    list-style:  none;    font-weight: bold;}.config-form ul.tabs li {    float:         <?php echo $left; ?>;    margin-bottom: -1px;}.config-form ul.tabs li a {    display:          block;    margin:           0.1em 0.2em 0;    white-space:      nowrap;    text-decoration:  none;    border:           1px solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-bottom:    1px solid #aaa;}.config-form ul.tabs li a {    padding:               7px 10px;    -webkit-border-radius: 5px 5px 0 0;    -moz-border-radius:    5px 5px 0 0;    border-radius:         5px 5px 0 0;    background:            #f2f2f2;    color:                 #555;    text-shadow:           0 1px 0 #fff;}.config-form ul.tabs li a:hover,.config-form ul.tabs li a:active {    background: #e5e5e5;}.config-form ul.tabs li.active a {    background-color: #fff;    margin-top:       1px;    color:            #000;    text-shadow:      none;    border-color:     #aaa;    border-bottom:    1px solid #fff;}.config-form fieldset {    margin-top:            0;    padding:               0;    clear:                 both;    -webkit-border-radius: 0;    -moz-border-radius:    0;    border-radius:         0;}.config-form legend {    display: none;}.config-form fieldset p {    margin:    0;    padding:   0.5em;    background: #fff;    border-top: 0;}.config-form fieldset .errors { /* form error list */    margin:       0 -2px 1em -2px;    padding:      0.5em 1.5em;    background:   #FBEAD9;    border:       0 #C83838 solid;    border-width: 1px 0;    list-style:   none;    font-family:  sans-serif;    font-size:    small;}.config-form fieldset .inline_errors { /* field error list */    margin:     0.3em 0.3em 0.3em 0;    padding:    0;    list-style: none;    color:      #9A0000;    font-size:  small;}.config-form fieldset th {    padding:        0.3em 0.3em 0.3em 0.5em;    text-align:     left;    vertical-align: top;    width:          40%;    background:     transparent;    filter:         none;}.config-form fieldset .doc, .config-form fieldset .disabled-notice {    margin-left: 1em;}.config-form fieldset .disabled-notice {    font-size: 80%;    text-transform: uppercase;    color: #E00;    cursor: help;}.config-form fieldset td {    padding-top:    0.3em;    padding-bottom: 0.3em;    vertical-align: top;}.config-form fieldset th small {    display:     block;    font-weight: normal;    font-family: sans-serif;    font-size:   x-small;    color:       #444;}.config-form fieldset th, .config-form fieldset td {    border-top: 1px <?php echo $GLOBALS['cfg']['BgTwo']; ?> solid;    border-right: none;}fieldset .group-header th {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}fieldset .group-header + tr th {    padding-top: 0.6em;}fieldset .group-field-1 th, fieldset .group-header-2 th {    padding-left: 1.5em;}fieldset .group-field-2 th, fieldset .group-header-3 th {    padding-left: 3em;}fieldset .group-field-3 th {    padding-left: 4.5em;}fieldset .disabled-field th,fieldset .disabled-field th small,fieldset .disabled-field td {    color: #666;    background-color: #ddd;}.config-form .lastrow {    border-top: 1px #000 solid;}.config-form .lastrow {    background: <?php echo $GLOBALS['cfg']['ThBackground']; ?>;;    padding:    0.5em;    text-align: center;}.config-form .lastrow input {    font-weight: bold;}/* form elements */.config-form span.checkbox {    padding: 2px;    display: inline-block;}.config-form .custom { /* customized field */    background: #FFC;}.config-form span.checkbox.custom {    padding:    1px;    border:     1px #EDEC90 solid;    background: #FFC;}.config-form .field-error {    border-color: #A11 !important;}.config-form input[type="text"],.config-form select,.config-form textarea {    border: 1px #A7A6AA solid;    height: auto;}.config-form input[type="text"]:focus,.config-form select:focus,.config-form textarea:focus {    border:     1px #6676FF solid;    background: #F7FBFF;}.config-form .field-comment-mark {    font-family: serif;    color: #007;    cursor: help;    padding: 0 0.2em;    font-weight: bold;    font-style: italic;}.config-form .field-comment-warning {    color: #A00;}/* error list */.config-form dd {    margin-left: 0.5em;}.config-form dd:before {    content: "\25B8  ";}.click-hide-message {    cursor: pointer;}.prefsmanage_opts {    margin-<?php echo $left; ?>: 2em;}#prefs_autoload {    margin-bottom: 0.5em;}.rte_table {    table-layout: fixed;}.rte_table td {    vertical-align:     middle;}.rte_table tr td:nth-child(1) {    font-weight:        bold;}.rte_table input, .rte_table select, .rte_table textarea {    width:              100%;    margin:             0;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}.rte_table .routine_params_table {    width:              100%;}#placeholder .button {    position: absolute;    cursor: pointer;}#placeholder div.button {    font-size: smaller;    color: #999;    background-color: #eee;    padding: 2px;}.wrapper {    float: <?php echo $left; ?>;    margin-bottom: 1.5em;}.toggleButton {    position: relative;    cursor: pointer;    font-size: 0.8em;    text-align: center;    line-height: 1.55em;    height: 1.55em;    overflow: hidden;    border-right: 0.1em solid #888;    border-left: 0.1em solid #888;    -webkit-border-radius: 0.3em;    -moz-border-radius: 0.3em;    border-radius: 0.3em;}.toggleButton table,.toggleButton td,.toggleButton img {    padding: 0;    position: relative;}.toggleButton .container {    position: absolute;}.toggleButton .toggleOn {    color: white;    padding: 0 1em;    text-shadow: 0 0 0.2em #000;}.toggleButton .toggleOff {    padding: 0 1em;}.doubleFieldset fieldset {    width: 48%;    float: <?php echo $left; ?>;    padding: 0;}.doubleFieldset fieldset.left {    margin-<?php echo $right; ?>: 1%;}.doubleFieldset fieldset.right {    margin-<?php echo $left; ?>: 1%;}.doubleFieldset legend {    margin-<?php echo $left; ?>: 1.5em;}.doubleFieldset div.wrap {    padding: 1.5em;}#table_columns input[type="text"], #table_columns select {    width:              10em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#table_columns select {    margin:             0 6px;}#placeholder {    position: relative;    border: 1px solid #aaa;    float: right;    overflow: hidden;}.placeholderDrag {    cursor: move;}#placeholder .button {    position: absolute;}#left_arrow {    left:8px;    top:26px;}#right_arrow {    left:26px;    top:26px;}#up_arrow {    left:17px;    top:8px;}#down_arrow {    left:17px;    top:44px;}#zoom_in {    left:17px;    top:67px;}#zoom_world {    left:17px;    top:85px;}#zoom_out {    left:17px;    top:103px;}.gis_table td {    vertical-align: middle;}.gis_table select {    min-width: 160px;    margin: 6px;}.gis_table .save {    color: #111;    font-weight: bold;    vertical-align: bottom;    height: 100px;}.gis_table .button {   text-align: <?php echo $right; ?>;}.gis_table .choice {    display: none;}.CodeMirror {  font-size: 140%;  font-family: monospace;  background: white;  border: 1px solid black;}.CodeMirror-scroll {  overflow: auto;  height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;  /* This is needed to prevent an IE[67] bug where the scrolled content     is visible outside of the scrolling box. */  position: relative;}.CodeMirror-gutter {  position: absolute; left: 0; top: 0;  z-index: 10;  background-color: #f7f7f7;  border-right: 1px solid #eee;  min-width: 2em;  height: 100%;}.CodeMirror-gutter-text {  color: #aaa;  text-align: right;  padding: .4em .2em .4em .4em;  white-space: pre !important;}.CodeMirror-lines {  padding: .4em;}.CodeMirror pre {  -moz-border-radius: 0;  -webkit-border-radius: 0;  -o-border-radius: 0;  border-radius: 0;  border-width: 0; margin: 0; padding: 0; background: transparent;  font-family: inherit;  font-size: inherit;  padding: 0; margin: 0;  white-space: pre;  word-wrap: normal;}.CodeMirror-wrap pre {  word-wrap: break-word;  white-space: pre-wrap;}.CodeMirror-wrap .CodeMirror-scroll {  overflow-x: hidden;}.CodeMirror textarea {  font-family: inherit !important;  font-size: inherit !important;}.CodeMirror-cursor {  z-index: 10;  position: absolute;  visibility: hidden;  border-left: 1px solid black !important;}.CodeMirror-focused .CodeMirror-cursor {  visibility: visible;}span.CodeMirror-selected {  background: #ccc !important;  color: HighlightText !important;}.CodeMirror-focused span.CodeMirror-selected {  background: Highlight !important;}.CodeMirror-matchingbracket {color: #0f0 !important;}.CodeMirror-nonmatchingbracket {color: #f22 !important;}<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>.colborder {    cursor: col-resize;    height: 100%;    margin-left: -6px;    position: absolute;    width: 5px;}.colborder_active {    border-right: 2px solid #a44;}.pma_table td {    position: static;}.pma_table th.draggable span, .pma_table tbody td span {    display: block;    overflow: hidden;}.cRsz {    position: absolute;}.cCpy {    background: #333;    color: #FFF;    font-weight: bold;    margin: 0.1em;    padding: 0.3em;    position: absolute;    text-shadow: -1px -1px #000;    -moz-box-shadow: 0 0 0.7em #000;    -webkit-box-shadow: 0 0 0.7em #000;    box-shadow: 0 0 0.7em #000;    -moz-border-radius: 0.3em;    -webkit-border-radius: 0.3em;    border-radius: 0.3em;}.cPointer {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);    height: 20px;    margin-left: -5px;  /* must be minus half of its width */    margin-top: -10px;    position: absolute;    width: 10px;}.normalqTip {    background: #333 !important;    opacity: 0.8 !important;    border:1px solid #000 !important;    -moz-border-radius: 0.3em !important;    -webkit-border-radius: 0.3em !important;    border-radius: 0.3em !important;    text-shadow: -1px -1px #000 !important;    font-size: 0.8em !important;    font-weight: bold !important;}.normalqTip * {    background: none !important;    color: #FFF !important;}.normalqTipContent {    padding: 1px 3px !important;}.cHide {    background: #EEE url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);    color: #CCC;    cursor: pointer;    height: 16px;    margin-left: -10px;    margin-top: 0.3em;    position: absolute;    width: 16px;}.cHide:hover {    background-color: #AAA;}.cDrop {    left: 0;    position: absolute;    top: 0;}.coldrop {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);    cursor: pointer;    height: 16px;    margin-left: 0.3em;    margin-top: 0.3em;    position: absolute;    width: 16px;}.coldrop:hover, .coldrop-hover {    background-color: #999;}.cList {    background: #EEE;    border: solid 1px #999;    position: absolute;    -moz-box-shadow: 0 0.2em 0.5em #333;    -webkit-box-shadow: 0 0.2em 0.5em #333;    box-shadow: 0 0.2em 0.5em #333;}.cList .lDiv div {    padding: 0.2em 0.5em 0.2em 0.2em;}.cList .lDiv div:hover {    background: #DDD;    cursor: pointer;}.cList .lDiv div input {    cursor: pointer;}.showAllColBtn {    border-bottom: solid 1px #999;    border-top: solid 1px #999;    cursor: pointer;    font-size: 0.9em;    font-weight: bold;    padding: 0.35em 1em;    text-align: center;}.showAllColBtn:hover {    background: #DDD;}.navigation {    margin: 0.8em 0;    border-radius: 5px;    -webkit-border-radius: 5px;    -moz-border-radius: 5px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('eeeeee', 'cccccc'); ?>}.navigation td {    margin: 0;    padding: 0;    vertical-align: middle;    white-space: nowrap;}.navigation_separator {    color: #999;    display: inline-block;    font-size: 1.5em;    text-align: center;    height: 1.4em;    width: 1.2em;    text-shadow: 1px 0 #FFF;}.navigation input[type=submit] {    background: none;    border: 0;    filter: none;    margin: 0;    padding: 0.8em 0.5em;    border-radius: 0;    -webkit-border-radius: 0;    -moz-border-radius: 0;}.navigation input[type=submit]:hover, .navigation input.edit_mode_active {    color: white;    cursor: pointer;    text-shadow: none;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('333333', '555555'); ?>}.navigation select {    margin: 0 0.8em;}.cEdit {    margin: 0;    padding: 0;    position: absolute;}.cEdit input[type=text] {    background: #FFF;    height: 100%;    margin: 0;    padding: 0;}.cEdit .edit_area {    background: #FFF;    border: 1px solid #999;    min-width: 10em;    padding: 0.3em 0.5em;}.cEdit .edit_area select, .cEdit .edit_area textarea {    width: 97%;}.cEdit .cell_edit_hint {    color: #555;    font-size: 0.8em;    margin: 0.3em 0.2em;}.cEdit .edit_box {    overflow: hidden;    padding: 0;}.cEdit .edit_box_posting {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;    padding-right: 1.5em;}.cEdit .edit_area_loading {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;    height: 10em;}.cEdit .goto_link {    background: #EEE;    color: #555;    padding: 0.2em 0.3em;}.saving_edited_data {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;    padding-left: 20px;}/* css for timepicker */.ui-timepicker-div .ui-widget-header{ margin-bottom: 8px; }.ui-timepicker-div dl{ text-align: left; }.ui-timepicker-div dl dt{ height: 25px; }.ui-timepicker-div dl dd{ margin: -25px 0 10px 65px; }.ui-timepicker-div td { font-size: 90%; }/* Designer */.input_tab {    background-color: #A6C7E1;    color: #000000;}#canvas {    background-color: #FFFFFF;    color: #000000;}canvas.pmd {    display: inline-block;    overflow: hidden;    text-align: left;}canvas.pmd * {    behavior: url(#default#VML);}.pmd_tab {    background-color: #FFFFFF;    color: #000000;    border-collapse: collapse;    border: 1px solid #AAAAAA;    z-index: 1;    -moz-user-select: none;}.tab_zag {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_zag_2 {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_field {    background: #FFFFFF;    color: #000000;    cursor: default;}.tab_field_2 {    background-color: #CCFFCC;    color: #000000;    background-repeat: repeat-x;    cursor: default;}.tab_field_3 {    background-color: #FFE6E6; /*#DDEEFF*/    color: #000000;    cursor: default;}#pmd_hint {    white-space: nowrap;    position: absolute;    background-color: #99FF99;    color: #000000;    left: 200px;    top: 50px;    z-index: 3;    border: #00CC66 solid 1px;    display: none;}.scroll_tab {    overflow: auto;    width: 100%;    height: 500px;}.pmd_Tabs {    cursor: default;    color: #0055bb;    white-space: nowrap;    text-decoration: none;    text-indent: 3px;    font-weight: bold;    margin-left: 2px;    text-align: left;    background-color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);    border: #CCCCCC solid 1px;}.pmd_Tabs2 {    cursor: default;    color: #0055bb;    background: #FFEE99;    text-indent: 3px;    font-weight: bold;    white-space: nowrap;    text-decoration: none;    border: #9999FF solid 1px;    text-align: left;}.owner {    font-weight: normal;    color: #888888;}.option_tab {    padding-left: 2px;    padding-right: 2px;    width: 5px;}.select_all {    vertical-align: top;    padding-left: 2px;    padding-right: 2px;    cursor: default;    width: 1px;    color: #000000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;}.small_tab {    vertical-align: top;    background-color: #0064ea;    color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);    cursor: default;    text-align: center;    font-weight: bold;    padding-left: 2px;    padding-right: 2px;    width: 1px;    text-decoration: none;}.small_tab2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    padding-left: 2px;    padding-right: 2px;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.small_tab_pref {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    width: 1px;}.small_tab_pref2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.butt {    border: #4477aa solid 1px;    font-weight: bold;    height: 19px;    width: 70px;    background-color: #FFFFFF;    color: #000000;    vertical-align: baseline;}.L_butt2_1 {    padding: 1px;    text-decoration: none;    background-color: #ffffff;    color: #000000;    vertical-align: middle;    cursor: default;}.L_butt2_2 {    padding: 0;    border: #0099CC solid 1px;    background: #FFEE99;    text-decoration: none;    color: #000000;    cursor: default;}/* ---------------------------------------------------------------------------*/.bor {    width: 10px;    height: 10px;}.frams1 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;}.frams2 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;}.frams3 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;}.frams4 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;}.frams5 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;}.frams6 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;}.frams7 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;}.frams8 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;}#osn_tab {    background-color: #FFFFFF;    color: #000000;    border: #A9A9A9 solid 1px;}.pmd_header {    background-color: #EAEEF0;    color: #000000;    text-align: center;    font-weight: bold;    margin: 0;    padding: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);    background-position: top;    background-repeat: repeat-x;    border-right: #999999 solid 1px;    border-left: #999999 solid 1px;    height: 28px;}.pmd_header a {    display: block;    float: left;    margin: 3px 1px 4px 1px;    height: 20px;    border: 1px dotted #ffffff;}.pmd_header .M_bord {    display: block;    float: left;    margin: 4px;    height: 20px;    width: 2px;}.pmd_header a.first {    margin-right: 1em;}.pmd_header a.last {    margin-left: 1em;}a.M_butt_Selected_down_IE,a.M_butt_Selected_down {    border: 1px solid #C0C0BB;    background-color: #99FF99;    color: #000000;}a.M_butt_Selected_down_IE:hover,a.M_butt_Selected_down:hover,a.M_butt:hover {    border: 1px solid #0099CC;    background-color: #FFEE99;    color: #000000;}#layer_menu {    z-index: 1000;    position: absolute;    left: 0;    background-color: #EAEEF0;    border: #999999 solid 1px;}#layer_action {    position: absolute;    left: 638px;    top: 52px;    z-index: 1000;    background-color: #CCFF99;    padding: 3px;    border: #009933 solid 1px;    white-space: nowrap;    font-weight: bold;}#layer_upd_relation {    position: absolute;    left: 637px;    top: 224px;    z-index: 1000;}#layer_new_relation {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#pmd_optionse {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#layer_menu_sizer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);    cursor: nw-resize;    width: 16px;    height: 16px;}.panel {    position: fixed;    top: 50px;    right: 0;    display: none;    background: #FFF;    border:1px solid #F5F5F5;    width: 350 px;    height: auto;    padding: 30px 170px 30px 30px;    color:#FFF;    z-index:99;}a.trigger{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#fff;    padding: 10px 40px 10px 15px;    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #444444;    display: block;}a.trigger:hover{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#080808;    padding: 10px 40px 10px 15px;    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #999;    display: block;}a.active.trigger {    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}a.active.trigger:hover {    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}h2.tiger{    background-repeat: repeat-x;    padding: 1px;    font-weight: bold;    padding: 50 20 50 20px;    margin: 0 0 5px 0;    width: 250px;    float: left;    color : #333;    text-align: center;}h2.tiger a {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    text-align: center;    text-decoration: none;    color : #333;    display: block;}h2.tiger a:hover {    color: #000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);}h2.active {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    padding: 1px;    background-position: left bottom;}.toggle_container {    margin: 0 0 5px;    padding: 0;    border-top: 1px solid #d6d6d6;    background: #FFF ;    width: 250px;    overflow: hidden;    font-size: 1.2em;    clear: both;}.toggle_container .block {    background-color: #DBE4E8;    padding:40 15 40 15px; /*--Padding of Container--*/    border:1px solid #999;    color:#000;}.history_table {    text-align: center;    background-color: #9999CC;}.history_table2 {    text-align: center;    background-color: #DBE4E8;}#filter {    display: none;    position: absolute;    top: 0%;    left: 0%;    width: 100%;    height: 100%;    background-color: #CCA;    z-index:10;    opacity:0.5;    filter: alpha(opacity=50);}#box {    display: none;    position: absolute;    top: 20%;    left: 30%;    width: 500px;    height: 220px;    padding: 48px;    margin:0;    border: 1px solid black;    background-color: white;    z-index:101;    overflow: visible;}#boxtitle {    position:absolute;    float:center;    top:0;    left:0;    width:593px;    height:20px;    padding:0;    padding-top:4px;    left-padding:8px;    margin:0;    border-bottom:4px solid #3CF;    background-color: #D0DCE0;    color:black;    font-weight:bold;    padding-left: 2px;    text-align:left;}#tblfooter {    background-color: #D3DCE3;    float: right;    padding-top:10px;    color: black;    font-weight: normal;}input.btn {    color:#333;    background-color: #D0DCE0;}body .ui-widget {    font-size: 1em;}.ui-dialog fieldset legend a {    color: #235A81;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Wrappers for Drizzle extension classes * * Drizzle extension exposes libdrizzle functions and requires user to have it in mind while using them. * This wrapper is not complete and hides a lot of original functionality, but allows for easy usage * of the drizzle PHP extension. * * @package PhpMyAdmin-DBI-Drizzle */// TODO: drizzle module segfaults while freeing resources, often. This allows at least for some developmentfunction _drizzle_shutdown_flush() {    flush();}register_shutdown_function('_drizzle_shutdown_flush');function _dlog_argstr($args){    $r = array();    foreach ($args as $arg) {        if (is_object($arg)) {            $r[] = get_class($arg);        } elseif (is_bool($arg)) {            $r[] = $arg ? 'true' : 'false';        } elseif (is_null($arg)) {            $r[] = 'null';        } else {            $r[] = $arg;        }    }    return implode(', ', $r);}function _dlog($end = false){    /*    static $fp = null;    if (!$fp) {        $fp = fopen('./drizzle_log.log', 'a');        flock($fp, LOCK_EX);        fwrite($fp, "\r\n[" . date('H:i:s') . "]\t" . $_SERVER['REQUEST_URI'] . "\r\n");        register_shutdown_function(function() use ($fp) {            fwrite($fp, '[' . date('H:i:s') . "]\tEND\r\n\r\n");        });    }    if ($end) {        fwrite($fp, '[' . date('H:i:s') . "]\tok\r\n");    } else {        $bt = debug_backtrace(true);        $caller = (isset($bt[1]['class']) ? $bt[1]['class'] . '::' : '') . $bt[1]['function'];        if ($bt[1]['function'] == '__call') {            $caller .= '^' . $bt[1]['args'][0];            $args = _dlog_argstr($bt[1]['args'][1]);        } else {            $args = _dlog_argstr($bt[1]['args']);        }        fwrite($fp, '[' . date('H:i:s') . "]\t" . $caller . "\t" . $args . "\r\n");        for ($i = 2; $i <= count($bt)-1; $i++) {            if (!isset($bt[$i])) {                break;            }            $caller = (isset($bt[$i]['class']) ? $bt[$i]['class'] . '::' : '') . $bt[$i]['function'];            $caller .= ' (' . $bt[$i]['file'] . ':' . $bt[$i]['line'] .  ')';            fwrite($fp, str_repeat(' ', 20) . $caller . "\r\n");        }    }    //*/}/** * Wrapper for Drizzle class */class PMA_Drizzle extends Drizzle{    /**     * Fetch mode: result rows contain column names     */    const FETCH_ASSOC = 1;    /**     * Fetch mode: result rows contain only numeric indices     */    const FETCH_NUM = 2;    /**     * Fetch mode: result rows have both column names and numeric indices     */    const FETCH_BOTH = 3;    /**     * Result buffering: entire result set is buffered upon execution     */    const BUFFER_RESULT = 1;    /**     * Result buffering: buffering occurs only on row level     */    const BUFFER_ROW = 2;    /**     * Constructor     */    public function __construct()    {_dlog();        parent::__construct();    }    /**     * Creates a new database conection using TCP     *     * @param $host     * @param $port     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addTcp($host, $port, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addTcp($host, $port, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }    /**     * Creates a new connection using unix domain socket     *      * @param $uds     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addUds($uds, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addUds($uds, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }}/** * Wrapper around DrizzleCon class * * Its main task is to wrap results with PMA_DrizzleResult class */class PMA_DrizzleCon{    /**     * Instance of DrizzleCon class     * @var DrizzleCon     */    private $dcon;    /**     * Result of the most recent query     * @var PMA_DrizzleResult     */    private $lastResult;    /**     * Constructor     *     * @param DrizzleCon $dcon     */    public function __construct(DrizzleCon $dcon)    {_dlog();        $this->dcon = $dcon;    }    /**     * Executes given query. Opens database connection if not already done.     *     * @param string $query     * @param int    $bufferMode  PMA_Drizzle::BUFFER_RESULT, PMA_Drizzle::BUFFER_ROW     * @param int    $fetchMode   PMA_Drizzle::FETCH_ASSOC, PMA_Drizzle::FETCH_NUM or PMA_Drizzle::FETCH_BOTH     * @return PMA_DrizzleResult     */    public function query($query, $bufferMode = PMA_Drizzle::BUFFER_RESULT, $fetchMode = PMA_Drizzle::FETCH_ASSOC)    {_dlog();        $result = $this->dcon->query($query);        if ($result instanceof DrizzleResult) {    _dlog(true);            $this->lastResult = new PMA_DrizzleResult($result, $bufferMode, $fetchMode);            return $this->lastResult;        }        return $result;    }    /**     * Returns the number of rows affected by last query     *     * @return int|false     */    public function affectedRows()    {        return $this->lastResult            ? $this->lastResult->affectedRows()            : false;    }    /**     * Pass calls of undefined methods to DrizzleCon object     *      * @param $method     * @param $args     * @return mixed     */    public function __call($method, $args)    {_dlog();        return call_user_func_array(array($this->dcon, $method), $args);    }    /**     * Returns original Drizzle connection object     *     * @return DrizzleCon     */    public function getConnectionObject()    {_dlog();        return $this->dcon;    }}/** * Wrapper around DrizzleResult. Allows for reading result rows as an associative array * and hides complexity behind buffering. */class PMA_DrizzleResult{    /**     * Instamce of DrizzleResult class     * @var DrizzleResult     */    private $dresult;    /**     * Fetch mode     * @var int     */    private $fetchMode;    /**     * Buffering mode     * @var int     */    private $bufferMode;    /**     * Cached column data     * @var DrizzleColumn[]     */    private $columns = null;    /**     * Cached column names     * @var string[]     */    private $columnNames = null;    /**     * Constructor     *     * @param DrizzleResult $dresult     * @param int           $bufferMode     * @param int           $fetchMode     */    public function __construct(DrizzleResult $dresult, $bufferMode, $fetchMode)    {_dlog();        $this->dresult = $dresult;        $this->bufferMode = $bufferMode;        $this->fetchMode = $fetchMode;        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            $this->dresult->buffer();        }    }    /**     * Sets fetch mode     *     * @param int $fetchMode     */    public function setFetchMode($fetchMode)    {_dlog();        $this->fetchMode = $fetchMode;    }    /**     * Reads information about columns contained in current result set into {@see $columns} and {@see $columnNames} arrays     */    private function _readColumns()    {_dlog();        $this->columns = array();        $this->columnNames = array();        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            while (($column = $this->dresult->columnNext()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        } else {            while (($column = $this->dresult->columnRead()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        }    }    /**     * Returns columns in current result     *     * @return DrizzleColumn[]     */    public function getColumns()    {_dlog();        if (!$this->columns) {            $this->_readColumns();        }        return $this->columns;    }    /**     * Returns number if columns in result     *     * @return int     */    public function numColumns()    {_dlog();        return $this->dresult->columnCount();    }    /**     * Transforms result row to conform to current fetch mode     *     * @param mixed &$row     * @param int   $fetchMode     */    private function _transformResultRow(&$row, $fetchMode)    {        if (!$row) {            return;        }        switch ($fetchMode) {            case PMA_Drizzle::FETCH_ASSOC:                $row = array_combine($this->columnNames, $row);                break;            case PMA_Drizzle::FETCH_BOTH:                $length = count($row);                for ($i = 0; $i < $length; $i++) {                    $row[$this->columnNames[$i]] = $row[$i];                }                break;            default:                break;        }    }    /**     * Fetches next for from this result set     *     * @param int $fetchMode  fetch mode to use, if none given the default one is used     * @return array|null     */    public function fetchRow($fetchMode = null)    {_dlog();        // read column names on first fetch, only buffered results allow for reading it later        if (!$this->columns) {            $this->_readColumns();        }        if ($fetchMode === null) {            $fetchMode = $this->fetchMode;        }        $row = null;        switch ($this->bufferMode) {            case PMA_Drizzle::BUFFER_RESULT:                $row = $this->dresult->rowNext();                break;            case PMA_Drizzle::BUFFER_ROW:                $row = $this->dresult->rowBuffer();                break;        }        $this->_transformResultRow($row, $fetchMode);        return $row;    }    /**     * Adjusts the result pointer to an arbitrary row in buffered result     *     * @param $row_index     * @return bool     */    public function seek($row_index)    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't seek in an unbuffered result set", E_USER_WARNING);            return false;        }        // rowSeek always returns NULL (drizzle extension v.0.5, API v.7)        if ($row_index >= 0 && $row_index < $this->dresult->rowCount()) {            $this->dresult->rowSeek($row_index);            return true;        }        return false;    }    /**     * Returns the number of rows in buffered result set     *     * @return int|false     */    public function numRows()    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't count rows in an unbuffered result set", E_USER_WARNING);            return false;        }        return $this->dresult->rowCount();    }    /**     * Returns the number of rows affected by query     *     * @return int|false     */    public function affectedRows()    {_dlog();        return $this->dresult->affectedRows();    }    /**     * Frees resources taken by this result     */    public function free()    {_dlog();        unset($this->columns);        unset($this->columnNames);        drizzle_result_free($this->dresult);        unset($this->dresult);    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__substr_info(){    return array(        'info' => __('Displays a part of a string. The first option is the number of characters to skip from the beginning of the string (Default 0). The second option is the number of characters to return (Default: until end of string). The third option is the string to append and/or prepend when truncation occurs (Default: "...").'),        );}/** * */function PMA_transformation_text_plain__substr($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (!isset($options[0]) ||  $options[0] == '') {        $options[0] = 0;    }    if (!isset($options[1]) ||  $options[1] == '') {        $options[1] = 'all';    }    if (!isset($options[2]) || $options[2] == '') {        $options[2] = '...';    }    $newtext = '';    if ($options[1] != 'all') {        $newtext = PMA_substr($buffer, $options[0], $options[1]);    } else {        $newtext = PMA_substr($buffer, $options[0]);    }    $length = strlen($newtext);    $baselength = strlen($buffer);    if ($length != $baselength) {        if ($options[0] != 0) {            $newtext = $options[2] . $newtext;        }        if (($length + $options[0]) != $baselength) {            $newtext .= $options[2];        }    }    return $newtext;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Zip file creation class. * Makes zip files. * * @see Official ZIP file format: http://www.pkware.com/support/zip-app-note * * @access  public * @package PhpMyAdmin */class zipfile{    /**     * Whether to echo zip as it's built or return as string from -> file     *     * @var  boolean  $doWrite     */    var $doWrite = false;    /**     * Array to store compressed data     *     * @var  array    $datasec     */    var $datasec      = array();    /**     * Central directory     *     * @var  array    $ctrl_dir     */    var $ctrl_dir     = array();    /**     * End of central directory record     *     * @var  string   $eof_ctrl_dir     */    var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";    /**     * Last offset position     *     * @var  integer  $old_offset     */    var $old_offset   = 0;    /**     * Sets member variable this -> doWrite to true     * - Should be called immediately after class instantiantion     * - If set to true, then ZIP archive are echo'ed to STDOUT as each     *   file is added via this -> addfile(), and central directories are     *   echoed to STDOUT on final call to this -> file().  Also,     *   this -> file() returns an empty string so it is safe to issue a     *   "echo $zipfile;" command     *     * @access public     *     * @return nothing     */    function setDoWrite()    {        $this -> doWrite = true;    } // end of the 'setDoWrite()' method    /**     * Converts an Unix timestamp to a four byte DOS date and time format (date     * in high two bytes, time in low two bytes allowing magnitude comparison).     *     * @param integer $unixtime the current Unix timestamp     *     * @return integer the current date in a four byte DOS format     *     * @access private     */    function unix2DosTime($unixtime = 0)    {        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);        if ($timearray['year'] < 1980) {            $timearray['year']    = 1980;            $timearray['mon']     = 1;            $timearray['mday']    = 1;            $timearray['hours']   = 0;            $timearray['minutes'] = 0;            $timearray['seconds'] = 0;        } // end if        return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) |                ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);    } // end of the 'unix2DosTime()' method    /**     * Adds "file" to archive     *     * @param string  $data file contents     * @param string  $name name of the file in the archive (may contains the path)     * @param integer $time the current timestamp     *     * @access public     *     * @return nothing     */    function addFile($data, $name, $time = 0)    {        $name     = str_replace('\\', '/', $name);        $dtime    = substr("00000000" . dechex($this->unix2DosTime($time)), -8);        $hexdtime = '\x' . $dtime[6] . $dtime[7]                  . '\x' . $dtime[4] . $dtime[5]                  . '\x' . $dtime[2] . $dtime[3]                  . '\x' . $dtime[0] . $dtime[1];        eval('$hexdtime = "' . $hexdtime . '";');        $fr   = "\x50\x4b\x03\x04";        $fr   .= "\x14\x00";            // ver needed to extract        $fr   .= "\x00\x00";            // gen purpose bit flag        $fr   .= "\x08\x00";            // compression method        $fr   .= $hexdtime;             // last mod time and date        // "local file header" segment        $unc_len = strlen($data);        $crc     = crc32($data);        $zdata   = gzcompress($data);        $zdata   = substr(substr($zdata, 0, strlen($zdata) - 4), 2); // fix crc bug        $c_len   = strlen($zdata);        $fr      .= pack('V', $crc);             // crc32        $fr      .= pack('V', $c_len);           // compressed filesize        $fr      .= pack('V', $unc_len);         // uncompressed filesize        $fr      .= pack('v', strlen($name));    // length of filename        $fr      .= pack('v', 0);                // extra field length        $fr      .= $name;        // "file data" segment        $fr .= $zdata;        // echo this entry on the fly, ...        if ( $this -> doWrite) {            echo $fr;        } else {                     // ... OR add this entry to array            $this -> datasec[] = $fr;        }        // now add to central directory record        $cdrec = "\x50\x4b\x01\x02";        $cdrec .= "\x00\x00";                // version made by        $cdrec .= "\x14\x00";                // version needed to extract        $cdrec .= "\x00\x00";                // gen purpose bit flag        $cdrec .= "\x08\x00";                // compression method        $cdrec .= $hexdtime;                 // last mod time & date        $cdrec .= pack('V', $crc);           // crc32        $cdrec .= pack('V', $c_len);         // compressed filesize        $cdrec .= pack('V', $unc_len);       // uncompressed filesize        $cdrec .= pack('v', strlen($name)); // length of filename        $cdrec .= pack('v', 0);             // extra field length        $cdrec .= pack('v', 0);             // file comment length        $cdrec .= pack('v', 0);             // disk number start        $cdrec .= pack('v', 0);             // internal file attributes        $cdrec .= pack('V', 32);            // external file attributes - 'archive' bit set        $cdrec .= pack('V', $this -> old_offset); // relative offset of local header        $this -> old_offset += strlen($fr);        $cdrec .= $name;        // optional extra field, file comment goes here        // save to central directory        $this -> ctrl_dir[] = $cdrec;    } // end of the 'addFile()' method    /**     * Echo central dir if ->doWrite==true, else build string to return     *     * @return  string  if ->doWrite {empty string} else the ZIP file contents     *     * @access public     */    function file()    {        $ctrldir = implode('', $this -> ctrl_dir);        $header = $ctrldir .            $this -> eof_ctrl_dir .            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries "on this disk"            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries overall            pack('V', strlen($ctrldir)) .           // size of central dir            pack('V', $this -> old_offset) .        // offset to start of central dir            "\x00\x00";                             // .zip file comment length        if ( $this -> doWrite ) {       // Send central directory & end ctrl dir to STDOUT            echo $header;            return "";                                   // Return empty string        } else {                        // Return entire ZIP archive as string            $data = implode('', $this -> datasec);            return $data . $header;        }    } // end of the 'file()' method} // end of the 'zipfile' class?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error * * @package PhpMyAdmin *//** * base class */require_once './libraries/Message.class.php';/** * a single error * * @package PhpMyAdmin */class PMA_Error extends PMA_Message{    /**     * Error types     *     * @var array     */    static public $errortype = array (        E_ERROR              => 'Error',        E_WARNING            => 'Warning',        E_PARSE              => 'Parsing Error',        E_NOTICE             => 'Notice',        E_CORE_ERROR         => 'Core Error',        E_CORE_WARNING       => 'Core Warning',        E_COMPILE_ERROR      => 'Compile Error',        E_COMPILE_WARNING    => 'Compile Warning',        E_USER_ERROR         => 'User Error',        E_USER_WARNING       => 'User Warning',        E_USER_NOTICE        => 'User Notice',        E_STRICT             => 'Runtime Notice',        E_DEPRECATED         => 'Deprecation Notice',        E_RECOVERABLE_ERROR  => 'Catchable Fatal Error',    );    /**     * Error levels     *     * @var array     */    static public $errorlevel = array (        E_ERROR              => 'error',        E_WARNING            => 'error',        E_PARSE              => 'error',        E_NOTICE             => 'notice',        E_CORE_ERROR         => 'error',        E_CORE_WARNING       => 'error',        E_COMPILE_ERROR      => 'error',        E_COMPILE_WARNING    => 'error',        E_USER_ERROR         => 'error',        E_USER_WARNING       => 'error',        E_USER_NOTICE        => 'notice',        E_STRICT             => 'notice',        E_DEPRECATED         => 'notice',        E_RECOVERABLE_ERROR  => 'error',    );    /**     * The file in which the error occured     *     * @var string     */    protected $_file = '';    /**     * The line in which the error occured     *     * @var integer     */    protected $_line = 0;    /**     * Holds the backtrace for this error     *     * @var array     */    protected $_backtrace = array();    /**     * Unique id     *     * @var string     */    protected $_hash = null;    /**     * Constructor     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function __construct($errno, $errstr, $errfile, $errline)    {        $this->setNumber($errno);        $this->setMessage($errstr, false);        $this->setFile($errfile);        $this->setLine($errline);        $backtrace = debug_backtrace();        // remove last two calls: debug_backtrace() and handleError()        unset($backtrace[0]);        unset($backtrace[1]);        $this->setBacktrace($backtrace);    }    /**     * sets PMA_Error::$_backtrace     *     * @param array $backtrace     */    public function setBacktrace($backtrace)    {        $this->_backtrace = $backtrace;    }    /**     * sets PMA_Error::$_line     *     * @param integer $line     */    public function setLine($line)    {        $this->_line = $line;    }    /**     * sets PMA_Error::$_file     *     * @param string $file     */    public function setFile($file)    {        $this->_file = PMA_Error::relPath($file);    }    /**     * returns unique PMA_Error::$_hash, if not exists it will be created     *     * @param string $file     * @return  string PMA_Error::$_hash     */    public function getHash()    {        try {            $backtrace = serialize($this->getBacktrace());        } catch(Exception $e){            $backtrace = '';        }        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->getMessage() .                $this->getFile() .                $this->getLine() .                $backtrace            );        }        return $this->_hash;    }    /**     * returns PMA_Error::$_backtrace     *     * @return  array PMA_Error::$_backtrace     */    public function getBacktrace()    {        return $this->_backtrace;    }    /**     * returns PMA_Error::$_file     *     * @return  string PMA_Error::$_file     */    public function getFile()    {        return $this->_file;    }    /**     * returns PMA_Error::$_line     *     * @return  integer PMA_Error::$_line     */    public function getLine()    {        return $this->_line;    }    /**     * returns type of error     *     * @return  string  type of error     */    public function getType()    {        return PMA_Error::$errortype[$this->getNumber()];    }    /**     * returns level of error     *     * @return  string  level of error     */    public function getLevel()    {        return PMA_Error::$errorlevel[$this->getNumber()];    }    /**     * returns title prepared for HTML Title-Tag     *     * @return  string   HTML escaped and truncated title     */    public function getHtmlTitle()    {        return htmlspecialchars(substr($this->getTitle(), 0, 100));    }    /**     * returns title for error     *     * @return string     */    public function getTitle()    {        return $this->getType() . ': ' . $this->getMessage();    }    /**     * Display HTML backtrace     *     */    public function displayBacktrace()    {        foreach ($this->getBacktrace() as $step) {            echo PMA_Error::relPath($step['file']) . '#' . $step['line'] . ': ';            if (isset($step['class'])) {                echo $step['class'] . $step['type'];            }            echo $step['function'] . '(';            if (isset($step['args']) && (count($step['args']) > 1)) {                echo "<br />\n";                foreach ($step['args'] as $arg) {                    echo "\t";                    $this->displayArg($arg, $step['function']);                    echo ',' . "<br />\n";                }            } elseif (isset($step['args']) && (count($step['args']) > 0)) {                foreach ($step['args'] as $arg) {                    $this->displayArg($arg, $step['function']);                }            }            echo ')' . "<br />\n";        }    }    /**     * Display a single function argument     * if $function is one of include/require the $arg is converted te relative path     *     * @param string $arg     * @param string $function     */    protected function displayArg($arg, $function)    {        $include_functions = array(            'include',            'include_once',            'require',            'require_once',        );        if (in_array($function, $include_functions)) {            echo PMA_Error::relPath($arg);        } elseif (is_scalar($arg)) {            echo gettype($arg) . ' ' . htmlspecialchars($arg);        } else {            echo gettype($arg);        }    }    /**     * Displays the error in HTML     *     */    public function display()    {        echo '<div class="' . $this->getLevel() . '">';        if (! $this->isUserError()) {            echo '<strong>' . $this->getType() . '</strong>';            echo ' in ' . $this->getFile() . '#' . $this->getLine();            echo "<br />\n";        }        echo $this->getMessage();        if (! $this->isUserError()) {            echo "<br />\n";            echo "<br />\n";            echo "<strong>Backtrace</strong><br />\n";            echo "<br />\n";            echo $this->displayBacktrace();        }        echo '</div>';        $this->isDisplayed(true);    }    /**     * whether this error is a user error     *     * @return  boolean     */    public function isUserError()    {        return $this->getNumber() & (E_USER_WARNING | E_USER_ERROR | E_USER_NOTICE);    }    /**     * return short relative path to phpMyAdmin basedir     *     * prevent path disclusore in error message,     * and make users feel save to submit error reports     *     * @static     * @param string $dest  path to be shorten     * @return  string shortened path     */    static function relPath($dest)    {        $dest = realpath($dest);        if (substr(PHP_OS, 0, 3) == 'WIN') {            $path_separator = '\\';        } else {            $path_separator = '/';        }        $Ahere = explode($path_separator, realpath(dirname(__FILE__) . $path_separator . '..'));        $Adest = explode($path_separator, $dest);        $result = '.';        // && count ($Adest)>0 && count($Ahere)>0 )        while (implode($path_separator, $Adest) != implode($path_separator, $Ahere)) {            if (count($Ahere) > count($Adest)) {                array_pop($Ahere);                $result .= $path_separator . '..';            } else {                array_pop($Adest);            }        }        $path = $result . str_replace(implode($path_separator, $Adest), '', $dest);        return str_replace($path_separator . $path_separator, $path_separator, $path);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file management * * @package PhpMyAdmin *//** * Config file management class. * Stores its data in $_SESSION * * @package    phpMyAdmin */class ConfigFile{    /**     * Stores default PMA config from config.default.php     * @var array     */    private $cfg;    /**     * Stores original PMA_Config object, not modified by user preferences     * @var PMA_Config     */    private $orgCfgObject;    /**     * Stores allowed values for non-standard fields     * @var array     */    private $cfgDb;    /**     * Keys which will be always written to config file     * @var array     */    private $persistKeys = array();    /**     * Changes keys while updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    private $cfgUpdateReadMapping = array();    /**     * Key filter for {@link set()}     * @var array|null     */    private $setFilter;    /**     * Instance id (key in $_SESSION array, separate for each server - ConfigFile{server id})     * @var string     */    private $id;    /**     * Result for {@link _flattenArray()}     * @var array     */    private $_flattenArrayResult;    /**     * ConfigFile instance     * @var ConfigFile     */    private static $_instance;    /**     * Private constructor, use {@link getInstance()}     *     */    private function __construct()    {        // load default config values        $cfg = &$this->cfg;        include './libraries/config.default.php';        $cfg['fontsize'] = '82%';        // create PMA_Config to read config.inc.php values        $this->orgCfgObject = new PMA_Config(CONFIG_FILE);        // load additional config information        $cfg_db = &$this->cfgDb;        include './libraries/config.values.php';        // apply default values overrides        if (count($cfg_db['_overrides'])) {            foreach ($cfg_db['_overrides'] as $path => $value) {                PMA_array_write($path, $cfg, $value);            }        }        $this->id = 'ConfigFile' . $GLOBALS['server'];        if (!isset($_SESSION[$this->id])) {            $_SESSION[$this->id] = array();        }    }    /**     * Returns class instance     *     * @return ConfigFile     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new ConfigFile();        }        return self::$_instance;    }    /**     * Returns PMA_Config without user preferences applied     *     * @return PMA_Config     */    public function getOrgConfigObj()    {        return $this->orgCfgObject;    }    /**     * Sets names of config options which will be placed in config file even if they are set     * to their default values (use only full paths)     *     * @param array $keys     */    public function setPersistKeys($keys)    {        // checking key presence is much faster than searching so move values to keys        $this->persistKeys = array_flip($keys);    }    /**     * Returns flipped array set by {@link setPersistKeys()}     *     * @return array     */    public function getPersistKeysMap()    {        return $this->persistKeys;    }    /**     * By default ConfigFile allows setting of all configuration keys, use this method     * to set up a filter on {@link set()} method     *     * @param array|null $keys array of allowed keys or null to remove filter     */    public function setAllowedKeys($keys)    {        if ($keys === null) {            $this->setFilter = null;            return;        }        // checking key presence is much faster than searching so move values to keys        $this->setFilter = array_flip($keys);    }    /**     * Sets path mapping for updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    public function setCfgUpdateReadMapping(array $mapping)    {        $this->cfgUpdateReadMapping = $mapping;    }    /**     * Resets configuration data     */    public function resetConfigData()    {        $_SESSION[$this->id] = array();    }    /**     * Sets configuration data (overrides old data)     *     * @param array $cfg     */    public function setConfigData(array $cfg)    {        $_SESSION[$this->id] = $cfg;    }    /**     * Sets config value     *     * @param string $path     * @param mixed  $value     * @param string $canonical_path     */    public function set($path, $value, $canonical_path = null)    {        if ($canonical_path === null) {            $canonical_path = $this->getCanonicalPath($path);        }        // apply key whitelist        if ($this->setFilter !== null && !isset($this->setFilter[$canonical_path])) {            return;        }        // remove if the path isn't protected and it's empty or has a default value        if (!isset($this->persistKeys[$canonical_path])) {            $default_value = $this->getDefault($canonical_path);            // we need oryginal config values not overwritten by user preferences            // to allow for overwriting options set in config.inc.php with default values            $instance_default_value = PMA_array_read($canonical_path, $this->orgCfgObject->settings);            if (($value === $default_value && (defined('PMA_SETUP') || $instance_default_value === $default_value))                    || (empty($value) && empty($default_value) && (defined('PMA_SETUP') || empty($current_global)))) {                PMA_array_remove($path, $_SESSION[$this->id]);                return;            }        }        PMA_array_write($path, $_SESSION[$this->id], $value);    }    /**     * Flattens multidimensional array, changes indices to paths (eg. 'key/subkey').     * Used as array_walk() callback.     *     * @param mixed $value     * @param mixed $key     * @param mixed $prefix     */    private function _flattenArray($value, $key, $prefix)    {        // no recursion for numeric arrays        if (is_array($value) && !isset($value[0])) {            $prefix .= $key . '/';            array_walk($value, array($this, '_flattenArray'), $prefix);        } else {            $this->_flattenArrayResult[$prefix . $key] = $value;        }    }    /**     * Returns default config in a flattened array     *     * @return array     */    public function getFlatDefaultConfig()    {        $this->_flattenArrayResult = array();        array_walk($this->cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        return $flat_cfg;    }    /**     * Updates config with values read from given array     * (config will contain differences to defaults from config.defaults.php).     *     * @param array $cfg     */    public function updateWithGlobalConfig(array $cfg)    {        // load config array and flatten it        $this->_flattenArrayResult = array();        array_walk($cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        // save values        // map for translating a few user preferences paths, should be complemented        // by code reading from generated config to perform inverse mapping        foreach ($flat_cfg as $path => $value) {            if (isset($this->cfgUpdateReadMapping[$path])) {                $path = $this->cfgUpdateReadMapping[$path];            }            $this->set($path, $value, $path);        }    }    /**     * Returns config value or $default if it's not set     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function get($path, $default = null)    {        return PMA_array_read($path, $_SESSION[$this->id], $default);    }    /**     * Returns default config value or $default it it's not set ie. it doesn't     * exist in config.default.php ($cfg) and config.values.php     * ($_cfg_db['_overrides'])     *     * @param  string $canonical_path     * @param  mixed  $default     * @return mixed     */    public function getDefault($canonical_path, $default = null)    {        return PMA_array_read($canonical_path, $this->cfg, $default);    }    /**     * Returns config value, if it's not set uses the default one; returns     * $default if the path isn't set and doesn't contain a default value     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getValue($path, $default = null)    {        $v = PMA_array_read($path, $_SESSION[$this->id], null);        if ($v !== null) {            return $v;        }        $path = $this->getCanonicalPath($path);        return $this->getDefault($path, $default);    }    /**     * Returns canonical path     *     * @param string $path     * @return string     */    public function getCanonicalPath($path) {        return preg_replace('#^Servers/([\d]+)/#', 'Servers/1/', $path);    }    /**     * Returns config database entry for $path ($cfg_db in config_info.php)     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getDbEntry($path, $default = null)    {        return PMA_array_read($path, $this->cfgDb, $default);    }    /**     * Returns server count     *     * @return int     */    public function getServerCount()    {        return isset($_SESSION[$this->id]['Servers'])            ? count($_SESSION[$this->id]['Servers'])            : 0;    }    /**     * Returns server list     *     * @return array|null     */    public function getServers()    {      return isset($_SESSION[$this->id]['Servers'])          ? $_SESSION[$this->id]['Servers']          : null;    }    /**     * Returns DSN of given server     *     * @param integer $server     * @return string     */    function getServerDSN($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return '';        }        $path = 'Servers/' . $server;        $dsn = $this->getValue("$path/extension") . '://';        if ($this->getValue("$path/auth_type") == 'config') {            $dsn .= $this->getValue("$path/user");            if (!$this->getValue("$path/nopassword")) {                $dsn .= ':***';            }            $dsn .= '@';        }        if ($this->getValue("$path/connect_type") == 'tcp') {            $dsn .= $this->getValue("$path/host");            $port = $this->getValue("$path/port");            if ($port) {                $dsn .= ':' . $port;            }        } else {            $dsn .= $this->getValue("$path/socket");        }        return $dsn;    }    /**     * Returns server name     *     * @param int $id     * @return string     */    public function getServerName($id)    {        if (!isset($_SESSION[$this->id]['Servers'][$id])) {            return '';        }        $verbose = $this->get("Servers/$id/verbose");        if (!empty($verbose)) {            return $verbose;        }        $host = $this->get("Servers/$id/host");        return empty($host) ? 'localhost' : $host;    }    /**     * Removes server     *     * @param int $server     */    public function removeServer($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return;        }        $last_server = $this->getServerCount();        for ($i = $server; $i < $last_server; $i++) {            $_SESSION[$this->id]['Servers'][$i] = $_SESSION[$this->id]['Servers'][$i+1];        }        unset($_SESSION[$this->id]['Servers'][$last_server]);        if (isset($_SESSION[$this->id]['ServerDefault'])            && $_SESSION[$this->id]['ServerDefault'] >= 0) {            unset($_SESSION[$this->id]['ServerDefault']);        }    }    /**     * Returns config file path, relative to phpMyAdmin's root path     *     * @return string     */    public function getFilePath()    {        // Load paths        if (!defined('SETUP_CONFIG_FILE')) {            include_once './libraries/vendor_config.php';        }        return SETUP_CONFIG_FILE;    }    /**     * Returns configuration array (full, multidimensional format)     *     * @return array     */    public function getConfig()    {        $c = $_SESSION[$this->id];        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            PMA_array_write($map_to, $c, PMA_array_read($map_from, $c));            PMA_array_remove($map_from, $c);        }        return $c;    }    /**     * Returns configuration array (flat format)     *     * @return array     */    public function getConfigArray()    {        $this->_flattenArrayResult = array();        array_walk($_SESSION[$this->id], array($this, '_flattenArray'), '');        $c = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        $persistKeys = array_diff(array_keys($this->persistKeys), array_keys($c));        foreach ($persistKeys as $k) {            $c[$k] = $this->getDefault($k);        }        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            if (!isset($c[$map_from])) {                continue;            }            $c[$map_to] = $c[$map_from];            unset($c[$map_from]);        }        return $c;    }}?>
<?php//============================================================+// File name   : htmlcolors.php// Version     : 1.0.008// Begin       : 2002-04-09// Last Update : 2010-12-16// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2002-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Array of WEB safe colors////============================================================+/** * @file * Array of WEB safe colors * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 2.9.000 (2008-03-26) *//** * Array of WEB safe colors */$webcolor = array ('aliceblue' => 'f0f8ff','antiquewhite' => 'faebd7','aqua' => '00ffff','aquamarine' => '7fffd4','azure' => 'f0ffff','beige' => 'f5f5dc','bisque' => 'ffe4c4','black' => '000000','blanchedalmond' => 'ffebcd','blue' => '0000ff','blueviolet' => '8a2be2','brown' => 'a52a2a','burlywood' => 'deb887','cadetblue' => '5f9ea0','chartreuse' => '7fff00','chocolate' => 'd2691e','coral' => 'ff7f50','cornflowerblue' => '6495ed','cornsilk' => 'fff8dc','crimson' => 'dc143c','cyan' => '00ffff','darkblue' => '00008b','darkcyan' => '008b8b','darkgoldenrod' => 'b8860b','dkgray' => 'a9a9a9','darkgray' => 'a9a9a9','darkgrey' => 'a9a9a9','darkgreen' => '006400','darkkhaki' => 'bdb76b','darkmagenta' => '8b008b','darkolivegreen' => '556b2f','darkorange' => 'ff8c00','darkorchid' => '9932cc','darkred' => '8b0000','darksalmon' => 'e9967a','darkseagreen' => '8fbc8f','darkslateblue' => '483d8b','darkslategray' => '2f4f4f','darkslategrey' => '2f4f4f','darkturquoise' => '00ced1','darkviolet' => '9400d3','deeppink' => 'ff1493','deepskyblue' => '00bfff','dimgray' => '696969','dimgrey' => '696969','dodgerblue' => '1e90ff','firebrick' => 'b22222','floralwhite' => 'fffaf0','forestgreen' => '228b22','fuchsia' => 'ff00ff','gainsboro' => 'dcdcdc','ghostwhite' => 'f8f8ff','gold' => 'ffd700','goldenrod' => 'daa520','gray' => '808080','grey' => '808080','green' => '008000','greenyellow' => 'adff2f','honeydew' => 'f0fff0','hotpink' => 'ff69b4','indianred' => 'cd5c5c','indigo' => '4b0082','ivory' => 'fffff0','khaki' => 'f0e68c','lavender' => 'e6e6fa','lavenderblush' => 'fff0f5','lawngreen' => '7cfc00','lemonchiffon' => 'fffacd','lightblue' => 'add8e6','lightcoral' => 'f08080','lightcyan' => 'e0ffff','lightgoldenrodyellow' => 'fafad2','ltgray' => 'd3d3d3','lightgray' => 'd3d3d3','lightgrey' => 'd3d3d3','lightgreen' => '90ee90','lightpink' => 'ffb6c1','lightsalmon' => 'ffa07a','lightseagreen' => '20b2aa','lightskyblue' => '87cefa','lightslategray' => '778899','lightslategrey' => '778899','lightsteelblue' => 'b0c4de','lightyellow' => 'ffffe0','lime' => '00ff00','limegreen' => '32cd32','linen' => 'faf0e6','magenta' => 'ff00ff','maroon' => '800000','mediumaquamarine' => '66cdaa','mediumblue' => '0000cd','mediumorchid' => 'ba55d3','mediumpurple' => '9370d8','mediumseagreen' => '3cb371','mediumslateblue' => '7b68ee','mediumspringgreen' => '00fa9a','mediumturquoise' => '48d1cc','mediumvioletred' => 'c71585','midnightblue' => '191970','mintcream' => 'f5fffa','mistyrose' => 'ffe4e1','moccasin' => 'ffe4b5','navajowhite' => 'ffdead','navy' => '000080','oldlace' => 'fdf5e6','olive' => '808000','olivedrab' => '6b8e23','orange' => 'ffa500','orangered' => 'ff4500','orchid' => 'da70d6','palegoldenrod' => 'eee8aa','palegreen' => '98fb98','paleturquoise' => 'afeeee','palevioletred' => 'd87093','papayawhip' => 'ffefd5','peachpuff' => 'ffdab9','peru' => 'cd853f','pink' => 'ffc0cb','plum' => 'dda0dd','powderblue' => 'b0e0e6','purple' => '800080','red' => 'ff0000','rosybrown' => 'bc8f8f','royalblue' => '4169e1','saddlebrown' => '8b4513','salmon' => 'fa8072','sandybrown' => 'f4a460','seagreen' => '2e8b57','seashell' => 'fff5ee','sienna' => 'a0522d','silver' => 'c0c0c0','skyblue' => '87ceeb','slateblue' => '6a5acd','slategray' => '708090','slategrey' => '708090','snow' => 'fffafa','springgreen' => '00ff7f','steelblue' => '4682b4','tan' => 'd2b48c','teal' => '008080','thistle' => 'd8bfd8','tomato' => 'ff6347','turquoise' => '40e0d0','violet' => 'ee82ee','wheat' => 'f5deb3','white' => 'ffffff','whitesmoke' => 'f5f5f5','yellow' => 'ffff00','yellowgreen' => '9acd32');//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Server synchronisation functions. * * @package PhpMyAdmin *//** * Places matching tables in source and target databases in $matching_tables * array whereas $uncommon_source_tables array gets the tables present in * source database but are absent from target database.  Criterion for * matching tables is just comparing their names. * * @param array $trg_tables              array of target database table names, * @param array $src_tables              array of source database table names, * @param array &$matching_tables        empty array passed by reference to save *                                       names of matching tables, * @param array &$uncommon_source_tables empty array passed by reference to save *                                       names of tables present in source database *                                       but absent from target database */function PMA_getMatchingTables($trg_tables, $src_tables, &$matching_tables, &$uncommon_source_tables){    for ($k=0; $k< sizeof($src_tables); $k++) {        $present_in_target = false;        for ($l=0; $l < sizeof($trg_tables); $l++) {            if ($src_tables[$k] === $trg_tables[$l]) {                $present_in_target = true;                $matching_tables[] = $src_tables[$k];            }        }        if ($present_in_target === false) {            $uncommon_source_tables[] = $src_tables[$k];        }    }}/** * Places tables present in target database but are absent from source database * * @param array $trg_tables              array of target database table names, * @param array $matching_tables         matching tables array containing names *                                       of matching tables, * @param array &$uncommon_target_tables empty array passed by reference to save *                                       names of tables presnet in target database *                                       but absent from source database */function PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, &$uncommon_target_tables){    for ($c=0; $c<sizeof($trg_tables); $c++) {        $match = false;        for ($d=0; $d < sizeof($matching_tables); $d++) {            if ($trg_tables[$c] === $matching_tables[$d]) {                $match=true;            }        }        if ($match === false) {            $uncommon_target_tables[] = $trg_tables[$c];        }    }}/** * Finds the difference in source and target matching tables by * first comparing source table's primary key entries with target table enteries. * It gets the field names for the matching table also for comparisons. * If the entry is found in target table also then it is checked for the remaining * field values also, in order to check whether update is required or not. * If update is required, it is placed in $update_array * Otherwise that entry is placed in the $insert_array. * * @param string  $src_db                  name of source database * @param string  $trg_db                  name of target database * @param db_link $src_link                connection established with source server * @param db_link $trg_link                connection established with target server * @param array   &$matching_table         array containing matching table names * @param array   &$matching_tables_fields A two dimensional array passed by reference to contain names of fields for each matching table * @param array   &$update_array           A three dimensional array passed by reference to *                                         contain updates required for each matching table * @param array   &$insert_array           A three dimensional array passed by reference to *                                         contain inserts required for each matching table * @param array   &$delete_array           Unused * @param array   &$fields_num             A two dimensional array passed by reference to *                                         contain number of fields for each matching table * @param int     $matching_table_index    Index of a table from $matching_table array * @param array   &$matching_tables_keys   A two dimensional array passed by reference to contain names of keys for each matching table */function PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, &$matching_table, &$matching_tables_fields,    &$update_array, &$insert_array, &$delete_array, &$fields_num, $matching_table_index, &$matching_tables_keys){    if (isset($matching_table[$matching_table_index])) {        $fld = array();        $fld_results = PMA_DBI_get_columns($src_db, $matching_table[$matching_table_index], null, true, $src_link);        $is_key = array();        if (isset($fld_results)) {            foreach ($fld_results as $each_field) {                $field_name = $each_field['Field'];                if ($each_field['Key'] == 'PRI') {                    $is_key[] = $field_name;                }                $fld[] = $field_name;            }        }        $matching_tables_fields[$matching_table_index] = $fld;        $fields_num[$matching_table_index] = sizeof($fld);        $matching_tables_keys[$matching_table_index] = $is_key;        $source_result_set = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $is_key, $src_link);        $source_size = sizeof($source_result_set);        $trg_fld_results = PMA_DBI_get_columns($trg_db, $matching_table[$matching_table_index], null, true, $trg_link);        $all_keys_match = true;        $trg_keys = array();        if (isset($trg_fld_results)) {            foreach ($trg_fld_results as $each_field) {                if ($each_field['Key'] == 'PRI') {                    $trg_keys[] = $each_field['Field'];                    if (! (in_array($each_field['Field'], $is_key))) {                        $all_keys_match = false;                    }                }            }        }        $update_row = 0;        $insert_row = 0;        for ($j = 0; $j < $source_size; $j++) {            $starting_index = 0;            $update_field = 0;            if (isset($source_result_set[$j]) && ($all_keys_match)) {                // Query the target server to see which rows already exist                $trg_select_query = "SELECT * FROM " . PMA_backquote($trg_db) . "."                    . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                if (sizeof($is_key) == 1) {                    $trg_select_query .= PMA_backquote($is_key[0]). "='" . $source_result_set[$j] . "'";                } elseif (sizeof($is_key) > 1) {                    for ($k=0; $k < sizeof($is_key); $k++) {                        $trg_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                        if ($k < (sizeof($is_key)-1)) {                            $trg_select_query .= " AND ";                        }                    }                }                $target_result_set = PMA_DBI_fetch_result($trg_select_query, null, null, $trg_link);                if ($target_result_set) {                    // Fetch the row from the source server to do a comparison                    $src_select_query = "SELECT * FROM " . PMA_backquote($src_db) . "."                        . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    if (sizeof($is_key) == 1) {                        $src_select_query .= PMA_backquote($is_key[0]) . "='" . $source_result_set[$j] . "'";                    } elseif (sizeof($is_key) > 1) {                        for ($k=0; $k< sizeof($is_key); $k++) {                            $src_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                            if ($k < (sizeof($is_key) - 1)) {                                $src_select_query .= " AND ";                            }                        }                    }                    $src_result_set = PMA_DBI_fetch_result($src_select_query, null, null, $src_link);                    /**                    * Comparing each corresponding field of the source and target matching rows.                    * Placing the primary key, value of primary key, field to be updated, and the                    * new value of field to be updated in each row of the update array.                    */                    for ($m = 0; ($m < $fields_num[$matching_table_index]) && ($starting_index == 0) ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (! (in_array($fld[$m], $is_key)))) {                                    if (sizeof($is_key) == 1) {                                        if ($source_result_set[$j]) {                                            $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                        }                                    } elseif (sizeof($is_key) > 1) {                                        for ($n=0; $n < sizeof($is_key); $n++) {                                            if (isset($src_result_set[0][$is_key[$n]])) {                                                $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                            }                                        }                                    }                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if (isset($src_result_set[0][$fld[$m]])) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $starting_index = $m;                                    $update_row++;                                }                            } else {                                if (sizeof($is_key) == 1) {                                    if ($source_result_set[$j]) {                                        $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                    }                                } elseif (sizeof($is_key) > 1) {                                    for ($n = 0; $n < sizeof($is_key); $n++) {                                        if (isset($src_result_set[0][$is_key[$n]])) {                                            $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                        }                                    }                                }                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if (isset($src_result_set[0][$fld[$m]])) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $starting_index = $m;                                $update_row++;                            }                        }                    }                    for ($m = $starting_index + 1; $m < $fields_num[$matching_table_index] ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (!(in_array($fld[$m], $is_key)))) {                                    $update_row--;                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if ($src_result_set[0][$fld[$m]]) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $update_row++;                                }                            } else {                                $update_row--;                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if ($src_result_set[0][$fld[$m]]) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $update_row++;                            }                        }                    }                } else {                    /**                     * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                     */                    if (sizeof($is_key) == 1) {                        if (isset($source_result_set[$j])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                        }                    } elseif (sizeof($is_key) > 1) {                        for ($l = 0; $l < sizeof($is_key); $l++) {                            if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                                $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                            }                        }                    }                    $insert_row++;                }            } else {                /**                 * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                 * This condition is met when there is an additional column in the source table                 */                if (sizeof($is_key) == 1) {                    if (isset($source_result_set[$j])) {                        $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                    }                } elseif (sizeof($is_key) > 1) {                    for ($l = 0; $l < sizeof($is_key); $l++) {                        if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                        }                    }                }                $insert_row++;            }        } // for loop ends    }}/** * Finds the rows which are to be deleted from target table. * * @param array   &$delete_array        array containing rows that are to be deleted * @param array   $matching_table       array containing matching table names * @param int     $matching_table_index index of a table from $matching_table array * @param array   $trg_keys             array of target table keys * @param array   $src_keys             array of source table keys * @param string  $trg_db               name of target database * @param db_link $trg_link             connection established with target server * @param string  $src_db               name of source database * @param db_link $src_link             connection established with source server */function PMA_findDeleteRowsFromTargetTables(&$delete_array, $matching_table, $matching_table_index, $trg_keys, $src_keys, $trg_db, $trg_link, $src_db, $src_link){    if (isset($trg_keys[$matching_table_index])) {        $target_key_values = PMA_get_column_values($trg_db, $matching_table[$matching_table_index], $trg_keys[$matching_table_index], $trg_link);    }    if (isset($src_keys[$matching_table_index])) {        $source_key_values = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $src_keys[$matching_table_index], $src_link);    }    $all_keys_match = 1;    for ($a = 0; $a < sizeof($trg_keys[$matching_table_index]); $a++) {        if (isset($trg_keys[$matching_table_index][$a])) {            if (! (in_array($trg_keys[$matching_table_index][$a], $src_keys[$matching_table_index]))) {                $all_keys_match = 0;            }        }    }    if (! ($all_keys_match)) {        if (isset($target_key_values)) {            $delete_array[$matching_table_index] = $target_key_values;        }    }    if (isset($trg_keys[$matching_table_index])) {        if ((sizeof($trg_keys[$matching_table_index]) == 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    if (! (in_array($target_key_values[$i], $source_key_values))) {                        $delete_array[$matching_table_index][$row] = $target_key_values[$i];                        $row++;                    }                }            }        } elseif ((sizeof($trg_keys[$matching_table_index]) > 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    $is_present = false;                    for ($j = 0; $j < sizeof($source_key_values) && ($is_present == false) ; $j++) {                        $check = true;                        for ($k = 0; $k < sizeof($trg_keys[$matching_table_index]); $k++) {                            if ($target_key_values[$i][$trg_keys[$matching_table_index][$k]] != $source_key_values[$j][$trg_keys[$matching_table_index][$k]]) {                                $check = false;                            }                        }                        if ($check) {                            $is_present = true;                        }                    }                    if (! ($is_present)) {                        for ($l = 0; $l < sizeof($trg_keys[$matching_table_index]); $l++) {                            $delete_array[$matching_table_index][$row][$trg_keys[$matching_table_index][$l]] = $target_key_values[$i][$trg_keys[$matching_table_index][$l]];                        }                        $row++;                    }                }            }        }    }}/** * PMA_dataDiffInUncommonTables() finds the data difference in  $source_tables_uncommon * * @param array  $source_tables_uncommon table names that are in source db and not in target db * @param string $src_db                 name of source database * @param mixed  $src_link               connection established with source server * @param int    $index                  index of a table from $matching_table array * @param array  &$row_count             number of rows * * @return nothing */function PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $index, &$row_count){    $query = "SELECT COUNT(*) FROM " . PMA_backquote($src_db) . "." . PMA_backquote($source_tables_uncommon[$index]);    $rows  = PMA_DBI_fetch_result($query, null, null, $src_link);    $row_count[$index] = $rows[0];}/** * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index] * * @param array   $table                Matching tables' names * @param array   $update_array         A three dimensional array containing field *                                      value updates required for each matching table * @param string  $src_db               Name of source database * @param string  $trg_db               Name of target database * @param mixed   $trg_link             Connection established with target server * @param int     $matching_table_index index of matching table in matching_table_array * @param array   $matching_table_keys * @param boolean $display */function PMA_updateTargetTables($table, $update_array, $src_db, $trg_db, $trg_link, $matching_table_index, $matching_table_keys, $display){    if (isset($update_array[$matching_table_index])) {        if (sizeof($update_array[$matching_table_index])) {            for ($update_row = 0; $update_row < sizeof($update_array[$matching_table_index]); $update_row++) {                if (isset($update_array[$matching_table_index][$update_row])) {                    $update_fields_num = sizeof($update_array[$matching_table_index][$update_row])-sizeof($matching_table_keys[$matching_table_index]);                    if ($update_fields_num > 0) {                        $query = "UPDATE " . PMA_backquote($trg_db) . "." .PMA_backquote($table[$matching_table_index]) . " SET ";                        for ($update_field = 0; $update_field < $update_fields_num; $update_field = $update_field+2) {                            if (isset($update_array[$matching_table_index][$update_row][$update_field]) && isset($update_array[$matching_table_index][$update_row][$update_field+1])) {                                $query .= PMA_backquote($update_array[$matching_table_index][$update_row][$update_field]) . "='" . $update_array[$matching_table_index][$update_row][$update_field+1] . "'";                            }                            if ($update_field < ($update_fields_num - 2)) {                                $query .= ", ";                            }                        }                        $query .= " WHERE ";                        if (isset($matching_table_keys[$matching_table_index])) {                            for ($key = 0; $key < sizeof($matching_table_keys[$matching_table_index]); $key++) {                                if (isset($matching_table_keys[$matching_table_index][$key])) {                                    $query .= PMA_backquote($matching_table_keys[$matching_table_index][$key]) . "='" . $update_array[$matching_table_index][$update_row][$matching_table_keys[$matching_table_index][$key]] . "'";                                }                                if ($key < (sizeof($matching_table_keys[$matching_table_index]) - 1)) {                                    $query .= " AND ";                                }                            }                        }                        $query .= ';';                        if ($display == true) {                            echo "<p>" . $query . "</p>";                        }                        PMA_DBI_try_query($query, $trg_link, 0);                    }                }            }        }    }}/** * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index] * * @todo this function uses undefined variables and is possibly broken: $matching_tables, *       $matching_tables_fields, $remove_indexes_array, $matching_table_keys * * @param array  $matching_table          matching table names * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $table_fields            field names of a table * @param array  &$array_insert * @param int    $matching_table_index    index of matching table in matching_table_array * @param array  $matching_tables_keys    field names that are keys in the matching table * @param array  $source_columns          source column information * @param array  &$add_column_array       column names that are to be added in target table * @param array  $criteria                criteria like type, null, collation, default etc * @param array  $target_tables_keys      field names that are keys in the target table * @param array  $uncommon_tables         table names that are present in source db but not in targt db * @param array  &$uncommon_tables_fields field names of the uncommon tables * @param array  $uncommon_cols           column names that are present in target table and not in source table * @param array  &$alter_str_array        column names that are to be altered * @param array  &$source_indexes         column names on which indexes are made in source table * @param array  &$target_indexes         column names on which indexes are made in target table * @param array  &$add_indexes_array      column names on which index is to be added in target table * @param array  &$alter_indexes_array    column names whose indexes are to be altered. Only index name and uniqueness of an index can be changed * @param array  &$delete_array           rows that are to be deleted * @param array  &$update_array           rows that are to be updated in target * @param bool   $display */function PMA_insertIntoTargetTable($matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, &$array_insert, $matching_table_index, $matching_tables_keys, $source_columns, &$add_column_array, $criteria, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $uncommon_cols, &$alter_str_array, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$delete_array, &$update_array, $display){    if (isset($array_insert[$matching_table_index])) {        if (sizeof($array_insert[$matching_table_index])) {            for ($insert_row = 0; $insert_row< sizeof($array_insert[$matching_table_index]); $insert_row++) {                if (isset($array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][0]])) {                    $select_query = "SELECT * FROM " . PMA_backquote($src_db) . "." . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    for ($i = 0; $i < sizeof($matching_tables_keys[$matching_table_index]); $i++) {                        $select_query .= $matching_tables_keys[$matching_table_index][$i] . "='";                        $select_query .= $array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][$i]] . "'" ;                        if ($i < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                            $select_query.= " AND ";                        }                    }                    $select_query .= "; ";                    $result = PMA_DBI_fetch_result($select_query, null, null, $src_link);                    $insert_query = "INSERT INTO " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_table[$matching_table_index]) ." (";                    for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                        $insert_query .=  PMA_backquote($table_fields[$matching_table_index][$field_index]);                        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db ."'                                         AND TABLE_NAME = '" . $matching_table[$matching_table_index]. "'AND COLUMN_NAME = '" .                                         $table_fields[$matching_table_index][$field_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;                        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $trg_link);                        if (sizeof($is_fk_result) > 0) {                            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                                $table_index = array_keys($matching_table, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                                if (isset($alter_str_array[$table_index[0]])) {                                    PMA_alterTargetTableStructure(                                        $trg_db, $trg_link, $matching_tables, $source_columns, $alter_str_array, $matching_tables_fields,                                        $criteria, $matching_tables_keys, $target_tables_keys, $table_index[0], $display                                    );                                    unset($alter_str_array[$table_index[0]]);                                }                                if (isset($uncommon_columns[$table_index[0]])) {                                    PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_index[0], $display);                                    unset($uncommon_columns[$table_index[0]]);                                }                                if (isset($add_column_array[$table_index[0]])) {                                    PMA_findDeleteRowsFromTargetTables(                                        $delete_array, $matching_tables, $table_index[0], $target_tables_keys,                                        $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link                                    );                                    if (isset($delete_array[$table_index[0]])) {                                        PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index[0], $target_tables_keys, $delete_array, $display);                                        unset($delete_array[$table_index[0]]);                                    }                                    PMA_addColumnsInTargetTable(                                        $src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, $add_column_array,                                        $matching_tables_fields, $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables,                                        $uncommon_tables_fields, $table_index[0], $uncommon_cols, $display                                    );                                    unset($add_column_array[$table_index[0]]);                                }                                if (isset($add_indexes_array[$table_index[0]])                                    || isset($remove_indexes_array[$table_index[0]])                                    || isset($alter_indexes_array[$table_index[0]])                                ) {                                    PMA_applyIndexesDiff(                                        $trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array,                                        $alter_indexes_array, $remove_indexes_array, $table_index[0], $display                                    );                                    unset($add_indexes_array[$table_index[0]]);                                    unset($alter_indexes_array[$table_index[0]]);                                    unset($remove_indexes_array[$table_index[0]]);                                }                                if (isset($update_array[$table_index[0]])) {                                    PMA_updateTargetTables(                                        $matching_tables, $update_array, $src_db, $trg_db, $trg_link,                                        $table_index[0], $matching_table_keys, $display                                    );                                    unset($update_array[$table_index[0]]);                                }                                if (isset($array_insert[$table_index[0]])) {                                     PMA_insertIntoTargetTable(                                         $matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, $array_insert, $table_index[0],                                         $matching_tables_keys, $source_columns, $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,                                         $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes, $target_indexes, $add_indexes_array,                                         $alter_indexes_array, $delete_array, $update_array, $display                                     );                                     unset($array_insert[$table_index[0]]);                                }                            }                        }                        if ($field_index < sizeof($table_fields[$matching_table_index])-1) {                            $insert_query .= ", ";                        }                    }                    $insert_query .= ") VALUES(";                    if (sizeof($table_fields[$matching_table_index]) == 1) {                         $insert_query .= "'" . PMA_sqlAddSlashes($result[0]) . "'";                    } else {                        for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                            if (isset($result[0][$table_fields[$matching_table_index][$field_index]])) {                                $insert_query .= "'" . PMA_sqlAddSlashes($result[0][$table_fields[$matching_table_index][$field_index]]) . "'";                            } else {                                $insert_query .= "'NULL'";                            }                            if ($field_index < (sizeof($table_fields[$matching_table_index])) - 1) {                                    $insert_query .= " ," ;                            }                        }                    }                    $insert_query .= ");";                    if ($display == true) {                        PMA_displayQuery($insert_query);                    }                    PMA_DBI_try_query($insert_query, $trg_link, 0);                }            }        }    }}/** * PMA_createTargetTables() Create the missing table $uncommon_table in target database * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  &$uncommon_tables        names of tables present in source but not in target * @param int    $table_index             index of table in $uncommon_tables array * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, &$uncommon_tables, $table_index, &$uncommon_tables_fields, $display){    if (isset($uncommon_tables[$table_index])) {        $fields_result = PMA_DBI_get_columns($src_db, $uncommon_tables[$table_index], null, true, $src_link);        $fields = array();        foreach ($fields_result as $each_field) {            $field_name = $each_field['Field'];            $fields[] = $field_name;        }        $uncommon_tables_fields[$table_index] = $fields;        $Create_Query = PMA_DBI_fetch_value("SHOW CREATE TABLE " . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), 0, 1, $src_link);        // Replace the src table name with a `dbname`.`tablename`        $Create_Table_Query = preg_replace('/' . preg_quote(PMA_backquote($uncommon_tables[$table_index]), '/') . '/',                                            PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]),                                            $Create_Query,                                            $limit = 1        );        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                        AND TABLE_NAME = '" . $uncommon_tables[$table_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);        if (sizeof($is_fk_result) > 0) {            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }            }        }        $Create_Table_Query .= ';';        if ($display == true) {            echo '<p>' . $Create_Table_Query . '</p>';        }        PMA_DBI_try_query($Create_Table_Query, $trg_link, 0);    }}/** * PMA_populateTargetTables() inserts data into uncommon tables after they have been created * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db) * @param int    $table_index            index of table in matching_table_array * @param array  $uncommon_tables_fields field names of the uncommon table * @param bool   $display * * @todo This turns NULL values into '' (empty string) */function PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $uncommon_tables, $table_index, $uncommon_tables_fields, $display){    $display = false; // todo: maybe display some of the queries if they are not too numerous    $unbuffered_result = PMA_DBI_try_query('SELECT * FROM ' . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), $src_link, PMA_DBI_QUERY_UNBUFFERED);    if (false !== $unbuffered_result) {        $insert_query = 'INSERT INTO ' . PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]) . ' VALUES';        while ($one_row = PMA_DBI_fetch_row($unbuffered_result)) {            $insert_query .= '(';            $key_of_last_value = count($one_row) - 1;            foreach ($one_row as $key => $value) {                $insert_query .= "'" . PMA_sqlAddSlashes($value) . "'";                if ($key < $key_of_last_value) {                    $insert_query .= ",";                }            }            $insert_query .= '),';        }        $insert_query = substr($insert_query, 0, -1);        $insert_query .= ';';        if ($display == true) {            PMA_displayQuery($insert_query);        }        PMA_DBI_try_query($insert_query, $trg_link, 0);    }}/** * PMA_deleteFromTargetTable() delete rows from target table * * @param string $trg_db             name of target database * @param mixed  $trg_link           connection established with target server * @param array  $matching_tables    matching table names * @param int    $table_index        index of table in matching_table_array * @param array  $target_tables_keys primary key names of the target tables * @param array  $delete_array       key values of rows that are to be deleted * @param bool   $display */function PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index, $target_tables_keys, $delete_array, $display){    for ($i = 0; $i < sizeof($delete_array[$table_index]); $i++) {        if (isset($target_tables_keys[$table_index])) {            $delete_query = 'DELETE FROM ' . PMA_backquote($trg_db) . '.' .PMA_backquote($matching_tables[$table_index]) . ' WHERE ';            for ($y = 0; $y < sizeof($target_tables_keys[$table_index]); $y++) {                $delete_query .= PMA_backquote($target_tables_keys[$table_index][$y]) . " = '";                if (sizeof($target_tables_keys[$table_index]) == 1) {                    $delete_query .= $delete_array[$table_index][$i] . "'";                } elseif (sizeof($target_tables_keys[$table_index]) > 1) {                    $delete_query .= $delete_array[$table_index][$i][$target_tables_keys[$table_index][$y]] . "'";                }                if ($y < (sizeof($target_tables_keys[$table_index]) - 1)) {                    $delete_query .= ' AND ';                }                $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                            AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_index]."' AND REFERENCED_COLUMN_NAME = '"                           . $target_tables_keys[$table_index][$y] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";                $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);                $result_size = sizeof($pk_query_result);                if ($result_size > 0) {                    for ($b = 0; $b < $result_size; $b++) {                        $drop_pk_query = "DELETE FROM " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . " WHERE " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . " = " . $target_tables_keys[$table_index][$y] . ";";                        PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                    }                }            }        }        if ($display == true) {            echo '<p>' . $delete_query . '</p>';        }        PMA_DBI_try_query($delete_query, $trg_link, 0);    }}/** * PMA_structureDiffInTables() Gets all the column information for source and target table. * Compare columns on their names. * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column. * If column does not exist in target table then it is placed in  $add_column_array. * If column exists in target table but criteria is different then it is palced in $alter_str_array. * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns. * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys. * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys. * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source tables * @param array  &$target_columns        columns information of the target tables * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target *                                       column have some criteria different and third index containing the criteria which is different. * @param array  &$add_column_array      two dimensional associative array, first index of the array contain the matching table number and second index contain the *                                       column name which is to be added in the target table * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table */function PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_columns, &$target_columns, &$alter_str_array, &$add_column_array, &$uncommon_columns, $criteria, &$target_tables_keys, $matching_table_index){    //Gets column information for source and target table    $source_columns[$matching_table_index] = PMA_DBI_get_columns_full($src_db, $matching_tables[$matching_table_index], null, $src_link);    $target_columns[$matching_table_index] = PMA_DBI_get_columns_full($trg_db, $matching_tables[$matching_table_index], null, $trg_link);    foreach ($source_columns[$matching_table_index] as $column_name => $each_column) {        if (isset($target_columns[$matching_table_index][$column_name]['Field'])) {            //If column exists in target table then matches criteria like type, null, collation, key, default, comment of the column            for ($i = 0; $i < sizeof($criteria); $i++) {                if ($source_columns[$matching_table_index][$column_name][$criteria[$i]] != $target_columns[$matching_table_index][$column_name][$criteria[$i]]) {                    if (($criteria[$i] == 'Default') && ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == '' )) {                        $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = 'None';                    } else {                        if (! (($criteria[$i] == 'Key') && (($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')))                        ) {                            $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = $source_columns[$matching_table_index][$column_name][$criteria[$i]];                        }                    }                }            }        } else {            $add_column_array[$matching_table_index][$column_name]= $column_name;        }    }    //Finds column names that are present in target table but not in source table    foreach ($target_columns[$matching_table_index] as $fld_name => $each_column) {        if (! (isset($source_columns[$matching_table_index][$fld_name]['Field']))) {            $fields_uncommon[] = $fld_name;        }        if ($target_columns[$matching_table_index][$fld_name]['Key'] == 'PRI') {            $keys[] = $fld_name;        }    }    if (isset($fields_uncommon)) {        $uncommon_columns[$matching_table_index] = $fields_uncommon;    }    if (isset($keys)) {        $target_tables_keys[$matching_table_index] = $keys;    }}/** * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $matching_tables         names of matching tables * @param array  $source_columns          columns information of the source tables * @param array  &$add_column_array       the names of the column(field) that are to be added in the target * @param array  $matching_tables_fields * @param array  $criteria                criteria * @param array  $matching_tables_keys    field names which is key in the source table * @param array  $target_tables_keys      field names which is key in the target table * @param array  $uncommon_tables         table names that are present in source db and not in target db * @param array  &$uncommon_tables_fields names of the fields of the uncommon tables * @param int    $table_counter           number of the matching table * @param array  $uncommon_cols * @param bool   $display */function PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, &$add_column_array, $matching_tables_fields,         $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $table_counter, $uncommon_cols, $display){    for ($i = 0; $i < sizeof($matching_tables_fields[$table_counter]); $i++) {        if (isset($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]])) {            $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]). " ADD COLUMN " .            PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . " " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Type'];            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'NO') {                $query .= ' Not Null ';            } elseif ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'YES') {                $query .= ' Null ';            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'] != '') {                $query .= ' COLLATE ' . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'] != '') {                $query .= " DEFAULT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'] != '') {                $query .= " COMMENT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Key'] == 'PRI' ) {                $trg_key_size = sizeof($target_tables_keys[$table_counter]);                if ($trg_key_size) {                    $check = true;                    for ($a = 0; ($a < $trg_key_size) && ($check); $a++) {                        if (! (in_array($target_tables_keys[$table_counter], $uncommon_cols))) {                             $check = false;                        }                    }                    if (! $check) {                        $query .= " ,DROP PRIMARY KEY " ;                    }                }                $query .= " , ADD PRIMARY KEY (";                for ($t = 0; $t < sizeof($matching_tables_keys[$table_counter]); $t++) {                    $query .= PMA_backquote($matching_tables_keys[$table_counter][$t]);                    if ($t < (sizeof($matching_tables_keys[$table_counter]) - 1)) {                        $query .= " , " ;                    }                }                $query .= ")";            }            $query .= ";";            if ($display == true) {                echo '<p>' . $query . '</p>';            }            PMA_DBI_try_query($query, $trg_link, 0);            //Checks if column to be added is a foreign key or not            $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"            . $matching_tables[$table_counter] . "' AND COLUMN_NAME ='" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] .            "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);            //If column is a foreign key then it is checked that referenced table exist in target db. If referenced table does not exist in target db then            //it is created first.            if (isset($is_fk_result)) {                if (in_array($is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[0]['REFERENCED_TABLE_NAME']);                    PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables, $uncommon_tables_fields, $display);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }                $fk_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]) .                            "ADD CONSTRAINT FOREIGN KEY " . PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . "                            (" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] . ") REFERENCES " . PMA_backquote($trg_db) .                             '.' . PMA_backquote($is_fk_result[0]['REFERENCED_TABLE_NAME']) . " (" . $is_fk_result[0]['REFERENCED_COLUMN_NAME'] . ");";                PMA_DBI_try_query($fk_query, $trg_link, null);            }        }    }}/** * PMA_checkForeignKeys() checks if the referenced table have foreign keys. * uses    PMA_createTargetTables() * * @param string $src_db                  name of source database * @param mixed  $src_link                connection established with source server * @param string $trg_db                  name of target database * @param mixed  $trg_link                connection established with target server * @param string $referenced_table        table whose column is a foreign key in another table * @param array  &$uncommon_tables        names that are uncommon * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $referenced_table, &$uncommon_tables, &$uncommon_tables_fields, $display){    $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                    AND TABLE_NAME = '" . $referenced_table . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";    $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);    if (sizeof($is_fk_result) > 0) {        for ($j = 0; $j < sizeof($is_fk_result); $j++) {            if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                PMA_checkForeignKeys(                    $src_db, $src_link, $trg_db, $trg_link, $is_fk_result[$j]['REFERENCED_TABLE_NAME'],                    $uncommon_tables, $uncommon_tables_fields, $display                );                PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                unset($uncommon_tables[$table_index[0]]);            }        }    }}/** * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array * * @param string $trg_db                 name of target database * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source table * @param array  &$alter_str_array       column name and criteria which is to be altered for the targert table * @param array  $matching_tables_fields name of the fields for the matching table * @param array  $criteria               criteria * @param array  &$matching_tables_keys  field names which is key in the source table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table * @param bool   $display */function PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables, &$source_columns, &$alter_str_array, $matching_tables_fields, $criteria, &$matching_tables_keys, &$target_tables_keys, $matching_table_index, $display){    $check = true;    $sql_query = '';    $found = false;    //Checks if the criteria to be altered is primary key    for ($v = 0; $v < sizeof($matching_tables_fields[$matching_table_index]); $v++) {        if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'])) {            if ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'] == 'PRI' ) {                $check = false;            }        }    }    $pri_query = null;    if (! $check) {        $pri_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);        if (sizeof($target_tables_keys[$matching_table_index]) > 0) {            $pri_query .= "  DROP PRIMARY KEY ," ;        }        $pri_query .= "  ADD PRIMARY KEY (";        for ($z = 0; $z < sizeof($matching_tables_keys[$matching_table_index]); $z++) {            $pri_query .= PMA_backquote($matching_tables_keys[$matching_table_index][$z]);            if ($z < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $pri_query .= " , " ;            }        }        $pri_query .= ");";    }    if (isset($pri_query)) {        if ($display == true) {            echo '<p>' . $pri_query . '</p>';        }        PMA_DBI_try_query($pri_query, $trg_link, 0);    }    for ($t = 0; $t < sizeof($matching_tables_fields[$matching_table_index]); $t++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]])) && (sizeof($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]) > 0)) {            $sql_query = 'ALTER TABLE ' . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]) . ' MODIFY ' .            PMA_backquote($matching_tables_fields[$matching_table_index][$t]) . ' ' . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'];            $found = false;            for ($i = 0; $i < sizeof($criteria); $i++) {                if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]]) && $criteria[$i] != 'Key') {                    $found = true;                    if (($criteria[$i] == 'Type') && (! isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i+1]]))) {                        if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'NO') {                            $sql_query .= " Not Null" ;                        } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'YES') {                            $sql_query .= " Null" ;                        }                    }                    if (($criteria[$i] == 'Null') && ( $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'NO')) {                        $sql_query .= " Not Null "  ;                    } elseif (($criteria[$i] == 'Null') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'YES')) {                        $sql_query .= " Null "  ;                    }                    if ($criteria[$i] == 'Collation') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COLLATE " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] ;                    }                    if (($criteria[$i] == 'Default') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'None')) {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                    } elseif ($criteria[$i] == 'Default') {                        if (! (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        if (is_string($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] != 'timestamp') {                                $sql_query .=  " DEFAULT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'";                            } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] == 'timestamp') {                                $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                            }                        } elseif (is_numeric($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                        }                    }                    if ($criteria[$i] == 'Comment') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COMMENT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'" ;                    }                }            }        }        $sql_query .= ";";        if ($found) {            if ($display == true) {                echo '<p>' . $sql_query . '</p>';            }            PMA_DBI_try_query($sql_query, $trg_link, 0);        }    }    $check = false;    $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);    for ($p = 0; $p < sizeof($matching_tables_keys[$matching_table_index]); $p++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_keys[$matching_table_index][$p]]['Key']))) {            $check = true;            $query .= ' MODIFY ' . PMA_backquote($matching_tables_keys[$matching_table_index][$p]) . ' '            . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$p]]['Type'] . ' Not Null ';            if ($p < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $query .= ', ';            }        }    }    $query .= ';';    if ($check) {        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }}/** * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table. * * @param string $trg_db           name of target database * @param mixed  $trg_link         connection established with target server * @param array  $matching_tables  names of matching tables * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table * @param int    $table_counter    index of the matching table as in $matchiing_tables array * @param bool   $display */function PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_counter, $display){    if (isset($uncommon_columns[$table_counter])) {        $drop_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($uncommon_columns[$table_counter]); $a++) {            //Checks if column to be removed is a foreign key in any table            $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                         AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_counter]."' AND REFERENCED_COLUMN_NAME = '"                         . $uncommon_columns[$table_counter][$a] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);            $result_size = sizeof($pk_query_result);            if ($result_size > 0) {                for ($b = 0; $b < $result_size; $b++) {                    $drop_pk_query = "ALTER TABLE " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . "                                      DROP FOREIGN KEY " . PMA_backquote($pk_query_result[$b]['CONSTRAINT_NAME']) . ", DROP COLUMN " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . ";";                    PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                }            }            $query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"                     . $matching_tables[$table_counter]. "' AND COLUMN_NAME = '" . $uncommon_columns[$table_counter][$a] . "'                      AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $result = PMA_DBI_fetch_result($query, null, null, $trg_link);            if (sizeof($result) > 0) {                $drop_query .= " DROP FOREIGN KEY " . PMA_backquote($result[0]['CONSTRAINT_NAME']) . ",";            }            $drop_query .=  " DROP COLUMN " . PMA_backquote($uncommon_columns[$table_counter][$a]);            if ($a < (sizeof($uncommon_columns[$table_counter]) - 1)) {                $drop_query .= " , " ;            }        }        $drop_query .= ";" ;        if ($display == true) {            echo '<p>' . $drop_query . '</p>';        }        PMA_DBI_try_query($drop_query, $trg_link, 0);    }}/** * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array. * Only keyname and uniqueness characteristic of the indexes are altered. * * @param string $src_db                name of source database * @param string $trg_db                name of target database * @param mixed  $src_link              connection established with source server * @param mixed  $trg_link              connection established with target server * @param array  $matching_tables       matching tables name * @param array  &$source_indexes       indexes of the source table * @param array  &$target_indexes       indexes of the target table * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table * @param array  &$alter_indexes_array  key name which needs to be altered * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table * @param int    $table_counter         number of the matching table */function PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$remove_indexes_array, $table_counter){    //Gets indexes information for source and target table    $source_indexes[$table_counter] = PMA_DBI_get_table_indexes($src_db, $matching_tables[$table_counter], $src_link);    $target_indexes[$table_counter] = PMA_DBI_get_table_indexes($trg_db, $matching_tables[$table_counter], $trg_link);    for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {        $found = false;        $z = 0;        //Compares key name and non_unique characteristic of source indexes with target indexes        /*         * @todo compare the length of each sub part         */        while (($z <= sizeof($target_indexes[$table_counter])) && ($found == false)) {            if (isset($source_indexes[$table_counter][$a]) && isset($target_indexes[$table_counter][$z]) && $source_indexes[$table_counter][$a]['Key_name'] == $target_indexes[$table_counter][$z]['Key_name']) {                $found = true;                if (($source_indexes[$table_counter][$a]['Column_name'] != $target_indexes[$table_counter][$z]['Column_name']) || ($source_indexes[$table_counter][$a]['Non_unique'] != $target_indexes[$table_counter][$z]['Non_unique'])) {                    if (! (($source_indexes[$table_counter][$a]['Key_name'] == "PRIMARY") || ($target_indexes[$table_counter][$z]['Key_name'] == 'PRIMARY'))) {                        $alter_indexes_array[$table_counter][] = $source_indexes[$table_counter][$a]['Key_name'];                    }                }            }            $z++;        }        if ($found === false) {            if (! ($source_indexes[$table_counter][$a]['Key_name'] == 'PRIMARY')) {                $add_indexes_array [$table_counter][] = $source_indexes[$table_counter][$a]['Column_name'];            }        }    }    //Finds indexes that exist on target table but not on source table    for ($b = 0; $b < sizeof($target_indexes[$table_counter]); $b++) {        $found = false;        $c = 0;        while (($c <= sizeof($source_indexes[$table_counter])) && ($found == false)) {            if ($target_indexes[$table_counter][$b]['Column_name'] == $source_indexes[$table_counter][$c]['Column_name']) {                $found = true;            }            $c++;        }        if ($found === false) {            $remove_indexes_array[$table_counter][] = $target_indexes[$table_counter][$b]['Key_name'];        }    }}/** * PMA_applyIndexesDiff() create indexes, alters indexes and remove indexes. * * @param string $trg_db               name of target database * @param mixed  $trg_link             connection established with target server * @param array  $matching_tables      matching tables name * @param array  $source_indexes       indexes of the source table * @param array  $target_indexes       indexes of the target table * @param array  $add_indexes_array    column names on which indexes are to be created in target table * @param array  $alter_indexes_array  column names for which indexes are to be altered * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table * @param int    $table_counter        number of the matching table * @param $display */function PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array, $alter_indexes_array,          $remove_indexes_array, $table_counter, $display){    //Adds indexes on target table    if (isset($add_indexes_array[$table_counter])) {        $sql = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]) . " ADD" ;        for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {            if (isset($add_indexes_array[$table_counter][$a])) {                for ($b = 0; $b < sizeof($source_indexes[$table_counter]); $b++) {                    if ($source_indexes[$table_counter][$b]['Column_name'] == $add_indexes_array[$table_counter][$a]) {                        if ($source_indexes[$table_counter][$b]['Non_unique'] == '0') {                            $sql .= " UNIQUE ";                        }                        $sql .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$b]['Key_name']) . " (" . $add_indexes_array[$table_counter][$a] . " );";                        if ($display == true) {                            echo '<p>' . $sql . '</p>';                        }                        PMA_DBI_try_query($sql, $trg_link, 0);                    }                }            }        }    }    //Alter indexes of target table    if (isset($alter_indexes_array[$table_counter])) {        $query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($alter_indexes_array[$table_counter]); $a++) {            if (isset($alter_indexes_array[$table_counter][$a])) {                $query .= ' DROP INDEX ' . PMA_backquote($alter_indexes_array[$table_counter][$a]) . " , ADD ";                $got_first_index_column = false;                for ($z = 0; $z < sizeof($source_indexes[$table_counter]); $z++) {                    if ($source_indexes[$table_counter][$z]['Key_name'] == $alter_indexes_array[$table_counter][$a]) {                        if (! $got_first_index_column) {                            if ($source_indexes[$table_counter][$z]['Non_unique'] == '0') {                                $query .= " UNIQUE ";                            }                            $query .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$z]['Key_name']) . " (" . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                            $got_first_index_column = true;                        } else {                            // another column for this index                            $query .= ', ' . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                        }                    }                }                $query .= " )";            }        }        $query .= ';';        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }    //Removes indexes from target table    if (isset($remove_indexes_array[$table_counter])) {        $drop_index_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($target_indexes[$table_counter]); $a++) {            if (isset($remove_indexes_array[$table_counter][$a])) {                $drop_index_query .= " DROP INDEX " . PMA_backquote($remove_indexes_array[$table_counter][$a]);            }            if ($a < (sizeof($remove_indexes_array[$table_counter]) - 1)) {                $drop_index_query .= " , " ;            }        }        $drop_index_query .= " ; " ;        if ($display == true) {            echo '<p>' . $drop_index_query . '</p>';        }        PMA_DBI_try_query($drop_index_query, $trg_link, 0);    }}/** * PMA_displayQuery() displays a query, taking the maximum display size * into account * * @param string $query the query to display * * @return nothing */function PMA_displayQuery($query){    if (strlen($query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        $query = substr($query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';    }    echo '<p>' . htmlspecialchars($query) . '</p>';}/** * PMA_syncDisplayHeaderCompare() shows the header for source database * * @param string $src_db source db name * @param string $trg_db target db name * * @return nothing */function PMA_syncDisplayHeaderCompare($src_db, $trg_db){    echo '<fieldset style="padding:0"><div style="padding:1.5em; overflow:auto; height:220px">';    echo '<table class="data">';    echo '<tr>';    echo '<th>' . __('Source database') . ':  ' . htmlspecialchars($src_db) . '<br />(';    if ('cur' == $_SESSION['src_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['src_server']['host']);    }    echo ')</th>';    echo '<th>' . __('Difference') . '</th>';    echo '<th>' . __('Target database') . ':  '. htmlspecialchars($trg_db) . '<br />(';    if ('cur' == $_SESSION['trg_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['trg_server']['host']);    }    echo ')</th>';    echo '</tr>';}/** * Prints table row * * $rows contains following keys: * - src_table_name - source server table name * - dst_table_name - target server table name * - btn_type - 'M' or 'U' * - btn_structure - null or arguments for showDetails in server_synchronize.js (without img_obj and table_name): *                       i, update_size, insert_size, remove_size, insert_index, remove_index * * @param array $rows */function PMA_syncDisplayDataCompare($rows){    global $pmaThemeImage;    $odd_row = true;    foreach ($rows as $row) {        echo '<tr class=" ' . ($odd_row ? 'odd' : 'even') . '">';        echo '<td>' . htmlspecialchars($row['src_table_name']) . '</td><td style="text-align:center">';        if (isset($row['btn_structure']) && $row['btn_structure']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_structure'];            $p[0] = $row['btn_type'] . 'S' . $p[0];            echo '<img class="icon struct_img" src="' . $pmaThemeImage . 'new_struct.png" width="16" height="16"                 alt="Structure" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                 . "'" . implode($p, "','") . "'"                 . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" /> ';        }        if (isset($row['btn_data']) && $row['btn_data']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_data'];            $p[0] = $row['btn_type'] . 'D' . $p[0];            echo '<img class="icon data_img" src="' . $pmaThemeImage . 'new_data.png" width="16" height="16"                alt="Data" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                . "'" . implode($p, "','") . "'"                . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" />';        }        echo '</td><td>' . htmlspecialchars($row['dst_table_name']) . '</td></tr>';        $odd_row = !$odd_row;    }}/** * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null) * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of the column to retrieve data from * @param mixed  $link     mysql link resource * * @return array $field_values */function PMA_get_column_values($database, $table, $column, $link = null){    $query = 'SELECT ';    for ($i=0; $i< sizeof($column); $i++) {        $query.= PMA_backquote($column[$i]);        if ($i < (sizeof($column)-1)) {            $query.= ', ';        }    }    $query.= ' FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    $field_values = PMA_DBI_fetch_result($query, null, null, $link);    if (! is_array($field_values) || count($field_values) < 1) {        return false;    }    return $field_values;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin * * @todo    add an option for handling NULL values * @package PhpMyAdmin-Import * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}$analyze = false;if ($plugin_param !== 'table') {    $analyze = true;}if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns separated with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated with:'), 'size' => 2),            ),        'options_text' => __('Options'),        );    if ($plugin_param !== 'table') {        $plugin_list['csv']['options'][]            = array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>'));    } else {        $hint = new PMA_Message(__('If the data in each row of the file is not in the same order as in the database, list the corresponding column names here. Column names must be separated by commas and not enclosed in quotations.'));        $plugin_list['csv']['options'][]            = array('type' => 'text', 'name' => 'columns', 'text' => __('Column names: ') . PMA_showHint($hint));    }    $plugin_list['csv']['options'][] = array('type' => 'end_group');    /* We do not define function when plugin is just queried for information above */    return;}$replacements = array(    '\\n'   => "\n",    '\\t'   => "\t",    '\\r'   => "\r",    );$csv_terminated = strtr($csv_terminated, $replacements);$csv_enclosed = strtr($csv_enclosed,  $replacements);$csv_escaped = strtr($csv_escaped, $replacements);$csv_new_line = strtr($csv_new_line, $replacements);$param_error = false;if (strlen($csv_terminated) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns terminated by'), false);    $error = true;    $param_error = true;    // The default dialog of MS Excel when generating a CSV produces a    // semi-colon-separated file with no chance of specifying the    // enclosing character. Thus, users who want to import this file    // tend to remove the enclosing character on the Import dialog.    // I could not find a test case where having no enclosing characters    // confuses this script.    // But the parser won't work correctly with strings so we allow just    // one character.} elseif (strlen($csv_enclosed) > 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns enclosed by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_escaped) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns escaped by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_new_line) != 1 && $csv_new_line != 'auto') {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Lines terminated by'), false);    $error = true;    $param_error = true;}// If there is an error in the parameters entered, indicate that immediately.if ($param_error) {    PMA_mysqlDie($message->getMessage(), '', '', $err_url);}$buffer = '';$required_fields = 0;if (!$analyze) {    if (isset($csv_replace)) {        $sql_template = 'REPLACE';    } else {        $sql_template = 'INSERT';        if (isset($csv_ignore)) {            $sql_template .= ' IGNORE';        }    }    $sql_template .= ' INTO ' . PMA_backquote($table);    $tmp_fields = PMA_DBI_get_columns($db, $table);    if (empty($csv_columns)) {        $fields = $tmp_fields;    } else {        $sql_template .= ' (';        $fields = array();        $tmp   = preg_split('/,( ?)/', $csv_columns);        foreach ($tmp as $key => $val) {            if (count($fields) > 0) {                $sql_template .= ', ';            }            /* Trim also `, if user already included backquoted fields */            $val = trim($val, " \t\r\n\0\x0B`");            $found = false;            foreach ($tmp_fields as $id => $field) {                if ($field['Field'] == $val) {                    $found = true;                    break;                }            }            if (!$found) {                $message = PMA_Message::error(__('Invalid column (%s) specified! Ensure that columns names are spelled correctly, separated by commas, and not enclosed in quotes.'));                $message->addParam($val);                $error = true;                break;            }            $fields[] = $field;            $sql_template .= PMA_backquote($val);        }        $sql_template .= ') ';    }    $required_fields = count($fields);    $sql_template .= ' VALUES (';}// Defaults for parser$i = 0;$len = 0;$line = 1;$lasti = -1;$values = array();$csv_finish = false;$tempRow = array();$rows = array();$col_names = array();$tables = array();$col_count = 0;$max_cols = 0;while (!($finished && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        unset($data);        // Do not parse string when we're not at the end and don't have new line inside        if (($csv_new_line == 'auto' && strpos($buffer, "\r") === false && strpos($buffer, "\n") === false)            || ($csv_new_line != 'auto' && strpos($buffer, $csv_new_line) === false)        ) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Currently parsed char    $ch = $buffer[$i];    while ($i < $len) {        // Deadlock protection        if ($lasti == $i && $lastlen == $len) {            $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));            $message->addParam($line);            $error = true;            break;        }        $lasti = $i;        $lastlen = $len;        // This can happen with auto EOL and \r at the end of buffer        if (!$csv_finish) {            // Grab empty field            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    break;                }                $values[] = '';                $i++;                $ch = $buffer[$i];                continue;            }            // Grab one field            $fallbacki = $i;            if ($ch == $csv_enclosed) {                if ($i == $len - 1) {                    break;                }                $need_end = true;                $i++;                $ch = $buffer[$i];            } else {                $need_end = false;            }            $fail = false;            $value = '';            while (($need_end && ($ch != $csv_enclosed || $csv_enclosed == $csv_escaped))             || (!$need_end && !($ch == $csv_terminated               || $ch == $csv_new_line || ($csv_new_line == 'auto'                && ($ch == "\r" || $ch == "\n"))))) {                if ($ch == $csv_escaped) {                    if ($i == $len - 1) {                        $fail = true;                        break;                    }                    $i++;                    $ch = $buffer[$i];                    if ($csv_enclosed == $csv_escaped && ($ch == $csv_terminated                     || $ch == $csv_new_line || ($csv_new_line == 'auto'                      && ($ch == "\r" || $ch == "\n")))) {                        break;                    }                }                $value .= $ch;                if ($i == $len - 1) {                    if (!$finished) {                        $fail = true;                    }                    break;                }                $i++;                $ch = $buffer[$i];            }            // unquoted NULL string            if (false === $need_end && $value === 'NULL') {                $value = null;            }            if ($fail) {                $i = $fallbacki;                $ch = $buffer[$i];                break;            }            // Need to strip trailing enclosing char?            if ($need_end && $ch == $csv_enclosed) {                if ($finished && $i == $len - 1) {                    $ch = null;                } elseif ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                } else {                    $i++;                    $ch = $buffer[$i];                }            }            // Are we at the end?            if ($ch == $csv_new_line                || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))                || ($finished && $i == $len - 1)            ) {                $csv_finish = true;            }            // Go to next char            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                }                $i++;                $ch = $buffer[$i];            }            // If everything went okay, store value            $values[] = $value;        }        // End of line        if ($csv_finish            || $ch == $csv_new_line            || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))        ) {            if ($csv_new_line == 'auto' && $ch == "\r") { // Handle "\r\n"                if ($i >= ($len - 2) && !$finished) {                    break; // We need more data to decide new line                }                if ($buffer[$i + 1] == "\n") {                    $i++;                }            }            // We didn't parse value till the end of line, so there was empty one            if (!$csv_finish) {                $values[] = '';            }            if ($analyze) {                foreach ($values as $ley => $val) {                    $tempRow[] = $val;                    ++$col_count;                }                if ($col_count > $max_cols) {                    $max_cols = $col_count;                }                $col_count = 0;                $rows[] = $tempRow;                $tempRow = array();            } else {                // Do we have correct count of values?                if (count($values) != $required_fields) {                    // Hack for excel                    if ($values[count($values) - 1] == ';') {                        unset($values[count($values) - 1]);                    } else {                        $message = PMA_Message::error(__('Invalid column count in CSV input on line %d.'));                        $message->addParam($line);                        $error = true;                        break;                    }                }                $first = true;                $sql = $sql_template;                foreach ($values as $key => $val) {                    if (!$first) {                        $sql .= ', ';                    }                    if ($val === null) {                        $sql .= 'NULL';                    } else {                        $sql .= '\'' . PMA_sqlAddSlashes($val) . '\'';                    }                    $first = false;                }                $sql .= ')';                /**                 * @todo maybe we could add original line to verbose SQL in comment                 */                PMA_importRunQuery($sql, $sql);            }            $line++;            $csv_finish = false;            $values = array();            $buffer = substr($buffer, $i + 1);            $len = strlen($buffer);            $i = 0;            $lasti = -1;            $ch = $buffer[0];        }    } // End of parser loop} // End of import loopif ($analyze) {    /* Fill out all rows */    $num_rows = count($rows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($rows[$i]); $j < $max_cols; ++$j) {            $rows[$i][] = 'NULL';        }    }    if (isset($_REQUEST['csv_col_names'])) {        $col_names = array_splice($rows, 0, 1);        $col_names = $col_names[0];    }    if ((isset($col_names) && count($col_names) != $max_cols)        || ! isset($col_names)    ) {        // Fill out column names        for ($i = 0; $i < $max_cols; ++$i) {            $col_names[] = 'COL '.($i+1);        }    }    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $tbl_name = 'TABLE '.(count($result) + 1);    } else {        $tbl_name = 'TBL_NAME';    }    $tables[] = array($tbl_name, $col_names, $rows);    /* Obtain the best-fit MySQL types for each column */    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    /**     * string $db_name (no backquotes)     *     * array $table = array(table_name, array() column_names, array()() rows)     * array $tables = array of "$table"s     *     * array $analysis = array(array() column_types, array() column_sizes)     * array $analyses = array of "$analysis"s     *     * array $create = array of SQL strings     *     * array $options = an associative array of options     */    /* Set database name to the currently selected one, if applicable */    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'CSV_DB';        $options = null;    }    /* Non-applicable parameters */    $create = null;    /* Created and execute necessary SQL statements from data */    PMA_buildSQL($db_name, $tables, $analyses, $create, $options);    unset($tables);    unset($analyses);}// Commit any possible data in buffersPMA_importRunQuery();if (count($values) != 0 && !$error) {    $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));    $message->addParam($line);    $error = true;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Alter one or more table columns * * linked from table_structure, uses libraries/tbl_properties.inc.php to display * form and handles this form data * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Gets tables informations */require_once './libraries/tbl_common.php';require_once './libraries/tbl_info.inc.php';$active_page = 'tbl_structure.php';/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);/** * Modifications have been submitted -> updates the table */$abort = false;if (isset($_REQUEST['do_save_data'])) {    $field_cnt = count($_REQUEST['field_orig']);    $key_fields = array();    $changes = array();    for ($i = 0; $i < $field_cnt; $i++) {        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(            $_REQUEST['field_orig'][$i],            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $key_fields,            $i,            $_REQUEST['field_default_orig'][$i]        );    } // end for    // Builds the primary keys statements and updates the table    $key_query = '';    /**     * this is a little bit more complex     *     * @todo if someone selects A_I when altering a column we need to check:     *  - no other column with A_I     *  - the column has an index, if not create one     *    if (count($key_fields)) {        $fields = array();        foreach ($key_fields as $each_field) {            if (isset($_REQUEST['field_name'][$each_field]) && strlen($_REQUEST['field_name'][$each_field])) {                $fields[] = PMA_backquote($_REQUEST['field_name'][$each_field]);            }        } // end for        $key_query = ', ADD KEY (' . implode(', ', $fields) . ') ';    }     */    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_DBI_getError(), 'USE ' . PMA_backquote($db) . ';', '', $err_url);    $sql_query = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $changes) . $key_query;    $result    = PMA_DBI_try_query($sql_query);    if ($result !== false) {        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        $btnDrop = 'Fake';        /**         * If comments were sent, enable relation stuff         */        include_once './libraries/transformations.lib.php';        // updaet field names in relation        if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {            foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {                if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {                    PMA_REL_renameField($db, $table, $fieldcontent,                        $_REQUEST['field_name'][$fieldindex]);                }            }        }        // update mime types        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table, $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        if (isset($_REQUEST['orig_field'])) {            $_REQUEST['field'] = $_REQUEST['orig_field'];        }        $regenerate = true;    }}/** * No modifications yet required -> displays the table fields * * $selected comes from multi_submits.inc.php */if ($abort == false) {    if ($_REQUEST['ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    if (! isset($selected)) {        PMA_checkParameters(array('field'));        $selected[]   = $_REQUEST['field'];        $selected_cnt = 1;    } else { // from a multiple submit        $selected_cnt = count($selected);    }    /**     * @todo optimize in case of multiple fields to modify     */    for ($i = 0; $i < $selected_cnt; $i++) {        $fields_meta[] = PMA_DBI_get_columns($db, $table, $selected[$i], true);    }    $num_fields  = count($fields_meta);    $action      = 'tbl_alter.php';    // Get more complete field information.    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options    // and to know when there is an empty DEFAULT value.    // Later, if the analyser returns more information, it    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.    /**     * @todo put this code into a require()     * or maybe make it part of PMA_DBI_get_columns();     */    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25).    $show_create_table = PMA_DBI_fetch_value('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    unset($show_create_table);    /**     * Form for changing properties.     */    include './libraries/tbl_properties.inc.php';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * TCPDF wrapper class. */require_once './libraries/tcpdf/tcpdf.php';/** * PDF font to use. */define('PMA_PDF_FONT', 'DejaVuSans');/** * PDF export base class providing basic configuration. */class PMA_PDF extends TCPDF{    var $footerset;    var $Alias = array();    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false)    {        parent::__construct();        $this->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $this->AliasNbPages();        $this->AddFont('DejaVuSans', '', 'dejavusans.php');        $this->AddFont('DejaVuSans', 'B', 'dejavusansb.php');        $this->SetFont(PMA_PDF_FONT, '', 14);        $this->setFooterFont(array(PMA_PDF_FONT, '', 14));    }    /**     * This function must be named "Footer" to work with the TCPDF library     */    function Footer()    {        // Check if footer for this page already exists        if (!isset($this->footerset[$this->page])) {            $this->SetY(-15);            $this->SetFont(PMA_PDF_FONT, '', 14);            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');            $this->Cell(0, 6, PMA_localisedDate(), 0, 1, 'R');            $this->SetY(20);            // set footerset            $this->footerset[$this->page] = 1;        }    }    /**     * Function to set alias which will be expanded on page rendering.     */    function SetAlias($name, $value)    {        $this->Alias[$this->UTF8ToUTF16BE($name)] = $this->UTF8ToUTF16BE($value);    }    /**     * Improved with alias expading.     */    function _putpages()    {        if (count($this->Alias) > 0) {            $nb = count($this->pages);            for ($n = 1;$n <= $nb;$n++) {                $this->pages[$n] = strtr($this->pages[$n], $this->Alias);            }        }        parent::_putpages();    }    /**     * Displays an error message     *     * @param string $error_message the error mesage     */    function Error($error_message = '')    {        include './libraries/header.inc.php';        PMA_Message::error(__('Error while creating PDF:') . ' ' . $error_message)->display();        include './libraries/footer.inc.php';    }    /**     * Sends file as a download to user.     */    function Download($filename)    {        $pdfData = $this->getPDFData();        PMA_download_header($filename, 'application/pdf', strlen($pdfData));        echo $pdfData;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * File for vendor customisation, you can change here paths or some behaviour, * which vendors such as Linux distibutions might want to change. * * For changing this file you should know what you are doing. For this reason * options here are not part of normal configuration. * * @package PhpMyAdmin *//** * Path to changelog file, can be gzip compressed. Useful when you want to * have documentation somewhere else, eg. /usr/share/doc. */define('CHANGELOG_FILE', './ChangeLog');/** * Path to license file. Useful when you want to have documentation somewhere * else, eg. /usr/share/doc. */define('LICENSE_FILE', './LICENSE');/** * Path to config file generated using setup script. */define('SETUP_CONFIG_FILE', './config/config.inc.php');/** * Whether setup requires writable directory where config * file will be generated. */define('SETUP_DIR_WRITABLE', true);/** * Directory where configuration files are stored. * It is not used directly in code, just a convenient * define used further in this file. */define('CONFIG_DIR', './');/** * Filename of a configuration file. */define('CONFIG_FILE', CONFIG_DIR . 'config.inc.php');/** * Filename of custom header file. */define('CUSTOM_HEADER_FILE', CONFIG_DIR . 'config.header.inc.php');/** * Filename of custom footer file. */define('CUSTOM_FOOTER_FILE', CONFIG_DIR . 'config.footer.inc.php');/** * Default value for check for version upgrades. */define('VERSION_CHECK_DEFAULT', true);/** * Path to gettext.inc file. Useful when you want php-gettext somewhere else, * eg. /usr/share/php/gettext/gettext.inc. */define('GETTEXT_INC', './libraries/php-gettext/gettext.inc');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class is inherited by all schema classes * It contains those methods which are common in them * it works like factory pattern */class PMA_Export_Relation_Schema{    private $_pageTitle;    public $showGrid;    public $showColor;    public $tableDimension;    public $sameWide;    public $withDoc;    public $showKeys;    public $orientation;    public $paper;    public $pageNumber;    /**     * Set Page Number     *     * @param integer $value Page Number of the document to be created     *     * @return void     *     * @access public     */    public function setPageNumber($value)    {        $this->pageNumber = isset($value) ? $value : 1;    }    /**     * Set Show Grid     *     * @param boolean $value show grid of the document or not     *     * @return void     *     * @access public     */    public function setShowGrid($value)    {        $this->showGrid = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Sets showColor     *     * @param string $value 'on' to set the the variable     *     * @return nothing     */    public function setShowColor($value)    {        $this->showColor = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Table Dimension     *     * @param boolean $value show table co-ordinates or not     *     * @return void     *     * @access public     */    public function setTableDimension($value)    {        $this->tableDimension = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set same width of All Tables     *     * @param boolean $value set same width of all tables or not     *     * @return void     *     * @access public     */    public function setAllTableSameWidth($value)    {        $this->sameWide = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Data Dictionary     *     * @param boolean $value show selected database data dictionary or not     *     * @return void     *     * @access public     */    public function setWithDataDictionary($value)    {        $this->withDoc = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Show only keys     *     * @param boolean $value show only keys or not     *     * @return void     *     * @access public     */    public function setShowKeys($value)    {        $this->showKeys = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Orientation     *     * @param string $value Orientation will be portrait or landscape     *     * @return void     *     * @access public     */    public function setOrientation($value)    {        $this->orientation = (isset($value) && $value == 'P') ? 'P' : 'L';    }    /**     * Set type of paper     *     * @param string $value paper type can be A4 etc     *     * @return void     *     * @access public     */    public function setPaper($value)    {        $this->paper = isset($value) ? $value : 'A4';    }    /**     * Set title of the page     *     * @param string $title title of the page displayed at top of the document     *     * @return void     *     * @access public     */    public function setPageTitle($title)    {        $this->_pageTitle=$title;    }    /**     * Set type of export relational schema     *     * @param string $value can be pdf,svg,dia,visio,eps etc     *     * @return void     *     * @access public     */    public function setExportType($value)    {        $this->exportType=$value;    }    /**     * get all tables involved or included in page     *     * @param string  $db         name of the database     * @param integer $pageNumber page no. whose tables will be fetched in an array     *     * @return Array an array of tables     *     * @access public     */    public function getAllTables($db, $pageNumber)    {        global $cfgRelation;         // Get All tables        $tab_sql = 'SELECT table_name FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND pdf_page_number = ' . $pageNumber;        $tab_rs = PMA_query_as_controluser($tab_sql, null, PMA_DBI_QUERY_STORE);        if (!$tab_rs || !PMA_DBI_num_rows($tab_rs) > 0) {            $this->dieSchema('', __('This page does not contain any tables!'));        }        while ($curr_table = @PMA_DBI_fetch_assoc($tab_rs)) {            $alltables[] = PMA_sqlAddSlashes($curr_table['table_name']);        }        return $alltables;    }    /**     * Displays an error message     *     * @param integer $pageNumber    ID of the chosen page     * @param string  $type          Schema Type     * @param string  $error_message The error mesage     *     * @global array    the PMA configuration array     * @global string   the current database name     *     * @access public     *     * @return void     */    function dieSchema($pageNumber, $type = '', $error_message = '')    {        global $cfg;        global $db;        include_once './libraries/header.inc.php';        echo "<p><strong>" . __("SCHEMA ERROR: ") .  $type . "</strong></p>" . "\n";        if (!empty($error_message)) {            $error_message = htmlspecialchars($error_message);        }        echo '<p>' . "\n";        echo '    ' . $error_message . "\n";        echo '</p>' . "\n";        echo '<a href="schema_edit.php?' . PMA_generate_common_url($db)            . '&do=selectpage&chpage=' . $pageNumber . '&action_choose=0'            . '">' . __('Back') . '</a>';        echo "\n";        include_once './libraries/footer.inc.php';        exit();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_binlog extends PMA_StorageEngine{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'binary-log';    }}?>
<?php/*   Copyright (c) 2003, 2005, 2006, 2009 Danilo Segan <danilo@kvota.net>.   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/  // Simple class to wrap file streams, string streams, etc.  // seek is essential, and it should be byte streamclass StreamReader {  // should return a string [FIXME: perhaps return array of bytes?]  function read($bytes) {    return false;  }  // should return new position  function seekto($position) {    return false;  }  // returns current position  function currentpos() {    return false;  }  // returns length of entire stream (limit for seekto()s)  function length() {    return false;  }};class StringReader {  var $_pos;  var $_str;  function StringReader($str='') {    $this->_str = $str;    $this->_pos = 0;  }  function read($bytes) {    $data = substr($this->_str, $this->_pos, $bytes);    $this->_pos += $bytes;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $data;  }  function seekto($pos) {    $this->_pos = $pos;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return strlen($this->_str);  }};class FileReader {  var $_pos;  var $_fd;  var $_length;  function FileReader($filename) {    if (file_exists($filename)) {      $this->_length=filesize($filename);      $this->_pos = 0;      $this->_fd = fopen($filename,'rb');      if (!$this->_fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }    } else {      $this->error = 2; // File doesn't exist      return false;    }  }  function read($bytes) {    if ($bytes) {      fseek($this->_fd, $this->_pos);      // PHP 5.1.1 does not read more than 8192 bytes in one fread()      // the discussions at PHP Bugs suggest it's the intended behaviour      $data = '';      while ($bytes > 0) {        $chunk  = fread($this->_fd, $bytes);        $data  .= $chunk;        $bytes -= strlen($chunk);      }      $this->_pos = ftell($this->_fd);      return $data;    } else return '';  }  function seekto($pos) {    fseek($this->_fd, $pos);    $this->_pos = ftell($this->_fd);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return $this->_length;  }  function close() {    fclose($this->_fd);  }};// Preloads entire file in memory first, then creates a StringReader// over it (it assumes knowledge of StringReader internals)class CachedFileReader extends StringReader {  function CachedFileReader($filename) {    if (file_exists($filename)) {      $length=filesize($filename);      $fd = fopen($filename,'rb');      if (!$fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }      $this->_str = fread($fd, $length);      fclose($fd);    } else {      $this->error = 2; // File doesn't exist      return false;    }  }};?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the work and runs some other scripts if required */if (! empty($submit_mult) && $submit_mult != __('With selected:') && (! empty($selected_db)  || ! empty($selected_tbl)  || ! empty($selected_fld)  || ! empty($rows_to_delete))) {    define('PMA_SUBMIT_MULT', 1);    if (isset($selected_db) && !empty($selected_db)) {        // coming from server database view - do something with selected databases        $selected     = $selected_db;        $what         = 'drop_db';    } elseif (isset($selected_tbl) && !empty($selected_tbl)) {        // coming from database structure view - do something with selected tables        if ($submit_mult == 'print') {            include './tbl_printview.php';        } else {           $selected = $selected_tbl;           switch ($submit_mult) {               case 'add_prefix_tbl':               case 'replace_prefix_tbl':               case 'copy_tbl_change_prefix':               case 'drop_db':               case 'drop_tbl':               case 'empty_tbl':                   $what = $submit_mult;                   break;               case 'check_tbl':               case 'optimize_tbl':               case 'repair_tbl':               case 'analyze_tbl':                   $query_type = $submit_mult;                   unset($submit_mult);                   $mult_btn   = __('Yes');                   break;               case 'export':                   unset($submit_mult);                   include 'db_export.php';                   exit;                   break;           } // end switch        }    } elseif (isset($selected_fld) && !empty($selected_fld)) {        // coming from table structure view - do something with selected columns/fileds        $selected     = $selected_fld;        switch ($submit_mult) {            case 'drop':                $what     = 'drop_fld';                break;            case 'primary':                // Gets table primary key                PMA_DBI_select_db($db);                $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');                $primary     = '';                while ($row = PMA_DBI_fetch_assoc($result)) {                    // Backups the list of primary keys                    if ($row['Key_name'] == 'PRIMARY') {                        $primary .= $row['Column_name'] . ', ';                    }                } // end while                PMA_DBI_free_result($result);                if (empty($primary)) {                    // no primary key, so we can safely create new                    unset($submit_mult);                    $query_type = 'primary_fld';                    $mult_btn   = __('Yes');                } else {                    // primary key exists, so lets as user                    $what = 'primary_fld';                }                break;            case 'index':                unset($submit_mult);                $query_type = 'index_fld';                $mult_btn   = __('Yes');                break;            case 'unique':                unset($submit_mult);                $query_type = 'unique_fld';                $mult_btn   = __('Yes');                break;            case 'spatial':                unset($submit_mult);                $query_type = 'spatial_fld';                $mult_btn   = __('Yes');                break;            case 'ftext':                unset($submit_mult);                $query_type = 'fulltext_fld';                $mult_btn   = __('Yes');                break;            case 'change':                include './tbl_alter.php';                break;            case 'browse':                // this should already be handled by tbl_structure.php        }    } else {        // coming from browsing - do something with selected rows        $what = 'row_delete';        $selected = $rows_to_delete;    }} // end if/** * Displays the confirmation form if required */if (!empty($submit_mult) && !empty($what)) {    unset($message);    include_once './libraries/header.inc.php';    if (strlen($table)) {        include './libraries/tbl_common.php';        $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';        include './libraries/tbl_info.inc.php';        include_once './libraries/tbl_links.inc.php';    } elseif (strlen($db)) {        include './libraries/db_common.inc.php';        include './libraries/db_info.inc.php';    } else {        include_once './libraries/server_common.inc.php';        include_once './libraries/server_links.inc.php';    }    // Builds the query    $full_query     = '';    if ($what == 'drop_tbl') {        $full_query_views = '';    }    $selected_cnt   = count($selected);    $i = 0;    foreach ($selected AS $idx => $sval) {        switch ($what) {            case 'row_delete':                $full_query .= htmlspecialchars($sval)                    . ';<br />';                break;            case 'drop_db':                $full_query .= 'DROP DATABASE '                    . PMA_backquote(htmlspecialchars($sval))                    . ';<br />';                $reload = 1;                break;            case 'drop_tbl':                $current = $sval;                if (!empty($views) && in_array($current, $views)) {                    $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                } else {                    $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                }                break;            case 'empty_tbl':                $full_query .= 'TRUNCATE ';                $full_query .= PMA_backquote(htmlspecialchars($sval))                            . ';<br />';                break;            case 'primary_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table))                        . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'                        . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('                        . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                } else {                    $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                }                if ($i == $selected_cnt-1) {                    $full_query = preg_replace('@,$@', ');<br />', $full_query);                }                break;            case 'drop_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table));                }                $full_query .= '<br />&nbsp;&nbsp;DROP '                    . PMA_backquote(htmlspecialchars($sval))                    . ',';                if ($i == $selected_cnt - 1) {                    $full_query = preg_replace('@,$@', ';<br />', $full_query);                }                break;        } // end switch        $i++;    }    if ($what == 'drop_tbl') {        if (!empty($full_query)) {            $full_query .= ';<br />' . "\n";        }        if (!empty($full_query_views)) {            $full_query .= $full_query_views . ';<br />' . "\n";        }        unset($full_query_views);    }    // Displays the confirmation form    $_url_params = array(        'query_type' => $what,        'reload' => (! empty($reload) ? 1 : 0),    );    if (strpos(' ' . $action, 'db_') == 1) {        $_url_params['db']= $db;    } elseif (strpos(' ' . $action, 'tbl_') == 1 || $what == 'row_delete') {        $_url_params['db']= $db;        $_url_params['table']= $table;    }    foreach ($selected as $idx => $sval) {        $_url_params['selected'][] = $sval;    }    if ($what == 'drop_tbl' && !empty($views)) {        foreach ($views as $current) {            $_url_params['views'][] = $current;       }    }    if ($what == 'row_delete') {        $_url_params['original_sql_query'] = $original_sql_query;        if (! empty($original_url_query)) {            $_url_params['original_url_query'] = $original_url_query;        }    }    ?><form action="<?php echo $action; ?>" method="post">    <?php    echo PMA_generate_common_hidden_inputs($_url_params);    ?><?php if ($what == 'replace_prefix_tbl' || $what == 'copy_tbl_change_prefix') { ?>        <fieldset class = "input">                <legend><?php echo ($what == 'replace_prefix_tbl' ? __('Replace table prefix') : __('Copy table with prefix')) ?>:</legend>                <table>                <tr>                <td><?php echo __('From'); ?></td><td><input type="text" name="from_prefix" id="initialPrefix"</td>                </tr>                <tr>                <td><?php echo __('To'); ?> </td><td><input type="text" name="to_prefix" id="newPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } elseif ($what == 'add_prefix_tbl') { ?>        <fieldset class = "input">                <legend><?php echo __('Add table prefix') ?>:</legend>                <table>                <tr>                <td><?php echo __('Add prefix'); ?></td>     <td><input type="text" name="add_prefix" id="txtPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } else { ?>    <fieldset class="confirmation">        <legend><?php echo ($what == 'drop_db' ? __('You are about to DESTROY a complete database!') . '&nbsp;' : '') . __('Do you really want to '); ?>:</legend>        <tt><?php echo $full_query; ?></tt>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes" />        <input type="submit" name="mult_btn" value="<?php echo __('No'); ?>" id="buttonNo" />    </fieldset>    <?php    }    include './libraries/footer.inc.php';} elseif ($mult_btn == __('Yes')) {/** * Executes the query - dropping rows, columns/fields, tables or dbs */    if ($query_type == 'drop_db' || $query_type == 'drop_tbl' || $query_type == 'drop_fld') {        include_once './libraries/relation_cleanup.lib.php';    }    $sql_query      = '';    if ($query_type == 'drop_tbl') {        $sql_query_views = '';    }    $selected_cnt   = count($selected);    $run_parts      = false; // whether to run query after each pass    $use_sql        = false; // whether to include sql.php at the end (to display results)    if ($query_type == 'primary_fld') {        // Gets table primary key        PMA_DBI_select_db($db);        $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');        $primary     = '';        while ($row = PMA_DBI_fetch_assoc($result)) {            // Backups the list of primary keys            if ($row['Key_name'] == 'PRIMARY') {                $primary .= $row['Column_name'] . ', ';            }        } // end while        PMA_DBI_free_result($result);    }    $rebuild_database_list = false;    for ($i = 0; $i < $selected_cnt; $i++) {        switch ($query_type) {            case 'row_delete':                $a_query = $selected[$i];                $run_parts = true;                break;            case 'drop_db':                PMA_relationsCleanupDatabase($selected[$i]);                $a_query   = 'DROP DATABASE '                           . PMA_backquote($selected[$i]);                $reload    = 1;                $run_parts = true;                $rebuild_database_list = true;                break;            case 'drop_tbl':                PMA_relationsCleanupTable($db, $selected[$i]);                $current = $selected[$i];                if (!empty($views) && in_array($current, $views)) {                    $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')                              . PMA_backquote($current);                } else {                    $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')                               . PMA_backquote($current);                }                $reload    = 1;                break;            case 'check_tbl':                $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'optimize_tbl':                $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'analyze_tbl':                $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'repair_tbl':                $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'empty_tbl':                $a_query = 'TRUNCATE ';                $a_query .= PMA_backquote($selected[$i]);                $run_parts = true;                break;            case 'drop_fld':                PMA_relationsCleanupColumn($db, $table, $selected[$i]);                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) : ',')                           . ' DROP ' . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ';' : '');                break;            case 'primary_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . (empty($primary) ? '' : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'index_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'unique_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'spatial_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'fulltext_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;        case 'add_prefix_tbl':                $newtablename = $add_prefix . $selected[$i];                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // ADD PREFIX TO TABLE NAME                $run_parts = true;                break;            case 'replace_prefix_tbl':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // CHANGE PREFIX PATTERN                $run_parts = true;                break;            case 'copy_tbl_change_prefix':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'CREATE TABLE ' . PMA_backquote($newtablename) . ' SELECT * FROM ' . PMA_backquote($selected[$i]) ; // COPY TABLE AND CHANGE PREFIX PATTERN                $run_parts = true;                break;        } // end switch        // All "DROP TABLE", "DROP FIELD", "OPTIMIZE TABLE" and "REPAIR TABLE"        // statements will be run at once below        if ($run_parts) {            $sql_query .= $a_query . ';' . "\n";            if ($query_type != 'drop_db') {                PMA_DBI_select_db($db);            }            $result = PMA_DBI_query($a_query);        } // end if    } // end for    if ($query_type == 'drop_tbl') {        if (!empty($sql_query)) {        $sql_query .= ';';    } elseif (!empty($sql_query_views)) {        $sql_query = $sql_query_views . ';';            unset($sql_query_views);        }    }    if ($use_sql) {        include './sql.php';    } elseif (!$run_parts) {        PMA_DBI_select_db($db);        $result = PMA_DBI_try_query($sql_query);        if ($result && !empty($sql_query_views)) {            $sql_query .= ' ' . $sql_query_views . ';';            $result = PMA_DBI_try_query($sql_query_views);            unset($sql_query_views);        }        if (! $result) {            $message = PMA_Message::error(PMA_DBI_getError());        }    }    if ($rebuild_database_list) {        // avoid a problem with the database list navigator        // when dropping a db from server_databases        $GLOBALS['pma']->databases->build();    }} else {    $message = PMA_Message::success(__('No change'));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$die_save_pos = 0;require_once 'pmd_save_pos.php';extract($_POST, EXTR_SKIP);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);// native foreign keyif (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // relation exists?    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2])     && isset($existrel_foreign[$F2]['constraint'])) {         PMD_return_new(0, __('Error: relation already exists.'));    }// note: in InnoDB, the index does not requires to be on a PRIMARY// or UNIQUE key// improve: check all other requirements for InnoDB relations    $result      = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T1) . ';');    $index_array1   = array(); // will be use to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array1[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    $result     = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T2) . ';');    $index_array2  = array(); // will be used to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array2[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    if (! empty($index_array1[$F1]) && ! empty($index_array2[$F2])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                 . ' ADD FOREIGN KEY ('                 . PMA_backquote($F2) . ')'                 . ' REFERENCES '                 . PMA_backquote($db) . '.'                 . PMA_backquote($T1) . '('                 . PMA_backquote($F1) . ')';        if ($on_delete != 'nix') {            $upd_query   .= ' ON DELETE ' . $on_delete;        }        if ($on_update != 'nix') {            $upd_query   .= ' ON UPDATE ' . $on_update;        }        PMA_DBI_try_query($upd_query) or PMD_return_new(0, __('Error: Relation not added.'));    PMD_return_new(1, __('FOREIGN KEY relation added'));    }// internal (pmadb) relation} else {    if ($GLOBALS['cfgRelation']['relwork'] == false) {        PMD_return_new(0, _('General relation features') . ':' . _('Disabled'));    } else {        // no need to recheck if the keys are primary or unique at this point,        // this was checked on the interface part        $q  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T2) . '\', '                            . '\'' . PMA_sqlAddSlashes($F2) . '\', '                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T1) . '\','                            . '\'' . PMA_sqlAddSlashes($F1) . '\')';        if (PMA_query_as_controluser($q, false, PMA_DBI_QUERY_STORE)) {            PMD_return_new(1, __('Internal relation added'));        } else {            PMD_return_new(0, __('Error: Relation not added.'));        }   }}function PMD_return_new($b,$ret){    global $db,$T1,$F1,$T2,$F2;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_new" return="'.$ret.'" b="'.$b.    '" DB1="'.urlencode($db).    '" T1="'.urlencode($T1).    '" F1="'.urlencode($F1).    '" DB2="'.urlencode($db).    '" T2="'.urlencode($T2).    '" F2="'.urlencode($F2).    '"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Messages for phpMyAdmin. * * This file defines variables in a special format suited for the * configuration subsystem, with $strConfig as a prefix, _desc or _name * as a suffix, and the directive name in between. * * @package PhpMyAdmin */if (!function_exists('__')) {    die('Bad invocation!');}$strConfigAjaxEnable_desc = __('Improves efficiency of screen refresh');$strConfigAjaxEnable_name = __('Enable Ajax');$strConfigAllowArbitraryServer_desc = __('If enabled user can enter any MySQL server in login form for cookie auth');$strConfigAllowArbitraryServer_name = __('Allow login to any MySQL server');$strConfigAllowThirdPartyFraming_desc = __('Enabling this allows a page located on a different domain to call phpMyAdmin inside a frame, and is a potential [strong]security hole[/strong] allowing cross-frame scripting attacks');$strConfigAllowThirdPartyFraming_name = __('Allow third party framing');$strConfigAllowUserDropDatabase_name = __('Show &quot;Drop database&quot; link to normal users');$strConfigblowfish_secret_desc = __('Secret passphrase used for encrypting cookies in [kbd]cookie[/kbd] authentication');$strConfigblowfish_secret_name = __('Blowfish secret');$strConfigBrowseMarkerEnable_desc = __('Highlight selected rows');$strConfigBrowseMarkerEnable_name = __('Row marker');$strConfigBrowsePointerEnable_desc = __('Highlight row pointed by the mouse cursor');$strConfigBrowsePointerEnable_name = __('Highlight pointer');$strConfigBZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Bzip2]bzip2[/a] compression for import and export operations');$strConfigBZipDump_name = __('Bzip2');$strConfigCharEditing_desc = __('Defines which type of editing controls should be used for CHAR and VARCHAR columns; [kbd]input[/kbd] - allows limiting of input length, [kbd]textarea[/kbd] - allows newlines in columns');$strConfigCharEditing_name = __('CHAR columns editing');$strConfigMinSizeForInputField_desc = __('Defines the minimum size for input fields generated for CHAR and VARCHAR columns');$strConfigMinSizeForInputField_name = __('Minimum size for input field');$strConfigMaxSizeForInputField_desc = __('Defines the maximum size for input fields generated for CHAR and VARCHAR columns');$strConfigMaxSizeForInputField_name = __('Maximum size for input field');$strConfigCharTextareaCols_desc = __('Number of columns for CHAR/VARCHAR textareas');$strConfigCharTextareaCols_name = __('CHAR textarea columns');$strConfigCharTextareaRows_desc = __('Number of rows for CHAR/VARCHAR textareas');$strConfigCharTextareaRows_name = __('CHAR textarea rows');$strConfigCheckConfigurationPermissions_name = __('Check config file permissions');$strConfigCompressOnFly_desc = __('Compress gzip/bzip2 exports on the fly without the need for much memory; if you encounter problems with created gzip/bzip2 files disable this feature');$strConfigCompressOnFly_name = __('Compress on the fly');$strConfigConfigurationFile = __('Configuration file');$strConfigConfirm_desc = __('Whether a warning (&quot;Are your really sure...&quot;) should be displayed when you\'re about to lose data');$strConfigConfirm_name = __('Confirm DROP queries');$strConfigDBG_sql_name = __('Debug SQL');$strConfigDefaultDisplay_name = __('Default display direction');$strConfigDefaultTabDatabase_desc = __('Tab that is displayed when entering a database');$strConfigDefaultTabDatabase_name = __('Default database tab');$strConfigDefaultTabServer_desc = __('Tab that is displayed when entering a server');$strConfigDefaultTabServer_name = __('Default server tab');$strConfigDefaultTabTable_desc = __('Tab that is displayed when entering a table');$strConfigDefaultTabTable_name = __('Default table tab');$strConfigDisplayBinaryAsHex_desc = __('Show binary contents as HEX by default');$strConfigDisplayBinaryAsHex_name = __('Show binary contents as HEX');$strConfigDisplayDatabasesList_desc = __('Show database listing as a list instead of a drop down');$strConfigDisplayDatabasesList_name = __('Display databases as a list');$strConfigDisplayServersList_desc = __('Show server listing as a list instead of a drop down');$strConfigDisplayServersList_name = __('Display servers as a list');$strConfigDisableMultiTableMaintenance_desc = __('Disable the table maintenance mass operations, like optimizing or repairing the selected tables of a database.');$strConfigDisableMultiTableMaintenance_name = __('Disable multi table maintenance');$strConfigEditInWindow_desc = __('Edit SQL queries in popup window');$strConfigEditInWindow_name = __('Edit in window');$strConfigError_Handler_display_name = __('Display errors');$strConfigError_Handler_gather_name = __('Gather errors');$strConfigErrorIconic_desc = __('Show icons for warning, error and information messages');$strConfigErrorIconic_name = __('Iconic errors');$strConfigExecTimeLimit_desc = __('Set the number of seconds a script is allowed to run ([kbd]0[/kbd] for no limit)');$strConfigExecTimeLimit_name = __('Maximum execution time');$strConfigExport_asfile_name = __('Save as file');$strConfigExport_charset_name = __('Character set of the file');$strConfigExport_codegen_format_name = __('Format');$strConfigExport_compression_name = __('Compression');$strConfigExport_csv_columns_name = __('Put columns names in the first row');$strConfigExport_csv_enclosed_name = __('Columns enclosed by');$strConfigExport_csv_escaped_name = __('Columns escaped by');$strConfigExport_csv_null_name = __('Replace NULL by');$strConfigExport_csv_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_csv_separator_name = __('Columns terminated by');$strConfigExport_csv_terminated_name = __('Lines terminated by');$strConfigExport_excel_columns_name = __('Put columns names in the first row');$strConfigExport_excel_edition_name = __('Excel edition');$strConfigExport_excel_null_name = __('Replace NULL by');$strConfigExport_excel_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_file_template_database_name = __('Database name template');$strConfigExport_file_template_server_name = __('Server name template');$strConfigExport_file_template_table_name = __('Table name template');$strConfigExport_format_name = __('Format');$strConfigExport_htmlword_columns_name = __('Put columns names in the first row');$strConfigExport_htmlword_null_name = __('Replace NULL by');$strConfigExport_htmlword_structure_or_data_name = __('Dump table');$strConfigExport_latex_caption_name = __('Include table caption');$strConfigExport_latex_columns_name = __('Put columns names in the first row');$strConfigExport_latex_comments_name = __('Comments');$strConfigExport_latex_data_caption_name = __('Table caption');$strConfigExport_latex_data_continued_caption_name = __('Continued table caption');$strConfigExport_latex_data_label_name = __('Label key');$strConfigExport_latex_mime_name = __('MIME type');$strConfigExport_latex_null_name  = __('Replace NULL by');$strConfigExport_latex_relation_name = __('Relations');$strConfigExport_latex_structure_caption_name = __('Table caption');$strConfigExport_latex_structure_continued_caption_name = __('Continued table caption');$strConfigExport_latex_structure_label_name = __('Label key');$strConfigExport_latex_structure_or_data_name = __('Dump table');$strConfigExport_method_name = __('Export method');$strConfigExport_ods_columns_name = __('Put columns names in the first row');$strConfigExport_ods_null_name = __('Replace NULL by');$strConfigExport_odt_columns_name = __('Put columns names in the first row');$strConfigExport_odt_comments_name = __('Comments');$strConfigExport_odt_mime_name = __('MIME type');$strConfigExport_odt_null_name = __('Replace NULL by');$strConfigExport_odt_relation_name = __('Relations');$strConfigExport_odt_structure_or_data_name = __('Dump table');$strConfigExport_onserver_name = __('Save on server');$strConfigExport_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_quick_export_onserver_name = __('Save on server');$strConfigExport_quick_export_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_remember_file_template_name = __('Remember file name template');$strConfigExport_sql_auto_increment_name = __('Add AUTO_INCREMENT value');$strConfigExport_sql_backquotes_name = __('Enclose table and column names with backquotes');$strConfigExport_sql_compatibility_name = __('SQL compatibility mode');$strConfigExport_sql_create_table_statements_name = __('<code>CREATE TABLE</code> options:');$strConfigExport_sql_dates_name = __('Creation/Update/Check dates');$strConfigExport_sql_delayed_name = __('Use delayed inserts');$strConfigExport_sql_disable_fk_name = __('Disable foreign key checks');$strConfigExport_sql_drop_database_name = sprintf(__('Add %s'), 'DROP DATABASE');$strConfigExport_sql_drop_table_name = sprintf(__('Add %s'), 'DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_hex_for_blob_name = __('Use hexadecimal for BLOB');$strConfigExport_sql_if_not_exists_name = sprintf(__('Add %s'), 'IF NOT EXISTS');$strConfigExport_sql_ignore_name = __('Use ignore inserts');$strConfigExport_sql_include_comments_name = __('Comments');$strConfigExport_sql_insert_syntax_name = __('Syntax to use when inserting data');$strConfigExport_sql_max_query_size_name = __('Maximal length of created query');$strConfigExport_sql_mime_name = __('MIME type');$strConfigExport_sql_procedure_function_name = sprintf(__('Add %s'), 'CREATE PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_relation_name = __('Relations');$strConfigExport_sql_structure_or_data_name = __('Dump table');$strConfigExport_sql_type_name = __('Export type');$strConfigExport_sql_use_transaction_name = __('Enclose export in a transaction');$strConfigExport_sql_utc_time_name = __('Export time in UTC');$strConfigExport_texytext_columns_name = __('Put columns names in the first row');$strConfigExport_texytext_null_name = __('Replace NULL by');$strConfigExport_texytext_structure_or_data_name = __('Dump table');$strConfigExport_xls_columns_name = __('Put columns names in the first row');$strConfigExport_xls_null_name = __('Replace NULL by');$strConfigExport_xlsx_columns_name = __('Put columns names in the first row');$strConfigExport_xlsx_null_name = __('Replace NULL by');$strConfigForceSSL_desc = __('Force secured connection while using phpMyAdmin');$strConfigForceSSL_name = __('Force SSL connection');$strConfigForeignKeyDropdownOrder_desc = __('Sort order for items in a foreign-key dropdown box; [kbd]content[/kbd] is the referenced data, [kbd]id[/kbd] is the key value');$strConfigForeignKeyDropdownOrder_name = __('Foreign key dropdown order');$strConfigForeignKeyMaxLimit_desc = __('A dropdown will be used if fewer items are present');$strConfigForeignKeyMaxLimit_name = __('Foreign key limit');$strConfigForm_Browse = __('Browse mode');$strConfigForm_Browse_desc = __('Customize browse mode');$strConfigForm_CodeGen = 'CodeGen';$strConfigForm_CodeGen_desc = __('Customize default options');$strConfigForm_Csv = __('CSV');$strConfigForm_Csv_desc = __('Customize default options');$strConfigForm_Developer = __('Developer');$strConfigForm_Developer_desc = __('Settings for phpMyAdmin developers');$strConfigForm_Edit = __('Edit mode');$strConfigForm_Edit_desc = __('Customize edit mode');$strConfigForm_Export = __('Export');$strConfigForm_Export_defaults = __('Export defaults');$strConfigForm_Export_defaults_desc = __('Customize default export options');$strConfigForm_Features = __('Features');$strConfigForm_General = __('General');$strConfigForm_General_desc = __('Set some commonly used options');$strConfigForm_Import = __('Import');$strConfigForm_Import_defaults = __('Import defaults');$strConfigForm_Import_defaults_desc = __('Customize default common import options');$strConfigForm_Import_export = __('Import / export');$strConfigForm_Import_export_desc = __('Set import and export directories and compression options');$strConfigForm_Latex = __('LaTeX');$strConfigForm_Latex_desc = __('Customize default options');$strConfigForm_Left_databases = __('Databases');$strConfigForm_Left_databases_desc = __('Databases display options');$strConfigForm_Left_frame = __('Navigation frame');$strConfigForm_Left_frame_desc = __('Customize appearance of the navigation frame');$strConfigForm_Left_servers = __('Servers');$strConfigForm_Left_servers_desc = __('Servers display options');$strConfigForm_Left_tables = __('Tables');$strConfigForm_Left_tables_desc = __('Tables display options');$strConfigForm_Main_frame = __('Main frame');$strConfigForm_Microsoft_Office = __('Microsoft Office');$strConfigForm_Microsoft_Office_desc = __('Customize default options');$strConfigForm_Open_Document = __('Open Document');$strConfigForm_Open_Document_desc = __('Customize default options');$strConfigForm_Other_core_settings = __('Other core settings');$strConfigForm_Other_core_settings_desc = __('Settings that didn\'t fit enywhere else');$strConfigForm_Page_titles = __('Page titles');$strConfigForm_Page_titles_desc = __('Specify browser\'s title bar text. Refer to [a@Documentation.html#cfg_TitleTable]documentation[/a] for magic strings that can be used to get special values.');$strConfigForm_Query_window = __('Query window');$strConfigForm_Query_window_desc = __('Customize query window options');$strConfigForm_Security = __('Security');$strConfigForm_Security_desc = __('Please note that phpMyAdmin is just a user interface and its features do not limit MySQL');$strConfigForm_Server = __('Basic settings');$strConfigForm_Server_auth = __('Authentication');$strConfigForm_Server_auth_desc = __('Authentication settings');$strConfigForm_Server_config = __('Server configuration');$strConfigForm_Server_config_desc = __('Advanced server configuration, do not change these options unless you know what they are for');$strConfigForm_Server_desc = __('Enter server connection parameters');$strConfigForm_Server_pmadb = __('Configuration storage');$strConfigForm_Server_pmadb_desc = __('Configure phpMyAdmin configuration storage to gain access to additional features, see [a@Documentation.html#linked-tables]phpMyAdmin configuration storage[/a] in documentation');$strConfigForm_Server_tracking = __('Changes tracking');$strConfigForm_Server_tracking_desc = __('Tracking of changes made in database. Requires the phpMyAdmin configuration storage.');$strConfigFormset_Export = __('Customize export options');$strConfigFormset_Features = __('Features');$strConfigFormset_Import = __('Customize import defaults');$strConfigFormset_Left_frame = __('Customize navigation frame');$strConfigFormset_Main_frame = __('Customize main frame');$strConfigFormset_Sql_queries = __('SQL queries');$strConfigForm_Sql = __('SQL');$strConfigForm_Sql_box = __('SQL Query box');$strConfigForm_Sql_box_desc = __('Customize links shown in SQL Query boxes');$strConfigForm_Sql_desc = __('Customize default options');$strConfigForm_Sql_queries = __('SQL queries');$strConfigForm_Sql_queries_desc = __('SQL queries settings');$strConfigForm_Sql_validator = __('SQL Validator');$strConfigForm_Sql_validator_desc = __('If you wish to use the SQL Validator service, you should be aware that [strong]all SQL statements are stored anonymously for statistical purposes[/strong].[br][em][a@http://sqlvalidator.mimer.com/]Mimer SQL Validator[/a], Copyright 2002 Upright Database Technology. All rights reserved.[/em]');$strConfigForm_Startup = __('Startup');$strConfigForm_Startup_desc = __('Customize startup page');$strConfigForm_Tabs = __('Tabs');$strConfigForm_Tabs_desc = __('Choose how you want tabs to work');$strConfigForm_Text_fields = __('Text fields');$strConfigForm_Text_fields_desc = __('Customize text input fields');$strConfigForm_Texy = __('Texy! text');$strConfigForm_Texy_desc = __('Customize default options');$strConfigForm_Warnings = __('Warnings');$strConfigForm_Warnings_desc = __('Disable some of the warnings shown by phpMyAdmin');$strConfigGZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Gzip]gzip[/a] compression for import and export operations');$strConfigGZipDump_name = __('GZip');$strConfigIconvExtraParams_name = __('Extra parameters for iconv');$strConfigIgnoreMultiSubmitErrors_desc = __('If enabled, phpMyAdmin continues computing multiple-statement queries even if one of the queries failed');$strConfigIgnoreMultiSubmitErrors_name = __('Ignore multiple statement errors');$strConfigImport_allow_interrupt_desc = __('Allow interrupt of import in case script detects it is close to time limit. This might be good way to import large files, however it can break transactions.');$strConfigImport_allow_interrupt_name = __('Partial import: allow interrupt');$strConfigImport_charset_name = __('Character set of the file');$strConfigImport_csv_col_names_name = __('Lines terminated by');$strConfigImport_csv_enclosed_name = __('Columns enclosed by');$strConfigImport_csv_escaped_name = __('Columns escaped by');$strConfigImport_csv_ignore_name = __('Do not abort on INSERT error');$strConfigImport_csv_replace_name = __('Replace table data with file');$strConfigImport_csv_terminated_name = __('Columns terminated by');$strConfigImport_format_desc = __('Default format; be aware that this list depends on location (database, table) and only SQL is always available');$strConfigImport_format_name = __('Format of imported file');$strConfigImport_ldi_enclosed_name = __('Columns enclosed by');$strConfigImport_ldi_escaped_name = __('Columns escaped by');$strConfigImport_ldi_ignore_name = __('Do not abort on INSERT error');$strConfigImport_ldi_local_option_name = __('Use LOCAL keyword');$strConfigImport_ldi_replace_name = __('Replace table data with file');$strConfigImport_ldi_terminated_name = __('Columns terminated by');$strConfigImport_ods_col_names_name = __('Column names in first row');$strConfigImport_ods_empty_rows_name = __('Do not import empty rows');$strConfigImport_ods_recognize_currency_name = __('Import currencies ($5.00 to 5.00)');$strConfigImport_ods_recognize_percentages_name = __('Import percentages as proper decimals (12.00% to .12)');$strConfigImport_skip_queries_desc = __('Number of queries to skip from start');$strConfigImport_skip_queries_name = __('Partial import: skip queries');$strConfigImport_sql_compatibility_name = __('SQL compatibility mode');$strConfigImport_sql_no_auto_value_on_zero_name = __('Do not use AUTO_INCREMENT for zero values');$strConfigImport_xls_col_names_name = __('Column names in first row');$strConfigImport_xlsx_col_names_name = __('Column names in first row');$strConfigInitialSlidersState_name = __('Initial state for sliders');$strConfigInsertRows_desc = __('How many rows can be inserted at one time');$strConfigInsertRows_name = __('Number of inserted rows');$strConfigLeftDefaultTabTable_name = __('Target for quick access icon');$strConfigLeftDisplayLogo_desc = __('Show logo in left frame');$strConfigLeftDisplayLogo_name = __('Display logo');$strConfigLeftDisplayServers_desc = __('Display server choice at the top of the left frame');$strConfigLeftDisplayServers_name = __('Display servers selection');$strConfigLeftDisplayTableFilterMinimum_name = __('Minimum number of tables to display the table filter box');$strConfigLeftFrameDBSeparator_desc = __('String that separates databases into different tree levels');$strConfigLeftFrameDBSeparator_name = __('Database tree separator');$strConfigLeftFrameDBTree_desc = __('Only light version; display databases in a tree (determined by the separator defined below)');$strConfigLeftFrameDBTree_name = __('Display databases in a tree');$strConfigLeftFrameLight_desc = __('Disable this if you want to see all databases at once');$strConfigLeftFrameLight_name = __('Use light version');$strConfigLeftFrameTableLevel_name = __('Maximum table tree depth');$strConfigLeftFrameTableSeparator_desc = __('String that separates tables into different tree levels');$strConfigLeftFrameTableSeparator_name = __('Table tree separator');$strConfigLeftLogoLink_desc = __('URL where logo in the navigation frame will point to');$strConfigLeftLogoLink_name = __('Logo link URL');$strConfigLeftLogoLinkWindow_desc = __('Open the linked page in the main window ([kbd]main[/kbd]) or in a new one ([kbd]new[/kbd])');$strConfigLeftLogoLinkWindow_name = __('Logo link target');$strConfigLeftPointerEnable_desc = __('Highlight server under the mouse cursor');$strConfigLeftPointerEnable_name = __('Enable highlighting');$strConfigLeftRecentTable_desc = __('Maximum number of recently used tables; set 0 to disable');$strConfigLeftRecentTable_name = __('Recently used tables');$strConfigLightTabs_desc = __('Use less graphically intense tabs');$strConfigLightTabs_name = __('Light tabs');$strConfigLimitChars_desc = __('Maximum number of characters shown in any non-numeric column on browse view');$strConfigLimitChars_name = __('Limit column characters');$strConfigLoginCookieDeleteAll_desc = __('If TRUE, logout deletes cookies for all servers; when set to FALSE, logout only occurs for the current server. Setting this to FALSE makes it easy to forget to log out from other servers when connected to multiple servers.');$strConfigLoginCookieDeleteAll_name = __('Delete all cookies on logout');$strConfigLoginCookieRecall_desc = __('Define whether the previous login should be recalled or not in cookie authentication mode');$strConfigLoginCookieRecall_name = __('Recall user name');$strConfigLoginCookieStore_desc = __('Defines how long (in seconds) a login cookie should be stored in browser. The default of 0 means that it will be kept for the existing session only, and will be deleted as soon as you close the browser window. This is recommended for non-trusted environments.');$strConfigLoginCookieStore_name = __('Login cookie store');$strConfigLoginCookieValidity_desc = __('Define how long (in seconds) a login cookie is valid');$strConfigLoginCookieValidity_name = __('Login cookie validity');$strConfigLongtextDoubleTextarea_desc = __('Double size of textarea for LONGTEXT columns');$strConfigLongtextDoubleTextarea_name = __('Bigger textarea for LONGTEXT');$strConfigMainPageIconic_name = __('Use icons on main page');$strConfigMaxCharactersInDisplayedSQL_desc = __('Maximum number of characters used when a SQL query is displayed');$strConfigMaxCharactersInDisplayedSQL_name = __('Maximum displayed SQL length');$strConfigMaxDbList_cmt = __('Users cannot set a higher value');$strConfigMaxDbList_desc = __('Maximum number of databases displayed in left frame and database list');$strConfigMaxDbList_name = __('Maximum databases');$strConfigMaxRows_desc = __('Number of rows displayed when browsing a result set. If the result set contains more rows, &quot;Previous&quot; and &quot;Next&quot; links will be shown.');$strConfigMaxRows_name = __('Maximum number of rows to display');$strConfigMaxTableList_cmt = __('Users cannot set a higher value');$strConfigMaxTableList_desc = __('Maximum number of tables displayed in table list');$strConfigMaxTableList_name = __('Maximum tables');$strConfigMcryptDisableWarning_desc = __('Disable the default warning that is displayed if mcrypt is missing for cookie authentication');$strConfigMcryptDisableWarning_name = __('mcrypt warning');$strConfigMemoryLimit_desc = __('The number of bytes a script is allowed to allocate, eg. [kbd]32M[/kbd] ([kbd]0[/kbd] for no limit)');$strConfigMemoryLimit_name = __('Memory limit');$strConfigRowActionLinks_desc = __('These are Edit, Copy and Delete links');$strConfigRowActionLinks_name = __('Where to show the table row links');$strConfigNaturalOrder_desc = __('Use natural order for sorting table and database names');$strConfigNaturalOrder_name = __('Natural order');$strConfigNavigationBarIconic_desc = __('Use only icons, only text or both');$strConfigNavigationBarIconic_name = __('Iconic navigation bar');$strConfigOBGzip_desc = __('use GZip output buffering for increased speed in HTTP transfers');$strConfigOBGzip_name = __('GZip output buffering');$strConfigOrder_desc = __('[kbd]SMART[/kbd] - i.e. descending order for columns of type TIME, DATE, DATETIME and TIMESTAMP, ascending order otherwise');$strConfigOrder_name = __('Default sorting order');$strConfigPersistentConnections_desc = __('Use persistent connections to MySQL databases');$strConfigPersistentConnections_name = __('Persistent connections');$strConfigPmaNoRelation_DisableWarning_desc = __('Disable the default warning that is displayed on the database details Structure page if any of the required tables for the phpMyAdmin configuration storage could not be found');$strConfigPmaNoRelation_DisableWarning_name = __('Missing phpMyAdmin configuration storage tables');$strConfigPropertiesIconic_desc = __('Use only icons, only text or both');$strConfigPropertiesIconic_name = __('Iconic table operations');$strConfigProtectBinary_desc = __('Disallow BLOB and BINARY columns from editing');$strConfigProtectBinary_name = __('Protect binary columns');$strConfigQueryHistoryDB_desc = __('Enable if you want DB-based query history (requires phpMyAdmin configuration storage). If disabled, this utilizes JS-routines to display query history (lost by window close).');$strConfigQueryHistoryDB_name = __('Permanent query history');$strConfigQueryHistoryMax_cmt = __('Users cannot set a higher value');$strConfigQueryHistoryMax_desc = __('How many queries are kept in history');$strConfigQueryHistoryMax_name = __('Query history length');$strConfigQueryWindowDefTab_desc = __('Tab displayed when opening a new query window');$strConfigQueryWindowDefTab_name = __('Default query window tab');$strConfigQueryWindowHeight_desc = __('Query window height (in pixels)');$strConfigQueryWindowHeight_name = __('Query window height');$strConfigQueryWindowWidth_desc = __('Query window width (in pixels)');$strConfigQueryWindowWidth_name = __('Query window width');$strConfigRecodingEngine_desc = __('Select which functions will be used for character set conversion');$strConfigRecodingEngine_name = __('Recoding engine');$strConfigRememberSorting_desc = __('When browsing tables, the sorting of each table is remembered');$strConfigRememberSorting_name = __('Remember table\'s sorting');$strConfigRepeatCells_desc = __('Repeat the headers every X cells, [kbd]0[/kbd] deactivates this feature');$strConfigRepeatCells_name = __('Repeat headers');$strConfigReplaceHelpImg_desc = __('Show help button instead of Documentation text');$strConfigReplaceHelpImg_name = __('Show help button');$strConfigRestoreDefaultValue = __('Restore default value');$strConfigSaveCellsAtOnce_name = __('Save all edited cells at once');$strConfigSaveDir_desc = __('Directory where exports can be saved on server');$strConfigSaveDir_name = __('Save directory');$strConfigServers_AllowDeny_order_desc = __('Leave blank if not used');$strConfigServers_AllowDeny_order_name = __('Host authorization order');$strConfigServers_AllowDeny_rules_desc = __('Leave blank for defaults');$strConfigServers_AllowDeny_rules_name = __('Host authorization rules');$strConfigServers_AllowNoPassword_name = __('Allow logins without a password');$strConfigServers_AllowRoot_name = __('Allow root login');$strConfigServers_auth_http_realm_desc = __('HTTP Basic Auth Realm name to display when doing HTTP Auth');$strConfigServers_auth_http_realm_name = __('HTTP Realm');$strConfigServers_auth_swekey_config_desc = __('The path for the config file for [a@http://swekey.com]SweKey hardware authentication[/a] (not located in your document root; suggested: /etc/swekey.conf)');$strConfigServers_auth_swekey_config_name = __('SweKey config file');$strConfigServers_auth_type_desc = __('Authentication method to use');$strConfigServers_auth_type_name = __('Authentication type');$strConfigServers_bookmarktable_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/bookmark]bookmark[/a] support, suggested: [kbd]pma_bookmark[/kbd]');$strConfigServers_bookmarktable_name = __('Bookmark table');$strConfigServers_column_info_desc = __('Leave blank for no column comments/mime types, suggested: [kbd]pma_column_info[/kbd]');$strConfigServers_column_info_name = __('Column information table');$strConfigServers_compress_desc = __('Compress connection to MySQL server');$strConfigServers_compress_name = __('Compress connection');$strConfigServers_connect_type_desc = __('How to connect to server, keep [kbd]tcp[/kbd] if unsure');$strConfigServers_connect_type_name = __('Connection type');$strConfigServers_controlpass_name = __('Control user password');$strConfigServers_controluser_desc = __('A special MySQL user configured with limited permissions, more information available on [a@http://wiki.phpmyadmin.net/pma/controluser]wiki[/a]');$strConfigServers_controluser_name = __('Control user');$strConfigServers_controlhost_desc = __('An alternate host to hold the configuration storage; leave blank to use the already defined host');$strConfigServers_controlhost_name = __('Control host');$strConfigServers_CountTables_desc = __('Count tables when showing database list');$strConfigServers_CountTables_name = __('Count tables');$strConfigServers_designer_coords_desc = __('Leave blank for no Designer support, suggested: [kbd]pma_designer_coords[/kbd]');$strConfigServers_designer_coords_name = __('Designer table');$strConfigServers_DisableIS_desc = __('More information on [a@http://sf.net/support/tracker.php?aid=1849494]PMA bug tracker[/a] and [a@http://bugs.mysql.com/19588]MySQL Bugs[/a]');$strConfigServers_DisableIS_name = __('Disable use of INFORMATION_SCHEMA');$strConfigServers_extension_desc = __('What PHP extension to use; you should use mysqli if supported');$strConfigServers_extension_name = __('PHP extension to use');$strConfigServers_hide_db_desc = __('Hide databases matching regular expression (PCRE)');$strConfigServers_hide_db_name = __('Hide databases');$strConfigServers_history_desc = __('Leave blank for no SQL query history support, suggested: [kbd]pma_history[/kbd]');$strConfigServers_history_name = __('SQL query history table');$strConfigServers_host_desc = __('Hostname where MySQL server is running');$strConfigServers_host_name = __('Server hostname');$strConfigServers_LogoutURL_name = __('Logout URL');$strConfigServers_MaxTableUiprefs_desc = __('Limits number of table preferences which are stored in database, the oldest records are automatically removed');$strConfigServers_MaxTableUiprefs_name = __('Maximal number of table preferences to store');$strConfigServers_nopassword_desc = __('Try to connect without password');$strConfigServers_nopassword_name = __('Connect without password');$strConfigServers_only_db_desc = __('You can use MySQL wildcard characters (% and _), escape them if you want to use their literal instances, i.e. use [kbd]\'my\_db\'[/kbd] and not [kbd]\'my_db\'[/kbd]. Using this option you can sort database list, just enter their names in order and use [kbd]*[/kbd] at the end to show the rest in alphabetical order.');$strConfigServers_only_db_name = __('Show only listed databases');$strConfigServers_password_desc = __('Leave empty if not using config auth');$strConfigServers_password_name = __('Password for config auth');$strConfigServers_pdf_pages_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_pdf_pages[/kbd]');$strConfigServers_pdf_pages_name = __('PDF schema: pages table');$strConfigServers_pmadb_desc = __('Database used for relations, bookmarks, and PDF features. See [a@http://wiki.phpmyadmin.net/pma/pmadb]pmadb[/a] for complete information. Leave blank for no support. Suggested: [kbd]phpmyadmin[/kbd]');$strConfigServers_pmadb_name = __('Database name');$strConfigServers_port_desc = __('Port on which MySQL server is listening, leave empty for default');$strConfigServers_port_name = __('Server port');$strConfigServers_recent_desc = __('Leave blank for no "persistent" recently used tables across sessions, suggested: [kbd]pma_recent[/kbd]');$strConfigServers_recent_name = __('Recently used table');$strConfigServers_relation_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/relation]relation-links[/a] support, suggested: [kbd]pma_relation[/kbd]');$strConfigServers_relation_name = __('Relation table');$strConfigServers_ShowDatabasesCommand_desc = __('SQL command to fetch available databases');$strConfigServers_ShowDatabasesCommand_name = __('SHOW DATABASES command');$strConfigServers_SignonSession_desc = __('See [a@http://wiki.phpmyadmin.net/pma/auth_types#signon]authentication types[/a] for an example');$strConfigServers_SignonSession_name = __('Signon session name');$strConfigServers_SignonURL_name = __('Signon URL');$strConfigServers_socket_desc = __('Socket on which MySQL server is listening, leave empty for default');$strConfigServers_socket_name = __('Server socket');$strConfigServers_ssl_desc = __('Enable SSL for connection to MySQL server');$strConfigServers_ssl_name = __('Use SSL');$strConfigServers_table_coords_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_table_coords[/kbd]');$strConfigServers_table_coords_name = __('PDF schema: table coordinates');$strConfigServers_table_info_desc = __('Table to describe the display columns, leave blank for no support; suggested: [kbd]pma_table_info[/kbd]');$strConfigServers_table_info_name = __('Display columns table');$strConfigServers_table_uiprefs_desc = __('Leave blank for no "persistent" tables\'UI preferences across sessions, suggested: [kbd]pma_table_uiprefs[/kbd]');$strConfigServers_table_uiprefs_name = __('UI preferences table');$strConfigServers_tracking_add_drop_database_desc = __('Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database.');$strConfigServers_tracking_add_drop_database_name = __('Add DROP DATABASE');$strConfigServers_tracking_add_drop_table_desc = __('Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table.');$strConfigServers_tracking_add_drop_table_name = __('Add DROP TABLE');$strConfigServers_tracking_add_drop_view_desc = __('Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view.');$strConfigServers_tracking_add_drop_view_name = __('Add DROP VIEW');$strConfigServers_tracking_default_statements_desc = __('Defines the list of statements the auto-creation uses for new versions.');$strConfigServers_tracking_default_statements_name = __('Statements to track');$strConfigServers_tracking_desc = __('Leave blank for no SQL query tracking support, suggested: [kbd]pma_tracking[/kbd]');$strConfigServers_tracking_name = __('SQL query tracking table');$strConfigServers_tracking_version_auto_create_desc = __('Whether the tracking mechanism creates versions for tables and views automatically.');$strConfigServers_tracking_version_auto_create_name = __('Automatically create versions');$strConfigServers_userconfig_desc = __('Leave blank for no user preferences storage in database, suggested: [kbd]pma_userconfig[/kbd]');$strConfigServers_userconfig_name = __('User preferences storage table');$strConfigServers_user_desc = __('Leave empty if not using config auth');$strConfigServers_user_name = __('User for config auth');$strConfigServers_verbose_check_desc = __('Disable if you know that your pma_* tables are up to date. This prevents compatibility checks and thereby increases performance');$strConfigServers_verbose_check_name = __('Verbose check');$strConfigServers_verbose_desc = __('A user-friendly description of this server. Leave blank to display the hostname instead.');$strConfigServers_verbose_name = __('Verbose name of this server');$strConfigShowAll_desc = __('Whether a user should be displayed a &quot;show all (rows)&quot; button');$strConfigShowAll_name = __('Allow to display all the rows');$strConfigShowChgPassword_desc = __('Please note that enabling this has no effect with [kbd]config[/kbd] authentication mode because the password is hard coded in the configuration file; this does not limit the ability to execute the same command directly');$strConfigShowChgPassword_name = __('Show password change form');$strConfigShowCreateDb_name = __('Show create database form');$strConfigShowDisplayDirection_desc = __('Defines whether or not type display direction option is shown when browsing a table');$strConfigShowDisplayDirection_name = __('Show display direction');$strConfigShowFieldTypesInDataEditView_desc = __('Defines whether or not type fields should be initially displayed in edit/insert mode');$strConfigShowFieldTypesInDataEditView_name = __('Show field types');$strConfigShowFunctionFields_desc = __('Display the function fields in edit/insert mode');$strConfigShowFunctionFields_name = __('Show function fields');$strConfigShowHint_desc = __('Whether to show hint or not');$strConfigShowHint_name = __('Show hint');$strConfigShowPhpInfo_desc = __('Shows link to [a@http://php.net/manual/function.phpinfo.php]phpinfo()[/a] output');$strConfigShowPhpInfo_name = __('Show phpinfo() link');$strConfigShowServerInfo_name = __('Show detailed MySQL server information');$strConfigShowSQL_desc = __('Defines whether SQL queries generated by phpMyAdmin should be displayed');$strConfigShowSQL_name = __('Show SQL queries');$strConfigRetainQueryBox_desc = __('Defines whether the query box should stay on-screen after its submission');$strConfigRetainQueryBox_name = __('Retain query box');$strConfigShowStats_desc = __('Allow to display database and table statistics (eg. space usage)');$strConfigShowStats_name = __('Show statistics');$strConfigShowTooltipAliasDB_desc = __('If tooltips are enabled and a database comment is set, this will flip the comment and the real name');$strConfigShowTooltipAliasDB_name = __('Display database comment instead of its name');$strConfigShowTooltipAliasTB_desc = __('When setting this to [kbd]nested[/kbd], the alias of the table name is only used to split/nest the tables according to the $cfg[\'LeftFrameTableSeparator\'] directive, so only the folder is called like the alias, the table name itself stays unchanged');$strConfigShowTooltipAliasTB_name = __('Display table comment instead of its name');$strConfigShowTooltip_name = __('Display table comments in tooltips');$strConfigSkipLockedTables_desc = __('Mark used tables and make it possible to show databases with locked tables');$strConfigSkipLockedTables_name = __('Skip locked tables');$strConfigSQLQuery_Edit_name = __('Edit');$strConfigSQLQuery_Explain_name = __('Explain SQL');$strConfigSQLQuery_Refresh_name = __('Refresh');$strConfigSQLQuery_ShowAsPHP_name = __('Create PHP Code');$strConfigSQLQuery_Validate_desc = __('Requires SQL Validator to be enabled');$strConfigSQLQuery_Validate_name = __('Validate SQL');$strConfigSQLValidator_password_name = __('Password');$strConfigSQLValidator_use_desc = __('[strong]Warning:[/strong] requires PHP SOAP extension or PEAR SOAP to be installed');$strConfigSQLValidator_use_name = __('Enable SQL Validator');$strConfigSQLValidator_username_desc = __('If you have a custom username, specify it here (defaults to [kbd]anonymous[/kbd])');$strConfigSQLValidator_username_name = __('Username');$strConfigSuggestDBName_desc = __('Suggest a database name on the &quot;Create Database&quot; form (if possible) or keep the text field empty');$strConfigSuggestDBName_name = __('Suggest new database name');$strConfigSuhosinDisableWarning_desc = __('A warning is displayed on the main page if Suhosin is detected');$strConfigSuhosinDisableWarning_name = __('Suhosin warning');$strConfigTextareaCols_desc = __('Textarea size (columns) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaCols_name = __('Textarea columns');$strConfigTextareaRows_desc = __('Textarea size (rows) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaRows_name = __('Textarea rows');$strConfigTitleDatabase_desc = __('Title of browser window when a database is selected');$strConfigTitleDatabase_name = __('Database');$strConfigTitleDefault_desc = __('Title of browser window when nothing is selected');$strConfigTitleDefault_name = __('Default title');$strConfigTitleServer_desc = __('Title of browser window when a server is selected');$strConfigTitleServer_name = __('Server');$strConfigTitleTable_desc = __('Title of browser window when a table is selected');$strConfigTitleTable_name = __('Table');$strConfigTrustedProxies_desc = __('Input proxies as [kbd]IP: trusted HTTP header[/kbd]. The following example specifies that phpMyAdmin should trust a HTTP_X_FORWARDED_FOR (X-Forwarded-For) header coming from the proxy 1.2.3.4:[br][kbd]1.2.3.4: HTTP_X_FORWARDED_FOR[/kbd]');$strConfigTrustedProxies_name = __('List of trusted proxies for IP allow/deny');$strConfigUploadDir_desc = __('Directory on server where you can upload files for import');$strConfigUploadDir_name = __('Upload directory');$strConfigUseDbSearch_desc = __('Allow for searching inside the entire database');$strConfigUseDbSearch_name = __('Use database search');$strConfigUserprefsDeveloperTab_desc = __('When disabled, users cannot set any of the options below, regardless of the checkbox on the right');$strConfigUserprefsDeveloperTab_name = __('Enable the Developer tab in settings');$strConfigVerboseMultiSubmit_desc = __('Show affected rows of each statement on multiple-statement queries. See libraries/import.lib.php for defaults on how many queries a statement may contain.');$strConfigVerboseMultiSubmit_name = __('Verbose multiple statements');$strConfigVersionCheckLink = __('Check for latest version');$strConfigVersionCheck_desc = __('Enables check for latest version on main phpMyAdmin page');$strConfigVersionCheck_name = __('Version check');$strConfigZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/ZIP_(file_format)]ZIP[/a] compression for import and export operations');$strConfigZipDump_name = __('ZIP');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle field values (possibly uploaded from a file) * * original if-clause checked, whether input was stored in a possible * fields_upload_XX var. Now check, if the field is set. If it is empty or a * malicious file, do not alter fields contents. If an empty or invalid file is * specified, the binary data gets deleter. Maybe a nice new text-variable is * appropriate to document this behaviour. * * security cautions! You could trick the form and submit any file the * webserver has access to for upload to a binary field. Shouldn't be that easy! ;) * * default is to advance to the field-value parsing. Will only be set to * true when a binary file is uploaded, thus bypassing further manipulation of $val. * * note: grab_globals has extracted the fields from _FILES or HTTP_POST_FILES * * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * do not import request variable into global scope */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/File.class.php';$file_to_insert = new PMA_File();$file_to_insert->checkTblChangeForm($key, $rownumber);$possibly_uploaded_val = $file_to_insert->getContent();if ($file_to_insert->isError()) {    $message .= $file_to_insert->getError();}$file_to_insert->cleanUp();if (false !== $possibly_uploaded_val) {    $val = $possibly_uploaded_val;} else {    // f i e l d    v a l u e    i n    t h e    f o r m    if (isset($me_fields_type[$key])) {        $type = $me_fields_type[$key];    } else {        $type = '';    }    // $key contains the md5() of the fieldname    if ($type != 'protected' && $type != 'set' && 0 === strlen($val)) {        // best way to avoid problems in strict mode (works also in non-strict mode)        if (isset($me_auto_increment)  && isset($me_auto_increment[$key])) {            $val = 'NULL';        } else {            $val = "''";        }    } elseif ($type == 'set') {        if (! empty($_REQUEST['fields']['multi_edit'][$rownumber][$key])) {            $val = implode(',', $_REQUEST['fields']['multi_edit'][$rownumber][$key]);            $val = "'" . PMA_sqlAddSlashes($val) . "'";        } else {             $val = "''";        }    } elseif ($type == 'protected') {        // here we are in protected mode (asked in the config)        // so tbl_change has put this special value in the        // fields array, so we do not change the field value        // but we can still handle field upload        // when in UPDATE mode, do not alter field's contents. When in INSERT        // mode, insert empty field because no values were submitted. If protected        // blobs where set, insert original fields content.            if (! empty($prot_row[$me_fields_name[$key]])) {                $val = '0x' . bin2hex($prot_row[$me_fields_name[$key]]);            } else {                $val = '';            }    } elseif ($type == 'bit') {        $val = preg_replace('/[^01]/', '0', $val);        $val = "b'" . PMA_sqlAddSlashes($val) . "'";    } elseif (! (($type == 'datetime' || $type == 'timestamp') && $val == 'CURRENT_TIMESTAMP')) {        $val = "'" . PMA_sqlAddSlashes($val) . "'";    }    // Was the Null checkbox checked for this field?    // (if there is a value, we ignore the Null checkbox: this could    // be possible if Javascript is disabled in the browser)    if (! empty($me_fields_null[$key])     && ($val == "''" || $val == '')) {        $val = 'NULL';    }    // The Null checkbox was unchecked for this field    if (empty($val) && ! empty($me_fields_null_prev[$key]) && ! isset($me_fields_null[$key])) {        $val = "''";    }}  // end else (field value in the form)unset($type);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * extracts table properties from create statement * * @todo should be handled by class Table * @todo this should be recoded as functions, to avoid messing with global variables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defining global variables, in case this script is included by a function. * This is necessary because this script can be included by libraries/header.inc.php. */global $showtable, $tbl_is_view, $tbl_type, $show_comment, $tbl_collation,       $table_info_num_rows, $auto_increment;/** * Gets table informations */// Seems we need to do this in MySQL 5.0.2,// otherwise error #1046, no database selectedPMA_DBI_select_db($GLOBALS['db']);/** * Holds information about the current table * * @todo replace this by PMA_Table * @global array $GLOBALS['showtable'] * @name $showtable */$GLOBALS['showtable'] = array();// PMA_Table::sGetStatusInfo() does caching by default, but here// we force reading of the current table status// if $reread_info is true (for example, coming from tbl_operations.php// and we just changed the table's storage engine)$GLOBALS['showtable'] = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, (isset($reread_info) && $reread_info ? true : false));// need this test because when we are creating a table, we get 0 rows// from the SHOW TABLE query// and we don't want to mess up the $tbl_type coming from the formif ($showtable) {    if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {        $tbl_is_view     = true;        $tbl_type        = __('View');        $show_comment    = null;    } else {        $tbl_is_view     = false;        $tbl_type        = isset($showtable['Engine'])            ? strtoupper($showtable['Engine'])            : '';        // a new comment could be coming from tbl_operations.php        // and we want to show it in the header        if (isset($submitcomment) && isset($comment)) {            $show_comment = $comment;        } else {            $show_comment    = isset($showtable['Comment'])                ? $showtable['Comment']                : '';        }    }    $tbl_collation       = empty($showtable['Collation'])        ? ''        : $showtable['Collation'];    if (null === $showtable['Rows']) {        $showtable['Rows']   = PMA_Table::countRecords($GLOBALS['db'],            $showtable['Name'], true);    }    $table_info_num_rows = isset($showtable['Rows']) ? $showtable['Rows'] : 0;    $row_format = isset($showtable['Row_format']) ? $showtable['Row_format'] : '';    $auto_increment      = isset($showtable['Auto_increment'])        ? $showtable['Auto_increment']        : '';    $create_options      = isset($showtable['Create_options'])        ? explode(' ', $showtable['Create_options'])        : array();    // export create options by its name as variables into global namespace    // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'    unset($pack_keys);    foreach ($create_options as $each_create_option) {        $each_create_option = explode('=', $each_create_option);        if (isset($each_create_option[1])) {            $$each_create_option[0]    = $each_create_option[1];        }    }    // we need explicit DEFAULT value here (different from '0')    $pack_keys = (! isset($pack_keys) || strlen($pack_keys) == 0) ? 'DEFAULT' : $pack_keys;    unset($create_options, $each_create_option);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Loads libraries/common.inc.php and preforms some additional actions * * @package PhpMyAdmin-setup *//** * Do not include full common. * @ignore */define('PMA_MINIMUM_COMMON', true);define('PMA_SETUP', true);chdir('..');if (!file_exists('./libraries/common.inc.php')) {    die('Bad invocation!');}require_once './libraries/common.inc.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/url_generating.lib.php';require_once './libraries/user_preferences.lib.php';// use default error handlerrestore_error_handler();// Save current language in a cookie, required since we use PMA_MINIMUM_COMMON$GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);ConfigFile::getInstance()->setPersistKeys(array(    'DefaultLang',    'ServerDefault',    'UploadDir',    'SaveDir',    'Servers/1/verbose',    'Servers/1/host',    'Servers/1/port',    'Servers/1/socket',    'Servers/1/extension',    'Servers/1/connect_type',    'Servers/1/auth_type',    'Servers/1/user',    'Servers/1/password'));// allows for redirection even after sending some dataob_start();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Export to Texy! text. * * @package PhpMyAdmin-Export * @subpackage Texy */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['texytext'] = array(        'text' => __('Texy! text'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(        /* what to dump (structure/data/both) */        array('type' => 'begin_group', 'text' => __('Dump table'), 'name' => 'general_opts'),        array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),        array('type' => 'end_group'),        array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),        array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL by')),        array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),        array('type' => 'end_group'),        ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('===' . __('Database') . ' ' . $db . "\n\n");    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in Texy format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('== ' . __('Dumping data for table') . ' ' . $table . "\n\n")) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $text_output = "|------\n";            for ($i = 0; $i < $fields_cnt; $i++) {                $text_output .= '|' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i)));            } // end for            $text_output .= "\n|------\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $text_output = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = ' ';                }                $text_output .= '|' . htmlspecialchars($value);            } // end for            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('== ' . __('Table structure for table') . ' ' .$table . "\n\n")) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $text_output = "|------\n";        $text_output .= '|' . __('Column');        $text_output .= '|' . __('Type');        $text_output .= '|' . __('Null');        $text_output .= '|' . __('Default');        if ($do_relation && $have_rel) {            $text_output .= '|' . __('Links to');        }        if ($do_comments) {            $text_output .= '|' . __('Comments');            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $text_output .= '|' . htmlspecialchars('MIME');            $mime_map = PMA_getMIME($db, $table, true);        }        $text_output .= "\n|------\n";        if (! PMA_exportOutputHandler($text_output)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $text_output = '';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '**' . $fmt_pre;                $fmt_post = $fmt_post . '**';            }            if ($column['Key']=='PRI') {                $fmt_pre = '//' . $fmt_pre;                $fmt_post = $fmt_post . '//';            }            $text_output .= '|' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post;            $text_output .= '|' . htmlspecialchars($type);            $text_output .= '|' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes'));            $text_output .= '|' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '');            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $text_output .= '|' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '');            }            if ($do_comments && $cfgRelation['commwork']) {                $text_output .= '|' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '');            }            if ($do_mime && $cfgRelation['mimework']) {                $text_output .= '|' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '');            }            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        return true;    }}?>
<?php/** * Menu items * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}$separator = PMA_get_arg_separator('html');?><ul>    <li><a href="index.php"><?php echo __('Overview') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Features"><?php echo __('Features') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Sql_queries"><?php echo __('SQL queries') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Left_frame"><?php echo __('Navigation frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Main_frame"><?php echo __('Main frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Import"><?php echo __('Import') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Export"><?php echo __('Export') ?></a></li></ul>
<?phprequire_once './libraries/common.inc.php';if (! isset($_REQUEST['get_gis_editor']) && ! isset($_REQUEST['generate'])) {    include_once './libraries/header_http.inc.php';    include_once './libraries/header_meta_style.inc.php';}require_once './libraries/gis/pma_gis_factory.php';require_once './libraries/gis_visualization.lib.php';// Get data if any posted$gis_data = array();if (PMA_isValid($_REQUEST['gis_data'], 'array')) {    $gis_data = $_REQUEST['gis_data'];}$gis_types = array(    'POINT',    'MULTIPOINT',    'LINESTRING',    'MULTILINESTRING',    'POLYGON',    'MULTIPOLYGON',    'GEOMETRYCOLLECTION');// Extract type from the initial call and make sure that it's a valid one.// Extract from field's values if availbale, if not use the column type passed.if (! isset($gis_data['gis_type'])) {    if (isset($_REQUEST['type']) && $_REQUEST['type'] != '') {        $gis_data['gis_type'] = strtoupper($_REQUEST['type']);    }    if (isset($_REQUEST['value']) && trim($_REQUEST['value']) != '') {        $start = (substr($_REQUEST['value'], 0, 1) == "'") ? 1 : 0;        $gis_data['gis_type'] = substr($_REQUEST['value'], $start, strpos($_REQUEST['value'], "(") - $start);    }    if ((! isset($gis_data['gis_type'])) || (! in_array($gis_data['gis_type'], $gis_types))) {        $gis_data['gis_type'] = $gis_types[0];    }}$geom_type = $gis_data['gis_type'];// Generate parameters from value passed.$gis_obj = PMA_GIS_Factory::factory($geom_type);if (isset($_REQUEST['value'])) {    $gis_data = array_merge($gis_data, $gis_obj->generateParams($_REQUEST['value']));}// Generate Well Known Text$srid = (isset($gis_data['srid']) && $gis_data['srid'] != '') ? htmlspecialchars($gis_data['srid']) : 0;$wkt = $gis_obj->generateWkt($gis_data, 0);$wkt_with_zero = $gis_obj->generateWkt($gis_data, 0, '0');$result = "'" . $wkt . "'," . $srid;// Generate PNG or SVG based visualization$format = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? 'png' : 'svg';$visualizationSettings = array('width' => 450, 'height' => 300, 'spatialColumn' => 'wkt');$data = array(array('wkt' => $wkt_with_zero, 'srid' => $srid));$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);$open_layers = PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol');// If the call is to update the WKT and visualization make an AJAX responseif (isset($_REQUEST['generate']) && $_REQUEST['generate'] == true) {    $extra_data = array(        'result'        => $result,        'visualization' => $visualization,        'openLayers'    => $open_layers,    );    PMA_ajaxResponse(null, true, $extra_data);}// If the call is to get the whole content, start buffering, skipping </head> and <body> tagsif (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    ob_start();} else {?></head><body><?php}?>    <form id="gis_data_editor_form" action="gis_data_editor.php" method="post">    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <div id="gis_data_editor">        <h3><?php printf(__('Value for the column "%s"'), htmlspecialchars($_REQUEST['field'])); ?></h3><?php   echo('<input type="hidden" name="field" value="' . htmlspecialchars($_REQUEST['field']) . '" />');        // The input field to which the final result should be added and corresponding null checkbox        if (isset($_REQUEST['input_name'])) {            echo('<input type="hidden" name="input_name" value="' . htmlspecialchars($_REQUEST['input_name']) . '" />');        }        echo PMA_generate_common_hidden_inputs();?>        <!-- Visualization section -->        <div id="placeholder" style="width:450px;height:300px;<?php       if ($srid != 0) {                echo('display:none;');            }?>      "><?php       echo ($visualization);?>      </div>        <div id="openlayersmap" style="width:450px;height:300px;<?php       if ($srid == 0) {                echo('display:none;');            }?>      ">        </div>        <div class="choice" style="float:right;clear:right;">            <input type="checkbox" id="choice" value="useBaseLayer"<?php       if ($srid != 0) {                echo(' checked="checked"');            }?>          />            <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>        </div>        <script language="javascript" type="text/javascript">            <?php echo($open_layers); ?>        </script>        <!-- End of visualization section -->        <!-- Header section - Inclueds GIS type selector and input field for SRID -->        <div id="gis_data_header">            <select name="gis_data[gis_type]" class="gis_type"><?php                foreach ($gis_types as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($geom_type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }?>            </select>            <input type="submit" name="gis_data[go]" class="go" value="<?php echo __("Go")?>" />            <label for="srid"><?php echo __("SRID"); ?>:&nbsp;</label>            <input name="gis_data[srid]" type="text" value="<?php echo($srid); ?>" />        </div>        <!-- End of header section -->        <!-- Data section -->        <div id="gis_data"><?php   $geom_count = 1;        if ($geom_type == 'GEOMETRYCOLLECTION') {            $geom_count = (isset($gis_data[$geom_type]['geom_count'])) ? $gis_data[$geom_type]['geom_count'] : 1;            if (isset($gis_data[$geom_type]['add_geom'])) {                $geom_count++;            }            echo('<input type="hidden" name="gis_data[GEOMETRYCOLLECTION][geom_count]" value="' . $geom_count . '">');        }        for ($a = 0; $a < $geom_count; $a++) {            if ($geom_type == 'GEOMETRYCOLLECTION') {                echo('<br/><br/>'); echo __("Geometry"); echo($a + 1 . ':<br/>');                if (isset($gis_data[$a]['gis_type'])) {                    $type = $gis_data[$a]['gis_type'];                } else {                    $type = $gis_types[0];                }                echo('<select name="gis_data[' . $a . '][gis_type]" class="gis_type">');                foreach (array_slice($gis_types, 0, 6) as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }                echo('</select>');                echo('<input type="submit" name="gis_data[' . $a . '][go]" class="go" value="'); echo __("Go"); echo('">');            } else {                $type = $geom_type;            }            if ($type == 'POINT') {                echo('<br/>'); echo __("Point"); echo(' :');?>              <label for="x"><?php echo __("X"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][x]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['x']) ? htmlspecialchars($gis_data[$a]['POINT']['x']) : ''); ?>" />                <label for="y"><?php echo __("Y"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][y]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['y']) ? htmlspecialchars($gis_data[$a]['POINT']['y']) : ''); ?>" /><?php            } elseif ($type == 'MULTIPOINT' || $type == 'LINESTRING') {                $no_of_points = isset($gis_data[$a][$type]['no_of_points']) ? $gis_data[$a][$type]['no_of_points'] : 1;                if ($type == 'LINESTRING' && $no_of_points < 2) {                    $no_of_points = 2;                }                if ($type == 'MULTIPOINT' && $no_of_points < 1) {                    $no_of_points = 1;                }                if (isset($gis_data[$a][$type]['add_point'])) {                    $no_of_points++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_points]" value="' . $no_of_points . '">');                for ($i = 0; $i < $no_of_points; $i++) {                    echo('<br/>');                    printf(__('Point %d'), $i + 1);                    echo ':';?>                  <label for="x"><?php echo  __("X"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i]['x']) ? htmlspecialchars($gis_data[$a][$type][$i]['x']) : ''); ?>" />                    <label for="y"><?php echo  __("Y"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i]['y']) ? htmlspecialchars($gis_data[$a][$type][$i]['y']) : ''); ?>" /><?php                }?>               <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php            } elseif ($type == 'MULTILINESTRING' || $type == 'POLYGON') {                $no_of_lines = isset($gis_data[$a][$type]['no_of_lines']) ? $gis_data[$a][$type]['no_of_lines'] : 1;                if ($no_of_lines < 1) {                    $no_of_lines = 1;                }                if (isset($gis_data[$a][$type]['add_line'])) {                    $no_of_lines++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_lines]" value="' . $no_of_lines . '">');                for ($i = 0; $i < $no_of_lines; $i++) {                    echo('<br/>');                    if ($type == 'MULTILINESTRING') {                        echo __("Linestring"); echo($i + 1 . ':');                    } else {                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                    }                    $no_of_points = isset($gis_data[$a][$type][$i]['no_of_points']) ? $gis_data[$a][$type][$i]['no_of_points'] : 2;                    if ($type == 'MULTILINESTRING' && $no_of_points < 2) {                        $no_of_points = 2;                    }                    if ($type == 'POLYGON' && $no_of_points < 4) {                        $no_of_points = 4;                    }                    if (isset($gis_data[$a][$type][$i]['add_point'])) {                        $no_of_points++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                    for ($j = 0; $j < $no_of_points; $j++) {                        echo('<br/>');                        printf(__('Point %d'), $j + 1);                        echo ':';?>                      <label for="x"><?php echo  __("X"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['x']) : ''); ?>" />                        <label for="y"><?php echo  __("Y"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['y']) : ''); ?>" /><?php               }?>                  <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php           }                $caption = ($type == 'MULTILINESTRING') ? __('Add a linestring') : __('Add an inner ring');?>              <br/><input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_line]" class="add addLine" value="<?php echo($caption); ?>"><?php            } elseif ($type == 'MULTIPOLYGON') {                $no_of_polygons = isset($gis_data[$a][$type]['no_of_polygons']) ? $gis_data[$a][$type]['no_of_polygons'] : 1;                if ($no_of_polygons < 1) {                    $no_of_polygons = 1;                }                if (isset($gis_data[$a][$type]['add_polygon'])) {                    $no_of_polygons++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_polygons]" value="' . $no_of_polygons . '">');                for ($k = 0; $k < $no_of_polygons; $k++) {                    echo('<br/>'); echo __("Polygon"); echo($k + 1 . ':');                    $no_of_lines = isset($gis_data[$a][$type][$k]['no_of_lines']) ? $gis_data[$a][$type][$k]['no_of_lines'] : 1;                    if ($no_of_lines < 1) {                        $no_of_lines = 1;                    }                    if (isset($gis_data[$a][$type][$k]['add_line'])) {                        $no_of_lines++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][no_of_lines]" value="' . $no_of_lines . '">');                    for ($i = 0; $i < $no_of_lines; $i++) {                        echo('<br/><br/>');                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                        $no_of_points = isset($gis_data[$a][$type][$k][$i]['no_of_points']) ? $gis_data[$a][$type][$k][$i]['no_of_points'] : 4;                        if ($no_of_points < 4) {                            $no_of_points = 4;                        }                        if (isset($gis_data[$a][$type][$k][$i]['add_point'])) {                            $no_of_points++;                        }                        echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                        for ($j = 0; $j < $no_of_points; $j++) {                            echo('<br/>');                            printf(__('Point %d'), $j + 1);                            echo ':';?>                          <label for="x"><?php echo  __("X"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][x]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['x']) : ''); ?>" />                            <label for="y"><?php echo  __("Y"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][y]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['y']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['y']) : ''); ?>" /><?php                   }?>                      <input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][add_point]"); ?>" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php               }?>                  <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][add_line]"); ?>" class="add addLine" value="<?php echo __('Add an inner ring') ?>"><br/><?php           }?>              <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][add_polygon]"); ?>" class="add addPolygon" value="<?php echo __('Add a polygon') ?>"><?php       }        }        if ($geom_type == 'GEOMETRYCOLLECTION') {?>          <br/><br/><input type="submit" name="gis_data[GEOMETRYCOLLECTION][add_geom]" class="add addGeom" value="<?php  echo __("Add geometry"); ?>" /><?php   }?>      </div>        <!-- End of data section -->        <br/><input type="submit" name="gis_data[save]" value="<?php echo __('Go') ?>">        <div id="gis_data_output">            <h3><?php echo __('Output'); ?></h3>            <p><?php echo __('Chose "GeomFromText" from the "Function" column and paste the below string into the "Value" field'); ?></p>            <textarea id="gis_data_textarea" cols="95" rows="5"><?php           echo($result);?>          </textarea>        </div>    </div>    </form><?php// If the call is to get the whole content, get the content in the buffer and make and AJAX response.if (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    $extra_data['gis_editor'] = ob_get_contents();    PMA_ajaxResponse(null, ob_end_clean(), $extra_data);}?></body><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();// handle form processing$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$form_display = new FormDisplay();foreach ($forms[$form_param] as $form_name => $form) {    // skip Developer form if no setting is available    if ($form_name == 'Developer' && !$GLOBALS['cfg']['UserprefsDeveloperTab']) {        continue;    }    $form_display->registerForm($form_name, $form, 1);}if (isset($_POST['revert'])) {    // revert erroneous fields to their default values    $form_display->fixErrors();    // redirect    $url_params = array('form' => $form_param);    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'prefs_forms.php'            . PMA_generate_common_url($url_params, '&'));    exit;}$error = null;if ($form_display->process(false) && !$form_display->hasErrors()) {    // save settings    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());    if ($result === true) {        // reload config        $GLOBALS['PMA_Config']->loadUserPreferences();        $hash = ltrim(filter_input(INPUT_POST, 'tab_hash'), '#');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_forms.php', array(            'form' => $form_param), $hash);        exit;    } else {        $error = $result;    }}// display forms$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    $error->display();}if ($form_display->hasErrors()) {    // form has errors    ?>    <div class="error config-form">        <b><?php echo __('Cannot save settings, submitted form contains errors') ?></b>        <?php $form_display->displayErrors(); ?>    </div>    <?php}$form_display->display(true, true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__link_info(){    return array(        'info' => __('Displays a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second option is a title for the link.'),        );}/** * */function PMA_transformation_text_plain__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';//    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . '%1$s" title="' . (isset($options[1]) ? $options[1] : '%1$s') . '">' . (isset($options[1]) ? $options[1] : '%1$s') . '</a>');    $transform_options = array ('string' => '<a href="' . PMA_linkURL((isset($options[0]) ? $options[0] : '') . $buffer) . '" title="' . (isset($options[1]) ? $options[1] : '') . '">' . (isset($options[1]) ? $options[1] : $buffer) . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/** * URL redirector to avoid leaking Referer with some sensitive information. *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';if (! PMA_isValid($_GET['url']) || ! preg_match('/^https?:\/\/[^\n\r]*$/', $_GET['url'])) {    header('Location: ' . $cfg['PmaAbsoluteUri']);} else {    header('Location: ' . $_GET['url']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display table relations for viewing and editing * * includes phpMyAdmin relations and InnoDB relations * * @todo fix name handling: currently names with dots (.) are not properly handled for internal relations (but foreign keys relations are correct) * @todo foreign key constraints require both fields being of equal type and size * @todo check foreign fields to be from same type and size, all other makes no sense * @todo add an link to create an index required for constraints, or an option to do automatically * @todo if above todos are fullfilled we can add all fields meet requirements in the select dropdown * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_relation.js';require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';// Note: in libraries/tbl_links.inc.php we get and display the table comment.// For InnoDB, this comment contains the REFER information but any update// has not been done yet (will be done in tbl_relation.php later).$avoid_show_comment = true;/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$options_array = array(    'CASCADE'   => 'CASCADE',    'SET_NULL'  => 'SET NULL',    'NO_ACTION' => 'NO ACTION',    'RESTRICT'  => 'RESTRICT',);/** * Generate dropdown choices * * @param string $dropdown_question Message to display * @param string $select_name       Name of the <select> field * @param array  $choices           Choices for dropdown * @param string $selected_value    Selected value * * @return  string   The existing value (for selected) * * @access  public */function PMA_generate_dropdown($dropdown_question, $select_name, $choices, $selected_value){    echo htmlspecialchars($dropdown_question) . '&nbsp;&nbsp;';    echo '<select name="' . htmlspecialchars($select_name) . '">' . "\n";    foreach ($choices as $one_value => $one_label) {        echo '<option value="' . htmlspecialchars($one_value) . '"';        if ($selected_value == $one_value) {            echo ' selected="selected" ';        }        echo '>' . htmlspecialchars($one_label) . '</option>' . "\n";    }    echo '</select>' . "\n";}/** * Split a string on backquote pairs * * @param string $text original string * * @return  array   containing the elements (and their surrounding backquotes) * * @access  public */function PMA_backquote_split($text){    $elements = array();    $final_pos = strlen($text) - 1;    $pos = 0;    while ($pos <= $final_pos) {        $first_backquote = strpos($text, '`', $pos);        $second_backquote = strpos($text, '`', $first_backquote + 1);        // after the second one, there might be another one which means        // this is an escaped backquote        if ($second_backquote < $final_pos && '`' == $text[$second_backquote + 1]) {            $second_backquote = strpos($text, '`', $second_backquote + 2);        }        if (false === $first_backquote || false === $second_backquote) {            break;        }        $elements[] = substr($text, $first_backquote, $second_backquote - $first_backquote + 1);        $pos = $second_backquote + 1;    }    return($elements);}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Updates */if ($cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}// will be used in the logic for internal relations and foreign keys:$me_fields_name = isset($_REQUEST['fields_name'])    ? $_REQUEST['fields_name']    : null;// u p d a t e s   f o r   I n t e r n a l    r e l a t i o n sif (isset($destination) && $cfgRelation['relwork']) {    foreach ($destination as $master_field_md5 => $foreign_string) {        $upd_query = false;        // Map the fieldname's md5 back to its real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            $foreign_string = trim($foreign_string, '`');            list($foreign_db, $foreign_table, $foreign_field) = explode('.', $foreign_string);            if (! isset($existrel[$master_field])) {                $upd_query  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($table) . '\', '                            . '\'' . PMA_sqlAddSlashes($master_field) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_table) . '\','                            . '\'' . PMA_sqlAddSlashes($foreign_field) . '\')';            } elseif ($existrel[$master_field]['foreign_db'] . '.' .$existrel[$master_field]['foreign_table'] . '.' . $existrel[$master_field]['foreign_field'] != $foreign_string) {                $upd_query  = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation']) . ' SET'                            . ' foreign_db       = \'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . ' foreign_table    = \'' . PMA_sqlAddSlashes($foreign_table) . '\', '                            . ' foreign_field    = \'' . PMA_sqlAddSlashes($foreign_field) . '\' '                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';            } // end if... else....        } elseif (isset($existrel[$master_field])) {            $upd_query      = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';        } // end if... else....        if ($upd_query) {            PMA_query_as_controluser($upd_query);        }    } // end while} // end if (updates for internal relations)// u p d a t e s    f o r    f o r e i g n    k e y s// (for now, one index name only; we keep the definitions if the// foreign db is not the same)// I use $sql_query to be able to display directly the query via// PMA_showMessage()if (isset($_REQUEST['destination_foreign'])) {    $display_query = '';    $seen_error = false;    foreach ($_REQUEST['destination_foreign'] as $master_field_md5 => $foreign_string) {        // Map the fieldname's md5 back to it's real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            list($foreign_db, $foreign_table, $foreign_field) = PMA_backquote_split($foreign_string);            if (! isset($existrel_foreign[$master_field])) {                // no key defined for this field                // The next few lines are repeated below, so they                // could be put in an include file                // Note: I tried to enclose the db and table name with                // backquotes but MySQL 4.0.16 did not like the syntax                // (for example: `base2`.`table1`)                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query .= ' ON DELETE ' . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query .= ' ON UPDATE ' . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";                // end repeated code            } elseif (PMA_backquote($existrel_foreign[$master_field]['foreign_db']) != $foreign_db                || PMA_backquote($existrel_foreign[$master_field]['foreign_table']) != $foreign_table                || PMA_backquote($existrel_foreign[$master_field]['foreign_field']) != $foreign_field                || ($_REQUEST['on_delete'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_delete']) ? $existrel_foreign[$master_field]['on_delete'] : 'RESTRICT'))                || ($_REQUEST['on_update'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_update']) ? $existrel_foreign[$master_field]['on_update'] : 'RESTRICT'))                   ) {                // another foreign key is already defined for this field                // or                // an option has been changed for ON DELETE or ON UPDATE                // remove existing key and add the new one                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' DROP FOREIGN KEY '                            . PMA_backquote($existrel_foreign[$master_field]['constraint']) . ', '                            . 'ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query   .= ' ON DELETE '                        . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query   .= ' ON UPDATE '                        . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";            } // end if... else....        } elseif (isset($existrel_foreign[$master_field])) {            $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                    . ' DROP FOREIGN KEY '                    . PMA_backquote($existrel_foreign[$master_field]['constraint']);            $sql_query .= ';';            $display_query .= $sql_query . "\n";        } // end if... else....        if (! empty($sql_query)) {            PMA_DBI_try_query($sql_query);            $tmp_error = PMA_DBI_getError();            if (! empty($tmp_error)) {                $seen_error = true;            }            if (substr($tmp_error, 1, 4) == '1216'                ||  substr($tmp_error, 1, 4) == '1452'            ) {                PMA_mysqlDie($tmp_error, $sql_query, false, '', false);                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            if (substr($tmp_error, 1, 4) == '1005') {                $message = PMA_Message::error(__('Error creating foreign key on %1$s (check data types)'));                $message->addParam($master_field);                $message->display();                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            unset($tmp_error);            $sql_query = '';        }    } // end foreach    if (!empty($display_query)) {        if ($seen_error) {            PMA_showMessage(__('Error'), null, 'error');        } else {            PMA_showMessage(__('Your SQL query has been executed successfully'), null, 'success');        }    }} // end if isset($destination_foreign)// U p d a t e s   f o r   d i s p l a y   f i e l dif ($cfgRelation['displaywork'] && isset($display_field)) {    $upd_query = false;    if ($disp) {        if ($display_field != '') {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if ($upd_query) {        PMA_query_as_controluser($upd_query);    }} // end if// If we did an update, refresh our dataif (isset($destination) && $cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (isset($destination_foreign) && PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}/** * Dialog */// common formecho '<form method="post" action="tbl_relation.php">' . "\n";echo PMA_generate_common_hidden_inputs($db, $table);// relationsif ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {    // To choose relations we first need all tables names in current db    // and if the main table supports foreign keys    // we use SHOW TABLE STATUS because we need to find other tables of the    // same engine.    if (PMA_foreignkey_supported($tbl_type)) {        $tab_query           = 'SHOW TABLE STATUS FROM ' . PMA_backquote($db);        // [0] of the row is the name        // [1] is the type    } else {        $tab_query           = 'SHOW TABLES FROM ' . PMA_backquote($db);        // [0] of the row is the name    }    $tab_rs              = PMA_DBI_query($tab_query, null, PMA_DBI_QUERY_STORE);    $selectboxall[] = '';    $selectboxall_foreign[] = '';    while ($curr_table = PMA_DBI_fetch_row($tab_rs)) {        $current_table = new PMA_Table($curr_table[0], $db);        // explicitely ask for non-quoted list of indexed columns        $selectboxall = array_merge($selectboxall, $current_table->getUniqueColumns($backquoted = false));        // if foreign keys are supported, collect all keys from other        // tables of the same engine        if (PMA_foreignkey_supported($tbl_type)            && isset($curr_table[1])            && strtoupper($curr_table[1]) == $tbl_type        ) {             // explicitely ask for non-quoted list of indexed columns             // need to obtain backquoted values to support dots inside values             $selectboxall_foreign = array_merge($selectboxall_foreign, $current_table->getIndexedColumns($backquoted = true));        }    } // end while over tables} // end if// Now find out the columns of our $table// need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli$columns = PMA_DBI_get_columns($db, $table);if (count($columns) > 0) {    foreach ($columns as $row) {        $save_row[] = $row;    }    $saved_row_cnt  = count($save_row);    ?>    <fieldset>    <legend><?php echo __('Relations'); ?></legend>    <table>    <tr><th><?php echo __('Column'); ?></th>    <?php    if ($cfgRelation['relwork']) {        echo '<th>' . __('Internal relation');        if (PMA_foreignkey_supported($tbl_type)) {            echo PMA_showHint(__('An internal relation is not necessary when a corresponding FOREIGN KEY relation exists.'));        }        echo '</th>';    }    if (PMA_foreignkey_supported($tbl_type)) {        // this does not have to be translated, it's part of the MySQL syntax        echo '<th colspan="2">' . __('Foreign key constraint') . ' (' . $tbl_type . ')';        echo '</th>';    }    ?>    </tr>    <?php    $odd_row = true;    for ($i = 0; $i < $saved_row_cnt; $i++) {        $myfield = $save_row[$i]['Field'];        // Use an md5 as array index to avoid having special characters in the name atttibure (see bug #1746964 )        $myfield_md5 = md5($myfield);        $myfield_html = htmlspecialchars($myfield);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td align="center">            <strong><?php echo $myfield_html; ?></strong>            <input type="hidden" name="fields_name[<?php echo $myfield_md5; ?>]" value="<?php echo $myfield_html; ?>"/>        </td>        <?php        if ($cfgRelation['relwork']) {            ?>        <td><select name="destination[<?php echo $myfield_md5; ?>]">            <?php            // PMA internal relations            if (isset($existrel[$myfield])) {                $foreign_field    = $existrel[$myfield]['foreign_db'] . '.'                         . $existrel[$myfield]['foreign_table'] . '.'                         . $existrel[$myfield]['foreign_field'];            } else {                $foreign_field    = false;            }            $seen_key = false;            foreach ($selectboxall as $value) {                echo '                '                     . '<option value="' . htmlspecialchars($value) . '"';                if ($foreign_field && $value == $foreign_field) {                    echo ' selected="selected"';                    $seen_key = true;                }                echo '>' . htmlspecialchars($value) . '</option>'. "\n";            } // end while            // if the link defined in relationtable points to a foreign field            // that is not a key in the foreign table, we show the link            // (will not be shown with an arrow)            if ($foreign_field && !$seen_key) {                echo '                '                    .'<option value="' . htmlspecialchars($foreign_field) . '"'                    .' selected="selected"'                    .'>' . $foreign_field . '</option>'. "\n";            }            ?>            </select>        </td>            <?php        } // end if (internal relations)        if (PMA_foreignkey_supported($tbl_type)) {            echo '<td>';            if (!empty($save_row[$i]['Key'])) {                ?>            <span class="formelement">            <select name="destination_foreign[<?php echo $myfield_md5; ?>]" class="referenced_column_dropdown">                <?php                if (isset($existrel_foreign[$myfield])) {                    // need to backquote to support a dot character inside                    // an element                    $foreign_field    = PMA_backquote($existrel_foreign[$myfield]['foreign_db']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_table']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_field']);                } else {                    $foreign_field    = false;                }                $found_foreign_field = false;                foreach ($selectboxall_foreign as $value) {                    echo '                '                         . '<option value="' . htmlspecialchars($value) . '"';                    if ($foreign_field && $value == $foreign_field) {                        echo ' selected="selected"';                        $found_foreign_field = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>'. "\n";                } // end while                // we did not find the foreign field in the tables of current db,                // must be defined in another db so show it to avoid erasing it                if (!$found_foreign_field && $foreign_field) {                    echo '                '                         . '<option value="' . htmlspecialchars($foreign_field) . '"';                    echo ' selected="selected"';                    echo '>' . $foreign_field . '</option>' . "\n";                }                ?>            </select>            </span>            <span class="formelement">                <?php                // For ON DELETE and ON UPDATE, the default action                // is RESTRICT as per MySQL doc; however, a SHOW CREATE TABLE                // won't display the clause if it's set as RESTRICT.                PMA_generate_dropdown('ON DELETE',                    'on_delete[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_delete']) ? $existrel_foreign[$myfield]['on_delete']: 'RESTRICT');                echo '</span>' . "\n"                    .'<span class="formelement">' . "\n";                PMA_generate_dropdown('ON UPDATE',                    'on_update[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_update']) ? $existrel_foreign[$myfield]['on_update']: 'RESTRICT');                echo '</span>' . "\n";            } else {                echo __('No index defined!');            } // end if (a key exists)            echo '        </td>';        } // end if (InnoDB)        ?>    </tr>        <?php    } // end for    unset( $myfield, $myfield_md5, $myfield_html);    echo '    </table>' . "\n";    echo '</fieldset>' . "\n";    if ($cfgRelation['displaywork']) {        // Get "display_field" infos        $disp = PMA_getDisplayField($db, $table);        ?>    <fieldset>        <label><?php echo __('Choose column to display') . ': '; ?></label>        <select name="display_field">            <option value="">---</option>        <?php        foreach ($save_row AS $row) {            echo '            <option value="' . htmlspecialchars($row['Field']) . '"';            if (isset($disp) && $row['Field'] == $disp) {                echo ' selected="selected"';            }            echo '>' . htmlspecialchars($row['Field']) . '</option>'. "\n";        } // end while        ?>        </select>    </fieldset>        <?php    } // end if (displayworks)    ?>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Save'); ?>" />    </fieldset></form>    <?php} // end if (we have columns in this table)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';// text color of the selected database name (when showing the table list)$GLOBALS['cfg']['NaviDatabaseNameColor']    = '#0000FF';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 50,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => '#E5E5E5',    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => '#FBFBFB',    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          => '#D5D9DD',    // the background color of the graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgTwo'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-StringType-CType *//** * Checks if a character is an alphanumeric one * * @param string   character to check for * @return  boolean  whether the character is an alphanumeric one or not */function PMA_STR_isAlnum($c){    return ctype_alnum($c);} // end of the "PMA_STR_isAlnum()" function/** * Checks if a character is an alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an alphabetic one or not */function PMA_STR_isAlpha($c){    return ctype_alpha($c);} // end of the "PMA_STR_isAlpha()" function/** * Checks if a character is a digit * * @param string   character to check for * @return  boolean  whether the character is a digit or not */function PMA_STR_isDigit($c){    return ctype_digit($c);} // end of the "PMA_STR_isDigit()" function/** * Checks if a character is an upper alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an upper alphabetic one or not */function PMA_STR_isUpper($c){    return ctype_upper($c);} // end of the "PMA_STR_isUpper()" function/** * Checks if a character is a lower alphabetic one * * @param string   character to check for * @return  boolean  whether the character is a lower alphabetic one or not */function PMA_STR_isLower($c){    return ctype_lower($c);} // end of the "PMA_STR_isLower()" function/** * Checks if a character is a space one * * @param string   character to check for * @return  boolean  whether the character is a space one or not */function PMA_STR_isSpace($c){    return ctype_space($c);} // end of the "PMA_STR_isSpace()" function/** * Checks if a character is an hexadecimal digit * * @param string   character to check for * @return  boolean  whether the character is an hexadecimal digit or not */function PMA_STR_isHexDigit($c){    return ctype_xdigit($c);} // end of the "PMA_STR_isHexDigit()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__dateformat_info(){    return array(        'info' => __('Displays a TIME, TIMESTAMP, DATETIME or numeric unix timestamp column as formatted date. The first option is the offset (in hours) which will be added to the timestamp (Default: 0). Use second option to specify a different date/time format string. Third option determines whether you want to see local date or UTC one (use "local" or "utc" strings) for that. According to that, date format has different value - for "local" see the documentation for PHP\'s strftime() function and for "utc" it is done using gmdate() function.'),        );}/** * */function PMA_transformation_text_plain__dateformat($buffer, $options = array(), $meta = ''){    // possibly use a global transform and feed it with special options:    // include './libraries/transformations/global.inc.php';    // further operations on $buffer using the $options[] array.    if (empty($options[0])) {        $options[0] = 0;    }    if (empty($options[2])) {        $options[2] = 'local';    } else {        $options[2] = strtolower($options[2]);    }    if (empty($options[1])) {        if ($options[2] == 'local') {            $options[1] = __('%B %d, %Y at %I:%M %p');        } else {            $options[1] = 'Y-m-d  H:i:s';        }    }    $timestamp = -1;    // INT columns will be treated as UNIX timestamps    // and need to be detected before the verification for    // MySQL TIMESTAMP    if ($meta->type == 'int') {        $timestamp = $buffer;    // Detect TIMESTAMP(6 | 8 | 10 | 12 | 14)    // TIMESTAMP (2 | 4) not supported here.    // (Note: prior to MySQL 4.1, TIMESTAMP has a display size, for example    // TIMESTAMP(8) means YYYYMMDD)    } else if (preg_match('/^(\d{2}){3,7}$/', $buffer)) {        if (strlen($buffer) == 14 || strlen($buffer) == 8) {            $offset = 4;        } else {            $offset = 2;        }        $d = array();        $d['year']   = substr($buffer, 0, $offset);        $d['month']  = substr($buffer, $offset, 2);        $d['day']    = substr($buffer, $offset + 2, 2);        $d['hour']   = substr($buffer, $offset + 4, 2);        $d['minute'] = substr($buffer, $offset + 6, 2);        $d['second'] = substr($buffer, $offset + 8, 2);        if (checkdate($d['month'], $d['day'], $d['year'])) {            $timestamp = mktime($d['hour'], $d['minute'], $d['second'], $d['month'], $d['day'], $d['year']);        }    // If all fails, assume one of the dozens of valid strtime() syntaxes (http://www.gnu.org/manual/tar-1.12/html_chapter/tar_7.html)    } else {        if (preg_match('/^[0-9]\d{1,9}$/', $buffer)) {            $timestamp = (int)$buffer;        } else {            $timestamp = strtotime($buffer);        }    }    // If all above failed, maybe it's a Unix timestamp already?    if ($timestamp < 0 && preg_match('/^[1-9]\d{1,9}$/', $buffer)) {        $timestamp = $buffer;    }    // Reformat a valid timestamp    if ($timestamp >= 0) {        $timestamp -= $options[0] * 60 * 60;        $source = $buffer;        if ($options[2] == 'local') {            $text = PMA_localisedDate($timestamp, $options[1]);        } elseif ($options[2] == 'utc') {            $text = gmdate($options[1], $timestamp);        } else {            $text = 'INVALID DATE TYPE';        }        $buffer = '<dfn onclick="alert(\'' . $source . '\');" title="' . $source . '">' . $text . '</dfn>';    }    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used for cleaning up phpMyAdmin tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Cleanu column related relation stuff * * @param string $db * @param string $table * @param string $column */function PMA_relationsCleanupColumn($db, $table, $column){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND column_name = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND display_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND master_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND foreign_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup table related relation stuff * * @param string $db * @param string $table */function PMA_relationsCleanupTable($db, $table){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup database related relation stuff * * @param string $db */function PMA_relationsCleanupDatabase($db){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['bookmarkwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['bookmark'])                    . ' WHERE dbase  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);     }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }}?>
<?php  function loadData($type, $data) {    if (!$data) return $data;    $tmp = unpack($type, $data);    return current($tmp);  }  function swap($binValue) {    $result = $binValue{strlen($binValue) - 1};    for($i = strlen($binValue) - 2; $i >= 0 ; $i--) {      $result .= $binValue{$i};    }    return $result;  }  function packDouble($value, $mode = 'LE') {    $value = (double)$value;    $bin = pack("d", $value);    //We test if the conversion of an integer (1) is done as LE or BE by default    switch (pack ('L', 1)) {      case pack ('V', 1): //Little Endian        $result = ($mode == 'LE') ? $bin : swap($bin);      break;      case pack ('N', 1): //Big Endian        $result = ($mode == 'BE') ? $bin : swap($bin);      break;      default: //Some other thing, we just return false        $result = FALSE;    }    return $result;  }  class ShapeFile {    var $FileName;    var $SHPFile;    var $SHXFile;    var $DBFFile;    var $DBFHeader;    var $lastError = "";    var $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0);    var $fileLength = 0;    var $shapeType = 0;    var $records;    function ShapeFile($shapeType, $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0), $FileName = NULL) {      $this->shapeType = $shapeType;      $this->boundingBox = $boundingBox;      $this->FileName = $FileName;      $this->fileLength = 50;    }    function loadFromFile($FileName) {      $this->FileName = $FileName;      if (($this->_openSHPFile()) && ($this->_openDBFFile())) {        $this->_loadHeaders();        $this->_loadRecords();        $this->_closeSHPFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function saveToFile($FileName = NULL) {      if ($FileName != NULL) $this->FileName = $FileName;      if (($this->_openSHPFile(TRUE)) && ($this->_openSHXFile(TRUE)) && ($this->_openDBFFile(TRUE))) {        $this->_saveHeaders();        $this->_saveRecords();        $this->_closeSHPFile();        $this->_closeSHXFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function addRecord($record) {      if ((isset($this->DBFHeader)) && (is_array($this->DBFHeader))) {        $record->updateDBFInfo($this->DBFHeader);      }      $this->fileLength += ($record->getContentLength() + 4);      $this->records[] = $record;      $this->records[count($this->records) - 1]->recordNumber = count($this->records);      return (count($this->records) - 1);    }    function deleteRecord($index) {      if (isset($this->records[$index])) {        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);        for ($i = $index; $i < (count($this->records) - 1); $i++) {          $this->records[$i] = $this->records[$i + 1];        }        unset($this->records[count($this->records) - 1]);        $this->_deleteRecordFromDBF($index);      }    }    function getDBFHeader() {      return $this->DBFHeader;    }    function setDBFHeader($header) {      $this->DBFHeader = $header;      for ($i = 0; $i < count($this->records); $i++) {        $this->records[$i]->updateDBFInfo($header);      }    }    function getIndexFromDBFData($field, $value) {      $result = -1;      for ($i = 0; $i < (count($this->records) - 1); $i++) {        if (isset($this->records[$i]->DBFData[$field]) && (strtoupper($this->records[$i]->DBFData[$field]) == strtoupper($value))) {          $result = $i;        }      }      return $result;    }    function _loadDBFHeader() {      $DBFFile = fopen(str_replace('.*', '.dbf', $this->FileName), 'r');      $result = array();      $buff32 = array();      $i = 1;      $inHeader = true;      while ($inHeader) {        if (!feof($DBFFile)) {          $buff32 = fread($DBFFile, 32);          if ($i > 1) {            if (substr($buff32, 0, 1) == chr(13)) {              $inHeader = false;            } else {              $pos = strpos(substr($buff32, 0, 10), chr(0));              $pos = ($pos == 0 ? 10 : $pos);              $fieldName = substr($buff32, 0, $pos);              $fieldType = substr($buff32, 11, 1);              $fieldLen = ord(substr($buff32, 16, 1));              $fieldDec = ord(substr($buff32, 17, 1));              array_push($result, array($fieldName, $fieldType, $fieldLen, $fieldDec));            }          }          $i++;        } else {          $inHeader = false;        }      }      fclose($DBFFile);      return($result);    }    function _deleteRecordFromDBF($index) {      if (@dbase_delete_record($this->DBFFile, $index)) {        @dbase_pack($this->DBFFile);      }    }    function _loadHeaders() {      fseek($this->SHPFile, 24, SEEK_SET);      $this->fileLength = loadData("N", fread($this->SHPFile, 4));      fseek($this->SHPFile, 32, SEEK_SET);      $this->shapeType = loadData("V", fread($this->SHPFile, 4));      $this->boundingBox = array();      $this->boundingBox["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->DBFHeader = $this->_loadDBFHeader();    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHPFile, pack("N", $this->fileLength));      fwrite($this->SHPFile, pack("V", 1000));      fwrite($this->SHPFile, pack("V", $this->shapeType));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHPFile, pack("dddd", 0, 0, 0, 0));      fwrite($this->SHXFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHXFile, pack("N", 50 + 4*count($this->records)));      fwrite($this->SHXFile, pack("V", 1000));      fwrite($this->SHXFile, pack("V", $this->shapeType));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHXFile, pack("dddd", 0, 0, 0, 0));    }    function _loadRecords() {      fseek($this->SHPFile, 100);      while (!feof($this->SHPFile)) {        $bByte = ftell($this->SHPFile);        $record = new ShapeRecord(-1);        $record->loadFromFile($this->SHPFile, $this->DBFFile);        $eByte = ftell($this->SHPFile);        if (($eByte <= $bByte) || ($record->lastError != "")) {          return false;        }        $this->records[] = $record;      }    }    function _saveRecords() {      if (file_exists(str_replace('.*', '.dbf', $this->FileName))) {        @unlink(str_replace('.*', '.dbf', $this->FileName));      }      if (!($this->DBFFile = @dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader))) {        return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      $offset = 50;      if (is_array($this->records) && (count($this->records) > 0)) {        reset($this->records);        while (list($index, $record) = each($this->records)) {          //Save the record to the .shp file          $record->saveToFile($this->SHPFile, $this->DBFFile, $index + 1);          //Save the record to the .shx file          fwrite($this->SHXFile, pack("N", $offset));          fwrite($this->SHXFile, pack("N", $record->getContentLength()));          $offset += (4 + $record->getContentLength());        }      }      @dbase_pack($this->DBFFile);    }    function _openSHPFile($toWrite = false) {      $this->SHPFile = @fopen(str_replace('.*', '.shp', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHPFile) {        return $this->setError(sprintf("It wasn't possible to open the Shape file '%s'", str_replace('.*', '.shp', $this->FileName)));      }      return TRUE;    }    function _closeSHPFile() {      if ($this->SHPFile) {        fclose($this->SHPFile);        $this->SHPFile = NULL;      }    }    function _openSHXFile($toWrite = false) {      $this->SHXFile = @fopen(str_replace('.*', '.shx', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHXFile) {        return $this->setError(sprintf("It wasn't possible to open the Index file '%s'", str_replace('.*', '.shx', $this->FileName)));      }      return TRUE;    }    function _closeSHXFile() {      if ($this->SHXFile) {        fclose($this->SHXFile);        $this->SHXFile = NULL;      }    }    function _openDBFFile($toWrite = false) {      $checkFunction = $toWrite ? "is_writable" : "is_readable";      if (($toWrite) && (!file_exists(str_replace('.*', '.dbf', $this->FileName)))) {        if (!@dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader)) {          return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      }      if ($checkFunction(str_replace('.*', '.dbf', $this->FileName))) {        $this->DBFFile = dbase_open(str_replace('.*', '.dbf', $this->FileName), ($toWrite ? 2 : 0));        if (!$this->DBFFile) {          return $this->setError(sprintf("It wasn't possible to open the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      } else {        return $this->setError(sprintf("It wasn't possible to find the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      return TRUE;    }    function _closeDBFFile() {      if ($this->DBFFile) {        dbase_close($this->DBFFile);        $this->DBFFile = NULL;      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }  class ShapeRecord {    var $SHPFile = NULL;    var $DBFFile = NULL;    var $recordNumber = NULL;    var $shapeType = NULL;    var $lastError = "";    var $SHPData = array();    var $DBFData = array();    function ShapeRecord($shapeType) {      $this->shapeType = $shapeType;    }    function loadFromFile(&$SHPFile, &$DBFFile) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->_loadHeaders();      switch ($this->shapeType) {        case 0:          $this->_loadNullRecord();        break;        case 1:          $this->_loadPointRecord();        break;        case 3:          $this->_loadPolyLineRecord();        break;        case 5:          $this->_loadPolygonRecord();        break;        case 8:          $this->_loadMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_loadDBFData();    }    function saveToFile(&$SHPFile, &$DBFFile, $recordNumber) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->recordNumber = $recordNumber;      $this->_saveHeaders();      switch ($this->shapeType) {        case 0:          $this->_saveNullRecord();        break;        case 1:          $this->_savePointRecord();        break;        case 3:          $this->_savePolyLineRecord();        break;        case 5:          $this->_savePolygonRecord();        break;        case 8:          $this->_saveMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_saveDBFData();    }    function updateDBFInfo($header) {      $tmp = $this->DBFData;      unset($this->DBFData);      $this->DBFData = array();      reset($header);      while (list($key, $value) = each($header)) {        $this->DBFData[$value[0]] = (isset($tmp[$value[0]])) ? $tmp[$value[0]] : "";      }    }    function _loadHeaders() {      $this->recordNumber = loadData("N", fread($this->SHPFile, 4));      $tmp = loadData("N", fread($this->SHPFile, 4)); //We read the length of the record      $this->shapeType = loadData("V", fread($this->SHPFile, 4));    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("N", $this->recordNumber));      fwrite($this->SHPFile, pack("N", $this->getContentLength()));      fwrite($this->SHPFile, pack("V", $this->shapeType));    }    function _loadPoint() {      $data = array();      $data["x"] = loadData("d", fread($this->SHPFile, 8));      $data["y"] = loadData("d", fread($this->SHPFile, 8));      return $data;    }    function _savePoint($data) {      fwrite($this->SHPFile, packDouble($data["x"]));      fwrite($this->SHPFile, packDouble($data["y"]));    }    function _loadNullRecord() {      $this->SHPData = array();    }    function _saveNullRecord() {      //Don't save anything    }    function _loadPointRecord() {      $this->SHPData = $this->_loadPoint();    }    function _savePointRecord() {      $this->_savePoint($this->SHPData);    }    function _loadMultiPointRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->SHPData["points"][] = $this->_loadPoint();      }    }    function _saveMultiPointRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("V", $this->SHPData["numpoints"]));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->_savePoint($this->SHPData["points"][$i]);      }    }    function _loadPolyLineRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numparts"]  = loadData("V", fread($this->SHPFile, 4));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        $this->SHPData["parts"][$i] = loadData("V", fread($this->SHPFile, 4));      }      $firstIndex = ftell($this->SHPFile);      $readPoints = 0;      reset($this->SHPData["parts"]);      while (list($partIndex, $partData) = each($this->SHPData["parts"])) {        if (!isset($this->SHPData["parts"][$partIndex]["points"]) || !is_array($this->SHPData["parts"][$partIndex]["points"])) {          $this->SHPData["parts"][$partIndex] = array();          $this->SHPData["parts"][$partIndex]["points"] = array();        }        while (!in_array($readPoints, $this->SHPData["parts"]) && ($readPoints < ($this->SHPData["numpoints"])) && !feof($this->SHPFile)) {          $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();          $readPoints++;        }      }      fseek($this->SHPFile, $firstIndex + ($readPoints*16));    }    function _savePolyLineRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("VV", $this->SHPData["numparts"], $this->SHPData["numpoints"]));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        fwrite($this->SHPFile, pack("V", count($this->SHPData["parts"][$i])));      }      reset($this->SHPData["parts"]);      foreach ($this->SHPData["parts"] as $partData){        reset($partData["points"]);        while (list($pointIndex, $pointData) = each($partData["points"])) {          $this->_savePoint($pointData);        }      }    }    function _loadPolygonRecord() {      $this->_loadPolyLineRecord();    }    function _savePolygonRecord() {      $this->_savePolyLineRecord();    }    function addPoint($point, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't add anything        break;        case 1:          //Substitutes the value of the current point          $this->SHPData = $point;        break;        case 3:        case 5:          //Adds a new point to the selected part          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["parts"][$partIndex]["points"][] = $point;          $this->SHPData["numparts"] = count($this->SHPData["parts"]);          $this->SHPData["numpoints"]++;        break;        case 8:          //Adds a new point          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["points"][] = $point;          $this->SHPData["numpoints"]++;        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function deletePoint($pointIndex = 0, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't delete anything        break;        case 1:          //Sets the value of the point to zero          $this->SHPData["x"] = 0.0;          $this->SHPData["y"] = 0.0;        break;        case 3:        case 5:          //Deletes the point from the selected part, if exists          if (isset($this->SHPData["parts"][$partIndex]) && isset($this->SHPData["parts"][$partIndex]["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["parts"][$partIndex]["points"]) - 1); $i++) {              $this->SHPData["parts"][$partIndex]["points"][$i] = $this->SHPData["parts"][$partIndex]["points"][$i + 1];            }            unset($this->SHPData["parts"][$partIndex]["points"][count($this->SHPData["parts"][$partIndex]["points"]) - 1]);            $this->SHPData["numparts"] = count($this->SHPData["parts"]);            $this->SHPData["numpoints"]--;          }        break;        case 8:          //Deletes the point, if exists          if (isset($this->SHPData["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["points"]) - 1); $i++) {              $this->SHPData["points"][$i] = $this->SHPData["points"][$i + 1];            }            unset($this->SHPData["points"][count($this->SHPData["points"]) - 1]);            $this->SHPData["numpoints"]--;          }        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function getContentLength() {      switch ($this->shapeType) {        case 0:          $result = 0;        break;        case 1:          $result = 10;        break;        case 3:        case 5:          $result = 22 + 2*count($this->SHPData["parts"]);          for ($i = 0; $i < count($this->SHPData["parts"]); $i++) {            $result += 8*count($this->SHPData["parts"][$i]["points"]);          }        break;        case 8:          $result = 20 + 8*count($this->SHPData["points"]);        break;        default:          $result = false;          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      return $result;    }    function _loadDBFData() {      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);      unset($this->DBFData["deleted"]);    }    function _saveDBFData() {      unset($this->DBFData["deleted"]);      if ($this->recordNumber <= dbase_numrecords($this->DBFFile)) {        if (!dbase_replace_record($this->DBFFile, array_values($this->DBFData), $this->recordNumber)) {          $this->setError("I wasn't possible to update the information in the DBF file.");        }      } else {        if (!dbase_add_record($this->DBFFile, array_values($this->DBFData))) {          $this->setError("I wasn't possible to add the information to the DBF file.");        }      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides the functionality for retreiving images * which may be actual images or an icon from a sprite * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Get the data for the sprites, if it's availableif (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {    include $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';}$sprites = array();if (function_exists('PMA_sprites')) {    $sprites = PMA_sprites();}// We only need the keys from the array of sprites data,// since they contain the (partial) class names$keys = array();foreach ($sprites as $key => $value) {    $keys[] = "'$key'";}?>/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string image      The name of the file to get * @param string alternate  Used to set 'alt' and 'title' attributes of the image * @param object attributes An associative array of other attributes * * @return Object The requested image, this object has two methods: *                  .toString()        - Returns the IMG tag for the requested image *                  .attr(name)        - Returns a particular attribute of the IMG *                                       tag given it's name *                  .attr(name, value) - Sets a particular attribute of the IMG *                                       tag to the given value *                And one property: *                  .isSprite          - Whether the image is a sprite or not */function PMA_getImage(image, alternate, attributes) {    var in_array = function (needle, haystack) {        for (i in haystack) {            if (haystack[i] == needle) {                return true;            }        }        return false;    };    var sprites = [        <?php echo implode($keys, ",\n        ") . "\n"; ?>    ];    // custom image object, it will eventually be returned by this functions    var retval = {        data: {            // this is private            alt: '',            title: '',            src: 'themes/dot.gif'        },        isSprite: true,        attr: function (name, value) {            if (value == undefined) {                if (this.data[name] == undefined) {                    return '';                } else {                    return this.data[name];                }            } else {                this.data[name] = value;            }        },        toString: function () {            var retval = '<' + 'img';            for (var i in this.data) {                retval += ' ' + i + '="' + this.data[i] + '"';            }            retval += ' /' + '>';            return retval;        }    };    // initialise missing parameters    if (attributes == undefined) {        attributes = {};    }    if (alternate == undefined) {        alternate = '';    }    // set alt    if (attributes.alt != undefined) {        retval.attr('alt', attributes.alt);    } else {        retval.attr('alt', alternate);    }    // set title    if (attributes.title != undefined) {        retval.attr('title', attributes.title);    } else {        retval.attr('title', alternate);    }    // set src    var klass = image.replace('.gif', '').replace('.png', '');    if (in_array(klass, sprites)) {        // it's an icon from a sprite        retval.attr('class', 'icon ic_' + klass);    } else {        // it's an image file        retval.isSprite = false;        retval.attr('src', "<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>" + image);    }    // set all other attrubutes    for (var i in attributes) {        if (i == 'src') {            // do not allow to override the 'src' attribute            continue;        } else if (i == 'class') {            retval.attr(i, retval.attr('class') + ' ' + attributes[i]);        } else {            retval.attr(i, attributes[i]);        }    }    return retval;};
<?php/** * Base class for all GIS data type classes. * * @package PhpMyAdmin-GIS */abstract class PMA_GIS_Geometry{    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public abstract function prepareRowAsSvg($spatial, $label, $color, $scale_data);    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public abstract function prepareRowAsPng($spatial, $label, $color, $scale_data, $image);    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public abstract function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf);    /**     * Prepares the JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS data object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     *     * @return the JavaScript related to a row in the GIS dataset     */    public abstract function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data);    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public abstract function scaleRow($spatial);    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public abstract function generateWkt($gis_data, $index, $empty);    /**     * Returns OpenLayers.Bounds object that correspond to the bounds of GIS data.     *     * @param string $srid       Spatial reference ID     * @param array  $scale_data Data related to scaling     *     * @return OpenLayers.Bounds object that correspond to the bounds of GIS data     */    protected function getBoundsForOl($srid, $scale_data)    {        return 'bound = new OpenLayers.Bounds(); bound.extend(new OpenLayers.LonLat('            . $scale_data['minX'] . ', ' . $scale_data['minY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject())); bound.extend(new OpenLayers.LonLat('            . $scale_data['maxX'] . ', ' . $scale_data['maxY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject()));';    }    /**     * Update the min, max values with the given point set.     *     * @param string $point_set Point set     * @param array  $min_max   Existing min, max values     *     * @return the updated min, max values     */    protected function setMinMax($point_set, $min_max)    {        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            $x = (float) $cordinates[0];            if (! isset($min_max['maxX']) || $x > $min_max['maxX']) {                $min_max['maxX'] = $x;            }            if (! isset($min_max['minX']) || $x < $min_max['minX']) {                $min_max['minX'] = $x;            }            $y = (float) $cordinates[1];            if (! isset($min_max['maxY']) || $y > $min_max['maxY']) {                $min_max['maxY'] = $y;            }            if (! isset($min_max['minY']) || $y < $min_max['minY']) {                $min_max['minY'] = $y;            }        }        return $min_max;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     * This method performs common work.     * More specific work is performed by each of the geom classes.     *     * @param $gis_string $value of the GIS column     *     * @return array parameters for the GIS editor from the value of the GIS column     */    protected function generateParams($value)    {        $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';        $srid = 0;        $wkt = '';        if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $value)) {            $last_comma = strripos($value, ",");            $srid = trim(substr($value, $last_comma + 1));            $wkt = trim(substr($value, 1, $last_comma - 2));        } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $value)) {            $wkt = $value;        }        return array('srid' => $srid, 'wkt' => $wkt);    }    /**     * Extracts points, scales and returns them as an array.     *     * @param string  $point_set  String of comma sperated points     * @param array   $scale_data Data related to scaling     * @param boolean $linear     If true, as a 1D array, else as a 2D array     *     * @return scaled points     */    protected function extractPoints($point_set, $scale_data, $linear = false)    {        $points_arr = array();        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            if (isset($cordinates[0]) && trim($cordinates[0]) != ''                && isset($cordinates[1]) && trim($cordinates[1]) != ''            ) {                if ($scale_data != null) {                    $x = ($cordinates[0] - $scale_data['x']) * $scale_data['scale'];                    $y = $scale_data['height'] - ($cordinates[1] - $scale_data['y']) * $scale_data['scale'];                } else {                    $x = trim($cordinates[0]);                    $y = trim($cordinates[1]);                }            } else {                $x = '';                $y = '';            }            if (! $linear) {                $points_arr[] = array($x, $y);            } else {                $points_arr[] = $x;                $points_arr[] = $y;            }        }        return $points_arr;    }    /**     * Generates JavaScriipt for adding points for OpenLayers polygon.     *     * @param string $polygon points of a polygon in WKT form     * @param string $srid    spatial reference id     *     * @return JavaScriipt for adding points for OpenLayers polygon     */    protected function addPointsForOpenLayersPolygon($polygon, $srid)    {        $row = 'new OpenLayers.Geometry.Polygon(new Array(';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, null);            $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point('                    . $point[0] . ', ' . $point[1] . '))'                    . '.transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= '))';        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            foreach ($parts as $ring) {                $points_arr = $this->extractPoints($ring, null);                $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';                foreach ($points_arr as $point) {                    $row .= '(new OpenLayers.Geometry.Point('                        . $point[0] . ', ' . $point[1] . '))'                        . '.transform(new OpenLayers.Projection("EPSG:'                        . $srid . '"), map.getProjectionObject()), ';                }                $row = substr($row, 0, strlen($row) - 2);                $row .= ')), ';            }            $row = substr($row, 0, strlen($row) - 2);        }        $row .= ')), ';        return $row;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions for kanji-encoding convert (available only with japanese * language) * * PHP4 configure requirements: *     --enable-mbstring --enable-mbstr-enc-trans --enable-mbregex * * 2002/2/22 - by Yukihiro Kawada <kawada@den.fujifilm.co.jp> * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets the php internal encoding codes and sets the available encoding * codes list * 2002/1/4 by Y.Kawada * * @global  string   the current encoding code * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_internal_enc_check(){    global $internal_enc, $enc_list;    $internal_enc = mb_internal_encoding();    if ($internal_enc == 'EUC-JP') {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    } else {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    }    return true;} // end of the 'PMA_internal_enc_check' function/** * Reverses SJIS & EUC-JP position in the encoding codes list * 2002/1/4 by Y.Kawada * * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_change_enc_order(){    global $enc_list;    $p            = explode(',', $enc_list);    if ($p[1] == 'EUC-JP') {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    } else {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    }    return true;} // end of the 'PMA_change_enc_order' function/** * Kanji string encoding convert * 2002/1/4 by Y.Kawada * * @param string   the string to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @global  string   the available encoding codes list * * @return  string   the converted string */function PMA_kanji_str_conv($str, $enc, $kana){    global $enc_list;    if ($enc == '' && $kana == '') {        return $str;    }    $nw       = mb_detect_encoding($str, $enc_list);    if ($kana == 'kana') {        $dist = mb_convert_kana($str, 'KV', $nw);        $str  = $dist;    }    if ($nw != $enc && $enc != '') {        $dist = mb_convert_encoding($str, $enc, $nw);    } else {        $dist = $str;    }    return $dist;} // end of the 'PMA_kanji_str_conv' function/** * Kanji file encoding convert * 2002/1/4 by Y.Kawada * * @param string   the name of the file to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @return  string   the name of the converted file */function PMA_kanji_file_conv($file, $enc, $kana){    if ($enc == '' && $kana == '') {        return $file;    }    $tmpfname = tempnam('', $enc);    $fpd      = fopen($tmpfname, 'wb');    $fps      = fopen($file, 'r');    PMA_change_enc_order();    while (!feof($fps)) {        $line = fgets($fps, 4096);        $dist = PMA_kanji_str_conv($line, $enc, $kana);        fputs($fpd, $dist);    } // end while    PMA_change_enc_order();    fclose($fps);    fclose($fpd);    unlink($file);    return $tmpfname;} // end of the 'PMA_kanji_file_conv' function/** * Defines radio form fields to switch between encoding modes * 2002/1/4 by Y.Kawada * * @param string   spaces character to prepend the output with * * @return  string   xhtml code for the radio controls */function PMA_set_enc_form($spaces){    return "\n"             /* l10n: This is currently used only in Japanese locales */           . $spaces . '<ul>' . "\n" . '<li>'           . $spaces . '<input type="radio" name="knjenc" value="" checked="checked" id="kj-none" /><label for="kj-none">' . _pgettext('None encoding conversion', 'None') . "</label>\n"           . $spaces . '<input type="radio" name="knjenc" value="EUC-JP" id="kj-euc" /><label for="kj-euc">EUC</label>' . "\n"           . $spaces . '<input type="radio" name="knjenc" value="SJIS" id="kj-sjis" /><label for="kj-sjis">SJIS</label>' . "\n"           . $spaces . '</li>' . "\n" . '<li>'           . $spaces . '<input type="checkbox" name="xkana" value="kana" id="kj-kana" />' . "\n"           /* l10n: This is currently used only in Japanese locales */           . $spaces . '<label for="kj-kana">' . __('Convert to Kana') . '</label><br />' . "\n"           . $spaces . '</li>' . "\n" . '</ul>'           ;} // end of the 'PMA_set_enc_form' functionPMA_internal_enc_check();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/common.inc.php';require_once './libraries/RecentTable.class.php';/** * Add recently used table and reload the navigation. * * @param string $db Database name where the table is located. * @param string $table The table name */function PMA_addRecentTable($db, $table){    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);    if ($tmp_result === true) {        echo '<span class="hide" id="update_recent_tables"></span>';    } else {        $error = $tmp_result;        $error->display();    }}/** * This is not an Ajax request so we need to generate all this output. */if (isset($GLOBALS['is_ajax_request']) && !$GLOBALS['is_ajax_request']) {    if (empty($GLOBALS['is_header_sent'])) {        /**         * Gets a core script and starts output buffering work         */        include_once './libraries/ob.lib.php';        PMA_outBufferPre();        // if database storage for user preferences is transient, offer to load        // exported settings from localStorage (detection will be done in JavaScript)        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'                && ! isset($_SESSION['userprefs_autoload']);        if ($userprefs_offer_import) {            $GLOBALS['js_include'][] = 'config.js';        }        // For re-usability, moved http-headers and stylesheets        // to a seperate file. It can now be included by header.inc.php,        // querywindow.php.        include_once './libraries/header_http.inc.php';        include_once './libraries/header_meta_style.inc.php';        include_once './libraries/header_scripts.inc.php';        ?>        <meta name="OBGZip" content="<?php echo ($GLOBALS['cfg']['OBGzip'] ? 'true' : 'false'); ?>" />        <?php /* remove vertical scroll bar bug in ie */ ?>        <!--[if IE 6]>        <style type="text/css">        /* <![CDATA[ */        html {            overflow-y: scroll;        }        /* ]]> */        </style>        <![endif]-->    </head>    <body>        <?php        // Include possible custom headers        if (file_exists(CUSTOM_HEADER_FILE)) {            include CUSTOM_HEADER_FILE;        }        // message of "Cookies required" displayed for auth_type http or config        // note: here, the decoration won't work because without cookies,        // our standard CSS is not operational        if (empty($_COOKIE)) {            PMA_Message::notice(__('Cookies must be enabled past this point.'))->display();        }        // offer to load user preferences from localStorage        if ($userprefs_offer_import) {            include_once './libraries/user_preferences.lib.php';            PMA_userprefs_autoload_header();        }        if (!defined('PMA_DISPLAY_HEADING')) {            define('PMA_DISPLAY_HEADING', 1);        }        // pass configuration for hint tooltip display        // (to be used by PMA_createqTip in js/functions.js)        if (! $GLOBALS['cfg']['ShowHint']) {            echo '<span id="no_hint" class="hide"></span>';        }        /**         * Display heading if needed. Design can be set in css file.         */        if (PMA_DISPLAY_HEADING && $GLOBALS['server'] > 0) {            $server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                            ? $GLOBALS['cfg']['Server']['verbose']                            : $GLOBALS['cfg']['Server']['host'] . (empty($GLOBALS['cfg']['Server']['port'])                                                                   ? ''                                                                   : ':' . $GLOBALS['cfg']['Server']['port']                                                                  )                           );            $separator = "<span class='separator item'>&nbsp;</span>\n";            $item = '<a href="%1$s?%2$s" class="item">';                if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {                    $item .= '%4$s: ';                }                $item .= '%3$s</a>' . "\n";                echo "<div id='floating_menubar'></div>\n";                echo "<div id='serverinfo'>\n";                if ($GLOBALS['cfg']['NavigationBarIconic']) {                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";                }                printf($item,                        $GLOBALS['cfg']['DefaultTabServer'],                        PMA_generate_common_url(),                        htmlspecialchars($server_info),                        __('Server'));                if (strlen($GLOBALS['db'])) {                    echo $separator;                    if ($GLOBALS['cfg']['NavigationBarIconic']) {                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";                    }                    printf($item,                            $GLOBALS['cfg']['DefaultTabDatabase'],                            PMA_generate_common_url($GLOBALS['db']),                            htmlspecialchars($GLOBALS['db']),                            __('Database'));                    // if the table is being dropped, $_REQUEST['purge'] is set to '1'                    // so do not display the table name in upper div                    if (strlen($GLOBALS['table']) && ! (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1')) {                        include_once './libraries/tbl_info.inc.php';                        echo $separator;                        if ($GLOBALS['cfg']['NavigationBarIconic']) {                            $icon = isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? 'b_views.png' : 's_tbl.png';                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";                        }                        printf($item,                            $GLOBALS['cfg']['DefaultTabTable'],                            PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']),                            str_replace(' ', '&nbsp;', htmlspecialchars($GLOBALS['table'])),                            (isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? __('View') : __('Table')));                        /**                         * Displays table comment                         */                        if (!empty($show_comment) && ! isset($GLOBALS['avoid_show_comment'])) {                            if (strstr($show_comment, '; InnoDB free')) {                                $show_comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);                            }                            echo '<span class="table_comment" id="span_table_comment">'                                .'&quot;' . htmlspecialchars($show_comment)                                .'&quot;</span>' . "\n";                        } // end if                        // add recently used table and reload the navigation                        if ($GLOBALS['cfg']['LeftRecentTable'] > 0) {                            PMA_addRecentTable($GLOBALS['db'], $GLOBALS['table']);                        }                    } else {                        // no table selected, display database comment if present                        /**                         * Settings for relations stuff                         */                        include_once './libraries/relation.lib.php';                        $cfgRelation = PMA_getRelationsParam();                        // Get additional information about tables for tooltip is done                        // in libraries/db_info.inc.php only once                        if ($cfgRelation['commwork']) {                            $comment = PMA_getDbComment($GLOBALS['db']);                            /**                             * Displays table comment                             */                            if (! empty($comment)) {                                echo '<span class="table_comment"'                                    . ' id="span_table_comment">&quot;'                                    . htmlspecialchars($comment)                                    . '&quot;</span>' . "\n";                            } // end if                        }                    }                }            }            echo '<div class="clearfloat"></div>';            echo '</div>';        }        /**         * Sets a variable to remember headers have been sent         */        $GLOBALS['is_header_sent'] = true;//end if (!$GLOBALS['is_ajax_request'])} else {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header_http.inc.php';        $GLOBALS['is_header_sent'] = true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script, then displays headers */require_once './libraries/common.inc.php';if (! isset($selected_tbl)) {    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';}/** * Gets the relations settings */$cfgRelation  = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';/** * Check parameters */PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}if ($cfgRelation['commwork']) {    $comment = PMA_getDbComment($db);    /**     * Displays DB comment     */    if ($comment) {        ?>    <p> <?php echo __('Database comment: '); ?>        <i><?php echo htmlspecialchars($comment); ?></i></p>        <?php    } // end if}/** * Selects the database and gets tables names */PMA_DBI_select_db($db);$tables = PMA_DBI_get_tables($db);$count  = 0;foreach ($tables as $table) {    $comments = PMA_getComments($db, $table);    echo '<div>' . "\n";    echo '<h2>' . htmlspecialchars($table) . '</h2>' . "\n";    /**     * Gets table informations     */    $show_comment = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_COMMENT');    /**     * Gets table keys and retains them     */    PMA_DBI_select_db($db);    $indexes      = PMA_DBI_get_table_indexes($db, $table);    $primary      = '';    $indexes      = array();    $lastIndex    = '';    $indexes_info = array();    $indexes_data = array();    $pk_array     = array(); // will be use to emphasis prim. keys in the table                             // view    foreach ($indexes as $row) {        // Backups the list of primary keys        if ($row['Key_name'] == 'PRIMARY') {            $primary   .= $row['Column_name'] . ', ';            $pk_array[$row['Column_name']] = 1;        }        // Retains keys informations        if ($row['Key_name'] != $lastIndex) {            $indexes[] = $row['Key_name'];            $lastIndex = $row['Key_name'];        }        $indexes_info[$row['Key_name']]['Sequences'][]     = $row['Seq_in_index'];        $indexes_info[$row['Key_name']]['Non_unique']      = $row['Non_unique'];        if (isset($row['Cardinality'])) {            $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];        }        // I don't know what does following column mean....        // $indexes_info[$row['Key_name']]['Packed']          = $row['Packed'];        $indexes_info[$row['Key_name']]['Comment']     = $row['Comment'];        $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name']  = $row['Column_name'];        if (isset($row['Sub_part'])) {            $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];        }    } // end while    /**     * Gets columns properties     */    $columns = PMA_DBI_get_columns($db, $table);    $fields_cnt  = count($columns);    if (PMA_MYSQL_INT_VERSION < 50025) {        // We need this to correctly learn if a TIMESTAMP is NOT NULL, since        // SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL        // and SHOW CREATE TABLE says NOT NULL        // http://bugs.mysql.com/20910.        $show_create_table = PMA_DBI_fetch_value(            'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),            0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    }    // Check if we can use Relations    if (!empty($cfgRelation['relation'])) {        // Find which tables are related with the current one and write it in        // an array        $res_rel = PMA_getForeigners($db, $table);        if (count($res_rel) > 0) {            $have_rel = true;        } else {            $have_rel = false;        }    } else {        $have_rel = false;    } // end if    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><table width="100%" class="print"><tr><th width="50"><?php echo __('Column'); ?></th>    <th width="80"><?php echo __('Type'); ?></th><?php /*    <th width="50"><?php echo __('Attributes'); ?></th>*/ ?>    <th width="40"><?php echo __('Null'); ?></th>    <th width="70"><?php echo __('Default'); ?></th><?php /*    <th width="50"><?php echo __('Extra'); ?></th>*/ ?>    <?php    if ($have_rel) {        echo '    <th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr>    <?php    $odd_row = true;    foreach ($columns as $row) {        if ($row['Null'] == '') {            $row['Null'] = 'NO';        }        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        // reformat mysql query output        // set or enum types: slashes single quotes inside options        if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {            $type_nowrap  = '';        } else {            $type_nowrap  = ' nowrap="nowrap"';        }        $type = htmlspecialchars($extracted_fieldspec['print_type']);        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = $row['Field'];        if (PMA_MYSQL_INT_VERSION < 50025         && ! empty($analyzed_sql[0]['create_table_fields'][$field_name]['type'])         && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP'         && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the            // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe            // the latter.            /**             * @todo merge this logic with the one in tbl_structure.php             * or move it in a function similar to PMA_DBI_get_columns_full()             * but based on SHOW CREATE TABLE because information_schema             * cannot be trusted in this case (MySQL bug)             */             $row['Null'] = 'NO';        }        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td nowrap="nowrap">        <?php        if (isset($pk_array[$row['Field']])) {            echo '<u>' . htmlspecialchars($field_name) . '</u>';        } else {            echo htmlspecialchars($field_name);        }        ?>    </td>    <td<?php echo $type_nowrap; ?> xml:lang="en" dir="ltr"><?php echo $type; ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $attribute; ?></td>*/ ?>    <td><?php echo (($row['Null'] == 'NO') ? __('No') : __('Yes')); ?></td>    <td nowrap="nowrap"><?php if (isset($row['Default'])) { echo $row['Default']; } ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $row['Extra']; ?></td>*/ ?>        <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '</td>' . "\n";        }        echo '    <td>';        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '</td>' . "\n";        }        ?></tr>        <?php    } // end foreach    $count++;    ?></table></div>    <?php} //ends main while/** * Displays the footer */PMA_printButton();require './libraries/footer.inc.php';?>
<?php/** * Overview (main page) * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/display_select_lang.lib.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';// prepare unfiltered language list$all_languages = PMA_langList();uasort($all_languages, 'PMA_language_cmp');$cf = ConfigFile::getInstance();$separator = PMA_get_arg_separator('html');// message handlingmessages_begin();//// Check phpMyAdmin version//if (isset($_GET['version_check'])) {    PMA_version_check();}//// Perform various security, compatibility and consistency checks//perform_config_checks();//// Check whether we can read/write configuration//$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);if (!$config_writable || !$config_readable) {    messages_set('error', 'config_rw', __('Cannot load or save configuration'),        PMA_lang(__('Please create web server writable folder [em]config[/em] in phpMyAdmin top level directory as described in [a@Documentation.html#setup_script]documentation[/a]. Otherwise you will be only able to download or display it.')));}//// Check https connection//$is_https = !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';if (!$is_https) {    $text = __('You are not using a secure connection; all data (including potentially sensitive information, like passwords) is transferred unencrypted!');    if (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {        $link = 'https://' . htmlspecialchars($_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);        $strInsecureConnectionMsg2 = __('If your server is also configured to accept HTTPS requests follow [a@%s]this link[/a] to use a secure connection.');        $strInsecureConnectionMsg2 = sprintf($strInsecureConnectionMsg2, $link);        $text .= ' ' . PMA_lang($strInsecureConnectionMsg2);    }    messages_set('notice', 'no_https', __('Insecure connection'), $text);}?><form id="select_lang" method="post" action="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']) ?>">    <?php echo PMA_generate_common_hidden_inputs() ?>    <bdo xml:lang="en" dir="ltr"><label for="lang">    <?php echo __('Language') . (__('Language') != 'Language' ? ' - Language' : '') ?>    </label></bdo><br />    <select id="lang" name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    // create language list    $lang_list = array();    foreach ($all_languages as $each_lang_key => $each_lang) {        $lang_name = PMA_langName($each_lang);        //Is current one active?        $selected = ($GLOBALS['lang'] == $each_lang_key) ? ' selected="selected"' : '';        echo '<option value="' . $each_lang_key . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select></form><?php// Check for done action info and set notice message if presentswitch ($action_done) {    case 'config_saved':        /* Use uniqid to display this message every time configuration is saved */        messages_set('notice', uniqid('config_saved'), __('Configuration saved.'),            PMA_lang(__('Configuration saved to file config/config.inc.php in phpMyAdmin top level directory, copy it to top level one and delete directory config to use it.')));        break;    default:        break;}?><h2><?php echo __('Overview') ?></h2><?php// message handlingmessages_end();messages_show_html();?><a href="#" id="show_hidden_messages" style="display:none"><?php echo __('Show hidden messages (#MSG_COUNT)') ?></a><h3><?php echo __('Servers') ?></h3><?php//// Display server list//display_form_top('index.php', 'get', array(    'page' => 'servers',    'mode' => 'add'));?><div class="form"><?php if ($cf->getServerCount() > 0): ?><table cellspacing="0" class="datatable" style="table-layout: fixed"><tr>    <th>#</th>    <th><?php echo __('Name') ?></th>    <th><?php echo __('Authentication type') ?></th>    <th colspan="2">DSN</th></tr><?php foreach ($cf->getServers() as $id => $server): ?><tr>    <td><?php echo $id ?></td>    <td><?php echo htmlspecialchars($cf->getServerName($id)) ?></td>    <td><?php echo htmlspecialchars($cf->getValue("Servers/$id/auth_type")) ?></td>    <td><?php echo htmlspecialchars($cf->getServerDSN($id)) ?></td>    <td style="white-space: nowrap">        <small>        <a href="<?php echo "?page=servers{$separator}mode=edit{$separator}id=$id" ?>"><?php echo __('Edit') ?></a>        | <a href="<?php echo "?page=servers{$separator}mode=remove{$separator}id=$id" ?>"><?php echo __('Delete') ?></a>        </small>    </td></tr><?php endforeach; ?></table><?php else: ?><table width="100%"><tr>    <td>        <i><?php echo __('There are no configured servers') ?></i>    </td></tr></table><?php endif; ?><table width="100%"><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit" value="<?php echo __('New server') ?>" />    </td></tr></table></div><?phpdisplay_form_bottom();?><h3><?php echo __('Configuration file') ?></h3><?php//// Display config file settings and load/save form//$form_display = new FormDisplay();display_form_top('config.php');display_fieldset_top('', '', null, array('class' => 'simple'));// Display language list$opts = array(    'doc' => $form_display->getDocLink('DefaultLang'),    'wiki' => $form_display->getWikiLink('DefaultLang'),    'values' => array(),    'values_escaped' => true);foreach ($all_languages as $each_lang_key => $each_lang) {    $lang_name = PMA_langName($each_lang);    $opts['values'][$each_lang_key] = $lang_name;}display_input('DefaultLang', __('Default language'), '', 'select',    $cf->getValue('DefaultLang'), true, $opts);// Display server list$opts = array(    'doc' => $form_display->getDocLink('ServerDefault'),    'wiki' => $form_display->getWikiLink('ServerDefault'),    'values' => array(),    'values_disabled' => array());if ($cf->getServerCount() > 0) {    $opts['values']['0'] = __('let the user choose');    $opts['values']['-'] = '------------------------------';    if ($cf->getServerCount() == 1) {        $opts['values_disabled'][] = '0';    }    $opts['values_disabled'][] = '-';    foreach ($cf->getServers() as $id => $server) {        $opts['values'][(string)$id] = $cf->getServerName($id) . " [$id]";    }} else {    $opts['values']['1'] = __('- none -');    $opts['values_escaped'] = true;}display_input('ServerDefault', __('Default server'), '', 'select',    $cf->getValue('ServerDefault'), true, $opts);// Display EOL list$opts = array(    'values' => array(        'unix' => 'UNIX / Linux (\n)',        'win' => 'Windows (\r\n)'),    'values_escaped' => true);$eol = PMA_ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));display_input('eol', __('End of line'), '', 'select',    $eol, true, $opts);?><tr>    <td colspan="2" class="lastrow" style="text-align: left">        <input type="submit" name="submit_display" value="<?php echo __('Display') ?>" />        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" />        &nbsp; &nbsp;        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_load" value="<?php echo __('Load') ?>"<?php if (!$config_exists) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_delete" value="<?php echo __('Delete') ?>"<?php if (!$config_exists || !$config_writable) echo ' disabled="disabled"' ?> />        &nbsp; &nbsp;        <input type="submit" name="submit_clear" value="<?php echo __('Clear') ?>" class="red" />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?><div id="footer">    <a href="http://phpmyadmin.net"><?php echo __('phpMyAdmin homepage') ?></a>    <a href="http://sourceforge.net/donate/index.php?group_id=23067"><?php echo __('Donate') ?></a>    <a href="?version_check=1<?php echo "{$separator}token=" . $_SESSION[' PMA_token '] ?>"><?php echo __('Check for latest version') ?></a></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_myisam extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'myisam_data_pointer_size' => array(                'title' => __('Data pointer size'),                'desc'  => __('The default pointer size in bytes, to be used by CREATE TABLE for MyISAM tables when no MAX_ROWS option is specified.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_recover_options' => array(                'title' => __('Automatic recovery mode'),                'desc'  => __('The mode for automatic recovery of crashed MyISAM tables, as set via the --myisam-recover server startup option.'),            ),            'myisam_max_sort_file_size' => array(                'title' => __('Maximum size for temporary sort files'),                'desc'  => __('The maximum size of the temporary file MySQL is allowed to use while re-creating a MyISAM index (during REPAIR TABLE, ALTER TABLE, or LOAD DATA INFILE).'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_max_extra_sort_file_size' => array(                'title' => __('Maximum size for temporary files on index creation'),                'desc'  => __('If the temporary file used for fast MyISAM index creation would be larger than using the key cache by the amount specified here, prefer the key cache method.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_repair_threads' => array(                'title' => __('Repair threads'),                'desc'  => __('If this value is greater than 1, MyISAM table indexes are created in parallel (each index in its own thread) during the repair by sorting process.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'myisam_sort_buffer_size' => array(                'title' => __('Sort buffer size'),                'desc'  => __('The buffer that is allocated when sorting MyISAM indexes during a REPAIR TABLE or when creating indexes with CREATE INDEX or ALTER TABLE.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'myisam_stats_method' => array(            ),            'delay_key_write' => array(            ),            'bulk_insert_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'skip_external_locking' => array(            ),        );    }}?>
