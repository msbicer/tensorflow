<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Gets the list of the table in the current db and informations about these * tables if possible * * fills tooltip arrays and provides $tables, $num_tables, $is_show_stats * and $db_is_information_schema * * speedup view on locked tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';/** * limits for table list */if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];}$pos = $_SESSION['tmp_user_values']['table_limit_offset'];/** * fills given tooltip arrays * * @param array   $tooltip_truename   tooltip data * @param array   $tooltip_aliasname  tooltip data * @param array   $table              tabledata */function PMA_fillTooltip(&$tooltip_truename, &$tooltip_aliasname, $table){    if (strstr($table['Comment'], '; InnoDB free') === false) {        if (!strstr($table['Comment'], 'InnoDB free') === false) {            // here we have just InnoDB generated part            $table['Comment'] = '';        }    } else {        // remove InnoDB comment from end, just the minimal part (*? is non greedy)        $table['Comment'] = preg_replace('@; InnoDB free:.*?$@', '', $table['Comment']);    }    // views have VIEW as comment so it's not a real comment put by a user    if ('VIEW' == $table['Comment']) {        $table['Comment'] = '';    }    if (empty($table['Comment'])) {        $table['Comment'] = $table['Name'];    } else {        // why?        $table['Comment'] .= ' ';    }    if ($GLOBALS['cfg']['ShowTooltipAliasTB']     && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested') {        $tooltip_truename[$table['Name']] = $table['Comment'];        $tooltip_aliasname[$table['Name']] = $table['Name'];    } else {        $tooltip_truename[$table['Name']] = $table['Name'];        $tooltip_aliasname[$table['Name']] = $table['Comment'];    }    if (isset($table['Create_time']) && !empty($table['Create_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Creation')             . ': ' . PMA_localisedDate(strtotime($table['Create_time']));    }    if (! empty($table['Update_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last update')             . ': ' . PMA_localisedDate(strtotime($table['Update_time']));    }    if (! empty($table['Check_time'])) {        $tooltip_aliasname[$table['Name']] .= ', ' . __('Last check')             . ': ' . PMA_localisedDate(strtotime($table['Check_time']));    }}PMA_checkParameters(array('db'));/** * @global bool whether to display extended stats */$is_show_stats = $cfg['ShowStats'];/** * @global bool whether selected db is information_schema */$db_is_information_schema = false;if (PMA_is_system_schema($db)) {    $is_show_stats = false;    $db_is_information_schema = true;}/** * @global array information about tables in db */$tables = array();// When used in Nested table group mode, only show tables matching the given groupnameif (PMA_isValid($tbl_group) && !$cfg['ShowTooltipAliasTB']) {    $tbl_group_sql = ' LIKE "' . PMA_escape_mysql_wildcards($tbl_group) . '%"';} else {    $tbl_group_sql = '';}if ($cfg['ShowTooltip']) {    $tooltip_truename = array();    $tooltip_aliasname = array();}// Special speedup for newer MySQL Versions (in 4.0 format changed)if (true === $cfg['SkipLockedTables']) {    $db_info_result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {        while ($tmp = PMA_DBI_fetch_row($db_info_result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[1])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($db_info_result);        if (isset($sot_cache)) {            $db_info_result = PMA_DBI_query(                'SHOW TABLES FROM ' . PMA_backquote($db) . $tbl_group_sql . ';',                null, PMA_DBI_QUERY_STORE);            if ($db_info_result && PMA_DBI_num_rows($db_info_result) > 0) {                while ($tmp = PMA_DBI_fetch_row($db_info_result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query(                            'SHOW TABLE STATUS FROM ' . PMA_backquote($db)                             . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        PMA_DBI_free_result($sts_result);                        unset($sts_result);                        if (! isset($sts_tmp['Type']) && isset($sts_tmp['Engine'])) {                            $sts_tmp['Type'] =& $sts_tmp['Engine'];                        }                        if (!empty($tbl_group) && $cfg['ShowTooltipAliasTB']                         && !preg_match('@' . preg_quote($tbl_group, '@') . '@i', $sts_tmp['Comment'])) {                            continue;                        }                        if ($cfg['ShowTooltip']) {                            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $sts_tmp);                        }                        $tables[$sts_tmp['Name']]    = $sts_tmp;                    } else { // table in use                        $tables[$tmp[0]]    = array('Name' => $tmp[0]);                    }                }                if ($GLOBALS['cfg']['NaturalOrder']) {                    uksort($tables, 'strnatcasecmp');                }                $sot_ready = true;            } elseif ($db_info_result) {                PMA_DBI_free_result($db_info_result);            }            unset($sot_cache);        }        unset($tmp);    } elseif ($db_info_result) {        PMA_DBI_free_result($db_info_result);    }}if (! isset($sot_ready)) {    // Set some sorting defaults    $sort = 'Name';    $sort_order = 'ASC';    if (isset($_REQUEST['sort'])) {        $sortable_name_mappings = array(            'table'     => 'Name',            'records'   => 'Rows',            'type'      => 'Engine',            'collation' => 'Collation',            'size'      => 'Data_length',            'overhead'  => 'Data_free'        );        // Make sure the sort type is implemented        if (isset($sortable_name_mappings[$_REQUEST['sort']])) {            $sort = $sortable_name_mappings[$_REQUEST['sort']];            if ($_REQUEST['sort_order'] == 'DESC') {                $sort_order = 'DESC';            }        }    }    if (! empty($tbl_group) && ! $cfg['ShowTooltipAliasTB']) {        // only tables for selected group        $tables = PMA_DBI_get_tables_full($db, $tbl_group, true, null, 0, false, $sort, $sort_order);    } elseif (! empty($tbl_group) && $cfg['ShowTooltipAliasTB']) {        // only tables for selected group,        // but grouping is done on comment ...        $tables = PMA_DBI_get_tables_full($db, $tbl_group, 'comment', null, 0, false, $sort, $sort_order);    } else {        // all tables in db        // - get the total number of tables        //  (needed for proper working of the MaxTableList feature)        $tables = PMA_DBI_get_tables($db);        $total_num_tables = count($tables);        if (isset($sub_part) && $sub_part == '_export') {            // (don't fetch only a subset if we are coming from db_export.php,            // because I think it's too risky to display only a subset of the            // table names when exporting a db)            /**             *             * @todo Page selector for table names?             */            $tables = PMA_DBI_get_tables_full($db, false, false, null, 0, false, $sort, $sort_order);        } else {            // fetch the details for a possible limited subset            $tables = PMA_DBI_get_tables_full($db, false, false, null, $pos, true, $sort, $sort_order);        }    }    if ($cfg['ShowTooltip']) {        foreach ($tables as $each_table) {            PMA_fillTooltip($tooltip_truename, $tooltip_aliasname, $each_table);        }    }}/** * @global int count of tables in db */$num_tables = count($tables);//  (needed for proper working of the MaxTableList feature)if (! isset($total_num_tables)) {    $total_num_tables = $num_tables;}/** * cleanup */unset($each_table, $tbl_group_sql, $db_info_result);/** * Displays top menu links * If in an Ajax request, we do not need to show this */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_links.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** SQL Parser Functions for phpMyAdmin * * These functions define an SQL parser system, capable of understanding and * extracting data from a MySQL type SQL query. * * The basic procedure for using the new SQL parser: * On any page that needs to extract data from a query or to pretty-print a * query, you need code like this up at the top: * * ($sql contains the query) * $parsed_sql = PMA_SQP_parse($sql); * * If you want to extract data from it then, you just need to run * $sql_info = PMA_SQP_analyze($parsed_sql); * * See comments in PMA_SQP_analyze for the returned info * from the analyzer. * * If you want a pretty-printed version of the query, do: * $string = PMA_SQP_formatHtml($parsed_sql); * (note that that you need to have syntax.css.php included somehow in your * page for it to work, I recommend '<link rel="stylesheet" type="text/css" * href="syntax.css.php" />' at the moment.) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Minimum inclusion? (i.e. for the stylesheet builder) */if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Include the string library as we use it heavily     */    include_once './libraries/string.lib.php';    /**     * Include data for the SQL Parser     */    include_once './libraries/sqlparser.data.php';    if (!defined('TESTSUITE')) {        include_once './libraries/mysql_charsets.lib.php';    }    if (! isset($mysql_charsets)) {        $mysql_charsets = array();        $mysql_collations_flat = array();    }    if (!defined('DEBUG_TIMING')) {        /**         * currently we don't need the $pos (token position in query)         * for other purposes than LIMIT clause verification,         * so many calls to this function do not include the 4th parameter         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            $arr[] = array('type' => $type, 'data' => $data, 'pos' => $pos);            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } else {        /**         * This is debug variant of above.         * @ignore         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            global $timer;            $t     = $timer;            $arr[] = array(                'type' => $type,                'data' => $data,                'pos' => $pos,                'time' => $t);            $timer = microtime();            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } // end if... else...    /**     * Reset the error variable for the SQL parser     *     * @access public     */    function PMA_SQP_resetError()    {        global $SQP_errorString;        $SQP_errorString = '';        unset($SQP_errorString);    }    /**     * Get the contents of the error variable for the SQL parser     *     * @return string Error string from SQL parser     *     * @access public     */    function PMA_SQP_getErrorString()    {        global $SQP_errorString;        return isset($SQP_errorString) ? $SQP_errorString : '';    }    /**     * Check if the SQL parser hit an error     *     * @return boolean error state     *     * @access public     */    function PMA_SQP_isError()    {        global $SQP_errorString;        return isset($SQP_errorString) && !empty($SQP_errorString);    }    /**     * Set an error message for the system     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access private     * @scope SQL Parser internal     */    function PMA_SQP_throwError($message, $sql)    {        global $SQP_errorString;        $SQP_errorString = '<p>'.__('There seems to be an error in your SQL query. The MySQL server error output below, if there is any, may also help you in diagnosing the problem') . '</p>' . "\n"            . '<pre>' . "\n"            . 'ERROR: ' . $message . "\n"            . 'SQL: ' . htmlspecialchars($sql) .  "\n"            . '</pre>' . "\n";    } // end of the "PMA_SQP_throwError()" function    /**     * Do display the bug report     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access public     */    function PMA_SQP_bug($message, $sql)    {        global $SQP_errorString;        $debugstr = 'ERROR: ' . $message . "\n";        $debugstr .= 'MySQL: '.PMA_MYSQL_STR_VERSION . "\n";        $debugstr .= 'USR OS, AGENT, VER: ' . PMA_USR_OS . ' ';        $debugstr .= PMA_USR_BROWSER_AGENT . ' ' . PMA_USR_BROWSER_VER . "\n";        $debugstr .= 'PMA: ' . PMA_VERSION . "\n";        $debugstr .= 'PHP VER,OS: ' . PMA_PHP_STR_VERSION . ' ' . PHP_OS . "\n";        $debugstr .= 'LANG: ' . $GLOBALS['lang'] . "\n";        $debugstr .= 'SQL: ' . htmlspecialchars($sql);        $encodedstr     = $debugstr;        if (@function_exists('gzcompress')) {            $encodedstr = gzcompress($debugstr, 9);        }        $encodedstr     = preg_replace(            "/(\015\012)|(\015)|(\012)/",            '<br />' . "\n",            chunk_split(base64_encode($encodedstr)));        $SQP_errorString .= __('There is a chance that you may have found a bug in the SQL parser. Please examine your query closely, and check that the quotes are correct and not mis-matched. Other possible failure causes may be that you are uploading a file with binary outside of a quoted text area. You can also try your query on the MySQL command line interface. The MySQL server error output below, if there is any, may also help you in diagnosing the problem. If you still have problems or if the parser fails where the command line interface succeeds, please reduce your SQL query input to the single query that causes problems, and submit a bug report with the data chunk in the CUT section below:')             . '<br />' . "\n"             . '----' . __('BEGIN CUT') . '----' . '<br />' . "\n"             . $encodedstr . "\n"             . '----' . __('END CUT') . '----' . '<br />' . "\n";        $SQP_errorString .= '----' . __('BEGIN RAW') . '----<br />' . "\n"             . '<pre>' . "\n"             . $debugstr             . '</pre>' . "\n"             . '----' . __('END RAW') . '----<br />' . "\n";    } // end of the "PMA_SQP_bug()" function    /**     * Parses the SQL queries     *     * @param string   The SQL query list     *     * @return mixed    Most of times, nothing...     *     * @global array    The current PMA configuration     * @global array    MySQL column attributes     * @global array    MySQL reserved words     * @global array    MySQL column types     * @global array    MySQL function names     * @global array    List of available character sets     * @global array    List of available collations     *     * @access public     */    function PMA_SQP_parse($sql)    {        static $PMA_SQPdata_column_attrib, $PMA_SQPdata_reserved_word;        static $PMA_SQPdata_column_type;        static $PMA_SQPdata_function_name, $PMA_SQPdata_forbidden_word;        global $mysql_charsets, $mysql_collations_flat;        // Convert all line feeds to Unix style        $sql = str_replace("\r\n", "\n", $sql);        $sql = str_replace("\r", "\n", $sql);        $len = PMA_strlen($sql);        if ($len == 0) {            return array();        }        // Create local hashtables        if (!isset($PMA_SQPdata_column_attrib)) {            $PMA_SQPdata_column_attrib  = array_flip(                $GLOBALS['PMA_SQPdata_column_attrib']                );            $PMA_SQPdata_function_name  = array_flip(                $GLOBALS['PMA_SQPdata_function_name']                );            $PMA_SQPdata_reserved_word  = array_flip(                $GLOBALS['PMA_SQPdata_reserved_word']                );            $PMA_SQPdata_forbidden_word = array_flip(                $GLOBALS['PMA_SQPdata_forbidden_word']                );            $PMA_SQPdata_column_type    = array_flip(                $GLOBALS['PMA_SQPdata_column_type']                );        }        $sql_array               = array();        $sql_array['raw']        = $sql;        $count1                  = 0;        $count2                  = 0;        $punct_queryend          = ';';        $punct_qualifier         = '.';        $punct_listsep           = ',';        $punct_level_plus        = '(';        $punct_level_minus       = ')';        $punct_user              = '@';        $digit_floatdecimal      = '.';        $digit_hexset            = 'x';        $bracket_list            = '()[]{}';        $allpunct_list           =  '-,;:!?/.^~\*&%+<=>|';        $allpunct_list_pair      = array(            '!=' => 1,            '&&' => 1,            ':=' => 1,            '<<' => 1,            '<=' => 1,            '<=>' => 1,            '<>' => 1,            '>=' => 1,            '>>' => 1,            '||' => 1,            '==' => 1        );        $quote_list              = '\'"`';        $arraysize               = 0;        $previous_was_space   = false;        $this_was_space       = false;        $previous_was_bracket = false;        $this_was_bracket     = false;        $previous_was_punct   = false;        $this_was_punct       = false;        $previous_was_listsep = false;        $this_was_listsep     = false;        $previous_was_quote   = false;        $this_was_quote       = false;        while ($count2 < $len) {            $c      = PMA_substr($sql, $count2, 1);            $count1 = $count2;            $previous_was_space = $this_was_space;            $this_was_space = false;            $previous_was_bracket = $this_was_bracket;            $this_was_bracket = false;            $previous_was_punct = $this_was_punct;            $this_was_punct = false;            $previous_was_listsep = $this_was_listsep;            $this_was_listsep = false;            $previous_was_quote = $this_was_quote;            $this_was_quote = false;            if (($c == "\n")) {                $this_was_space = true;                $count2++;                PMA_SQP_arrayAdd($sql_array, 'white_newline', '', $arraysize);                continue;            }            // Checks for white space            if (PMA_STR_isSpace($c)) {                $this_was_space = true;                $count2++;                continue;            }            // Checks for comment lines.            // MySQL style #            // C style /* */            // ANSI style --            $next_c = PMA_substr($sql, $count2 + 1, 1);            if (($c == '#')                || (($count2 + 1 < $len) && ($c == '/') && ($next_c == '*'))                || (($count2 + 2 == $len) && ($c == '-') && ($next_c == '-'))                || (($count2 + 2 < $len) && ($c == '-') && ($next_c == '-') && ((PMA_substr($sql, $count2 + 2, 1) <= ' ')))) {                $count2++;                $pos  = 0;                $type = 'bad';                switch ($c) {                case '#':                    $type = 'mysql';                case '-':                    $type = 'ansi';                    $pos  = PMA_strpos($sql, "\n", $count2);                    break;                case '/':                    $type = 'c';                    $pos  = PMA_strpos($sql, '*/', $count2);                    $pos  += 2;                    break;                default:                    break;                } // end switch                $count2 = ($pos < $count2) ? $len : $pos;                $str    = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, 'comment_' . $type, $str, $arraysize);                continue;            } // end if            // Checks for something inside quotation marks            if (PMA_strpos($quote_list, $c) !== false) {                $startquotepos   = $count2;                $quotetype       = $c;                $count2++;                $escaped         = false;                $pos             = $count2;                $oldpos          = 0;                do {                    $oldpos = $pos;                    $pos    = PMA_strpos(' ' . $sql, $quotetype, $oldpos + 1) - 1;                    // ($pos === false)                    if ($pos < 0) {                        if ($c == '`') {                            /*                             * Behave same as MySQL and accept end of query as end of backtick.                             * I know this is sick, but MySQL behaves like this:                             *                             * SELECT * FROM `table                             *                             * is treated like                             *                             * SELECT * FROM `table`                             */                            $pos_quote_separator = PMA_strpos(' ' . $sql, $GLOBALS['sql_delimiter'], $oldpos + 1) - 1;                            if ($pos_quote_separator < 0) {                                $len += 1;                                $sql .= '`';                                $sql_array['raw'] .= '`';                                $pos = $len;                            } else {                                $len += 1;                                $sql = PMA_substr($sql, 0, $pos_quote_separator) . '`' . PMA_substr($sql, $pos_quote_separator);                                $sql_array['raw'] = $sql;                                $pos = $pos_quote_separator;                            }                            if (class_exists('PMA_Message') && $GLOBALS['is_ajax_request'] != true) {                                PMA_Message::notice(__('Automatically appended backtick to the end of query!'))->display();                            }                        } else {                            $debugstr = __('Unclosed quote') . ' @ ' . $startquotepos. "\n"                                      . 'STR: ' . htmlspecialchars($quotetype);                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    // If the quote is the first character, it can't be                    // escaped, so don't do the rest of the code                    if ($pos == 0) {                        break;                    }                    // Checks for MySQL escaping using a \                    // And checks for ANSI escaping using the $quotetype character                    if (($pos < $len) && PMA_STR_charIsEscaped($sql, $pos) && $c != '`') {                        $pos ++;                        continue;                    } elseif (($pos + 1 < $len) && (PMA_substr($sql, $pos, 1) == $quotetype) && (PMA_substr($sql, $pos + 1, 1) == $quotetype)) {                        $pos = $pos + 2;                        continue;                    } else {                        break;                    }                } while ($len > $pos); // end do                $count2       = $pos;                $count2++;                $type         = 'quote_';                switch ($quotetype) {                case '\'':                    $type .= 'single';                    $this_was_quote = true;                    break;                case '"':                    $type .= 'double';                    $this_was_quote = true;                    break;                case '`':                    $type .= 'backtick';                    $this_was_quote = true;                    break;                default:                    break;                } // end switch                $data = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, $type, $data, $arraysize);                continue;            }            // Checks for brackets            if (PMA_strpos($bracket_list, $c) !== false) {                // All bracket tokens are only one item long                $this_was_bracket = true;                $count2++;                $type_type     = '';                if (PMA_strpos('([{', $c) !== false) {                    $type_type = 'open';                } else {                    $type_type = 'close';                }                $type_style     = '';                if (PMA_strpos('()', $c) !== false) {                    $type_style = 'round';                } elseif (PMA_strpos('[]', $c) !== false) {                    $type_style = 'square';                } else {                    $type_style = 'curly';                }                $type = 'punct_bracket_' . $type_type . '_' . $type_style;                PMA_SQP_arrayAdd($sql_array, $type, $c, $arraysize);                continue;            }            /* DEBUG            echo '<pre>1';            var_dump(PMA_STR_isSqlIdentifier($c, false));            var_dump($c == '@');            var_dump($c == '.');            var_dump(PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1)));            var_dump($previous_was_space);            var_dump($previous_was_bracket);            var_dump($previous_was_listsep);            echo '</pre>';            */            // Checks for identifier (alpha or numeric)            if (PMA_STR_isSqlIdentifier($c, false)             || $c == '@'             || ($c == '.'              && PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1))              && ($previous_was_space || $previous_was_bracket || $previous_was_listsep))) {                /* DEBUG                echo PMA_substr($sql, $count2);                echo '<hr />';                */                $count2++;                /**                 * @todo a @ can also be present in expressions like                 * FROM 'user'@'%' or  TO 'user'@'%'                 * in this case, the @ is wrongly marked as alpha_variable                 */                $is_identifier           = $previous_was_punct;                $is_sql_variable         = $c == '@' && ! $previous_was_quote;                $is_user                 = $c == '@' && $previous_was_quote;                $is_digit                = !$is_identifier && !$is_sql_variable && PMA_STR_isDigit($c);                $is_hex_digit            = $is_digit && $c == '0' && $count2 < $len && PMA_substr($sql, $count2, 1) == 'x';                $is_float_digit          = $c == '.';                $is_float_digit_exponent = false;                /* DEBUG                echo '<pre>2';                var_dump($is_identifier);                var_dump($is_sql_variable);                var_dump($is_digit);                var_dump($is_float_digit);                echo '</pre>';                 */                // Fast skip is especially needed for huge BLOB data                if ($is_hex_digit) {                    $count2++;                    $pos = strspn($sql, '0123456789abcdefABCDEF', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                } elseif ($is_digit) {                    $pos = strspn($sql, '0123456789', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                }                while (($count2 < $len) && PMA_STR_isSqlIdentifier(PMA_substr($sql, $count2, 1), ($is_sql_variable || $is_digit))) {                    $c2 = PMA_substr($sql, $count2, 1);                    if ($is_sql_variable && ($c2 == '.')) {                        $count2++;                        continue;                    }                    if ($is_digit && (!$is_hex_digit) && ($c2 == '.')) {                        $count2++;                        if (!$is_float_digit) {                            $is_float_digit = true;                            continue;                        } else {                            $debugstr = __('Invalid Identifer') . ' @ ' . ($count1+1) . "\n"                                      . 'STR: ' . htmlspecialchars(PMA_substr($sql, $count1, $count2 - $count1));                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    if ($is_digit && (!$is_hex_digit) && (($c2 == 'e') || ($c2 == 'E'))) {                        if (!$is_float_digit_exponent) {                            $is_float_digit_exponent = true;                            $is_float_digit          = true;                            $count2++;                            continue;                        } else {                            $is_digit                = false;                            $is_float_digit          = false;                        }                    }                    if (($is_hex_digit && PMA_STR_isHexDigit($c2)) || ($is_digit && PMA_STR_isDigit($c2))) {                        $count2++;                        continue;                    } else {                        $is_digit     = false;                        $is_hex_digit = false;                    }                    $count2++;                } // end while                $l    = $count2 - $count1;                $str  = PMA_substr($sql, $count1, $l);                $type = '';                if ($is_digit || $is_float_digit || $is_hex_digit) {                    $type     = 'digit';                    if ($is_float_digit) {                        $type .= '_float';                    } elseif ($is_hex_digit) {                        $type .= '_hex';                    } else {                        $type .= '_integer';                    }                } elseif ($is_user) {                    $type = 'punct_user';                } elseif ($is_sql_variable != false) {                    $type = 'alpha_variable';                } else {                    $type = 'alpha';                } // end if... else....                PMA_SQP_arrayAdd($sql_array, $type, $str, $arraysize, $count2);                continue;            }            // Checks for punct            if (PMA_strpos($allpunct_list, $c) !== false) {                while (($count2 < $len) && PMA_strpos($allpunct_list, PMA_substr($sql, $count2, 1)) !== false) {                    $count2++;                }                $l = $count2 - $count1;                if ($l == 1) {                    $punct_data = $c;                } else {                    $punct_data = PMA_substr($sql, $count1, $l);                }                // Special case, sometimes, althought two characters are                // adjectent directly, they ACTUALLY need to be seperate                /* DEBUG                echo '<pre>';                var_dump($l);                var_dump($punct_data);                echo '</pre>';                */                if ($l == 1) {                    $t_suffix         = '';                    switch ($punct_data) {                    case $punct_queryend:                        $t_suffix = '_queryend';                        break;                    case $punct_qualifier:                        $t_suffix = '_qualifier';                        $this_was_punct = true;                        break;                    case $punct_listsep:                        $this_was_listsep = true;                        $t_suffix = '_listsep';                        break;                    default:                        break;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct' . $t_suffix, $punct_data, $arraysize);                } elseif ($punct_data == $GLOBALS['sql_delimiter'] || isset($allpunct_list_pair[$punct_data])) {                    // Ok, we have one of the valid combined punct expressions                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                } else {                    // Bad luck, lets split it up more                    $first  = $punct_data[0];                    $first2 = $punct_data[0] . $punct_data[1];                    $last2  = $punct_data[$l - 2] . $punct_data[$l - 1];                    $last   = $punct_data[$l - 1];                    if (($first == ',') || ($first == ';') || ($first == '.') || ($first == '*')) {                        $count2     = $count1 + 1;                        $punct_data = $first;                    } elseif (($last2 == '/*') || (($last2 == '--') && ($count2 == $len || PMA_substr($sql, $count2, 1) <= ' '))) {                        $count2     -= 2;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif (($last == '-') || ($last == '+') || ($last == '!')) {                        $count2--;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif ($last != '~') {                        /**                         * @todo for negation operator, split in 2 tokens ?                         * "select x&~1 from t"                         * becomes "select x & ~ 1 from t" ?                         */                        $debugstr =  __('Unknown Punctuation String') . ' @ ' . ($count1+1) . "\n"                                  . 'STR: ' . htmlspecialchars($punct_data);                        PMA_SQP_throwError($debugstr, $sql);                        return $sql_array;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                    continue;                } // end if... elseif... else                continue;            }            // DEBUG            $count2++;            $debugstr = 'C1 C2 LEN: ' . $count1 . ' ' . $count2 . ' ' . $len .  "\n"                      . 'STR: ' . PMA_substr($sql, $count1, $count2 - $count1) . "\n";            PMA_SQP_bug($debugstr, $sql);            return $sql_array;        } // end while ($count2 < $len)        /*        echo '<pre>';        print_r($sql_array);        echo '</pre>';        */        if ($arraysize > 0) {            $t_next           = $sql_array[0]['type'];            $t_prev           = '';            $t_bef_prev       = '';            $t_cur            = '';            $d_next           = $sql_array[0]['data'];            $d_prev           = '';            $d_bef_prev       = '';            $d_cur            = '';            $d_next_upper     = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            $d_prev_upper     = '';            $d_bef_prev_upper = '';            $d_cur_upper      = '';        }        for ($i = 0; $i < $arraysize; $i++) {            $t_bef_prev       = $t_prev;            $t_prev           = $t_cur;            $t_cur            = $t_next;            $d_bef_prev       = $d_prev;            $d_prev           = $d_cur;            $d_cur            = $d_next;            $d_bef_prev_upper = $d_prev_upper;            $d_prev_upper     = $d_cur_upper;            $d_cur_upper      = $d_next_upper;            if (($i + 1) < $arraysize) {                $t_next = $sql_array[$i + 1]['type'];                $d_next = $sql_array[$i + 1]['data'];                $d_next_upper = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            } else {                $t_next       = '';                $d_next       = '';                $d_next_upper = '';            }            //DEBUG echo "[prev: <strong>".$d_prev."</strong> ".$t_prev."][cur: <strong>".$d_cur."</strong> ".$t_cur."][next: <strong>".$d_next."</strong> ".$t_next."]<br />";            if ($t_cur == 'alpha') {                $t_suffix     = '_identifier';                // for example: `thebit` bit(8) NOT NULL DEFAULT b'0'                if ($t_prev == 'alpha' && $d_prev == 'DEFAULT' && $d_cur == 'b' && $t_next == 'quote_single') {                    $t_suffix = '_bitfield_constant_introducer';                } elseif (($t_next == 'punct_qualifier') || ($t_prev == 'punct_qualifier')) {                    $t_suffix = '_identifier';                } elseif (($t_next == 'punct_bracket_open_round')                  && isset($PMA_SQPdata_function_name[$d_cur_upper])) {                    /**                     * @todo 2005-10-16: in the case of a CREATE TABLE containing                     * a TIMESTAMP, since TIMESTAMP() is also a function, it's                     * found here and the token is wrongly marked as alpha_functionName.                     * But we compensate for this when analysing for timestamp_not_null                     * later in this script.                     *                     * Same applies to CHAR vs. CHAR() function.                     */                    $t_suffix = '_functionName';                    /* There are functions which might be as well column types */                } elseif (isset($PMA_SQPdata_column_type[$d_cur_upper])) {                    $t_suffix = '_columnType';                    /**                     * Temporary fix for BUG #621357 and #2027720                     *                     * @todo FIX PROPERLY NEEDS OVERHAUL OF SQL TOKENIZER                     */                    if (($d_cur_upper == 'SET' || $d_cur_upper == 'BINARY') && $t_next != 'punct_bracket_open_round') {                        $t_suffix = '_reservedWord';                    }                    //END OF TEMPORARY FIX                    // CHARACTER is a synonym for CHAR, but can also be meant as                    // CHARACTER SET. In this case, we have a reserved word.                    if ($d_cur_upper == 'CHARACTER' && $d_next_upper == 'SET') {                        $t_suffix = '_reservedWord';                    }                    // experimental                    // current is a column type, so previous must not be                    // a reserved word but an identifier                    // CREATE TABLE SG_Persons (first varchar(64))                    //if ($sql_array[$i-1]['type'] =='alpha_reservedWord') {                    //    $sql_array[$i-1]['type'] = 'alpha_identifier';                    //}                } elseif (isset($PMA_SQPdata_reserved_word[$d_cur_upper])) {                    $t_suffix = '_reservedWord';                } elseif (isset($PMA_SQPdata_column_attrib[$d_cur_upper])) {                    $t_suffix = '_columnAttrib';                    // INNODB is a MySQL table type, but in "SHOW INNODB STATUS",                    // it should be regarded as a reserved word.                    if ($d_cur_upper == 'INNODB' && $d_prev_upper == 'SHOW' && $d_next_upper == 'STATUS') {                        $t_suffix = '_reservedWord';                    }                    if ($d_cur_upper == 'DEFAULT' && $d_next_upper == 'CHARACTER') {                        $t_suffix = '_reservedWord';                    }                    // Binary as character set                    if ($d_cur_upper == 'BINARY' && (                      ($d_bef_prev_upper == 'CHARACTER' && $d_prev_upper == 'SET')                      || ($d_bef_prev_upper == 'SET' && $d_prev_upper == '=')                      || ($d_bef_prev_upper == 'CHARSET' && $d_prev_upper == '=')                      || $d_prev_upper == 'CHARSET'                      ) && in_array($d_cur, $mysql_charsets)) {                        $t_suffix = '_charset';                    }                } elseif (in_array($d_cur, $mysql_charsets)                  || in_array($d_cur, $mysql_collations_flat)                  || ($d_cur{0} == '_' && in_array(substr($d_cur, 1), $mysql_charsets))) {                    $t_suffix = '_charset';                } else {                    // Do nothing                }                // check if present in the list of forbidden words                if ($t_suffix == '_reservedWord' && isset($PMA_SQPdata_forbidden_word[$d_cur_upper])) {                    $sql_array[$i]['forbidden'] = true;                } else {                    $sql_array[$i]['forbidden'] = false;                }                $sql_array[$i]['type'] .= $t_suffix;            }        } // end for        // Stores the size of the array inside the array, as count() is a slow        // operation.        $sql_array['len'] = $arraysize;        // DEBUG echo 'After parsing<pre>'; print_r($sql_array); echo '</pre>';        // Sends the data back        return $sql_array;    } // end of the "PMA_SQP_parse()" function    /**     * Checks for token types being what we want...     *     * @param string String of type that we have     * @param string String of type that we want     *     * @return boolean result of check     *     * @access private     */    function PMA_SQP_typeCheck($toCheck, $whatWeWant)    {        $typeSeperator = '_';        if (strcmp($whatWeWant, $toCheck) == 0) {            return true;        } else {            if (strpos($whatWeWant, $typeSeperator) === false) {                return strncmp($whatWeWant, $toCheck, strpos($toCheck, $typeSeperator)) == 0;            } else {                return false;            }        }    }    /**     * Analyzes SQL queries     *     * @param array   The SQL queries     *     * @return array   The analyzed SQL queries     *     * @access public     */    function PMA_SQP_analyze($arr)    {        if ($arr == array() || ! isset($arr['len'])) {            return array();        }        $result          = array();        $size            = $arr['len'];        $subresult       = array(            'querytype'      => '',            'select_expr_clause'=> '', // the whole stuff between SELECT and FROM , except DISTINCT            'position_of_first_select' => '', // the array index            'from_clause'=> '',            'group_by_clause'=> '',            'order_by_clause'=> '',            'having_clause'  => '',            'limit_clause'  => '',            'where_clause'   => '',            'where_clause_identifiers'   => array(),            'unsorted_query' => '',            'queryflags'     => array(),            'select_expr'    => array(),            'table_ref'      => array(),            'foreign_keys'   => array(),            'create_table_fields' => array()        );        $subresult_empty = $subresult;        $seek_queryend         = false;        $seen_end_of_table_ref = false;        $number_of_brackets_in_extract = 0;        $number_of_brackets_in_group_concat = 0;        $number_of_brackets = 0;        $in_subquery = false;        $seen_subquery = false;        $seen_from = false;        // for SELECT EXTRACT(YEAR_MONTH FROM CURDATE())        // we must not use CURDATE as a table_ref        // so we track whether we are in the EXTRACT()        $in_extract          = false;        // for GROUP_CONCAT(...)        $in_group_concat     = false;        /* Description of analyzer results         *         * db, table, column, alias         * ------------------------         *         * Inside the $subresult array, we create ['select_expr'] and ['table_ref'] arrays.         *         * The SELECT syntax (simplified) is         *         * SELECT         *    select_expression,...         *    [FROM [table_references]         *         *         * ['select_expr'] is filled with each expression, the key represents the         * expression position in the list (0-based) (so we don't lose track of         * multiple occurences of the same column).         *         * ['table_ref'] is filled with each table ref, same thing for the key.         *         * I create all sub-values empty, even if they are         * not present (for example no select_expression alias).         *         * There is a debug section at the end of loop #1, if you want to         * see the exact contents of select_expr and table_ref         *         * queryflags         * ----------         *         * In $subresult, array 'queryflags' is filled, according to what we         * find in the query.         *         * Currently, those are generated:         *         * ['queryflags']['need_confirm'] = 1; if the query needs confirmation         * ['queryflags']['select_from'] = 1;  if this is a real SELECT...FROM         * ['queryflags']['distinct'] = 1;     for a DISTINCT         * ['queryflags']['union'] = 1;        for a UNION         * ['queryflags']['join'] = 1;         for a JOIN         * ['queryflags']['offset'] = 1;       for the presence of OFFSET         * ['queryflags']['procedure'] = 1;    for the presence of PROCEDURE         *         * query clauses         * -------------         *         * The select is splitted in those clauses:         * ['select_expr_clause']         * ['from_clause']         * ['group_by_clause']         * ['order_by_clause']         * ['having_clause']         * ['limit_clause']         * ['where_clause']         *         * The identifiers of the WHERE clause are put into the array         * ['where_clause_identifier']         *         * For a SELECT, the whole query without the ORDER BY clause is put into         * ['unsorted_query']         *         * foreign keys         * ------------         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get         * analyzed and ['foreign_keys'] is an array filled with         * the constraint name, the index list,         * the REFERENCES table name and REFERENCES index list,         * and ON UPDATE | ON DELETE clauses         *         * position_of_first_select         * ------------------------         *         * The array index of the first SELECT we find. Will be used to         * insert a SQL_CALC_FOUND_ROWS.         *         * create_table_fields         * -------------------         *         * Used to detect the DEFAULT CURRENT_TIMESTAMP and         * ON UPDATE CURRENT_TIMESTAMP clauses of the CREATE TABLE query.         * Also used to store the default value of the field.         * An array, each element is the identifier name.         * Note that for now, the timestamp_not_null element is created         * even for non-TIMESTAMP fields.         *         * Sub-elements: ['type'] which contains the column type         *               optional (currently they are never false but can be absent):         *               ['default_current_timestamp'] boolean         *               ['on_update_current_timestamp'] boolean         *               ['timestamp_not_null'] boolean         *         * section_before_limit, section_after_limit         * -----------------------------------------         *         * Marks the point of the query where we can insert a LIMIT clause;         * so the section_before_limit will contain the left part before         * a possible LIMIT clause         *         *         * End of description of analyzer results         */        // must be sorted        // TODO: current logic checks for only one word, so I put only the        // first word of the reserved expressions that end a table ref;        // maybe this is not ok (the first word might mean something else)        //        $words_ending_table_ref = array(        //            'FOR UPDATE',        //            'GROUP BY',        //            'HAVING',        //            'LIMIT',        //            'LOCK IN SHARE MODE',        //            'ORDER BY',        //            'PROCEDURE',        //            'UNION',        //            'WHERE'        //        );        $words_ending_table_ref = array(            'FOR' => 1,            'GROUP' => 1,            'HAVING' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'ORDER' => 1,            'PROCEDURE' => 1,            'UNION' => 1,            'WHERE' => 1        );        $words_ending_clauses = array(            'FOR' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'PROCEDURE' => 1,            'UNION' => 1        );        $supported_query_types = array(            'SELECT' => 1,            /*            // Support for these additional query types will come later on.            'DELETE' => 1,            'INSERT' => 1,            'REPLACE' => 1,            'TRUNCATE' => 1,            'UPDATE' => 1,            'EXPLAIN' => 1,            'DESCRIBE' => 1,            'SHOW' => 1,            'CREATE' => 1,            'SET' => 1,            'ALTER' => 1            */        );        // loop #1 for each token: select_expr, table_ref for SELECT        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop1 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // High speed seek for locating the end of the current query            if ($seek_queryend == true) {                if ($arr[$i]['type'] == 'punct_queryend') {                    $seek_queryend = false;                } else {                    continue;                } // end if (type == punct_queryend)            } // end if ($seek_queryend)            /**             * Note: do not split if this is a punct_queryend for the first and only query             * @todo when we find a UNION, should we split in another subresult?             */            if ($arr[$i]['type'] == 'punct_queryend' && ($i + 1 != $size)) {                $result[]  = $subresult;                $subresult = $subresult_empty;                continue;            } // end if (type == punct_queryend)            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;                if ($in_extract) {                    $number_of_brackets_in_extract++;                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }                if ($in_extract) {                    $number_of_brackets_in_extract--;                    if ($number_of_brackets_in_extract == 0) {                       $in_extract = false;                    }                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                       $in_group_concat = false;                    }                }            }            if ($in_subquery) {                /**                 * skip the subquery to avoid setting                 * select_expr or table_ref with the contents                 * of this subquery; this is to avoid a bug when                 * trying to edit the results of                 * select * from child where not exists (select id from                 * parent where child.parent_id = parent.id);                 */                continue;            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_functionName') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='EXTRACT') {                    $in_extract = true;                    $number_of_brackets_in_extract = 0;                }                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_reservedWord'                //&& $arr[$i]['forbidden'] == false) {                ) {                // We don't know what type of query yet, so run this                if ($subresult['querytype'] == '') {                    $subresult['querytype'] = strtoupper($arr[$i]['data']);                } // end if (querytype was empty)                // Check if we support this type of query                if (!isset($supported_query_types[$subresult['querytype']])) {                    // Skip ahead to the next one if we don't                    $seek_queryend = true;                    continue;                } // end if (query not supported)                // upper once                $upper_data = strtoupper($arr[$i]['data']);                /**                 * @todo reset for each query?                 */                if ($upper_data == 'SELECT') {                    if ($number_of_brackets > 0) {                        $in_subquery = true;                        $seen_subquery = true;                        // this is a subquery so do not analyze inside it                        continue;                    }                    $seen_from = false;                    $previous_was_identifier = false;                    $current_select_expr = -1;                    $seen_end_of_table_ref = false;                } // end if (data == SELECT)                if ($upper_data =='FROM' && !$in_extract) {                    $current_table_ref = -1;                    $seen_from = true;                    $previous_was_identifier = false;                    $save_table_ref = true;                } // end if (data == FROM)                // here, do not 'continue' the loop, as we have more work for                // reserved words below            } // end if (type == alpha_reservedWord)            // ==============================            if ($arr[$i]['type'] == 'quote_backtick'             || $arr[$i]['type'] == 'quote_double'             || $arr[$i]['type'] == 'quote_single'             || $arr[$i]['type'] == 'alpha_identifier'             || ($arr[$i]['type'] == 'alpha_reservedWord'                && $arr[$i]['forbidden'] == false)) {                switch ($arr[$i]['type']) {                case 'alpha_identifier':                case 'alpha_reservedWord':                    /**                     * this is not a real reservedWord, because it's not                     * present in the list of forbidden words, for example                     * "storage" which can be used as an identifier                     *                     * @todo avoid the pretty printing in color in this case                     */                    $identifier = $arr[$i]['data'];                    break;                case 'quote_backtick':                case 'quote_double':                case 'quote_single':                    $identifier = PMA_unQuote($arr[$i]['data']);                    break;                } // end switch                if ($subresult['querytype'] == 'SELECT'                 && ! $in_group_concat                 && ! ($seen_subquery && $arr[$i - 1]['type'] == 'punct_bracket_close_round')) {                    if (!$seen_from) {                        if ($previous_was_identifier && isset($chain)) {                            // found alias for this select_expr, save it                            // but only if we got something in $chain                            // (for example, SELECT COUNT(*) AS cnt                            // puts nothing in $chain, so we avoid                            // setting the alias)                            $alias_for_select_expr = $identifier;                        } else {                            $chain[] = $identifier;                            $previous_was_identifier = true;                        } // end if !$previous_was_identifier                    } else {                        // ($seen_from)                        if ($save_table_ref && !$seen_end_of_table_ref) {                            if ($previous_was_identifier) {                                // found alias for table ref                                // save it for later                                $alias_for_table_ref = $identifier;                            } else {                                $chain[] = $identifier;                                $previous_was_identifier = true;                            } // end if ($previous_was_identifier)                        } // end if ($save_table_ref &&!$seen_end_of_table_ref)                    } // end if (!$seen_from)                } // end if (querytype SELECT)            } // end if (quote_backtick or double quote or alpha_identifier)            // ===================================            if ($arr[$i]['type'] == 'punct_qualifier') {                // to be able to detect an identifier following another                $previous_was_identifier = false;                continue;            } // end if (punct_qualifier)            /**             * @todo check if 3 identifiers following one another -> error             */            //    s a v e    a    s e l e c t    e x p r            // finding a list separator or FROM            // means that we must save the current chain of identifiers            // into a select expression            // for now, we only save a select expression if it contains            // at least one identifier, as we are interested in checking            // the columns and table names, so in "select * from persons",            // the "*" is not saved            if (isset($chain) && !$seen_end_of_table_ref             && ((!$seen_from && $arr[$i]['type'] == 'punct_listsep')              || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data == 'FROM'))) {                $size_chain = count($chain);                $current_select_expr++;                $subresult['select_expr'][$current_select_expr] = array(                  'expr' => '',                  'alias' => '',                  'db'   => '',                  'table_name' => '',                  'table_true_name' => '',                  'column' => ''                 );                if (isset($alias_for_select_expr) && strlen($alias_for_select_expr)) {                    // we had found an alias for this select expression                    $subresult['select_expr'][$current_select_expr]['alias'] = $alias_for_select_expr;                    unset($alias_for_select_expr);                }                // there is at least a column                $subresult['select_expr'][$current_select_expr]['column'] = $chain[$size_chain - 1];                $subresult['select_expr'][$current_select_expr]['expr'] = $chain[$size_chain - 1];                // maybe a table                if ($size_chain > 1) {                    $subresult['select_expr'][$current_select_expr]['table_name'] = $chain[$size_chain - 2];                    // we assume for now that this is also the true name                    $subresult['select_expr'][$current_select_expr]['table_true_name'] = $chain[$size_chain - 2];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['table_name']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 1)                // maybe a db                if ($size_chain > 2) {                    $subresult['select_expr'][$current_select_expr]['db'] = $chain[$size_chain - 3];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['db']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 2)                unset($chain);                /**                 * @todo explain this:                 */                if (($arr[$i]['type'] == 'alpha_reservedWord')                 && ($upper_data != 'FROM')) {                    $previous_was_identifier = true;                }            } // end if (save a select expr)            //======================================            //    s a v e    a    t a b l e    r e f            //======================================            // maybe we just saw the end of table refs            // but the last table ref has to be saved            // or we are at the last token            // or we just got a reserved word            /**             * @todo there could be another query after this one             */            if (isset($chain) && $seen_from && $save_table_ref             && ($arr[$i]['type'] == 'punct_listsep'               || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data!="AS")               || $seen_end_of_table_ref               || $i==$size-1)) {                $size_chain = count($chain);                $current_table_ref++;                $subresult['table_ref'][$current_table_ref] = array(                  'expr'            => '',                  'db'              => '',                  'table_name'      => '',                  'table_alias'     => '',                  'table_true_name' => ''                 );                if (isset($alias_for_table_ref) && strlen($alias_for_table_ref)) {                    $subresult['table_ref'][$current_table_ref]['table_alias'] = $alias_for_table_ref;                    unset($alias_for_table_ref);                }                $subresult['table_ref'][$current_table_ref]['table_name'] = $chain[$size_chain - 1];                // we assume for now that this is also the true name                $subresult['table_ref'][$current_table_ref]['table_true_name'] = $chain[$size_chain - 1];                $subresult['table_ref'][$current_table_ref]['expr']                    = $subresult['table_ref'][$current_table_ref]['table_name'];                // maybe a db                if ($size_chain > 1) {                    $subresult['table_ref'][$current_table_ref]['db'] = $chain[$size_chain - 2];                    $subresult['table_ref'][$current_table_ref]['expr']                        = $subresult['table_ref'][$current_table_ref]['db']                        . '.' . $subresult['table_ref'][$current_table_ref]['expr'];                } // end if ($size_chain > 1)                // add the table alias into the whole expression                $subresult['table_ref'][$current_table_ref]['expr']                 .= ' ' . $subresult['table_ref'][$current_table_ref]['table_alias'];                unset($chain);                $previous_was_identifier = true;                //continue;            } // end if (save a table ref)            // when we have found all table refs,            // for each table_ref alias, put the true name of the table            // in the corresponding select expressions            if (isset($current_table_ref) && ($seen_end_of_table_ref || $i == $size-1) && $subresult != $subresult_empty) {                for ($tr=0; $tr <= $current_table_ref; $tr++) {                    $alias = $subresult['table_ref'][$tr]['table_alias'];                    $truename = $subresult['table_ref'][$tr]['table_true_name'];                    for ($se=0; $se <= $current_select_expr; $se++) {                        if (isset($alias)                            && strlen($alias)                            && $subresult['select_expr'][$se]['table_true_name'] == $alias                        ) {                            $subresult['select_expr'][$se]['table_true_name'] = $truename;                        } // end if (found the alias)                    } // end for (select expressions)                } // end for (table refs)            } // end if (set the true names)            // e n d i n g    l o o p  #1            // set the $previous_was_identifier to false if the current            // token is not an identifier            if (($arr[$i]['type'] != 'alpha_identifier')             && ($arr[$i]['type'] != 'quote_double')             && ($arr[$i]['type'] != 'quote_single')             && ($arr[$i]['type'] != 'quote_backtick')) {                $previous_was_identifier = false;            } // end if            // however, if we are on AS, we must keep the $previous_was_identifier            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data == 'AS')) {                $previous_was_identifier = true;            }            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='ON' || $upper_data =='USING')) {                $save_table_ref = false;            } // end if (data == ON)            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='JOIN' || $upper_data =='FROM')) {                $save_table_ref = true;            } // end if (data == JOIN)            /**             * no need to check the end of table ref if we already did             *             * @todo maybe add "&& $seen_from"             */            if (!$seen_end_of_table_ref) {                // if this is the last token, it implies that we have                // seen the end of table references                // Check for the end of table references                //                // Note: if we are analyzing a GROUP_CONCAT clause,                // we might find a word that seems to indicate that                // we have found the end of table refs (like ORDER)                // but it's a modifier of the GROUP_CONCAT so                // it's not the real end of table refs                if (($i == $size-1)                 || ($arr[$i]['type'] == 'alpha_reservedWord'                 && !$in_group_concat                 && isset($words_ending_table_ref[$upper_data]))) {                    $seen_end_of_table_ref = true;                    // to be able to save the last table ref, but do not                    // set it true if we found a word like "ON" that has                    // already set it to false                    if (isset($save_table_ref) && $save_table_ref != false) {                        $save_table_ref = true;                    } //end if                } // end if (check for end of table ref)            } //end if (!$seen_end_of_table_ref)            if ($seen_end_of_table_ref) {                $save_table_ref = false;            } // end if        } // end for $i (loop #1)        //DEBUG        /*          if (isset($current_select_expr)) {           for ($trace=0; $trace<=$current_select_expr; $trace++) {               echo "<br />";               reset ($subresult['select_expr'][$trace]);               while (list ($key, $val) = each ($subresult['select_expr'][$trace]))                   echo "sel expr $trace $key => $val<br />\n";               }          }          if (isset($current_table_ref)) {           echo "current_table_ref = " . $current_table_ref . "<br>";           for ($trace=0; $trace<=$current_table_ref; $trace++) {               echo "<br />";               reset ($subresult['table_ref'][$trace]);               while (list ($key, $val) = each ($subresult['table_ref'][$trace]))               echo "table ref $trace $key => $val<br />\n";               }          }        */        // -------------------------------------------------------        // loop #2: - queryflags        //          - querytype (for queries != 'SELECT')        //          - section_before_limit, section_after_limit        //        // we will also need this queryflag in loop 2        // so set it here        if (isset($current_table_ref) && $current_table_ref > -1) {            $subresult['queryflags']['select_from'] = 1;        }        $section_before_limit = '';        $section_after_limit = ''; // truly the section after the limit clause        $seen_reserved_word = false;        $seen_group = false;        $seen_order = false;        $seen_order_by = false;        $in_group_by = false; // true when we are inside the GROUP BY clause        $in_order_by = false; // true when we are inside the ORDER BY clause        $in_having = false; // true when we are inside the HAVING clause        $in_select_expr = false; // true when we are inside the select expr clause        $in_where = false; // true when we are inside the WHERE clause        $seen_limit = false; // true if we have seen a LIMIT clause        $in_limit = false; // true when we are inside the LIMIT clause        $after_limit = false; // true when we are after the LIMIT clause        $in_from = false; // true when we are in the FROM clause        $in_group_concat = false;        $first_reserved_word = '';        $current_identifier = '';        $unsorted_query = $arr['raw']; // in case there is no ORDER BY        $number_of_brackets = 0;        $in_subquery = false;        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop2 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // need_confirm            //            // check for reserved words that will have to generate            // a confirmation request later in sql.php            // the cases are:            //   DROP TABLE            //   DROP DATABASE            //   ALTER TABLE... DROP            //   DELETE FROM...            //            // this code is not used for confirmations coming from functions.js            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }            }            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'SELECT' && $number_of_brackets > 0) {                    $in_subquery = true;                }                if (!$seen_reserved_word) {                    $first_reserved_word = $upper_data;                    $subresult['querytype'] = $upper_data;                    $seen_reserved_word = true;                    // if the first reserved word is DROP or DELETE,                    // we know this is a query that needs to be confirmed                    if ($first_reserved_word=='DROP'                     || $first_reserved_word == 'DELETE'                     || $first_reserved_word == 'TRUNCATE') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                    if ($first_reserved_word=='SELECT') {                        $position_of_first_select = $i;                    }                } else {                    if ($upper_data == 'DROP' && $first_reserved_word == 'ALTER') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                }                if ($upper_data == 'LIMIT' && ! $in_subquery) {                    $section_before_limit = substr($arr['raw'], 0, $arr[$i]['pos'] - 5);                    $in_limit = true;                    $seen_limit = true;                    $limit_clause = '';                    $in_order_by = false; // @todo maybe others to set false                }                if ($upper_data == 'PROCEDURE') {                    $subresult['queryflags']['procedure'] = 1;                    $in_limit = false;                    $after_limit = true;                }                /**                 * @todo set also to false if we find FOR UPDATE or LOCK IN SHARE MODE                 */                if ($upper_data == 'SELECT') {                    $in_select_expr = true;                    $select_expr_clause = '';                }                if ($upper_data == 'DISTINCT' && !$in_group_concat) {                    $subresult['queryflags']['distinct'] = 1;                }                if ($upper_data == 'UNION') {                    $subresult['queryflags']['union'] = 1;                }                if ($upper_data == 'JOIN') {                    $subresult['queryflags']['join'] = 1;                }                if ($upper_data == 'OFFSET') {                    $subresult['queryflags']['offset'] = 1;                }                // if this is a real SELECT...FROM                if ($upper_data == 'FROM' && isset($subresult['queryflags']['select_from']) && $subresult['queryflags']['select_from'] == 1) {                    $in_from = true;                    $from_clause = '';                    $in_select_expr = false;                }                // (we could have less resetting of variables to false                // if we trust that the query respects the standard                // MySQL order for clauses)                // we use $seen_group and $seen_order because we are looking                // for the BY                if ($upper_data == 'GROUP') {                    $seen_group = true;                    $seen_order = false;                    $in_having = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'ORDER' && !$in_group_concat) {                    $seen_order = true;                    $seen_group = false;                    $in_having = false;                    $in_group_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'HAVING') {                    $in_having = true;                    $having_clause = '';                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'WHERE') {                    $in_where = true;                    $where_clause = '';                    $where_clause_identifiers = array();                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_having = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'BY') {                    if ($seen_group) {                        $in_group_by = true;                        $group_by_clause = '';                    }                    if ($seen_order) {                        $seen_order_by = true;                        // Here we assume that the ORDER BY keywords took                        // exactly 8 characters.                        // We use PMA_substr() to be charset-safe; otherwise                        // if the table name contains accents, the unsorted                        // query would be missing some characters.                        $unsorted_query = PMA_substr($arr['raw'], 0, $arr[$i]['pos'] - 8);                        $in_order_by = true;                        $order_by_clause = '';                    }                }                // if we find one of the words that could end the clause                if (isset($words_ending_clauses[$upper_data])) {                    $in_group_by = false;                    $in_order_by = false;                    $in_having   = false;                    $in_where    = false;                    $in_select_expr = false;                    $in_from = false;                }            } // endif (reservedWord)            // do not add a space after a function name            /**             * @todo can we combine loop 2 and loop 1? some code is repeated here...             */            $sep = ' ';            if ($arr[$i]['type'] == 'alpha_functionName') {                $sep='';                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                        $in_group_concat = false;                    }                }            }            // do not add a space after an identifier if followed by a dot            if ($arr[$i]['type'] == 'alpha_identifier' && $i < $size - 1 && $arr[$i + 1]['data'] == '.') {                $sep = '';            }            // do not add a space after a dot if followed by an identifier            if ($arr[$i]['data'] == '.' && $i < $size - 1 && $arr[$i + 1]['type'] == 'alpha_identifier') {                $sep = '';            }            if ($in_select_expr && $upper_data != 'SELECT' && $upper_data != 'DISTINCT') {                $select_expr_clause .= $arr[$i]['data'] . $sep;            }            if ($in_from && $upper_data != 'FROM') {                $from_clause .= $arr[$i]['data'] . $sep;            }            if ($in_group_by && $upper_data != 'GROUP' && $upper_data != 'BY') {                $group_by_clause .= $arr[$i]['data'] . $sep;            }            if ($in_order_by && $upper_data != 'ORDER' && $upper_data != 'BY') {                // add a space only before ASC or DESC                // not around the dot between dbname and tablename                if ($arr[$i]['type'] == 'alpha_reservedWord') {                    $order_by_clause .= $sep;                }                $order_by_clause .= $arr[$i]['data'];            }            if ($in_having && $upper_data != 'HAVING') {                $having_clause .= $arr[$i]['data'] . $sep;            }            if ($in_where && $upper_data != 'WHERE') {                $where_clause .= $arr[$i]['data'] . $sep;                if (($arr[$i]['type'] == 'quote_backtick')                 || ($arr[$i]['type'] == 'alpha_identifier')) {                    $where_clause_identifiers[] = $arr[$i]['data'];                }            }            // to grab the rest of the query after the ORDER BY clause            if (isset($subresult['queryflags']['select_from'])             && $subresult['queryflags']['select_from'] == 1             && ! $in_order_by             && $seen_order_by             && $upper_data != 'BY') {                $unsorted_query .= $arr[$i]['data'];                if ($arr[$i]['type'] != 'punct_bracket_open_round'                 && $arr[$i]['type'] != 'punct_bracket_close_round'                 && $arr[$i]['type'] != 'punct') {                    $unsorted_query .= $sep;                }            }            if ($in_limit) {                if ($upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }                $limit_clause .= $arr[$i]['data'];                if ($upper_data == 'LIMIT' || $upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }            }            if ($after_limit && $seen_limit) {                $section_after_limit .= $arr[$i]['data'] . $sep;            }            // clear $upper_data for next iteration            $upper_data='';        } // end for $i (loop #2)        if (empty($section_before_limit)) {            $section_before_limit = $arr['raw'];        }        // -----------------------------------------------------        // loop #3: foreign keys and MySQL 4.1.2+ TIMESTAMP options        // (for now, check only the first query)        // (for now, identifiers are assumed to be backquoted)        // If we find that we are dealing with a CREATE TABLE query,        // we look for the next punct_bracket_open_round, which        // introduces the fields list. Then, when we find a        // quote_backtick, it must be a field, so we put it into        // the create_table_fields array. Even if this field is        // not a timestamp, it will be useful when logic has been        // added for complete field attributes analysis.        $seen_foreign = false;        $seen_references = false;        $seen_constraint = false;        $foreign_key_number = -1;        $seen_create_table = false;        $seen_create = false;        $seen_alter = false;        $in_create_table_fields = false;        $brackets_level = 0;        $in_timestamp_options = false;        $seen_default = false;        for ($i = 0; $i < $size; $i++) {        // DEBUG echo "Loop 3 <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'NOT' && $in_timestamp_options) {                    $create_table_fields[$current_identifier]['timestamp_not_null'] = true;                }                if ($upper_data == 'CREATE') {                    $seen_create = true;                }                if ($upper_data == 'ALTER') {                    $seen_alter = true;                }                if ($upper_data == 'TABLE' && $seen_create) {                    $seen_create_table = true;                    $create_table_fields = array();                }                if ($upper_data == 'CURRENT_TIMESTAMP') {                    if ($in_timestamp_options) {                        if ($seen_default) {                            $create_table_fields[$current_identifier]['default_current_timestamp'] = true;                        }                    }                }                if ($upper_data == 'CONSTRAINT') {                    $foreign_key_number++;                    $seen_foreign = false;                    $seen_references = false;                    $seen_constraint = true;                }                if ($upper_data == 'FOREIGN') {                    $seen_foreign = true;                    $seen_references = false;                    $seen_constraint = false;                }                if ($upper_data == 'REFERENCES') {                    $seen_foreign = false;                    $seen_references = true;                    $seen_constraint = false;                }                // Cases covered:                // [ON DELETE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // [ON UPDATE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // but we set ['on_delete'] or ['on_cascade'] to                // CASCADE | SET_NULL | NO_ACTION | RESTRICT                // ON UPDATE CURRENT_TIMESTAMP                if ($upper_data == 'ON') {                    if (isset($arr[$i+1]) && $arr[$i+1]['type'] == 'alpha_reservedWord') {                        $second_upper_data = strtoupper($arr[$i+1]['data']);                        if ($second_upper_data == 'DELETE') {                            $clause = 'on_delete';                        }                        if ($second_upper_data == 'UPDATE') {                            $clause = 'on_update';                        }                        if (isset($clause)                        && ($arr[$i+2]['type'] == 'alpha_reservedWord'                // ugly workaround because currently, NO is not                // in the list of reserved words in sqlparser.data                // (we got a bug report about not being able to use                // 'no' as an identifier)                           || ($arr[$i+2]['type'] == 'alpha_identifier'                              && strtoupper($arr[$i+2]['data'])=='NO'))                          ) {                            $third_upper_data = strtoupper($arr[$i+2]['data']);                            if ($third_upper_data == 'CASCADE'                            || $third_upper_data == 'RESTRICT') {                                $value = $third_upper_data;                            } elseif ($third_upper_data == 'SET'                              || $third_upper_data == 'NO') {                                if ($arr[$i+3]['type'] == 'alpha_reservedWord') {                                    $value = $third_upper_data . '_' . strtoupper($arr[$i+3]['data']);                                }                            } elseif ($third_upper_data == 'CURRENT_TIMESTAMP') {                                if ($clause == 'on_update'                                && $in_timestamp_options) {                                    $create_table_fields[$current_identifier]['on_update_current_timestamp'] = true;                                    $seen_default = false;                                }                            } else {                                $value = '';                            }                            if (!empty($value)) {                                $foreign[$foreign_key_number][$clause] = $value;                            }                            unset($clause);                        } // endif (isset($clause))                    }                }            } // end of reserved words analysis            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $brackets_level++;                if ($seen_create_table && $brackets_level == 1) {                    $in_create_table_fields = true;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $brackets_level--;                if ($seen_references) {                    $seen_references = false;                }                if ($seen_create_table && $brackets_level == 0) {                    $in_create_table_fields = false;                }            }            if (($arr[$i]['type'] == 'alpha_columnAttrib')) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields) {                    if ($upper_data == 'DEFAULT') {                        $seen_default = true;                        $create_table_fields[$current_identifier]['default_value'] = $arr[$i + 1]['data'];                    }                }            }            /**             * @see @todo 2005-10-16 note: the "or" part here is a workaround for a bug             */            if (($arr[$i]['type'] == 'alpha_columnType') || ($arr[$i]['type'] == 'alpha_functionName' && $seen_create_table)) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields && isset($current_identifier)) {                    $create_table_fields[$current_identifier]['type'] = $upper_data;                    if ($upper_data == 'TIMESTAMP') {                        $arr[$i]['type'] = 'alpha_columnType';                        $in_timestamp_options = true;                    } else {                        $in_timestamp_options = false;                        if ($upper_data == 'CHAR') {                            $arr[$i]['type'] = 'alpha_columnType';                        }                    }                }            }            if ($arr[$i]['type'] == 'quote_backtick' || $arr[$i]['type'] == 'alpha_identifier') {                if ($arr[$i]['type'] == 'quote_backtick') {                    // remove backquotes                    $identifier = PMA_unQuote($arr[$i]['data']);                } else {                    $identifier = $arr[$i]['data'];                }                if ($seen_create_table && $in_create_table_fields) {                    $current_identifier = $identifier;                    // we set this one even for non TIMESTAMP type                    $create_table_fields[$current_identifier]['timestamp_not_null'] = false;                }                if ($seen_constraint) {                    $foreign[$foreign_key_number]['constraint'] = $identifier;                }                if ($seen_foreign && $brackets_level > 0) {                    $foreign[$foreign_key_number]['index_list'][] = $identifier;                }                if ($seen_references) {                    if ($seen_alter && $brackets_level > 0) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                        // here, the first bracket level corresponds to the                        // bracket of CREATE TABLE                        // so if we are on level 2, it must be the index list                        // of the foreign key REFERENCES                    } elseif ($brackets_level > 1) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                    } elseif ($arr[$i+1]['type'] == 'punct_qualifier') {                        // identifier is `db`.`table`                        // the first pass will pick the db name                        // the next pass will pick the table name                        $foreign[$foreign_key_number]['ref_db_name'] = $identifier;                    } else {                        // identifier is `table`                        $foreign[$foreign_key_number]['ref_table_name'] = $identifier;                    }                }            }        } // end for $i (loop #3)        // Fill the $subresult array        if (isset($create_table_fields)) {            $subresult['create_table_fields'] = $create_table_fields;        }        if (isset($foreign)) {            $subresult['foreign_keys'] = $foreign;        }        if (isset($select_expr_clause)) {            $subresult['select_expr_clause'] = $select_expr_clause;        }        if (isset($from_clause)) {            $subresult['from_clause'] = $from_clause;        }        if (isset($group_by_clause)) {            $subresult['group_by_clause'] = $group_by_clause;        }        if (isset($order_by_clause)) {            $subresult['order_by_clause'] = $order_by_clause;        }        if (isset($having_clause)) {            $subresult['having_clause'] = $having_clause;        }        if (isset($limit_clause)) {            $subresult['limit_clause'] = $limit_clause;        }        if (isset($where_clause)) {            $subresult['where_clause'] = $where_clause;        }        if (isset($unsorted_query) && !empty($unsorted_query)) {            $subresult['unsorted_query'] = $unsorted_query;        }        if (isset($where_clause_identifiers)) {            $subresult['where_clause_identifiers'] = $where_clause_identifiers;        }        if (isset($position_of_first_select)) {            $subresult['position_of_first_select'] = $position_of_first_select;            $subresult['section_before_limit'] = $section_before_limit;            $subresult['section_after_limit'] = $section_after_limit;        }        // They are naughty and didn't have a trailing semi-colon,        // then still handle it properly        if ($subresult['querytype'] != '') {            $result[] = $subresult;        }        return $result;    } // end of the "PMA_SQP_analyze()" function    /**     * Colorizes SQL queries html formatted     *     * @todo check why adding a "\n" after the </span> would cause extra blanks     * to be displayed: SELECT p . person_name     * @param array   The SQL queries html formatted     *     * @return array   The colorized SQL queries     *     * @access public     */    function PMA_SQP_formatHtml_colorize($arr)    {        $i         = PMA_strpos($arr['type'], '_');        $class     = '';        if ($i > 0) {            $class = 'syntax_' . PMA_substr($arr['type'], 0, $i) . ' ';        }        $class     .= 'syntax_' . $arr['type'];        return '<span class="' . $class . '">' . htmlspecialchars($arr['data']) . '</span>';    } // end of the "PMA_SQP_formatHtml_colorize()" function    /**     * Formats SQL queries to html     *     * @param array   The SQL queries     * @param string  mode     * @param integer starting token     * @param integer number of tokens to format, -1 = all     *     * @return string  The formatted SQL queries     *     * @access public     */    function PMA_SQP_formatHtml($arr, $mode='color', $start_token=0,        $number_of_tokens=-1)    {        global $PMA_SQPdata_operators_docs, $PMA_SQPdata_functions_docs;        //DEBUG echo 'in Format<pre>'; print_r($arr); echo '</pre>';        // then check for an array        if (! is_array($arr)) {            return htmlspecialchars($arr);        }        // first check for the SQL parser having hit an error        if (PMA_SQP_isError()) {            return htmlspecialchars($arr['raw']);        }        // else do it properly        switch ($mode) {        case 'color':            $str                                = '<span class="syntax">';            $html_line_break                    = '<br />';            $docu                               = true;            break;        case 'query_only':            $str                                = '';            $html_line_break                    = "\n";            $docu                               = false;            break;        case 'text':            $str                                = '';            $html_line_break                    = '<br />';            $docu                               = true;            break;        } // end switch        // inner_sql is a span that exists for all cases, except query_only        // of $cfg['SQP']['fmtType'] to make possible a replacement        // for inline editing        if ($mode!='query_only') {            $str .= '<span class="inner_sql">';        }        $close_docu_link = false;        $indent                                     = 0;        $bracketlevel                               = 0;        $functionlevel                              = 0;        $infunction                                 = false;        $space_punct_listsep                        = ' ';        $space_punct_listsep_function_name          = ' ';        // $space_alpha_reserved_word = '<br />'."\n";        $space_alpha_reserved_word                  = ' ';        $keywords_with_brackets_1before            = array(            'INDEX' => 1,            'KEY' => 1,            'ON' => 1,            'USING' => 1        );        $keywords_with_brackets_2before            = array(            'IGNORE' => 1,            'INDEX' => 1,            'INTO' => 1,            'KEY' => 1,            'PRIMARY' => 1,            'PROCEDURE' => 1,            'REFERENCES' => 1,            'UNIQUE' => 1,            'USE' => 1        );        // These reserved words do NOT get a newline placed near them.        $keywords_no_newline               = array(            'AS' => 1,            'ASC' => 1,            'DESC' => 1,            'DISTINCT' => 1,            'DUPLICATE' => 1,            'HOUR' => 1,            'INTERVAL' => 1,            'IS' => 1,            'LIKE' => 1,            'NOT' => 1,            'NULL' => 1,            'ON' => 1,            'REGEXP' => 1        );        // These reserved words introduce a privilege list        $keywords_priv_list                = array(            'GRANT' => 1,            'REVOKE' => 1        );        if ($number_of_tokens == -1) {            $number_of_tokens = $arr['len'];        }        $typearr   = array();        if ($number_of_tokens >= 0) {            $typearr[0] = '';            $typearr[1] = '';            $typearr[2] = '';            $typearr[3] = $arr[$start_token]['type'];        }        $in_priv_list = false;        for ($i = $start_token; $i < $number_of_tokens; $i++) {            // DEBUG echo "Loop format <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            $before = '';            $after  = '';            // array_shift($typearr);            /*            0 prev2            1 prev            2 current            3 next            */            if (($i + 1) < $number_of_tokens) {                $typearr[4] = $arr[$i + 1]['type'];            } else {                $typearr[4] = '';            }            for ($j=0; $j<4; $j++) {                $typearr[$j] = $typearr[$j + 1];            }            switch ($typearr[2]) {            case 'alpha_bitfield_constant_introducer':                $before     = ' ';                $after      = '';                break;            case 'white_newline':                $before     = '';                break;            case 'punct_bracket_open_round':                $bracketlevel++;                $infunction = false;                // Make sure this array is sorted!                if (($typearr[1] == 'alpha_functionName') || ($typearr[1] == 'alpha_columnType') || ($typearr[1] == 'punct')                    || ($typearr[3] == 'digit_integer') || ($typearr[3] == 'digit_hex') || ($typearr[3] == 'digit_float')                    || (($typearr[0] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_2before[strtoupper($arr[$i - 2]['data'])]))                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_1before[strtoupper($arr[$i - 1]['data'])]))                    ) {                    $functionlevel++;                    $infunction = true;                    $after      .= ' ';                } else {                    $indent++;                    $after      .= ($mode != 'query_only' ? '<div class="syntax_indent' . $indent . '">' : ' ');                }                break;            case 'alpha_identifier':                if (($typearr[1] == 'punct_qualifier') || ($typearr[3] == 'punct_qualifier')) {                    $after      = '';                    $before     = '';                }                // for example SELECT 1 somealias                if ($typearr[1] == 'digit_integer') {                    $before     = ' ';                }                if (($typearr[3] == 'alpha_columnType') || ($typearr[3] == 'alpha_identifier')) {                    $after      .= ' ';                }                break;            case 'punct_user':            case 'punct_qualifier':                $before         = '';                $after          = '';                break;            case 'punct_listsep':                if ($infunction == true) {                    $after      .= $space_punct_listsep_function_name;                } else {                    $after      .= $space_punct_listsep;                }                break;            case 'punct_queryend':                if (($typearr[3] != 'comment_mysql') && ($typearr[3] != 'comment_ansi') && $typearr[3] != 'comment_c') {                    $after     .= $html_line_break;                    $after     .= $html_line_break;                }                $space_punct_listsep               = ' ';                $space_punct_listsep_function_name = ' ';                $space_alpha_reserved_word         = ' ';                $in_priv_list                      = false;                break;            case 'comment_mysql':            case 'comment_ansi':                $after         .= $html_line_break;                break;            case 'punct':                $before         .= ' ';                if ($docu && isset($PMA_SQPdata_operators_docs[$arr[$i]['data']]) &&                        ($arr[$i]['data'] != '*' || in_array($arr[$i]['type'], array('digit_integer','digit_float','digit_hex')))) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['link'],                        false,                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['anchor'],                        true);                    $after .= '</a>';                }                // workaround for                // select * from mytable limit 0,-1                // (a side effect of this workaround is that                // select 20 - 9                // becomes                // select 20 -9                // )                if ($typearr[3] != 'digit_integer') {                    $after        .= ' ';                }                break;            case 'punct_bracket_close_round':                // only close bracket level when it was opened before                if ($bracketlevel > 0) {                    $bracketlevel--;                    if ($infunction == true) {                        $functionlevel--;                        $after     .= ' ';                        $before    .= ' ';                    } else {                        $indent--;                        $before    .= ($mode != 'query_only' ? '</div>' : ' ');                    }                    $infunction    = ($functionlevel > 0) ? true : false;                }                break;            case 'alpha_columnType':                if ($docu) {                    switch ($arr[$i]['data']) {                    case 'tinyint':                    case 'smallint':                    case 'mediumint':                    case 'int':                    case 'bigint':                    case 'decimal':                    case 'float':                    case 'double':                    case 'real':                    case 'bit':                    case 'boolean':                    case 'serial':                        $before .= PMA_showMySQLDocu('data-types', 'numeric-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'date':                    case 'datetime':                    case 'timestamp':                    case 'time':                    case 'year':                        $before .= PMA_showMySQLDocu('data-types', 'date-and-time-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'char':                    case 'varchar':                    case 'tinytext':                    case 'text':                    case 'mediumtext':                    case 'longtext':                    case 'binary':                    case 'varbinary':                    case 'tinyblob':                    case 'mediumblob':                    case 'blob':                    case 'longblob':                    case 'enum':                    case 'set':                        $before .= PMA_showMySQLDocu('data-types', 'string-types', false, '', true);                        $after = '</a>' . $after;                        break;                    }                }                if ($typearr[3] == 'alpha_columnAttrib') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnType') {                    $before    .= ' ';                }                break;            case 'alpha_columnAttrib':                // ALTER TABLE tbl_name AUTO_INCREMENT = 1                // COLLATE LATIN1_GENERAL_CI DEFAULT                if ($typearr[1] == 'alpha_identifier' || $typearr[1] == 'alpha_charset') {                    $before .= ' ';                }                if (($typearr[3] == 'alpha_columnAttrib') || ($typearr[3] == 'quote_single') || ($typearr[3] == 'digit_integer')) {                    $after     .= ' ';                }                // workaround for                // AUTO_INCREMENT = 31DEFAULT_CHARSET = utf-8                if ($typearr[2] == 'alpha_columnAttrib' && $typearr[3] == 'alpha_reservedWord') {                    $before .= ' ';                }                // workaround for                // select * from mysql.user where binary user="root"                // binary is marked as alpha_columnAttrib                // but should be marked as a reserved word                if (strtoupper($arr[$i]['data']) == 'BINARY'                  && $typearr[3] == 'alpha_identifier') {                    $after     .= ' ';                }                break;            case 'alpha_functionName':                $funcname = strtoupper($arr[$i]['data']);                if ($docu && isset($PMA_SQPdata_functions_docs[$funcname])) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_functions_docs[$funcname]['link'],                        false,                        $PMA_SQPdata_functions_docs[$funcname]['anchor'],                        true);                    $after .= '</a>';                }                break;            case 'alpha_reservedWord':                // do not uppercase the reserved word if we are calling                // this function in query_only mode, because we need                // the original query (otherwise we get problems with                // semi-reserved words like "storage" which is legal                // as an identifier name)                if ($mode != 'query_only') {                    $arr[$i]['data'] = strtoupper($arr[$i]['data']);                }                if ((($typearr[1] != 'alpha_reservedWord')                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_no_newline[strtoupper($arr[$i - 1]['data'])])))                    && ($typearr[1] != 'punct_level_plus')                    && (!isset($keywords_no_newline[$arr[$i]['data']]))) {                    // do not put a space before the first token, because                    // we use a lot of pattern matching checking for the                    // first reserved word at beginning of query                    // so do not put a newline before                    //                    // also we must not be inside a privilege list                    if ($i > 0) {                        // the alpha_identifier exception is there to                        // catch cases like                        // GRANT SELECT ON mydb.mytable TO myuser@localhost                        // (else, we get mydb.mytableTO)                        //                        // the quote_single exception is there to                        // catch cases like                        // GRANT ... TO 'marc'@'domain.com' IDENTIFIED...                        /**                         * @todo fix all cases and find why this happens                         */                        if (!$in_priv_list || $typearr[1] == 'alpha_identifier' || $typearr[1] == 'quote_single' || $typearr[1] == 'white_newline') {                            $before    .= $space_alpha_reserved_word;                        }                    } else {                        // on first keyword, check if it introduces a                        // privilege list                        if (isset($keywords_priv_list[$arr[$i]['data']])) {                            $in_priv_list = true;                        }                    }                } else {                    $before    .= ' ';                }                switch ($arr[$i]['data']) {                case 'CREATE':                case 'ALTER':                case 'DROP':                case 'RENAME';                case 'TRUNCATE':                case 'ANALYZE':                case 'ANALYSE':                case 'OPTIMIZE':                    if ($docu) {                        switch ($arr[$i + 1]['data']) {                        case 'EVENT':                        case 'TABLE':                        case 'TABLESPACE':                        case 'FUNCTION':                        case 'INDEX':                        case 'PROCEDURE':                        case 'TRIGGER':                        case 'SERVER':                        case 'DATABASE':                        case 'VIEW':                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_' . $arr[$i + 1]['data'], false, '', true);                            $close_docu_link = true;                            break;                        }                        if ($arr[$i + 1]['data'] == 'LOGFILE' && $arr[$i + 2]['data'] == 'GROUP') {                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_LOGFILE_GROUP', false, '', true);                            $close_docu_link = true;                        }                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EVENT':                case 'TABLESPACE':                case 'TABLE':                case 'FUNCTION':                case 'INDEX':                case 'PROCEDURE':                case 'SERVER':                case 'TRIGGER':                case 'DATABASE':                case 'VIEW':                case 'GROUP':                    if ($close_docu_link) {                        $after = '</a>' . $after;                        $close_docu_link = false;                    }                    break;                case 'SET':                    if ($docu && ($i == 0 || $arr[$i - 1]['data'] != 'CHARACTER')) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EXPLAIN':                case 'DESCRIBE':                case 'DELETE':                case 'SHOW':                case 'UPDATE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'INSERT':                case 'REPLACE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = $html_line_break;                    }                    break;                case 'VALUES':                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'SELECT':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT', false, '', true);                        $after = '</a>' . $after;                    }                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'CALL':                case 'DO':                case 'HANDLER':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    break;                default:                    if ($close_docu_link && in_array($arr[$i]['data'], array('LIKE', 'NOT', 'IN', 'REGEXP', 'NULL'))) {                        $after .= '</a>';                        $close_docu_link = false;                    } else if ($docu && isset($PMA_SQPdata_functions_docs[$arr[$i]['data']])) {                        /* Handle multi word statements first */                        if (isset($typearr[4]) && $typearr[4] == 'alpha_reservedWord' && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else if (isset($typearr[3]) && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else {                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$arr[$i]['data']]['link'], false, $PMA_SQPdata_functions_docs[$arr[$i]['data']]['anchor'], true);                            $after .= '</a>';                        }                    }                    break;                } // end switch ($arr[$i]['data'])                $after         .= ' ';                break;            case 'digit_integer':            case 'digit_float':            case 'digit_hex':                /**                 * @todo could there be other types preceding a digit?                 */                if ($typearr[1] == 'alpha_reservedWord') {                    $after .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnAttrib') {                    $before .= ' ';                }                break;            case 'alpha_variable':                $after      = ' ';                break;            case 'quote_double':            case 'quote_single':                // workaround: for the query                // REVOKE SELECT ON `base2\_db`.* FROM 'user'@'%'                // the @ is incorrectly marked as alpha_variable                // in the parser, and here, the '%' gets a blank before,                // which is a syntax error                if ($typearr[1] != 'punct_user' && $typearr[1] != 'alpha_bitfield_constant_introducer') {                    $before        .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                break;            case 'quote_backtick':                // here we check for punct_user to handle correctly                // DEFINER = `username`@`%`                // where @ is the punct_user and `%` is the quote_backtick                if ($typearr[3] != 'punct_qualifier' && $typearr[3] != 'alpha_variable' && $typearr[3] != 'punct_user') {                    $after     .= ' ';                }                if ($typearr[1] != 'punct_qualifier' && $typearr[1] != 'alpha_variable' && $typearr[1] != 'punct_user') {                    $before    .= ' ';                }                break;            default:                break;            } // end switch ($typearr[2])            /*            if ($typearr[3] != 'punct_qualifier') {                $after             .= ' ';            }            $after                 .= "\n";            */            $str .= $before;            if ($mode=='color') {                $str .= PMA_SQP_formatHTML_colorize($arr[$i]);            } elseif ($mode == 'text') {                $str .= htmlspecialchars($arr[$i]['data']);            } else {                $str .= $arr[$i]['data'];            }            $str .= $after;        } // end for        // close unclosed indent levels        while ($indent > 0) {            $indent--;            $str .= ($mode != 'query_only' ? '</div>' : ' ');        }        /* End possibly unclosed documentation link */        if ($close_docu_link) {            $str .= '</a>';            $close_docu_link = false;        }        if ($mode!='query_only') {            // close inner_sql span                $str .= '</span>';        }        if ($mode=='color') {            // close syntax span            $str .= '</span>';        }        return $str;    } // end of the "PMA_SQP_formatHtml()" function}/** * Builds a CSS rule used for html formatted SQL queries * * @param string  The class name * @param string  The property name * @param string  The property value * * @return string  The CSS rule * * @access public * * @see    PMA_SQP_buildCssData() */function PMA_SQP_buildCssRule($classname, $property, $value){    $str     = '.' . $classname . ' {';    if ($value != '') {        $str .= $property . ': ' . $value . ';';    }    $str     .= '}' . "\n";    return $str;} // end of the "PMA_SQP_buildCssRule()" function/** * Builds CSS rules used for html formatted SQL queries * * @return string  The CSS rules set * * @access public * * @global array   The current PMA configuration * * @see    PMA_SQP_buildCssRule() */function PMA_SQP_buildCssData(){    global $cfg;    $css_string     = '';    foreach ($cfg['SQP']['fmtColor'] AS $key => $col) {        $css_string .= PMA_SQP_buildCssRule('syntax_' . $key, 'color', $col);    }    for ($i = 0; $i < 8; $i++) {        $css_string .= PMA_SQP_buildCssRule(            'syntax_indent' . $i, 'margin-left',            ($i * $cfg['SQP']['fmtInd']) . $cfg['SQP']['fmtIndUnit']);    }    return $css_string;} // end of the "PMA_SQP_buildCssData()" functionif (! defined('PMA_MINIMUM_COMMON')) {    /**     * Gets SQL queries with no format     *     * @param array   The SQL queries list     *     * @return string  The SQL queries with no format     *     * @access public     */    function PMA_SQP_formatNone($arr)    {        $formatted_sql = htmlspecialchars($arr['raw']);        $formatted_sql = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $formatted_sql);        return $formatted_sql;    } // end of the "PMA_SQP_formatNone()" function} // end if: minimal common.lib needed??>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * query by example the whole database * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * A query has been submitted -> (maybe) execute it */$message_to_display = false;if (isset($_REQUEST['submit_sql']) && ! empty($sql_query)) {    if (! preg_match('@^SELECT@i', $sql_query)) {        $message_to_display = true;    } else {        $goto      = 'db_sql.php';        include './sql.php';        exit;    }}$sub_part  = '_qbe';require './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_qbe.php';$url_params['goto'] = 'db_qbe.php';require './libraries/db_info.inc.php';if ($message_to_display) {    PMA_Message::error(__('You have to choose at least one column to display'))->display();}unset($message_to_display);/** * Initialize some variables */$col_cnt = PMA_ifSetOr($_REQUEST['col_cnt'], 3, 'numeric');$add_col = PMA_ifSetOr($_REQUEST['add_col'], 0, 'numeric');$add_row = PMA_ifSetOr($_REQUEST['add_row'], 0, 'numeric');$rows    = PMA_ifSetOr($_REQUEST['rows'],    0, 'numeric');$ins_col = PMA_ifSetOr($_REQUEST['ins_col'], null, 'array');$del_col = PMA_ifSetOr($_REQUEST['del_col'], null, 'array');$prev_criteria = isset($_REQUEST['prev_criteria'])    ? $_REQUEST['prev_criteria']    : array();$criteria = isset($_REQUEST['criteria'])    ? $_REQUEST['criteria']    : array_fill(0, $col_cnt, '');$ins_row = isset($_REQUEST['ins_row'])    ? $_REQUEST['ins_row']    : array_fill(0, $col_cnt, '');$del_row = isset($_REQUEST['del_row'])    ? $_REQUEST['del_row']    : array_fill(0, $col_cnt, '');$and_or_row = isset($_REQUEST['and_or_row'])    ? $_REQUEST['and_or_row']    : array_fill(0, $col_cnt, '');$and_or_col = isset($_REQUEST['and_or_col'])    ? $_REQUEST['and_or_col']    : array_fill(0, $col_cnt, '');// minimum width$form_column_width = 12;$col = max($col_cnt + $add_col, 0);$row = max($rows + $add_row, 0);// The tables list sent by a previously submitted formif (PMA_isValid($_REQUEST['TableList'], 'array')) {    foreach ($_REQUEST['TableList'] as $each_table) {        $tbl_names[$each_table] = ' selected="selected"';    }} // end if// this was a work in progress, deactivated for now//$columns = PMA_DBI_get_columns_full($GLOBALS['db']);//$tables  = PMA_DBI_get_columns_full($GLOBALS['db']);/** * Prepares the form */$tbl_result     = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);$tbl_result_cnt = PMA_DBI_num_rows($tbl_result);if (0 == $tbl_result_cnt) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;}// The tables list gets from MySQLwhile (list($tbl) = PMA_DBI_fetch_row($tbl_result)) {    $fld_results = PMA_DBI_get_columns($db, $tbl);    if (empty($tbl_names[$tbl]) && !empty($_REQUEST['TableList'])) {        $tbl_names[$tbl] = '';    } else {        $tbl_names[$tbl] = ' selected="selected"';    } //  end if    // The fields list per selected tables    if ($tbl_names[$tbl] == ' selected="selected"') {        $each_table = PMA_backquote($tbl);        $fld[]  = $each_table . '.*';        foreach ($fld_results as $each_field) {            $each_field = $each_table . '.' . PMA_backquote($each_field['Field']);            $fld[] = $each_field;            // increase the width if necessary            $form_column_width = max(strlen($each_field), $form_column_width);        } // end foreach    } // end if} // end whilePMA_DBI_free_result($tbl_result);// largest width found$realwidth = $form_column_width . 'ex';/** * Displays the Query by example form *//** * Enter description here... * * @param array     $columns * @param integer   $column_number * @param string    $selected */function showColumnSelectCell($columns, $column_number, $selected = ''){    ?>    <td align="center">        <select name="Field[<?php echo $column_number; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    foreach ($columns as $column) {        if ($column === $selected) {            $sel = ' selected="selected"';        } else {            $sel = '';        }        echo '<option value="' . htmlspecialchars($column) . '"' . $sel . '>'            . str_replace(' ', '&nbsp;', htmlspecialchars($column)) . '</option>' . "\n";    }    ?>        </select>    </td>    <?php}?><?php if (!empty($tab_designer['link'])) {        $tab_designer['link'] = htmlentities($tab_designer['link']);        $tab_designer['link'] = $tab_designer['link'] . PMA_generate_common_url($url_params);        if (! empty($tab_designer['args'])) {            foreach ($tab_designer['args'] as $param => $value) {                $tab_designer['link'] .= PMA_get_arg_separator('html') . urlencode($param) . '='                    . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    if (isset($tab_designer['link'])) {?><div id="visual_builder_anchor" class="notice hide">    <span id="footnote_1"><?php printf(__('Switch to %svisual builder%s'), ' <a href="' . $tab_designer['link'] . PMA_get_arg_separator('html') . 'query=1">', '</a>'); ?>    </span></div><?php    }?><form action="db_qbe.php" method="post"><fieldset><table class="data" style="width: 100%;"><tr class="odd noclick">    <th><?php echo __('Column'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {        showColumnSelectCell($fld, $z);        $z++;    }    if (! empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    $selected = '';    if (isset($Field[$x])) {        $selected = $Field[$x];        $curField[$z] = $Field[$x];    }    showColumnSelectCell($fld, $z, $selected);    $z++;} // end for?></tr><!-- Sort row --><tr class="even noclick">    <th><?php echo __('Sort'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>            <option value="ASC"><?php echo __('Ascending'); ?></option>            <option value="DESC"><?php echo __('Descending'); ?></option>        </select>    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    echo "\n";    // If they have chosen all fields using the * selector,    // then sorting is not available    // Fix for Bug #570698    if (isset($Sort[$x]) && isset($Field[$x])     && substr($Field[$x], -2) == '.*') {        $Sort[$x] = '';    } //end if    if (isset($Sort[$x]) && $Sort[$x] == 'ASC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="ASC"' . $sel . '>' . __('Ascending') . '</option>' . "\n";    if (isset($Sort[$x]) && $Sort[$x] == 'DESC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="DESC"' . $sel . '>' . __('Descending') . '</option>' . "\n";    ?>        </select>    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Show row --><tr class="odd noclick">    <th><?php echo __('Show'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($Show[$x])) {        $checked     = ' checked="checked"';        $curShow[$z] = $Show[$x];    } else {        $checked     =  '';    }    ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]"<?php echo $checked; ?> />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Criteria row --><tr class="even noclick">    <th><?php echo __('Criteria'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="text" name="criteria[<?php echo $z; ?>]" value="" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($criteria[$x])) {        $tmp_criteria = $criteria[$x];    }    if ((empty($prev_criteria) || ! isset($prev_criteria[$x]))        || $prev_criteria[$x] != htmlspecialchars($tmp_criteria)) {        $curCriteria[$z]   = $tmp_criteria;    } else {        $curCriteria[$z]   = $prev_criteria[$x];    }    ?>    <td align="center">        <input type="hidden" name="prev_criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($curCriteria[$z]); ?>" />        <input type="text" name="criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($tmp_criteria); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- And/Or columns and rows --><?php$w = 0;$odd_row = true;for ($y = 0; $y <= $row; $y++) {    if (isset($ins_row[$y]) && $ins_row[$y] == 'on') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table cellpadding="0" cellspacing="0" border="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />                &nbsp;            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />                &nbsp;            </td>        </tr>        </table>    </td>        <?php        $z = 0;        for ($x = 0; $x < $col; $x++) {            if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {                echo "\n";                $or = 'Or' . $w . '[' . $z . ']';                ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>                <?php                $z++;            } // end if            if (isset($del_col[$x]) && $del_col[$x] == 'on') {                continue;            }            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end for        $w++;        echo "\n";        ?></tr>        <?php        $odd_row =! $odd_row;    } // end if    if (isset($del_row[$y]) && $del_row[$y] == 'on') {        continue;    }    if (isset($and_or_row[$y])) {        $curAndOrRow[$w] = $and_or_row[$y];    }    if (isset($and_or_row[$y]) && $and_or_row[$y] == 'and') {        $chk['and'] =  ' checked="checked"';        $chk['or']  =  '';    } else {        $chk['or']  =  ' checked="checked"';        $chk['and'] =  '';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table border="0" cellpadding="0" cellspacing="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />            </td>        </tr>        </table>    </td>    <?php    $z = 0;    for ($x = 0; $x < $col; $x++) {        if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end if        if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {            continue;        }        echo "\n";        $or = 'Or' . $y;        if (! isset(${$or})) {            ${$or} = '';        }        if (!empty(${$or}) && isset(${$or}[$x])) {            $tmp_or = ${$or}[$x];        } else {            $tmp_or     = '';        }        ?>    <td align="center">        <input type="text" name="Or<?php echo $w . '[' . $z . ']'; ?>" value="<?php echo htmlspecialchars($tmp_or); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        if (!empty(${$or}) && isset(${$or}[$x])) {            ${'cur' . $or}[$z] = ${$or}[$x];        }        $z++;    } // end for    $w++;    echo "\n";    ?></tr>    <?php    echo "\n";    $odd_row =! $odd_row;} // end for?><!-- Modify columns --><tr class="even noclick">    <th><?php echo __('Modify'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        $curAndOrCol[$z] = $and_or_col[$y];        if ($and_or_col[$z] == 'or') {            $chk['or']  = ' checked="checked"';            $chk['and'] = '';        } else {            $chk['and'] = ' checked="checked"';            $chk['or']  = '';        }        ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($and_or_col[$y])) {        $curAndOrCol[$z] = $and_or_col[$y];    }    if (isset($and_or_col[$z]) && $and_or_col[$z] == 'or') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';    } else {        $chk['and'] = ' checked="checked"';        $chk['or']  = '';    }    ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>    <?php    $z++;    echo "\n";} // end for?>    </tr></table><!-- Other controls --><?php$w--;$url_params['db']       = $db;$url_params['col_cnt']  = $z;$url_params['rows']     = $w;echo PMA_generate_common_hidden_inputs($url_params);?></fieldset><fieldset class="tblFooters"><table border="0" cellpadding="2" cellspacing="1"><tr>    <td nowrap="nowrap">        <?php echo __('Add/Delete criteria rows'); ?>:        <select size="1" name="add_row">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <td nowrap="nowrap"><?php echo __('Add/Delete columns'); ?>:        <select size="1" name="add_col">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <!-- Generates a query -->    <td><input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" /></td></tr></table></fieldset><table><tr><td>        <fieldset>            <legend><?php echo __('Use Tables'); ?></legend><?php$options = '';$numTableListOptions = 0;foreach ($tbl_names as $key => $val) {    $options .= '                        ';    $options .= '<option value="' . htmlspecialchars($key) . '"' . $val . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($key)) . '</option>' . "\n";    $numTableListOptions++;}?>            <select name="TableList[]" multiple="multiple" id="listTable"                size="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>">                <?php echo $options; ?>            </select>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" />        </fieldset>    </td>    <td width="20">&nbsp;</td>    <td>        <fieldset>            <legend><?php echo sprintf(__('SQL query on database <b>%s</b>:'), PMA_getDbLink($db)); ?>                </legend>            <textarea cols="80" name="sql_query" id="textSqlquery"                rows="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>"                dir="<?php echo $text_dir; ?>"><?php// 1. SELECT$last_select = 0;if (! isset($qry_select)) {    $qry_select         = '';}for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && isset($curShow[$x]) && $curShow[$x] == 'on') {        if ($last_select) {            $qry_select .=  ', ';        }        $qry_select     .= $curField[$x];        $last_select    = 1;    }} // end forif (!empty($qry_select)) {    echo  'SELECT ' . htmlspecialchars($qry_select) . "\n";}// 2. FROM// Create LEFT JOINS out of Relations// If we can use Relations we could make some left joins.// First find out if relations are available in this database.// First we need the really needed Tables - those in TableList might still be// all Tables.if (isset($Field) && count($Field) > 0) {    // Initialize some variables    $tab_all    = array();    $col_all    = array();    $tab_wher   = array();    $tab_know   = array();    $tab_left   = array();    $col_where  = array();    $fromclause = '';    // We only start this if we have fields, otherwise it would be dumb    foreach ($Field as $value) {        $parts             = explode('.', $value);        if (!empty($parts[0]) && !empty($parts[1])) {            $tab_raw       = $parts[0];            $tab           = str_replace('`', '', $tab_raw);            $tab_all[$tab] = $tab;            $col_raw       = $parts[1];            $col_all[]     = $tab . '.' . str_replace('`', '', $col_raw);         }    } // end while    // Check 'where' clauses    if ($cfgRelation['relwork'] && count($tab_all) > 0) {        // Now we need all tables that we have in the where clause        $crit_cnt         = count($criteria);        for ($x = 0; $x < $crit_cnt; $x++) {            $curr_tab     = explode('.', $Field[$x]);            if (!empty($curr_tab[0]) && !empty($curr_tab[1])) {                $tab_raw  = $curr_tab[0];                $tab      = str_replace('`', '', $tab_raw);                $col_raw  = $curr_tab[1];                $col1     = str_replace('`', '', $col_raw);                $col1     = $tab . '.' . $col1;                // Now we know that our array has the same numbers as $criteria                // we can check which of our columns has a where clause                if (!empty($criteria[$x])) {                    if (substr($criteria[$x], 0, 1) == '=' || stristr($criteria[$x], 'is')) {                        $col_where[$col] = $col1;                        $tab_wher[$tab]  = $tab;                    }                } // end if            } // end if        } // end for        // Cleans temp vars w/o further use        unset($tab_raw);        unset($col_raw);        unset($col1);        if (count($tab_wher) == 1) {            // If there is exactly one column that has a decent where-clause            // we will just use this            $master = key($tab_wher);        } else {            // Now let's find out which of the tables has an index            // (When the control user is the same as the normal user            // because he is using one of his databases as pmadb,            // the last db selected is not always the one where we need to work)            PMA_DBI_select_db($db);            foreach ($tab_all as $tab) {                $indexes = PMA_DBI_get_table_indexes($db, $tab);                foreach ($indexes as $ind) {                    $col1 = $tab . '.' . $ind['Column_name'];                    if (isset($col_all[$col1])) {                        if ($ind['Non_unique'] == 0) {                            if (isset($col_where[$col1])) {                                $col_unique[$col1] = 'Y';                            } else {                                $col_unique[$col1] = 'N';                            }                        } else {                            if (isset($col_where[$col1])) {                                $col_index[$col1] = 'Y';                            } else {                                $col_index[$col1] = 'N';                            }                        }                    }                } // end while (each col of tab)            } // end while (each tab)            // now we want to find the best.            if (isset($col_unique) && count($col_unique) > 0) {                $col_cand = $col_unique;                $needsort = 1;            } elseif (isset($col_index) && count($col_index) > 0) {                $col_cand = $col_index;                $needsort = 1;            } elseif (isset($col_where) && count($col_where) > 0) {                $col_cand = $tab_wher;                $needsort = 0;            } else {                $col_cand = $tab_all;                $needsort = 0;            }            // If we came up with $col_unique (very good) or $col_index (still            // good) as $col_cand we want to check if we have any 'Y' there            // (that would mean that they were also found in the whereclauses            // which would be great). if yes, we take only those            if ($needsort == 1) {                foreach ($col_cand as $col => $is_where) {                    $tab           = explode('.', $col);                    $tab           = $tab[0];                    if ($is_where == 'Y') {                        $vg[$col]  = $tab;                    } else {                        $sg[$col]  = $tab;                    }                }                if (isset($vg)) {                    $col_cand      = $vg;                    // Candidates restricted in index+where                } else {                    $col_cand      = $sg;                    // None of the candidates where in a where-clause                }            }            // If our array of candidates has more than one member we'll just            // find the smallest table.            // Of course the actual query would be faster if we check for            // the Criteria which gives the smallest result set in its table,            // but it would take too much time to check this            if (count($col_cand) > 1) {                // Of course we only want to check each table once                $checked_tables = $col_cand;                foreach ($col_cand as $tab) {                    if ($checked_tables[$tab] != 1) {                        $tsize[$tab] = PMA_Table::countRecords($db, $tab, false);                        $checked_tables[$tab] = 1;                    }                    $csize[$tab] = $tsize[$tab];                }                asort($csize);                reset($csize);                $master = key($csize); // Smallest            } else {                reset($col_cand);                $master = current($col_cand); // Only one single candidate            }        } // end if (exactly one where clause)        $tab_left = $tab_all;        unset($tab_left[$master]);        $tab_know[$master] = $master;        $run   = 0;        $emerg = '';        while (count($tab_left) > 0) {            if ($run % 2 == 0) {                PMA_getRelatives('master');            } else {                PMA_getRelatives('foreign');            }            $run++;            if ($run > 5) {                foreach ($tab_left as $tab) {                    $emerg .= ', ' . PMA_backquote($tab);                    unset($tab_left[$tab]);                }            }        } // end while        $qry_from = PMA_backquote($master) . $emerg . $fromclause;    } // end if ($cfgRelation['relwork'] && count($tab_all) > 0)} // end count($Field) > 0// In case relations are not defined, just generate the FROM clause// from the list of tables, however we don't generate any JOINif (empty($qry_from) && isset($tab_all)) {    $qry_from = implode(', ', $tab_all);}// Now let's see what we gotif (!empty($qry_from)) {    echo 'FROM ' . htmlspecialchars($qry_from) . "\n";}// 3. WHERE$qry_where          = '';$criteria_cnt       = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && !empty($curCriteria[$x]) && $x && isset($last_where) && isset($curAndOrCol)) {        $qry_where  .= ' ' . strtoupper($curAndOrCol[$last_where]) . ' ';    }    if (!empty($curField[$x]) && !empty($curCriteria[$x])) {        $qry_where  .= '(' . $curField[$x] . ' ' . $curCriteria[$x] . ')';        $last_where = $x;        $criteria_cnt++;    }} // end forif ($criteria_cnt > 1) {    $qry_where      = '(' . $qry_where . ')';}// OR rows ${'cur' . $or}[$x]if (! isset($curAndOrRow)) {    $curAndOrRow          = array();}for ($y = 0; $y <= $row; $y++) {    $criteria_cnt         = 0;    $qry_orwhere          = '';    $last_orwhere         = '';    for ($x = 0; $x < $col; $x++) {        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x]) && $x) {            $qry_orwhere  .= ' ' . strtoupper($curAndOrCol[$last_orwhere]) . ' ';        }        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x])) {            $qry_orwhere  .= '(' . $curField[$x]                          .  ' '                          .  ${'curOr' . $y}[$x]                          .  ')';            $last_orwhere = $x;            $criteria_cnt++;        }    } // end for    if ($criteria_cnt > 1) {        $qry_orwhere      = '(' . $qry_orwhere . ')';    }    if (!empty($qry_orwhere)) {        $qry_where .= "\n"                   .  strtoupper(isset($curAndOrRow[$y]) ? $curAndOrRow[$y] . ' ' : '')                   .  $qry_orwhere;    } // end if} // end forif (!empty($qry_where) && $qry_where != '()') {    echo 'WHERE ' . htmlspecialchars($qry_where) . "\n";} // end if// 4. ORDER BY$last_orderby = 0;if (! isset($qry_orderby)) {    $qry_orderby      = '';}for ($x = 0; $x < $col; $x++) {    if ($last_orderby && $x && !empty($curField[$x]) && !empty($curSort[$x])) {        $qry_orderby  .=  ', ';    }    if (!empty($curField[$x]) && !empty($curSort[$x])) {        // if they have chosen all fields using the * selector,        // then sorting is not available        // Fix for Bug #570698        if (substr($curField[$x], -2) != '.*') {            $qry_orderby  .=  $curField[$x] . ' ' . $curSort[$x];            $last_orderby = 1;        }    }} // end forif (!empty($qry_orderby)) {    echo 'ORDER BY ' . htmlspecialchars($qry_orderby) . "\n";}?>        </textarea>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="submit_sql" value="<?php echo __('Submit Query'); ?>" />        </fieldset>    </td></tr></table></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display selection for relational field values * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';PMA_checkParameters(array('db', 'table', 'field'));require_once './libraries/ob.lib.php';PMA_outBufferPre();require_once './libraries/header_http.inc.php';/** * Displays the frame */require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();$foreigners  = ($cfgRelation['relwork'] ? PMA_getForeigners($db, $table) : false);$override_total = true;if (! isset($pos)) {    $pos = 0;}$foreign_limit = 'LIMIT ' . $pos . ', ' . $GLOBALS['cfg']['MaxRows'] . ' ';if (isset($foreign_navig) && $foreign_navig == __('Show all')) {    unset($foreign_limit);}$foreignData = PMA_getForeignData($foreigners, $field, $override_total, isset($foreign_filter) ? $foreign_filter : '', $foreign_limit);if (isset($rownumber)) {    $rownumber_param = '&amp;rownumber=' . urlencode($rownumber);} else {    $rownumber_param = '';}$gotopage = '';$showall = '';if (is_array($foreignData['disp_row'])) {    if ($cfg['ShowAll'] && ($foreignData['the_total'] > $GLOBALS['cfg']['MaxRows'])) {        $showall = '<input type="submit" name="foreign_navig" value="' . __('Show all') . '" />';    }    $session_max_rows = $GLOBALS['cfg']['MaxRows'];    $pageNow = @floor($pos / $session_max_rows) + 1;    $nbTotalPage = @ceil($foreignData['the_total'] / $session_max_rows);    if ($foreignData['the_total'] > $GLOBALS['cfg']['MaxRows']) {        $gotopage = PMA_pageselector(            $session_max_rows,            $pageNow,            $nbTotalPage,            200,            5,            5,            20,            10,            __('Page number:')            );    }}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $text_dir; ?>"><head>    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=right&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?php// includes everything asked for by libraries/common.inc.phprequire_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    //<![CDATA[    self.focus();    function formupdate(fieldmd5, key) {        var $inline = window.opener.jQuery('.browse_foreign_clicked');        if ($inline.length != 0) {            $inline.removeClass('browse_foreign_clicked')                // for grid editing,                // puts new value in the previous element which is                // a span with class curr_value                .prev('.curr_value').text(key);            // for zoom-search editing, puts new value in the previous            // element which is an input field            $inline.prev('input[type=text]').val(key);            self.close();            return false;        }        if (opener && opener.document && opener.document.insertForm) {            var field = 'fields';            var field_null = 'fields_null';            <?php if (isset($rownumber)) { ?>            var element_name = field + '[multi_edit][<?php echo htmlspecialchars($rownumber); ?>][' + fieldmd5 + ']';            var null_name = field_null + '[multi_edit][<?php echo htmlspecialchars($rownumber); ?>][' + fieldmd5 + ']';            <?php } else { ?>            var element_name = field + '[]';            <?php } ?>            <?php if (isset($fieldkey) && is_numeric($fieldkey)) { ?>            var element_name_alt = field + '[<?php echo $fieldkey; ?>]';            <?php } else { ?>            var element_name_alt = field + '[0]';            <?php } ?>            if (opener.document.insertForm.elements[element_name]) {                // Edit/Insert form                opener.document.insertForm.elements[element_name].value = key;                if (opener.document.insertForm.elements[null_name]) {                    opener.document.insertForm.elements[null_name].checked = false;                }                self.close();                return false;            } else if (opener.document.insertForm.elements[element_name_alt]) {                // Search form                opener.document.insertForm.elements[element_name_alt].value = key;                self.close();                return false;            }        }        alert('<?php echo PMA_jsFormat(__('The target browser window could not be updated. Maybe you have closed the parent window, or your browser\'s security settings are configured to block cross-window updates.')); ?>');    }    //]]>    </script></head><body id="body_browse_foreigners"><form action="browse_foreigners.php" method="post"><fieldset><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="field" value="<?php echo htmlspecialchars($field); ?>" /><input type="hidden" name="fieldkey"    value="<?php echo isset($fieldkey) ? htmlspecialchars($fieldkey) : ''; ?>" /><?php if (isset($rownumber)) { ?><input type="hidden" name="rownumber" value="<?php echo htmlspecialchars($rownumber); ?>" /><?php } ?><span class="formelement">    <label for="input_foreign_filter"><?php echo __('Search') . ':'; ?></label>    <input type="text" name="foreign_filter" id="input_foreign_filter"        value="<?php echo isset($foreign_filter) ? htmlspecialchars($foreign_filter) : ''; ?>" />    <input type="submit" name="submit_foreign_filter" value="<?php echo __('Go');?>" /></span><span class="formelement">    <?php echo $gotopage; ?></span><span class="formelement">    <?php echo $showall; ?></span></fieldset></form><table width="100%"><?phpif (is_array($foreignData['disp_row'])) {    $header = '<tr>        <th>' . __('Keyname') . '</th>        <th>' . __('Description') . '</th>        <td width="20%"></td>        <th>' . __('Description') . '</th>        <th>' . __('Keyname') . '</th>    </tr>';    echo '<thead>' . $header . '</thead>' . "\n"        .'<tfoot>' . $header . '</tfoot>' . "\n"        .'<tbody>' . "\n";    $values = array();    $keys   = array();    foreach ($foreignData['disp_row'] as $relrow) {        if ($foreignData['foreign_display'] != false) {            $values[] = $relrow[$foreignData['foreign_display']];        } else {            $values[] = '';        }        $keys[] = $relrow[$foreignData['foreign_field']];    }    asort($keys);    $hcount = 0;    $odd_row = true;    $val_ordered_current_row = 0;    $val_ordered_current_equals_data = false;    $key_ordered_current_equals_data = false;    foreach ($keys as $key_ordered_current_row => $value) {    //for ($i = 0; $i < $count; $i++) {        $hcount++;        if ($cfg['RepeatCells'] > 0 && $hcount > $cfg['RepeatCells']) {            echo $header;            $hcount = 0;            $odd_row = true;        }        $key_ordered_current_key = $keys[$key_ordered_current_row];        $key_ordered_current_val = $values[$key_ordered_current_row];        $val_ordered_current_key = $keys[$val_ordered_current_row];        $val_ordered_current_val = $values[$val_ordered_current_row];        $val_ordered_current_row++;        if (PMA_strlen($val_ordered_current_val) <= $cfg['LimitChars']) {            $val_ordered_current_val = htmlspecialchars($val_ordered_current_val);            $val_ordered_current_val_title = '';        } else {            $val_ordered_current_val_title                = htmlspecialchars($val_ordered_current_val);            $val_ordered_current_val = htmlspecialchars(                PMA_substr($val_ordered_current_val, 0, $cfg['LimitChars'])                . '...'            );        }        if (PMA_strlen($key_ordered_current_val) <= $cfg['LimitChars']) {            $key_ordered_current_val = htmlspecialchars($key_ordered_current_val);            $key_ordered_current_val_title = '';        } else {            $key_ordered_current_val_title                = htmlspecialchars($key_ordered_current_val);            $key_ordered_current_val                = htmlspecialchars(                    PMA_substr($key_ordered_current_val, 0, $cfg['LimitChars']) . '...'                );        }        if (! empty($data)) {            $val_ordered_current_equals_data = $val_ordered_current_key == $data;            $key_ordered_current_equals_data = $key_ordered_current_key == $data;        }        ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td nowrap="nowrap">        <?php        echo ($key_ordered_current_equals_data ? '<strong>' : '')            .'<a href="#" title="' . __('Use this value')            . ($key_ordered_current_val_title != '' ? ': ' . $key_ordered_current_val_title : '') . '"'            .' onclick="formupdate(\'' . md5($field) . '\', \''            . PMA_jsFormat($key_ordered_current_key, false) . '\'); return false;">'            .htmlspecialchars($key_ordered_current_key) . '</a>' . ($key_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td>        <?php        echo ($key_ordered_current_equals_data ? '<strong>' : '')            . '<a href="#" title="' . __('Use this value') . ($key_ordered_current_val_title != '' ? ': '            . $key_ordered_current_val_title : '') . '" onclick="formupdate(\''            . md5($field) . '\', \'' . PMA_jsFormat($key_ordered_current_key, false) . '\'); return false;">'            . $key_ordered_current_val . '</a>' . ($key_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td width="20%">            <img src="<?php echo $GLOBALS['pmaThemeImage'] . 'spacer.png'; ?>"                alt="" width="1" height="1" /></td>        <td>        <?php        echo ($val_ordered_current_equals_data ? '<strong>' : '')            . '<a href="#" title="' . __('Use this value') .  ($val_ordered_current_val_title != '' ? ': '            . $val_ordered_current_val_title : '') . '" onclick="formupdate(\'' . md5($field)            . '\', \'' . PMA_jsFormat($val_ordered_current_key, false) . '\'); return false;">'            . $val_ordered_current_val . '</a>' . ($val_ordered_current_equals_data ? '</strong>' : '');        ?></td>        <td nowrap="nowrap">        <?php        echo ($val_ordered_current_equals_data ? '<strong>' : '') . '<a href="#" title="'        . __('Use this value') .  ($val_ordered_current_val_title != '' ? ': ' . $val_ordered_current_val_title : '')        . '" onclick="formupdate(\'' . md5($field) . '\', \''        . PMA_jsFormat($val_ordered_current_key, false) . '\'); return false;">' . htmlspecialchars($val_ordered_current_key)        . '</a>' . ($val_ordered_current_equals_data ? '</strong>' : '');        ?></td>    </tr>        <?php    } // end while}?></tbody></table></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_export.php&amp;back=tbl_export.php';require_once './libraries/tbl_info.inc.php';// Dump of a table$export_page_title = __('View dump (schema) of table');// When we have some query, we need to remove LIMIT from that and possibly// generate WHERE clause (if we are asked to export specific rows)if (! empty($sql_query)) {    // Parse query so we can work with tokens    $parsed_sql = PMA_SQP_parse($sql_query);    $analyzed_sql = PMA_SQP_analyze($parsed_sql);    // Need to generate WHERE clause?    if (isset($where_clause)) {        // Yes => rebuild query from scratch; this doesn't work with nested        // selects :-(        $sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $sql_query .= ' DISTINCT ';        }        $sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }        $wheres = array();        if (isset($where_clause) && is_array($where_clause)         && count($where_clause) > 0) {            $wheres[] = '(' . implode(') OR (', $where_clause) . ')';        }        if (!empty($analyzed_sql[0]['where_clause'])) {            $wheres[] = $analyzed_sql[0]['where_clause'];        }        if (count($wheres) > 0) {            $sql_query .= ' WHERE (' . implode(') AND (', $wheres) . ')';        }        if (!empty($analyzed_sql[0]['group_by_clause'])) {            $sql_query .= ' GROUP BY ' . $analyzed_sql[0]['group_by_clause'];        }        if (!empty($analyzed_sql[0]['having_clause'])) {            $sql_query .= ' HAVING ' . $analyzed_sql[0]['having_clause'];        }        if (!empty($analyzed_sql[0]['order_by_clause'])) {            $sql_query .= ' ORDER BY ' . $analyzed_sql[0]['order_by_clause'];        }    } else {        // Just crop LIMIT clause        $sql_query = $analyzed_sql[0]['section_before_limit'] . $analyzed_sql[0]['section_after_limit'];    }    $message = PMA_Message::success();}/** * Displays top menu links */require './libraries/tbl_links.inc.php';$export_type = 'table';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Get relations & co. status$cfgRelation = PMA_getRelationsParam();require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';function PMA_exportCheckboxCheck($str){    if (isset($GLOBALS['cfg']['Export'][$str]) && $GLOBALS['cfg']['Export'][$str]) {        echo ' checked="checked"';    }}function PMA_exportIsActive($what, $val){    if (isset($GLOBALS['cfg']['Export'][$what]) &&  $GLOBALS['cfg']['Export'][$what] == $val) {        echo ' checked="checked"';    }}/* Scan for plugins */$export_list = PMA_getPlugins('./libraries/export/', array('export_type' => $export_type, 'single_table' => isset($single_table)));/* Fail if we didn't find any plugin */if (empty($export_list)) {    PMA_Message::error( __('Could not load export plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><form method="post" action="export.php" name="dump"><?phpif ($export_type == 'server') {    echo PMA_generate_common_hidden_inputs('', '', 1);} elseif ($export_type == 'database') {    echo PMA_generate_common_hidden_inputs($db, '', 1);} else {    echo PMA_generate_common_hidden_inputs($db, $table, 1);}// just to keep this value for possible next display of this form after saving on serverif (isset($single_table)) {    echo '<input type="hidden" name="single_table" value="TRUE" />' . "\n";}echo '<input type="hidden" name="export_type" value="' . $export_type . '" />' . "\n";// If the export method was not set, the default is quickif (isset($_GET['export_method'])) {    $cfg['Export']['method'] = $_GET['export_method'];} elseif (! isset($cfg['Export']['method'])) {    $cfg['Export']['method'] = 'quick';}// The export method (quick, custom or custom-no-form)echo '<input type="hidden" name="export_method" value="' . htmlspecialchars($cfg['Export']['method']) . '" />';if (isset($_GET['sql_query'])) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($_GET['sql_query']) . '" />' . "\n";} elseif (! empty($sql_query)) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";}?><div class="exportoptions" id="header">    <h2>        <?php echo PMA_getImage('b_export.png', __('Export')); ?>        <?php        if ($export_type == 'server') {            echo __('Exporting databases from the current server');        } elseif ($export_type == 'database') {            printf(__('Exporting tables from "%s" database'), htmlspecialchars($db));        } else {            printf(__('Exporting rows from "%s" table'), htmlspecialchars($table));        }?>    </h2></div><div class="exportoptions" id="quick_or_custom">    <h3><?php echo __('Export Method:'); ?></h3>    <ul>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="quick" id="radio_quick_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' />';                } else {                    echo ' checked="checked" />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' />';            } else {                echo ' checked="checked" />';            }            echo '<label for ="radio_quick_export">' . __('Quick - display only the minimal options') . '</label>'; ?>        </li>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="custom" id="radio_custom_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' checked="checked" />';                } else {                    echo ' />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' checked="checked" />';            } else {                echo ' />';            }            echo '<label for="radio_custom_export">' . __('Custom - display all possible options') . '</label>';?>        </li>    </ul></div><div class="exportoptions" id="databases_and_tables">    <?php        if ($export_type == 'server') {            echo '<h3>' . __('Database(s):') . '</h3>';        } else if ($export_type == 'database') {            echo '<h3>' . __('Table(s):') . '</h3>';        }        if (! empty($multi_values)) {            echo $multi_values;        }    ?></div><?php if (strlen($table) && ! isset($num_tables) && ! PMA_Table::isMerge($db, $table)) { ?>    <div class="exportoptions" id="rows">        <h3><?php echo __('Rows:'); ?></h3>        <ul>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 1) {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" />';                    } else {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" checked="checked" />';                    }                    echo '<label for ="radio_allrows_0">' . __('Dump some row(s)') . '</label>'; ?>                <ul>                    <li><label for="limit_to"><?php echo __('Number of rows:') . '</label> <input type="text" id="limit_to" name="limit_to" size="5" value="'                . ((isset($_GET['limit_to'])) ? htmlspecialchars($_GET['limit_to']) : ((isset($unlim_num_rows) ? $unlim_num_rows : PMA_Table::countRecords($db, $table))))                . '" onfocus="this.select()" />' ?></li>                    <li><label for="limit_from"><?php echo __('Row to begin at:') . '</label> <input type="text" id="limit_from" name="limit_from" value="'                 . ((isset($_GET['limit_from'])) ? htmlspecialchars($_GET['limit_from']) : '0')                 . '" size="5" onfocus="this.select()" />'; ?></li>                </ul>            </li>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 0) {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" />';                } else {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" checked="checked" />';                }                echo ' <label for="radio_allrows_1">' . __('Dump all rows') . '</label>';?>            </li>        </ul>     </div><?php } ?><?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>    <div class="exportoptions" id="output_quick_export">        <h3><?php echo __('Output:'); ?></h3>        <ul>            <li>                <input type="checkbox" name="quick_export_onserver" value="saveit"                    id="checkbox_quick_dump_onserver"                    <?php PMA_exportCheckboxCheck('quick_export_onserver'); ?> />                <label for="checkbox_quick_dump_onserver">                    <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                </label>            </li>            <li>                <input type="checkbox" name="quick_export_onserverover" value="saveitover"                id="checkbox_quick_dump_onserverover"                <?php PMA_exportCheckboxCheck('quick_export_onserver_overwrite'); ?> />                <label for="checkbox_quick_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>            </li>        </ul>    </div><?php } ?><div class="exportoptions" id="output">    <h3><?php echo __('Output:'); ?></h3>    <ul id="ul_output">        <li>            <input type="radio" name="output_format" value="sendit" id="radio_dump_asfile" <?php isset($_GET['repopulate']) ? '' : PMA_exportCheckboxCheck('asfile'); ?> />            <label for="radio_dump_asfile"><?php echo __('Save output to a file'); ?></label>            <ul id="ul_save_asfile">                <?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>                <li>                    <input type="checkbox" name="onserver" value="saveit"                        id="checkbox_dump_onserver"                        <?php PMA_exportCheckboxCheck('onserver'); ?> />                    <label for="checkbox_dump_onserver">                        <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                    </label>                </li>                <li>                    <input type="checkbox" name="onserverover" value="saveitover"                    id="checkbox_dump_onserverover"                    <?php PMA_exportCheckboxCheck('onserver_overwrite'); ?> />                    <label for="checkbox_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>                </li>                <?php } ?>                <li>                    <label for="filename_template" class="desc">                    <?php                    echo __('File name template:');                    $trans = new PMA_Message;                    $trans->addMessage(__('@SERVER@ will become the server name'));                    if ($export_type == 'database' || $export_type == 'table') {                        $trans->addMessage(__(', @DATABASE@ will become the database name'));                        if ($export_type == 'table') {                            $trans->addMessage(__(', @TABLE@ will become the table name'));                        }                    }                    $message = new PMA_Message(__('This value is interpreted using %1$sstrftime%2$s, so you can use time formatting strings. Additionally the following transformations will happen: %3$s. Other text will be kept as is. See the %4$sFAQ%5$s for details.'));                    $message->addParam('<a href="' . PMA_linkURL(PMA_getPHPDocLink('function.strftime.php')). '" target="documentation" title="'                        . __('Documentation') . '">', false);                    $message->addParam('</a>', false);                    $message->addParam($trans);                    $message->addParam('<a href="Documentation.html#faq6_27" target="documentation">', false);                    $message->addParam('</a>', false);                    echo PMA_showHint($message);                    ?>                    </label>                    <input type="text" name="filename_template" id="filename_template"                    <?php                        echo ' value="';                        if (isset($_GET['filename_template'])) {                            echo htmlspecialchars($_GET['filename_template']);                        } else {                            if ($export_type == 'database') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_db_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_database']));                            } elseif ($export_type == 'table') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_table_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_table']));                            } else {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_server_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_server']));                            }                    }                        echo '"';                    ?>                    />                    <input type="checkbox" name="remember_template"                        id="checkbox_remember_template"                        <?php PMA_exportCheckboxCheck('remember_file_template'); ?> />                    <label for="checkbox_remember_template">                        <?php echo __('use this for future exports'); ?></label>                </li>                <?php                // charset of file                if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {                    echo '        <li><label for="select_charset_of_file" class="desc">'                        . __('Character set of the file:') . '</label>' . "\n";                    reset($cfg['AvailableCharsets']);                    echo '<select id="select_charset_of_file" name="charset_of_file" size="1">';                    foreach ($cfg['AvailableCharsets'] as $temp_charset) {                        echo '<option value="' . $temp_charset . '"';                        if (isset($_GET['charset_of_file']) && ($_GET['charset_of_file'] != $temp_charset)) {                            echo '';                        } elseif ((empty($cfg['Export']['charset']) && $temp_charset == 'utf-8')                          || $temp_charset == $cfg['Export']['charset']) {                            echo ' selected="selected"';                        }                        echo '>' . $temp_charset . '</option>';                    } // end foreach                    echo '</select></li>';                } // end if                ?>                 <?php                if (isset($_GET['compression'])) {                    $selected_compression = $_GET['compression'];                } elseif (isset($cfg['Export']['compression'])) {                    $selected_compression = $cfg['Export']['compression'];                } else {                    $selected_compression = "none";                }                // zip, gzip and bzip2 encode features                $is_zip  = ($cfg['ZipDump']  && @function_exists('gzcompress'));                $is_gzip = ($cfg['GZipDump'] && @function_exists('gzencode'));                $is_bzip2 = ($cfg['BZipDump'] && @function_exists('bzcompress'));                if ($is_zip || $is_gzip || $is_bzip2) { ?>                    <li>                    <label for="compression" class="desc"><?php echo __('Compression:'); ?></label>                    <select id="compression" name="compression">                        <option value="none"><?php echo __('None'); ?></option>                        <?php if ($is_zip) { ?>                            <option value="zip" <?php echo ($selected_compression == "zip") ? 'selected="selected"' : ''; ?>><?php echo __('zipped'); ?></option>                        <?php } if ($is_gzip) { ?>                            <option value="gzip" <?php echo ($selected_compression == "gzip") ? 'selected="selected"' : ''; ?>><?php echo __('gzipped'); ?></option>                        <?php } if ($is_bzip2) { ?>                            <option value="bzip2" <?php echo ($selected_compression == "bzip2") ? 'selected="selected"' : ''; ?>><?php echo __('bzipped'); ?></option>                        <?php } ?>                    </select>                    </li>                <?php } else { ?>                    <input type="hidden" name="compression" value="<?php echo $selected_compression; ?>" />                <?php } ?>             </ul>        </li>        <li><input type="radio" id="radio_view_as_text" name="output_format" value="astext" <?php echo (isset($_GET['repopulate']) || $GLOBALS['cfg']['Export']['asfile'] == false) ? 'checked="checked"' : '' ?>/><label for="radio_view_as_text"><?php echo __('View output as text'); ?></label></li>    </ul> </div><div class="exportoptions" id="format">    <h3><?php echo __('Format:'); ?></h3>    <?php echo PMA_pluginGetChoice('Export', 'what', $export_list, 'format'); ?></div><div class="exportoptions" id="format_specific_opts">    <h3><?php echo __('Format-specific options:'); ?></h3>    <p class="no_js_msg" id="scroll_to_options_msg"><?php echo __('Scroll down to fill in the options for the selected format and ignore the options for other formats.'); ?></p>    <?php echo PMA_pluginGetOptions('Export', $export_list); ?></div><?php if (function_exists('PMA_set_enc_form')) { ?><!-- Encoding setting form appended by Y.Kawada --><!-- Japanese encoding setting -->    <div class="exportoptions" id="kanji_encoding">        <h3><?php echo __('Encoding Conversion:'); ?></h3>        <?php echo PMA_set_enc_form('            '); ?>    </div><?php } ?><div class="exportoptions" id="submit"><?php PMA_externalBug(__('SQL compatibility mode'), 'mysql', '50027', '14515'); ?>    <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" /></div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for routine management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_RTN_setGlobals(){    global $param_directions, $param_opts_num, $param_sqldataaccess;    $param_directions    = array('IN',                                 'OUT',                                 'INOUT');    $param_opts_num      = array('UNSIGNED',                                 'ZEROFILL',                                 'UNSIGNED ZEROFILL');    $param_sqldataaccess = array('NO SQL',                                 'CONTAINS SQL',                                 'READS SQL DATA',                                 'MODIFIES SQL DATA');}/** * Main function for the routines functionality */function PMA_RTN_main(){    global $db;    PMA_RTN_setGlobals();    /**     * Process all requests     */    PMA_RTN_handleEditor();    PMA_RTN_handleExecute();    PMA_RTN_handleExport();    /**     * Display a list of available routines     */    $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, ";    $columns .= "`DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";    $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $items    = PMA_DBI_fetch_result(        "SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;"    );    echo PMA_RTE_getList('routine', $items);    /**     * Display the form for adding a new routine, if the user has the privileges.     */    echo PMA_RTN_getFooterLinks();    /**     * Display a warning for users with PHP's old "mysql" extension.     */    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        trigger_error(            __('You are using PHP\'s deprecated \'mysql\' extension, '            . 'which is not capable of handling multi queries. '            . '<b>The execution of some stored routines may fail!</b> '            . 'Please use the improved \'mysqli\' extension to '            . 'avoid any problems.'),            E_USER_WARNING        );    }} // end PMA_RTN_main()/** * This function parses a string containing one parameter of a routine, * as returned by PMA_RTN_parseAllParameters() and returns an array containing * the information about this parameter. * * @param   string  $value    A string containing one parameter of a routine * * @return  array             Parsed information about the input parameter */function PMA_RTN_parseOneParameter($value){    global $param_directions;    $retval = array(0 => '',                    1 => '',                    2 => '',                    3 => '',                    4 => '');    $parsed_param = PMA_SQP_parse($value);    $pos = 0;    if (in_array(strtoupper($parsed_param[$pos]['data']), $param_directions)) {        $retval[0] = strtoupper($parsed_param[0]['data']);        $pos++;    }    if ($parsed_param[$pos]['type'] == 'alpha_identifier'        || $parsed_param[$pos]['type'] == 'quote_backtick'    ) {        $retval[1] = PMA_unQuote($parsed_param[$pos]['data']);        $pos++;    }    $depth = 0;    $param_length = '';    $param_opts = array();    for ($i=$pos; $i<$parsed_param['len']; $i++) {        if (($parsed_param[$i]['type'] == 'alpha_columnType'            || $parsed_param[$i]['type'] == 'alpha_functionName') && $depth == 0 // "CHAR" seems to be mistaken for a function by the parser        ) {            $retval[2] = strtoupper($parsed_param[$i]['data']);        } else if ($parsed_param[$i]['type'] == 'punct_bracket_open_round' && $depth == 0) {            $depth = 1;        } else if ($parsed_param[$i]['type'] == 'punct_bracket_close_round' && $depth == 1) {            $depth = 0;        } else if ($depth == 1) {            $param_length .= $parsed_param[$i]['data'];        } else if ($parsed_param[$i]['type'] == 'alpha_reservedWord' && strtoupper($parsed_param[$i]['data']) == 'CHARSET' && $depth == 0) {            if ($parsed_param[$i+1]['type'] == 'alpha_charset' || $parsed_param[$i+1]['type'] == 'alpha_identifier') {                $param_opts[] = strtolower($parsed_param[$i+1]['data']);            }        } else if ($parsed_param[$i]['type'] == 'alpha_columnAttrib' && $depth == 0) {            $param_opts[] = strtoupper($parsed_param[$i]['data']);        }    }    $retval[3] = $param_length;    sort($param_opts);    $retval[4] = implode(' ', $param_opts);    return $retval;} // end PMA_RTN_parseOneParameter()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's parameters. * * @param   array   $parsed_query  Parsed query, returned by by PMA_SQP_parse() * @param   string  $routine_type  Routine type: 'PROCEDURE' or 'FUNCTION' * * @return  array   Information about the parameteres of a routine. */function PMA_RTN_parseAllParameters($parsed_query, $routine_type){    $retval = array();    $retval['num'] = 0;    // First get the list of parameters from the query    $buffer = '';    $params = array();    $fetching = false;    $depth = 0;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == $routine_type) {            $fetching = true;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_open_round') {            $depth++;            if ($depth > 1) {                $buffer .= $parsed_query[$i]['data'] . ' ';            }        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_close_round') {            $depth--;            if ($depth > 0) {                $buffer .= $parsed_query[$i]['data'] . ' ';            } else {                break;            }        } else if ($parsed_query[$i]['type'] == 'punct_listsep' && $depth == 1) {            $params[] = $buffer;            $retval['num']++;            $buffer = '';        } else if ($fetching == true && $depth > 0) {            $buffer .= $parsed_query[$i]['data'] . ' ';        }    }    if (! empty($buffer)) {        $params[] = $buffer;        $retval['num']++;    }    // Now parse each parameter individually    foreach ($params as $key => $value) {        list($retval['dir'][],             $retval['name'][],             $retval['type'][],             $retval['length'][],             $retval['opts'][]) = PMA_RTN_parseOneParameter($value);    }    // Since some indices of $retval may be still undefined, we fill    // them each with an empty array to avoid E_ALL errors in PHP.    foreach (array('dir', 'name', 'type', 'length', 'opts') as $key => $index) {        if (! isset($retval[$index])) {            $retval[$index] = array();        }    }    return $retval;} // end PMA_RTN_parseAllParameters()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's definer. * * @param   array   $parsed_query   Parsed query, returned by PMA_SQP_parse() * * @return  string  The definer of a routine. */function PMA_RTN_parseRoutineDefiner($parsed_query){    $retval = '';    $fetching = false;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == 'DEFINER') {            $fetching = true;        } else if ($fetching == true && ($parsed_query[$i]['type'] != 'quote_backtick' && substr($parsed_query[$i]['type'], 0, 5) != 'punct')) {            break;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'quote_backtick') {            $retval .= PMA_unQuote($parsed_query[$i]['data']);        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_user') {            $retval .= $parsed_query[$i]['data'];        }    }    return $retval;} // end PMA_RTN_parseRoutineDefiner()/** * Handles editor requests for adding or editing an item */function PMA_RTN_handleEditor(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $errors;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        /**         * Handle a request to create/edit a routine         */        $sql_query = '';        $routine_query = PMA_RTN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                if (! in_array($_REQUEST['item_original_type'], array('PROCEDURE', 'FUNCTION'))) {                    $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_original_type']));                } else {                    // Backup the old routine, in case something goes wrong                    $create_routine = PMA_DBI_get_definition($db, $_REQUEST['item_original_type'], $_REQUEST['item_original_name']);                    $drop_routine = "DROP {$_REQUEST['item_original_type']} " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                    $result = PMA_DBI_try_query($drop_routine);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_routine) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                    } else {                        $result = PMA_DBI_try_query($routine_query);                        if (! $result) {                            $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                            // We dropped the old routine, but were unable to create the new one                            // Try to restore the backup query                            $result = PMA_DBI_try_query($create_routine);                            if (! $result) {                                // OMG, this is really bad! We dropped the query, failed to create a new one                                // and now even the backup query does not execute!                                // This should not happen, but we better handle this just in case.                                $errors[] = __('Sorry, we failed to restore the dropped routine.') . '<br />'                                                  . __('The backed up query was:') . "\"$create_routine\"" . '<br />'                                                  . __('MySQL said: ') . PMA_DBI_getError(null);                            }                        } else {                            $message = PMA_Message::success(__('Routine %1$s has been modified.'));                            $message->addParam(PMA_backquote($_REQUEST['item_name']));                            $sql_query = $drop_routine . $routine_query;                        }                    }                }            } else {                // 'Add a new routine' mode                $result = PMA_DBI_try_query($routine_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Routine %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $routine_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, `DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";                $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                          . "AND ROUTINE_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'"                          . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($_REQUEST['item_type']) . "'";                $routine  = PMA_DBI_fetch_single_row("SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;");                $extra_data['name']    = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_RTN_getRowForList($routine);                $extra_data['insert']  = ! empty($routine);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a routine, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['routine_addparameter']) || ! empty($_REQUEST['routine_removeparameter'])        || ! empty($_REQUEST['routine_changetype']))) // FIXME: this must be simpler than that    ) {        // Handle requests to add/remove parameters and changing routine type        // This is necessary when JS is disabled        $operation = '';        if (! empty($_REQUEST['routine_addparameter'])) {            $operation = 'add';        } else if (! empty($_REQUEST['routine_removeparameter'])) {            $operation = 'remove';        } else if (! empty($_REQUEST['routine_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $routine = PMA_RTN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit routine");            if (! $operation && ! empty($_REQUEST['item_name']) && empty($_REQUEST['editor_process_edit'])) {                $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type']);                if ($routine !== false) {                    $routine['item_original_name'] = $routine['item_name'];                    $routine['item_original_type'] = $routine['item_type'];                }            } else {                $routine = PMA_RTN_getDataFromRequest();            }            $mode = 'edit';        }        if ($routine !== false) {            // Show form            $editor = PMA_RTN_getEditorForm($mode, $operation, $routine);            if ($GLOBALS['is_ajax_request']) {                $template   = PMA_RTN_getParameterRow();                $extra_data = array('title' => $title,                                    'param_template' => $template,                                    'type' => $routine['item_type']);                PMA_ajaxResponse($editor, true, $extra_data);            }            echo "\n\n<h2>$title</h2>\n\n$editor";            include './libraries/footer.inc.php';            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_RTN_handleEditor()/** * This function will generate the values that are required to * complete the editor form. It is especially necessary to handle * the 'Add another parameter', 'Remove last parameter' and * 'Change routine type' functionalities when JS is disabled. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromRequest(){    global $_REQUEST, $param_directions, $param_sqldataaccess;    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_returnlength',                     'item_returnopts_num',                     'item_returnopts_text',                     'item_definition',                     'item_comment',                     'item_definer');    foreach ($indices as $key => $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']         = 'PROCEDURE';    $retval['item_type_toggle']  = 'FUNCTION';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'FUNCTION') {        $retval['item_type']         = 'FUNCTION';        $retval['item_type_toggle']  = 'PROCEDURE';    }    $retval['item_original_type'] = 'PROCEDURE';    if (isset($_REQUEST['item_original_type'])        && $_REQUEST['item_original_type'] == 'FUNCTION'    ) {        $retval['item_original_type'] = 'FUNCTION';    }    $retval['item_num_params']      = 0;    $retval['item_param_dir']       = array();    $retval['item_param_name']      = array();    $retval['item_param_type']      = array();    $retval['item_param_length']    = array();    $retval['item_param_opts_num']  = array();    $retval['item_param_opts_text'] = array();    if (   isset($_REQUEST['item_param_name'])        && isset($_REQUEST['item_param_type'])        && isset($_REQUEST['item_param_length'])        && isset($_REQUEST['item_param_opts_num'])        && isset($_REQUEST['item_param_opts_text'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_opts_num'])        && is_array($_REQUEST['item_param_opts_text'])    ) {        if ($_REQUEST['item_type'] == 'PROCEDURE') {            $retval['item_param_dir'] = $_REQUEST['item_param_dir'];            foreach ($retval['item_param_dir'] as $key => $value) {                if (! in_array($value, $param_directions, true)) {                    $retval['item_param_dir'][$key] = '';                }            }        }        $retval['item_param_name'] = $_REQUEST['item_param_name'];        $retval['item_param_type'] = $_REQUEST['item_param_type'];        foreach ($retval['item_param_type'] as $key => $value) {            if (! in_array($value, PMA_getSupportedDatatypes(), true)) {                $retval['item_param_type'][$key] = '';            }        }        $retval['item_param_length']    = $_REQUEST['item_param_length'];        $retval['item_param_opts_num']  = $_REQUEST['item_param_opts_num'];        $retval['item_param_opts_text'] = $_REQUEST['item_param_opts_text'];        $retval['item_num_params'] = max(            count($retval['item_param_name']),            count($retval['item_param_type']),            count($retval['item_param_length']),            count($retval['item_param_opts_num']),            count($retval['item_param_opts_text'])        );    }    $retval['item_returntype'] = '';    if (isset($_REQUEST['item_returntype'])        && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())    ) {        $retval['item_returntype'] = $_REQUEST['item_returntype'];    }    $retval['item_isdeterministic'] = '';    if (isset($_REQUEST['item_isdeterministic'])        && strtolower($_REQUEST['item_isdeterministic']) == 'on'    ) {        $retval['item_isdeterministic'] = " checked='checked'";    }    $retval['item_securitytype_definer'] = '';    $retval['item_securitytype_invoker'] = '';    if (isset($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] === 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($_REQUEST['item_securitytype'] === 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }    }    $retval['item_sqldataaccess'] = '';    if (isset($_REQUEST['item_sqldataaccess'])        && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess, true)    ) {        $retval['item_sqldataaccess'] = $_REQUEST['item_sqldataaccess'];    }    return $retval;} // end function PMA_RTN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit routine" form given the name of a routine. * * @param   string   $name   The name of the routine. * @param   string   $type   Type of routine (ROUTINE|PROCEDURE) * @param   bool     $all    Whether to return all data or just *                           the info about parameters. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromName($name, $type, $all = true){    global $db;    $retval  = array();    // Build and execute the query    $fields  = "SPECIFIC_NAME, ROUTINE_TYPE, DTD_IDENTIFIER, "             . "ROUTINE_DEFINITION, IS_DETERMINISTIC, SQL_DATA_ACCESS, "             . "ROUTINE_COMMENT, SECURITY_TYPE";    $where   = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND SPECIFIC_NAME='" . PMA_sqlAddSlashes($name) . "'"             . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($type) . "'";    $query   = "SELECT $fields FROM INFORMATION_SCHEMA.ROUTINES WHERE $where;";    $routine = PMA_DBI_fetch_single_row($query);    if (! $routine) {        return false;    }    // Get required data    $retval['item_name'] = $routine['SPECIFIC_NAME'];    $retval['item_type'] = $routine['ROUTINE_TYPE'];    $parsed_query = PMA_SQP_parse(        PMA_DBI_get_definition(            $db,            $routine['ROUTINE_TYPE'],            $routine['SPECIFIC_NAME']        )    );    $params = PMA_RTN_parseAllParameters($parsed_query, $routine['ROUTINE_TYPE']);    $retval['item_num_params']      = $params['num'];    $retval['item_param_dir']       = $params['dir'];    $retval['item_param_name']      = $params['name'];    $retval['item_param_type']      = $params['type'];    $retval['item_param_length']    = $params['length'];    $retval['item_param_opts_num']  = $params['opts'];    $retval['item_param_opts_text'] = $params['opts'];    // Get extra data    if ($all) {        if ($retval['item_type'] == 'FUNCTION') {            $retval['item_type_toggle'] = 'PROCEDURE';        } else {            $retval['item_type_toggle'] = 'FUNCTION';        }        $retval['item_returntype']   = '';        $retval['item_returnlength'] = '';        $retval['item_returnopts_num']  = '';        $retval['item_returnopts_text'] = '';        if (! empty($routine['DTD_IDENTIFIER'])) {            if (strlen($routine['DTD_IDENTIFIER']) > 63) {                // If the DTD_IDENTIFIER string from INFORMATION_SCHEMA is                // at least 64 characters, then it may actually have been                // chopped because that column is a varchar(64), so we will                // parse the output of SHOW CREATE query to get accurate                // information about the return variable.                $dtd = '';                $fetching = false;                for ($i=0; $i<$parsed_query['len']; $i++) {                    if ($parsed_query[$i]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_query[$i]['data']) == 'RETURNS'                    ) {                        $fetching = true;                    } else if ($fetching == true && $parsed_query[$i]['type'] == 'alpha_reservedWord') {                        // We will not be looking for options such as UNSIGNED                        // or ZEROFILL because there is no way that a numeric                        // field's DTD_IDENTIFIER can be longer than 64                        // characters. We can safely assume that the return                        // datatype is either ENUM or SET, so we only look                        // for CHARSET.                        $word = strtoupper($parsed_query[$i]['data']);                        if ($word == 'CHARSET'                            && ($parsed_query[$i+1]['type'] == 'alpha_charset'                            || $parsed_query[$i+1]['type'] == 'alpha_identifier')                        ) {                            $dtd .= $word . ' ' . $parsed_query[$i+1]['data'];                        }                        break;                    } else if ($fetching == true) {                        $dtd .= $parsed_query[$i]['data'] . ' ';                    }                }                $routine['DTD_IDENTIFIER'] = $dtd;            }            $returnparam = PMA_RTN_parseOneParameter($routine['DTD_IDENTIFIER']);            $retval['item_returntype']      = $returnparam[2];            $retval['item_returnlength']    = $returnparam[3];            $retval['item_returnopts_num']  = $returnparam[4];            $retval['item_returnopts_text'] = $returnparam[4];        }        $retval['item_definer']         = PMA_RTN_parseRoutineDefiner($parsed_query);        $retval['item_definition']      = $routine['ROUTINE_DEFINITION'];        $retval['item_isdeterministic'] = '';        if ($routine['IS_DETERMINISTIC'] == 'YES') {            $retval['item_isdeterministic'] = " checked='checked'";        }        $retval['item_securitytype_definer'] = '';        $retval['item_securitytype_invoker'] = '';        if ($routine['SECURITY_TYPE'] == 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($routine['SECURITY_TYPE'] == 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }        $retval['item_sqldataaccess'] = $routine['SQL_DATA_ACCESS'];        $retval['item_comment']       = $routine['ROUTINE_COMMENT'];    }    return $retval;} // PMA_RTN_getDataFromName()/** * Creates one row for the parameter table used in the routine editor. * * @param   array    $routine    Data for the routine returned by *                               PMA_RTN_getDataFromRequest() or *                               PMA_RTN_getDataFromName() * @param   mixed    $index      Either a numeric index of the row being processed *                               or NULL to create a template row for AJAX request * @param   string   $class      Class used to hide the direction column, if the *                               row is for a stored function. * * @return    string    HTML code of one row of parameter table for the editor. */function PMA_RTN_getParameterRow($routine = array(), $index = null, $class = ''){    global $param_directions, $param_opts_num, $titles;    if ($index === null) {        // template row for AJAX request        $i = 0;        $index = '%s';        $drop_class = '';        $routine = array(            'item_param_dir'       => array(0 => ''),            'item_param_name'      => array(0 => ''),            'item_param_type'      => array(0 => ''),            'item_param_length'    => array(0 => ''),            'item_param_opts_num'  => array(0 => ''),            'item_param_opts_text' => array(0 => '')        );    } else if (! empty($routine)) {        // regular row for routine editor        $drop_class = ' hide';        $i = $index;    } else {        // No input data. This shouldn't happen,        // but better be safe than sorry.        return '';    }    // Create the output    $retval  = "";    $retval .= "        <tr>\n";    $retval .= "            <td class='routine_direction_cell$class'>\n";    $retval .= "                <select name='item_param_dir[$index]'>\n";    foreach ($param_directions as $key => $value) {        $selected = "";        if (! empty($routine['item_param_dir'][$i])            && $routine['item_param_dir'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "                    <option$selected>$value</option>\n";    }    $retval .= "                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td><input name='item_param_name[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_name'][$i]}' /></td>\n";    $retval .= "            <td><select name='item_param_type[$index]'>";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_param_type'][$i]) . "\n";    $retval .= "            </select></td>\n";    $retval .= "            <td>\n";    $retval .= "                <input id='item_param_length_$index'\n";    $retval .= "                       name='item_param_length[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_length'][$i]}' />\n";    $retval .= "                <div class='enum_hint'>\n";    $retval .= "                    <a class='open_enum_editor' target='_blank'\n";    $retval .= "                       href='enum_editor.php?" . PMA_generate_common_url() . "&amp;values=" . $routine['item_param_length'][$i] . "&amp;field=" . $routine['item_param_name'][$i] . "'>\n";    $retval .= "                        " . PMA_getImage('b_edit', '', array('title'=>__('ENUM/SET editor'))) . "\n";    $retval .= "                    </a>\n";    $retval .= "                </div>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_len'>---</td>\n";    $retval .= "            <td class='routine_param_opts_text'>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_param_opts_text[$index]",        null,        $routine['item_param_opts_text'][$i]    );    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_opts'>---</td>\n";    $retval .= "            <td class='routine_param_opts_num'>\n";    $retval .= "                <select name='item_param_opts_num[$index]'>\n";    $retval .= "                    <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_param_opts_num'][$i])            && $routine['item_param_opts_num'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='routine_param_remove$drop_class'>\n";    $retval .= "                <a href='#' class='routine_param_remove_anchor'>\n";    $retval .= "                    {$titles['Drop']}\n";    $retval .= "                </a>\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getParameterRow()/** * Displays a form used to add/edit a routine * * @param   string   $mode         If the editor will be used edit a routine *                                 or add a new one: 'edit' or 'add'. * @param   string   $operation    If the editor was previously invoked with *                                 JS turned off, this will hold the name of *                                 the current operation * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromRequest() or *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_RTN_getEditorForm($mode, $operation, $routine){    global $db, $errors, $param_sqldataaccess, $param_opts_num;    // Escape special characters    $need_escape = array(        'item_original_name',        'item_name',        'item_returnlength',        'item_definition',        'item_definer',        'item_comment'    );    foreach ($need_escape as $key => $index) {        $routine[$index] = htmlentities($routine[$index], ENT_QUOTES);    }    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i]   = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );        $routine['item_param_length'][$i] = htmlentities(            $routine['item_param_length'][$i],            ENT_QUOTES        );    }    // Handle some logic first    if ($operation == 'change') {        if ($routine['item_type'] == 'PROCEDURE') {            $routine['item_type']        = 'FUNCTION';            $routine['item_type_toggle'] = 'PROCEDURE';        } else {            $routine['item_type']        = 'PROCEDURE';            $routine['item_type_toggle'] = 'FUNCTION';        }    } else if ($operation == 'add' || ($routine['item_num_params'] == 0 && $mode == 'add' && ! $errors)) {        $routine['item_param_dir'][]       = '';        $routine['item_param_name'][]      = '';        $routine['item_param_type'][]      = '';        $routine['item_param_length'][]    = '';        $routine['item_param_opts_num'][]  = '';        $routine['item_param_opts_text'][] = '';        $routine['item_num_params']++;    } else if ($operation == 'remove') {        unset($routine['item_param_dir'][$routine['item_num_params']-1]);        unset($routine['item_param_name'][$routine['item_num_params']-1]);        unset($routine['item_param_type'][$routine['item_num_params']-1]);        unset($routine['item_param_length'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_num'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_text'][$routine['item_num_params']-1]);        $routine['item_num_params']--;    }    $disable_remove_parameter = '';    if (! $routine['item_num_params']) {        $disable_remove_parameter = " color: gray;' disabled='disabled";    }    $original_routine = '';    if ($mode == 'edit') {        $original_routine = "<input name='item_original_name' "                          . "type='hidden' "                          . "value='{$routine['item_original_name']}'/>\n"                          . "<input name='item_original_type' "                          . "type='hidden' "                          . "value='{$routine['item_original_type']}'/>\n";    }    $isfunction_class   = '';    $isprocedure_class  = '';    $isfunction_select  = '';    $isprocedure_select = '';    if ($routine['item_type'] == 'PROCEDURE') {        $isfunction_class   = ' hide';        $isprocedure_select = " selected='selected'";    } else {        $isprocedure_class = ' hide';        $isfunction_select = " selected='selected'";    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_routines.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_routine;    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Routine name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$routine['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>\n";        $retval .= "            <option value='PROCEDURE'$isprocedure_select>PROCEDURE</option>\n";        $retval .= "            <option value='FUNCTION'$isfunction_select>FUNCTION</option>\n";        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' value='{$routine['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$routine['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit' name='routine_changetype'\n";        $retval .= "               value='".sprintf(__('Change to %s'), $routine['item_type_toggle'])."' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Parameters') . "</td>\n";    $retval .= "    <td>\n";    // parameter handling start    $retval .= "        <table class='routine_params_table'>\n";    $retval .= "        <tr>\n";    $retval .= "            <th class='routine_direction_cell$isprocedure_class'>" . __('Direction') . "</th>\n";    $retval .= "            <th>" . __('Name') . "</th>\n";    $retval .= "            <th>" . __('Type') . "</th>\n";    $retval .= "            <th>" . __('Length/Values') . "</th>\n";    $retval .= "            <th colspan='2'>" . __('Options') . "</th>\n";    $retval .= "            <th class='routine_param_remove hide'>&nbsp;</th>\n";    $retval .= "        </tr>";    for ($i=0; $i<$routine['item_num_params']; $i++) { // each parameter        $retval .= PMA_RTN_getParameterRow($routine, $i, $isprocedure_class);    }    $retval .= "        </table>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>&nbsp;</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='submit' \n";    $retval .= "               name='routine_addparameter'\n";    $retval .= "               value='" . __('Add parameter') . "' />\n";    $retval .= "        <input style='width: 49%;$disable_remove_parameter'\n";    $retval .= "               type='submit' \n";    $retval .= "               name='routine_removeparameter'\n";    $retval .= "               value='" . __('Remove last parameter') . "' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    // parameter handling end    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return type') . "</td>\n";    $retval .= "    <td><select name='item_returntype'>\n";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_returntype']) . "\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return length/values') . "</td>\n";    $retval .= "    <td><input type='text' name='item_returnlength'\n";    $retval .= "               value='{$routine['item_returnlength']}' /></td>\n";    $retval .= "    <td class='hide no_len'>---</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return options') . "</td>\n";    $retval .= "    <td><div>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_returnopts_text",        null,        $routine['item_returnopts_text']    );    $retval .= "\n    </div>\n";    $retval .= "    <div><select name='item_returnopts_num'>\n";    $retval .= "        <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_returnopts_num'])            && $routine['item_returnopts_num'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n    </select></div>\n";    $retval .= "    <div class='hide no_opts'>---</div>\n";    $retval .= "</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $routine['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Is deterministic') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_isdeterministic'{$routine['item_isdeterministic']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$routine['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Security type') . "</td>\n";    $retval .= "    <td><select name='item_securitytype'>\n";    $retval .= "        <option value='DEFINER'{$routine['item_securitytype_definer']}>DEFINER</option>\n";    $retval .= "        <option value='INVOKER'{$routine['item_securitytype_invoker']}>INVOKER</option>\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('SQL data access') . "</td>\n";    $retval .= "    <td><select name='item_sqldataaccess'>\n";    foreach ($param_sqldataaccess as $key => $value) {        $selected = "";        if ($routine['item_sqldataaccess'] == $value) {            $selected = " selected='selected'";        }        $retval .= "        <option$selected>$value</option>\n";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$routine['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    return $retval;} // end PMA_RTN_getEditorForm()/** * Composes the query necessary to create a routine from an HTTP request. * * @return  string  The CREATE [ROUTINE | PROCEDURE] query. */function PMA_RTN_getQueryFromRequest(){    global $_REQUEST, $cfg, $errors, $param_sqldataaccess, $param_directions;    $_REQUEST['item_type'] = isset($_REQUEST['item_type']) ? $_REQUEST['item_type'] : '';    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    if ($_REQUEST['item_type'] == 'FUNCTION'        || $_REQUEST['item_type'] == 'PROCEDURE'    ) {        $query .= $_REQUEST['item_type'] . ' ';    } else {        $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_type']));    }    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']);    } else {        $errors[] = __('You must provide a routine name');    }    $params = '';    $warned_about_dir    = false;    $warned_about_name   = false;    $warned_about_length = false;    if (   ! empty($_REQUEST['item_param_name'])        && ! empty($_REQUEST['item_param_type'])        && ! empty($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])    ) {        for ($i=0; $i<count($_REQUEST['item_param_name']); $i++) {            if (! empty($_REQUEST['item_param_name'][$i]) && ! empty($_REQUEST['item_param_type'][$i])) {                if ($_REQUEST['item_type'] == 'PROCEDURE'                    && ! empty($_REQUEST['item_param_dir'][$i])                    && in_array($_REQUEST['item_param_dir'][$i], $param_directions)                ) {                    $params .= $_REQUEST['item_param_dir'][$i] . " " . PMA_backquote($_REQUEST['item_param_name'][$i]) . " "                            . $_REQUEST['item_param_type'][$i];                } else if ($_REQUEST['item_type'] == 'FUNCTION') {                    $params .= PMA_backquote($_REQUEST['item_param_name'][$i]) . " " . $_REQUEST['item_param_type'][$i];                } else if (! $warned_about_dir) {                    $warned_about_dir = true;                    $errors[] = sprintf(                        __('Invalid direction "%s" given for parameter.'),                        htmlspecialchars($_REQUEST['item_param_dir'][$i])                    );                }                if ($_REQUEST['item_param_length'][$i] != ''                    && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                                   $_REQUEST['item_param_type'][$i])                ) {                    $params .= "(" . $_REQUEST['item_param_length'][$i] . ")";                } else if ($_REQUEST['item_param_length'][$i] == '' && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_param_type'][$i])) {                    if (! $warned_about_length) {                        $warned_about_length = true;                        $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');                    }                }                if (! empty($_REQUEST['item_param_opts_text'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['STRING'])) {                        $params .= ' CHARSET ' . strtolower($_REQUEST['item_param_opts_text'][$i]);                    }                }                if (! empty($_REQUEST['item_param_opts_num'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['NUMERIC'])) {                        $params .= ' ' . strtoupper($_REQUEST['item_param_opts_num'][$i]);                    }                }                if ($i != count($_REQUEST['item_param_name'])-1) {                    $params .= ", ";                }            } else if (! $warned_about_name) {                $warned_about_name = true;                $errors[] = __('You must provide a name and a type for each routine parameter.');                break;            }        }    }    $query .= "(" . $params . ") ";    if ($_REQUEST['item_type'] == 'FUNCTION') {        if (! empty($_REQUEST['item_returntype']) && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())) {            $query .= "RETURNS {$_REQUEST['item_returntype']}";        } else {            $errors[] = __('You must provide a valid return type for the routine.');        }        if (! empty($_REQUEST['item_returnlength'])            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                            $_REQUEST['item_returntype'])        ) {            $query .= "(" . $_REQUEST['item_returnlength'] . ")";        } else if (empty($_REQUEST['item_returnlength']) && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_returntype'])) {            if (! $warned_about_length) {                $warned_about_length = true;                $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');            }        }        if (! empty($_REQUEST['item_returnopts_text'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['STRING'])) {                $query .= ' CHARSET ' . strtolower($_REQUEST['item_returnopts_text']);            }        }        if (! empty($_REQUEST['item_returnopts_num'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['NUMERIC'])) {                $query .= ' ' . strtoupper($_REQUEST['item_returnopts_num']);            }        }        $query .= ' ';    }    if (! empty($_REQUEST['item_comment'])) {        $query .= "COMMENT '" . PMA_sqlAddslashes($_REQUEST['item_comment']) . "' ";    }    if (isset($_REQUEST['item_isdeterministic'])) {        $query .= 'DETERMINISTIC ';    } else {        $query .= 'NOT DETERMINISTIC ';    }    if (! empty($_REQUEST['item_sqldataaccess']) && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess)) {        $query .= $_REQUEST['item_sqldataaccess'] . ' ';    }    if (! empty($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] == 'DEFINER' || $_REQUEST['item_securitytype'] == 'INVOKER') {            $query .= 'SQL SECURITY ' . $_REQUEST['item_securitytype'] . ' ';        }    }    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a routine definition.');    }    return $query;} // end PMA_RTN_getQueryFromRequest()/** * Handles requests for executing a routine */function PMA_RTN_handleExecute(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $cfg;    /**     * Handle all user requests other than the default of listing routines     */    if (! empty($_REQUEST['execute_routine']) && ! empty($_REQUEST['item_name'])) {        // Build the queries        $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type'], false);        if ($routine !== false) {            $queries   = array();            $end_query = array();            $args      = array();            for ($i=0; $i<$routine['item_num_params']; $i++) {                if (isset($_REQUEST['params'][$routine['item_param_name'][$i]])) {                    $value = $_REQUEST['params'][$routine['item_param_name'][$i]];                    if (is_array($value)) { // is SET type                        $value = implode(',', $value);                    }                    $value = PMA_sqlAddSlashes($value);                    if (! empty($_REQUEST['funcs'][$routine['item_param_name'][$i]])                        && in_array($_REQUEST['funcs'][$routine['item_param_name'][$i]], $cfg['Functions'])                    ) {                        $queries[] = "SET @p$i={$_REQUEST['funcs'][$routine['item_param_name'][$i]]}('$value');\n";                    } else {                        $queries[] = "SET @p$i='$value';\n";                    }                    $args[] = "@p$i";                } else {                    $args[] = "@p$i";                }                if ($routine['item_type'] == 'PROCEDURE') {                    if ($routine['item_param_dir'][$i] == 'OUT'                        || $routine['item_param_dir'][$i] == 'INOUT'                    ) {                        $end_query[] = "@p$i AS " . PMA_backquote($routine['item_param_name'][$i]);                    }                }            }            if ($routine['item_type'] == 'PROCEDURE') {                $queries[] = "CALL " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ");\n";                if (count($end_query)) {                    $queries[] = "SELECT " . implode(', ', $end_query) . ";\n";                }            } else {                $queries[] = "SELECT " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ") "                           . "AS " . PMA_backquote($routine['item_name']) . ";\n";            }            // Execute the queries            $affected = 0;            $result = null;            $outcome = true;            foreach ($queries as $query) {                $resource = PMA_DBI_try_query($query);                if ($resource === false) {                    $outcome = false;                    break;                }                while (true) {                    if (! PMA_DBI_more_results()) {                        break;                    }                    PMA_DBI_next_result();                }                if (substr($query, 0, 6) == 'SELECT') {                    $result = $resource;                } else if (substr($query, 0, 4) == 'CALL') {                    $result = $resource ? $resource : $result;                    $affected = PMA_DBI_affected_rows() - PMA_DBI_num_rows($resource);                }            }            // Generate output            if ($outcome) {                $message = __('Your SQL query has been executed successfully');                if ($routine['item_type'] == 'PROCEDURE') {                    $message .= '<br />';                    $message .= sprintf(                        _ngettext(                            '%d row affected by the last statement inside the procedure',                            '%d rows affected by the last statement inside the procedure',                            $affected                        ),                        $affected                    );                }                $message = PMA_message::success($message);                // Pass the SQL queries through the "pretty printer"                $output  = '<code class="sql" style="margin-bottom: 1em;">';                $output .= PMA_SQP_formatHtml(PMA_SQP_parse(implode($queries)));                $output .= '</code>';                // Display results                if ($result) {                    $output .= "<fieldset><legend>";                    $output .= sprintf(                        __('Execution results of routine %s'),                        PMA_backquote(htmlspecialchars($routine['item_name']))                    );                    $output .= "</legend>";                    $output .= "<table><tr>";                    foreach (PMA_DBI_get_fields_meta($result) as $key => $field) {                        $output .= "<th>";                        $output .= htmlspecialchars($field->name);                        $output .= "</th>";                    }                    $output .= "</tr>";                    // Stored routines can only ever return ONE ROW.                    $data = PMA_DBI_fetch_single_row($result);                    foreach ($data as $key => $value) {                        if ($value === null) {                            $value = '<i>NULL</i>';                        } else {                            $value = htmlspecialchars($value);                        }                        $output .= "<td class='odd'>" . $value . "</td>";                    }                    $output .= "</table></fieldset>";                } else {                    $notice = __('MySQL returned an empty result set (i.e. zero rows).');                    $output .= PMA_message::notice($notice)->getDisplay();                }            } else {                $output = '';                $message = PMA_message::error(sprintf(__('The following query has failed: "%s"'), $query) . '<br /><br />'                                                    . __('MySQL said: ') . PMA_DBI_getError(null));            }            // Print/send output            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('dialog' => false);                PMA_ajaxResponse(                    $message->getDisplay() . $output,                    $message->isSuccess(),                    $extra_data                );            } else {                echo $message->getDisplay() . $output;                if ($message->isError()) {                    // At least one query has failed, so shouldn't                    // execute any more queries, so we quit.                    exit;                }                unset($_POST);                // Now deliberately fall through to displaying the routines list            }        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, $message->isSuccess());            } else {                echo $message->getDisplay();                unset($_POST);            }        }    } else if (! empty($_GET['execute_dialog']) && ! empty($_GET['item_name'])) {        /**         * Display the execute form for a routine.         */        $routine = PMA_RTN_getDataFromName($_GET['item_name'], $_GET['item_type'], true);        if ($routine !== false) {            $form = PMA_RTN_getExecuteForm($routine);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data = array();                $extra_data['dialog'] = true;                $extra_data['title']  = __("Execute routine") . " ";                $extra_data['title'] .= PMA_backquote(                    htmlentities($_GET['item_name'], ENT_QUOTES)                );                PMA_ajaxResponse($form, true, $extra_data);            } else {                echo "\n\n<h2>" . __("Execute routine") . "</h2>\n\n";                echo $form;                include './libraries/footer.inc.php';                // exit;            }        } else if (($GLOBALS['is_ajax_request'] == true)) {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            PMA_ajaxResponse($message, false);        }    }}/** * Creates the HTML code that shows the routine execution dialog. * * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the routine execution dialog. */function PMA_RTN_getExecuteForm($routine){    global $db, $cfg;    // Escape special characters    $routine['item_name'] = htmlentities($routine['item_name'], ENT_QUOTES);    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i] = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );    }    // Create the output    $retval  = "";    $retval .= "<!-- START ROUTINE EXECUTE FORM -->\n\n";    $retval .= "<form action='db_routines.php' method='post' class='rte_form'>\n";    $retval .= "<input type='hidden' name='item_name'\n";    $retval .= "       value='{$routine['item_name']}' />\n";    $retval .= "<input type='hidden' name='item_type'\n";    $retval .= "       value='{$routine['item_type']}' />\n";    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "<legend>{$routine['item_name']}</legend>\n";        $retval .= "<table class='rte_table'>\n";        $retval .= "<caption class='tblHeaders'>\n";        $retval .= __('Routine parameters');        $retval .= "</caption>\n";    } else {        $retval .= "<legend>" . __('Routine parameters') . "</legend>\n";        $retval .= "<table class='rte_table' style='width: 100%;'>\n";    }    $retval .= "<tr>\n";    $retval .= "<th>" . __('Name') . "</th>\n";    $retval .= "<th>" . __('Type') . "</th>\n";    if ($cfg['ShowFunctionFields']) {        $retval .= "<th>" . __('Function') . "</th>\n";    }    $retval .= "<th>" . __('Value')    . "</th>\n";    $retval .= "</tr>\n";    // Get a list of data types that are not yet supported.    $no_support_types = PMA_unsupportedDatatypes();    for ($i=0; $i<$routine['item_num_params']; $i++) { // Each parameter        if ($routine['item_type'] == 'PROCEDURE'            && $routine['item_param_dir'][$i] == 'OUT'        ) {            continue;        }        $rowclass = ($i % 2 == 0) ? 'even' : 'odd';        $retval .= "\n<tr class='$rowclass'>\n";        $retval .= "<td>{$routine['item_param_name'][$i]}</td>\n";        $retval .= "<td>{$routine['item_param_type'][$i]}</td>\n";        if ($cfg['ShowFunctionFields']) {            $retval .= "<td>\n";            if (stristr($routine['item_param_type'][$i], 'enum')                || stristr($routine['item_param_type'][$i], 'set')                || in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)            ) {                $retval .= "--\n";            } else {                $field = array(                    'True_Type'       => strtolower($routine['item_param_type'][$i]),                    'Type'            => '',                    'Key'             => '',                    'Field'           => '',                    'Default'         => '',                    'first_timestamp' => false                );                $retval .= "<select name='funcs[{$routine['item_param_name'][$i]}]'>";                $retval .= PMA_getFunctionsForField($field, false);                $retval .= "</select>";            }            $retval .= "</td>\n";        }        // Append a class to date/time fields so that        // jQuery can attach a datepicker to them        $class = '';        if ($routine['item_param_type'][$i] == 'DATETIME'            || $routine['item_param_type'][$i] == 'TIMESTAMP'        ) {            $class = 'datetimefield';        } else if ($routine['item_param_type'][$i] == 'DATE') {            $class = 'datefield';        }        $retval .= "<td class='nowrap'>\n";        if (in_array($routine['item_param_type'][$i], array('ENUM', 'SET'))) {            $tokens = PMA_SQP_parse($routine['item_param_length'][$i]);            if ($routine['item_param_type'][$i] == 'ENUM') {                $input_type = 'radio';            } else {                $input_type = 'checkbox';            }            for ($j=0; $j<$tokens['len']; $j++) {                if ($tokens[$j]['type'] != 'punct_listsep') {                    $tokens[$j]['data'] = htmlentities(                        PMA_unquote($tokens[$j]['data']),                        ENT_QUOTES                    );                    $retval .= "<input name='params[{$routine['item_param_name'][$i]}][]' "                             . "value='{$tokens[$j]['data']}' type='$input_type' />"                             . "{$tokens[$j]['data']}<br />\n";                }            }        } else if (in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)) {            $retval .= "\n";        } else {            $retval .= "<input class='$class' type='text' name='params[{$routine['item_param_name'][$i]}]' />\n";        }        $retval .= "</td>\n";        $retval .= "</tr>\n";    }    $retval .= "\n</table>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "</fieldset>\n\n";        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='execute_routine'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    } else {        $retval .= "<input type='hidden' name='execute_routine' value='true' />";        $retval .= "<input type='hidden' name='ajax_request' value='true' />";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END ROUTINE EXECUTE FORM -->\n\n";    return $retval;} // end PMA_RTN_getExecuteForm()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for editing and inserting new table rows * * register_globals_save (mark this file save for disabling register globals) * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script and displays the header */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Sets global variables. * Here it's better to use a if, instead of the '?' operator * to avoid setting a variable to '' when it's not present in $_REQUEST */if (isset($_REQUEST['where_clause'])) {    $where_clause = $_REQUEST['where_clause'];}if (isset($_REQUEST['clause_is_unique'])) {    $clause_is_unique = $_REQUEST['clause_is_unique'];}if (isset($_SESSION['edit_next'])) {    $where_clause = $_SESSION['edit_next'];    unset($_SESSION['edit_next']);    $after_insert = 'edit_next';}if (isset($_REQUEST['sql_query'])) {    $sql_query = $_REQUEST['sql_query'];}if (isset($_REQUEST['ShowFunctionFields'])) {    $cfg['ShowFunctionFields'] = $_REQUEST['ShowFunctionFields'];}if (isset($_REQUEST['ShowFieldTypesInDataEditView'])) {    $cfg['ShowFieldTypesInDataEditView'] = $_REQUEST['ShowFieldTypesInDataEditView'];}if (isset($_REQUEST['default_action'])) {    $default_action = $_REQUEST['default_action'];}/** * file listing */require_once './libraries/file_listing.php';/** * Defines the url to return to in case of error in a sql statement * (at this point, $GLOBALS['goto'] will be set but could be empty) */if (empty($GLOBALS['goto'])) {    if (strlen($table)) {        // avoid a problem (see bug #2202709)        $GLOBALS['goto'] = 'tbl_sql.php';    } else {        $GLOBALS['goto'] = 'db_sql.php';    }}/** * @todo check if we could replace by "db_|tbl_" - please clarify!? */$_url_params = array(    'db'        => $db,    'sql_query' => $sql_query);if (preg_match('@^tbl_@', $GLOBALS['goto'])) {    $_url_params['table'] = $table;}$err_url = $GLOBALS['goto'] . PMA_generate_common_url($_url_params);unset($_url_params);/** * Sets parameters for links * where is this variable used? * replace by PMA_generate_common_url($url_params); */$url_query = PMA_generate_common_url($url_params, 'html', '');/** * get table information * @todo should be done by a Table object */require_once './libraries/tbl_info.inc.php';/** * Get comments for table fileds/columns */$comments_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    $comments_map = PMA_getComments($db, $table);}/** * START REGULAR OUTPUT *//** * used in ./libraries/header.inc.php to load JavaScript library file */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';/** * HTTP and HTML headers */require_once './libraries/header.inc.php';/** * Displays the query submitted and its result * * @todo where does $disp_message and $disp_query come from??? */if (! empty($disp_message)) {    if (! isset($disp_query)) {        $disp_query     = null;    }    PMA_showMessage($disp_message, $disp_query);}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Get the analysis of SHOW CREATE TABLE for this table * @todo should be handled by class Table */$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));unset($show_create_table);/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);$table_fields = array_values(PMA_DBI_get_columns($db, $table));$rows               = array();if (isset($where_clause)) {    // when in edit mode load all selected rows from table    $insert_mode = false;    if (is_array($where_clause)) {        $where_clause_array = $where_clause;    } else {        $where_clause_array = array(0 => $where_clause);    }    $result             = array();    $found_unique_key   = false;    $where_clauses      = array();    foreach ($where_clause_array as $key_id => $where_clause) {        $local_query           = 'SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';        $result[$key_id]       = PMA_DBI_query($local_query, null, PMA_DBI_QUERY_STORE);        $rows[$key_id]         = PMA_DBI_fetch_assoc($result[$key_id]);        $where_clauses[$key_id] = str_replace('\\', '\\\\', $where_clause);        // No row returned        if (! $rows[$key_id]) {            unset($rows[$key_id], $where_clause_array[$key_id]);            PMA_showMessage(__('MySQL returned an empty result set (i.e. zero rows).'), $local_query);            echo "\n";            include './libraries/footer.inc.php';        } else { // end if (no row returned)            $meta = PMA_DBI_get_fields_meta($result[$key_id]);            list($unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result[$key_id], count($meta), $meta, $rows[$key_id], true);            if (! empty($unique_condition)) {                $found_unique_key = true;            }            unset($unique_condition, $tmp_clause_is_unique);        }    }} else {    // no primary key given, just load first row - but what happens if table is empty?    $insert_mode = true;    $result = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $rows = array_fill(0, $cfg['InsertRows'], false);}// Copying a row - fetched data will be inserted as a new row, therefore the where clause is needless.if (isset($default_action) && $default_action === 'insert') {    unset($where_clause, $where_clauses);}// retrieve keys into foreign fields, if any$foreigners  = PMA_getForeigners($db, $table);/** * Displays the form */// autocomplete feature of IE kills the "onchange" event handler and it//        must be replaced by the "onpropertychange" one in this case$chg_evt_handler = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 5 && PMA_USR_BROWSER_VER < 7)                 ? 'onpropertychange'                 : 'onchange';// Had to put the URI because when hosted on an https server,// some browsers send wrongly this form to the http server.    ?><!-- Set on key handler for moving using by Ctrl+arrows --><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;//]]></script>    <?php$_form_params = array(    'db'        => $db,    'table'     => $table,    'goto'      => $GLOBALS['goto'],    'err_url'   => $err_url,    'sql_query' => $sql_query,);if (isset($where_clauses)) {    foreach ($where_clause_array as $key_id => $where_clause) {        $_form_params['where_clause[' . $key_id . ']'] = trim($where_clause);    }}if (isset($clause_is_unique)) {    $_form_params['clause_is_unique'] = $clause_is_unique;}?><!-- Insert/Edit form --><form id="insertForm" method="post" action="tbl_replace.php" name="insertForm" <?php if ($is_upload) { echo ' enctype="multipart/form-data"'; } ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));// Set if we passed the first timestamp field$timestamp_seen = 0;$fields_cnt     = count($table_fields);$tabindex = 0;$tabindex_for_function = +3000;$tabindex_for_null     = +6000;$tabindex_for_value    = 0;$o_rows   = 0;$biggest_max_file_size = 0;// user can toggle the display of Function column// (currently does not work for multi-edits)$url_params['db'] = $db;$url_params['table'] = $table;if (isset($where_clause)) {    $url_params['where_clause'] = trim($where_clause);}if (! empty($sql_query)) {    $url_params['sql_query'] = $sql_query;}if (! $cfg['ShowFunctionFields'] || ! $cfg['ShowFieldTypesInDataEditView']) {    echo __('Show');}if (! $cfg['ShowFunctionFields']) {    $this_url_params = array_merge($url_params,        array('ShowFunctionFields' => 1, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '">' . __('Function') . '</a>' . "\n";}if (! $cfg['ShowFieldTypesInDataEditView']) {    $this_other_url_params = array_merge($url_params,        array('ShowFieldTypesInDataEditView' => 1, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));    echo ' : <a href="tbl_change.php' . PMA_generate_common_url($this_other_url_params) . '">' . __('Type') . '</a>' . "\n";}foreach ($rows as $row_id => $vrow) {    if ($vrow === false) {        unset($vrow);    }    $jsvkey = $row_id;    $rownumber_param = '&amp;rownumber=' . $row_id;    $vkey = '[multi_edit][' . $jsvkey . ']';    $vresult = (isset($result) && is_array($result) && isset($result[$row_id]) ? $result[$row_id] : $result);    if ($insert_mode && $row_id > 0) {        echo '<input type="checkbox" checked="checked" name="insert_ignore_' . $row_id . '" id="insert_ignore_' . $row_id . '" />';        echo '<label for="insert_ignore_' . $row_id . '">' . __('Ignore') . '</label><br />' . "\n";    }?>    <table class="insertRowTable">    <thead>        <tr>            <th><?php echo __('Column'); ?></th> <?php     if ($cfg['ShowFieldTypesInDataEditView']) {        $this_url_params = array_merge($url_params,            array('ShowFieldTypesInDataEditView' => 0, 'ShowFunctionFields' => $cfg['ShowFunctionFields'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Type') . '</a></th>' . "\n";    }    if ($cfg['ShowFunctionFields']) {        $this_url_params = array_merge($url_params,            array('ShowFunctionFields' => 0, 'ShowFieldTypesInDataEditView' => $cfg['ShowFieldTypesInDataEditView'], 'goto' => 'sql.php'));        echo '          <th><a href="tbl_change.php' . PMA_generate_common_url($this_url_params) . '" title="' . __('Hide') . '">' . __('Function') . '</a></th>' . "\n";    }?>            <th><?php echo __('Null'); ?></th>            <th><?php echo __('Value'); ?></th>        </tr>    </thead>    <tfoot>        <tr>            <th colspan="5" align="right" class="tblFooters">                <input type="submit" value="<?php echo __('Go'); ?>" />            </th>        </tr>    </tfoot>    <tbody><?php    // Sets a multiplier used for input-field counts (as zero cannot be used, advance the counter plus one)    $m_rows = $o_rows + 1;    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        if (! isset($table_fields[$i]['processed'])) {            $table_fields[$i]['Field_html'] = htmlspecialchars($table_fields[$i]['Field']);            $table_fields[$i]['Field_md5']  = md5($table_fields[$i]['Field']);            // True_Type contains only the type (stops at first bracket)            $table_fields[$i]['True_Type']  = preg_replace('@\(.*@s', '', $table_fields[$i]['Type']);            // d a t e t i m e            //            // Current date should not be set as default if the field is NULL            // for the current row, but do not put here the current datetime            // if there is a default value (the real default value will be set            // in the Default value logic below)            // Note: (tested in MySQL 4.0.16): when lang is some UTF-8,            // $field['Default'] is not set if it contains NULL:            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Extra] => [True_Type] => datetime)            // but, look what we get if we switch to iso: (Default is NULL)            // Array ([Field] => d [Type] => datetime [Null] => YES [Key] => [Default] => [Extra] => [True_Type] => datetime)            // so I force a NULL into it (I don't think it's possible            // to have an empty default value for DATETIME)            // then, the "if" after this one will work            if ($table_fields[$i]['Type'] == 'datetime'             && ! isset($table_fields[$i]['Default'])             && isset($table_fields[$i]['Null'])             && $table_fields[$i]['Null'] == 'YES') {                $table_fields[$i]['Default'] = null;            }            $table_fields[$i]['len']                = preg_match('@float|double@', $table_fields[$i]['Type']) ? 100 : -1;            if (isset($comments_map[$table_fields[$i]['Field']])) {                $table_fields[$i]['Field_title'] = '<span style="border-bottom: 1px dashed black;" title="'                    . htmlspecialchars($comments_map[$table_fields[$i]['Field']]) . '">'                    . $table_fields[$i]['Field_html'] . '</span>';            } else {                $table_fields[$i]['Field_title'] = $table_fields[$i]['Field_html'];            }            // The type column.            // Fix for bug #3152931 'ENUM and SET cannot have "Binary" option'            // If check to ensure types such as "enum('one','two','binary',..)" or            // "enum('one','two','varbinary',..)" are not categorized as binary.            if (stripos($table_fields[$i]['Type'], 'binary') === 0            || stripos($table_fields[$i]['Type'], 'varbinary') === 0) {                $table_fields[$i]['is_binary'] = stristr($table_fields[$i]['Type'], 'binary');            } else {                $table_fields[$i]['is_binary'] = false;            }            // If check to ensure types such as "enum('one','two','blob',..)" or            // "enum('one','two','tinyblob',..)" etc. are not categorized as blob.            if (stripos($table_fields[$i]['Type'], 'blob') === 0            || stripos($table_fields[$i]['Type'], 'tinyblob') === 0            || stripos($table_fields[$i]['Type'], 'mediumblob') === 0            || stripos($table_fields[$i]['Type'], 'longblob') === 0) {                $table_fields[$i]['is_blob']   = stristr($table_fields[$i]['Type'], 'blob');            } else {                $table_fields[$i]['is_blob'] = false;            }            // If check to ensure types such as "enum('one','two','char',..)" or            // "enum('one','two','varchar',..)" are not categorized as char.            if (stripos($table_fields[$i]['Type'], 'char') === 0            || stripos($table_fields[$i]['Type'], 'varchar') === 0) {                $table_fields[$i]['is_char']   = stristr($table_fields[$i]['Type'], 'char');            } else {                $table_fields[$i]['is_char'] = false;            }            $table_fields[$i]['first_timestamp'] = false;            switch ($table_fields[$i]['True_Type']) {                case 'set':                    $table_fields[$i]['pma_type'] = 'set';                    $table_fields[$i]['wrap']  = '';                    break;                case 'enum':                    $table_fields[$i]['pma_type'] = 'enum';                    $table_fields[$i]['wrap']  = '';                    break;                case 'timestamp':                    if (!$timestamp_seen) {   // can only occur once per table                        $timestamp_seen  = 1;                        $table_fields[$i]['first_timestamp'] = true;                    }                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;                default:                    $table_fields[$i]['pma_type'] = $table_fields[$i]['Type'];                    $table_fields[$i]['wrap']  = ' nowrap="nowrap"';                    break;            }        }        $field = $table_fields[$i];        $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);        if (-1 === $field['len']) {            $field['len'] = PMA_DBI_field_len($vresult, $i);            // length is unknown for geometry fields, make enough space to edit very simple WKTs            if (-1 === $field['len']) {                $field['len'] = 30;            }        }        //Call validation when the form submited...        $unnullify_trigger = $chg_evt_handler . "=\"return verificationsAfterFieldChange('". PMA_escapeJsString($field['Field_md5']) . "', '"            . PMA_escapeJsString($jsvkey) . "','".$field['pma_type']."')\"";        // Use an MD5 as an array index to avoid having special characters in the name atttibute (see bug #1746964 )        $field_name_appendix =  $vkey . '[' . $field['Field_md5'] . ']';        if ($field['Type'] == 'datetime'         && ! isset($field['Default'])         && ! is_null($field['Default'])         && ($insert_mode || ! isset($vrow[$field['Field']]))) {            // INSERT case or            // UPDATE case with an NULL value            $vrow[$field['Field']] = date('Y-m-d H:i:s', time());        }        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">            <td <?php echo ($cfg['LongtextDoubleTextarea'] && strstr($field['True_Type'], 'longtext') ? 'rowspan="2"' : ''); ?> align="center">                <?php echo $field['Field_title']; ?>                <input type="hidden" name="fields_name<?php echo $field_name_appendix; ?>" value="<?php echo $field['Field_html']; ?>"/>            </td><?php if ($cfg['ShowFieldTypesInDataEditView']) { ?>             <td align="center"<?php echo $field['wrap']; ?>><span class="column_type"><?php echo $field['pma_type']; ?></span>             </td>         <?php } //End if        // Get a list of GIS data types.        $gis_data_types = PMA_getGISDatatypes();        // Prepares the field value        $real_null_value = false;        $special_chars_encoded = '';        if (isset($vrow)) {            // (we are editing)            if (is_null($vrow[$field['Field']])) {                $real_null_value = true;                $vrow[$field['Field']]    = '';                $special_chars   = '';                $data            = $vrow[$field['Field']];            } elseif ($field['True_Type'] == 'bit') {                $special_chars = PMA_printable_bit_value($vrow[$field['Field']], $extracted_fieldspec['spec_in_brackets']);            } elseif (in_array($field['True_Type'], $gis_data_types)) {                // Convert gis data to Well Know Text format                $vrow[$field['Field']] = PMA_asWKT($vrow[$field['Field']], true);                $special_chars = htmlspecialchars($vrow[$field['Field']]);            } else {                // special binary "characters"                if ($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) {                    if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                        $vrow[$field['Field']] = bin2hex($vrow[$field['Field']]);                        $field['display_binary_as_hex'] = true;                    } else {                        $vrow[$field['Field']] = PMA_replace_binary_contents($vrow[$field['Field']]);                    }                } // end if                $special_chars   = htmlspecialchars($vrow[$field['Field']]);            //We need to duplicate the first \n or otherwise we will lose the first newline entered in a VARCHAR or TEXT column                $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);                $data            = $vrow[$field['Field']];            } // end if... else...            //when copying row, it is useful to empty auto-increment column to prevent duplicate key error            if (isset($default_action) && $default_action === 'insert') {                if ($field['Key'] === 'PRI' && strpos($field['Extra'], 'auto_increment') !== false) {                    $data = $special_chars_encoded = $special_chars = null;                }            }            // If a timestamp field value is not included in an update            // statement MySQL auto-update it to the current timestamp;            // however, things have changed since MySQL 4.1, so            // it's better to set a fields_prev in this situation            $backup_field  = '<input type="hidden" name="fields_prev'                . $field_name_appendix . '" value="'                . htmlspecialchars($vrow[$field['Field']]) . '" />';        } else {            // (we are inserting)            // display default values            if (! isset($field['Default'])) {                $field['Default'] = '';                $real_null_value          = true;                $data                     = '';            } else {                $data                     = $field['Default'];            }            if ($field['True_Type'] == 'bit') {                $special_chars = PMA_convert_bit_default_value($field['Default']);            } else {                $special_chars = htmlspecialchars($field['Default']);            }            $backup_field  = '';            $special_chars_encoded = PMA_duplicateFirstNewline($special_chars);            // this will select the UNHEX function while inserting            if (($field['is_binary'] || ($field['is_blob'] && ! $cfg['ProtectBinary'])) && $_SESSION['tmp_user_values']['display_binary_as_hex'] && $cfg['ShowFunctionFields']) {                $field['display_binary_as_hex'] = true;            }        }        $idindex  = ($o_rows * $fields_cnt) + $i + 1;        $tabindex = $idindex;        // Get a list of data types that are not yet supported.        $no_support_types = PMA_unsupportedDatatypes();        // The function column        // -------------------        // We don't want binary data to be destroyed        // Note: from the MySQL manual: "BINARY doesn't affect how the column is        //       stored or retrieved" so it does not mean that the contents is        //       binary        if ($cfg['ShowFunctionFields']) {            if (($cfg['ProtectBinary'] && $field['is_blob'] && !$is_upload)             || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])) {                echo '        <td align="center">' . __('Binary') . '</td>' . "\n";            } elseif (strstr($field['True_Type'], 'enum') || strstr($field['True_Type'], 'set') || in_array($field['pma_type'], $no_support_types)) {                echo '        <td align="center">--</td>' . "\n";            } else {                ?>            <td>                <select name="funcs<?php echo $field_name_appendix; ?>" <?php echo $unnullify_trigger; ?> tabindex="<?php echo ($tabindex + $tabindex_for_function); ?>" id="field_<?php echo $idindex; ?>_1"><?php    echo PMA_getFunctionsForField($field, $insert_mode);?>                </select>            </td>                <?php            }        } // end if ($cfg['ShowFunctionFields'])        // The null column        // ---------------        $foreignData = PMA_getForeignData($foreigners, $field['Field'], false, '', '');        echo '        <td>' . "\n";        if ($field['Null'] == 'YES') {            echo '            <input type="hidden" name="fields_null_prev' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' value="on"';            }            echo ' />' . "\n";            echo '            <input type="checkbox" class="checkbox_null" tabindex="' . ($tabindex + $tabindex_for_null) . '"'                 . ' name="fields_null' . $field_name_appendix . '"';            if ($real_null_value && !$field['first_timestamp']) {                echo ' checked="checked"';            }            echo ' id="field_' . ($idindex) . '_2" />';            // nullify_code is needed by the js nullify() function            if (strstr($field['True_Type'], 'enum')) {                if (strlen($field['Type']) > 20) {                    $nullify_code = '1';                } else {                    $nullify_code = '2';                }            } elseif (strstr($field['True_Type'], 'set')) {                $nullify_code = '3';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == false) {                // foreign key in a drop-down                $nullify_code = '4';            } elseif ($foreigners && isset($foreigners[$field['Field']]) && $foreignData['foreign_link'] == true) {                // foreign key with a browsing icon                $nullify_code = '6';            } else {                $nullify_code = '5';            }            // to be able to generate calls to nullify() in jQuery            echo '<input type="hidden" class="nullify_code" name="nullify_code' . $field_name_appendix . '" value="' . $nullify_code . '" />';            echo '<input type="hidden" class="hashed_field" name="hashed_field' . $field_name_appendix . '" value="' .  $field['Field_md5'] . '" />';            echo '<input type="hidden" class="multi_edit" name="multi_edit' . $field_name_appendix . '" value="' . PMA_escapeJsString($vkey) . '" />';        }        echo '        </td>' . "\n";        // The value column (depends on type)        // ----------------        // See bug #1667887 for the reason why we don't use the maxlength        // HTML attribute        echo '        <td>' . "\n";        // Will be used by js/tbl_change.js to set the default value        // for the "Continue insertion" feature        echo '<span class="default_value hide">' . $special_chars . '</span>';        if ($foreignData['foreign_link'] == true) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <input type="text" name="fields<?php echo $field_name_appendix; ?>"                class="textfield" <?php echo $unnullify_trigger; ?>                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3"                value="<?php echo htmlspecialchars($data); ?>" />                <a class="hide foreign_values_anchor" target="_blank" onclick="window.open(this.href, 'foreigners', 'width=640,height=240,scrollbars=yes,resizable=yes'); return false;" href="browse_foreigners.php?<?php echo PMA_generate_common_url($db, $table); ?>&amp;field=<?php echo PMA_escapeJsString(urlencode($field['Field']) . $rownumber_param); ?>"><?php echo str_replace("'", "\'", $titles['Browse']); ?></a>            <?php        } elseif (is_array($foreignData['disp_row'])) {            echo $backup_field . "\n";            ?>            <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>"                value="foreign" />            <select name="fields<?php echo $field_name_appendix; ?>"                <?php echo $unnullify_trigger; ?>                class="textfield"                tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                id="field_<?php echo ($idindex); ?>_3">                <?php echo PMA_foreignDropdown($foreignData['disp_row'], $foreignData['foreign_field'], $foreignData['foreign_display'], $data, $cfg['ForeignKeyMaxLimit']); ?>            </select>            <?php                // still needed? :            unset($foreignData['disp_row']);        } elseif ($cfg['LongtextDoubleTextarea'] && strstr($field['pma_type'], 'longtext')) {            ?>            &nbsp;</td>        </tr>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">            <td colspan="5" align="right">                <?php echo $backup_field . "\n"; ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo ($cfg['TextareaRows']*2); ?>"                    cols="<?php echo ($cfg['TextareaCols']*2); ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>          <?php        } elseif (strstr($field['pma_type'], 'text')) {            echo $backup_field . "\n";            ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>            <?php            echo "\n";            if (strlen($special_chars) > 32000) {                echo "        </td>\n";                echo '        <td>' . __('Because of its length,<br /> this column might not be editable');            }        } elseif ($field['pma_type'] == 'enum') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    // Removes automatic MySQL escape format                    $val = str_replace('\'\'', '\'', str_replace('\\\\', '\\', $val));                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }            }            $field_enum_values = $table_fields[$i]['values'];            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="enum" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />            <?php            echo "\n" . '            ' . $backup_field . "\n";            // show dropdown or radio depend on length            if (strlen($field['Type']) > 20) {                ?>                <select name="fields<?php echo $field_name_appendix; ?>"                    <?php echo $unnullify_trigger; ?>                    class="textfield"                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">                    <option value="">&nbsp;</option>                <?php                echo "\n";                foreach ($field_enum_values as $enum_value) {                    echo '                ';                    echo '<option value="' . $enum_value['html'] . '"';                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' selected="selected"';                    }                    echo '>' . $enum_value['html'] . '</option>' . "\n";                } // end for                ?>                </select>                <?php            } else {                $j = 0;                foreach ($field_enum_values as $enum_value) {                    echo '            ';                    echo '<input type="radio" name="fields' . $field_name_appendix . '"';                    echo ' class="textfield"';                    echo ' value="' . $enum_value['html'] . '"';                    echo ' id="field_' . ($idindex) . '_3_'  . $j . '"';                    echo $unnullify_trigger;                    if ($data == $enum_value['plain']                     || ($data == ''                      && (! isset($where_clause) || $field['Null'] != 'YES')                      && isset($field['Default'])                      && $enum_value['plain'] == $field['Default'])) {                        echo ' checked="checked"';                    }                    echo ' tabindex="' . ($tabindex + $tabindex_for_value) . '" />';                    echo '<label for="field_' . $idindex . '_3_' . $j . '">'                        . $enum_value['html'] . '</label>' . "\n";                    $j++;                } // end for            } // end else        } elseif ($field['pma_type'] == 'set') {            if (! isset($table_fields[$i]['values'])) {                $table_fields[$i]['values'] = array();                foreach ($extracted_fieldspec['enum_set_values'] as $val) {                    $table_fields[$i]['values'][] = array(                        'plain' => $val,                        'html'  => htmlspecialchars($val),                    );                }                $table_fields[$i]['select_size'] = min(4, count($table_fields[$i]['values']));            }            $field_set_values = $table_fields[$i]['values'];            $select_size = $table_fields[$i]['select_size'];            $vset = array_flip(explode(',', $data));            echo $backup_field . "\n";            ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="set" />                <select name="fields<?php echo $field_name_appendix . '[]'; ?>"                    class="textfield"                    size="<?php echo $select_size; ?>"                    multiple="multiple" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3">            <?php            foreach ($field_set_values as $field_set_value) {                echo '                ';                echo '<option value="' . $field_set_value['html'] . '"';                if (isset($vset[$field_set_value['plain']])) {                    echo ' selected="selected"';                }                echo '>' . $field_set_value['html'] . '</option>' . "\n";            } // end for            ?>                </select>            <?php        // We don't want binary data destroyed        } elseif ($field['is_binary'] || $field['is_blob']) {            if (($cfg['ProtectBinary'] && $field['is_blob'])                || ($cfg['ProtectBinary'] == 'all' && $field['is_binary'])            ) {                echo "\n";                    // for blobstreaming                if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                    && PMA_BS_IsPBMSReference($data, $db)                ) {                    echo '<input type="hidden" name="remove_blob_ref_' . $field['Field_md5'] . $vkey . '" value="' . $data . '" />';                    echo '<input type="checkbox" name="remove_blob_repo_' . $field['Field_md5'] . $vkey . '" /> ' . __('Remove BLOB Repository Reference') . "<br />";                    echo PMA_BS_CreateReferenceLink($data, $db);                    echo "<br />";                } else {                    echo __('Binary - do not edit');                    if (isset($data)) {                        $data_size = PMA_formatByteDown(strlen(stripslashes($data)), 3, 1);                        echo ' ('. $data_size [0] . ' ' . $data_size[1] . ')';                        unset($data_size);                    }                    echo "\n";                }   // end if (PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type) && PMA_BS_IsPBMSReference($data, $db))                ?>                <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="protected" />                <input type="hidden" name="fields<?php echo $field_name_appendix; ?>" value="" />                <?php            } elseif ($field['is_blob']) {                echo "\n";                echo $backup_field . "\n";                ?>                <textarea name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['TextareaRows']; ?>"                    cols="<?php echo $cfg['TextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                // field size should be at least 4 and max $cfg['LimitChars']                $fieldsize = min(max($field['len'], 4), $cfg['LimitChars']);                echo "\n";                echo $backup_field . "\n";                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="textfield" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php            } // end if...elseif...else            // Upload choice (only for BLOBs because the binary            // attribute does not imply binary contents)            // (displayed whatever value the ProtectBinary has)            if ($is_upload && $field['is_blob']) {                // check if field type is of longblob and  if the table is PBMS enabled.                if (($field['pma_type'] == "longblob")                    && PMA_BS_IsTablePBMSEnabled($db, $table, $tbl_type)                ) {                    echo '<br />';                    echo '<input type="checkbox" name="upload_blob_repo' . $vkey . '[' . $field['Field_md5'] . ']" /> ' .  __('Upload to BLOB repository');                }                echo '<br />';                echo '<input type="file" name="fields_upload' . $vkey . '[' . $field['Field_md5'] . ']" class="textfield" id="field_' . $idindex . '_3" size="10" ' . $unnullify_trigger . '/>&nbsp;';                // find maximum upload size, based on field type                /**                 * @todo with functions this is not so easy, as you can basically                 * process any data with function like MD5                 */                $max_field_sizes = array(                    'tinyblob'   =>        '256',                    'blob'       =>      '65536',                    'mediumblob' =>   '16777216',                    'longblob'   => '4294967296'); // yeah, really                $this_field_max_size = $max_upload_size; // from PHP max                if ($this_field_max_size > $max_field_sizes[$field['pma_type']]) {                   $this_field_max_size = $max_field_sizes[$field['pma_type']];                }                echo PMA_displayMaximumUploadSize($this_field_max_size) . "\n";                // do not generate here the MAX_FILE_SIZE, because we should                // put only one in the form to accommodate the biggest field                if ($this_field_max_size > $biggest_max_file_size) {                    $biggest_max_file_size = $this_field_max_size;                }            }            if (!empty($cfg['UploadDir'])) {                $files = PMA_getFileSelectOptions(PMA_userDir($cfg['UploadDir']));                if ($files === false) {                    echo '        <font color="red">' . __('Error') . '</font><br />' . "\n";                    echo '        ' . __('The directory you set for upload work cannot be reached') . "\n";                } elseif (!empty($files)) {                    echo "<br />\n";                    echo '    <i>' . __('Or') . '</i>' . ' ' . __('web server upload directory') . ':<br />' . "\n";                    echo '        <select size="1" name="fields_uploadlocal' . $vkey . '[' . $field['Field_md5'] . ']">' . "\n";                    echo '            <option value="" selected="selected"></option>' . "\n";                    echo $files;                    echo '        </select>' . "\n";                }            } // end if (web-server upload directory)        // end elseif (binary or blob)        } elseif (! in_array($field['pma_type'], $no_support_types)) {            // ignore this column to avoid changing it            if ($field['is_char']) {                $fieldsize = $extracted_fieldspec['spec_in_brackets'];            } else {            /**             * This case happens for example for INT or DATE columns;             * in these situations, the value returned in $field['len']             * seems appropriate.             */                $fieldsize = $field['len'];            }            $fieldsize = min(max($fieldsize, $cfg['MinSizeForInputField']), $cfg['MaxSizeForInputField']);            echo $backup_field . "\n";            if ($field['is_char']                && ($cfg['CharEditing'] == 'textarea'                || strpos($data, "\n") !== false)            ) {                echo "\n";                ?>                <textarea class="char" name="fields<?php echo $field_name_appendix; ?>"                    rows="<?php echo $cfg['CharTextareaRows']; ?>"                    cols="<?php echo $cfg['CharTextareaCols']; ?>"                    dir="<?php echo $text_dir; ?>"                    id="field_<?php echo ($idindex); ?>_3"                    <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    ><?php echo $special_chars_encoded; ?></textarea>                <?php            } else {                $the_class = 'textfield';                if ($field['pma_type'] == 'date') {                    $the_class .= ' datefield';                } elseif ($field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    $the_class .= ' datetimefield';                }                ?>                <input type="text" name="fields<?php echo $field_name_appendix; ?>"                    value="<?php echo $special_chars; ?>" size="<?php echo $fieldsize; ?>"                    class="<?php echo $the_class; ?>" <?php echo $unnullify_trigger; ?>                    tabindex="<?php echo ($tabindex + $tabindex_for_value); ?>"                    id="field_<?php echo ($idindex); ?>_3" />                <?php                if ($field['Extra'] == 'auto_increment') {                    ?>                    <input type="hidden" name="auto_increment<?php echo $field_name_appendix; ?>" value="1" />                    <?php                } // end if                if (substr($field['pma_type'], 0, 9) == 'timestamp') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="timestamp" />                    <?php                }                if (substr($field['pma_type'], 0, 8) == 'datetime') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="datetime" />                    <?php                }                if ($field['True_Type'] == 'bit') {                    ?>                    <input type="hidden" name="fields_type<?php echo $field_name_appendix; ?>" value="bit" />                    <?php                }                if ($field['pma_type'] == 'date'                    || $field['pma_type'] == 'datetime'                    || substr($field['pma_type'], 0, 9) == 'timestamp'                ) {                    // the _3 suffix points to the date field                    // the _2 suffix points to the corresponding NULL checkbox                    // in dateFormat, 'yy' means the year with 4 digits                }            }        }        if (in_array($field['pma_type'], $gis_data_types)) {            $data_val = isset($vrow[$field['Field']]) ? $vrow[$field['Field']] : '';            $_url_params = array(                'field' => $field['Field_title'],                'value' => $data_val,             );            if ($field['pma_type'] != 'geometry') {                $_url_params = $_url_params + array('gis_data[gis_type]' => strtoupper($field['pma_type']));            }            $edit_url = 'gis_data_editor.php' . PMA_generate_common_url($_url_params);            $edit_str = PMA_getIcon('b_edit.png', __('Edit/Insert'));            echo('<span class="open_gis_editor">');            echo(PMA_linkOrButton($edit_url, $edit_str, array(), false, false, '_blank'));            echo('</span>');        }        ?>            </td>        </tr>        <?php        $odd_row = !$odd_row;    } // end for    $o_rows++;    echo '  </tbody></table><br />';} // end foreach on multi-edit?>    <div id="gis_editor"></div><div id="popup_background"></div>    <br />    <fieldset id="actions_panel">    <table border="0" cellpadding="5" cellspacing="0">    <tr>        <td valign="middle" nowrap="nowrap">            <select name="submit_type" class="control_at_footer" tabindex="<?php echo ($tabindex + $tabindex_for_value + 1); ?>"><?phpif (isset($where_clause)) {    ?>                <option value="save"><?php echo __('Save'); ?></option>    <?php}    ?>                <option value="insert"><?php echo __('Insert as new row'); ?></option>                <option value="insertignore"><?php echo __('Insert as new row and ignore errors'); ?></option>                <option value="showinsert"><?php echo __('Show insert query'); ?></option>            </select>    <?phpecho "\n";if (! isset($after_insert)) {    $after_insert = 'back';}?>        </td>        <td valign="middle">            &nbsp;&nbsp;&nbsp;<strong><?php echo __('and then'); ?></strong>&nbsp;&nbsp;&nbsp;        </td>        <td valign="middle" nowrap="nowrap">            <select name="after_insert">                <option value="back" <?php echo ($after_insert == 'back' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to previous page'); ?></option>                <option value="new_insert" <?php echo ($after_insert == 'new_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Insert another new row'); ?></option><?phpif (isset($where_clause)) {    ?>                <option value="same_insert" <?php echo ($after_insert == 'same_insert' ? 'selected="selected"' : ''); ?>><?php echo __('Go back to this page'); ?></option>    <?php    // If we have just numeric primary key, we can also edit next    // in 2.8.2, we were looking for `field_name` = numeric_value    //if (preg_match('@^[\s]*`[^`]*` = [0-9]+@', $where_clause)) {    // in 2.9.0, we are looking for `table_name`.`field_name` = numeric_value    if ($found_unique_key && preg_match('@^[\s]*`[^`]*`[\.]`[^`]*` = [0-9]+@', $where_clause)) {        ?>    <option value="edit_next" <?php echo ($after_insert == 'edit_next' ? 'selected="selected"' : ''); ?>><?php echo __('Edit next row'); ?></option>        <?php    }}?>            </select>        </td>    </tr>    <tr>        <td><?php echo PMA_showHint(__('Use TAB key to move from value to value, or CTRL+arrows to move anywhere')); ?>        </td>        <td colspan="3" align="right" valign="middle">            <input type="submit" class="control_at_footer" value="<?php echo __('Go'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 6); ?>" id="buttonYes" />            <input type="reset" class="control_at_footer" value="<?php echo __('Reset'); ?>" tabindex="<?php echo ($tabindex + $tabindex_for_value + 7); ?>" />        </td>    </tr>    </table>    </fieldset>    <?php if ($biggest_max_file_size > 0) {            echo '        ' . PMA_generateHiddenMaxFileSize($biggest_max_file_size) . "\n";          } ?></form><?phpif ($insert_mode) {?><!-- Continue insertion form --><form id="continueForm" method="post" action="tbl_replace.php" name="continueForm" >    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo htmlspecialchars($GLOBALS['goto']); ?>" />    <input type="hidden" name="err_url" value="<?php echo htmlspecialchars($err_url); ?>" />    <input type="hidden" name="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" /><?php    if (isset($where_clauses)) {        foreach ($where_clause_array as $key_id => $where_clause) {            echo '<input type="hidden" name="where_clause[' . $key_id . ']" value="' . htmlspecialchars(trim($where_clause)) . '" />'. "\n";        }    }    $tmp = '<select name="insert_rows" id="insert_rows">' . "\n";    $option_values = array(1,2,5,10,15,20,30,40);    foreach ($option_values as $value) {        $tmp .= '<option value="' . $value . '"';        if ($value == $cfg['InsertRows']) {            $tmp .= ' selected="selected"';        }        $tmp .= '>' . $value . '</option>' . "\n";    }    $tmp .= '</select>' . "\n";    echo "\n" . sprintf(__('Continue insertion with %s rows'), $tmp);    unset($tmp);    echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";    echo '</form>' . "\n";}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for event management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_EVN_setGlobals(){    global $event_status, $event_type, $event_interval;    $event_status        = array(                               'query'   => array('ENABLE',                                                  'DISABLE',                                                  'DISABLE ON SLAVE'),                               'display' => array('ENABLED',                                                  'DISABLED',                                                  'SLAVESIDE_DISABLED')                           );    $event_type          = array('RECURRING',                                 'ONE TIME');    $event_interval      = array('YEAR',                                 'QUARTER',                                 'MONTH',                                 'DAY',                                 'HOUR',                                 'MINUTE',                                 'WEEK',                                 'SECOND',                                 'YEAR_MONTH',                                 'DAY_HOUR',                                 'DAY_MINUTE',                                 'DAY_SECOND',                                 'HOUR_MINUTE',                                 'HOUR_SECOND',                                 'MINUTE_SECOND');}/** * Main function for the events functionality */function PMA_EVN_main(){    global $db;    PMA_EVN_setGlobals();    /**     * Process all requests     */    PMA_EVN_handleEditor();    PMA_EVN_handleExport();    /**     * Display a list of available events     */    $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` "             . "WHERE $where ORDER BY `EVENT_NAME` ASC;";    $items   = PMA_DBI_fetch_result($query);    echo PMA_RTE_getList('event', $items);    /**     * Display a link for adding a new event, if     * the user has the privileges and a link to     * toggle the state of the event scheduler.     */    echo PMA_EVN_getFooterLinks();} // end PMA_EVN_main()/** * Handles editor requests for adding or editing an item */function PMA_EVN_handleEditor(){    global $_REQUEST, $_POST, $errors, $db;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_EVN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $create_item = PMA_DBI_get_definition(                    $db,                    'EVENT',                    $_REQUEST['item_original_name']                );                $drop_item = "DROP EVENT " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped event.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Event %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Event %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";                $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                         . "AND EVENT_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'";                $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";                $event   = PMA_DBI_fetch_single_row($query);                $extra_data['name'] = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_EVN_getRowForList($event);                $extra_data['insert'] = ! empty($event);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['item_changetype'])))    ) { // FIXME: this must be simpler than that        $operation = '';        if (! empty($_REQUEST['item_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_EVN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit event");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])                && empty($_REQUEST['item_changetype'])            ) {                $item = PMA_EVN_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_EVN_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_EVN_getEditorForm($mode, $operation, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_EVN_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_status',                     'item_execute_at',                     'item_interval_value',                     'item_interval_field',                     'item_starts',                     'item_ends',                     'item_definition',                     'item_preserve',                     'item_comment',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']        = 'ONE TIME';    $retval['item_type_toggle'] = 'RECURRING';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'RECURRING') {        $retval['item_type']        = 'RECURRING';        $retval['item_type_toggle'] = 'ONE TIME';    }    return $retval;} // end PMA_EVN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit event" form given the name of a event. * * @param   string   $name   The name of the event. * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromName($name){    global $db;    $retval = array();    $columns = "`EVENT_NAME`, `STATUS`, `EVENT_TYPE`, `EXECUTE_AT`, "             . "`INTERVAL_VALUE`, `INTERVAL_FIELD`, `STARTS`, `ENDS`, "             . "`EVENT_DEFINITION`, `ON_COMPLETION`, `DEFINER`, `EVENT_COMMENT`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND EVENT_NAME='" . PMA_sqlAddSlashes($name) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";    $item    = PMA_DBI_fetch_single_row($query);    if (! $item) {        return false;    }    $retval['item_name']   = $item['EVENT_NAME'];    $retval['item_status'] = $item['STATUS'];    $retval['item_type']   = $item['EVENT_TYPE'];    if ($retval['item_type'] == 'RECURRING') {        $retval['item_type_toggle'] = 'ONE TIME';    } else {        $retval['item_type_toggle'] = 'RECURRING';    }    $retval['item_execute_at']     = $item['EXECUTE_AT'];    $retval['item_interval_value'] = $item['INTERVAL_VALUE'];    $retval['item_interval_field'] = $item['INTERVAL_FIELD'];    $retval['item_starts']         = $item['STARTS'];    $retval['item_ends']           = $item['ENDS'];    $retval['item_preserve']       = '';    if ($item['ON_COMPLETION'] == 'PRESERVE') {        $retval['item_preserve']   = " checked='checked'";    }    $retval['item_definition'] = $item['EVENT_DEFINITION'];    $retval['item_definer']    = $item['DEFINER'];    $retval['item_comment']    = $item['EVENT_COMMENT'];    return $retval;} // end PMA_EVN_getDataFromName()/** * Displays a form used to add/edit an event * * @param   string   $mode      If the editor will be used edit an event *                              or add a new one: 'edit' or 'add'. * @param   string   $operation If the editor was previously invoked with *                              JS turned off, this will hold the name of *                              the current operation * @param   array    $item      Data for the event returned by *                              PMA_EVN_getDataFromRequest() or *                              PMA_EVN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_EVN_getEditorForm($mode, $operation, $item){    global $db, $table, $event_status, $event_type, $event_interval;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_type',                       'item_execute_at',                       'item_interval_value',                       'item_starts',                       'item_ends',                       'item_definition',                       'item_definer',                       'item_comment'                   );    foreach ($need_escape as $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    // Handle some logic first    if ($operation == 'change') {        if ($item['item_type'] == 'RECURRING') {            $item['item_type']         = 'ONE TIME';            $item['item_type_toggle']  = 'RECURRING';        } else {            $item['item_type']         = 'RECURRING';            $item['item_type_toggle']  = 'ONE TIME';        }    }    if ($item['item_type'] == 'ONE TIME') {        $isrecurring_class = ' hide';        $isonetime_class   = '';    } else {        $isrecurring_class = '';        $isonetime_class   = ' hide';    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " EVENT FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_events.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Event name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' \n";    $retval .= "               value='{$item['item_name']}'\n";    $retval .= "               maxlength='64' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Status') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_status'>\n";    foreach ($event_status['display'] as $key => $value) {        $selected = "";        if (! empty($item['item_status']) && $item['item_status'] == $value) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>";        foreach ($event_type as $key => $value) {            $selected = "";            if (! empty($item['item_type']) && $item['item_type'] == $value) {                $selected = " selected='selected'";            }            $retval .= "<option$selected>$value</option>";        }        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' \n";        $retval .= "               value='{$item['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$item['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit'\n";        $retval .= "               name='item_changetype'\n";        $retval .= "               value='";        $retval .= sprintf(__('Change to %s'), $item['item_type_toggle']);        $retval .= "' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='onetime_event_row $isonetime_class'>\n";    $retval .= "    <td>" . __('Execute at') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_execute_at'\n";    $retval .= "               value='{$item['item_execute_at']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row $isrecurring_class'>\n";    $retval .= "    <td>" . __('Execute every') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='text'\n";    $retval .= "               name='item_interval_value'\n";    $retval .= "               value='{$item['item_interval_value']}' />\n";    $retval .= "        <select style='width: 49%;' name='item_interval_field'>";    foreach ($event_interval as $key => $value) {        $selected = "";        if (! empty($item['item_interval_field'])            && $item['item_interval_field'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('Start of recurring event', 'Start') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text'\n name='item_starts'\n";    $retval .= "               value='{$item['item_starts']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('End of recurring event', 'End') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_ends'\n";    $retval .= "               value='{$item['item_ends']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('On completion preserve') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_preserve'{$item['item_preserve']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$item['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " EVENT FORM -->\n\n";    return $retval;} // end PMA_EVN_getEditorForm()/** * Composes the query necessary to create an event from an HTTP request. * * @return  string  The CREATE EVENT query. */function PMA_EVN_getQueryFromRequest(){    global $_REQUEST, $errors, $event_status, $event_type, $event_interval;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'EVENT ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide an event name');    }    $query .= 'ON SCHEDULE ';    if (! empty($_REQUEST['item_type']) && in_array($_REQUEST['item_type'], $event_type)) {        if ($_REQUEST['item_type'] == 'RECURRING') {            if (! empty($_REQUEST['item_interval_value'])                && !empty($_REQUEST['item_interval_field'])                && in_array($_REQUEST['item_interval_field'], $event_interval)            ) {                $query .= 'EVERY ' . intval($_REQUEST['item_interval_value']) . ' ';                $query .= $_REQUEST['item_interval_field'] . ' ';            } else {                $errors[] = __('You must provide a valid interval value for the event.');            }            if (! empty($_REQUEST['item_starts'])) {                $query .= "STARTS '" . PMA_sqlAddSlashes($_REQUEST['item_starts']) . "' ";            }            if (! empty($_REQUEST['item_ends'])) {                $query .= "ENDS '" . PMA_sqlAddSlashes($_REQUEST['item_ends']) . "' ";            }        } else {            if (! empty($_REQUEST['item_execute_at'])) {                $query .= "AT '" . PMA_sqlAddSlashes($_REQUEST['item_execute_at']) . "' ";            } else {                $errors[] = __('You must provide a valid execution time for the event.');            }        }    } else {        $errors[] = __('You must provide a valid type for the event.');    }    $query .= 'ON COMPLETION ';    if (empty($_REQUEST['item_preserve'])) {        $query .= 'NOT ';    }    $query .= 'PRESERVE ';    if (! empty($_REQUEST['item_status'])) {        foreach ($event_status['display'] as $key => $value) {            if ($value == $_REQUEST['item_status']) {                $query .= $event_status['query'][$key] . ' ';                break;            }        }    }    $query .= 'DO ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide an event definition.');    }    return $query;} // end PMA_EVN_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating database (if user has privileges for that) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';if ($is_create_db_priv) {    // The user is allowed to create a db    ?>        <form method="post" action="db_create.php" id="create_database_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="ajax" ' : ''); ?>><strong>            <?php echo '<label for="text_create_db">' . __('Create database') . '</label>&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />            <?php echo PMA_generate_common_hidden_inputs('', '', 5); ?>            <input type="hidden" name="reload" value="1" />            <input type="text" name="new_db" value="<?php echo $db_to_create; ?>" maxlength="64" class="textfield" id="text_create_db"/>    <?php    include_once './libraries/mysql_charsets.lib.php';    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'db_collation', null, null, true, 5);    if (! empty($dbstats)) {        echo '<input type="hidden" name="dbstats" value="1" />';    }    ?>            <input type="submit" value="<?php echo __('Create'); ?>" id="buttonGo" />        </form>    <?php} else {    ?>    <!-- db creation no privileges message -->        <strong><?php echo __('Create database') . ':&nbsp;' . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_DATABASE'); ?></strong><br />        <?php              echo '<span class="noPrivileges">'                 . ($cfg['ErrorIconic'] ? PMA_getImage('s_error2.png', '', array('hspace' => 2, 'border' => 0, 'align' => 'middle')) : '')                 . '' . __('No Privileges') .'</span>';} // end create db form or message?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold PMA_Theme class * * @package PhpMyAdmin *//** * handles theme * * @todo add the possibility to make a theme depend on another theme and by default on original * @todo make all components optional - get missing components from 'parent' theme * @todo make css optionally replacing 'parent' css or extending it (by appending at the end) * @todo add an optional global css file - which will be used for both frames * * @package PhpMyAdmin */class PMA_Theme{    /**     * @var string theme version     * @access  protected     */    var $version = '0.0.0.0';    /**     * @var string theme name     * @access  protected     */    var $name = '';    /**     * @var string theme id     * @access  protected     */    var $id = '';    /**     * @var string theme path     * @access  protected     */    var $path = '';    /**     * @var string image path     * @access  protected     */    var $img_path = '';    /**     * @var array   valid css types     * @access  protected     */    var $types = array('left', 'right', 'print');    /**     * @var integer last modification time for info file     * @access  protected     */    var $mtime_info = 0;    /**     * needed because sometimes, the mtime for different themes     * is identical     * @var integer filesize for info file     * @access  protected     */    var $filesize_info = 0;    /**     * @access  public     * @return  boolean     whether loading them info was successful or not     */    function loadInfo()    {        if (! file_exists($this->getPath() . '/info.inc.php')) {            return false;        }        if ($this->mtime_info === filemtime($this->getPath() . '/info.inc.php')) {            return true;        }        @include $this->getPath() . '/info.inc.php';        // was it set correctly?        if (! isset($theme_name)) {            return false;        }        $this->mtime_info = filemtime($this->getPath() . '/info.inc.php');        $this->filesize_info = filesize($this->getPath() . '/info.inc.php');        if (isset($theme_full_version)) {            $this->setVersion($theme_full_version);        } elseif (isset($theme_generation, $theme_version)) {            $this->setVersion($theme_generation . '.' . $theme_version);        }        $this->setName($theme_name);        return true;    }    /**     * returns theme object loaded from given folder     * or false if theme is invalid     *     * @static     * @access  public     * @param string  $folder path to theme     * @return  object  PMA_Theme     */    static public function load($folder)    {        $theme = new PMA_Theme();        $theme->setPath($folder);        if (! $theme->loadInfo()) {            return false;        }        $theme->checkImgPath();        return $theme;    }    /**     * checks image path for existance - if not found use img from original theme     *     * @access  public     * @return bool     */    function checkImgPath()    {        if (is_dir($this->getPath() . '/img/')) {            $this->setImgPath($this->getPath() . '/img/');            return true;        } elseif (is_dir($GLOBALS['cfg']['ThemePath'] . '/original/img/')) {            $this->setImgPath($GLOBALS['cfg']['ThemePath'] . '/original/img/');            return true;        } else {            trigger_error(                sprintf(__('No valid image path for theme %s found!'), $this->getName()),                E_USER_ERROR);            return false;        }    }    /**     * returns path to theme     *     * @access  public     * @return  string  $path   path to theme     */    function getPath()    {        return $this->path;    }    /**     * returns layout file     *     * @access  public     * @return  string  layout file     */    function getLayoutFile()    {        return $this->getPath() . '/layout.inc.php';    }    /**     * set path to theme     *     * @access  public     * @param string  $path   path to theme     */    function setPath($path)    {        $this->path = trim($path);    }    /**     * sets version     *     * @access  public     * @param string new version     */    function setVersion($version)    {        $this->version = trim($version);    }    /**     * returns version     *     * @access  public     * @return  string  version     */    function getVersion()    {        return $this->version;    }    /**     * checks theme version agaisnt $version     * returns true if theme version is equal or higher to $version     *     * @access  public     * @param string  $version    version to compare to     * @return  boolean     */    function checkVersion($version)    {        return version_compare($this->getVersion(), $version, 'lt');    }    /**     * sets name     *     * @access  public     * @param string  $name   new name     */    function setName($name)    {        $this->name = trim($name);    }    /**     * returns name     *     * @access  public     * @return  string name     */    function getName()    {        return $this->name;    }    /**     * sets id     *     * @access  public     * @param string  $id   new id     */    function setId($id)    {        $this->id = trim($id);    }    /**     * returns id     *     * @access  public     * @return  string  id     */    function getId()    {        return $this->id;    }    /**     * @access  public     * @param string  path to images for this theme     */    function setImgPath($path)    {        $this->img_path = $path;    }    /**     * @access  public     * @return  string image path for this theme     */    function getImgPath()    {        return $this->img_path;    }    /**     * load css (send to stdout, normally the browser)     *     * @access  public     * @param string  $type   left, right or print     * @return bool     */    function loadCss(&$type)    {        if (empty($type) || ! in_array($type, $this->types)) {            $type = 'left';        }        if ($type == 'right') {            echo PMA_SQP_buildCssData();        }        $_css_file = $this->getPath()                   . '/css/theme_' . $type . '.css.php';        if (! file_exists($_css_file)) {            return false;        }        if ($GLOBALS['text_dir'] === 'ltr') {            $right = 'right';            $left = 'left';        } else {            $right = 'left';            $left = 'right';        }        include $_css_file;        if ($type != 'print') {            $_sprites_data_file = $this->getPath() . '/sprites.lib.php';            $_sprites_css_file = './themes/sprites.css.php';            if (   (file_exists($_sprites_data_file)  && is_readable($_sprites_data_file))                && (file_exists($_sprites_css_file) && is_readable($_sprites_css_file))            ) {                include $_sprites_data_file;                include $_sprites_css_file;            }        }        return true;    }    /**     * prints out the preview for this theme     *     * @access  public     */    function printPreview()    {        echo '<div class="theme_preview">';        echo '<h2>' . htmlspecialchars($this->getName())            .' (' . htmlspecialchars($this->getVersion()) . ')</h2>';        echo '<p>';        echo '<a target="_top" class="take_theme" '            .'name="' . htmlspecialchars($this->getId()) . '" '            . 'href="index.php'.PMA_generate_common_url(array(                'set_theme' => $this->getId()                )) . '">';        if (@file_exists($this->getPath() . '/screen.png')) {            // if screen exists then output            echo '<img src="' . $this->getPath() . '/screen.png" border="1"'                .' alt="' . htmlspecialchars($this->getName()) . '"'                .' title="' . htmlspecialchars($this->getName()) . '" /><br />';        } else {            echo __('No preview available.');        }        echo '[ <strong>' . __('take it') . '</strong> ]</a>'            .'</p>'            .'</div>';    }    /**     * Remove filter for IE.     *     * @return string CSS code.     */    function getCssIEClearFilter() {        return PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8            ? 'filter: none'            : '';    }    /**     * Generates code for CSS gradient using various browser extensions.     *     * @param string $start_color Color of gradient start, hex value without #     * @param string $end_color   Color of gradient end, hex value without #     *     * @return string CSS code.     */    function getCssGradient($start_color, $end_color)    {        $result = array();        // Opera 9.5+, IE 9        $result[] = 'background-image: url(./themes/svg_gradient.php?from=' . $start_color . '&to=' . $end_color . ');';        $result[] = 'background-size: 100% 100%;';        // Safari 4-5, Chrome 1-9        $result[] = 'background: -webkit-gradient(linear, left top, left bottom, from(#' . $start_color . '), to(#' . $end_color . '));';        // Safari 5.1, Chrome 10+        $result[] = 'background: -webkit-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Firefox 3.6+        $result[] = 'background: -moz-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 10        $result[] = 'background: -ms-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // Opera 11.10        $result[] = 'background: -o-linear-gradient(top, #' . $start_color . ', #' . $end_color . ');';        // IE 6-8        if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER >= 6 && PMA_USR_BROWSER_VER <= 8) {            $result[] = 'filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#' . $start_color . '", endColorstr="#' . $end_color . '");';        }        return implode("\n", $result);    }    /**     * Returns CSS styles for CodeMirror editor based on query formatter colors.     *     * @return string CSS code.     */    function getCssCodeMirror()    {        $result[] = 'span.cm-keyword, span.cm-statement-verb {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_reservedWord'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-comment {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['comment'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-string {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['quote'] . ';';        $result[] = '}';        $result[] = 'span.cm-operator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-mysql-word {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_identifier'] . ';';        $result[] = '}';        $result[] = 'span.cm-builtin {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_functionName'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-2 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnType'] . ';';        $result[] = '}';        $result[] = 'span.cm-variable-3 {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['alpha_columnAttrib'] . ';';        $result[] = '}';        $result[] = 'span.cm-separator {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['punct'] . ';';        $result[] = '}';        $result[] = 'span.cm-number {';        $result[] = '    color: ' . $GLOBALS['cfg']['SQP']['fmtColor']['digit_integer'] . ';';        $result[] = '}';        return implode("\n", $result);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.sprintf.js';// Handles some variables that may have been sent by the calling script$GLOBALS['db'] = '';$GLOBALS['table'] = '';$show_query = '1';require_once './libraries/header.inc.php';// Any message to display?if (! empty($message)) {    PMA_showMessage($message);    unset($message);}$common_url_query =  PMA_generate_common_url('', '');// when $server > 0, a server has been chosen so we can display// all MySQL-related informationif ($server > 0) {    include './libraries/server_common.inc.php';    include './libraries/StorageEngine.class.php';    include './libraries/server_links.inc.php';    // Use the verbose name of the server instead of the hostname    // if a value is set    $server_info = '';    if (! empty($cfg['Server']['verbose'])) {        $server_info .= htmlspecialchars($cfg['Server']['verbose']);        if ($GLOBALS['cfg']['ShowServerInfo']) {            $server_info .= ' (';        }    }    if ($GLOBALS['cfg']['ShowServerInfo'] || empty($cfg['Server']['verbose'])) {        $server_info .= PMA_DBI_get_host_info();    }    if (! empty($cfg['Server']['verbose']) && $GLOBALS['cfg']['ShowServerInfo']) {    $server_info .= ')';    }    $mysql_cur_user_and_host = PMA_DBI_fetch_value('SELECT USER();');    // should we add the port info here?    $short_server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                ? $GLOBALS['cfg']['Server']['verbose']                : $GLOBALS['cfg']['Server']['host']);}echo '<div id="maincontainer">' . "\n";echo '<div id="main_pane_left">';if ($server > 0 || (! $cfg['LeftDisplayServers'] && count($cfg['Servers']) > 1)) {    echo '<div class="group">';    echo '<h2>' . __('General Settings') . '</h2>';    echo '<ul>';    /**     * Displays the MySQL servers choice form     */    if (! $cfg['LeftDisplayServers']     && (count($cfg['Servers']) > 1 || $server == 0 && count($cfg['Servers']) == 1)) {        echo '<li id="li_select_server">';        include_once './libraries/select_server.lib.php';        PMA_select_server(true, true);        echo '</li>';    }    /**     * Displays the mysql server related links     */    if ($server > 0 && !PMA_DRIZZLE) {        include_once './libraries/check_user_privileges.lib.php';        // Logout for advanced authentication        if ($cfg['Server']['auth_type'] != 'config') {            if ($cfg['ShowChgPassword']) {                if ($GLOBALS['cfg']['AjaxEnable']) {                    $conditional_class = 'ajax';                } else {                    $conditional_class = null;                }                PMA_printListItem(                    __('Change password'),                    'li_change_password',                    './user_password.php?' . $common_url_query,                    null,                    null,                    'change_password_anchor',                    null,                    $conditional_class                );            }        } // end if        echo '    <li id="li_select_mysql_collation">';        echo '        <form method="post" action="index.php" target="_parent">' . "\n"           . PMA_generate_common_hidden_inputs(null, null, 4, 'collation_connection')           . '            <label for="select_collation_connection">' . "\n"           . '                ' . __('Server connection collation') . "\n"           // put the doc link in the form so that it appears on the same line           . PMA_showMySQLDocu('MySQL_Database_Administration', 'Charset-connection') . ': ' .  "\n"           . '            </label>' . "\n"           . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'collation_connection', 'select_collation_connection', $collation_connection, true, 4, true)           . '            <noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n"           . '        </form>' . "\n"           . '    </li>' . "\n";    } // end of if ($server > 0 && !PMA_DRIZZLE)    echo '</ul>';    echo '</div>';}echo '<div class="group">';echo '<h2>' . __('Appearance Settings') . '</h2>';echo '  <ul>';// Displays language selection comboif (empty($cfg['Lang'])) {    echo '<li id="li_select_lang">';    include_once './libraries/display_select_lang.lib.php';    PMA_select_language();    echo '</li>';}// ThemeManager if availableif ($GLOBALS['cfg']['ThemeManager']) {    echo '<li id="li_select_theme">';    echo $_SESSION['PMA_Theme_Manager']->getHtmlSelectBox();    echo '</li>';}echo '<li id="li_select_fontsize">';echo PMA_Config::getFontsizeForm();echo '</li>';echo '</ul>';// User preferencesif ($server > 0) {    echo '<ul>';    echo PMA_printListItem(        __('More settings'),        'li_user_preferences',        './prefs_manage.php?' . $common_url_query    );    echo '</ul>';}echo '</div>';echo '</div>';echo '<div id="main_pane_right">';if ($server > 0 && $GLOBALS['cfg']['ShowServerInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Database server') . '</h2>';    echo '<ul>' . "\n";    PMA_printListItem(__('Server') . ': ' . $server_info, 'li_server_info');    PMA_printListItem(__('Software') . ': ' . PMA_getServerType(), 'li_server_type');    PMA_printListItem(__('Software version') . ': ' . PMA_MYSQL_STR_VERSION . ' - ' . PMA_MYSQL_VERSION_COMMENT, 'li_server_version');    PMA_printListItem(        __('Protocol version') . ': ' . PMA_DBI_get_proto_info(),        'li_mysql_proto'    );    PMA_printListItem(        __('User') . ': ' . htmlspecialchars($mysql_cur_user_and_host),        'li_user_info'    );    echo '    <li id="li_select_mysql_charset">';    echo '        ' . __('Server charset') . ': '       . '        <span xml:lang="en" dir="ltr">'       . '           ' . $mysql_charsets_descriptions[$mysql_charset_map['utf-8']] . "\n"       . '           (' . $mysql_charset_map['utf-8'] . ')' . "\n"       . '        </span>' . "\n"       . '    </li>' . "\n";    echo '  </ul>';    echo ' </div>';}if ($GLOBALS['cfg']['ShowServerInfo'] || $GLOBALS['cfg']['ShowPhpInfo']) {    echo '<div class="group">';    echo '<h2>' . __('Web server') . '</h2>';    echo '<ul>';    if ($GLOBALS['cfg']['ShowServerInfo']) {        PMA_printListItem($_SERVER['SERVER_SOFTWARE'], 'li_web_server_software');        if ($server > 0) {            $client_version_str = PMA_DBI_get_client_info();            if (preg_match('#\d+\.\d+\.\d+#', $client_version_str)                && in_array($GLOBALS['cfg']['Server']['extension'], array('mysql', 'mysqli'))            ) {                $client_version_str = 'libmysql - ' . $client_version_str;            }            PMA_printListItem(                __('Database client version') . ': ' . $client_version_str,                'li_mysql_client_version'            );            PMA_printListItem(                __('PHP extension') . ': ' . $GLOBALS['cfg']['Server']['extension']. ' '                    . PMA_showPHPDocu('book.' . $GLOBALS['cfg']['Server']['extension'] . '.php'),                'li_used_php_extension'            );        }    }    if ($cfg['ShowPhpInfo']) {        PMA_printListItem(__('Show PHP information'), 'li_phpinfo', './phpinfo.php?' . $common_url_query);    }    echo '  </ul>';    echo ' </div>';}echo '<div class="group pmagroup">';echo '<h2>phpMyAdmin</h2>';echo '<ul>';$class = null;// workaround for bug 3302733; some browsers don't like the situation// where phpMyAdmin is called on a secure page but a part of the page// (the version check) refers to a non-secure pageif ($GLOBALS['cfg']['VersionCheck'] && ! $GLOBALS['PMA_Config']->get('is_https')) {    $class = 'jsversioncheck';}PMA_printListItem(__('Version information') . ': ' . PMA_VERSION, 'li_pma_version', null, null, null, null, $class);PMA_printListItem(__('Documentation'), 'li_pma_docs', 'Documentation.html', null, '_blank');PMA_printListItem(__('Wiki'), 'li_pma_wiki', PMA_linkURL('http://wiki.phpmyadmin.net/'), null, '_blank');// does not work if no target specified, don't know whyPMA_printListItem(__('Official Homepage'), 'li_pma_homepage', PMA_linkURL('http://www.phpMyAdmin.net/'), null, '_blank');PMA_printListItem(__('Contribute'), 'li_pma_contribute', PMA_linkURL('http://www.phpmyadmin.net/home_page/improve.php'), null, '_blank');PMA_printListItem(__('Get support'), 'li_pma_support', PMA_linkURL('http://www.phpmyadmin.net/home_page/support.php'), null, '_blank');PMA_printListItem(__('List of changes'), 'li_pma_changes', PMA_linkURL('changelog.php'), null, '_blank');?>    </ul> </div></div><?php/** * BUG: MSIE needs two <br /> here, otherwise it will not extend the outer div to the * full height of the inner divs */?><br class="clearfloat" /><br class="clearfloat" /></div><?php/** * Warning if using the default MySQL privileged account */if ($server != 0 && $cfg['Server']['user'] == 'root' && $cfg['Server']['password'] == '') {    trigger_error(__('Your configuration file contains settings (root with no password) that correspond to the default MySQL privileged account. Your MySQL server is running with this default, is open to intrusion, and you really should fix this security hole by setting a password for user \'root\'.'), E_USER_WARNING);}/** * Nijel: As we try to handle charsets by ourself, mbstring overloads just * break it, see bug 1063821. */if (@extension_loaded('mbstring') && @ini_get('mbstring.func_overload') > 1) {    trigger_error(__('You have enabled mbstring.func_overload in your PHP configuration. This option is incompatible with phpMyAdmin and might cause some data to be corrupted!'), E_USER_WARNING);}/** * Nijel: mbstring is used for handling multibyte inside parser, so it is good * to tell user something might be broken without it, see bug #1063149. */if (! @extension_loaded('mbstring')) {    trigger_error(__('The mbstring PHP extension was not found and you seem to be using a multibyte charset. Without the mbstring extension phpMyAdmin is unable to split strings correctly and it may result in unexpected results.'), E_USER_WARNING);}/** * Check whether session.gc_maxlifetime limits session validity. */$gc_time = (int)@ini_get('session.gc_maxlifetime');if ($gc_time < $GLOBALS['cfg']['LoginCookieValidity'] ) {    trigger_error(PMA_Message::decodeBB(__('Your PHP parameter [a@http://php.net/manual/en/session.configuration.php#ini.session.gc-maxlifetime@]session.gc_maxlifetime[/a] is lower that cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check whether LoginCookieValidity is limited by LoginCookieStore. */if ($GLOBALS['cfg']['LoginCookieStore'] != 0 && $GLOBALS['cfg']['LoginCookieStore'] < $GLOBALS['cfg']['LoginCookieValidity']) {    trigger_error(PMA_Message::decodeBB(__('Login cookie store is lower than cookie validity configured in phpMyAdmin, because of this, your login will expire sooner than configured in phpMyAdmin.')), E_USER_WARNING);}/** * Check if user does not have defined blowfish secret and it is being used. */if (!empty($_SESSION['auto_blowfish_secret']) &&        empty($GLOBALS['cfg']['blowfish_secret'])) {    trigger_error(__('The configuration file now needs a secret passphrase (blowfish_secret).'), E_USER_WARNING);}/** * Check for existence of config directory which should not exist in * production environment. */if (file_exists('./config')) {    trigger_error(__('Directory [code]config[/code], which is used by the setup script, still exists in your phpMyAdmin directory. You should remove it once phpMyAdmin has been configured.'), E_USER_WARNING);}if ($server > 0) {    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage is not completely configured, some extended features have been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $common_url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        $message->display();    } // end if}/** * Show notice when javascript support is missing. */echo '<noscript>';$message = PMA_Message::notice(__('Javascript support is missing or disabled in your browser, some phpMyAdmin functionality will be missing. For example navigation frame will not refresh automatically.'));$message->isError(true);$message->display();echo '</noscript>';/** * Warning about different MySQL library and server version * (a difference on the third digit does not count). * If someday there is a constant that we can check about mysqlnd, we can use it instead * of strpos(). * If no default server is set, PMA_DBI_get_client_info() is not defined yet. * Drizzle can speak MySQL protocol, so don't warn about version mismatch for Drizzle servers. */if (function_exists('PMA_DBI_get_client_info') && !PMA_DRIZZLE) {    $_client_info = PMA_DBI_get_client_info();    if ($server > 0 && strpos($_client_info, 'mysqlnd') === false && substr(PMA_MYSQL_CLIENT_API, 0, 3) != substr(PMA_MYSQL_INT_VERSION, 0, 3)) {        trigger_error(            PMA_sanitize(                sprintf(                    __('Your PHP MySQL library version %s differs from your MySQL server version %s. This may cause unpredictable behavior.'),                    $_client_info,                    substr(                        PMA_MYSQL_STR_VERSION,                        0,                        strpos(PMA_MYSQL_STR_VERSION . '-', '-')                    )                )            ),            E_USER_NOTICE        );    }    unset($_client_info);}/** * Warning about Suhosin */if ($cfg['SuhosinDisableWarning'] == false    && @ini_get('suhosin.request.max_value_length')) {    trigger_error(        PMA_sanitize(            sprintf(                __('Server running with Suhosin. Please refer to %sdocumentation%s for possible issues.'),                '[a@./Documentation.html#faq1_38@_blank]',                '[/a]'            )        ),        E_USER_WARNING    );}/** * Warning about mcrypt. */if (!function_exists('mcrypt_encrypt') && !$GLOBALS['cfg']['McryptDisableWarning']) {    PMA_warnMissingExtension('mcrypt');}/** * Warning about incomplete translations. * * The data file is created while creating release by ./scripts/remove-incomplete-mo */if (file_exists('./libraries/language_stats.inc.php')) {    include './libraries/language_stats.inc.php';    /*     * This message is intentionally not translated, because we're     * handling incomplete translations here and focus on english     * speaking users.     */    if (isset($GLOBALS['language_stats'][$lang]) && $GLOBALS['language_stats'][$lang] < $cfg['TranslationWarningThreshold']) {        trigger_error('You are using an incomplete translation, please help to make it better by <a href="http://www.phpmyadmin.net/home_page/improve.php#translate" target="_blank">contributing</a>.', E_USER_NOTICE);    }}/** * prints list item for main page * * @param string  $name   displayed text * @param string  $id     id, used for css styles * @param string  $url    make item as link with $url as target * @param string  $mysql_help_page  display a link to MySQL's manual * @param string  $target special target for $url * @param string  $a_id   id for the anchor, used for jQuery to hook in functions * @param string  $class  class for the li element * @param string  $a_class  class for the anchor element */function PMA_printListItem($name, $id = null, $url = null, $mysql_help_page = null, $target = null, $a_id = null, $class = null, $a_class = null){    echo '<li id="' . $id . '"';    if (null !== $class) {        echo ' class="' . $class . '"';    }    echo '>';    if (null !== $url) {        echo '<a href="' . $url . '"';        if (null !== $target) {           echo ' target="' . $target . '"';        }        if (null != $a_id) {            echo ' id="' . $a_id .'"';        }        if (null != $a_class) {            echo ' class="' . $a_class .'"';        }        echo '>';    }    echo $name;    if (null !== $url) {        echo '</a>' . "\n";    }    if (null !== $mysql_help_page) {        echo PMA_showMySQLDocu('', $mysql_help_page);    }    echo '</li>';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage Original *//** * */$theme_name = 'Original';$theme_full_version = '2.9';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$import_type = 'database';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core functions used all over the scripts. * This script is distinct from libraries/common.inc.php because this * script is called from /test. * * @package PhpMyAdmin *//** * checks given $var and returns it if valid, or $default of not valid * given $var is also checked for type being 'similar' as $default * or against any other type if $type is provided * * <code> * // $_REQUEST['db'] not set * echo PMA_ifSetOr($_REQUEST['db'], ''); // '' * // $_REQUEST['sql_query'] not set * echo PMA_ifSetOr($_REQUEST['sql_query']); // null * // $cfg['ForceSSL'] not set * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL']); // null * // $cfg['ForceSSL'] set to 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1 * // $cfg['ForceSSL'] set to true * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true * </code> * * @see     PMA_isValid() * @param mixed   $var        param to check * @param mixed   $default    default value * @param mixed   $type       var type or array of values to check against $var * @return  mixed   $var or $default */function PMA_ifSetOr(&$var, $default = null, $type = 'similar'){    if (! PMA_isValid($var, $type, $default)) {        return $default;    }    return $var;}/** * checks given $var against $type or $compare * * $type can be: * - false       : no type checking * - 'scalar'    : whether type of $var is integer, float, string or boolean * - 'numeric'   : whether type of $var is any number repesentation * - 'length'    : whether type of $var is scalar with a string length > 0 * - 'similar'   : whether type of $var is similar to type of $compare * - 'equal'     : whether type of $var is identical to type of $compare * - 'identical' : whether $var is identical to $compare, not only the type! * - or any other valid PHP variable type * * <code> * // $_REQUEST['doit'] = true; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false * // $_REQUEST['doit'] = 'true'; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true * </code> * * NOTE: call-by-reference is used to not get NOTICE on undefined vars, * but the var is not altered inside this function, also after checking a var * this var exists nut is not set, example: * <code> * // $var is not set * isset($var); // false * functionCallByReference($var); // false * isset($var); // true * functionCallByReference($var); // true * </code> * * to avoid this we set this var to null if not isset * * @todo create some testsuites * @todo add some more var types like hex, bin, ...? * @see     http://php.net/gettype * @param mixed   $var        variable to check * @param mixed   $type       var type or array of valid values to check against $var * @param mixed   $compare    var to compare with $var * @return  boolean whether valid or not */function PMA_isValid(&$var, $type = 'length', $compare = null){    if (! isset($var)) {        // var is not even set        return false;    }    if ($type === false) {        // no vartype requested        return true;    }    if (is_array($type)) {        return in_array($var, $type);    }    // allow some aliaes of var types    $type = strtolower($type);    switch ($type) {        case 'identic' :            $type = 'identical';            break;        case 'len' :            $type = 'length';            break;        case 'bool' :            $type = 'boolean';            break;        case 'float' :            $type = 'double';            break;        case 'int' :            $type = 'integer';            break;        case 'null' :            $type = 'NULL';            break;    }    if ($type === 'identical') {        return $var === $compare;    }    // whether we should check against given $compare    if ($type === 'similar') {        switch (gettype($compare)) {            case 'string':            case 'boolean':                $type = 'scalar';                break;            case 'integer':            case 'double':                $type = 'numeric';                break;            default:                $type = gettype($compare);        }    } elseif ($type === 'equal') {        $type = gettype($compare);    }    // do the check    if ($type === 'length' || $type === 'scalar') {        $is_scalar = is_scalar($var);        if ($is_scalar && $type === 'length') {            return (bool) strlen($var);        }        return $is_scalar;    }    if ($type === 'numeric') {        return is_numeric($var);    }    if (gettype($var) === $type) {        return true;    }    return false;}/** * Removes insecure parts in a path; used before include() or * require() when a part of the path comes from an insecure source * like a cookie or form. * * @param string  The path to check * * @return   string  The secured path * * @access  public */function PMA_securePath($path){    // change .. to .    $path = preg_replace('@\.\.*@', '.', $path);    return $path;} // end function/** * displays the given error message on phpMyAdmin error page in foreign language, * ends script execution and closes session * * loads language file if not loaded already * * @todo    use detected argument separator (PMA_Config) * @param string $error_message the error message or named error message * @param string|array $message_args arguments applied to $error_message * @return  exit */function PMA_fatalError($error_message, $message_args = null){    /* Use format string if applicable */    if (is_string($message_args)) {        $error_message = sprintf($error_message, $message_args);    } elseif (is_array($message_args)) {        $error_message = vsprintf($error_message, $message_args);    }    $error_message = strtr($error_message, array('<br />' => '[br]'));    if (function_exists('__')) {        $error_header = __('Error');    } else {        $error_header = 'Error';    }    // Displays the error message    $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];    $dir = $GLOBALS['text_dir'];    $type = $error_header;    $error = $error_message;    // on fatal errors it cannot hurt to always delete the current session    if (isset($GLOBALS['session_name']) && isset($_COOKIE[$GLOBALS['session_name']])) {        $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);    }    include './libraries/error.inc.php';    if (!defined('TESTSUITE')) {        exit;    }}/** * Returns a link to the PHP documentation * * @param string  anchor in documentation * * @return  string  the URL * * @access  public */function PMA_getPHPDocLink($target){    /* Gettext does not have to be loaded yet */    if (function_exists('_pgettext')) {        /* l10n: Please check that translation actually exists. */        $lang = _pgettext('PHP documentation language', 'en');    } else {        $lang = 'en';    }    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);}/** * Warn or fail on missing extension. * * @param string $extension Extension name * @param bool $fatal Whether the error is fatal. / @param string $extra Extra string to append to messsage. */function PMA_warnMissingExtension($extension, $fatal = false, $extra = ''){    /* Gettext does not have to be loaded yet here */    if (function_exists('__')) {        $message = __('The %s extension is missing. Please check your PHP configuration.');    } else {        $message = 'The %s extension is missing. Please check your PHP configuration.';    }    $message = sprintf($message,        '[a@' . PMA_getPHPDocLink('book.' . $extension . '.php') . '@Documentation][em]' . $extension . '[/em][/a]');    if ($extra != '') {        $message .= ' ' . $extra;    }    if ($fatal) {        PMA_fatalError($message);    } else {        trigger_error($message, E_USER_WARNING);    }}/** * returns count of tables in given db * * @param string  $db database to count tables for * @return  integer count of tables in $db */function PMA_getTableCount($db){    $tables = PMA_DBI_try_query(        'SHOW TABLES FROM ' . PMA_backquote($db) . ';',        null, PMA_DBI_QUERY_STORE);    if ($tables) {        $num_tables = PMA_DBI_num_rows($tables);        // do not count hidden blobstreaming tables        while ((($num_tables > 0)) && $data = PMA_DBI_fetch_assoc($tables)) {            if (PMA_BS_IsHiddenTable($data['Tables_in_' . $db])) {                $num_tables--;            }        }        PMA_DBI_free_result($tables);    } else {        $num_tables = 0;    }    return $num_tables;}/** * Converts numbers like 10M into bytes * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas * (renamed with PMA prefix to avoid double definition when embedded * in Moodle) * * @param string  $size * @return  integer $size */function PMA_get_real_size($size = 0){    if (! $size) {        return 0;    }    $scan['gb'] = 1073741824; //1024 * 1024 * 1024;    $scan['g']  = 1073741824; //1024 * 1024 * 1024;    $scan['mb'] = 1048576;    $scan['m']  = 1048576;    $scan['kb'] =    1024;    $scan['k']  =    1024;    $scan['b']  =       1;    foreach ($scan as $unit => $factor) {        if (strlen($size) > strlen($unit)         && strtolower(substr($size, strlen($size) - strlen($unit))) == $unit) {            return substr($size, 0, strlen($size) - strlen($unit)) * $factor;        }    }    return $size;} // end function PMA_get_real_size()/** * merges array recursive like array_merge_recursive() but keyed-values are * always overwritten. * * array PMA_array_merge_recursive(array $array1[, array $array2[, array ...]]) * * @see     http://php.net/array_merge * @see     http://php.net/array_merge_recursive * @param array   array to merge * @param array   array to merge * @param array   ... * @return  array   merged array */function PMA_array_merge_recursive(){    switch(func_num_args()) {        case 0 :            return false;            break;        case 1 :            // when does that happen?            return func_get_arg(0);            break;        case 2 :            $args = func_get_args();            if (! is_array($args[0]) || ! is_array($args[1])) {                return $args[1];            }            foreach ($args[1] as $key2 => $value2) {                if (isset($args[0][$key2]) && !is_int($key2)) {                    $args[0][$key2] = PMA_array_merge_recursive($args[0][$key2],                        $value2);                } else {                    // we erase the parent array, otherwise we cannot override a directive that                    // contains array elements, like this:                    // (in config.default.php) $cfg['ForeignKeyDropdownOrder'] = array('id-content','content-id');                    // (in config.inc.php) $cfg['ForeignKeyDropdownOrder'] = array('content-id');                    if (is_int($key2) && $key2 == 0) {                        unset($args[0]);                    }                    $args[0][$key2] = $value2;                }            }            return $args[0];            break;        default :            $args = func_get_args();            $args[1] = PMA_array_merge_recursive($args[0], $args[1]);            array_shift($args);            return call_user_func_array('PMA_array_merge_recursive', $args);            break;    }}/** * calls $function vor every element in $array recursively * * this function is protected against deep recursion attack CVE-2006-1549, * 1000 seems to be more than enough * * @see http://www.php-security.org/MOPB/MOPB-02-2007.html * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549 * * @param array   $array      array to walk * @param string  $function   function to call for every array element */function PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false){    static $recursive_counter = 0;    if (++$recursive_counter > 1000) {        die(__('possible deep recursion attack'));    }    foreach ($array as $key => $value) {        if (is_array($value)) {            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);        } else {            $array[$key] = $function($value);        }        if ($apply_to_keys_also && is_string($key)) {            $new_key = $function($key);            if ($new_key != $key) {                $array[$new_key] = $array[$key];                unset($array[$key]);            }        }    }    $recursive_counter--;}/** * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist) * * checks given given $page against given $whitelist and returns true if valid * it ignores optionaly query paramters in $page (script.php?ignored) * * @param string  &$page      page to check * @param array   $whitelist  whitelist to check page against * @return  boolean whether $page is valid or not (in $whitelist or not) */function PMA_checkPageValidity(&$page, $whitelist){    if (! isset($page) || !is_string($page)) {        return false;    }    if (in_array($page, $whitelist)) {        return true;    } elseif (in_array(substr($page, 0, strpos($page . '?', '?')), $whitelist)) {        return true;    } else {        $_page = urldecode($page);        if (in_array(substr($_page, 0, strpos($_page . '?', '?')), $whitelist)) {            return true;        }    }    return false;}/** * trys to find the value for the given environment vriable name * * searchs in $_SERVER, $_ENV than trys getenv() and apache_getenv() * in this order * * @param string  $var_name   variable name * @return  string  value of $var or empty string */function PMA_getenv($var_name){    if (isset($_SERVER[$var_name])) {        return $_SERVER[$var_name];    } elseif (isset($_ENV[$var_name])) {        return $_ENV[$var_name];    } elseif (getenv($var_name)) {        return getenv($var_name);    } elseif (function_exists('apache_getenv')     && apache_getenv($var_name, true)) {        return apache_getenv($var_name, true);    }    return '';}/** * Send HTTP header, taking IIS limits into account (600 seems ok) * * @param string   $uri the header to send * @return  boolean  always true */function PMA_sendHeaderLocation($uri){    if (PMA_IS_IIS && strlen($uri) > 600) {        include_once './libraries/js_escape.lib.php';        echo '<html><head><title>- - -</title>' . "\n";        echo '<meta http-equiv="expires" content="0">' . "\n";        echo '<meta http-equiv="Pragma" content="no-cache">' . "\n";        echo '<meta http-equiv="Cache-Control" content="no-cache">' . "\n";        echo '<meta http-equiv="Refresh" content="0;url=' .  htmlspecialchars($uri) . '">' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'setTimeout("window.location = unescape(\'"' . PMA_escapeJsString($uri) . '"\')", 2000);' . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";        echo '</head>' . "\n";        echo '<body>' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'document.write(\'<p><a href="' . htmlspecialchars($uri) . '">' . __('Go') . '</a></p>\');' . "\n";        echo '//]]>' . "\n";        echo '</script></body></html>' . "\n";    } else {        if (SID) {            if (strpos($uri, '?') === false) {                header('Location: ' . $uri . '?' . SID);            } else {                $separator = PMA_get_arg_separator();                header('Location: ' . $uri . $separator . SID);            }        } else {            session_write_close();            if (headers_sent()) {                if (function_exists('debug_print_backtrace')) {                    echo '<pre>';                    debug_print_backtrace();                    echo '</pre>';                }                trigger_error('PMA_sendHeaderLocation called when headers are already sent!', E_USER_ERROR);            }            // bug #1523784: IE6 does not like 'Refresh: 0', it            // results in a blank page            // but we need it when coming from the cookie login panel)            if (PMA_IS_IIS && defined('PMA_COMING_FROM_COOKIE_LOGIN')) {                header('Refresh: 0; ' . $uri);            } else {                header('Location: ' . $uri);            }        }    }}/** * Outputs headers to prevent caching in browser (and on the way). * * @return nothing */function PMA_no_cache_header(){    header('Expires: ' . date(DATE_RFC1123)); // rfc2616 - Section 14.21    header('Cache-Control: no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0'); // HTTP/1.1    if (PMA_USR_BROWSER_AGENT == 'IE') {        /* FIXME: Why is this speecial case for IE needed? */        header('Pragma: public');    } else {        header('Pragma: no-cache'); // HTTP/1.0        // test case: exporting a database into a .gz file with Safari        // would produce files not having the current time        // (added this header for Safari but should not harm other browsers)        header('Last-Modified: ' . date(DATE_RFC1123));    }}/** * Sends header indicating file download. * * @param string $filename Filename to include in headers if empty, *                         none Content-Disposition header will be sent. * @param string $mimetype MIME type to include in headers. * @param int    $length   Length of content (optional) * @param bool   $no_cache Whether to include no-caching headers. * * @return nothing */function PMA_download_header($filename, $mimetype, $length = 0, $no_cache = true){    if ($no_cache) {        PMA_no_cache_header();    }    /* Replace all possibly dangerous chars in filename */    $filename = str_replace(array(';', '"', "\n", "\r"), '-', $filename);    if (!empty($filename)) {        header('Content-Description: File Transfer');        header('Content-Disposition: attachment; filename="' . $filename . '"');    }    header('Content-Type: ' . $mimetype);    header('Content-Transfer-Encoding: binary');    if ($length > 0) {        header('Content-Length: ' . $length);    }}/** * Returns value of an element in $array given by $path. * $path is a string describing position of an element in an associative array, * eg. Servers/1/host refers to $array[Servers][1][host] * * @param string   $path * @param array    $array * @param mixed    $default * @return mixed    array element or $default */function PMA_array_read($path, $array, $default = null){    $keys = explode('/', $path);    $value =& $array;    foreach ($keys as $key) {        if (! isset($value[$key])) {            return $default;        }        $value =& $value[$key];    }    return $value;}/** * Stores value in an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_write($path, &$array, $value){    $keys = explode('/', $path);    $last_key = array_pop($keys);    $a =& $array;    foreach ($keys as $key) {        if (! isset($a[$key])) {            $a[$key] = array();        }        $a =& $a[$key];    }    $a[$last_key] = $value;}/** * Removes value from an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_remove($path, &$array){    $keys = explode('/', $path);    $keys_last = array_pop($keys);    $path = array();    $depth = 0;    $path[0] =& $array;    $found = true;    // go as deep as required or possible    foreach ($keys as $key) {        if (! isset($path[$depth][$key])) {            $found = false;            break;        }        $depth++;        $path[$depth] =& $path[$depth-1][$key];    }    // if element found, remove it    if ($found) {        unset($path[$depth][$keys_last]);        $depth--;    }    // remove empty nested arrays    for (; $depth >= 0; $depth--) {        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {            unset($path[$depth][$keys[$depth]]);        } else {            break;        }    }}/** * Returns link to (possibly) external site using defined redirector. * * @param string $url  URL where to go. * * @return string URL for a link. */function PMA_linkURL($url){    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {        return $url;    } else {        if (!function_exists('PMA_generate_common_url')) {            include_once './libraries/url_generating.lib.php';        }        $params = array();        $params['url'] = $url;        return './url.php' . PMA_generate_common_url($params);    }}/** * Returns HTML code to include javascript file. * * @param string $url Location of javascript, relative to js/ folder. * * @return string HTML code for javascript inclusion. */function PMA_includeJS($url){    if (strpos($url, '?') === false) {        return '<script src="./js/' . $url . '?ts=' . filemtime('./js/' . $url) . '" type="text/javascript"></script>' . "\n";    } else {        return '<script src="./js/' . $url . '" type="text/javascript"></script>' . "\n";    }}/** * Adds JS code snippets to be displayed by header.inc.php. Adds a * newline to each snippet. * * @param string $str Js code to be added (e.g. "token=1234;") * */function PMA_AddJSCode($str){    $GLOBALS['js_script'][] = $str;}/** * Adds JS code snippet for variable assignment to be displayed by header.inc.php. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * */function PMA_AddJSVar($key, $value, $escape = true){    PMA_AddJsCode(PMA_getJsValue($key, $value, $escape));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the improved MySQL extension (MySQLi) * * @package PhpMyAdmin-DBI-MySQLi */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysqli_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * some PHP versions are reporting extra messages like "No index used in query" */mysqli_report(MYSQLI_REPORT_OFF);/** * some older mysql client libs are missing these constants ... */if (! defined('MYSQLI_BINARY_FLAG')) {   define('MYSQLI_BINARY_FLAG', 128);}/** * @see http://bugs.php.net/36007 */if (! defined('MYSQLI_TYPE_NEWDECIMAL')) {    define('MYSQLI_TYPE_NEWDECIMAL', 246);}if (! defined('MYSQLI_TYPE_BIT')) {    define('MYSQLI_TYPE_BIT', 16);}// for Drizzleif (! defined('MYSQLI_TYPE_VARCHAR')) {    define('MYSQLI_TYPE_VARCHAR', 15);}/** * Helper function for connecting to the database server * * @param   mysqli  $link * @param   string  $host * @param   string  $user * @param   string  $password * @param   string  $dbname * @param   int     $server_port * @param   string  $server_socket * @param   int     $client_flags * @param   bool    $persistent * @return  bool */function PMA_DBI_real_connect($link, $host, $user, $password, $dbname, $server_port, $server_socket, $client_flags = null, $persistent = false){    global $cfg;    // mysqli persistent connections only on PHP 5.3+    if (PMA_PHP_INT_VERSION >= 50300) {        if ($cfg['PersistentConnections'] || $persistent) {            $host = 'p:' . $host;        }    }    if ($client_flags === null) {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket        );    } else {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket,            $client_flags        );    }}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    // NULL enables connection to the default socket    $link = mysqli_init();    mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, true);    $client_flags = 0;    /* Optionally compress connection */    if ($cfg['Server']['compress'] && defined('MYSQLI_CLIENT_COMPRESS')) {        $client_flags |= MYSQLI_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if ($cfg['Server']['ssl'] && defined('MYSQLI_CLIENT_SSL')) {        $client_flags |= MYSQLI_CLIENT_SSL;    }    if (!$server) {        $return_value = @PMA_DBI_real_connect(            $link,            $cfg['Server']['host'],            $user,            $password,            false,            $server_port,            $server_socket,            $client_flags        );        // Retry with empty password if we're allowed to        if ($return_value == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $return_value = @PMA_DBI_real_connect(                $link,                $cfg['Server']['host'],                $user,                '',                false,                $server_port,                $server_socket,                $client_flags            );        }    } else {        $return_value = @PMA_DBI_real_connect(            $link,            $server['host'],            $user,            $password,            false,            $server_port,            $server_socket        );    }    if ($return_value == false) {        if ($is_controluser) {            trigger_error(                __('Connection for controluser as defined in your configuration failed.'),                E_USER_WARNING            );            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string  $dbname  database name to select * @param mysqli  $link    the mysqli object * @return boolean */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_select_db($link, $dbname);}/** * runs a query and returns the result * * @param   string  $query    query to execute * @param   mysqli  $link     mysqli object * @param   int     $options * @return  mysqli_result|bool */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        $method = MYSQLI_STORE_RESULT;    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        $method = MYSQLI_USE_RESULT;    } else {        $method = 0;    }    return mysqli_query($link, $query, $method);}/** * returns array of rows with associative and numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysqli_fetch_array($result, MYSQLI_BOTH);}/** * returns array of rows with associative keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysqli_fetch_array($result, MYSQLI_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysqli_fetch_array($result, MYSQLI_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool  true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysqli_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  mysqli_result  $result */function PMA_DBI_free_result($result){    if ($result instanceof mysqli_result) {        mysqli_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_more_results($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_more_results($link);}/** * Prepare next result from multi_query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_next_result($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_next_result($link);}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  integer         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysqli_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = mysqli_errno($link);        $error_message = mysqli_error($link);    } else {        $error_number = mysqli_connect_errno();        $error_message = mysqli_connect_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   mysqli_result  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @mysqli_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   mysqli  $link  the mysqli object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   mysqli   $link            the mysqli object * @param   boolean  $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysqli_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @param   mysqli_result  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    $typeAr[MYSQLI_TYPE_DECIMAL]     = 'real';    $typeAr[MYSQLI_TYPE_NEWDECIMAL]  = 'real';    $typeAr[MYSQLI_TYPE_BIT]         = 'int';    $typeAr[MYSQLI_TYPE_TINY]        = 'int';    $typeAr[MYSQLI_TYPE_SHORT]       = 'int';    $typeAr[MYSQLI_TYPE_LONG]        = 'int';    $typeAr[MYSQLI_TYPE_FLOAT]       = 'real';    $typeAr[MYSQLI_TYPE_DOUBLE]      = 'real';    $typeAr[MYSQLI_TYPE_NULL]        = 'null';    $typeAr[MYSQLI_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[MYSQLI_TYPE_LONGLONG]    = 'int';    $typeAr[MYSQLI_TYPE_INT24]       = 'int';    $typeAr[MYSQLI_TYPE_DATE]        = 'date';    $typeAr[MYSQLI_TYPE_TIME]        = 'time';    $typeAr[MYSQLI_TYPE_DATETIME]    = 'datetime';    $typeAr[MYSQLI_TYPE_YEAR]        = 'year';    $typeAr[MYSQLI_TYPE_NEWDATE]     = 'date';    $typeAr[MYSQLI_TYPE_ENUM]        = 'unknown';    $typeAr[MYSQLI_TYPE_SET]         = 'unknown';    $typeAr[MYSQLI_TYPE_TINY_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[MYSQLI_TYPE_LONG_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_BLOB]        = 'blob';    $typeAr[MYSQLI_TYPE_VAR_STRING]  = 'string';    $typeAr[MYSQLI_TYPE_STRING]      = 'string';    $typeAr[MYSQLI_TYPE_VARCHAR]     = 'string'; // for Drizzle    // MySQL returns MYSQLI_TYPE_STRING for CHAR    // and MYSQLI_TYPE_CHAR === MYSQLI_TYPE_TINY    // so this would override TINYINT and mark all TINYINT as string    // https://sf.net/tracker/?func=detail&aid=1532111&group_id=23067&atid=377408    //$typeAr[MYSQLI_TYPE_CHAR]        = 'string';    $typeAr[MYSQLI_TYPE_GEOMETRY]    = 'geometry';    $typeAr[MYSQLI_TYPE_BIT]         = 'bit';    $fields = mysqli_fetch_fields($result);    // this happens sometimes (seen under MySQL 4.0.25)    if (!is_array($fields)) {        return false;    }    foreach ($fields as $k => $field) {        $fields[$k]->_type = $field->type;        $fields[$k]->type = $typeAr[$field->type];        $fields[$k]->_flags = $field->flags;        $fields[$k]->flags = PMA_DBI_field_flags($result, $k);        // Enhance the field objects for mysql-extension compatibilty        //$flags = explode(' ', $fields[$k]->flags);        //array_unshift($flags, 'dummy');        $fields[$k]->multiple_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_MULTIPLE_KEY_FLAG);        $fields[$k]->primary_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_PRI_KEY_FLAG);        $fields[$k]->unique_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNIQUE_KEY_FLAG);        $fields[$k]->not_null            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NOT_NULL_FLAG);        $fields[$k]->unsigned            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNSIGNED_FLAG);        $fields[$k]->zerofill            = (int) (bool) ($fields[$k]->_flags & MYSQLI_ZEROFILL_FLAG);        $fields[$k]->numeric            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NUM_FLAG);        $fields[$k]->blob            = (int) (bool) ($fields[$k]->_flags & MYSQLI_BLOB_FLAG);    }    return $fields;}/** * return number of fields in given $result * * @param   mysqli_result  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysqli_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysqli_fetch_field_direct($result, $i)->length;}/** * returns name of $i. field in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysqli_fetch_field_direct($result, $i)->name;}/** * returns concatenated string of human readable field flags * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    // This is missing from PHP 5.2.5, see http://bugs.php.net/bug.php?id=44846    if (! defined('MYSQLI_ENUM_FLAG')) {        define('MYSQLI_ENUM_FLAG', 256); // see MySQL source include/mysql_com.h    }    $f = mysqli_fetch_field_direct($result, $i);    $type = $f->type;    $charsetnr = $f->charsetnr;    $f = $f->flags;    $flags = '';    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique ';    }    if ($f & MYSQLI_NUM_FLAG) {        $flags .= 'num ';    }    if ($f & MYSQLI_PART_KEY_FLAG) {        $flags .= 'part_key ';    }    if ($f & MYSQLI_SET_FLAG) {        $flags .= 'set ';    }    if ($f & MYSQLI_TIMESTAMP_FLAG) {        $flags .= 'timestamp ';    }    if ($f & MYSQLI_AUTO_INCREMENT_FLAG) {        $flags .= 'auto_increment ';    }    if ($f & MYSQLI_ENUM_FLAG) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == MYSQLI_TYPE_TINY_BLOB || $type == MYSQLI_TYPE_BLOB || $type == MYSQLI_TYPE_MEDIUM_BLOB || $type == MYSQLI_TYPE_LONG_BLOB || $type == MYSQLI_TYPE_VAR_STRING || $type == MYSQLI_TYPE_STRING) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & MYSQLI_ZEROFILL_FLAG) {        $flags .= 'zerofill ';    }    if ($f & MYSQLI_UNSIGNED_FLAG) {        $flags .= 'unsigned ';    }    if ($f & MYSQLI_BLOB_FLAG) {        $flags .= 'blob ';    }    if ($f & MYSQLI_MULTIPLE_KEY_FLAG) {        $flags .= 'multiple_key ';    }    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique_key ';    }    if ($f & MYSQLI_PRI_KEY_FLAG) {        $flags .= 'primary_key ';    }    if ($f & MYSQLI_NOT_NULL_FLAG) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Executes a query as controluser if possible, otherwise as normal user * * @param string  $sql        the query to execute * @param boolean $show_error whether to display SQL error messages or not * @param int     $options    query options * * @return  integer   the result set, or false if no result set * * @access  public * */function PMA_query_as_controluser($sql, $show_error = true, $options = 0){    // Avoid caching of the number of rows affected; for example, this function    // is called for tracking purposes but we want to display the correct number    // of rows affected by the original query, not by the query generated for    // tracking.    $cache_affected_rows = false;    if ($show_error) {        $result = PMA_DBI_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } else {        $result = @PMA_DBI_try_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } // end if... else...    if ($result) {        return $result;    } else {        return false;    }} // end of the "PMA_query_as_controluser()" function/** * @param bool $verbose whether to print diagnostic info * * @return  array   $cfgRelation */function PMA_getRelationsParam($verbose = false){    if (empty($_SESSION['relation'][$GLOBALS['server']])) {        $_SESSION['relation'][$GLOBALS['server']] = PMA__getRelationsParam();    }    // just for BC but needs to be before PMA_printRelationsParamDiagnostic()    // which uses it    $GLOBALS['cfgRelation'] = $_SESSION['relation'][$GLOBALS['server']];    if ($verbose) {        PMA_printRelationsParamDiagnostic($_SESSION['relation'][$GLOBALS['server']]);    }    return $_SESSION['relation'][$GLOBALS['server']];}/** * prints out diagnostic info for pma relation feature * * @param array $cfgRelation * * @return nothing */function PMA_printRelationsParamDiagnostic($cfgRelation){    $messages['error'] = '<font color="red"><strong>' . __('not OK')                   . '</strong></font> [ <a href="Documentation.html#%s" target="documentation">'                   . __('Documentation') . '</a> ]';    $messages['ok'] = '<font color="green"><strong>' . __('OK') . '</strong></font>';    $messages['enabled']  = '<font color="green">' . __('Enabled') . '</font>';    $messages['disabled'] = '<font color="red">'   . __('Disabled') . '</font>';    if (false === $GLOBALS['cfg']['Server']['pmadb']) {        echo 'PMA Database ... '             . sprintf($messages['error'], 'pmadb')             . '<br />' . "\n"             . __('General relation features')             . ' <font color="green">' . __('Disabled')             . '</font>' . "\n";        return;    }    echo '<table>' . "\n";    PMA_printDiagMessageForParameter('pmadb', $GLOBALS['cfg']['Server']['pmadb'], $messages, 'pmadb');    PMA_printDiagMessageForParameter('relation', isset($cfgRelation['relation']), $messages, 'relation');    PMA_printDiagMessageForFeature(__('General relation features'), 'relwork', $messages);    PMA_printDiagMessageForParameter('table_info', isset($cfgRelation['table_info']), $messages, 'table_info');    PMA_printDiagMessageForFeature(__('Display Features'), 'displaywork', $messages);    PMA_printDiagMessageForParameter('table_coords', isset($cfgRelation['table_coords']), $messages, 'table_coords');    PMA_printDiagMessageForParameter('pdf_pages', isset($cfgRelation['pdf_pages']), $messages, 'table_coords');    PMA_printDiagMessageForFeature(__('Creation of PDFs'), 'pdfwork', $messages);    PMA_printDiagMessageForParameter('column_info', isset($cfgRelation['column_info']), $messages, 'col_com');    PMA_printDiagMessageForFeature(__('Displaying Column Comments'), 'commwork', $messages, false);    PMA_printDiagMessageForFeature(__('Browser transformation'), 'mimework', $messages);    if ($cfgRelation['commwork'] && ! $cfgRelation['mimework']) {        echo '<tr><td colspan=2 align="left">' . __('Please see the documentation on how to update your column_comments table') . '</td></tr>' . "\n";    }    PMA_printDiagMessageForParameter('bookmarktable', isset($cfgRelation['bookmark']), $messages, 'bookmark');    PMA_printDiagMessageForFeature(__('Bookmarked SQL query'), 'bookmarkwork', $messages);    PMA_printDiagMessageForParameter('history', isset($cfgRelation['history']), $messages, 'history');    PMA_printDiagMessageForFeature(__('SQL history'), 'historywork', $messages);    PMA_printDiagMessageForParameter('designer_coords', isset($cfgRelation['designer_coords']), $messages, 'designer_coords');    PMA_printDiagMessageForFeature(__('Designer'), 'designerwork', $messages);    PMA_printDiagMessageForParameter('recent', isset($cfgRelation['recent']), $messages, 'recent');    PMA_printDiagMessageForFeature(__('Persistent recently used tables'), 'recentwork', $messages);    PMA_printDiagMessageForParameter('table_uiprefs', isset($cfgRelation['table_uiprefs']), $messages, 'table_uiprefs');    PMA_printDiagMessageForFeature(__('Persistent tables\' UI preferences'), 'uiprefswork', $messages);    PMA_printDiagMessageForParameter('tracking', isset($cfgRelation['tracking']), $messages, 'tracking');    PMA_printDiagMessageForFeature(__('Tracking'), 'trackingwork', $messages);    PMA_printDiagMessageForParameter('userconfig', isset($cfgRelation['userconfig']), $messages, 'userconfig');    PMA_printDiagMessageForFeature(__('User preferences'), 'userconfigwork', $messages);    echo '</table>' . "\n";    echo '<p>' . __('Quick steps to setup advanced features:') . '</p>';    echo '<ul>';    echo '<li>' . __('Create the needed tables with the <code>examples/create_tables.sql</code>.') . ' ' . PMA_showDocu('linked-tables') . '</li>';    echo '<li>' . __('Create a pma user and give access to these tables.') . ' ' . PMA_showDocu('pmausr') . '</li>';    echo '<li>' . __('Enable advanced features in configuration file (<code>config.inc.php</code>), for example by starting from <code>config.sample.inc.php</code>.') . ' ' . PMA_showDocu('quick_install') . '</li>';    echo '<li>' . __('Re-login to phpMyAdmin to load the updated configuration file.') . '</li>';    echo '</ul>';}/** * prints out one diagnostic message for a feature * * @param string  $feature_name       feature name in a message string * @param string  $relation_parameter the $GLOBALS['cfgRelation'] parameter to check * @param array   $messages           utility messages * @param boolean $skip_line          whether to skip a line after the message * * @return nothing */function PMA_printDiagMessageForFeature($feature_name, $relation_parameter, $messages, $skip_line=true){    echo '    <tr><td colspan=2 align="right">' . $feature_name . ': '         . ($GLOBALS['cfgRelation'][$relation_parameter] ? $messages['enabled'] : $messages['disabled'])         . '</td></tr>' . "\n";    if ($skip_line) {        echo '    <tr><td>&nbsp;</td></tr>' . "\n";    }}/** * prints out one diagnostic message for a configuration parameter * * @param string  $parameter              config parameter name to display * @param boolean $relation_parameter_set whether this parameter is set * @param array   $messages               utility messages * @param string  $doc_anchor             anchor in Documentation.html * * @return nothing */function PMA_printDiagMessageForParameter($parameter, $relation_parameter_set, $messages, $doc_anchor){    echo '    <tr><th align="left">';    echo '$cfg[\'Servers\'][$i][\'' . $parameter . '\']  ... </th><td align="right">';    echo ($relation_parameter_set ? $messages['ok'] : sprintf($messages['error'], $doc_anchor)) . '</td></tr>' . "\n";}/** * Defines the relation parameters for the current user * just a copy of the functions used for relations ;-) * but added some stuff to check what will work * * @access  protected * @return  array    the relation parameters for the current user */function PMA__getRelationsParam(){    $cfgRelation                = array();    $cfgRelation['relwork']     = false;    $cfgRelation['displaywork'] = false;    $cfgRelation['bookmarkwork']= false;    $cfgRelation['pdfwork']     = false;    $cfgRelation['commwork']    = false;    $cfgRelation['mimework']    = false;    $cfgRelation['historywork'] = false;    $cfgRelation['recentwork']  = false;    $cfgRelation['uiprefswork'] = false;    $cfgRelation['trackingwork'] = false;    $cfgRelation['designerwork'] = false;    $cfgRelation['userconfigwork'] = false;    $cfgRelation['allworks']    = false;    $cfgRelation['user']        = null;    $cfgRelation['db']          = null;    if ($GLOBALS['server'] == 0 || empty($GLOBALS['cfg']['Server']['pmadb'])        || ! PMA_DBI_select_db($GLOBALS['cfg']['Server']['pmadb'], $GLOBALS['controllink'])    ) {        // No server selected -> no bookmark table        // we return the array with the falses in it,        // to avoid some 'Unitialized string offset' errors later        $GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    $cfgRelation['user']  = $GLOBALS['cfg']['Server']['user'];    $cfgRelation['db']    = $GLOBALS['cfg']['Server']['pmadb'];    //  Now I just check if all tables that i need are present so I can for    //  example enable relations but not pdf...    //  I was thinking of checking if they have all required columns but I    //  fear it might be too slow    $tab_query = 'SHOW TABLES FROM ' . PMA_backquote($GLOBALS['cfg']['Server']['pmadb']);    $tab_rs    = PMA_query_as_controluser($tab_query, false, PMA_DBI_QUERY_STORE);    if (! $tab_rs) {        // query failed ... ?        //$GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    while ($curr_table = @PMA_DBI_fetch_row($tab_rs)) {        if ($curr_table[0] == $GLOBALS['cfg']['Server']['bookmarktable']) {            $cfgRelation['bookmark']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['relation']) {            $cfgRelation['relation']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_info']) {            $cfgRelation['table_info']      = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_coords']) {            $cfgRelation['table_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['designer_coords']) {            $cfgRelation['designer_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['column_info']) {            $cfgRelation['column_info'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['pdf_pages']) {            $cfgRelation['pdf_pages']       = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['history']) {            $cfgRelation['history'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['recent']) {            $cfgRelation['recent'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_uiprefs']) {            $cfgRelation['table_uiprefs'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['tracking']) {            $cfgRelation['tracking'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['userconfig']) {            $cfgRelation['userconfig'] = $curr_table[0];        }    } // end while    PMA_DBI_free_result($tab_rs);    if (isset($cfgRelation['relation'])) {        $cfgRelation['relwork']         = true;        if (isset($cfgRelation['table_info'])) {                $cfgRelation['displaywork'] = true;        }    }    if (isset($cfgRelation['table_coords']) && isset($cfgRelation['pdf_pages'])) {        $cfgRelation['pdfwork']     = true;    }    if (isset($cfgRelation['column_info'])) {        $cfgRelation['commwork']    = true;        if ($GLOBALS['cfg']['Server']['verbose_check']) {            $mime_query  = PMA_DBI_get_columns_sql($cfgRelation['db'], $cfgRelation['column_info']);            $mime_rs     = PMA_query_as_controluser($mime_query, false);            $mime_field_mimetype                = false;            $mime_field_transformation          = false;            $mime_field_transformation_options  = false;            while ($curr_mime_field = @PMA_DBI_fetch_row($mime_rs)) {                if ($curr_mime_field[0] == 'mimetype') {                    $mime_field_mimetype               = true;                } elseif ($curr_mime_field[0] == 'transformation') {                    $mime_field_transformation         = true;                } elseif ($curr_mime_field[0] == 'transformation_options') {                    $mime_field_transformation_options = true;                }            }            PMA_DBI_free_result($mime_rs);            if ($mime_field_mimetype                && $mime_field_transformation                && $mime_field_transformation_options            ) {                $cfgRelation['mimework'] = true;            }        } else {            $cfgRelation['mimework'] = true;        }    }    if (isset($cfgRelation['history'])) {        $cfgRelation['historywork']     = true;    }    if (isset($cfgRelation['recent'])) {        $cfgRelation['recentwork']      = true;    }    if (isset($cfgRelation['table_uiprefs'])) {        $cfgRelation['uiprefswork']     = true;    }    if (isset($cfgRelation['tracking'])) {        $cfgRelation['trackingwork']     = true;    }    if (isset($cfgRelation['userconfig'])) {        $cfgRelation['userconfigwork']   = true;    }    // we do not absolutely need that the internal relations or the PDF    // schema feature be activated    if (isset($cfgRelation['designer_coords'])) {        $cfgRelation['designerwork']     = true;    }    if (isset($cfgRelation['bookmark'])) {        $cfgRelation['bookmarkwork']     = true;    }    if ($cfgRelation['relwork'] && $cfgRelation['displaywork']        && $cfgRelation['pdfwork'] && $cfgRelation['commwork']        && $cfgRelation['mimework'] && $cfgRelation['historywork']        && $cfgRelation['recentwork'] && $cfgRelation['uiprefswork']        && $cfgRelation['trackingwork'] && $cfgRelation['userconfigwork']        && $cfgRelation['bookmarkwork'] && $cfgRelation['designerwork']    ) {        $cfgRelation['allworks'] = true;    }    return $cfgRelation;} // end of the 'PMA_getRelationsParam()' function/** * Gets all Relations to foreign tables for a given table or * optionally a given column in a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $column the name of the column to check for * @param string $source the source for foreign key information * * @return  array    db,table,column * * @access  public */function PMA_getForeigners($db, $table, $column = '', $source = 'both'){    $cfgRelation = PMA_getRelationsParam();    $foreign = array();    if ($cfgRelation['relwork'] && ($source == 'both' || $source == 'internal')) {        $rel_query = '             SELECT `master_field`,                    `foreign_db`,                    `foreign_table`,                    `foreign_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '              WHERE `master_db`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `master_table` = \'' . PMA_sqlAddSlashes($table) . '\' ';        if (strlen($column)) {            $rel_query .= ' AND `master_field` = \'' . PMA_sqlAddSlashes($column) . '\'';        }        $foreign = PMA_DBI_fetch_result($rel_query, 'master_field', null, $GLOBALS['controllink']);    }    if (($source == 'both' || $source == 'foreign') && strlen($table)) {        $show_create_table_query = 'SHOW CREATE TABLE '            . PMA_backquote($db) . '.' . PMA_backquote($table);        $show_create_table = PMA_DBI_fetch_value($show_create_table_query, 0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));        foreach ($analyzed_sql[0]['foreign_keys'] as $one_key) {            // The analyzer may return more than one column name in the            // index list or the ref_index_list; if this happens,            // the current logic just discards the whole index; having            // more than one index field is currently unsupported (see FAQ 3.6)            if (count($one_key['index_list']) == 1) {                foreach ($one_key['index_list'] as $i => $field) {                    // If a foreign key is defined in the 'internal' source (pmadb)                    // and as a native foreign key, we won't get it twice                    // if $source='both' because we use $field as key                    // The parser looks for a CONSTRAINT clause just before                    // the FOREIGN KEY clause. It finds it (as output from                    // SHOW CREATE TABLE) in MySQL 4.0.13, but not in older                    // versions like 3.23.58.                    // In those cases, the FOREIGN KEY parsing will put numbers                    // like -1, 0, 1... instead of the constraint number.                    if (isset($one_key['constraint'])) {                        $foreign[$field]['constraint'] = $one_key['constraint'];                    }                    if (isset($one_key['ref_db_name'])) {                        $foreign[$field]['foreign_db'] = $one_key['ref_db_name'];                    } else {                        $foreign[$field]['foreign_db'] = $db;                    }                    $foreign[$field]['foreign_table'] = $one_key['ref_table_name'];                    $foreign[$field]['foreign_field'] = $one_key['ref_index_list'][$i];                    if (isset($one_key['on_delete'])) {                        $foreign[$field]['on_delete'] = $one_key['on_delete'];                    }                    if (isset($one_key['on_update'])) {                        $foreign[$field]['on_update'] = $one_key['on_update'];                    }                }            }        }    }    /**     * Emulating relations for some information_schema and data_dictionary tables     */    $is_information_schema = strtolower($db) == 'information_schema';    $is_data_dictionary = PMA_DRIZZLE && strtolower($db) == 'data_dictionary';    if (($is_information_schema || $is_data_dictionary) && ($source == 'internal' || $source == 'both')) {        if ($is_information_schema) {            $relations_key = 'information_schema_relations';            include_once './libraries/information_schema_relations.lib.php';        } else {            $relations_key = 'data_dictionary_relations';            include_once './libraries/data_dictionary_relations.lib.php';        }        if (isset($GLOBALS[$relations_key][$table])) {            foreach ($GLOBALS[$relations_key][$table] as $field => $relations) {                if ((! strlen($column) || $column == $field)                    && (! isset($foreign[$field]) || ! strlen($foreign[$field]))                ) {                    $foreign[$field] = $relations;                }            }        }    }    return $foreign;} // end of the 'PMA_getForeigners()' function/** * Gets the display field of a table * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  string   field name * * @access  public */function PMA_getDisplayField($db, $table){    $cfgRelation = PMA_getRelationsParam();    /**     * Try to fetch the display field from DB.     */    if ($cfgRelation['displaywork']) {        $disp_query = '             SELECT `display_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info']) . '              WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'';        $row = PMA_DBI_fetch_single_row($disp_query, 'ASSOC', $GLOBALS['controllink']);        if (isset($row['display_field'])) {            return $row['display_field'];        }    }    /**     * Emulating the display field for some information_schema tables.     */    if ($db == 'information_schema') {        switch ($table) {        case 'CHARACTER_SETS':            return 'DESCRIPTION';        case 'TABLES':            return 'TABLE_COMMENT';        }    }    /**     * No Luck...     */    return false;} // end of the 'PMA_getDisplayField()' function/** * Gets the comments for all rows of a table or the db itself * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  array    [field_name] = comment * * @access  public */function PMA_getComments($db, $table = ''){    $comments = array();    if ($table != '') {        // MySQL native column comments        $fields = PMA_DBI_get_columns($db, $table, null, true);        if ($fields) {            foreach ($fields as $field) {                if (! empty($field['Comment'])) {                    $comments[$field['Field']] = $field['Comment'];                }            }        }    } else {        $comments[] = PMA_getDbComment($db);    }    return $comments;} // end of the 'PMA_getComments()' function/** * Gets the comment for a db * * @param string $db the name of the db to check for * * @return  string   comment * * @access  public */function PMA_getDbComment($db){    $cfgRelation = PMA_getRelationsParam();    $comment = '';    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE db_name     = '" . PMA_sqlAddSlashes($db) . "'                AND table_name  = ''                AND column_name = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            $row = PMA_DBI_fetch_assoc($com_rs);            $comment = $row['comment'];        }        PMA_DBI_free_result($com_rs);    }    return $comment;} // end of the 'PMA_getDbComment()' function/** * Gets the comment for a db * * @access  public * * @return  string   comment */function PMA_getDbComments(){    $cfgRelation = PMA_getRelationsParam();    $comments = array();    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `db_name`, `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE `column_name` = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            while ($row = PMA_DBI_fetch_assoc($com_rs)) {                $comments[$row['db_name']] = $row['comment'];            }        }        PMA_DBI_free_result($com_rs);    }    return $comments;} // end of the 'PMA_getDbComments()' function/** * Set a database comment to a certain value. * * @param string $db      the name of the db * @param string $comment the value of the column * * @return  boolean  true, if comment-query was made. * * @access  public */function PMA_setDbComment($db, $comment = ''){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    if (strlen($comment)) {        $upd_query = "             INSERT INTO                    " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "                    (`db_name`, `table_name`, `column_name`, `comment`)             VALUES (                   '" . PMA_sqlAddSlashes($db) . "',                   '',                   '(db_comment)',                   '" . PMA_sqlAddSlashes($comment) . "')             ON DUPLICATE KEY UPDATE                `comment` = '" . PMA_sqlAddSlashes($comment) . "'";    } else {        $upd_query = '             DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '              WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name`  = \'\'                AND `column_name` = \'(db_comment)\'';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    }    return false;} // end of 'PMA_setDbComment()' function/** * Set a SQL history entry * * @param string $db       the name of the db * @param string $table    the name of the table * @param string $username the username * @param string $sqlquery the sql query * * @return nothing * * @access  public */function PMA_setHistory($db, $table, $username, $sqlquery){    if (strlen($sqlquery) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        return;    }    $cfgRelation = PMA_getRelationsParam();    if (! isset($_SESSION['sql_history'])) {        $_SESSION['sql_history'] = array();    }    $key = md5($sqlquery . $db . $table);    if (isset($_SESSION['sql_history'][$key])) {        unset($_SESSION['sql_history'][$key]);    }    $_SESSION['sql_history'][$key] = array(        'db' => $db,        'table' => $table,        'sqlquery' => $sqlquery,    );    if (count($_SESSION['sql_history']) > $GLOBALS['cfg']['QueryHistoryMax']) {        // history should not exceed a maximum count        array_shift($_SESSION['sql_history']);    }    if (! $cfgRelation['historywork'] || ! $GLOBALS['cfg']['QueryHistoryDB']) {        return;    }    PMA_query_as_controluser(        'INSERT INTO                ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              (`username`,                `db`,                `table`,                `timevalue`,                `sqlquery`)        VALUES              (\'' . PMA_sqlAddSlashes($username) . '\',               \'' . PMA_sqlAddSlashes($db) . '\',               \'' . PMA_sqlAddSlashes($table) . '\',               NOW(),               \'' . PMA_sqlAddSlashes($sqlquery) . '\')'    );} // end of 'PMA_setHistory()' function/** * Gets a SQL history entry * * @param string $username the username * * @return  array    list of history items * * @access  public */function PMA_getHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['historywork']) {        return false;    }    $hist_query = '         SELECT `db`,                `table`,                `sqlquery`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `id` DESC';    return PMA_DBI_fetch_result($hist_query, null, null, $GLOBALS['controllink']);} // end of 'PMA_getHistory()' function/** * purges SQL history * * deletes entries that exceeds $cfg['QueryHistoryMax'], oldest first, for the * given user * * @param string $username the username * * @return nothing * * @access  public */function PMA_purgeHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $GLOBALS['cfg']['QueryHistoryDB'] || ! $cfgRelation['historywork']) {        return;    }    if (! $cfgRelation['historywork']) {        return;    }    $search_query = '         SELECT `timevalue`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `timevalue` DESC          LIMIT ' . $GLOBALS['cfg']['QueryHistoryMax'] . ', 1';    if ($max_time = PMA_DBI_fetch_value($search_query, 0, 0, $GLOBALS['controllink'])) {        PMA_query_as_controluser(            'DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'                AND `timevalue` <= \'' . $max_time . '\''        );    }} // end of 'PMA_purgeHistory()' function/** * Prepares the dropdown for one mode * * @param array  $foreign the keys and values for foreigns * @param string $data    the current data of the dropdown * @param string $mode    the needed mode * * @return  array   the <option value=""><option>s * * @access  protected */function PMA__foreignDropdownBuild($foreign, $data, $mode){    $reloptions = array();    // id-only is a special mode used when no foreign display column    // is available    if ($mode == 'id-content' || $mode == 'id-only') {        // sort for id-content        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($foreign, 'strnatcasecmp');        } else {            ksort($foreign);        }    } elseif ($mode == 'content-id') {        // sort for content-id        if ($GLOBALS['cfg']['NaturalOrder']) {            natcasesort($foreign);        } else {            asort($foreign);        }    }    foreach ($foreign as $key => $value) {        if (PMA_strlen($value) <= $GLOBALS['cfg']['LimitChars']) {            $vtitle = '';            $value  = htmlspecialchars($value);        } else {            $vtitle  = htmlspecialchars($value);            $value  = htmlspecialchars(substr($value, 0, $GLOBALS['cfg']['LimitChars']) . '...');        }        $reloption = '<option value="' . htmlspecialchars($key) . '"';        if ($vtitle != '') {            $reloption .= ' title="' . $vtitle . '"';        }        if ((string) $key == (string) $data) {            $reloption .= ' selected="selected"';        }        if ($mode == 'content-id') {            $reloptions[] = $reloption . '>' . $value . '&nbsp;-&nbsp;' . htmlspecialchars($key) .  '</option>';        } elseif ($mode == 'id-content') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) .  '&nbsp;-&nbsp;' . $value . '</option>';        } elseif ($mode == 'id-only') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) . '</option>';        }    } // end foreach    return $reloptions;} // end of 'PMA__foreignDropdownBuild' function/** * Outputs dropdown with values of foreign fields * * @param array  $disp_row        array of the displayed row * @param string $foreign_field   the foreign field * @param string $foreign_display the foreign field to display * @param string $data            the current data of the dropdown (field in row) * @param int    $max             maximum number of items in the dropdown * * @return  string   the <option value=""><option>s * * @access  public */function PMA_foreignDropdown($disp_row, $foreign_field, $foreign_display, $data,    $max = null){    if (null === $max) {        $max = $GLOBALS['cfg']['ForeignKeyMaxLimit'];    }    $foreign = array();    // collect the data    foreach ($disp_row as $relrow) {        $key   = $relrow[$foreign_field];        // if the display field has been defined for this foreign table        if ($foreign_display) {            $value  = $relrow[$foreign_display];        } else {            $value = '';        } // end if ($foreign_display)        $foreign[$key] = $value;    } // end foreach    // put the dropdown sections in correct order    $top = array();    $bottom = array();    if ($foreign_display) {        if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'], 'array')) {            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][0])) {                $top = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][0]                );            }            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][1])) {                $bottom = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][1]                );            }        } else {            $top = PMA__foreignDropdownBuild($foreign, $data, 'id-content');            $bottom = PMA__foreignDropdownBuild($foreign, $data, 'content-id');        }    } else {        $top = PMA__foreignDropdownBuild($foreign, $data, 'id-only');    }    // beginning of dropdown    $ret = '<option value="">&nbsp;</option>';    $top_count = count($top);    if ($max == -1 || $top_count < $max) {        $ret .= implode('', $top);        if ($foreign_display && $top_count > 0) {            // this empty option is to visually mark the beginning of the            // second series of values (bottom)            $ret .= '<option value="">&nbsp;</option>';        }    }    if ($foreign_display) {        $ret .= implode('', $bottom);    }    return $ret;} // end of 'PMA_foreignDropdown()' function/** * Gets foreign keys in preparation for a drop-down selector * * @param array  $foreigners     array of the foreign keys * @param string $field          the foreign field name * @param bool   $override_total whether to override the total * @param string $foreign_filter a possible filter * @param string $foreign_limit  a possible LIMIT clause * * @return  array    data about the foreign keys * * @access  public */function PMA_getForeignData($foreigners, $field, $override_total, $foreign_filter, $foreign_limit){    // we always show the foreign field in the drop-down; if a display    // field is defined, we show it besides the foreign field    $foreign_link = false;    if ($foreigners && isset($foreigners[$field])) {        $foreigner       = $foreigners[$field];        $foreign_db      = $foreigner['foreign_db'];        $foreign_table   = $foreigner['foreign_table'];        $foreign_field   = $foreigner['foreign_field'];        // Count number of rows in the foreign table. Currently we do        // not use a drop-down if more than 200 rows in the foreign table,        // for speed reasons and because we need a better interface for this.        //        // We could also do the SELECT anyway, with a LIMIT, and ensure that        // the current value of the field is one of the choices.        $the_total   = PMA_Table::countRecords($foreign_db, $foreign_table);        if ($override_total == true || $the_total < $GLOBALS['cfg']['ForeignKeyMaxLimit']) {            // foreign_display can be false if no display field defined:            $foreign_display = PMA_getDisplayField($foreign_db, $foreign_table);            $f_query_main = 'SELECT ' . PMA_backquote($foreign_field)                        . (($foreign_display == false) ? '' : ', ' . PMA_backquote($foreign_display));            $f_query_from = ' FROM ' . PMA_backquote($foreign_db) . '.' . PMA_backquote($foreign_table);            $f_query_filter = empty($foreign_filter) ? '' : ' WHERE ' . PMA_backquote($foreign_field)                            . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                            . (($foreign_display == false) ? '' : ' OR ' . PMA_backquote($foreign_display)                                . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                                );            $f_query_order = ($foreign_display == false) ? '' :' ORDER BY ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($foreign_display);            $f_query_limit = isset($foreign_limit) ? $foreign_limit : '';            if (!empty($foreign_filter)) {                $res = PMA_DBI_query('SELECT COUNT(*)' . $f_query_from . $f_query_filter);                if ($res) {                    $the_total = PMA_DBI_fetch_value($res);                    @PMA_DBI_free_result($res);                } else {                    $the_total = 0;                }            }            $disp  = PMA_DBI_query($f_query_main . $f_query_from . $f_query_filter . $f_query_order . $f_query_limit);            if ($disp && PMA_DBI_num_rows($disp) > 0) {                // If a resultset has been created, pre-cache it in the $disp_row array                // This helps us from not needing to use mysql_data_seek by accessing a pre-cached                // PHP array. Usually those resultsets are not that big, so a performance hit should                // not be expected.                $disp_row = array();                while ($single_disp_row = @PMA_DBI_fetch_assoc($disp)) {                    $disp_row[] = $single_disp_row;                }                @PMA_DBI_free_result($disp);            }        } else {            $disp_row = null;            $foreign_link = true;        }    }  // end if $foreigners    $foreignData['foreign_link'] = $foreign_link;    $foreignData['the_total'] = isset($the_total) ? $the_total : null;    $foreignData['foreign_display'] = isset($foreign_display) ? $foreign_display : null;    $foreignData['disp_row'] = isset($disp_row) ? $disp_row : null;    $foreignData['foreign_field'] = isset($foreign_field) ? $foreign_field : null;    return $foreignData;} // end of 'PMA_getForeignData()' function/** * Finds all related tables * * @param string $from whether to go from master to foreign or vice versa * * @return  boolean  always true * * @global  array    $tab_left the list of tables that we still couldn't connect * @global  array    $tab_know the list of allready connected tables * @global  string   $fromclause * * @access  private */function PMA_getRelatives($from){    global $tab_left, $tab_know, $fromclause;    if ($from == 'master') {        $to    = 'foreign';    } else {        $to    = 'master';    }    $in_know = '(\'' . implode('\', \'', $tab_know) . '\')';    $in_left = '(\'' . implode('\', \'', $tab_left) . '\')';    $rel_query = 'SELECT *'               . '  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db'])               .       '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])               . ' WHERE ' . $from . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $to   . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $from . '_table IN ' . $in_know               . '   AND ' . $to   . '_table IN ' . $in_left;    $relations = @PMA_DBI_query($rel_query, $GLOBALS['controllink']);    while ($row = PMA_DBI_fetch_assoc($relations)) {        $found_table                = $row[$to . '_table'];        if (isset($tab_left[$found_table])) {            $fromclause                .= "\n" . ' LEFT JOIN '                . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($row[$to . '_table']) . ' ON '                . PMA_backquote($row[$from . '_table']) . '.'                . PMA_backquote($row[$from . '_field']) . ' = '                . PMA_backquote($row[$to . '_table']) . '.'                . PMA_backquote($row[$to . '_field']) . ' ';            $tab_know[$found_table] = $found_table;            unset($tab_left[$found_table]);        }    } // end while    return true;} // end of the "PMA_getRelatives()" function/** * Rename a field in relation tables * * usually called after a field in a table was renamed in tbl_alter.php * * @param string $db       databse name * @param string $table    table name * @param string $field    old field name * @param string $new_name new field name * * @return nothing */function PMA_REL_renameField($db, $table, $field, $new_name){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['displaywork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                      . '   SET display_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE db_name       = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND table_name    = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND display_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    }    if ($cfgRelation['relwork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET master_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE master_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND master_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET foreign_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE foreign_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND foreign_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    } // end if relwork}/** * Create a PDF page * * @param string $newpage     name of the new PDF page * @param array  $cfgRelation * @param string $db          database name * * @return string   $pdf_page_number */function PMA_REL_create_page($newpage, $cfgRelation, $db){    if (! isset($newpage) || $newpage == '') {        $newpage = __('no description');    }    $ins_query   = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                 . ' (db_name, page_descr)'                 . ' VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \'' . PMA_sqlAddSlashes($newpage) . '\')';    PMA_query_as_controluser($ins_query, false);    return PMA_DBI_insert_id(isset($GLOBALS['controllink']) ? $GLOBALS['controllink'] : '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run cookie based authentication. * * @package PhpMyAdmin-Auth-Cookie */if (! defined('PHPMYADMIN')) {    exit;}/** * Swekey authentication functions. */require './libraries/auth/swekey/swekey.auth.lib.php';if (function_exists('mcrypt_encrypt')) {    /**     * Uses faster mcrypt library if available     * (as this is not called from anywhere else, put the code in-line     *  for faster execution)     */    /**     * Initialization     * Store the initialization vector because it will be needed for     * further decryption. I don't think necessary to have one iv     * per server so I don't put the server number in the cookie name.     */    if (empty($_COOKIE['pma_mcrypt_iv']) || false === ($iv = base64_decode($_COOKIE['pma_mcrypt_iv'], true))) {        srand((double) microtime() * 1000000);        $td = mcrypt_module_open(MCRYPT_BLOWFISH, '', MCRYPT_MODE_CBC, '');        if ($td === false) {            die(__('Failed to use Blowfish from mcrypt!'));        }        $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);        $GLOBALS['PMA_Config']->setCookie('pma_mcrypt_iv', base64_encode($iv));    }    /**     * Encryption using blowfish algorithm (mcrypt)     *     * @param   string  original data     * @param   string  the secret     *     * @return  string  the encrypted result     *     * @access  public     *     */    function PMA_blowfish_encrypt($data, $secret)    {        global $iv;        return base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $secret, $data, MCRYPT_MODE_CBC, $iv));    }    /**     * Decryption using blowfish algorithm (mcrypt)     *     * @param   string  encrypted data     * @param   string  the secret     *     * @return  string  original data     *     * @access  public     *     */    function PMA_blowfish_decrypt($encdata, $secret)    {        global $iv;        return trim(mcrypt_decrypt(MCRYPT_BLOWFISH, $secret, base64_decode($encdata), MCRYPT_MODE_CBC, $iv));    }} else {    include_once './libraries/blowfish.php';}/** * Returns blowfish secret or generates one if needed. * * @access  public * @return string */function PMA_get_blowfish_secret(){    if (empty($GLOBALS['cfg']['blowfish_secret'])) {        if (empty($_SESSION['auto_blowfish_secret'])) {            // this returns 23 characters            $_SESSION['auto_blowfish_secret'] = uniqid('', true);        }        return $_SESSION['auto_blowfish_secret'];    } else {        // apply md5() to work around too long secrets (returns 32 characters)        return md5($GLOBALS['cfg']['blowfish_secret']);    }}/** * Displays authentication form * * this function MUST exit/quit the application * * @global  string    the last connection error * * @access  public */function PMA_auth(){    global $conn_error;    /* Perform logout to custom URL */    if (! empty($_REQUEST['old_usr'])     && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    /* No recall if blowfish secret is not configured as it would produce garbage */    if ($GLOBALS['cfg']['LoginCookieRecall'] && !empty($GLOBALS['cfg']['blowfish_secret'])) {        $default_user   = $GLOBALS['PHP_AUTH_USER'];        $default_server = $GLOBALS['pma_auth_server'];        $autocomplete   = '';    } else {        $default_user   = '';        $default_server = '';        // skip the IE autocomplete feature.        $autocomplete   = ' autocomplete="off"';    }    $cell_align = ($GLOBALS['text_dir'] == 'ltr') ? 'left' : 'right';    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header; do not show here the PMA version to improve security */    $page_title = 'phpMyAdmin ';    include './libraries/header_meta_style.inc.php';    // if $page_title is set, this script uses it as the title:    include './libraries/header_scripts.inc.php';    ?><script type="text/javascript">//<![CDATA[// show login form in top frameif (top != self) {    window.top.location.href=location;}//]]></script></head><body class="loginform">    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><div class="container"><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/'); ?>" target="_blank" class="logo"><?php    $logo_image = $GLOBALS['pmaThemeImage'] . 'logo_right.png';    if (@file_exists($logo_image)) {        echo '<img src="' . $logo_image . '" id="imLogo" name="imLogo" alt="phpMyAdmin" border="0" />';    } else {        echo '<img name="imLogo" id="imLogo" src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo.png' . '" '           . 'border="0" width="88" height="31" alt="phpMyAdmin" />';    }    ?></a><h1>    <?php    echo sprintf(__('Welcome to %s'),        '<bdo dir="ltr" xml:lang="en">' . $page_title . '</bdo>');    ?></h1>    <?php    // Show error message    if (! empty($conn_error)) {        PMA_Message::rawError($conn_error)->display();    }    // Displays the languages form    if (empty($GLOBALS['cfg']['Lang'])) {        include_once './libraries/display_select_lang.lib.php';        // use fieldset, don't show doc link        PMA_select_language(true, false);    }    ?><br /><!-- Login form --><form method="post" action="index.php" name="login_form"<?php echo $autocomplete; ?> target="_top" class="login">    <fieldset>    <legend><?php    echo __('Log in');    echo '<a href="./Documentation.html" target="documentation" ' .        'title="' . __('phpMyAdmin documentation') . '"> ';    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo PMA_getImage('b_help.png', __('phpMyAdmin documentation'));    } else {        echo '(*)';    }    echo '</a>';?></legend><?php if ($GLOBALS['cfg']['AllowArbitraryServer']) { ?>        <div class="item">            <label for="input_servername" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>"><?php echo __('Server:'); ?></label>            <input type="text" name="pma_servername" id="input_servername" value="<?php echo htmlspecialchars($default_server); ?>" size="24" class="textfield" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>" />        </div><?php } ?>        <div class="item">            <label for="input_username"><?php echo __('Username:'); ?></label>            <input type="text" name="pma_username" id="input_username" value="<?php echo htmlspecialchars($default_user); ?>" size="24" class="textfield"/>        </div>        <div class="item">            <label for="input_password"><?php echo __('Password:'); ?></label>            <input type="password" name="pma_password" id="input_password" value="" size="24" class="textfield" />        </div>    <?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        ?>        <div class="item">            <label for="select_server"><?php echo __('Server Choice'); ?>:</label>            <select name="server" id="select_server"        <?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            echo ' onchange="document.forms[\'login_form\'].elements[\'pma_servername\'].value = \'\'" ';        }        echo '>';        include_once './libraries/select_server.lib.php';        PMA_select_server(false, false);        echo '</select></div>';    } else {        echo '    <input type="hidden" name="server" value="' . $GLOBALS['server'] . '" />';    } // end if (server choice)    ?>    </fieldset>    <fieldset class="tblFooters">        <input value="<?php echo __('Go'); ?>" type="submit" id="input_go" />    <?php    $_form_params = array();    if (! empty($GLOBALS['target'])) {        $_form_params['target'] = $GLOBALS['target'];    }    if (! empty($GLOBALS['db'])) {        $_form_params['db'] = $GLOBALS['db'];    }    if (! empty($GLOBALS['table'])) {        $_form_params['table'] = $GLOBALS['table'];    }    // do not generate a "server" hidden field as we want the "server"    // drop-down to have priority    echo PMA_generate_common_hidden_inputs($_form_params, '', 0, 'server');    ?>    </fieldset></form>    <?php    // BEGIN Swekey Integration    Swekey_login('input_username', 'input_go');    // END Swekey Integration    // show the "Cookies required" message only if cookies are disabled    // (we previously tried to set some cookies)    if (empty($_COOKIE)) {        trigger_error(__('Cookies must be enabled past this point.'), E_USER_NOTICE);    }    if ($GLOBALS['error_handler']->hasDisplayErrors()) {        echo '<div>';        $GLOBALS['error_handler']->dispErrors();        echo '</div>';    }    ?></div>    <?php    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * this function DOES NOT check authentication - it just checks/provides * authentication credentials required to connect to the MySQL server * usually with PMA_DBI_connect() * * it returns false if something is missing - which usually leads to * PMA_auth() which displays login form * * it returns true if all seems ok which usually leads to PMA_auth_set_user() * * it directly switches to PMA_auth_fails() if user inactivity timout is reached * * @todo    AllowArbitraryServer on does not imply that the user wants an *          arbitrary server, or? so we should also check if this is filled and *          not only if allowed * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    // Initialization    /**     * @global $GLOBALS['pma_auth_server'] the user provided server to connect to     */    $GLOBALS['pma_auth_server'] = '';    $GLOBALS['PHP_AUTH_USER'] = $GLOBALS['PHP_AUTH_PW'] = '';    $GLOBALS['from_cookie'] = false;    // BEGIN Swekey Integration    if (! Swekey_auth_check()) {        return false;    }    // END Swekey Integration    if (defined('PMA_CLEAR_COOKIES')) {        foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaUser-' . $key);        }        return false;    }    if (! empty($_REQUEST['old_usr'])) {        // The user wants to be logged out        // -> delete his choices that were stored in session        // according to the PHP manual we should do this before the destroy:        //$_SESSION = array();        // but we still need some parts of the session information        // in libraries/header_meta_style.inc.php        session_destroy();        // -> delete password cookie(s)        if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {            foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {                $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);                if (isset($_COOKIE['pmaPass-' . $key])) {                    unset($_COOKIE['pmaPass-' . $key]);                }            }        } else {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);            if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {                unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);            }        }    }    if (! empty($_REQUEST['pma_username'])) {        // The user just logged in        $GLOBALS['PHP_AUTH_USER'] = $_REQUEST['pma_username'];        $GLOBALS['PHP_AUTH_PW']   = empty($_REQUEST['pma_password']) ? '' : $_REQUEST['pma_password'];        if ($GLOBALS['cfg']['AllowArbitraryServer'] && isset($_REQUEST['pma_servername'])) {            $GLOBALS['pma_auth_server'] = $_REQUEST['pma_servername'];        }        return true;    }    // At the end, try to set the $GLOBALS['PHP_AUTH_USER']    // and $GLOBALS['PHP_AUTH_PW'] variables from cookies    // servername    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($_COOKIE['pmaServer-' . $GLOBALS['server']])) {        $GLOBALS['pma_auth_server'] = $_COOKIE['pmaServer-' . $GLOBALS['server']];    }    // username    if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_USER'] = PMA_blowfish_decrypt(        $_COOKIE['pmaUser-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    // user was never logged in since session start    if (empty($_SESSION['last_access_time'])) {        return false;    }    // User inactive too long    if ($_SESSION['last_access_time'] < time() - $GLOBALS['cfg']['LoginCookieValidity']) {        PMA_cacheUnset('is_create_db_priv', true);        PMA_cacheUnset('is_process_priv', true);        PMA_cacheUnset('is_reload_priv', true);        PMA_cacheUnset('db_to_create', true);        PMA_cacheUnset('dbs_where_create_table_allowed', true);        $GLOBALS['no_activity'] = true;        PMA_auth_fails();        exit;    }    // password    if (empty($_COOKIE['pmaPass-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_PW'] = PMA_blowfish_decrypt(        $_COOKIE['pmaPass-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    if ($GLOBALS['PHP_AUTH_PW'] == "\xff(blank)") {        $GLOBALS['PHP_AUTH_PW'] = '';    }    $GLOBALS['from_cookie'] = true;    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $GLOBALS['PHP_AUTH_USER']) {        foreach ($cfg['Servers'] as $idx => $current) {            if ($current['host'] == $cfg['Server']['host']             && $current['port'] == $cfg['Server']['port']             && $current['socket'] == $cfg['Server']['socket']             && $current['ssl'] == $cfg['Server']['ssl']             && $current['connect_type'] == $cfg['Server']['connect_type']             && $current['user'] == $GLOBALS['PHP_AUTH_USER']) {                $GLOBALS['server'] = $idx;                $cfg['Server']     = $current;                break;            }        } // end foreach    } // end if    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($GLOBALS['pma_auth_server'])) {        /* Allow to specify 'host port' */        $parts = explode(' ', $GLOBALS['pma_auth_server']);        if (count($parts) == 2) {            $tmp_host = $parts[0];            $tmp_port = $parts[1];        } else {            $tmp_host = $GLOBALS['pma_auth_server'];            $tmp_port = '';        }        if ($cfg['Server']['host'] != $GLOBALS['pma_auth_server']) {            $cfg['Server']['host'] = $tmp_host;            if (!empty($tmp_port)) {                $cfg['Server']['port'] = $tmp_port;            }        }        unset($tmp_host, $tmp_port, $parts);    }    $cfg['Server']['user']     = $GLOBALS['PHP_AUTH_USER'];    $cfg['Server']['password'] = $GLOBALS['PHP_AUTH_PW'];    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    $_SESSION['last_access_time'] = time();    // Name and password cookies need to be refreshed each time    // Duration = one month for username    $GLOBALS['PMA_Config']->setCookie('pmaUser-' . $GLOBALS['server'],        PMA_blowfish_encrypt($cfg['Server']['user'],            PMA_get_blowfish_secret()));    // Duration = as configured    $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $GLOBALS['server'],        PMA_blowfish_encrypt(!empty($cfg['Server']['password']) ? $cfg['Server']['password'] : "\xff(blank)",            PMA_get_blowfish_secret()),        null,        $GLOBALS['cfg']['LoginCookieStore']);    // Set server cookies if required (once per session) and, in this case, force    // reload to ensure the client accepts cookies    if (! $GLOBALS['from_cookie']) {        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            if (! empty($GLOBALS['pma_auth_server'])) {                // Duration = one month for servername                $GLOBALS['PMA_Config']->setCookie('pmaServer-' . $GLOBALS['server'], $cfg['Server']['host']);            } else {                // Delete servername cookie                $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $GLOBALS['server']);            }        }        // URL where to go:        $redirect_url = $cfg['PmaAbsoluteUri'] . 'index.php';        // any parameters to pass?        $url_params = array();        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];        }        if (strlen($GLOBALS['table'])) {            $url_params['table'] = $GLOBALS['table'];        }        // any target to pass?        if (! empty($GLOBALS['target']) && $GLOBALS['target'] != 'index.php') {            $url_params['target'] = $GLOBALS['target'];        }        /**         * whether we come from a fresh cookie login         */        define('PMA_COMING_FROM_COOKIE_LOGIN', true);        /**         * Clear user cache.         */        PMA_clearUserCache();        PMA_sendHeaderLocation($redirect_url . PMA_generate_common_url($url_params, '&'));        exit();    } // end if    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * prepares error message and switches to PMA_auth() which display the error * and the login form * * this function MUST exit/quit the application, * currently doen by call to PMA_auth() * * @access  public */function PMA_auth_fails(){    global $conn_error;    // Deletes password cookie and displays the login form    $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);    if (! empty($GLOBALS['login_without_password_is_forbidden'])) {        $conn_error = __('Login without a password is forbidden by configuration (see AllowNoPassword)');    } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {        $conn_error = __('Access denied');    } elseif (! empty($GLOBALS['no_activity'])) {        $conn_error = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        // Remember where we got timeout to return on same place        if (PMA_getenv('SCRIPT_NAME')) {            $GLOBALS['target'] = basename(PMA_getenv('SCRIPT_NAME'));            // avoid "missing parameter: field" on re-entry            if ('tbl_alter.php' == $GLOBALS['target']) {                $GLOBALS['target'] = 'tbl_structure.php';            }        }    } elseif (PMA_DBI_getError()) {        $conn_error = '#' . $GLOBALS['errno'] . ' ' . __('Cannot log in to the MySQL server');    } else {        $conn_error = __('Cannot log in to the MySQL server');    }    // needed for PHP-CGI (not need for FastCGI or mod-php)    header('Cache-Control: no-store, no-cache, must-revalidate');    header('Pragma: no-cache');    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to export a set of queries to a MS Word document * * @package PhpMyAdmin-Export * @subpackage HTMLWord */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['htmlword'] = array(        'text' => __('Microsoft Word 2000'),        'extension' => 'doc',        'mime_type' => 'application/vnd.ms-word',        'force_file' => true,        'options' => array(            /* what to dump (structure/data/both) */            array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table')),            array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),            array('type' => 'end_group'),            /* data options */            array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return PMA_exportOutputHandler('</body></html>');    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $charset_of_file;        return PMA_exportOutputHandler('<html xmlns:o="urn:schemas-microsoft-com:office:office"    xmlns:x="urn:schemas-microsoft-com:office:word"    xmlns="http://www.w3.org/TR/REC-html40">    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">    <html>    <head>        <meta http-equiv="Content-type" content="text/html;charset=' . (isset($charset_of_file) ? $charset_of_file : 'utf-8') . '" />    </head>    <body>');    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('<h1>' . __('Database') . ' ' . htmlspecialchars($db) . '</h1>');    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in HTML (Microsoft Word) format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('<h2>' . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['htmlword_columns'])) {            $schema_insert = '<tr class="print-category">';            for ($i = 0; $i < $fields_cnt; $i++) {                $schema_insert .= '<td class="print"><b>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</b></td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '<tr class="print-category">';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = '';                }                $schema_insert .= '<td class="print">' . htmlspecialchars($value) . '</td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        if (! PMA_exportOutputHandler('</table>')) {            return false;        }        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('<h2>' . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $schema_insert = '<tr class="print-category">';        $schema_insert .= '<th class="print">' . __('Column') . '</th>';        $schema_insert .= '<td class="print"><b>' . __('Type') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Null') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Default') . '</b></td>';        if ($do_relation && $have_rel) {            $schema_insert .= '<td class="print"><b>' . __('Links to') . '</b></td>';        }        if ($do_comments) {            $schema_insert .= '<td class="print"><b>' . __('Comments') . '</b></td>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $schema_insert .= '<td class="print"><b>' . htmlspecialchars('MIME') . '</b></td>';            $mime_map = PMA_getMIME($db, $table, true);        }        $schema_insert .= '</tr>';        if (! PMA_exportOutputHandler($schema_insert)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $schema_insert = '<tr class="print-category">';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '<b>' . $fmt_pre;                $fmt_post = $fmt_post . '</b>';            }            if ($column['Key'] == 'PRI') {                $fmt_pre = '<i>' . $fmt_pre;                $fmt_post = $fmt_post . '</i>';            }            $schema_insert .= '<td class="print">' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars($type) . '</td>';            $schema_insert .= '<td class="print">' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '') . '</td>';            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $schema_insert .= '<td class="print">' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '') . '</td>';            }            if ($do_comments && $cfgRelation['commwork']) {                $schema_insert .= '<td class="print">' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '') . '</td>';            }            if ($do_mime && $cfgRelation['mimework']) {                $schema_insert .= '<td class="print">' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '') . '</td>';            }            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        return PMA_exportOutputHandler('</table>');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc stuff and REQUIRED by ALL the scripts. * MUST be included by every script * * Among other things, it contains the advanced authentication work. * * Order of sections for common.inc.php: * * the authentication libraries must be before the connection to db * * ... so the required order is: * * LABEL_variables_init *  - initialize some variables always needed * LABEL_parsing_config_file *  - parsing of the configuration file * LABEL_loading_language_file *  - loading language file * LABEL_setup_servers *  - check and setup configured servers * LABEL_theme_setup *  - setting up themes * * - load of MySQL extension (if necessary) * - loading of an authentication library * - db connection * - authentication work * * @package PhpMyAdmin *//** * Minimum PHP version; can't call PMA_fatalError() which uses a * PHP 5 function, so cannot easily localize this message. */if (version_compare(PHP_VERSION, '5.2.0', 'lt')) {    die('PHP 5.2+ is required');}/**  * Backward compatibility for PHP 5.2  */if (!defined('E_DEPRECATED')) {    define('E_DEPRECATED', 8192);}/** * the error handler */require './libraries/Error_Handler.class.php';/** * initialize the error handler */$GLOBALS['error_handler'] = new PMA_Error_Handler();$cfg['Error_Handler']['display'] = true;/* * This setting was removed in PHP 5.3. But at this point PMA_PHP_INT_VERSION * is not yet defined so we use another way to find out the PHP version. */if (version_compare(phpversion(), '5.3', 'lt')) {    /**     * Avoid object cloning errors     */    @ini_set('zend.ze1_compatibility_mode', false);}/** * This setting was removed in PHP 5.4. But at this point PMA_PHP_INT_VERSION * is not yet defined so we use another way to find out the PHP version. */if (version_compare(phpversion(), '5.4', 'lt')) {    /**     * Avoid problems with magic_quotes_runtime     */     @ini_set('magic_quotes_runtime', false);}/** * for verification in all procedural scripts under libraries */define('PHPMYADMIN', true);/** * core functions */require './libraries/core.lib.php';/** * Input sanitizing */require './libraries/sanitizing.lib.php';/** * the PMA_Theme class */require './libraries/Theme.class.php';/** * the PMA_Theme_Manager class */require './libraries/Theme_Manager.class.php';/** * the PMA_Config class */require './libraries/Config.class.php';/** * the relation lib, tracker needs it */require './libraries/relation.lib.php';/** * the PMA_Tracker class */require './libraries/Tracker.class.php';/** * the PMA_Table class */require './libraries/Table.class.php';if (!defined('PMA_MINIMUM_COMMON')) {    /**     * common functions     */    include_once './libraries/common.lib.php';    /**     * Java script escaping.     */    include_once './libraries/js_escape.lib.php';    /**     * Include URL/hidden inputs generating.     */    include_once './libraries/url_generating.lib.php';}/******************************************************************************//* start procedural code                       label_start_procedural         *//** * protect against possible exploits - there is no need to have so much variables */if (count($_REQUEST) > 1000) {    die(__('possible exploit'));}/** * Check for numeric keys * (if register_globals is on, numeric key can be found in $GLOBALS) */foreach ($GLOBALS as $key => $dummy) {    if (is_numeric($key)) {        die(__('numeric key detected'));    }}unset($dummy);/** * PATH_INFO could be compromised if set, so remove it from PHP_SELF * and provide a clean PHP_SELF here */$PMA_PHP_SELF = PMA_getenv('PHP_SELF');$_PATH_INFO = PMA_getenv('PATH_INFO');if (! empty($_PATH_INFO) && ! empty($PMA_PHP_SELF)) {    $path_info_pos = strrpos($PMA_PHP_SELF, $_PATH_INFO);    if ($path_info_pos + strlen($_PATH_INFO) === strlen($PMA_PHP_SELF)) {        $PMA_PHP_SELF = substr($PMA_PHP_SELF, 0, $path_info_pos);    }}$PMA_PHP_SELF = htmlspecialchars($PMA_PHP_SELF);/** * just to be sure there was no import (registering) before here * we empty the global space (but avoid unsetting $variables_list * and $key in the foreach (), we still need them!) */$variables_whitelist = array (    'GLOBALS',    '_SERVER',    '_GET',    '_POST',    '_REQUEST',    '_FILES',    '_ENV',    '_COOKIE',    '_SESSION',    'error_handler',    'PMA_PHP_SELF',    'variables_whitelist',    'key');foreach (get_defined_vars() as $key => $value) {    if (! in_array($key, $variables_whitelist)) {        unset($$key);    }}unset($key, $value, $variables_whitelist);/** * Subforms - some functions need to be called by form, cause of the limited URL * length, but if this functions inside another form you cannot just open a new * form - so phpMyAdmin uses 'arrays' inside this form * * <code> * <form ...> * ... main form elments ... * <input type="hidden" name="subform[action1][id]" value="1" /> * ... other subform data ... * <input type="submit" name="usesubform[action1]" value="do action1" /> * ... other subforms ... * <input type="hidden" name="subform[actionX][id]" value="X" /> * ... other subform data ... * <input type="submit" name="usesubform[actionX]" value="do actionX" /> * ... main form elments ... * <input type="submit" name="main_action" value="submit form" /> * </form> * </code> * * so we now check if a subform is submitted */$__redirect = null;if (isset($_POST['usesubform'])) {    // if a subform is present and should be used    // the rest of the form is deprecated    $subform_id = key($_POST['usesubform']);    $subform    = $_POST['subform'][$subform_id];    $_POST      = $subform;    $_REQUEST   = $subform;    /**     * some subforms need another page than the main form, so we will just     * include this page at the end of this script - we use $__redirect to     * track this     */    if (isset($_POST['redirect'])      && $_POST['redirect'] != basename($PMA_PHP_SELF)) {        $__redirect = $_POST['redirect'];        unset($_POST['redirect']);    }    unset($subform_id, $subform);} else {    // Note: here we overwrite $_REQUEST so that it does not contain cookies,    // because another application for the same domain could have set    // a cookie (with a compatible path) that overrides a variable    // we expect from GET or POST.    // We'll refer to cookies explicitly with the $_COOKIE syntax.    $_REQUEST = array_merge($_GET, $_POST);}// end check if a subform is submitted/** * This setting was removed in PHP 5.4. But at this point PMA_PHP_INT_VERSION * is not yet defined so we use another way to find out the PHP version. */if (version_compare(phpversion(), '5.4', 'lt')) {    // remove quotes added by PHP    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        PMA_arrayWalkRecursive($_GET, 'stripslashes', true);        PMA_arrayWalkRecursive($_POST, 'stripslashes', true);        PMA_arrayWalkRecursive($_COOKIE, 'stripslashes', true);        PMA_arrayWalkRecursive($_REQUEST, 'stripslashes', true);    }}/** * include deprecated grab_globals only if required */if (empty($__redirect) && !defined('PMA_NO_VARIABLES_IMPORT')) {    include './libraries/grab_globals.lib.php';}/** * check timezone setting * this could produce an E_STRICT - but only once, * if not done here it will produce E_STRICT on every date/time function * * @todo need to decide how we should handle this (without @) */date_default_timezone_set(@date_default_timezone_get());/******************************************************************************//* parsing configuration file                         LABEL_parsing_config_file      *//** * We really need this one! */if (! function_exists('preg_replace')) {    PMA_warnMissingExtension('pcre', true);}/** * @global PMA_Config $GLOBALS['PMA_Config'] * force reading of config file, because we removed sensitive values * in the previous iteration */$GLOBALS['PMA_Config'] = new PMA_Config(CONFIG_FILE);if (!defined('PMA_MINIMUM_COMMON')) {    $GLOBALS['PMA_Config']->checkPmaAbsoluteUri();}/** * BC - enable backward compatibility * exports all configuration settings into $GLOBALS ($GLOBALS['cfg']) */$GLOBALS['PMA_Config']->enableBc();/** * clean cookies on upgrade * when changing something related to PMA cookies, increment the cookie version */$pma_cookie_version = 4;if (isset($_COOKIE) && (isset($_COOKIE['pmaCookieVer'])  && $_COOKIE['pmaCookieVer'] < $pma_cookie_version)) {    // delete all cookies    foreach ($_COOKIE as $cookie_name => $tmp) {        $GLOBALS['PMA_Config']->removeCookie($cookie_name);    }    $_COOKIE = array();    $GLOBALS['PMA_Config']->setCookie('pmaCookieVer', $pma_cookie_version);}/** * check HTTPS connection */if ($GLOBALS['PMA_Config']->get('ForceSSL')  && !$GLOBALS['PMA_Config']->get('is_https')) {    PMA_sendHeaderLocation(        preg_replace('/^http/', 'https',            $GLOBALS['PMA_Config']->get('PmaAbsoluteUri'))        . PMA_generate_common_url($_GET, 'text'));    // delete the current session, otherwise we get problems (see bug #2397877)    $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);    exit;}/** * include session handling after the globals, to prevent overwriting */require './libraries/session.inc.php';/** * init some variables LABEL_variables_init *//** * holds parameters to be passed to next page * @global array $GLOBALS['url_params'] */$GLOBALS['url_params'] = array();/** * the whitelist for $GLOBALS['goto'] * @global array $goto_whitelist */$goto_whitelist = array(    //'browse_foreigners.php',    //'calendar.php',    //'changelog.php',    //'chk_rel.php',    'db_create.php',    'db_datadict.php',    'db_sql.php',    'db_events.php',    'db_export.php',    'db_importdocsql.php',    'db_qbe.php',    'db_structure.php',    'db_import.php',    'db_operations.php',    'db_printview.php',    'db_search.php',    'db_routines.php',    //'Documentation.html',    'export.php',    'import.php',    //'index.php',    //'navigation.php',    //'license.php',    'main.php',    'pdf_pages.php',    'pdf_schema.php',    //'phpinfo.php',    'querywindow.php',    //'readme.php',    'server_binlog.php',    'server_collations.php',    'server_databases.php',    'server_engines.php',    'server_export.php',    'server_import.php',    'server_privileges.php',    'server_processlist.php',    'server_sql.php',    'server_status.php',    'server_variables.php',    'sql.php',    'tbl_addfield.php',    'tbl_alter.php',    'tbl_change.php',    'tbl_create.php',    'tbl_import.php',    'tbl_indexes.php',    'tbl_move_copy.php',    'tbl_printview.php',    'tbl_sql.php',    'tbl_export.php',    'tbl_operations.php',    'tbl_structure.php',    'tbl_relation.php',    'tbl_replace.php',    'tbl_row_action.php',    'tbl_select.php',    'tbl_zoom_select.php',    //'themes.php',    'transformation_overview.php',    'transformation_wrapper.php',    'user_password.php',);/** * check $__redirect against whitelist */if (! PMA_checkPageValidity($__redirect, $goto_whitelist)) {    $__redirect = null;}/** * holds page that should be displayed * @global string $GLOBALS['goto'] */$GLOBALS['goto'] = '';// Security fix: disallow accessing serious server files via "?goto="if (PMA_checkPageValidity($_REQUEST['goto'], $goto_whitelist)) {    $GLOBALS['goto'] = $_REQUEST['goto'];    $GLOBALS['url_params']['goto'] = $_REQUEST['goto'];} else {    unset($_REQUEST['goto'], $_GET['goto'], $_POST['goto'], $_COOKIE['goto']);}/** * returning page * @global string $GLOBALS['back'] */if (PMA_checkPageValidity($_REQUEST['back'], $goto_whitelist)) {    $GLOBALS['back'] = $_REQUEST['back'];} else {    unset($_REQUEST['back'], $_GET['back'], $_POST['back'], $_COOKIE['back']);}/** * Check whether user supplied token is valid, if not remove any possibly * dangerous stuff from request. * * remember that some objects in the session with session_start and __wakeup() * could access this variables before we reach this point * f.e. PMA_Config: fontsize * * @todo variables should be handled by their respective owners (objects) * f.e. lang, server, collation_connection in PMA_Config */if (! PMA_isValid($_REQUEST['token']) || $_SESSION[' PMA_token '] != $_REQUEST['token']) {    /**     *  List of parameters which are allowed from unsafe source     */    $allow_list = array(        /* needed for direct access, see FAQ 1.34         * also, server needed for cookie login screen (multi-server)         */        'server', 'db', 'table', 'target', 'lang',        /* Session ID */        'phpMyAdmin',        /* Cookie preferences */        'pma_lang', 'pma_collation_connection',        /* Possible login form */        'pma_servername', 'pma_username', 'pma_password',        /* for playing blobstreamable media */        'media_type', 'custom_type', 'bs_reference',        /* for changing BLOB repository file MIME type */        'bs_db', 'bs_table', 'bs_ref', 'bs_new_mime_type',    );    /**     * Require cleanup functions     */    include './libraries/cleanup.lib.php';    /**     * Do actual cleanup     */    PMA_remove_request_vars($allow_list);}/** * current selected database * @global string $GLOBALS['db'] */$GLOBALS['db'] = '';if (PMA_isValid($_REQUEST['db'])) {    // can we strip tags from this?    // only \ and / is not allowed in db names for MySQL    $GLOBALS['db'] = $_REQUEST['db'];    $GLOBALS['url_params']['db'] = $GLOBALS['db'];}/** * current selected table * @global string $GLOBALS['table'] */$GLOBALS['table'] = '';if (PMA_isValid($_REQUEST['table'])) {    // can we strip tags from this?    // only \ and / is not allowed in table names for MySQL    $GLOBALS['table'] = $_REQUEST['table'];    $GLOBALS['url_params']['table'] = $GLOBALS['table'];}/** * Store currently selected recent table. * Affect $GLOBALS['db'] and $GLOBALS['table'] */if (PMA_isValid($_REQUEST['selected_recent_table'])) {    $recent_table = json_decode($_REQUEST['selected_recent_table'], true);    $GLOBALS['db'] = $recent_table['db'];    $GLOBALS['url_params']['db'] = $GLOBALS['db'];    $GLOBALS['table'] = $recent_table['table'];    $GLOBALS['url_params']['table'] = $GLOBALS['table'];}/** * SQL query to be executed * @global string $GLOBALS['sql_query'] */$GLOBALS['sql_query'] = '';if (PMA_isValid($_REQUEST['sql_query'])) {    $GLOBALS['sql_query'] = $_REQUEST['sql_query'];}/** * avoid problems in phpmyadmin.css.php in some cases * @global string $js_frame */$_REQUEST['js_frame'] = PMA_ifSetOr($_REQUEST['js_frame'], '');//$_REQUEST['set_theme'] // checked later in this file LABEL_theme_setup//$_REQUEST['server']; // checked later in this file//$_REQUEST['lang'];   // checked by LABEL_loading_language_file/** * holds name of JavaScript files to be included in HTML header * @global array $js_include */$GLOBALS['js_include'] = array();$GLOBALS['js_include'][] = 'jquery/jquery-1.6.2.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'update-location.js';/** * holds an array of javascript code snippets to be included in the HTML header * Can be used with PMA_AddJSCode() to pass on js variables to the browser. * @global array $js_script */$GLOBALS['js_script'] = array();/** * Add common jQuery functions script here if necessary. *//** * JavaScript events that will be registered * @global array $js_events */$GLOBALS['js_events'] = array();/** * footnotes to be displayed ot the page bottom * @global array $footnotes */$GLOBALS['footnotes'] = array();/******************************************************************************//* loading language file                       LABEL_loading_language_file    *//** * lang detection is done here */require './libraries/select_lang.lib.php';/** * check for errors occurred while loading configuration * this check is done here after loading language files to present errors in locale */if ($GLOBALS['PMA_Config']->error_config_file) {    $error = '<h1>' . __('Failed to read configuration file') . '</h1>'        . _('This usually means there is a syntax error in it, please check any errors shown below.')        . '<br />'        . '<br />'        . '<iframe src="show_config_errors.php" />';    trigger_error($error, E_USER_ERROR);}if ($GLOBALS['PMA_Config']->error_config_default_file) {    $error = sprintf(__('Could not load default configuration from: %1$s'),        $GLOBALS['PMA_Config']->default_source);    trigger_error($error, E_USER_ERROR);}if ($GLOBALS['PMA_Config']->error_pma_uri) {    trigger_error(__('The <tt>$cfg[\'PmaAbsoluteUri\']</tt> directive MUST be set in your configuration file!'), E_USER_ERROR);}/******************************************************************************//* setup servers                                       LABEL_setup_servers    *//** * current server * @global integer $GLOBALS['server'] */$GLOBALS['server'] = 0;/** * Servers array fixups. * $default_server comes from PMA_Config::enableBc() * @todo merge into PMA_Config */// Do we have some server?if (! isset($cfg['Servers']) || count($cfg['Servers']) == 0) {    // No server => create one with defaults    $cfg['Servers'] = array(1 => $default_server);} else {    // We have server(s) => apply default configuration    $new_servers = array();    foreach ($cfg['Servers'] as $server_index => $each_server) {        // Detect wrong configuration        if (!is_int($server_index) || $server_index < 1) {            trigger_error(sprintf(__('Invalid server index: %s'), $server_index), E_USER_ERROR);        }        $each_server = array_merge($default_server, $each_server);        // Don't use servers with no hostname        if ($each_server['connect_type'] == 'tcp' && empty($each_server['host'])) {            trigger_error(sprintf(__('Invalid hostname for server %1$s. Please review your configuration.'), $server_index), E_USER_ERROR);        }        // Final solution to bug #582890        // If we are using a socket connection        // and there is nothing in the verbose server name        // or the host field, then generate a name for the server        // in the form of "Server 2", localized of course!        if ($each_server['connect_type'] == 'socket' && empty($each_server['host']) && empty($each_server['verbose'])) {            $each_server['verbose'] = __('Server') . $server_index;        }        $new_servers[$server_index] = $each_server;    }    $cfg['Servers'] = $new_servers;    unset($new_servers, $server_index, $each_server);}// Cleanupunset($default_server);/******************************************************************************//* setup themes                                          LABEL_theme_setup    *//** * @global PMA_Theme_Manager $_SESSION['PMA_Theme_Manager'] */if (! isset($_SESSION['PMA_Theme_Manager'])) {    $_SESSION['PMA_Theme_Manager'] = new PMA_Theme_Manager;} else {    /**     * @todo move all __wakeup() functionality into session.inc.php     */    $_SESSION['PMA_Theme_Manager']->checkConfig();}// for the theme per server featureif (isset($_REQUEST['server']) && ! isset($_REQUEST['set_theme'])) {    $GLOBALS['server'] = $_REQUEST['server'];    $tmp = $_SESSION['PMA_Theme_Manager']->getThemeCookie();    if (empty($tmp)) {        $tmp = $_SESSION['PMA_Theme_Manager']->theme_default;    }    $_SESSION['PMA_Theme_Manager']->setActiveTheme($tmp);    unset($tmp);}/** * @todo move into PMA_Theme_Manager::__wakeup() */if (isset($_REQUEST['set_theme'])) {    // if user selected a theme    $_SESSION['PMA_Theme_Manager']->setActiveTheme($_REQUEST['set_theme']);}/** * the theme object * @global PMA_Theme $_SESSION['PMA_Theme'] */$_SESSION['PMA_Theme'] = $_SESSION['PMA_Theme_Manager']->theme;// BC/** * the active theme * @global string $GLOBALS['theme'] */$GLOBALS['theme']           = $_SESSION['PMA_Theme']->getName();/** * the theme path * @global string $GLOBALS['pmaThemePath'] */$GLOBALS['pmaThemePath']    = $_SESSION['PMA_Theme']->getPath();/** * the theme image path * @global string $GLOBALS['pmaThemeImage'] */$GLOBALS['pmaThemeImage']   = $_SESSION['PMA_Theme']->getImgPath();/** * load layout file if exists */if (@file_exists($_SESSION['PMA_Theme']->getLayoutFile())) {    include $_SESSION['PMA_Theme']->getLayoutFile();    /**     * @todo remove if all themes are update use Navi instead of Left as frame name     */    if (! isset($GLOBALS['cfg']['NaviWidth'])     && isset($GLOBALS['cfg']['LeftWidth'])) {        $GLOBALS['cfg']['NaviWidth'] = $GLOBALS['cfg']['LeftWidth'];    }}if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Character set conversion.     */    include_once './libraries/charset_conversion.lib.php';    /**     * String handling     */    include_once './libraries/string.lib.php';    /**     * Lookup server by name     * (see FAQ 4.8)     */    if (! empty($_REQUEST['server']) && is_string($_REQUEST['server'])     && ! is_numeric($_REQUEST['server'])) {        foreach ($cfg['Servers'] as $i => $server) {            if ($server['host'] == $_REQUEST['server']) {                $_REQUEST['server'] = $i;                break;            }        }        if (is_string($_REQUEST['server'])) {            unset($_REQUEST['server']);        }        unset($i);    }    /**     * If no server is selected, make sure that $cfg['Server'] is empty (so     * that nothing will work), and skip server authentication.     * We do NOT exit here, but continue on without logging into any server.     * This way, the welcome page will still come up (with no server info) and     * present a choice of servers in the case that there are multiple servers     * and '$cfg['ServerDefault'] = 0' is set.     */    if (isset($_REQUEST['server']) && (is_string($_REQUEST['server']) || is_numeric($_REQUEST['server'])) && ! empty($_REQUEST['server']) && ! empty($cfg['Servers'][$_REQUEST['server']])) {        $GLOBALS['server'] = $_REQUEST['server'];        $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];    } else {        if (!empty($cfg['Servers'][$cfg['ServerDefault']])) {            $GLOBALS['server'] = $cfg['ServerDefault'];            $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];        } else {            $GLOBALS['server'] = 0;            $cfg['Server'] = array();        }    }    $GLOBALS['url_params']['server'] = $GLOBALS['server'];    /**     * Kanji encoding convert feature appended by Y.Kawada (2002/2/20)     */    if (function_exists('mb_convert_encoding')     && $lang == 'ja') {        include_once './libraries/kanji-encoding.lib.php';    } // end if    /**     * save some settings in cookies     * @todo should be done in PMA_Config     */    $GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);    $GLOBALS['PMA_Config']->setCookie('pma_collation_connection', $GLOBALS['collation_connection']);    $_SESSION['PMA_Theme_Manager']->setThemeCookie();    if (! empty($cfg['Server'])) {        /**         * Loads the proper database interface for this server         */        include_once './libraries/database_interface.lib.php';        include_once './libraries/logging.lib.php';        // get LoginCookieValidity from preferences cache        // no generic solution for loading preferences from cache as some settings need to be kept        // for processing in PMA_Config::loadUserPreferences()        $cache_key = 'server_' . $GLOBALS['server'];        if (isset($_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'])) {            $value = $_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'];            $GLOBALS['PMA_Config']->set('LoginCookieValidity', $value);            $GLOBALS['cfg']['LoginCookieValidity'] = $value;            unset($value);        }        unset($cache_key);        // Gets the authentication library that fits the $cfg['Server'] settings        // and run authentication        // to allow HTTP or http        $cfg['Server']['auth_type'] = strtolower($cfg['Server']['auth_type']);        if (! file_exists('./libraries/auth/' . $cfg['Server']['auth_type'] . '.auth.lib.php')) {            PMA_fatalError(__('Invalid authentication method set in configuration:') . ' ' . $cfg['Server']['auth_type']);        }        /**         * the required auth type plugin         */        include_once './libraries/auth/' . $cfg['Server']['auth_type'] . '.auth.lib.php';        if (!PMA_auth_check()) {            /* Force generating of new session on login */            PMA_secureSession();            PMA_auth();        } else {            PMA_auth_set_user();        }         // Check IP-based Allow/Deny rules as soon as possible to reject the        // user        // Based on mod_access in Apache:        // http://cvs.apache.org/viewcvs.cgi/httpd-2.0/modules/aaa/mod_access.c?rev=1.37&content-type=text/vnd.viewcvs-markup        // Look at: "static int check_dir_access(request_rec *r)"        if (isset($cfg['Server']['AllowDeny'])                && isset($cfg['Server']['AllowDeny']['order'])) {            /**             * ip based access library             */            include_once './libraries/ip_allow_deny.lib.php';            $allowDeny_forbidden         = false; // default            if ($cfg['Server']['AllowDeny']['order'] == 'allow,deny') {                $allowDeny_forbidden     = true;                if (PMA_allowDeny('allow')) {                    $allowDeny_forbidden = false;                }                if (PMA_allowDeny('deny')) {                    $allowDeny_forbidden = true;                }            } elseif ($cfg['Server']['AllowDeny']['order'] == 'deny,allow') {                if (PMA_allowDeny('deny')) {                    $allowDeny_forbidden = true;                }                if (PMA_allowDeny('allow')) {                    $allowDeny_forbidden = false;                }            } elseif ($cfg['Server']['AllowDeny']['order'] == 'explicit') {                if (PMA_allowDeny('allow')                  && !PMA_allowDeny('deny')) {                    $allowDeny_forbidden = false;                } else {                    $allowDeny_forbidden = true;                }            } // end if ... elseif ... elseif            // Ejects the user if banished            if ($allowDeny_forbidden) {                PMA_log_user($cfg['Server']['user'], 'allow-denied');                PMA_auth_fails();            }            unset($allowDeny_forbidden); //Clean up after you!        } // end if        // is root allowed?        if (!$cfg['Server']['AllowRoot'] && $cfg['Server']['user'] == 'root') {            $allowDeny_forbidden = true;            PMA_log_user($cfg['Server']['user'], 'root-denied');            PMA_auth_fails();            unset($allowDeny_forbidden); //Clean up after you!        }        // is a login without password allowed?        if (!$cfg['Server']['AllowNoPassword'] && $cfg['Server']['password'] == '') {            $login_without_password_is_forbidden = true;            PMA_log_user($cfg['Server']['user'], 'empty-denied');            PMA_auth_fails();            unset($login_without_password_is_forbidden); //Clean up after you!        }        // if using TCP socket is not needed        if (strtolower($cfg['Server']['connect_type']) == 'tcp') {            $cfg['Server']['socket'] = '';        }        // Try to connect MySQL with the control user profile (will be used to        // get the privileges list for the current user but the true user link        // must be open after this one so it would be default one for all the        // scripts)        $controllink = false;        if ($cfg['Server']['controluser'] != '') {            if (! empty($cfg['Server']['controlhost'])) {                $controllink = PMA_DBI_connect($cfg['Server']['controluser'],                    $cfg['Server']['controlpass'], true,                    array('host' => $cfg['Server']['controlhost'])                );            } else {                $controllink = PMA_DBI_connect($cfg['Server']['controluser'],                    $cfg['Server']['controlpass'], true);            }        }        // Connects to the server (validates user's login)        $userlink = PMA_DBI_connect($cfg['Server']['user'],            $cfg['Server']['password'], false);        if (! $controllink) {            $controllink = $userlink;        }        /* Log success */        PMA_log_user($cfg['Server']['user']);        /**         * with phpMyAdmin 3 we support MySQL >=5         * but only production releases:         *  - > 5.0.15         */        if (PMA_MYSQL_INT_VERSION < 50015) {            PMA_fatalError(__('You should upgrade to %s %s or later.'), array('MySQL', '5.0.15'));        }        if (PMA_DRIZZLE) {            // DisableIS must be set to false for Drizzle, it maps SHOW commands            // to INFORMATION_SCHEMA queries anyway so it's fast on large servers            $cfg['Server']['DisableIS'] = false;            // SHOW OPEN TABLES is not supported by Drizzle            $cfg['SkipLockedTables'] = false;        }        /**         * SQL Parser code         */        include_once './libraries/sqlparser.lib.php';        /**         * SQL Validator interface code         */        include_once './libraries/sqlvalidator.lib.php';        /**         * the PMA_List_Database class         */        include_once './libraries/PMA.php';        $pma = new PMA;        $pma->userlink = $userlink;        $pma->controllink = $controllink;        /**         * some resetting has to be done when switching servers         */        if (isset($_SESSION['tmp_user_values']['previous_server']) && $_SESSION['tmp_user_values']['previous_server'] != $GLOBALS['server']) {            unset($_SESSION['tmp_user_values']['navi_limit_offset']);        }        $_SESSION['tmp_user_values']['previous_server'] = $GLOBALS['server'];    } // end server connecting    /**     * check if profiling was requested and remember it     * (note: when $cfg['ServerDefault'] = 0, constant is not defined)     */    if (isset($_REQUEST['profiling']) && PMA_profilingSupported()) {        $_SESSION['profiling'] = true;    } elseif (isset($_REQUEST['profiling_form'])) {        // the checkbox was unchecked        unset($_SESSION['profiling']);    }    // library file for blobstreaming    include_once './libraries/blobstreaming.lib.php';    // checks for blobstreaming plugins and databases that support    // blobstreaming (by having the necessary tables for blobstreaming)    checkBLOBStreamingPlugins();} // end if !defined('PMA_MINIMUM_COMMON')// load user preferences$GLOBALS['PMA_Config']->loadUserPreferences();// remove sensitive values from session$GLOBALS['PMA_Config']->set('blowfish_secret', '');$GLOBALS['PMA_Config']->set('Servers', '');$GLOBALS['PMA_Config']->set('default_server', '');/* Tell tracker that it can actually work */PMA_Tracker::enable();/** * @global boolean $GLOBALS['is_ajax_request'] * @todo should this be moved to the variables init section above? * * Check if the current request is an AJAX request, and set is_ajax_request * accordingly.  Suppress headers, footers and unnecessary output if set to * true */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_ajax_request'] = true;} else {    $GLOBALS['is_ajax_request'] = false;}/** * @global  boolean $GLOBALS['grid_edit'] * * Set to true if this is a request made during an grid edit process.  This * request is made to retrieve the non-truncated/transformed values. */if (isset($_REQUEST['grid_edit']) && $_REQUEST['grid_edit'] == true) {    $GLOBALS['grid_edit'] = true;} else {    $GLOBALS['grid_edit'] = false;}if (!empty($__redirect) && in_array($__redirect, $goto_whitelist)) {    /**     * include subform target page     */    include $__redirect;    exit();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';require_once './libraries/sql_query_form.lib.php';$err_url   = 'tbl_sql.php' . $err_url;// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'tbl_sql.php';$back = 'tbl_sql.php';/** * Get table information */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * OpenDocument Spreadsheet import plugin for phpMyAdmin * * @todo    Pretty much everything * @todo    Importing of accented characters seems to fail * @package PhpMyAdmin-Import * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * We need way to disable external XML entities processing. */if (!function_exists('libxml_disable_entity_loader')) {    return;}/** * The possible scopes for $plugin_param are: 'table', 'database', and 'server' */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'options' => array(                array('type' => 'begin_group', 'name' => 'general_opts'),                array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>')),                array('type' => 'bool', 'name' => 'empty_rows', 'text' => __('Do not import empty rows')),                array('type' => 'bool', 'name' => 'recognize_percentages', 'text' => __('Import percentages as proper decimals <i>(ex. 12.00% to .12)</i>')),                array('type' => 'bool', 'name' => 'recognize_currency', 'text' => __('Import currencies <i>(ex. $5.00 to 5.00)</i>')),                array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}$i = 0;$len = 0;$buffer = "";/** * Read in the file via PMA_importGetNextChunk so that * it can process compressed files */while (! ($finished && $i >= $len) && ! $error && ! $timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        /* subtract data we didn't handle yet and stop processing */        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        /* Handle rest of buffer */    } else {        /* Append new data to buffer */        $buffer .= $data;        unset($data);    }}unset($data);/** * Disable loading of external XML entities. */libxml_disable_entity_loader();/** * Load the XML string * * The option LIBXML_COMPACT is specified because it can * result in increased performance without the need to * alter the code in any way. It's basically a freebee. */$xml = simplexml_load_string($buffer, "SimpleXMLElement", LIBXML_COMPACT);unset($buffer);if ($xml === false) {    $sheets = array();    $message = PMA_Message::error(__('The XML file specified was either malformed or incomplete. Please correct the issue and try again.'));    $error = true;} else {    $sheets = $xml->children('office', true)->{'body'}->{'spreadsheet'}->children('table', true);}$tables = array();$max_cols = 0;$row_count = 0;$col_count = 0;$col_names = array();$tempRow = array();$tempRows = array();$rows = array();/* Iterate over tables */foreach ($sheets as $sheet) {    $col_names_in_first_row = isset($_REQUEST['ods_col_names']);    /* Iterate over rows */    foreach ($sheet as $row) {        $type = $row->getName();        if (! strcmp('table-row', $type)) {            /* Iterate over columns */            foreach ($row as $cell) {                $text = $cell->children('text', true);                $cell_attrs = $cell->attributes('office', true);                if (count($text) != 0) {                    $attr = $cell->attributes('table', true);                    $num_repeat = (int) $attr['number-columns-repeated'];                    $num_iterations = $num_repeat ? $num_repeat : 1;                    for ($k = 0; $k < $num_iterations; $k++) {                        if (! $col_names_in_first_row) {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } elseif ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $tempRow[] = (double)$cell_attrs['value'];                            } else {                                $tempRow[] = (string)$text;                            }                        } else {                            if ($_REQUEST['ods_recognize_percentages'] && !strcmp('percentage', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else if ($_REQUEST['ods_recognize_currency'] && !strcmp('currency', $cell_attrs['value-type'])) {                                $col_names[] = (double)$cell_attrs['value'];                            } else {                                $col_names[] = (string)$text;                            }                        }                        ++$col_count;                    }                } else {                    /* Number of blank columns repeated */                    if ($col_count < count($row->children('table', true)) - 1) {                        $attr = $cell->attributes('table', true);                        $num_null = (int)$attr['number-columns-repeated'];                        if ($num_null) {                            if (! $col_names_in_first_row) {                                for ($i = 0; $i < $num_null; ++$i) {                                    $tempRow[] = 'NULL';                                    ++$col_count;                                }                            } else {                                for ($i = 0; $i < $num_null; ++$i) {                                    $col_names[] = PMA_getColumnAlphaName($col_count + 1);                                    ++$col_count;                                }                            }                        } else {                            if (! $col_names_in_first_row) {                                $tempRow[] = 'NULL';                            } else {                                $col_names[] = PMA_getColumnAlphaName($col_count + 1);                            }                            ++$col_count;                        }                    }                }            }            /* Find the widest row */            if ($col_count > $max_cols) {                $max_cols = $col_count;            }            /* Don't include a row that is full of NULL values */            if (! $col_names_in_first_row) {                if ($_REQUEST['ods_empty_rows']) {                    foreach ($tempRow as $cell) {                        if (strcmp('NULL', $cell)) {                            $tempRows[] = $tempRow;                            break;                        }                    }                } else {                    $tempRows[] = $tempRow;                }            }            $col_count = 0;            $col_names_in_first_row = false;            $tempRow = array();        }    }    /* Skip over empty sheets */    if (count($tempRows) == 0 || count($tempRows[0]) == 0) {        $col_names = array();        $tempRow = array();        $tempRows = array();        continue;    }    /**     * Fill out each row as necessary to make     * every one exactly as wide as the widest     * row. This included column names.     */    /* Fill out column names */    for ($i = count($col_names); $i < $max_cols; ++$i) {        $col_names[] = PMA_getColumnAlphaName($i + 1);    }    /* Fill out all rows */    $num_rows = count($tempRows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($tempRows[$i]); $j < $max_cols; ++$j) {            $tempRows[$i][] = 'NULL';        }    }    /* Store the table name so we know where to place the row set */    $tbl_attr = $sheet->attributes('table', true);    $tables[] = array((string)$tbl_attr['name']);    /* Store the current sheet in the accumulator */    $rows[] = array((string)$tbl_attr['name'], $col_names, $tempRows);    $tempRows = array();    $col_names = array();    $max_cols = 0;}unset($tempRow);unset($tempRows);unset($col_names);unset($sheets);unset($xml);/** * Bring accumulated rows into the corresponding table */$num_tbls = count($tables);for ($i = 0; $i < $num_tbls; ++$i) {    for ($j = 0; $j < count($rows); ++$j) {        if (! strcmp($tables[$i][TBL_NAME], $rows[$j][TBL_NAME])) {            if (! isset($tables[$i][COL_NAMES])) {                $tables[$i][] = $rows[$j][COL_NAMES];            }            $tables[$i][ROWS] = $rows[$j][ROWS];        }    }}/* No longer needed */unset($rows);/* Obtain the best-fit MySQL types for each column */$analyses = array();$len = count($tables);for ($i = 0; $i < $len; ++$i) {    $analyses[] = PMA_analyzeTable($tables[$i]);}/** * string $db_name (no backquotes) * * array $table = array(table_name, array() column_names, array()() rows) * array $tables = array of "$table"s * * array $analysis = array(array() column_types, array() column_sizes) * array $analyses = array of "$analysis"s * * array $create = array of SQL strings * * array $options = an associative array of options *//* Set database name to the currently selected one, if applicable */if (strlen($db)) {    $db_name = $db;    $options = array('create_db' => false);} else {    $db_name = 'ODS_DB';    $options = null;}/* Non-applicable parameters */$create = null;/* Created and execute necessary SQL statements from data */PMA_buildSQL($db_name, $tables, $analyses, $create, $options);unset($tables);unset($analyses);/* Commit any possible data in buffers */PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Displays the links */require './libraries/server_links.inc.php';$export_page_title = __('View dump (schema) of databases') . "\n";$checkall_url = 'server_export.php?'              . PMA_generate_common_url()              . '&amp;goto=db_export.php';$multi_values = '<div align="left">';$multi_values .= '<a href="' . $checkall_url . '&amp;selectall=1" onclick="setSelectOptions(\'dump\', \'db_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'db_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="db_select[]" id="db_select" size="10" multiple="multiple">';$multi_values .= "\n";// Check if the selected databases are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['db_select'])) {    $_GET['db_select'] = urldecode($_GET['db_select']);    $_GET['db_select'] = explode(",", $_GET['db_select']);}foreach ($GLOBALS['pma']->databases as $current_db) {    if (isset($_GET['db_select'])) {        if (in_array($current_db, $_GET['db_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (!empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    $current_db   = htmlspecialchars($current_db);    $multi_values .= '                <option value="' . $current_db . '"' . $is_selected . '>' . $current_db . '</option>' . "\n";} // end while$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'server';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays status variables with descriptions and some hints an optmizing *  + reset status variables * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_header_sent'] = true;}require_once './libraries/common.inc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    // real-time charting data    if (isset($_REQUEST['chart_data'])) {        switch($_REQUEST['type']) {        // Process and Connections realtime chart        case 'proc':            $c = PMA_DBI_fetch_result("SHOW GLOBAL STATUS WHERE Variable_name = 'Connections'", 0, 1);            $result = PMA_DBI_query('SHOW PROCESSLIST');            $num_procs = PMA_DBI_num_rows($result);            $ret = array(                'x'      => microtime(true) * 1000,                'y_proc' => $num_procs,                'y_conn' => $c['Connections']            );            exit(json_encode($ret));        // Query realtime chart        case 'queries':            if (PMA_DRIZZLE) {                $sql = "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS                    WHERE variable_value > 0                      UNION                    SELECT variable_name, variable_value                    FROM data_dictionary.GLOBAL_STATUS                    WHERE variable_name = 'Questions'";                $queries = PMA_DBI_fetch_result($sql, 0, 1);            } else {                $queries = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE (Variable_name LIKE 'Com_%' OR Variable_name = 'Questions')                        AND Value > 0", 0, 1                );            }            cleanDeprecated($queries);            // admin commands are not queries            unset($queries['Com_admin_commands']);            $questions = $queries['Questions'];            unset($queries['Questions']);            //$sum=array_sum($queries);            $ret = array(                'x'         => microtime(true) * 1000,                'y'         => $questions,                'pointInfo' => $queries            );            exit(json_encode($ret));        // Traffic realtime chart        case 'traffic':            $traffic = PMA_DBI_fetch_result(                "SHOW GLOBAL STATUS                WHERE Variable_name = 'Bytes_received'                    OR Variable_name = 'Bytes_sent'", 0, 1            );            $ret = array(                'x'          => microtime(true) * 1000,                'y_sent'     => $traffic['Bytes_sent'],                'y_received' => $traffic['Bytes_received']            );            exit(json_encode($ret));        // Data for the monitor        case 'chartgrid':            $ret = json_decode($_REQUEST['requiredData'], true);            $statusVars = array();            $serverVars = array();            $sysinfo = $cpuload = $memory = 0;            $pName = '';            /* Accumulate all required variables and data */            // For each chart            foreach ($ret as $chart_id => $chartNodes) {                // For each data series                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    // For each data point in the series (usually just 1)                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        $pName = $dataPoint['name'];                        switch ($dataPoint['type']) {                        /* We only collect the status and server variables here to                         * read them all in one query, and only afterwards assign them.                         * Also do some white list filtering on the names                        */                        case 'servervar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $serverVars[] = $pName;                            }                            break;                        case 'statusvar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $statusVars[] = $pName;                            }                            break;                        case 'proc':                            $result = PMA_DBI_query('SHOW PROCESSLIST');                            $ret[$chart_id][$node_id][$point_id]['value'] = PMA_DBI_num_rows($result);                            break;                        case 'cpu':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$cpuload) {                                $cpuload = $sysinfo->loadavg();                            }                            if (PHP_OS == 'Linux') {                                $ret[$chart_id][$node_id][$point_id]['idle'] = $cpuload['idle'];                                $ret[$chart_id][$node_id][$point_id]['busy'] = $cpuload['busy'];                            } else                                $ret[$chart_id][$node_id][$point_id]['value'] = $cpuload['loadavg'];                            break;                        case 'memory':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$memory) {                                $memory  = $sysinfo->memory();                            }                            $ret[$chart_id][$node_id][$point_id]['value'] = $memory[$pName];                            break;                        } /* switch */                    } /* foreach */                } /* foreach */            } /* foreach */            // Retrieve all required status variables            if (count($statusVars)) {                $statusVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE Variable_name='" . implode("' OR Variable_name='", $statusVars) . "'", 0, 1                );            } else {                $statusVarValues = array();            }            // Retrieve all required server variables            if (count($serverVars)) {                $serverVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL VARIABLES                    WHERE Variable_name='" . implode("' OR Variable_name='", $serverVars) . "'", 0, 1                );            } else {                $serverVarValues = array();            }            // ...and now assign them            foreach ($ret as $chart_id => $chartNodes) {                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        switch($dataPoint['type']) {                        case 'statusvar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $statusVarValues[$dataPoint['name']];                            break;                        case 'servervar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $serverVarValues[$dataPoint['name']];                            break;                        }                    }                }            }            $ret['x'] = microtime(true) * 1000;            exit(json_encode($ret));        }    }    if (isset($_REQUEST['log_data'])) {        if (PMA_MYSQL_INT_VERSION < 50106) {            /* FIXME: why this? */            exit('""');        }        $start = intval($_REQUEST['time_start']);        $end = intval($_REQUEST['time_end']);        if ($_REQUEST['type'] == 'slow') {            $q = 'SELECT start_time, user_host, Sec_to_Time(Sum(Time_to_Sec(query_time))) as query_time, Sec_to_Time(Sum(Time_to_Sec(lock_time))) as lock_time, '.                 'SUM(rows_sent) AS rows_sent, SUM(rows_examined) AS rows_examined, db, sql_text, COUNT(sql_text) AS \'#\' '.                 'FROM `mysql`.`slow_log` WHERE start_time > FROM_UNIXTIME(' . $start . ') '.                 'AND start_time < FROM_UNIXTIME(' . $end . ') GROUP BY sql_text';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            while ($row = PMA_DBI_fetch_assoc($result)) {                $type = strtolower(substr($row['sql_text'], 0, strpos($row['sql_text'], ' ')));                switch($type) {                case 'insert':                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['sql_text']) > 220) {                        $row['sql_text'] = substr($row['sql_text'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['sql_text']), 2, 2))                            . ']';                    }                    break;                default:                    break;                }                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                $return['rows'][] = $row;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }        if ($_REQUEST['type'] == 'general') {            $limitTypes = (isset($_REQUEST['limitTypes']) && $_REQUEST['limitTypes'])                            ? 'AND argument REGEXP \'^(INSERT|SELECT|UPDATE|DELETE)\' ' : '';            $q = 'SELECT TIME(event_time) as event_time, user_host, thread_id, server_id, argument, count(argument) as \'#\' '.                 'FROM `mysql`.`general_log` WHERE command_type=\'Query\' '.                 'AND event_time > FROM_UNIXTIME(' . $start . ') AND event_time < FROM_UNIXTIME(' . $end . ') '.                 $limitTypes . 'GROUP by argument'; // HAVING count > 1';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            $insertTables = array();            $insertTablesFirst = -1;            $i = 0;            $removeVars = isset($_REQUEST['removeVariables']) && $_REQUEST['removeVariables'];            while ($row = PMA_DBI_fetch_assoc($result)) {                preg_match('/^(\w+)\s/', $row['argument'], $match);                $type = strtolower($match[1]);                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                switch($type) {                case 'insert':                    // Group inserts if selected                    if ($removeVars && preg_match('/^INSERT INTO (`|\'|"|)([^\s\\1]+)\\1/i', $row['argument'], $matches)) {                        $insertTables[$matches[2]]++;                        if ($insertTables[$matches[2]] > 1) {                            $return['rows'][$insertTablesFirst]['#'] = $insertTables[$matches[2]];                            // Add a ... to the end of this query to indicate that there's been other queries                            if ($return['rows'][$insertTablesFirst]['argument'][strlen($return['rows'][$insertTablesFirst]['argument'])-1] != '.') {                                $return['rows'][$insertTablesFirst]['argument'] .= '<br/>...';                            }                            // Group this value, thus do not add to the result list                            continue 2;                        } else {                            $insertTablesFirst = $i;                            $insertTables[$matches[2]] += $row['#'] - 1;                        }                    }                    // No break here                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['argument']) > 220) {                        $row['argument'] = substr($row['argument'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['argument'])), 2, 2)                            . ']';                    }                    break;                default:                    break;                }                $return['rows'][] = $row;                $i++;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }    }    if (isset($_REQUEST['logging_vars'])) {        if (isset($_REQUEST['varName']) && isset($_REQUEST['varValue'])) {            $value = PMA_sqlAddslashes($_REQUEST['varValue']);            if (!is_numeric($value)) {                $value="'" . $value . "'";            }            if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName'])) {                PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value);            }        }        $loggingVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES WHERE Variable_name IN ("general_log","slow_query_log","long_query_time","log_output")', 0, 1);        exit(json_encode($loggingVars));    }    if (isset($_REQUEST['query_analyzer'])) {        $return = array();        if (strlen($_REQUEST['database'])) {            PMA_DBI_select_db($_REQUEST['database']);        }        if ($profiling = PMA_profilingSupported()) {            PMA_DBI_query('SET PROFILING=1;');        }        // Do not cache query        $query = preg_replace('/^(\s*SELECT)/i', '\\1 SQL_NO_CACHE', $_REQUEST['query']);        $result = PMA_DBI_try_query($query);        $return['affectedRows'] = $GLOBALS['cached_affected_rows'];        $result = PMA_DBI_try_query('EXPLAIN ' . $query);        while ($row = PMA_DBI_fetch_assoc($result)) {            $return['explain'][] = $row;        }        // In case an error happened        $return['error'] = PMA_DBI_getError();        PMA_DBI_free_result($result);        if ($profiling) {            $return['profiling'] = array();            $result = PMA_DBI_try_query('SELECT seq,state,duration FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID=1 ORDER BY seq');            while ($row = PMA_DBI_fetch_assoc($result)) {                $return['profiling'][]= $row;            }            PMA_DBI_free_result($result);        }        exit(json_encode($return));    }    if (isset($_REQUEST['advisor'])) {        include 'libraries/Advisor.class.php';        $advisor = new Advisor();        exit(json_encode($advisor->run()));    }}/** * Replication library */if (PMA_DRIZZLE) {    $server_master_status = false;    $server_slave_status = false;} else {    include_once './libraries/replication.inc.php';    include_once './libraries/replication_gui.lib.php';}/** * JS Includes */$GLOBALS['js_include'][] = 'server_status.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js'; // For tab persistence// Charting$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * flush status variables if requested */if (isset($_REQUEST['flush'])) {    $_flush_commands = array(        'STATUS',        'TABLES',        'QUERY CACHE',    );    if (in_array($_REQUEST['flush'], $_flush_commands)) {        PMA_DBI_query('FLUSH ' . $_REQUEST['flush'] . ';');    }    unset($_flush_commands);}/** * Kills a selected process */if (!empty($_REQUEST['kill'])) {    if (PMA_DBI_try_query('KILL ' . $_REQUEST['kill'] . ';')) {        $message = PMA_Message::success(__('Thread %s was successfully killed.'));    } else {        $message = PMA_Message::error(__('phpMyAdmin was unable to kill thread %s. It probably has already been closed.'));    }    $message->addParam($_REQUEST['kill']);    //$message->display();}/** * get status from server */$server_status = PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1);if (PMA_DRIZZLE) {    // Drizzle doesn't put query statistics into variables, add it    $sql = "SELECT concat('Com_', variable_name), variable_value        FROM data_dictionary.GLOBAL_STATEMENTS";    $statements = PMA_DBI_fetch_result($sql, 0, 1);    $server_status = array_merge($server_status, $statements);}/** * for some calculations we require also some server settings */$server_variables = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1);/** * cleanup of some deprecated values */cleanDeprecated($server_status);/** * calculate some values */// Key_buffer_fractionif (isset($server_status['Key_blocks_unused'])    && isset($server_variables['key_cache_block_size'])    && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = 100        - $server_status['Key_blocks_unused']        * $server_variables['key_cache_block_size']        / $server_variables['key_buffer_size']        * 100;} elseif (isset($server_status['Key_blocks_used'])        && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = $server_status['Key_blocks_used']        * 1024        / $server_variables['key_buffer_size'];}// Ratio for key read/writeif (isset($server_status['Key_writes'])    && isset($server_status['Key_write_requests'])    && $server_status['Key_write_requests'] > 0) {    $server_status['Key_write_ratio_%'] = 100 * $server_status['Key_writes'] / $server_status['Key_write_requests'];}if (isset($server_status['Key_reads'])    && isset($server_status['Key_read_requests'])    && $server_status['Key_read_requests'] > 0) {    $server_status['Key_read_ratio_%'] = 100 * $server_status['Key_reads'] / $server_status['Key_read_requests'];}// Threads_cache_hitrateif (isset($server_status['Threads_created'])    && isset($server_status['Connections'])    && $server_status['Connections'] > 0) {    $server_status['Threads_cache_hitrate_%']        = 100 - $server_status['Threads_created'] / $server_status['Connections'] * 100;}/** * split variables in sections */$allocations = array(    // variable name => section    // variable names match when they begin with the given string    'Com_'              => 'com',    'Innodb_'           => 'innodb',    'Ndb_'              => 'ndb',    'Handler_'          => 'handler',    'Qcache_'           => 'qcache',    'Threads_'          => 'threads',    'Slow_launch_threads' => 'threads',    'Binlog_cache_'     => 'binlog_cache',    'Created_tmp_'      => 'created_tmp',    'Key_'              => 'key',    'Delayed_'          => 'delayed',    'Not_flushed_delayed_rows' => 'delayed',    'Flush_commands'    => 'query',    'Last_query_cost'   => 'query',    'Slow_queries'      => 'query',    'Queries'           => 'query',    'Prepared_stmt_count' => 'query',    'Select_'           => 'select',    'Sort_'             => 'sort',    'Open_tables'       => 'table',    'Opened_tables'     => 'table',    'Open_table_definitions' => 'table',    'Opened_table_definitions' => 'table',    'Table_locks_'      => 'table',    'Rpl_status'        => 'repl',    'Slave_'            => 'repl',    'Tc_'               => 'tc',    'Ssl_'              => 'ssl',    'Open_files'        => 'files',    'Open_streams'      => 'files',    'Opened_files'      => 'files',);$sections = array(    // section => section name (description)    'com'           => 'Com',    'query'         => __('SQL query'),    'innodb'        => 'InnoDB',    'ndb'           => 'NDB',    'handler'       => __('Handler'),    'qcache'        => __('Query cache'),    'threads'       => __('Threads'),    'binlog_cache'  => __('Binary log'),    'created_tmp'   => __('Temporary data'),    'delayed'       => __('Delayed inserts'),    'key'           => __('Key cache'),    'select'        => __('Joins'),    'repl'          => __('Replication'),    'sort'          => __('Sorting'),    'table'         => __('Tables'),    'tc'            => __('Transaction coordinator'),    'files'         => __('Files'),    'ssl'           => 'SSL',    'other'         => __('Other'));/** * define some needfull links/commands */// variable or section name => (name => url)$links = array();$links['table'][__('Flush (close) all tables')]    = $PMA_PHP_SELF . '?flush=TABLES&amp;' . PMA_generate_common_url();$links['table'][__('Show open tables')]    = 'sql.php?sql_query=' . urlencode('SHOW OPEN TABLES') .        '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();if ($server_master_status) {    $links['repl'][__('Show slave hosts')]        = 'sql.php?sql_query=' . urlencode('SHOW SLAVE HOSTS') .            '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();    $links['repl'][__('Show master status')] = '#replication_master';}if ($server_slave_status) {    $links['repl'][__('Show slave status')] = '#replication_slave';}$links['repl']['doc'] = 'replication';$links['qcache'][__('Flush query cache')]    = $PMA_PHP_SELF . '?flush=' . urlencode('QUERY CACHE') . '&amp;' .        PMA_generate_common_url();$links['qcache']['doc'] = 'query_cache';//$links['threads'][__('Show processes')]//    = 'server_processlist.php?' . PMA_generate_common_url();$links['threads']['doc'] = 'mysql_threads';$links['key']['doc'] = 'myisam_key_cache';$links['binlog_cache']['doc'] = 'binary_log';$links['Slow_queries']['doc'] = 'slow_query_log';$links['innodb'][__('Variables')]    = 'server_engines.php?engine=InnoDB&amp;' . PMA_generate_common_url();$links['innodb'][__('InnoDB Status')]    = 'server_engines.php?engine=InnoDB&amp;page=Status&amp;' .        PMA_generate_common_url();$links['innodb']['doc'] = 'innodb';// Variable to contain all com_ variables (query statistics)$used_queries = array();// Variable to map variable names to their respective section name// (used for js category filtering)$allocationMap = array();// Variable to mark used sections$categoryUsed = array();// sort vars into arraysforeach ($server_status as $name => $value) {    $section_found = false;    foreach ($allocations as $filter => $section) {        if (strpos($name, $filter) !== false) {            $allocationMap[$name] = $section;            $categoryUsed[$section] = true;            $section_found = true;            if ($section == 'com' && $value > 0) {                $used_queries[$name] = $value;            }            break; // Only exits inner loop        }    }    if (!$section_found) {        $allocationMap[$name] = 'other';        $categoryUsed['other'] = true;    }}if (PMA_DRIZZLE) {    $used_queries = PMA_DBI_fetch_result(        'SELECT * FROM data_dictionary.global_statements',        0,        1    );    unset($used_queries['admin_commands']);} else {    // admin commands are not queries (e.g. they include COM_PING,    // which is excluded from $server_status['Questions'])    unset($used_queries['Com_admin_commands']);}/* Ajax request refresh */if (isset($_REQUEST['show']) && isset($_REQUEST['ajax_request'])) {    switch($_REQUEST['show']) {    case 'query_statistics':        printQueryStatistics();        exit();    case 'server_traffic':        printServerTraffic();        exit();    case 'variables_table':        // Prints the variables table        printVariablesTable();        exit();    default:        break;    }}$server_db_isLocal = strtolower($cfg['Server']['host']) == 'localhost'                              || $cfg['Server']['host'] == '127.0.0.1'                              || $cfg['Server']['host'] == '::1';PMA_AddJSVar(    'pma_token',    $_SESSION[' PMA_token ']);PMA_AddJSVar(    'url_query',    str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar(    'server_time_diff',    'new Date().getTime() - ' . (microtime(true) * 1000),    false);PMA_AddJSVar(    'server_os',    PHP_OS);PMA_AddJSVar(    'is_superuser',    PMA_isSuperuser());PMA_AddJSVar(    'server_db_isLocal',    $server_db_isLocal);PMA_AddJSVar(    'profiling_docu',    PMA_showMySQLDocu('general-thread-states', 'general-thread-states'));PMA_AddJSVar(    'explain_docu',    PMA_showMySQLDocu('explain-output', 'explain-output'));/** * start output */ /** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';?><div id="serverstatus">    <h2><?php/** * Displays the sub-page heading */if ($GLOBALS['cfg']['MainPageIconic']) {    echo PMA_getImage('s_status.png');}echo __('Runtime Information');?></h2>    <div id="serverStatusTabs">        <ul>            <li><a href="#statustabs_traffic"><?php echo __('Server'); ?></a></li>            <li><a href="#statustabs_queries"><?php echo __('Query statistics'); ?></a></li>            <li><a href="#statustabs_allvars"><?php echo __('All status variables'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_charting"><?php echo __('Monitor'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_advisor"><?php echo __('Advisor'); ?></a></li>        </ul>        <div id="statustabs_traffic" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=server_traffic&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_trafficChartRefresh"><?php echo __('Refresh rate: '); ?></label>                    <?php refreshList('trafficChartRefresh'); ?>                </span>                <a class="tabChart livetrafficLink" href="#">                    <?php echo __('Live traffic chart'); ?>                </a>                <a class="tabChart liveconnectionsLink" href="#">                    <?php echo __('Live conn./process chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printServerTraffic(); ?>            </div>        </div>        <div id="statustabs_queries" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh"  href="<?php echo $PMA_PHP_SELF . '?show=query_statistics&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_queryChartRefresh"><?php echo __('Refresh rate: '); ?></label>                       <?php refreshList('queryChartRefresh'); ?>                </span>                <a class="tabChart livequeriesLink" href="#">                    <?php echo __('Live query chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printQueryStatistics(); ?>            </div>        </div>        <div id="statustabs_allvars" class="clearfloat">            <fieldset id="tableFilter" class="jsfeature">                <div class="buttonlinks">                    <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=variables_table&amp;' . PMA_generate_common_url(); ?>" >                        <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                        <?php echo __('Refresh'); ?>                    </a>                </div>                <legend><?php echo __('Filters'); ?></legend>                <div class="formelement">                    <label for="filterText"><?php echo __('Containing the word:'); ?></label>                    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" />                </div>                <div class="formelement">                    <input type="checkbox" name="filterAlert" id="filterAlert" />                    <label for="filterAlert"><?php echo __('Show only alert values'); ?></label>                </div>                <div class="formelement">                    <select id="filterCategory" name="filterCategory">                        <option value=''><?php echo __('Filter by category...'); ?></option>                <?php                        foreach ($sections as $section_id => $section_name) {                            if (isset($categoryUsed[$section_id])) {                ?>                                <option value='<?php echo $section_id; ?>'><?php echo $section_name; ?></option>                <?php                            }                        }                ?>                    </select>                </div>                <div class="formelement">                    <input type="checkbox" name="dontFormat" id="dontFormat" />                    <label for="dontFormat"><?php echo __('Show unformatted values'); ?></label>                </div>            </fieldset>            <div id="linkSuggestions" class="defaultLinks" style="display:none">                <p class="notice"><?php echo __('Related links:'); ?>                <?php                foreach ($links as $section_name => $section_links) {                    echo '<span class="status_' . $section_name . '"> ';                    $i=0;                    foreach ($section_links as $link_name => $link_url) {                        if ($i > 0) {                            echo ', ';                        }                        if ('doc' == $link_name) {                            echo PMA_showMySQLDocu($link_url, $link_url);                        } else {                            echo '<a href="' . $link_url . '">' . $link_name . '</a>';                        }                        $i++;                    }                    echo '</span>';                }                unset($link_url, $link_name, $i);                ?>                </p>            </div>            <div class="tabInnerContent">                <?php printVariablesTable(); ?>            </div>        </div>        <div id="statustabs_charting" class="jsfeature">            <?php printMonitor(); ?>        </div>        <div id="statustabs_advisor" class="jsfeature">            <div class="tabLinks">                <?php echo PMA_getImage('play.png'); ?> <a href="#startAnalyzer"><?php echo __('Run analyzer'); ?></a>                <?php echo PMA_getImage('b_help.png'); ?> <a href="#openAdvisorInstructions"><?php echo __('Instructions'); ?></a>            </div>            <div class="tabInnerContent clearfloat">            </div>            <div id="advisorInstructionsDialog" style="display:none;">            <?php            echo '<p>';            echo __('The Advisor system can provide recommendations on server variables by analyzing the server status variables.');            echo '</p> <p>';            echo __('Do note however that this system provides recommendations based on simple calculations and by rule of thumb which may not necessarily apply to your system.');            echo '</p> <p>';            echo __('Prior to changing any of the configuration, be sure to know what you are changing (by reading the documentation) and how to undo the change. Wrong tuning can have a very negative effect on performance.');            echo '</p> <p>';            echo __('The best way to tune your system would be to change only one setting at a time, observe or benchmark your database, and undo the change if there was no clearly measurable improvement.');            echo '</p>';            ?>            </div>        </div>    </div></div><?phpfunction printQueryStatistics(){    global $server_status, $used_queries, $url_query, $PMA_PHP_SELF;    $hour_factor   = 3600 / $server_status['Uptime'];    $total_queries = array_sum($used_queries);    ?>    <h3 id="serverstatusqueries">        <?php        /* l10n: Questions is the name of a MySQL Status variable */        echo sprintf(__('Questions since startup: %s'), PMA_formatNumber($total_queries, 0)) . ' ';        echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_Questions');        ?>        <br />        <span>        <?php        echo '&oslash; ' . __('per hour') . ': ';        echo PMA_formatNumber($total_queries * $hour_factor, 0);        echo '<br />';        echo '&oslash; ' . __('per minute') . ': ';        echo PMA_formatNumber($total_queries * 60 / $server_status['Uptime'], 0);        echo '<br />';        if ($total_queries / $server_status['Uptime'] >= 1) {            echo '&oslash; ' . __('per second') . ': ';            echo PMA_formatNumber($total_queries / $server_status['Uptime'], 0);        }        ?>        </span>    </h3>    <?php    // reverse sort by value to show most used statements first    arsort($used_queries);    $odd_row        = true;    $count_displayed_rows = 0;    $perc_factor    = 100 / $total_queries; //(- $server_status['Connections']);    ?>        <table id="serverstatusqueriesdetails" class="data sortable noclick">        <col class="namecol" />        <col class="valuecol" span="3" />        <thead>            <tr><th><?php echo __('Statements'); ?></th>                <th><?php                    /* l10n: # = Amount of queries */                    echo __('#');                    ?>                </th>                <th>&oslash; <?php echo __('per hour'); ?></th>                <th>%</th>            </tr>        </thead>        <tbody>    <?php    $chart_json = array();    $query_sum = array_sum($used_queries);    $other_sum = 0;    foreach ($used_queries as $name => $value) {        $odd_row = !$odd_row;        // For the percentage column, use Questions - Connections, because        // the number of connections is not an item of the Query types        // but is included in Questions. Then the total of the percentages is 100.        $name = str_replace(array('Com_', '_'), array('', ' '), $name);        // Group together values that make out less than 2% into "Other", but only if we have more than 6 fractions already        if ($value < $query_sum * 0.02 && count($chart_json)>6) {            $other_sum += $value;        } else {            $chart_json[$name] = $value;        }    ?>            <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">                <th class="name"><?php echo htmlspecialchars($name); ?></th>                <td class="value"><?php echo htmlspecialchars(PMA_formatNumber($value, 5, 0, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $hour_factor, 4, 1, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $perc_factor, 0, 2)); ?>%</td>            </tr>    <?php    }    ?>        </tbody>        </table>        <div id="serverstatusquerieschart">            <span style="display:none;">        <?php            if ($other_sum > 0) {                $chart_json[__('Other')] = $other_sum;            }            echo json_encode($chart_json);        ?>            </span>        </div>        <?php}function printServerTraffic(){    global $server_status, $PMA_PHP_SELF;    global $server_master_status, $server_slave_status, $replication_types;    $hour_factor    = 3600 / $server_status['Uptime'];    /**     * starttime calculation     */    $start_time = PMA_DBI_fetch_value(        'SELECT UNIX_TIMESTAMP() - ' . $server_status['Uptime']    );    ?>    <h3><?php    echo sprintf(        __('Network traffic since startup: %s'),        implode(' ', PMA_formatByteDown($server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1))    );    ?>    </h3>    <p>    <?php    echo sprintf(        __('This MySQL server has been running for %1$s. It started up on %2$s.'),        PMA_timespanFormat($server_status['Uptime']),        PMA_localisedDate($start_time)    ) . "\n";    ?>    </p>    <?php    if ($server_master_status || $server_slave_status) {        echo '<p class="notice">';        if ($server_master_status && $server_slave_status) {            echo __('This MySQL server works as <b>master</b> and <b>slave</b> in <b>replication</b> process.');        } elseif ($server_master_status) {            echo __('This MySQL server works as <b>master</b> in <b>replication</b> process.');        } elseif ($server_slave_status) {            echo __('This MySQL server works as <b>slave</b> in <b>replication</b> process.');        }        echo ' ';        echo __('For further information about replication status on the server, please visit the <a href="#replication">replication section</a>.');        echo '</p>';    }    /* if the server works as master or slave in replication process, display useful information */    if ($server_master_status || $server_slave_status) {    ?>      <hr class="clearfloat" />      <h3><a name="replication"></a><?php echo __('Replication status'); ?></h3>    <?php        foreach ($replication_types as $type) {            if (${"server_{$type}_status"}) {                PMA_replication_print_status_table($type);            }        }        unset($types);    }    ?>    <table id="serverstatustraffic" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Traffic') . '&nbsp;' . PMA_showHint(__('On a busy server, the byte counters may overrun, so those statistics as reported by the MySQL server may be incorrect.')); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('Received'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_received'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Sent'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_sent'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_sent'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1)            ); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    ($server_status['Bytes_received'] + $server_status['Bytes_sent'])                    * $hour_factor, 3, 1)            ); ?></td>    </tr>    </tbody>    </table>    <table id="serverstatusconnections" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Connections'); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>        <th>%</th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('max. concurrent connections'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Max_used_connections'], 0); ?>  </td>        <td class="value">--- </td>        <td class="value">--- </td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Failed attempts'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_connects'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Aborted'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_clients'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'], 4, 0); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'] * $hour_factor,                4, 2); ?></td>        <td class="value"><?php echo            PMA_formatNumber(100, 0, 2); ?>%</td>    </tr>    </tbody>    </table>    <?php    $url_params = array();    $show_full_sql = !empty($_REQUEST['full']);    if ($show_full_sql) {        $url_params['full'] = 1;        $full_text_link = 'server_status.php' . PMA_generate_common_url(array(), 'html', '?');    } else {        $full_text_link = 'server_status.php' . PMA_generate_common_url(array('full' => 1));    }    if (PMA_DRIZZLE) {        $sql_query = "SELECT                p.id       AS Id,                p.username AS User,                p.host     AS Host,                p.db       AS db,                p.command  AS Command,                p.time     AS Time,                p.state    AS State,                " . ($show_full_sql ? 's.query' : 'left(p.info, ' . (int)$GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] . ')') . " AS Info            FROM data_dictionary.PROCESSLIST p                " . ($show_full_sql ? 'LEFT JOIN data_dictionary.SESSIONS s ON s.session_id = p.id' : '');    } else {        $sql_query = $show_full_sql            ? 'SHOW FULL PROCESSLIST'            : 'SHOW PROCESSLIST';    }    $result = PMA_DBI_query($sql_query);    /**     * Displays the page     */    ?>    <table id="tableprocesslist" class="data clearfloat noclick">    <thead>    <tr>        <th><?php echo __('Processes'); ?></th>        <th><?php echo __('ID'); ?></th>        <th><?php echo __('User'); ?></th>        <th><?php echo __('Host'); ?></th>        <th><?php echo __('Database'); ?></th>        <th><?php echo __('Command'); ?></th>        <th><?php echo __('Time'); ?></th>        <th><?php echo __('Status'); ?></th>        <th><?php            echo __('SQL query');            if (! PMA_DRIZZLE) {                ?>            <a href="<?php echo $full_text_link; ?>"                title="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>">                <img src="<?php echo $GLOBALS['pmaThemeImage'] . 's_' . ($show_full_sql ? 'partial' : 'full'); ?>text.png"                alt="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>" />            </a>            <?php } ?>        </th>    </tr>    </thead>    <tbody>    <?php    $odd_row = true;    while ($process = PMA_DBI_fetch_assoc($result)) {        $url_params['kill'] = $process['Id'];        $kill_process = 'server_status.php' . PMA_generate_common_url($url_params);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><a href="<?php echo $kill_process ; ?>"><?php echo __('Kill'); ?></a></td>        <td class="value"><?php echo $process['Id']; ?></td>        <td><?php echo $process['User']; ?></td>        <td><?php echo $process['Host']; ?></td>        <td><?php echo ((! isset($process['db']) || ! strlen($process['db'])) ? '<i>' . __('None') . '</i>' : $process['db']); ?></td>        <td><?php echo $process['Command']; ?></td>        <td class="value"><?php echo $process['Time']; ?></td>        <td><?php echo (empty($process['State']) ? '---' : $process['State']); ?></td>        <td>        <?php        if (empty($process['Info'])) {            echo '---';        } else {            if (!$show_full_sql && strlen($process['Info']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                echo htmlspecialchars(substr($process['Info'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';            } else {                echo PMA_SQP_formatHtml(PMA_SQP_parse($process['Info']));            }        }        ?>        </td>    </tr>        <?php        $odd_row = ! $odd_row;    }    ?>    </tbody>    </table>    <?php}function printVariablesTable(){    global $server_status, $server_variables, $allocationMap, $links;    /**     * Messages are built using the message name     */    $strShowStatus = array(        'Aborted_clients' => __('The number of connections that were aborted because the client died without closing the connection properly.'),        'Aborted_connects' => __('The number of failed attempts to connect to the MySQL server.'),        'Binlog_cache_disk_use' => __('The number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size and used a temporary file to store statements from the transaction.'),        'Binlog_cache_use' => __('The number of transactions that used the temporary binary log cache.'),        'Connections' => __('The number of connection attempts (successful or not) to the MySQL server.'),        'Created_tmp_disk_tables' => __('The number of temporary tables on disk created automatically by the server while executing statements. If Created_tmp_disk_tables is big, you may want to increase the tmp_table_size  value to cause temporary tables to be memory-based instead of disk-based.'),        'Created_tmp_files' => __('How many temporary files mysqld has created.'),        'Created_tmp_tables' => __('The number of in-memory temporary tables created automatically by the server while executing statements.'),        'Delayed_errors' => __('The number of rows written with INSERT DELAYED for which some error occurred (probably duplicate key).'),        'Delayed_insert_threads' => __('The number of INSERT DELAYED handler threads in use. Every different table on which one uses INSERT DELAYED gets its own thread.'),        'Delayed_writes' => __('The number of INSERT DELAYED rows written.'),        'Flush_commands'  => __('The number of executed FLUSH statements.'),        'Handler_commit' => __('The number of internal COMMIT statements.'),        'Handler_delete' => __('The number of times a row was deleted from a table.'),        'Handler_discover' => __('The MySQL server can ask the NDB Cluster storage engine if it knows about a table with a given name. This is called discovery. Handler_discover indicates the number of time tables have been discovered.'),        'Handler_read_first' => __('The number of times the first entry was read from an index. If this is high, it suggests that the server is doing a lot of full index scans; for example, SELECT col1 FROM foo, assuming that col1 is indexed.'),        'Handler_read_key' => __('The number of requests to read a row based on a key. If this is high, it is a good indication that your queries and tables are properly indexed.'),        'Handler_read_next' => __('The number of requests to read the next row in key order. This is incremented if you are querying an index column with a range constraint or if you are doing an index scan.'),        'Handler_read_prev' => __('The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ... DESC.'),        'Handler_read_rnd' => __('The number of requests to read a row based on a fixed position. This is high if you are doing a lot of queries that require sorting of the result. You probably have a lot of queries that require MySQL to scan whole tables or you have joins that don\'t use keys properly.'),        'Handler_read_rnd_next' => __('The number of requests to read the next row in the data file. This is high if you are doing a lot of table scans. Generally this suggests that your tables are not properly indexed or that your queries are not written to take advantage of the indexes you have.'),        'Handler_rollback' => __('The number of internal ROLLBACK statements.'),        'Handler_update' => __('The number of requests to update a row in a table.'),        'Handler_write' => __('The number of requests to insert a row in a table.'),        'Innodb_buffer_pool_pages_data' => __('The number of pages containing data (dirty or clean).'),        'Innodb_buffer_pool_pages_dirty' => __('The number of pages currently dirty.'),        'Innodb_buffer_pool_pages_flushed' => __('The number of buffer pool pages that have been requested to be flushed.'),        'Innodb_buffer_pool_pages_free' => __('The number of free pages.'),        'Innodb_buffer_pool_pages_latched' => __('The number of latched pages in InnoDB buffer pool. These are pages currently being read or written or that can\'t be flushed or removed for some other reason.'),        'Innodb_buffer_pool_pages_misc' => __('The number of pages busy because they have been allocated for administrative overhead such as row locks or the adaptive hash index. This value can also be calculated as Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data.'),        'Innodb_buffer_pool_pages_total' => __('Total size of buffer pool, in pages.'),        'Innodb_buffer_pool_read_ahead_rnd' => __('The number of "random" read-aheads InnoDB initiated. This happens when a query is to scan a large portion of a table but in random order.'),        'Innodb_buffer_pool_read_ahead_seq' => __('The number of sequential read-aheads InnoDB initiated. This happens when InnoDB does a sequential full table scan.'),        'Innodb_buffer_pool_read_requests' => __('The number of logical read requests InnoDB has done.'),        'Innodb_buffer_pool_reads' => __('The number of logical reads that InnoDB could not satisfy from buffer pool and had to do a single-page read.'),        'Innodb_buffer_pool_wait_free' => __('Normally, writes to the InnoDB buffer pool happen in the background. However, if it\'s necessary to read or create a page and no clean pages are available, it\'s necessary to wait for pages to be flushed first. This counter counts instances of these waits. If the buffer pool size was set properly, this value should be small.'),        'Innodb_buffer_pool_write_requests' => __('The number writes done to the InnoDB buffer pool.'),        'Innodb_data_fsyncs' => __('The number of fsync() operations so far.'),        'Innodb_data_pending_fsyncs' => __('The current number of pending fsync() operations.'),        'Innodb_data_pending_reads' => __('The current number of pending reads.'),        'Innodb_data_pending_writes' => __('The current number of pending writes.'),        'Innodb_data_read' => __('The amount of data read so far, in bytes.'),        'Innodb_data_reads' => __('The total number of data reads.'),        'Innodb_data_writes' => __('The total number of data writes.'),        'Innodb_data_written' => __('The amount of data written so far, in bytes.'),        'Innodb_dblwr_pages_written' => __('The number of pages that have been written for doublewrite operations.'),        'Innodb_dblwr_writes' => __('The number of doublewrite operations that have been performed.'),        'Innodb_log_waits' => __('The number of waits we had because log buffer was too small and we had to wait for it to be flushed before continuing.'),        'Innodb_log_write_requests' => __('The number of log write requests.'),        'Innodb_log_writes' => __('The number of physical writes to the log file.'),        'Innodb_os_log_fsyncs' => __('The number of fsync() writes done to the log file.'),        'Innodb_os_log_pending_fsyncs' => __('The number of pending log file fsyncs.'),        'Innodb_os_log_pending_writes' => __('Pending log file writes.'),        'Innodb_os_log_written' => __('The number of bytes written to the log file.'),        'Innodb_pages_created' => __('The number of pages created.'),        'Innodb_page_size' => __('The compiled-in InnoDB page size (default 16KB). Many values are counted in pages; the page size allows them to be easily converted to bytes.'),        'Innodb_pages_read' => __('The number of pages read.'),        'Innodb_pages_written' => __('The number of pages written.'),        'Innodb_row_lock_current_waits' => __('The number of row locks currently being waited for.'),        'Innodb_row_lock_time_avg' => __('The average time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_time' => __('The total time spent in acquiring row locks, in milliseconds.'),        'Innodb_row_lock_time_max' => __('The maximum time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_waits' => __('The number of times a row lock had to be waited for.'),        'Innodb_rows_deleted' => __('The number of rows deleted from InnoDB tables.'),        'Innodb_rows_inserted' => __('The number of rows inserted in InnoDB tables.'),        'Innodb_rows_read' => __('The number of rows read from InnoDB tables.'),        'Innodb_rows_updated' => __('The number of rows updated in InnoDB tables.'),        'Key_blocks_not_flushed' => __('The number of key blocks in the key cache that have changed but haven\'t yet been flushed to disk. It used to be known as Not_flushed_key_blocks.'),        'Key_blocks_unused' => __('The number of unused blocks in the key cache. You can use this value to determine how much of the key cache is in use.'),        'Key_blocks_used' => __('The number of used blocks in the key cache. This value is a high-water mark that indicates the maximum number of blocks that have ever been in use at one time.'),        'Key_read_requests' => __('The number of requests to read a key block from the cache.'),        'Key_reads' => __('The number of physical reads of a key block from disk. If Key_reads is big, then your key_buffer_size value is probably too small. The cache miss rate can be calculated as Key_reads/Key_read_requests.'),        'Key_write_requests' => __('The number of requests to write a key block to the cache.'),        'Key_writes' => __('The number of physical writes of a key block to disk.'),        'Last_query_cost' => __('The total cost of the last compiled query as computed by the query optimizer. Useful for comparing the cost of different query plans for the same query. The default value of 0 means that no query has been compiled yet.'),        'Max_used_connections' => __('The maximum number of connections that have been in use simultaneously since the server started.'),        'Not_flushed_delayed_rows' => __('The number of rows waiting to be written in INSERT DELAYED queues.'),        'Opened_tables' => __('The number of tables that have been opened. If opened tables is big, your table cache value is probably too small.'),        'Open_files' => __('The number of files that are open.'),        'Open_streams' => __('The number of streams that are open (used mainly for logging).'),        'Open_tables' => __('The number of tables that are open.'),        'Qcache_free_blocks' => __('The number of free memory blocks in query cache. High numbers can indicate fragmentation issues, which may be solved by issuing a FLUSH QUERY CACHE statement.'),        'Qcache_free_memory' => __('The amount of free memory for query cache.'),        'Qcache_hits' => __('The number of cache hits.'),        'Qcache_inserts' => __('The number of queries added to the cache.'),        'Qcache_lowmem_prunes' => __('The number of queries that have been removed from the cache to free up memory for caching new queries. This information can help you tune the query cache size. The query cache uses a least recently used (LRU) strategy to decide which queries to remove from the cache.'),        'Qcache_not_cached' => __('The number of non-cached queries (not cachable, or not cached due to the query_cache_type setting).'),        'Qcache_queries_in_cache' => __('The number of queries registered in the cache.'),        'Qcache_total_blocks' => __('The total number of blocks in the query cache.'),        'Rpl_status' => __('The status of failsafe replication (not yet implemented).'),        'Select_full_join' => __('The number of joins that do not use indexes. If this value is not 0, you should carefully check the indexes of your tables.'),        'Select_full_range_join' => __('The number of joins that used a range search on a reference table.'),        'Select_range_check' => __('The number of joins without keys that check for key usage after each row. (If this is not 0, you should carefully check the indexes of your tables.)'),        'Select_range' => __('The number of joins that used ranges on the first table. (It\'s normally not critical even if this is big.)'),        'Select_scan' => __('The number of joins that did a full scan of the first table.'),        'Slave_open_temp_tables' => __('The number of temporary tables currently open by the slave SQL thread.'),        'Slave_retried_transactions' => __('Total (since startup) number of times the replication slave SQL thread has retried transactions.'),        'Slave_running' => __('This is ON if this server is a slave that is connected to a master.'),        'Slow_launch_threads' => __('The number of threads that have taken more than slow_launch_time seconds to create.'),        'Slow_queries' => __('The number of queries that have taken more than long_query_time seconds.'),        'Sort_merge_passes' => __('The number of merge passes the sort algorithm has had to do. If this value is large, you should consider increasing the value of the sort_buffer_size system variable.'),        'Sort_range' => __('The number of sorts that were done with ranges.'),        'Sort_rows' => __('The number of sorted rows.'),        'Sort_scan' => __('The number of sorts that were done by scanning the table.'),        'Table_locks_immediate' => __('The number of times that a table lock was acquired immediately.'),        'Table_locks_waited' => __('The number of times that a table lock could not be acquired immediately and a wait was needed. If this is high, and you have performance problems, you should first optimize your queries, and then either split your table or tables or use replication.'),        'Threads_cached' => __('The number of threads in the thread cache. The cache hit rate can be calculated as Threads_created/Connections. If this value is red you should raise your thread_cache_size.'),        'Threads_connected' => __('The number of currently open connections.'),        'Threads_created' => __('The number of threads created to handle connections. If Threads_created is big, you may want to increase the thread_cache_size value. (Normally this doesn\'t give a notable performance improvement if you have a good thread implementation.)'),        'Threads_running' => __('The number of threads that are not sleeping.')    );    /**     * define some alerts     */    // name => max value before alert    $alerts = array(        // lower is better        // variable => max value        'Aborted_clients' => 0,        'Aborted_connects' => 0,        'Binlog_cache_disk_use' => 0,        'Created_tmp_disk_tables' => 0,        'Handler_read_rnd' => 0,        'Handler_read_rnd_next' => 0,        'Innodb_buffer_pool_pages_dirty' => 0,        'Innodb_buffer_pool_reads' => 0,        'Innodb_buffer_pool_wait_free' => 0,        'Innodb_log_waits' => 0,        'Innodb_row_lock_time_avg' => 10, // ms        'Innodb_row_lock_time_max' => 50, // ms        'Innodb_row_lock_waits' => 0,        'Slow_queries' => 0,        'Delayed_errors' => 0,        'Select_full_join' => 0,        'Select_range_check' => 0,        'Sort_merge_passes' => 0,        'Opened_tables' => 0,        'Table_locks_waited' => 0,        'Qcache_lowmem_prunes' => 0,        'Qcache_free_blocks' => isset($server_status['Qcache_total_blocks']) ? $server_status['Qcache_total_blocks'] / 5 : 0,        'Slow_launch_threads' => 0,        // depends on Key_read_requests        // normaly lower then 1:0.01        'Key_reads' => isset($server_status['Key_read_requests']) ? (0.01 * $server_status['Key_read_requests']) : 0,        // depends on Key_write_requests        // normaly nearly 1:1        'Key_writes' => isset($server_status['Key_write_requests']) ? (0.9 * $server_status['Key_write_requests']) : 0,        'Key_buffer_fraction' => 0.5,        // alert if more than 95% of thread cache is in use        'Threads_cached' => isset($server_variables['thread_cache_size']) ? 0.95 * $server_variables['thread_cache_size'] : 0        // higher is better        // variable => min value        //'Handler read key' => '> ',    );?><table class="data sortable noclick" id="serverstatusvariables">    <col class="namecol" />    <col class="valuecol" />    <col class="descrcol" />    <thead>        <tr>            <th><?php echo __('Variable'); ?></th>            <th><?php echo __('Value'); ?></th>            <th><?php echo __('Description'); ?></th>        </tr>    </thead>    <tbody>    <?php    $odd_row = false;    foreach ($server_status as $name => $value) {            $odd_row = !$odd_row;?>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; echo isset($allocationMap[$name])?' s_' . $allocationMap[$name]:''; ?>">            <th class="name"><?php            echo htmlspecialchars(str_replace('_', ' ', $name));            /* Fields containing % are calculated, they can not be described in MySQL documentation */            if (strpos($name, '%') === FALSE) {                 echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_' . $name);            }            ?>            </th>            <td class="value"><span class="formatted"><?php            if (isset($alerts[$name])) {                if ($value > $alerts[$name]) {                    echo '<span class="attention">';                } else {                    echo '<span class="allfine">';                }            }            if ('%' === substr($name, -1, 1)) {                echo htmlspecialchars(PMA_formatNumber($value, 0, 2)) . ' %';            } elseif (strpos($name, 'Uptime') !== false) {                echo htmlspecialchars(PMA_timespanFormat($value));            } elseif (is_numeric($value) && $value == (int) $value && $value > 1000) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } elseif (is_numeric($value) && $value == (int) $value) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 0));            } elseif (is_numeric($value)) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } else {                echo htmlspecialchars($value);            }            if (isset($alerts[$name])) {                echo '</span>';            }            ?></span><span style="display:none;" class="original"><?php echo $value; ?></span>            </td>            <td class="descr">            <?php            if (isset($strShowStatus[$name ])) {                echo $strShowStatus[$name];            }            if (isset($links[$name])) {                foreach ($links[$name] as $link_name => $link_url) {                    if ('doc' == $link_name) {                        echo PMA_showMySQLDocu($link_url, $link_url);                    } else {                        echo ' <a href="' . $link_url . '">' . $link_name . '</a>' .                        "\n";                    }                }                unset($link_url, $link_name);            }            ?>            </td>        </tr>    <?php    }    ?>    </tbody>    </table>    <?php}function printMonitor(){    global $server_status, $server_db_isLocal;?>    <div class="tabLinks" style="display:none;">        <a href="#pauseCharts">            <?php echo PMA_getImage('play.png'); ?>            <?php echo __('Start Monitor'); ?>        </a>        <a href="#settingsPopup" rel="popupLink" style="display:none;">            <?php echo PMA_getImage('s_cog.png'); ?>            <?php echo __('Settings'); ?>        </a>        <?php if (!PMA_DRIZZLE) { ?>        <a href="#monitorInstructionsDialog">            <?php echo PMA_getImage('b_help.png'); ?>            <?php echo __('Instructions/Setup'); ?>        </a>        <?php } ?>        <a href="#endChartEditMode" style="display:none;">            <?php echo PMA_getImage('s_okay.png'); ?>            <?php echo __('Done rearranging/editing charts'); ?>        </a>    </div>    <div class="popupContent settingsPopup">        <a href="#addNewChart">            <?php echo PMA_getImage('b_chart.png'); ?>            <?php echo __('Add chart'); ?>        </a>        <a href="#rearrangeCharts"><?php echo PMA_getImage('b_tblops.png'); ?><?php echo __('Rearrange/edit charts'); ?></a>        <div class="clearfloat paddingtop"></div>        <div class="floatleft">            <?php            echo __('Refresh rate') . '<br />';            refreshList('gridChartRefresh', 5, Array(2, 3, 4, 5, 10, 20, 40, 60, 120, 300, 600, 1200));        ?><br />        </div>        <div class="floatleft">            <?php echo __('Chart columns'); ?> <br />            <select name="chartColumns">                <option>1</option>                <option>2</option>                <option>3</option>                <option>4</option>                <option>5</option>                <option>6</option>                <option>7</option>                <option>8</option>                <option>9</option>                <option>10</option>            </select>        </div>        <div class="clearfloat paddingtop">        <b><?php echo __('Chart arrangement'); ?></b> <?php echo PMA_showHint(__('The arrangement of the charts is stored to the browsers local storage. You may want to export it if you have a complicated set up.')); ?><br/>        <a href="#importMonitorConfig"><?php echo __('Import'); ?></a>&nbsp;&nbsp;<a href="#exportMonitorConfig"><?php echo __('Export'); ?></a>&nbsp;&nbsp;<a href="#clearMonitorConfig"><?php echo __('Reset to default'); ?></a>        </div>    </div>    <div id="monitorInstructionsDialog" title="<?php echo __('Monitor Instructions'); ?>" style="display:none;">        <?php echo __('The phpMyAdmin Monitor can assist you in optimizing the server configuration and track down time intensive queries. For the latter you will need to set log_output to \'TABLE\' and have either the slow_query_log or general_log enabled. Note however, that the general_log produces a lot of data and increases server load by up to 15%'); ?>    <?php if (PMA_MYSQL_INT_VERSION < 50106) { ?>        <p>        <?php echo PMA_getImage('s_attention.png'); ?>        <?php            echo __('Unfortunately your Database server does not support logging to table, which is a requirement for analyzing the database logs with phpMyAdmin. Logging to table is supported by MySQL 5.1.6 and onwards. You may still use the server charting features however.');        ?>        </p>    <?php    } else {    ?>        <p></p>        <img class="ajaxIcon" src="<?php echo $GLOBALS['pmaThemeImage']; ?>ajax_clock_small.gif" alt="Loading" />        <div class="ajaxContent"></div>        <div class="monitorUse" style="display:none;">            <p></p>            <?php                echo '<strong>';                echo __('Using the monitor:');                echo '</strong><p>';                echo __('Your browser will refresh all displayed charts in a regular interval. You may add charts and change the refresh rate under \'Settings\', or remove any chart using the cog icon on each respective chart.');                echo '</p><p>';                echo __('To display queries from the logs, select the relevant time span on any chart by holding down the left mouse button and panning over the chart. Once confirmed, this will load a table of grouped queries, there you may click on any occuring SELECT statements to further analyze them.');                echo '</p>';            ?>            <p>            <?php echo PMA_getImage('s_attention.png'); ?>            <?php                echo '<strong>';                echo __('Please note:');                echo '</strong><br />';                echo __('Enabling the general_log may increase the server load by 5-15%. Also be aware that generating statistics from the logs is a load intensive task, so it is advisable to select only a small time span and to disable the general_log and empty its table once monitoring is not required any more.');            ?>            </p>        </div>    <?php } ?>    </div>    <div id="addChartDialog" title="<?php echo __('Add chart'); ?>" style="display:none;">        <div id="tabGridVariables">            <p><input type="text" name="chartTitle" value="<?php echo __('Chart Title'); ?>" /></p>            <input type="radio" name="chartType" value="preset" id="chartPreset" />            <label for="chartPreset"><?php echo __('Preset chart'); ?></label>            <select name="presetCharts"></select><br/>            <input type="radio" name="chartType" value="variable" id="chartStatusVar" checked="checked" />            <label for="chartStatusVar"><?php echo __('Status variable(s)'); ?></label><br/>            <div id="chartVariableSettings">                <label for="chartSeries"><?php echo __('Select series:'); ?></label><br />                <select id="chartSeries" name="varChartList" size="1">                    <option><?php echo __('Commonly monitored'); ?></option>                    <option>Processes</option>                    <option>Questions</option>                    <option>Connections</option>                    <option>Bytes_sent</option>                    <option>Bytes_received</option>                    <option>Threads_connected</option>                    <option>Created_tmp_disk_tables</option>                    <option>Handler_read_first</option>                    <option>Innodb_buffer_pool_wait_free</option>                    <option>Key_reads</option>                    <option>Open_tables</option>                    <option>Select_full_join</option>                    <option>Slow_queries</option>                </select><br />                <label for="variableInput"><?php echo __('or type variable name:'); ?> </label>                <input type="text" name="variableInput" id="variableInput" />                <p></p>                <input type="checkbox" name="differentialValue" id="differentialValue" value="differential" checked="checked" />                <label for="differentialValue"><?php echo __('Display as differential value'); ?></label><br />                <input type="checkbox" id="useDivisor" name="useDivisor" value="1" />                <label for="useDivisor"><?php echo __('Apply a divisor'); ?></label>                <span class="divisorInput" style="display:none;">                    <input type="text" name="valueDivisor" size="4" value="1" />                    (<a href="#kibDivisor"><?php echo __('KiB'); ?></a>, <a href="#mibDivisor"><?php echo __('MiB'); ?></a>)                </span><br />                <input type="checkbox" id="useUnit" name="useUnit" value="1" />                <label for="useUnit"><?php echo __('Append unit to data values'); ?></label>                <span class="unitInput" style="display:none;">                    <input type="text" name="valueUnit" size="4" value="" />                </span>                <p>                    <a href="#submitAddSeries"><b><?php echo __('Add this series'); ?></b></a>                    <span id="clearSeriesLink" style="display:none;">                       | <a href="#submitClearSeries"><?php echo __('Clear series'); ?></a>                    </span>                </p>                <?php echo __('Series in Chart:'); ?><br/>                <span id="seriesPreview">                <i><?php echo __('None'); ?></i>                </span>            </div>        </div>    </div>    <!-- For generic use -->    <div id="emptyDialog" title="Dialog" style="display:none;">    </div>    <?php if (!PMA_DRIZZLE) { ?>    <div id="logAnalyseDialog" title="<?php echo __('Log statistics'); ?>" style="display:none;">        <p> <?php echo __('Selected time range:'); ?>        <input type="text" name="dateStart" class="datetimefield" value="" /> -        <input type="text" name="dateEnd" class="datetimefield" value="" /></p>        <input type="checkbox" id="limitTypes" value="1" checked="checked" />        <label for="limitTypes">            <?php echo __('Only retrieve SELECT,INSERT,UPDATE and DELETE Statements'); ?>        </label>        <br/>        <input type="checkbox" id="removeVariables" value="1" checked="checked" />        <label for="removeVariables">            <?php echo __('Remove variable data in INSERT statements for better grouping'); ?>        </label>        <?php        echo '<p>';        echo __('Choose from which log you want the statistics to be generated from.');        echo '</p><p>';        echo __('Results are grouped by query text.');        echo '</p>';        ?>    </div>    <div id="queryAnalyzerDialog" title="<?php echo __('Query analyzer'); ?>" style="display:none;">        <textarea id="sqlquery"> </textarea>        <p></p>        <div class="placeHolder"></div>    </div>    <?php } ?>    <table border="0" class="clearfloat" id="chartGrid">    </table>    <div id="logTable">        <br/>    </div>    <script type="text/javascript">        variableNames = [ <?php            $i=0;            foreach ($server_status as $name=>$value) {                if (is_numeric($value)) {                    if ($i++ > 0) {                        echo ", ";                    }                    echo "'" . $name . "'";                }            }            ?> ];    </script><?php}/* Builds a <select> list for refresh rates */function refreshList($name, $defaultRate=5, $refreshRates=Array(1, 2, 5, 10, 20, 40, 60, 120, 300, 600)){?>    <select name="<?php echo $name; ?>" id="id_<?php echo $name; ?>">        <?php            foreach ($refreshRates as $rate) {                $selected = ($rate == $defaultRate)?' selected="selected"':'';                if ($rate<60) {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d second', '%d seconds', $rate), $rate) . '</option>';                } else {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d minute', '%d minutes', $rate/60), $rate/60) . '</option>';                }            }        ?>    </select><?php}/** * cleanup of some deprecated values * * @param array &$server_status */function cleanDeprecated(&$server_status){    $deprecated = array(        'Com_prepare_sql' => 'Com_stmt_prepare',        'Com_execute_sql' => 'Com_stmt_execute',        'Com_dealloc_sql' => 'Com_stmt_close',    );    foreach ($deprecated as $old => $new) {        if (isset($server_status[$old]) && isset($server_status[$new])) {            unset($server_status[$old]);        }    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
