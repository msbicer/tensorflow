<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Zip file creation class. * Makes zip files. * * @see Official ZIP file format: http://www.pkware.com/support/zip-app-note * * @access  public * @package PhpMyAdmin */class zipfile{    /**     * Whether to echo zip as it's built or return as string from -> file     *     * @var  boolean  $doWrite     */    var $doWrite = false;    /**     * Array to store compressed data     *     * @var  array    $datasec     */    var $datasec      = array();    /**     * Central directory     *     * @var  array    $ctrl_dir     */    var $ctrl_dir     = array();    /**     * End of central directory record     *     * @var  string   $eof_ctrl_dir     */    var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";    /**     * Last offset position     *     * @var  integer  $old_offset     */    var $old_offset   = 0;    /**     * Sets member variable this -> doWrite to true     * - Should be called immediately after class instantiantion     * - If set to true, then ZIP archive are echo'ed to STDOUT as each     *   file is added via this -> addfile(), and central directories are     *   echoed to STDOUT on final call to this -> file().  Also,     *   this -> file() returns an empty string so it is safe to issue a     *   "echo $zipfile;" command     *     * @access public     *     * @return nothing     */    function setDoWrite()    {        $this -> doWrite = true;    } // end of the 'setDoWrite()' method    /**     * Converts an Unix timestamp to a four byte DOS date and time format (date     * in high two bytes, time in low two bytes allowing magnitude comparison).     *     * @param integer $unixtime the current Unix timestamp     *     * @return integer the current date in a four byte DOS format     *     * @access private     */    function unix2DosTime($unixtime = 0)    {        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);        if ($timearray['year'] < 1980) {            $timearray['year']    = 1980;            $timearray['mon']     = 1;            $timearray['mday']    = 1;            $timearray['hours']   = 0;            $timearray['minutes'] = 0;            $timearray['seconds'] = 0;        } // end if        return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) |                ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);    } // end of the 'unix2DosTime()' method    /**     * Adds "file" to archive     *     * @param string  $data file contents     * @param string  $name name of the file in the archive (may contains the path)     * @param integer $time the current timestamp     *     * @access public     *     * @return nothing     */    function addFile($data, $name, $time = 0)    {        $name     = str_replace('\\', '/', $name);        $dtime    = substr("00000000" . dechex($this->unix2DosTime($time)), -8);        $hexdtime = '\x' . $dtime[6] . $dtime[7]                  . '\x' . $dtime[4] . $dtime[5]                  . '\x' . $dtime[2] . $dtime[3]                  . '\x' . $dtime[0] . $dtime[1];        eval('$hexdtime = "' . $hexdtime . '";');        $fr   = "\x50\x4b\x03\x04";        $fr   .= "\x14\x00";            // ver needed to extract        $fr   .= "\x00\x00";            // gen purpose bit flag        $fr   .= "\x08\x00";            // compression method        $fr   .= $hexdtime;             // last mod time and date        // "local file header" segment        $unc_len = strlen($data);        $crc     = crc32($data);        $zdata   = gzcompress($data);        $zdata   = substr(substr($zdata, 0, strlen($zdata) - 4), 2); // fix crc bug        $c_len   = strlen($zdata);        $fr      .= pack('V', $crc);             // crc32        $fr      .= pack('V', $c_len);           // compressed filesize        $fr      .= pack('V', $unc_len);         // uncompressed filesize        $fr      .= pack('v', strlen($name));    // length of filename        $fr      .= pack('v', 0);                // extra field length        $fr      .= $name;        // "file data" segment        $fr .= $zdata;        // echo this entry on the fly, ...        if ( $this -> doWrite) {            echo $fr;        } else {                     // ... OR add this entry to array            $this -> datasec[] = $fr;        }        // now add to central directory record        $cdrec = "\x50\x4b\x01\x02";        $cdrec .= "\x00\x00";                // version made by        $cdrec .= "\x14\x00";                // version needed to extract        $cdrec .= "\x00\x00";                // gen purpose bit flag        $cdrec .= "\x08\x00";                // compression method        $cdrec .= $hexdtime;                 // last mod time & date        $cdrec .= pack('V', $crc);           // crc32        $cdrec .= pack('V', $c_len);         // compressed filesize        $cdrec .= pack('V', $unc_len);       // uncompressed filesize        $cdrec .= pack('v', strlen($name)); // length of filename        $cdrec .= pack('v', 0);             // extra field length        $cdrec .= pack('v', 0);             // file comment length        $cdrec .= pack('v', 0);             // disk number start        $cdrec .= pack('v', 0);             // internal file attributes        $cdrec .= pack('V', 32);            // external file attributes - 'archive' bit set        $cdrec .= pack('V', $this -> old_offset); // relative offset of local header        $this -> old_offset += strlen($fr);        $cdrec .= $name;        // optional extra field, file comment goes here        // save to central directory        $this -> ctrl_dir[] = $cdrec;    } // end of the 'addFile()' method    /**     * Echo central dir if ->doWrite==true, else build string to return     *     * @return  string  if ->doWrite {empty string} else the ZIP file contents     *     * @access public     */    function file()    {        $ctrldir = implode('', $this -> ctrl_dir);        $header = $ctrldir .            $this -> eof_ctrl_dir .            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries "on this disk"            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries overall            pack('V', strlen($ctrldir)) .           // size of central dir            pack('V', $this -> old_offset) .        // offset to start of central dir            "\x00\x00";                             // .zip file comment length        if ( $this -> doWrite ) {       // Send central directory & end ctrl dir to STDOUT            echo $header;            return "";                                   // Return empty string        } else {                        // Return entire ZIP archive as string            $data = implode('', $this -> datasec);            return $data . $header;        }    } // end of the 'file()' method} // end of the 'zipfile' class?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple wrapper just to enable error reporting and include config * * @package PhpMyAdmin */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';PMA_no_cache_header();header('Content-Type: text/html; charset=utf-8');require './libraries/vendor_config.php';error_reporting(E_ALL);/** * Read config file. */if (is_readable(CONFIG_FILE)) {    require CONFIG_FILE;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/common.inc.php';require_once './libraries/RecentTable.class.php';/** * Add recently used table and reload the navigation. * * @param string $db Database name where the table is located. * @param string $table The table name */function PMA_addRecentTable($db, $table){    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);    if ($tmp_result === true) {        echo '<span class="hide" id="update_recent_tables"></span>';    } else {        $error = $tmp_result;        $error->display();    }}/** * This is not an Ajax request so we need to generate all this output. */if (isset($GLOBALS['is_ajax_request']) && !$GLOBALS['is_ajax_request']) {    if (empty($GLOBALS['is_header_sent'])) {        /**         * Gets a core script and starts output buffering work         */        include_once './libraries/ob.lib.php';        PMA_outBufferPre();        // if database storage for user preferences is transient, offer to load        // exported settings from localStorage (detection will be done in JavaScript)        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'                && ! isset($_SESSION['userprefs_autoload']);        if ($userprefs_offer_import) {            $GLOBALS['js_include'][] = 'config.js';        }        // For re-usability, moved http-headers and stylesheets        // to a seperate file. It can now be included by header.inc.php,        // querywindow.php.        include_once './libraries/header_http.inc.php';        include_once './libraries/header_meta_style.inc.php';        include_once './libraries/header_scripts.inc.php';        ?>        <meta name="OBGZip" content="<?php echo ($GLOBALS['cfg']['OBGzip'] ? 'true' : 'false'); ?>" />        <?php /* remove vertical scroll bar bug in ie */ ?>        <!--[if IE 6]>        <style type="text/css">        /* <![CDATA[ */        html {            overflow-y: scroll;        }        /* ]]> */        </style>        <![endif]-->    </head>    <body>        <?php        // Include possible custom headers        if (file_exists(CUSTOM_HEADER_FILE)) {            include CUSTOM_HEADER_FILE;        }        // message of "Cookies required" displayed for auth_type http or config        // note: here, the decoration won't work because without cookies,        // our standard CSS is not operational        if (empty($_COOKIE)) {            PMA_Message::notice(__('Cookies must be enabled past this point.'))->display();        }        // offer to load user preferences from localStorage        if ($userprefs_offer_import) {            include_once './libraries/user_preferences.lib.php';            PMA_userprefs_autoload_header();        }        if (!defined('PMA_DISPLAY_HEADING')) {            define('PMA_DISPLAY_HEADING', 1);        }        // pass configuration for hint tooltip display        // (to be used by PMA_createqTip in js/functions.js)        if (! $GLOBALS['cfg']['ShowHint']) {            echo '<span id="no_hint" class="hide"></span>';        }        /**         * Display heading if needed. Design can be set in css file.         */        if (PMA_DISPLAY_HEADING && $GLOBALS['server'] > 0) {            $server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                            ? $GLOBALS['cfg']['Server']['verbose']                            : $GLOBALS['cfg']['Server']['host'] . (empty($GLOBALS['cfg']['Server']['port'])                                                                   ? ''                                                                   : ':' . $GLOBALS['cfg']['Server']['port']                                                                  )                           );            $separator = "<span class='separator item'>&nbsp;</span>\n";            $item = '<a href="%1$s?%2$s" class="item">';                if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {                    $item .= '%4$s: ';                }                $item .= '%3$s</a>' . "\n";                echo "<div id='floating_menubar'></div>\n";                echo "<div id='serverinfo'>\n";                if ($GLOBALS['cfg']['NavigationBarIconic']) {                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";                }                printf($item,                        $GLOBALS['cfg']['DefaultTabServer'],                        PMA_generate_common_url(),                        htmlspecialchars($server_info),                        __('Server'));                if (strlen($GLOBALS['db'])) {                    echo $separator;                    if ($GLOBALS['cfg']['NavigationBarIconic']) {                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";                    }                    printf($item,                            $GLOBALS['cfg']['DefaultTabDatabase'],                            PMA_generate_common_url($GLOBALS['db']),                            htmlspecialchars($GLOBALS['db']),                            __('Database'));                    // if the table is being dropped, $_REQUEST['purge'] is set to '1'                    // so do not display the table name in upper div                    if (strlen($GLOBALS['table']) && ! (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1')) {                        include_once './libraries/tbl_info.inc.php';                        echo $separator;                        if ($GLOBALS['cfg']['NavigationBarIconic']) {                            $icon = isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? 'b_views.png' : 's_tbl.png';                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";                        }                        printf($item,                            $GLOBALS['cfg']['DefaultTabTable'],                            PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']),                            str_replace(' ', '&nbsp;', htmlspecialchars($GLOBALS['table'])),                            (isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? __('View') : __('Table')));                        /**                         * Displays table comment                         */                        if (!empty($show_comment) && ! isset($GLOBALS['avoid_show_comment'])) {                            if (strstr($show_comment, '; InnoDB free')) {                                $show_comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);                            }                            echo '<span class="table_comment" id="span_table_comment">'                                .'&quot;' . htmlspecialchars($show_comment)                                .'&quot;</span>' . "\n";                        } // end if                        // add recently used table and reload the navigation                        if ($GLOBALS['cfg']['LeftRecentTable'] > 0) {                            PMA_addRecentTable($GLOBALS['db'], $GLOBALS['table']);                        }                    } else {                        // no table selected, display database comment if present                        /**                         * Settings for relations stuff                         */                        include_once './libraries/relation.lib.php';                        $cfgRelation = PMA_getRelationsParam();                        // Get additional information about tables for tooltip is done                        // in libraries/db_info.inc.php only once                        if ($cfgRelation['commwork']) {                            $comment = PMA_getDbComment($GLOBALS['db']);                            /**                             * Displays table comment                             */                            if (! empty($comment)) {                                echo '<span class="table_comment"'                                    . ' id="span_table_comment">&quot;'                                    . htmlspecialchars($comment)                                    . '&quot;</span>' . "\n";                            } // end if                        }                    }                }            }            echo '<div class="clearfloat"></div>';            echo '</div>';        }        /**         * Sets a variable to remember headers have been sent         */        $GLOBALS['is_header_sent'] = true;//end if (!$GLOBALS['is_ajax_request'])} else {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header_http.inc.php';        $GLOBALS['is_header_sent'] = true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * get some globals */require './libraries/common.inc.php';/* Theme Select */$path_to_themes = $cfg['ThemePath'] . '/';/* set language and charset */require './libraries/header_http.inc.php';/* HTML header */$page_title = 'phpMyAdmin - ' . __('Theme');require './libraries/header_meta_style.inc.php';require './libraries/header_scripts.inc.php';?></head><body id="bodythemes"><h1>phpMyAdmin - <?php echo __('Theme'); ?></h1><p><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/home_page/themes.php'); ?>#pma_<?php echo preg_replace('/([0-9]*)\.([0-9]*)\..*/', '\1_\2', PMA_VERSION); ?>"><?php echo __('Get more themes!'); ?></a></p><?php$_SESSION['PMA_Theme_Manager']->printPreviews();?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';// Check parametersPMA_checkParameters(array('db', 'table'));$db_is_information_schema = PMA_is_system_schema($db);/** * Set parameters for links * @deprecated */$url_query = PMA_generate_common_url($db, $table);$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Ensures the database and the table exist (else move to the "parent" script) */require_once './libraries/db_table_exists.lib.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once "Export_Relation_Schema.class.php";/** * This Class is EPS Library and * helps in developing structure of EPS Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_EPS{    public $font;    public $fontSize;    public $stringCommands;    /**     * The "PMA_EPS" constructor     *     * Upon instantiation This starts writing the EPS Document.     * %!PS-Adobe-3.0 EPSF-3.0 This is the MUST first comment to include     * it shows/tells that the Post Script document is purely under     * Document Structuring Convention [DSC] and is Compliant     * Encapsulated Post Script Document     *     * @return void     * @access public     */    function __construct()    {        $this->stringCommands = "";        $this->stringCommands .= "%!PS-Adobe-3.0 EPSF-3.0 \n";    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     *     * @access public     */    function setTitle($value)    {        $this->stringCommands .= '%%Title: ' . $value . "\n";    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     *     * @access public     */    function setAuthor($value)    {        $this->stringCommands .= '%%Creator: ' . $value . "\n";    }    /**     * Set document creation date     *     * @param string $value sets the date     *     * @return void     *     * @access public     */    function setDate($value)    {        $this->stringCommands .= '%%CreationDate: ' . $value . "\n";    }    /**     * Set document orientation     *     * @param string $value sets the author     *     * @return void     *     * @access public     */    function setOrientation($value)    {        $this->stringCommands .= "%%PageOrder: Ascend \n";        if ($value == "L") {            $value = "Landscape";            $this->stringCommands .= '%%Orientation: ' . $value . "\n";        } else {            $value = "Portrait";            $this->stringCommands .= '%%Orientation: ' . $value . "\n";        }        $this->stringCommands .= "%%EndComments \n";        $this->stringCommands .= "%%Pages 1 \n";        $this->stringCommands .= "%%BoundingBox: 72 150 144 170 \n";    }    /**     * Set the font and size     *     * font can be set whenever needed in EPS     *     * @param string  $value sets the font name e.g Arial     * @param integer $size  sets the size of the font e.g 10     *     * @return void     *     * @access public     */    function setFont($value, $size)    {        $this->font = $value;        $this->fontSize = $size;        $this->stringCommands .= "/" . $value . " findfont   % Get the basic font\n";        $this->stringCommands .= "" . $size . " scalefont            % Scale the font to $size points\n";        $this->stringCommands .= "setfont                 % Make it the current font\n";    }    /**     * Get the font     *     * @return string return the font name e.g Arial     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Get the font Size     *     * @return string return the size of the font e.g 10     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Draw the line     *     * drawing the lines from x,y source to x,y destination and set the     * width of the line. lines helps in showing relationships of tables     *     * @param integer $x_from    The x_from attribute defines the start     *                           left position of the element     * @param integer $y_from    The y_from attribute defines the start     *                           right position of the element     * @param integer $x_to      The x_to attribute defines the end     *                           left position of the element     * @param integer $y_to      The y_to attribute defines the end     *                           right position of the element     * @param integer $lineWidth Sets the width of the line e.g 2     *     * @return void     *     * @access public     */    function line($x_from = 0, $y_from = 0, $x_to = 0, $y_to = 0, $lineWidth = 0)    {        $this->stringCommands .= $lineWidth . " setlinewidth  \n";        $this->stringCommands .= $x_from . ' ' . $y_from  . " moveto \n";        $this->stringCommands .= $x_to . ' ' . $y_to  . " lineto \n";        $this->stringCommands .= "stroke \n";    }    /**     * Draw the rectangle     *     * drawing the rectangle from x,y source to x,y destination and set the     * width of the line. rectangles drawn around the text shown of fields     *     * @param integer $x_from    The x_from attribute defines the start                                 left position of the element     * @param integer $y_from    The y_from attribute defines the start                                 right position of the element     * @param integer $x_to      The x_to attribute defines the end                                 left position of the element     * @param integer $y_to      The y_to attribute defines the end                                 right position of the element     * @param integer $lineWidth Sets the width of the line e.g 2     *     * @return void     *     * @access public     */    function rect($x_from, $y_from, $x_to, $y_to, $lineWidth)    {        $this->stringCommands .= $lineWidth . " setlinewidth  \n";        $this->stringCommands .= "newpath \n";        $this->stringCommands .= $x_from . " " . $y_from  . " moveto \n";        $this->stringCommands .= "0 " . $y_to  . " rlineto \n";        $this->stringCommands .= $x_to . " 0 rlineto \n";        $this->stringCommands .= "0 -" . $y_to  . " rlineto \n";        $this->stringCommands .= "closepath \n";        $this->stringCommands .= "stroke \n";    }    /**     * Set the current point     *     * The moveto operator takes two numbers off the stack and treats     * them as x and y coordinates to which to move. The coordinates     * specified become the current point.     *     * @param integer $x The x attribute defines the left position of the element     * @param integer $y The y attribute defines the right position of the element     *     * @return void     *     * @access public     */    function moveTo($x, $y)    {        $this->stringCommands .= $x . ' ' . $y . " moveto \n";    }    /**     * Output/Display the text     *     * @param string $text The string to be displayed     *     * @return void     *     * @access public     */    function show($text)    {        $this->stringCommands .=  '(' . $text  . ") show \n";    }    /**     * Output the text at specified co-ordinates     *     * @param string  $text String to be displayed     * @param integer $x    X attribute defines the left position of the element     * @param integer $y    Y attribute defines the right position of the element     *     * @return void     *     * @access public     */    function showXY($text, $x, $y)    {        $this->moveTo($x, $y);        $this->show($text);    }    /**     * get width of string/text     *     * EPS text width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other better than this.     * if someone found better than this. would love to hear that method     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     *     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }    /**     * Ends EPS Document     *     * @return void     * @access public     */    function endEpsDoc()    {        $this->stringCommands .= "showpage \n";    }    /**     * Output EPS Document for download     *     * @param string $fileName name of the eps document     *     * @return void     *     * @access public     */    function showOutput($fileName)    {        // if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->stringCommands;        PMA_download_header($fileName . '.eps', 'image/x-eps', strlen($output));        print $output;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in EPS. * * @name Table_Stats * @see PMA_EPS */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             The font  name     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max width among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current eps document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     * @see PMA_EPS, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber, &$same_wide_width,    $showKeys = false, $showInfo = false)    {        global $eps, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $eps->dieSchema(                $pageNumber, "EPS",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''            . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $eps->dieSchema(                $pageNumber, "EPS",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null, PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return string The relation/table name     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font name     * @param integer $fontSize The font size     *     * @global object    The current eps document     *     * @return void     *     * @access private     * @see PMA_EPS     */    private function _setWidthTable($font,$fontSize)    {        global $eps;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $eps->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $eps->getStringWidth('      ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $eps->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize The font size     *     * @return void     * @access private     */    private function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * Draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current eps document     *     * @return void     *     * @access public     * @see PMA_EPS,PMA_EPS::line,PMA_EPS::rect     */    public function tableDraw($showColor)    {        global $eps;        //echo $this->_tableName.'<br />';        $eps->rect($this->x, $this->y + 12, $this->width, $this->heightCell, 1);        $eps->showXY($this->_getTitle(), $this->x + 5, $this->y + 14);        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $eps->rect(                $this->x, $this->y + 12  + $this->currentCell,                $this->width, $this->heightCell, 1            );            $eps->showXY($field, $this->x + 5, $this->y + 14 + $this->currentCell);        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in EPS document. * * @name Relation_Stats * @see PMA_EPS */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2] + 10;        $this->yDest = $dest_pos[2] + 10;    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows     * shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current EPS document     *     * @access public     * @see PMA_EPS     *     * @return void     */    public function relationDraw($changeColor)    {        global $eps;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // draw a line like -- to foreign field        $eps->line(            $this->xSrc,            $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            1        );        // draw a line like -- to master field        $eps->line(            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            $this->xDest,            $this->yDest,            1        );        // draw a line that connects to master field line and foreign field line        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            1        );        $root2 = 2 * sqrt(2);        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            1        );        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            1        );        $eps->line(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            1        );        $eps->line(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            1        );    }}/** end of the "Relation_Stats" class*//** * EPS Relation Schema Class * * Purpose of this class is to generate the EPS Document * which is used for representing the database diagrams. * This class uses post script commands and with * the combination of these commands actually helps in preparing EPS Document. * * This class inherits Export_Relation_Schema class has common functionality added * to this class * * @name Eps_Relation_Schema */class PMA_Eps_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    /**     * The "PMA_EPS_Relation_Schema" constructor     *     * Upon instantiation This starts writing the EPS document     * user will be prompted for download as .eps extension     *     * @return void     * @see PMA_EPS     */    function __construct()    {        global $eps,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setOrientation($_POST['orientation']);        $this->setExportType($_POST['export_type']);        $eps = new PMA_EPS();        $eps->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $eps->setAuthor('phpMyAdmin ' . PMA_VERSION);        $eps->setDate(date("j F Y, g:i a"));        $eps->setOrientation($this->orientation);        $eps->setFont('Verdana', '10');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $eps->getFont(), $eps->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $eps->getFont(), $eps->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $eps->endEpsDoc();        $eps->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font     * @param int     $fontSize     The font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @return void     *     * @access private     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable, $font, $fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     *     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return void     *     * @access private     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * To define form field, use the notatnion below: * $forms['Form group']['Form name'] = array('Option/path'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin */$forms = array();$forms['Features']['General'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'LoginCookieValidity',    'ReplaceHelpImg',    'Servers/1/only_db', // saves to Server/only_db    'Servers/1/hide_db', // saves to Server/hide_db    'SkipLockedTables',    'DisableMultiTableMaintenance',    'MaxDbList',    'MaxTableList',    'ShowHint');$forms['Features']['Text_fields'] = array(    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');// settings from this form are treated specially, see prefs_forms.php and user_preferences.lib.php$forms['Features']['Developer'] = array(    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array(    'SQLQuery/Edit',    'SQLQuery/Explain',    'SQLQuery/ShowAsPHP',    'SQLQuery/Validate',    'SQLQuery/Refresh');$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'PropertiesIconic',    'ShowAll',    'MaxRows',    'Order',    'DisplayBinaryAsHex',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable');$forms['Import']['Import_defaults'] = array(    'Import/format',    'Import/charset',    'Import/allow_interrupt',    'Import/skip_queries');$forms['Import']['Sql'] = array(    'Import/sql_compatibility',    'Import/sql_no_auto_value_on_zero');$forms['Import']['Csv'] = array(    ':group:' . __('CSV'),        'Import/csv_replace',        'Import/csv_ignore',        'Import/csv_terminated',        'Import/csv_enclosed',        'Import/csv_escaped',        'Import/csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'Import/ldi_replace',        'Import/ldi_ignore',        'Import/ldi_terminated',        'Import/ldi_enclosed',        'Import/ldi_escaped',        'Import/ldi_local_option');$forms['Import']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Import/ods_col_names',        'Import/ods_empty_rows',        'Import/ods_recognize_percentages',        'Import/ods_recognize_currency');$forms['Export']['Export_defaults'] = array(    'Export/method',    ':group:' . __('Quick'),        'Export/quick_export_onserver',        'Export/quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'Export/format',        'Export/compression',        'Export/charset',        'Export/asfile' => ':group',            'Export/onserver',            'Export/onserver_overwrite',            ':group:end',        'Export/file_template_table',        'Export/file_template_database',        'Export/file_template_server');$forms['Export']['Sql'] = array(    'Export/sql_include_comments' => ':group',        'Export/sql_dates',        'Export/sql_relation',        'Export/sql_mime',        ':group:end',    'Export/sql_use_transaction',    'Export/sql_disable_fk',    'Export/sql_compatibility',    ':group:' . __('Database export options'),        'Export/sql_drop_database',        'Export/sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'Export/sql_drop_table',        'Export/sql_procedure_function',        'Export/sql_create_table_statements' => ':group',            'Export/sql_if_not_exists',            'Export/sql_auto_increment',            ':group:end',        'Export/sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'Export/sql_delayed',        'Export/sql_ignore',        'Export/sql_type',        'Export/sql_insert_syntax',        'Export/sql_max_query_size',        'Export/sql_hex_for_blob',        'Export/sql_utc_time');$forms['Export']['CodeGen'] = array(    'Export/codegen_format');$forms['Export']['Csv'] = array(    ':group:' . __('CSV'),        'Export/csv_separator',        'Export/csv_enclosed',        'Export/csv_escaped',        'Export/csv_terminated',        'Export/csv_null',        'Export/csv_removeCRLF',        'Export/csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'Export/excel_null',        'Export/excel_removeCRLF',        'Export/excel_columns',        'Export/excel_edition');$forms['Export']['Latex'] = array(    'Export/latex_caption',    'Export/latex_structure_or_data',    ':group:' . __('Structure'),        'Export/latex_structure_caption',        'Export/latex_structure_continued_caption',        'Export/latex_structure_label',        'Export/latex_relation',        'Export/latex_comments',        'Export/latex_mime',        ':group:end',    ':group:' . __('Data'),        'Export/latex_columns',        'Export/latex_data_caption',        'Export/latex_data_continued_caption',        'Export/latex_data_label',        'Export/latex_null');$forms['Export']['Microsoft_Office'] = array(    ':group:' . __('Microsoft Word 2000'),        'Export/htmlword_structure_or_data',        'Export/htmlword_null',        'Export/htmlword_columns');$forms['Export']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Export/ods_columns',        'Export/ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'Export/odt_structure_or_data',        ':group:' . __('Structure'),            'Export/odt_relation',            'Export/odt_comments',            'Export/odt_mime',            ':group:end',        ':group:' . __('Data'),            'Export/odt_columns',            'Export/odt_null');$forms['Export']['Texy'] = array(    'Export/texytext_structure_or_data',    ':group:' . __('Data'),        'Export/texytext_null',        'Export/texytext_columns');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script, then displays headers */require_once './libraries/common.inc.php';if (! isset($selected_tbl)) {    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';}/** * Gets the relations settings */$cfgRelation  = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';/** * Check parameters */PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}if ($cfgRelation['commwork']) {    $comment = PMA_getDbComment($db);    /**     * Displays DB comment     */    if ($comment) {        ?>    <p> <?php echo __('Database comment: '); ?>        <i><?php echo htmlspecialchars($comment); ?></i></p>        <?php    } // end if}/** * Selects the database and gets tables names */PMA_DBI_select_db($db);$tables = PMA_DBI_get_tables($db);$count  = 0;foreach ($tables as $table) {    $comments = PMA_getComments($db, $table);    echo '<div>' . "\n";    echo '<h2>' . htmlspecialchars($table) . '</h2>' . "\n";    /**     * Gets table informations     */    $show_comment = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_COMMENT');    /**     * Gets table keys and retains them     */    PMA_DBI_select_db($db);    $indexes      = PMA_DBI_get_table_indexes($db, $table);    $primary      = '';    $indexes      = array();    $lastIndex    = '';    $indexes_info = array();    $indexes_data = array();    $pk_array     = array(); // will be use to emphasis prim. keys in the table                             // view    foreach ($indexes as $row) {        // Backups the list of primary keys        if ($row['Key_name'] == 'PRIMARY') {            $primary   .= $row['Column_name'] . ', ';            $pk_array[$row['Column_name']] = 1;        }        // Retains keys informations        if ($row['Key_name'] != $lastIndex) {            $indexes[] = $row['Key_name'];            $lastIndex = $row['Key_name'];        }        $indexes_info[$row['Key_name']]['Sequences'][]     = $row['Seq_in_index'];        $indexes_info[$row['Key_name']]['Non_unique']      = $row['Non_unique'];        if (isset($row['Cardinality'])) {            $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];        }        // I don't know what does following column mean....        // $indexes_info[$row['Key_name']]['Packed']          = $row['Packed'];        $indexes_info[$row['Key_name']]['Comment']     = $row['Comment'];        $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name']  = $row['Column_name'];        if (isset($row['Sub_part'])) {            $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];        }    } // end while    /**     * Gets columns properties     */    $columns = PMA_DBI_get_columns($db, $table);    $fields_cnt  = count($columns);    if (PMA_MYSQL_INT_VERSION < 50025) {        // We need this to correctly learn if a TIMESTAMP is NOT NULL, since        // SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL        // and SHOW CREATE TABLE says NOT NULL        // http://bugs.mysql.com/20910.        $show_create_table = PMA_DBI_fetch_value(            'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),            0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    }    // Check if we can use Relations    if (!empty($cfgRelation['relation'])) {        // Find which tables are related with the current one and write it in        // an array        $res_rel = PMA_getForeigners($db, $table);        if (count($res_rel) > 0) {            $have_rel = true;        } else {            $have_rel = false;        }    } else {        $have_rel = false;    } // end if    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><table width="100%" class="print"><tr><th width="50"><?php echo __('Column'); ?></th>    <th width="80"><?php echo __('Type'); ?></th><?php /*    <th width="50"><?php echo __('Attributes'); ?></th>*/ ?>    <th width="40"><?php echo __('Null'); ?></th>    <th width="70"><?php echo __('Default'); ?></th><?php /*    <th width="50"><?php echo __('Extra'); ?></th>*/ ?>    <?php    if ($have_rel) {        echo '    <th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr>    <?php    $odd_row = true;    foreach ($columns as $row) {        if ($row['Null'] == '') {            $row['Null'] = 'NO';        }        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        // reformat mysql query output        // set or enum types: slashes single quotes inside options        if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {            $type_nowrap  = '';        } else {            $type_nowrap  = ' nowrap="nowrap"';        }        $type = htmlspecialchars($extracted_fieldspec['print_type']);        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = $row['Field'];        if (PMA_MYSQL_INT_VERSION < 50025         && ! empty($analyzed_sql[0]['create_table_fields'][$field_name]['type'])         && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP'         && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the            // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe            // the latter.            /**             * @todo merge this logic with the one in tbl_structure.php             * or move it in a function similar to PMA_DBI_get_columns_full()             * but based on SHOW CREATE TABLE because information_schema             * cannot be trusted in this case (MySQL bug)             */             $row['Null'] = 'NO';        }        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td nowrap="nowrap">        <?php        if (isset($pk_array[$row['Field']])) {            echo '<u>' . htmlspecialchars($field_name) . '</u>';        } else {            echo htmlspecialchars($field_name);        }        ?>    </td>    <td<?php echo $type_nowrap; ?> xml:lang="en" dir="ltr"><?php echo $type; ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $attribute; ?></td>*/ ?>    <td><?php echo (($row['Null'] == 'NO') ? __('No') : __('Yes')); ?></td>    <td nowrap="nowrap"><?php if (isset($row['Default'])) { echo $row['Default']; } ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $row['Extra']; ?></td>*/ ?>        <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '</td>' . "\n";        }        echo '    <td>';        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '</td>' . "\n";        }        ?></tr>        <?php    } // end foreach    $count++;    ?></table></div>    <?php} //ends main while/** * Displays the footer */PMA_printButton();require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */# GNU iconv code set to IBM AIX libiconv code set table# Keys of this table should be in lowercase, and searches should be performed using lowercase!$gnu_iconv_to_aix_iconv_codepage_map = array (    // "iso-8859-[1-9]" --> "ISO8859-[1-9]" according to http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/basetrf2/setlocale.htm    'iso-8859-1' => 'ISO8859-1',    'iso-8859-2' => 'ISO8859-2',    'iso-8859-3' => 'ISO8859-3',    'iso-8859-4' => 'ISO8859-4',    'iso-8859-5' => 'ISO8859-5',    'iso-8859-6' => 'ISO8859-6',    'iso-8859-7' => 'ISO8859-7',    'iso-8859-8' => 'ISO8859-8',    'iso-8859-9' => 'ISO8859-9',    // "big5" --> "IBM-eucTW" according to http://kadesh.cepba.upc.es/mancpp/classref/ref/ITranscoder_DSC.htm    'big5' => 'IBM-eucTW',    // Other mappings corresponding to the phpMyAdmin dropdown box when using the charset conversion feature    'euc-jp' => 'IBM-eucJP',    'koi8-r' => 'IBM-eucKR',    'ks_c_5601-1987' => 'KSC5601.1987-0',    'tis-620' => 'TIS-620',    'utf-8' => 'UTF-8');/** * Wrapper around IBM AIX iconv(), whose character set naming differs * from the GNU version of iconv(). * * @param string   input character set * @param string   output character set * @param string   the string to convert * * @return  mixed    converted string or false on failure * * @access  public * */function PMA_aix_iconv_wrapper($in_charset, $out_charset, $str){    global $gnu_iconv_to_aix_iconv_codepage_map;    // Check for transliteration argument at the end of output character set name    $translit_search = strpos(strtolower($out_charset), '//translit');    $using_translit = (!($translit_search === false));    // Extract "plain" output character set name (without any transliteration argument)    $out_charset_plain = ($using_translit ? substr($out_charset, 0, $translit_search) : $out_charset);    // Transform name of input character set (if found)    if (array_key_exists(strtolower($in_charset), $gnu_iconv_to_aix_iconv_codepage_map)) {        $in_charset = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($in_charset)];    }    // Transform name of "plain" output character set (if found)    if (array_key_exists(strtolower($out_charset_plain), $gnu_iconv_to_aix_iconv_codepage_map)) {        $out_charset_plain = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($out_charset_plain)];    }    // Add transliteration argument again (exactly as specified by user) if used    // Build the output character set name that we will use    $out_charset = ($using_translit ? $out_charset_plain . substr($out_charset, $translit_search) : $out_charset_plain);    // NOTE: Transliteration not supported; we will use the "plain" output character set name    $out_charset = $out_charset_plain;    // Call iconv() with the possibly modified parameters    $result = iconv($in_charset, $out_charset, $str);    return $result;} //  end of the "PMA_aix_iconv_wrapper()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build CSV dumps of tables for excel * * @package PhpMyAdmin-Export * @subpackage CSV-Excel */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['excel'] = array(        'text' => __('CSV for MS Excel'),        'extension' => 'csv',        'mime_type' => 'text/comma-separated-values',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'removeCRLF', 'text' => __('Remove carriage return/line feed characters within columns')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array(                'type' => 'select',                'name' => 'edition',                'values' => array(                    'win' => 'Windows',                    'mac_excel2003' => 'Excel 2003 / Macintosh',                    'mac_excel2008' => 'Excel 2008 / Macintosh'),                'text' => __('Excel edition:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /* Everything rest is coded in csv plugin */    include './libraries/export/csv.php';}?>
<?php/** * @package Swekey *//** * Checks Swekey authentication. */function Swekey_auth_check(){    global $cfg;    $confFile = $cfg['Server']['auth_swekey_config'];    if (! isset($_SESSION['SWEKEY'])) {        $_SESSION['SWEKEY'] = array();    }    $_SESSION['SWEKEY']['ENABLED'] = (! empty($confFile) && file_exists($confFile));    // Load the swekey.conf file the first time    if ($_SESSION['SWEKEY']['ENABLED'] && empty($_SESSION['SWEKEY']['CONF_LOADED'])) {        $_SESSION['SWEKEY']['CONF_LOADED'] = true;        $_SESSION['SWEKEY']['VALID_SWEKEYS'] = array();        $valid_swekeys = explode("\n", @file_get_contents($confFile));        foreach ($valid_swekeys as $line) {            if (preg_match("/^[0-9A-F]{32}:.+$/", $line) != false) {                $items = explode(":", $line);                if (count($items) == 2)                    $_SESSION['SWEKEY']['VALID_SWEKEYS'][$items[0]] = trim($items[1]);            } elseif (preg_match("/^[A-Z_]+=.*$/", $line) != false) {                $items = explode("=", $line);                $_SESSION['SWEKEY']['CONF_'.trim($items[0])] = trim($items[1]);            }        }        // Set default values for settings        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_CHECK']))            $_SESSION['SWEKEY']['CONF_SERVER_CHECK'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']))            $_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_SERVER_STATUS']))             $_SESSION['SWEKEY']['CONF_SERVER_STATUS'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_CA_FILE']))            $_SESSION['SWEKEY']['CONF_CA_FILE'] = "";        if (! isset($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']))            $_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE'] = true;        if (! isset($_SESSION['SWEKEY']['CONF_DEBUG']))               $_SESSION['SWEKEY']['CONF_DEBUG'] = false;     }    // check if a web key has been authenticated    if ($_SESSION['SWEKEY']['ENABLED']) {        if (empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))           return false;    }    return true;}/** * Handle Swekey authentication error. */function Swekey_auth_error(){    if (! isset($_SESSION['SWEKEY']))        return null;    if (! $_SESSION['SWEKEY']['ENABLED'])        return null;    include_once './libraries/auth/swekey/authentication.inc.php';    ?>    <script>    function Swekey_GetValidKey()    {        var valids = "<?php            foreach ($_SESSION['SWEKEY']['VALID_SWEKEYS'] as $key => $value)                echo $key.',';        ?>";        var connected_keys = Swekey_ListKeyIds().split(",");         for (i in connected_keys)               if (connected_keys[i] != null && connected_keys[i].length == 32)                if (valids.indexOf(connected_keys[i]) >= 0)                   return connected_keys[i];        if (connected_keys.length > 0)               if (connected_keys[0].length == 32)                  return "unknown_key_" + connected_keys[0];        return "none";    }    var key = Swekey_GetValidKey();    function timedCheck()    {        if (key != Swekey_GetValidKey())        {            window.location.search = "?swekey_reset";        }        else            setTimeout("timedCheck()",1000);    }    setTimeout("timedCheck()",1000);    </script>     <?php    if (! empty($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']))        return null;    if (count($_SESSION['SWEKEY']['VALID_SWEKEYS']) == 0)        return sprintf(__('File %s does not contain any key id'), $GLOBALS['cfg']['Server']['auth_swekey_config']);    include_once "./libraries/auth/swekey/swekey.php";    Swekey_SetCheckServer($_SESSION['SWEKEY']['CONF_SERVER_CHECK']);    Swekey_SetRndTokenServer($_SESSION['SWEKEY']['CONF_SERVER_RNDTOKEN']);    Swekey_SetStatusServer($_SESSION['SWEKEY']['CONF_SERVER_STATUS']);    Swekey_EnableTokenCache($_SESSION['SWEKEY']['CONF_ENABLE_TOKEN_CACHE']);    $caFile = $_SESSION['SWEKEY']['CONF_CA_FILE'];    if (empty($caFile)) {        $caFile = __FILE__;        $pos = strrpos($caFile, '/');        if ($pos === false)            $pos = strrpos($caFile, '\\'); // windows        $caFile = substr($caFile, 0, $pos + 1).'musbe-ca.crt';//        echo "\n<!-- $caFile -->\n";//        if (file_exists($caFile))//            echo "<!-- exists -->\n";    }    if (file_exists($caFile)) {        Swekey_SetCAFile($caFile);    } elseif (! empty($caFile) && (substr($_SESSION['SWEKEY']['CONF_SERVER_CHECK'], 0, 8) == "https://")) {        return "Internal Error: CA File $caFile not found";    }    $result = null;    $swekey_id = $_GET['swekey_id'];    $swekey_otp = $_GET['swekey_otp'];    if (isset($swekey_id)) {        unset($_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY']);        if (! isset($_SESSION['SWEKEY']['RND_TOKEN'])) {            unset($swekey_id);        } else {            if (strlen($swekey_id) == 32) {                $res = Swekey_CheckOtp($swekey_id, $_SESSION['SWEKEY']['RND_TOKEN'], $swekey_otp);                unset($_SESSION['SWEKEY']['RND_TOKEN']);                if (! $res) {                    $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';                } else {                    $_SESSION['SWEKEY']['AUTHENTICATED_SWEKEY'] = $swekey_id;                    $_SESSION['SWEKEY']['FORCE_USER'] = $_SESSION['SWEKEY']['VALID_SWEKEYS'][$swekey_id];                    return null;                }            } else {                $result = __('No valid authentication key plugged');                if ($_SESSION['SWEKEY']['CONF_DEBUG']) {                    $result .= "<br>" . htmlspecialchars($swekey_id);                }                unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file            }        }    } else {        unset($_SESSION['SWEKEY']);    }    $_SESSION['SWEKEY']['RND_TOKEN'] = Swekey_GetFastRndToken();    if (strlen($_SESSION['SWEKEY']['RND_TOKEN']) != 64) {        $result = __('Hardware authentication failed') . ' (' . Swekey_GetLastError() . ')';        unset($_SESSION['SWEKEY']['CONF_LOADED']); // reload the conf file    }    if (! isset($swekey_id)) {        ?>        <script>    if (key.length != 32) {        window.location.search="?swekey_id=" + key + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    } else {        var url = "" + window.location;        if (url.indexOf("?") > 0)            url = url.substr(0, url.indexOf("?"));        Swekey_SetUnplugUrl(key, "pma_login", url + "?session_to_unset=<?php echo session_id();?>&token=<?php echo $_SESSION[' PMA_token ']; ?>");        var otp = Swekey_GetOtp(key, <?php echo '"'.$_SESSION['SWEKEY']['RND_TOKEN'].'"';?>);        window.location.search="?swekey_id=" + key + "&swekey_otp=" + otp + "&token=<?php echo $_SESSION[' PMA_token ']; ?>";    }        </script>        <?php        return __('Authenticating...');    }    return $result;}/** * Perform login using Swekey. */function Swekey_login($input_name, $input_go){    $swekeyErr = Swekey_auth_error();    if ($swekeyErr != null) {        PMA_Message::error($swekeyErr)->display();        if ($GLOBALS['error_handler']->hasDisplayErrors()) {            echo '<div>';            $GLOBALS['error_handler']->dispErrors();            echo '</div>';        }    }    if (isset($_SESSION['SWEKEY']) && $_SESSION['SWEKEY']['ENABLED']) {        echo '<script type="text/javascript">';        if (empty($_SESSION['SWEKEY']['FORCE_USER'])) {            echo 'var user = null;';        } else {           echo 'var user = "'.$_SESSION['SWEKEY']['FORCE_USER'].'";';        }        ?>            function open_swekey_site()            {                window.open("<?php echo PMA_linkURL('http://phpmyadmin.net/auth_key'); ?>");            }            var input_username = document.getElementById("<?php echo $input_name; ?>");            var input_go = document.getElementById("<?php echo $input_go; ?>");            var swekey_status = document.createElement('img');            swekey_status.setAttribute('onclick', 'open_swekey_site()');            swekey_status.setAttribute('style', 'width:8px; height:16px; border:0px; vspace:0px; hspace:0px; frameborder:no');            if (user == null)            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/unplugged-8x16.png');                //swekey_status.setAttribute('title', 'No swekey plugged');                input_go.disabled = true;            }            else            {                swekey_status.setAttribute('src', 'http://artwork.swekey.com/plugged-8x16.png');                //swekey_status.setAttribute('title', 'swekey plugged');                input_username.value = user;            }             input_username.readOnly = true;            if (input_username.nextSibling == null)                input_username.parentNode.appendChild(swekey_status);            else                input_username.parentNode.insertBefore(swekey_status, input_username.nextSibling);        <?php        echo '</script>';    }}if (!empty($_GET['session_to_unset'])) {    session_write_close();    session_id($_GET['session_to_unset']);    session_start();    $_SESSION = array();    session_write_close();    session_destroy();    exit;}if (isset($_GET['swekey_reset'])) {    unset($_SESSION['SWEKEY']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Output buffer functions for phpMyAdmin * * Copyright 2001 Jeremy Brand <jeremy@nirvani.net> * http://www.jeremybrand.com/Jeremy/Brand/Jeremy_Brand.html * * Check for all the needed functions for output buffering * Make some wrappers for the top and bottoms of our files. * * @package PhpMyAdmin *//** * This function be used eventually to support more modes.  It is needed * because both header and footer functions must know what each other is * doing. * * @staticvar integer remember last calculated value * @return  integer  the output buffer mode */function PMA_outBufferModeGet(){    static $mode = null;    if (null !== $mode) {        return $mode;    }    $mode = 0;    if ($GLOBALS['cfg']['OBGzip'] && function_exists('ob_start')) {        if (ini_get('output_handler') == 'ob_gzhandler') {            // If a user sets the output_handler in php.ini to ob_gzhandler, then            // any right frame file in phpMyAdmin will not be handled properly by            // the browser. My fix was to check the ini file within the            // PMA_outBufferModeGet() function.            $mode = 0;        } elseif (function_exists('ob_get_level') && ob_get_level() > 0) {            // If output buffering is enabled in php.ini it's not possible to            // add the ob_gzhandler without a warning message from php 4.3.0.            // Being better safe than sorry, check for any existing output handler            // instead of just checking the 'output_buffering' setting.            $mode = 0;        } else {            $mode = 1;        }    }    // Zero (0) is no mode or in other words output buffering is OFF.    // Follow 2^0, 2^1, 2^2, 2^3 type values for the modes.    // Usefull if we ever decide to combine modes.  Then a bitmask field of    // the sum of all modes will be the natural choice.    return $mode;} // end of the 'PMA_outBufferModeGet()' function/** * This function will need to run at the top of all pages if output * output buffering is turned on.  It also needs to be passed $mode from * the PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPre(){    if ($mode = PMA_outBufferModeGet()) {        ob_start('ob_gzhandler');    }    header('X-ob_mode: ' . $mode);    register_shutdown_function('PMA_outBufferPost');} // end of the 'PMA_outBufferPre()' function/** * This function will need to run at the bottom of all pages if output * buffering is turned on.  It also needs to be passed $mode from the * PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPost(){    if (ob_get_status() && PMA_outBufferModeGet()) {        ob_flush();    }    /**     * previously we had here an "else flush()" but some PHP versions     * (at least PHP 5.2.11) have a bug (49816) that produces garbled     * data     */} // end of the 'PMA_outBufferPost()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';// text color of the selected database name (when showing the table list)$GLOBALS['cfg']['NaviDatabaseNameColor']    = '#0000FF';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 50,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => '#E5E5E5',    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => '#FBFBFB',    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          => '#D5D9DD',    // the background color of the graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgTwo'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/** * Column types and functions supported by MySQL * * @package PhpMyAdmin */// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INT',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'TINYINT',        'SMALLINT',        'MEDIUMINT',        'INT',        'BIGINT',        '-',        'DECIMAL',        'FLOAT',        'DOUBLE',        'REAL',        '-',        'BIT',        'BOOLEAN',        'SERIAL',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',        'YEAR',    ),    // Text    'STRING' => array(        'CHAR',        'VARCHAR',        '-',        'TINYTEXT',        'TEXT',        'MEDIUMTEXT',        'LONGTEXT',        '-',        'BINARY',        'VARBINARY',        '-',        'TINYBLOB',        'MEDIUMBLOB',        'BLOB',        'LONGBLOB',        '-',        'ENUM',        'SET',    ),    'SPATIAL' => array(        'GEOMETRY',        'POINT',        'LINESTRING',        'POLYGON',        'MULTIPOINT',        'MULTILINESTRING',        'MULTIPOLYGON',        'GEOMETRYCOLLECTION',    ),);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'BINARY',   'UNSIGNED',   'UNSIGNED ZEROFILL',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'TINYINT'   => 'FUNC_NUMBER',        'SMALLINT'  => 'FUNC_NUMBER',        'MEDIUMINT' => 'FUNC_NUMBER',        'INT'       => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'FLOAT'     => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'REAL'      => 'FUNC_NUMBER',        'BIT'       => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'YEAR'      => 'FUNC_DATE',        'CHAR'       => 'FUNC_CHAR',        'VARCHAR'    => 'FUNC_CHAR',        'TINYTEXT'   => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'MEDIUMTEXT' => 'FUNC_CHAR',        'LONGTEXT'   => 'FUNC_CHAR',        'BINARY'     => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'TINYBLOB'   => 'FUNC_CHAR',        'MEDIUMBLOB' => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'LONGBLOB'   => 'FUNC_CHAR',        'ENUM'       => '',        'SET'        => '',        'GEOMETRY'           => 'FUNC_SPATIAL',        'POINT'              => 'FUNC_SPATIAL',        'LINESTRING'         => 'FUNC_SPATIAL',        'POLYGON'            => 'FUNC_SPATIAL',        'MULTIPOINT'         => 'FUNC_SPATIAL',        'MULTILINESTRING'    => 'FUNC_SPATIAL',        'MULTIPOLYGON'       => 'FUNC_SPATIAL',        'GEOMETRYCOLLECTION' => 'FUNC_SPATIAL',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'DES_DECRYPT',            'DES_ENCRYPT',            'ENCRYPT',            'HEX',            'INET_NTOA',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'OLD_PASSWORD',            'PASSWORD',            'QUOTE',            'REVERSE',            'RTRIM',            'SHA1',            'SOUNDEX',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SEC_TO_TIME',            'SYSDATE',            'TIME',            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_LENGTH',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'INET_ATON',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TO_SECONDS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            'UUID_SHORT',            'WEEK',            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),        'FUNC_SPATIAL' => array(            'GeomFromText',            'GeomFromWKB',            'GeomCollFromText',            'LineFromText',            'MLineFromText',            'PointFromText',            'MPointFromText',            'PolyFromText',            'MPolyFromText',            'GeomCollFromWKB',            'LineFromWKB',            'MLineFromWKB',            'PointFromWKB',            'MPointFromWKB',            'PolyFromWKB',            'MPolyFromWKB',        ),    );    // $restrict_functions holds all known functions, remove these that are unavailable on current server    if (PMA_MYSQL_INT_VERSION < 50500) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('TO_SECONDS'));    }    if (PMA_MYSQL_INT_VERSION < 50120) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('UUID_SHORT'));    }    if (empty($cfg['RestrictFunctions'])) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            if ($cat != 'FUNC_SPATIAL') {                $cfg['Functions'] = array_merge($cfg['Functions'], $functions);            }        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the available storage engines * * @package PhpMyAdmin *//** * defines */define('PMA_ENGINE_SUPPORT_NO', 0);define('PMA_ENGINE_SUPPORT_DISABLED', 1);define('PMA_ENGINE_SUPPORT_YES', 2);define('PMA_ENGINE_SUPPORT_DEFAULT', 3);define('PMA_ENGINE_DETAILS_TYPE_PLAINTEXT', 0);define('PMA_ENGINE_DETAILS_TYPE_SIZE',      1);define('PMA_ENGINE_DETAILS_TYPE_NUMERIC',   2); //Has no effect yet...define('PMA_ENGINE_DETAILS_TYPE_BOOLEAN',   3); // 'ON' or 'OFF'/** * base Storage Engine Class * @package PhpMyAdmin */class PMA_StorageEngine{    /**     * @var string engine name     */    var $engine  = 'dummy';    /**     * @var string engine title/description     */    var $title   = 'PMA Dummy Engine Class';    /**     * @var string engine lang description     */    var $comment = 'If you read this text inside phpMyAdmin, something went wrong...';    /**     * @var integer engine supported by current server     */    var $support = PMA_ENGINE_SUPPORT_NO;    /**     * returns array of storage engines     *     * @static     * @staticvar array $storage_engines storage engines     * @access  public     * @return  array    of storage engines     */    static public function getStorageEngines()    {        static $storage_engines = null;        if (null == $storage_engines) {            if (PMA_DRIZZLE) {                $sql = "SELECT                        p.plugin_name            AS Engine,                        (CASE                            WHEN p.plugin_name = @@storage_engine THEN 'DEFAULT'                            WHEN p.is_active THEN 'YES'                            ELSE 'DISABLED' END) AS Support,                        m.module_description     AS Comment                    FROM data_dictionary.plugins p                        JOIN data_dictionary.modules m USING (module_name)                    WHERE p.plugin_type = 'StorageEngine'                        AND p.plugin_name NOT IN ('FunctionEngine', 'schema')";                $storage_engines = PMA_DBI_fetch_result($sql, 'Engine');            } else {                $storage_engines = PMA_DBI_fetch_result('SHOW STORAGE ENGINES', 'Engine');            }        }        return $storage_engines;    }    /**     * returns HTML code for storage engine select box     *     * @param string  $name                    The name of the select form element     * @param string  $id                      The ID of the form field     * @param string  $selected                The selected engine     * @param boolean $offerUnavailableEngines Should unavailable storage engines be offered?     *     * @static     * @return  string  html selectbox     */    static public function getHtmlSelect($name = 'engine', $id = null,      $selected = null, $offerUnavailableEngines = false)    {        $selected   = strtolower($selected);        $output     = '<select name="' . $name . '"'            . (empty($id) ? '' : ' id="' . $id . '"') . '>' . "\n";        foreach (PMA_StorageEngine::getStorageEngines() as $key => $details) {            // Don't show PERFORMANCE_SCHEMA engine (MySQL 5.5)            // Don't show MyISAM for Drizzle (allowed only for temporary tables)            if (! $offerUnavailableEngines                && ($details['Support'] == 'NO'                || $details['Support'] == 'DISABLED'                || $details['Engine'] == 'PERFORMANCE_SCHEMA')                || (PMA_DRIZZLE && $details['Engine'] == 'MyISAM')            ) {                continue;            }            $output .= '    <option value="' . htmlspecialchars($key). '"'                . (empty($details['Comment'])                    ? '' : ' title="' . htmlspecialchars($details['Comment']) . '"')                . (strtolower($key) == $selected || (empty($selected) && $details['Support'] == 'DEFAULT')                    ? ' selected="selected"' : '') . '>' . "\n"                . '        ' . htmlspecialchars($details['Engine']) . "\n"                . '    </option>' . "\n";        }        $output .= '</select>' . "\n";        return $output;    }    /**     * public static final PMA_StorageEngine getEngine()     *     * Loads the corresponding engine plugin, if available.     *     * @param string $engine The engine ID     *     * @return  object  The engine plugin     */    static public function getEngine($engine)    {        $engine = str_replace('/', '', str_replace('.', '', $engine));        $engine_lowercase_filename = strtolower($engine);        if (file_exists('./libraries/engines/' . $engine_lowercase_filename . '.lib.php')            && include_once './libraries/engines/' . $engine_lowercase_filename . '.lib.php'        ) {            $class_name = 'PMA_StorageEngine_' . $engine;            $engine_object = new $class_name($engine);        } else {            $engine_object = new PMA_StorageEngine($engine);        }        return $engine_object;    }    /**     * return true if given engine name is supported/valid, otherwise false     *     * @param string $engine name of engine     *     * @static     * @return  boolean whether $engine is valid or not     */    static public function isValid($engine)    {        if ($engine == "PBMS") {            return true;        }        $storage_engines = PMA_StorageEngine::getStorageEngines();        return isset($storage_engines[$engine]);    }    /**     * returns as HTML table of the engine's server variables     *     * @return string The table that was generated based on the retrieved information     */    function getHtmlVariables()    {        $odd_row    = false;        $ret        = '';        foreach ($this->getVariablesStatus() as $details) {            $ret .= '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                  . '    <td>' . "\n";            if (! empty($details['desc'])) {                $ret .= '        ' . PMA_showHint($details['desc']) . "\n";            }            $ret .= '    </td>' . "\n"                  . '    <th>' . htmlspecialchars($details['title']) . '</th>' . "\n"                  . '    <td class="value">';            switch ($details['type']) {            case PMA_ENGINE_DETAILS_TYPE_SIZE:                $parsed_size = $this->resolveTypeSize($details['value']);                $ret .= $parsed_size[0] . '&nbsp;' . $parsed_size[1];                unset($parsed_size);                break;            case PMA_ENGINE_DETAILS_TYPE_NUMERIC:                $ret .= PMA_formatNumber($details['value']) . ' ';                break;            default:                $ret .= htmlspecialchars($details['value']) . '   ';            }            $ret .= '</td>' . "\n"                  . '</tr>' . "\n";            $odd_row = ! $odd_row;        }        if (! $ret) {            $ret = '<p>' . "\n"                 . '    ' . __('There is no detailed status information available for this storage engine.') . "\n"                 . '</p>' . "\n";        } else {            $ret = '<table class="data">' . "\n" . $ret . '</table>' . "\n";        }        return $ret;    }    /**     * returns the engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE type variables.     *     * This function should be overridden when     * PMA_ENGINE_DETAILS_TYPE_SIZE type needs to be     * handled differently for a particular engine.     *     * @return string the formatted value and its unit     */    function resolveTypeSize($value)    {        return PMA_formatByteDown($value);    }    /**     * returns array with detailed info about engine specific server variables     *     * @return  array   with detailed info about specific engine server variables     */    function getVariablesStatus()    {        $variables = $this->getVariables();        $like = $this->getVariablesLikePattern();        if ($like) {            $like = " LIKE '" . $like . "' ";        } else {            $like = '';        }        $mysql_vars = array();        $sql_query = 'SHOW GLOBAL VARIABLES ' . $like . ';';        $res = PMA_DBI_query($sql_query);        while ($row = PMA_DBI_fetch_assoc($res)) {            if (isset($variables[$row['Variable_name']])) {                $mysql_vars[$row['Variable_name']] = $variables[$row['Variable_name']];            } elseif (! $like             && strpos(strtolower($row['Variable_name']), strtolower($this->engine)) !== 0) {                continue;            }            $mysql_vars[$row['Variable_name']]['value'] = $row['Value'];            if (empty($mysql_vars[$row['Variable_name']]['title'])) {                $mysql_vars[$row['Variable_name']]['title'] = $row['Variable_name'];            }            if (! isset($mysql_vars[$row['Variable_name']]['type'])) {                $mysql_vars[$row['Variable_name']]['type'] = PMA_ENGINE_DETAILS_TYPE_PLAINTEXT;            }        }        PMA_DBI_free_result($res);        return $mysql_vars;    }    function engine_init() {}    /**     * Constructor     *     * @param string $engine The engine ID     */    function __construct($engine)    {        $storage_engines = PMA_StorageEngine::getStorageEngines();        if (! empty($storage_engines[$engine])) {            $this->engine  = $engine;            $this->title   = $storage_engines[$engine]['Engine'];            $this->comment                = (isset($storage_engines[$engine]['Comment'])                    ? $storage_engines[$engine]['Comment']                    : '');            switch ($storage_engines[$engine]['Support']) {            case 'DEFAULT':                $this->support = PMA_ENGINE_SUPPORT_DEFAULT;                break;            case 'YES':                $this->support = PMA_ENGINE_SUPPORT_YES;                break;            case 'DISABLED':                $this->support = PMA_ENGINE_SUPPORT_DISABLED;                break;            case 'NO':            default:                $this->support = PMA_ENGINE_SUPPORT_NO;            }        } else {            $this->engine_init();        }    }    /**     * public String getTitle()     *     * Reveals the engine's title     *     * @return string The title     */    function getTitle()    {        return $this->title;    }    /**     * public String getComment()     *     * Fetches the server's comment about this engine     *     * @return string The comment     */    function getComment()    {        return $this->comment;    }    /**     * public String getSupportInformationMessage()     *     * @return  string   The localized message.     */    function getSupportInformationMessage()    {        switch ($this->support) {        case PMA_ENGINE_SUPPORT_DEFAULT:            $message = __('%s is the default storage engine on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_YES:            $message = __('%s is available on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_DISABLED:            $message = __('%s has been disabled for this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_NO:        default:            $message = __('This MySQL server does not support the %s storage engine.');        }        return sprintf($message, htmlspecialchars($this->title));    }    /**     * public string[][] getVariables()     *     * Generates a list of MySQL variables that provide information about this     * engine. This function should be overridden when extending this class     * for a particular engine.     *     * @abstract     * @return   Array   The list of variables.     */    function getVariables()    {        return array();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return $this->engine . '-storage-engine';    }    /**     * public string getVariablesLikePattern()     *     * @abstract     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return false;    }    /**     * public String[] getInfoPages()     *     * Returns a list of available information pages with labels     *     * @abstract     * @return  array    The list     */    function getInfoPages()    {        return array();    }    /**     * public String getPage()     *     * Generates the requested information page     *     * @param string $id The page ID     *     * @abstract     * @return  string      The page     *          boolean     or false on error.     */    function getPage($id)    {        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer */require_once './libraries/pmd_common.php';/** * If called directly from the designer, first save the positions */if (! isset($scale)) {    $no_die_save_pos = 1;    include_once 'pmd_save_pos.php';}if (isset($mode)) {    if ('create_export' != $mode && empty($pdf_page_number)) {        die("<script>alert('Pages not found!');history.go(-2);</script>");    }    $pmd_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']);    $pma_table = PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_coords']);    $scale_q = PMA_sqlAddSlashes($scale);    if ('create_export' == $mode) {        $pdf_page_number = PMA_REL_create_page($newpage, $cfgRelation, $db);        if ($pdf_page_number > 0) {            $message = PMA_Message::success(__('Page has been created'));            $mode = 'export';        } else {            $message = PMA_Message::error(__('Page creation failed'));        }    }    $pdf_page_number_q = PMA_sqlAddSlashes($pdf_page_number);    if ('export' == $mode) {        $sql = "REPLACE INTO " . $pma_table . " (db_name, table_name, pdf_page_number, x, y) SELECT db_name, table_name, " . $pdf_page_number_q . ", ROUND(x/" . $scale_q . ") , ROUND(y/" . $scale_q . ") y FROM " . $pmd_table . " WHERE db_name = '" . PMA_sqlAddSlashes($db) . "'";        PMA_query_as_controluser($sql, true, PMA_DBI_QUERY_STORE);    }    if ('import' == $mode) {        PMA_query_as_controluser(        'UPDATE ' . $pma_table . ',' . $pmd_table .        ' SET ' . $pmd_table . '.`x`= ' . $pma_table . '.`x` * '. $scale_q . ',        ' . $pmd_table . '.`y`= ' . $pma_table . '.`y` * '. $scale_q .'        WHERE        ' . $pmd_table . '.`db_name`=' . $pma_table . '.`db_name`        AND        ' . $pmd_table . '.`table_name` = ' . $pma_table . '.`table_name`        AND        ' . $pmd_table . '.`db_name`=\''. PMA_sqlAddSlashes($db) .'\'        AND pdf_page_number = ' . $pdf_page_number_q . ';', true, PMA_DBI_QUERY_STORE);    }}// no need to use pmd/stylesrequire_once './libraries/header_meta_style.inc.php';?></head><body><br><div><?php    if (!empty($message)) {        $message->display();    }?>  <form name="form1" method="post" action="pmd_pdf.php"><?phpecho PMA_generate_common_hidden_inputs($db);echo '<div>';echo '<fieldset><legend>' . __('Import/Export coordinates for PDF schema') . '</legend>';$choices = array();$table_info_result = PMA_query_as_controluser('SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'');if (PMA_DBI_num_rows($table_info_result) > 0) {    echo '<p>' . __('Page') . ':';    echo '<select name="pdf_page_number">';    while ($page = PMA_DBI_fetch_assoc($table_info_result)) {        echo '<option value="' . $page['page_nr'] . '">';        echo htmlspecialchars($page['page_descr']);        echo '</option>';    }    echo '</select>';    echo '</p>';    $choices['import'] = __('Import from selected page');    $choices['export'] = __('Export to selected page');}$choices['create_export'] = __('Create a page and export to it');if (1 == count($choices)) {    echo $choices['create_export'];    echo '<input type="hidden" name="mode" value="create_export" />';} else {    PMA_display_html_radio('mode', $choices, $checked_choice = '', $line_break = true, $escape_label = false, $class = '');}echo '<br />';echo '<label for="newpage">' . __('New page name: ') . '</label>';echo '<input id="newpage" type="text" name="newpage" />';echo '<p>' . __('Export/Import to scale') . ':';?>      <select name="scale">        <option value="1">1:1</option>        <option value="2">1:2</option>        <option value="3" selected>1:3 (<?php echo __('recommended'); ?>)</option>        <option value="4">1:4</option>        <option value="5">1:5</option>        </select>      </p>      <input type="submit" value="<?php echo __('Go'); ?>">    </fieldset>    </div>  </form></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage Original *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 0,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => $GLOBALS['cfg']['ThBackground'],    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => $GLOBALS['cfg']['BgTwo'],    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          =>  '#D5D9DD',    // the background color of the inner graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgOne'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Messages for phpMyAdmin. * * This file defines variables in a special format suited for the * configuration subsystem, with $strConfig as a prefix, _desc or _name * as a suffix, and the directive name in between. * * @package PhpMyAdmin */if (!function_exists('__')) {    die('Bad invocation!');}$strConfigAjaxEnable_desc = __('Improves efficiency of screen refresh');$strConfigAjaxEnable_name = __('Enable Ajax');$strConfigAllowArbitraryServer_desc = __('If enabled user can enter any MySQL server in login form for cookie auth');$strConfigAllowArbitraryServer_name = __('Allow login to any MySQL server');$strConfigAllowThirdPartyFraming_desc = __('Enabling this allows a page located on a different domain to call phpMyAdmin inside a frame, and is a potential [strong]security hole[/strong] allowing cross-frame scripting attacks');$strConfigAllowThirdPartyFraming_name = __('Allow third party framing');$strConfigAllowUserDropDatabase_name = __('Show &quot;Drop database&quot; link to normal users');$strConfigblowfish_secret_desc = __('Secret passphrase used for encrypting cookies in [kbd]cookie[/kbd] authentication');$strConfigblowfish_secret_name = __('Blowfish secret');$strConfigBrowseMarkerEnable_desc = __('Highlight selected rows');$strConfigBrowseMarkerEnable_name = __('Row marker');$strConfigBrowsePointerEnable_desc = __('Highlight row pointed by the mouse cursor');$strConfigBrowsePointerEnable_name = __('Highlight pointer');$strConfigBZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Bzip2]bzip2[/a] compression for import and export operations');$strConfigBZipDump_name = __('Bzip2');$strConfigCharEditing_desc = __('Defines which type of editing controls should be used for CHAR and VARCHAR columns; [kbd]input[/kbd] - allows limiting of input length, [kbd]textarea[/kbd] - allows newlines in columns');$strConfigCharEditing_name = __('CHAR columns editing');$strConfigMinSizeForInputField_desc = __('Defines the minimum size for input fields generated for CHAR and VARCHAR columns');$strConfigMinSizeForInputField_name = __('Minimum size for input field');$strConfigMaxSizeForInputField_desc = __('Defines the maximum size for input fields generated for CHAR and VARCHAR columns');$strConfigMaxSizeForInputField_name = __('Maximum size for input field');$strConfigCharTextareaCols_desc = __('Number of columns for CHAR/VARCHAR textareas');$strConfigCharTextareaCols_name = __('CHAR textarea columns');$strConfigCharTextareaRows_desc = __('Number of rows for CHAR/VARCHAR textareas');$strConfigCharTextareaRows_name = __('CHAR textarea rows');$strConfigCheckConfigurationPermissions_name = __('Check config file permissions');$strConfigCompressOnFly_desc = __('Compress gzip/bzip2 exports on the fly without the need for much memory; if you encounter problems with created gzip/bzip2 files disable this feature');$strConfigCompressOnFly_name = __('Compress on the fly');$strConfigConfigurationFile = __('Configuration file');$strConfigConfirm_desc = __('Whether a warning (&quot;Are your really sure...&quot;) should be displayed when you\'re about to lose data');$strConfigConfirm_name = __('Confirm DROP queries');$strConfigDBG_sql_name = __('Debug SQL');$strConfigDefaultDisplay_name = __('Default display direction');$strConfigDefaultTabDatabase_desc = __('Tab that is displayed when entering a database');$strConfigDefaultTabDatabase_name = __('Default database tab');$strConfigDefaultTabServer_desc = __('Tab that is displayed when entering a server');$strConfigDefaultTabServer_name = __('Default server tab');$strConfigDefaultTabTable_desc = __('Tab that is displayed when entering a table');$strConfigDefaultTabTable_name = __('Default table tab');$strConfigDisplayBinaryAsHex_desc = __('Show binary contents as HEX by default');$strConfigDisplayBinaryAsHex_name = __('Show binary contents as HEX');$strConfigDisplayDatabasesList_desc = __('Show database listing as a list instead of a drop down');$strConfigDisplayDatabasesList_name = __('Display databases as a list');$strConfigDisplayServersList_desc = __('Show server listing as a list instead of a drop down');$strConfigDisplayServersList_name = __('Display servers as a list');$strConfigDisableMultiTableMaintenance_desc = __('Disable the table maintenance mass operations, like optimizing or repairing the selected tables of a database.');$strConfigDisableMultiTableMaintenance_name = __('Disable multi table maintenance');$strConfigEditInWindow_desc = __('Edit SQL queries in popup window');$strConfigEditInWindow_name = __('Edit in window');$strConfigError_Handler_display_name = __('Display errors');$strConfigError_Handler_gather_name = __('Gather errors');$strConfigErrorIconic_desc = __('Show icons for warning, error and information messages');$strConfigErrorIconic_name = __('Iconic errors');$strConfigExecTimeLimit_desc = __('Set the number of seconds a script is allowed to run ([kbd]0[/kbd] for no limit)');$strConfigExecTimeLimit_name = __('Maximum execution time');$strConfigExport_asfile_name = __('Save as file');$strConfigExport_charset_name = __('Character set of the file');$strConfigExport_codegen_format_name = __('Format');$strConfigExport_compression_name = __('Compression');$strConfigExport_csv_columns_name = __('Put columns names in the first row');$strConfigExport_csv_enclosed_name = __('Columns enclosed by');$strConfigExport_csv_escaped_name = __('Columns escaped by');$strConfigExport_csv_null_name = __('Replace NULL by');$strConfigExport_csv_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_csv_separator_name = __('Columns terminated by');$strConfigExport_csv_terminated_name = __('Lines terminated by');$strConfigExport_excel_columns_name = __('Put columns names in the first row');$strConfigExport_excel_edition_name = __('Excel edition');$strConfigExport_excel_null_name = __('Replace NULL by');$strConfigExport_excel_removeCRLF_name = __('Remove CRLF characters within columns');$strConfigExport_file_template_database_name = __('Database name template');$strConfigExport_file_template_server_name = __('Server name template');$strConfigExport_file_template_table_name = __('Table name template');$strConfigExport_format_name = __('Format');$strConfigExport_htmlword_columns_name = __('Put columns names in the first row');$strConfigExport_htmlword_null_name = __('Replace NULL by');$strConfigExport_htmlword_structure_or_data_name = __('Dump table');$strConfigExport_latex_caption_name = __('Include table caption');$strConfigExport_latex_columns_name = __('Put columns names in the first row');$strConfigExport_latex_comments_name = __('Comments');$strConfigExport_latex_data_caption_name = __('Table caption');$strConfigExport_latex_data_continued_caption_name = __('Continued table caption');$strConfigExport_latex_data_label_name = __('Label key');$strConfigExport_latex_mime_name = __('MIME type');$strConfigExport_latex_null_name  = __('Replace NULL by');$strConfigExport_latex_relation_name = __('Relations');$strConfigExport_latex_structure_caption_name = __('Table caption');$strConfigExport_latex_structure_continued_caption_name = __('Continued table caption');$strConfigExport_latex_structure_label_name = __('Label key');$strConfigExport_latex_structure_or_data_name = __('Dump table');$strConfigExport_method_name = __('Export method');$strConfigExport_ods_columns_name = __('Put columns names in the first row');$strConfigExport_ods_null_name = __('Replace NULL by');$strConfigExport_odt_columns_name = __('Put columns names in the first row');$strConfigExport_odt_comments_name = __('Comments');$strConfigExport_odt_mime_name = __('MIME type');$strConfigExport_odt_null_name = __('Replace NULL by');$strConfigExport_odt_relation_name = __('Relations');$strConfigExport_odt_structure_or_data_name = __('Dump table');$strConfigExport_onserver_name = __('Save on server');$strConfigExport_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_quick_export_onserver_name = __('Save on server');$strConfigExport_quick_export_onserver_overwrite_name = __('Overwrite existing file(s)');$strConfigExport_remember_file_template_name = __('Remember file name template');$strConfigExport_sql_auto_increment_name = __('Add AUTO_INCREMENT value');$strConfigExport_sql_backquotes_name = __('Enclose table and column names with backquotes');$strConfigExport_sql_compatibility_name = __('SQL compatibility mode');$strConfigExport_sql_create_table_statements_name = __('<code>CREATE TABLE</code> options:');$strConfigExport_sql_dates_name = __('Creation/Update/Check dates');$strConfigExport_sql_delayed_name = __('Use delayed inserts');$strConfigExport_sql_disable_fk_name = __('Disable foreign key checks');$strConfigExport_sql_drop_database_name = sprintf(__('Add %s'), 'DROP DATABASE');$strConfigExport_sql_drop_table_name = sprintf(__('Add %s'), 'DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_hex_for_blob_name = __('Use hexadecimal for BLOB');$strConfigExport_sql_if_not_exists_name = sprintf(__('Add %s'), 'IF NOT EXISTS');$strConfigExport_sql_ignore_name = __('Use ignore inserts');$strConfigExport_sql_include_comments_name = __('Comments');$strConfigExport_sql_insert_syntax_name = __('Syntax to use when inserting data');$strConfigExport_sql_max_query_size_name = __('Maximal length of created query');$strConfigExport_sql_mime_name = __('MIME type');$strConfigExport_sql_procedure_function_name = sprintf(__('Add %s'), 'CREATE PROCEDURE / FUNCTION / EVENT');$strConfigExport_sql_relation_name = __('Relations');$strConfigExport_sql_structure_or_data_name = __('Dump table');$strConfigExport_sql_type_name = __('Export type');$strConfigExport_sql_use_transaction_name = __('Enclose export in a transaction');$strConfigExport_sql_utc_time_name = __('Export time in UTC');$strConfigExport_texytext_columns_name = __('Put columns names in the first row');$strConfigExport_texytext_null_name = __('Replace NULL by');$strConfigExport_texytext_structure_or_data_name = __('Dump table');$strConfigExport_xls_columns_name = __('Put columns names in the first row');$strConfigExport_xls_null_name = __('Replace NULL by');$strConfigExport_xlsx_columns_name = __('Put columns names in the first row');$strConfigExport_xlsx_null_name = __('Replace NULL by');$strConfigForceSSL_desc = __('Force secured connection while using phpMyAdmin');$strConfigForceSSL_name = __('Force SSL connection');$strConfigForeignKeyDropdownOrder_desc = __('Sort order for items in a foreign-key dropdown box; [kbd]content[/kbd] is the referenced data, [kbd]id[/kbd] is the key value');$strConfigForeignKeyDropdownOrder_name = __('Foreign key dropdown order');$strConfigForeignKeyMaxLimit_desc = __('A dropdown will be used if fewer items are present');$strConfigForeignKeyMaxLimit_name = __('Foreign key limit');$strConfigForm_Browse = __('Browse mode');$strConfigForm_Browse_desc = __('Customize browse mode');$strConfigForm_CodeGen = 'CodeGen';$strConfigForm_CodeGen_desc = __('Customize default options');$strConfigForm_Csv = __('CSV');$strConfigForm_Csv_desc = __('Customize default options');$strConfigForm_Developer = __('Developer');$strConfigForm_Developer_desc = __('Settings for phpMyAdmin developers');$strConfigForm_Edit = __('Edit mode');$strConfigForm_Edit_desc = __('Customize edit mode');$strConfigForm_Export = __('Export');$strConfigForm_Export_defaults = __('Export defaults');$strConfigForm_Export_defaults_desc = __('Customize default export options');$strConfigForm_Features = __('Features');$strConfigForm_General = __('General');$strConfigForm_General_desc = __('Set some commonly used options');$strConfigForm_Import = __('Import');$strConfigForm_Import_defaults = __('Import defaults');$strConfigForm_Import_defaults_desc = __('Customize default common import options');$strConfigForm_Import_export = __('Import / export');$strConfigForm_Import_export_desc = __('Set import and export directories and compression options');$strConfigForm_Latex = __('LaTeX');$strConfigForm_Latex_desc = __('Customize default options');$strConfigForm_Left_databases = __('Databases');$strConfigForm_Left_databases_desc = __('Databases display options');$strConfigForm_Left_frame = __('Navigation frame');$strConfigForm_Left_frame_desc = __('Customize appearance of the navigation frame');$strConfigForm_Left_servers = __('Servers');$strConfigForm_Left_servers_desc = __('Servers display options');$strConfigForm_Left_tables = __('Tables');$strConfigForm_Left_tables_desc = __('Tables display options');$strConfigForm_Main_frame = __('Main frame');$strConfigForm_Microsoft_Office = __('Microsoft Office');$strConfigForm_Microsoft_Office_desc = __('Customize default options');$strConfigForm_Open_Document = __('Open Document');$strConfigForm_Open_Document_desc = __('Customize default options');$strConfigForm_Other_core_settings = __('Other core settings');$strConfigForm_Other_core_settings_desc = __('Settings that didn\'t fit enywhere else');$strConfigForm_Page_titles = __('Page titles');$strConfigForm_Page_titles_desc = __('Specify browser\'s title bar text. Refer to [a@Documentation.html#cfg_TitleTable]documentation[/a] for magic strings that can be used to get special values.');$strConfigForm_Query_window = __('Query window');$strConfigForm_Query_window_desc = __('Customize query window options');$strConfigForm_Security = __('Security');$strConfigForm_Security_desc = __('Please note that phpMyAdmin is just a user interface and its features do not limit MySQL');$strConfigForm_Server = __('Basic settings');$strConfigForm_Server_auth = __('Authentication');$strConfigForm_Server_auth_desc = __('Authentication settings');$strConfigForm_Server_config = __('Server configuration');$strConfigForm_Server_config_desc = __('Advanced server configuration, do not change these options unless you know what they are for');$strConfigForm_Server_desc = __('Enter server connection parameters');$strConfigForm_Server_pmadb = __('Configuration storage');$strConfigForm_Server_pmadb_desc = __('Configure phpMyAdmin configuration storage to gain access to additional features, see [a@Documentation.html#linked-tables]phpMyAdmin configuration storage[/a] in documentation');$strConfigForm_Server_tracking = __('Changes tracking');$strConfigForm_Server_tracking_desc = __('Tracking of changes made in database. Requires the phpMyAdmin configuration storage.');$strConfigFormset_Export = __('Customize export options');$strConfigFormset_Features = __('Features');$strConfigFormset_Import = __('Customize import defaults');$strConfigFormset_Left_frame = __('Customize navigation frame');$strConfigFormset_Main_frame = __('Customize main frame');$strConfigFormset_Sql_queries = __('SQL queries');$strConfigForm_Sql = __('SQL');$strConfigForm_Sql_box = __('SQL Query box');$strConfigForm_Sql_box_desc = __('Customize links shown in SQL Query boxes');$strConfigForm_Sql_desc = __('Customize default options');$strConfigForm_Sql_queries = __('SQL queries');$strConfigForm_Sql_queries_desc = __('SQL queries settings');$strConfigForm_Sql_validator = __('SQL Validator');$strConfigForm_Sql_validator_desc = __('If you wish to use the SQL Validator service, you should be aware that [strong]all SQL statements are stored anonymously for statistical purposes[/strong].[br][em][a@http://sqlvalidator.mimer.com/]Mimer SQL Validator[/a], Copyright 2002 Upright Database Technology. All rights reserved.[/em]');$strConfigForm_Startup = __('Startup');$strConfigForm_Startup_desc = __('Customize startup page');$strConfigForm_Tabs = __('Tabs');$strConfigForm_Tabs_desc = __('Choose how you want tabs to work');$strConfigForm_Text_fields = __('Text fields');$strConfigForm_Text_fields_desc = __('Customize text input fields');$strConfigForm_Texy = __('Texy! text');$strConfigForm_Texy_desc = __('Customize default options');$strConfigForm_Warnings = __('Warnings');$strConfigForm_Warnings_desc = __('Disable some of the warnings shown by phpMyAdmin');$strConfigGZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/Gzip]gzip[/a] compression for import and export operations');$strConfigGZipDump_name = __('GZip');$strConfigIconvExtraParams_name = __('Extra parameters for iconv');$strConfigIgnoreMultiSubmitErrors_desc = __('If enabled, phpMyAdmin continues computing multiple-statement queries even if one of the queries failed');$strConfigIgnoreMultiSubmitErrors_name = __('Ignore multiple statement errors');$strConfigImport_allow_interrupt_desc = __('Allow interrupt of import in case script detects it is close to time limit. This might be good way to import large files, however it can break transactions.');$strConfigImport_allow_interrupt_name = __('Partial import: allow interrupt');$strConfigImport_charset_name = __('Character set of the file');$strConfigImport_csv_col_names_name = __('Lines terminated by');$strConfigImport_csv_enclosed_name = __('Columns enclosed by');$strConfigImport_csv_escaped_name = __('Columns escaped by');$strConfigImport_csv_ignore_name = __('Do not abort on INSERT error');$strConfigImport_csv_replace_name = __('Replace table data with file');$strConfigImport_csv_terminated_name = __('Columns terminated by');$strConfigImport_format_desc = __('Default format; be aware that this list depends on location (database, table) and only SQL is always available');$strConfigImport_format_name = __('Format of imported file');$strConfigImport_ldi_enclosed_name = __('Columns enclosed by');$strConfigImport_ldi_escaped_name = __('Columns escaped by');$strConfigImport_ldi_ignore_name = __('Do not abort on INSERT error');$strConfigImport_ldi_local_option_name = __('Use LOCAL keyword');$strConfigImport_ldi_replace_name = __('Replace table data with file');$strConfigImport_ldi_terminated_name = __('Columns terminated by');$strConfigImport_ods_col_names_name = __('Column names in first row');$strConfigImport_ods_empty_rows_name = __('Do not import empty rows');$strConfigImport_ods_recognize_currency_name = __('Import currencies ($5.00 to 5.00)');$strConfigImport_ods_recognize_percentages_name = __('Import percentages as proper decimals (12.00% to .12)');$strConfigImport_skip_queries_desc = __('Number of queries to skip from start');$strConfigImport_skip_queries_name = __('Partial import: skip queries');$strConfigImport_sql_compatibility_name = __('SQL compatibility mode');$strConfigImport_sql_no_auto_value_on_zero_name = __('Do not use AUTO_INCREMENT for zero values');$strConfigImport_xls_col_names_name = __('Column names in first row');$strConfigImport_xlsx_col_names_name = __('Column names in first row');$strConfigInitialSlidersState_name = __('Initial state for sliders');$strConfigInsertRows_desc = __('How many rows can be inserted at one time');$strConfigInsertRows_name = __('Number of inserted rows');$strConfigLeftDefaultTabTable_name = __('Target for quick access icon');$strConfigLeftDisplayLogo_desc = __('Show logo in left frame');$strConfigLeftDisplayLogo_name = __('Display logo');$strConfigLeftDisplayServers_desc = __('Display server choice at the top of the left frame');$strConfigLeftDisplayServers_name = __('Display servers selection');$strConfigLeftDisplayTableFilterMinimum_name = __('Minimum number of tables to display the table filter box');$strConfigLeftFrameDBSeparator_desc = __('String that separates databases into different tree levels');$strConfigLeftFrameDBSeparator_name = __('Database tree separator');$strConfigLeftFrameDBTree_desc = __('Only light version; display databases in a tree (determined by the separator defined below)');$strConfigLeftFrameDBTree_name = __('Display databases in a tree');$strConfigLeftFrameLight_desc = __('Disable this if you want to see all databases at once');$strConfigLeftFrameLight_name = __('Use light version');$strConfigLeftFrameTableLevel_name = __('Maximum table tree depth');$strConfigLeftFrameTableSeparator_desc = __('String that separates tables into different tree levels');$strConfigLeftFrameTableSeparator_name = __('Table tree separator');$strConfigLeftLogoLink_desc = __('URL where logo in the navigation frame will point to');$strConfigLeftLogoLink_name = __('Logo link URL');$strConfigLeftLogoLinkWindow_desc = __('Open the linked page in the main window ([kbd]main[/kbd]) or in a new one ([kbd]new[/kbd])');$strConfigLeftLogoLinkWindow_name = __('Logo link target');$strConfigLeftPointerEnable_desc = __('Highlight server under the mouse cursor');$strConfigLeftPointerEnable_name = __('Enable highlighting');$strConfigLeftRecentTable_desc = __('Maximum number of recently used tables; set 0 to disable');$strConfigLeftRecentTable_name = __('Recently used tables');$strConfigLightTabs_desc = __('Use less graphically intense tabs');$strConfigLightTabs_name = __('Light tabs');$strConfigLimitChars_desc = __('Maximum number of characters shown in any non-numeric column on browse view');$strConfigLimitChars_name = __('Limit column characters');$strConfigLoginCookieDeleteAll_desc = __('If TRUE, logout deletes cookies for all servers; when set to FALSE, logout only occurs for the current server. Setting this to FALSE makes it easy to forget to log out from other servers when connected to multiple servers.');$strConfigLoginCookieDeleteAll_name = __('Delete all cookies on logout');$strConfigLoginCookieRecall_desc = __('Define whether the previous login should be recalled or not in cookie authentication mode');$strConfigLoginCookieRecall_name = __('Recall user name');$strConfigLoginCookieStore_desc = __('Defines how long (in seconds) a login cookie should be stored in browser. The default of 0 means that it will be kept for the existing session only, and will be deleted as soon as you close the browser window. This is recommended for non-trusted environments.');$strConfigLoginCookieStore_name = __('Login cookie store');$strConfigLoginCookieValidity_desc = __('Define how long (in seconds) a login cookie is valid');$strConfigLoginCookieValidity_name = __('Login cookie validity');$strConfigLongtextDoubleTextarea_desc = __('Double size of textarea for LONGTEXT columns');$strConfigLongtextDoubleTextarea_name = __('Bigger textarea for LONGTEXT');$strConfigMainPageIconic_name = __('Use icons on main page');$strConfigMaxCharactersInDisplayedSQL_desc = __('Maximum number of characters used when a SQL query is displayed');$strConfigMaxCharactersInDisplayedSQL_name = __('Maximum displayed SQL length');$strConfigMaxDbList_cmt = __('Users cannot set a higher value');$strConfigMaxDbList_desc = __('Maximum number of databases displayed in left frame and database list');$strConfigMaxDbList_name = __('Maximum databases');$strConfigMaxRows_desc = __('Number of rows displayed when browsing a result set. If the result set contains more rows, &quot;Previous&quot; and &quot;Next&quot; links will be shown.');$strConfigMaxRows_name = __('Maximum number of rows to display');$strConfigMaxTableList_cmt = __('Users cannot set a higher value');$strConfigMaxTableList_desc = __('Maximum number of tables displayed in table list');$strConfigMaxTableList_name = __('Maximum tables');$strConfigMcryptDisableWarning_desc = __('Disable the default warning that is displayed if mcrypt is missing for cookie authentication');$strConfigMcryptDisableWarning_name = __('mcrypt warning');$strConfigMemoryLimit_desc = __('The number of bytes a script is allowed to allocate, eg. [kbd]32M[/kbd] ([kbd]0[/kbd] for no limit)');$strConfigMemoryLimit_name = __('Memory limit');$strConfigRowActionLinks_desc = __('These are Edit, Copy and Delete links');$strConfigRowActionLinks_name = __('Where to show the table row links');$strConfigNaturalOrder_desc = __('Use natural order for sorting table and database names');$strConfigNaturalOrder_name = __('Natural order');$strConfigNavigationBarIconic_desc = __('Use only icons, only text or both');$strConfigNavigationBarIconic_name = __('Iconic navigation bar');$strConfigOBGzip_desc = __('use GZip output buffering for increased speed in HTTP transfers');$strConfigOBGzip_name = __('GZip output buffering');$strConfigOrder_desc = __('[kbd]SMART[/kbd] - i.e. descending order for columns of type TIME, DATE, DATETIME and TIMESTAMP, ascending order otherwise');$strConfigOrder_name = __('Default sorting order');$strConfigPersistentConnections_desc = __('Use persistent connections to MySQL databases');$strConfigPersistentConnections_name = __('Persistent connections');$strConfigPmaNoRelation_DisableWarning_desc = __('Disable the default warning that is displayed on the database details Structure page if any of the required tables for the phpMyAdmin configuration storage could not be found');$strConfigPmaNoRelation_DisableWarning_name = __('Missing phpMyAdmin configuration storage tables');$strConfigPropertiesIconic_desc = __('Use only icons, only text or both');$strConfigPropertiesIconic_name = __('Iconic table operations');$strConfigProtectBinary_desc = __('Disallow BLOB and BINARY columns from editing');$strConfigProtectBinary_name = __('Protect binary columns');$strConfigQueryHistoryDB_desc = __('Enable if you want DB-based query history (requires phpMyAdmin configuration storage). If disabled, this utilizes JS-routines to display query history (lost by window close).');$strConfigQueryHistoryDB_name = __('Permanent query history');$strConfigQueryHistoryMax_cmt = __('Users cannot set a higher value');$strConfigQueryHistoryMax_desc = __('How many queries are kept in history');$strConfigQueryHistoryMax_name = __('Query history length');$strConfigQueryWindowDefTab_desc = __('Tab displayed when opening a new query window');$strConfigQueryWindowDefTab_name = __('Default query window tab');$strConfigQueryWindowHeight_desc = __('Query window height (in pixels)');$strConfigQueryWindowHeight_name = __('Query window height');$strConfigQueryWindowWidth_desc = __('Query window width (in pixels)');$strConfigQueryWindowWidth_name = __('Query window width');$strConfigRecodingEngine_desc = __('Select which functions will be used for character set conversion');$strConfigRecodingEngine_name = __('Recoding engine');$strConfigRememberSorting_desc = __('When browsing tables, the sorting of each table is remembered');$strConfigRememberSorting_name = __('Remember table\'s sorting');$strConfigRepeatCells_desc = __('Repeat the headers every X cells, [kbd]0[/kbd] deactivates this feature');$strConfigRepeatCells_name = __('Repeat headers');$strConfigReplaceHelpImg_desc = __('Show help button instead of Documentation text');$strConfigReplaceHelpImg_name = __('Show help button');$strConfigRestoreDefaultValue = __('Restore default value');$strConfigSaveCellsAtOnce_name = __('Save all edited cells at once');$strConfigSaveDir_desc = __('Directory where exports can be saved on server');$strConfigSaveDir_name = __('Save directory');$strConfigServers_AllowDeny_order_desc = __('Leave blank if not used');$strConfigServers_AllowDeny_order_name = __('Host authorization order');$strConfigServers_AllowDeny_rules_desc = __('Leave blank for defaults');$strConfigServers_AllowDeny_rules_name = __('Host authorization rules');$strConfigServers_AllowNoPassword_name = __('Allow logins without a password');$strConfigServers_AllowRoot_name = __('Allow root login');$strConfigServers_auth_http_realm_desc = __('HTTP Basic Auth Realm name to display when doing HTTP Auth');$strConfigServers_auth_http_realm_name = __('HTTP Realm');$strConfigServers_auth_swekey_config_desc = __('The path for the config file for [a@http://swekey.com]SweKey hardware authentication[/a] (not located in your document root; suggested: /etc/swekey.conf)');$strConfigServers_auth_swekey_config_name = __('SweKey config file');$strConfigServers_auth_type_desc = __('Authentication method to use');$strConfigServers_auth_type_name = __('Authentication type');$strConfigServers_bookmarktable_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/bookmark]bookmark[/a] support, suggested: [kbd]pma_bookmark[/kbd]');$strConfigServers_bookmarktable_name = __('Bookmark table');$strConfigServers_column_info_desc = __('Leave blank for no column comments/mime types, suggested: [kbd]pma_column_info[/kbd]');$strConfigServers_column_info_name = __('Column information table');$strConfigServers_compress_desc = __('Compress connection to MySQL server');$strConfigServers_compress_name = __('Compress connection');$strConfigServers_connect_type_desc = __('How to connect to server, keep [kbd]tcp[/kbd] if unsure');$strConfigServers_connect_type_name = __('Connection type');$strConfigServers_controlpass_name = __('Control user password');$strConfigServers_controluser_desc = __('A special MySQL user configured with limited permissions, more information available on [a@http://wiki.phpmyadmin.net/pma/controluser]wiki[/a]');$strConfigServers_controluser_name = __('Control user');$strConfigServers_controlhost_desc = __('An alternate host to hold the configuration storage; leave blank to use the already defined host');$strConfigServers_controlhost_name = __('Control host');$strConfigServers_CountTables_desc = __('Count tables when showing database list');$strConfigServers_CountTables_name = __('Count tables');$strConfigServers_designer_coords_desc = __('Leave blank for no Designer support, suggested: [kbd]pma_designer_coords[/kbd]');$strConfigServers_designer_coords_name = __('Designer table');$strConfigServers_DisableIS_desc = __('More information on [a@http://sf.net/support/tracker.php?aid=1849494]PMA bug tracker[/a] and [a@http://bugs.mysql.com/19588]MySQL Bugs[/a]');$strConfigServers_DisableIS_name = __('Disable use of INFORMATION_SCHEMA');$strConfigServers_extension_desc = __('What PHP extension to use; you should use mysqli if supported');$strConfigServers_extension_name = __('PHP extension to use');$strConfigServers_hide_db_desc = __('Hide databases matching regular expression (PCRE)');$strConfigServers_hide_db_name = __('Hide databases');$strConfigServers_history_desc = __('Leave blank for no SQL query history support, suggested: [kbd]pma_history[/kbd]');$strConfigServers_history_name = __('SQL query history table');$strConfigServers_host_desc = __('Hostname where MySQL server is running');$strConfigServers_host_name = __('Server hostname');$strConfigServers_LogoutURL_name = __('Logout URL');$strConfigServers_MaxTableUiprefs_desc = __('Limits number of table preferences which are stored in database, the oldest records are automatically removed');$strConfigServers_MaxTableUiprefs_name = __('Maximal number of table preferences to store');$strConfigServers_nopassword_desc = __('Try to connect without password');$strConfigServers_nopassword_name = __('Connect without password');$strConfigServers_only_db_desc = __('You can use MySQL wildcard characters (% and _), escape them if you want to use their literal instances, i.e. use [kbd]\'my\_db\'[/kbd] and not [kbd]\'my_db\'[/kbd]. Using this option you can sort database list, just enter their names in order and use [kbd]*[/kbd] at the end to show the rest in alphabetical order.');$strConfigServers_only_db_name = __('Show only listed databases');$strConfigServers_password_desc = __('Leave empty if not using config auth');$strConfigServers_password_name = __('Password for config auth');$strConfigServers_pdf_pages_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_pdf_pages[/kbd]');$strConfigServers_pdf_pages_name = __('PDF schema: pages table');$strConfigServers_pmadb_desc = __('Database used for relations, bookmarks, and PDF features. See [a@http://wiki.phpmyadmin.net/pma/pmadb]pmadb[/a] for complete information. Leave blank for no support. Suggested: [kbd]phpmyadmin[/kbd]');$strConfigServers_pmadb_name = __('Database name');$strConfigServers_port_desc = __('Port on which MySQL server is listening, leave empty for default');$strConfigServers_port_name = __('Server port');$strConfigServers_recent_desc = __('Leave blank for no "persistent" recently used tables across sessions, suggested: [kbd]pma_recent[/kbd]');$strConfigServers_recent_name = __('Recently used table');$strConfigServers_relation_desc = __('Leave blank for no [a@http://wiki.phpmyadmin.net/pma/relation]relation-links[/a] support, suggested: [kbd]pma_relation[/kbd]');$strConfigServers_relation_name = __('Relation table');$strConfigServers_ShowDatabasesCommand_desc = __('SQL command to fetch available databases');$strConfigServers_ShowDatabasesCommand_name = __('SHOW DATABASES command');$strConfigServers_SignonSession_desc = __('See [a@http://wiki.phpmyadmin.net/pma/auth_types#signon]authentication types[/a] for an example');$strConfigServers_SignonSession_name = __('Signon session name');$strConfigServers_SignonURL_name = __('Signon URL');$strConfigServers_socket_desc = __('Socket on which MySQL server is listening, leave empty for default');$strConfigServers_socket_name = __('Server socket');$strConfigServers_ssl_desc = __('Enable SSL for connection to MySQL server');$strConfigServers_ssl_name = __('Use SSL');$strConfigServers_table_coords_desc = __('Leave blank for no PDF schema support, suggested: [kbd]pma_table_coords[/kbd]');$strConfigServers_table_coords_name = __('PDF schema: table coordinates');$strConfigServers_table_info_desc = __('Table to describe the display columns, leave blank for no support; suggested: [kbd]pma_table_info[/kbd]');$strConfigServers_table_info_name = __('Display columns table');$strConfigServers_table_uiprefs_desc = __('Leave blank for no "persistent" tables\'UI preferences across sessions, suggested: [kbd]pma_table_uiprefs[/kbd]');$strConfigServers_table_uiprefs_name = __('UI preferences table');$strConfigServers_tracking_add_drop_database_desc = __('Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database.');$strConfigServers_tracking_add_drop_database_name = __('Add DROP DATABASE');$strConfigServers_tracking_add_drop_table_desc = __('Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table.');$strConfigServers_tracking_add_drop_table_name = __('Add DROP TABLE');$strConfigServers_tracking_add_drop_view_desc = __('Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view.');$strConfigServers_tracking_add_drop_view_name = __('Add DROP VIEW');$strConfigServers_tracking_default_statements_desc = __('Defines the list of statements the auto-creation uses for new versions.');$strConfigServers_tracking_default_statements_name = __('Statements to track');$strConfigServers_tracking_desc = __('Leave blank for no SQL query tracking support, suggested: [kbd]pma_tracking[/kbd]');$strConfigServers_tracking_name = __('SQL query tracking table');$strConfigServers_tracking_version_auto_create_desc = __('Whether the tracking mechanism creates versions for tables and views automatically.');$strConfigServers_tracking_version_auto_create_name = __('Automatically create versions');$strConfigServers_userconfig_desc = __('Leave blank for no user preferences storage in database, suggested: [kbd]pma_userconfig[/kbd]');$strConfigServers_userconfig_name = __('User preferences storage table');$strConfigServers_user_desc = __('Leave empty if not using config auth');$strConfigServers_user_name = __('User for config auth');$strConfigServers_verbose_check_desc = __('Disable if you know that your pma_* tables are up to date. This prevents compatibility checks and thereby increases performance');$strConfigServers_verbose_check_name = __('Verbose check');$strConfigServers_verbose_desc = __('A user-friendly description of this server. Leave blank to display the hostname instead.');$strConfigServers_verbose_name = __('Verbose name of this server');$strConfigShowAll_desc = __('Whether a user should be displayed a &quot;show all (rows)&quot; button');$strConfigShowAll_name = __('Allow to display all the rows');$strConfigShowChgPassword_desc = __('Please note that enabling this has no effect with [kbd]config[/kbd] authentication mode because the password is hard coded in the configuration file; this does not limit the ability to execute the same command directly');$strConfigShowChgPassword_name = __('Show password change form');$strConfigShowCreateDb_name = __('Show create database form');$strConfigShowDisplayDirection_desc = __('Defines whether or not type display direction option is shown when browsing a table');$strConfigShowDisplayDirection_name = __('Show display direction');$strConfigShowFieldTypesInDataEditView_desc = __('Defines whether or not type fields should be initially displayed in edit/insert mode');$strConfigShowFieldTypesInDataEditView_name = __('Show field types');$strConfigShowFunctionFields_desc = __('Display the function fields in edit/insert mode');$strConfigShowFunctionFields_name = __('Show function fields');$strConfigShowHint_desc = __('Whether to show hint or not');$strConfigShowHint_name = __('Show hint');$strConfigShowPhpInfo_desc = __('Shows link to [a@http://php.net/manual/function.phpinfo.php]phpinfo()[/a] output');$strConfigShowPhpInfo_name = __('Show phpinfo() link');$strConfigShowServerInfo_name = __('Show detailed MySQL server information');$strConfigShowSQL_desc = __('Defines whether SQL queries generated by phpMyAdmin should be displayed');$strConfigShowSQL_name = __('Show SQL queries');$strConfigRetainQueryBox_desc = __('Defines whether the query box should stay on-screen after its submission');$strConfigRetainQueryBox_name = __('Retain query box');$strConfigShowStats_desc = __('Allow to display database and table statistics (eg. space usage)');$strConfigShowStats_name = __('Show statistics');$strConfigShowTooltipAliasDB_desc = __('If tooltips are enabled and a database comment is set, this will flip the comment and the real name');$strConfigShowTooltipAliasDB_name = __('Display database comment instead of its name');$strConfigShowTooltipAliasTB_desc = __('When setting this to [kbd]nested[/kbd], the alias of the table name is only used to split/nest the tables according to the $cfg[\'LeftFrameTableSeparator\'] directive, so only the folder is called like the alias, the table name itself stays unchanged');$strConfigShowTooltipAliasTB_name = __('Display table comment instead of its name');$strConfigShowTooltip_name = __('Display table comments in tooltips');$strConfigSkipLockedTables_desc = __('Mark used tables and make it possible to show databases with locked tables');$strConfigSkipLockedTables_name = __('Skip locked tables');$strConfigSQLQuery_Edit_name = __('Edit');$strConfigSQLQuery_Explain_name = __('Explain SQL');$strConfigSQLQuery_Refresh_name = __('Refresh');$strConfigSQLQuery_ShowAsPHP_name = __('Create PHP Code');$strConfigSQLQuery_Validate_desc = __('Requires SQL Validator to be enabled');$strConfigSQLQuery_Validate_name = __('Validate SQL');$strConfigSQLValidator_password_name = __('Password');$strConfigSQLValidator_use_desc = __('[strong]Warning:[/strong] requires PHP SOAP extension or PEAR SOAP to be installed');$strConfigSQLValidator_use_name = __('Enable SQL Validator');$strConfigSQLValidator_username_desc = __('If you have a custom username, specify it here (defaults to [kbd]anonymous[/kbd])');$strConfigSQLValidator_username_name = __('Username');$strConfigSuggestDBName_desc = __('Suggest a database name on the &quot;Create Database&quot; form (if possible) or keep the text field empty');$strConfigSuggestDBName_name = __('Suggest new database name');$strConfigSuhosinDisableWarning_desc = __('A warning is displayed on the main page if Suhosin is detected');$strConfigSuhosinDisableWarning_name = __('Suhosin warning');$strConfigTextareaCols_desc = __('Textarea size (columns) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaCols_name = __('Textarea columns');$strConfigTextareaRows_desc = __('Textarea size (rows) in edit mode, this value will be emphasized for SQL query textareas (*2) and for query window (*1.25)');$strConfigTextareaRows_name = __('Textarea rows');$strConfigTitleDatabase_desc = __('Title of browser window when a database is selected');$strConfigTitleDatabase_name = __('Database');$strConfigTitleDefault_desc = __('Title of browser window when nothing is selected');$strConfigTitleDefault_name = __('Default title');$strConfigTitleServer_desc = __('Title of browser window when a server is selected');$strConfigTitleServer_name = __('Server');$strConfigTitleTable_desc = __('Title of browser window when a table is selected');$strConfigTitleTable_name = __('Table');$strConfigTrustedProxies_desc = __('Input proxies as [kbd]IP: trusted HTTP header[/kbd]. The following example specifies that phpMyAdmin should trust a HTTP_X_FORWARDED_FOR (X-Forwarded-For) header coming from the proxy 1.2.3.4:[br][kbd]1.2.3.4: HTTP_X_FORWARDED_FOR[/kbd]');$strConfigTrustedProxies_name = __('List of trusted proxies for IP allow/deny');$strConfigUploadDir_desc = __('Directory on server where you can upload files for import');$strConfigUploadDir_name = __('Upload directory');$strConfigUseDbSearch_desc = __('Allow for searching inside the entire database');$strConfigUseDbSearch_name = __('Use database search');$strConfigUserprefsDeveloperTab_desc = __('When disabled, users cannot set any of the options below, regardless of the checkbox on the right');$strConfigUserprefsDeveloperTab_name = __('Enable the Developer tab in settings');$strConfigVerboseMultiSubmit_desc = __('Show affected rows of each statement on multiple-statement queries. See libraries/import.lib.php for defaults on how many queries a statement may contain.');$strConfigVerboseMultiSubmit_name = __('Verbose multiple statements');$strConfigVersionCheckLink = __('Check for latest version');$strConfigVersionCheck_desc = __('Enables check for latest version on main phpMyAdmin page');$strConfigVersionCheck_name = __('Version check');$strConfigZipDump_desc = __('Enable [a@http://en.wikipedia.org/wiki/ZIP_(file_format)]ZIP[/a] compression for import and export operations');$strConfigZipDump_name = __('ZIP');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * main css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (        isset($_COOKIE['pma_fontsize']) ? $_COOKIE['pma_fontsize'] : '82%'));?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    padding:            0;    margin:             0 0.5em 0 0;    color:              #444;    background:         #fff;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>textarea, tt, pre, code {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>h1 {    font-size:          140%;    font-weight:        bold;}h2 {    font-size:          2em;    font-weight:        normal;    text-shadow:        0 1px 0 #fff;    padding:            10px 0 10px 3px;    color:              #777;}/* Hiding icons in the page titles */h2 img{display:none;}h2 a img{display:inline;}.data,.data_full_width {    margin: 0 0 12px 0;}.data_full_width {    width: 100%;}#table_results td.data {border-right: 1px solid #BBBBBB;}h3 {    font-weight:        bold;}a, a:link,a:visited,a:active {    text-decoration:    none;    color:              #235a81;    cursor:             pointer;    outline: none;}a:hover {    text-decoration:    underline;    color:              #235a81;}#initials_table {    background:#f3f3f3;    border:1px solid #aaa;    margin-bottom:10px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;}#initials_table td{padding:8px !important}#initials_table a {    border:1px solid #aaa;    background:#fff;    padding:4px 8px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}dfn {    font-style:         normal;}dfn:hover {    font-style:         normal;    cursor:             help;}th {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         #f3f3f3;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}a img {    border:             0;}hr {    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background-color:   <?php echo $GLOBALS['cfg']['MainColor']; ?>;    border:             0;    height:             1px;}form {    padding:            0;    margin:             0;    display:            inline;}input[type=text]{    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    box-shadow:0 1px 2px #ddd;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);    border:1px solid #aaa;    color:#555555;    padding:4px;    margin:6px;}input[type=password]{    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    box-shadow:0 1px 2px #ddd;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);    border:1px solid #aaa;    color:#555555;    padding:4px;    margin:6px;}input[type=submit]{    font-weight:bold;    margin-left:14px;    border: 1px solid #aaa;    padding: 3px 7px;    color: #111;    text-decoration: none;    background: #ddd;    border-radius: 12px;    -webkit-border-radius: 12px;    -moz-border-radius: 12px;    text-shadow: 0 1px 0 #fff;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}input[type=submit]:hover{position: relative;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>    cursor:pointer;}input[type=submit]:active{position: relative;    top: 1px;    left: 1px;}textarea {    overflow:           visible;    height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;}textarea.char {    height:             <?php echo ceil($GLOBALS['cfg']['CharTextareaRows'] * 1.2); ?>em;}fieldset {    margin-top:         1em;    border-radius:4px 4px 0 0;    -moz-border-radius:4px 4px 0 0;    -webkit-border-radius:4px 4px 0 0;    padding:5px;    border:             #aaa solid 1px;    padding:            1.5em;    background:         #eee;    text-shadow:0 1px 0 #fff;    -moz-box-shadow: 1px 1px 2px #fff inset;    -webkit-box-shadow: 1px 1px 2px #fff inset;    box-shadow: 1px 1px 2px #fff inset;}fieldset fieldset {    margin:             0.8em;    background:#fff;    border:1px solid #aaa;    background:none repeat scroll 0 0 #E8E8E8;}fieldset legend {    font-weight:        bold;    color:              #444;    padding:5px 10px;    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    border:1px solid #aaa;    background-color:   #fff;    -moz-box-shadow:3px 3px 15px #bbb;    -webkit-box-shadow:3px 3px 15px #bbb;    box-shadow:3px 3px 15px #bbb;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}table caption,table th,table td {    padding:            0.3em;    margin:             0.1em;    vertical-align:     top;    text-shadow:0 1px 0 #FFFFFF;}/* 3.4 */table{border-collapse:collapse;}th{border-right:1px solid #fff; text-align:left;}img, button {    vertical-align:     middle;}input[type="checkbox"],input[type="radio"] {    vertical-align: -11%;}select{    -moz-border-radius:2px;    -webkit-border-radius:2px;    border-radius:2px;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    box-shadow:0 1px 2px #ddd;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif)}select[multiple] {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'f2f2f2'); ?>}/******************************************************************************//* classes */.clearfloat {    clear: both;}.floatleft {    float: <?php echo $left; ?>;    margin-<?php echo $right; ?>: 1em;}.paddingtop {    padding-top: 1em;}.separator {    color: white;    text-shadow: 0 1px 0 black;}div.tools {   /* border: 1px solid #000000; */    padding: 0.2em;}div.tools a{color:#3a7ead !important;}div.tools,fieldset.tblFooters {    margin-top:         0;    margin-bottom:      0.5em;    /* avoid a thick line since this should be used under another fieldset */    border-top:         0;    text-align:         <?php echo $right; ?>;    float:              none;    clear:              both;    -webkit-border-radius:0 0 4px 4px;    -moz-border-radius:0 0 4px 4px;    border-radius: 0 0 4px 5px;}div.null_div {    height: 20px;    text-align: center;    font-style:normal;    min-width:50px;}fieldset .formelement {    float:              <?php echo $left; ?>;    margin-<?php echo $right; ?>:       0.5em;    /* IE */    white-space:        nowrap;}/* revert for Gecko */fieldset div[class=formelement] {    white-space:        normal;}button.mult_submit {    border:             none;    background-color:   transparent;}/* odd items 1,3,5,7,... */table tr.odd th,.odd {    background: #fff;    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>}/* even items 2,4,6,8,... *//* (tested on CRTs and ACLs) */table tr.even th,.even {    background: #DFDFDF;    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>}/* odd table rows 1,3,5,7,... */table tr.odd th,table tr.odd,table tr.even th,table tr.even {    text-align:         <?php echo $left; ?>;}<?php if ($GLOBALS['cfg']['BrowseMarkerEnable']) { ?>/* marked table rows */td.marked,table tr.marked td,table tr.marked th,table tr.marked {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7;    color:   <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['BrowsePointerEnable']) { ?>/* hovered items */.odd:hover,.even:hover,.hover,.structure_actions_dropdown {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */    color: <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}/* hovered table rows */table tr.odd:hover th,table tr.even:hover th,table tr.hover th {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */    color:   <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}<?php } ?>/** * marks table rows/cells if the db field is in a where condition */.condition {    border-color: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?> !important;}th.condition {    border-width: 1px 1px 0 1px;    border-style: solid;}td.condition {    border-width: 0 1px 0 1px;    border-style: solid;}tr:last-child td.condition {    border-width: 0 1px 1px 1px;}<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>/* for first th which must have right border set (ltr only) */.before-condition {    border-right: 1px solid <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;}<?php } ?>/** * cells with the value NULL */td.null {    font-style: italic;    text-align: <?php echo $right; ?>;}table .valueHeader {    text-align:         <?php echo $right; ?>;    white-space:        normal;}table .value {    text-align:         <?php echo $right; ?>;    white-space:        normal;}/* IE doesnt handles 'pre' right */table [class=value] {    white-space:        normal;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>.value {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>.attention {    color:              red;    font-weight:        bold;}.allfine {    color:              green;}img.lightbulb {    cursor:             pointer;}.pdflayout {    overflow:           hidden;    clip:               inherit;    background-color:   #FFFFFF;    display:            none;    border:             1px solid #000000;    position:           relative;}.pdflayout_table {    background:         #D3DCE3;    color:              #000000;    overflow:           hidden;    clip:               inherit;    z-index:            2;    display:            inline;    visibility:         inherit;    cursor:             move;    position:           absolute;    font-size:          80%;    border:             1px dashed #000000;}/* MySQL Parser */.syntax {    font-family: Verdan, Arial, Tahoma;    font-size:          110%;}.syntax a {    text-decoration: none;    border-bottom:1px dotted black;}.syntax_comment {    padding-left:       4pt;    padding-right:      4pt;}.syntax_digit {}.syntax_digit_hex {}.syntax_digit_integer {}.syntax_digit_float {}.syntax_punct {}.syntax_alpha {}.syntax_alpha_columnType {    text-transform:     uppercase;}.syntax_alpha_columnAttrib {    text-transform:     uppercase;}.syntax_alpha_reservedWord {    text-transform:     uppercase;    font-weight:        bold;}.syntax_alpha_functionName {    text-transform:     uppercase;}.syntax_alpha_identifier {}.syntax_alpha_charset {}.syntax_alpha_variable {}.syntax_quote {    white-space:        pre;}.syntax_quote_backtick {}/* leave some space between icons and text */img.footnotemarker {    display: none;}/* no extra space in table cells */td .icon {    margin: 0;}.selectallarrow {    margin-<?php echo $right; ?>: 0.3em;    margin-<?php echo $left; ?>: 0.6em;}/* message boxes: error, confirmation */.success h1,.notice h1,div.error h1 {    border-bottom:      2px solid;    font-weight:        bold;    text-align:         <?php echo $left; ?>;    margin:             0 0 0.2em 0;}div.success,div.notice,div.error,div.footnotes {    margin:             0.5em 0 1.3em 0;    border:             1px solid;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            10px 10px 10px 25px;        <?php } else { ?>    background-position: 99% 50%;    padding:            25px 10px 10px 10px        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    -moz-box-shadow: 0 1px 1px #fff inset;    -webkit-box-shadow: 0 1px 1px #fff inset;    box-shadow:  0 1px 1px #fff inset;}.success  a{text-decoration:underline;}.notice a{text-decoration:underline;}.error a{text-decoration:underline;}.footnotes a{text-decoration:underline;}.success {    color:              #000000;    background-color:   #ebf8a4;}h1.success, div.success {    border-color:       #a2d246;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}.success h1 {    border-color:       #00FF00;}.notice, .footnotes {    color:              #000;    background-color:   #e8eef1;}h1.notice,div.notice,div.footnotes {    border-color:       #3a6c7e;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}.notice h1 {    border-color:       #ffb10a;}.error {    border:1px solid maroon !important;    color: #000;    background:pink;}h1.error,div.error {    border-color:       #333;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}div.error h1 {    border-color:       #ff0000;}.confirmation {    color:              #000000;    background-color:   pink;}fieldset.confirmation {}fieldset.confirmation legend {}/* end messageboxes */.tblcomment {    font-size:          70%;    font-weight:        normal;    color:              #000099;}.tblHeaders {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}div.tools,.tblFooters {    font-weight:        normal;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}.tblHeaders a:link,.tblHeaders a:active,.tblHeaders a:visited,div.tools a:link,div.tools a:visited,div.tools a:active,.tblFooters a:link,.tblFooters a:active,.tblFooters a:visited {    color:              #0000FF;}.tblHeaders a:hover,div.tools a:hover,.tblFooters a:hover {    color:              #FF0000;}/* forbidden, no privilegs */.noPrivileges {    color:              #FF0000;    font-weight:        bold;}/* disabled text */.disabled,.disabled a:link,.disabled a:active,.disabled a:visited {    color:              #666666;}.disabled a:hover {    color:              #666666;    text-decoration:    none;}tr.disabled td,td.disabled {    background-color:   #f3f3f3;    color:#aaa;}.nowrap {    white-space:        nowrap;}/** * login form */body.loginform h1,body.loginform a.logo {    display: block;    text-align: center;}body.loginform {    text-align: center;}body.loginform div.container {    text-align: <?php echo $left; ?>;    width: 30em;    margin: 0 auto;}form.login label {    float: <?php echo $left; ?>;    width: 10em;    font-weight: bolder;}.commented_column {    border-bottom: 1px dashed black;}.column_attribute {    font-size: 70%;}/******************************************************************************//* specific elements *//* topmenu */#topmenu a {    text-shadow: 0 1px 0 #fff;}#topmenu .error {    background:#eee;border: 0 !important;color:#aaa;}ul#topmenu, ul#topmenu2, ul.tabs {    font-weight:        bold;    list-style-type:    none;    margin:             0;    padding:            0;}ul#topmenu2 {    margin: 0.25em 0.5em 0;    height: 2em;    clear: both;}ul#topmenu li, ul#topmenu2 li {    float:              <?php echo $left; ?>;    margin:             0;    vertical-align:     middle;}#topmenu img, #topmenu2 img {    margin-right:0.5em;    vertical-align:-3px;}.menucontainer{    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_bg.png) repeat-x;    border-top:1px solid #aaa;}/* default tab styles */.tabactive {    background:#fff !important;}ul#topmenu a, ul#topmenu span {    display:            block;    margin:             0;    padding:            0;    white-space:        nowrap;}ul#topmenu ul a {    margin:             0;}ul#topmenu .submenu {    display:           none;    position:          relative;}ul#topmenu .shown {    display:            inline-block;}ul#topmenu ul {    margin:             0;    padding:            0;    position:           absolute;    list-style-type:    none;    display:            none;    border:             1px #ddd solid;    z-index:            2;}ul#topmenu ul.only {    left: 0;}ul#topmenu ul.notonly {    right: 0;}ul#topmenu li:hover {    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_hover_bg.png) repeat-x 50% 0%!important;}ul#topmenu li:hover ul, ul#topmenu .submenuhover ul {    display:            block;    font-weight:3em;    background:#fff;}ul#topmenu ul li {    width:              100%;}ul#topmenu2 a {    display:            block;    margin:             7px 6px 7px 0;    padding:            4px 10px;    white-space:        nowrap;    border:1px solid #ddd;    border-radius: 20px;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    background:#f2f2f2;}/* disabled tabs */ul#topmenu span.tab {    color:              #666666;}fieldset.caution a {    color:              #FF0000;}fieldset.caution a:hover {    color:              #ffffff;    background-color:   #FF0000;}<?php if ($GLOBALS['cfg']['LightTabs']) { ?>/* active tab */ul#topmenu a.tabactive, ul#topmenu2 a.tabactive {    color:              black;}ul#topmenu ul {    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php } else { ?>#topmenu {    margin-top:         0.5em;    padding:            0.1em 0.3em 0.1em 0.3em;}ul#topmenu ul {    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;}ul#topmenu > li {    border-right: 1px solid #fff;    border-left: 1px solid #ccc;}/* default tab styles */ul#topmenu a, ul#topmenu span {    padding: 0.6em;}ul#topmenu ul a {    border-width:       1pt 0 0 0;    -moz-border-radius: 0;    -webkit-border-radius: 0;    border-radius:      0;}ul#topmenu ul li:first-child a {    border-width:       0;}/* enabled hover/active tabs */ul#topmenu > li > a:hover,ul#topmenu > li > .tabactive {    text-decoration:    none;}ul#topmenu ul a:hover,ul#topmenu ul .tabactive {    text-decoration:    none;}ul#topmenu a.tab:hover,ul#topmenu .tabactive {    /* background-color:   <?php echo $GLOBALS['cfg']['MainBackground']; ?>;  */}ul#topmenu2 a.tab:hover,ul#topmenu2 a.tabactive {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    border-radius:      0.3em;    -moz-border-radius: 0.3em;    -webkit-border-radius: 0.3em;    text-decoration:    none;}/* to be able to cancel the bottom border, use <li class="active"> */ul#topmenu > li.active {    /* border-bottom:      0pt solid <?php echo $GLOBALS['cfg']['MainBackground']; ?>; */    border-right: 0;}/* disabled tabs */ul#topmenu span.tab,a.error {    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;    color:#ccc;}<?php } ?>/* end topmenu *//* zoom search */div#dataDisplay input, div#dataDisplay select {    margin: 0;    margin-<?php echo $right; ?>: 0.5em;}div#dataDisplay th {    line-height: 2em;}/* Calendar */table.calendar {    width:              100%;}table.calendar td {    text-align:         center;}table.calendar td a {    display:            block;}table.calendar td a:hover {    background-color:   #CCFFCC;}table.calendar th {    background-color:   #D3DCE3;}table.calendar td.selected {    background-color:   #FFCC99;}img.calendar {    border:             none;}form.clock {    text-align:         center;}/* end Calendar *//* table stats */div#tablestatistics table {    float: <?php echo $left; ?>;    margin-bottom: 0.5em;    margin-<?php echo $right; ?>: 1.5em;    margin-top: 0.5em;}/* END table stats *//* server privileges */#tableuserrights td,#tablespecificuserrights td,#tabledatabases td {    vertical-align: middle;}/* END server privileges *//* Heading */#topmenucontainer {    padding-right: 1em;    width: 100%;    background-color: #dcdcdc;}#serverinfo {    border-bottom:1px solid #fff;    background:#888;    padding: 0.3em 0.9em;    text-shadow:0 1px 0 #000000;    width: 10000px;    overflow: hidden;}#serverinfo .item {    white-space:        nowrap;    color:#fff;    float: <?php echo $left; ?>}#span_table_comment {    font-weight:        normal;    font-style:         italic;    white-space:        nowrap;}#serverinfo img {    margin:             0 0.1em 0 0.2em;}#textSQLDUMP {    width:              95%;    height:             95%;    font-family:        "Courier New", Courier, mono;    font-size:          110%;}#TooltipContainer {    position:           absolute;    z-index:            99;    width:              20em;    height:             auto;    overflow:           visible;    visibility:         hidden;    background-color:   #ffffcc;    color:              #006600;    border:             0.1em solid #000000;    padding:            0.5em;}/* user privileges */#fieldset_add_user_login div.item {    border-bottom:      1px solid silver;    padding-bottom:     0.3em;    margin-bottom:      0.3em;}#fieldset_add_user_login label {    float:              <?php echo $left; ?>;    display:            block;    width:              10em;    max-width:          100%;    text-align:         <?php echo $right; ?>;    padding-<?php echo $right; ?>:      0.5em;}#fieldset_add_user_login span.options #select_pred_username,#fieldset_add_user_login span.options #select_pred_hostname,#fieldset_add_user_login span.options #select_pred_password {    width:              100%;    max-width:          100%;}#fieldset_add_user_login span.options {    float: <?php echo $left; ?>;    display: block;    width: 12em;    max-width: 100%;    padding-<?php echo $right; ?>: 0.5em;}#fieldset_add_user_login input {    width: 12em;    clear: <?php echo $right; ?>;    max-width: 100%;}#fieldset_add_user_login span.options input {    width: auto;}#fieldset_user_priv div.item {    float: <?php echo $left; ?>;    width: 9em;    max-width: 100%;}#fieldset_user_priv div.item div.item {    float: none;}#fieldset_user_priv div.item label {    white-space: nowrap;}#fieldset_user_priv div.item select {    width: 100%;}#fieldset_user_global_rights fieldset {    float: <?php echo $left; ?>;}/* END user privileges *//* serverstatus */.linkElem:hover {    text-decoration:    underline;    color:              #235a81;    cursor: pointer;}h3#serverstatusqueries span {    font-size:60%;    display:inline;}img.sortableIcon {    float:right;    background-repeat:no-repeat;    margin:0;}.buttonlinks {    float: <?php echo $right; ?>;    white-space: nowrap;}.jsfeature {    display: none; /* Made visible with js */}/* Also used for the variables page */fieldset#tableFilter {    margin-bottom:1em;}div#serverStatusTabs {    margin-top:1em;}caption a.top {    float: <?php echo $right; ?>;}div#serverstatusquerieschart {    float:<?php echo $left; ?>;    width:500px;    height:350px;    padding-<?php echo $left; ?>: 30px;}table#serverstatusqueriesdetails, table#serverstatustraffic {    float: <?php echo $left; ?>;}table#serverstatusqueriesdetails th {    min-width: 35px;}table#serverstatusvariables {    width: 100%;    margin-bottom: 1em;}table#serverstatusvariables .name {    width: 18em;    white-space:nowrap;}table#serverstatusvariables .value {    width: 6em;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}div#serverstatus table tbody td.descr a,div#serverstatus table .tblFooters a {    white-space: nowrap;}div.liveChart {    clear:both;    min-width:500px;    height:400px;    padding-bottom:80px;}#addChartDialog input[type="text"] {    margin: 0;    padding: 3px;}div#chartVariableSettings {    border:1px solid #ddd;    background-color:#E6E6E6;    margin-left:10px;}table#chartGrid div.monitorChart {    background: #EBEBEB;}div#serverstatus div.tabLinks {    float:<?php echo $left; ?>;    padding-bottom: 10px;}.popupContent {    display: none;    position: absolute;    border: 1px solid #CCC;    margin:0;    padding:3px;    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;    background-color:white;    z-index: 2;}div#logTable {    padding-top: 10px;    clear: both;}div#logTable table {    width:100%;}div#queryAnalyzerDialog {    min-width: 700px;}div#queryAnalyzerDialog div.CodeMirror-scroll {    height:auto;}div#queryAnalyzerDialog div#queryProfiling {    height: 250px;}div#queryAnalyzerDialog td.explain {    width: 250px;}div#queryAnalyzerDialog table.queryNums {    display: none;    border:0;    text-align:left;}.smallIndent {    padding-left: 7px;}/* end serverstatus *//* server variables */a.editLink {    float: <?php echo $left; ?>;    font-family:sans-serif;}table.serverVariableEditTable {    border:0;    margin:0;    padding:0;    width:100%;}table.serverVariableEditTable td {    border:0;    margin:0;    padding:0;}table.serverVariableEditTable td:first-child {    white-space:nowrap;    vertical-align:middle;}table.serverVariableEditTable input {    width:95%;}table#serverVariables td {    height:18px;}/* end server variables */p.notice {    margin:             1.5em 0;    border:             1px solid #000;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            10px 10px 10px 25px;        <?php } else { ?>    background-position: 99% 50%;    padding:            25px 10px 10px 10px        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    -moz-box-shadow: 0 1px 2px #fff inset;    -webkit-box-shadow: 0 1px 2px #fff inset;    box-shadow: 0 1px 2px #fff; inset;    background:#555;    color:#d4fb6a;}p.notice a {    color:#fff;    text-decoration:underline;}/* querywindow */body#bodyquerywindow {    margin: 0;    padding: 0;    background-image: none;    background-color: #F5F5F5;}div#querywindowcontainer {    margin: 0;    padding: 0;    width: 100%;}div#querywindowcontainer fieldset {    margin-top: 0;}/* END querywindow *//* profiling */div#profilingchart {    width:550px;    height:370px;    float:left;}/* END profiling *//* table charting */#resizer {    border: 1px solid silver;}#inner-resizer { /* make room for the resize handle */    padding: 10px;}/* END table charting *//* querybox */#togglequerybox{margin:0 10px}#serverstatus h3{    margin: 15px 0;    font-weight:normal;    color:#999;    font-size:1.7em;}#sectionlinks{    padding:16px;    background:#f3f3f3;    border:1px solid #aaa;    border-radius:5px;    -webkit-border-radius:5px;    -moz-border-radius:5px;    box-shadow: 0 1px 1px #fff inset;    -webkit-box-shadow: 0 1px 1px #fff inset;    -moz-box-shadow: 0 1px 1px #fff inset;}#sectionlinks a, .buttonlinks a, a.button {    font-size:0.88em;    font-weight:bold;    text-shadow: 0 1px 0 #fff;    line-height:35px;    margin-left:7px;    border: 1px solid #aaa;    padding: 5px 10px;    color: #111;    text-decoration: none;    background: #ddd;    white-space: nowrap;    border-radius: 20px;    -webkit-border-radius: 20px;    -moz-border-radius: 20px;    box-shadow: 1px 1px 2px rgba(0,0,0,.5);    /*    -webkit-box-shadow: 1px 1px 2px rgba(0,0,0,.5);    -moz-box-shadow: 1px 1px 2px rgba(0,0,0,.5);    text-shadow: #fff 0 1px 0;    */    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}#sectionlinks a:hover, .buttonlinks a:hover, a.button:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}div#sqlquerycontainer {    float: <?php echo $left; ?>;    width: 69%;    /* height: 15em; */}div#tablefieldscontainer {    float: <?php echo $right; ?>;    width: 29%;    /* height: 15em; */}div#tablefieldscontainer select {    width: 100%;    background:#fff;    /* height: 12em; */}textarea#sqlquery {    width: 100%;    /* height: 100%; */    -moz-border-radius:4px;    -webkit-border-radius:4px;    border-raduis:4px    border:1px solid #aaa;    padding:5px;    font-family:inherit;}textarea#sql_query_edit{    height:7em;    width: 95%;    display:block;}div#queryboxcontainer div#bookmarkoptions {    margin-top: 0.5em;}/* end querybox *//* main page */#maincontainer {    /* background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png); */    /* background-position: <?php echo $right; ?> bottom; */    /* background-repeat: no-repeat; */}#mysqlmaininformation,#pmamaininformation {    float: <?php echo $left; ?>;    width: 49%;}#maincontainer ul {    list-style-type: disc;    vertical-align: middle;}#maincontainer li {    margin-bottom:  0.3em;}/* END main page */<?php if ($GLOBALS['cfg']['MainPageIconic']) { ?>/* iconic view for ul items */li#li_create_database {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);}li#li_select_lang {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);}li#li_select_mysql_collation {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_select_theme{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);}li#li_user_info{    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */}li#li_mysql_status{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);}li#li_mysql_variables{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);}li#li_mysql_processes{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);}li#li_mysql_collations{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_mysql_engines{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);}li#li_mysql_binlogs {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);}li#li_mysql_databases {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);}li#li_export {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);}li#li_import {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);}li#li_change_password {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);}li#li_log_out {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);}li#li_mysql_privilegs{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);}li#li_switch_dbstats {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);}li#li_flush_privileges {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);}li#li_user_preferences {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);}/* END iconic view for ul items */<?php } /* end if $GLOBALS['cfg']['MainPageIconic'] */ ?>#body_browse_foreigners {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    margin:             0.5em 0.5em 0 0.5em;}#bodyquerywindow {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}#bodythemes {    width: 500px;    margin: auto;    text-align: center;}#bodythemes img {    border: 0.1em solid black;}#bodythemes a:hover img {    border: 0.1em solid red;}#fieldset_select_fields {    float: <?php echo $left; ?>;}#selflink {    clear: both;    display: block;    margin-top: 1em;    margin-bottom: 1em;    background:#f3f3f3;    width: 100%;    border-top: 0.1em solid silver;    text-align: <?php echo $right; ?>;}#table_innodb_bufferpool_usage,#table_innodb_bufferpool_activity {    float: <?php echo $left; ?>;}#div_mysql_charset_collations table {    float: <?php echo $left; ?>;}.operations_half_width {    width: 48%;    float: <?php echo $left; ?>;}.operations_full_width {    width: 100%;    clear: both;}#qbe_div_table_list {    float: <?php echo $left; ?>;}#qbe_div_sql_query {    float: <?php echo $left; ?>;}label.desc {    width: 30em;    float: <?php echo $left; ?>;}label.desc sup {    position: absolute;}code.sql, div.sqlvalidate {    display:            block;    padding:            1em;    margin-top:         0;    margin-bottom:      0;    border-top:         0;    border-bottom:      0;    max-height:         10em;    overflow:           auto;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}#main_pane_left {    width:              60%;    float:              <?php echo $left; ?>;    padding-top:        1em;}#main_pane_right {    margin-<?php echo $left; ?>: 60%;    padding-top: 1em;    padding-<?php echo $left; ?>: 1em;}.group {    border:1px solid #999;    background:#f3f3f3;    -moz-border-radius:4px;    -webkit-border-radius:4px;    border-radius:4px;    -moz-box-shadow:2px 2px 5px #ccc;    -webkit-box-shadow:2px 2px 5px #ccc;    box-shadow:3px 3px 10px #ddd;    margin-bottom:      1em;    padding-bottom: 1em;}.group h2 {    background-color:   #bbb;    padding:            0.1em 0.3em;    margin-top:         0;    color:#fff;    font-size:1.6em;    font-weight:normal;    text-shadow:0 1px 0 #777;    -moz-box-shadow: 1px 1px 15px  #999 inset;    -webkit-box-shadow: 1px 1px 15px  #999 inset;    box-shadow: 1px 1px 15px  #999 inset;}.group-cnt {    padding: 0 0 0 0.5em;    display: inline-block;    width: 98%;}textarea#partitiondefinition {    height:3em;}/* for elements that should be revealed only via js */.hide {    display:            none;}#li_select_server {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);}#list_server {    list-style-image: none;}/**  *  Progress bar styles  */div.upload_progress_bar_outer{    border: 1px solid black;    width: 202px;}div.upload_progress_bar_inner{    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    width: 0;    height: 12px;    margin: 1px;}table#serverconnection_src_remote,table#serverconnection_trg_remote,table#serverconnection_src_local,table#serverconnection_trg_local  {  float:left;}/**  *  Validation error message styles  */input[type=text].invalid_value,.invalid_value {    background:#FFCCCC;}/**  *  Ajax notification styling  */ .ajax_notification {    top: 0;           /** The notification needs to be shown on the top of the page */    position: fixed;    margin-top: 0;    margin-right: auto;    margin-bottom: 0;    margin-left: auto;    padding: 5px;   /** Keep a little space on the sides of the text */    width: 350px;    z-index: 1100;      /** If this is not kept at a high z-index, the jQueryUI modal dialogs (z-index:1000) might hide this */    text-align: center;    display: inline;    left: 0;    right: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);    background-repeat: no-repeat;    background-position: 2%;    border:1px solid #e2b709; }/* additional styles */.ajax_notification{    margin-top:200px;background:#ffe57e;    border-radius:5px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    box-shadow: 0 5px 90px #888;    -moz-box-shadow: 0 5px 90px #888;    -webkit-box-shadow: 0 5px 90px #888;}#loading_parent {    /** Need this parent to properly center the notification division */    position: relative;    width: 100%; }/**  * Export and Import styles  */.exportoptions h3, .importoptions h3 {    border-bottom: 1px #999999 solid;    font-size: 110%;}.exportoptions ul, .importoptions ul, .format_specific_options ul {    list-style-type: none;    margin-bottom: 15px;}.exportoptions li, .importoptions li {    margin: 7px;}.exportoptions label, .importoptions label, .exportoptions p, .importoptions p {    margin: 5px;    float: none;}#csv_options label.desc, #ldi_options label.desc, #latex_options label.desc, #output label.desc{    float: left;    width: 15em;}.exportoptions, .importoptions {    margin: 20px 30px 30px 10px}.exportoptions #buttonGo, .importoptions #buttonGo {    font-weight:bold;    margin-left:14px;    border: 1px solid #aaa;    padding: 5px 12px;    color: #111;    text-decoration: none;    background: #ddd;    border-radius: 12px;    -webkit-border-radius: 12px;    -moz-border-radius: 12px;    text-shadow: 0 1px 0 #fff;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    cursor: pointer;}#buttonGo:hover{    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}.format_specific_options h3 {    margin: 10px 0 0 10px;    border: 0;}.format_specific_options {    border: 1px solid #999999;    margin: 7px 0;    padding: 3px;}p.desc {    margin: 5px;}/**  * Export styles only  */select#db_select, select#table_select {    width: 400px;}.export_sub_options {    margin: 20px 0 0 30px;}.export_sub_options h4 {    border-bottom: 1px #999999 solid;}.export_sub_options li.subgroup {    display: inline-block;    margin-top: 0;}.export_sub_options li {    margin-bottom: 0;}#quick_or_custom, #output_quick_export {    display: none;}/** * Import styles only */.importoptions #import_notification {    margin: 10px 0;    font-style: italic;}input#input_import_file {    margin: 5px;}.formelementrow {    margin: 5px 0 5px 0;}/** * GIS data editor styles */a.close_gis_editor {    float: right;}#gis_editor {    display: none;    position: fixed;    _position: absolute; /* hack for IE */    z-index: 1001;    overflow-y: auto;    overflow-x: hidden;}#gis_data {    min-height: 230px;}#gis_data_textarea {    height: 6em;}#gis_data_editor {    background: #D0DCE0;    padding: 15px;    min-height: 500px;}#gis_data_editor .choice {    display: none;}#gis_data_editor input[type="text"] {    width: 75px;}#popup_background {    display: none;    position: fixed;    _position: absolute; /* hack for IE6 */    width: 100%;    height: 100%;    top: 0;    left: 0;    background: #000;    z-index: 1000;    overflow: hidden;}/** * ENUM/SET editor styles */p.enum_notice {    margin: 5px 2px;    font-size: 80%;}.enum_editor_no_js fieldset {    width: 40em;}hr.enum_editor_no_js {    background-color: #aaa;}#enum_editor p {    margin-top: 0;    font-style:italic;}#enum_editor .values, #enum_editor .add, .enum_editor_no_js #values {    width: 100%;}#enum_editor .add td {    vertical-align: middle;    width: 50%;    padding: 0 0 0 1em;}#enum_editor .values td.drop {    width: 1.8em;    cursor: pointer;    vertical-align: middle;}#enum_editor .values input {    margin: 0.1em 0;    padding-right: 2em;    width: 100%;}#enum_editor .values img {    width: 1.8em;    vertical-align: middle;}#enum_editor input.add_value {    margin: 0 0.4em 0 0;}#enum_editor_output textarea,.enum_editor_no_js input {    width: 100%;    float: right;    margin: 1em 0 0 0;}.enum_editor_no_js {    width: 40em;}.enum_editor_no_js input.submit {    float: left;    margin: 1em 0;}/** * ENUM/SET editor integration for the routines editor */.enum_hint {    position: relative;}.enum_hint a {    position: absolute;    left: 81%;    bottom: 0.35em;}/** * Table structure styles */.structure_actions_dropdown {    position: absolute;    padding: 3px;    display: none;    z-index: 100;    background:#fff;    line-height:24px;    border:1px solid #aaa;    -moz-box-shadow: 0 3px 3px #ddd;}.structure_actions_dropdown span{display:block;}.structure_actions_dropdown span:hover{background:#ddd;}td.more_opts {    white-space: nowrap;}/** * Indexes */#index_frm .index_info input,#index_frm .index_info select {    width: 14em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#index_frm .index_info div {    padding: 0.2em 0;}#index_frm .index_info .label {    float: left;    min-width: 12em;}#index_frm .slider {    width: 10em;    margin: 0.6em;    float: <?php echo $left; ?>;}#index_frm .add_fields {    float: <?php echo $left; ?>;}#index_frm .add_fields input {    margin-<?php echo $left; ?>: 1em;}#index_frm input {    margin: 0;}#index_frm td {    vertical-align: middle;}table#index_columns {    width: 100%;}table#index_columns select {    width: 100%;}iframe.IE_hack {    z-index: 1;    position: absolute;    display: none;    border: 0;    filter: alpha(opacity=0);}/* config forms */.config-form ul.tabs {    margin:      1.1em 0.2em 0;    padding:     0 0 0.3em 0;    list-style:  none;    font-weight: bold;}.config-form ul.tabs li {    float:         <?php echo $left; ?>;    margin-bottom: -1px;}.config-form ul.tabs li a {    display:          block;    margin:           0.1em 0.2em 0;    white-space:      nowrap;    text-decoration:  none;    border:           1px solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-bottom:    1px solid #aaa;}.config-form ul.tabs li a {    padding:               7px 10px;    -webkit-border-radius: 5px 5px 0 0;    -moz-border-radius:    5px 5px 0 0;    border-radius:         5px 5px 0 0;    background:            #f2f2f2;    color:                 #555;    text-shadow:           0 1px 0 #fff;}.config-form ul.tabs li a:hover,.config-form ul.tabs li a:active {    background: #e5e5e5;}.config-form ul.tabs li.active a {    background-color: #fff;    margin-top:       1px;    color:            #000;    text-shadow:      none;    border-color:     #aaa;    border-bottom:    1px solid #fff;}.config-form fieldset {    margin-top:            0;    padding:               0;    clear:                 both;    -webkit-border-radius: 0;    -moz-border-radius:    0;    border-radius:         0;}.config-form legend {    display: none;}.config-form fieldset p {    margin:    0;    padding:   0.5em;    background: #fff;    border-top: 0;}.config-form fieldset .errors { /* form error list */    margin:       0 -2px 1em -2px;    padding:      0.5em 1.5em;    background:   #FBEAD9;    border:       0 #C83838 solid;    border-width: 1px 0;    list-style:   none;    font-family:  sans-serif;    font-size:    small;}.config-form fieldset .inline_errors { /* field error list */    margin:     0.3em 0.3em 0.3em 0;    padding:    0;    list-style: none;    color:      #9A0000;    font-size:  small;}.config-form fieldset th {    padding:        0.3em 0.3em 0.3em 0.5em;    text-align:     left;    vertical-align: top;    width:          40%;    background:     transparent;    filter:         none;}.config-form fieldset .doc, .config-form fieldset .disabled-notice {    margin-left: 1em;}.config-form fieldset .disabled-notice {    font-size: 80%;    text-transform: uppercase;    color: #E00;    cursor: help;}.config-form fieldset td {    padding-top:    0.3em;    padding-bottom: 0.3em;    vertical-align: top;}.config-form fieldset th small {    display:     block;    font-weight: normal;    font-family: sans-serif;    font-size:   x-small;    color:       #444;}.config-form fieldset th, .config-form fieldset td {    border-top: 1px <?php echo $GLOBALS['cfg']['BgTwo']; ?> solid;    border-right: none;}fieldset .group-header th {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}fieldset .group-header + tr th {    padding-top: 0.6em;}fieldset .group-field-1 th, fieldset .group-header-2 th {    padding-left: 1.5em;}fieldset .group-field-2 th, fieldset .group-header-3 th {    padding-left: 3em;}fieldset .group-field-3 th {    padding-left: 4.5em;}fieldset .disabled-field th,fieldset .disabled-field th small,fieldset .disabled-field td {    color: #666;    background-color: #ddd;}.config-form .lastrow {    border-top: 1px #000 solid;}.config-form .lastrow {    background: <?php echo $GLOBALS['cfg']['ThBackground']; ?>;;    padding:    0.5em;    text-align: center;}.config-form .lastrow input {    font-weight: bold;}/* form elements */.config-form span.checkbox {    padding: 2px;    display: inline-block;}.config-form .custom { /* customized field */    background: #FFC;}.config-form span.checkbox.custom {    padding:    1px;    border:     1px #EDEC90 solid;    background: #FFC;}.config-form .field-error {    border-color: #A11 !important;}.config-form input[type="text"],.config-form select,.config-form textarea {    border: 1px #A7A6AA solid;    height: auto;}.config-form input[type="text"]:focus,.config-form select:focus,.config-form textarea:focus {    border:     1px #6676FF solid;    background: #F7FBFF;}.config-form .field-comment-mark {    font-family: serif;    color: #007;    cursor: help;    padding: 0 0.2em;    font-weight: bold;    font-style: italic;}.config-form .field-comment-warning {    color: #A00;}/* error list */.config-form dd {    margin-left: 0.5em;}.config-form dd:before {    content: "\25B8  ";}.click-hide-message {    cursor: pointer;}.prefsmanage_opts {    margin-<?php echo $left; ?>: 2em;}#prefs_autoload {    margin-bottom: 0.5em;}.rte_table {    table-layout: fixed;}.rte_table td {    vertical-align:     middle;}.rte_table tr td:nth-child(1) {    font-weight:        bold;}.rte_table input, .rte_table select, .rte_table textarea {    width:              100%;    margin:             0;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}.rte_table .routine_params_table {    width:              100%;}#placeholder .button {    position: absolute;    cursor: pointer;}#placeholder div.button {    font-size: smaller;    color: #999;    background-color: #eee;    padding: 2px;}.wrapper {    float: <?php echo $left; ?>;    margin-bottom: 1.5em;}.toggleButton {    position: relative;    cursor: pointer;    font-size: 0.8em;    text-align: center;    line-height: 1.55em;    height: 1.55em;    overflow: hidden;    border-right: 0.1em solid #888;    border-left: 0.1em solid #888;    -webkit-border-radius: 0.3em;    -moz-border-radius: 0.3em;    border-radius: 0.3em;}.toggleButton table,.toggleButton td,.toggleButton img {    padding: 0;    position: relative;}.toggleButton .container {    position: absolute;}.toggleButton .toggleOn {    color: white;    padding: 0 1em;    text-shadow: 0 0 0.2em #000;}.toggleButton .toggleOff {    padding: 0 1em;}.doubleFieldset fieldset {    width: 48%;    float: <?php echo $left; ?>;    padding: 0;}.doubleFieldset fieldset.left {    margin-<?php echo $right; ?>: 1%;}.doubleFieldset fieldset.right {    margin-<?php echo $left; ?>: 1%;}.doubleFieldset legend {    margin-<?php echo $left; ?>: 1.5em;}.doubleFieldset div.wrap {    padding: 1.5em;}#table_columns input[type="text"], #table_columns select {    width:              10em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#table_columns select {    margin:             0 6px;}#placeholder {    position: relative;    border: 1px solid #aaa;    float: right;    overflow: hidden;}.placeholderDrag {    cursor: move;}#placeholder .button {    position: absolute;}#left_arrow {    left:8px;    top:26px;}#right_arrow {    left:26px;    top:26px;}#up_arrow {    left:17px;    top:8px;}#down_arrow {    left:17px;    top:44px;}#zoom_in {    left:17px;    top:67px;}#zoom_world {    left:17px;    top:85px;}#zoom_out {    left:17px;    top:103px;}.gis_table td {    vertical-align: middle;}.gis_table select {    min-width: 160px;    margin: 6px;}.gis_table .save {    color: #111;    font-weight: bold;    vertical-align: bottom;    height: 100px;}.gis_table .button {   text-align: <?php echo $right; ?>;}.gis_table .choice {    display: none;}.CodeMirror {  font-size: 140%;  font-family: monospace;  background: white;  border: 1px solid black;}.CodeMirror-scroll {  overflow: auto;  height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;  /* This is needed to prevent an IE[67] bug where the scrolled content     is visible outside of the scrolling box. */  position: relative;}.CodeMirror-gutter {  position: absolute; left: 0; top: 0;  z-index: 10;  background-color: #f7f7f7;  border-right: 1px solid #eee;  min-width: 2em;  height: 100%;}.CodeMirror-gutter-text {  color: #aaa;  text-align: right;  padding: .4em .2em .4em .4em;  white-space: pre !important;}.CodeMirror-lines {  padding: .4em;}.CodeMirror pre {  -moz-border-radius: 0;  -webkit-border-radius: 0;  -o-border-radius: 0;  border-radius: 0;  border-width: 0; margin: 0; padding: 0; background: transparent;  font-family: inherit;  font-size: inherit;  padding: 0; margin: 0;  white-space: pre;  word-wrap: normal;}.CodeMirror-wrap pre {  word-wrap: break-word;  white-space: pre-wrap;}.CodeMirror-wrap .CodeMirror-scroll {  overflow-x: hidden;}.CodeMirror textarea {  font-family: inherit !important;  font-size: inherit !important;}.CodeMirror-cursor {  z-index: 10;  position: absolute;  visibility: hidden;  border-left: 1px solid black !important;}.CodeMirror-focused .CodeMirror-cursor {  visibility: visible;}span.CodeMirror-selected {  background: #ccc !important;  color: HighlightText !important;}.CodeMirror-focused span.CodeMirror-selected {  background: Highlight !important;}.CodeMirror-matchingbracket {color: #0f0 !important;}.CodeMirror-nonmatchingbracket {color: #f22 !important;}<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>.colborder {    cursor: col-resize;    height: 100%;    margin-left: -6px;    position: absolute;    width: 5px;}.colborder_active {    border-right: 2px solid #a44;}.pma_table td {    position: static;}.pma_table th.draggable span, .pma_table tbody td span {    display: block;    overflow: hidden;}.cRsz {    position: absolute;}.cCpy {    background: #333;    color: #FFF;    font-weight: bold;    margin: 0.1em;    padding: 0.3em;    position: absolute;    text-shadow: -1px -1px #000;    -moz-box-shadow: 0 0 0.7em #000;    -webkit-box-shadow: 0 0 0.7em #000;    box-shadow: 0 0 0.7em #000;    -moz-border-radius: 0.3em;    -webkit-border-radius: 0.3em;    border-radius: 0.3em;}.cPointer {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);    height: 20px;    margin-left: -5px;  /* must be minus half of its width */    margin-top: -10px;    position: absolute;    width: 10px;}.normalqTip {    background: #333 !important;    opacity: 0.8 !important;    border:1px solid #000 !important;    -moz-border-radius: 0.3em !important;    -webkit-border-radius: 0.3em !important;    border-radius: 0.3em !important;    text-shadow: -1px -1px #000 !important;    font-size: 0.8em !important;    font-weight: bold !important;}.normalqTip * {    background: none !important;    color: #FFF !important;}.normalqTipContent {    padding: 1px 3px !important;}.cHide {    background: #EEE url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);    color: #CCC;    cursor: pointer;    height: 16px;    margin-left: -10px;    margin-top: 0.3em;    position: absolute;    width: 16px;}.cHide:hover {    background-color: #AAA;}.cDrop {    left: 0;    position: absolute;    top: 0;}.coldrop {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);    cursor: pointer;    height: 16px;    margin-left: 0.3em;    margin-top: 0.3em;    position: absolute;    width: 16px;}.coldrop:hover, .coldrop-hover {    background-color: #999;}.cList {    background: #EEE;    border: solid 1px #999;    position: absolute;    -moz-box-shadow: 0 0.2em 0.5em #333;    -webkit-box-shadow: 0 0.2em 0.5em #333;    box-shadow: 0 0.2em 0.5em #333;}.cList .lDiv div {    padding: 0.2em 0.5em 0.2em 0.2em;}.cList .lDiv div:hover {    background: #DDD;    cursor: pointer;}.cList .lDiv div input {    cursor: pointer;}.showAllColBtn {    border-bottom: solid 1px #999;    border-top: solid 1px #999;    cursor: pointer;    font-size: 0.9em;    font-weight: bold;    padding: 0.35em 1em;    text-align: center;}.showAllColBtn:hover {    background: #DDD;}.navigation {    margin: 0.8em 0;    border-radius: 5px;    -webkit-border-radius: 5px;    -moz-border-radius: 5px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('eeeeee', 'cccccc'); ?>}.navigation td {    margin: 0;    padding: 0;    vertical-align: middle;    white-space: nowrap;}.navigation_separator {    color: #999;    display: inline-block;    font-size: 1.5em;    text-align: center;    height: 1.4em;    width: 1.2em;    text-shadow: 1px 0 #FFF;}.navigation input[type=submit] {    background: none;    border: 0;    filter: none;    margin: 0;    padding: 0.8em 0.5em;    border-radius: 0;    -webkit-border-radius: 0;    -moz-border-radius: 0;}.navigation input[type=submit]:hover, .navigation input.edit_mode_active {    color: white;    cursor: pointer;    text-shadow: none;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('333333', '555555'); ?>}.navigation select {    margin: 0 0.8em;}.cEdit {    margin: 0;    padding: 0;    position: absolute;}.cEdit input[type=text] {    background: #FFF;    height: 100%;    margin: 0;    padding: 0;}.cEdit .edit_area {    background: #FFF;    border: 1px solid #999;    min-width: 10em;    padding: 0.3em 0.5em;}.cEdit .edit_area select, .cEdit .edit_area textarea {    width: 97%;}.cEdit .cell_edit_hint {    color: #555;    font-size: 0.8em;    margin: 0.3em 0.2em;}.cEdit .edit_box {    overflow: hidden;    padding: 0;}.cEdit .edit_box_posting {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;    padding-right: 1.5em;}.cEdit .edit_area_loading {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;    height: 10em;}.cEdit .goto_link {    background: #EEE;    color: #555;    padding: 0.2em 0.3em;}.saving_edited_data {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;    padding-left: 20px;}/* css for timepicker */.ui-timepicker-div .ui-widget-header{ margin-bottom: 8px; }.ui-timepicker-div dl{ text-align: left; }.ui-timepicker-div dl dt{ height: 25px; }.ui-timepicker-div dl dd{ margin: -25px 0 10px 65px; }.ui-timepicker-div td { font-size: 90%; }/* Designer */.input_tab {    background-color: #A6C7E1;    color: #000000;}#canvas {    background-color: #FFFFFF;    color: #000000;}canvas.pmd {    display: inline-block;    overflow: hidden;    text-align: left;}canvas.pmd * {    behavior: url(#default#VML);}.pmd_tab {    background-color: #FFFFFF;    color: #000000;    border-collapse: collapse;    border: 1px solid #AAAAAA;    z-index: 1;    -moz-user-select: none;}.tab_zag {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_zag_2 {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_field {    background: #FFFFFF;    color: #000000;    cursor: default;}.tab_field_2 {    background-color: #CCFFCC;    color: #000000;    background-repeat: repeat-x;    cursor: default;}.tab_field_3 {    background-color: #FFE6E6; /*#DDEEFF*/    color: #000000;    cursor: default;}#pmd_hint {    white-space: nowrap;    position: absolute;    background-color: #99FF99;    color: #000000;    left: 200px;    top: 50px;    z-index: 3;    border: #00CC66 solid 1px;    display: none;}.scroll_tab {    overflow: auto;    width: 100%;    height: 500px;}.pmd_Tabs {    cursor: default;    color: #0055bb;    white-space: nowrap;    text-decoration: none;    text-indent: 3px;    font-weight: bold;    margin-left: 2px;    text-align: left;    background-color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);    border: #CCCCCC solid 1px;}.pmd_Tabs2 {    cursor: default;    color: #0055bb;    background: #FFEE99;    text-indent: 3px;    font-weight: bold;    white-space: nowrap;    text-decoration: none;    border: #9999FF solid 1px;    text-align: left;}.owner {    font-weight: normal;    color: #888888;}.option_tab {    padding-left: 2px;    padding-right: 2px;    width: 5px;}.select_all {    vertical-align: top;    padding-left: 2px;    padding-right: 2px;    cursor: default;    width: 1px;    color: #000000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;}.small_tab {    vertical-align: top;    background-color: #0064ea;    color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);    cursor: default;    text-align: center;    font-weight: bold;    padding-left: 2px;    padding-right: 2px;    width: 1px;    text-decoration: none;}.small_tab2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    padding-left: 2px;    padding-right: 2px;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.small_tab_pref {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    width: 1px;}.small_tab_pref2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.butt {    border: #4477aa solid 1px;    font-weight: bold;    height: 19px;    width: 70px;    background-color: #FFFFFF;    color: #000000;    vertical-align: baseline;}.L_butt2_1 {    padding: 1px;    text-decoration: none;    background-color: #ffffff;    color: #000000;    vertical-align: middle;    cursor: default;}.L_butt2_2 {    padding: 0;    border: #0099CC solid 1px;    background: #FFEE99;    text-decoration: none;    color: #000000;    cursor: default;}/* ---------------------------------------------------------------------------*/.bor {    width: 10px;    height: 10px;}.frams1 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;}.frams2 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;}.frams3 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;}.frams4 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;}.frams5 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;}.frams6 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;}.frams7 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;}.frams8 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;}#osn_tab {    background-color: #FFFFFF;    color: #000000;    border: #A9A9A9 solid 1px;}.pmd_header {    background-color: #EAEEF0;    color: #000000;    text-align: center;    font-weight: bold;    margin: 0;    padding: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);    background-position: top;    background-repeat: repeat-x;    border-right: #999999 solid 1px;    border-left: #999999 solid 1px;    height: 28px;}.pmd_header a {    display: block;    float: left;    margin: 3px 1px 4px 1px;    height: 20px;    border: 1px dotted #ffffff;}.pmd_header .M_bord {    display: block;    float: left;    margin: 4px;    height: 20px;    width: 2px;}.pmd_header a.first {    margin-right: 1em;}.pmd_header a.last {    margin-left: 1em;}a.M_butt_Selected_down_IE,a.M_butt_Selected_down {    border: 1px solid #C0C0BB;    background-color: #99FF99;    color: #000000;}a.M_butt_Selected_down_IE:hover,a.M_butt_Selected_down:hover,a.M_butt:hover {    border: 1px solid #0099CC;    background-color: #FFEE99;    color: #000000;}#layer_menu {    z-index: 1000;    position: absolute;    left: 0;    background-color: #EAEEF0;    border: #999999 solid 1px;}#layer_action {    position: absolute;    left: 638px;    top: 52px;    z-index: 1000;    background-color: #CCFF99;    padding: 3px;    border: #009933 solid 1px;    white-space: nowrap;    font-weight: bold;}#layer_upd_relation {    position: absolute;    left: 637px;    top: 224px;    z-index: 1000;}#layer_new_relation {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#pmd_optionse {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#layer_menu_sizer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);    cursor: nw-resize;    width: 16px;    height: 16px;}.panel {    position: fixed;    top: 50px;    right: 0;    display: none;    background: #FFF;    border:1px solid #F5F5F5;    width: 350 px;    height: auto;    padding: 30px 170px 30px 30px;    color:#FFF;    z-index:99;}a.trigger{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#fff;    padding: 10px 40px 10px 15px;    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #444444;    display: block;}a.trigger:hover{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#080808;    padding: 10px 40px 10px 15px;    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #999;    display: block;}a.active.trigger {    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}a.active.trigger:hover {    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}h2.tiger{    background-repeat: repeat-x;    padding: 1px;    font-weight: bold;    padding: 50 20 50 20px;    margin: 0 0 5px 0;    width: 250px;    float: left;    color : #333;    text-align: center;}h2.tiger a {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    text-align: center;    text-decoration: none;    color : #333;    display: block;}h2.tiger a:hover {    color: #000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);}h2.active {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    padding: 1px;    background-position: left bottom;}.toggle_container {    margin: 0 0 5px;    padding: 0;    border-top: 1px solid #d6d6d6;    background: #FFF ;    width: 250px;    overflow: hidden;    font-size: 1.2em;    clear: both;}.toggle_container .block {    background-color: #DBE4E8;    padding:40 15 40 15px; /*--Padding of Container--*/    border:1px solid #999;    color:#000;}.history_table {    text-align: center;    background-color: #9999CC;}.history_table2 {    text-align: center;    background-color: #DBE4E8;}#filter {    display: none;    position: absolute;    top: 0%;    left: 0%;    width: 100%;    height: 100%;    background-color: #CCA;    z-index:10;    opacity:0.5;    filter: alpha(opacity=50);}#box {    display: none;    position: absolute;    top: 20%;    left: 30%;    width: 500px;    height: 220px;    padding: 48px;    margin:0;    border: 1px solid black;    background-color: white;    z-index:101;    overflow: visible;}#boxtitle {    position:absolute;    float:center;    top:0;    left:0;    width:593px;    height:20px;    padding:0;    padding-top:4px;    left-padding:8px;    margin:0;    border-bottom:4px solid #3CF;    background-color: #D0DCE0;    color:black;    font-weight:bold;    padding-left: 2px;    text-align:left;}#tblfooter {    background-color: #D3DCE3;    float: right;    padding-top:10px;    color: black;    font-weight: normal;}input.btn {    color:#333;    background-color: #D0DCE0;}body .ui-widget {    font-size: 1em;}.ui-dialog fieldset legend a {    color: #235A81;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//****/require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_synchronize.js';require_once './libraries/server_common.inc.php';/*** Contains all the functions specific to synchronization*/require './libraries/server_synchronize.lib.php';/** * Increases the time limit up to the configured maximum */@set_time_limit($cfg['ExecTimeLimit']);/** * Displays the links */require './libraries/server_links.inc.php';/*** Enables warnings on the page*///$cfg['Error_Handler']['display'] = true;//$cfg['Error_Handler']['gather'] = true;/*** Save the value of token generated for this page*/if (isset($_REQUEST['token'])) {    $_SESSION['token'] = $_REQUEST['token'];}// variable for code saving$cons = array ("src", "trg");/** * Displays the page when 'Go' is pressed */if ((isset($_REQUEST['submit_connect']))) {    foreach ($cons as $con) {        ${"{$con}_host"}     = $_REQUEST[$con . '_host'];        ${"{$con}_username"} = $_REQUEST[$con . '_username'];        ${"{$con}_password"} = $_REQUEST[$con . '_pass'];        ${"{$con}_port"}     = $_REQUEST[$con . '_port'];        ${"{$con}_socket"}   = $_REQUEST[$con . '_socket'];        ${"{$con}_db"}       = $_REQUEST[$con . '_db'];        ${"{$con}_type"}     = $_REQUEST[$con . '_type'];        if (${"{$con}_type"} == 'cur') {            ${"{$con}_connection"} = null;            ${"{$con}_server"} = null;            ${"{$con}_db"}       = $_REQUEST[$con . '_db_sel'];            continue;        }        if (isset(${"{$con}_socket"}) && ! empty(${"{$con}_socket"})) {            ${"{$con}_server"}['socket'] = ${"{$con}_socket"};        } else {            ${"{$con}_server"}['host'] = ${"{$con}_host"};            if (isset(${"{$con}_port"})                && ! empty(${"{$con}_port"})                && ((int)${"{$con}_port"} * 1) > 0            ) {                ${"{$con}_server"}['port'] = (int)${"{$con}_port"};            }        }        ${"{$con}_connection"} = PMA_DBI_connect(${"{$con}_username"},            ${"{$con}_password"}, $is_controluser = false,            ${"{$con}_server"}, $auxiliary_connection = true);    } // end foreach ($cons as $con)    if ((! $src_connection && $src_type != 'cur')        || (! $trg_connection && $trg_type != 'cur')    ) {        /**        * Displays the connection error string if        * connections are not established        */        echo '<div class="error">';        if (! $src_connection && $src_type != 'cur') {            echo __('Could not connect to the source') . '<br />';        }        if (! $trg_connection && $trg_type != 'cur') {            echo __('Could not connect to the target');        }        echo '</div>';        unset($_REQUEST['submit_connect']);    } else {        /**        * Creating the link object for both source and target databases and        * selecting the source and target databases using these links        */        foreach ($cons as $con) {            if (${"{$con}_connection"} != null) {                ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                    ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});            } else {                ${"{$con}_link"} = null;            }            ${"{$con}_db_selected"} = PMA_DBI_select_db(${"{$con}_db"}, ${"{$con}_link"});            ${"{$con}_version"} = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, ${"{$con}_link"});            ${"{$con}_is_drizzle"} = (bool)preg_match('/\d{4}\./', ${"{$con}_version"});        } // end foreach ($cons as $con)        if (($src_db_selected != 1) || ($trg_db_selected != 1)) {            /**            * Displays error string if the database(s) did not exist            */            echo '<div class="error">';            if ($src_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($src_db));            }            if ($trg_db_selected != 1) {                echo sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($trg_db));            }            echo '</div>';            unset($_REQUEST['submit_connect']);        } else if (($src_db_selected == 1) && ($trg_db_selected == 1)) {            /**            * Using PMA_DBI_get_tables() to get all the tables            * from target and source databases.            */            $src_tables = PMA_DBI_get_tables($src_db, $src_link);            $source_tables_num = sizeof($src_tables);            $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);            $target_tables_num = sizeof($trg_tables);            /**            * initializing arrays to save matching and non-matching            * table names from target and source databases.            */            $unmatched_num_src = 0;            $source_tables_uncommon = array();            $unmatched_num_trg = 0;            $target_tables_uncommon = array();            $matching_tables = array();            $matching_tables_num = 0;            /**            * Using PMA_getMatchingTables to find which of the tables' names match            * in target and source database.            */            PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);            /**            * Finding the uncommon tables for the target database            * using function PMA_getNonMatchingTargetTables()            */            PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);            /**            * Initializing several arrays to save the data and structure            * difference between the source and target databases.            */            $row_count = array();   //number of rows in source table that needs to be created in target database            $fields_num = array();  //number of fields in each matching table            $delete_array = array(); //stores the primary key values for target tables that have excessive rows than corresponding source tables.            $insert_array = array(array(array()));// stores the primary key values for the rows in each source table that are not present in target tables.            $update_array = array(array(array())); //stores the primary key values, name of field to be updated, value of the field to be updated for                                                    // each row of matching table.            $matching_tables_fields = array(); //contains the fields' names for each matching table            $matching_tables_keys   = array(); //contains the primary keys' names for each matching table            $uncommon_tables_fields = array(); //coantains the fields for all the source tables that are not present in target            $matching_tables_num = sizeof($matching_tables);            $source_columns = array();  //contains the full columns' information for all the source tables' columns            $target_columns = array();  //contains the full columns' information for all the target tables' columns            $uncommon_columns = array(); //contains names of columns present in source table but absent from the corresponding target table            $source_indexes = array();   //contains indexes on all the source tables            $target_indexes = array();   //contains indexes on all the target tables            $add_indexes_array = array(); //contains the indexes name present in source but absent from target tables            $target_tables_keys = array(); //contains the keys of all the target tables            $alter_indexes_array = array();  //contains the names of all the indexes for each table that need to be altered in target database            $remove_indexes_array = array();  //contains the names of indexes that are excessive in target tables            $alter_str_array = array(array());  //contains the criteria for each column that needs to be altered in target tables            $add_column_array = array(array()); //contains the name of columns that need to be added in target tables            /**            * The criteria array contains all the criteria against which columns are compared for differences.            */            $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');            for ($i = 0; $i < sizeof($matching_tables); $i++) {                /**                * Finding out all the differences structure, data and index diff                * for all the matching tables only                */                PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $matching_tables_fields, $update_array,                    $insert_array, $delete_array, $fields_num, $i,                    $matching_tables_keys);                PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_columns, $target_columns,                    $alter_str_array, $add_column_array, $uncommon_columns,                    $criteria, $target_tables_keys, $i);                PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link,                    $matching_tables, $source_indexes, $target_indexes,                    $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $i);            }            for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {                /**                * Finding out the number of rows to be added in tables                * that need to be added in target database                */                PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db,                    $src_link, $j, $row_count);            }            /**            * Storing all arrays in session for use when page is reloaded            * for each button press            */            $_SESSION['matching_tables'] = $matching_tables;            $_SESSION['update_array'] = $update_array;            $_SESSION['insert_array'] = $insert_array;            $_SESSION['src_db'] = $src_db;            $_SESSION['trg_db'] =  $trg_db;            $_SESSION['matching_fields'] = $matching_tables_fields;            $_SESSION['src_uncommon_tables'] = $source_tables_uncommon;            $_SESSION['src_username'] = $src_username ;            $_SESSION['trg_username'] = $trg_username;            $_SESSION['src_password'] = $src_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['trg_password'] = $trg_password;            $_SESSION['src_server']   = $src_server;            $_SESSION['trg_server']   = $trg_server;            $_SESSION['src_type']     = $src_type;            $_SESSION['trg_type']     = $trg_type;            $_SESSION['matching_tables_keys'] = $matching_tables_keys;            $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;            $_SESSION['uncommon_tables_row_count'] = $row_count;            $_SESSION['target_tables_uncommon'] = $target_tables_uncommon;            $_SESSION['uncommon_tables'] = $source_tables_uncommon;            $_SESSION['delete_array'] = $delete_array;            $_SESSION['uncommon_columns'] = $uncommon_columns;            $_SESSION['source_columns'] = $source_columns;            $_SESSION['alter_str_array'] = $alter_str_array;            $_SESSION['target_tables_keys'] = $target_tables_keys;            $_SESSION['add_column_array'] = $add_column_array;            $_SESSION['criteria'] = $criteria;            $_SESSION['target_tables'] = $trg_tables;            $_SESSION['add_indexes_array'] = $add_indexes_array;            $_SESSION['alter_indexes_array'] = $alter_indexes_array;            $_SESSION['remove_indexes_array'] = $remove_indexes_array;            $_SESSION['source_indexes'] = $source_indexes;            $_SESSION['target_indexes'] = $target_indexes;            /**            * Displays the sub-heading and icons showing Structure Synchronization            * and Data Synchronization            */            ?>            <form name="synchronize_form" id="synchronize_form" method="post" action="server_synchronize.php">                <?php echo PMA_generate_common_hidden_inputs('', ''); ?>            <table width="40%">            <tr>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_struct.png" width="16" height="16" alt="" />                    <?php echo __('Structure Synchronization'); ?>                </td>                <td>                    <img class="icon" src="<?php echo $pmaThemeImage; ?>new_data.png" width="16" height="16" alt="" />                    <?php echo __('Data Synchronization'); ?>                </td>            </tr>            </table>            <?php            /**            * Displays the tables containing the source tables names,            * their difference with the target tables and target tables names.            */            PMA_syncDisplayHeaderCompare($src_db, $trg_db);            $rows = array();            /**            * Display the matching tables' names and difference, first            */            for ($i = 0; $i < count($matching_tables); $i++) {                /**                * Calculating the number of updates for each matching table                */                if (isset($update_array[$i]) && isset($update_array[$i][0])                        && !empty($matching_tables_keys[$i][0])                        && isset($update_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }                /**                * Calculating the number of insertions for each matching table                */                if (isset($insert_array[$i]) && isset($insert_array[$i][0])                        && !empty($matching_tables_keys[$i])                        && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }                /**                * Calculating the number of alter columns, number of columns to be                * added, number of columns to be removed,                * number of index to be added and removed.                */                $num_alter_cols  = 0;                $num_insert_cols = 0;                $num_remove_cols = 0;                $num_add_index   = 0;                $num_remove_index = 0;                if (isset($alter_str_array[$i])) {                    $num_alter_cols = sizeof($alter_str_array[$i]);                }                if (isset($add_column_array[$i])) {                    $num_insert_cols = sizeof($add_column_array[$i]);                }                if (isset($uncommon_columns[$i])) {                    $num_remove_cols = sizeof($uncommon_columns[$i]);                }                if (isset($add_indexes_array[$i])) {                    $num_add_index = sizeof($add_indexes_array[$i]);                }                if (isset($remove_indexes_array[$i])) {                    $num_remove_index = sizeof($remove_indexes_array[$i]);                }                if (isset($alter_indexes_array[$i])) {                    $num_add_index += sizeof($alter_indexes_array[$i]);                    $num_remove_index += sizeof($alter_indexes_array[$i]);                }                $btn_structure_params = null;                $btn_data_params = null;                /**                * Display the red button of structure synchronization if there                * exists any structure difference or index difference.                */                if (($num_alter_cols > 0)                    || ($num_insert_cols > 0)                    || ($num_remove_cols > 0)                    || ($num_add_index > 0)                    || ($num_remove_index > 0)                ) {                    $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                        $num_remove_cols, $num_add_index, $num_remove_index);                }                /**                * Display the green button of data synchronization if there exists                * any data difference.                */                if ((isset($update_array[$i])                    || isset($insert_array[$i]))                    && !empty($matching_tables_keys[$i])                ) {                    if (isset($update_array[$i][0][$matching_tables_keys[$i][0]])                        || isset($insert_array[$i][0][$matching_tables_keys[$i][0]])                    ) {                        $btn_data_params = array($i, $num_of_updates,                            $num_of_insertions, null, null, null);                    }                }                $rows[] = array(                    'src_table_name' => $matching_tables[$i],                    'dst_table_name' => $matching_tables[$i],                    'btn_type' => 'M',                    'btn_structure' => $btn_structure_params,                    'btn_data' => $btn_data_params                );            }            /**            * Displays the tables' names present in source but missing from target            */            for ($j = 0; $j < count($source_tables_uncommon); $j++) {                $row = array(                    'src_table_name' => '+ ' . $source_tables_uncommon[$j],                    'dst_table_name' => $source_tables_uncommon[$j] . ' (' . __('not present') . ')',                    'btn_type' => 'U',                    'btn_structure' => array($j, null, null, null, null, null),                    'btn_data' => null                );                if ($row_count[$j] > 0) {                    $row['btn_data'] = array($j, null, $row_count[$j], null, null, null);                }                $rows[] = $row;            }            foreach ($target_tables_uncommon as $tbl_nc_name) {                $rows[] = array(                    'src_table_name' => '',                    'dst_table_name' => $tbl_nc_name);            }            /**            * Displays the target tables names            */            PMA_syncDisplayDataCompare($rows);            echo '</table>                </div>                </fieldset>';            /**            * This "list" div will contain a table and each row will depict            * information about structure/data difference in tables.            * Rows will be generated dynamically as soon as the colored            * buttons "D" or "S"  are clicked.            */            echo '<fieldset style="padding:0"><div id="list" style="overflow:auto; height:140px; padding:1em">            <table>                <thead>                <tr style="width: 100%;">                    <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                    <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                    <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>                </tr>                <tr style="width: 100%;">                    <th style="width: 10%;">' . __('Table name') . '</th>                    <th style="width: 10%;">' . __('Create table'). '</th>                    <th style="width: 11%;">' . __('Add column(s)') . '</th>                    <th style="width: 13%;">' . __('Remove column(s)') . '</th>                    <th style="width: 11%;">' . __('Alter column(s)') . '</th>                    <th style="width: 12%;">' . __('Remove index(s)') . '</th>                    <th style="width: 11%;">' . __('Apply index(s)') . '</th>                    <th style="width: 10%;">'.  __('Update row(s)') . '</th>                    <th style="width: 10%;">' . __('Insert row(s)') . '</th>                </tr>                </thead>                <tbody></tbody>            </table>            </div></fieldset>';            /**            *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables            */            echo '<fieldset>            <p><input type= "checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'                . __('Would you like to delete all the previous rows from target tables?')                . '</label> </p>            </fieldset>            <fieldset class="tblFooters">';            echo '<input type="button" name="apply_changes" value="'                . __('Apply Selected Changes')                . '" onclick ="ApplySelectedChanges('                . "'" . htmlspecialchars($_SESSION['token']) . "'" . ')" />';            echo '<input type="submit" name="synchronize_db" value="'                . __('Synchronize Databases') . '" />' . '</fieldset>';            echo '</form>';        }    }} // end if ((isset($_REQUEST['submit_connect']))) /** * Display the page when 'Apply Selected Changes' is pressed */if (isset($_REQUEST['Table_ids'])) {    /**    * Displays success message    */    echo '<div class="success">'        . __('Selected target tables have been synchronized with source tables.')        . '</div>';    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $src_server   = $_SESSION['src_server'];    $trg_server   = $_SESSION['trg_server'];    $src_type     = $_SESSION['src_type'];    $trg_type     = $_SESSION['trg_type'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;    /**    * Creating link object for source and target databases    */    foreach ($cons as $con) {        if (${"{$con}_type"} != "cur") {            ${"{$con}_link"} = PMA_DBI_connect(${"{$con}_username"},                ${"{$con}_password"}, $is_controluser = false, ${"{$con}_server"});        } else {            ${"{$con}_link"} = null;            // working on current server, so initialize this for tracking            // (does not work if user defined current server as a remote one)            $GLOBALS['db'] = ${"{$con}_db"};        }    } // end foreach ($cons as $con)    /**    * Initializing arrays to save the table ids whose data and structure difference is to be applied    */    $matching_table_data_diff = array();  //stores id of matching table having data difference    $matching_table_structure_diff = array(); //stores id of matching tables having structure difference    $uncommon_table_structure_diff = array(); //stores id of uncommon tables having structure difference    $uncommon_table_data_diff = array();     //stores id of uncommon tables having data difference    for ($i = 0; isset($_REQUEST[$i]); $i++ ) {        if (isset($_REQUEST[$i])) {            $table_id = explode("US", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_structure_diff[] = $table_id[1];            }            $table_id = explode("UD", $_REQUEST[$i]);            if (isset($table_id[1])) {                $uncommon_table_data_diff[] = $table_id[1];            }            $table_id = explode("MS", $_REQUEST[$i]);            if (isset($table_id[1])) {                $matching_table_structure_diff[] = $table_id[1];            }            $table_id = explode("MD", $_REQUEST[$i]);            if (isset($table_id[1])) {                 $matching_table_data_diff[] = $table_id[1];            }        }    } // end for    /**    * Applying the structure difference on selected matching tables    */    for ($q = 0; $q < sizeof($matching_table_structure_diff); $q++) {        if (isset($alter_str_array[$matching_table_structure_diff[$q]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_structure_diff[$q], false);            unset($alter_str_array[$matching_table_structure_diff[$q]]);        }        if (isset($add_column_array[$matching_table_structure_diff[$q]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_structure_diff[$q], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_structure_diff[$q]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_structure_diff[$q], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_structure_diff[$q]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_structure_diff[$q], $uncommon_cols, false);            unset($add_column_array[$matching_table_structure_diff[$q]]);        }        if (isset($uncommon_columns[$matching_table_structure_diff[$q]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_structure_diff[$q], false);            unset($uncommon_columns[$matching_table_structure_diff[$q]]);        }        if (isset($add_indexes_array[$matching_table_structure_diff[$q]])            || isset($remove_indexes_array[$matching_table_structure_diff[$q]])            || isset($alter_indexes_array[$matching_table_structure_diff[$q]])        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }    }    /**    * Applying the data difference. First checks if structure diff is applied or not.    * If not, then apply structure difference first then apply data difference.    */    for ($p = 0; $p < sizeof($matching_table_data_diff); $p++) {        if ($_REQUEST['checked'] == 'true') {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }        }        if (isset($alter_str_array[$matching_table_data_diff[$p]])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys,                $matching_table_data_diff[$p], false);            unset($alter_str_array[$matching_table_data_diff[$p]]);        }        if (isset($add_column_array[$matching_table_data_diff[$p]])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables,                $matching_table_data_diff[$p], $target_tables_keys,                $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$matching_table_data_diff[$p]])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables,                    $matching_table_data_diff[$p], $target_tables_keys,                    $delete_array, false);                unset($delete_array[$matching_table_data_diff[$p]]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $matching_table_data_diff[$p], $uncommon_cols, false);            unset($add_column_array[$matching_table_data_diff[$p]]);        }        if (isset($uncommon_columns[$matching_table_data_diff[$p]])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $matching_table_data_diff[$p], false);            unset($uncommon_columns[$matching_table_data_diff[$p]]);        }        if ((isset($matching_table_structure_diff[$q])            && isset($add_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($remove_indexes_array[$matching_table_structure_diff[$q]]))            || (isset($matching_table_structure_diff[$q])            && isset($alter_indexes_array[$matching_table_structure_diff[$q]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$q], false);            unset($add_indexes_array[$matching_table_structure_diff[$q]]);            unset($alter_indexes_array[$matching_table_structure_diff[$q]]);            unset($remove_indexes_array[$matching_table_structure_diff[$q]]);        }        /**        * Applying the data difference.        */        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $matching_table_data_diff[$p], $matching_tables_keys, false);        PMA_insertIntoTargetTable($matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array,            $matching_table_data_diff[$p], $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array,            $source_indexes, $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, false);    }    /**    * Updating the session variables to the latest values of the arrays.    */    $_SESSION['delete_array'] = $delete_array;    $_SESSION['uncommon_columns'] = $uncommon_columns;    $_SESSION['alter_str_array']  = $alter_str_array;    $_SESSION['add_column_array'] = $add_column_array;    $_SESSION['add_indexes_array'] = $add_indexes_array;    $_SESSION['remove_indexes_array'] = $remove_indexes_array;    $_SESSION['insert_array'] = $insert_array;    $_SESSION['update_array'] = $update_array;    /**    * Applying structure difference to selected non-matching tables    * (present in Source but absent from Target).    */    for ($s = 0; $s < sizeof($uncommon_table_structure_diff); $s++) {        PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,            $uncommon_tables, $uncommon_table_structure_diff[$s],            $uncommon_tables_fields, false);        $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;        unset($uncommon_tables[$uncommon_table_structure_diff[$s]]);    }    /**    * Applying data difference to selected non-matching tables    * (present in Source but absent from Target).    * Before data synchronization, structure synchronization is confirmed.    */    for ($r = 0; $r < sizeof($uncommon_table_data_diff); $r++) {        if (!(in_array($uncommon_table_data_diff[$r], $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$uncommon_table_data_diff[$r]])) {                PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                    $uncommon_tables, $uncommon_table_data_diff[$r],                    $uncommon_tables_fields, false);                $_SESSION['uncommon_tables_fields'] = $uncommon_tables_fields;                unset($uncommon_tables[$uncommon_table_data_diff[$r]]);            }        }        PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,            $source_tables_uncommon, $uncommon_table_data_diff[$r],            $_SESSION['uncommon_tables_fields'], false);        unset($row_count[$uncommon_table_data_diff[$r]]);    }    /**    * Again all the tables from source and target database are displayed with their differences.    * The differences have been removed from tables that have been synchronized    */    echo '<form name="applied_difference" id="synchronize_form" method="post" action="server_synchronize.php">'        . PMA_generate_common_hidden_inputs('', '');    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $num_alter_cols  = 0;        $num_insert_cols = 0;        $num_remove_cols = 0;        $num_add_index = 0;        $num_remove_index = 0;        if (isset($alter_str_array[$i])) {            $num_alter_cols = sizeof($alter_str_array[$i]);        }        if (isset($add_column_array[$i])) {            $num_insert_cols = sizeof($add_column_array[$i]);        }        if (isset($uncommon_columns[$i])) {            $num_remove_cols = sizeof($uncommon_columns[$i]);        }        if (isset($add_indexes_array[$i])) {            $num_add_index = sizeof($add_indexes_array[$i]);        }        if (isset($remove_indexes_array[$i])) {            $num_remove_index = sizeof($remove_indexes_array[$i]);        }        $btn_structure_params = null;        $btn_data_params = null;        if (($num_alter_cols > 0)            || ($num_insert_cols > 0)            || ($num_remove_cols > 0)            || ($num_add_index > 0)            || ($num_remove_index > 0)        ) {            $btn_structure_params = array($i, $num_alter_cols, $num_insert_cols,                $num_remove_cols, $num_add_index, $num_remove_index);        }        if (!(in_array($i, $matching_table_data_diff))) {            if (isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($update_array[$i])) {                    $num_of_updates = sizeof($update_array[$i]);                } else {                    $num_of_updates = 0;                }            } else {                $num_of_updates = 0;            }            if (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]])            ) {                if (isset($insert_array[$i])) {                    $num_of_insertions = sizeof($insert_array[$i]);                } else {                    $num_of_insertions = 0;                }            } else {                $num_of_insertions = 0;            }            if ((isset($matching_tables_keys[$i][0])                && isset($update_array[$i][0][$matching_tables_keys[$i][0]]))                || (isset($matching_tables_keys[$i][0])                && isset($insert_array[$i][0][$matching_tables_keys[$i][0]]))            ) {                $btn_data_params = array($i, $num_of_updates, $num_of_insertions,                    null, null, null);            }        } else {            unset($update_array[$i]);            unset($insert_array[$i]);        }        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i],            'btn_type' => 'M',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing updated value of arrays in session    *    */    $_SESSION['update_array'] = $update_array;    $_SESSION['insert_array'] = $insert_array;    for ($j = 0; $j < count($source_tables_uncommon); $j++) {        $btn_structure_params = null;        $btn_data_params = null;        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_structure_diff))) {            if (isset($uncommon_tables[$j])) {                $btn_structure_params = array($j, null, null, null, null, null);            }            $dst_table_name = $source_tables_uncommon[$j] . ' (' .  __('not present') . ')';        } else {            unset($uncommon_tables[$j]);            $dst_table_name = $source_tables_uncommon[$j];        }        /**        * Display the difference only when it has not been applied        */        if (!(in_array($j, $uncommon_table_data_diff))) {            if (isset($row_count[$j]) && ($row_count[$j] > 0)) {                $btn_data_params = array($j, null, $row_count[$j], null, null, null);            }        } else {            unset($row_count[$j]);        }        $rows[] = array(            'src_table_name' => $source_tables_uncommon[$j],            'dst_table_name' => $dst_table_name,            'btn_type' => 'U',            'btn_structure' => $btn_structure_params,            'btn_data' => $btn_data_params        );    }    /**    * placing the latest values of arrays in session    */    $_SESSION['uncommon_tables'] = $uncommon_tables;    $_SESSION['uncommon_tables_row_count'] = $row_count;    /**    * Displaying the target database tables    */    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * This "list" div will contain a table and each row will depict information about    * structure/data difference in tables.    * Rows will be generated dynamically as soon as the colored buttons "D" or "S"    * are clicked.    */    echo '<fieldset style="padding:0"><div id="list" style = "overflow:auto; height:140px; padding:1em">';    echo '<table>          <thead>            <tr style="width: 100%;">                <th id="table_name" style="width: 10%;" colspan="1">' . __('Table') . ' </th>                <th id="str_diff"   style="width: 65%;" colspan="6">' . __('Structure Difference') . ' </th>                <th id="data_diff"  style="width: 20%;" colspan="2">' . __('Data Difference') . '</th>            </tr>            <tr style="width: 100%;">                <th style="width: 10%;">' . __('Table name') . '</th>                <th style="width: 10%;">' . __('Create table'). '</th>                <th style="width: 11%;">' . __('Add column(s)') . '</th>                <th style="width: 13%;">' . __('Remove column(s)') . '</th>                <th style="width: 11%;">' . __('Alter column(s)') . '</th>                <th style="width: 12%;">' . __('Remove index(s)') . '</th>                <th style="width: 11%;">' . __('Apply index(s)') . '</th>                <th style="width: 10%;">' . __('Update row(s)') . '</th>                <th style="width: 10%;">' . __('Insert row(s)') . '</th>            </tr>            </thead>            <tbody></tbody>         </table>        </div></fieldset>';    /**    *  This fieldset displays the checkbox to confirm deletion of previous rows from target tables    */    echo '<fieldset>        <p><input type="checkbox" name="delete_rows" id ="delete_rows" /><label for="delete_rows">'        . __('Would you like to delete all the previous rows from target tables?') . '</label> </p>        </fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="button" name="apply_changes" value="'        . __('Apply Selected Changes') . '" onclick ="ApplySelectedChanges('        . "'" . htmlspecialchars($_SESSION['token']) . "'" .')" />';    echo '<input type="submit" name="synchronize_db" value="'        . __('Synchronize Databases') . '" />'        . '</fieldset>';    echo '</form>';}/*** Displays the page when 'Synchronize Databases' is pressed.*/if (isset($_REQUEST['synchronize_db'])) {    $src_db = $_SESSION['src_db'];    $trg_db = $_SESSION['trg_db'];    $update_array = $_SESSION['update_array'];    $insert_array = $_SESSION['insert_array'];    $src_username = $_SESSION['src_username'];    $trg_username = $_SESSION['trg_username'];    $src_password = $_SESSION['src_password'];    $trg_password = $_SESSION['trg_password'];    $matching_tables = $_SESSION['matching_tables'];    $matching_tables_keys = $_SESSION['matching_tables_keys'];    $matching_tables_fields = $_SESSION['matching_fields'];    $source_tables_uncommon = $_SESSION['src_uncommon_tables'];    $uncommon_tables_fields = $_SESSION['uncommon_tables_fields'];    $target_tables_uncommon = $_SESSION['target_tables_uncommon'];    $row_count = $_SESSION['uncommon_tables_row_count'];    $uncommon_tables = $_SESSION['uncommon_tables'];    $target_tables = $_SESSION['target_tables'];    $delete_array = $_SESSION['delete_array'];    $uncommon_columns = $_SESSION['uncommon_columns'];    $source_columns = $_SESSION['source_columns'];    $alter_str_array = $_SESSION['alter_str_array'];    $criteria = $_SESSION['criteria'];    $target_tables_keys = $_SESSION['target_tables_keys'];    $add_column_array = $_SESSION['add_column_array'];    $add_indexes_array = $_SESSION['add_indexes_array'];    $alter_indexes_array = $_SESSION['alter_indexes_array'];    $remove_indexes_array = $_SESSION['remove_indexes_array'];    $source_indexes = $_SESSION['source_indexes'];    $target_indexes = $_SESSION['target_indexes'];    $uncommon_cols = $uncommon_columns;   /**   * Display success message.   */    echo '<div class="success">'        . __('Target database has been synchronized with source database')        . '</div>';    /**    * Displaying all the tables of source and target database    * and now no difference is there.    */    PMA_syncDisplayHeaderCompare($src_db, $trg_db);    $rows = array();    for ($i = 0; $i < count($matching_tables); $i++) {        $rows[] = array(            'src_table_name' => $matching_tables[$i],            'dst_table_name' => $matching_tables[$i]);    }    foreach ($source_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '+ ' . $tbl_nc_name,            'dst_table_name' => $tbl_nc_name);    }    foreach ($target_tables_uncommon as $tbl_nc_name) {        $rows[] = array(            'src_table_name' => '',            'dst_table_name' => $tbl_nc_name);    }    PMA_syncDisplayDataCompare($rows);    echo '</table>        </div>        </fieldset>';    /**    * connecting the source and target servers    */    if ('cur' != $_SESSION['src_type']) {        $src_link = PMA_DBI_connect($src_username, $src_password, $is_controluser = false, $_SESSION['src_server']);        $src_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $src_link);        $src_is_drizzle = (bool)preg_match('/\d{4}\./', $src_version);    } else {        $src_link = $GLOBALS['userlink'];        $src_version = PMA_MYSQL_STR_VERSION;        $src_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        // (does not work if user defined current server as a remote one)        $GLOBALS['db'] = $_SESSION['src_db'];    }    if ('cur' != $_SESSION['trg_type']) {        $trg_link = PMA_DBI_connect($trg_username, $trg_password, $is_controluser = false, $_SESSION['trg_server']);        $trg_version = PMA_DBI_fetch_value('SELECT VERSION()', 0, 0, $trg_link);        $trg_is_drizzle = (bool)preg_match('/\d{4}\./', $trg_version);    } else {        $trg_link = $GLOBALS['userlink'];        $trg_version = PMA_MYSQL_STR_VERSION;        $trg_is_drizzle = PMA_DRIZZLE;        // working on current server, so initialize this for tracking        $GLOBALS['db'] = $_SESSION['trg_db'];    }    /**    * Displaying the queries.    */    echo '<fieldset><legend>' . __('Executed queries') . '</legend>';    /**    * Applying all sorts of differences for each matching table    */    for ($p = 0; $p < sizeof($matching_tables); $p++) {        /**        *  If the check box is checked for deleting previous rows from the target database tables then        *  first find out rows to be deleted and then delete the rows.        */        if (isset($_REQUEST['delete_rows'])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }        }        if (isset($alter_str_array[$p])) {            PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables,                $source_columns, $alter_str_array, $matching_tables_fields,                $criteria, $matching_tables_keys, $target_tables_keys, $p, true);            unset($alter_str_array[$p]);        }        if (! empty($add_column_array[$p])) {            PMA_findDeleteRowsFromTargetTables($delete_array, $matching_tables, $p,                $target_tables_keys, $matching_tables_keys,                $trg_db, $trg_link, $src_db, $src_link);            if (isset($delete_array[$p])) {                PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $p,                    $target_tables_keys, $delete_array, true);                unset($delete_array[$p]);            }            PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link,                $matching_tables, $source_columns, $add_column_array,                $matching_tables_fields, $criteria, $matching_tables_keys,                $target_tables_keys, $uncommon_tables, $uncommon_tables_fields,                $p, $uncommon_cols, true);            unset($add_column_array[$p]);        }        if (isset($uncommon_columns[$p])) {            PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables,                $uncommon_columns, $p, true);            unset($uncommon_columns[$p]);        }        if (isset($matching_table_structure_diff)            && (isset($add_indexes_array[$matching_table_structure_diff[$p]])            || isset($remove_indexes_array[$matching_table_structure_diff[$p]])            || isset($alter_indexes_array[$matching_table_structure_diff[$p]]))        ) {            PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables,                $source_indexes, $target_indexes, $add_indexes_array,                $alter_indexes_array, $remove_indexes_array,                $matching_table_structure_diff[$p], true);            unset($add_indexes_array[$matching_table_structure_diff[$p]]);            unset($alter_indexes_array[$matching_table_structure_diff[$p]]);            unset($remove_indexes_array[$matching_table_structure_diff[$p]]);        }        PMA_updateTargetTables($matching_tables, $update_array, $src_db, $trg_db,            $trg_link, $p, $matching_tables_keys, true);        PMA_insertIntoTargetTable(            $matching_tables, $src_db, $trg_db, $src_link,            $trg_link, $matching_tables_fields, $insert_array, $p,            $matching_tables_keys, $matching_tables_keys, $source_columns,            $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,            $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes,            $target_indexes, $add_indexes_array,            $alter_indexes_array, $delete_array, $update_array, true        );    }    /**    *  Creating and populating tables present in source but absent    *  from target database.    */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($uncommon_tables[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }        if (isset($row_count[$q])) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link,                $source_tables_uncommon, $q, $uncommon_tables_fields, true);        }    }    echo "</fieldset>";}/** * Displays the main page when none of the following buttons is pressed */if (! isset($_REQUEST['submit_connect'])    && ! isset($_REQUEST['synchronize_db'])    && ! isset($_REQUEST['Table_ids'])) {/*** Displays the sub-page heading*/    echo '<h2>' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_sync.png')    : '')    . __('Synchronize')    .'</h2>';    echo  '<div id="serverstatus">    <form name="connection_form" id="connection_form" method="post" action="server_synchronize.php"   >' // TODO: add check if all var. are filled in    . PMA_generate_common_hidden_inputs('', '');    echo '<fieldset>';    echo '<legend>' . __('Synchronize') . '</legend>';    /**     * Displays the forms     */    $databases = PMA_DBI_get_databases_full(null, false, null, 'SCHEMA_NAME',        'ASC', 0, true);    $databases_to_hide = array(        'information_schema',        'mysql'    );    if (PMA_DRIZZLE) {        $databases_to_hide[] = 'data_dictionary';    }    if ($GLOBALS['cfg']['AllowArbitraryServer'] === false) {        $possibly_readonly = ' readonly="readonly"';    } else {        $possibly_readonly = '';    }    foreach ($cons as $type) {        if ('src' == $type) {            $database_header = __('Source database');        } else {            $database_header = __('Target database');        }        $database_header .= PMA_showHint(PMA_sanitize(sprintf('%sAllowArbitraryServer%s',            '[a@./Documentation.html#AllowArbitraryServer@_blank]', '[/a]')));?>      <table id="serverconnection_<?php echo $type; ?>_remote" class="data noclick">      <caption class="tblHeaders"><?php echo $database_header; ?></caption>      <tr class="odd">      <td colspan="2" style="text-align: center">         <select name="<?php echo $type; ?>_type" id="<?php echo $type; ?>_type" class="server_selector"><?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            $preselected_option = 'rmt';            echo '<option value="rmt" selected="selected">' . __('Enter manually') . '</option>';        } else {            $preselected_option = 'cur';        }        echo '<option value="cur"';        if ('cur' == $preselected_option) {            echo ' selected="selected"';        }        echo '>' .  __('Current connection') . '</option>';        $loaded_dbi = $GLOBALS['cfg']['Server']['extension'];        foreach ($GLOBALS['cfg']['Servers'] as $key => $tmp_server) {            if (empty($tmp_server['host']) && empty($tmp_server['socket'])) {                continue;            }            if (!empty($tmp_server['verbose'])) {                $label = $tmp_server['verbose'];            } else {                $label = $tmp_server['host'];                if (!empty($tmp_server['port'])) {                    $label .= ':' . $tmp_server['port'];                }            }            if ($loaded_dbi == 'drizzle' && $tmp_server['extension'] != 'drizzle'                    || $loaded_dbi != 'drizzle' && $tmp_server['extension'] == 'drizzle') {                // incompatible connection protocols                $disabled = ' disabled="disabled"';                $value = '';            } else {                $disabled = '';                $value = $tmp_server['host'];                $value .= '||||';                if (empty($tmp_server['port']) && empty($tmp_server['socket'])) {                    $value .= '3306';                } else {                    $value .= $tmp_server['port'];                }                $value .= '||||';                $value .= $tmp_server['socket'];                $value .= '||||';                $value .= $tmp_server['user'];                $value .= '||||';                $value .= $tmp_server['only_db'];            }            echo '<option value="' . $value . '"' . $disabled . '>'                . sprintf(__('Configuration: %s'), htmlspecialchars($label)) . '</option>';        } // end foreach?>         </select>      </td>      </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Server'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_host" class="server-host" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Port'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_port" class="server-port" <?php echo $possibly_readonly; ?> value="3306" maxlength="5" size="5" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Socket'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_socket" class="server-socket" <?php echo $possibly_readonly; ?>/></td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('User name'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_username" class="server-user" /></td>    </tr>    <tr class="even toggler remote-server">        <td><?php echo __('Password'); ?></td>        <td><input type="password" name="<?php echo $type; ?>_pass" class="server-pass" /> </td>    </tr>    <tr class="odd toggler remote-server">        <td><?php echo __('Database'); ?></td>        <td><input type="text" name="<?php echo $type; ?>_db" class="server-db" /></td>    </tr>    <tr class="even toggler current-server" style="display: none;">        <td><?php echo __('Database'); ?></td>        <td><?php    $options_list = '';    foreach ($databases as $array_key => $db) {        if (in_array($db['SCHEMA_NAME'], $databases_to_hide)) {            unset($databases[$array_key]);        } else {            $options_list .= '<option>' . htmlspecialchars($db['SCHEMA_NAME']) . '</option>';        }    }    if (count($databases) == 0) {        echo __('No databases');    } else {        echo '<select name="' . $type . '_db_sel">'         . $options_list         . '</select>';        unset($options_list);    }    echo '</td> </tr>      </table>';   }   unset ($types, $type);    echo '    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_connect" value="' . __('Go') .'" id="buttonGo" />    </fieldset>    </form>    </div>    <div class="notice">' . __('Target database will be completely synchronized with source database. Source database will remain unchanged.') . '</div>';} /** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the PMA_List_Database class * * @package PhpMyAdmin *//** * the list base class */require_once './libraries/List.class.php';/** * handles database lists * * <code> * $PMA_List_Database = new PMA_List_Database($userlink, $controllink); * </code> * * @todo this object should be attached to the PMA_Server object * @todo ? make use of INFORMATION_SCHEMA * @todo ? support --skip-showdatabases and user has only global rights * @access public * @since phpMyAdmin 2.9.10 * @package PhpMyAdmin *//*public*/ class PMA_List_Database extends PMA_List{    /**     * @var mixed   database link resource|object to be used     */    protected $_db_link = null;    /**     * @var mixed   user database link resource|object     */    protected $_db_link_user = null;    /**     * @var mixed   controluser database link resource|object     */    protected $_db_link_control = null;    /**     * @var boolean whether SHOW DATABASES is disabled or not     * @access protected     */    protected $_show_databases_disabled = false;    /**     * @var string command to retrieve databases from server     */    protected $_command = null;    /**     * Constructor     *     * @param mixed   $db_link_user       user database link resource|object     * @param mixed   $db_link_control    control database link resource|object     */    public function __construct($db_link_user = null, $db_link_control = null)    {        $this->_db_link = $db_link_user;        $this->_db_link_user = $db_link_user;        $this->_db_link_control = $db_link_control;        parent::__construct();        $this->build();    }    /**     * checks if the configuration wants to hide some databases     */    protected function _checkHideDatabase()    {        if (empty($GLOBALS['cfg']['Server']['hide_db'])) {            return;        }        foreach ($this->getArrayCopy() as $key => $db) {            if (preg_match('/' . $GLOBALS['cfg']['Server']['hide_db'] . '/', $db)) {                $this->offsetUnset($key);            }        }    }    /**     * retrieves database list from server     *     * @todo    we could also search mysql tables if all fail?     * @param string  $like_db_name   usally a db_name containing wildcards     * @return array     */    protected function _retrieve($like_db_name = null)    {        if ($this->_show_databases_disabled) {            return array();        }        if (null !== $like_db_name) {            $command = "SHOW DATABASES LIKE '" . $like_db_name . "'";        } elseif (null === $this->_command) {            $command = str_replace('#user#', $GLOBALS['cfg']['Server']['user'],                $GLOBALS['cfg']['Server']['ShowDatabasesCommand']);            $this->_command = $command;        } else {            $command = $this->_command;        }        $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);        PMA_DBI_getError();        if ($GLOBALS['errno'] !== 0) {            // failed to get database list, try the control user            // (hopefully there is one and he has SHOW DATABASES right)            $this->_db_link = $this->_db_link_control;            $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);            PMA_DBI_getError();            if ($GLOBALS['errno'] !== 0) {                // failed! we will display a warning that phpMyAdmin could not safely                // retrieve database list, the admin has to setup a control user or                // allow SHOW DATABASES                $GLOBALS['error_showdatabases'] = true;                $this->_show_databases_disabled = true;            }        }        if ($GLOBALS['cfg']['NaturalOrder']) {            natsort($database_list);        } else {            // need to sort anyway, otherwise information_schema            // goes at the top            sort($database_list);        }        return $database_list;    }    /**     * builds up the list     *     */    public function build()    {        if (! $this->_checkOnlyDatabase()) {            $items = $this->_retrieve();            $this->exchangeArray($items);        }        $this->_checkHideDatabase();    }    /**     * checks the only_db configuration     *     * @return  boolean false if there is no only_db, otherwise true     */    protected function _checkOnlyDatabase()    {        if (is_string($GLOBALS['cfg']['Server']['only_db'])         && strlen($GLOBALS['cfg']['Server']['only_db'])) {            $GLOBALS['cfg']['Server']['only_db'] = array(                $GLOBALS['cfg']['Server']['only_db']            );        }        if (! is_array($GLOBALS['cfg']['Server']['only_db'])) {            return false;        }        $items = array();        foreach ($GLOBALS['cfg']['Server']['only_db'] as $each_only_db) {            if ($each_only_db === '*' && ! $this->_show_databases_disabled) {                // append all not already listed dbs to the list                $items = array_merge($items,                    array_diff($this->_retrieve(), $items));                // there can only be one '*', and this can only be last                break;            }            // check if the db name contains wildcard,            // thus containing not escaped _ or %            if (! preg_match('/(^|[^\\\\])(_|%)/', $each_only_db)) {                // ... not contains wildcard                $items[] = PMA_unescape_mysql_wildcards($each_only_db);                continue;            }            if (! $this->_show_databases_disabled) {                $items = array_merge($items, $this->_retrieve($each_only_db));                continue;            }            // @todo induce error, about not using wildcards with SHOW DATABASE disabled?        }        $this->exchangeArray($items);        return true;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        if (strlen($GLOBALS['db'])) {            return $GLOBALS['db'];        }        return $this->getEmpty();    }    /**     * returns array with dbs grouped with extended infos     *     * @param integer $offset     * @param integer $count     * @return  array   db list     */    public function getGroupedDetails($offset, $count)    {        $dbgroups   = array();        if ($GLOBALS['cfg']['ShowTooltip']          && $GLOBALS['cfgRelation']['commwork']) {            $db_tooltips = PMA_getDbComments();        }        if (!$GLOBALS['cfg']['LeftFrameDBTree']) {            $separators = array();        } elseif (is_array($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = $GLOBALS['cfg']['LeftFrameDBSeparator'];        } elseif (!empty($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = array($GLOBALS['cfg']['LeftFrameDBSeparator']);        } else {            $separators = array();        }        foreach ($this->getLimitedItems($offset, $count) as $db) {            // Get comments from PMA comments table            $db_tooltip = '';            if (isset($db_tooltips[$db])) {                $db_tooltip = $db_tooltips[$db];            }            $pos = false;            foreach ($separators as $separator) {                // use strpos instead of strrpos; it seems more common to                // have the db name, the separator, then the rest which                // might contain a separator                // like dbname_the_rest                $pos = strpos($db, $separator, 1);                if ($pos !== false) {                    break;                }            }            if ($pos !== false) {                $group          = substr($db, 0, $pos);                $disp_name_cut  = substr($db, $pos);            } else {                $group          = $db;                $disp_name_cut  = $db;            }            $disp_name  = $db;            if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {                $disp_name      = $db_tooltip;                $disp_name_cut  = $db_tooltip;                $db_tooltip     = $db;            }            $dbgroups[$group][$db] = array(                'name'          => $db,                'disp_name_cut' => $disp_name_cut,                'disp_name'     => $disp_name,                'comment'       => $db_tooltip,            );            if ($GLOBALS['cfg']['Server']['CountTables']) {                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);            }        } // end foreach ($GLOBALS['PMA_List_Database']->items as $db)        return $dbgroups;    }    /**     * returns a part of the items     *     * @param integer $offset     * @param integer $count     * @return  array  some items     */    public function getLimitedItems($offset, $count)    {        return array_slice($this->getArrayCopy(), $offset, $count);    }    /**     * returns html code for list with dbs     *     * @return  string  html code list     */    public function getHtmlListGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<ul id="databaseList" xml:lang="en" dir="ltr">' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<li class="group"><span>' . htmlspecialchars($group) . '</span><ul>' . "\n";                // whether display db_name cut by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<li';                if ($db['name'] == $selected) {                    $return .= ' class="selected"';                }                $return .= '><a';                if (! empty($db['comment'])) {                    $return .= ' title="' . htmlspecialchars($db['comment']) . '"';                }                $return .= ' href="index.php?' . PMA_generate_common_url($db['name'])                    . '" target="_parent">';                if ($cut) {                    $return .= htmlspecialchars($db['disp_name_cut']);                } else {                    $return .= htmlspecialchars($db['disp_name']);                }                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</a></li>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</ul></li>' . "\n";            }        }        $return .= '</ul>';        return $return;    }    /**     * returns html code for select form element with dbs     *     * @todo IE can not handle different text directions in select boxes so,     * as mostly names will be in english, we set the whole selectbox to LTR     * and EN     *     * @return  string  html code select     */    public function getHtmlSelectGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<select name="db" id="lightm_db" xml:lang="en" dir="ltr"'            . ' onchange="if (this.value != \'\') window.parent.openDb(this.value);">' . "\n"            . '<option value="" dir="' . $GLOBALS['text_dir'] . '">'            . '(' . __('Databases') . ') ...</option>' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<optgroup label="' . htmlspecialchars($group)                    . '">' . "\n";                // whether display db_name cuted by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<option value="' . htmlspecialchars($db['name']) . '"'                    .' title="' . htmlspecialchars($db['comment']) . '"';                if ($db['name'] == $selected || (PMA_DRIZZLE && strtolower($db['name']) == strtolower($selected))) {                    $return .= ' selected="selected"';                }                $return .= '>' . htmlspecialchars($cut ? $db['disp_name_cut'] : $db['disp_name']);                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</option>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</optgroup>' . "\n";            }        }        $return .= '</select>';        return $return;    }    /**     * this is just a backup, if all is fine this can be deleted later     *     * @deprecated     */    protected function _checkAgainstPrivTables()    {        // 1. get allowed dbs from the "mysql.db" table        // User can be blank (anonymous user)        $local_query = "            SELECT DISTINCT `Db` FROM `mysql`.`db`            WHERE `Select_priv` = 'Y'            AND `User`            IN ('" . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . "', '')";        $tmp_mydbs = PMA_DBI_fetch_result($local_query, null, null,            $GLOBALS['controllink']);        if ($tmp_mydbs) {            // Will use as associative array of the following 2 code            // lines:            //   the 1st is the only line intact from before            //     correction,            //   the 2nd replaces $dblist[] = $row['Db'];            // Code following those 2 lines in correction continues            // populating $dblist[], as previous code did. But it is            // now populated with actual database names instead of            // with regular expressions.            $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $GLOBALS['controllink']);            // all databases cases - part 2            if (isset($tmp_mydbs['%'])) {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $dblist[] = $tmp_row[0];                } // end while            } else {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $tmp_db = $tmp_row[0];                    if (isset($tmp_mydbs[$tmp_db]) && $tmp_mydbs[$tmp_db] == 1) {                        $dblist[]           = $tmp_db;                        $tmp_mydbs[$tmp_db] = 0;                    } elseif (! isset($dblist[$tmp_db])) {                        foreach ($tmp_mydbs as $tmp_matchpattern => $tmp_value) {                            // fixed bad regexp                            // TODO: db names may contain characters                            //       that are regexp instructions                            $re        = '(^|(\\\\\\\\)+|[^\])';                            $tmp_regex = preg_replace('/' . addcslashes($re, '/') . '%/', '\\1.*', preg_replace('/' . addcslashes($re, '/') . '_/', '\\1.{1}', $tmp_matchpattern));                            // Fixed db name matching                            // 2000-08-28 -- Benjamin Gandon                            if (preg_match('/^' . addcslashes($tmp_regex, '/') . '$/', $tmp_db)) {                                $dblist[] = $tmp_db;                                break;                            }                        } // end while                    } // end if ... elseif ...                } // end while            } // end else            PMA_DBI_free_result($tmp_alldbs);            unset($tmp_mydbs);        } // end if        // 2. get allowed dbs from the "mysql.tables_priv" table        $local_query = 'SELECT DISTINCT Db FROM mysql.tables_priv WHERE Table_priv LIKE \'%Select%\' AND User = \'' . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . '\'';        $rs          = PMA_DBI_try_query($local_query, $GLOBALS['controllink']);        if ($rs && @PMA_DBI_num_rows($rs)) {            while ($row = PMA_DBI_fetch_assoc($rs)) {                if (!in_array($row['Db'], $dblist)) {                    $dblist[] = $row['Db'];                }            } // end while            PMA_DBI_free_result($rs);        } // end if    }}?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';/** * Handles some variables that may have been sent by the calling script * Note: this can be called also from the db panel to get the privileges of *       a db, in which case we want to keep displaying the tabs of *       the Database panel */if (empty($viewing_mode)) {    $db = $table = '';}/** * Set parameters for links */$url_query = PMA_generate_common_url($db);/** * Defines the urls to return to in case of error in a sql statement */$err_url = 'main.php' . $url_query;/** * Displays the headers */require_once './libraries/header.inc.php';/** * @global boolean Checks for superuser privileges */$is_superuser = PMA_isSuperuser();// now, select the mysql dbif ($is_superuser && !PMA_DRIZZLE) {    PMA_DBI_select_db('mysql', $userlink);}/** * @global array binary log files */$binary_logs = PMA_DRIZZLE    ? null    : PMA_DBI_fetch_result('SHOW MASTER LOGS', 'Log_name', null, null, PMA_DBI_QUERY_STORE);?>
<?php/** * Menu items * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}$separator = PMA_get_arg_separator('html');?><ul>    <li><a href="index.php"><?php echo __('Overview') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Features"><?php echo __('Features') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Sql_queries"><?php echo __('SQL queries') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Left_frame"><?php echo __('Navigation frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Main_frame"><?php echo __('Main frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Import"><?php echo __('Import') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Export"><?php echo __('Export') ?></a></li></ul>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * File for vendor customisation, you can change here paths or some behaviour, * which vendors such as Linux distibutions might want to change. * * For changing this file you should know what you are doing. For this reason * options here are not part of normal configuration. * * @package PhpMyAdmin *//** * Path to changelog file, can be gzip compressed. Useful when you want to * have documentation somewhere else, eg. /usr/share/doc. */define('CHANGELOG_FILE', './ChangeLog');/** * Path to license file. Useful when you want to have documentation somewhere * else, eg. /usr/share/doc. */define('LICENSE_FILE', './LICENSE');/** * Path to config file generated using setup script. */define('SETUP_CONFIG_FILE', './config/config.inc.php');/** * Whether setup requires writable directory where config * file will be generated. */define('SETUP_DIR_WRITABLE', true);/** * Directory where configuration files are stored. * It is not used directly in code, just a convenient * define used further in this file. */define('CONFIG_DIR', './');/** * Filename of a configuration file. */define('CONFIG_FILE', CONFIG_DIR . 'config.inc.php');/** * Filename of custom header file. */define('CUSTOM_HEADER_FILE', CONFIG_DIR . 'config.header.inc.php');/** * Filename of custom footer file. */define('CUSTOM_FOOTER_FILE', CONFIG_DIR . 'config.footer.inc.php');/** * Default value for check for version upgrades. */define('VERSION_CHECK_DEFAULT', true);/** * Path to gettext.inc file. Useful when you want php-gettext somewhere else, * eg. /usr/share/php/gettext/gettext.inc. */define('GETTEXT_INC', './libraries/php-gettext/gettext.inc');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY = "UPLOAD_IDENTIFIER";/** * Returns upload status. * * This is implementation for uploadprogress extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_uploadprogressCheck() || $ret['finished']) {        return $ret;    }    $status = uploadprogress_get_info($id);    if ($status) {        if ($status['bytes_uploaded'] == $status['bytes_total']) {            $ret['finished'] = true;        } else {            $ret['finished'] = false;        }        $ret['total']    = $status['bytes_total'];        $ret['complete'] = $status['bytes_uploaded'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }    } else {       $ret = array(                    'id'       => $id,                    'finished' => true,                    'percent'  => 100,                    'total'    => $ret['total'],                    'complete' => $ret['total'],                    'plugin'   => $ID_KEY                );    }    $_SESSION[$SESSION_KEY][$id] = $ret;    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Front controller for config view / download and clear * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/ConfigGenerator.class.php';require './libraries/config/setup.forms.php';$form_display = new FormDisplay();$form_display->registerForm('_config.php', $forms['_config.php']);$form_display->save('_config.php');$config_file_path = ConfigFile::getInstance()->getFilePath();if (isset($_POST['eol'])) {    $_SESSION['eol'] = ($_POST['eol'] == 'unix') ? 'unix' : 'win';}if (PMA_ifSetOr($_POST['submit_clear'], '')) {    //    // Clear current config and return to main page    //    ConfigFile::getInstance()->resetConfigData();    // drop post data    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} elseif (PMA_ifSetOr($_POST['submit_download'], '')) {    //    // Output generated config file    //    PMA_download_header('config.inc.php', 'text/plain');    echo ConfigGenerator::getConfigFile();    exit;} elseif (PMA_ifSetOr($_POST['submit_save'], '')) {    //    // Save generated config file on the server    //    file_put_contents($config_file_path, ConfigGenerator::getConfigFile());    header('HTTP/1.1 303 See Other');    header('Location: index.php?action_done=config_saved');    exit;} elseif (PMA_ifSetOr($_POST['submit_load'], '')) {    //    // Load config file from the server    //    $cfg = array();    include_once $config_file_path;    ConfigFile::getInstance()->setConfigData($cfg);    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} elseif (PMA_ifSetOr($_POST['submit_delete'], '')) {    //    // Delete config file on the server    //    @unlink($config_file_path);    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} else {    //    // Show generated config file in a <textarea>    //    header('HTTP/1.1 303 See Other');    header('Location: index.php?page=config');    exit;}?>
<?php/** * Generates the SVG needed for the plot * * @package PhpMyAdmin */require_once 'pma_svg_data_point.php';class PMA_Scatter_Plot{    /**     * @var array   Raw data for the plot     */    private $_data;    /**     * @var array   Data points of the plot     */    private $_dataPoints;    /**     * @var array   Set of default settigs values are here.     */    private $_settings = array(        // Array of colors to be used for plot.        'colors' => array(            '#BCE02E',            '#E0642E',            '#E0D62E',            '#2E97E0',            '#B02EE0',            '#E02E75',            '#5CE02E',            '#E0B02E',            '#000000',            '#0022E0',            '#726CB1',            '#481A36',            '#BAC658',            '#127224',            '#825119',            '#238C74',            '#4C489B',            '#87C9BF',        ),        // Plot background color.        'bgColor' => '#84AD83',        // The width of the plot.        'width' => 520,         // The height of the plot.        'height' => 325,        // Default X Axis label. If empty, label will be taken from the data.        'xLabel' => '',        // Default Y Axis label. If empty, label will be taken from the data.        'yLabel' => '',        // Data point label. If empty, label will be taken from the data.        'dataLabel' => '',    );    /**     * @var array   Options that the user has specified.     */    private $_userSpecifiedSettings = null;    /**     * Returns the settings array     *     * @return the settings array.     */    public function getSettings()    {        return $this->_settings;    }    /**     * Returns the data array     *     * @return the data array.     */    public function getData()    {        return $this->_data;    }    /**     * Constructor. Stores user specified options.     *     * @param array $data    Data for the visualization     * @param array $options Users specified options     */    public function __construct($data, $options)    {        $this->_userSpecifiedSettings = $options;        $this->_data = $data;    }    /**     * All the variable initialization, options handling has to be done here.     */    protected function init()    {        $this->_handleOptions();    }    /**     * A function which handles passed parameters. Useful if desired     * chart needs to be a little bit different from the default one.     */    private function _handleOptions()    {        $this->_dataPoints = array();        if (! is_null($this->_userSpecifiedSettings)) {            foreach (array_keys($this->_userSpecifiedSettings) as $key) {                $this->_settings[$key] = $this->_userSpecifiedSettings[$key];            }        }        if ($this->_settings['dataLabel'] == '') {            $labels = array_keys($this->_data[0]);            $this->_settings['dataLabel'] = $labels[0];        }    }    /**     * Generate the visualization in SVG format.     *     * @return the generated image resource     */    private function _svg()    {        $this->init();        $output   = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . "\n";        $output  .= '<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg"'            . ' xmlns="http://www.w3.org/2000/svg" width="' . $this->_settings['width'] . '"'            . ' height="' . $this->_settings['height'] . '">';        $output .= '<g id="groupPanel">';        $output .= '<defs>            <path id="myTextPath1"                    d="M10,190 L10,50"/>                    <path id="myTextPath2"                    d="M250,10 L370,10"/>                    </defs>';        $output .= '<text x="6" y="190"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath1" >';        $output .= $this->_settings['yLabel'];        $output .= '</textPath>                   </text>';        $output .= '<text x="250" y="10"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath2" >';        $output .= $this->_settings['xLabel'];        $output .= '</textPath>                   </text>';        $scale_data = $this->_scaleDataSet($this->_data, $this->_settings['xLabel'], $this->_settings['yLabel']);        $output .= $this->_prepareDataSet($this->_data, 0, $scale_data, $this->_settings['dataLabel']);        $output .= '</g>';        $output .= '</svg>';        return $output;    }    /**     * Get the visualization as a SVG.     *     * @return the visualization as a SVG     */    public function asSVG()    {        $output = $this->_svg();        return $output;    }    /**     * Calculates the scale, horizontal and vertical offset that should be used.     *     * @param array $data Row data     *     * @return an array containing the scale, x and y offsets     */    private function _scaleDataSet($data, $xField, $yField)    {        // Currently assuming only numeric fields are selected        $coordinates = array();        foreach ($data as $row) {            $coordinates[0][] = $row[$xField];            $coordinates[1][] = $row[$yField];        }        for ($i = 0 ; $i < 2 ; $i++) {            $maxC = ($i == 0) ? 500 : 320;            if ( !is_numeric($coordinates[$i][0])) {                $uniqueC = array_unique($coordinates[$i]);                $countC = count(array_unique($coordinates[$i]));                $map = $tmp = array();                foreach ($uniqueC as $uc) {                    $tmp[] = $uc;                }                for ($j = 0 ; $j < $countC ; $j++) {                    $map[$tmp[$j]] = 20 + $j * $maxC / $countC;                }                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                     $coordinates[$i][$j] = $map[$coordinates[$i][$j]];                }            } else if (is_numeric($coordinates[$i][0])) {                $maxC = max($coordinates[$i]);                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                    if ($i == 0) {                         $coordinates[$i][$j] = 20 + 500 * $coordinates[$i][$j] / $maxC;                    } else {                         $coordinates[$i][$j] = 20 + 320 * (1 - $coordinates[$i][$j] / $maxC);                    }                }            }        }        return $coordinates;    }    /**     * Prepares and return the dataset as needed by the visualization.     *     * @param array  $data         Raw data     * @param int    $color_number Start index to the color array     * @param array  $scale_data   Data related to scaling     * @param string $label        Label for the data points     * @return string the formatted array of data.     */    private function _prepareDataSet($data, $color_number, $scale_data, $label)    {        $result = '';        // loop through the rows        for ($i = 0 ; $i < count($data) ; $i++) {            $index = $color_number % sizeof($this->_settings['colors']);            $data_element = new PMA_SVG_Data_Point($scale_data[0][$i], $scale_data[1][$i], $data[$i][$label], $data[$i]);            $options = array('color' => $this->_settings['colors'][$index], 'id' => $i);            $this->_dataPoints[] = $data_element;            $result .= $data_element->prepareRowAsSVG($options);            $color_number++;        }        return $result;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * URL/hidden inputs generating. * * @package PhpMyAdmin *//** * Generates text with hidden inputs. * * @param string $db     optional database name *                       (can also be an array of parameters) * @param string $table  optional table name * @param int    $indent indenting level * @param string $skip   do not generate a hidden field for this parameter *                       (can be an array of strings) * * @see PMA_generate_common_url() * * @return  string   string with input fields * * @global  string   the current language * @global  string   the current conversion charset * @global  string   the current connection collation * @global  string   the current server * @global  array    the configuration array * @global  boolean  whether recoding is allowed or not * * @access  public */function PMA_generate_common_hidden_inputs($db = '', $table = '', $indent = 0, $skip = array()){    if (is_array($db)) {        $params  =& $db;        $_indent = empty($table) ? $indent : $table;        $_skip   = empty($indent) ? $skip : $indent;        $indent  =& $_indent;        $skip    =& $_skip;    } else {        $params = array();        if (strlen($db)) {            $params['db'] = $db;        }        if (strlen($table)) {            $params['table'] = $table;        }    }    if (! empty($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    $params['token'] = $_SESSION[' PMA_token '];    if (! is_array($skip)) {        if (isset($params[$skip])) {            unset($params[$skip]);        }    } else {        foreach ($skip as $skipping) {            if (isset($params[$skipping])) {                unset($params[$skipping]);            }        }    }    return PMA_getHiddenFields($params);}/** * create hidden form fields from array with name => value * * <code> * $values = array( *     'aaa' => aaa, *     'bbb' => array( *          'bbb_0', *          'bbb_1', *     ), *     'ccc' => array( *          'a' => 'ccc_a', *          'b' => 'ccc_b', *     ), * ); * echo PMA_getHiddenFields($values); * * // produces: * <input type="hidden" name="aaa" Value="aaa" /> * <input type="hidden" name="bbb[0]" Value="bbb_0" /> * <input type="hidden" name="bbb[1]" Value="bbb_1" /> * <input type="hidden" name="ccc[a]" Value="ccc_a" /> * <input type="hidden" name="ccc[b]" Value="ccc_b" /> * </code> * * @param array  $values hidden values * @param string $pre    prefix * * @return string form fields of type hidden */function PMA_getHiddenFields($values, $pre = ''){    $fields = '';    foreach ($values as $name => $value) {        if (! empty($pre)) {            $name = $pre. '[' . $name . ']';        }        if (is_array($value)) {            $fields .= PMA_getHiddenFields($value, $name);        } else {            // do not generate an ending "\n" because            // PMA_generate_common_hidden_inputs() is sometimes called            // from a JS document.write()            $fields .= '<input type="hidden" name="' . htmlspecialchars($name)                . '" value="' . htmlspecialchars($value) . '" />';        }    }    return $fields;}/** * Generates text with URL parameters. * * <code> * // OLD derepecated style * // note the ? * echo 'script.php?' . PMA_generate_common_url('mysql', 'rights'); * // produces with cookies enabled: * // script.php?db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights * * // NEW style * $params['myparam'] = 'myvalue'; * $params['db']      = 'mysql'; * $params['table']   = 'rights'; * // note the missing ? * echo 'script.php' . PMA_generate_common_url($params); * // produces with cookies enabled: * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights * * // note the missing ? * echo 'script.php' . PMA_generate_common_url(); * // produces with cookies enabled: * // script.php * // with cookies disabled: * // script.php?server=1&amp;lang=en * </code> * * @param mixed  assoc. array with url params or optional string with database name *               if first param is an array there is also an ? prefixed to the url * * @param string - if first param is array: 'html' to use htmlspecialchars() *               on the resulting URL (for a normal URL displayed in HTML) *               or something else to avoid using htmlspecialchars() (for *               a URL sent via a header); if not set,'html' is assumed *               - if first param is not array:  optional table name * * @param string - if first param is array: optional character to *               use instead of '?' *               - if first param is not array: optional character to use *               instead of '&amp;' for dividing URL parameters * * @return  string   string with URL parameters * @access  public */function PMA_generate_common_url(){    $args = func_get_args();    if (isset($args[0]) && is_array($args[0])) {        // new style        $params = $args[0];        if (isset($args[1])) {            $encode = $args[1];        } else {            $encode = 'html';        }        if (isset($args[2])) {            $questionmark = $args[2];        } else {            $questionmark = '?';        }    } else {        // old style        if (PMA_isValid($args[0])) {            $params['db'] = $args[0];        }        if (PMA_isValid($args[1])) {            $params['table'] = $args[1];        }        if (isset($args[2]) && $args[2] !== '&amp;') {            $encode = 'text';        } else {            $encode = 'html';        }        $questionmark = '';    }    $separator = PMA_get_arg_separator();    if (isset($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']        // avoid overwriting when creating navi panel links to servers        && ! isset($params['server'])    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    if (isset($_SESSION[' PMA_token '])) {        $params['token'] = $_SESSION[' PMA_token '];    }    if (empty($params)) {        return '';    }    $query = $questionmark . http_build_query($params, null, $separator);    if ($encode === 'html') {        $query = htmlspecialchars($query);    }    return $query;}/** * Returns url separator * * extracted from arg_separator.input as set in php.ini * we do not use arg_separator.output to avoid problems with &amp; and & * * @param string $encode whether to encode separator or not, * currently 'none' or 'html' * * @return  string  character used for separating url parts usally ; or & * @access  public */function PMA_get_arg_separator($encode = 'none'){    static $separator = null;    if (null === $separator) {        // use seperators defined by php, but prefer ';'        // as recommended by W3C        $php_arg_separator_input = ini_get('arg_separator.input');        if (strpos($php_arg_separator_input, ';') !== false) {            $separator = ';';        } elseif (strlen($php_arg_separator_input) > 0) {            $separator = $php_arg_separator_input{0};        } else {            $separator = '&';        }    }    switch ($encode) {    case 'html':        return htmlentities($separator);        break;    case 'text' :    case 'none' :    default :        return $separator;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Core library. */require_once './libraries/common.inc.php';// Check URL parametersPMA_checkParameters(array('reference', 'c_type'));// Increase time limit, because fetching blob might take some time@set_time_limit(0);$reference = $_REQUEST['reference'];/* * FIXME: Maybe it would be better to check MIME type against whitelist as * this code sems to support only few MIME types (check * function PMA_BS_CreateReferenceLink in libraries/blobstreaming.lib.php). */$c_type = preg_replace('/[^A-Za-z0-9/_-]/', '_', $_REQUEST['c_type']);// Get the blob streaming URL$filename = PMA_BS_getURL($reference);if (empty($filename)) {    die(__('No blob streaming server configured!'));}$hdrs = get_headers($filename, 1);if ($hdrs === false) {    die(__('Failed to fetch headers'));}$fHnd = fopen($filename, "rb");if ($fHnd === false) {    die(__('Failed to open remote URL'));}$f_size = $hdrs['Content-Length'];PMA_download_header(basename($filename), $c_type, $f_size);$pos = 0;$content = "";while (!feof($fHnd)) {    $content .= fread($fHnd, $f_size);    $pos = strlen($content);    if ($pos >= $f_size) {        break;    }}echo $content;flush();fclose($fHnd);
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Server synchronisation functions. * * @package PhpMyAdmin *//** * Places matching tables in source and target databases in $matching_tables * array whereas $uncommon_source_tables array gets the tables present in * source database but are absent from target database.  Criterion for * matching tables is just comparing their names. * * @param array $trg_tables              array of target database table names, * @param array $src_tables              array of source database table names, * @param array &$matching_tables        empty array passed by reference to save *                                       names of matching tables, * @param array &$uncommon_source_tables empty array passed by reference to save *                                       names of tables present in source database *                                       but absent from target database */function PMA_getMatchingTables($trg_tables, $src_tables, &$matching_tables, &$uncommon_source_tables){    for ($k=0; $k< sizeof($src_tables); $k++) {        $present_in_target = false;        for ($l=0; $l < sizeof($trg_tables); $l++) {            if ($src_tables[$k] === $trg_tables[$l]) {                $present_in_target = true;                $matching_tables[] = $src_tables[$k];            }        }        if ($present_in_target === false) {            $uncommon_source_tables[] = $src_tables[$k];        }    }}/** * Places tables present in target database but are absent from source database * * @param array $trg_tables              array of target database table names, * @param array $matching_tables         matching tables array containing names *                                       of matching tables, * @param array &$uncommon_target_tables empty array passed by reference to save *                                       names of tables presnet in target database *                                       but absent from source database */function PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, &$uncommon_target_tables){    for ($c=0; $c<sizeof($trg_tables); $c++) {        $match = false;        for ($d=0; $d < sizeof($matching_tables); $d++) {            if ($trg_tables[$c] === $matching_tables[$d]) {                $match=true;            }        }        if ($match === false) {            $uncommon_target_tables[] = $trg_tables[$c];        }    }}/** * Finds the difference in source and target matching tables by * first comparing source table's primary key entries with target table enteries. * It gets the field names for the matching table also for comparisons. * If the entry is found in target table also then it is checked for the remaining * field values also, in order to check whether update is required or not. * If update is required, it is placed in $update_array * Otherwise that entry is placed in the $insert_array. * * @param string  $src_db                  name of source database * @param string  $trg_db                  name of target database * @param db_link $src_link                connection established with source server * @param db_link $trg_link                connection established with target server * @param array   &$matching_table         array containing matching table names * @param array   &$matching_tables_fields A two dimensional array passed by reference to contain names of fields for each matching table * @param array   &$update_array           A three dimensional array passed by reference to *                                         contain updates required for each matching table * @param array   &$insert_array           A three dimensional array passed by reference to *                                         contain inserts required for each matching table * @param array   &$delete_array           Unused * @param array   &$fields_num             A two dimensional array passed by reference to *                                         contain number of fields for each matching table * @param int     $matching_table_index    Index of a table from $matching_table array * @param array   &$matching_tables_keys   A two dimensional array passed by reference to contain names of keys for each matching table */function PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, &$matching_table, &$matching_tables_fields,    &$update_array, &$insert_array, &$delete_array, &$fields_num, $matching_table_index, &$matching_tables_keys){    if (isset($matching_table[$matching_table_index])) {        $fld = array();        $fld_results = PMA_DBI_get_columns($src_db, $matching_table[$matching_table_index], null, true, $src_link);        $is_key = array();        if (isset($fld_results)) {            foreach ($fld_results as $each_field) {                $field_name = $each_field['Field'];                if ($each_field['Key'] == 'PRI') {                    $is_key[] = $field_name;                }                $fld[] = $field_name;            }        }        $matching_tables_fields[$matching_table_index] = $fld;        $fields_num[$matching_table_index] = sizeof($fld);        $matching_tables_keys[$matching_table_index] = $is_key;        $source_result_set = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $is_key, $src_link);        $source_size = sizeof($source_result_set);        $trg_fld_results = PMA_DBI_get_columns($trg_db, $matching_table[$matching_table_index], null, true, $trg_link);        $all_keys_match = true;        $trg_keys = array();        if (isset($trg_fld_results)) {            foreach ($trg_fld_results as $each_field) {                if ($each_field['Key'] == 'PRI') {                    $trg_keys[] = $each_field['Field'];                    if (! (in_array($each_field['Field'], $is_key))) {                        $all_keys_match = false;                    }                }            }        }        $update_row = 0;        $insert_row = 0;        for ($j = 0; $j < $source_size; $j++) {            $starting_index = 0;            $update_field = 0;            if (isset($source_result_set[$j]) && ($all_keys_match)) {                // Query the target server to see which rows already exist                $trg_select_query = "SELECT * FROM " . PMA_backquote($trg_db) . "."                    . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                if (sizeof($is_key) == 1) {                    $trg_select_query .= PMA_backquote($is_key[0]). "='" . $source_result_set[$j] . "'";                } elseif (sizeof($is_key) > 1) {                    for ($k=0; $k < sizeof($is_key); $k++) {                        $trg_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                        if ($k < (sizeof($is_key)-1)) {                            $trg_select_query .= " AND ";                        }                    }                }                $target_result_set = PMA_DBI_fetch_result($trg_select_query, null, null, $trg_link);                if ($target_result_set) {                    // Fetch the row from the source server to do a comparison                    $src_select_query = "SELECT * FROM " . PMA_backquote($src_db) . "."                        . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    if (sizeof($is_key) == 1) {                        $src_select_query .= PMA_backquote($is_key[0]) . "='" . $source_result_set[$j] . "'";                    } elseif (sizeof($is_key) > 1) {                        for ($k=0; $k< sizeof($is_key); $k++) {                            $src_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                            if ($k < (sizeof($is_key) - 1)) {                                $src_select_query .= " AND ";                            }                        }                    }                    $src_result_set = PMA_DBI_fetch_result($src_select_query, null, null, $src_link);                    /**                    * Comparing each corresponding field of the source and target matching rows.                    * Placing the primary key, value of primary key, field to be updated, and the                    * new value of field to be updated in each row of the update array.                    */                    for ($m = 0; ($m < $fields_num[$matching_table_index]) && ($starting_index == 0) ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (! (in_array($fld[$m], $is_key)))) {                                    if (sizeof($is_key) == 1) {                                        if ($source_result_set[$j]) {                                            $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                        }                                    } elseif (sizeof($is_key) > 1) {                                        for ($n=0; $n < sizeof($is_key); $n++) {                                            if (isset($src_result_set[0][$is_key[$n]])) {                                                $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                            }                                        }                                    }                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if (isset($src_result_set[0][$fld[$m]])) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $starting_index = $m;                                    $update_row++;                                }                            } else {                                if (sizeof($is_key) == 1) {                                    if ($source_result_set[$j]) {                                        $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                    }                                } elseif (sizeof($is_key) > 1) {                                    for ($n = 0; $n < sizeof($is_key); $n++) {                                        if (isset($src_result_set[0][$is_key[$n]])) {                                            $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                        }                                    }                                }                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if (isset($src_result_set[0][$fld[$m]])) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $starting_index = $m;                                $update_row++;                            }                        }                    }                    for ($m = $starting_index + 1; $m < $fields_num[$matching_table_index] ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (!(in_array($fld[$m], $is_key)))) {                                    $update_row--;                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if ($src_result_set[0][$fld[$m]]) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $update_row++;                                }                            } else {                                $update_row--;                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if ($src_result_set[0][$fld[$m]]) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $update_row++;                            }                        }                    }                } else {                    /**                     * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                     */                    if (sizeof($is_key) == 1) {                        if (isset($source_result_set[$j])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                        }                    } elseif (sizeof($is_key) > 1) {                        for ($l = 0; $l < sizeof($is_key); $l++) {                            if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                                $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                            }                        }                    }                    $insert_row++;                }            } else {                /**                 * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                 * This condition is met when there is an additional column in the source table                 */                if (sizeof($is_key) == 1) {                    if (isset($source_result_set[$j])) {                        $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                    }                } elseif (sizeof($is_key) > 1) {                    for ($l = 0; $l < sizeof($is_key); $l++) {                        if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                        }                    }                }                $insert_row++;            }        } // for loop ends    }}/** * Finds the rows which are to be deleted from target table. * * @param array   &$delete_array        array containing rows that are to be deleted * @param array   $matching_table       array containing matching table names * @param int     $matching_table_index index of a table from $matching_table array * @param array   $trg_keys             array of target table keys * @param array   $src_keys             array of source table keys * @param string  $trg_db               name of target database * @param db_link $trg_link             connection established with target server * @param string  $src_db               name of source database * @param db_link $src_link             connection established with source server */function PMA_findDeleteRowsFromTargetTables(&$delete_array, $matching_table, $matching_table_index, $trg_keys, $src_keys, $trg_db, $trg_link, $src_db, $src_link){    if (isset($trg_keys[$matching_table_index])) {        $target_key_values = PMA_get_column_values($trg_db, $matching_table[$matching_table_index], $trg_keys[$matching_table_index], $trg_link);    }    if (isset($src_keys[$matching_table_index])) {        $source_key_values = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $src_keys[$matching_table_index], $src_link);    }    $all_keys_match = 1;    for ($a = 0; $a < sizeof($trg_keys[$matching_table_index]); $a++) {        if (isset($trg_keys[$matching_table_index][$a])) {            if (! (in_array($trg_keys[$matching_table_index][$a], $src_keys[$matching_table_index]))) {                $all_keys_match = 0;            }        }    }    if (! ($all_keys_match)) {        if (isset($target_key_values)) {            $delete_array[$matching_table_index] = $target_key_values;        }    }    if (isset($trg_keys[$matching_table_index])) {        if ((sizeof($trg_keys[$matching_table_index]) == 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    if (! (in_array($target_key_values[$i], $source_key_values))) {                        $delete_array[$matching_table_index][$row] = $target_key_values[$i];                        $row++;                    }                }            }        } elseif ((sizeof($trg_keys[$matching_table_index]) > 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    $is_present = false;                    for ($j = 0; $j < sizeof($source_key_values) && ($is_present == false) ; $j++) {                        $check = true;                        for ($k = 0; $k < sizeof($trg_keys[$matching_table_index]); $k++) {                            if ($target_key_values[$i][$trg_keys[$matching_table_index][$k]] != $source_key_values[$j][$trg_keys[$matching_table_index][$k]]) {                                $check = false;                            }                        }                        if ($check) {                            $is_present = true;                        }                    }                    if (! ($is_present)) {                        for ($l = 0; $l < sizeof($trg_keys[$matching_table_index]); $l++) {                            $delete_array[$matching_table_index][$row][$trg_keys[$matching_table_index][$l]] = $target_key_values[$i][$trg_keys[$matching_table_index][$l]];                        }                        $row++;                    }                }            }        }    }}/** * PMA_dataDiffInUncommonTables() finds the data difference in  $source_tables_uncommon * * @param array  $source_tables_uncommon table names that are in source db and not in target db * @param string $src_db                 name of source database * @param mixed  $src_link               connection established with source server * @param int    $index                  index of a table from $matching_table array * @param array  &$row_count             number of rows * * @return nothing */function PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $index, &$row_count){    $query = "SELECT COUNT(*) FROM " . PMA_backquote($src_db) . "." . PMA_backquote($source_tables_uncommon[$index]);    $rows  = PMA_DBI_fetch_result($query, null, null, $src_link);    $row_count[$index] = $rows[0];}/** * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index] * * @param array   $table                Matching tables' names * @param array   $update_array         A three dimensional array containing field *                                      value updates required for each matching table * @param string  $src_db               Name of source database * @param string  $trg_db               Name of target database * @param mixed   $trg_link             Connection established with target server * @param int     $matching_table_index index of matching table in matching_table_array * @param array   $matching_table_keys * @param boolean $display */function PMA_updateTargetTables($table, $update_array, $src_db, $trg_db, $trg_link, $matching_table_index, $matching_table_keys, $display){    if (isset($update_array[$matching_table_index])) {        if (sizeof($update_array[$matching_table_index])) {            for ($update_row = 0; $update_row < sizeof($update_array[$matching_table_index]); $update_row++) {                if (isset($update_array[$matching_table_index][$update_row])) {                    $update_fields_num = sizeof($update_array[$matching_table_index][$update_row])-sizeof($matching_table_keys[$matching_table_index]);                    if ($update_fields_num > 0) {                        $query = "UPDATE " . PMA_backquote($trg_db) . "." .PMA_backquote($table[$matching_table_index]) . " SET ";                        for ($update_field = 0; $update_field < $update_fields_num; $update_field = $update_field+2) {                            if (isset($update_array[$matching_table_index][$update_row][$update_field]) && isset($update_array[$matching_table_index][$update_row][$update_field+1])) {                                $query .= PMA_backquote($update_array[$matching_table_index][$update_row][$update_field]) . "='" . $update_array[$matching_table_index][$update_row][$update_field+1] . "'";                            }                            if ($update_field < ($update_fields_num - 2)) {                                $query .= ", ";                            }                        }                        $query .= " WHERE ";                        if (isset($matching_table_keys[$matching_table_index])) {                            for ($key = 0; $key < sizeof($matching_table_keys[$matching_table_index]); $key++) {                                if (isset($matching_table_keys[$matching_table_index][$key])) {                                    $query .= PMA_backquote($matching_table_keys[$matching_table_index][$key]) . "='" . $update_array[$matching_table_index][$update_row][$matching_table_keys[$matching_table_index][$key]] . "'";                                }                                if ($key < (sizeof($matching_table_keys[$matching_table_index]) - 1)) {                                    $query .= " AND ";                                }                            }                        }                        $query .= ';';                        if ($display == true) {                            echo "<p>" . $query . "</p>";                        }                        PMA_DBI_try_query($query, $trg_link, 0);                    }                }            }        }    }}/** * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index] * * @todo this function uses undefined variables and is possibly broken: $matching_tables, *       $matching_tables_fields, $remove_indexes_array, $matching_table_keys * * @param array  $matching_table          matching table names * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $table_fields            field names of a table * @param array  &$array_insert * @param int    $matching_table_index    index of matching table in matching_table_array * @param array  $matching_tables_keys    field names that are keys in the matching table * @param array  $source_columns          source column information * @param array  &$add_column_array       column names that are to be added in target table * @param array  $criteria                criteria like type, null, collation, default etc * @param array  $target_tables_keys      field names that are keys in the target table * @param array  $uncommon_tables         table names that are present in source db but not in targt db * @param array  &$uncommon_tables_fields field names of the uncommon tables * @param array  $uncommon_cols           column names that are present in target table and not in source table * @param array  &$alter_str_array        column names that are to be altered * @param array  &$source_indexes         column names on which indexes are made in source table * @param array  &$target_indexes         column names on which indexes are made in target table * @param array  &$add_indexes_array      column names on which index is to be added in target table * @param array  &$alter_indexes_array    column names whose indexes are to be altered. Only index name and uniqueness of an index can be changed * @param array  &$delete_array           rows that are to be deleted * @param array  &$update_array           rows that are to be updated in target * @param bool   $display */function PMA_insertIntoTargetTable($matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, &$array_insert, $matching_table_index, $matching_tables_keys, $source_columns, &$add_column_array, $criteria, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $uncommon_cols, &$alter_str_array, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$delete_array, &$update_array, $display){    if (isset($array_insert[$matching_table_index])) {        if (sizeof($array_insert[$matching_table_index])) {            for ($insert_row = 0; $insert_row< sizeof($array_insert[$matching_table_index]); $insert_row++) {                if (isset($array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][0]])) {                    $select_query = "SELECT * FROM " . PMA_backquote($src_db) . "." . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    for ($i = 0; $i < sizeof($matching_tables_keys[$matching_table_index]); $i++) {                        $select_query .= $matching_tables_keys[$matching_table_index][$i] . "='";                        $select_query .= $array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][$i]] . "'" ;                        if ($i < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                            $select_query.= " AND ";                        }                    }                    $select_query .= "; ";                    $result = PMA_DBI_fetch_result($select_query, null, null, $src_link);                    $insert_query = "INSERT INTO " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_table[$matching_table_index]) ." (";                    for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                        $insert_query .=  PMA_backquote($table_fields[$matching_table_index][$field_index]);                        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db ."'                                         AND TABLE_NAME = '" . $matching_table[$matching_table_index]. "'AND COLUMN_NAME = '" .                                         $table_fields[$matching_table_index][$field_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;                        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $trg_link);                        if (sizeof($is_fk_result) > 0) {                            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                                $table_index = array_keys($matching_table, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                                if (isset($alter_str_array[$table_index[0]])) {                                    PMA_alterTargetTableStructure(                                        $trg_db, $trg_link, $matching_tables, $source_columns, $alter_str_array, $matching_tables_fields,                                        $criteria, $matching_tables_keys, $target_tables_keys, $table_index[0], $display                                    );                                    unset($alter_str_array[$table_index[0]]);                                }                                if (isset($uncommon_columns[$table_index[0]])) {                                    PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_index[0], $display);                                    unset($uncommon_columns[$table_index[0]]);                                }                                if (isset($add_column_array[$table_index[0]])) {                                    PMA_findDeleteRowsFromTargetTables(                                        $delete_array, $matching_tables, $table_index[0], $target_tables_keys,                                        $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link                                    );                                    if (isset($delete_array[$table_index[0]])) {                                        PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index[0], $target_tables_keys, $delete_array, $display);                                        unset($delete_array[$table_index[0]]);                                    }                                    PMA_addColumnsInTargetTable(                                        $src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, $add_column_array,                                        $matching_tables_fields, $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables,                                        $uncommon_tables_fields, $table_index[0], $uncommon_cols, $display                                    );                                    unset($add_column_array[$table_index[0]]);                                }                                if (isset($add_indexes_array[$table_index[0]])                                    || isset($remove_indexes_array[$table_index[0]])                                    || isset($alter_indexes_array[$table_index[0]])                                ) {                                    PMA_applyIndexesDiff(                                        $trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array,                                        $alter_indexes_array, $remove_indexes_array, $table_index[0], $display                                    );                                    unset($add_indexes_array[$table_index[0]]);                                    unset($alter_indexes_array[$table_index[0]]);                                    unset($remove_indexes_array[$table_index[0]]);                                }                                if (isset($update_array[$table_index[0]])) {                                    PMA_updateTargetTables(                                        $matching_tables, $update_array, $src_db, $trg_db, $trg_link,                                        $table_index[0], $matching_table_keys, $display                                    );                                    unset($update_array[$table_index[0]]);                                }                                if (isset($array_insert[$table_index[0]])) {                                     PMA_insertIntoTargetTable(                                         $matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, $array_insert, $table_index[0],                                         $matching_tables_keys, $source_columns, $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,                                         $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes, $target_indexes, $add_indexes_array,                                         $alter_indexes_array, $delete_array, $update_array, $display                                     );                                     unset($array_insert[$table_index[0]]);                                }                            }                        }                        if ($field_index < sizeof($table_fields[$matching_table_index])-1) {                            $insert_query .= ", ";                        }                    }                    $insert_query .= ") VALUES(";                    if (sizeof($table_fields[$matching_table_index]) == 1) {                         $insert_query .= "'" . PMA_sqlAddSlashes($result[0]) . "'";                    } else {                        for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                            if (isset($result[0][$table_fields[$matching_table_index][$field_index]])) {                                $insert_query .= "'" . PMA_sqlAddSlashes($result[0][$table_fields[$matching_table_index][$field_index]]) . "'";                            } else {                                $insert_query .= "'NULL'";                            }                            if ($field_index < (sizeof($table_fields[$matching_table_index])) - 1) {                                    $insert_query .= " ," ;                            }                        }                    }                    $insert_query .= ");";                    if ($display == true) {                        PMA_displayQuery($insert_query);                    }                    PMA_DBI_try_query($insert_query, $trg_link, 0);                }            }        }    }}/** * PMA_createTargetTables() Create the missing table $uncommon_table in target database * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  &$uncommon_tables        names of tables present in source but not in target * @param int    $table_index             index of table in $uncommon_tables array * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, &$uncommon_tables, $table_index, &$uncommon_tables_fields, $display){    if (isset($uncommon_tables[$table_index])) {        $fields_result = PMA_DBI_get_columns($src_db, $uncommon_tables[$table_index], null, true, $src_link);        $fields = array();        foreach ($fields_result as $each_field) {            $field_name = $each_field['Field'];            $fields[] = $field_name;        }        $uncommon_tables_fields[$table_index] = $fields;        $Create_Query = PMA_DBI_fetch_value("SHOW CREATE TABLE " . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), 0, 1, $src_link);        // Replace the src table name with a `dbname`.`tablename`        $Create_Table_Query = preg_replace('/' . preg_quote(PMA_backquote($uncommon_tables[$table_index]), '/') . '/',                                            PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]),                                            $Create_Query,                                            $limit = 1        );        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                        AND TABLE_NAME = '" . $uncommon_tables[$table_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);        if (sizeof($is_fk_result) > 0) {            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }            }        }        $Create_Table_Query .= ';';        if ($display == true) {            echo '<p>' . $Create_Table_Query . '</p>';        }        PMA_DBI_try_query($Create_Table_Query, $trg_link, 0);    }}/** * PMA_populateTargetTables() inserts data into uncommon tables after they have been created * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db) * @param int    $table_index            index of table in matching_table_array * @param array  $uncommon_tables_fields field names of the uncommon table * @param bool   $display * * @todo This turns NULL values into '' (empty string) */function PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $uncommon_tables, $table_index, $uncommon_tables_fields, $display){    $display = false; // todo: maybe display some of the queries if they are not too numerous    $unbuffered_result = PMA_DBI_try_query('SELECT * FROM ' . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), $src_link, PMA_DBI_QUERY_UNBUFFERED);    if (false !== $unbuffered_result) {        $insert_query = 'INSERT INTO ' . PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]) . ' VALUES';        while ($one_row = PMA_DBI_fetch_row($unbuffered_result)) {            $insert_query .= '(';            $key_of_last_value = count($one_row) - 1;            foreach ($one_row as $key => $value) {                $insert_query .= "'" . PMA_sqlAddSlashes($value) . "'";                if ($key < $key_of_last_value) {                    $insert_query .= ",";                }            }            $insert_query .= '),';        }        $insert_query = substr($insert_query, 0, -1);        $insert_query .= ';';        if ($display == true) {            PMA_displayQuery($insert_query);        }        PMA_DBI_try_query($insert_query, $trg_link, 0);    }}/** * PMA_deleteFromTargetTable() delete rows from target table * * @param string $trg_db             name of target database * @param mixed  $trg_link           connection established with target server * @param array  $matching_tables    matching table names * @param int    $table_index        index of table in matching_table_array * @param array  $target_tables_keys primary key names of the target tables * @param array  $delete_array       key values of rows that are to be deleted * @param bool   $display */function PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index, $target_tables_keys, $delete_array, $display){    for ($i = 0; $i < sizeof($delete_array[$table_index]); $i++) {        if (isset($target_tables_keys[$table_index])) {            $delete_query = 'DELETE FROM ' . PMA_backquote($trg_db) . '.' .PMA_backquote($matching_tables[$table_index]) . ' WHERE ';            for ($y = 0; $y < sizeof($target_tables_keys[$table_index]); $y++) {                $delete_query .= PMA_backquote($target_tables_keys[$table_index][$y]) . " = '";                if (sizeof($target_tables_keys[$table_index]) == 1) {                    $delete_query .= $delete_array[$table_index][$i] . "'";                } elseif (sizeof($target_tables_keys[$table_index]) > 1) {                    $delete_query .= $delete_array[$table_index][$i][$target_tables_keys[$table_index][$y]] . "'";                }                if ($y < (sizeof($target_tables_keys[$table_index]) - 1)) {                    $delete_query .= ' AND ';                }                $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                            AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_index]."' AND REFERENCED_COLUMN_NAME = '"                           . $target_tables_keys[$table_index][$y] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";                $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);                $result_size = sizeof($pk_query_result);                if ($result_size > 0) {                    for ($b = 0; $b < $result_size; $b++) {                        $drop_pk_query = "DELETE FROM " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . " WHERE " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . " = " . $target_tables_keys[$table_index][$y] . ";";                        PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                    }                }            }        }        if ($display == true) {            echo '<p>' . $delete_query . '</p>';        }        PMA_DBI_try_query($delete_query, $trg_link, 0);    }}/** * PMA_structureDiffInTables() Gets all the column information for source and target table. * Compare columns on their names. * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column. * If column does not exist in target table then it is placed in  $add_column_array. * If column exists in target table but criteria is different then it is palced in $alter_str_array. * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns. * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys. * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys. * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source tables * @param array  &$target_columns        columns information of the target tables * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target *                                       column have some criteria different and third index containing the criteria which is different. * @param array  &$add_column_array      two dimensional associative array, first index of the array contain the matching table number and second index contain the *                                       column name which is to be added in the target table * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table */function PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_columns, &$target_columns, &$alter_str_array, &$add_column_array, &$uncommon_columns, $criteria, &$target_tables_keys, $matching_table_index){    //Gets column information for source and target table    $source_columns[$matching_table_index] = PMA_DBI_get_columns_full($src_db, $matching_tables[$matching_table_index], null, $src_link);    $target_columns[$matching_table_index] = PMA_DBI_get_columns_full($trg_db, $matching_tables[$matching_table_index], null, $trg_link);    foreach ($source_columns[$matching_table_index] as $column_name => $each_column) {        if (isset($target_columns[$matching_table_index][$column_name]['Field'])) {            //If column exists in target table then matches criteria like type, null, collation, key, default, comment of the column            for ($i = 0; $i < sizeof($criteria); $i++) {                if ($source_columns[$matching_table_index][$column_name][$criteria[$i]] != $target_columns[$matching_table_index][$column_name][$criteria[$i]]) {                    if (($criteria[$i] == 'Default') && ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == '' )) {                        $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = 'None';                    } else {                        if (! (($criteria[$i] == 'Key') && (($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')))                        ) {                            $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = $source_columns[$matching_table_index][$column_name][$criteria[$i]];                        }                    }                }            }        } else {            $add_column_array[$matching_table_index][$column_name]= $column_name;        }    }    //Finds column names that are present in target table but not in source table    foreach ($target_columns[$matching_table_index] as $fld_name => $each_column) {        if (! (isset($source_columns[$matching_table_index][$fld_name]['Field']))) {            $fields_uncommon[] = $fld_name;        }        if ($target_columns[$matching_table_index][$fld_name]['Key'] == 'PRI') {            $keys[] = $fld_name;        }    }    if (isset($fields_uncommon)) {        $uncommon_columns[$matching_table_index] = $fields_uncommon;    }    if (isset($keys)) {        $target_tables_keys[$matching_table_index] = $keys;    }}/** * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $matching_tables         names of matching tables * @param array  $source_columns          columns information of the source tables * @param array  &$add_column_array       the names of the column(field) that are to be added in the target * @param array  $matching_tables_fields * @param array  $criteria                criteria * @param array  $matching_tables_keys    field names which is key in the source table * @param array  $target_tables_keys      field names which is key in the target table * @param array  $uncommon_tables         table names that are present in source db and not in target db * @param array  &$uncommon_tables_fields names of the fields of the uncommon tables * @param int    $table_counter           number of the matching table * @param array  $uncommon_cols * @param bool   $display */function PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, &$add_column_array, $matching_tables_fields,         $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $table_counter, $uncommon_cols, $display){    for ($i = 0; $i < sizeof($matching_tables_fields[$table_counter]); $i++) {        if (isset($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]])) {            $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]). " ADD COLUMN " .            PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . " " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Type'];            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'NO') {                $query .= ' Not Null ';            } elseif ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'YES') {                $query .= ' Null ';            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'] != '') {                $query .= ' COLLATE ' . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'] != '') {                $query .= " DEFAULT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'] != '') {                $query .= " COMMENT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Key'] == 'PRI' ) {                $trg_key_size = sizeof($target_tables_keys[$table_counter]);                if ($trg_key_size) {                    $check = true;                    for ($a = 0; ($a < $trg_key_size) && ($check); $a++) {                        if (! (in_array($target_tables_keys[$table_counter], $uncommon_cols))) {                             $check = false;                        }                    }                    if (! $check) {                        $query .= " ,DROP PRIMARY KEY " ;                    }                }                $query .= " , ADD PRIMARY KEY (";                for ($t = 0; $t < sizeof($matching_tables_keys[$table_counter]); $t++) {                    $query .= PMA_backquote($matching_tables_keys[$table_counter][$t]);                    if ($t < (sizeof($matching_tables_keys[$table_counter]) - 1)) {                        $query .= " , " ;                    }                }                $query .= ")";            }            $query .= ";";            if ($display == true) {                echo '<p>' . $query . '</p>';            }            PMA_DBI_try_query($query, $trg_link, 0);            //Checks if column to be added is a foreign key or not            $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"            . $matching_tables[$table_counter] . "' AND COLUMN_NAME ='" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] .            "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);            //If column is a foreign key then it is checked that referenced table exist in target db. If referenced table does not exist in target db then            //it is created first.            if (isset($is_fk_result)) {                if (in_array($is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[0]['REFERENCED_TABLE_NAME']);                    PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables, $uncommon_tables_fields, $display);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }                $fk_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]) .                            "ADD CONSTRAINT FOREIGN KEY " . PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . "                            (" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] . ") REFERENCES " . PMA_backquote($trg_db) .                             '.' . PMA_backquote($is_fk_result[0]['REFERENCED_TABLE_NAME']) . " (" . $is_fk_result[0]['REFERENCED_COLUMN_NAME'] . ");";                PMA_DBI_try_query($fk_query, $trg_link, null);            }        }    }}/** * PMA_checkForeignKeys() checks if the referenced table have foreign keys. * uses    PMA_createTargetTables() * * @param string $src_db                  name of source database * @param mixed  $src_link                connection established with source server * @param string $trg_db                  name of target database * @param mixed  $trg_link                connection established with target server * @param string $referenced_table        table whose column is a foreign key in another table * @param array  &$uncommon_tables        names that are uncommon * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $referenced_table, &$uncommon_tables, &$uncommon_tables_fields, $display){    $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                    AND TABLE_NAME = '" . $referenced_table . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";    $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);    if (sizeof($is_fk_result) > 0) {        for ($j = 0; $j < sizeof($is_fk_result); $j++) {            if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                PMA_checkForeignKeys(                    $src_db, $src_link, $trg_db, $trg_link, $is_fk_result[$j]['REFERENCED_TABLE_NAME'],                    $uncommon_tables, $uncommon_tables_fields, $display                );                PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                unset($uncommon_tables[$table_index[0]]);            }        }    }}/** * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array * * @param string $trg_db                 name of target database * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source table * @param array  &$alter_str_array       column name and criteria which is to be altered for the targert table * @param array  $matching_tables_fields name of the fields for the matching table * @param array  $criteria               criteria * @param array  &$matching_tables_keys  field names which is key in the source table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table * @param bool   $display */function PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables, &$source_columns, &$alter_str_array, $matching_tables_fields, $criteria, &$matching_tables_keys, &$target_tables_keys, $matching_table_index, $display){    $check = true;    $sql_query = '';    $found = false;    //Checks if the criteria to be altered is primary key    for ($v = 0; $v < sizeof($matching_tables_fields[$matching_table_index]); $v++) {        if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'])) {            if ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'] == 'PRI' ) {                $check = false;            }        }    }    $pri_query = null;    if (! $check) {        $pri_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);        if (sizeof($target_tables_keys[$matching_table_index]) > 0) {            $pri_query .= "  DROP PRIMARY KEY ," ;        }        $pri_query .= "  ADD PRIMARY KEY (";        for ($z = 0; $z < sizeof($matching_tables_keys[$matching_table_index]); $z++) {            $pri_query .= PMA_backquote($matching_tables_keys[$matching_table_index][$z]);            if ($z < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $pri_query .= " , " ;            }        }        $pri_query .= ");";    }    if (isset($pri_query)) {        if ($display == true) {            echo '<p>' . $pri_query . '</p>';        }        PMA_DBI_try_query($pri_query, $trg_link, 0);    }    for ($t = 0; $t < sizeof($matching_tables_fields[$matching_table_index]); $t++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]])) && (sizeof($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]) > 0)) {            $sql_query = 'ALTER TABLE ' . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]) . ' MODIFY ' .            PMA_backquote($matching_tables_fields[$matching_table_index][$t]) . ' ' . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'];            $found = false;            for ($i = 0; $i < sizeof($criteria); $i++) {                if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]]) && $criteria[$i] != 'Key') {                    $found = true;                    if (($criteria[$i] == 'Type') && (! isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i+1]]))) {                        if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'NO') {                            $sql_query .= " Not Null" ;                        } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'YES') {                            $sql_query .= " Null" ;                        }                    }                    if (($criteria[$i] == 'Null') && ( $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'NO')) {                        $sql_query .= " Not Null "  ;                    } elseif (($criteria[$i] == 'Null') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'YES')) {                        $sql_query .= " Null "  ;                    }                    if ($criteria[$i] == 'Collation') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COLLATE " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] ;                    }                    if (($criteria[$i] == 'Default') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'None')) {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                    } elseif ($criteria[$i] == 'Default') {                        if (! (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        if (is_string($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] != 'timestamp') {                                $sql_query .=  " DEFAULT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'";                            } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] == 'timestamp') {                                $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                            }                        } elseif (is_numeric($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                        }                    }                    if ($criteria[$i] == 'Comment') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COMMENT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'" ;                    }                }            }        }        $sql_query .= ";";        if ($found) {            if ($display == true) {                echo '<p>' . $sql_query . '</p>';            }            PMA_DBI_try_query($sql_query, $trg_link, 0);        }    }    $check = false;    $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);    for ($p = 0; $p < sizeof($matching_tables_keys[$matching_table_index]); $p++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_keys[$matching_table_index][$p]]['Key']))) {            $check = true;            $query .= ' MODIFY ' . PMA_backquote($matching_tables_keys[$matching_table_index][$p]) . ' '            . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$p]]['Type'] . ' Not Null ';            if ($p < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $query .= ', ';            }        }    }    $query .= ';';    if ($check) {        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }}/** * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table. * * @param string $trg_db           name of target database * @param mixed  $trg_link         connection established with target server * @param array  $matching_tables  names of matching tables * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table * @param int    $table_counter    index of the matching table as in $matchiing_tables array * @param bool   $display */function PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_counter, $display){    if (isset($uncommon_columns[$table_counter])) {        $drop_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($uncommon_columns[$table_counter]); $a++) {            //Checks if column to be removed is a foreign key in any table            $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                         AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_counter]."' AND REFERENCED_COLUMN_NAME = '"                         . $uncommon_columns[$table_counter][$a] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);            $result_size = sizeof($pk_query_result);            if ($result_size > 0) {                for ($b = 0; $b < $result_size; $b++) {                    $drop_pk_query = "ALTER TABLE " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . "                                      DROP FOREIGN KEY " . PMA_backquote($pk_query_result[$b]['CONSTRAINT_NAME']) . ", DROP COLUMN " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . ";";                    PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                }            }            $query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"                     . $matching_tables[$table_counter]. "' AND COLUMN_NAME = '" . $uncommon_columns[$table_counter][$a] . "'                      AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $result = PMA_DBI_fetch_result($query, null, null, $trg_link);            if (sizeof($result) > 0) {                $drop_query .= " DROP FOREIGN KEY " . PMA_backquote($result[0]['CONSTRAINT_NAME']) . ",";            }            $drop_query .=  " DROP COLUMN " . PMA_backquote($uncommon_columns[$table_counter][$a]);            if ($a < (sizeof($uncommon_columns[$table_counter]) - 1)) {                $drop_query .= " , " ;            }        }        $drop_query .= ";" ;        if ($display == true) {            echo '<p>' . $drop_query . '</p>';        }        PMA_DBI_try_query($drop_query, $trg_link, 0);    }}/** * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array. * Only keyname and uniqueness characteristic of the indexes are altered. * * @param string $src_db                name of source database * @param string $trg_db                name of target database * @param mixed  $src_link              connection established with source server * @param mixed  $trg_link              connection established with target server * @param array  $matching_tables       matching tables name * @param array  &$source_indexes       indexes of the source table * @param array  &$target_indexes       indexes of the target table * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table * @param array  &$alter_indexes_array  key name which needs to be altered * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table * @param int    $table_counter         number of the matching table */function PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$remove_indexes_array, $table_counter){    //Gets indexes information for source and target table    $source_indexes[$table_counter] = PMA_DBI_get_table_indexes($src_db, $matching_tables[$table_counter], $src_link);    $target_indexes[$table_counter] = PMA_DBI_get_table_indexes($trg_db, $matching_tables[$table_counter], $trg_link);    for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {        $found = false;        $z = 0;        //Compares key name and non_unique characteristic of source indexes with target indexes        /*         * @todo compare the length of each sub part         */        while (($z <= sizeof($target_indexes[$table_counter])) && ($found == false)) {            if (isset($source_indexes[$table_counter][$a]) && isset($target_indexes[$table_counter][$z]) && $source_indexes[$table_counter][$a]['Key_name'] == $target_indexes[$table_counter][$z]['Key_name']) {                $found = true;                if (($source_indexes[$table_counter][$a]['Column_name'] != $target_indexes[$table_counter][$z]['Column_name']) || ($source_indexes[$table_counter][$a]['Non_unique'] != $target_indexes[$table_counter][$z]['Non_unique'])) {                    if (! (($source_indexes[$table_counter][$a]['Key_name'] == "PRIMARY") || ($target_indexes[$table_counter][$z]['Key_name'] == 'PRIMARY'))) {                        $alter_indexes_array[$table_counter][] = $source_indexes[$table_counter][$a]['Key_name'];                    }                }            }            $z++;        }        if ($found === false) {            if (! ($source_indexes[$table_counter][$a]['Key_name'] == 'PRIMARY')) {                $add_indexes_array [$table_counter][] = $source_indexes[$table_counter][$a]['Column_name'];            }        }    }    //Finds indexes that exist on target table but not on source table    for ($b = 0; $b < sizeof($target_indexes[$table_counter]); $b++) {        $found = false;        $c = 0;        while (($c <= sizeof($source_indexes[$table_counter])) && ($found == false)) {            if ($target_indexes[$table_counter][$b]['Column_name'] == $source_indexes[$table_counter][$c]['Column_name']) {                $found = true;            }            $c++;        }        if ($found === false) {            $remove_indexes_array[$table_counter][] = $target_indexes[$table_counter][$b]['Key_name'];        }    }}/** * PMA_applyIndexesDiff() create indexes, alters indexes and remove indexes. * * @param string $trg_db               name of target database * @param mixed  $trg_link             connection established with target server * @param array  $matching_tables      matching tables name * @param array  $source_indexes       indexes of the source table * @param array  $target_indexes       indexes of the target table * @param array  $add_indexes_array    column names on which indexes are to be created in target table * @param array  $alter_indexes_array  column names for which indexes are to be altered * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table * @param int    $table_counter        number of the matching table * @param $display */function PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array, $alter_indexes_array,          $remove_indexes_array, $table_counter, $display){    //Adds indexes on target table    if (isset($add_indexes_array[$table_counter])) {        $sql = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]) . " ADD" ;        for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {            if (isset($add_indexes_array[$table_counter][$a])) {                for ($b = 0; $b < sizeof($source_indexes[$table_counter]); $b++) {                    if ($source_indexes[$table_counter][$b]['Column_name'] == $add_indexes_array[$table_counter][$a]) {                        if ($source_indexes[$table_counter][$b]['Non_unique'] == '0') {                            $sql .= " UNIQUE ";                        }                        $sql .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$b]['Key_name']) . " (" . $add_indexes_array[$table_counter][$a] . " );";                        if ($display == true) {                            echo '<p>' . $sql . '</p>';                        }                        PMA_DBI_try_query($sql, $trg_link, 0);                    }                }            }        }    }    //Alter indexes of target table    if (isset($alter_indexes_array[$table_counter])) {        $query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($alter_indexes_array[$table_counter]); $a++) {            if (isset($alter_indexes_array[$table_counter][$a])) {                $query .= ' DROP INDEX ' . PMA_backquote($alter_indexes_array[$table_counter][$a]) . " , ADD ";                $got_first_index_column = false;                for ($z = 0; $z < sizeof($source_indexes[$table_counter]); $z++) {                    if ($source_indexes[$table_counter][$z]['Key_name'] == $alter_indexes_array[$table_counter][$a]) {                        if (! $got_first_index_column) {                            if ($source_indexes[$table_counter][$z]['Non_unique'] == '0') {                                $query .= " UNIQUE ";                            }                            $query .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$z]['Key_name']) . " (" . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                            $got_first_index_column = true;                        } else {                            // another column for this index                            $query .= ', ' . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                        }                    }                }                $query .= " )";            }        }        $query .= ';';        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }    //Removes indexes from target table    if (isset($remove_indexes_array[$table_counter])) {        $drop_index_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($target_indexes[$table_counter]); $a++) {            if (isset($remove_indexes_array[$table_counter][$a])) {                $drop_index_query .= " DROP INDEX " . PMA_backquote($remove_indexes_array[$table_counter][$a]);            }            if ($a < (sizeof($remove_indexes_array[$table_counter]) - 1)) {                $drop_index_query .= " , " ;            }        }        $drop_index_query .= " ; " ;        if ($display == true) {            echo '<p>' . $drop_index_query . '</p>';        }        PMA_DBI_try_query($drop_index_query, $trg_link, 0);    }}/** * PMA_displayQuery() displays a query, taking the maximum display size * into account * * @param string $query the query to display * * @return nothing */function PMA_displayQuery($query){    if (strlen($query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        $query = substr($query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';    }    echo '<p>' . htmlspecialchars($query) . '</p>';}/** * PMA_syncDisplayHeaderCompare() shows the header for source database * * @param string $src_db source db name * @param string $trg_db target db name * * @return nothing */function PMA_syncDisplayHeaderCompare($src_db, $trg_db){    echo '<fieldset style="padding:0"><div style="padding:1.5em; overflow:auto; height:220px">';    echo '<table class="data">';    echo '<tr>';    echo '<th>' . __('Source database') . ':  ' . htmlspecialchars($src_db) . '<br />(';    if ('cur' == $_SESSION['src_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['src_server']['host']);    }    echo ')</th>';    echo '<th>' . __('Difference') . '</th>';    echo '<th>' . __('Target database') . ':  '. htmlspecialchars($trg_db) . '<br />(';    if ('cur' == $_SESSION['trg_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['trg_server']['host']);    }    echo ')</th>';    echo '</tr>';}/** * Prints table row * * $rows contains following keys: * - src_table_name - source server table name * - dst_table_name - target server table name * - btn_type - 'M' or 'U' * - btn_structure - null or arguments for showDetails in server_synchronize.js (without img_obj and table_name): *                       i, update_size, insert_size, remove_size, insert_index, remove_index * * @param array $rows */function PMA_syncDisplayDataCompare($rows){    global $pmaThemeImage;    $odd_row = true;    foreach ($rows as $row) {        echo '<tr class=" ' . ($odd_row ? 'odd' : 'even') . '">';        echo '<td>' . htmlspecialchars($row['src_table_name']) . '</td><td style="text-align:center">';        if (isset($row['btn_structure']) && $row['btn_structure']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_structure'];            $p[0] = $row['btn_type'] . 'S' . $p[0];            echo '<img class="icon struct_img" src="' . $pmaThemeImage . 'new_struct.png" width="16" height="16"                 alt="Structure" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                 . "'" . implode($p, "','") . "'"                 . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" /> ';        }        if (isset($row['btn_data']) && $row['btn_data']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_data'];            $p[0] = $row['btn_type'] . 'D' . $p[0];            echo '<img class="icon data_img" src="' . $pmaThemeImage . 'new_data.png" width="16" height="16"                alt="Data" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                . "'" . implode($p, "','") . "'"                . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" />';        }        echo '</td><td>' . htmlspecialchars($row['dst_table_name']) . '</td></tr>';        $odd_row = !$odd_row;    }}/** * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null) * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of the column to retrieve data from * @param mixed  $link     mysql link resource * * @return array $field_values */function PMA_get_column_values($database, $table, $column, $link = null){    $query = 'SELECT ';    for ($i=0; $i< sizeof($column); $i++) {        $query.= PMA_backquote($column[$i]);        if ($i < (sizeof($column)-1)) {            $query.= ', ';        }    }    $query.= ' FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    $field_values = PMA_DBI_fetch_result($query, null, null, $link);    if (! is_array($field_values) || count($field_values) < 1) {        return false;    }    return $field_values;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin */require_once './db_triggers.php';?>
<?php/** * ESRI Shape file import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage ESRI_Shape */if (! defined('PHPMYADMIN')) {    exit;}// Drizzle does not suppost GIS data typesif (PMA_DRIZZLE) {    return;}if (isset($plugin_list)) {    $plugin_list['shp'] = array(        'text' => __('ESRI Shape File'),        'extension' => 'shp',        'options' => array(),        'options_text' => __('Options'),    );} else {    if ((int) ini_get('memory_limit') < 512) {        @ini_set('memory_limit', '512M');    }    @set_time_limit(300);    // Append the bfShapeFiles directory to the include path variable    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');    include_once './libraries/bfShapeFiles/ShapeFile.lib.php';    $GLOBALS['finished'] = false;    $buffer = '';    $eof = false;    // Returns specified number of bytes from the buffer.    // Buffer automatically fetches next chunk of data when the buffer falls short.    // Sets $eof when $GLOBALS['finished'] is set and the buffer falls short.    function readFromBuffer($length){        global $buffer, $eof;        if (strlen($buffer) < $length) {            if ($GLOBALS['finished']) {                $eof = true;            } else {                $buffer .= PMA_importGetNextChunk();            }        }        $result = substr($buffer, 0, $length);        $buffer = substr($buffer, $length);        return $result;    }    /**     * This class extends ShapeFile class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeFile extends ShapeFile    {        function _isDbaseLoaded()        {            return extension_loaded('dbase');        }        function loadFromFile($FileName)        {            $this->_loadHeaders();            $this->_loadRecords();            if ($this->_isDbaseLoaded()) {                $this->_closeDBFFile();            }        }        function _loadHeaders()        {            readFromBuffer(24);            $this->fileLength = loadData("N", readFromBuffer(4));            readFromBuffer(4);            $this->shapeType = loadData("V", readFromBuffer(4));            $this->boundingBox = array();            $this->boundingBox["xmin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["xmax"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymax"] = loadData("d", readFromBuffer(8));            if ($this->_isDbaseLoaded() && $this->_openDBFFile()) {                $this->DBFHeader = $this->_loadDBFHeader();            }        }        function _loadRecords()        {            global $eof;            readFromBuffer(32);            while (true) {                $record = new PMA_ShapeRecord(-1);                $record->loadFromFile($this->SHPFile, $this->DBFFile);                if ($record->lastError != "") {                    return false;                }                if ($eof) {                    break;                }                $this->records[] = $record;            }        }    }    /**     * This class extends ShapeRecord class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeRecord extends ShapeRecord    {        function loadFromFile(&$SHPFile, &$DBFFile)        {            $this->DBFFile = $DBFFile;            $this->_loadHeaders();            switch ($this->shapeType) {            case 0:                $this->_loadNullRecord();                break;            case 1:                $this->_loadPointRecord();                break;            case 3:                $this->_loadPolyLineRecord();                break;            case 5:                $this->_loadPolygonRecord();                break;            case 8:                $this->_loadMultiPointRecord();                break;            default:                $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));                break;            }            if (extension_loaded('dbase') && isset($this->DBFFile)) {                $this->_loadDBFData();            }        }        function _loadHeaders()        {            $this->recordNumber = loadData("N", readFromBuffer(4));            //We read the length of the record            $tmp = loadData("N", readFromBuffer(4));            $this->shapeType = loadData("V", readFromBuffer(4));        }        function _loadPoint()        {            $data = array();            $data["x"] = loadData("d", readFromBuffer(8));            $data["y"] = loadData("d", readFromBuffer(8));            return $data;        }        function _loadMultiPointRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {                $this->SHPData["points"][] = $this->_loadPoint();            }        }        function _loadPolyLineRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numparts"]  = loadData("V", readFromBuffer(4));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {                $this->SHPData["parts"][$i] = loadData("V", readFromBuffer(4));            }            $readPoints = 0;            reset($this->SHPData["parts"]);            while (list($partIndex, $partData) = each($this->SHPData["parts"])) {                if (! isset($this->SHPData["parts"][$partIndex]["points"])                    || !is_array($this->SHPData["parts"][$partIndex]["points"])                ) {                    $this->SHPData["parts"][$partIndex] = array();                    $this->SHPData["parts"][$partIndex]["points"] = array();                }                while (! in_array($readPoints, $this->SHPData["parts"])                && ($readPoints < ($this->SHPData["numpoints"]))                ) {                    $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();                    $readPoints++;                }            }        }    }    $shp = new PMA_ShapeFile(1);    // If the zip archive has more than one file,    // get the correct content to the buffer from .shp file.    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');        $GLOBALS['import_text'] = $zip_content['data'];    }    $temp_dbf_file = false;    // We need dbase extension to handle .dbf file    if (extension_loaded('dbase')) {        // If we can extract the zip archive to 'TempDir'        // and use the files in it for import        if ($compression == 'application/zip'            && ! empty($cfg['TempDir'])            && is_writable($cfg['TempDir'])        ) {            $dbf_file_name = PMA_findFileFromZipArchive('/^.*\.dbf$/i', $import_file);            // If the corresponding .dbf file is in the zip archive            if ($dbf_file_name) {                // Extract the .dbf file and point to it.                $extracted =  PMA_zipExtract(                    $import_file,                    realpath($cfg['TempDir']),                    array($dbf_file_name)                );                if ($extracted) {                    $dbf_file_path = realpath($cfg['TempDir'])                        . (PMA_IS_WINDOWS ? '\\' : '/') . $dbf_file_name;                    $temp_dbf_file = true;                    // Replace the .dbf with .*, as required by the bsShapeFiles library.                    $file_name = substr($dbf_file_path, 0, strlen($dbf_file_path) - 4) . '.*';                    $shp->FileName = $file_name;                }            }        }        // If file is in UploadDir, use .dbf file in the same UploadDir        // to load extra data.        elseif (! empty($local_import_file)            && ! empty($cfg['UploadDir'])            && $compression == 'none'        ) {            // Replace the .shp with .*,            // so the bsShapeFiles library correctly locates .dbf file.            $file_name = substr($import_file, 0, strlen($import_file) - 4) . '.*';            $shp->FileName = $file_name;        }    }    // Load data    $shp->loadFromFile('');    if ($shp->lastError != "") {        $error = true;        $message = PMA_Message::error(__('There was an error importing the ESRI shape file: "%s".'));        $message->addParam($shp->lastError);        return;    }    // Delete the .dbf file extracted to 'TempDir'    if ($temp_dbf_file) {        unlink($dbf_file_path);    }    $esri_types = array(        0  => 'Null Shape',        1  => 'Point',        3  => 'PolyLine',        5  => 'Polygon',        8  => 'MultiPoint',        11 => 'PointZ',        13 => 'PolyLineZ',        15 => 'PolygonZ',        18 => 'MultiPointZ',        21 => 'PointM',        23 => 'PolyLineM',        25 => 'PolygonM',        28 => 'MultiPointM',        31 => 'MultiPatch',    );    include_once './libraries/gis/pma_gis_geometry.php';    switch ($shp->shapeType) {    // ESRI Null Shape    case 0:        $gis_obj = null;        break;    // ESRI Point    case 1:        include_once './libraries/gis/pma_gis_point.php';        $gis_obj = PMA_GIS_Point::singleton();        break;    // ESRI PolyLine    case 3:        include_once './libraries/gis/pma_gis_multilinestring.php';        $gis_obj = PMA_GIS_Multilinestring::singleton();        break;    // ESRI Polygon    case 5:        include_once './libraries/gis/pma_gis_multipolygon.php';        $gis_obj = PMA_GIS_Multipolygon::singleton();        break;    // ESRI MultiPoint    case 8:        include_once './libraries/gis/pma_gis_multipoint.php';        $gis_obj = PMA_GIS_Multipoint::singleton();        break;    default:        $error = true;        if (! isset($esri_types[$shp->shapeType])) {            $message = PMA_Message::error(__('You tried to import an invalid file or the imported file contains invalid data'));        } else {            $message = PMA_Message::error(__('MySQL Spatial Extension does not support ESRI type "%s".'));            $message->addParam($param);        }        return;    }    $num_rows = count($shp->records);    // If .dbf file is loaded, the number of extra data columns    $num_data_cols = isset($shp->DBFHeader) ? count($shp->DBFHeader) : 0;    $rows = array();    $col_names = array();    if ($num_rows != 0) {        foreach ($shp->records as $record) {            $tempRow = array();            if ($gis_obj == null) {                $tempRow[] = null;            } else {                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";            }            if (isset($shp->DBFHeader)) {                foreach ($shp->DBFHeader as $c) {                    $cell = trim($record->DBFData[$c[0]]);                    if (! strcmp($cell, '')) {                        $cell = 'NULL';                    }                    $tempRow[] = $cell;                }            }            $rows[] = $tempRow;        }    }    if (count($rows) == 0) {        $error = true;        $message = PMA_Message::error(__('The imported file does not contain any data'));        return;    }    // Column names for spatial column and the rest of the columns,    // if they are available    $col_names[] = 'SPATIAL';    for ($n = 0; $n < $num_data_cols; $n++) {        $col_names[] = $shp->DBFHeader[$n][0];    }    // Set table name based on the number of tables    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $table_name = 'TABLE '.(count($result) + 1);    } else {        $table_name = 'TBL_NAME';    }    $tables = array(array($table_name, $col_names, $rows));    // Use data from shape file to chose best-fit MySQL types for each column    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    $table_no = 0; $spatial_col = 0;    $analyses[$table_no][TYPES][$spatial_col] = GEOMETRY;    $analyses[$table_no][FORMATTEDSQL][$spatial_col] = true;    // Set database name to the currently selected one, if applicable    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'SHP_DB';        $options = null;    }    // Created and execute necessary SQL statements from data    $null_param = null;    PMA_buildSQL($db_name, $tables, $analyses, $null_param, $options);    unset($tables);    unset($analyses);    $finished = true;    $error = false;    // Commit any possible data in buffers    PMA_importRunQuery();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/display_import_ajax.lib.php';// AJAX requests can't be cached!PMA_no_cache_header();// $GLOBALS["message"] is used for asking for an import messageif (isset($GLOBALS["message"]) && $GLOBALS["message"]) {    header('Content-type: text/html');    // wait 0.3 sec before we check for $_SESSION variable, which is set inside import.php    usleep(300000);    // wait until message is available    while ($_SESSION['Import_message']['message'] == null) {        usleep(250000); // 0.25 sec    }    echo $_SESSION['Import_message']['message'];    echo '<fieldset class="tblFooters">' . "\n";    echo '    [ <a href="' . $_SESSION['Import_message']['go_back_url'] . '">' . __('Back') . '</a> ]' . "\n";    echo '</fieldset>'."\n";} else {    PMA_importAjaxStatus($GLOBALS["id"]);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form templates * * @package PhpMyAdmin *//** * Displays top part of the form * * @param string $action         default: $_SERVER['REQUEST_URI'] * @param string $method         'post' or 'get' * @param array  $hidden_fields  array of form hidden fields (key: field name) */function display_form_top($action = null, $method = 'post', $hidden_fields = null){    static $has_check_page_refresh = false;    if ($action === null) {        $action = $_SERVER['REQUEST_URI'];    }    if ($method != 'post') {        $method = 'get';    }?><form method="<?php echo $method ?>" action="<?php echo htmlspecialchars($action) ?>" class="config-form"><input type="hidden" name="tab_hash" value="" /><?php    // we do validation on page refresh when browser remembers field values,    // add a field with known value which will be used for checks    if (!$has_check_page_refresh) {        $has_check_page_refresh = true;        echo '<input type="hidden" name="check_page_refresh" id="check_page_refresh"'            . ' value="" />' . "\n";    }    echo PMA_generate_common_hidden_inputs('', '', 0, 'server') . "\n";    echo PMA_getHiddenFields((array)$hidden_fields);}/** * Displays form tabs which are given by an array indexed by fieldset id * ({@link display_fieldset_top}), with values being tab titles. * * @param array $tabs */function display_tabs_top($tabs){?><ul class="tabs"><?php foreach ($tabs as $tab_id => $tab_name): ?>    <li><a href="#<?php echo $tab_id ?>"><?php echo htmlspecialchars($tab_name); ?></a></li><?php endforeach; ?></ul><br clear="right" /><div class="tabs_contents"><?php}/** * Displays top part of a fieldset * * @param string $title * @param string $description * @param array  $errors * @param array  $attributes */function display_fieldset_top($title = '', $description = '', $errors = null, $attributes = array()){    global $_FormDisplayGroup;    $_FormDisplayGroup = 0;    $attributes = array_merge(array('class' => 'optbox'), $attributes);    foreach ($attributes as $k => &$attr) {        $attr = $k . '="' . htmlspecialchars($attr) . '"';    }    echo '<fieldset ' . implode(' ', $attributes) . '>';    echo '<legend>' . $title . '</legend>';    if (!empty($description)) {        echo '<p>' . $description . '</p>';    }    // this must match with displayErrors() in scripts.js    if (is_array($errors) && count($errors) > 0) {        echo '<dl class="errors">';        foreach ($errors as $error) {            echo '<dd>' . $error . '</dd>';        }        echo '</dl>';    }?><table width="100%" cellspacing="0"><?php}/** * Displays input field * * $opts keys: * o doc - (string) documentation link * o errors - error array * o setvalue - (string) shows button allowing to set poredefined value * o show_restore_default - (boolean) whether show "restore default" button * o userprefs_allow - whether user preferences are enabled for this field (null - no support, *                     true/false - enabled/disabled) * o userprefs_comment - (string) field comment * o values - key - value paris for <select> fields * o values_escaped - (boolean) tells whether values array is already escaped (defaults to false) * o values_disabled -  (array)list of disabled values (keys from values) * o comment - (string) tooltip comment * o comment_warning - (bool) whether this comments warns about something * o wiki - (string) wiki link * * @param string $path * @param string $name * @param string $description * @param string $type * @param mixed  $value * @param bool   $value_is_default * @param array  $opts */function display_input($path, $name, $description = '', $type, $value, $value_is_default = true, $opts = null){    global $_FormDisplayGroup;    static $base_dir; // Relative path to the root phpMyAdmin folder    static $icons;    // An array of IMG tags used further below in the function    $is_setup_script = defined('PMA_SETUP');    if ($base_dir === null) { // if the static variables have not been initialised        $base_dir = $is_setup_script ? '../' : '';        $icons = array();        // Icon definitions:        // The same indexes will be used in the $icons array.        // The first element contains the filename and the second        // element is used for the "alt" and "title" attributes.        $icon_init = array(            'edit'   => array('b_edit.png',   ''),            'help'   => array('b_help.png',   __('Documentation')),            'info'   => array('b_info.png',   __('Wiki')),            'reload' => array('s_reload.png', ''),            'tblops' => array('b_tblops.png', '')        );        if ($is_setup_script) {            // When called from the setup script, we don't have access to the            // sprite-aware PMA_getImage() function because the PMA_theme class            // has not been loaded, so we generate the img tags manually.            foreach ($icon_init as $k => $v) {                $title = '';                if (! empty($v[1])) {                    $title = ' title="' . $v[1] . '"';                }                $icons[$k] = sprintf(                    '<img alt="%s" src="%s"%s />',                    $v[1],                    ".{$GLOBALS['cfg']['ThemePath']}/original/img/{$v[0]}",                    $title                );            }        } else {            // In this case we just use PMA_getImage() because it's available            foreach ($icon_init as $k => $v) {                $icons[$k] = PMA_getImage($v[0], $v[1]);            }        }    }    $has_errors = isset($opts['errors']) && !empty($opts['errors']);    $option_is_disabled = !$is_setup_script && isset($opts['userprefs_allow']) && !$opts['userprefs_allow'];    $name_id = 'name="' . htmlspecialchars($path) . '" id="' . htmlspecialchars($path) . '"';    $field_class = $type == 'checkbox' ? 'checkbox' : '';    if (!$value_is_default) {        $field_class .= ($field_class == '' ? '' : ' ') . ($has_errors ? 'custom field-error' : 'custom');    }    $field_class = $field_class ? ' class="' . $field_class . '"' : '';    $tr_class = $_FormDisplayGroup > 0        ? 'group-field group-field-' . $_FormDisplayGroup        : '';    if (isset($opts['setvalue']) && $opts['setvalue'] == ':group') {        unset($opts['setvalue']);        $_FormDisplayGroup++;        $tr_class = 'group-header-field group-header-' . $_FormDisplayGroup;    }    if ($option_is_disabled) {        $tr_class .= ($tr_class ? ' ' : '') . 'disabled-field';    }    $tr_class = $tr_class ? ' class="' . $tr_class . '"' : '';?><tr<?php echo $tr_class ?>>    <th>        <label for="<?php echo htmlspecialchars($path) ?>"><?php echo $name ?></label>        <?php if (!empty($opts['doc']) || !empty($opts['wiki'])) { ?>        <span class="doc">            <?php if (!empty($opts['doc'])) { ?><a href="<?php echo $base_dir . $opts['doc']  ?>" target="documentation"><?php echo $icons['help']; ?></a><?php } ?>            <?php if (!empty($opts['wiki'])){ ?><a href="<?php echo $opts['wiki'] ?>" target="wiki"><?php echo $icons['info']; ?></a><?php } ?>        </span>        <?php } ?>        <?php if ($option_is_disabled) { ?>            <span class="disabled-notice" title="<?php echo __('This setting is disabled, it will not be applied to your configuration') ?>"><?php echo __('Disabled') ?></span>        <?php } ?>        <?php if (!empty($description)) { ?><small><?php echo $description ?></small><?php } ?>    </th>    <td>    <?php    switch ($type) {        case 'text':            echo '<input type="text" size="60" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'short_text':            echo '<input type="text" size="25" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'number_text':            echo '<input type="text" size="15" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'checkbox':            echo '<span' . $field_class . '><input type="checkbox" ' . $name_id              . ($value ? ' checked="checked"' : '') . ' /></span>';          break;        case 'select':            echo '<select ' . $name_id . $field_class . '>';            $escape = !(isset($opts['values_escaped']) && $opts['values_escaped']);            $values_disabled = isset($opts['values_disabled'])                ? array_flip($opts['values_disabled']) : array();            foreach ($opts['values'] as $opt_value_key => $opt_value) {                // set names for boolean values                if (is_bool($opt_value)) {                    $opt_value = strtolower($opt_value ? __('Yes') : __('No'));                }                // escape if necessary                if ($escape) {                    $display = htmlspecialchars($opt_value);                    $display_value = htmlspecialchars($opt_value_key);                } else {                    $display = $opt_value;                    $display_value = $opt_value_key;                }                // compare with selected value                // boolean values are cast to integers when used as array keys                $selected = is_bool($value)                    ? (int) $value === $opt_value_key                    : $opt_value_key === $value;                echo '<option value="' . $display_value . '"'                    . ($selected ? ' selected="selected"' : '')                    . (isset($values_disabled[$opt_value_key]) ? ' disabled="disabled"' : '')                    . '>' . $display . '</option>';            }            echo '</select>';            break;        case 'list':            echo '<textarea cols="40" rows="5" ' . $name_id . $field_class . '>'                . htmlspecialchars(implode("\n", $value))                . '</textarea>';            break;    }    if (isset($opts['comment']) && $opts['comment']) {        $class = 'field-comment-mark';        if (isset($opts['comment_warning']) && $opts['comment_warning']) {            $class .= ' field-comment-warning';        }        ?>        <span class="<?php echo $class ?>" title="<?php echo htmlspecialchars($opts['comment']) ?>">i</span>        <?php    }    if ($is_setup_script && isset($opts['userprefs_comment']) && $opts['userprefs_comment']) {        ?>        <a class="userprefs-comment" title="<?php echo htmlspecialchars($opts['userprefs_comment']) ?>"><?php echo $icons['tblops']; ?></a>        <?php    }    if (isset($opts['setvalue']) && $opts['setvalue']) {        ?>        <a class="set-value" href="#<?php echo htmlspecialchars("$path={$opts['setvalue']}") ?>" title="<?php echo sprintf(__('Set value: %s'), htmlspecialchars($opts['setvalue'])) ?>" style="display:none"><?php echo $icons['edit']; ?></a>        <?php    }    if (isset($opts['show_restore_default']) && $opts['show_restore_default']) {        ?>        <a class="restore-default" href="#<?php echo $path ?>" title="<?php echo __('Restore default value') ?>" style="display:none"><?php echo $icons['reload']; ?></a>        <?php    }    // this must match with displayErrors() in scripts/config.js    if ($has_errors) {        echo "\n        <dl class=\"inline_errors\">";        foreach ($opts['errors'] as $error) {            echo '<dd>' . htmlspecialchars($error) . '</dd>';        }        echo '</dl>';    }    ?>    </td>    <?php    if ($is_setup_script && isset($opts['userprefs_allow'])) {    ?>    <td class="userprefs-allow" title="<?php echo __('Allow users to customize this value') ?>">        <input type="checkbox" name="<?php echo $path ?>-userprefs-allow" <?php if ($opts['userprefs_allow']) echo 'checked="checked"' ?> />    </td>    <?php    } else if ($is_setup_script) {        echo '<td>&nbsp;</td>';    }    ?></tr><?php}/** * Display group header * * @param string $header_text */function display_group_header($header_text){    global $_FormDisplayGroup;    $_FormDisplayGroup++;    if (!$header_text) {        return;    }    $colspan = defined('PMA_SETUP')        ? 3        : 2;?><tr class="group-header group-header-<?php echo $_FormDisplayGroup ?>">    <th colspan="<?php echo $colspan ?>">        <?php echo $header_text ?>    </th></tr><?php}/** * Display group footer * */function display_group_footer(){    global $_FormDisplayGroup;    $_FormDisplayGroup--;}/** * Displays bottom part of a fieldset */function display_fieldset_bottom(){    $colspan = 2;    if (defined('PMA_SETUP')) {        $colspan++;    }?><tr>    <td colspan="<?php echo $colspan ?>" class="lastrow">        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>" class="green" />        <input type="button" name="submit_reset" value="<?php echo __('Reset') ?>" />    </td></tr></table></fieldset><?php}/** * Displays simple bottom part of a fieldset (without submit buttons) */function display_fieldset_bottom_simple(){?></table></fieldset><?php}/** * Closes form tabs */function display_tabs_bottom(){    echo "</div>\n";}/** * Displays bottom part of the form */function display_form_bottom(){    echo "</form>\n";}/** * Appends JS validation code to $js_array * * @param string       $field_id * @param string|array $validator * @param array        $js_array */function js_validate($field_id, $validators, &$js_array){    foreach ((array)$validators as $validator) {        $validator = (array)$validator;        $v_name = array_shift($validator);        $v_args = array();        foreach ($validator as $arg) {            $v_args[] = PMA_escapeJsString($arg);        }        $v_args = $v_args ? ", ['" . implode("', '", $v_args) . "']" : '';        $js_array[] = "validateField('$field_id', '$v_name', true$v_args)";    }}/** * Displays JavaScript code * * @param array $js_array */function display_js($js_array){    if (empty($js_array)) {        return;    }?><script type="text/javascript"><?php echo implode(";\n", $js_array) . ";\n" ?></script><?php}/** * Displays error list * * @param string $name * @param array  $error_list */function display_errors($name, $error_list){    echo '<dl>';    echo '<dt>' . htmlspecialchars($name) . '</dt>';    foreach ($error_list as $error) {        echo '<dd>' . htmlspecialchars($error) . '</dd>';    }    echo '</dl>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MEMORY (HEAP) storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_memory extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'max_heap_table_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * TCPDF wrapper class. */require_once './libraries/tcpdf/tcpdf.php';/** * PDF font to use. */define('PMA_PDF_FONT', 'DejaVuSans');/** * PDF export base class providing basic configuration. */class PMA_PDF extends TCPDF{    var $footerset;    var $Alias = array();    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false)    {        parent::__construct();        $this->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $this->AliasNbPages();        $this->AddFont('DejaVuSans', '', 'dejavusans.php');        $this->AddFont('DejaVuSans', 'B', 'dejavusansb.php');        $this->SetFont(PMA_PDF_FONT, '', 14);        $this->setFooterFont(array(PMA_PDF_FONT, '', 14));    }    /**     * This function must be named "Footer" to work with the TCPDF library     */    function Footer()    {        // Check if footer for this page already exists        if (!isset($this->footerset[$this->page])) {            $this->SetY(-15);            $this->SetFont(PMA_PDF_FONT, '', 14);            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');            $this->Cell(0, 6, PMA_localisedDate(), 0, 1, 'R');            $this->SetY(20);            // set footerset            $this->footerset[$this->page] = 1;        }    }    /**     * Function to set alias which will be expanded on page rendering.     */    function SetAlias($name, $value)    {        $this->Alias[$this->UTF8ToUTF16BE($name)] = $this->UTF8ToUTF16BE($value);    }    /**     * Improved with alias expading.     */    function _putpages()    {        if (count($this->Alias) > 0) {            $nb = count($this->pages);            for ($n = 1;$n <= $nb;$n++) {                $this->pages[$n] = strtr($this->pages[$n], $this->Alias);            }        }        parent::_putpages();    }    /**     * Displays an error message     *     * @param string $error_message the error mesage     */    function Error($error_message = '')    {        include './libraries/header.inc.php';        PMA_Message::error(__('Error while creating PDF:') . ' ' . $error_message)->display();        include './libraries/footer.inc.php';    }    /**     * Sends file as a download to user.     */    function Download($filename)    {        $pdfData = $this->getPDFData();        PMA_download_header($filename, 'application/pdf', strlen($pdfData));        echo $pdfData;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/** * Functions used to generate GIS visualizations. * * @package PhpMyAdmin *//** * Returns a modified sql query with only the label column * and spatial column(wrapped with 'ASTEXT()' function). * * @param string $sql_query             original sql query * @param array  $visualizationSettings settings for the visualization * * @return the modified sql query. */function PMA_GIS_modifyQuery($sql_query, $visualizationSettings){    $modified_query = 'SELECT ';    $analyzed_query = PMA_SQP_analyze(PMA_SQP_parse($sql_query));    // If select clause is not *    if (trim($analyzed_query[0]['select_expr_clause']) != '*') {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            // Check to see whether an alias has been used on the label column            $is_label_alias = false;            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['alias'] == $visualizationSettings['labelColumn']) {                    $modified_query .= sanitize($select) . ' AS `'                    . $select['alias'] . '`, ';                    $is_label_alias = true;                    break;                }            }            // If no alias have been used on the label column            if (! $is_label_alias) {                foreach ($analyzed_query[0]['select_expr'] as $select) {                    if ($select['column'] == $visualizationSettings['labelColumn']) {                        $modified_query .= sanitize($select) . ', ';                    }                }            }        }        // Check to see whether an alias has been used on the spatial column        $is_spatial_alias = false;        foreach ($analyzed_query[0]['select_expr'] as $select) {            if ($select['alias'] == $visualizationSettings['spatialColumn']) {                $sanitized = sanitize($select);                $modified_query .= 'ASTEXT(' . $sanitized . ') AS `'                . $select['alias'] . '`, ';                // Get the SRID                $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                $is_spatial_alias = true;                break;            }        }        // If no alias have been used on the spatial column        if (! $is_spatial_alias) {            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['column'] == $visualizationSettings['spatialColumn']) {                    $sanitized = sanitize($select);                    $modified_query .= 'ASTEXT(' . $sanitized                        . ') AS `' . $select['column'] . '`, ';                    // Get the SRID                    $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                }            }        }        // If select cluase is *    } else {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            $modified_query .= '`' . $visualizationSettings['labelColumn'] .'`, ';        }        // Wrap the spatial column with 'ASTEXT()' function and add it        $modified_query .= 'ASTEXT(`' . $visualizationSettings['spatialColumn']            . '`) AS `' . $visualizationSettings['spatialColumn'] . '`, ';        // Get the SRID        $modified_query .= 'SRID(`' . $visualizationSettings['spatialColumn']            . '`) AS `srid` ';    }    // Append the rest of the query    $from_pos = stripos($sql_query, 'FROM');    $modified_query .= substr($sql_query, $from_pos);    return $modified_query;}// Local function to sanitize the expression taken// from the results of PMA_SQP_analyze function.function sanitize($select){    $table_col = $select['table_name'] . "." . $select['column'];    $db_table_col = $select['db'] . "." . $select['table_name']        . "." . $select['column'];    if ($select['expr'] == $select['column']) {        return "`" . $select['column'] . "`";    } elseif ($select['expr'] == $table_col) {        return "`" . $select['table_name'] . "`.`" . $select['column'] . "`";    } elseif ($select['expr'] == $db_table_col) {        return "`" . $select['db'] . "`.`" . $select['table_name']            . "`.`" . $select['column'] . "`";    }    return $select['expr'];}/** * Formats a visualization for the GIS query results. * * @param array  $data                   Data for the status chart * @param array  &$visualizationSettings Settings used to generate the chart * @param string $format                 Format of the visulaization * * @return string HTML and JS code for the GIS visualization */function PMA_GIS_visualizationResults($data, &$visualizationSettings, $format){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (! isset($data[0])) {        // empty data        return __('No data found for GIS visualization.');    } else {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($visualizationSettings != null) {            foreach ($visualization->getSettings() as $setting => $val) {                if (! isset($visualizationSettings[$setting])) {                    $visualizationSettings[$setting] = $val;                }            }        }        if ($format == 'svg') {            return $visualization->asSvg();        } elseif ($format == 'png') {            return $visualization->asPng();        } elseif ($format == 'ol') {            return $visualization->asOl();        }    }}/** * Generate visualization for the GIS query results and save it to a file. * * @param array  $data                  data for the status chart * @param array  $visualizationSettings settings used to generate the chart * @param string $format                format of the visulaization * @param string $fileName              file name * * @return file File containing the visualization */function PMA_GIS_saveToFile($data, $visualizationSettings, $format, $fileName){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (isset($data[0])) {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($format == 'svg') {            $visualization->toFileAsSvg($fileName);        } elseif ($format == 'png') {            $visualization->toFileAsPng($fileName);        } elseif ($format == 'pdf') {            $visualization->toFileAsPdf($fileName);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * GLOBAL Plugin function. * --------------- * * THIS FILE PROVIDES BASIC FUNCTIONS TO USE IN OTHER PLUGINS! * * The basic filename usage for any plugin, residing in the libraries/transformations directory is: * * -- <mime_type>_<mime_subtype>__<transformation_name>.inc.php * * The function name has to be the like above filename: * * -- function PMA_transformation_<mime_type>_<mime_subtype>__<transformation_name>.inc.php * * Please use short and expressive names. For now, special characters which aren't allowed in * filenames or functions should not be used. * * Please provide a comment for your function, what it does and what parameters are available. * * @package PhpMyAdmin-Transformation *//** * */function PMA_transformation_global_plain($buffer, $options = array(), $meta = ''){    return htmlspecialchars($buffer);}function PMA_transformation_global_html($buffer, $options = array(), $meta = ''){    return $buffer;}function PMA_transformation_global_html_replace($buffer, $options = array(), $meta = ''){    if (!isset($options['string'])) {        $options['string'] = '';    }    if (isset($options['regex']) && isset($options['regex_replace'])) {        $buffer = preg_replace('@' . str_replace('@', '\@', $options['regex']) . '@si', $options['regex_replace'], $buffer);    }    // Replace occurences of [__BUFFER__] with actual text    $return = str_replace("[__BUFFER__]", $buffer, $options['string']);    return $return;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various validation functions * * Validation function takes two argument: id for which it is called * and array of fields' values (usually values for entire formset, as defined * in forms.inc.php). * The function must always return an array with an error (or error array) * assigned to a form element (formset name or field path). Even if there are * no errors, key must be set with an empty value. * * Valdiation functions are assigned in $cfg_db['_validators'] (config.values.php). * * @package PhpMyAdmin *//** * Returns validator list * * @return array */function PMA_config_get_validators(){    static $validators = null;    if ($validators === null) {        $cf = ConfigFile::getInstance();        $validators = $cf->getDbEntry('_validators', array());        if (!defined('PMA_SETUP')) {            // not in setup script: load additional validators for user preferences            // we need oryginal config values not overwritten by user preferences, creating a new PMA_Config            // instance is a better idea than hacking into its code            $org_cfg = $cf->getOrgConfigObj();            $uvs = $cf->getDbEntry('_userValidators', array());            foreach ($uvs as $field => $uv_list) {                $uv_list = (array)$uv_list;                foreach ($uv_list as &$uv) {                    if (!is_array($uv)) {                        continue;                    }                    for ($i = 1; $i < count($uv); $i++) {                        if (substr($uv[$i], 0, 6) == 'value:') {                            $uv[$i] = PMA_array_read(substr($uv[$i], 6), $org_cfg->settings);                        }                    }                }                $validators[$field] = isset($validators[$field])                    ? array_merge((array)$validators[$field], $uv_list)                    : $uv_list;            }        }    }    return $validators;}/** * Runs validation $validator_id on values $values and returns error list. * * Return values: * o array, keys - field path or formset id, values - array of errors *   when $isPostSource is true values is an empty array to allow for error list *   cleanup in HTML documen * o false - when no validators match name(s) given by $validator_id * * @param string|array  $validator_id * @param array         $values * @param bool          $isPostSource  tells whether $values are directly from POST request * @return bool|array */function PMA_config_validate($validator_id, &$values, $isPostSource){    // find validators    $validator_id = (array) $validator_id;    $validators = PMA_config_get_validators();    $vids = array();    $cf = ConfigFile::getInstance();    foreach ($validator_id as &$vid) {        $vid = $cf->getCanonicalPath($vid);        if (isset($validators[$vid])) {            $vids[] = $vid;        }    }    if (empty($vids)) {        return false;    }    // create argument list with canonical paths and remember path mapping    $arguments = array();    $key_map = array();    foreach ($values as $k => $v) {        $k2 = $isPostSource ? str_replace('-', '/', $k) : $k;        $k2 = strpos($k2, '/') ? $cf->getCanonicalPath($k2) : $k2;        $key_map[$k2] = $k;        $arguments[$k2] = $v;    }    // validate    $result = array();    foreach ($vids as $vid) {        // call appropriate validation functions        foreach ((array)$validators[$vid] as $validator) {            $vdef = (array) $validator;            $vname = array_shift($vdef);            $args = array_merge(array($vid, &$arguments), $vdef);            $r = call_user_func_array($vname, $args);            // merge results            if (is_array($r)) {                foreach ($r as $key => $error_list) {                    // skip empty values if $isPostSource is false                    if (!$isPostSource && empty($error_list)) {                        continue;                    }                    if (!isset($result[$key])) {                        $result[$key] = array();                    }                    $result[$key] = array_merge($result[$key], (array)$error_list);                }            }        }    }    // restore original paths    $new_result = array();    foreach ($result as $k => $v) {        $k2 = isset($key_map[$k]) ? $key_map[$k] : $k;        $new_result[$k2] = $v;    }    return empty($new_result) ? true : $new_result;}/** * Empty error handler, used to temporarily restore PHP internal error handler * * @return bool */function PMA_null_error_handler(){    return false;}/** * Ensures that $php_errormsg variable will be registered in case of an error * and enables output buffering (when $start = true). * Called with $start = false disables output buffering end restores * html_errors and track_errors. * * @param boolean $start */function test_php_errormsg($start = true){    static $old_html_errors, $old_track_errors, $old_error_reporting;    static $old_display_errors;    if ($start) {        $old_html_errors = ini_get('html_errors');        $old_track_errors = ini_get('track_errors');        $old_display_errors = ini_get('display_errors');        $old_error_reporting = error_reporting(E_ALL);        ini_set('html_errors', false);        ini_set('track_errors', true);        ini_set('display_errors', true);        set_error_handler("PMA_null_error_handler");        ob_start();    } else {        ob_end_clean();        restore_error_handler();        error_reporting($old_error_reporting);        ini_set('html_errors', $old_html_errors);        ini_set('track_errors', $old_track_errors);        ini_set('display_errors', $old_display_errors);    }}/** * Test database connection * * @param string $extension     'drizzle', 'mysql' or 'mysqli' * @param string $connect_type  'tcp' or 'socket' * @param string $host * @param string $port * @param string $socket * @param string $user * @param string $pass * @param string $error_key * @return bool|array */function test_db_connection($extension, $connect_type, $host, $port, $socket, $user, $pass = null, $error_key = 'Server'){    //    test_php_errormsg();    $socket = empty($socket) || $connect_type == 'tcp' ? null : $socket;    $port = empty($port) || $connect_type == 'socket' ? null : ':' . $port;    $error = null;    if ($extension == 'drizzle') {        while (1) {            $drizzle = @drizzle_create();            if (!$drizzle) {                $error = __('Could not initialize Drizzle connection library');                break;            }            $conn = $socket                ? @drizzle_con_add_uds($socket, $user, $pass, null, 0)                : @drizzle_con_add_tcp($drizzle, $host, $port, $user, $pass, null, 0);            if (!$conn) {                $error = __('Could not connect to Drizzle server');                drizzle_free($drizzle);                break;            }            // connection object is set up but we have to send some query to actually connect            $res = @drizzle_query($conn, 'SELECT 1');            if (!$res) {                $error = __('Could not connect to Drizzle server');            } else {                drizzle_result_free($res);            }            drizzle_con_free($conn);            drizzle_free($drizzle);            break;        }    } else if ($extension == 'mysql') {        $conn = @mysql_connect($host . $socket . $port, $user, $pass);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysql_close($conn);        }    } else {        $conn = @mysqli_connect($host, $user, $pass, null, $port, $socket);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysqli_close($conn);        }    }    //    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error .= " - $php_errormsg";    }    return is_null($error) ? true : array($error_key => $error);}/** * Validate server config * * @param string $path * @param array  $values * @return array */function validate_server($path, $values){    $result = array('Server' => '', 'Servers/1/user' => '', 'Servers/1/SignonSession' => '', 'Servers/1/SignonURL' => '');    $error = false;    if ($values['Servers/1/auth_type'] == 'config' && empty($values['Servers/1/user'])) {        $result['Servers/1/user'] = __('Empty username while using config authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonSession'])) {        $result['Servers/1/SignonSession'] = __('Empty signon session name while using signon authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonURL'])) {        $result['Servers/1/SignonURL'] = __('Empty signon URL while using signon authentication method');        $error = true;    }    if (!$error && $values['Servers/1/auth_type'] == 'config') {        $password = $values['Servers/1/nopassword'] ? null : $values['Servers/1/password'];        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'], $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'], $values['Servers/1/user'], $password, 'Server');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validate pmadb config * * @param string $path * @param array  $values * @return array */function validate_pmadb($path, $values){    //$tables = array('Servers/1/bookmarktable', 'Servers/1/relation', 'Servers/1/table_info', 'Servers/1/table_coords', 'Servers/1/pdf_pages', 'Servers/1/column_info', 'Servers/1/history', 'Servers/1/designer_coords');    $result = array('Server_pmadb' => '', 'Servers/1/controluser' => '', 'Servers/1/controlpass' => '');    $error = false;    if ($values['Servers/1/pmadb'] == '') {        return $result;    }    $result = array();    if ($values['Servers/1/controluser'] == '') {        $result['Servers/1/controluser'] = __('Empty phpMyAdmin control user while using pmadb');        $error = true;    }    if ($values['Servers/1/controlpass'] == '') {        $result['Servers/1/controlpass'] = __('Empty phpMyAdmin control user password while using pmadb');        $error = true;    }    if (!$error) {        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'],            $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'],            $values['Servers/1/controluser'], $values['Servers/1/controlpass'], 'Server_pmadb');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validates regular expression * * @param string $path * @param array  $values * @return array */function validate_regex($path, $values){    $result = array($path => '');    if ($values[$path] == '') {        return $result;    }    test_php_errormsg();    $matches = array();    // in libraries/List_Database.class.php _checkHideDatabase(),    // a '/' is used as the delimiter for hide_db    preg_match('/' . $values[$path] . '/', '', $matches);    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error = preg_replace('/^preg_match\(\): /', '', $php_errormsg);        return array($path => $error);    }    return $result;}/** * Validates TrustedProxies field * * @param string $path * @param array  $values * @return array */function validate_trusted_proxies($path, $values){    $result = array($path => array());    if (empty($values[$path])) {        return $result;    }    if (is_array($values[$path])) {        // value already processed by FormDisplay::save        $lines = array();        foreach ($values[$path] as $ip => $v) {            $lines[] = preg_match('/^-\d+$/', $ip)                ? $v                : $ip . ': ' . $v;        }    } else {        // AJAX validation        $lines = explode("\n", $values[$path]);    }    foreach ($lines as $line) {        $line = trim($line);        $matches = array();        // we catch anything that may (or may not) be an IP        if (!preg_match("/^(.+):(?:[ ]?)\\w+$/", $line, $matches)) {            $result[$path][] = __('Incorrect value') . ': ' . $line;            continue;        }        // now let's check whether we really have an IP address        if (filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === false            && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {            $ip = htmlspecialchars(trim($matches[1]));            $result[$path][] = sprintf(__('Incorrect IP address: %s'), $ip);            continue;        }    }    return $result;}/** * Tests integer value * * @param string $path * @param array  $values * @param bool   $allow_neg       allow negative values * @param bool   $allow_zero      allow zero * @param int    $max_value       max allowed value * @param string $error_string    error message key: $GLOBALS["strConfig$error_lang_key"] * @return string  empty string if test is successful */function test_number($path, $values, $allow_neg, $allow_zero, $max_value, $error_string){    if ($values[$path] === '') {        return '';    }    if (intval($values[$path]) != $values[$path] || (!$allow_neg && $values[$path] < 0) || (!$allow_zero && $values[$path] == 0) || $values[$path] > $max_value) {        return $error_string;    }    return '';}/** * Validates port number * * @param string $path * @param array  $values * @return array */function validate_port_number($path, $values){    return array($path => test_number($path, $values, false, false, 65535, __('Not a valid port number')));}/** * Validates positive number * * @param string $path * @param array  $values * @return array */function validate_positive_number($path, $values){    return array($path => test_number($path, $values, false, false, PHP_INT_MAX, __('Not a positive number')));}/** * Validates non-negative number * * @param string $path * @param array  $values * @return array */function validate_non_negative_number($path, $values){    return array($path => test_number($path, $values, false, true, PHP_INT_MAX, __('Not a non-negative number')));}/** * Validates value according to given regular expression * Pattern and modifiers must be a valid for PCRE <b>and</b> JavaScript RegExp * * @param string $path * @param array  $values * @param string $regex * @return void */function validate_by_regex($path, $values, $regex){    $result = preg_match($regex, $values[$path]);    return array($path => ($result ? '' : __('Incorrect value')));}/** * Validates upper bound for numeric inputs * * @param string $path * @param array  $values * @param int    $max_value * @return array */function validate_upper_bound($path, $values, $max_value){    $result = $values[$path] <= $max_value;    return array($path => ($result ? '' : sprintf(__('Value must be equal or lower than %s'), $max_value)));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;require_once './libraries/header.inc.php';PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'db_sql.php?' . PMA_generate_common_url($db);/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Gets the list of the table in the current db and informations about these * tables if possible * * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full() *// speedup view on locked tables// Special speedup for newer MySQL Versions (in 4.0 format changed)if ($cfg['SkipLockedTables'] == true) {    $result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($result != false && PMA_DBI_num_rows($result) > 0) {        while ($tmp = PMA_DBI_fetch_row($result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[0])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($result);        if (isset($sot_cache)) {            $result      = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);            if ($result != false && PMA_DBI_num_rows($result) > 0) {                while ($tmp = PMA_DBI_fetch_row($result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        $tables[]    = $sts_tmp;                    } else { // table in use                        $tables[]    = array('Name' => $tmp[0]);                    }                }                PMA_DBI_free_result($result);                $sot_ready = true;            }        }        unset($tmp, $result);    }}if (! isset($sot_ready)) {    $result      = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ';');    if (PMA_DBI_num_rows($result) > 0) {        while ($sts_tmp = PMA_DBI_fetch_assoc($result)) {            $tables[] = $sts_tmp;        }        PMA_DBI_free_result($result);        unset($res);    }} *//** * If there is at least one table, displays the printer friendly view, else * an error message */$tables = PMA_DBI_get_tables_full($db);$num_tables = count($tables);echo '<br />';// 1. No tableif ($num_tables == 0) {    echo __('No tables found in database.');} else {// 2. Shows table information    ?><table><thead><tr>    <th><?php echo __('Table'); ?></th>    <th><?php echo __('Rows'); ?></th>    <th><?php echo __('Type'); ?></th>    <?php    if ($cfg['ShowStats']) {        echo '<th>' . __('Size') . '</th>';    }    ?>    <th><?php echo __('Comments'); ?></th></tr></thead><tbody>    <?php    $sum_entries = $sum_size = 0;    $odd_row = true;    foreach ($tables as $sts_data) {        if (PMA_Table::isMerge($db, $sts_data['TABLE_NAME'])         || strtoupper($sts_data['ENGINE']) == 'FEDERATED') {            $merged_size = true;        } else {            $merged_size = false;        }        $sum_entries += $sts_data['TABLE_ROWS'];        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">    <th>        <?php echo htmlspecialchars($sts_data['TABLE_NAME']); ?>    </th>        <?php        if (isset($sts_data['TABLE_ROWS'])) {            ?>    <td align="right">            <?php            if ($merged_size) {                echo '<i>' . PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . '</i>' . "\n";            } else {                echo PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . "\n";            }            ?>    </td>    <td nowrap="nowrap">        <?php echo $sts_data['ENGINE']; ?>    </td>            <?php            if ($cfg['ShowStats']) {                $tblsize =  $sts_data['Data_length'] + $sts_data['Index_length'];                $sum_size += $tblsize;                list($formated_size, $unit) =  PMA_formatByteDown($tblsize, 3, 1);                ?>    <td align="right" nowrap="nowrap">        <?php echo $formated_size . ' ' . $unit; ?>    </td>                <?php            } // end if        } else {            ?>    <td colspan="3" align="center">        <?php echo __('in use'); ?>    </td>            <?php        }        ?>    <td>        <?php        if (! empty($sts_data['Comment'])) {            echo htmlspecialchars($sts_data['Comment']);            $needs_break = '<br />';        } else {            $needs_break = '';        }        if (! empty($sts_data['Create_time'])         || ! empty($sts_data['Update_time'])         || ! empty($sts_data['Check_time'])) {            echo $needs_break;            ?>            <table width="100%">            <?php            if (! empty($sts_data['Create_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Creation') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Create_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Update_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last update') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Update_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Check_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last check') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Check_time'])); ?></td>                </tr>                <?php            }            ?>            </table>            <?php        }        ?>    </td></tr>        <?php    }    ?><tr>    <th align="center">        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>    </th>    <th align="right" nowrap="nowrap">        <?php echo PMA_formatNumber($sum_entries, 0); ?>    </th>    <th align="center">        --    </th>    <?php    if ($cfg['ShowStats']) {        list($sum_formated, $unit) = PMA_formatByteDown($sum_size, 3, 1);        ?>    <th align="right" nowrap="nowrap">        <?php echo $sum_formated . ' ' . $unit; ?>    </th>        <?php    }    ?>    <th></th></tr></tbody></table>    <?php}/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Formset processing library * * @package PhpMyAdmin-setup *//** * Processes forms registered in $form_display, handles error correction * * @param FormDisplay $form_display */function process_formset(FormDisplay $form_display){    if (filter_input(INPUT_GET, 'mode') == 'revert') {        // revert erroneous fields to their default values        $form_display->fixErrors();        // drop post data        header('HTTP/1.1 303 See Other');        header('Location: index.php');        exit;    }    if (!$form_display->process(false)) {        // handle form view and failed POST        $form_display->display(true, true);    } else {        // check for form errors        if ($form_display->hasErrors()) {            // form has errors, show warning            $separator = PMA_get_arg_separator('html');            $page = filter_input(INPUT_GET, 'page');            $formset = filter_input(INPUT_GET, 'formset');            $formset = $formset ? "{$separator}formset=$formset" : '';            $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);            if ($id === null && $page == 'servers') {                // we've just added a new server, get it's id                $id = ConfigFile::getInstance()->getServerCount();            }            $id = $id ? "{$separator}id=$id" : '';            ?>            <div class="error">                <h4><?php echo __('Warning') ?></h4>                <?php echo __('Submitted form contains errors') ?><br />                <a href="?page=<?php echo $page . $formset . $id . $separator ?>mode=revert"><?php echo __('Try to revert erroneous fields to their default values') ?></a>            </div>            <?php $form_display->displayErrors() ?>            <a class="btn" href="index.php"><?php echo __('Ignore errors') ?></a>            &nbsp;            <a class="btn" href="?page=<?php echo $page . $formset . $id . $separator ?>mode=edit"><?php echo __('Show form') ?></a>            <?php        } else {            // drop post data            header('HTTP/1.1 303 See Other');            header('Location: index.php');            exit;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the bookmark feature * * @package PhpMyAdmin *//** * Defines the bookmark parameters for the current user * * @return  array    the bookmark parameters for the current user * @access  public */function PMA_Bookmark_getParams(){    static $cfgBookmark = null;    if (null !== $cfgBookmark) {        return $cfgBookmark;    }    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['bookmarkwork']) {        $cfgBookmark = array(            'user'  => $GLOBALS['cfg']['Server']['user'],            'db'    => $GLOBALS['cfg']['Server']['pmadb'],            'table' => $GLOBALS['cfg']['Server']['bookmarktable'],        );    } else {        $cfgBookmark = false;    }    return $cfgBookmark;} // end of the 'PMA_Bookmark_getParams()' function/** * Gets the list of bookmarks defined for the current database * * @global  resource  the controluser db connection handle * * @param string    the current database name * * @return  array     the bookmarks list (key as index, label as value) * * @access  public */function PMA_Bookmark_getList($db){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return array();    }    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . ' ORDER BY label';    $per_user = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'\''            . ' ORDER BY label';    $global = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    foreach ($global as $key => $val) {        $global[$key] = $val . ' (' . __('shared') . ')';    }    $ret = $global + $per_user;    asort($ret);    return $ret;} // end of the 'PMA_Bookmark_getList()' function/** * Gets the sql command from a bookmark * * @global  resource  the controluser db connection handle * * @param string    the current database name * @param mixed     the id of the bookmark to get * @param string    which field to look up the $id * @param boolean  true: get all bookmarks regardless of the owning user * @param boolean   whether to ignore bookmarks with no user * * @return  string    the sql query * * @access  public */function PMA_Bookmark_get($db, $id, $id_field = 'id', $action_bookmark_all = false, $exact_user_match = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return '';    }    $query = 'SELECT query FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])        . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\'';    if (!$action_bookmark_all) {        $query .= ' AND (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\'';        if (!$exact_user_match) {            $query .= ' OR user = \'\'';        }        $query .= ')';    }    $query .= ' AND ' . PMA_backquote($id_field) . ' = ' . $id;    return PMA_DBI_fetch_value($query, 0, 0, $controllink);} // end of the 'PMA_Bookmark_get()' function/** * Adds a bookmark * * @global  resource  the controluser db connection handle * * @param array     the properties of the bookmark to add; here, *                    $fields['query'] is urlencoded * @param boolean   whether to make the bookmark available for all users * * @return  boolean   whether the INSERT succeeds or not * * @access  public */function PMA_Bookmark_save($fields, $all_users = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query = 'INSERT INTO ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])           . ' (id, dbase, user, query, label) VALUES (NULL, \'' . PMA_sqlAddSlashes($fields['dbase']) . '\', \'' . ($all_users ? '' : PMA_sqlAddSlashes($fields['user'])) . '\', \'' . PMA_sqlAddSlashes(urldecode($fields['query'])) . '\', \'' . PMA_sqlAddSlashes($fields['label']) . '\')';    return PMA_DBI_query($query, $controllink);} // end of the 'PMA_Bookmark_save()' function/** * Deletes a bookmark * * @global  resource  the controluser db connection handle * * @param string   the current database name * @param integer  the id of the bookmark to get * * @access  public */function PMA_Bookmark_delete($db, $id){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query  = 'DELETE FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . '        OR user = \'\')'            . ' AND id = ' . $id;    return PMA_DBI_try_query($query, $controllink);} // end of the 'PMA_Bookmark_delete()' function/** * Bookmark Support */$GLOBALS['cfg']['Bookmark'] = PMA_Bookmark_getParams();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/innodb.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innobase extends PMA_StorageEngine_innodb{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * The form used to define the field to add has been submitted */$abort = false;// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    if (isset($_REQUEST['orig_after_field'])) {        $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];    }    if (isset($_REQUEST['orig_field_where'])) {        $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];    }    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];    $regenerate = true;} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 1;}if (isset($_REQUEST['do_save_data'])) {    $query = '';    $definitions = array();    // Transforms the radio button field_key into 3 arrays    $field_cnt      = count($_REQUEST['field_name']);    $field_primary  = array();    $field_index    = array();    $field_unique   = array();    $field_fulltext = array();    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])         && strlen($_REQUEST['field_name'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }            if ($_REQUEST['field_key'][$i] == 'fulltext_' . $i) {                $field_fulltext[]  = $i;            }        } // end if    } // end for    // Builds the field creation statement and alters the table    for ($i = 0; $i < $field_cnt; ++$i) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $definition = ' ADD ' . PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        if ($_REQUEST['field_where'] != 'last') {            // Only the first field can be added somewhere other than at the end            if ($i == 0) {                if ($_REQUEST['field_where'] == 'first') {                    $definition .= ' FIRST';                } else {                    $definition .= ' AFTER ' . PMA_backquote($_REQUEST['after_field']);                }            } else {                $definition .= ' AFTER ' . PMA_backquote($_REQUEST['field_name'][$i-1]);            }        }        $definitions[] = $definition;    } // end for    // Builds the primary keys statements and updates the table    if (count($field_primary)) {        $fields = array();        foreach ($field_primary as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD PRIMARY KEY (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the indexes statements and updates the table    if (count($field_index)) {        $fields = array();        foreach ($field_index as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD INDEX (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the uniques statements and updates the table    if (count($field_unique)) {        $fields = array();        foreach ($field_unique as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD UNIQUE (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the fulltext statements and updates the table    if (count($field_fulltext)) {        $fields = array();        foreach ($field_fulltext as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD FULLTEXT (' . implode(', ', $fields) . ') ';        unset($fields);    }    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);    $sql_query    = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $definitions);    $result = PMA_DBI_try_query($sql_query);    if ($result === true) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table,                        $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        // Go back to the structure sub-page        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        $num_fields = $_REQUEST['orig_num_fields'];        if (isset($_REQUEST['orig_after_field'])) {            $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];        }        if (isset($_REQUEST['orig_field_where'])) {            $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];        }        $regenerate = true;    }} // end do alter table/** * Displays the form used to define the new field */if ($abort == false) {    /**     * Gets tables informations     */    include_once './libraries/tbl_common.php';    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    $active_page = 'tbl_structure.php';    if ($GLOBALS['is_ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    /**     * Display the form     */    $action = 'tbl_addfield.php';    include_once './libraries/tbl_properties.inc.php';    // Diplays the footer    include './libraries/footer.inc.php';}?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'asc_order' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_bookmark' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_firstpage' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '18',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_lastpage' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'b_docs' => array(            'position' => '22',            'width'    => '16',            'height'   => '16'        ),        'b_docsql' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_prevpage' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'bd_select' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '33',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_firstpage' => array(            'position' => '37',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_home' => array(            'position' => '40',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '43',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '45',            'width'    => '16',            'height'   => '16'        ),        'b_lastpage' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_more' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_pdfdoc' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '53',            'width'    => '16',            'height'   => '16'        ),        'b_prevpage' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_primary' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '57',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_sdb' => array(            'position' => '63',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_spatial' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_sqldoc' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '78',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '81',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '82',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '83',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'database' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '90',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '93',            'width'    => '5',            'height'   => '9'        ),        'item' => array(            'position' => '94',            'width'    => '9',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '95',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '96',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '97',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '98',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        'pause' => array(            'position' => '105',            'width'    => '16',            'height'   => '16'        ),        'php_sym' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        'play' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '109',            'width'    => '16',            'height'   => '16'        ),        's_attention' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_cancel2' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_cancel' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_error2' => array(            'position' => '116',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '118',            'width'    => '16',            'height'   => '16'        ),        's_info' => array(            'position' => '119',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '120',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '121',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '122',            'width'    => '16',            'height'   => '16'        ),        's_okay' => array(            'position' => '123',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '124',            'width'    => '16',            'height'   => '16'        ),        's_process' => array(            'position' => '125',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '126',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '127',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '128',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '129',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '130',            'width'    => '16',            'height'   => '16'        ),        's_status' => array(            'position' => '131',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '132',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '133',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '134',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '135',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '136',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '137',            'width'    => '16',            'height'   => '16'        ),        'window-new' => array(            'position' => '138',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Routines management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';require_once './libraries/mysql_charsets.lib.php';if (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/routines.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_routines.lib.php';/** * Do the magic */$_PMA_RTE = 'RTN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__longToIpv4_info(){    return array(        'info' => __('Converts an (IPv4) Internet network address into a string in Internet standard dotted format.'),        );}/** * returns IPv4 address * * @see http://php.net/long2ip */function PMA_transformation_text_plain__longToIpv4($buffer, $options = array(), $meta = ''){    if ($buffer < 0 || $buffer > 4294967295) {        return $buffer;    }    return long2ip($buffer);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MyISAM storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_pbxt extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to PBXT storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'pbxt_index_cache_size' => array(                'title' => __('Index cache size'),                'desc'  => __('This is the amount of memory allocated to the index cache. Default value is 32MB. The memory allocated here is used only for caching index pages.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_record_cache_size' => array(                'title' => __('Record cache size'),                'desc'  => __('This is the amount of memory allocated to the record cache used to cache table data. The default value is 32MB. This memory is used to cache changes to the handle data (.xtd) and row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_cache_size' => array(                'title' => __('Log cache size'),                'desc'  => __('The amount of memory allocated to the transaction log cache used to cache on transaction log data. The default is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_threshold' => array(                'title' => __('Log file threshold'),                'desc'  => __('The size of a transaction log before rollover, and a new log is created. The default value is 16MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_transaction_buffer_size' => array(                'title' => __('Transaction buffer size'),                'desc'  => __('The size of the global transaction log buffer (the engine allocates 2 buffers of this size). The default is 1MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_checkpoint_frequency' => array(                'title' => __('Checkpoint frequency'),                'desc'  => __('The amount of data written to the transaction log before a checkpoint is performed. The default value is 24MB.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_log_threshold' => array(                'title' => __('Data log threshold'),                'desc'  => __('The maximum size of a data log file. The default value is 64MB. PBXT can create a maximum of 32000 data logs, which are used by all tables. So the value of this variable can be increased to increase the total amount of data that can be stored in the database.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_garbage_threshold' => array(                'title' => __('Garbage threshold'),                'desc'  => __('The percentage of garbage in a data log file before it is compacted. This is a value between 1 and 99. The default is 50.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),            'pbxt_log_buffer_size' => array(                'title' => __('Log buffer size'),                'desc'  => __('The size of the buffer used when writing a data log. The default is 256MB. The engine allocates one buffer per thread, but only if the thread is required to write a data log.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_data_file_grow_size' => array(                'title' => __('Data file grow size'),                'desc'  => __('The grow size of the handle data (.xtd) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_row_file_grow_size' => array(                'title' => __('Row file grow size'),                'desc'  => __('The grow size of the row pointer (.xtr) files.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE            ),            'pbxt_log_file_count' => array(                'title' => __('Log file count'),                'desc'  => __('This is the number of transaction log files (pbxt/system/xlog*.xt) the system will maintain. If the number of logs exceeds this value then old logs will be deleted, otherwise they are renamed and given the next highest number.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC            ),        );    }    /**     * returns the pbxt engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE variables.     *     * @param   string   $formatted_size   the size expression (for example 8MB)     *     * @return string the formatted value and its unit     */    function resolveTypeSize($formatted_size)    {        if (preg_match('/^[0-9]+[a-zA-Z]+$/', $formatted_size)) {            $value = PMA_extractValueFromFormattedSize($formatted_size);        } else {            $value = $formatted_size;        }        return PMA_formatByteDown($value);    }    //--------------------    function getInfoPages()    {        $pages = array();        $pages['Documentation'] = __('Documentation');        return $pages;    }    //--------------------    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    function getPageDocumentation()    {        $output = '<p>'        . sprintf(__('Documentation and further information about PBXT can be found on the %sPrimeBase XT Home Page%s.'), '<a href="' . PMA_linkURL('http://www.primebase.com/xt/') . '" target="_blank">', '</a>')        . '</p>' . "\n"        . '<h3>' . __('Related Links') . '</h3>' . "\n"        . '<ul>' . "\n"        . '<li><a href="' . PMA_linkURL('http://pbxt.blogspot.com/') . '" target="_blank">' . __('The PrimeBase XT Blog by Paul McCullagh') . '</a></li>' . "\n"        . '<li><a href="' . PMA_linkURL('http://www.blobstreaming.org/') . '" target="_blank">' . __('The PrimeBase Media Streaming (PBMS) home page') . '</a></li>' . "\n"        . '</ul>' . "\n";        return $output;    }}?>
<?php/** * Base class for all GIS data type classes. * * @package PhpMyAdmin-GIS */abstract class PMA_GIS_Geometry{    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public abstract function prepareRowAsSvg($spatial, $label, $color, $scale_data);    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public abstract function prepareRowAsPng($spatial, $label, $color, $scale_data, $image);    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public abstract function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf);    /**     * Prepares the JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS data object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     *     * @return the JavaScript related to a row in the GIS dataset     */    public abstract function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data);    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public abstract function scaleRow($spatial);    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public abstract function generateWkt($gis_data, $index, $empty);    /**     * Returns OpenLayers.Bounds object that correspond to the bounds of GIS data.     *     * @param string $srid       Spatial reference ID     * @param array  $scale_data Data related to scaling     *     * @return OpenLayers.Bounds object that correspond to the bounds of GIS data     */    protected function getBoundsForOl($srid, $scale_data)    {        return 'bound = new OpenLayers.Bounds(); bound.extend(new OpenLayers.LonLat('            . $scale_data['minX'] . ', ' . $scale_data['minY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject())); bound.extend(new OpenLayers.LonLat('            . $scale_data['maxX'] . ', ' . $scale_data['maxY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject()));';    }    /**     * Update the min, max values with the given point set.     *     * @param string $point_set Point set     * @param array  $min_max   Existing min, max values     *     * @return the updated min, max values     */    protected function setMinMax($point_set, $min_max)    {        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            $x = (float) $cordinates[0];            if (! isset($min_max['maxX']) || $x > $min_max['maxX']) {                $min_max['maxX'] = $x;            }            if (! isset($min_max['minX']) || $x < $min_max['minX']) {                $min_max['minX'] = $x;            }            $y = (float) $cordinates[1];            if (! isset($min_max['maxY']) || $y > $min_max['maxY']) {                $min_max['maxY'] = $y;            }            if (! isset($min_max['minY']) || $y < $min_max['minY']) {                $min_max['minY'] = $y;            }        }        return $min_max;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     * This method performs common work.     * More specific work is performed by each of the geom classes.     *     * @param $gis_string $value of the GIS column     *     * @return array parameters for the GIS editor from the value of the GIS column     */    protected function generateParams($value)    {        $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';        $srid = 0;        $wkt = '';        if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $value)) {            $last_comma = strripos($value, ",");            $srid = trim(substr($value, $last_comma + 1));            $wkt = trim(substr($value, 1, $last_comma - 2));        } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $value)) {            $wkt = $value;        }        return array('srid' => $srid, 'wkt' => $wkt);    }    /**     * Extracts points, scales and returns them as an array.     *     * @param string  $point_set  String of comma sperated points     * @param array   $scale_data Data related to scaling     * @param boolean $linear     If true, as a 1D array, else as a 2D array     *     * @return scaled points     */    protected function extractPoints($point_set, $scale_data, $linear = false)    {        $points_arr = array();        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            if (isset($cordinates[0]) && trim($cordinates[0]) != ''                && isset($cordinates[1]) && trim($cordinates[1]) != ''            ) {                if ($scale_data != null) {                    $x = ($cordinates[0] - $scale_data['x']) * $scale_data['scale'];                    $y = $scale_data['height'] - ($cordinates[1] - $scale_data['y']) * $scale_data['scale'];                } else {                    $x = trim($cordinates[0]);                    $y = trim($cordinates[1]);                }            } else {                $x = '';                $y = '';            }            if (! $linear) {                $points_arr[] = array($x, $y);            } else {                $points_arr[] = $x;                $points_arr[] = $y;            }        }        return $points_arr;    }    /**     * Generates JavaScriipt for adding points for OpenLayers polygon.     *     * @param string $polygon points of a polygon in WKT form     * @param string $srid    spatial reference id     *     * @return JavaScriipt for adding points for OpenLayers polygon     */    protected function addPointsForOpenLayersPolygon($polygon, $srid)    {        $row = 'new OpenLayers.Geometry.Polygon(new Array(';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, null);            $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point('                    . $point[0] . ', ' . $point[1] . '))'                    . '.transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= '))';        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            foreach ($parts as $ring) {                $points_arr = $this->extractPoints($ring, null);                $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';                foreach ($points_arr as $point) {                    $row .= '(new OpenLayers.Geometry.Point('                        . $point[0] . ', ' . $point[1] . '))'                        . '.transform(new OpenLayers.Projection("EPSG:'                        . $srid . '"), map.getProjectionObject()), ';                }                $row = substr($row, 0, strlen($row) - 2);                $row .= ')), ';            }            $row = substr($row, 0, strlen($row) - 2);        }        $row .= ')), ';        return $row;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_bdb extends PMA_StorageEngine{    /**     * @return  array   variable names     */    function getVariables()    {        return array(            'version_bdb' => array(                'title' => __('Version information'),            ),            'bdb_cache_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_home' => array(            ),            'bdb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_logdir' => array(            ),            'bdb_max_lock' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'bdb_shared_data' => array(            ),            'bdb_tmpdir' => array(            ),            'bdb_data_direct' => array(            ),            'bdb_lock_detect' => array(            ),            'bdb_log_direct' => array(            ),            'bdb_no_recover' => array(            ),            'bdb_no_sync' => array(            ),            'skip_sync_bdb_logs' => array(            ),            'sync_bdb_logs' => array(            ),        );    }    /**     * @return string   LIKE pattern     */    function getVariablesLikePattern()    {        return '%bdb%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'bdb';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/** * URL redirector to avoid leaking Referer with some sensitive information. *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';if (! PMA_isValid($_GET['url']) || ! preg_match('/^https?:\/\/[^\n\r]*$/', $_GET['url'])) {    header('Location: ' . $cfg['PmaAbsoluteUri']);} else {    header('Location: ' . $_GET['url']);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_variables.js';PMA_AddJSVar('pma_token', $_SESSION[' PMA_token ']);PMA_AddJSVar('url_query', str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar('is_superuser', PMA_isSuperuser() ? true : false);/** * Does the common work */require './libraries/server_common.inc.php';/** * Required to display documentation links */require './libraries/server_variables_doc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    if (isset($_REQUEST['type'])) {        switch($_REQUEST['type']) {            case 'getval':                $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                    && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte') {                    exit(implode(' ', PMA_formatByteDown($varValue[1], 3, 3)));                }                exit($varValue[1]);                break;            case 'setval':                $value = $_REQUEST['varValue'];                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                   && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte'                   && preg_match('/^\s*(\d+(\.\d+)?)\s*(mb|kb|mib|kib|gb|gib)\s*$/i', $value, $matches)) {                    $exp = array('kb' => 1, 'kib' => 1, 'mb' => 2, 'mib' => 2, 'gb' => 3, 'gib' => 3);                    $value = floatval($matches[1]) * pow(1024, $exp[strtolower($matches[3])]);                } else {                    $value = PMA_sqlAddslashes($value);                }                if (! is_numeric($value)) $value="'" . $value . "'";                if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName']) && PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value)) {                    // Some values are rounded down etc.                    $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                    exit(json_encode(array(                        'success' => true,                        'variable' => formatVariable($_REQUEST['varName'], $varValue[1])                        ))                    );                }                exit(json_encode(array(                    'success' => false,                    'error' => __('Setting variable failed')                    ))                );                break;        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')   . '' . __('Server variables and settings') . "\n"   . PMA_showMySQLDocu('server_system_variables', 'server_system_variables')   . '</h2>' . "\n";/** * Sends the queries and buffers the results */$serverVarsSession = PMA_DBI_fetch_result('SHOW SESSION VARIABLES;', 0, 1);$serverVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES;', 0, 1);/** * Displays the page */?><fieldset id="tableFilter" style="display:none;"><legend><?php echo __('Filters'); ?></legend><div class="formelement">    <label for="filterText"><?php echo __('Containing the word:'); ?></label>    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" /></div></fieldset><table id="serverVariables" class="data filteredData noclick"><thead><tr><th><?php echo __('Variable'); ?></th>    <th class="valueHeader"><?phpecho __('Session value') . ' / ' . __('Global value');?>    </th>    <th><?php echo __('Documentation'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($serverVars as $name => $value) {    $has_session_value = isset($serverVarsSession[$name]) && $serverVarsSession[$name] != $value;    $row_class = ($odd_row ? 'odd' : 'even') . ' ' . ($has_session_value ? 'diffSession' : '');    ?><tr class="<?php echo $row_class; ?>">    <th nowrap="nowrap"><?php echo htmlspecialchars(str_replace('_', ' ', $name)); ?></th>    <td class="value"><?php echo formatVariable($name, $value); ?></td>    <td class="value"><?php    // To display variable documentation link    if (isset($VARIABLE_DOC_LINKS[$name]))        echo PMA_showMySQLDocu($VARIABLE_DOC_LINKS[$name][1], $VARIABLE_DOC_LINKS[$name][1], false, $VARIABLE_DOC_LINKS[$name][2] . '_' . $VARIABLE_DOC_LINKS[$name][0]);    ?></td>    <?php    if ($has_session_value) {        ?></tr><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> ">    <td>(<?php echo __('Session value'); ?>)</td>    <td class="value"><?php echo formatVariable($name, $serverVarsSession[$name]); ?></td>    <td class="value"></td>    <?php } ?></tr>    <?php    $odd_row = ! $odd_row;}?></tbody></table><?phpfunction formatVariable($name, $value){    global $VARIABLE_DOC_LINKS;    if (is_numeric($value)) {        if (isset($VARIABLE_DOC_LINKS[$name][3]) && $VARIABLE_DOC_LINKS[$name][3]=='byte')            return '<abbr title="'.PMA_formatNumber($value, 0).'">'.implode(' ', PMA_formatByteDown($value, 3, 3)).'</abbr>';        else return PMA_formatNumber($value, 0);    }    return htmlspecialchars($value);}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/*   Copyright (c) 2003, 2005, 2006, 2009 Danilo Segan <danilo@kvota.net>.   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/  // Simple class to wrap file streams, string streams, etc.  // seek is essential, and it should be byte streamclass StreamReader {  // should return a string [FIXME: perhaps return array of bytes?]  function read($bytes) {    return false;  }  // should return new position  function seekto($position) {    return false;  }  // returns current position  function currentpos() {    return false;  }  // returns length of entire stream (limit for seekto()s)  function length() {    return false;  }};class StringReader {  var $_pos;  var $_str;  function StringReader($str='') {    $this->_str = $str;    $this->_pos = 0;  }  function read($bytes) {    $data = substr($this->_str, $this->_pos, $bytes);    $this->_pos += $bytes;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $data;  }  function seekto($pos) {    $this->_pos = $pos;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return strlen($this->_str);  }};class FileReader {  var $_pos;  var $_fd;  var $_length;  function FileReader($filename) {    if (file_exists($filename)) {      $this->_length=filesize($filename);      $this->_pos = 0;      $this->_fd = fopen($filename,'rb');      if (!$this->_fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }    } else {      $this->error = 2; // File doesn't exist      return false;    }  }  function read($bytes) {    if ($bytes) {      fseek($this->_fd, $this->_pos);      // PHP 5.1.1 does not read more than 8192 bytes in one fread()      // the discussions at PHP Bugs suggest it's the intended behaviour      $data = '';      while ($bytes > 0) {        $chunk  = fread($this->_fd, $bytes);        $data  .= $chunk;        $bytes -= strlen($chunk);      }      $this->_pos = ftell($this->_fd);      return $data;    } else return '';  }  function seekto($pos) {    fseek($this->_fd, $pos);    $this->_pos = ftell($this->_fd);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return $this->_length;  }  function close() {    fclose($this->_fd);  }};// Preloads entire file in memory first, then creates a StringReader// over it (it assumes knowledge of StringReader internals)class CachedFileReader extends StringReader {  function CachedFileReader($filename) {    if (file_exists($filename)) {      $length=filesize($filename);      $fd = fopen($filename,'rb');      if (!$fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }      $this->_str = fread($fd, $length);      fclose($fd);    } else {      $this->error = 2; // File doesn't exist      return false;    }  }};?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$tab_column       = get_tab_info();$script_tabs      = get_script_tabs();$script_contr     = get_script_contr();$tab_pos          = get_tab_pos();$tables_pk_or_unique_keys = get_pk_or_unique_keys();$tables_all_keys  = get_all_keys();$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}require_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    // <![CDATA[<?phpecho '    var server = "' . PMA_escapeJsString($server) . '";    var db = "' . PMA_escapeJsString($db) . '";    var token = "' . PMA_escapeJsString($token) . '";';    echo "\n";    if (isset($_REQUEST['query'])) {    echo '     $(document).ready(function() {        $(".trigger").click(function() {        $(".panel").toggle("fast");        $(this).toggleClass("active");        return false;        });    });';    }?>    // ]]>    </script>    <script src="js/pmd/ajax.js" type="text/javascript"></script>    <script src="js/pmd/history.js" type="text/javascript"></script>    <script src="js/pmd/move.js" type="text/javascript"></script>    <!--[if IE]>    <script src="js/pmd/iecanvas.js" type="text/javascript"></script>    <![endif]--><?phpecho $script_tabs . $script_contr . $script_display_field;?></head><body onload="Main()" class="general_body" id="pmd_body"><div class="pmd_header" id="top_menu">        <a href="#"            onclick="Show_left_menu(document.getElementById('key_Show_left_menu')); return false" class="M_butt first" target="_self">            <img id='key_Show_left_menu' title="<?php echo __('Show/Hide left menu'); ?>"                alt="v" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2_m.png" /></a>        <a href="#" onclick="Save2(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Save position') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/save.png" alt=""        /></a><a href="#" onclick="Start_table_new(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Create table')?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/table.png" alt=""        /></a><a href="#" onclick="Start_relation(); return false"            class="M_butt" id="rel_button" target="_self"        ><img title="<?php echo __('Create relation') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/relation.png" alt=""        /></a><a href="#" onclick="Start_display_field(); return false"            class="M_butt" id="display_field_button" target="_self"        ><img title="<?php echo __('Choose column to display') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/display_field.png" alt=""        /></a><a href="#" onclick="location.reload(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Reload'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/reload.png" alt=""        /></a><a href="Documentation.html#faq6_31" target="documentation"            class="M_butt" target="_self"        ><img title="<?php echo __('Help'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/help.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#" onclick="Angular_direct(); return false"            class="M_butt" id="angular_direct_button" target="_self"        ><img title="<?php echo __('Angular links') . ' / ' . __('Direct links'); ?>"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/ang_direct.png" alt=""        /></a><a href="#" onclick="Grid(); return false"            class="M_butt" id="grid_button" target="_self"        ><img title="<?php echo __('Snap to grid') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/grid.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#"            onclick="Small_tab_all(document.getElementById('key_SB_all')); return false" class="M_butt" target="_self"        ><img id='key_SB_all' title="<?php echo __('Small/Big All'); ?>" alt="v"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png"        /></a><a href="#" onclick="Small_tab_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle small/big'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bottom.png" /></a><a href="#" onclick="Relation_lines_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle relation lines'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/toggle_lines.png" /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt="" /><a href="#" onclick="PDF_save(); return false"            class="M_butt" target="_self"        ><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/pdf.png" alt="key" width="20" height="20"                title="<?php echo __('Import/Export coordinates for PDF schema'); ?>" /></a         >        <?php if (isset($_REQUEST['query'])) {            echo '<a href="#" onclick="build_query(\'SQL Query on Database\', 0)" onmousedown="return false;"            class="M_butt" target="_self">';            echo '<img src="'. $GLOBALS['pmaThemeImage'] . 'pmd/query_builder.png" alt="key" width="20" height="20" title="';            echo __('Build Query');            echo '"/></a>'; }?>         <a href="#"            onclick="Top_menu_right(document.getElementById('key_Left_Right')); return false" class="M_butt last" target="_self">            <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2rightarrow_m.png" id="key_Left_Right" alt=">"                title="<?php echo __('Move Menu'); ?>" /></a></div><form action="" method="post" name="form1"><div id="osn_tab">  <canvas class="pmd" id="canvas" width="100" height="100" onclick="Canvas_click(this)"></canvas></div><div id="layer_menu" style="display:none;"><div align="center" style="padding-top:5px;">    <a href="#"        onclick="Hide_tab_all(document.getElementById('key_HS_all')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show all'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png" id='key_HS_all' /></a>    <a href="#"        onclick="No_have_constr(document.getElementById('key_HS')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show Tables with no relation'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2.png" id='key_HS' /></a></div><div id="id_scroll_tab" class="scroll_tab">    <table width="100%" style="padding-left: 3px;"><?php$name_cnt = count($GLOBALS['PMD']['TABLE_NAME']);for ($i = 0; $i < $name_cnt; $i++) {    ?>    <tr><td title="<?php echo __('Structure'); ?>" width="1px"            onmouseover="this.className='L_butt2_2'"            onmouseout="this.className='L_butt2_1'">            <img onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec.png" alt="" /></td>        <td width="1px">            <input onclick="VisibleTab(this,'<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>')"                title="<?php echo __('Hide'); ?>"                id="check_vis_<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                style="margin:0px;" type="checkbox"                value="<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                <?php                if (isset($tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]])) {                    echo $tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]]["H"] ? 'checked="checked"' : '';                } else {                    echo 'checked="checked"';                }                ?> /></td>        <td class="pmd_Tabs" onmouseover="this.className='pmd_Tabs2'"            onmouseout="this.className='pmd_Tabs'"            onclick="Select_tab('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>');">            <?php echo $GLOBALS['PMD_OUT']["TABLE_NAME"][$i]; ?></td>    </tr>    <?php}?>    </table></div><div align="center">    <?php echo __('Number of tables') . ': ' . $name_cnt; ?></div><div align="right">    <div id="layer_menu_sizer" onmousedown="layer_menu_cur_click=1">    </div></div></div><?phpfor ($i = 0; $i < count($GLOBALS['PMD']["TABLE_NAME"]); $i++) {    $t_n = $GLOBALS['PMD']["TABLE_NAME"][$i];    $t_n_url = $GLOBALS['PMD_URL']["TABLE_NAME"][$i];    ?><input name="t_x[<?php echo $t_n_url ?>]" type="hidden" id="t_x_<?php echo $t_n_url ?>_" /><input name="t_y[<?php echo $t_n_url ?>]" type="hidden" id="t_y_<?php echo $t_n_url ?>_" /><input name="t_v[<?php echo $t_n_url ?>]" type="hidden" id="t_v_<?php echo $t_n_url ?>_" /><input name="t_h[<?php echo $t_n_url ?>]" type="hidden" id="t_h_<?php echo $t_n_url ?>_" /><table id="<?php echo $t_n_url ?>" cellpadding="0" cellspacing="0" class="pmd_tab"   style="position: absolute;          left: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["X"]; else echo rand(180, 800); ?>px;          top: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["Y"]; else echo rand(30, 500); ?>px;          visibility: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["H"] ? "visible" : "hidden"; ?>;         "><thead><tr>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input type="checkbox" value="select_all_'.htmlspecialchars($t_n_url).'" style="margin: 0px;" ';        echo 'id="select_all_'.htmlspecialchars($t_n_url).'" title="select all" ';        echo 'onclick="Select_all(\''. htmlspecialchars($t_n_url) .'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\')"></td>';    }?>    <td class="small_tab" onmouseover="this.className='small_tab2';"        onmouseout="this.className='small_tab';"        id="id_hide_tbody_<?php echo $t_n_url ?>"        onclick="Small_tab('<?php echo $t_n_url ?>', 1)"><?php        // no space alloawd here, between tags and content !!!        // JavaScript function does require this        if (! isset($tab_pos[$t_n]) || ! empty($tab_pos[$t_n]["V"])) {            echo 'v';        } else {            echo '&gt;';        }        ?></td>    <td class="small_tab_pref" onmouseover="this.className='small_tab_pref2';"        onmouseout="this.className='small_tab_pref';"        onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');">        <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec_small.png" alt="" /></td>    <td nowrap="nowrap" id="id_zag_<?php echo $t_n_url ?>" class="tab_zag"        onmousedown="cur_click=document.getElementById('<?php echo $t_n_url ?>');"/        onmouseover="Table_onover('<?php echo $t_n_url ?>',0,<?php echo (isset($_REQUEST['query'])? 1 : 0 )?> )"        onmouseout="Table_onover('<?php echo $t_n_url ?>',1,<?php echo (isset($_REQUEST['query']) ? 1 : 0 )?>)">        <span class='owner'>        <?php        echo $GLOBALS['PMD_OUT']["OWNER"][$i];        echo '.</span>';        echo $GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];        ?></td>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="tab_zag"  onmouseover="Table_onover(\''.htmlspecialchars($t_n_url).'\',0,1)"  id="id_zag_'.htmlspecialchars($t_n_url).'_2"';        echo 'onmousedown="cur_click=document.getElementById(\''.htmlspecialchars($t_n_url).'\');"';        echo 'onmouseout="Table_onover(\''.htmlspecialchars($t_n_url).'\',1,1)">';    }?></tr></thead><tbody id="id_tbody_<?php echo $t_n_url ?>"    <?php    if (isset($tab_pos[$t_n]) && empty($tab_pos[$t_n]["V"])) {        echo 'style="display: none;"';    }?>>    <?php    $display_field = PMA_getDisplayField($db, $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i]);    for ($j = 0, $id_cnt = count($tab_column[$t_n]["COLUMN_ID"]); $j < $id_cnt; $j++) {        ?><tr id="id_tr_<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . '.'            . urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>"        <?php        if ($display_field == $tab_column[$t_n]["COLUMN_NAME"][$j]) {            echo ' class="tab_field_3" ';        } else {            echo ' class="tab_field" ';        }        ?>    onmouseover="old_class = this.className; this.className = 'tab_field_2';"    onmouseout="this.className = old_class;"    onmousedown="Click_field('<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]."','".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j])."',";        if (! PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i])) {            echo (isset($tables_pk_or_unique_keys[$t_n . "." . $tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        } else {            // if foreign keys are supported, it's not necessary that the            // index is a primary key            echo (isset($tables_all_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        }        ?>)">    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input value="'.htmlspecialchars($t_n_url).urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'"';        echo 'type="checkbox" id="select_'.htmlspecialchars($t_n_url).'._'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'style="margin: 0px;" title="select_'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'onclick="store_column(\''.urlencode($GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i]).'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\')"></td>';    }?>    <td width="10px" colspan="3"        id="<?php echo $t_n_url.".".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>">        <div style="white-space:nowrap">        <?php        if (isset($tables_pk_or_unique_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]])) {            ?>                <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/FieldKey_small.png"                    alt="*" />            <?php        } else {            ?>                    <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Field_small<?php            if (strstr($tab_column[$t_n]["TYPE"][$j], 'char')             || strstr($tab_column[$t_n]["TYPE"][$j], 'text')) {                echo '_char';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'int')             || strstr($tab_column[$t_n]["TYPE"][$j], 'float')             || strstr($tab_column[$t_n]["TYPE"][$j], 'double')             || strstr($tab_column[$t_n]["TYPE"][$j], 'decimal')) {                echo '_int';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'date')             || strstr($tab_column[$t_n]["TYPE"][$j], 'time')             || strstr($tab_column[$t_n]["TYPE"][$j], 'year')) {                echo '_date';            }            ?>.png" alt="*" />            <?php        }        echo htmlspecialchars($tab_column[$t_n]["COLUMN_NAME"][$j]            . " : " . $tab_column[$t_n]["TYPE"][$j], ENT_QUOTES);        ?>        </div>   </td>   <?php   if (isset($_REQUEST['query'])) {       //$temp = $GLOBALS['PMD_OUT']["OWNER"][$i].'.'.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];       echo '<td class="small_tab_pref" onmouseover="this.className=\'small_tab_pref2\';"';       echo 'onmouseout="this.className=\'small_tab_pref\';"';       echo 'onclick="Click_option(\'pmd_optionse\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\',\''.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i].'\')" >';       echo  '<img src="' . $GLOBALS['pmaThemeImage'] . 'pmd/exec_small.png" title="options" alt="" /></td> ';    } ?></tr>        <?php    }    ?></tbody></table>    <?php}?></form><div id="pmd_hint"></div><div id='layer_action' style="display:none;">Load...</div><table id="layer_new_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>            <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Create relation'); ?></strong></td>        </tr>        </thead>        <tbody id="foreign_relation">        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong>FOREIGN KEY</strong></td>        </tr>        <tr>            <td width="58" nowrap="nowrap">on delete</td>            <td width="102"><select name="on_delete" id="on_delete">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        <tr>            <td nowrap="nowrap">on update</td>            <td><select name="on_update" id="on_update">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="New_relation()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_new_relation').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="layer_upd_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%"></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="100%" border="0" align="center" cellpadding="2" cellspacing="0">        <tr>            <td colspan="3" align="center" nowrap="nowrap"><strong><?php echo __('Delete relation'); ?></strong></td>        </tr>        <tr>            <td colspan="3" align="center" nowrap="nowrap">                <input name="Button" type="button" class="butt"                    onclick="Upd_relation()" value="<?php echo __('Delete'); ?>" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_upd_relation').style.display = 'none'; Re_load();" />            </td>        </tr>    </table></td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="pmd_optionse" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>            <td colspan="2" rowspan="2" id="option_col_name" nowrap="nowrap" align="center"></td>        </tr>        </thead>        <tbody id="where">        <tr><td align="center" nowrap="nowrap"><b>WHERE</b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="rel_opt" id="rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="Query" value="" cols="18"></textarea>            </td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Rename to'); ?></b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102"><input type="text" value="" id="new_name"/></td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Aggregate'); ?></b></td></tr>         <tr>         <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="operator" id="operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>GROUP BY</b></td>                <td><input type="checkbox" value="groupby" id="groupby"/></td>           </tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>ORDER BY</b></td>                <td><input type="checkbox" value="orderby" id="orderby"/></td>           </tr>          <tr><td align="center" nowrap="nowrap"><b>HAVING</b></td></tr>          <tr>          <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="h_operator" id="h_operator">                    <option value="---" selected="selected">---</option>                    <option value="None" > <?php echo __('None'); ?> </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>               </td></tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="h_rel_opt" id="h_rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>            </tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Value'); ?>/<br/><?php echo __('subquery'); ?></td>                <td width="102"><textarea id="having" value="" cols="18"></textarea></td>            </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="add_object()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="Close_option()" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_rename_to" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Rename to'); ?></strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102">                <input type="text" value="" id="e_rename"/>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Rename')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_rename_to').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_having" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>HAVING</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hoperator" id="hoperator">                    <option value="---" selected="selected">---</option>                    <option value="None" > None </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>        <tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hrel_opt" id="hrel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="hQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Having')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_having').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_Aggregate" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Aggregate'); ?></strong></td>        </tr>        </thead>        <tbody>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102">                <select name="operator" id="e_operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                       <option value="avg"> AVG </option>                    <option value="avg"> COUNT </option>                </select>           </td></tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Aggregate')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_Aggregate').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_where" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>WHERE</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="erel_opt" id="erel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="eQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Where')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_where').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><?phpif (! empty($_REQUEST['query'])) {    echo '<div class="panel">';    echo '<div style="clear:both;"></div>';    echo '<div id="ab"></div>';    echo '<div style="clear:both;"></div>';    echo '</div>';    echo '<a class="trigger" href="#">' . __('Active options') . '</a>';    echo '<div id="filter"></div>';    echo '<div id="box">';    echo '<span id="boxtitle"></span>';    echo '<form method="post" action="db_qbe.php" >';    echo '<textarea cols="80" name="sql_query" id="textSqlquery" rows="15"></textarea><div id="tblfooter">';    echo '  <input type="submit" name="submit_sql" class="btn">';    echo '  <input type="button" name="cancel" value="' . __('Cancel') . '" onclick="closebox()" class="btn">';    echo PMA_generate_common_hidden_inputs($GLOBALS['db']);    echo '</div></p>';    echo '</form></div>';} ?><!-- cache images --><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2leftarrow_m.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow1.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow2.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/uparrow2_m.png" width="0" height="0" alt="" /><div id="PMA_disable_floating_menubar"></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used for cleaning up phpMyAdmin tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Cleanu column related relation stuff * * @param string $db * @param string $table * @param string $column */function PMA_relationsCleanupColumn($db, $table, $column){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND column_name = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND display_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND master_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND foreign_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup table related relation stuff * * @param string $db * @param string $table */function PMA_relationsCleanupTable($db, $table){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup database related relation stuff * * @param string $db */function PMA_relationsCleanupDatabase($db){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['bookmarkwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['bookmark'])                    . ' WHERE dbase  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);     }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin fatal error display page * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}header('Content-Type: text/html; charset=utf-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang; ?>" dir="<?php echo $dir; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <style type="text/css">    <!--    html {        padding: 0;        margin: 0;    }    body  {        font-family: sans-serif;        font-size: small;        color: #000000;        background-color: #F5F5F5;        margin: 1em;    }    h1 {        margin: 0;        padding: 0.3em;        font-size: 1.4em;        font-weight: bold;        color: #ffffff;        background-color: #ff0000;    }    p {        margin: 0;        padding: 0.5em;        border: 0.1em solid red;        background-color: #ffeeee;    }    //-->    </style></head><body><h1>phpMyAdmin - <?php echo $error_header; ?></h1><p><?php echo PMA_sanitize($error_message); ?></p></body></html>
<?php/** * Theme based generator for SVG gradient. * * @package PhpMyAdmin-theme */header('Content-Type: image/svg+xml');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');function get_color($get_name, $default){    // get color from GET args, only alphanumeric chcracters    $opts = array('options' => array('regexp' => '/^[a-z0-9]+$/i'));    $color = filter_input(INPUT_GET, $get_name, FILTER_VALIDATE_REGEXP, $opts);    if (preg_match('/^[a-f0-9]{6}$/', $color)) {        return '#' . $color;    }    return $color ? $color : $default;}?><?php echo '<?xml version="1.0" ?>' ?><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" version="1.0" width="100%" height="100%">    <defs>        <linearGradient id="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%">            <stop offset="0%" stop-color="<?php echo get_color('from', 'white') ?>" stop-opacity="1" />            <stop offset="100%" stop-color="<?php echo get_color('to', 'black') ?>" stop-opacity="1" />        </linearGradient>    </defs>    <rect width="100%" height="100%" style="fill:url(#linear-gradient);" /></svg>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file view and save screen * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';require_once './setup/lib/ConfigGenerator.class.php';$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);?><h2><?php echo __('Configuration file') ?></h2><?php display_form_top('config.php'); ?><input type="hidden" name="eol" value="<?php echo htmlspecialchars(PMA_ifSetOr($_GET['eol'], 'unix')) ?>" /><?php display_fieldset_top('', '', null, array('class' => 'simple')); ?><tr>    <td>        <textarea cols="50" rows="20" name="textconfig" id="textconfig" spellcheck="false"><?php            echo htmlspecialchars(ConfigGenerator::getConfigFile())        ?></textarea>    </td></tr><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" class="green" />        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Export to Texy! text. * * @package PhpMyAdmin-Export * @subpackage Texy */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['texytext'] = array(        'text' => __('Texy! text'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(        /* what to dump (structure/data/both) */        array('type' => 'begin_group', 'text' => __('Dump table'), 'name' => 'general_opts'),        array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),        array('type' => 'end_group'),        array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),        array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL by')),        array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),        array('type' => 'end_group'),        ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('===' . __('Database') . ' ' . $db . "\n\n");    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in Texy format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('== ' . __('Dumping data for table') . ' ' . $table . "\n\n")) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $text_output = "|------\n";            for ($i = 0; $i < $fields_cnt; $i++) {                $text_output .= '|' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i)));            } // end for            $text_output .= "\n|------\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $text_output = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = ' ';                }                $text_output .= '|' . htmlspecialchars($value);            } // end for            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('== ' . __('Table structure for table') . ' ' .$table . "\n\n")) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $text_output = "|------\n";        $text_output .= '|' . __('Column');        $text_output .= '|' . __('Type');        $text_output .= '|' . __('Null');        $text_output .= '|' . __('Default');        if ($do_relation && $have_rel) {            $text_output .= '|' . __('Links to');        }        if ($do_comments) {            $text_output .= '|' . __('Comments');            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $text_output .= '|' . htmlspecialchars('MIME');            $mime_map = PMA_getMIME($db, $table, true);        }        $text_output .= "\n|------\n";        if (! PMA_exportOutputHandler($text_output)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $text_output = '';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '**' . $fmt_pre;                $fmt_post = $fmt_post . '**';            }            if ($column['Key']=='PRI') {                $fmt_pre = '//' . $fmt_pre;                $fmt_post = $fmt_post . '//';            }            $text_output .= '|' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post;            $text_output .= '|' . htmlspecialchars($type);            $text_output .= '|' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes'));            $text_output .= '|' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '');            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $text_output .= '|' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '');            }            if ($do_comments && $cfgRelation['commwork']) {                $text_output .= '|' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '');            }            if ($do_mime && $cfgRelation['mimework']) {                $text_output .= '|' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '');            }            $text_output .= "\n";            if (! PMA_exportOutputHandler($text_output)) {                return false;            }        } // end while        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Parser Matching Data * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This data is used by the SQL Parser to recognize keywords * * It has been extracted from the lex.h file in the MySQL BK tree * (around 4.0.2) as well as the MySQL documentation. * * It's easier to use only uppercase for proper sorting. In case of * doubt, use the test case to verify. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (! isset($GLOBALS['sql_delimiter'])) {        $GLOBALS['sql_delimiter'] = ';';}/** * @global array MySQL function names */$PMA_SQPdata_function_name = array (    'ABS',    'ACOS',    'ADDDATE',    'ADDTIME',    'AES_DECRYPT',    'AES_ENCRYPT',    'AREA',                     // Area() polygon-property-functions.html    'ASBINARY',                 // AsBinary()    'ASCII',    'ASIN',    'ASTEXT',                   // AsText()    'ATAN',    'ATAN2',    'AVG',    'BDMPOLYFROMTEXT',          // BdMPolyFromText()    'BDMPOLYFROMWKB',           // BdMPolyFromWKB()    'BDPOLYFROMTEXT',           // BdPolyFromText()    'BDPOLYFROMWKB',            // BdPolyFromWKB()    'BENCHMARK',    'BIN',    'BIT_AND',    'BIT_COUNT',    'BIT_LENGTH',    'BIT_OR',    'BIT_XOR',                  // group-by-functions.html    'BOUNDARY',                 // Boundary() general-geometry-property-functions.html    'BUFFER',                   // Buffer()    'CAST',    'CEIL',    'CEILING',    'CENTROID',                 // Centroid() multipolygon-property-functions.html    'CHAR',                     // string-functions.html    'CHARACTER_LENGTH',    'CHARSET',                  // information-functions.html    'CHAR_LENGTH',    'COALESCE',    'COERCIBILITY',             // information-functions.html    'COLLATION',                // information-functions.html    'COMPRESS',                 // string-functions.html    'CONCAT',    'CONCAT_WS',    'CONNECTION_ID',    'CONTAINS',                 // Contains()    'CONV',    'CONVERT',    'CONVERT_TZ',    'CONVEXHULL',               // ConvexHull()    'COS',    'COT',    'COUNT',    'CRC32',                    // mathematical-functions.html    'CROSSES',                  // Crosses()    'CURDATE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURTIME',    'DATABASE',    'DATE',                     // date-and-time-functions.html    'DATEDIFF',                 // date-and-time-functions.html    'DATE_ADD',    'DATE_DIFF',    'DATE_FORMAT',    'DATE_SUB',    'DAY',    'DAYNAME',    'DAYOFMONTH',    'DAYOFWEEK',    'DAYOFYEAR',    'DECODE',    'DEFAULT',                  // miscellaneous-functions.html    'DEGREES',    'DES_DECRYPT',    'DES_ENCRYPT',    'DIFFERENCE',               // Difference()    'DIMENSION',                // Dimension() general-geometry-property-functions.html    'DISJOINT',                 // Disjoint()    'DISTANCE',                 // Distance()    'ELT',    'ENCODE',    'ENCRYPT',    'ENDPOINT',                 // EndPoint() linestring-property-functions.html    'ENVELOPE',                 // Envelope() general-geometry-property-functions.html    'EQUALS',                   // Equals()    'EXP',    'EXPORT_SET',    'EXTERIORRING',             // ExteriorRing() polygon-property-functions.html    'EXTRACT',    'EXTRACTVALUE',             // ExtractValue() xml-functions.html    'FIELD',    'FIND_IN_SET',    'FLOOR',    'FORMAT',    'FOUND_ROWS',    'FROM_DAYS',    'FROM_UNIXTIME',    'GEOMCOLLFROMTEXT',         // GeomCollFromText()    'GEOMCOLLFROMWKB',          // GeomCollFromWKB()    'GEOMETRYCOLLECTION',       // GeometryCollection()    'GEOMETRYCOLLECTIONFROMTEXT',   // GeometryCollectionFromText()    'GEOMETRYCOLLECTIONFROMWKB',    // GeometryCollectionFromWKB()    'GEOMETRYFROMTEXT',         // GeometryFromText()    'GEOMETRYFROMWKB',          // GeometryFromWKB()    'GEOMETRYN',                // GeometryN() geometrycollection-property-functions.html    'GEOMETRYTYPE',             // GeometryType() general-geometry-property-functions.html    'GEOMFROMTEXT',             // GeomFromText()    'GEOMFROMWKB',              // GeomFromWKB()    'GET_FORMAT',    'GET_LOCK',    'GLENGTH',                  // GLength() linestring-property-functions.html    'GREATEST',    'GROUP_CONCAT',    'GROUP_UNIQUE_USERS',    'HEX',    'HOUR',    'IF',                       //control-flow-functions.html    'IFNULL',    'INET_ATON',    'INET_NTOA',    'INSERT',                   // string-functions.html    'INSTR',    'INTERIORRINGN',            // InteriorRingN() polygon-property-functions.html    'INTERSECTION',             // Intersection()    'INTERSECTS',               // Intersects()    'INTERVAL',    'ISCLOSED',                 // IsClosed() multilinestring-property-functions.html    'ISEMPTY',                  // IsEmpty() general-geometry-property-functions.html    'ISNULL',    'ISRING',                   // IsRing() linestring-property-functions.html    'ISSIMPLE',                 // IsSimple() general-geometry-property-functions.html    'IS_FREE_LOCK',    'IS_USED_LOCK',             // miscellaneous-functions.html    'LAST_DAY',    'LAST_INSERT_ID',    'LCASE',    'LEAST',    'LEFT',    'LENGTH',    'LINEFROMTEXT',             // LineFromText()    'LINEFROMWKB',              // LineFromWKB()    'LINESTRING',               // LineString()    'LINESTRINGFROMTEXT',       // LineStringFromText()    'LINESTRINGFROMWKB',        // LineStringFromWKB()    'LN',    'LOAD_FILE',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCATE',    'LOG',    'LOG10',    'LOG2',    'LOWER',    'LPAD',    'LTRIM',    'MAKEDATE',    'MAKETIME',    'MAKE_SET',    'MASTER_POS_WAIT',    'MAX',    'MBRCONTAINS',              // MBRContains()    'MBRDISJOINT',              // MBRDisjoint()    'MBREQUAL',                 // MBREqual()    'MBRINTERSECTS',            // MBRIntersects()    'MBROVERLAPS',              // MBROverlaps()    'MBRTOUCHES',               // MBRTouches()    'MBRWITHIN',                // MBRWithin()    'MD5',    'MICROSECOND',    'MID',    'MIN',    'MINUTE',    'MLINEFROMTEXT',            // MLineFromText()    'MLINEFROMWKB',             // MLineFromWKB()    'MOD',    'MONTH',    'MONTHNAME',    'MPOINTFROMTEXT',           // MPointFromText()    'MPOINTFROMWKB',            // MPointFromWKB()    'MPOLYFROMTEXT',            // MPolyFromText()    'MPOLYFROMWKB',             // MPolyFromWKB()    'MULTILINESTRING',          // MultiLineString()    'MULTILINESTRINGFROMTEXT',  // MultiLineStringFromText()    'MULTILINESTRINGFROMWKB',   // MultiLineStringFromWKB()    'MULTIPOINT',               // MultiPoint()    'MULTIPOINTFROMTEXT',       // MultiPointFromText()    'MULTIPOINTFROMWKB',        // MultiPointFromWKB()    'MULTIPOLYGON',             // MultiPolygon()    'MULTIPOLYGONFROMTEXT',     // MultiPolygonFromText()    'MULTIPOLYGONFROMWKB',      // MultiPolygonFromWKB()    'NAME_CONST',               // NAME_CONST()    'NOW',                      // NOW()    'NULLIF',    'NUMGEOMETRIES',            // NumGeometries() geometrycollection-property-functions.html    'NUMINTERIORRINGS',         // NumInteriorRings() polygon-property-functions.html    'NUMPOINTS',                // NumPoints() linestring-property-functions.html    'OCT',    'OCTET_LENGTH',    'OLD_PASSWORD',    'ORD',    'OVERLAPS',                 // Overlaps()    'PASSWORD',    'PERIOD_ADD',    'PERIOD_DIFF',    'PI',    'POINT',                    // Point()    'POINTFROMTEXT',            // PointFromText()    'POINTFROMWKB',             // PointFromWKB()    'POINTN',                   // PointN() inestring-property-functions.html    'POINTONSURFACE',           // PointOnSurface() multipolygon-property-functions.html    'POLYFROMTEXT',             // PolyFromText()    'POLYFROMWKB',              // PolyFromWKB()    'POLYGON',                  // Polygon()    'POLYGONFROMTEXT',          // PolygonFromText()    'POLYGONFROMWKB',           // PolygonFromWKB()    'POSITION',    'POW',    'POWER',    'QUARTER',    'QUOTE',    'RADIANS',    'RAND',    'RELATED',                  // Related()    'RELEASE_LOCK',    'REPEAT',    'REPLACE',                  // string-functions.html    'REVERSE',    'RIGHT',    'ROUND',    'ROW_COUNT',                // information-functions.html    'RPAD',    'RTRIM',    'SCHEMA',                   // information-functions.html    'SECOND',    'SEC_TO_TIME',    'SESSION_USER',    'SHA',    'SHA1',    'SIGN',    'SIN',    'SLEEP',                    // miscellaneous-functions.html    'SOUNDEX',    'SPACE',    'SQRT',    'SRID',                     // general-geometry-property-functions.html    'STARTPOINT',               // StartPoint() linestring-property-functions.html    'STD',    'STDDEV',    'STDDEV_POP',               // group-by-functions.html    'STDDEV_SAMP',              // group-by-functions.html    'STRCMP',    'STR_TO_DATE',    'SUBDATE',    'SUBSTR',    'SUBSTRING',    'SUBSTRING_INDEX',    'SUBTIME',    'SUM',    'SYMDIFFERENCE',            // SymDifference()    'SYSDATE',    'SYSTEM_USER',    'TAN',    'TIME',    'TIMEDIFF',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TIME_FORMAT',    'TIME_TO_SEC',    'TOUCHES',                  // Touches()    'TO_DAYS',    'TRIM',    'TRUNCATE',                 // mathematical-functions.html    'UCASE',    'UNCOMPRESS',               // string-functions.html    'UNCOMPRESSED_LENGTH',      // string-functions.html    'UNHEX',                    // string-functions.html    'UNIQUE_USERS',    'UNIX_TIMESTAMP',    'UPDATEXML',                // UpdateXML() xml-functions.html    'UPPER',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',                     // miscellaneous-functions.html    'VARIANCE',                 // group-by-functions.html    'VAR_POP',                  // group-by-functions.html    'VAR_SAMP',                 // group-by-functions.html    'VERSION',    'WEEK',    'WEEKDAY',    'WEEKOFYEAR',    'WITHIN',                   // Within()    'X',                        // point-property-functions.html    'Y',                        // point-property-functions.html    'YEAR',    'YEARWEEK');/** * @global array MySQL attributes */$PMA_SQPdata_column_attrib = array (    'ARCHIVE',          // Engine    'ASCII',    'AUTO_INCREMENT',    'BDB',              // Engine    'BERKELEYDB',       // Engine alias BDB    'BINARY',    'BLACKHOLE',        // Engine    'CSV',              // Engine    'DEFAULT',    'EXAMPLE',          // Engine    'FEDERATED',        // Engine    'HEAP',             // Engine    'INNOBASE',         // Engine alias InnoDB    'INNODB',           // Engine InnoDB    'ISAM',             // Engine    'MARIA',            // Engine    'MEMORY',           // Engine alias HEAP, but preferred    'MERGE',            // Engine    'MRG_ISAM',         // Engine    'MRG_MYISAM',       // Engine alias MERGE    'MYISAM',           // Engine MyISAM    'NATIONAL',    'NDB',              // Engine alias NDBCLUSTER    'NDBCLUSTER',       // Engine    'PRECISION',    'UNDEFINED',    'UNICODE',    'UNSIGNED',    'VARYING',    'ZEROFILL');/** * words that are reserved by MySQL and may not be used as identifiers without quotes * * @see http://dev.mysql.com/doc/refman/5.5/en/reserved-words.html * * @global array MySQL reserved words */$PMA_SQPdata_reserved_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYSE',    'ANALYZE',    'AND',    'AS',    'ASC',    'AUTOCOMMIT',    'AUTO_INCREMENT',    'AVG_ROW_LENGTH',    'BACKUP',    'BEGIN',    'BETWEEN',    'BINLOG',    'BOTH',    'BY',    'CASCADE',    'CASE',    'CHANGE',    'CHANGED',    'CHARSET',    'CHECK',    'CHECKSUM',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPRESSED',    'CONCURRENT',    'CONSTRAINT',    'CONTAINS',    'CONVERT',    'CREATE',    'CROSS',    'CURRENT_TIMESTAMP',    'DATABASE',    'DATABASES',    'DAY',    'DAY_HOUR',    'DAY_MINUTE',    'DAY_SECOND',    'DECLARE',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DETERMINISTIC',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DROP',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'ELSE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEMINI',    'GEMINI_SPIN_RETRIES',    'GENERAL',    'GLOBAL',    'GRANT',    'GRANTS',    'GROUP',    'HAVING',    'HEAP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IGNORE_SERVER_IDS',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INSERT',    'INSERT_ID',    'INSERT_METHOD',    'INTERVAL',    'INTO',    'INVOKER',    'IS',    'ISOLATION',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LAST_INSERT_ID',    'LEADING',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LOAD',    'LOCAL',    'LOCK',    'LOCKS',    'LOGS',    'LOW_PRIORITY',    'MARIA',                // 5.1 ?    'MASTER_CONNECT_RETRY',    'MASTER_HEARTBEAT_PERIOD',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_USER',    'MATCH',    'MAXVALUE',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MERGE',    'MINUTE',    'MINUTE_SECOND',    'MIN_ROWS',    'MODE',    'MODIFY',    'MONTH',    'MRG_MYISAM',    'MYISAM',    'NAMES',    'NATURAL',    // 'NO' is not allowed in SQL-99 but is allowed in MySQL    //'NO',    'NOT',    'NULL',    'OFFSET',    'ON',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PAGE',                 // 5.1-maria ?    'PAGE_CHECKSUM',        // 5.1    'PARTIAL',    'PARTITION',            // 5.1    'PARTITIONS',           // 5.1    'PASSWORD',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESS',    'PROCESSLIST',    'PURGE',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REFERENCES',    'REGEXP',    'RELOAD',    'RENAME',    'REPAIR',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'RESET',    'RESIGNAL',    'RESTORE',    'RESTRICT',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROW',    'ROWS',    'ROW_FORMAT',    'SECOND',    'SECURITY',    'SELECT',    'SEPARATOR',    'SERIALIZABLE',    'SESSION',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNAL',    'SLAVE',    'SLOW',    'SONAME',    'SOUNDS',                   // string-functions.html    'SQL',    'SQL_AUTO_IS_NULL',    'SQL_BIG_RESULT',    'SQL_BIG_SELECTS',    'SQL_BIG_TABLES',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_LOG_BIN',    'SQL_LOG_OFF',    'SQL_LOG_UPDATE',    'SQL_LOW_PRIORITY_UPDATES',    'SQL_MAX_JOIN_SIZE',    'SQL_NO_CACHE',    'SQL_QUOTE_SHOW_CREATE',    'SQL_SAFE_UPDATES',    'SQL_SELECT_LIMIT',    'SQL_SLAVE_SKIP_COUNTER',    'SQL_SMALL_RESULT',    'SQL_WARNINGS',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUPER',    'TABLE',    'TABLES',    'TEMPORARY',    'TERMINATED',    'THEN',    'TO',    'TRAILING',    'TRANSACTIONAL',    // 5.1 ?    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNION',    'UNIQUE',    'UNLOCK',    'UPDATE',    'USAGE',    'USE',    'USING',    'VALUES',    'VARIABLES',    'VIEW',    'WHEN',    'WHERE',    'WITH',    'WORK',    'WRITE',    'XOR',    'YEAR_MONTH');/** * words forbidden to be used as column or table name wihtout quotes * as seen in http://dev.mysql.com/doc/mysql/en/reserved-words.html * * @global array MySQL forbidden words */$PMA_SQPdata_forbidden_word = array (    'ACCESSIBLE',       // 5.1    'ACTION',    'ADD',    'AFTER',    'AGAINST',    'AGGREGATE',    'ALGORITHM',    'ALL',    'ALTER',    'ANALYZE',    'AND',    'ANY',    'AS',    'ASC',    'ASCII',    'ASENSITIVE',    'AUTO_INCREMENT',    'AVG',    'AVG_ROW_LENGTH',    'BACKUP',    'BDB',    'BEFORE',    'BEGIN',    'BERKELEYDB',    'BETWEEN',    'BIGINT',    'BINARY',    'BINLOG',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',    'BOTH',    'BTREE',    'BY',    'BYTE',    'CACHE',    'CALL',    'CASCADE',    'CASCADED',    'CASE',    'CHAIN',    'CHANGE',    'CHANGED',    'CHAR',    'CHARACTER',    'CHARSET',    'CHECK',    'CHECKSUM',    'CIPHER',    'CLOSE',    'COLLATE',    'COLLATION',    'COLUMN',    'COLUMNS',    'COMMENT',    'COMMIT',    'COMMITTED',    'COMPACT',    'COMPRESSED',    'CONCURRENT',    'CONDITION',    'CONNECTION',    'CONSISTENT',    'CONSTRAINT',    'CONTAINS',    'CONTINUE',    'CONVERT',    'CREATE',    'CROSS',    'CUBE',    'CURRENT_DATE',    'CURRENT_TIME',    'CURRENT_TIMESTAMP',    'CURRENT_USER',    'CURSOR',    'DATA',    'DATABASE',    'DATABASES',    'DATE',    'DATETIME',    'DAY',    'DAY_HOUR',    'DAY_MICROSECOND',    'DAY_MINUTE',    'DAY_SECOND',    'DEALLOCATE',    'DEC',    'DECIMAL',    'DECLARE',    'DEFAULT',    'DEFINER',    'DELAYED',    'DELAY_KEY_WRITE',    'DELETE',    'DESC',    'DESCRIBE',    'DES_KEY_FILE',    'DETERMINISTIC',    'DIRECTORY',    'DISABLE',    'DISCARD',    'DISTINCT',    'DISTINCTROW',    'DIV',    'DO',    'DOUBLE',    'DROP',    'DUAL',    'DUMPFILE',    'DUPLICATE',    'DYNAMIC',    'EACH',    'ELSE',    'ELSEIF',    'ENABLE',    'ENCLOSED',    'END',    'ENGINE',    'ENGINES',    'ENUM',    'ERRORS',    'ESCAPE',    'ESCAPED',    'EVENTS',    'EXECUTE',    'EXISTS',    'EXIT',    'EXPANSION',    'EXPLAIN',    'EXTENDED',    'FALSE',    'FAST',    'FETCH',    'FIELDS',    'FILE',    'FIRST',    'FIXED',    'FLOAT',    'FLOAT4',    'FLOAT8',    'FLUSH',    'FOR',    'FORCE',    'FOREIGN',    'FOUND',    'FRAC_SECOND',    'FROM',    'FULL',    'FULLTEXT',    'FUNCTION',    'GEOMETRY',    'GEOMETRYCOLLECTION',    'GET_FORMAT',    'GLOBAL',    'GOTO',    'GRANT',    'GRANTS',    'GROUP',    'HANDLER',    'HASH',    'HAVING',    'HELP',    'HIGH_PRIORITY',    'HOSTS',    'HOUR',    'HOUR_MICROSECOND',    'HOUR_MINUTE',    'HOUR_SECOND',    'IDENTIFIED',    'IF',    'IGNORE',    'IMPORT',    'IN',    'INDEX',    'INDEXES',    'INFILE',    'INNER',    'INNOBASE',    'INNODB',    'INOUT',    'INSENSITIVE',    'INSERT',    'INSERT_METHOD',    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'INTERVAL',    'INTO',    'INVOKER',    'IO_THREAD',    'IS',    'ISOLATION',    'ISSUER',    'ITERATE',    'JOIN',    'KEY',    'KEYS',    'KILL',    'LABEL',    'LANGUAGE',    'LAST',    'LEADING',    'LEAVE',    'LEAVES',    'LEFT',    'LIKE',    'LIMIT',    'LINEAR',               // 5.1    'LINES',    'LINESTRING',    'LOAD',    'LOCAL',    'LOCALTIME',    'LOCALTIMESTAMP',    'LOCK',    'LOCKS',    'LOGS',    'LONG',    'LONGBLOB',    'LONGTEXT',    'LOOP',    'LOW_PRIORITY',    'MASTER',    'MASTER_CONNECT_RETRY',    'MASTER_HOST',    'MASTER_LOG_FILE',    'MASTER_LOG_POS',    'MASTER_PASSWORD',    'MASTER_PORT',    'MASTER_SERVER_ID',    'MASTER_SSL',    'MASTER_SSL_CA',    'MASTER_SSL_CAPATH',    'MASTER_SSL_CERT',    'MASTER_SSL_CIPHER',    'MASTER_SSL_KEY',    'MASTER_USER',    'MATCH',    'MAX_CONNECTIONS_PER_HOUR',    'MAX_QUERIES_PER_HOUR',    'MAX_ROWS',    'MAX_UPDATES_PER_HOUR',    'MAX_USER_CONNECTIONS',    'MEDIUM',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MERGE',    'MICROSECOND',    'MIDDLEINT',    'MIGRATE',    'MINUTE',    'MINUTE_MICROSECOND',    'MINUTE_SECOND',    'MIN_ROWS',    'MOD',    'MODE',    'MODIFIES',    'MODIFY',    'MONTH',    'MULTILINESTRING',    'MULTIPOINT',    'MULTIPOLYGON',    'MUTEX',    'NAME',    'NAMES',    'NATIONAL',    'NATURAL',    'NCHAR',    'NDB',    'NDBCLUSTER',    'NEW',    'NEXT',    'NO',    'NONE',    'NOT',    'NO_WRITE_TO_BINLOG',    'NULL',    'NUMERIC',    'NVARCHAR',    'OFFSET',    'OLD_PASSWORD',    'ON',    'ONE',    'ONE_SHOT',    'OPEN',    'OPTIMIZE',    'OPTION',    'OPTIONALLY',    'OR',    'ORDER',    'OUT',    'OUTER',    'OUTFILE',    'PACK_KEYS',    'PARTIAL',    'PASSWORD',    'PHASE',    'POINT',    'POLYGON',    'PRECISION',    'PREPARE',    'PREV',    'PRIMARY',    'PRIVILEGES',    'PROCEDURE',    'PROCESSLIST',    'PURGE',    'QUARTER',    'QUERY',    'QUICK',    'RAID0',    'RAID_CHUNKS',    'RAID_CHUNKSIZE',    'RAID_TYPE',    'RANGE',                // 5.1    'READ',    'READS',    'READ_ONLY',            // 5.1    'READ_WRITE',           // 5.1    'REAL',    'RECOVER',    'REDUNDANT',    'REFERENCES',    'REGEXP',    'RELAY_LOG_FILE',    'RELAY_LOG_POS',    'RELAY_THREAD',    'RELEASE',    'RELOAD',    'RENAME',    'REPAIR',    'REPEAT',    'REPEATABLE',    'REPLACE',    'REPLICATION',    'REQUIRE',    'RESET',    'RESTORE',    'RESTRICT',    'RESUME',    'RETURN',    'RETURNS',    'REVOKE',    'RIGHT',    'RLIKE',    'ROLLBACK',    'ROLLUP',    'ROUTINE',    'ROW',    'ROWS',    'ROW_FORMAT',    'RTREE',    'SAVEPOINT',    'SCHEMA',    'SCHEMAS',    'SECOND',    'SECOND_MICROSECOND',    'SECURITY',    'SELECT',    'SENSITIVE',    'SEPARATOR',    'SERIAL',    'SERIALIZABLE',    'SESSION',    'SET',    'SHARE',    'SHOW',    'SHUTDOWN',    'SIGNED',    'SIMPLE',    'SLAVE',    'SMALLINT',    'SNAPSHOT',    'SOME',    'SONAME',    'SOUNDS',    'SPATIAL',    'SPECIFIC',    'SQL',    'SQLEXCEPTION',    'SQLSTATE',    'SQLWARNING',    'SQL_BIG_RESULT',    'SQL_BUFFER_RESULT',    'SQL_CACHE',    'SQL_CALC_FOUND_ROWS',    'SQL_NO_CACHE',    'SQL_SMALL_RESULT',    'SQL_THREAD',    'SQL_TSI_DAY',    'SQL_TSI_FRAC_SECOND',    'SQL_TSI_HOUR',    'SQL_TSI_MINUTE',    'SQL_TSI_MONTH',    'SQL_TSI_QUARTER',    'SQL_TSI_SECOND',    'SQL_TSI_WEEK',    'SQL_TSI_YEAR',    'SSL',    'START',    'STARTING',    'STATUS',    'STOP',    'STORAGE',    'STRAIGHT_JOIN',    'STRING',    'STRIPED',    'SUBJECT',    'SUPER',    'SUSPEND',    'TABLE',    'TABLES',    'TABLESPACE',    'TEMPORARY',    'TEMPTABLE',    'TERMINATED',    'TEXT',    'THEN',    'TIME',    'TIMESTAMP',    'TIMESTAMPADD',    'TIMESTAMPDIFF',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'TO',    'TRAILING',    'TRANSACTION',    'TRIGGER',    'TRIGGERS',    'TRUE',    'TRUNCATE',    'TYPE',    'TYPES',    'UNCOMMITTED',    'UNDEFINED',    'UNDO',    'UNICODE',    'UNION',    'UNIQUE',    'UNKNOWN',    'UNLOCK',    'UNSIGNED',    'UNTIL',    'UPDATE',    'USAGE',    'USE',    'USER',    'USER_RESOURCES',    'USE_FRM',    'USING',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'VALUE',    'VALUES',    'VARBINARY',    'VARCHAR',    'VARCHARACTER',    'VARIABLES',    'VARYING',    'VIEW',    'WARNINGS',    'WEEK',    'WHEN',    'WHERE',    'WHILE',    'WITH',    'WORK',    'WRITE',    'X509',    'XA',    'XOR',    'YEAR',    'YEAR_MONTH',    'ZEROFILL');/** * the MySQL column/data types * * @see http://dev.mysql.com/doc/refman/5.1/en/data-types.html * @see http://dev.mysql.com/doc/refman/5.1/en/mysql-spatial-datatypes.html * * @global array MySQL column types */$PMA_SQPdata_column_type = array (    'BIGINT',    'BINARY',    'BIT',    'BLOB',    'BOOL',    'BOOLEAN',              // numeric-type-overview.html    'CHAR',    'CHARACTER',    'DATE',    'DATETIME',    'DEC',    'DECIMAL',    'DOUBLE',    'ENUM',    'FLOAT',    'FLOAT4',    'FLOAT8',    'GEOMETRY',             // spatial    'GEOMETRYCOLLECTION',   // spatial    'INT',    'INT1',    'INT2',    'INT3',    'INT4',    'INT8',    'INTEGER',    'LINESTRING',           // spatial    'LONG',    'LONGBLOB',    'LONGTEXT',    'MEDIUMBLOB',    'MEDIUMINT',    'MEDIUMTEXT',    'MIDDLEINT',    'MULTILINESTRING',      // spatial    'MULTIPOINT',           // spatial    'MULTIPOLYGON',         // spatial    'NCHAR',    'NUMERIC',    'POINT',                // spatial    'POLYGON',              // spatial    'REAL',    'SERIAL',               // alias for BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY    'SET',    'SMALLINT',    'TEXT',    'TIME',    'TIMESTAMP',    'TINYBLOB',    'TINYINT',    'TINYTEXT',    'VARBINARY',    'VARCHAR',    'YEAR');/** * Documentation links for operators. */$PMA_SQPdata_operators_docs = array(   '!=' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '<>' => array('link' => 'comparison-operators','anchor' => 'operator_not-equal'),   '!' => array('link' => 'logical-operators','anchor' => 'operator_not'),   '||' => array('link' => 'logical-operators','anchor' => 'operator_or'),   '+' => array('link' => 'arithmetic-functions','anchor' => 'operator_plus'),   '>>' => array('link' => 'bit-functions','anchor' => 'operator_right-shift'),   '-' => array('link' => 'arithmetic-functions','anchor' => 'operator_minus'),   '*' => array('link' => 'arithmetic-functions','anchor' => 'operator_times'),   '&&' => array('link' => 'logical-operators','anchor' => 'operator_and'),   '&' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-and'),   '~' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-invert'),   '|' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-or'),   '^' => array('link' => 'bit-functions','anchor' => 'operator_bitwise-xor'),   '=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-equal'),   ':=' => array('link' => 'assignment-operators','anchor' => 'operator_assign-value'),   '/' => array('link' => 'arithmetic-functions','anchor' => 'operator_divide'),   '<=>' => array('link' => 'comparison-operators','anchor' => 'operator_equal-to'),   '=' => array('link' => 'comparison-operators','anchor' => 'operator_equal'),   '>=' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than-or-equal'),   '>' => array('link' => 'comparison-operators','anchor' => 'operator_greater-than'),   '<<' => array('link' => 'bit-functions','anchor' => 'operator_left-shift'),   '<=' => array('link' => 'comparison-operators','anchor' => 'operator_less-than-or-equal'),   '<' => array('link' => 'comparison-operators','anchor' => 'operator_less-than'),   '%' => array('link' => 'arithmetic-functions','anchor' => 'operator_mod'));/** * Documentation links for functions. */$PMA_SQPdata_functions_docs = array(   'ABS' => array('link' => 'mathematical-functions','anchor' => 'function_abs'),   'ACOS' => array('link' => 'mathematical-functions','anchor' => 'function_acos'),   'ADDDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_adddate'),   'ADDTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_addtime'),   'AES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_decrypt'),   'AES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_aes_encrypt'),   'AND' => array('link' => 'logical-operators','anchor' => 'operator_and'),   'ASCII' => array('link' => 'string-functions','anchor' => 'function_ascii'),   'ASIN' => array('link' => 'mathematical-functions','anchor' => 'function_asin'),   'ATAN2' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan2'),   'ATAN' => array('link' => 'mathematical-functions','anchor' => 'function_atan'),   'AVG' => array('link' => 'group-by-functions','anchor' => 'function_avg'),   'BENCHMARK' => array('link' => 'information-functions','anchor' => 'function_benchmark'),   'BIN' => array('link' => 'string-functions','anchor' => 'function_bin'),   'BINARY' => array('link' => 'cast-functions','anchor' => 'operator_binary'),   'BIT_AND' => array('link' => 'group-by-functions','anchor' => 'function_bit_and'),   'BIT_COUNT' => array('link' => 'bit-functions','anchor' => 'function_bit_count'),   'BIT_LENGTH' => array('link' => 'string-functions','anchor' => 'function_bit_length'),   'BIT_OR' => array('link' => 'group-by-functions','anchor' => 'function_bit_or'),   'BIT_XOR' => array('link' => 'group-by-functions','anchor' => 'function_bit_xor'),   'CASE' => array('link' => 'control-flow-functions','anchor' => 'operator_case'),   'CAST' => array('link' => 'cast-functions','anchor' => 'function_cast'),   'CEIL' => array('link' => 'mathematical-functions','anchor' => 'function_ceil'),   'CEILING' => array('link' => 'mathematical-functions','anchor' => 'function_ceiling'),   'CHAR_LENGTH' => array('link' => 'string-functions','anchor' => 'function_char_length'),   'CHAR' => array('link' => 'string-functions','anchor' => 'function_char'),   'CHARACTER_LENGTH' => array('link' => 'string-functions','anchor' => 'function_character_length'),   'CHARSET' => array('link' => 'information-functions','anchor' => 'function_charset'),   'COALESCE' => array('link' => 'comparison-operators','anchor' => 'function_coalesce'),   'COERCIBILITY' => array('link' => 'information-functions','anchor' => 'function_coercibility'),   'COLLATION' => array('link' => 'information-functions','anchor' => 'function_collation'),   'COMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_compress'),   'CONCAT_WS' => array('link' => 'string-functions','anchor' => 'function_concat_ws'),   'CONCAT' => array('link' => 'string-functions','anchor' => 'function_concat'),   'CONNECTION_ID' => array('link' => 'information-functions','anchor' => 'function_connection_id'),   'CONV' => array('link' => 'mathematical-functions','anchor' => 'function_conv'),   'CONVERT_TZ' => array('link' => 'date-and-time-functions','anchor' => 'function_convert_tz'),   'Convert' => array('link' => 'cast-functions','anchor' => 'function_convert'),   'COS' => array('link' => 'mathematical-functions','anchor' => 'function_cos'),   'COT' => array('link' => 'mathematical-functions','anchor' => 'function_cot'),   'COUNT' => array('link' => 'group-by-functions','anchor' => 'function_count'),   'CRC32' => array('link' => 'mathematical-functions','anchor' => 'function_crc32'),   'CURDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_curdate'),   'CURRENT_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_current_date'),   'CURRENT_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_current_time'),   'CURRENT_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_current_timestamp'),   'CURRENT_USER' => array('link' => 'information-functions','anchor' => 'function_current_user'),   'CURTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_curtime'),   'DATABASE' => array('link' => 'information-functions','anchor' => 'function_database'),   'DATE_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_date_add'),   'DATE_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_date_format'),   'DATE_SUB' => array('link' => 'date-and-time-functions','anchor' => 'function_date_sub'),   'DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_date'),   'DATEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_datediff'),   'DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_day'),   'DAYNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_dayname'),   'DAYOFMONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofmonth'),   'DAYOFWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofweek'),   'DAYOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_dayofyear'),   'DECLARE' => array('link' => 'declare', 'anchor' => 'declare'),   'DECODE' => array('link' => 'encryption-functions','anchor' => 'function_decode'),   'DEFAULT' => array('link' => 'miscellaneous-functions','anchor' => 'function_default'),   'DEGREES' => array('link' => 'mathematical-functions','anchor' => 'function_degrees'),   'DES_DECRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_decrypt'),   'DES_ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_des_encrypt'),   'DIV' => array('link' => 'arithmetic-functions','anchor' => 'operator_div'),   'ELT' => array('link' => 'string-functions','anchor' => 'function_elt'),   'ENCODE' => array('link' => 'encryption-functions','anchor' => 'function_encode'),   'ENCRYPT' => array('link' => 'encryption-functions','anchor' => 'function_encrypt'),   'EXP' => array('link' => 'mathematical-functions','anchor' => 'function_exp'),   'EXPORT_SET' => array('link' => 'string-functions','anchor' => 'function_export_set'),   'EXTRACT' => array('link' => 'date-and-time-functions','anchor' => 'function_extract'),   'ExtractValue' => array('link' => 'xml-functions','anchor' => 'function_extractvalue'),   'FIELD' => array('link' => 'string-functions','anchor' => 'function_field'),   'FIND_IN_SET' => array('link' => 'string-functions','anchor' => 'function_find_in_set'),   'FLOOR' => array('link' => 'mathematical-functions','anchor' => 'function_floor'),   'FORMAT' => array('link' => 'string-functions','anchor' => 'function_format'),   'FOUND_ROWS' => array('link' => 'information-functions','anchor' => 'function_found_rows'),   'FROM_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_from_days'),   'FROM_UNIXTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_from_unixtime'),   'GET_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_get_format'),   'GET_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_get_lock'),   'GREATEST' => array('link' => 'comparison-operators','anchor' => 'function_greatest'),   'GROUP_CONCAT' => array('link' => 'group-by-functions','anchor' => 'function_group_concat'),   'HEX' => array('link' => 'string-functions','anchor' => 'function_hex'),   'HOUR' => array('link' => 'date-and-time-functions','anchor' => 'function_hour'),   'IF' => array('link' => 'control-flow-functions','anchor' => 'function_if'),   'IFNULL' => array('link' => 'control-flow-functions','anchor' => 'function_ifnull'),   'IN' => array('link' => 'comparison-operators','anchor' => 'function_in'),   'INET_ATON' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_aton'),   'INET_NTOA' => array('link' => 'miscellaneous-functions','anchor' => 'function_inet_ntoa'),   'INSERT' => array('link' => 'string-functions','anchor' => 'function_insert'),   'INSTR' => array('link' => 'string-functions','anchor' => 'function_instr'),   'INTERVAL' => array('link' => 'comparison-operators','anchor' => 'function_interval'),   'IS_FREE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_free_lock'),   'IS_USED_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_is_used_lock'),   'IS' => array('link' => 'comparison-operators','anchor' => 'operator_is'),   'ISNULL' => array('link' => 'comparison-operators','anchor' => 'function_isnull'),   'LAST_DAY' => array('link' => 'date-and-time-functions','anchor' => 'function_last_day'),   'LAST_INSERT_ID' => array('link' => 'information-functions','anchor' => 'function_last_insert_id'),   'LCASE' => array('link' => 'string-functions','anchor' => 'function_lcase'),   'LEAST' => array('link' => 'comparison-operators','anchor' => 'function_least'),   'LEFT' => array('link' => 'string-functions','anchor' => 'function_left'),   'LENGTH' => array('link' => 'string-functions','anchor' => 'function_length'),   'LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_like'),   'LN' => array('link' => 'mathematical-functions','anchor' => 'function_ln'),   'LOAD_FILE' => array('link' => 'string-functions','anchor' => 'function_load_file'),   'LOCALTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_localtime'),   'LOCALTIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_localtimestamp'),   'LOCATE' => array('link' => 'string-functions','anchor' => 'function_locate'),   'LOG10' => array('link' => 'mathematical-functions','anchor' => 'function_log10'),   'LOG2' => array('link' => 'mathematical-functions','anchor' => 'function_log2'),   'LOG' => array('link' => 'mathematical-functions','anchor' => 'function_log'),   'LOWER' => array('link' => 'string-functions','anchor' => 'function_lower'),   'LPAD' => array('link' => 'string-functions','anchor' => 'function_lpad'),   'LTRIM' => array('link' => 'string-functions','anchor' => 'function_ltrim'),   'MAKE_SET' => array('link' => 'string-functions','anchor' => 'function_make_set'),   'MAKEDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_makedate'),   'MAKETIME' => array('link' => 'date-and-time-functions','anchor' => 'function_maketime'),   'MASTER_POS_WAIT' => array('link' => 'miscellaneous-functions','anchor' => 'function_master_pos_wait'),   'MATCH' => array('link' => 'fulltext-search','anchor' => 'function_match'),   'MAX' => array('link' => 'group-by-functions','anchor' => 'function_max'),   'MD5' => array('link' => 'encryption-functions','anchor' => 'function_md5'),   'MICROSECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_microsecond'),   'MID' => array('link' => 'string-functions','anchor' => 'function_mid'),   'MIN' => array('link' => 'group-by-functions','anchor' => 'function_min'),   'MINUTE' => array('link' => 'date-and-time-functions','anchor' => 'function_minute'),   'MOD' => array('link' => 'mathematical-functions','anchor' => 'function_mod'),   'MONTH' => array('link' => 'date-and-time-functions','anchor' => 'function_month'),   'MONTHNAME' => array('link' => 'date-and-time-functions','anchor' => 'function_monthname'),   'NAME_CONST' => array('link' => 'miscellaneous-functions','anchor' => 'function_name_const'),   'NOT' => array('link' => 'logical-operators','anchor' => 'operator_not'),   'NOW' => array('link' => 'date-and-time-functions','anchor' => 'function_now'),   'NULLIF' => array('link' => 'control-flow-functions','anchor' => 'function_nullif'),   'OCT' => array('link' => 'mathematical-functions','anchor' => 'function_oct'),   'OCTET_LENGTH' => array('link' => 'string-functions','anchor' => 'function_octet_length'),   'OLD_PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_old_password'),   'OR' => array('link' => 'logical-operators','anchor' => 'operator_or'),   'ORD' => array('link' => 'string-functions','anchor' => 'function_ord'),   'PASSWORD' => array('link' => 'encryption-functions','anchor' => 'function_password'),   'PERIOD_ADD' => array('link' => 'date-and-time-functions','anchor' => 'function_period_add'),   'PERIOD_DIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_period_diff'),   'PI' => array('link' => 'mathematical-functions','anchor' => 'function_pi'),   'POSITION' => array('link' => 'string-functions','anchor' => 'function_position'),   'POW' => array('link' => 'mathematical-functions','anchor' => 'function_pow'),   'POWER' => array('link' => 'mathematical-functions','anchor' => 'function_power'),   'QUARTER' => array('link' => 'date-and-time-functions','anchor' => 'function_quarter'),   'QUOTE' => array('link' => 'string-functions','anchor' => 'function_quote'),   'RADIANS' => array('link' => 'mathematical-functions','anchor' => 'function_radians'),   'RAND' => array('link' => 'mathematical-functions','anchor' => 'function_rand'),   'REGEXP' => array('link' => 'regexp','anchor' => 'operator_regexp'),   'RELEASE_LOCK' => array('link' => 'miscellaneous-functions','anchor' => 'function_release_lock'),   'REPEAT' => array('link' => 'string-functions','anchor' => 'function_repeat'),   'REPLACE' => array('link' => 'string-functions','anchor' => 'function_replace'),   'REVERSE' => array('link' => 'string-functions','anchor' => 'function_reverse'),   'RIGHT' => array('link' => 'string-functions','anchor' => 'function_right'),   'RLIKE' => array('link' => 'regexp','anchor' => 'operator_rlike'),   'ROUND' => array('link' => 'mathematical-functions','anchor' => 'function_round'),   'ROW_COUNT' => array('link' => 'information-functions','anchor' => 'function_row_count'),   'RPAD' => array('link' => 'string-functions','anchor' => 'function_rpad'),   'RTRIM' => array('link' => 'string-functions','anchor' => 'function_rtrim'),   'SCHEMA' => array('link' => 'information-functions','anchor' => 'function_schema'),   'SEC_TO_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_sec_to_time'),   'SECOND' => array('link' => 'date-and-time-functions','anchor' => 'function_second'),   'SESSION_USER' => array('link' => 'information-functions','anchor' => 'function_session_user'),   'SHA' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SHA1' => array('link' => 'encryption-functions','anchor' => 'function_sha1'),   'SIGN' => array('link' => 'mathematical-functions','anchor' => 'function_sign'),   'SIN' => array('link' => 'mathematical-functions','anchor' => 'function_sin'),   'SLEEP' => array('link' => 'miscellaneous-functions','anchor' => 'function_sleep'),   'SOUNDEX' => array('link' => 'string-functions','anchor' => 'function_soundex'),   'SPACE' => array('link' => 'string-functions','anchor' => 'function_space'),   'SQRT' => array('link' => 'mathematical-functions','anchor' => 'function_sqrt'),   'STD' => array('link' => 'group-by-functions','anchor' => 'function_std'),   'STDDEV_POP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_pop'),   'STDDEV_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_stddev_samp'),   'STDDEV' => array('link' => 'group-by-functions','anchor' => 'function_stddev'),   'STR_TO_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_str_to_date'),   'STRCMP' => array('link' => 'string-comparison-functions','anchor' => 'function_strcmp'),   'SUBDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_subdate'),   'SUBSTR' => array('link' => 'string-functions','anchor' => 'function_substr'),   'SUBSTRING_INDEX' => array('link' => 'string-functions','anchor' => 'function_substring_index'),   'SUBSTRING' => array('link' => 'string-functions','anchor' => 'function_substring'),   'SUBTIME' => array('link' => 'date-and-time-functions','anchor' => 'function_subtime'),   'SUM' => array('link' => 'group-by-functions','anchor' => 'function_sum'),   'SYSDATE' => array('link' => 'date-and-time-functions','anchor' => 'function_sysdate'),   'SYSTEM_USER' => array('link' => 'information-functions','anchor' => 'function_system_user'),   'TAN' => array('link' => 'mathematical-functions','anchor' => 'function_tan'),   'TIME_FORMAT' => array('link' => 'date-and-time-functions','anchor' => 'function_time_format'),   'TIME_TO_SEC' => array('link' => 'date-and-time-functions','anchor' => 'function_time_to_sec'),   'TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_time'),   'TIMEDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timediff'),   'TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_timestamp'),   'TIMESTAMPADD' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampadd'),   'TIMESTAMPDIFF' => array('link' => 'date-and-time-functions','anchor' => 'function_timestampdiff'),   'TO_DAYS' => array('link' => 'date-and-time-functions','anchor' => 'function_to_days'),   'TRIM' => array('link' => 'string-functions','anchor' => 'function_trim'),   'TRUNCATE' => array('link' => 'mathematical-functions','anchor' => 'function_truncate'),   'UCASE' => array('link' => 'string-functions','anchor' => 'function_ucase'),   'UNCOMPRESS' => array('link' => 'encryption-functions','anchor' => 'function_uncompress'),   'UNCOMPRESSED_LENGTH' => array('link' => 'encryption-functions','anchor' => 'function_uncompressed_length'),   'UNHEX' => array('link' => 'string-functions','anchor' => 'function_unhex'),   'UNIX_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_unix_timestamp'),   'UpdateXML' => array('link' => 'xml-functions','anchor' => 'function_updatexml'),   'UPPER' => array('link' => 'string-functions','anchor' => 'function_upper'),   'USER' => array('link' => 'information-functions','anchor' => 'function_user'),   'UTC_DATE' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_date'),   'UTC_TIME' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_time'),   'UTC_TIMESTAMP' => array('link' => 'date-and-time-functions','anchor' => 'function_utc_timestamp'),   'UUID_SHORT' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid_short'),   'UUID' => array('link' => 'miscellaneous-functions','anchor' => 'function_uuid'),   'VALUES' => array('link' => 'miscellaneous-functions','anchor' => 'function_values'),   'VAR_POP' => array('link' => 'group-by-functions','anchor' => 'function_var_pop'),   'VAR_SAMP' => array('link' => 'group-by-functions','anchor' => 'function_var_samp'),   'VARIANCE' => array('link' => 'group-by-functions','anchor' => 'function_variance'),   'VERSION' => array('link' => 'information-functions','anchor' => 'function_version'),   'WEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_week'),   'WEEKDAY' => array('link' => 'date-and-time-functions','anchor' => 'function_weekday'),   'WEEKOFYEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_weekofyear'),   'XOR' => array('link' => 'logical-operators','anchor' => 'operator_xor'),   'YEAR' => array('link' => 'date-and-time-functions','anchor' => 'function_year'),   'YEARWEEK' => array('link' => 'date-and-time-functions','anchor' => 'function_yearweek'),   'SOUNDS_LIKE' => array('link' => 'string-functions','anchor' => 'operator_sounds-like'),   'IS_NOT_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-not-null'),   'IS_NOT' => array('link' => 'comparison-operators','anchor' => 'operator_is-not'),   'IS_NULL' => array('link' => 'comparison-operators','anchor' => 'operator_is-null'),   'NOT_LIKE' => array('link' => 'string-comparison-functions','anchor' => 'operator_not-like'),   'NOT_REGEXP' => array('link' => 'regexp','anchor' => 'operator_not-regexp'),   'COUNT_DISTINCT' => array('link' => 'group-by-functions','anchor' => 'function_count-distinct'),   'NOT_IN' => array('link' => 'comparison-operators','anchor' => 'function_not-in'));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * The Horde_Cipher_Blowfish:: class implements the Horde_Cipher interface * encryption data using the Blowfish algorithm. * * Copyright 2002-2009 The Horde Project (http://www.horde.org/) * * See the enclosed file COPYING for license information (LGPL). If you * did not receive this file, see http://www.fsf.org/copyleft/lgpl.html. * * @author  Mike Cochrane <mike@graftonhall.co.nz> * @package Horde_Cipher */class Horde_Cipher_blowfish{    /**     * Pi Array     *     * @var array     */    protected $p = array(            0x243F6A88, 0x85A308D3, 0x13198A2E, 0x03707344,            0xA4093822, 0x299F31D0, 0x082EFA98, 0xEC4E6C89,            0x452821E6, 0x38D01377, 0xBE5466CF, 0x34E90C6C,            0xC0AC29B7, 0xC97C50DD, 0x3F84D5B5, 0xB5470917,            0x9216D5D9, 0x8979FB1B);    /**     * S Box (s1)     *     * @var array     */    protected $s1 = array(            0xD1310BA6, 0x98DFB5AC, 0x2FFD72DB, 0xD01ADFB7,            0xB8E1AFED, 0x6A267E96, 0xBA7C9045, 0xF12C7F99,            0x24A19947, 0xB3916CF7, 0x0801F2E2, 0x858EFC16,            0x636920D8, 0x71574E69, 0xA458FEA3, 0xF4933D7E,            0x0D95748F, 0x728EB658, 0x718BCD58, 0x82154AEE,            0x7B54A41D, 0xC25A59B5, 0x9C30D539, 0x2AF26013,            0xC5D1B023, 0x286085F0, 0xCA417918, 0xB8DB38EF,            0x8E79DCB0, 0x603A180E, 0x6C9E0E8B, 0xB01E8A3E,            0xD71577C1, 0xBD314B27, 0x78AF2FDA, 0x55605C60,            0xE65525F3, 0xAA55AB94, 0x57489862, 0x63E81440,            0x55CA396A, 0x2AAB10B6, 0xB4CC5C34, 0x1141E8CE,            0xA15486AF, 0x7C72E993, 0xB3EE1411, 0x636FBC2A,            0x2BA9C55D, 0x741831F6, 0xCE5C3E16, 0x9B87931E,            0xAFD6BA33, 0x6C24CF5C, 0x7A325381, 0x28958677,            0x3B8F4898, 0x6B4BB9AF, 0xC4BFE81B, 0x66282193,            0x61D809CC, 0xFB21A991, 0x487CAC60, 0x5DEC8032,            0xEF845D5D, 0xE98575B1, 0xDC262302, 0xEB651B88,            0x23893E81, 0xD396ACC5, 0x0F6D6FF3, 0x83F44239,            0x2E0B4482, 0xA4842004, 0x69C8F04A, 0x9E1F9B5E,            0x21C66842, 0xF6E96C9A, 0x670C9C61, 0xABD388F0,            0x6A51A0D2, 0xD8542F68, 0x960FA728, 0xAB5133A3,            0x6EEF0B6C, 0x137A3BE4, 0xBA3BF050, 0x7EFB2A98,            0xA1F1651D, 0x39AF0176, 0x66CA593E, 0x82430E88,            0x8CEE8619, 0x456F9FB4, 0x7D84A5C3, 0x3B8B5EBE,            0xE06F75D8, 0x85C12073, 0x401A449F, 0x56C16AA6,            0x4ED3AA62, 0x363F7706, 0x1BFEDF72, 0x429B023D,            0x37D0D724, 0xD00A1248, 0xDB0FEAD3, 0x49F1C09B,            0x075372C9, 0x80991B7B, 0x25D479D8, 0xF6E8DEF7,            0xE3FE501A, 0xB6794C3B, 0x976CE0BD, 0x04C006BA,            0xC1A94FB6, 0x409F60C4, 0x5E5C9EC2, 0x196A2463,            0x68FB6FAF, 0x3E6C53B5, 0x1339B2EB, 0x3B52EC6F,            0x6DFC511F, 0x9B30952C, 0xCC814544, 0xAF5EBD09,            0xBEE3D004, 0xDE334AFD, 0x660F2807, 0x192E4BB3,            0xC0CBA857, 0x45C8740F, 0xD20B5F39, 0xB9D3FBDB,            0x5579C0BD, 0x1A60320A, 0xD6A100C6, 0x402C7279,            0x679F25FE, 0xFB1FA3CC, 0x8EA5E9F8, 0xDB3222F8,            0x3C7516DF, 0xFD616B15, 0x2F501EC8, 0xAD0552AB,            0x323DB5FA, 0xFD238760, 0x53317B48, 0x3E00DF82,            0x9E5C57BB, 0xCA6F8CA0, 0x1A87562E, 0xDF1769DB,            0xD542A8F6, 0x287EFFC3, 0xAC6732C6, 0x8C4F5573,            0x695B27B0, 0xBBCA58C8, 0xE1FFA35D, 0xB8F011A0,            0x10FA3D98, 0xFD2183B8, 0x4AFCB56C, 0x2DD1D35B,            0x9A53E479, 0xB6F84565, 0xD28E49BC, 0x4BFB9790,            0xE1DDF2DA, 0xA4CB7E33, 0x62FB1341, 0xCEE4C6E8,            0xEF20CADA, 0x36774C01, 0xD07E9EFE, 0x2BF11FB4,            0x95DBDA4D, 0xAE909198, 0xEAAD8E71, 0x6B93D5A0,            0xD08ED1D0, 0xAFC725E0, 0x8E3C5B2F, 0x8E7594B7,            0x8FF6E2FB, 0xF2122B64, 0x8888B812, 0x900DF01C,            0x4FAD5EA0, 0x688FC31C, 0xD1CFF191, 0xB3A8C1AD,            0x2F2F2218, 0xBE0E1777, 0xEA752DFE, 0x8B021FA1,            0xE5A0CC0F, 0xB56F74E8, 0x18ACF3D6, 0xCE89E299,            0xB4A84FE0, 0xFD13E0B7, 0x7CC43B81, 0xD2ADA8D9,            0x165FA266, 0x80957705, 0x93CC7314, 0x211A1477,            0xE6AD2065, 0x77B5FA86, 0xC75442F5, 0xFB9D35CF,            0xEBCDAF0C, 0x7B3E89A0, 0xD6411BD3, 0xAE1E7E49,            0x00250E2D, 0x2071B35E, 0x226800BB, 0x57B8E0AF,            0x2464369B, 0xF009B91E, 0x5563911D, 0x59DFA6AA,            0x78C14389, 0xD95A537F, 0x207D5BA2, 0x02E5B9C5,            0x83260376, 0x6295CFA9, 0x11C81968, 0x4E734A41,            0xB3472DCA, 0x7B14A94A, 0x1B510052, 0x9A532915,            0xD60F573F, 0xBC9BC6E4, 0x2B60A476, 0x81E67400,            0x08BA6FB5, 0x571BE91F, 0xF296EC6B, 0x2A0DD915,            0xB6636521, 0xE7B9F9B6, 0xFF34052E, 0xC5855664,            0x53B02D5D, 0xA99F8FA1, 0x08BA4799, 0x6E85076A);    /**     * S Box (s2)     *     * @var array     */    protected $s2 = array(            0x4B7A70E9, 0xB5B32944, 0xDB75092E, 0xC4192623,            0xAD6EA6B0, 0x49A7DF7D, 0x9CEE60B8, 0x8FEDB266,            0xECAA8C71, 0x699A17FF, 0x5664526C, 0xC2B19EE1,            0x193602A5, 0x75094C29, 0xA0591340, 0xE4183A3E,            0x3F54989A, 0x5B429D65, 0x6B8FE4D6, 0x99F73FD6,            0xA1D29C07, 0xEFE830F5, 0x4D2D38E6, 0xF0255DC1,            0x4CDD2086, 0x8470EB26, 0x6382E9C6, 0x021ECC5E,            0x09686B3F, 0x3EBAEFC9, 0x3C971814, 0x6B6A70A1,            0x687F3584, 0x52A0E286, 0xB79C5305, 0xAA500737,            0x3E07841C, 0x7FDEAE5C, 0x8E7D44EC, 0x5716F2B8,            0xB03ADA37, 0xF0500C0D, 0xF01C1F04, 0x0200B3FF,            0xAE0CF51A, 0x3CB574B2, 0x25837A58, 0xDC0921BD,            0xD19113F9, 0x7CA92FF6, 0x94324773, 0x22F54701,            0x3AE5E581, 0x37C2DADC, 0xC8B57634, 0x9AF3DDA7,            0xA9446146, 0x0FD0030E, 0xECC8C73E, 0xA4751E41,            0xE238CD99, 0x3BEA0E2F, 0x3280BBA1, 0x183EB331,            0x4E548B38, 0x4F6DB908, 0x6F420D03, 0xF60A04BF,            0x2CB81290, 0x24977C79, 0x5679B072, 0xBCAF89AF,            0xDE9A771F, 0xD9930810, 0xB38BAE12, 0xDCCF3F2E,            0x5512721F, 0x2E6B7124, 0x501ADDE6, 0x9F84CD87,            0x7A584718, 0x7408DA17, 0xBC9F9ABC, 0xE94B7D8C,            0xEC7AEC3A, 0xDB851DFA, 0x63094366, 0xC464C3D2,            0xEF1C1847, 0x3215D908, 0xDD433B37, 0x24C2BA16,            0x12A14D43, 0x2A65C451, 0x50940002, 0x133AE4DD,            0x71DFF89E, 0x10314E55, 0x81AC77D6, 0x5F11199B,            0x043556F1, 0xD7A3C76B, 0x3C11183B, 0x5924A509,            0xF28FE6ED, 0x97F1FBFA, 0x9EBABF2C, 0x1E153C6E,            0x86E34570, 0xEAE96FB1, 0x860E5E0A, 0x5A3E2AB3,            0x771FE71C, 0x4E3D06FA, 0x2965DCB9, 0x99E71D0F,            0x803E89D6, 0x5266C825, 0x2E4CC978, 0x9C10B36A,            0xC6150EBA, 0x94E2EA78, 0xA5FC3C53, 0x1E0A2DF4,            0xF2F74EA7, 0x361D2B3D, 0x1939260F, 0x19C27960,            0x5223A708, 0xF71312B6, 0xEBADFE6E, 0xEAC31F66,            0xE3BC4595, 0xA67BC883, 0xB17F37D1, 0x018CFF28,            0xC332DDEF, 0xBE6C5AA5, 0x65582185, 0x68AB9802,            0xEECEA50F, 0xDB2F953B, 0x2AEF7DAD, 0x5B6E2F84,            0x1521B628, 0x29076170, 0xECDD4775, 0x619F1510,            0x13CCA830, 0xEB61BD96, 0x0334FE1E, 0xAA0363CF,            0xB5735C90, 0x4C70A239, 0xD59E9E0B, 0xCBAADE14,            0xEECC86BC, 0x60622CA7, 0x9CAB5CAB, 0xB2F3846E,            0x648B1EAF, 0x19BDF0CA, 0xA02369B9, 0x655ABB50,            0x40685A32, 0x3C2AB4B3, 0x319EE9D5, 0xC021B8F7,            0x9B540B19, 0x875FA099, 0x95F7997E, 0x623D7DA8,            0xF837889A, 0x97E32D77, 0x11ED935F, 0x16681281,            0x0E358829, 0xC7E61FD6, 0x96DEDFA1, 0x7858BA99,            0x57F584A5, 0x1B227263, 0x9B83C3FF, 0x1AC24696,            0xCDB30AEB, 0x532E3054, 0x8FD948E4, 0x6DBC3128,            0x58EBF2EF, 0x34C6FFEA, 0xFE28ED61, 0xEE7C3C73,            0x5D4A14D9, 0xE864B7E3, 0x42105D14, 0x203E13E0,            0x45EEE2B6, 0xA3AAABEA, 0xDB6C4F15, 0xFACB4FD0,            0xC742F442, 0xEF6ABBB5, 0x654F3B1D, 0x41CD2105,            0xD81E799E, 0x86854DC7, 0xE44B476A, 0x3D816250,            0xCF62A1F2, 0x5B8D2646, 0xFC8883A0, 0xC1C7B6A3,            0x7F1524C3, 0x69CB7492, 0x47848A0B, 0x5692B285,            0x095BBF00, 0xAD19489D, 0x1462B174, 0x23820E00,            0x58428D2A, 0x0C55F5EA, 0x1DADF43E, 0x233F7061,            0x3372F092, 0x8D937E41, 0xD65FECF1, 0x6C223BDB,            0x7CDE3759, 0xCBEE7460, 0x4085F2A7, 0xCE77326E,            0xA6078084, 0x19F8509E, 0xE8EFD855, 0x61D99735,            0xA969A7AA, 0xC50C06C2, 0x5A04ABFC, 0x800BCADC,            0x9E447A2E, 0xC3453484, 0xFDD56705, 0x0E1E9EC9,            0xDB73DBD3, 0x105588CD, 0x675FDA79, 0xE3674340,            0xC5C43465, 0x713E38D8, 0x3D28F89E, 0xF16DFF20,            0x153E21E7, 0x8FB03D4A, 0xE6E39F2B, 0xDB83ADF7);    /**     * S Box (s3)     *     * @var array     */    protected $s3 = array(            0xE93D5A68, 0x948140F7, 0xF64C261C, 0x94692934,            0x411520F7, 0x7602D4F7, 0xBCF46B2E, 0xD4A20068,            0xD4082471, 0x3320F46A, 0x43B7D4B7, 0x500061AF,            0x1E39F62E, 0x97244546, 0x14214F74, 0xBF8B8840,            0x4D95FC1D, 0x96B591AF, 0x70F4DDD3, 0x66A02F45,            0xBFBC09EC, 0x03BD9785, 0x7FAC6DD0, 0x31CB8504,            0x96EB27B3, 0x55FD3941, 0xDA2547E6, 0xABCA0A9A,            0x28507825, 0x530429F4, 0x0A2C86DA, 0xE9B66DFB,            0x68DC1462, 0xD7486900, 0x680EC0A4, 0x27A18DEE,            0x4F3FFEA2, 0xE887AD8C, 0xB58CE006, 0x7AF4D6B6,            0xAACE1E7C, 0xD3375FEC, 0xCE78A399, 0x406B2A42,            0x20FE9E35, 0xD9F385B9, 0xEE39D7AB, 0x3B124E8B,            0x1DC9FAF7, 0x4B6D1856, 0x26A36631, 0xEAE397B2,            0x3A6EFA74, 0xDD5B4332, 0x6841E7F7, 0xCA7820FB,            0xFB0AF54E, 0xD8FEB397, 0x454056AC, 0xBA489527,            0x55533A3A, 0x20838D87, 0xFE6BA9B7, 0xD096954B,            0x55A867BC, 0xA1159A58, 0xCCA92963, 0x99E1DB33,            0xA62A4A56, 0x3F3125F9, 0x5EF47E1C, 0x9029317C,            0xFDF8E802, 0x04272F70, 0x80BB155C, 0x05282CE3,            0x95C11548, 0xE4C66D22, 0x48C1133F, 0xC70F86DC,            0x07F9C9EE, 0x41041F0F, 0x404779A4, 0x5D886E17,            0x325F51EB, 0xD59BC0D1, 0xF2BCC18F, 0x41113564,            0x257B7834, 0x602A9C60, 0xDFF8E8A3, 0x1F636C1B,            0x0E12B4C2, 0x02E1329E, 0xAF664FD1, 0xCAD18115,            0x6B2395E0, 0x333E92E1, 0x3B240B62, 0xEEBEB922,            0x85B2A20E, 0xE6BA0D99, 0xDE720C8C, 0x2DA2F728,            0xD0127845, 0x95B794FD, 0x647D0862, 0xE7CCF5F0,            0x5449A36F, 0x877D48FA, 0xC39DFD27, 0xF33E8D1E,            0x0A476341, 0x992EFF74, 0x3A6F6EAB, 0xF4F8FD37,            0xA812DC60, 0xA1EBDDF8, 0x991BE14C, 0xDB6E6B0D,            0xC67B5510, 0x6D672C37, 0x2765D43B, 0xDCD0E804,            0xF1290DC7, 0xCC00FFA3, 0xB5390F92, 0x690FED0B,            0x667B9FFB, 0xCEDB7D9C, 0xA091CF0B, 0xD9155EA3,            0xBB132F88, 0x515BAD24, 0x7B9479BF, 0x763BD6EB,            0x37392EB3, 0xCC115979, 0x8026E297, 0xF42E312D,            0x6842ADA7, 0xC66A2B3B, 0x12754CCC, 0x782EF11C,            0x6A124237, 0xB79251E7, 0x06A1BBE6, 0x4BFB6350,            0x1A6B1018, 0x11CAEDFA, 0x3D25BDD8, 0xE2E1C3C9,            0x44421659, 0x0A121386, 0xD90CEC6E, 0xD5ABEA2A,            0x64AF674E, 0xDA86A85F, 0xBEBFE988, 0x64E4C3FE,            0x9DBC8057, 0xF0F7C086, 0x60787BF8, 0x6003604D,            0xD1FD8346, 0xF6381FB0, 0x7745AE04, 0xD736FCCC,            0x83426B33, 0xF01EAB71, 0xB0804187, 0x3C005E5F,            0x77A057BE, 0xBDE8AE24, 0x55464299, 0xBF582E61,            0x4E58F48F, 0xF2DDFDA2, 0xF474EF38, 0x8789BDC2,            0x5366F9C3, 0xC8B38E74, 0xB475F255, 0x46FCD9B9,            0x7AEB2661, 0x8B1DDF84, 0x846A0E79, 0x915F95E2,            0x466E598E, 0x20B45770, 0x8CD55591, 0xC902DE4C,            0xB90BACE1, 0xBB8205D0, 0x11A86248, 0x7574A99E,            0xB77F19B6, 0xE0A9DC09, 0x662D09A1, 0xC4324633,            0xE85A1F02, 0x09F0BE8C, 0x4A99A025, 0x1D6EFE10,            0x1AB93D1D, 0x0BA5A4DF, 0xA186F20F, 0x2868F169,            0xDCB7DA83, 0x573906FE, 0xA1E2CE9B, 0x4FCD7F52,            0x50115E01, 0xA70683FA, 0xA002B5C4, 0x0DE6D027,            0x9AF88C27, 0x773F8641, 0xC3604C06, 0x61A806B5,            0xF0177A28, 0xC0F586E0, 0x006058AA, 0x30DC7D62,            0x11E69ED7, 0x2338EA63, 0x53C2DD94, 0xC2C21634,            0xBBCBEE56, 0x90BCB6DE, 0xEBFC7DA1, 0xCE591D76,            0x6F05E409, 0x4B7C0188, 0x39720A3D, 0x7C927C24,            0x86E3725F, 0x724D9DB9, 0x1AC15BB4, 0xD39EB8FC,            0xED545578, 0x08FCA5B5, 0xD83D7CD3, 0x4DAD0FC4,            0x1E50EF5E, 0xB161E6F8, 0xA28514D9, 0x6C51133C,            0x6FD5C7E7, 0x56E14EC4, 0x362ABFCE, 0xDDC6C837,            0xD79A3234, 0x92638212, 0x670EFA8E, 0x406000E0);    /**     * S Box (s4)     *     * @var array     */    protected $s4 = array(            0x3A39CE37, 0xD3FAF5CF, 0xABC27737, 0x5AC52D1B,            0x5CB0679E, 0x4FA33742, 0xD3822740, 0x99BC9BBE,            0xD5118E9D, 0xBF0F7315, 0xD62D1C7E, 0xC700C47B,            0xB78C1B6B, 0x21A19045, 0xB26EB1BE, 0x6A366EB4,            0x5748AB2F, 0xBC946E79, 0xC6A376D2, 0x6549C2C8,            0x530FF8EE, 0x468DDE7D, 0xD5730A1D, 0x4CD04DC6,            0x2939BBDB, 0xA9BA4650, 0xAC9526E8, 0xBE5EE304,            0xA1FAD5F0, 0x6A2D519A, 0x63EF8CE2, 0x9A86EE22,            0xC089C2B8, 0x43242EF6, 0xA51E03AA, 0x9CF2D0A4,            0x83C061BA, 0x9BE96A4D, 0x8FE51550, 0xBA645BD6,            0x2826A2F9, 0xA73A3AE1, 0x4BA99586, 0xEF5562E9,            0xC72FEFD3, 0xF752F7DA, 0x3F046F69, 0x77FA0A59,            0x80E4A915, 0x87B08601, 0x9B09E6AD, 0x3B3EE593,            0xE990FD5A, 0x9E34D797, 0x2CF0B7D9, 0x022B8B51,            0x96D5AC3A, 0x017DA67D, 0xD1CF3ED6, 0x7C7D2D28,            0x1F9F25CF, 0xADF2B89B, 0x5AD6B472, 0x5A88F54C,            0xE029AC71, 0xE019A5E6, 0x47B0ACFD, 0xED93FA9B,            0xE8D3C48D, 0x283B57CC, 0xF8D56629, 0x79132E28,            0x785F0191, 0xED756055, 0xF7960E44, 0xE3D35E8C,            0x15056DD4, 0x88F46DBA, 0x03A16125, 0x0564F0BD,            0xC3EB9E15, 0x3C9057A2, 0x97271AEC, 0xA93A072A,            0x1B3F6D9B, 0x1E6321F5, 0xF59C66FB, 0x26DCF319,            0x7533D928, 0xB155FDF5, 0x03563482, 0x8ABA3CBB,            0x28517711, 0xC20AD9F8, 0xABCC5167, 0xCCAD925F,            0x4DE81751, 0x3830DC8E, 0x379D5862, 0x9320F991,            0xEA7A90C2, 0xFB3E7BCE, 0x5121CE64, 0x774FBE32,            0xA8B6E37E, 0xC3293D46, 0x48DE5369, 0x6413E680,            0xA2AE0810, 0xDD6DB224, 0x69852DFD, 0x09072166,            0xB39A460A, 0x6445C0DD, 0x586CDECF, 0x1C20C8AE,            0x5BBEF7DD, 0x1B588D40, 0xCCD2017F, 0x6BB4E3BB,            0xDDA26A7E, 0x3A59FF45, 0x3E350A44, 0xBCB4CDD5,            0x72EACEA8, 0xFA6484BB, 0x8D6612AE, 0xBF3C6F47,            0xD29BE463, 0x542F5D9E, 0xAEC2771B, 0xF64E6370,            0x740E0D8D, 0xE75B1357, 0xF8721671, 0xAF537D5D,            0x4040CB08, 0x4EB4E2CC, 0x34D2466A, 0x0115AF84,            0xE1B00428, 0x95983A1D, 0x06B89FB4, 0xCE6EA048,            0x6F3F3B82, 0x3520AB82, 0x011A1D4B, 0x277227F8,            0x611560B1, 0xE7933FDC, 0xBB3A792B, 0x344525BD,            0xA08839E1, 0x51CE794B, 0x2F32C9B7, 0xA01FBAC9,            0xE01CC87E, 0xBCC7D1F6, 0xCF0111C3, 0xA1E8AAC7,            0x1A908749, 0xD44FBD9A, 0xD0DADECB, 0xD50ADA38,            0x0339C32A, 0xC6913667, 0x8DF9317C, 0xE0B12B4F,            0xF79E59B7, 0x43F5BB3A, 0xF2D519FF, 0x27D9459C,            0xBF97222C, 0x15E6FC2A, 0x0F91FC71, 0x9B941525,            0xFAE59361, 0xCEB69CEB, 0xC2A86459, 0x12BAA8D1,            0xB6C1075E, 0xE3056A0C, 0x10D25065, 0xCB03A442,            0xE0EC6E0E, 0x1698DB3B, 0x4C98A0BE, 0x3278E964,            0x9F1F9532, 0xE0D392DF, 0xD3A0342B, 0x8971F21E,            0x1B0A7441, 0x4BA3348C, 0xC5BE7120, 0xC37632D8,            0xDF359F8D, 0x9B992F2E, 0xE60B6F47, 0x0FE3F11D,            0xE54CDA54, 0x1EDAD891, 0xCE6279CF, 0xCD3E7E6F,            0x1618B166, 0xFD2C1D05, 0x848FD2C5, 0xF6FB2299,            0xF523F357, 0xA6327623, 0x93A83531, 0x56CCCD02,            0xACF08162, 0x5A75EBB5, 0x6E163697, 0x88D273CC,            0xDE966292, 0x81B949D0, 0x4C50901B, 0x71C65614,            0xE6C6C7BD, 0x327A140A, 0x45E1D006, 0xC3F27B9A,            0xC9AA53FD, 0x62A80F00, 0xBB25BFE2, 0x35BDD2F6,            0x71126905, 0xB2040222, 0xB6CBCF7C, 0xCD769C2B,            0x53113EC0, 0x1640E3D3, 0x38ABBD60, 0x2547ADF0,            0xBA38209C, 0xF746CE76, 0x77AFA1C5, 0x20756060,            0x85CBFE4E, 0x8AE88DD8, 0x7AAAF9B0, 0x4CF9AA7E,            0x1948C25C, 0x02FB8A8C, 0x01C36AE4, 0xD6EBE1F9,            0x90D4F869, 0xA65CDEA0, 0x3F09252D, 0xC208E69F,            0xB74E6132, 0xCE77E25B, 0x578FDFE3, 0x3AC372E6);    /**     * The number of rounds to do     *     * @var integer     */    protected $_rounds = 16;    /**     * Set the key to be used for en/decryption.     *     * @param string $key  The key to use.     * @return bool     */    public function setKey($key)    {        $key = array_values(unpack('C*', $key));        $keyLen = count($key);        if ($keyLen == 0) {            return false;        }        $keyPos = $keyXor = 0;        for ($i = 0, $iMax = count($this->p); $i < $iMax; ++$i) {            for ($t = 0; $t < 4; $t++) {                $keyXor = ($keyXor << 8) | (($key[$keyPos]) & 0x0ff);                if (++$keyPos == $keyLen) {                    $keyPos = 0;                }            }            $this->p[$i] = $this->p[$i] ^ $keyXor;        }        $encZero = array('L' => 0, 'R' => 0);        for ($i = 0; $i + 1 < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->p[$i] = $encZero['L'];          $this->p[$i + 1] = $encZero['R'];        }        $iMax = count($this->s1);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s1[$i] = $encZero['L'];          $this->s1[$i + 1] = $encZero['R'];        }        $iMax = count($this->s2);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s2[$i] = $encZero['L'];          $this->s2[$i + 1] = $encZero['R'];        }        $iMax = count($this->s3);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s3[$i] = $encZero['L'];          $this->s3[$i + 1] = $encZero['R'];        }        $iMax = count($this->s4);        for ($i = 0; $i < $iMax; $i += 2) {          $encZero = $this->_encryptBlock($encZero['L'], $encZero['R']);          $this->s4[$i] = $encZero['L'];          $this->s4[$i + 1] = $encZero['R'];        }    }    /**     * Encrypt a block of data.     *     * @param string $block      The data to encrypt.     * @param string $key        The key to use.     *     * @return string  The encrypted output.     */    public function encryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }        list($L, $R) = array_values(unpack('N*', $block));        $parts = $this->_encryptBlock($L, $R);        return pack('NN', $parts['L'], $parts['R']);    }    /**     * Encrypt left and right halves of a block of data.     *     * @param integer $L  Left half of the data.     * @param integer $R  Right half of the data.     *     * @return array  A hash, with keys 'L' and 'R', and the encrypted data as     *                the values.     */    protected function _encryptBlock($L, $R)    {        $L ^= $this->p[0];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[1];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[2];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[3];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[4];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[5];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[6];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[7];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[8];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[9];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[10];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[11];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[12];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[13];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[14];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[15];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[16];        $R ^= $this->p[17];        return array('L' => $R, 'R' => $L);    }    /**     * Decrypt a block of data.     *     * @param string $block  The data to decrypt.     * @param string $key    The key to use.     *     * @return string  The decrypted output.     */    public function decryptBlock($block, $key = null)    {        if (!is_null($key)) {            $this->setKey($key);        }// change for phpMyAdmin        $L = null;        $R = null;        $retarray = array_values(unpack('N*', $block));        if (isset($retarray[0])) {            $L = $retarray[0];        }        if (isset($retarray[1])) {            $R = $retarray[1];        }// end change for phpMyAdmin        $L ^= $this->p[17];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[16];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[15];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[14];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[13];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[12];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[11];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[10];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[9];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[8];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[7];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[6];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[5];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[4];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[3];        $R ^= ((($this->s1[($L >> 24) & 0xFF] + $this->s2[($L >> 16) & 0x0ff]) ^ $this->s3[($L >> 8) & 0x0ff]) + $this->s4[$L & 0x0ff]) ^ $this->p[2];        $L ^= ((($this->s1[($R >> 24) & 0xFF] + $this->s2[($R >> 16) & 0x0ff]) ^ $this->s3[($R >> 8) & 0x0ff]) + $this->s4[$R & 0x0ff]) ^ $this->p[1];        return pack("NN", $R ^ $this->p[0], $L);    }}// higher-level functions:/** * Encryption using blowfish algorithm * * @param string  original data * @param string  the secret * * @return  string  the encrypted result * * @access  public * */function PMA_blowfish_encrypt($data, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $encrypt = '';    $mod = strlen($data) % 8;    if ($mod > 0) {        $data .= str_repeat("\0", 8 - $mod);    }    foreach (str_split($data, 8) as $chunk) {        $encrypt .= $pma_cipher->encryptBlock($chunk, $secret);    }    return base64_encode($encrypt);}/** * Decryption using blowfish algorithm * * @param string  encrypted data * @param string  the secret * * @return  string  original data * * @access  public * */function PMA_blowfish_decrypt($encdata, $secret){    $pma_cipher = new Horde_Cipher_blowfish;    $decrypt = '';    $data = base64_decode($encdata);    foreach (str_split($data, 8) as $chunk) {        $decrypt .= $pma_cipher->decryptBlock($chunk, $secret);    }    return trim($decrypt);}?>
