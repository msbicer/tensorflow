<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/** * Column types and functions supported by MySQL * * @package PhpMyAdmin */// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INT',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'TINYINT',        'SMALLINT',        'MEDIUMINT',        'INT',        'BIGINT',        '-',        'DECIMAL',        'FLOAT',        'DOUBLE',        'REAL',        '-',        'BIT',        'BOOLEAN',        'SERIAL',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',        'YEAR',    ),    // Text    'STRING' => array(        'CHAR',        'VARCHAR',        '-',        'TINYTEXT',        'TEXT',        'MEDIUMTEXT',        'LONGTEXT',        '-',        'BINARY',        'VARBINARY',        '-',        'TINYBLOB',        'MEDIUMBLOB',        'BLOB',        'LONGBLOB',        '-',        'ENUM',        'SET',    ),    'SPATIAL' => array(        'GEOMETRY',        'POINT',        'LINESTRING',        'POLYGON',        'MULTIPOINT',        'MULTILINESTRING',        'MULTIPOLYGON',        'GEOMETRYCOLLECTION',    ),);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'BINARY',   'UNSIGNED',   'UNSIGNED ZEROFILL',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'TINYINT'   => 'FUNC_NUMBER',        'SMALLINT'  => 'FUNC_NUMBER',        'MEDIUMINT' => 'FUNC_NUMBER',        'INT'       => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'FLOAT'     => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'REAL'      => 'FUNC_NUMBER',        'BIT'       => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'YEAR'      => 'FUNC_DATE',        'CHAR'       => 'FUNC_CHAR',        'VARCHAR'    => 'FUNC_CHAR',        'TINYTEXT'   => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'MEDIUMTEXT' => 'FUNC_CHAR',        'LONGTEXT'   => 'FUNC_CHAR',        'BINARY'     => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'TINYBLOB'   => 'FUNC_CHAR',        'MEDIUMBLOB' => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'LONGBLOB'   => 'FUNC_CHAR',        'ENUM'       => '',        'SET'        => '',        'GEOMETRY'           => 'FUNC_SPATIAL',        'POINT'              => 'FUNC_SPATIAL',        'LINESTRING'         => 'FUNC_SPATIAL',        'POLYGON'            => 'FUNC_SPATIAL',        'MULTIPOINT'         => 'FUNC_SPATIAL',        'MULTILINESTRING'    => 'FUNC_SPATIAL',        'MULTIPOLYGON'       => 'FUNC_SPATIAL',        'GEOMETRYCOLLECTION' => 'FUNC_SPATIAL',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'DES_DECRYPT',            'DES_ENCRYPT',            'ENCRYPT',            'HEX',            'INET_NTOA',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'OLD_PASSWORD',            'PASSWORD',            'QUOTE',            'REVERSE',            'RTRIM',            'SHA1',            'SOUNDEX',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SEC_TO_TIME',            'SYSDATE',            'TIME',            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_LENGTH',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'INET_ATON',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TO_SECONDS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            'UUID_SHORT',            'WEEK',            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),        'FUNC_SPATIAL' => array(            'GeomFromText',            'GeomFromWKB',            'GeomCollFromText',            'LineFromText',            'MLineFromText',            'PointFromText',            'MPointFromText',            'PolyFromText',            'MPolyFromText',            'GeomCollFromWKB',            'LineFromWKB',            'MLineFromWKB',            'PointFromWKB',            'MPointFromWKB',            'PolyFromWKB',            'MPolyFromWKB',        ),    );    // $restrict_functions holds all known functions, remove these that are unavailable on current server    if (PMA_MYSQL_INT_VERSION < 50500) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('TO_SECONDS'));    }    if (PMA_MYSQL_INT_VERSION < 50120) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('UUID_SHORT'));    }    if (empty($cfg['RestrictFunctions'])) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            if ($cat != 'FUNC_SPATIAL') {                $cfg['Functions'] = array_merge($cfg['Functions'], $functions);            }        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file generator * * @package PhpMyAdmin-setup *//** * Config file generation class * * @package PhpMyAdmin */class ConfigGenerator{    /**     * Creates config file     *     * @return string     */    public static function getConfigFile()    {        $cf = ConfigFile::getInstance();        $crlf = (isset($_SESSION['eol']) && $_SESSION['eol'] == 'win') ? "\r\n" : "\n";        $c = $cf->getConfig();        // header        $ret = '<?php' . $crlf            . '/*' . $crlf            . ' * Generated configuration file' . $crlf            . ' * Generated by: phpMyAdmin '                    . $GLOBALS['PMA_Config']->get('PMA_VERSION')                    . ' setup script' . $crlf            . ' * Date: ' . date(DATE_RFC1123) . $crlf            . ' */' . $crlf . $crlf;        // servers        if ($cf->getServerCount() > 0) {            $ret .= "/* Servers configuration */$crlf\$i = 0;" . $crlf . $crlf;            foreach ($c['Servers'] as $id => $server) {                $ret .= '/* Server: ' . strtr($cf->getServerName($id) . " [$id] ", '*/', '-') . "*/" . $crlf                    . '$i++;' . $crlf;                foreach ($server as $k => $v) {                    $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                    $ret .= "\$cfg['Servers'][\$i]['$k'] = "                        . (is_array($v) && self::_isZeroBasedArray($v)                                ? self::_exportZeroBasedArray($v, $crlf)                                : var_export($v, true))                        . ';' . $crlf;                }                $ret .= $crlf;            }            $ret .= '/* End of servers configuration */' . $crlf . $crlf;        }        unset($c['Servers']);        // other settings        $persistKeys = $cf->getPersistKeysMap();        foreach ($c as $k => $v) {            $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);            $ret .= self::_getVarExport($k, $v, $crlf);            if (isset($persistKeys[$k])) {                unset($persistKeys[$k]);            }        }        // keep 1d array keys which are present in $persist_keys (config.values.php)        foreach (array_keys($persistKeys) as $k) {            if (strpos($k, '/') === false) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= self::_getVarExport($k, $cf->getDefault($k), $crlf);            }        }        $ret .= '?>';        return $ret;    }    /**     * Returns exported configuration variable     *     * @param string $var_name     * @param mixed  $var_value     * @param string $crlf     * @return string     */    private static function _getVarExport($var_name, $var_value, $crlf)    {        if (!is_array($var_value) || empty($var_value)) {            return "\$cfg['$var_name'] = " . var_export($var_value, true) . ';' . $crlf;        }        $ret = '';        if (self::_isZeroBasedArray($var_value)) {            $ret = "\$cfg['$var_name'] = " . self::_exportZeroBasedArray($var_value, $crlf)                . ';' . $crlf;        } else {            // string keys: $cfg[key][subkey] = value            foreach ($var_value as $k => $v) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= "\$cfg['$var_name']['$k'] = " . var_export($v, true) . ';' . $crlf;            }        }        return $ret;    }    /**     * Check whether $array is a continuous 0-based array     *     * @param array $array     * @return boolean     */    private static function _isZeroBasedArray(array $array)    {        for ($i = 0; $i < count($array); $i++) {            if (! isset($array[$i])) {                return false;            }        }        return true;    }    /**     * Exports continuous 0-based array     *     * @param array $array     * @param string $crlf     * @return string     */    private static function _exportZeroBasedArray(array $array, $crlf)    {        $retv = array();        foreach ($array as $v) {            $retv[] = var_export($v, true);        }        $ret = "array(";        if (count($retv) <= 4) {            // up to 4 values - one line            $ret .= implode(', ', $retv);        } else {            // more than 4 values - value per line            $imax = count($retv)-1;            for ($i = 0; $i <= $imax; $i++) {                $ret .= ($i < $imax ? ($i > 0 ? ',' : '') : '') . $crlf . '    ' . $retv[$i];            }        }        $ret .= ')';        return $ret;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['unparsed_sql'] = $sql_query;$parsed_sql = PMA_SQP_parse($sql_query);$analyzed_sql = PMA_SQP_analyze($parsed_sql);// for bug 780516: now that we use case insensitive preg_match// or flags from the analyser, do not put back the reformatted query// into $sql_query, to make this kind of query work without// capitalizing keywords://// CREATE TABLE SG_Persons (//  id int(10) unsigned NOT NULL auto_increment,//  first varchar(64) NOT NULL default '',//  PRIMARY KEY  (`id`)// )// check for a real SELECT ... FROM$is_select = isset($analyzed_sql[0]['queryflags']['select_from']);// If the query is a Select, extract the db and table names and modify// $db and $table, to have correct page headers, links and left frame.// db and table name may be enclosed with backquotes, db is optionnal,// query may contain aliases./** * @todo if there are more than one table name in the Select: * - do not extract the first table name * - do not show a table name in the page header * - do not display the sub-pages links) */if ($is_select) {    $prev_db = $db;    if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name'])) {        $table = $analyzed_sql[0]['table_ref'][0]['table_true_name'];    }    if (isset($analyzed_sql[0]['table_ref'][0]['db'])      && strlen($analyzed_sql[0]['table_ref'][0]['db'])) {        $db    = $analyzed_sql[0]['table_ref'][0]['db'];    } else {        $db = $prev_db;    }    // Nijel: don't change reload, if we already decided to reload in import    if (empty($reload)) {        $reload  = ($db == $prev_db) ? 0 : 1;    }}?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table search tab * * display table search form, create SQL query from form data * and include sql.php to execute it * * @todo display search form again if no results from previous search * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'tbl_select.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));$geom_types = PMA_getGISDatatypes();/** * Not selection yet required -> displays the selection form */if (! isset($param) || $param[0] == '') {    // Gets some core libraries    include_once './libraries/tbl_common.php';    //$err_url   = 'tbl_select.php' . $err_url;    $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';    /**     * Gets tables informations     */    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    include_once './libraries/tbl_links.inc.php';    if (! isset($goto)) {        $goto = $GLOBALS['cfg']['DefaultTabTable'];    }    // Defines the url to return to in case of error in the next sql statement    $err_url   = $goto . '?' . PMA_generate_common_url($db, $table);    // Gets the list and number of fields    list($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present) = PMA_tbl_getFields($db, $table);    $fields_cnt = count($fields_list);    // retrieve keys into foreign fields, if any    // check also foreigners even if relwork is FALSE (to get    // foreign keys from innodb)    $foreigners = PMA_getForeigners($db, $table);    ?><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');?>        <form method="post" action="tbl_select.php" name="insertForm" id="tbl_search_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_select.php" /><fieldset id="fieldset_table_search"><fieldset id="fieldset_table_qbe">    <legend><?php echo __('Do a "query by example" (wildcard: "%")') ?></legend>    <table class="data">    <?php echo PMA_tbl_setTableHeader($geom_column_present); ?>    <tbody>    <?php    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">            <?php            // if 'Function' column is present            if ($geom_column_present) {                echo('<td>');                // if a geometry column                if (in_array($fields_type[$i], $geom_types)) {                    echo('<select class="geom_func" name="geom_func['. $i .']">');                        // get the relevant list of functions                        $funcs = PMA_getGISFunctions($fields_type[$i], true, true);                        foreach ($funcs as $func_name => $func) {                            $name =  isset($func['display']) ? $func['display'] : $func_name;                            echo('<option value="' . htmlspecialchars($name) . '">'                                . htmlspecialchars($name) . '</option>');                        }                    echo('</select>');                } else {                    echo('&nbsp;');                }                echo('</td>');            }            ?>            <th><?php echo htmlspecialchars($fields_list[$i]); ?></th>            <td><?php echo htmlspecialchars($fields_type[$i]); ?></td>            <td><?php echo $fields_collation[$i]; ?></td>            <td><select name="func[]">        <?php        if (strncasecmp($fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' . htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } elseif (preg_match('@char|blob|text|set@i', $fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {            echo "\n" . '                        '               . '<option value="' . htmlspecialchars($fc) . '">'               . htmlspecialchars($fc) . '</option>';            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } // end if... else...        if ($fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        }        ?>                </select>            </td>            <td>        <?php        $field = $fields_list[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        echo PMA_getForeignFields_Values($foreigners, $foreignData, $field, $fields_type, $i, $db, $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', true);        ?>            <input type="hidden" name="names[<?php echo $i; ?>]"                value="<?php echo htmlspecialchars($fields_list[$i]); ?>" />            <input type="hidden" name="types[<?php echo $i; ?>]"                value="<?php echo $fields_type[$i]; ?>" />            <input type="hidden" name="collations[<?php echo $i; ?>]"                value="<?php echo $fields_collation[$i]; ?>" />        </td>    </tr>        <?php    } // end for    ?>    </tbody>    </table><div id="gis_editor"></div><div id="popup_background"></div></fieldset><?php    PMA_generate_slider_effect('searchoptions', __('Options'));?><fieldset id="fieldset_select_fields">    <legend><?php echo __('Select columns (at least one):'); ?></legend>    <select name="param[]" size="<?php echo min($fields_cnt, 10); ?>"        multiple="multiple">    <?php    // Displays the list of the fields    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '"'            .' selected="selected">' . htmlspecialchars($each_field)            .'</option>' . "\n";    }    ?>    </select>    <input type="checkbox" name="distinct" value="DISTINCT" id="oDistinct" />    <label for="oDistinct">DISTINCT</label></fieldset><fieldset id="fieldset_search_conditions">    <legend><?php echo '<em>' . __('Or') . '</em> ' . __('Add search conditions (body of the "where" clause):'); ?></legend><?php echo PMA_showMySQLDocu('SQL-Syntax', 'Functions'); ?><input type="text" name="where" class="textfield" size="64" /></fieldset><fieldset id="fieldset_limit_rows">    <legend><?php echo __('Number of rows per page'); ?></legend>    <input type="text" size="4" name="session_max_rows"        value="<?php echo $GLOBALS['cfg']['MaxRows']; ?>" class="textfield" /></fieldset><fieldset id="fieldset_display_order">    <legend><?php echo __('Display order:'); ?></legend>    <select name="orderField">        <option value="--nil--"></option>    <?php    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '">'            .htmlspecialchars($each_field) . '</option>' . "\n";    } // end for    ?>    </select><?php    $choices = array(        'ASC'  => __('Ascending'),        'DESC' => __('Descending')    );    PMA_display_html_radio('order', $choices, 'ASC', false, true, "formelement");    unset($choices);?></fieldset><br style="clear: both;"/></div></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="submit" value="<?php echo __('Go'); ?>" /></fieldset></form><div id="sqlqueryresults"></div>    <?php    include './libraries/footer.inc.php';?></fieldset><?php} else {    /**     * Selection criteria have been submitted -> do the work     */    // Builds the query    $sql_query = 'SELECT ' . (isset($distinct) ? 'DISTINCT ' : '');    // if all fields were selected to display, we do a SELECT *    // (more efficient and this helps prevent a problem in IE    // if one of the rows is edited and we come back to the Select results)    if (count($param) == $max_number_of_fields) {        $sql_query .= '* ';    } else {        $param = PMA_backquote($param);        $sql_query .= implode(', ', $param);    } // end if    // avoid a loop, for example when $cfg['DefaultTabTable'] is set    // to 'tbl_select.php'    unset($param);    $sql_query .= ' FROM ' . PMA_backquote($table);    // The where clause    if (trim($where) != '') {        $sql_query .= ' WHERE ' . $where;    } else {        $w = $charsets = array();        $cnt_func = count($func);        reset($func);        while (list($i, $func_type) = each($func)) {            list($charsets[$i]) = explode('_', $collations[$i]);            $unaryFlag =  (isset($GLOBALS['cfg']['UnaryOperators'][$func_type]) && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1) ? true : false;            $tmp_geom_func = isset($geom_func[$i]) ? $geom_func[$i] : null;            $whereClause = PMA_tbl_search_getWhereClause($fields[$i], $names[$i], $types[$i], $collations[$i], $func_type, $unaryFlag, $tmp_geom_func);            if($whereClause)                $w[] = $whereClause;            } // end for        if ($w) {            $sql_query .= ' WHERE ' . implode(' AND ', $w);        }    } // end if    if ($orderField != '--nil--') {        $sql_query .= ' ORDER BY ' . PMA_backquote($orderField) . ' ' . $order;    } // end if    include './sql.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle row specifc actions like edit, delete, export * * @package PhpMyAdmin *//** * do not globalize/import request variables * can only be enabled if all included files are switched superglobals too * but leave this here to show that this file is 'superglobalized'define('PMA_NO_VARIABLES_IMPORT', true); *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';/** * No rows were selected => show again the query and tell that user. */if (! PMA_isValid($_REQUEST['rows_to_delete'], 'array') && ! isset($_REQUEST['mult_btn'])) {    $disp_message = __('No rows selected');    $disp_query = '';    include './sql.php';    include './libraries/footer.inc.php';}if (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];// workaround for IE problem:} elseif (isset($_REQUEST['submit_mult_delete_x'])) {    $submit_mult = 'row_delete';} elseif (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'row_edit';} elseif (isset($_REQUEST['submit_mult_export_x'])) {    $submit_mult = 'row_export';}// If the 'Ask for confirmation' button was pressed, this can only come// from 'delete' mode, so we set it straight away.if (isset($_REQUEST['mult_btn'])) {    $submit_mult = 'row_delete';}switch($submit_mult) {    case 'row_delete':    case 'row_edit':    case 'row_export':        // leave as is        break;    case 'export':        $submit_mult = 'row_export';        break;    case 'delete':        $submit_mult = 'row_delete';        break;    default:    case 'edit':        $submit_mult = 'row_edit';        break;}if (!empty($submit_mult)) {    switch($submit_mult) {        case 'row_edit':            // As we got the rows to be edited from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_change.php';            include './tbl_change.php';            break;        case 'row_export':            // Needed to allow SQL export            $single_table = true;            // As we got the rows to be exported from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_export.php';            include './tbl_export.php';            break;        case 'row_delete':        default:            $action = 'tbl_row_action.php';            $err_url = 'tbl_row_action.php' . PMA_generate_common_url($GLOBALS['url_params']);            if (! isset($_REQUEST['mult_btn'])) {                $original_sql_query = $sql_query;                if (! empty($url_query)) {                    $original_url_query = $url_query;                }            }            include './libraries/mult_submits.inc.php';            $_url_params = $GLOBALS['url_params'];            $_url_params['goto'] = 'tbl_sql.php';            $url_query = PMA_generate_common_url($_url_params);            /**             * Show result of multi submit operation             */            // sql_query is not set when user does not confirm multi-delete            if ((!empty($submit_mult) || isset($_REQUEST['mult_btn'])) && ! empty($sql_query)) {                $disp_message = __('Your SQL query has been executed successfully');                $disp_query = $sql_query;            }            if (isset($original_sql_query)) {                $sql_query = $original_sql_query;            }            if (isset($original_url_query)) {                $url_query = $original_url_query;            }            // this is because sql.php could call tbl_structure            // which would think it needs to call mult_submits.inc.php:            unset($submit_mult, $_REQUEST['mult_btn']);            $active_page = 'sql.php';            include './sql.php';            /**             * Displays the footer             */            include './libraries/footer.inc.php';            break;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';$_add_user_error = false;require './libraries/server_common.inc.php';if ($GLOBALS['cfg']['AjaxEnable']) {    $conditional_class = 'ajax';} else {    $conditional_class = '';}/** * Messages are built using the message name */$strPrivDescAllPrivileges = __('Includes all privileges except GRANT.');$strPrivDescAlter = __('Allows altering the structure of existing tables.');$strPrivDescAlterRoutine = __('Allows altering and dropping stored routines.');$strPrivDescCreateDb = __('Allows creating new databases and tables.');$strPrivDescCreateRoutine = __('Allows creating stored routines.');$strPrivDescCreateTbl = __('Allows creating new tables.');$strPrivDescCreateTmpTable = __('Allows creating temporary tables.');$strPrivDescCreateUser = __('Allows creating, dropping and renaming user accounts.');$strPrivDescCreateView = __('Allows creating new views.');$strPrivDescDelete = __('Allows deleting data.');$strPrivDescDropDb = __('Allows dropping databases and tables.');$strPrivDescDropTbl = __('Allows dropping tables.');$strPrivDescEvent = __('Allows to set up events for the event scheduler');$strPrivDescExecute = __('Allows executing stored routines.');$strPrivDescFile = __('Allows importing data from and exporting data into files.');$strPrivDescGrant = __('Allows adding users and privileges without reloading the privilege tables.');$strPrivDescIndex = __('Allows creating and dropping indexes.');$strPrivDescInsert = __('Allows inserting and replacing data.');$strPrivDescLockTables = __('Allows locking tables for the current thread.');$strPrivDescMaxConnections = __('Limits the number of new connections the user may open per hour.');$strPrivDescMaxQuestions = __('Limits the number of queries the user may send to the server per hour.');$strPrivDescMaxUpdates = __('Limits the number of commands that change any table or database the user may execute per hour.');$strPrivDescMaxUserConnections = __('Limits the number of simultaneous connections the user may have.');$strPrivDescProcess = __('Allows viewing processes of all users');$strPrivDescReferences = __('Has no effect in this MySQL version.');$strPrivDescReload = __('Allows reloading server settings and flushing the server\'s caches.');$strPrivDescReplClient = __('Allows the user to ask where the slaves / masters are.');$strPrivDescReplSlave = __('Needed for the replication slaves.');$strPrivDescSelect = __('Allows reading data.');$strPrivDescShowDb = __('Gives access to the complete list of databases.');$strPrivDescShowView = __('Allows performing SHOW CREATE VIEW queries.');$strPrivDescShutdown = __('Allows shutting down the server.');$strPrivDescSuper = __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.');$strPrivDescTrigger = __('Allows creating and dropping triggers');$strPrivDescUpdate = __('Allows changing data.');$strPrivDescUsage = __('No privileges.');/** * Checks if a dropdown box has been used for selecting a database / table */if (PMA_isValid($_REQUEST['pred_tablename'])) {    $tablename = $_REQUEST['pred_tablename'];    unset($pred_tablename);} elseif (PMA_isValid($_REQUEST['tablename'])) {    $tablename = $_REQUEST['tablename'];} else {    unset($tablename);}if (PMA_isValid($_REQUEST['pred_dbname'])) {    $dbname = $_REQUEST['pred_dbname'];    unset($pred_dbname);} elseif (PMA_isValid($_REQUEST['dbname'])) {    $dbname = $_REQUEST['dbname'];} else {    unset($dbname);    unset($tablename);}if (isset($dbname)) {    $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';    if (isset($tablename)) {        $db_and_table .= PMA_backquote($tablename);    } else {        $db_and_table .= '*';    }} else {    $db_and_table = '*.*';}// check if given $dbname is a wildcard or notif (isset($dbname)) {    //if (preg_match('/\\\\(?:_|%)/i', $dbname)) {    if (preg_match('/(?<!\\\\)(?:_|%)/i', $dbname)) {        $dbname_is_wildcard = true;    } else {        $dbname_is_wildcard = false;    }}/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"       . PMA_getIcon('b_usrlist.png')       . __('Privileges') . "\n"       . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}$random_n = mt_rand(0, 1000000); // a random number that will be appended to the id of the user forms/** * Escapes wildcard in a database+table specification * before using it in a GRANT statement. * * Escaping a wildcard character in a GRANT is only accepted at the global * or database level, not at table level; this is why I remove * the escaping character. Internally, in mysql.tables_priv.Db there are * no escaping (for example test_db) but in mysql.db you'll see test\_db * for a db-specific privilege. * * @param string $dbname    Database name * @param string $tablename Table name * * @return string the escaped (if necessary) database.table */function PMA_wildcardEscapeForGrant($dbname, $tablename){    if (! strlen($dbname)) {        $db_and_table = '*.*';    } else {        if (strlen($tablename)) {            $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';            $db_and_table .= PMA_backquote($tablename);        } else {            $db_and_table = PMA_backquote($dbname) . '.';            $db_and_table .= '*';        }    }    return $db_and_table;}/** * Generates a condition on the user name * * @param string $initial the user's initial * * @return  string   the generated condition */function PMA_rangeOfUsers($initial = ''){    // strtolower() is used because the User field    // might be BINARY, so LIKE would be case sensitive    if (! empty($initial)) {        $ret = " WHERE `User` LIKE '" . PMA_sqlAddSlashes($initial, true) . "%'"            . " OR `User` LIKE '" . PMA_sqlAddSlashes(strtolower($initial), true) . "%'";    } else {        $ret = '';    }    return $ret;} // end function/** * Extracts the privilege information of a priv table row * * @param array   $row        the row * @param boolean $enableHTML add <dfn> tag with tooltips * * @global  resource $user_link the database connection * * @return  array */function PMA_extractPrivInfo($row = '', $enableHTML = false){    $grants = array(        array(            'Select_priv',            'SELECT',            __('Allows reading data.')),        array(            'Insert_priv',            'INSERT',            __('Allows inserting and replacing data.')),        array(            'Update_priv',            'UPDATE',            __('Allows changing data.')),        array(            'Delete_priv',            'DELETE',            __('Allows deleting data.')),        array(            'Create_priv',            'CREATE',            __('Allows creating new databases and tables.')),        array(            'Drop_priv',            'DROP',            __('Allows dropping databases and tables.')),        array(            'Reload_priv',            'RELOAD',            __('Allows reloading server settings and flushing the server\'s caches.')),        array(            'Shutdown_priv',            'SHUTDOWN',            __('Allows shutting down the server.')),        array(            'Process_priv',            'PROCESS',            __('Allows viewing processes of all users')),        array(            'File_priv',            'FILE',            __('Allows importing data from and exporting data into files.')),        array(            'References_priv',            'REFERENCES',            __('Has no effect in this MySQL version.')),        array(            'Index_priv',            'INDEX',            __('Allows creating and dropping indexes.')),        array(            'Alter_priv',            'ALTER',            __('Allows altering the structure of existing tables.')),        array(            'Show_db_priv',            'SHOW DATABASES',            __('Gives access to the complete list of databases.')),        array(            'Super_priv',            'SUPER',            __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.')),        array(            'Create_tmp_table_priv',            'CREATE TEMPORARY TABLES',            __('Allows creating temporary tables.')),        array(            'Lock_tables_priv',            'LOCK TABLES',            __('Allows locking tables for the current thread.')),        array(            'Repl_slave_priv',            'REPLICATION SLAVE',            __('Needed for the replication slaves.')),        array(            'Repl_client_priv',            'REPLICATION CLIENT',            __('Allows the user to ask where the slaves / masters are.')),        array(            'Create_view_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Event_priv',            'EVENT',            __('Allows to set up events for the event scheduler')),        array(            'Trigger_priv',            'TRIGGER',            __('Allows creating and dropping triggers')),        // for table privs:        array(            'Create View_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Show_view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        // for table privs:        array(            'Show view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        array(            'Create_routine_priv',            'CREATE ROUTINE',            __('Allows creating stored routines.')),        array(            'Alter_routine_priv',            'ALTER ROUTINE',            __('Allows altering and dropping stored routines.')),        array(            'Create_user_priv',            'CREATE USER',            __('Allows creating, dropping and renaming user accounts.')),        array(            'Execute_priv',            'EXECUTE',            __('Allows executing stored routines.')),    );    if (! empty($row) && isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        $av_grants = explode('\',\'', substr($row1['Type'], 5, strlen($row1['Type']) - 7));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($current_grant);        unset($av_grants);        unset($users_grants);    }    $privs = array();    $allPrivileges = true;    foreach ($grants as $current_grant) {        if ((! empty($row) && isset($row[$current_grant[0]]))            || (empty($row) && isset($GLOBALS[$current_grant[0]]))        ) {            if ((! empty($row) && $row[$current_grant[0]] == 'Y')                || (empty($row)                && ($GLOBALS[$current_grant[0]] == 'Y'                || (is_array($GLOBALS[$current_grant[0]])                && count($GLOBALS[$current_grant[0]]) == $GLOBALS['column_count']                && empty($GLOBALS[$current_grant[0] . '_none']))))            ) {                if ($enableHTML) {                    $privs[] = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $privs[] = $current_grant[1];                }            } elseif (! empty($GLOBALS[$current_grant[0]])             && is_array($GLOBALS[$current_grant[0]])             && empty($GLOBALS[$current_grant[0] . '_none'])) {                if ($enableHTML) {                    $priv_string = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $priv_string = $current_grant[1];                }                $privs[] = $priv_string . ' (`' . join('`, `', $GLOBALS[$current_grant[0]]) . '`)';            } else {                $allPrivileges = false;            }        }    }    if (empty($privs)) {        if ($enableHTML) {            $privs[] = '<dfn title="' . __('No privileges.') . '">USAGE</dfn>';        } else {            $privs[] = 'USAGE';        }    } elseif ($allPrivileges && (! isset($GLOBALS['grant_count']) || count($privs) == $GLOBALS['grant_count'])) {        if ($enableHTML) {            $privs = array('<dfn title="' . __('Includes all privileges except GRANT.') . '">ALL PRIVILEGES</dfn>');        } else {            $privs = array('ALL PRIVILEGES');        }    }    return $privs;} // end of the 'PMA_extractPrivInfo()' function/** * Displays on which column(s) a table-specific privilege is granted */function PMA_display_column_privs($columns, $row, $name_for_select,    $priv_for_header, $name, $name_for_dfn, $name_for_current){    echo '    <div class="item" id="div_item_' . $name . '">' . "\n"       . '        <label for="select_' . $name . '_priv">' . "\n"       . '            <tt><dfn title="' . $name_for_dfn . '">'        . $priv_for_header . '</dfn></tt>' . "\n"       . '        </label><br />' . "\n"       . '        <select id="select_' . $name . '_priv" name="'        . $name_for_select . '[]" multiple="multiple" size="8">' . "\n";    foreach ($columns as $current_column => $current_column_privileges) {        echo '            <option value="' . htmlspecialchars($current_column) . '"';        if ($row[$name_for_select] == 'Y' || $current_column_privileges[$name_for_current]) {            echo ' selected="selected"';        }        echo '>' . htmlspecialchars($current_column) . '</option>' . "\n";    }    echo '        </select>' . "\n"       . '        <i>' . __('Or') . '</i>' . "\n"       . '        <label for="checkbox_' . $name_for_select        . '_none"><input type="checkbox"'        . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')        . ' name="' . $name_for_select . '_none" id="checkbox_'        . $name_for_select . '_none" title="' . _pgettext('None privileges', 'None') . '" />'        . _pgettext('None privileges', 'None') . '</label>' . "\n"       . '    </div>' . "\n";} // end function/** * Displays the privileges form table * * @param string  $db     the database * @param string  $table  the table * @param boolean $submit wheather to display the submit button or not * * @global  array      $cfg         the phpMyAdmin configuration * @global  ressource  $user_link   the database connection * * @return  void */function PMA_displayPrivTable($db = '*', $table = '*', $submit = true){    global $random_n;    if ($db == '*') {        $table = '*';    }    if (isset($GLOBALS['username'])) {        $username = $GLOBALS['username'];        $hostname = $GLOBALS['hostname'];        if ($db == '*') {            $sql_query = "SELECT * FROM `mysql`.`user`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        } elseif ($table == '*') {            $sql_query = "SELECT * FROM `mysql`.`db`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND '" . PMA_unescape_mysql_wildcards($db) . "'"                ." LIKE `Db`;";        } else {            $sql_query = "SELECT `Table_priv`"                ." FROM `mysql`.`tables_priv`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND `Db` = '" . PMA_unescape_mysql_wildcards($db) . "'"                ." AND `Table_name` = '" . PMA_sqlAddSlashes($table) . "';";        }        $row = PMA_DBI_fetch_single_row($sql_query);    }    if (empty($row)) {        if ($table == '*') {            if ($db == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`user`;';            } elseif ($table == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`db`;';            }            $res = PMA_DBI_query($sql_query);            while ($row1 = PMA_DBI_fetch_row($res)) {                if (substr($row1[0], 0, 4) == 'max_') {                    $row[$row1[0]] = 0;                } else {                    $row[$row1[0]] = 'N';                }            }            PMA_DBI_free_result($res);        } else {            $row = array('Table_priv' => '');        }    }    if (isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        // note: in MySQL 5.0.3 we get "Create View', 'Show view';        // the View for Create is spelled with uppercase V        // the view for Show is spelled with lowercase v        // and there is a space between the words        $av_grants = explode('\',\'', substr($row1['Type'], strpos($row1['Type'], '(') + 2, strpos($row1['Type'], ')') - strpos($row1['Type'], '(') - 3));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($row['Table_priv'], $current_grant, $av_grants, $users_grants);        // get collumns        $res = PMA_DBI_try_query('SHOW COLUMNS FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($db)) . '.' . PMA_backquote($table) . ';');        $columns = array();        if ($res) {            while ($row1 = PMA_DBI_fetch_row($res)) {                $columns[$row1[0]] = array(                    'Select' => false,                    'Insert' => false,                    'Update' => false,                    'References' => false                );            }            PMA_DBI_free_result($res);        }        unset($res, $row1);    }    // t a b l e - s p e c i f i c    p r i v i l e g e s    if (! empty($columns)) {        $res = PMA_DBI_query(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($hostname) . "'"            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes(PMA_unescape_mysql_wildcards($db)) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($table) . '\';'        );        while ($row1 = PMA_DBI_fetch_row($res)) {            $row1[1] = explode(',', $row1[1]);            foreach ($row1[1] as $current) {                $columns[$row1[0]][$current] = true;            }        }        PMA_DBI_free_result($res);        unset($res, $row1, $current);        echo '<input type="hidden" name="grant_count" value="' . count($row) . '" />' . "\n"           . '<input type="hidden" name="column_count" value="' . count($columns) . '" />' . "\n"           . '<fieldset id="fieldset_user_priv">' . "\n"           . '    <legend>' . __('Table-specific privileges')           . PMA_showHint(__('Note: MySQL privilege names are expressed in English'))           . '</legend>' . "\n";        // privs that are attached to a specific column        PMA_display_column_privs(            $columns, $row, 'Select_priv', 'SELECT',            'select', __('Allows reading data.'), 'Select'        );        PMA_display_column_privs(            $columns, $row, 'Insert_priv', 'INSERT',            'insert', __('Allows inserting and replacing data.'), 'Insert'        );        PMA_display_column_privs(            $columns, $row, 'Update_priv', 'UPDATE',            'update', __('Allows changing data.'), 'Update'        );        PMA_display_column_privs(            $columns, $row, 'References_priv', 'REFERENCES', 'references',            __('Has no effect in this MySQL version.'), 'References'        );        // privs that are not attached to a specific column        echo '    <div class="item">' . "\n";        foreach ($row as $current_grant => $current_grant_value) {            if (in_array(substr($current_grant, 0, (strlen($current_grant) - 5)),                    array('Select', 'Insert', 'Update', 'References'))) {                continue;            }            // make a substitution to match the messages variables;            // also we must substitute the grant we get, because we can't generate            // a form variable containing blanks (those would get changed to            // an underscore when receiving the POST)            if ($current_grant == 'Create View_priv') {                $tmp_current_grant = 'CreateView_priv';                $current_grant = 'Create_view_priv';            } elseif ($current_grant == 'Show view_priv') {                $tmp_current_grant = 'ShowView_priv';                $current_grant = 'Show_view_priv';            } else {                $tmp_current_grant = $current_grant;            }            echo '        <div class="item">' . "\n"               . '            <input type="checkbox"'               . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')               . ' name="' . $current_grant . '" id="checkbox_' . $current_grant               . '" value="Y" '               . ($current_grant_value == 'Y' ? 'checked="checked" ' : '')               . 'title="';            echo (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl']) . '"/>' . "\n";            echo '            <label for="checkbox_' . $current_grant                . '"><tt><dfn title="'                . (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                    ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                    : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl'])               . '">' . strtoupper(substr($current_grant, 0, strlen($current_grant) - 5)) . '</dfn></tt></label>' . "\n"               . '        </div>' . "\n";        } // end foreach ()        echo '    </div>' . "\n";        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    } else {        // g l o b a l    o r    d b - s p e c i f i c        //        $privTable_names = array(0 => __('Data'), 1 => __('Structure'), 2 => __('Administration'));        // d a t a        $privTable[0] = array(            array('Select', 'SELECT', __('Allows reading data.')),            array('Insert', 'INSERT', __('Allows inserting and replacing data.')),            array('Update', 'UPDATE', __('Allows changing data.')),            array('Delete', 'DELETE', __('Allows deleting data.'))        );        if ($db == '*') {            $privTable[0][] = array('File', 'FILE', __('Allows importing data from and exporting data into files.'));        }        // s t r u c t u r e        $privTable[1] = array(            array('Create', 'CREATE', ($table == '*' ? __('Allows creating new databases and tables.') : __('Allows creating new tables.'))),            array('Alter', 'ALTER', __('Allows altering the structure of existing tables.')),            array('Index', 'INDEX', __('Allows creating and dropping indexes.')),            array('Drop', 'DROP', ($table == '*' ? __('Allows dropping databases and tables.') : __('Allows dropping tables.'))),            array('Create_tmp_table', 'CREATE TEMPORARY TABLES', __('Allows creating temporary tables.')),            array('Show_view', 'SHOW VIEW', __('Allows performing SHOW CREATE VIEW queries.')),            array('Create_routine', 'CREATE ROUTINE', __('Allows creating stored routines.')),            array('Alter_routine', 'ALTER ROUTINE', __('Allows altering and dropping stored routines.')),            array('Execute', 'EXECUTE', __('Allows executing stored routines.')),        );        // this one is for a db-specific priv: Create_view_priv        if (isset($row['Create_view_priv'])) {            $privTable[1][] = array('Create_view', 'CREATE VIEW', __('Allows creating new views.'));        }        // this one is for a table-specific priv: Create View_priv        if (isset($row['Create View_priv'])) {            $privTable[1][] = array('Create View', 'CREATE VIEW', __('Allows creating new views.'));        }        if (isset($row['Event_priv'])) {            // MySQL 5.1.6            $privTable[1][] = array('Event', 'EVENT', __('Allows to set up events for the event scheduler'));            $privTable[1][] = array('Trigger', 'TRIGGER', __('Allows creating and dropping triggers'));        }        // a d m i n i s t r a t i o n        $privTable[2] = array(            array('Grant', 'GRANT', __('Allows adding users and privileges without reloading the privilege tables.')),        );        if ($db == '*') {            $privTable[2][] = array('Super', 'SUPER', __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.'));            $privTable[2][] = array('Process', 'PROCESS', __('Allows viewing processes of all users'));            $privTable[2][] = array('Reload', 'RELOAD', __('Allows reloading server settings and flushing the server\'s caches.'));            $privTable[2][] = array('Shutdown', 'SHUTDOWN', __('Allows shutting down the server.'));            $privTable[2][] = array('Show_db', 'SHOW DATABASES', __('Gives access to the complete list of databases.'));        }        $privTable[2][] = array('Lock_tables', 'LOCK TABLES', __('Allows locking tables for the current thread.'));        $privTable[2][] = array('References', 'REFERENCES', __('Has no effect in this MySQL version.'));        if ($db == '*') {            $privTable[2][] = array('Repl_client', 'REPLICATION CLIENT', __('Allows the user to ask where the slaves / masters are.'));            $privTable[2][] = array('Repl_slave', 'REPLICATION SLAVE', __('Needed for the replication slaves.'));            $privTable[2][] = array('Create_user', 'CREATE USER', __('Allows creating, dropping and renaming user accounts.'));        }        echo '<input type="hidden" name="grant_count" value="'            . (count($privTable[0]) + count($privTable[1]) + count($privTable[2]) - (isset($row['Grant_priv']) ? 1 : 0))            . '" />' . "\n"           . '<fieldset id="fieldset_user_global_rights">' . "\n"           . '    <legend>' . "\n"           . '        '            . ($db == '*'                ? __('Global privileges')                : ($table == '*'                    ? __('Database-specific privileges')                    : __('Table-specific privileges'))) . "\n"           . '        (<a href="server_privileges.php?'            . $GLOBALS['url_query'] . '&amp;checkall=1" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', true); return false;">'            . __('Check All') . '</a> /' . "\n"           . '        <a href="server_privileges.php?'            . $GLOBALS['url_query'] . '" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', false); return false;">'            . __('Uncheck All') . '</a>)' . "\n"           . '    </legend>' . "\n"           . '    <p><small><i>' . __('Note: MySQL privilege names are expressed in English') . '</i></small></p>' . "\n";        // Output the Global privilege tables with checkboxes        foreach ($privTable as $i => $table) {            echo '    <fieldset>' . "\n"                . '        <legend>' . __($privTable_names[$i]) . '</legend>' . "\n";            foreach ($table as $priv) {                echo '        <div class="item">' . "\n"                    . '            <input type="checkbox"'                    .                   ' name="' . $priv[0] . '_priv" id="checkbox_' . $priv[0] . '_priv"'                    .                   ' value="Y" title="' . $priv[2] . '"'                    .                   ((! empty($GLOBALS['checkall']) || $row[$priv[0] . '_priv'] == 'Y') ?  ' checked="checked"' : '')                    .               '/>' . "\n"                    . '            <label for="checkbox_' . $priv[0] . '_priv"><tt><dfn title="' . $priv[2] . '">'                    .                    $priv[1] . '</dfn></tt></label>' . "\n"                    . '        </div>' . "\n";            }            echo '    </fieldset>' . "\n";        }        // The "Resource limits" box is not displayed for db-specific privs        if ($db == '*') {            echo '    <fieldset>' . "\n"               . '        <legend>' . __('Resource limits') . '</legend>' . "\n"               . '        <p><small><i>' . __('Note: Setting these options to 0 (zero) removes the limit.') . '</i></small></p>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_questions"><tt><dfn title="'                . __('Limits the number of queries the user may send to the server per hour.') . '">MAX QUERIES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_questions" id="text_max_questions" value="'                . $row['max_questions'] . '" size="11" maxlength="11" title="' . __('Limits the number of queries the user may send to the server per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_updates"><tt><dfn title="'                . __('Limits the number of commands that change any table or database the user may execute per hour.') . '">MAX UPDATES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_updates" id="text_max_updates" value="'                . $row['max_updates'] . '" size="11" maxlength="11" title="' . __('Limits the number of commands that change any table or database the user may execute per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_connections"><tt><dfn title="'                . __('Limits the number of new connections the user may open per hour.') . '">MAX CONNECTIONS PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_connections" id="text_max_connections" value="'                . $row['max_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of new connections the user may open per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_user_connections"><tt><dfn title="'                . __('Limits the number of simultaneous connections the user may have.') . '">MAX USER_CONNECTIONS</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_user_connections" id="text_max_user_connections" value="'                . $row['max_user_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of simultaneous connections the user may have.') . '" />' . "\n"               . '        </div>' . "\n"               . '    </fieldset>' . "\n";        }        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    }    echo '</fieldset>' . "\n";    if ($submit) {        echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">' . "\n"           . '    <input type="submit" name="update_privs" value="' . __('Go') . '" />' . "\n"           . '</fieldset>' . "\n";    }} // end of the 'PMA_displayPrivTable()' function/** * Displays the fields used by the "new user" form as well as the * "change login information / copy user" form. * * @param string $mode are we creating a new user or are we just *                     changing  one? (allowed values: 'new', 'change') * * @global  array      $cfg     the phpMyAdmin configuration * @global  ressource  $user_link the database connection * * @return  void */function PMA_displayLoginInformationFields($mode = 'new'){    // Get user/host name lengths    $fields_info = PMA_DBI_get_columns('mysql', 'user', null, true);    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    unset($fields_info);    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<fieldset id="fieldset_add_user_login">' . "\n"       . '<legend>' . __('Login Information') . '</legend>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_username">' . "\n"       . '    ' . __('User name') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"' . "\n"       . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">' . "\n"       . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>' . "\n"       . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])            ? ''            : ' value="' . htmlspecialchars(isset($GLOBALS['new_username'])                ? $GLOBALS['new_username']                : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_hostname">' . "\n"       . '    ' . __('Host') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"' . "\n";    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '       . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')       . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')            ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>' . "\n"       . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')            ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>' . "\n";    if (! empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')                ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>' . "\n";    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')            ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>' . "\n"       . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')            ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . htmlspecialchars(isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />' . "\n"       . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_password">' . "\n"       . '    ' . __('Password') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"' . "\n"       . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">' . "\n"       . ($mode == 'change' ? '            <option value="keep" selected="selected">' . __('Do not change the password') . '</option>' . "\n" : '')       . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>' . "\n"       . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item" id="div_element_before_generate_password">' . "\n"       . '<label for="text_pma_pw2">' . "\n"       . '    ' . __('Re-type') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">&nbsp;</span>' . "\n"       . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       // Generate password added here via jQuery       . '</fieldset>' . "\n";} // end of the 'PMA_displayUserAndHostFields()' function/** * Changes / copies a user, part I */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $row = PMA_DBI_fetch_single_row('SELECT * FROM `mysql`.`user` ' . $user_host_condition);    if (! $row) {        PMA_Message::notice(__('No user found.'))->display();        unset($_REQUEST['change_copy']);    } else {        extract($row, EXTR_OVERWRITE);        // Recent MySQL versions have the field "Password" in mysql.user,        // so the previous extract creates $Password but this script        // uses $password        if (! isset($password) && isset($Password)) {            $password = $Password;        }        $queries = array();    }}/** * Adds a user *   (Changes / copies a user, part II) */if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {    $sql_query = '';    if ($pred_username == 'any') {        $username = '';    }    switch ($pred_hostname) {    case 'any':        $hostname = '%';        break;    case 'localhost':        $hostname = 'localhost';        break;    case 'hosttable':        $hostname = '';        break;    case 'thishost':        $_user_name = PMA_DBI_fetch_value('SELECT USER()');        $hostname = substr($_user_name, (strrpos($_user_name, '@') + 1));        unset($_user_name);        break;    }    $sql = "SELECT '1' FROM `mysql`.`user`"        . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"        . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";    if (PMA_DBI_fetch_value($sql) == 1) {        $message = PMA_Message::error(__('The user %s already exists!'));        $message->addParam('[i]\'' . $username . '\'@\'' . $hostname . '\'[/i]');        $_REQUEST['adduser'] = true;        $_add_user_error = true;    } else {        $create_user_real = 'CREATE USER \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        $real_sql_query = 'GRANT ' . join(', ', PMA_extractPrivInfo()) . ' ON *.* TO \''            . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        if ($pred_password != 'none' && $pred_password != 'keep') {            $sql_query = $real_sql_query . ' IDENTIFIED BY \'***\'';            $real_sql_query .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            if (isset($create_user_real)) {                $create_user_show = $create_user_real . ' IDENTIFIED BY \'***\'';                $create_user_real .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            }        } else {            if ($pred_password == 'keep' && ! empty($password)) {                $real_sql_query .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                if (isset($create_user_real)) {                    $create_user_real .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                }            }            $sql_query = $real_sql_query;            if (isset($create_user_real)) {                $create_user_show = $create_user_real;            }        }        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections))        ) {            $real_sql_query .= ' WITH';            $sql_query .= ' WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $real_sql_query .= ' GRANT OPTION';                $sql_query .= ' GRANT OPTION';            }            if (isset($max_questions)) {                // avoid negative values                $max_questions = max(0, (int)$max_questions);                $real_sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;                $sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $real_sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;                $sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $real_sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;                $sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $real_sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;                $sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        if (isset($create_user_real)) {            $create_user_real .= ';';            $create_user_show .= ';';        }        $real_sql_query .= ';';        $sql_query .= ';';        if (empty($_REQUEST['change_copy'])) {            $_error = false;            if (isset($create_user_real)) {                if (! PMA_DBI_try_query($create_user_real)) {                    $_error = true;                }                $sql_query = $create_user_show . $sql_query;            }            if ($_error || ! PMA_DBI_try_query($real_sql_query)) {                $_REQUEST['createdb'] = false;                $message = PMA_Message::rawError(PMA_DBI_getError());            } else {                $message = PMA_Message::success(__('You have added a new user.'));            }            switch (PMA_ifSetOr($_REQUEST['createdb'], '0')) {            case '1' :                // Create database with same name and grant all privileges                $q = 'CREATE DATABASE IF NOT EXISTS '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . ';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                    break;                }                /**                 * If we are not in an Ajax request, we can't reload navigation now                 */                if ($GLOBALS['is_ajax_request'] != true) {                    // this is needed in case tracking is on:                    $GLOBALS['db'] = $username;                    $GLOBALS['reload'] = true;                    PMA_reloadNavigation();                }                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '2' :                // Grant all privileges on wildcard name (username\_%)                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username) . '\_%') . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '3' :                // Grant all privileges on the specified database to the new user                $q = 'GRANT ALL PRIVILEGES ON '                . PMA_backquote(PMA_sqlAddSlashes($dbname)) . '.* TO \''                . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '0' :            default :                break;            }        } else {            if (isset($create_user_real)) {                $queries[]             = $create_user_real;            }            $queries[]             = $real_sql_query;            // we put the query containing the hidden password in            // $queries_for_display, at the same position occupied            // by the real query in $queries            $tmp_count = count($queries);            if (isset($create_user_real)) {                $queries_for_display[$tmp_count - 2] = $create_user_show;            }            $queries_for_display[$tmp_count - 1] = $sql_query;        }        unset($res, $real_sql_query);    }}/** * Changes / copies a user, part III */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $res = PMA_DBI_query('SELECT * FROM `mysql`.`db`' . $user_host_condition);    while ($row = PMA_DBI_fetch_assoc($res)) {        $queries[] = 'GRANT ' . join(', ', PMA_extractPrivInfo($row))            .' ON ' . PMA_backquote($row['Db']) . '.*'            .' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . ($row['Grant_priv'] == 'Y' ? ' WITH GRANT OPTION;' : ';');    }    PMA_DBI_free_result($res);    $res = PMA_DBI_query(        'SELECT `Db`, `Table_name`, `Table_priv` FROM `mysql`.`tables_priv`' . $user_host_condition,        $GLOBALS['userlink'],        PMA_DBI_QUERY_STORE    );    while ($row = PMA_DBI_fetch_assoc($res)) {        $res2 = PMA_DBI_QUERY(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($old_username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\''            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes($row['Db']) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($row['Table_name']) . "'"            .';',            null,            PMA_DBI_QUERY_STORE        );        $tmp_privs1 = PMA_extractPrivInfo($row);        $tmp_privs2 = array(            'Select' => array(),            'Insert' => array(),            'Update' => array(),            'References' => array()        );        while ($row2 = PMA_DBI_fetch_assoc($res2)) {            $tmp_array = explode(',', $row2['Column_priv']);            if (in_array('Select', $tmp_array)) {                $tmp_privs2['Select'][] = $row2['Column_name'];            }            if (in_array('Insert', $tmp_array)) {                $tmp_privs2['Insert'][] = $row2['Column_name'];            }            if (in_array('Update', $tmp_array)) {                $tmp_privs2['Update'][] = $row2['Column_name'];            }            if (in_array('References', $tmp_array)) {                $tmp_privs2['References'][] = $row2['Column_name'];            }            unset($tmp_array);        }        if (count($tmp_privs2['Select']) > 0 && ! in_array('SELECT', $tmp_privs1)) {            $tmp_privs1[] = 'SELECT (`' . join('`, `', $tmp_privs2['Select']) . '`)';        }        if (count($tmp_privs2['Insert']) > 0 && ! in_array('INSERT', $tmp_privs1)) {            $tmp_privs1[] = 'INSERT (`' . join('`, `', $tmp_privs2['Insert']) . '`)';        }        if (count($tmp_privs2['Update']) > 0 && ! in_array('UPDATE', $tmp_privs1)) {            $tmp_privs1[] = 'UPDATE (`' . join('`, `', $tmp_privs2['Update']) . '`)';        }        if (count($tmp_privs2['References']) > 0 && ! in_array('REFERENCES', $tmp_privs1)) {            $tmp_privs1[] = 'REFERENCES (`' . join('`, `', $tmp_privs2['References']) . '`)';        }        unset($tmp_privs2);        $queries[] = 'GRANT ' . join(', ', $tmp_privs1)            . ' ON ' . PMA_backquote($row['Db']) . '.' . PMA_backquote($row['Table_name'])            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . (in_array('Grant', explode(',', $row['Table_priv'])) ? ' WITH GRANT OPTION;' : ';');    }}/** * Updates privileges */if (! empty($update_privs)) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, (isset($tablename) ? $tablename : ''));    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    if (! isset($Grant_priv) || $Grant_priv != 'Y') {        $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table            . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    } else {        $sql_query1 = '';    }    // Should not do a GRANT USAGE for a table-specific privilege, it    // causes problems later (cannot revoke it)    if (! (isset($tablename) && 'USAGE' == implode('', PMA_extractPrivInfo()))) {        $sql_query2 = 'GRANT ' . join(', ', PMA_extractPrivInfo())            . ' ON ' . $db_and_table            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (! isset($dbname)            && (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections)))        ) {            $sql_query2 .= 'WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $sql_query2 .= ' GRANT OPTION';            }            if (isset($max_questions)) {                $max_questions = max(0, (int)$max_questions);                $sql_query2 .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $sql_query2 .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $sql_query2 .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $sql_query2 .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        $sql_query2 .= ';';    }    if (! PMA_DBI_try_query($sql_query0)) {        // This might fail when the executing user does not have ALL PRIVILEGES himself.        // See https://sourceforge.net/tracker/index.php?func=detail&aid=3285929&group_id=23067&atid=377408        $sql_query0 = '';    }    if (isset($sql_query1) && ! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    if (isset($sql_query2)) {        PMA_DBI_query($sql_query2);    } else {        $sql_query2 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1 . ' ' . $sql_query2;    $message = PMA_Message::success(__('You have updated the privileges for %s.'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');}/** * Revokes Privileges */if (isset($_REQUEST['revokeall'])) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, isset($tablename) ? $tablename : '');    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    PMA_DBI_query($sql_query0);    if (! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1;    $message = PMA_Message::success(__('You have revoked the privileges for %s'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    if (! isset($tablename)) {        unset($dbname);    } else {        unset($tablename);    }}/** * Updates the password */if (isset($_REQUEST['change_pw'])) {    // similar logic in user_password.php    $message = '';    if ($nopass == 0 && isset($pma_pw) && isset($pma_pw2)) {        if ($pma_pw != $pma_pw2) {            $message = PMA_Message::error(__('The passwords aren\'t the same!'));        } elseif (empty($pma_pw) || empty($pma_pw2)) {            $message = PMA_Message::error(__('The password is empty!'));        }    } // end if    // here $nopass could be == 1    if (empty($message)) {        $hashing_function = (! empty($pw_hash) && $pw_hash == 'old' ? 'OLD_' : '')                      . 'PASSWORD';        // in $sql_query which will be displayed, hide the password        $sql_query        = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . preg_replace('@.@s', '*', $pma_pw) . '\')');        $local_query      = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($pma_pw) . '\')');        PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        $message = PMA_Message::success(__('The password for %s was changed successfully.'));        $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    }}/** * Deletes users *   (Changes / copies a user, part IV) */if (isset($_REQUEST['delete']) || (isset($_REQUEST['change_copy']) && $_REQUEST['mode'] < 4)) {    if (isset($_REQUEST['change_copy'])) {        $selected_usr = array($old_username . '&amp;#27;' . $old_hostname);    } else {        $selected_usr = $_REQUEST['selected_usr'];        $queries = array();    }    foreach ($selected_usr as $each_user) {        list($this_user, $this_host) = explode('&amp;#27;', $each_user);        $queries[] = '# ' . sprintf(__('Deleting %s'), '\'' . $this_user . '\'@\'' . $this_host . '\'') . ' ...';        $queries[] = 'DROP USER \'' . PMA_sqlAddSlashes($this_user) . '\'@\'' . PMA_sqlAddSlashes($this_host) . '\';';        if (isset($_REQUEST['drop_users_db'])) {            $queries[] = 'DROP DATABASE IF EXISTS ' . PMA_backquote($this_user) . ';';            $GLOBALS['reload'] = true;            if ($GLOBALS['is_ajax_request'] != true) {                PMA_reloadNavigation();            }        }    }    if (empty($_REQUEST['change_copy'])) {        if (empty($queries)) {            $message = PMA_Message::error(__('No users selected for deleting!'));        } else {            if ($_REQUEST['mode'] == 3) {                $queries[] = '# ' . __('Reloading the privileges') . ' ...';                $queries[] = 'FLUSH PRIVILEGES;';            }            $drop_user_error = '';            foreach ($queries as $sql_query) {                if ($sql_query{0} != '#') {                    if (! PMA_DBI_try_query($sql_query, $GLOBALS['userlink'])) {                        $drop_user_error .= PMA_DBI_getError() . "\n";                    }                }            }            // tracking sets this, causing the deleted db to be shown in navi            unset($GLOBALS['db']);            $sql_query = join("\n", $queries);            if (! empty($drop_user_error)) {                $message = PMA_Message::rawError($drop_user_error);            } else {                $message = PMA_Message::success(__('The selected users have been deleted successfully.'));            }        }        unset($queries);    }}/** * Changes / copies a user, part V */if (isset($_REQUEST['change_copy'])) {    $tmp_count = 0;    foreach ($queries as $sql_query) {        if ($sql_query{0} != '#') {            PMA_DBI_query($sql_query);        }        // when there is a query containing a hidden password, take it        // instead of the real query sent        if (isset($queries_for_display[$tmp_count])) {            $queries[$tmp_count] = $queries_for_display[$tmp_count];        }        $tmp_count++;    }    $message = PMA_Message::success();    $sql_query = join("\n", $queries);}/** * Reloads the privilege tables into memory */if (isset($_REQUEST['flush_privileges'])) {    $sql_query = 'FLUSH PRIVILEGES;';    PMA_DBI_query($sql_query);    $message = PMA_Message::success(__('The privileges were reloaded successfully.'));}/** * defines some standard links */$link_edit = '<a class="edit_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s">'    . PMA_getIcon('b_usredit.png', __('Edit Privileges'))    . '</a>';$link_revoke = '<a href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s'    . '&amp;revokeall=1">'    . PMA_getIcon('b_usrdrop.png', __('Revoke'))    . '</a>';$link_export = '<a class="export_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;initial=%s'    . '&amp;export=1">'    . PMA_getIcon('b_tblexport.png', __('Export'))    . '</a>';/** * If we are in an Ajax request for Create User/Edit User/Revoke User/ * Flush Privileges, show $message and exit. */if ($GLOBALS['is_ajax_request'] && ! isset($_REQUEST['export']) && (! isset($_REQUEST['adduser']) || $_add_user_error) && ! isset($_REQUEST['initial']) && ! isset($_REQUEST['showall']) && ! isset($_REQUEST['edit_user_dialog']) && ! isset($_REQUEST['db_specific'])) {    if (isset($sql_query)) {        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);    }    if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {        /**         * generate html on the fly for the new user that was just created.         */        $new_user_string = '<tr>'."\n"                           .'<td> <input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_" value="' . htmlspecialchars($username) . '&amp;#27;' . htmlspecialchars($hostname) . '" /> </td>' . "\n"                           .'<td><label for="checkbox_sel_users_">' . (empty($username) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($username) ) . '</label></td>' . "\n"                           .'<td>' . htmlspecialchars($hostname) . '</td>' . "\n";        $new_user_string .= '<td>';        if (! empty($password) || isset($pma_pw)) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= '<span style="color: #FF0000">' . __('No') . '</span>';        };        $new_user_string .= '</td>'."\n";        $new_user_string .= '<td><tt>' . join(', ', PMA_extractPrivInfo('', true)) . '</tt></td>'; //Fill in privileges here        $new_user_string .= '<td>';        if ((isset($Grant_priv) && $Grant_priv == 'Y')) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= __('No');        }        $new_user_string .='</td>';        $new_user_string .= '<td>' . sprintf($link_edit, urlencode($username), urlencode($hostname), '', '') . '</td>' . "\n";        $new_user_string .= '<td>' . sprintf($link_export, urlencode($username), urlencode($hostname), (isset($initial) ? $initial : '')) . '</td>' . "\n";        $new_user_string .= '</tr>';        $extra_data['new_user_string'] = $new_user_string;        /**         * Generate the string for this alphabet's initial, to update the user         * pagination         */        $new_user_initial = strtoupper(substr($username, 0, 1));        $new_user_initial_string = '<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&initial=' . $new_user_initial            .'">' . $new_user_initial . '</a>';        $extra_data['new_user_initial'] = $new_user_initial;        $extra_data['new_user_initial_string'] = $new_user_initial_string;    }    if (isset($update_privs)) {        $extra_data['db_specific_privs'] = false;        if (isset($dbname_is_wildcard)) {            $extra_data['db_specific_privs'] = ! $dbname_is_wildcard;        }        $new_privileges = join(', ', PMA_extractPrivInfo('', true));        $extra_data['new_privileges'] = $new_privileges;    }    if ($message instanceof PMA_Message) {        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    }}/** * Displays the links */if (isset($viewing_mode) && $viewing_mode == 'db') {    $db = $checkprivs;    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";} else {    include './libraries/server_links.inc.php';}/** * Displays the page */// export user definitionif (isset($_REQUEST['export'])) {    $title = __('User') . ' `' . htmlspecialchars($username) . '`@`' . htmlspecialchars($hostname) . '`';    $response = '<textarea cols="' . $GLOBALS['cfg']['TextareaCols'] . '" rows="' . $GLOBALS['cfg']['TextareaRows'] . '">';    $grants = PMA_DBI_fetch_result("SHOW GRANTS FOR '" . PMA_sqlAddSlashes($username) . "'@'" . PMA_sqlAddSlashes($hostname) . "'");    foreach ($grants as $one_grant) {        $response .= $one_grant . ";\n\n";    }    $response .= '</textarea>';    unset($username, $hostname, $grants, $one_grant);    if ($GLOBALS['is_ajax_request']) {        PMA_ajaxResponse($response, 1, array('title' => $title));    } else {        echo "<h2>$title</h2>$response";    }}if (empty($_REQUEST['adduser']) && (! isset($checkprivs) || ! strlen($checkprivs))) {    if (! isset($username)) {        // No username is given --> display the overview        echo '<h2>' . "\n"           . PMA_getIcon('b_usrlist.png')           . __('Users overview') . "\n"           . '</h2>' . "\n";        $sql_query = 'SELECT *,' .            "       IF(`Password` = _latin1 '', 'N', 'Y') AS 'Password'" .            '  FROM `mysql`.`user`';        $sql_query .= (isset($initial) ? PMA_rangeOfUsers($initial) : '');        $sql_query .= ' ORDER BY `User` ASC, `Host` ASC;';        $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);        if (! $res) {            // the query failed! This may have two reasons:            // - the user does not have enough privileges            // - the privilege tables use a structure of an earlier version.            // so let's try a more simple query            $sql_query = 'SELECT * FROM `mysql`.`user`';            $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);            if (! $res) {                PMA_Message::error(__('No Privileges'))->display();                PMA_DBI_free_result($res);                unset($res);            } else {                // This message is hardcoded because I will replace it by                // a automatic repair feature soon.                $raw = 'Your privilege table structure seems to be older than'                    . ' this MySQL version!<br />'                    . 'Please run the <tt>mysql_upgrade</tt> command'                    . '(<tt>mysql_fix_privilege_tables</tt> on older systems)'                    . ' that should be included in your MySQL server distribution'                    . ' to solve this problem!';                PMA_Message::rawError($raw)->display();            }        } else {            // we also want users not in table `user` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            $tables_to_search_for_users = array(                'user', 'db', 'tables_priv', 'columns_priv', 'procs_priv',            );            $db_rights_sqls = array();            foreach ($tables_to_search_for_users as $table_search_in) {                if (in_array($table_search_in, $tables)) {                    $db_rights_sqls[] = 'SELECT DISTINCT `User`, `Host` FROM `mysql`.`' . $table_search_in . '` ' . (isset($initial) ? PMA_rangeOfUsers($initial) : '');                }            }            $user_defaults = array(                'User'      => '',                'Host'      => '%',                'Password'  => '?',                'Grant_priv' => 'N',                'privs'     => array('USAGE'),            );            // for all initials, even non A-Z            $array_initials = array();            // for the rights            $db_rights = array();            $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                .' ORDER BY `User` ASC, `Host` ASC';            $db_rights_result = PMA_DBI_query($db_rights_sql);            while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                $db_rights_row = array_merge($user_defaults, $db_rights_row);                $db_rights[$db_rights_row['User']][$db_rights_row['Host']]                    = $db_rights_row;            }            PMA_DBI_free_result($db_rights_result);            unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);            ksort($db_rights);            /**             * Displays the initials             * In an Ajax request, we don't need to show this.             * Also not necassary if there is less than 20 privileges             */            if ($GLOBALS['is_ajax_request'] != true && PMA_DBI_num_rows($res) > 20 ) {                // initialize to false the letters A-Z                for ($letter_counter = 1; $letter_counter < 27; $letter_counter++) {                    if (! isset($array_initials[chr($letter_counter + 64)])) {                        $array_initials[chr($letter_counter + 64)] = false;                    }                }                $initials = PMA_DBI_try_query('SELECT DISTINCT UPPER(LEFT(`User`,1)) FROM `user` ORDER BY `User` ASC', null, PMA_DBI_QUERY_STORE);                while (list($tmp_initial) = PMA_DBI_fetch_row($initials)) {                    $array_initials[$tmp_initial] = true;                }                // Display the initials, which can be any characters, not                // just letters. For letters A-Z, we add the non-used letters                // as greyed out.                uksort($array_initials, "strnatcasecmp");                echo '<table id="initials_table" class="' . $conditional_class . '" <cellspacing="5"><tr>';                foreach ($array_initials as $tmp_initial => $initial_was_found) {                    if ($initial_was_found) {                        echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;initial=' . urlencode($tmp_initial) . '">' . $tmp_initial . '</a></td>' . "\n";                    } else {                        echo '<td>' . $tmp_initial . '</td>';                    }                }                echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;showall=1" class="nowrap">[' . __('Show all') . ']</a></td>' . "\n";                echo '</tr></table>';            }            /**            * Display the user overview            * (if less than 50 users, display them immediately)            */            if (isset($initial) || isset($showall) || PMA_DBI_num_rows($res) < 50) {                while ($row = PMA_DBI_fetch_assoc($res)) {                    $row['privs'] = PMA_extractPrivInfo($row, true);                    $db_rights[$row['User']][$row['Host']] = $row;                }                @PMA_DBI_free_result($res);                unset($res);                echo '<form name="usersForm" id="usersForm" action="server_privileges.php" method="post">' . "\n"                   . PMA_generate_common_hidden_inputs('', '')                   . '    <table id="tableuserrights" class="data">' . "\n"                   . '    <thead>' . "\n"                   . '        <tr><th></th>' . "\n"                   . '            <th>' . __('User') . '</th>' . "\n"                   . '            <th>' . __('Host') . '</th>' . "\n"                   . '            <th>' . __('Password') . '</th>' . "\n"                   . '            <th>' . __('Global privileges') . ' '                   . PMA_showHint(__('Note: MySQL privilege names are expressed in English')) . '</th>' . "\n"                   . '            <th>' . __('Grant') . '</th>' . "\n"                   . '            <th colspan="2">' . __('Action') . '</th>' . "\n";                echo '        </tr>' . "\n";                echo '    </thead>' . "\n";                echo '    <tbody>' . "\n";                $odd_row = true;                $index_checkbox = -1;                foreach ($db_rights as $user) {                    $index_checkbox++;                    ksort($user);                    foreach ($user as $host) {                        $index_checkbox++;                        echo '        <tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                           . '            <td><input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_'                            . $index_checkbox . '" value="'                            . htmlspecialchars($host['User'] . '&amp;#27;' . $host['Host'])                            . '"'                            . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')                            . ' /></td>' . "\n"                           . '            <td><label for="checkbox_sel_users_' . $index_checkbox . '">' . (empty($host['User']) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($host['User'])) . '</label></td>' . "\n"                           . '            <td>' . htmlspecialchars($host['Host']) . '</td>' . "\n";                        echo '            <td>';                        switch ($host['Password']) {                        case 'Y':                            echo __('Yes');                            break;                        case 'N':                            echo '<span style="color: #FF0000">' . __('No') . '</span>';                            break;                        // this happens if this is a definition not coming from mysql.user                        default:                            echo '--'; // in future version, replace by "not present"                            break;                        } // end switch                        echo '</td>' . "\n"                           . '            <td><tt>' . "\n"                           . '                ' . implode(',' . "\n" . '            ', $host['privs']) . "\n"                           . '                </tt></td>' . "\n"                           . '            <td>' . ($host['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . '</td>' . "\n"                           . '            <td align="center">';                        printf($link_edit, urlencode($host['User']), urlencode($host['Host']), '', '');                        echo '</td>';                        echo '<td align="center">';                        printf($link_export, urlencode($host['User']), urlencode($host['Host']), (isset($initial) ? $initial : ''));                        echo '</td>';                        echo '</tr>';                        $odd_row = ! $odd_row;                    }                }                unset($user, $host, $odd_row);                echo '    </tbody></table>' . "\n"                   .'<img class="selectallarrow"'                   .' src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png"'                   .' width="38" height="22"'                   .' alt="' . __('With selected:') . '" />' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '&amp;checkall=1"'                   .' onclick="if (markAllRows(\'usersForm\')) return false;">'                   . __('Check All') . '</a>' . "\n"                   .'/' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '"'                   .' onclick="if (unMarkAllRows(\'usersForm\')) return false;">'                   . __('Uncheck All') . '</a>' . "\n";                // add/delete user fieldset                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user">'                   . '        <legend>' . "\n"                   . PMA_getIcon('b_usrdrop.png')                   . '            ' . __('Remove selected users') . '' . "\n"                   . '        </legend>' . "\n"                   . '        <input type="hidden" name="mode" value="2" />' . "\n"                   . '(' . __('Revoke all active privileges from the users and delete them afterwards.') . ')<br />' . "\n"                   . '        <input type="checkbox" title="' . __('Drop the databases that have the same names as the users.') . '" name="drop_users_db" id="checkbox_drop_users_db" />' . "\n"                   . '        <label for="checkbox_drop_users_db" title="' . __('Drop the databases that have the same names as the users.') . '">' . "\n"                   . '            ' . __('Drop the databases that have the same names as the users.') . "\n"                   . '        </label>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user_footer" class="tblFooters">' . "\n"                   . '        <input type="submit" name="delete" value="' . __('Go') . '" id="buttonGo" class="' . $conditional_class . '"/>' . "\n"                   . '    </fieldset>' . "\n"                   . '</form>' . "\n";            } else {                unset ($row);                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n";            } // end if (display overview)            if ($GLOBALS['is_ajax_request']) {                exit;            }            $flushnote = new PMA_Message(__('Note: phpMyAdmin gets the users\' privileges directly from MySQL\'s privilege tables. The content of these tables may differ from the privileges the server uses, if they have been changed manually. In this case, you should %sreload the privileges%s before you continue.'), PMA_Message::NOTICE);            $flushnote->addParam('<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;flush_privileges=1" id="reload_privileges_anchor" class="' . $conditional_class . '">', false);            $flushnote->addParam('</a>', false);            $flushnote->display();        }    } else {        // A user was selected -> display the user's properties        // In an Ajax request, prevent cached values from showing        if ($GLOBALS['is_ajax_request'] == true) {            header('Cache-Control: no-cache');        }        echo '<h2>' . "\n"           . PMA_getIcon('b_usredit.png')           . __('Edit Privileges') . ': '           . __('User');        if (isset($dbname)) {            echo ' <i><a href="server_privileges.php?'                . $GLOBALS['url_query'] . '&amp;username=' . htmlspecialchars(urlencode($username))                . '&amp;hostname=' . htmlspecialchars(urlencode($hostname)) . '&amp;dbname=&amp;tablename=">\''                . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</a></i>' . "\n";            $url_dbname = urlencode(str_replace(array('\_', '\%'), array('_', '%'), $dbname));            echo ' - ' . ($dbname_is_wildcard ? __('Databases') : __('Database') );            if (isset($tablename)) {                echo ' <i><a href="server_privileges.php?' . $GLOBALS['url_query']                    . '&amp;username=' . htmlspecialchars(urlencode($username)) . '&amp;hostname=' . htmlspecialchars(urlencode($hostname))                    . '&amp;dbname=' . htmlspecialchars($url_dbname) . '&amp;tablename=">' . htmlspecialchars($dbname) . '</a></i>';                echo ' - ' . __('Table') . ' <i>' . htmlspecialchars($tablename) . '</i>';            } else {                echo ' <i>' . htmlspecialchars($dbname) . '</i>';            }        } else {            echo ' <i>\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</i>' . "\n";        }        echo '</h2>' . "\n";        $sql = "SELECT '1' FROM `mysql`.`user`"            . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"            . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        $user_does_not_exists = (bool) ! PMA_DBI_fetch_value($sql);        unset($sql);        if ($user_does_not_exists) {            PMA_Message::error(__('The selected user was not found in the privilege table.'))->display();            PMA_displayLoginInformationFields();            //require './libraries/footer.inc.php';        }        echo '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n";        $_params = array(            'username' => $username,            'hostname' => $hostname,        );        if (isset($dbname)) {            $_params['dbname'] = $dbname;            if (isset($tablename)) {                $_params['tablename'] = $tablename;            }        }        echo PMA_generate_common_hidden_inputs($_params);        PMA_displayPrivTable(            PMA_ifSetOr($dbname, '*', 'length'),            PMA_ifSetOr($tablename, '*', 'length')        );        echo '</form>' . "\n";        if (! isset($tablename) && empty($dbname_is_wildcard)) {            // no table name was given, display all table specific rights            // but only if $dbname contains no wildcards            // table header            echo '<form action="server_privileges.php" id="db_or_table_specific_priv" method="post">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset>' . "\n"               . '<legend>' . (! isset($dbname) ? __('Database-specific privileges') : __('Table-specific privileges')) . '</legend>' . "\n"               . '<table class="data">' . "\n"               . '<thead>' . "\n"               . '<tr><th>' . (! isset($dbname) ? __('Database') : __('Table')) . '</th>' . "\n"               . '    <th>' . __('Privileges') . '</th>' . "\n"               . '    <th>' . __('Grant') . '</th>' . "\n"               . '    <th>' . (! isset($dbname) ? __('Table-specific privileges') : __('Column-specific privileges')) . '</th>' . "\n"               . '    <th colspan="2">' . __('Action') . '</th>' . "\n"               . '</tr>' . "\n"               . '</thead>' . "\n"               . '<tbody>' . "\n";            $user_host_condition = ' WHERE `User`'                . ' = \'' . PMA_sqlAddSlashes($username) . "'"                . ' AND `Host`'                . ' = \'' . PMA_sqlAddSlashes($hostname) . "'";            // table body            // get data            // we also want privielgs for this user not in table `db` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            if (! isset($dbname)) {                // no db name given, so we want all privs for the given user                $tables_to_search_for_users = array(                    'tables_priv', 'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Db`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Db'          => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Table_privs' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Db` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    // only Db names in the table `mysql`.`db` uses wildcards                    // as we are in the db specific rights display we want                    // all db names escaped, also from other sources                    $db_rights_row['Db'] = PMA_escape_mysql_wildcards(                        $db_rights_row['Db']                    );                    $db_rights[$db_rights_row['Db']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT * FROM `mysql`.`db`' . $user_host_condition . ' ORDER BY `Db` ASC';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Db']])) {                        $db_rights[$row['Db']] = array_merge($db_rights[$row['Db']], $row);                    } else {                        $db_rights[$row['Db']] = $row;                    }                    // there are db specific rights for this user                    // so we can drop this db rights                    $db_rights[$row['Db']]['can_delete'] = true;                }                PMA_DBI_free_result($res);                unset($row, $res);            } else {                // db name was given,                // so we want all user specific rights for this db                $user_host_condition .=                    ' AND `Db`'                    .' LIKE \'' . PMA_sqlAddSlashes($dbname, true) . "'";                $tables_to_search_for_users = array(                    'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Table_name`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Table_name'  => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Column_priv' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Table_name` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    $db_rights[$db_rights_row['Table_name']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT `Table_name`,'                    .' `Table_priv`,'                    .' IF(`Column_priv` = _latin1 \'\', 0, 1)'                    .' AS \'Column_priv\''                    .' FROM `mysql`.`tables_priv`'                    . $user_host_condition                    .' ORDER BY `Table_name` ASC;';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Table_name']])) {                        $db_rights[$row['Table_name']] = array_merge($db_rights[$row['Table_name']], $row);                    } else {                        $db_rights[$row['Table_name']] = $row;                    }                }                PMA_DBI_free_result($res);                unset($row, $res);            }            ksort($db_rights);            // display rows            if (count($db_rights) < 1) {                echo '<tr class="odd">' . "\n"                   . '    <td colspan="6"><center><i>' . __('None') . '</i></center></td>' . "\n"                   . '</tr>' . "\n";            } else {                $odd_row = true;                $found_rows = array();                //while ($row = PMA_DBI_fetch_assoc($res)) {                foreach ($db_rights as $row) {                    $found_rows[] = (! isset($dbname)) ? $row['Db'] : $row['Table_name'];                    echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                       . '    <td>' . htmlspecialchars((! isset($dbname)) ? $row['Db'] : $row['Table_name']) . '</td>' . "\n"                       . '    <td><tt>' . "\n"                       . '        ' . join(',' . "\n" . '            ', PMA_extractPrivInfo($row, true)) . "\n"                       . '        </tt></td>' . "\n"                       . '    <td>' . ((((! isset($dbname)) && $row['Grant_priv'] == 'Y') || (isset($dbname) && in_array('Grant', explode(',', $row['Table_priv'])))) ? __('Yes') : __('No')) . '</td>' . "\n"                       . '    <td>';                    if (! empty($row['Table_privs']) || ! empty ($row['Column_priv'])) {                        echo __('Yes');                    } else {                        echo __('No');                    }                    echo '</td>' . "\n"                       . '    <td>';                    printf(                        $link_edit,                        htmlspecialchars(urlencode($username)),                        urlencode(htmlspecialchars($hostname)),                        urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                        urlencode((! isset($dbname)) ? '' : $row['Table_name'])                    );                    echo '</td>' . "\n"                       . '    <td>';                    if (! empty($row['can_delete']) || isset($row['Table_name']) && strlen($row['Table_name'])) {                        printf(                            $link_revoke,                            htmlspecialchars(urlencode($username)),                            urlencode(htmlspecialchars($hostname)),                            urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                            urlencode((! isset($dbname)) ? '' : $row['Table_name'])                        );                    }                    echo '</td>' . "\n"                       . '</tr>' . "\n";                    $odd_row = ! $odd_row;                } // end while            }            unset($row);            echo '</tbody>' . "\n"               . '</table>' . "\n";            if (! isset($dbname)) {                // no database name was given, display select db                $pred_db_array =PMA_DBI_fetch_result('SHOW DATABASES;');                echo '    <label for="text_dbname">' . __('Add privileges on the following database') . ':</label>' . "\n";                if (! empty($pred_db_array)) {                    echo '    <select name="pred_dbname" class="autosubmit">' . "\n"                       . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                    foreach ($pred_db_array as $current_db) {                        $current_db = PMA_escape_mysql_wildcards($current_db);                        // cannot use array_diff() once, outside of the loop,                        // because the list of databases has special characters                        // already escaped in $found_rows,                        // contrary to the output of SHOW DATABASES                        if (empty($found_rows) || ! in_array($current_db, $found_rows)) {                            echo '        <option value="' . htmlspecialchars($current_db) . '">'                                . htmlspecialchars($current_db) . '</option>' . "\n";                        }                    }                    echo '    </select>' . "\n";                }                echo '    <input type="text" id="text_dbname" name="dbname" />' . "\n"                    . PMA_showHint(__('Wildcards % and _ should be escaped with a \ to use them literally'));            } else {                echo '    <input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '"/>' . "\n"                   . '    <label for="text_tablename">' . __('Add privileges on the following table') . ':</label>' . "\n";                if ($res = @PMA_DBI_try_query('SHOW TABLES FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . ';', null, PMA_DBI_QUERY_STORE)) {                    $pred_tbl_array = array();                    while ($row = PMA_DBI_fetch_row($res)) {                        if (! isset($found_rows) || ! in_array($row[0], $found_rows)) {                            $pred_tbl_array[] = $row[0];                        }                    }                    PMA_DBI_free_result($res);                    unset($res, $row);                    if (! empty($pred_tbl_array)) {                        echo '    <select name="pred_tablename" class="autosubmit">' . "\n"                           . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                        foreach ($pred_tbl_array as $current_table) {                            echo '        <option value="' . htmlspecialchars($current_table) . '">' . htmlspecialchars($current_table) . '</option>' . "\n";                        }                        echo '    </select>' . "\n";                    }                } else {                    unset($res);                }                echo '    <input type="text" id="text_tablename" name="tablename" />' . "\n";            }            echo '</fieldset>' . "\n";            echo '<fieldset class="tblFooters">' . "\n"               . '    <input type="submit" value="' . __('Go') . '" />'               . '</fieldset>' . "\n"               . '</form>' . "\n";        }        // Provide a line with links to the relevant database and table        if (isset($dbname) && empty($dbname_is_wildcard)) {            echo '[ ' . __('Database')                . ' <a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'                . $GLOBALS['url_query'] . '&amp;db=' . $url_dbname . '&amp;reload=1">'                . htmlspecialchars($dbname) . ': ' . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabDatabase']) . "</a> ]\n";            if (isset($tablename)) {                echo ' [ ' . __('Table') . ' <a href="'                    . $GLOBALS['cfg']['DefaultTabTable'] . '?' . $GLOBALS['url_query']                    . '&amp;db=' . $url_dbname . '&amp;table=' . htmlspecialchars(urlencode($tablename))                    . '&amp;reload=1">' . htmlspecialchars($tablename) . ': '                    . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])                    . "</a> ]\n";            }            unset($url_dbname);        }        if (! isset($dbname) && ! $user_does_not_exists) {            include_once './libraries/display_change_password.lib.php';            echo '<form action="server_privileges.php" method="post" onsubmit="return checkPassword(this);">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="old_username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="old_hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset id="fieldset_change_copy_user">' . "\n"               . '    <legend>' . __('Change Login Information / Copy User') . '</legend>' . "\n";            PMA_displayLoginInformationFields('change');            echo '    <fieldset>' . "\n"                . '        <legend>' . __('Create a new user with the same privileges and ...') . '</legend>' . "\n";            $choices = array(                '4' => __('... keep the old one.'),                '1' => __('... delete the old one from the user tables.'),                '2' => __('... revoke all active privileges from the old one and delete it afterwards.'),                '3' => __('... delete the old one from the user tables and reload the privileges afterwards.'));            PMA_display_html_radio('mode', $choices, '4', true);            unset($choices);            echo '    </fieldset>' . "\n"               . '</fieldset>' . "\n"               . '<fieldset id="fieldset_change_copy_user_footer" class="tblFooters">' . "\n"               . '    <input type="submit" name="change_copy" value="' . __('Go') . '" />' . "\n"               . '</fieldset>' . "\n"               . '</form>' . "\n";        }    }} elseif (isset($_REQUEST['adduser'])) {    // Add user    $GLOBALS['url_query'] .= '&amp;adduser=1';    echo '<h2>' . "\n"       . PMA_getIcon('b_usradd.png') . __('Add user') . "\n"       . '</h2>' . "\n"       . '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n"       . PMA_generate_common_hidden_inputs('', '');    PMA_displayLoginInformationFields('new');    echo '<fieldset id="fieldset_add_user_database">' . "\n"        . '<legend>' . __('Database for user') . '</legend>' . "\n";    $default_choice = 0;    $choices = array(        '0' => _pgettext('Create none database for user', 'None'),        '1' => __('Create database with same name and grant all privileges'),        '2' => __('Grant all privileges on wildcard name (username\\_%)'));    if (! empty($dbname) ) {        $choices['3'] = sprintf(            __('Grant all privileges on database &quot;%s&quot;'),            htmlspecialchars($dbname)        );        $default_choice = 3;        echo '<input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '" />' . "\n";    }    // 4th parameter set to true to add line breaks    // 5th parameter set to false to avoid htmlspecialchars() escaping in the label    //  since we have some HTML in some labels    PMA_display_html_radio('createdb', $choices, $default_choice, true, false);    unset($choices);    unset($default_choice);    echo '</fieldset>' . "\n";    PMA_displayPrivTable('*', '*', false);    echo '    <fieldset id="fieldset_add_user_footer" class="tblFooters">' . "\n"       . '        <input type="submit" name="adduser_submit" value="' . __('Go') . '" />' . "\n"       . '    </fieldset>' . "\n"       . '</form>' . "\n";} else {    // check the privileges for a particular database.    $user_form = '<form id="usersForm" action="server_privileges.php"><fieldset>' . "\n"       . '<legend>' . "\n"       . PMA_getIcon('b_usrcheck.png')       . '    ' . sprintf(__('Users having access to &quot;%s&quot;'), '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?' . PMA_generate_common_url($checkprivs) . '">' .  htmlspecialchars($checkprivs) . '</a>') . "\n"       . '</legend>' . "\n"       . '<table id="dbspecificuserrights" class="data">' . "\n"       . '<thead>' . "\n"       . '    <tr><th>' . __('User') . '</th>' . "\n"       . '        <th>' . __('Host') . '</th>' . "\n"       . '        <th>' . __('Type') . '</th>' . "\n"       . '        <th>' . __('Privileges') . '</th>' . "\n"       . '        <th>' . __('Grant') . '</th>' . "\n"       . '        <th>' . __('Action') . '</th>' . "\n"       . '    </tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    unset($row, $row1, $row2);    // now, we build the table...    $list_of_privileges        = '`User`, '        . '`Host`, '        . '`Select_priv`, '        . '`Insert_priv`, '        . '`Update_priv`, '        . '`Delete_priv`, '        . '`Create_priv`, '        . '`Drop_priv`, '        . '`Grant_priv`, '        . '`Index_priv`, '        . '`Alter_priv`, '        . '`References_priv`, '        . '`Create_tmp_table_priv`, '        . '`Lock_tables_priv`, '        . '`Create_view_priv`, '        . '`Show_view_priv`, '        . '`Create_routine_priv`, '        . '`Alter_routine_priv`, '        . '`Execute_priv`';    $list_of_compared_privileges        = '`Select_priv` = \'N\''        . ' AND `Insert_priv` = \'N\''        . ' AND `Update_priv` = \'N\''        . ' AND `Delete_priv` = \'N\''        . ' AND `Create_priv` = \'N\''        . ' AND `Drop_priv` = \'N\''        . ' AND `Grant_priv` = \'N\''        . ' AND `References_priv` = \'N\''        . ' AND `Create_tmp_table_priv` = \'N\''        . ' AND `Lock_tables_priv` = \'N\''        . ' AND `Create_view_priv` = \'N\''        . ' AND `Show_view_priv` = \'N\''        . ' AND `Create_routine_priv` = \'N\''        . ' AND `Alter_routine_priv` = \'N\''        . ' AND `Execute_priv` = \'N\'';    if (PMA_MYSQL_INT_VERSION >= 50106) {        $list_of_privileges .=            ', `Event_priv`, '            . '`Trigger_priv`';        $list_of_compared_privileges .=            ' AND `Event_priv` = \'N\''            . ' AND `Trigger_priv` = \'N\'';    }    $sql_query = '(SELECT ' . $list_of_privileges . ', `Db`'        .' FROM `mysql`.`db`'        .' WHERE \'' . PMA_sqlAddSlashes($checkprivs) . "'"        .' LIKE `Db`'        .' AND NOT (' . $list_of_compared_privileges. ')) '        .'UNION '        .'(SELECT ' . $list_of_privileges . ', \'*\' AS `Db`'        .' FROM `mysql`.`user` '        .' WHERE NOT (' . $list_of_compared_privileges . ')) '        .' ORDER BY `User` ASC,'        .'  `Host` ASC,'        .'  `Db` ASC;';    $res = PMA_DBI_query($sql_query);    $row = PMA_DBI_fetch_assoc($res);    if ($row) {        $found = true;    }    if ($found) {        while (true) {            // prepare the current user            $current_privileges = array();            $current_user = $row['User'];            $current_host = $row['Host'];            while ($row && $current_user == $row['User'] && $current_host == $row['Host']) {                $current_privileges[] = $row;                $row = PMA_DBI_fetch_assoc($res);            }            $user_form .= '    <tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . (empty($current_user) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($current_user)) . "\n"               . '        </td>' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . htmlspecialchars($current_host) . '</td>' . "\n";            for ($i = 0; $i < count($current_privileges); $i++) {                $current = $current_privileges[$i];                $user_form .= '        <td>' . "\n"                   . '            ';                if (! isset($current['Db']) || $current['Db'] == '*') {                    $user_form .= __('global');                } elseif ($current['Db'] == PMA_escape_mysql_wildcards($checkprivs)) {                    $user_form .= __('database-specific');                } else {                    $user_form .= __('wildcard'). ': <tt>' . htmlspecialchars($current['Db']) . '</tt>';                }                $user_form .= "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            <tt>' . "\n"                   . '                ' . join(',' . "\n" . '                ', PMA_extractPrivInfo($current, true)) . "\n"                   . '            </tt>' . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            ' . ($current['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n";                $user_form .= sprintf(                    $link_edit,                    urlencode($current_user),                    urlencode($current_host),                    urlencode(! isset($current['Db']) || $current['Db'] == '*' ? '' : $current['Db']),                    ''                );                $user_form .= '</td>' . "\n"                   . '    </tr>' . "\n";                if (($i + 1) < count($current_privileges)) {                    $user_form .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n";                }            }            if (empty($row) && empty($row1) && empty($row2)) {                break;            }            $odd_row = ! $odd_row;        }    } else {        $user_form .= '    <tr class="odd">' . "\n"           . '        <td colspan="6">' . "\n"           . '            ' . __('No user found.') . "\n"           . '        </td>' . "\n"           . '    </tr>' . "\n";    }    $user_form .= '</tbody>' . "\n"       . '</table></fieldset></form>' . "\n";    if ($GLOBALS['is_ajax_request'] == true) {        $extra_data['user_form'] = $user_form;        $message = PMA_Message::success(__('User has been added.'));        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    } else {        // Offer to create a new user for the current database        $user_form .= '<fieldset id="fieldset_add_user">' . "\n"           . '<legend>' . __('New') . '</legend>' . "\n"           . '    <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1&amp;dbname=' . htmlspecialchars($checkprivs) .'" rel="'.'checkprivs='.htmlspecialchars($checkprivs). '&amp;'.$GLOBALS['url_query'] . '" class="'.$conditional_class.'" name="db_specific">' . "\n"           . PMA_getIcon('b_usradd.png')           . '        ' . __('Add user') . '</a>' . "\n"           . '</fieldset>' . "\n";        echo $user_form ;    }} // end if (empty($_REQUEST['adduser']) && empty($checkprivs)) ... elseif ... else .../** * Displays the footer */echo "\n\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_variables.js';PMA_AddJSVar('pma_token', $_SESSION[' PMA_token ']);PMA_AddJSVar('url_query', str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar('is_superuser', PMA_isSuperuser() ? true : false);/** * Does the common work */require './libraries/server_common.inc.php';/** * Required to display documentation links */require './libraries/server_variables_doc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    if (isset($_REQUEST['type'])) {        switch($_REQUEST['type']) {            case 'getval':                $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                    && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte') {                    exit(implode(' ', PMA_formatByteDown($varValue[1], 3, 3)));                }                exit($varValue[1]);                break;            case 'setval':                $value = $_REQUEST['varValue'];                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                   && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte'                   && preg_match('/^\s*(\d+(\.\d+)?)\s*(mb|kb|mib|kib|gb|gib)\s*$/i', $value, $matches)) {                    $exp = array('kb' => 1, 'kib' => 1, 'mb' => 2, 'mib' => 2, 'gb' => 3, 'gib' => 3);                    $value = floatval($matches[1]) * pow(1024, $exp[strtolower($matches[3])]);                } else {                    $value = PMA_sqlAddslashes($value);                }                if (! is_numeric($value)) $value="'" . $value . "'";                if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName']) && PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value)) {                    // Some values are rounded down etc.                    $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                    exit(json_encode(array(                        'success' => true,                        'variable' => formatVariable($_REQUEST['varName'], $varValue[1])                        ))                    );                }                exit(json_encode(array(                    'success' => false,                    'error' => __('Setting variable failed')                    ))                );                break;        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')   . '' . __('Server variables and settings') . "\n"   . PMA_showMySQLDocu('server_system_variables', 'server_system_variables')   . '</h2>' . "\n";/** * Sends the queries and buffers the results */$serverVarsSession = PMA_DBI_fetch_result('SHOW SESSION VARIABLES;', 0, 1);$serverVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES;', 0, 1);/** * Displays the page */?><fieldset id="tableFilter" style="display:none;"><legend><?php echo __('Filters'); ?></legend><div class="formelement">    <label for="filterText"><?php echo __('Containing the word:'); ?></label>    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" /></div></fieldset><table id="serverVariables" class="data filteredData noclick"><thead><tr><th><?php echo __('Variable'); ?></th>    <th class="valueHeader"><?phpecho __('Session value') . ' / ' . __('Global value');?>    </th>    <th><?php echo __('Documentation'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($serverVars as $name => $value) {    $has_session_value = isset($serverVarsSession[$name]) && $serverVarsSession[$name] != $value;    $row_class = ($odd_row ? 'odd' : 'even') . ' ' . ($has_session_value ? 'diffSession' : '');    ?><tr class="<?php echo $row_class; ?>">    <th nowrap="nowrap"><?php echo htmlspecialchars(str_replace('_', ' ', $name)); ?></th>    <td class="value"><?php echo formatVariable($name, $value); ?></td>    <td class="value"><?php    // To display variable documentation link    if (isset($VARIABLE_DOC_LINKS[$name]))        echo PMA_showMySQLDocu($VARIABLE_DOC_LINKS[$name][1], $VARIABLE_DOC_LINKS[$name][1], false, $VARIABLE_DOC_LINKS[$name][2] . '_' . $VARIABLE_DOC_LINKS[$name][0]);    ?></td>    <?php    if ($has_session_value) {        ?></tr><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> ">    <td>(<?php echo __('Session value'); ?>)</td>    <td class="value"><?php echo formatVariable($name, $serverVarsSession[$name]); ?></td>    <td class="value"></td>    <?php } ?></tr>    <?php    $odd_row = ! $odd_row;}?></tbody></table><?phpfunction formatVariable($name, $value){    global $VARIABLE_DOC_LINKS;    if (is_numeric($value)) {        if (isset($VARIABLE_DOC_LINKS[$name][3]) && $VARIABLE_DOC_LINKS[$name][3]=='byte')            return '<abbr title="'.PMA_formatNumber($value, 0).'">'.implode(' ', PMA_formatByteDown($value, 3, 3)).'</abbr>';        else return PMA_formatNumber($value, 0);    }    return htmlspecialchars($value);}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build NHibernate dumps of tables * * @package PhpMyAdmin-Export * @subpackage Codegen */if (! defined('PHPMYADMIN')) {    exit;}/** * This gets executed twice so avoid a notice */if (! defined('CG_FORMAT_NHIBERNATE_CS')) {    define("CG_FORMAT_NHIBERNATE_CS", "NHibernate C# DO");    define("CG_FORMAT_NHIBERNATE_XML", "NHibernate XML");    define("CG_HANDLER_NHIBERNATE_CS_BODY", "handleNHibernateCSBody");    define("CG_HANDLER_NHIBERNATE_XML_BODY", "handleNHibernateXMLBody");}$CG_FORMATS = array(CG_FORMAT_NHIBERNATE_CS, CG_FORMAT_NHIBERNATE_XML);$CG_HANDLERS = array(CG_HANDLER_NHIBERNATE_CS_BODY, CG_HANDLER_NHIBERNATE_XML_BODY);/** * */if (isset($plugin_list)) {    $plugin_list['codegen'] = array(        'text' => 'CodeGen',        'extension' => 'cs',        'mime_type' => 'text/cs',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'select', 'name' => 'format', 'text' => __('Format:'), 'values' => $CG_FORMATS),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in NHibernate format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $CG_FORMATS, $CG_HANDLERS, $what;        $format = $GLOBALS[$what . '_format'];        if (isset($CG_FORMATS[$format])) {            return PMA_exportOutputHandler($CG_HANDLERS[$format]($db, $table, $crlf));        }        return PMA_exportOutputHandler(sprintf("%s is not supported.", $format));    }    /**     *     * @package PhpMyAdmin-Export     * @subpackage Codegen     */    class TableProperty    {        public $name;        public $type;        public $nullable;        public $key;        public $defaultValue;        public $ext;        function __construct($row)        {            $this->name = trim($row[0]);            $this->type = trim($row[1]);            $this->nullable = trim($row[2]);            $this->key = trim($row[3]);            $this->defaultValue = trim($row[4]);            $this->ext = trim($row[5]);        }        function getPureType()        {            $pos=strpos($this->type, "(");            if ($pos > 0)                return substr($this->type, 0, $pos);            return $this->type;        }        function isNotNull()        {            return $this->nullable == "NO" ? "true" : "false";        }        function isUnique()        {            return $this->key == "PRI" || $this->key == "UNI" ? "true" : "false";        }        function getDotNetPrimitiveType()        {            if (strpos($this->type, "int") === 0) return "int";            if (strpos($this->type, "long") === 0) return "long";            if (strpos($this->type, "char") === 0) return "string";            if (strpos($this->type, "varchar") === 0) return "string";            if (strpos($this->type, "text") === 0) return "string";            if (strpos($this->type, "longtext") === 0) return "string";            if (strpos($this->type, "tinyint") === 0) return "bool";            if (strpos($this->type, "datetime") === 0) return "DateTime";            return "unknown";        }        function getDotNetObjectType()        {            if (strpos($this->type, "int") === 0) return "Int32";            if (strpos($this->type, "long") === 0) return "Long";            if (strpos($this->type, "char") === 0) return "String";            if (strpos($this->type, "varchar") === 0) return "String";            if (strpos($this->type, "text") === 0) return "String";            if (strpos($this->type, "longtext") === 0) return "String";            if (strpos($this->type, "tinyint") === 0) return "Boolean";            if (strpos($this->type, "datetime") === 0) return "DateTime";            return "Unknown";        }        function getIndexName()        {            if (strlen($this->key)>0)                return "index=\"" . htmlspecialchars($this->name, ENT_COMPAT, 'UTF-8') . "\"";            return "";        }        function isPK()        {            return $this->key=="PRI";        }        function formatCs($text)        {            $text=str_replace("#name#", cgMakeIdentifier($this->name, false), $text);            return $this->format($text);        }        function formatXml($text)        {            $text=str_replace("#name#", htmlspecialchars($this->name, ENT_COMPAT, 'UTF-8'), $text);            $text=str_replace("#indexName#", $this->getIndexName(), $text);            return $this->format($text);        }        function format($text)        {            $text=str_replace("#ucfirstName#", cgMakeIdentifier($this->name), $text);            $text=str_replace("#dotNetPrimitiveType#", $this->getDotNetPrimitiveType(), $text);            $text=str_replace("#dotNetObjectType#", $this->getDotNetObjectType(), $text);            $text=str_replace("#type#", $this->getPureType(), $text);            $text=str_replace("#notNull#", $this->isNotNull(), $text);            $text=str_replace("#unique#", $this->isUnique(), $text);            return $text;        }    }    function cgMakeIdentifier($str, $ucfirst = true)    {        // remove unsafe characters        $str = preg_replace('/[^\p{L}\p{Nl}_]/u', '', $str);        // make sure first character is a letter or _        if (!preg_match('/^\pL/u', $str)) {            $str = '_' . $str;        }        if ($ucfirst) {            $str = ucfirst($str);        }        return $str;    }    function handleNHibernateCSBody($db, $table, $crlf)    {        $lines=array();        $result=PMA_DBI_query(sprintf('DESC %s.%s', PMA_backquote($db), PMA_backquote($table)));        if ($result) {            $tableProperties=array();            while ($row = PMA_DBI_fetch_row($result)) {                $tableProperties[] = new TableProperty($row);            }            PMA_DBI_free_result($result);            $lines[] = 'using System;';            $lines[] = 'using System.Collections;';            $lines[] = 'using System.Collections.Generic;';            $lines[] = 'using System.Text;';            $lines[] = 'namespace ' . cgMakeIdentifier($db);            $lines[] = '{';            $lines[] = '    #region ' . cgMakeIdentifier($table);            $lines[] = '    public class ' . cgMakeIdentifier($table);            $lines[] = '    {';            $lines[] = '        #region Member Variables';            foreach ($tableProperties as $tablePropertie) {                $lines[] = $tablePropertie->formatCs('        protected #dotNetPrimitiveType# _#name#;');            }            $lines[] = '        #endregion';            $lines[] = '        #region Constructors';            $lines[] = '        public ' . cgMakeIdentifier($table).'() { }';            $temp = array();            foreach ($tableProperties as $tablePropertie) {                if (! $tablePropertie->isPK()) {                    $temp[] = $tablePropertie->formatCs('#dotNetPrimitiveType# #name#');                }            }            $lines[] = '        public ' . cgMakeIdentifier($table) . '(' . implode(', ', $temp) . ')';            $lines[] = '        {';            foreach ($tableProperties as $tablePropertie) {                if (! $tablePropertie->isPK()) {                    $lines[] = $tablePropertie->formatCs('            this._#name#=#name#;');                }            }            $lines[] = '        }';            $lines[] = '        #endregion';            $lines[] = '        #region Public Properties';            foreach ($tableProperties as $tablePropertie) {                $lines[] = $tablePropertie->formatCs(''                    . '        public virtual #dotNetPrimitiveType# #ucfirstName#' . "\n"                    . '        {' . "\n"                    . '            get {return _#name#;}' . "\n"                    . '            set {_#name#=value;}' . "\n"                    . '        }'                    );            }            $lines[] = '        #endregion';            $lines[] = '    }';            $lines[] = '    #endregion';            $lines[] = '}';        }        return implode("\n", $lines);    }    function handleNHibernateXMLBody($db, $table, $crlf)    {        $lines = array();        $lines[] = '<?xml version="1.0" encoding="utf-8" ?' . '>';        $lines[] = '<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" '            . 'namespace="' . cgMakeIdentifier($db) . '" '            . 'assembly="' . cgMakeIdentifier($db) . '">';        $lines[] = '    <class '            . 'name="' . cgMakeIdentifier($table) . '" '            . 'table="' . cgMakeIdentifier($table) . '">';        $result = PMA_DBI_query(sprintf("DESC %s.%s", PMA_backquote($db), PMA_backquote($table)));        if ($result) {            while ($row = PMA_DBI_fetch_row($result)) {                $tablePropertie = new TableProperty($row);                if ($tablePropertie->isPK())                    $lines[] = $tablePropertie->formatXml(''                        . '        <id name="#ucfirstName#" type="#dotNetObjectType#" unsaved-value="0">' . "\n"                        . '            <column name="#name#" sql-type="#type#" not-null="#notNull#" unique="#unique#" index="PRIMARY"/>' . "\n"                        . '            <generator class="native" />' . "\n"                        . '        </id>');                else                    $lines[] = $tablePropertie->formatXml(''                        . '        <property name="#ucfirstName#" type="#dotNetObjectType#">' . "\n"                        . '            <column name="#name#" sql-type="#type#" not-null="#notNull#" #indexName#/>' . "\n"                        . '        </property>');            }            PMA_DBI_free_result($result);        }        $lines[] = '    </class>';        $lines[] = '</hibernate-mapping>';        return implode("\n", $lines);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_merge extends PMA_StorageEngine{}?>
<?php/** * Handles the visualization of GIS LINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Linestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        return $this->setMinMax($linesrting, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                $temp_point = $point;            }        }        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                $temp_point = $point;            }        }        // print label        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        $row = '<polyline points="';        foreach ($points_arr as $point) {            $row .= $point[0] . ',' . $point[1] . ' ';        }        $row .= '"';        foreach ($line_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS LINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, null);        $row = 'new Array(';        foreach ($points_arr as $point) {            $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject()), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')';        $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.LineString(' . $row . '), null, '            . json_encode($style_options) . '));';        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_points = isset($gis_data[$index]['LINESTRING']['no_of_points'])            ? $gis_data[$index]['LINESTRING']['no_of_points'] : 2;        if ($no_of_points < 2) {            $no_of_points = 2;        }        $wkt = 'LINESTRING(';        for ($i = 0; $i < $no_of_points; $i++) {            $wkt .= ((isset($gis_data[$index]['LINESTRING'][$i]['x'])                && trim($gis_data[$index]['LINESTRING'][$i]['x']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['x'] : $empty)                . ' ' . ((isset($gis_data[$index]['LINESTRING'][$i]['y'])                && trim($gis_data[$index]['LINESTRING'][$i]['y']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['y'] : $empty) .',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'LINESTRING';            $wkt = $value;        }        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linestring = substr($wkt, 11, (strlen($wkt) - 12));        $points_arr = $this->extractPoints($linestring, null);        $no_of_points = count($points_arr);        $params[$index]['LINESTRING']['no_of_points'] = $no_of_points;        for ($i = 0; $i < $no_of_points; $i++) {            $params[$index]['LINESTRING'][$i]['x'] = $points_arr[$i][0];            $params[$index]['LINESTRING'][$i]['y'] = $points_arr[$i][1];        }        return $params;    }}?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'asc_order' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_bookmark' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_firstpage' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '18',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_lastpage' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'b_docs' => array(            'position' => '22',            'width'    => '16',            'height'   => '16'        ),        'b_docsql' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_prevpage' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'bd_select' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '33',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_firstpage' => array(            'position' => '37',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_home' => array(            'position' => '40',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '43',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '45',            'width'    => '16',            'height'   => '16'        ),        'b_lastpage' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_more' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_pdfdoc' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '53',            'width'    => '16',            'height'   => '16'        ),        'b_prevpage' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_primary' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '57',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_sdb' => array(            'position' => '63',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_spatial' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_sqldoc' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '78',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '81',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '82',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '83',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'database' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '90',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '93',            'width'    => '5',            'height'   => '9'        ),        'item' => array(            'position' => '94',            'width'    => '9',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '95',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '96',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '97',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '98',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        'pause' => array(            'position' => '105',            'width'    => '16',            'height'   => '16'        ),        'php_sym' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        'play' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '109',            'width'    => '16',            'height'   => '16'        ),        's_attention' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_cancel2' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_cancel' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_error2' => array(            'position' => '116',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '118',            'width'    => '16',            'height'   => '16'        ),        's_info' => array(            'position' => '119',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '120',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '121',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '122',            'width'    => '16',            'height'   => '16'        ),        's_okay' => array(            'position' => '123',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '124',            'width'    => '16',            'height'   => '16'        ),        's_process' => array(            'position' => '125',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '126',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '127',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '128',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '129',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '130',            'width'    => '16',            'height'   => '16'        ),        's_status' => array(            'position' => '131',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '132',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '133',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '134',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '135',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '136',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '137',            'width'    => '16',            'height'   => '16'        ),        'window-new' => array(            'position' => '138',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for displaying user preferences pages * * @package PhpMyAdmin *//** * Common initialization for user preferences modification pages * */function PMA_userprefs_pageinit(){    $forms_all_keys = PMA_read_userprefs_fieldnames($GLOBALS['forms']);    $cf = ConfigFile::getInstance();    $cf->resetConfigData(); // start with a clean instance    $cf->setAllowedKeys($forms_all_keys);    $cf->setCfgUpdateReadMapping(        array(            'Server/hide_db' => 'Servers/1/hide_db',            'Server/only_db' => 'Servers/1/only_db'        )    );    $cf->updateWithGlobalConfig($GLOBALS['cfg']);}/** * Loads user preferences * * Returns an array: * * config_data - path => value pairs * * mtime - last modification time * * type - 'db' (config read from pmadb) or 'session' (read from user session) * * @return array */function PMA_load_userprefs(){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['userconfigwork']) {        // no pmadb table, use session storage        if (! isset($_SESSION['userconfig'])) {            $_SESSION['userconfig'] = array(                'db' => array(),                'ts' => time());        }        return array(            'config_data' => $_SESSION['userconfig']['db'],            'mtime' => $_SESSION['userconfig']['ts'],            'type' => 'session');    }    // load configuration from pmadb    $query_table = PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['userconfig']);    $query = '        SELECT `config_data`, UNIX_TIMESTAMP(`timevalue`) ts        FROM ' . $query_table . '          WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    $row = PMA_DBI_fetch_single_row($query, 'ASSOC', $GLOBALS['controllink']);    return array(        'config_data' => $row ? (array)json_decode($row['config_data']) : array(),        'mtime' => $row ? $row['ts'] : time(),        'type' => 'db');}/** * Saves user preferences * * @param array $config_array configuration array * * @return true|PMA_Message */function PMA_save_userprefs(array $config_array){    $cfgRelation = PMA_getRelationsParam();    $server = isset($GLOBALS['server'])        ? $GLOBALS['server']        : $GLOBALS['cfg']['ServerDefault'];    $cache_key = 'server_' . $server;    if (! $cfgRelation['userconfigwork']) {        // no pmadb table, use session storage        $_SESSION['userconfig'] = array(            'db' => $config_array,            'ts' => time());        if (isset($_SESSION['cache'][$cache_key]['userprefs'])) {            unset($_SESSION['cache'][$cache_key]['userprefs']);        }        return true;    }    // save configuration to pmadb    $query_table = PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['userconfig']);    $query = '        SELECT `username`        FROM ' . $query_table . '          WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    $has_config = PMA_DBI_fetch_value($query, 0, 0, $GLOBALS['controllink']);    $config_data = json_encode($config_array);    if ($has_config) {        $query = '            UPDATE ' . $query_table . '            SET `config_data` = \'' . PMA_sqlAddSlashes($config_data) . '\'            WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    } else {        $query = '            INSERT INTO ' . $query_table . ' (`username`, `config_data`)            VALUES (\'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\',                \'' . PMA_sqlAddSlashes($config_data) . '\')';    }    if (isset($_SESSION['cache'][$cache_key]['userprefs'])) {        unset($_SESSION['cache'][$cache_key]['userprefs']);    }    if (!PMA_DBI_try_query($query, $GLOBALS['controllink'])) {        $message = PMA_Message::error(__('Could not save configuration'));        $message->addMessage('<br /><br />');        $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));        return $message;    }    return true;}/** * Returns a user preferences array filtered by $cfg['UserprefsDisallow'] * (blacklist) and keys from user preferences form (whitelist) * * @param array $config_data path => value pairs * * @return array */function PMA_apply_userprefs(array $config_data){    $cfg = array();    $blacklist = array_flip($GLOBALS['cfg']['UserprefsDisallow']);    if (!$GLOBALS['cfg']['UserprefsDeveloperTab']) {        // disallow everything in the Developers tab        $blacklist['Error_Handler/display'] = true;        $blacklist['Error_Handler/gather'] = true;        $blacklist['DBG/sql'] = true;    }    $whitelist = array_flip(PMA_read_userprefs_fieldnames());    // whitelist some additional fields which are custom handled    $whitelist['ThemeDefault'] = true;    $whitelist['fontsize'] = true;    $whitelist['lang'] = true;    $whitelist['collation_connection'] = true;    $whitelist['Server/hide_db'] = true;    $whitelist['Server/only_db'] = true;    foreach ($config_data as $path => $value) {        if (! isset($whitelist[$path]) || isset($blacklist[$path])) {            continue;        }        PMA_array_write($path, $cfg, $value);    }    return $cfg;}/** * Reads user preferences field names * * @param array|null $forms * * @return array */function PMA_read_userprefs_fieldnames(array $forms = null){    static $names;    // return cached results    if ($names !== null) {        return $names;    }    if (is_null($forms)) {        $forms = array();        include 'libraries/config/user_preferences.forms.php';    }    $names = array();    foreach ($forms as $formset) {        foreach ($formset as $form) {            foreach ($form as $k => $v) {                $names[] = is_int($k) ? $v : $k;            }        }    }    return $names;}/** * Updates one user preferences option (loads and saves to database). * * No validation is done! * * @param string $path          configuration * @param mixed  $value         value * @param mixed  $default_value default value * * @return void */function PMA_persist_option($path, $value, $default_value){    $prefs = PMA_load_userprefs();    if ($value === $default_value) {        if (isset($prefs['config_data'][$path])) {            unset($prefs['config_data'][$path]);        } else {            return;        }    } else {        $prefs['config_data'][$path] = $value;    }    PMA_save_userprefs($prefs['config_data']);}/** * Redirects after saving new user preferences * * @param array  $forms * @param array  $old_settings * @param string $file_name * @param array  $params * @param string $hash */function PMA_userprefs_redirect(array $forms, array $old_settings, $file_name, $params = null, $hash = null){    $reload_left_frame = isset($params['reload_left_frame']) && $params['reload_left_frame'];    if (!$reload_left_frame) {        // compute differences and check whether left frame should be refreshed        $old_settings = isset($old_settings['config_data'])                ? $old_settings['config_data']                : array();        $new_settings = ConfigFile::getInstance()->getConfigArray();        $diff_keys = array_keys(            array_diff_assoc($old_settings, $new_settings)            + array_diff_assoc($new_settings, $old_settings)        );        $check_keys = array('NaturalOrder', 'MainPageIconic', 'DefaultTabDatabase',            'Server/hide_db', 'Server/only_db');        $check_keys = array_merge(            $check_keys, $forms['Left_frame']['Left_frame'],            $forms['Left_frame']['Left_databases']        );        $diff = array_intersect($check_keys, $diff_keys);        $reload_left_frame = !empty($diff);    }    // redirect    $url_params = array(        'saved' => 1,        'reload_left_frame' => $reload_left_frame);    if (is_array($params)) {        $url_params = array_merge($params, $url_params);    }    if ($hash) {        $hash = '#' . urlencode($hash);    }    PMA_sendHeaderLocation(        $GLOBALS['cfg']['PmaAbsoluteUri'] . $file_name        . PMA_generate_common_url($url_params, '&') . $hash    );}/** * Shows form which allows to quickly load settings stored in browser's local storage * */function PMA_userprefs_autoload_header(){    if (isset($_REQUEST['prefs_autoload']) && $_REQUEST['prefs_autoload'] == 'hide') {        $_SESSION['userprefs_autoload'] = true;        exit;    }    $script_name = basename(basename($GLOBALS['PMA_PHP_SELF']));    $return_url = $script_name . '?' . http_build_query($_GET, '', '&');    ?>    <div id="prefs_autoload" class="notice" style="display:none">        <form action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>            <input type="hidden" name="json" value="" />            <input type="hidden" name="submit_import" value="1" />            <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />            <?php echo __('Your browser has phpMyAdmin configuration for this domain. Would you like to import it for current session?') ?>            <br />            <a href="#yes"><?php echo __('Yes') ?></a> / <a href="#no"><?php echo __('No') ?></a>        </form>    </div>    <?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display the binary logs and the content of the selected * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work, provides $binary_logs */require_once './libraries/server_common.inc.php';/** * Displays the links */require_once './libraries/server_links.inc.php';$url_params = array();/** * Need to find the real end of rows? */if (! isset($_REQUEST['pos'])) {    $pos = 0;} else {    /* We need this to be a integer */    $pos = (int) $_REQUEST['pos'];}if (! isset($_REQUEST['log']) || ! array_key_exists($_REQUEST['log'], $binary_logs)) {    $_REQUEST['log'] = '';} else {    $url_params['log'] = $_REQUEST['log'];}$sql_query = 'SHOW BINLOG EVENTS';if (! empty($_REQUEST['log'])) {    $sql_query .= ' IN \'' . $_REQUEST['log'] . '\'';}if ($GLOBALS['cfg']['MaxRows'] !== 'all') {    $sql_query .= ' LIMIT ' . $pos . ', ' . (int) $GLOBALS['cfg']['MaxRows'];}/** * Sends the query */$result = PMA_DBI_query($sql_query);/** * prepare some vars for displaying the result table */// Gets the list of fields propertiesif (isset($result) && $result) {    $num_rows = PMA_DBI_num_rows($result);} else {    $num_rows = 0;}if (empty($_REQUEST['dontlimitchars'])) {    $dontlimitchars = false;} else {    $dontlimitchars = true;    $url_params['dontlimitchars'] = 1;}/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('s_tbl.png') : '')   . '    ' . __('Binary log') . "\n"   . '</h2>' . "\n";/** * Display log selector. */if (count($binary_logs) > 1) {    echo '<form action="server_binlog.php" method="get">';    echo PMA_generate_common_hidden_inputs($url_params);    echo '<fieldset><legend>';    echo __('Select binary log to view');    echo '</legend><select name="log">';    $full_size = 0;    foreach ($binary_logs as $each_log) {        echo '<option value="' . $each_log['Log_name'] . '"';        if ($each_log['Log_name'] == $_REQUEST['log']) {            echo ' selected="selected"';        }        echo '>' . $each_log['Log_name'];        if (isset($each_log['File_size'])) {            $full_size += $each_log['File_size'];            echo ' (' . implode(' ', PMA_formatByteDown($each_log['File_size'], 3, 2)) . ')';        }        echo '</option>';    }    echo '</select> ';    echo count($binary_logs) . ' ' . __('Files') . ', ';    if ($full_size > 0) {        echo implode(' ', PMA_formatByteDown($full_size));    }    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="submit" value="' . __('Go') . '" />';    echo '</fieldset>';    echo '</form>';}PMA_showMessage(PMA_Message::success());/** * Displays the page */?><table border="0" cellpadding="2" cellspacing="1"><thead><tr>    <td colspan="6" align="center"><?php// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($pos > 0) {    $this_url_params = $url_params;    if ($pos > $GLOBALS['cfg']['MaxRows']) {        $this_url_params['pos'] = $pos - $GLOBALS['cfg']['MaxRows'];    }    echo '<a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Previous page', 'Previous') . '">';    } else {        echo '>' . _pgettext('Previous page', 'Previous');    } // end if... else...    echo ' &lt; </a> - ';}$this_url_params = $url_params;if ($pos > 0) {    $this_url_params['pos'] = $pos;}if ($dontlimitchars) {    unset($this_url_params['dontlimitchars']);    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Truncate Shown Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_partialtext.png"                    alt="<?php echo __('Truncate Shown Queries'); ?>" /></a>    <?php} else {    $this_url_params['dontlimitchars'] = 1;    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Show Full Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_fulltext.png"                    alt="<?php echo __('Show Full Queries'); ?>" /></a>    <?php}// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($num_rows >= $GLOBALS['cfg']['MaxRows']) {    $this_url_params = $url_params;    $this_url_params['pos'] = $pos + $GLOBALS['cfg']['MaxRows'];    echo ' - <a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Next page', 'Next') . '">';    } else {        echo '>' . _pgettext('Next page', 'Next');    } // end if... else...    echo ' &gt; </a>';}?>    </td></tr><tr>    <th><?php echo __('Log name'); ?></th>    <th><?php echo __('Position'); ?></th>    <th><?php echo __('Event type'); ?></th>    <th><?php echo __('Server ID'); ?></th>    <th><?php echo __('Original position'); ?></th>    <th><?php echo __('Information'); ?></th></tr></thead><tbody><?php$odd_row = true;while ($value = PMA_DBI_fetch_assoc($result)) {    if (! $dontlimitchars && PMA_strlen($value['Info']) > $GLOBALS['cfg']['LimitChars']) {        $value['Info'] = PMA_substr($value['Info'], 0, $GLOBALS['cfg']['LimitChars']) . '...';    }    ?><tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">    <td>&nbsp;<?php echo $value['Log_name']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo $value['Event_type']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Server_id']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo isset($value['Orig_log_pos']) ? $value['Orig_log_pos'] : $value['End_log_pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo htmlspecialchars($value['Info']); ?>&nbsp;</td></tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/merge.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_mrg_myisam extends PMA_StorageEngine_merge{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'merge';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_bdb extends PMA_StorageEngine{    /**     * @return  array   variable names     */    function getVariables()    {        return array(            'version_bdb' => array(                'title' => __('Version information'),            ),            'bdb_cache_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_home' => array(            ),            'bdb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_logdir' => array(            ),            'bdb_max_lock' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'bdb_shared_data' => array(            ),            'bdb_tmpdir' => array(            ),            'bdb_data_direct' => array(            ),            'bdb_lock_detect' => array(            ),            'bdb_log_direct' => array(            ),            'bdb_no_recover' => array(            ),            'bdb_no_sync' => array(            ),            'skip_sync_bdb_logs' => array(            ),            'sync_bdb_logs' => array(            ),        );    }    /**     * @return string   LIKE pattern     */    function getVariablesLikePattern()    {        return '%bdb%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'bdb';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_ndbcluster extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'ndb_connectstring' => array(            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'ndb\\_%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'ndbcluster';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__longToIpv4_info(){    return array(        'info' => __('Converts an (IPv4) Internet network address into a string in Internet standard dotted format.'),        );}/** * returns IPv4 address * * @see http://php.net/long2ip */function PMA_transformation_text_plain__longToIpv4($buffer, $options = array(), $meta = ''){    if ($buffer < 0 || $buffer > 4294967295) {        return $buffer;    }    return long2ip($buffer);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Spreadsheet dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'mime_type' => 'application/vnd.oasis.opendocument.spreadsheet',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    $GLOBALS['ods_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        $GLOBALS['ods_buffer'] .= '</office:spreadsheet>'            . '</office:body>'            . '</office:document-content>';        if (!PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.spreadsheet', $GLOBALS['ods_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        $GLOBALS['ods_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:automatic-styles>'                . '<number:date-style style:name="N37" number:automatic-order="true">'                . '<number:month number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:day number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:year/>'              . '</number:date-style>'              . '<number:time-style style:name="N43">'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:seconds number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:time-style>'              . '<number:date-style style:name="N50" number:automatic-order="true" number:format-source="language">'                . '<number:month/>'                . '<number:text>/</number:text>'                . '<number:day/>'                . '<number:text>/</number:text>'                . '<number:year/>'                . '<number:text> </number:text>'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:date-style>'              . '<style:style style:name="DateCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>'              . '<style:style style:name="TimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N43"/>'              . '<style:style style:name="DateTimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N50"/>'            . '</office:automatic-styles>'            . '<office:body>'            . '<office:spreadsheet>';        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in ODS format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['ods_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '">';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "date") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d", strtotime($row[$j])) . '" table:style-name="DateCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "time") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="time" office:time-value="' . date("\P\TH\Hi\Ms\S", strtotime($row[$j])) . '" table:style-name="TimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "datetime") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d\TH:i:s", strtotime($row[$j])) . '" table:style-name="DateTimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['ods_buffer'] .= '</table:table>';        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MEMORY (HEAP) storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_memory extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'max_heap_table_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table zoom search tab * * display table zoom search form, create SQL queries from form data * *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';require_once './libraries/relation.lib.php';require_once './libraries/tbl_info.inc.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_zoom_plot.js';$GLOBALS['js_include'][] = 'date.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';$GLOBALS['js_include'][] = 'canvg/canvg.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Handle AJAX request for data row on point select * @var post_params Object containing parameters for the POST request */if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {    $extra_data = array();    $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'        . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];    $result = PMA_DBI_query($row_info_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        // for bit fields we need to convert them to printable form        $i = 0;        foreach ($row as $col => $val) {            if ($fields_meta[$i]->type == 'bit') {                $row[$col] = PMA_printable_bit_value($val, $fields_meta[$i]->length);            }            $i++;        }        $extra_data['row_info'] = $row;    }    PMA_ajaxResponse(null, true, $extra_data);}$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));/** * Not selection yet required -> displays the selection form */// Gets some core librariesrequire_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (! isset($goto)) {    $goto = $GLOBALS['cfg']['DefaultTabTable'];}// Defines the url to return to in case of error in the next sql statement$err_url   = $goto . '?' . PMA_generate_common_url($db, $table);// Gets the list and number of fieldslist($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);$fields_cnt = count($fields_list);// retrieve keys into foreign fields, if any// check also foreigners even if relwork is FALSE (to get// foreign keys from innodb)$foreigners = PMA_getForeigners($db, $table);$flag = 1;$tbl_fields_type = $tbl_fields_collation = $tbl_fields_null = array();if (! isset($zoom_submit) && ! isset($inputs)) {    $dataLabel = PMA_getDisplayField($db, $table);}?><div id="sqlqueryresults"></div><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');/** *  Set the field name,type,collation and whether null on select of a coulmn */if (isset($inputs) && ($inputs[0] != 'pma_null' || $inputs[1] != 'pma_null')) {    $flag = 2;    for ($i = 0 ; $i < 4 ; $i++) {        if ($inputs[$i] != 'pma_null') {            $key = array_search($inputs[$i], $fields_list);            $tbl_fields_type[$i] = $fields_type[$key];            $tbl_fields_collation[$i] = $fields_collation[$key];            $tbl_fields_null[$i] = $fields_null[$key];        }    }}/* * Form for input criteria */?><form method="post" action="tbl_zoom_select.php" name="insertForm" id="zoom_search_form"    <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_zoom_select.php" /><input type="hidden" name="flag" id="id_flag" value="<?php echo $flag; ?>" /><fieldset id="inputSection"><legend><?php echo __('Do a "query by example" (wildcard: "%") for two different columns') ?></legend><table class="data"><?php echo PMA_tbl_setTableHeader();?><tbody><?php    $odd_row = true;for ($i = 0; $i < 4; $i++) {    if ($i == 2) {        echo "<tr><td>";        echo __("Additional search criteria");        echo "</td></tr>";    }    ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <th><select name="inputs[]" id="<?php echo 'tableid_' . $i; ?>" >        <option value="<?php echo 'pma_null'; ?>"><?php echo __('None');  ?></option>    <?php    for ($j = 0 ; $j < $fields_cnt ; $j++) {        if (isset($inputs[$i]) && $inputs[$i] == htmlspecialchars($fields_list[$j])) {?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        } else { ?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        }    } ?>        </select></th>        <td><?php if (isset($tbl_fields_type[$i])) echo $tbl_fields_type[$i]; ?></td>        <td><?php if (isset($tbl_fields_collation[$i])) echo $tbl_fields_collation[$i]; ?></td>        <td>    <?php    if (isset($inputs) && $inputs[$i] != 'pma_null') { ?>        <select name="zoomFunc[]">        <?php        if (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == htmlspecialchars($fc)) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } elseif (preg_match('@char|blob|text|set@i', $tbl_fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } // end if... else...        if ($tbl_fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        }        ?>        </select>        </td>        <td>        <?php        $field = $inputs[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        if (isset($fields)) {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $fields            );        } else {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], ''            );        }    } else { ?>        </td><td></td>        <?php    } ?>    </tr>    <tr><td>      <input type="hidden" name="types[<?php echo $i; ?>]" id="types_<?php echo $i; ?>"        value="<?php if(isset($tbl_fields_type[$i]))echo $tbl_fields_type[$i]; ?>" />      <input type="hidden" name="collations[<?php echo $i; ?>]"        value="<?php if(isset($tbl_fields_collation[$i]))echo $tbl_fields_collation[$i]; ?>" />    </td></tr>    <?php}//end for?>    </tbody>    </table><?php/* * Other inputs like data label and mode go after selection of column criteria *///Set default datalabel if not selectedif (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null') {    if ($dataLabel == '') {        $dataLabel = PMA_getDisplayField($db, $table);    }}?>    <table class="data">    <tr><td><label for="dataLabel"><?php echo __("Use this column to label each point"); ?></label></td>    <td><select name="dataLabel" id='dataLabel' >        <option value = ''> <?php echo __('None');  ?> </option><?phpfor ($j = 0; $j < $fields_cnt; $j++) {    if (isset($dataLabel) && $dataLabel == htmlspecialchars($fields_list[$j])) {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    } else {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" >            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    }}?>    </select>    </td></tr>    <tr><td><label for="maxRowPlotLimit"><?php echo __("Maximum rows to plot"); ?></label></td>    <td><?phpecho '<input type="text" name="maxPlotLimit" id="maxRowPlotLimit" value="';if (! empty($maxPlotLimit)) {    echo htmlspecialchars($maxPlotLimit);} else {    echo $GLOBALS['cfg']['maxRowPlotLimit'];}echo '" /></td></tr>';?>    </table></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="zoom_submit" id="inputFormSubmitId" value="<?php echo __('Go'); ?>" /></fieldset></form></fieldset><?php/* * Handle the input criteria and generate the query result * Form for displaying query results */if (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null' && $inputs[0] != $inputs[1]) {    /*     * Query generation part     */    $w = $data = array();    $sql_query = 'SELECT *';    //Add the table    $sql_query .= ' FROM ' . PMA_backquote($table);    for ($i = 0; $i < 4; $i++) {        if ($inputs[$i] == 'pma_null') {            continue;        }        $tmp = array();        // The where clause        $charsets = array();        $cnt_func = count($zoomFunc[$i]);        $func_type = $zoomFunc[$i];        list($charsets[$i]) = explode('_', $collations[$i]);        $unaryFlag = (isset($GLOBALS['cfg']['UnaryOperators'][$func_type])                      && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1)                      ? true                      : false;        $whereClause = PMA_tbl_search_getWhereClause(            $fields[$i], $inputs[$i], $types[$i],            $collations[$i], $func_type, $unaryFlag        );        if ($whereClause) {            $w[] = $whereClause;        }    } // end for    if ($w) {        $sql_query .= ' WHERE ' . implode(' AND ', $w);    }    $sql_query .= ' LIMIT ' . $maxPlotLimit;    /*     * Query execution part     */    $result = PMA_DBI_query($sql_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array        $tmpRow = array();        foreach ($row as $val) {            $tmpRow[] = $val;        }        //Get unique conditon on each row (will be needed for row update)        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);        //Append it to row array as where_clause        $row['where_clause'] = $uniqueCondition[0];        if ($dataLabel == $inputs[0] || $dataLabel == $inputs[1]) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                'where_clause' => $uniqueCondition[0]            );        } elseif ($dataLabel) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => $row[$dataLabel],                'where_clause' => $uniqueCondition[0]            );        } else {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => '',                'where_clause' => $uniqueCondition[0]            );        }    }    /*     * Form for displaying point data and also the scatter plot     */    ?>    <form method="post" action="tbl_zoom_select.php" name="displayResultForm" id="zoom_display_form"        <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="tbl_zoom_select.php" />    <fieldset id="displaySection">      <legend><?php echo __('Browse/Edit the points') ?></legend>      <center>    <?php    //JSON encode the data(query result)    if (isset($zoom_submit) && ! empty($data)) {        ?>        <div id='resizer' style="width:600px;height:400px">          <center><a href="#" onclick="displayHelp();"><?php echo __('How to use'); ?></a></center>          <div id="querydata" style="display:none">        <?php        echo json_encode($data);        ?>          </div>          <div id="querychart" style="float:right"></div>        </div>        <?php    }    ?>      </center>      <div id='dataDisplay' style="display:none">        <table>          <thead>            <tr>              <th> <?php echo __('Column'); ?> </th>              <th> <?php echo __('Null'); ?> </th>              <th> <?php echo __('Value'); ?> </th>            </tr>          </thead>          <tbody>    <?php    $odd_row = true;    for ($i = 4; $i < $fields_cnt + 4; $i++) {        $tbl_fields_type[$i] = $fields_type[$i - 4];        $fieldpopup = $fields_list[$i - 4];        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">              <th><?php echo htmlspecialchars($fields_list[$i - 4]); ?></th>              <th><?php echo ($fields_null[$i - 4] == 'YES')                  ? '<input type="checkbox" class="checkbox_null" name="fields_null[ '                      . $i . ' ]" id="fields_null_id_' . $i . '" />'                  : ''; ?>              </th>              <th> <?php              echo PMA_getForeignFields_Values(                  $foreigners, $foreignData, $fieldpopup, $tbl_fields_type,                  $i, $db, $table, $titles,                  $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', false, true              ); ?>              </th>            </tr>        <?php    }    ?>          </tbody>        </table>    </div>    <input type="hidden" id="queryID" name="sql_query" />    </form>    <?php}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY = "UPLOAD_IDENTIFIER";/** * Returns upload status. * * This is implementation for uploadprogress extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_uploadprogressCheck() || $ret['finished']) {        return $ret;    }    $status = uploadprogress_get_info($id);    if ($status) {        if ($status['bytes_uploaded'] == $status['bytes_total']) {            $ret['finished'] = true;        } else {            $ret['finished'] = false;        }        $ret['total']    = $status['bytes_total'];        $ret['complete'] = $status['bytes_uploaded'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }    } else {       $ret = array(                    'id'       => $id,                    'finished' => true,                    'percent'  => 100,                    'total'    => $ret['total'],                    'complete' => $ret['total'],                    'plugin'   => $ID_KEY                );    }    $_SESSION[$SESSION_KEY][$id] = $ret;    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Validator interface for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This function uses the Mimer SQL Validator service * <http://developer.mimer.com/validator/index.htm> from phpMyAdmin * * Copyright for Server side validator systems: * "All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved." * * All data is transported over HTTP-SOAP * And uses the PEAR SOAP Module * * Install instructions for PEAR SOAP * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * Enable the SQL Validator options in the configuration file * $cfg['SQLQuery']['Validate'] = true; * $cfg['SQLValidator']['use']  = true; * * Also set a username and password if you have a private one * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need the PEAR libraries, so do a minimum version check first * I'm not sure if PEAR was available before this point * For now we actually use a configuration flag */if ($cfg['SQLValidator']['use'] == true) {    include_once './libraries/sqlvalidator.class.php';} // if ($cfg['SQLValidator']['use'] == true)/** * This function utilizes the Mimer SQL Validator service * to validate an SQL query * * <http://developer.mimer.com/validator/index.htm> * * @param string   SQL query to validate * * @return  string   Validator result string * * @global  array    The PMA configuration array */function PMA_validateSQL($sql){    global $cfg;    $str = '';    if ($cfg['SQLValidator']['use']) {        if (isset($GLOBALS['sqlvalidator_error'])            && $GLOBALS['sqlvalidator_error']) {            $str = sprintf(__('The SQL validator could not be initialized. Please check if you have installed the necessary PHP extensions as described in the %sdocumentation%s.'), '<a href="./Documentation.html#faqsqlvalidator" target="documentation">', '</a>');        } else {            // create new class instance            $srv = new PMA_SQLValidator();            // Checks for username settings            // The class defaults to anonymous with an empty password            // automatically            if ($cfg['SQLValidator']['username'] != '') {                $srv->setCredentials($cfg['SQLValidator']['username'], $cfg['SQLValidator']['password']);            }            // Identify ourselves to the server properly...            $srv->appendCallingProgram('phpMyAdmin', PMA_VERSION);            // ... and specify what database system we are using            $srv->setTargetDbms('MySQL', PMA_MYSQL_STR_VERSION);            // Log on to service            $srv->start();            // Do service validation            $str = $srv->validationString($sql);        }    } // end if    // Gives string back to caller    return $str;} // end of the "PMA_validateSQL()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__imagelink_info(){    return array(        'info' => __('Displays an image and a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second and third options are the width and the height in pixels.'),        );}/** * */function PMA_transformation_text_plain__imagelink($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" target="_blank"><img src="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" border="0" width="' . (isset($options[1]) ? $options[1] : 100) . '" height="' . (isset($options[2]) ? $options[2] : 50) . '" />' . $buffer . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/** * ESRI Shape file import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage ESRI_Shape */if (! defined('PHPMYADMIN')) {    exit;}// Drizzle does not suppost GIS data typesif (PMA_DRIZZLE) {    return;}if (isset($plugin_list)) {    $plugin_list['shp'] = array(        'text' => __('ESRI Shape File'),        'extension' => 'shp',        'options' => array(),        'options_text' => __('Options'),    );} else {    if ((int) ini_get('memory_limit') < 512) {        @ini_set('memory_limit', '512M');    }    @set_time_limit(300);    // Append the bfShapeFiles directory to the include path variable    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');    include_once './libraries/bfShapeFiles/ShapeFile.lib.php';    $GLOBALS['finished'] = false;    $buffer = '';    $eof = false;    // Returns specified number of bytes from the buffer.    // Buffer automatically fetches next chunk of data when the buffer falls short.    // Sets $eof when $GLOBALS['finished'] is set and the buffer falls short.    function readFromBuffer($length){        global $buffer, $eof;        if (strlen($buffer) < $length) {            if ($GLOBALS['finished']) {                $eof = true;            } else {                $buffer .= PMA_importGetNextChunk();            }        }        $result = substr($buffer, 0, $length);        $buffer = substr($buffer, $length);        return $result;    }    /**     * This class extends ShapeFile class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeFile extends ShapeFile    {        function _isDbaseLoaded()        {            return extension_loaded('dbase');        }        function loadFromFile($FileName)        {            $this->_loadHeaders();            $this->_loadRecords();            if ($this->_isDbaseLoaded()) {                $this->_closeDBFFile();            }        }        function _loadHeaders()        {            readFromBuffer(24);            $this->fileLength = loadData("N", readFromBuffer(4));            readFromBuffer(4);            $this->shapeType = loadData("V", readFromBuffer(4));            $this->boundingBox = array();            $this->boundingBox["xmin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["xmax"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymax"] = loadData("d", readFromBuffer(8));            if ($this->_isDbaseLoaded() && $this->_openDBFFile()) {                $this->DBFHeader = $this->_loadDBFHeader();            }        }        function _loadRecords()        {            global $eof;            readFromBuffer(32);            while (true) {                $record = new PMA_ShapeRecord(-1);                $record->loadFromFile($this->SHPFile, $this->DBFFile);                if ($record->lastError != "") {                    return false;                }                if ($eof) {                    break;                }                $this->records[] = $record;            }        }    }    /**     * This class extends ShapeRecord class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeRecord extends ShapeRecord    {        function loadFromFile(&$SHPFile, &$DBFFile)        {            $this->DBFFile = $DBFFile;            $this->_loadHeaders();            switch ($this->shapeType) {            case 0:                $this->_loadNullRecord();                break;            case 1:                $this->_loadPointRecord();                break;            case 3:                $this->_loadPolyLineRecord();                break;            case 5:                $this->_loadPolygonRecord();                break;            case 8:                $this->_loadMultiPointRecord();                break;            default:                $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));                break;            }            if (extension_loaded('dbase') && isset($this->DBFFile)) {                $this->_loadDBFData();            }        }        function _loadHeaders()        {            $this->recordNumber = loadData("N", readFromBuffer(4));            //We read the length of the record            $tmp = loadData("N", readFromBuffer(4));            $this->shapeType = loadData("V", readFromBuffer(4));        }        function _loadPoint()        {            $data = array();            $data["x"] = loadData("d", readFromBuffer(8));            $data["y"] = loadData("d", readFromBuffer(8));            return $data;        }        function _loadMultiPointRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {                $this->SHPData["points"][] = $this->_loadPoint();            }        }        function _loadPolyLineRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numparts"]  = loadData("V", readFromBuffer(4));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {                $this->SHPData["parts"][$i] = loadData("V", readFromBuffer(4));            }            $readPoints = 0;            reset($this->SHPData["parts"]);            while (list($partIndex, $partData) = each($this->SHPData["parts"])) {                if (! isset($this->SHPData["parts"][$partIndex]["points"])                    || !is_array($this->SHPData["parts"][$partIndex]["points"])                ) {                    $this->SHPData["parts"][$partIndex] = array();                    $this->SHPData["parts"][$partIndex]["points"] = array();                }                while (! in_array($readPoints, $this->SHPData["parts"])                && ($readPoints < ($this->SHPData["numpoints"]))                ) {                    $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();                    $readPoints++;                }            }        }    }    $shp = new PMA_ShapeFile(1);    // If the zip archive has more than one file,    // get the correct content to the buffer from .shp file.    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');        $GLOBALS['import_text'] = $zip_content['data'];    }    $temp_dbf_file = false;    // We need dbase extension to handle .dbf file    if (extension_loaded('dbase')) {        // If we can extract the zip archive to 'TempDir'        // and use the files in it for import        if ($compression == 'application/zip'            && ! empty($cfg['TempDir'])            && is_writable($cfg['TempDir'])        ) {            $dbf_file_name = PMA_findFileFromZipArchive('/^.*\.dbf$/i', $import_file);            // If the corresponding .dbf file is in the zip archive            if ($dbf_file_name) {                // Extract the .dbf file and point to it.                $extracted =  PMA_zipExtract(                    $import_file,                    realpath($cfg['TempDir']),                    array($dbf_file_name)                );                if ($extracted) {                    $dbf_file_path = realpath($cfg['TempDir'])                        . (PMA_IS_WINDOWS ? '\\' : '/') . $dbf_file_name;                    $temp_dbf_file = true;                    // Replace the .dbf with .*, as required by the bsShapeFiles library.                    $file_name = substr($dbf_file_path, 0, strlen($dbf_file_path) - 4) . '.*';                    $shp->FileName = $file_name;                }            }        }        // If file is in UploadDir, use .dbf file in the same UploadDir        // to load extra data.        elseif (! empty($local_import_file)            && ! empty($cfg['UploadDir'])            && $compression == 'none'        ) {            // Replace the .shp with .*,            // so the bsShapeFiles library correctly locates .dbf file.            $file_name = substr($import_file, 0, strlen($import_file) - 4) . '.*';            $shp->FileName = $file_name;        }    }    // Load data    $shp->loadFromFile('');    if ($shp->lastError != "") {        $error = true;        $message = PMA_Message::error(__('There was an error importing the ESRI shape file: "%s".'));        $message->addParam($shp->lastError);        return;    }    // Delete the .dbf file extracted to 'TempDir'    if ($temp_dbf_file) {        unlink($dbf_file_path);    }    $esri_types = array(        0  => 'Null Shape',        1  => 'Point',        3  => 'PolyLine',        5  => 'Polygon',        8  => 'MultiPoint',        11 => 'PointZ',        13 => 'PolyLineZ',        15 => 'PolygonZ',        18 => 'MultiPointZ',        21 => 'PointM',        23 => 'PolyLineM',        25 => 'PolygonM',        28 => 'MultiPointM',        31 => 'MultiPatch',    );    include_once './libraries/gis/pma_gis_geometry.php';    switch ($shp->shapeType) {    // ESRI Null Shape    case 0:        $gis_obj = null;        break;    // ESRI Point    case 1:        include_once './libraries/gis/pma_gis_point.php';        $gis_obj = PMA_GIS_Point::singleton();        break;    // ESRI PolyLine    case 3:        include_once './libraries/gis/pma_gis_multilinestring.php';        $gis_obj = PMA_GIS_Multilinestring::singleton();        break;    // ESRI Polygon    case 5:        include_once './libraries/gis/pma_gis_multipolygon.php';        $gis_obj = PMA_GIS_Multipolygon::singleton();        break;    // ESRI MultiPoint    case 8:        include_once './libraries/gis/pma_gis_multipoint.php';        $gis_obj = PMA_GIS_Multipoint::singleton();        break;    default:        $error = true;        if (! isset($esri_types[$shp->shapeType])) {            $message = PMA_Message::error(__('You tried to import an invalid file or the imported file contains invalid data'));        } else {            $message = PMA_Message::error(__('MySQL Spatial Extension does not support ESRI type "%s".'));            $message->addParam($param);        }        return;    }    $num_rows = count($shp->records);    // If .dbf file is loaded, the number of extra data columns    $num_data_cols = isset($shp->DBFHeader) ? count($shp->DBFHeader) : 0;    $rows = array();    $col_names = array();    if ($num_rows != 0) {        foreach ($shp->records as $record) {            $tempRow = array();            if ($gis_obj == null) {                $tempRow[] = null;            } else {                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";            }            if (isset($shp->DBFHeader)) {                foreach ($shp->DBFHeader as $c) {                    $cell = trim($record->DBFData[$c[0]]);                    if (! strcmp($cell, '')) {                        $cell = 'NULL';                    }                    $tempRow[] = $cell;                }            }            $rows[] = $tempRow;        }    }    if (count($rows) == 0) {        $error = true;        $message = PMA_Message::error(__('The imported file does not contain any data'));        return;    }    // Column names for spatial column and the rest of the columns,    // if they are available    $col_names[] = 'SPATIAL';    for ($n = 0; $n < $num_data_cols; $n++) {        $col_names[] = $shp->DBFHeader[$n][0];    }    // Set table name based on the number of tables    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $table_name = 'TABLE '.(count($result) + 1);    } else {        $table_name = 'TBL_NAME';    }    $tables = array(array($table_name, $col_names, $rows));    // Use data from shape file to chose best-fit MySQL types for each column    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    $table_no = 0; $spatial_col = 0;    $analyses[$table_no][TYPES][$spatial_col] = GEOMETRY;    $analyses[$table_no][FORMATTEDSQL][$spatial_col] = true;    // Set database name to the currently selected one, if applicable    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'SHP_DB';        $options = null;    }    // Created and execute necessary SQL statements from data    $null_param = null;    PMA_buildSQL($db_name, $tables, $analyses, $null_param, $options);    unset($tables);    unset($analyses);    $finished = true;    $error = false;    // Commit any possible data in buffers    PMA_importRunQuery();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * extracts table properties from create statement * * @todo should be handled by class Table * @todo this should be recoded as functions, to avoid messing with global variables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defining global variables, in case this script is included by a function. * This is necessary because this script can be included by libraries/header.inc.php. */global $showtable, $tbl_is_view, $tbl_type, $show_comment, $tbl_collation,       $table_info_num_rows, $auto_increment;/** * Gets table informations */// Seems we need to do this in MySQL 5.0.2,// otherwise error #1046, no database selectedPMA_DBI_select_db($GLOBALS['db']);/** * Holds information about the current table * * @todo replace this by PMA_Table * @global array $GLOBALS['showtable'] * @name $showtable */$GLOBALS['showtable'] = array();// PMA_Table::sGetStatusInfo() does caching by default, but here// we force reading of the current table status// if $reread_info is true (for example, coming from tbl_operations.php// and we just changed the table's storage engine)$GLOBALS['showtable'] = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, (isset($reread_info) && $reread_info ? true : false));// need this test because when we are creating a table, we get 0 rows// from the SHOW TABLE query// and we don't want to mess up the $tbl_type coming from the formif ($showtable) {    if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {        $tbl_is_view     = true;        $tbl_type        = __('View');        $show_comment    = null;    } else {        $tbl_is_view     = false;        $tbl_type        = isset($showtable['Engine'])            ? strtoupper($showtable['Engine'])            : '';        // a new comment could be coming from tbl_operations.php        // and we want to show it in the header        if (isset($submitcomment) && isset($comment)) {            $show_comment = $comment;        } else {            $show_comment    = isset($showtable['Comment'])                ? $showtable['Comment']                : '';        }    }    $tbl_collation       = empty($showtable['Collation'])        ? ''        : $showtable['Collation'];    if (null === $showtable['Rows']) {        $showtable['Rows']   = PMA_Table::countRecords($GLOBALS['db'],            $showtable['Name'], true);    }    $table_info_num_rows = isset($showtable['Rows']) ? $showtable['Rows'] : 0;    $row_format = isset($showtable['Row_format']) ? $showtable['Row_format'] : '';    $auto_increment      = isset($showtable['Auto_increment'])        ? $showtable['Auto_increment']        : '';    $create_options      = isset($showtable['Create_options'])        ? explode(' ', $showtable['Create_options'])        : array();    // export create options by its name as variables into global namespace    // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'    unset($pack_keys);    foreach ($create_options as $each_create_option) {        $each_create_option = explode('=', $each_create_option);        if (isset($each_create_option[1])) {            $$each_create_option[0]    = $each_create_option[1];        }    }    // we need explicit DEFAULT value here (different from '0')    $pack_keys = (! isset($pack_keys) || strlen($pack_keys) == 0) ? 'DEFAULT' : $pack_keys;    unset($create_options, $each_create_option);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides download to a given field defined in parameters. * @package PhpMyAdmin *//** * Common functions. */require_once './libraries/common.inc.php';require_once './libraries/mime.lib.php';/* Check parameters */PMA_checkParameters(array('db', 'table', 'where_clause', 'transform_key'));/* Select database */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '', '');}/* Check if table exists */if (!PMA_DBI_get_columns($db, $table)) {    PMA_mysqlDie(__('Invalid table name'));}/* Grab data */$sql = 'SELECT ' . PMA_backquote($transform_key) . ' FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';$result = PMA_DBI_fetch_value($sql);/* Check return code */if ($result === false) {    PMA_mysqlDie(__('MySQL returned an empty result set (i.e. zero rows).'), $sql);}/* Avoid corrupting data */@ini_set('url_rewriter.tags', '');PMA_download_header(    $table . '-' .  $transform_key . '.bin',    PMA_detectMIME($result),    strlen($result)    );echo $result;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold the PMA_List base class * * @package PhpMyAdmin *//** * @todo add caching * @since phpMyAdmin 2.9.10 * @abstract * @package PhpMyAdmin */abstract class PMA_List extends ArrayObject{    /**     * @var mixed   empty item     */    protected $item_empty = '';    public function __construct($array = array(), $flags = 0, $iterator_class = "ArrayIterator")    {        parent::__construct($array, $flags, $iterator_class);    }    /**     * returns item only if there is only one in the list     *     * @return  single item     */    public function getSingleItem()    {        if (count($this) === 1) {            return reset($this);        }        return $this->getEmpty();    }    /**     * defines what is an empty item (0, '', false or null)     *     * @return  mixed   an empty item     */    public function getEmpty()    {        return $this->item_empty;    }    /**     * checks if the given db names exists in the current list, if there is     * missing at least one item it returns false otherwise true     *     * @param string  $db_name,..     one or more mysql result resources     * @return  boolean true if all items exists, otheriwse false     */    public function exists()    {        $this_elements = $this->getArrayCopy();        foreach (func_get_args() as $result) {            if (! in_array($result, $this_elements)) {                return false;            }        }        return true;    }    /**     * returns HTML <option>-tags to be used inside <select></select>     *     * @param mixed   $selected   the selected db or true for selecting current db     * @param boolean $include_information_schema     * @return  string  HTML option tags     */    public function getHtmlOptions($selected = '', $include_information_schema = true)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $options = '';        foreach ($this as $each_item) {            if (false === $include_information_schema                    && PMA_is_system_schema($each_item)) {                continue;            }            $options .= '<option value="' . htmlspecialchars($each_item) . '"';            if ($selected === $each_item) {                $options .= ' selected="selected"';            }            $options .= '>' . htmlspecialchars($each_item) . '</option>' . "\n";        }        return $options;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        return $this->getEmpty();    }    /**     * builds up the list     *     */    abstract public function build();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Generic plugin interface. * * @package PhpMyAdmin *//** * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param) * * Reads all plugin information from directory $plugins_dir. * * @param string  $plugins_dir    directrory with plugins * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work * @return  array                   list of plugins */function PMA_getPlugins($plugins_dir, $plugin_param){    /* Scan for plugins */    $plugin_list = array();    if ($handle = @opendir($plugins_dir)) {        while ($file = @readdir($handle)) {            // In some situations, Mac OS creates a new file for each file            // (for example ._csv.php) so the following regexp            // matches a file which does not start with a dot but ends            // with ".php"            if (is_file($plugins_dir . $file) && preg_match('@^[^\.](.)*\.php$@i', $file)) {                include $plugins_dir . $file;            }        }    }    ksort($plugin_list);    return $plugin_list;}/** * string PMA_getString(string $name) * * returns locale string for $name or $name if no locale is found * * @param string  $name   for local string * @return  string          locale string for $name */function PMA_getString($name){    return isset($GLOBALS[$name]) ? $GLOBALS[$name] : $name;}/** * string PMA_pluginCheckboxCheck(string $section, string $opt) * * returns html input tag option 'checked' if plugin $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              hmtl input tag option 'checked' */function PMA_pluginCheckboxCheck($section, $opt){    // If the form is being repopulated using $_GET data, that is priority    if (isset($_GET[$opt]) || ! isset($_GET['repopulate']) && ((isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) ||        (isset($GLOBALS['cfg'][$section][$opt]) && $GLOBALS['cfg'][$section][$opt]))) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetDefault(string $section, string $opt) * * returns default value for option $opt * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              default value for option $opt */function PMA_pluginGetDefault($section, $opt){    if (isset($_GET[$opt])) { // If the form is being repopulated using $_GET data, that is priority        return htmlspecialchars($_GET[$opt]);    } elseif (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) {        return htmlspecialchars($_REQUEST[$opt]);    } elseif (isset($GLOBALS['cfg'][$section][$opt])) {        $matches = array();        /* Possibly replace localised texts */        if (preg_match_all('/(str[A-Z][A-Za-z0-9]*)/', $GLOBALS['cfg'][$section][$opt], $matches)) {            $val = $GLOBALS['cfg'][$section][$opt];            foreach ($matches[0] as $match) {                if (isset($GLOBALS[$match])) {                    $val = str_replace($match, $GLOBALS[$match], $val);                }            }            return htmlspecialchars($val);        } else {            return htmlspecialchars($GLOBALS['cfg'][$section][$opt]);        }    }    return '';}/** * string PMA_pluginIsActive(string $section, string $opt, string $val) * * returns html input tag option 'checked' if option $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @param string  $val        value of option to check against * @return  string              html input tag option 'checked' */function PMA_pluginIsActive($section, $opt, $val){    if (! empty($GLOBALS['timeout_passed']) && isset($_REQUEST[$opt])) {        if ($_REQUEST[$opt] == $val) {            return ' checked="checked"';        }    } elseif (isset($GLOBALS['cfg'][$section][$opt]) &&  $GLOBALS['cfg'][$section][$opt] == $val) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname) * * returns html select form element for plugin choice * and hidden fields denoting whether each plugin must be exported as a file * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $name       name of select element * @param array   &$list      array with plugin configuration defined in plugin file * @param string  $cfgname    name of config value, if none same as $name * @return  string              html select tag */function PMA_pluginGetChoice($section, $name, &$list, $cfgname = null){    if (! isset($cfgname)) {        $cfgname = $name;    }    $ret = '<select id="plugins" name="' . $name . '">';    $default = PMA_pluginGetDefault($section, $cfgname);    foreach ($list as $plugin_name => $val) {        $ret .= '<option';         // If the form is being repopulated using $_GET data, that is priority        if (isset($_GET[$name]) && $plugin_name == $_GET[$name] || ! isset($_GET[$name]) && $plugin_name == $default) {            $ret .= ' selected="selected"';        }         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";    }    $ret .= '</select>' . "\n";    // Whether each plugin has to be saved as a file    foreach ($list as $plugin_name => $val) {        $ret .= '<input type="hidden" id="force_file_' . $plugin_name . '" value="';        if (isset($val['force_file'])) {            $ret .= 'true';        } else {            $ret .= 'false';        }        $ret .= '" />'. "\n";    }    return $ret;}/** * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt) * * returns single option in a list element * * @param string  $section        name of config section in *                                  $GLOBALS['cfg'][$section] for plugin * @param string  $plugin_name    unique plugin name * @param string  $id             option id * @param array   &$opt           plugin option details * @return  string                  table row with option */function PMA_pluginGetOneOption($section, $plugin_name, $id, &$opt){    $ret = "\n";    if ($opt['type'] == 'bool') {        $ret .= '<li>' . "\n";        $ret .= '<input type="checkbox" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="something" id="checkbox_' . $plugin_name . '_' . $opt['name'] . '"'            . ' ' . PMA_pluginCheckboxCheck($section, $plugin_name . '_' . $opt['name']);        if (isset($opt['force'])) {            /* Same code is also few lines lower, update both if needed */            $ret .= ' onclick="if (!this.checked &amp;&amp; '                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '                . 'return false; else return true;"';        }        $ret .= ' />';        $ret .= '<label for="checkbox_' . $plugin_name . '_' . $opt['name'] . '">'            . PMA_getString($opt['text']) . '</label>';    } elseif ($opt['type'] == 'text') {        $ret .= '<li>' . "\n";        $ret .= '<label for="text_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<input type="text" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"'            . ' id="text_' . $plugin_name . '_' . $opt['name'] . '"'            . (isset($opt['size']) ? ' size="' . $opt['size'] . '"' : '')            . (isset($opt['len']) ? ' maxlength="' . $opt['len'] . '"' : '') . ' />';    } elseif ($opt['type'] == 'message_only') {        $ret .= '<li>' . "\n";        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';    } elseif ($opt['type'] == 'select') {        $ret .= '<li>' . "\n";        $ret .= '<label for="select_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<select name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' id="select_' . $plugin_name . '_' . $opt['name'] . '">';        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<option value="' . $key . '"';            if ($key == $default) {                $ret .= ' selected="selected"';            }            $ret .= '>' . PMA_getString($val) . '</option>';        }        $ret .= '</select>';    } elseif ($opt['type'] == 'radio') {        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<li><input type="radio" name="' . $plugin_name . '_' . $opt['name'] . '" value="' . $key            . '" id="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '"';            if ($key == $default) {                $ret .= 'checked="checked"';            }            $ret .= ' />' . '<label for="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '">'            . PMA_getString($val) . '</label></li>';        }    } elseif ($opt['type'] == 'hidden') {        $ret .= '<li><input type="hidden" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"' . ' /></li>';    } elseif ($opt['type'] == 'begin_group') {        $ret .= '<div class="export_sub_options" id="' . $plugin_name . '_' . $opt['name'] . '">';        if (isset($opt['text'])) {            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';        }        $ret .= '<ul>';    } elseif ($opt['type'] == 'end_group') {        $ret .= '</ul></div>';    } elseif ($opt['type'] == 'begin_subgroup') {        /* each subgroup can have a header, which may also be a form element */        $ret .=  PMA_pluginGetOneOption($section, $plugin_name, $id, $opt['subgroup_header']) . '<li class="subgroup"><ul';        if (isset($opt['subgroup_header']['name'])) {            $ret .= ' id="ul_' . $opt['subgroup_header']['name'] . '">';        } else {            $ret .= '>';        }    } elseif ($opt['type'] == 'end_subgroup') {        $ret .= '</ul></li>';    } else {        /* This should be seen only by plugin writers, so I do not thing this         * needs translation. */        $ret .= 'UNKNOWN OPTION ' . $opt['type'] . ' IN IMPORT PLUGIN ' . $plugin_name . '!';    }    if (isset($opt['doc'])) {        if (count($opt['doc']) == 3) {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1], false, $opt['doc'][2]);        } elseif (count($opt['doc']) == 1) {            $ret .= PMA_showDocu($opt['doc'][0]);        } else {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1]);        }    }    // Close the list element after $opt['doc'] link is displayed    if ($opt['type'] == 'bool' || $opt['type'] == 'text' || $opt['type'] == 'message_only' || $opt['type'] == 'select') {        $ret .= '</li>';    }    $ret .= "\n";    return $ret;}/** * string PMA_pluginGetOptions(string $section, array &$list) * * return html div with editable options for plugin * * @param string  $section    name of config section in $GLOBALS['cfg'][$section] * @param array   &$list      array with plugin configuration defined in plugin file * @return  string              html fieldset with plugin options */function PMA_pluginGetOptions($section, &$list){    $ret = '';    $default = PMA_pluginGetDefault('Export', 'format');    // Options for plugins that support them    foreach ($list as $plugin_name => $val) {        $ret .= '<div id="' . $plugin_name . '_options" class="format_specific_options">';        $count = 0;            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';        if (isset($val['options']) && count($val['options']) > 0) {            foreach ($val['options'] as $id => $opt) {                if ($opt['type'] != 'hidden' && $opt['type'] != 'begin_group' && $opt['type'] != 'end_group' && $opt['type'] != 'begin_subgroup' && $opt['type'] != 'end_subgroup') {                    $count++;                }                $ret .= PMA_pluginGetOneOption($section, $plugin_name, $id, $opt);            }        }        if ($count == 0) {            $ret .= '<p>' . __('This format has no options') . '</p>';        }        $ret .= '</div>';    }    return $ret;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Loads libraries/common.inc.php and preforms some additional actions * * @package PhpMyAdmin-setup *//** * Do not include full common. * @ignore */define('PMA_MINIMUM_COMMON', true);define('PMA_SETUP', true);chdir('..');if (!file_exists('./libraries/common.inc.php')) {    die('Bad invocation!');}require_once './libraries/common.inc.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/url_generating.lib.php';require_once './libraries/user_preferences.lib.php';// use default error handlerrestore_error_handler();// Save current language in a cookie, required since we use PMA_MINIMUM_COMMON$GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);ConfigFile::getInstance()->setPersistKeys(array(    'DefaultLang',    'ServerDefault',    'UploadDir',    'SaveDir',    'Servers/1/verbose',    'Servers/1/host',    'Servers/1/port',    'Servers/1/socket',    'Servers/1/extension',    'Servers/1/connect_type',    'Servers/1/auth_type',    'Servers/1/user',    'Servers/1/password'));// allows for redirection even after sending some dataob_start();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of SVG Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_SVG extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_SVG" constructor     *     * Upon instantiation This starts writing the Svg XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');        $this->startDtd(            'svg', '-//W3C//DTD SVG 1.1//EN',            'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'        );        $this->endDtd();    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Set document font     *     * @param string $value sets the font e.g Arial, Sans-serif etc     *     * @return void     * @access public     */    function setFont($value)    {        $this->font = $value;    }    /**     * Get document font     *     * @return string returns the font name     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Set document font size     *     * @param string $value sets the font size in pixels     *     * @return void     * @access public     */    function setFontSize($value)    {        $this->fontSize = $value;    }    /**     * Get document font size     *     * @return string returns the font size     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Starts Svg Document     *     * svg document starts by first initializing svg tag     * which contains all the attributes and namespace that needed     * to define the svg document     *     * @param integer $width  total width of the Svg document     * @param integer $height total height of the Svg document     *     * @return void     * @access public     *     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function startSvgDoc($width,$height)    {        $this->startElement('svg');        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('xmlns', 'http://www.w3.org/2000/svg');        $this->writeAttribute('version', '1.1');    }    /**     * Ends Svg Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endSvgDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * output Svg Document     *     * svg document prompted to the user for download     * Svg document saved in .svg extension and can be     * easily changeable by using any svg IDE     *     * @param string $fileName file name     *     * @return void     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function showOutput($fileName)    {        //ob_get_clean();        $output = $this->flush();        PMA_download_header($fileName . '.svg', 'image/svg+xml', strlen($output));        print $output;    }    /**     * Draws Svg elements     *     * SVG has some predefined shape elements like rectangle & text     * and other elements who have x,y co-ordinates are drawn.     * specify their width and height and can give styles too.     *     * @param string  $name   Svg element name     * @param integer $x      The x attr defines the left position of the element     * (e.g. x="0" places the element 0 pixels from the left of the browser window)     * @param integer $y      The y attribute defines the top position of the element     * (e.g. y="0" places the element 0 pixels from the top of the browser window)     * @param integer $width  The width attribute defines the width the element     * @param integer $height The height attribute defines the height the element     * @param string  $text   The text attribute defines the text the element     * @param string  $styles The style attribute defines the style the element     *  styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::text(), XMLWriter::endElement()     */    function printElement($name, $x, $y, $width = '', $height = '', $text = '', $styles = '')    {        $this->startElement($name);        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('x', $x);        $this->writeAttribute('y', $y);        $this->writeAttribute('style', $styles);        if (isset($text)) {            $this->writeAttribute('font-family', $this->font);            $this->writeAttribute('font-size', $this->fontSize);            $this->text($text);        }        $this->endElement();    }    /**     * Draws Svg Line element     *     * Svg line element is drawn for connecting the tables.     * arrows are also drawn by specify its start and ending     * co-ordinates     *     * @param string  $name   Svg element name i.e line     * @param integer $x1     Defines the start of the line on the x-axis     * @param integer $y1     Defines the start of the line on the y-axis     * @param integer $x2     Defines the end of the line on the x-axis     * @param integer $y2     Defines the end of the line on the y-axis     * @param string  $styles The style attribute defines the style the element     *                        styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::endElement()     */    function printElementLine($name,$x1,$y1,$x2,$y2,$styles)    {        $this->startElement($name);        $this->writeAttribute('x1', $x1);        $this->writeAttribute('y1', $y1);        $this->writeAttribute('x2', $x2);        $this->writeAttribute('y2', $y2);        $this->writeAttribute('style', $styles);        $this->endElement();    }    /**     * get width of string/text     *     * Svg text element width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other than this.     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in SVG XML document. * * @name Table_Stats * @see PMA_SVG */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             Font face     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current SVG image document     * @global integer   The current page number (from the     *                   $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     *     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,     *       Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber,    &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $svg, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : ''        ) . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font size     * @param integer $fontSize The font size     *     * @global object    The current SVG image document     *     * @return nothing     * @access private     *     * @see PMA_SVG     */    private function _setWidthTable($font,$fontSize)    {        global $svg;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $svg->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $svg->getStringWidth('  ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return nothing     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current SVG image document     *     * @access public     * @return nothing     *     * @see PMA_SVG,PMA_SVG::printElement     */    public function tableDraw($showColor)    {        global $svg;        //echo $this->_tableName.'<br />';        $svg->printElement(            'rect', $this->x, $this->y, $this->width,            $this->heightCell, null, 'fill:red;stroke:black;'        );        $svg->printElement(            'text', $this->x + 5, $this->y+ 14, $this->width, $this->heightCell,            $this->_getTitle(), 'fill:none;stroke:black;'        );        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $svg->printElement(                'rect', $this->x, $this->y + $this->currentCell, $this->width,                $this->heightCell, null, 'fill:'.$showColor.';stroke:black;'            );            $svg->printElement(                'text', $this->x + 5, $this->y + 14 + $this->currentCell,                $this->width, $this->heightCell, $field, 'fill:none;stroke:black;'            );        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in SVG XML document. * * @name Relation_Stats * @see PMA_SVG::printElementLine */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current SVG image document     *     * @return nothing     * @access public     *     * @see PMA_SVG     */    public function relationDraw($changeColor)    {        global $svg;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        $svg->printElementLine(            'line', $this->xSrc, $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick,            $this->yDest, $this->xDest, $this->yDest,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            $this->xDest + $this->destDir * $this->wTick, $this->yDest,            'fill:' . $color . ';stroke:' . $color . ';stroke-width:1;'        );        $root2 = 2 * sqrt(2);        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );    }}/** end of the "Relation_Stats" class*//** * Svg Relation Schema Class * * Purpose of this class is to generate the SVG XML Document because * SVG defines the graphics in XML format which is used for representing * the database diagrams as vector image. This class actually helps *  in preparing SVG XML format. * * SVG XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Svg_Relation_Schema */class PMA_Svg_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $t_marg = 10;    private $b_marg = 10;    private $l_marg = 10;    private $r_marg = 10;    private $_tablewidth;    /**     * The "PMA_Svg_Relation_Schema" constructor     *     * Upon instantiation This starts writing the SVG XML document     * user will be prompted for download as .svg extension     *     * @return void     * @see PMA_SVG     */    function __construct()    {        global $svg,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setExportType($_POST['export_type']);        $svg = new PMA_SVG();        $svg->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $svg->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $svg->setFont('Arial');        $svg->setFontSize('16px');        $svg->startSvgDoc('1000px', '1000px');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $svg->getFont(), $svg->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $svg->endSvgDoc();        $svg->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name     *     * @return nothing     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font face     * @param int     $fontSize     Font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     * @return nothing     *     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable,$font,$fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines     * connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return nothing     * @access private     *     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return nothing     * @access private     *     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/*   Copyright (c) 2003, 2009 Danilo Segan <danilo@kvota.net>.   Copyright (c) 2005 Nico Kaiser <nico@siriux.net>   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*//** * Provides a simple gettext replacement that works independently from * the system's gettext abilities. * It can read MO files and use them for translating strings. * The files are passed to gettext_reader as a Stream (see streams.php) * * This version has the ability to cache all strings and translations to * speed up the string lookup. * While the cache is enabled by default, it can be switched off with the * second parameter in the constructor (e.g. whenusing very large MO files * that you don't want to keep in memory) */class gettext_reader {  //public:   var $error = 0; // public variable that holds error code (0 if no error)   //private:  var $BYTEORDER = 0;        // 0: low endian, 1: big endian  var $STREAM = NULL;  var $short_circuit = false;  var $enable_cache = false;  var $originals = NULL;      // offset of original table  var $translations = NULL;    // offset of translation table  var $pluralheader = NULL;    // cache header field for plural forms  var $total = 0;          // total string count  var $table_originals = NULL;  // table for original strings (offsets)  var $table_translations = NULL;  // table for translated strings (offsets)  var $cache_translations = NULL;  // original -> translation mapping  /* Methods */  /**   * Reads a 32bit Integer from the Stream   *   * @access private   * @return Integer from the Stream   */  function readint() {      if ($this->BYTEORDER == 0) {        // low endian        $input=unpack('V', $this->STREAM->read(4));        return array_shift($input);      } else {        // big endian        $input=unpack('N', $this->STREAM->read(4));        return array_shift($input);      }    }  function read($bytes) {    return $this->STREAM->read($bytes);  }  /**   * Reads an array of Integers from the Stream   *   * @param int count How many elements should be read   * @return Array of Integers   */  function readintarray($count) {    if ($this->BYTEORDER == 0) {        // low endian        return unpack('V'.$count, $this->STREAM->read(4 * $count));      } else {        // big endian        return unpack('N'.$count, $this->STREAM->read(4 * $count));      }  }  /**   * Constructor   *   * @param object Reader the StreamReader object   * @param boolean enable_cache Enable or disable caching of strings (default on)   */  function gettext_reader($Reader, $enable_cache = true) {    // If there isn't a StreamReader, turn on short circuit mode.    if (! $Reader || isset($Reader->error) ) {      $this->short_circuit = true;      return;    }    // Caching can be turned off    $this->enable_cache = $enable_cache;    $MAGIC1 = "\x95\x04\x12\xde";    $MAGIC2 = "\xde\x12\x04\x95";    $this->STREAM = $Reader;    $magic = $this->read(4);    if ($magic == $MAGIC1) {      $this->BYTEORDER = 1;    } elseif ($magic == $MAGIC2) {      $this->BYTEORDER = 0;    } else {      $this->error = 1; // not MO file      return false;    }    // FIXME: Do we care about revision? We should.    $revision = $this->readint();    $this->total = $this->readint();    $this->originals = $this->readint();    $this->translations = $this->readint();  }  /**   * Loads the translation tables from the MO file into the cache   * If caching is enabled, also loads all strings into a cache   * to speed up translation lookups   *   * @access private   */  function load_tables() {    if (is_array($this->cache_translations) &&      is_array($this->table_originals) &&      is_array($this->table_translations))      return;    /* get original and translations tables */    if (!is_array($this->table_originals)) {      $this->STREAM->seekto($this->originals);      $this->table_originals = $this->readintarray($this->total * 2);    }    if (!is_array($this->table_translations)) {      $this->STREAM->seekto($this->translations);      $this->table_translations = $this->readintarray($this->total * 2);    }    if ($this->enable_cache) {      $this->cache_translations = array ();      /* read all strings in the cache */      for ($i = 0; $i < $this->total; $i++) {        $this->STREAM->seekto($this->table_originals[$i * 2 + 2]);        $original = $this->STREAM->read($this->table_originals[$i * 2 + 1]);        $this->STREAM->seekto($this->table_translations[$i * 2 + 2]);        $translation = $this->STREAM->read($this->table_translations[$i * 2 + 1]);        $this->cache_translations[$original] = $translation;      }    }  }  /**   * Returns a string from the "originals" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_original_string($num) {    $length = $this->table_originals[$num * 2 + 1];    $offset = $this->table_originals[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Returns a string from the "translations" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_translation_string($num) {    $length = $this->table_translations[$num * 2 + 1];    $offset = $this->table_translations[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Binary search for string   *   * @access private   * @param string string   * @param int start (internally used in recursive function)   * @param int end (internally used in recursive function)   * @return int string number (offset in originals table)   */  function find_string($string, $start = -1, $end = -1) {    if (($start == -1) or ($end == -1)) {      // find_string is called with only one parameter, set start end end      $start = 0;      $end = $this->total;    }    if (abs($start - $end) <= 1) {      // We're done, now we either found the string, or it doesn't exist      $txt = $this->get_original_string($start);      if ($string == $txt)        return $start;      else        return -1;    } else if ($start > $end) {      // start > end -> turn around and start over      return $this->find_string($string, $end, $start);    } else {      // Divide table in two parts      $half = (int)(($start + $end) / 2);      $cmp = strcmp($string, $this->get_original_string($half));      if ($cmp == 0)        // string is exactly in the middle => return it        return $half;      else if ($cmp < 0)        // The string is in the upper half        return $this->find_string($string, $start, $half);      else        // The string is in the lower half        return $this->find_string($string, $half, $end);    }  }  /**   * Translates a string   *   * @access public   * @param string string to be translated   * @return string translated string (or original, if not found)   */  function translate($string) {    if ($this->short_circuit)      return $string;    $this->load_tables();    if ($this->enable_cache) {      // Caching enabled, get translated string from cache      if (array_key_exists($string, $this->cache_translations))        return $this->cache_translations[$string];      else        return $string;    } else {      // Caching not enabled, try to find string      $num = $this->find_string($string);      if ($num == -1)        return $string;      else        return $this->get_translation_string($num);    }  }  /**   * Sanitize plural form expression for use in PHP eval call.   *   * @access private   * @return string sanitized plural form expression   */  function sanitize_plural_expression($expr) {    // Get rid of disallowed characters.    $expr = preg_replace('@[^a-zA-Z0-9_:;\(\)\?\|\&=!<>+*/\%-]@', '', $expr);    // Add parenthesis for tertiary '?' operator.    $expr .= ';';    $res = '';    $p = 0;    for ($i = 0; $i < strlen($expr); $i++) {      $ch = $expr[$i];      switch ($ch) {      case '?':        $res .= ' ? (';        $p++;        break;      case ':':        $res .= ') : (';        break;      case ';':        $res .= str_repeat( ')', $p) . ';';        $p = 0;        break;      default:        $res .= $ch;      }    }    return $res;  }  /**   * Parse full PO header and extract only plural forms line.   *   * @access private   * @return string verbatim plural form header field   */  function extract_plural_forms_header_from_po_header($header) {    if (preg_match("/(^|\n)plural-forms: ([^\n]*)\n/i", $header, $regs))      $expr = $regs[2];    else      $expr = "nplurals=2; plural=n == 1 ? 0 : 1;";    return $expr;  }  /**   * Get possible plural forms from MO header   *   * @access private   * @return string plural form header   */  function get_plural_forms() {    // lets assume message number 0 is header    // this is true, right?    $this->load_tables();    // cache header field for plural forms    if (! is_string($this->pluralheader)) {      if ($this->enable_cache) {        $header = $this->cache_translations[""];      } else {        $header = $this->get_translation_string(0);      }      $expr = $this->extract_plural_forms_header_from_po_header($header);      $this->pluralheader = $this->sanitize_plural_expression($expr);    }    return $this->pluralheader;  }  /**   * Detects which plural form to take   *   * @access private   * @param n count   * @return int array index of the right plural form   */  function select_string($n) {    $string = $this->get_plural_forms();    $string = str_replace('nplurals',"\$total",$string);    $string = str_replace("n",$n,$string);    $string = str_replace('plural',"\$plural",$string);    $total = 0;    $plural = 0;    eval("$string");    if ($plural >= $total) $plural = $total - 1;    return $plural;  }  /**   * Plural version of gettext   *   * @access public   * @param string single   * @param string plural   * @param string number   * @return translated plural form   */  function ngettext($single, $plural, $number) {    if ($this->short_circuit) {      if ($number != 1)        return $plural;      else        return $single;    }    // find out the appropriate form    $select = $this->select_string($number);    // this should contains all strings separated by NULLs    $key = $single . chr(0) . $plural;    if ($this->enable_cache) {      if (! array_key_exists($key, $this->cache_translations)) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->cache_translations[$key];        $list = explode(chr(0), $result);        return $list[$select];      }    } else {      $num = $this->find_string($key);      if ($num == -1) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->get_translation_string($num);        $list = explode(chr(0), $result);        return $list[$select];      }    }  }  function pgettext($context, $msgid) {    $key = $context . chr(4) . $msgid;    $ret = $this->translate($key);    if (strpos($ret, "\004") !== FALSE) {      return $msgid;    } else {      return $ret;    }  }  function npgettext($context, $singular, $plural, $number) {    $key = $context . chr(4) . $singular;    $ret = $this->ngettext($key, $plural, $number);    if (strpos($ret, "\004") !== FALSE) {      return $singular;    } else {      return $ret;    }  }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * MIME detection code. * * @package PhpMyAdmin * @todo Maybe we could try to use fileinfo module if loaded *//** * Tries to detect MIME type of content. * * @param string &$test * @return string */function PMA_detectMIME(&$test){    $len = strlen($test);    if ($len >= 2 && $test[0] == chr(0xff) && $test[1] == chr(0xd8)) {        return 'image/jpeg';    }    if ($len >= 3 && substr($test, 0, 3) == 'GIF') {        return 'image/gif';    }    if ($len >= 4 && substr($test, 0, 4) == "\x89PNG") {        return 'image/png';    }    return 'application/octet-stream';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Formset processing library * * @package PhpMyAdmin-setup *//** * Processes forms registered in $form_display, handles error correction * * @param FormDisplay $form_display */function process_formset(FormDisplay $form_display){    if (filter_input(INPUT_GET, 'mode') == 'revert') {        // revert erroneous fields to their default values        $form_display->fixErrors();        // drop post data        header('HTTP/1.1 303 See Other');        header('Location: index.php');        exit;    }    if (!$form_display->process(false)) {        // handle form view and failed POST        $form_display->display(true, true);    } else {        // check for form errors        if ($form_display->hasErrors()) {            // form has errors, show warning            $separator = PMA_get_arg_separator('html');            $page = filter_input(INPUT_GET, 'page');            $formset = filter_input(INPUT_GET, 'formset');            $formset = $formset ? "{$separator}formset=$formset" : '';            $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);            if ($id === null && $page == 'servers') {                // we've just added a new server, get it's id                $id = ConfigFile::getInstance()->getServerCount();            }            $id = $id ? "{$separator}id=$id" : '';            ?>            <div class="error">                <h4><?php echo __('Warning') ?></h4>                <?php echo __('Submitted form contains errors') ?><br />                <a href="?page=<?php echo $page . $formset . $id . $separator ?>mode=revert"><?php echo __('Try to revert erroneous fields to their default values') ?></a>            </div>            <?php $form_display->displayErrors() ?>            <a class="btn" href="index.php"><?php echo __('Ignore errors') ?></a>            &nbsp;            <a class="btn" href="?page=<?php echo $page . $formset . $id . $separator ?>mode=edit"><?php echo __('Show form') ?></a>            <?php        } else {            // drop post data            header('HTTP/1.1 303 See Other');            header('Location: index.php');            exit;        }    }}?>
<?php/** * Column types and functions supported by Drizzle * * @package PhpMyAdmin */$auto_column_types = empty($cfg['ColumnTypes']);// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INTEGER',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'INTEGER',        'BIGINT',        '-',        'DECIMAL',        'DOUBLE',        '-',        'BOOLEAN',        'SERIAL',        'UUID',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',    ),    // Text    'STRING' => array(        'VARCHAR',        'TEXT',        '-',        'VARBINARY',        'BLOB',        '-',        'ENUM',    ),);if ($auto_column_types && PMA_MYSQL_INT_VERSION >= 20120130) {    $cfg['ColumnTypes']['STRING'][] = '-';    $cfg['ColumnTypes']['STRING'][] = 'IPV6';}unset($auto_column_types);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'INTEGER'   => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'VARCHAR'    => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'UUID'       => 'FUNC_UUID',        'ENUM'       => '',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'HEX',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'QUOTE',            'REVERSE',            'RTRIM',            'SCHEMA',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_UUID' => array(            'UUID',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SYSDATE',            //'TIME', // https://bugs.launchpad.net/drizzle/+bug/804571            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            //'WEEK', // same as TIME            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),    );    $cfg_default_restrict_funcs = empty($cfg['RestrictFunctions']);    if ($cfg_default_restrict_funcs) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            $cfg['Functions'] = array_merge($cfg['Functions'], $functions);        }        // check for some functions known to be in modules        $functions = array(            'MYSQL_PASSWORD' => 'FUNC_CHAR',            'ROT13' => 'FUNC_CHAR',        );        // add new functions        $sql = "SELECT upper(plugin_name) f            FROM data_dictionary.plugins            WHERE plugin_name IN ('" . implode("','", array_keys($functions)) . "')              AND plugin_type = 'Function'              AND is_active";        $drizzle_functions = PMA_DBI_fetch_result($sql, 'f', 'f');        $cfg['Functions'] = array_merge($cfg['Functions'], $drizzle_functions);        if ($cfg_default_restrict_funcs) {            foreach ($drizzle_functions as $function) {                $category = $functions[$function];                $cfg['RestrictFunctions'][$category][] = $function;            }            foreach ($cfg['RestrictFunctions'] as &$v) {                sort($v);            }            unset($v);        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Run common work */require_once './libraries/common.inc.php';//Get some js files needed for Ajax requests$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';/** * If we are not in an Ajax request, then do the common work and show the links etc. */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_common.inc.php';}$url_query .= '&amp;goto=tbl_tracking.php&amp;back=db_tracking.php';// Get the database structure$sub_part = '_structure';require './libraries/db_info.inc.php';// Work to do?//  (here, do not use $_REQUEST['db] as it can be crafted)if (isset($_REQUEST['delete_tracking']) && isset($_REQUEST['table'])) {    PMA_Tracker::deleteTracking($GLOBALS['db'], $_REQUEST['table']);    /**     * If in an Ajax request, generate the success message and use     * {@link PMA_ajaxResponse()} to send the output     */    if ($GLOBALS['is_ajax_request'] == true) {        $message = PMA_Message::success();        PMA_ajaxResponse($message, true);    }}// Get tracked data about the database$data = PMA_Tracker::getTrackedData($_REQUEST['db'], '', '1');// No tables present and no log existif ($num_tables == 0 && count($data['ddlog']) == 0) {    echo '<p>' . __('No tables found in database.') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    }    // Display the footer    include './libraries/footer.inc.php';    exit;}// ---------------------------------------------------------------------------/* * Display top menu links */require_once './libraries/db_links.inc.php';// Prepare statement to get HEAD version$all_tables_query = ' SELECT table_name, MAX(version) as version FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE db_name = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' ' .             ' GROUP BY table_name' .             ' ORDER BY table_name ASC';$all_tables_result = PMA_query_as_controluser($all_tables_query);// If a HEAD version existsif (PMA_DBI_num_rows($all_tables_result) > 0) {?>    <div id="tracked_tables">    <h3><?php echo __('Tracked tables');?></h3>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Last version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Action');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    // Print out information about versions    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data for this table'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Drop');    }    $style = 'odd';    while ($one_result = PMA_DBI_fetch_array($all_tables_result)) {        list($table_name, $version_number) = $one_result;        $table_query = ' SELECT * FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE `db_name` = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' AND `table_name`  = \'' . PMA_sqlAddSlashes($table_name) . '\' AND `version` = \'' . $version_number . '\'';        $table_result = PMA_query_as_controluser($table_query);        $version_data = PMA_DBI_fetch_array($table_result);        if ($version_data['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        $tmp_link = 'tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']);        $delete_link = 'db_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']) . '&amp;delete_tracking=true&amp';        ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version_data['db_name']);?></td>            <td><?php echo htmlspecialchars($version_data['table_name']);?></td>            <td><?php echo $version_data['version'];?></td>            <td><?php echo $version_data['date_created'];?></td>            <td><?php echo $version_data['date_updated'];?></td>            <td><?php echo $version_status;?></td>            <td><a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_tracking_anchor"' : ''); ?> href="<?php echo $delete_link;?>" ><?php echo $drop_image_or_text; ?></a></td>            <td> <a href="<?php echo $tmp_link; ?>"><?php echo __('Versions');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;report=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Tracking report');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;snapshot=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Structure snapshot');?></a></td>        </tr>        <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    unset($tmp_link);    ?>    </tbody>    </table>    </div><?php}$sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];// Get list of tables$table_list = PMA_getTableList($GLOBALS['db']);// For each table try to get the tracking versionforeach ($table_list as $key => $value) {    // If $value is a table group.    if (array_key_exists(('is' . $sep . 'group'), $value) && $value['is' . $sep . 'group']) {        foreach ($value as $temp_table) {            // If $temp_table is a table with the value for 'Name' is set,            // rather than a propery of the table group.            if (is_array($temp_table) && array_key_exists('Name', $temp_table)) {                if (PMA_Tracker::getVersion($GLOBALS['db'], $temp_table['Name']) == -1) {                    $my_tables[] = $temp_table['Name'];                }            }        }    // If $value is a table.    } else {        if (PMA_Tracker::getVersion($GLOBALS['db'], $value['Name']) == -1) {            $my_tables[] = $value['Name'];        }    }}// If untracked tables existif (isset($my_tables)) {?>    <h3><?php echo __('Untracked tables');?></h3>    <table id="noversions" class="data">    <thead>    <tr>        <th width="300"><?php echo __('Table');?></th>        <th></th>    </tr>    </thead>    <tbody><?php    // Print out list of untracked tables    $style = 'odd';    foreach ($my_tables as $key => $tablename) {        if (PMA_Tracker::getVersion($GLOBALS['db'], $tablename) == -1) {            $my_link = '<a href="tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($tablename) .'">';            $my_link .= PMA_getIcon('eye.png', __('Track table')) . '</a>';        ?>            <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($tablename);?></td>            <td><?php echo $my_link;?></td>            </tr>        <?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }    }    ?>    </tbody>    </table><?php}// If available print out database logif (count($data['ddlog']) > 0) {    $log = '';    foreach ($data['ddlog'] as $entry) {        $log .= '# ' . $entry['date'] . ' ' . $entry['username'] . "\n" . $entry['statement'] . "\n";    }    PMA_showMessage(__('Database Log'), $log);}/** * Display the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Output buffer functions for phpMyAdmin * * Copyright 2001 Jeremy Brand <jeremy@nirvani.net> * http://www.jeremybrand.com/Jeremy/Brand/Jeremy_Brand.html * * Check for all the needed functions for output buffering * Make some wrappers for the top and bottoms of our files. * * @package PhpMyAdmin *//** * This function be used eventually to support more modes.  It is needed * because both header and footer functions must know what each other is * doing. * * @staticvar integer remember last calculated value * @return  integer  the output buffer mode */function PMA_outBufferModeGet(){    static $mode = null;    if (null !== $mode) {        return $mode;    }    $mode = 0;    if ($GLOBALS['cfg']['OBGzip'] && function_exists('ob_start')) {        if (ini_get('output_handler') == 'ob_gzhandler') {            // If a user sets the output_handler in php.ini to ob_gzhandler, then            // any right frame file in phpMyAdmin will not be handled properly by            // the browser. My fix was to check the ini file within the            // PMA_outBufferModeGet() function.            $mode = 0;        } elseif (function_exists('ob_get_level') && ob_get_level() > 0) {            // If output buffering is enabled in php.ini it's not possible to            // add the ob_gzhandler without a warning message from php 4.3.0.            // Being better safe than sorry, check for any existing output handler            // instead of just checking the 'output_buffering' setting.            $mode = 0;        } else {            $mode = 1;        }    }    // Zero (0) is no mode or in other words output buffering is OFF.    // Follow 2^0, 2^1, 2^2, 2^3 type values for the modes.    // Usefull if we ever decide to combine modes.  Then a bitmask field of    // the sum of all modes will be the natural choice.    return $mode;} // end of the 'PMA_outBufferModeGet()' function/** * This function will need to run at the top of all pages if output * output buffering is turned on.  It also needs to be passed $mode from * the PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPre(){    if ($mode = PMA_outBufferModeGet()) {        ob_start('ob_gzhandler');    }    header('X-ob_mode: ' . $mode);    register_shutdown_function('PMA_outBufferPost');} // end of the 'PMA_outBufferPre()' function/** * This function will need to run at the bottom of all pages if output * buffering is turned on.  It also needs to be passed $mode from the * PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPost(){    if (ob_get_status() && PMA_outBufferModeGet()) {        ob_flush();    }    /**     * previously we had here an "else flush()" but some PHP versions     * (at least PHP 5.2.11) have a bug (49816) that produces garbled     * data     */} // end of the 'PMA_outBufferPost()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying server selection * * @package PhpMyAdmin *//** * display server selection in list or selectbox form, or option tags only * * @param boolean $not_only_options   whether to include form tags or not * @param boolean $ommit_fieldset     whether to ommit fieldset tag or not */function PMA_select_server($not_only_options, $ommit_fieldset){    // Show as list?    if ($not_only_options) {        $list = $GLOBALS['cfg']['DisplayServersList'];        $not_only_options =! $list;    } else {        $list = false;    }    if ($not_only_options) {        echo '<form method="post" action="index.php" target="_parent">';        echo PMA_generate_common_hidden_inputs();        if (! $ommit_fieldset) {            echo '<fieldset>';        }        echo '<label for="select_server">' . __('Current Server') . ':</label> ';        echo '<select name="server" id="select_server" class="autosubmit">';        echo '<option value="">(' . __('Servers') . ') ...</option>' . "\n";    } elseif ($list) {        echo __('Current Server') . ':<br />';        echo '<ul id="list_server">';    }    foreach ($GLOBALS['cfg']['Servers'] as $key => $server) {        if (empty($server['host'])) {            continue;        }        if (!empty($GLOBALS['server']) && (int) $GLOBALS['server'] === (int) $key) {            $selected = 1;        } else {            $selected = 0;        }        if (!empty($server['verbose'])) {            $label = $server['verbose'];        } else {            $label = $server['host'];            if (!empty($server['port'])) {                $label .= ':' . $server['port'];            }        }        if (! empty($server['only_db'])) {            if (! is_array($server['only_db'])) {                $label .= ' - ' . $server['only_db'];            // try to avoid displaying a too wide selector            } elseif (count($server['only_db']) < 4) {                $label .= ' - ' . implode(', ', $server['only_db']);            }        }        if (!empty($server['user']) && $server['auth_type'] == 'config') {            $label .= '  (' . $server['user'] . ')';        }        if ($list) {            echo '<li>';            if ($selected) {                echo '<strong>' . htmlspecialchars($label) . '</strong>';            } else {                echo '<a class="item" href="index.php'                    . PMA_generate_common_url(array('server' => $key))                    . '" target="_top">' . htmlspecialchars($label) . '</a>';            }            echo '</li>';        } else {            echo '<option value="' . $key . '" '                . ($selected ? ' selected="selected"' : '') . '>'                . htmlspecialchars($label) . '</option>' . "\n";        }    } // end while    if ($not_only_options) {        echo '</select>';        // Show submit button if we have just one server (this happens with no default)        echo '<noscript>';        echo '<input type="submit" value="' . __('Go') . '" />';        echo '</noscript>';        if (! $ommit_fieldset) {            echo '</fieldset>';        }        echo '</form>';    } elseif ($list) {        echo '</ul>';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Routines management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';require_once './libraries/mysql_charsets.lib.php';if (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/routines.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_routines.lib.php';/** * Do the magic */$_PMA_RTE = 'RTN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying language selection * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sorts available languages by their true english names * * @param array   the array to be sorted * @param mixed   a required parameter * @return  the sorted array * @access  private */function PMA_language_cmp(&$a, &$b){    return (strcmp($a[1], $b[1]));} // end of the 'PMA_language_cmp()' function/** * Displays for for language selection * * @access  public */function PMA_select_language($use_fieldset = false, $show_doc = true){    global $cfg, $lang;    ?><form method="post" action="index.php" target="_parent">    <?php    $_form_params = array(        'db' => $GLOBALS['db'],        'table' => $GLOBALS['table'],    );    echo PMA_generate_common_hidden_inputs($_form_params);    // For non-English, display "Language" with emphasis because it's    // not a proper word in the current language; we show it to help    // people recognize the dialog    $language_title = __('Language')        . (__('Language') != 'Language' ? ' - <em>Language</em>' : '');    if ($show_doc) {        $language_title .= PMA_showDocu('faq7_2');    }    if ($use_fieldset) {        echo '<fieldset><legend xml:lang="en" dir="ltr">' . $language_title . '</legend>';    } else {        echo '<bdo xml:lang="en" dir="ltr">' . $language_title . ':</bdo>';    }    ?>    <select name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    uasort($GLOBALS['available_languages'], 'PMA_language_cmp');    foreach ($GLOBALS['available_languages'] as $id => $tmplang) {        $lang_name = PMA_langName($tmplang);        //Is current one active?        if ($lang == $id) {            $selected = ' selected="selected"';        } else {            $selected = '';        }        echo '        ';        echo '<option value="' . $id . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select>    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    <noscript>    <?php    if ($use_fieldset) {        echo '<fieldset class="tblFooters">';    }    ?>        <input type="submit" value="Go" />    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    </noscript></form>    <?php} // End of function PMA_select_language?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Core library. */require_once './libraries/common.inc.php';// Check URL parametersPMA_checkParameters(array('reference', 'c_type'));// Increase time limit, because fetching blob might take some time@set_time_limit(0);$reference = $_REQUEST['reference'];/* * FIXME: Maybe it would be better to check MIME type against whitelist as * this code sems to support only few MIME types (check * function PMA_BS_CreateReferenceLink in libraries/blobstreaming.lib.php). */$c_type = preg_replace('/[^A-Za-z0-9/_-]/', '_', $_REQUEST['c_type']);// Get the blob streaming URL$filename = PMA_BS_getURL($reference);if (empty($filename)) {    die(__('No blob streaming server configured!'));}$hdrs = get_headers($filename, 1);if ($hdrs === false) {    die(__('Failed to fetch headers'));}$fHnd = fopen($filename, "rb");if ($fHnd === false) {    die(__('Failed to open remote URL'));}$f_size = $hdrs['Content-Length'];PMA_download_header(basename($filename), $c_type, $f_size);$pos = 0;$content = "";while (!feof($fHnd)) {    $content .= fread($fHnd, $f_size);    $pos = strlen($content);    if ($pos >= $f_size) {        break;    }}echo $content;flush();fclose($fHnd);
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form management class, displays and processes forms * * Explanation of used terms: * o work_path - original field path, eg. Servers/4/verbose * o system_path - work_path modified so that it points to the first server, *                 eg. Servers/1/verbose * o translated_path - work_path modified for HTML field name, a path with *                     slashes changed to hyphens, eg. Servers-4-verbose * * @package PhpMyAdmin *//** * Core libraries. */require_once './libraries/config/FormDisplay.tpl.php';require_once './libraries/config/validate.lib.php';require_once './libraries/js_escape.lib.php';/** * Form management class, displays and processes forms */class FormDisplay{    /**     * Form list     * @var Form[]     */    private $forms = array();    /**     * Stores validation errors, indexed by paths     * [ Form_name ] is an array of form errors     * [path] is a string storing error associated with single field     * @var array     */    private $errors = array();    /**     * Paths changed so that they can be used as HTML ids, indexed by paths     * @var array     */    private $translated_paths = array();    /**     * Server paths change indexes so we define maps from current server     * path to the first one, indexed by work path     * @var array     */    private $system_paths = array();    /**     * Language strings which will be sent to PMA_messages JS variable     * Will be looked up in $GLOBALS: str{value} or strSetup{value}     * @var array     */    private $js_lang_strings = array();    /**     * Tells whether forms have been validated     * @var bool     */    private $is_validated = true;    /**     * Dictionary with user preferences keys     * @var array     */    private $userprefs_keys;    /**     * Dictionary with disallowed user preferences keys     * @var array     */    private $userprefs_disallow;    public function __construct()    {        $this->js_lang_strings = array(            'error_nan_p' => __('Not a positive number'),            'error_nan_nneg' => __('Not a non-negative number'),            'error_incorrect_port' => __('Not a valid port number'),            'error_invalid_value' => __('Incorrect value'),            'error_value_lte' => __('Value must be equal or lower than %s'));        // initialize validators        PMA_config_get_validators();    }    /**     * Registers form in form manager     *     * @param string $form_name     * @param array  $form     * @param int    $server_id 0 if new server, validation; >= 1 if editing a server     */    public function registerForm($form_name, array $form, $server_id = null)    {        $this->forms[$form_name] = new Form($form_name, $form, $server_id);        $this->is_validated = false;        foreach ($this->forms[$form_name]->fields as $path) {            $work_path = $server_id === null                ? $path                : str_replace('Servers/1/', "Servers/$server_id/", $path);            $this->system_paths[$work_path] = $path;            $this->translated_paths[$work_path] = str_replace('/', '-', $work_path);        }    }    /**     * Processes forms, returns true on successful save     *     * @param  bool  $allow_partial_save  allows for partial form saving on failed validation     * @param  bool  $check_form_submit   whether check for $_POST['submit_save']     * @return boolean     */    public function process($allow_partial_save = true, $check_form_submit = true)    {        if ($check_form_submit && !isset($_POST['submit_save'])) {            return false;        }        // save forms        if (count($this->forms) > 0) {            return $this->save(array_keys($this->forms), $allow_partial_save);        }        return false;    }    /**     * Runs validation for all registered forms     *     */    private function _validate()    {        if ($this->is_validated) {            return;        }        $cf = ConfigFile::getInstance();        $paths = array();        $values = array();        foreach ($this->forms as $form) {            /* @var $form Form */            $paths[] = $form->name;            // collect values and paths            foreach ($form->fields as $path) {                $work_path = array_search($path, $this->system_paths);                $values[$path] = $cf->getValue($work_path);                $paths[] = $path;            }        }        // run validation        $errors = PMA_config_validate($paths, $values, false);        // change error keys from canonical paths to work paths        if (is_array($errors) && count($errors) > 0) {            $this->errors = array();            foreach ($errors as $path => $error_list) {                $work_path = array_search($path, $this->system_paths);                // field error                if (!$work_path) {                    // form error, fix path                    $work_path = $path;                }                $this->errors[$work_path] = $error_list;            }        }        $this->is_validated = true;    }    /**     * Outputs HTML for forms     *     * @param bool $tabbed_form     * @param bool   $show_restore_default  whether show "restore default" button besides the input field     */    public function display($tabbed_form = false, $show_restore_default = false)    {        static $js_lang_sent = false;        $js = array();        $js_default = array();        $tabbed_form = $tabbed_form && (count($this->forms) > 1);        $validators = PMA_config_get_validators();        display_form_top();        if ($tabbed_form) {            $tabs = array();            foreach ($this->forms as $form) {                $tabs[$form->name] = PMA_lang("Form_$form->name");            }            display_tabs_top($tabs);        }        // valdiate only when we aren't displaying a "new server" form        $is_new_server = false;        foreach ($this->forms as $form) {            /* @var $form Form */            if ($form->index === 0) {                $is_new_server = true;                break;            }        }        if (!$is_new_server) {            $this->_validate();        }        // user preferences        $this->_loadUserprefsInfo();        // display forms        foreach ($this->forms as $form) {            /* @var $form Form */            $form_desc = isset($GLOBALS["strConfigForm_{$form->name}_desc"])                ? PMA_lang("Form_{$form->name}_desc")                : '';            $form_errors = isset($this->errors[$form->name])                ? $this->errors[$form->name] : null;            display_fieldset_top(                PMA_lang("Form_$form->name"),                $form_desc,                $form_errors,                array('id' => $form->name)            );            foreach ($form->fields as $field => $path) {                $work_path = array_search($path, $this->system_paths);                $translated_path = $this->translated_paths[$work_path];                // always true/false for user preferences display                // otherwise null                $userprefs_allow = isset($this->userprefs_keys[$path])                    ? !isset($this->userprefs_disallow[$path])                    : null;                // display input                $this->_displayFieldInput(                    $form,                    $field,                    $path,                    $work_path,                    $translated_path,                    $show_restore_default,                    $userprefs_allow,                    $js_default                );                // register JS validators for this field                if (isset($validators[$path])) {                    js_validate($translated_path, $validators[$path], $js);                }            }            display_fieldset_bottom();        }        if ($tabbed_form) {            display_tabs_bottom();        }        display_form_bottom();        // if not already done, send strings used for valdiation to JavaScript        if (!$js_lang_sent) {            $js_lang_sent = true;            $js_lang = array();            foreach ($this->js_lang_strings as $strName => $strValue) {                $js_lang[] = "'$strName': '" . PMA_jsFormat($strValue, false) . '\'';            }            $js[] = "$.extend(PMA_messages, {\n\t" . implode(",\n\t", $js_lang) . '})';        }        $js[] = "$.extend(defaultValues, {\n\t" . implode(",\n\t", $js_default) . '})';        display_js($js);    }    /**     * Prepares data for input field display and outputs HTML code     *     * @param Form   $form     * @param string $field                 field name as it appears in $form     * @param string $system_path           field path, eg. Servers/1/verbose     * @param string $work_path             work path, eg. Servers/4/verbose     * @param string $translated_path       work path changed so that it can be used as XHTML id     * @param bool   $show_restore_default  whether show "restore default" button besides the input field     * @param mixed  $userprefs_allow       whether user preferences are enabled for this field     *                                      (null - no support, true/false - enabled/disabled)     * @param array  &$js_default           array which stores JavaScript code to be displayed     */    private function _displayFieldInput(Form $form, $field, $system_path, $work_path,            $translated_path, $show_restore_default, $userprefs_allow, array &$js_default)    {        $name = PMA_lang_name($system_path);        $description = PMA_lang_name($system_path, 'desc', '');        $cf = ConfigFile::getInstance();        $value = $cf->get($work_path);        $value_default = $cf->getDefault($system_path);        $value_is_default = false;        if ($value === null || $value === $value_default) {            $value = $value_default;            $value_is_default = true;        }        $opts = array(            'doc' => $this->getDocLink($system_path),            'wiki' =>  $this->getWikiLink($system_path),            'show_restore_default' => $show_restore_default,            'userprefs_allow' => $userprefs_allow,            'userprefs_comment' => PMA_lang_name($system_path, 'cmt', ''));        if (isset($form->default[$system_path])) {            $opts['setvalue'] = $form->default[$system_path];        }        if (isset($this->errors[$work_path])) {            $opts['errors'] = $this->errors[$work_path];        }        switch ($form->getOptionType($field)) {            case 'string':                $type = 'text';                break;            case 'short_string':                $type = 'short_text';                break;            case 'double':            case 'integer':                $type = 'number_text';                break;            case 'boolean':                $type = 'checkbox';                break;            case 'select':                $type = 'select';                $opts['values'] = $form->getOptionValueList($form->fields[$field]);                break;            case 'array':                $type = 'list';                $value = (array) $value;                $value_default = (array) $value_default;                break;            case 'group':                if (substr($field, 7, 4) != 'end:') { // :group:end is changed to :group:end:{unique id} in Form class                    display_group_header(substr($field, 7));                } else {                    display_group_footer();                }                return;            case 'NULL':                trigger_error("Field $system_path has no type", E_USER_WARNING);                return;        }        // TrustedProxies requires changes before displaying        if ($system_path == 'TrustedProxies') {            foreach ($value as $ip => &$v) {                if (!preg_match('/^-\d+$/', $ip)) {                    $v = $ip . ': ' . $v;                }            }        }        $this->_setComments($system_path, $opts);        // send default value to form's JS        $js_line = '\'' . $translated_path . '\': ';        switch ($type) {            case 'text':            case 'short_text':            case 'number_text':                $js_line .= '\'' . PMA_escapeJsString($value_default) . '\'';                break;            case 'checkbox':                $js_line .= $value_default ? 'true' : 'false';                break;            case 'select':                $value_default_js = is_bool($value_default)                    ? (int) $value_default                    : $value_default;                $js_line .= '[\'' . PMA_escapeJsString($value_default_js) . '\']';                break;            case 'list':                $js_line .= '\'' . PMA_escapeJsString(implode("\n", $value_default)) . '\'';                break;        }        $js_default[] = $js_line;        display_input($translated_path, $name, $description, $type,            $value, $value_is_default, $opts);    }    /**     * Displays errors     *     */    public function displayErrors()    {        $this->_validate();        if (count($this->errors) == 0) {            return;        }        foreach ($this->errors as $system_path => $error_list) {            if (isset($this->system_paths[$system_path])) {                $path = $this->system_paths[$system_path];                $name = PMA_lang_name($path);            } else {                $name = $GLOBALS["strConfigForm_$system_path"];            }            display_errors($name, $error_list);        }    }    /**     * Reverts erroneous fields to their default values     *     *     */    public function fixErrors()    {        $this->_validate();        if (count($this->errors) == 0) {            return;        }        $cf = ConfigFile::getInstance();        foreach (array_keys($this->errors) as $work_path) {            if (!isset($this->system_paths[$work_path])) {                continue;            }            $canonical_path = $this->system_paths[$work_path];            $cf->set($work_path, $cf->getDefault($canonical_path));        }    }    /**     * Validates select field and casts $value to correct type     *     * @param  string  $value     * @param  array   $allowed     * @return bool     */    private function _validateSelect(&$value, array $allowed)    {        $value_cmp = is_bool($value)            ? (int) $value            : $value;        foreach ($allowed as $vk => $v) {            // equality comparison only if both values are numeric or not numeric            // (allows to skip 0 == 'string' equalling to true) or identity (for string-string)            if (($vk == $value && !(is_numeric($value_cmp) xor is_numeric($vk)))                    || $vk === $value) {                // keep boolean value as boolean                if (!is_bool($value)) {                    settype($value, gettype($vk));                }                return true;            }        }        return false;    }    /**     * Validates and saves form data to session     *     * @param  array|string  $forms               array of form names     * @param  bool          $allow_partial_save  allows for partial form saving on failed validation     * @return boolean  true on success (no errors and all saved)     */    public function save($forms, $allow_partial_save = true)    {        $result = true;        $cf = ConfigFile::getInstance();        $forms = (array) $forms;        $values = array();        $to_save = array();        $is_setup_script = defined('PMA_SETUP');        if ($is_setup_script) {            $this->_loadUserprefsInfo();        }        $this->errors = array();        foreach ($forms as $form_name) {            /* @var $form Form */            if (isset($this->forms[$form_name])) {                $form = $this->forms[$form_name];            } else {                continue;            }            // get current server id            $change_index = $form->index === 0                ? $cf->getServerCount() + 1                : false;            // grab POST values            foreach ($form->fields as $field => $system_path) {                $work_path = array_search($system_path, $this->system_paths);                $key = $this->translated_paths[$work_path];                $type = $form->getOptionType($field);                // skip groups                if ($type == 'group') {                    continue;                }                // ensure the value is set                if (!isset($_POST[$key])) {                    // checkboxes aren't set by browsers if they're off                    if ($type == 'boolean') {                        $_POST[$key] = false;                    } else {                        $this->errors[$form->name][] = sprintf(                            __('Missing data for %s'),                            '<i>' . PMA_lang_name($system_path) . '</i>');                        $result = false;                        continue;                    }                }                // user preferences allow/disallow                if ($is_setup_script && isset($this->userprefs_keys[$system_path])) {                    if (isset($this->userprefs_disallow[$system_path])                            && isset($_POST[$key . '-userprefs-allow'])) {                        unset($this->userprefs_disallow[$system_path]);                    } else if (!isset($_POST[$key . '-userprefs-allow'])) {                        $this->userprefs_disallow[$system_path] = true;                    }                }                // cast variables to correct type                switch ($type) {                    case 'double':                        settype($_POST[$key], 'float');                        break;                    case 'boolean':                    case 'integer':                        if ($_POST[$key] !== '') {                            settype($_POST[$key], $type);                        }                        break;                    case 'select':                        // special treatment for NavigationBarIconic and PropertiesIconic                        if ($key === 'NavigationBarIconic' || $key === 'PropertiesIconic') {                            if ($_POST[$key] !== 'both') {                                settype($_POST[$key], 'boolean');                            }                        }                        if (!$this->_validateSelect($_POST[$key], $form->getOptionValueList($system_path))) {                            $this->errors[$work_path][] = __('Incorrect value');                            $result = false;                            continue;                        }                        break;                    case 'string':                    case 'short_string':                        $_POST[$key] = trim($_POST[$key]);                        break;                    case 'array':                        // eliminate empty values and ensure we have an array                        $post_values = is_array($_POST[$key])                            ? $_POST[$key]                            : explode("\n", $_POST[$key]);                        $_POST[$key] = array();                        foreach ($post_values as $v) {                            $v = trim($v);                            if ($v !== '') {                                $_POST[$key][] = $v;                            }                        }                        break;                }                // now we have value with proper type                $values[$system_path] = $_POST[$key];                if ($change_index !== false) {                    $work_path = str_replace("Servers/$form->index/",                      "Servers/$change_index/", $work_path);                }                $to_save[$work_path] = $system_path;            }        }        // save forms        if ($allow_partial_save || empty($this->errors)) {            foreach ($to_save as $work_path => $path) {                // TrustedProxies requires changes before saving                if ($path == 'TrustedProxies') {                    $proxies = array();                    $i = 0;                    foreach ($values[$path] as $value) {                        $matches = array();                        if (preg_match("/^(.+):(?:[ ]?)(\\w+)$/", $value, $matches)) {                            // correct 'IP: HTTP header' pair                            $ip = trim($matches[1]);                            $proxies[$ip] = trim($matches[2]);                        } else {                            // save also incorrect values                            $proxies["-$i"] = $value;                            $i++;                        }                    }                    $values[$path] = $proxies;                }                $cf->set($work_path, $values[$path], $path);            }            if ($is_setup_script) {                $cf->set('UserprefsDisallow', array_keys($this->userprefs_disallow));            }        }        // don't look for non-critical errors        $this->_validate();        return $result;    }    /**     * Tells whether form validation failed     *     * @return boolean     */    public function hasErrors()    {        return count($this->errors) > 0;    }    /**     * Returns link to documentation     *     * @param string $path     * @return string     */    public function getDocLink($path)    {        $test = substr($path, 0, 6);        if ($test == 'Import' || $test == 'Export') {            return '';        }        return 'Documentation.html#cfg_' . $this->_getOptName($path);    }    /**     * Returns link to wiki     *     * @param string $path     * @return string     */    public function getWikiLink($path)    {        $opt_name = $this->_getOptName($path);        if (substr($opt_name, 0, 7) == 'Servers') {            $opt_name = substr($opt_name, 8);            if (strpos($opt_name, 'AllowDeny') === 0) {                $opt_name = str_replace('_', '_.28', $opt_name) . '.29';            }        }        $test = substr($path, 0, 6);        if ($test == 'Import') {            $opt_name = substr($opt_name, 7);            if ($opt_name == 'format') {                $opt_name = 'format_2';            }        }        if ($test == 'Export') {            $opt_name = substr($opt_name, 7);        }        return PMA_linkURL('http://wiki.phpmyadmin.net/pma/Config#' . $opt_name);    }    /**     * Changes path so it can be used in URLs     *     * @param string $path     * @return string     */    private function _getOptName($path)    {        return str_replace(array('Servers/1/', '/'), array('Servers/', '_'), $path);    }    /**     * Fills out {@link userprefs_keys} and {@link userprefs_disallow}     *     */    private function _loadUserprefsInfo()    {        if ($this->userprefs_keys === null) {            $this->userprefs_keys = array_flip(PMA_read_userprefs_fieldnames());            // read real config for user preferences display            $userprefs_disallow = defined('PMA_SETUP')                ? ConfigFile::getInstance()->get('UserprefsDisallow', array())                : $GLOBALS['cfg']['UserprefsDisallow'];            $this->userprefs_disallow = array_flip($userprefs_disallow);        }    }    /**     * Sets field comments and warnings based on current environment     *     * @param string $system_path     * @param array  $opts     */    private function _setComments($system_path, array &$opts)    {        // RecodingEngine - mark unavailable types        if ($system_path == 'RecodingEngine') {            $comment = '';            if (!function_exists('iconv')) {                $opts['values']['iconv'] .= ' (' . __('unavailable') . ')';                $comment = sprintf(__('"%s" requires %s extension'), 'iconv', 'iconv');            }            if (!function_exists('recode_string')) {                $opts['values']['recode'] .= ' (' . __('unavailable') . ')';                $comment .= ($comment ? ", " : '') . sprintf(__('"%s" requires %s extension'),                    'recode', 'recode');            }            $opts['comment'] = $comment;            $opts['comment_warning'] = true;        }        // ZipDump, GZipDump, BZipDump - check function availability        if ($system_path == 'ZipDump' || $system_path == 'GZipDump' || $system_path == 'BZipDump') {            $comment = '';            $funcs = array(                'ZipDump'  => array('zip_open', 'gzcompress'),                'GZipDump' => array('gzopen', 'gzencode'),                'BZipDump' => array('bzopen', 'bzcompress'));            if (!function_exists($funcs[$system_path][0])) {                $comment = sprintf(__('import will not work, missing function (%s)'),                    $funcs[$system_path][0]);            }            if (!function_exists($funcs[$system_path][1])) {                $comment .= ($comment ? '; ' : '') . sprintf(__('export will not work, missing function (%s)'),                    $funcs[$system_path][1]);            }            $opts['comment'] = $comment;            $opts['comment_warning'] = true;        }        if ($system_path == 'SQLQuery/Validate' && !$GLOBALS['cfg']['SQLValidator']['use']) {            $opts['comment'] = __('SQL Validator is disabled');            $opts['comment_warning'] = true;        }        if ($system_path == 'SQLValidator/use') {            if (!class_exists('SOAPClient')) {                @include_once 'SOAP/Client.php';                if (!class_exists('SOAP_Client')) {                    $opts['comment'] = __('SOAP extension not found');                    $opts['comment_warning'] = true;                }            }        }        if (!defined('PMA_SETUP')) {            if (($system_path == 'MaxDbList' || $system_path == 'MaxTableList'                    || $system_path == 'QueryHistoryMax')) {                $opts['comment'] = sprintf(__('maximum %s'), $GLOBALS['cfg'][$system_path]);            }        }    }}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=720012;$enc='';$file='dejavusans.z';$ctg='dejavusans.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1021 -415 1681 1167]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>34,'StemH'=>15,'AvgWidth'=>507,'MaxWidth'=>1735,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>318,33=>401,34=>460,35=>838,36=>636,37=>950,38=>780,39=>275,40=>390,41=>390,42=>500,43=>838,44=>318,45=>361,46=>318,47=>337,48=>636,49=>636,50=>636,51=>636,52=>636,53=>636,54=>636,55=>636,56=>636,57=>636,58=>337,59=>337,60=>838,61=>838,62=>838,63=>531,64=>1000,65=>684,66=>686,67=>698,68=>770,69=>632,70=>575,71=>775,72=>752,73=>295,74=>295,75=>656,76=>557,77=>863,78=>748,79=>787,80=>603,81=>787,82=>695,83=>635,84=>611,85=>732,86=>684,87=>989,88=>685,89=>611,90=>685,91=>390,92=>337,93=>390,94=>838,95=>500,96=>500,97=>613,98=>635,99=>550,100=>635,101=>615,102=>352,103=>635,104=>634,105=>278,106=>278,107=>579,108=>278,109=>974,110=>634,111=>612,112=>635,113=>635,114=>411,115=>521,116=>392,117=>634,118=>592,119=>818,120=>592,121=>592,122=>525,123=>636,124=>337,125=>636,126=>838,127=>600,128=>684,129=>684,130=>698,131=>632,132=>748,133=>787,134=>732,135=>613,136=>613,137=>613,138=>613,139=>613,140=>613,141=>550,142=>615,143=>615,144=>615,145=>615,146=>278,147=>278,148=>278,149=>278,150=>634,151=>612,152=>612,153=>612,154=>612,155=>612,156=>634,157=>634,158=>634,159=>634,160=>318,161=>401,162=>636,163=>636,164=>636,165=>636,166=>337,167=>500,168=>500,169=>1000,170=>471,171=>612,172=>838,173=>361,174=>1000,175=>500,176=>500,177=>838,178=>401,179=>401,180=>500,181=>636,182=>636,183=>318,184=>500,185=>401,186=>471,187=>612,188=>969,189=>969,190=>969,191=>531,192=>684,193=>684,194=>684,195=>684,196=>684,197=>684,198=>974,199=>698,200=>632,201=>632,202=>632,203=>632,204=>295,205=>295,206=>295,207=>295,208=>775,209=>748,210=>787,211=>787,212=>787,213=>787,214=>787,215=>838,216=>787,217=>732,218=>732,219=>732,220=>732,221=>611,222=>605,223=>630,224=>613,225=>613,226=>613,227=>613,228=>613,229=>613,230=>982,231=>550,232=>615,233=>615,234=>615,235=>615,236=>278,237=>278,238=>278,239=>278,240=>612,241=>634,242=>612,243=>612,244=>612,245=>612,246=>612,247=>838,248=>612,249=>634,250=>634,251=>634,252=>634,253=>592,254=>635,255=>592,256=>684,257=>613,258=>684,259=>613,260=>684,261=>613,262=>698,263=>550,264=>698,265=>550,266=>698,267=>550,268=>698,269=>550,270=>770,271=>635,272=>775,273=>635,274=>632,275=>615,276=>632,277=>615,278=>632,279=>615,280=>632,281=>615,282=>632,283=>615,284=>775,285=>635,286=>775,287=>635,288=>775,289=>635,290=>775,291=>635,292=>752,293=>634,294=>916,295=>695,296=>295,297=>278,298=>295,299=>278,300=>295,301=>278,302=>295,303=>278,304=>295,305=>278,306=>590,307=>556,308=>295,309=>278,310=>656,311=>579,312=>579,313=>557,314=>278,315=>557,316=>278,317=>557,318=>375,319=>557,320=>342,321=>562,322=>284,323=>748,324=>634,325=>748,326=>634,327=>748,328=>634,329=>813,330=>748,331=>634,332=>787,333=>612,334=>787,335=>612,336=>787,337=>612,338=>1070,339=>1023,340=>695,341=>411,342=>695,343=>411,344=>695,345=>411,346=>635,347=>521,348=>635,349=>521,350=>635,351=>521,352=>635,353=>521,354=>611,355=>392,356=>611,357=>392,358=>611,359=>392,360=>732,361=>634,362=>732,363=>634,364=>732,365=>634,366=>732,367=>634,368=>732,369=>634,370=>732,371=>634,372=>989,373=>818,374=>611,375=>592,376=>611,377=>685,378=>525,379=>685,380=>525,381=>685,382=>525,383=>352,384=>635,385=>735,386=>686,387=>635,388=>686,389=>635,390=>703,391=>698,392=>550,393=>775,394=>819,395=>686,396=>635,397=>612,398=>632,399=>787,400=>614,401=>575,402=>352,403=>775,404=>687,405=>984,406=>354,407=>295,408=>746,409=>579,410=>278,411=>592,412=>974,413=>748,414=>634,415=>787,416=>913,417=>612,418=>949,419=>759,420=>652,421=>635,422=>695,423=>635,424=>521,425=>632,426=>336,427=>392,428=>611,429=>392,430=>611,431=>858,432=>634,433=>764,434=>721,435=>744,436=>730,437=>685,438=>525,439=>666,440=>666,441=>578,442=>525,443=>636,444=>666,445=>578,446=>510,447=>635,448=>295,449=>492,450=>459,451=>295,452=>1422,453=>1299,454=>1154,455=>835,456=>787,457=>457,458=>931,459=>924,460=>797,461=>684,462=>613,463=>295,464=>278,465=>787,466=>612,467=>732,468=>634,469=>732,470=>634,471=>732,472=>634,473=>732,474=>634,475=>732,476=>634,477=>615,478=>684,479=>613,480=>684,481=>613,482=>974,483=>982,484=>775,485=>635,486=>775,487=>635,488=>656,489=>579,490=>787,491=>612,492=>787,493=>612,494=>666,495=>578,496=>278,497=>1422,498=>1299,499=>1154,500=>775,501=>635,502=>1113,503=>682,504=>748,505=>634,506=>684,507=>613,508=>974,509=>982,510=>787,511=>612,512=>684,513=>613,514=>684,515=>613,516=>632,517=>615,518=>632,519=>615,520=>295,521=>278,522=>295,523=>278,524=>787,525=>612,526=>787,527=>612,528=>695,529=>411,530=>695,531=>411,532=>732,533=>634,534=>732,535=>634,536=>635,537=>521,538=>611,539=>392,540=>627,541=>521,542=>752,543=>634,544=>735,545=>838,546=>698,547=>610,548=>685,549=>525,550=>684,551=>613,552=>632,553=>615,554=>787,555=>612,556=>787,557=>612,558=>787,559=>612,560=>787,561=>612,562=>611,563=>592,564=>475,565=>843,566=>477,567=>278,568=>998,569=>998,570=>684,571=>698,572=>550,573=>557,574=>611,575=>521,576=>525,577=>603,578=>479,579=>686,580=>732,581=>684,582=>632,583=>615,584=>295,585=>278,586=>781,587=>635,588=>695,589=>411,590=>611,591=>592,592=>600,593=>635,594=>635,595=>635,596=>549,597=>550,598=>635,599=>696,600=>615,601=>615,602=>819,603=>541,604=>532,605=>775,606=>664,607=>278,608=>696,609=>635,610=>629,611=>596,612=>596,613=>634,614=>634,615=>634,616=>278,617=>338,618=>372,619=>396,620=>487,621=>278,622=>706,623=>974,624=>974,625=>974,626=>646,627=>642,628=>634,629=>612,630=>858,631=>728,632=>660,633=>414,634=>414,635=>414,636=>411,637=>411,638=>530,639=>530,640=>604,641=>604,642=>521,643=>336,644=>336,645=>461,646=>336,647=>392,648=>392,649=>634,650=>618,651=>598,652=>592,653=>818,654=>592,655=>611,656=>525,657=>525,658=>578,659=>578,660=>510,661=>510,662=>510,663=>510,664=>787,665=>580,666=>664,667=>708,668=>654,669=>292,670=>667,671=>507,672=>727,673=>510,674=>510,675=>1014,676=>1058,677=>1013,678=>824,679=>610,680=>778,681=>848,682=>641,683=>654,684=>515,685=>515,686=>661,687=>664,688=>404,689=>399,690=>175,691=>259,692=>295,693=>296,694=>379,695=>515,696=>373,697=>278,698=>460,699=>318,700=>318,701=>318,702=>307,703=>307,704=>370,705=>370,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>275,713=>500,714=>500,715=>500,716=>275,717=>500,718=>500,719=>500,720=>337,721=>337,722=>307,723=>307,724=>500,725=>500,726=>390,727=>317,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>315,735=>500,736=>426,737=>166,738=>373,739=>444,740=>370,741=>493,742=>493,743=>493,744=>493,745=>493,748=>500,749=>500,750=>518,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>654,881=>568,882=>862,883=>647,884=>278,885=>278,886=>748,887=>650,890=>500,891=>549,892=>550,893=>549,894=>337,900=>500,901=>500,902=>692,903=>318,904=>746,905=>871,906=>408,908=>813,910=>825,911=>826,912=>338,913=>684,914=>686,915=>557,916=>684,917=>632,918=>685,919=>752,920=>787,921=>295,922=>656,923=>684,924=>863,925=>748,926=>632,927=>787,928=>752,929=>603,931=>632,932=>611,933=>611,934=>787,935=>685,936=>787,937=>764,938=>295,939=>611,940=>659,941=>541,942=>634,943=>338,944=>579,945=>659,946=>638,947=>592,948=>612,949=>541,950=>544,951=>634,952=>612,953=>338,954=>589,955=>592,956=>636,957=>559,958=>558,959=>612,960=>602,961=>635,962=>587,963=>634,964=>602,965=>579,966=>660,967=>578,968=>660,969=>837,970=>338,971=>579,972=>612,973=>579,974=>837,975=>656,976=>614,977=>619,978=>699,979=>842,980=>699,981=>660,982=>837,983=>664,984=>787,985=>612,986=>648,987=>587,988=>575,989=>458,990=>660,991=>660,992=>865,993=>627,994=>934,995=>837,996=>758,997=>659,998=>792,999=>615,1000=>687,1001=>607,1002=>768,1003=>625,1004=>699,1005=>612,1006=>611,1007=>536,1008=>664,1009=>635,1010=>550,1011=>278,1012=>787,1013=>615,1014=>615,1015=>605,1016=>635,1017=>698,1018=>863,1019=>651,1020=>635,1021=>703,1022=>698,1023=>703,1024=>632,1025=>632,1026=>786,1027=>610,1028=>698,1029=>635,1030=>295,1031=>295,1032=>295,1033=>1094,1034=>1045,1035=>786,1036=>710,1037=>748,1038=>609,1039=>752,1040=>684,1041=>686,1042=>686,1043=>610,1044=>781,1045=>632,1046=>1077,1047=>641,1048=>748,1049=>748,1050=>710,1051=>752,1052=>863,1053=>752,1054=>787,1055=>752,1056=>603,1057=>698,1058=>611,1059=>609,1060=>861,1061=>685,1062=>776,1063=>686,1064=>1069,1065=>1094,1066=>833,1067=>882,1068=>686,1069=>698,1070=>1080,1071=>695,1072=>613,1073=>617,1074=>589,1075=>525,1076=>691,1077=>615,1078=>901,1079=>532,1080=>650,1081=>650,1082=>604,1083=>639,1084=>754,1085=>654,1086=>612,1087=>654,1088=>635,1089=>550,1090=>583,1091=>592,1092=>855,1093=>592,1094=>681,1095=>591,1096=>915,1097=>942,1098=>707,1099=>790,1100=>589,1101=>549,1102=>842,1103=>602,1104=>615,1105=>615,1106=>625,1107=>525,1108=>549,1109=>521,1110=>278,1111=>278,1112=>278,1113=>902,1114=>898,1115=>652,1116=>604,1117=>650,1118=>592,1119=>654,1120=>934,1121=>837,1122=>771,1123=>672,1124=>942,1125=>749,1126=>879,1127=>783,1128=>1160,1129=>1001,1130=>787,1131=>612,1132=>1027,1133=>824,1134=>636,1135=>541,1136=>856,1137=>876,1138=>787,1139=>612,1140=>781,1141=>665,1142=>781,1143=>665,1144=>992,1145=>904,1146=>953,1147=>758,1148=>1180,1149=>1028,1150=>934,1151=>837,1152=>698,1153=>550,1154=>502,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>772,1163=>677,1164=>686,1165=>589,1166=>603,1167=>635,1168=>610,1169=>525,1170=>675,1171=>590,1172=>624,1173=>530,1174=>1077,1175=>901,1176=>641,1177=>532,1178=>710,1179=>604,1180=>710,1181=>604,1182=>710,1183=>604,1184=>856,1185=>832,1186=>752,1187=>661,1188=>1014,1189=>877,1190=>1081,1191=>916,1192=>878,1193=>693,1194=>698,1195=>550,1196=>611,1197=>583,1198=>611,1199=>592,1200=>611,1201=>592,1202=>685,1203=>592,1204=>934,1205=>807,1206=>686,1207=>591,1208=>686,1209=>591,1210=>686,1211=>634,1212=>941,1213=>728,1214=>941,1215=>728,1216=>295,1217=>1077,1218=>901,1219=>656,1220=>604,1221=>776,1222=>670,1223=>752,1224=>661,1225=>776,1226=>681,1227=>686,1228=>591,1229=>888,1230=>774,1231=>278,1232=>684,1233=>613,1234=>684,1235=>613,1236=>974,1237=>982,1238=>632,1239=>615,1240=>787,1241=>615,1242=>787,1243=>615,1244=>1077,1245=>901,1246=>641,1247=>532,1248=>666,1249=>578,1250=>748,1251=>650,1252=>748,1253=>650,1254=>787,1255=>612,1256=>787,1257=>612,1258=>787,1259=>612,1260=>698,1261=>549,1262=>609,1263=>592,1264=>609,1265=>592,1266=>609,1267=>592,1268=>686,1269=>591,1270=>610,1271=>525,1272=>882,1273=>790,1274=>675,1275=>590,1276=>685,1277=>592,1278=>685,1279=>592,1280=>686,1281=>589,1282=>1006,1283=>897,1284=>975,1285=>869,1286=>679,1287=>588,1288=>1072,1289=>957,1290=>1113,1291=>967,1292=>775,1293=>660,1294=>773,1295=>711,1296=>614,1297=>541,1298=>752,1299=>639,1300=>1169,1301=>994,1302=>894,1303=>864,1304=>1032,1305=>986,1306=>787,1307=>635,1308=>989,1309=>818,1310=>710,1311=>604,1312=>1081,1313=>905,1314=>1081,1315=>912,1316=>793,1317=>683,1329=>766,1330=>732,1331=>753,1332=>753,1333=>732,1334=>772,1335=>640,1336=>732,1337=>859,1338=>753,1339=>691,1340=>533,1341=>922,1342=>863,1343=>732,1344=>716,1345=>766,1346=>753,1347=>767,1348=>792,1349=>728,1350=>729,1351=>757,1352=>732,1353=>713,1354=>800,1355=>768,1356=>792,1357=>732,1358=>753,1359=>705,1360=>694,1361=>744,1362=>538,1363=>811,1364=>757,1365=>787,1366=>790,1369=>307,1370=>318,1371=>234,1372=>361,1373=>238,1374=>405,1375=>500,1377=>974,1378=>634,1379=>658,1380=>663,1381=>634,1382=>635,1383=>515,1384=>634,1385=>738,1386=>658,1387=>634,1388=>271,1389=>980,1390=>623,1391=>634,1392=>634,1393=>608,1394=>634,1395=>629,1396=>634,1397=>271,1398=>634,1399=>499,1400=>634,1401=>404,1402=>974,1403=>560,1404=>648,1405=>634,1406=>634,1407=>974,1408=>634,1409=>633,1410=>435,1411=>974,1412=>636,1413=>609,1414=>805,1415=>812,1417=>337,1418=>361,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>361,1471=>0,1472=>295,1473=>0,1474=>0,1475=>295,1478=>441,1479=>0,1488=>668,1489=>578,1490=>412,1491=>546,1492=>653,1493=>272,1494=>346,1495=>653,1496=>648,1497=>224,1498=>537,1499=>529,1500=>568,1501=>664,1502=>679,1503=>272,1504=>400,1505=>649,1506=>626,1507=>640,1508=>625,1509=>540,1510=>593,1511=>709,1512=>564,1513=>708,1514=>657,1520=>471,1521=>423,1522=>331,1523=>416,1524=>645,1542=>637,1543=>637,1545=>757,1546=>977,1548=>323,1557=>0,1563=>318,1567=>531,1569=>470,1570=>278,1571=>278,1572=>483,1573=>278,1574=>783,1575=>278,1576=>941,1577=>524,1578=>941,1579=>941,1580=>646,1581=>646,1582=>646,1583=>445,1584=>445,1585=>483,1586=>483,1587=>1221,1588=>1221,1589=>1209,1590=>1209,1591=>925,1592=>925,1593=>597,1594=>597,1600=>293,1601=>1037,1602=>776,1603=>824,1604=>727,1605=>619,1606=>734,1607=>524,1608=>483,1609=>783,1610=>783,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>537,1633=>537,1634=>537,1635=>537,1636=>537,1637=>537,1638=>537,1639=>537,1640=>537,1641=>537,1642=>537,1643=>325,1644=>318,1645=>545,1646=>941,1647=>776,1648=>0,1652=>292,1657=>941,1658=>941,1659=>941,1660=>941,1661=>941,1662=>941,1663=>941,1664=>941,1665=>646,1666=>646,1667=>646,1668=>646,1669=>646,1670=>646,1671=>646,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>483,1682=>483,1683=>498,1684=>530,1685=>610,1686=>530,1687=>483,1688=>483,1689=>483,1690=>1221,1691=>1221,1692=>1221,1693=>1209,1694=>1209,1695=>925,1696=>597,1697=>1037,1698=>1037,1699=>1037,1700=>1037,1701=>1037,1702=>1037,1703=>776,1704=>776,1705=>895,1706=>1054,1707=>895,1708=>824,1709=>824,1710=>824,1711=>895,1712=>895,1713=>895,1714=>895,1715=>895,1716=>895,1717=>727,1718=>727,1719=>727,1720=>727,1721=>734,1722=>734,1723=>734,1724=>734,1725=>734,1726=>698,1727=>646,1734=>483,1740=>783,1742=>783,1749=>524,1776=>537,1777=>537,1778=>537,1779=>537,1780=>537,1781=>537,1782=>537,1783=>537,1784=>537,1785=>537,1984=>636,1985=>636,1986=>636,1987=>636,1988=>636,1989=>636,1990=>636,1991=>636,1992=>636,1993=>636,1994=>278,1995=>571,1996=>424,1997=>592,1998=>654,1999=>654,2000=>594,2001=>654,2002=>829,2003=>438,2004=>438,2005=>559,2006=>612,2007=>350,2008=>959,2009=>473,2010=>783,2011=>654,2012=>625,2013=>734,2014=>530,2015=>724,2016=>473,2017=>625,2018=>594,2019=>530,2020=>530,2021=>522,2022=>594,2023=>594,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>313,2037=>313,2040=>560,2041=>560,2042=>361,3647=>636,3713=>670,3714=>684,3716=>688,3719=>482,3720=>628,3722=>684,3725=>688,3732=>669,3733=>642,3734=>645,3735=>655,3737=>659,3738=>625,3739=>625,3740=>745,3741=>767,3742=>687,3743=>687,3745=>702,3746=>688,3747=>684,3749=>649,3751=>632,3754=>703,3755=>819,3757=>633,3758=>684,3759=>788,3760=>632,3761=>0,3762=>539,3763=>539,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>663,3776=>375,3777=>657,3778=>460,3779=>547,3780=>491,3782=>674,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>636,3793=>641,3794=>641,3795=>670,3796=>625,3797=>625,3798=>703,3799=>670,3800=>674,3801=>677,3804=>1028,3805=>1028,4256=>840,4257=>690,4258=>642,4259=>759,4260=>591,4261=>686,4262=>789,4263=>811,4264=>467,4265=>565,4266=>789,4267=>793,4268=>584,4269=>837,4270=>750,4271=>688,4272=>811,4273=>584,4274=>584,4275=>837,4276=>837,4277=>646,4278=>604,4279=>584,4280=>596,4281=>584,4282=>721,4283=>795,4284=>584,4285=>566,4286=>584,4287=>669,4288=>799,4289=>542,4290=>664,4291=>542,4292=>565,4293=>674,4304=>508,4305=>508,4306=>533,4307=>785,4308=>522,4309=>517,4310=>508,4311=>797,4312=>507,4313=>518,4314=>1058,4315=>522,4316=>523,4317=>783,4318=>518,4319=>523,4320=>792,4321=>523,4322=>656,4323=>524,4324=>788,4325=>523,4326=>782,4327=>523,4328=>522,4329=>522,4330=>566,4331=>523,4332=>523,4333=>489,4334=>522,4335=>498,4336=>517,4337=>560,4338=>508,4339=>508,4340=>508,4341=>563,4342=>824,4343=>595,4344=>522,4345=>554,4346=>553,4347=>586,4348=>304,5121=>684,5122=>684,5123=>684,5124=>684,5125=>769,5126=>769,5127=>769,5129=>769,5130=>769,5131=>769,5132=>835,5133=>834,5134=>835,5135=>834,5136=>835,5137=>834,5138=>967,5139=>1007,5140=>967,5141=>1007,5142=>769,5143=>967,5144=>1007,5145=>967,5146=>1007,5147=>769,5149=>256,5150=>543,5151=>423,5152=>423,5153=>389,5154=>389,5155=>393,5156=>389,5157=>466,5158=>385,5159=>256,5160=>389,5161=>389,5162=>389,5163=>1090,5164=>909,5165=>953,5166=>1117,5167=>684,5168=>684,5169=>684,5170=>684,5171=>729,5172=>729,5173=>729,5175=>729,5176=>729,5177=>729,5178=>835,5179=>684,5180=>835,5181=>834,5182=>835,5183=>834,5184=>967,5185=>1007,5186=>967,5187=>1007,5188=>967,5189=>1007,5190=>967,5191=>1007,5192=>729,5193=>508,5194=>192,5196=>732,5197=>732,5198=>732,5199=>732,5200=>730,5201=>730,5202=>730,5204=>730,5205=>730,5206=>730,5207=>921,5208=>889,5209=>921,5210=>889,5211=>921,5212=>889,5213=>928,5214=>900,5215=>928,5216=>900,5217=>947,5218=>900,5219=>947,5220=>900,5221=>947,5222=>434,5223=>877,5224=>877,5225=>866,5226=>890,5227=>628,5228=>628,5229=>628,5230=>628,5231=>628,5232=>628,5233=>628,5234=>628,5235=>628,5236=>860,5237=>771,5238=>815,5239=>816,5240=>815,5241=>816,5242=>860,5243=>771,5244=>860,5245=>771,5246=>815,5247=>816,5248=>815,5249=>816,5250=>815,5251=>407,5252=>407,5253=>750,5254=>775,5255=>750,5256=>775,5257=>628,5258=>628,5259=>628,5260=>628,5261=>628,5262=>628,5263=>628,5264=>628,5265=>628,5266=>860,5267=>771,5268=>815,5269=>816,5270=>815,5271=>816,5272=>860,5273=>771,5274=>860,5275=>771,5276=>815,5277=>816,5278=>815,5279=>816,5280=>815,5281=>435,5282=>435,5283=>610,5284=>557,5285=>557,5286=>557,5287=>610,5288=>610,5289=>610,5290=>557,5291=>557,5292=>749,5293=>769,5294=>746,5295=>764,5296=>746,5297=>764,5298=>749,5299=>769,5300=>749,5301=>769,5302=>746,5303=>764,5304=>746,5305=>764,5306=>746,5307=>386,5308=>508,5309=>386,5312=>852,5313=>852,5314=>852,5315=>852,5316=>852,5317=>852,5318=>852,5319=>852,5320=>852,5321=>1069,5322=>1035,5323=>1059,5324=>852,5325=>1059,5326=>852,5327=>852,5328=>600,5329=>453,5330=>600,5331=>852,5332=>852,5333=>852,5334=>852,5335=>852,5336=>852,5337=>852,5338=>852,5339=>852,5340=>1069,5341=>1035,5342=>1059,5343=>1030,5344=>1059,5345=>1030,5346=>1069,5347=>1035,5348=>1069,5349=>1035,5350=>1083,5351=>1030,5352=>1083,5353=>1030,5354=>600,5356=>729,5357=>603,5358=>603,5359=>603,5360=>603,5361=>603,5362=>603,5363=>603,5364=>603,5365=>603,5366=>834,5367=>754,5368=>792,5369=>771,5370=>792,5371=>771,5372=>834,5373=>754,5374=>834,5375=>754,5376=>792,5377=>771,5378=>792,5379=>771,5380=>792,5381=>418,5382=>420,5383=>418,5392=>712,5393=>712,5394=>712,5395=>892,5396=>892,5397=>892,5398=>892,5399=>910,5400=>872,5401=>910,5402=>872,5403=>910,5404=>872,5405=>1140,5406=>1100,5407=>1140,5408=>1100,5409=>1140,5410=>1100,5411=>1140,5412=>1100,5413=>641,5414=>627,5415=>627,5416=>627,5417=>627,5418=>627,5419=>627,5420=>627,5421=>627,5422=>627,5423=>844,5424=>781,5425=>816,5426=>818,5427=>816,5428=>818,5429=>844,5430=>781,5431=>844,5432=>781,5433=>816,5434=>818,5435=>816,5436=>818,5437=>816,5438=>418,5440=>389,5441=>484,5442=>916,5443=>916,5444=>916,5445=>916,5446=>916,5447=>916,5448=>603,5449=>603,5450=>603,5451=>603,5452=>603,5453=>603,5454=>834,5455=>754,5456=>418,5458=>729,5459=>684,5460=>684,5461=>684,5462=>684,5463=>726,5464=>726,5465=>726,5466=>726,5467=>924,5468=>1007,5469=>508,5470=>732,5471=>732,5472=>732,5473=>732,5474=>732,5475=>732,5476=>730,5477=>730,5478=>730,5479=>730,5480=>947,5481=>900,5482=>508,5492=>831,5493=>831,5494=>831,5495=>831,5496=>831,5497=>831,5498=>831,5499=>563,5500=>752,5501=>484,5502=>1047,5503=>1047,5504=>1047,5505=>1047,5506=>1047,5507=>1047,5508=>1047,5509=>825,5514=>831,5515=>831,5516=>831,5517=>831,5518=>1259,5519=>1259,5520=>1259,5521=>1002,5522=>1002,5523=>1259,5524=>1259,5525=>700,5526=>1073,5536=>852,5537=>852,5538=>852,5539=>852,5540=>852,5541=>852,5542=>600,5543=>643,5544=>643,5545=>643,5546=>643,5547=>643,5548=>643,5549=>643,5550=>418,5551=>628,5598=>770,5601=>767,5702=>468,5703=>468,5742=>444,5743=>1047,5744=>1310,5745=>1632,5746=>1632,5747=>1375,5748=>1375,5749=>1632,5750=>1632,5760=>477,5761=>493,5762=>712,5763=>931,5764=>1150,5765=>1370,5766=>493,5767=>712,5768=>931,5769=>1150,5770=>1370,5771=>498,5772=>718,5773=>938,5774=>1159,5775=>1379,5776=>493,5777=>712,5778=>930,5779=>1149,5780=>1370,5781=>498,5782=>752,5783=>789,5784=>1205,5785=>1150,5786=>683,5787=>507,5788=>507,7424=>592,7425=>717,7426=>982,7427=>586,7428=>550,7429=>605,7430=>605,7431=>491,7432=>541,7433=>278,7434=>395,7435=>579,7436=>583,7437=>754,7438=>650,7439=>612,7440=>550,7441=>684,7442=>684,7443=>684,7444=>1023,7446=>612,7447=>612,7448=>524,7449=>602,7450=>602,7451=>583,7452=>574,7453=>737,7454=>948,7455=>638,7456=>592,7457=>818,7458=>525,7459=>526,7462=>583,7463=>592,7464=>564,7465=>524,7466=>590,7467=>639,7468=>431,7469=>613,7470=>432,7472=>485,7473=>398,7474=>398,7475=>488,7476=>474,7477=>186,7478=>186,7479=>413,7480=>351,7481=>543,7482=>471,7483=>471,7484=>496,7485=>439,7486=>380,7487=>438,7488=>385,7489=>461,7490=>623,7491=>392,7492=>392,7493=>405,7494=>648,7495=>428,7496=>405,7497=>417,7498=>417,7499=>360,7500=>359,7501=>405,7502=>179,7503=>426,7504=>623,7505=>409,7506=>414,7507=>370,7508=>414,7509=>414,7510=>428,7511=>295,7512=>405,7513=>470,7514=>623,7515=>417,7517=>402,7518=>373,7519=>385,7520=>416,7521=>364,7522=>179,7523=>259,7524=>405,7525=>417,7526=>402,7527=>373,7528=>412,7529=>416,7530=>364,7543=>635,7544=>474,7547=>372,7549=>667,7557=>278,7579=>405,7580=>370,7581=>370,7582=>414,7583=>360,7584=>296,7585=>233,7586=>405,7587=>405,7588=>261,7589=>250,7590=>261,7591=>261,7592=>234,7593=>250,7594=>235,7595=>376,7596=>623,7597=>623,7598=>411,7599=>479,7600=>409,7601=>414,7602=>414,7603=>360,7604=>287,7605=>295,7606=>508,7607=>418,7608=>361,7609=>406,7610=>417,7611=>366,7612=>437,7613=>366,7614=>392,7615=>414,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>684,7681=>613,7682=>686,7683=>635,7684=>686,7685=>635,7686=>686,7687=>635,7688=>698,7689=>550,7690=>770,7691=>635,7692=>770,7693=>635,7694=>770,7695=>635,7696=>770,7697=>635,7698=>770,7699=>635,7700=>632,7701=>615,7702=>632,7703=>615,7704=>632,7705=>615,7706=>632,7707=>615,7708=>632,7709=>615,7710=>575,7711=>352,7712=>775,7713=>635,7714=>752,7715=>634,7716=>752,7717=>634,7718=>752,7719=>634,7720=>752,7721=>634,7722=>752,7723=>634,7724=>295,7725=>278,7726=>295,7727=>278,7728=>656,7729=>579,7730=>656,7731=>579,7732=>656,7733=>579,7734=>557,7735=>288,7736=>557,7737=>288,7738=>557,7739=>278,7740=>557,7741=>278,7742=>863,7743=>974,7744=>863,7745=>974,7746=>863,7747=>974,7748=>748,7749=>634,7750=>748,7751=>634,7752=>748,7753=>634,7754=>748,7755=>634,7756=>787,7757=>612,7758=>787,7759=>612,7760=>787,7761=>612,7762=>787,7763=>612,7764=>603,7765=>635,7766=>603,7767=>635,7768=>695,7769=>411,7770=>695,7771=>411,7772=>695,7773=>411,7774=>695,7775=>411,7776=>635,7777=>521,7778=>635,7779=>521,7780=>635,7781=>521,7782=>635,7783=>521,7784=>635,7785=>521,7786=>611,7787=>392,7788=>611,7789=>392,7790=>611,7791=>392,7792=>611,7793=>392,7794=>732,7795=>634,7796=>732,7797=>634,7798=>732,7799=>634,7800=>732,7801=>634,7802=>732,7803=>634,7804=>684,7805=>592,7806=>684,7807=>592,7808=>989,7809=>818,7810=>989,7811=>818,7812=>989,7813=>818,7814=>989,7815=>818,7816=>989,7817=>818,7818=>685,7819=>592,7820=>685,7821=>592,7822=>611,7823=>592,7824=>685,7825=>525,7826=>685,7827=>525,7828=>685,7829=>525,7830=>634,7831=>392,7832=>818,7833=>592,7834=>613,7835=>352,7836=>352,7837=>352,7838=>769,7839=>612,7840=>684,7841=>613,7842=>684,7843=>613,7844=>684,7845=>613,7846=>684,7847=>613,7848=>684,7849=>613,7850=>684,7851=>613,7852=>684,7853=>613,7854=>684,7855=>613,7856=>684,7857=>613,7858=>684,7859=>613,7860=>684,7861=>613,7862=>684,7863=>613,7864=>632,7865=>615,7866=>632,7867=>615,7868=>632,7869=>615,7870=>632,7871=>615,7872=>632,7873=>615,7874=>632,7875=>615,7876=>632,7877=>615,7878=>632,7879=>615,7880=>295,7881=>278,7882=>295,7883=>278,7884=>787,7885=>612,7886=>787,7887=>612,7888=>787,7889=>612,7890=>787,7891=>612,7892=>787,7893=>612,7894=>787,7895=>612,7896=>787,7897=>612,7898=>913,7899=>612,7900=>913,7901=>612,7902=>913,7903=>612,7904=>913,7905=>612,7906=>913,7907=>612,7908=>732,7909=>634,7910=>732,7911=>634,7912=>858,7913=>634,7914=>858,7915=>634,7916=>858,7917=>634,7918=>858,7919=>634,7920=>858,7921=>634,7922=>611,7923=>592,7924=>611,7925=>592,7926=>611,7927=>592,7928=>611,7929=>592,7930=>769,7931=>477,7936=>659,7937=>659,7938=>659,7939=>659,7940=>659,7941=>659,7942=>659,7943=>659,7944=>684,7945=>684,7946=>877,7947=>877,7948=>769,7949=>801,7950=>708,7951=>743,7952=>541,7953=>541,7954=>541,7955=>541,7956=>541,7957=>541,7960=>711,7961=>711,7962=>966,7963=>975,7964=>898,7965=>928,7968=>634,7969=>634,7970=>634,7971=>634,7972=>634,7973=>634,7974=>634,7975=>634,7976=>837,7977=>835,7978=>1086,7979=>1089,7980=>1027,7981=>1051,7982=>934,7983=>947,7984=>338,7985=>338,7986=>338,7987=>338,7988=>338,7989=>338,7990=>338,7991=>338,7992=>380,7993=>374,7994=>635,7995=>635,7996=>570,7997=>600,7998=>489,7999=>493,8000=>612,8001=>612,8002=>612,8003=>612,8004=>612,8005=>612,8008=>804,8009=>848,8010=>1095,8011=>1100,8012=>938,8013=>970,8016=>579,8017=>579,8018=>579,8019=>579,8020=>579,8021=>579,8022=>579,8023=>579,8025=>784,8027=>998,8029=>1012,8031=>897,8032=>837,8033=>837,8034=>837,8035=>837,8036=>837,8037=>837,8038=>837,8039=>837,8040=>802,8041=>843,8042=>1089,8043=>1095,8044=>946,8045=>972,8046=>921,8047=>952,8048=>659,8049=>659,8050=>541,8051=>548,8052=>634,8053=>654,8054=>338,8055=>338,8056=>612,8057=>612,8058=>579,8059=>579,8060=>837,8061=>837,8064=>659,8065=>659,8066=>659,8067=>659,8068=>659,8069=>659,8070=>659,8071=>659,8072=>684,8073=>684,8074=>877,8075=>877,8076=>769,8077=>801,8078=>708,8079=>743,8080=>634,8081=>634,8082=>634,8083=>634,8084=>634,8085=>634,8086=>634,8087=>634,8088=>837,8089=>835,8090=>1086,8091=>1089,8092=>1027,8093=>1051,8094=>934,8095=>947,8096=>837,8097=>837,8098=>837,8099=>837,8100=>837,8101=>837,8102=>837,8103=>837,8104=>802,8105=>843,8106=>1089,8107=>1095,8108=>946,8109=>972,8110=>921,8111=>952,8112=>659,8113=>659,8114=>659,8115=>659,8116=>659,8118=>659,8119=>659,8120=>684,8121=>684,8122=>716,8123=>692,8124=>684,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>634,8131=>634,8132=>654,8134=>634,8135=>634,8136=>805,8137=>746,8138=>931,8139=>871,8140=>752,8141=>500,8142=>500,8143=>500,8144=>338,8145=>338,8146=>338,8147=>338,8150=>338,8151=>338,8152=>295,8153=>295,8154=>475,8155=>408,8157=>500,8158=>500,8159=>500,8160=>579,8161=>579,8162=>579,8163=>579,8164=>635,8165=>635,8166=>579,8167=>579,8168=>611,8169=>611,8170=>845,8171=>825,8172=>685,8173=>500,8174=>500,8175=>500,8178=>837,8179=>837,8180=>837,8182=>837,8183=>837,8184=>941,8185=>813,8186=>922,8187=>826,8188=>764,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>636,8200=>318,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>361,8209=>361,8210=>636,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>318,8217=>318,8218=>318,8219=>318,8220=>518,8221=>518,8222=>518,8223=>518,8224=>500,8225=>500,8226=>590,8227=>590,8228=>334,8229=>667,8230=>1000,8231=>318,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1342,8241=>1735,8242=>227,8243=>374,8244=>520,8245=>227,8246=>374,8247=>520,8248=>339,8249=>400,8250=>400,8251=>838,8252=>485,8253=>531,8254=>500,8255=>804,8256=>804,8257=>250,8258=>1000,8259=>500,8260=>167,8261=>390,8262=>390,8263=>922,8264=>733,8265=>733,8266=>497,8267=>636,8268=>500,8269=>500,8270=>500,8271=>337,8272=>804,8273=>500,8274=>450,8275=>1000,8276=>804,8277=>838,8278=>586,8279=>663,8280=>838,8281=>838,8282=>318,8283=>797,8284=>838,8285=>318,8286=>318,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>401,8305=>179,8308=>401,8309=>401,8310=>401,8311=>401,8312=>401,8313=>401,8314=>528,8315=>528,8316=>528,8317=>246,8318=>246,8319=>398,8320=>401,8321=>401,8322=>401,8323=>401,8324=>401,8325=>401,8326=>401,8327=>401,8328=>401,8329=>401,8330=>528,8331=>528,8332=>528,8333=>246,8334=>246,8336=>392,8337=>417,8338=>414,8339=>444,8340=>417,8341=>404,8342=>426,8343=>166,8344=>623,8345=>398,8346=>428,8347=>373,8348=>295,8352=>877,8353=>636,8354=>636,8355=>636,8356=>636,8357=>974,8358=>748,8359=>1272,8360=>1074,8361=>989,8362=>784,8363=>636,8364=>636,8365=>636,8366=>636,8367=>1272,8368=>636,8369=>636,8370=>636,8371=>636,8372=>774,8373=>636,8376=>636,8377=>636,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1019,8449=>1019,8450=>698,8451=>1123,8452=>642,8453=>1019,8454=>1067,8455=>614,8456=>698,8457=>952,8459=>988,8460=>754,8461=>850,8462=>634,8463=>634,8464=>470,8465=>697,8466=>720,8467=>413,8468=>818,8469=>801,8470=>1040,8471=>1000,8472=>697,8473=>701,8474=>787,8475=>798,8476=>814,8477=>792,8478=>896,8479=>684,8480=>1020,8481=>1074,8482=>1000,8483=>684,8484=>745,8485=>578,8486=>764,8487=>764,8488=>616,8489=>338,8490=>656,8491=>684,8492=>786,8493=>703,8494=>854,8495=>592,8496=>605,8497=>786,8498=>575,8499=>1069,8500=>462,8501=>745,8502=>674,8503=>466,8504=>645,8505=>380,8506=>926,8507=>1194,8508=>702,8509=>728,8510=>654,8511=>849,8512=>811,8513=>775,8514=>557,8515=>557,8516=>611,8517=>819,8518=>708,8519=>615,8520=>351,8521=>351,8523=>780,8526=>526,8528=>969,8529=>969,8530=>1370,8531=>969,8532=>969,8533=>969,8534=>969,8535=>969,8536=>969,8537=>969,8538=>969,8539=>969,8540=>969,8541=>969,8542=>969,8543=>568,8544=>295,8545=>492,8546=>689,8547=>923,8548=>684,8549=>922,8550=>1120,8551=>1317,8552=>917,8553=>685,8554=>933,8555=>1131,8556=>557,8557=>698,8558=>770,8559=>863,8560=>278,8561=>458,8562=>637,8563=>812,8564=>592,8565=>811,8566=>991,8567=>1170,8568=>819,8569=>592,8570=>822,8571=>1002,8572=>278,8573=>550,8574=>635,8575=>974,8576=>1245,8577=>770,8578=>1245,8579=>703,8580=>549,8581=>698,8585=>969,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>684,8705=>636,8706=>517,8707=>632,8708=>632,8709=>871,8710=>669,8711=>669,8712=>871,8713=>871,8714=>718,8715=>871,8716=>871,8717=>718,8718=>636,8719=>757,8720=>757,8721=>674,8722=>838,8723=>838,8724=>838,8725=>337,8726=>637,8727=>838,8728=>626,8729=>626,8730=>637,8731=>637,8732=>637,8733=>714,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>732,8744=>732,8745=>732,8746=>732,8747=>521,8748=>789,8749=>1057,8750=>521,8751=>789,8752=>1057,8753=>521,8754=>521,8755=>521,8756=>636,8757=>636,8758=>260,8759=>636,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>839,8787=>839,8788=>1000,8789=>1000,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>838,8809=>838,8810=>1047,8811=>1047,8812=>464,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>732,8845=>732,8846=>732,8847=>838,8848=>838,8849=>838,8850=>838,8851=>780,8852=>780,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>871,8867=>871,8868=>871,8869=>871,8870=>521,8871=>521,8872=>871,8873=>871,8874=>871,8875=>871,8876=>871,8877=>871,8878=>871,8879=>871,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>521,8891=>732,8892=>732,8893=>732,8894=>838,8895=>838,8896=>820,8897=>820,8898=>820,8899=>820,8900=>494,8901=>318,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>732,8911=>732,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1000,8947=>871,8948=>718,8949=>871,8950=>871,8951=>718,8952=>871,8953=>871,8954=>1000,8955=>871,8956=>718,8957=>871,8958=>718,8959=>871,8960=>602,8961=>602,8962=>635,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>390,8969=>390,8970=>390,8971=>390,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>513,8984=>1000,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>521,8993=>521,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>338,9076=>635,9077=>837,9082=>659,9085=>757,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>521,9166=>838,9167=>945,9187=>873,9189=>769,9192=>636,9250=>635,9251=>635,9312=>896,9313=>896,9314=>896,9315=>896,9316=>896,9317=>896,9318=>896,9319=>896,9320=>896,9321=>896,9472=>602,9473=>602,9474=>602,9475=>602,9476=>602,9477=>602,9478=>602,9479=>602,9480=>602,9481=>602,9482=>602,9483=>602,9484=>602,9485=>602,9486=>602,9487=>602,9488=>602,9489=>602,9490=>602,9491=>602,9492=>602,9493=>602,9494=>602,9495=>602,9496=>602,9497=>602,9498=>602,9499=>602,9500=>602,9501=>602,9502=>602,9503=>602,9504=>602,9505=>602,9506=>602,9507=>602,9508=>602,9509=>602,9510=>602,9511=>602,9512=>602,9513=>602,9514=>602,9515=>602,9516=>602,9517=>602,9518=>602,9519=>602,9520=>602,9521=>602,9522=>602,9523=>602,9524=>602,9525=>602,9526=>602,9527=>602,9528=>602,9529=>602,9530=>602,9531=>602,9532=>602,9533=>602,9534=>602,9535=>602,9536=>602,9537=>602,9538=>602,9539=>602,9540=>602,9541=>602,9542=>602,9543=>602,9544=>602,9545=>602,9546=>602,9547=>602,9548=>602,9549=>602,9550=>602,9551=>602,9552=>602,9553=>602,9554=>602,9555=>602,9556=>602,9557=>602,9558=>602,9559=>602,9560=>602,9561=>602,9562=>602,9563=>602,9564=>602,9565=>602,9566=>602,9567=>602,9568=>602,9569=>602,9570=>602,9571=>602,9572=>602,9573=>602,9574=>602,9575=>602,9576=>602,9577=>602,9578=>602,9579=>602,9580=>602,9581=>602,9582=>602,9583=>602,9584=>602,9585=>602,9586=>602,9587=>602,9588=>602,9589=>602,9590=>602,9591=>602,9592=>602,9593=>602,9594=>602,9595=>602,9596=>602,9597=>602,9598=>602,9599=>602,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>791,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>873,9697=>873,9698=>769,9699=>769,9700=>769,9701=>769,9702=>590,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>322,10076=>322,10077=>538,10078=>538,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>896,10103=>896,10104=>896,10105=>896,10106=>896,10107=>896,10108=>896,10109=>896,10110=>896,10111=>896,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>390,10182=>390,10208=>494,10214=>495,10215=>495,10216=>390,10217=>390,10218=>556,10219=>556,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>732,10241=>732,10242=>732,10243=>732,10244=>732,10245=>732,10246=>732,10247=>732,10248=>732,10249=>732,10250=>732,10251=>732,10252=>732,10253=>732,10254=>732,10255=>732,10256=>732,10257=>732,10258=>732,10259=>732,10260=>732,10261=>732,10262=>732,10263=>732,10264=>732,10265=>732,10266=>732,10267=>732,10268=>732,10269=>732,10270=>732,10271=>732,10272=>732,10273=>732,10274=>732,10275=>732,10276=>732,10277=>732,10278=>732,10279=>732,10280=>732,10281=>732,10282=>732,10283=>732,10284=>732,10285=>732,10286=>732,10287=>732,10288=>732,10289=>732,10290=>732,10291=>732,10292=>732,10293=>732,10294=>732,10295=>732,10296=>732,10297=>732,10298=>732,10299=>732,10300=>732,10301=>732,10302=>732,10303=>732,10304=>732,10305=>732,10306=>732,10307=>732,10308=>732,10309=>732,10310=>732,10311=>732,10312=>732,10313=>732,10314=>732,10315=>732,10316=>732,10317=>732,10318=>732,10319=>732,10320=>732,10321=>732,10322=>732,10323=>732,10324=>732,10325=>732,10326=>732,10327=>732,10328=>732,10329=>732,10330=>732,10331=>732,10332=>732,10333=>732,10334=>732,10335=>732,10336=>732,10337=>732,10338=>732,10339=>732,10340=>732,10341=>732,10342=>732,10343=>732,10344=>732,10345=>732,10346=>732,10347=>732,10348=>732,10349=>732,10350=>732,10351=>732,10352=>732,10353=>732,10354=>732,10355=>732,10356=>732,10357=>732,10358=>732,10359=>732,10360=>732,10361=>732,10362=>732,10363=>732,10364=>732,10365=>732,10366=>732,10367=>732,10368=>732,10369=>732,10370=>732,10371=>732,10372=>732,10373=>732,10374=>732,10375=>732,10376=>732,10377=>732,10378=>732,10379=>732,10380=>732,10381=>732,10382=>732,10383=>732,10384=>732,10385=>732,10386=>732,10387=>732,10388=>732,10389=>732,10390=>732,10391=>732,10392=>732,10393=>732,10394=>732,10395=>732,10396=>732,10397=>732,10398=>732,10399=>732,10400=>732,10401=>732,10402=>732,10403=>732,10404=>732,10405=>732,10406=>732,10407=>732,10408=>732,10409=>732,10410=>732,10411=>732,10412=>732,10413=>732,10414=>732,10415=>732,10416=>732,10417=>732,10418=>732,10419=>732,10420=>732,10421=>732,10422=>732,10423=>732,10424=>732,10425=>732,10426=>732,10427=>732,10428=>732,10429=>732,10430=>732,10431=>732,10432=>732,10433=>732,10434=>732,10435=>732,10436=>732,10437=>732,10438=>732,10439=>732,10440=>732,10441=>732,10442=>732,10443=>732,10444=>732,10445=>732,10446=>732,10447=>732,10448=>732,10449=>732,10450=>732,10451=>732,10452=>732,10453=>732,10454=>732,10455=>732,10456=>732,10457=>732,10458=>732,10459=>732,10460=>732,10461=>732,10462=>732,10463=>732,10464=>732,10465=>732,10466=>732,10467=>732,10468=>732,10469=>732,10470=>732,10471=>732,10472=>732,10473=>732,10474=>732,10475=>732,10476=>732,10477=>732,10478=>732,10479=>732,10480=>732,10481=>732,10482=>732,10483=>732,10484=>732,10485=>732,10486=>732,10487=>732,10488=>732,10489=>732,10490=>732,10491=>732,10492=>732,10493=>732,10494=>732,10495=>732,10502=>838,10503=>838,10506=>838,10507=>838,10560=>683,10561=>683,10627=>734,10628=>734,10702=>838,10703=>1000,10704=>1000,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1325,10765=>521,10766=>521,10767=>521,10768=>521,10769=>521,10770=>521,10771=>521,10772=>521,10773=>521,10774=>521,10775=>521,10776=>521,10777=>521,10778=>521,10779=>521,10780=>521,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>836,11023=>836,11024=>836,11025=>836,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>557,11361=>278,11362=>557,11363=>603,11364=>695,11365=>613,11366=>392,11367=>752,11368=>634,11369=>656,11370=>579,11371=>685,11372=>525,11373=>781,11374=>863,11375=>684,11376=>781,11377=>734,11378=>1128,11379=>961,11380=>592,11381=>654,11382=>568,11383=>660,11385=>414,11386=>612,11387=>491,11388=>175,11389=>431,11390=>635,11391=>685,11568=>646,11569=>888,11570=>888,11571=>682,11572=>684,11573=>635,11574=>562,11575=>684,11576=>684,11577=>632,11578=>632,11579=>683,11580=>875,11581=>685,11582=>491,11583=>685,11584=>888,11585=>888,11586=>300,11587=>627,11588=>752,11589=>656,11590=>527,11591=>685,11592=>645,11593=>632,11594=>502,11595=>953,11596=>778,11597=>748,11598=>621,11599=>295,11600=>778,11601=>295,11602=>752,11603=>633,11604=>888,11605=>888,11606=>752,11607=>320,11608=>749,11609=>888,11610=>888,11611=>698,11612=>768,11613=>685,11614=>698,11615=>622,11616=>684,11617=>752,11618=>632,11619=>788,11620=>567,11621=>788,11631=>515,11800=>531,11810=>390,11811=>390,11812=>390,11813=>390,11822=>531,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>635,42565=>521,42566=>354,42567=>338,42572=>1180,42573=>1028,42576=>1029,42577=>906,42580=>1080,42581=>842,42582=>977,42583=>843,42594=>1062,42595=>912,42596=>1066,42597=>901,42598=>1178,42599=>1008,42600=>787,42601=>612,42602=>855,42603=>712,42604=>1358,42605=>1019,42606=>879,42634=>782,42635=>685,42636=>611,42637=>583,42644=>686,42645=>634,42760=>493,42761=>493,42762=>493,42763=>493,42764=>493,42765=>493,42766=>493,42767=>493,42768=>493,42769=>493,42770=>493,42771=>493,42772=>493,42773=>493,42774=>493,42779=>369,42780=>369,42781=>252,42782=>252,42783=>252,42786=>385,42787=>356,42788=>472,42789=>472,42790=>752,42791=>634,42792=>878,42793=>709,42794=>614,42795=>541,42800=>491,42801=>521,42802=>1250,42803=>985,42804=>1203,42805=>990,42806=>1142,42807=>981,42808=>971,42809=>818,42810=>971,42811=>818,42812=>959,42813=>818,42814=>703,42815=>549,42822=>680,42823=>392,42824=>582,42825=>427,42826=>807,42827=>704,42830=>1358,42831=>1019,42832=>603,42833=>635,42834=>734,42835=>774,42838=>787,42839=>635,42852=>605,42853=>635,42854=>605,42855=>635,42880=>557,42881=>278,42882=>735,42883=>634,42889=>337,42890=>376,42891=>401,42892=>275,42893=>686,42894=>487,42896=>772,42897=>667,43002=>915,43003=>575,43004=>603,43005=>863,43006=>295,43007=>1199,61184=>213,61185=>238,61186=>257,61187=>264,61188=>267,61189=>238,61190=>213,61191=>238,61192=>257,61193=>264,61194=>257,61195=>238,61196=>213,61197=>238,61198=>257,61199=>264,61200=>257,61201=>238,61202=>213,61203=>238,61204=>267,61205=>264,61206=>257,61207=>238,61208=>213,61209=>275,61440=>977,61441=>977,61442=>977,61443=>977,63173=>612,64256=>689,64257=>630,64258=>630,64259=>967,64260=>967,64261=>686,64262=>861,64275=>1202,64276=>1202,64277=>1196,64278=>1186,64279=>1529,64285=>224,64286=>0,64287=>331,64288=>636,64289=>856,64290=>774,64291=>906,64292=>771,64293=>843,64294=>855,64295=>807,64296=>875,64297=>838,64298=>708,64299=>708,64300=>708,64301=>708,64302=>668,64303=>668,64304=>668,64305=>578,64306=>412,64307=>546,64308=>653,64309=>355,64310=>406,64312=>648,64313=>330,64314=>537,64315=>529,64316=>568,64318=>679,64320=>399,64321=>649,64323=>640,64324=>625,64326=>593,64327=>709,64328=>564,64329=>708,64330=>657,64331=>272,64332=>578,64333=>529,64334=>625,64335=>629,64338=>941,64339=>982,64340=>278,64341=>302,64342=>941,64343=>982,64344=>278,64345=>302,64346=>941,64347=>982,64348=>278,64349=>302,64350=>941,64351=>982,64352=>278,64353=>302,64354=>941,64355=>982,64356=>278,64357=>302,64358=>941,64359=>982,64360=>278,64361=>302,64362=>1037,64363=>1035,64364=>478,64365=>506,64366=>1037,64367=>1035,64368=>478,64369=>506,64370=>646,64371=>646,64372=>618,64373=>646,64374=>646,64375=>646,64376=>618,64377=>646,64378=>646,64379=>646,64380=>618,64381=>646,64382=>646,64383=>646,64384=>618,64385=>646,64386=>445,64387=>525,64388=>445,64389=>525,64390=>445,64391=>525,64392=>445,64393=>525,64394=>483,64395=>552,64396=>483,64397=>552,64398=>895,64399=>895,64400=>476,64401=>552,64402=>895,64403=>895,64404=>476,64405=>552,64406=>895,64407=>895,64408=>476,64409=>552,64410=>895,64411=>895,64412=>476,64413=>552,64414=>734,64415=>761,64416=>734,64417=>761,64418=>278,64419=>302,64426=>698,64427=>632,64428=>527,64429=>461,64467=>824,64468=>843,64469=>476,64470=>552,64473=>483,64474=>517,64488=>278,64489=>302,64508=>783,64509=>833,64510=>278,64511=>302,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>293,65137=>293,65138=>293,65139=>262,65140=>293,65142=>293,65143=>293,65144=>293,65145=>293,65146=>293,65147=>293,65148=>293,65149=>293,65150=>293,65151=>293,65152=>470,65153=>278,65154=>305,65155=>278,65156=>305,65157=>483,65158=>517,65159=>278,65160=>305,65161=>783,65162=>833,65163=>278,65164=>302,65165=>278,65166=>305,65167=>941,65168=>982,65169=>278,65170=>302,65171=>524,65172=>536,65173=>941,65174=>982,65175=>278,65176=>302,65177=>941,65178=>982,65179=>278,65180=>302,65181=>646,65182=>646,65183=>618,65184=>646,65185=>646,65186=>646,65187=>618,65188=>646,65189=>646,65190=>646,65191=>618,65192=>646,65193=>445,65194=>525,65195=>445,65196=>525,65197=>483,65198=>552,65199=>483,65200=>552,65201=>1221,65202=>1275,65203=>838,65204=>892,65205=>1221,65206=>1275,65207=>838,65208=>892,65209=>1209,65210=>1225,65211=>849,65212=>867,65213=>1209,65214=>1225,65215=>849,65216=>867,65217=>925,65218=>949,65219=>796,65220=>820,65221=>925,65222=>949,65223=>796,65224=>820,65225=>597,65226=>532,65227=>597,65228=>482,65229=>597,65230=>532,65231=>523,65232=>482,65233=>1037,65234=>1035,65235=>478,65236=>506,65237=>776,65238=>834,65239=>478,65240=>506,65241=>824,65242=>843,65243=>476,65244=>552,65245=>727,65246=>757,65247=>305,65248=>331,65249=>619,65250=>666,65251=>536,65252=>578,65253=>734,65254=>761,65255=>278,65256=>302,65257=>524,65258=>536,65259=>527,65260=>461,65261=>483,65262=>517,65263=>783,65264=>833,65265=>783,65266=>833,65267=>278,65268=>302,65269=>570,65270=>597,65271=>570,65272=>597,65273=>570,65274=>597,65275=>570,65276=>597,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1025,65535=>600);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpinfo() wrapper to allow displaying only when configured to do so. * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';/** * Displays PHP information */if ($GLOBALS['cfg']['ShowPhpInfo']) {    phpinfo();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run config authentication (ie no authentication). * * @package PhpMyAdmin-Auth-Config *//** * Displays authentication form * * @return  boolean   always true * * @access  public */function PMA_auth(){    return true;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @return  boolean   always true * * @access  public */function PMA_auth_check(){    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @global  string    the MySQL error message PHP returns * @global  string    the connection type (persistent or not) * @global  string    the MySQL server port to use * @global  string    the MySQL socket port to use * @global  array     the current server settings * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * @global  boolean   tell the "PMA_mysqlDie()" function headers have been *                    sent * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $conn_error = PMA_DBI_getError();    if (!$conn_error) {        $conn_error = __('Cannot connect: invalid settings.');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin '); ?></h1></center><br /><table border="0" cellpadding="0" cellspacing="3" align="center" width="80%">    <tr>        <td>    <?php    $GLOBALS['is_header_sent'] = true;    if (isset($GLOBALS['allowDeny_forbidden']) && $GLOBALS['allowDeny_forbidden']) {        trigger_error(__('Access denied'), E_USER_NOTICE);    } else {        // Check whether user has configured something        if ($GLOBALS['PMA_Config']->source_mtime == 0) {            echo '<p>' . sprintf(__('You probably did not create a configuration file. You might want to use the %1$ssetup script%2$s to create one.'), '<a href="setup/">', '</a>') . '</p>' . "\n";        } elseif (!isset($GLOBALS['errno']) || (isset($GLOBALS['errno']) && $GLOBALS['errno'] != 2002) && $GLOBALS['errno'] != 2003) {        // if we display the "Server not responding" error, do not confuse users        // by telling them they have a settings problem        // (note: it's true that they could have a badly typed host name, but        //  anyway the current message tells that the server        //  rejected the connection, which is not really what happened)        // 2002 is the error given by mysqli        // 2003 is the error given by mysql            trigger_error(__('phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection. You should check the host, username and password in your configuration and make sure that they correspond to the information given by the administrator of the MySQL server.'), E_USER_WARNING);        }        PMA_mysqlDie($conn_error, '', true, '', false);    }    $GLOBALS['error_handler']->dispUserErrors();?>        </td>    </tr><?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        // offer a chance to login to other servers if the current one failed        include_once './libraries/select_server.lib.php';        echo '<tr>' . "\n";        echo ' <td>' . "\n";        PMA_select_server(true, true);        echo ' </td>' . "\n";        echo '</tr>' . "\n";    }    echo '</table>' . "\n";    include './libraries/footer.inc.php';    return true;} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once "Export_Relation_Schema.class.php";/** * This Class inherits the XMLwriter class and * helps in developing structure of DIA Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_DIA extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_DIA" constructor     *     * Upon instantiation This starts writing the Dia XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Dia Document     *     * dia document starts by first initializing dia:diagram tag     * then dia:diagramdata contains all the attributes that needed     * to define the document, then finally a Layer starts which     * holds all the objects.     *     * @param string $paper        the size of the paper/document     * @param float  $topMargin    top margin of the paper/document in cm     * @param float  $bottomMargin bottom margin of the paper/document in cm     * @param float  $leftMargin   left margin of the paper/document in cm     * @param float  $rightMargin  right margin of the paper/document in cm     * @param string $portrait     document will be portrait or landscape     *     * @return void     *     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute(),XMLWriter::writeRaw()     */    function startDiaDoc($paper,$topMargin,$bottomMargin,$leftMargin,$rightMargin,$portrait)    {        if ($portrait == 'P') {            $isPortrait='true';        } else {            $isPortrait='false';        }        $this->startElement('dia:diagram');        $this->writeAttribute('xmlns:dia', 'http://www.lysator.liu.se/~alla/dia/');        $this->startElement('dia:diagramdata');        $this->writeRaw(        '<dia:attribute name="background">          <dia:color val="#ffffff"/>        </dia:attribute>        <dia:attribute name="pagebreak">          <dia:color val="#000099"/>        </dia:attribute>        <dia:attribute name="paper">          <dia:composite type="paper">            <dia:attribute name="name">              <dia:string>#' . $paper . '#</dia:string>            </dia:attribute>            <dia:attribute name="tmargin">              <dia:real val="' . $topMargin . '"/>            </dia:attribute>            <dia:attribute name="bmargin">              <dia:real val="' . $bottomMargin . '"/>            </dia:attribute>            <dia:attribute name="lmargin">              <dia:real val="' . $leftMargin . '"/>            </dia:attribute>            <dia:attribute name="rmargin">              <dia:real val="' . $rightMargin . '"/>            </dia:attribute>            <dia:attribute name="is_portrait">              <dia:boolean val="' . $isPortrait . '"/>            </dia:attribute>            <dia:attribute name="scaling">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="fitto">              <dia:boolean val="false"/>            </dia:attribute>          </dia:composite>        </dia:attribute>        <dia:attribute name="grid">          <dia:composite type="grid">            <dia:attribute name="width_x">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="width_y">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="visible_x">              <dia:int val="1"/>            </dia:attribute>            <dia:attribute name="visible_y">              <dia:int val="1"/>            </dia:attribute>            <dia:composite type="color"/>          </dia:composite>        </dia:attribute>        <dia:attribute name="color">          <dia:color val="#d8e5e5"/>        </dia:attribute>        <dia:attribute name="guides">          <dia:composite type="guides">            <dia:attribute name="hguides"/>            <dia:attribute name="vguides"/>          </dia:composite>        </dia:attribute>');         $this->endElement();         $this->startElement('dia:layer');         $this->writeAttribute('name', 'Background');         $this->writeAttribute('visible', 'true');         $this->writeAttribute('active', 'true');    }    /**     * Ends Dia Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endDiaDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Dia Document for download     *     * @param string $fileName name of the dia document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {        if (ob_get_clean()) {            ob_end_clean();        }        $output = $this->flush();        PMA_download_header(            $fileName . '.dia', 'application/x-dia-diagram', strlen($output)        );        print $output;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in dia XML document. * * @name Table_Stats * @see PMA_DIA */class Table_Stats{    /**     * Defines properties     */    public $tableName;    public $fields = array();    public $x, $y;    public $primary = array();    public $tableId;    public $tableColor;    /**     * The "Table_Stats" constructor     *     * @param string  $tableName  The table name     * @param integer $pageNumber The current page number (from the     *                            $cfg['Servers'][$i]['table_coords'] table)     * @param boolean $showKeys   Whether to display ONLY keys or not     *     * @return void     *     * @global object    The current dia document     * @global array     The relations settings     * @global string    The current db name     *     * @see PMA_DIA     */    function __construct($tableName, $pageNumber, $showKeys = false)    {        global $dia, $cfgRelation, $db;        $this->tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $dia->dieSchema(                $pageNumber, "DIA",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*         * load fields         * check to see if it will load all fields or only the foreign keys         */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $sql = 'SELECT x, y FROM '             . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'             . PMA_backquote($cfgRelation['table_coords'])             . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''             . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''             . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $dia->dieSchema(                $pageNumber,                "DIA",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        /*         * displayfield         */        $this->displayfield = PMA_getDisplayField($db, $tableName);        /*         * index         */        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }        /**         * Every object in Dia document needs an ID to identify         * so, we used a static variable to keep the things unique         */        PMA_Dia_Relation_Schema::$objectId += 1;        $this->tableId = PMA_Dia_Relation_Schema::$objectId;    }    /**     * Do draw the table     *     * Tables are generated using object type Database - Table     * primary fields are underlined in tables. Dia object     * is used to generate the XML of Dia Document. Database Table     * Object and their attributes are involved in the combination     * of displaing Database - Table on Dia Document.     *     * @param boolean $changeColor Whether to show color for tables text or not     * if changeColor is true then an array of $listOfColors will be used to choose     * the random colors for tables text we can change/add more colors to this array     *     * @return void     *     * @global object The current Dia document     *     * @access public     * @see PMA_DIA     */    public function tableDraw($changeColor)    {        global $dia;        if ($changeColor) {            $listOfColors = array(                'FF0000',                '000099',                '00FF00'            );            shuffle($listOfColors);            $this->tableColor =  '#' . $listOfColors[0] . '';        } else {            $this->tableColor = '#000000';        }        $factor = 0.1;        $dia->startElement('dia:object');        $dia->writeAttribute('type', 'Database - Table');        $dia->writeAttribute('version', '0');        $dia->writeAttribute('id', '' . $this->tableId . '');        $dia->writeRaw(            '<dia:attribute name="obj_pos">                <dia:point val="'            . ($this->x * $factor) . ',' . ($this->y * $factor) . '"/>            </dia:attribute>            <dia:attribute name="obj_bb">                <dia:rectangle val="'            .($this->x * $factor) . ',' . ($this->y * $factor) . ';9.97,9.2"/>            </dia:attribute>            <dia:attribute name="meta">                <dia:composite type="dict"/>            </dia:attribute>            <dia:attribute name="elem_corner">                <dia:point val="'            . ($this->x * $factor) . ',' . ($this->y * $factor) . '"/>            </dia:attribute>            <dia:attribute name="elem_width">                <dia:real val="5.9199999999999999"/>            </dia:attribute>            <dia:attribute name="elem_height">                <dia:real val="3.5"/>            </dia:attribute>            <dia:attribute name="text_colour">                <dia:color val="' . $this->tableColor . '"/>            </dia:attribute>            <dia:attribute name="line_colour">                <dia:color val="#000000"/>            </dia:attribute>            <dia:attribute name="fill_colour">                <dia:color val="#ffffff"/>            </dia:attribute>            <dia:attribute name="line_width">                <dia:real val="0.10000000000000001"/>            </dia:attribute>            <dia:attribute name="name">                <dia:string>#' . $this->tableName . '#</dia:string>            </dia:attribute>            <dia:attribute name="comment">                <dia:string>##</dia:string>            </dia:attribute>            <dia:attribute name="visible_comment">                <dia:boolean val="false"/>            </dia:attribute>            <dia:attribute name="tagging_comment">                <dia:boolean val="false"/>            </dia:attribute>            <dia:attribute name="underline_primary_key">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="bold_primary_keys">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="normal_font">                <dia:font family="monospace" style="0" name="Courier"/>            </dia:attribute>            <dia:attribute name="name_font">                <dia:font family="sans" style="80" name="Helvetica-Bold"/>            </dia:attribute>            <dia:attribute name="comment_font">                <dia:font family="sans" style="0" name="Helvetica"/>            </dia:attribute>            <dia:attribute name="normal_font_height">                <dia:real val="0.80000000000000004"/>            </dia:attribute>            <dia:attribute name="name_font_height">                <dia:real val="0.69999999999999996"/>            </dia:attribute>            <dia:attribute name="comment_font_height">                <dia:real val="0.69999999999999996"/>            </dia:attribute>'        );        $dia->startElement('dia:attribute');        $dia->writeAttribute('name', 'attributes');        foreach ($this->fields as $field) {            $dia->writeRaw(                '<dia:composite type="table_attribute">                    <dia:attribute name="name">                <dia:string>#' . $field . '#</dia:string>                </dia:attribute>                <dia:attribute name="type">                    <dia:string>##</dia:string>                </dia:attribute>                    <dia:attribute name="comment">                <dia:string>##</dia:string>                </dia:attribute>'            );            unset($pm);            $pm = 'false';            if (in_array($field, $this->primary)) {                $pm = 'true';            }            if ($field == $this->displayfield) {                $pm = 'false';            }            $dia->writeRaw(                '<dia:attribute name="primary_key">                    <dia:boolean val="' . $pm . '"/>                </dia:attribute>                <dia:attribute name="nullable">                    <dia:boolean val="false"/>                </dia:attribute>                <dia:attribute name="unique">                    <dia:boolean val="' . $pm . '"/>                </dia:attribute>                </dia:composite>'            );        }        $dia->endElement();        $dia->endElement();    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in dia XML document. * * @name Relation_Stats * @see PMA_DIA */class Relation_Stats{    /**     * Defines properties     */    public $srcConnPointsRight;    public $srcConnPointsLeft;    public $destConnPointsRight;    public $destConnPointsLeft;    public $masterTableId;    public $foreignTableId;    public $masterTablePos;    public $foreignTablePos;    public $referenceColor;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        $this->srcConnPointsLeft = $src_pos[0];        $this->srcConnPointsRight = $src_pos[1];        $this->destConnPointsLeft = $dest_pos[0];        $this->destConnPointsRight = $dest_pos[1];        $this->masterTablePos = $src_pos[2];        $this->foreignTablePos = $dest_pos[2];        $this->masterTableId = $master_table->tableId;        $this->foreignTableId = $foreign_table->tableId;    }    /**     * Each Table object have connection points     * which is used to connect to other objects in Dia     * we detect the position of key in fields and     * then determines its left and right connection     * points.     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Table right,left connection points and key position     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // left, right, position        $value = 12;        if ($pos != 0) {            return array($pos + $value + $pos, $pos + $value + $pos + 1, $pos);        }        return array($pos + $value , $pos + $value + 1, $pos);    }    /**     * Draws relation references     *     * connects master table's master field to foreign table's     * forein field using Dia object type Database - Reference     * Dia object is used to generate the XML of Dia Document.     * Database reference Object and their attributes are involved     * in the combination of displaing Database - reference on Dia Document.     *     * @param boolean $changeColor Whether to use one color per relation or not     * if changeColor is true then an array of $listOfColors will be used to choose     * the random colors for references lines. we can change/add more colors to this     *     * @return void     *     * @global object The current Dia document     *     * @access public     * @see PMA_PDF     */    public function relationDraw($changeColor)    {        global $dia;        PMA_Dia_Relation_Schema::$objectId += 1;        /*         * if source connection points and destination connection         * points are same then return it false and don't draw that         * relation         */        if ( $this->srcConnPointsRight == $this->destConnPointsRight) {            if ( $this->srcConnPointsLeft == $this->destConnPointsLeft) {                return false;            }        }        if ($changeColor) {            $listOfColors = array(                'FF0000',                '000099',                '00FF00'            );            shuffle($listOfColors);            $this->referenceColor =  '#' . $listOfColors[0] . '';        } else {            $this->referenceColor = '#000000';        }        $dia->writeRaw(            '<dia:object type="Database - Reference" version="0" id="'            . PMA_Dia_Relation_Schema::$objectId . '">            <dia:attribute name="obj_pos">                <dia:point val="3.27,18.9198"/>            </dia:attribute>            <dia:attribute name="obj_bb">                <dia:rectangle val="2.27,8.7175;17.7679,18.9198"/>            </dia:attribute>            <dia:attribute name="meta">                <dia:composite type="dict"/>            </dia:attribute>            <dia:attribute name="orth_points">                <dia:point val="3.27,18.9198"/>                <dia:point val="2.27,18.9198"/>                <dia:point val="2.27,14.1286"/>                <dia:point val="17.7679,14.1286"/>                <dia:point val="17.7679,9.3375"/>                <dia:point val="16.7679,9.3375"/>            </dia:attribute>            <dia:attribute name="orth_orient">                <dia:enum val="0"/>                <dia:enum val="1"/>                <dia:enum val="0"/>                <dia:enum val="1"/>                <dia:enum val="0"/>            </dia:attribute>            <dia:attribute name="orth_autoroute">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="text_colour">                <dia:color val="#000000"/>            </dia:attribute>            <dia:attribute name="line_colour">                <dia:color val="' . $this->referenceColor . '"/>            </dia:attribute>            <dia:attribute name="line_width">                <dia:real val="0.10000000000000001"/>            </dia:attribute>            <dia:attribute name="line_style">                <dia:enum val="0"/>                <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="corner_radius">                <dia:real val="0"/>            </dia:attribute>            <dia:attribute name="end_arrow">                <dia:enum val="22"/>            </dia:attribute>            <dia:attribute name="end_arrow_length">                <dia:real val="0.5"/>            </dia:attribute>            <dia:attribute name="end_arrow_width">                <dia:real val="0.5"/>            </dia:attribute>            <dia:attribute name="start_point_desc">                <dia:string>#1#</dia:string>            </dia:attribute>            <dia:attribute name="end_point_desc">                <dia:string>#n#</dia:string>            </dia:attribute>            <dia:attribute name="normal_font">                <dia:font family="monospace" style="0" name="Courier"/>            </dia:attribute>            <dia:attribute name="normal_font_height">                <dia:real val="0.59999999999999998"/>            </dia:attribute>            <dia:connections>                <dia:connection handle="0" to="'            . $this->masterTableId . '" connection="'            . $this->srcConnPointsRight . '"/>                <dia:connection handle="1" to="'            . $this->foreignTableId . '" connection="'            . $this->destConnPointsRight . '"/>            </dia:connections>            </dia:object>'        );    }}/** * Dia Relation Schema Class * * Purpose of this class is to generate the Dia XML Document * which is used for representing the database diagrams in Dia IDE * This class uses Database Table and Reference Objects of Dia and with * the combination of these objects actually helps in preparing Dia XML. * * Dia XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Dia_Relation_Schema */class PMA_Dia_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * Defines properties     */    private $_tables = array();    private $_relations = array();    private $_topMargin = 2.8222000598907471;    private $_bottomMargin = 2.8222000598907471;    private $_leftMargin = 2.8222000598907471;    private $_rightMargin = 2.8222000598907471;    public static $objectId = 0;    /**     * The "PMA_Dia_Relation_Schema" constructor     *     * Upon instantiation This outputs the Dia XML document     * that user can download     *     * @return void     * @see PMA_DIA,Table_Stats,Relation_Stats     */    function __construct()    {        global $dia,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $dia = new PMA_DIA();        $dia->startDiaDoc(            $this->paper, $this->_topMargin, $this->_bottomMargin,            $this->_leftMargin, $this->_rightMargin, $this->orientation        );        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $this->pageNumber, $this->showKeys                );            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                     * by the user                     * (do not use array_search() because we would have to                     * to do a === false and this is not PHP3 compatible)                     */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $dia->endDiaDoc();        $dia->showOutput($db . '-' . $this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string $masterTable  The master table name     * @param string $masterField  The relation field in the master table     * @param string $foreignTable The foreign table name     * @param string $foreignField The relation field in the foreign table     * @param bool   $showKeys     Whether to display ONLY keys or not     *     * @return void     *     * @access private     * @see Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     *     * connects master table's master field to     * foreign table's forein field using Dia object     * type Database - Reference     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     *     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * Tables are generated using Dia object type Database - Table     * primary fields are underlined and bold in tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     *     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';// text color of the selected database name (when showing the table list)$GLOBALS['cfg']['NaviDatabaseNameColor']    = '#0000FF';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 50,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => '#E5E5E5',    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => '#FBFBFB',    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          => '#D5D9DD',    // the background color of the graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgTwo'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * A simple rules engine, that parses and executes the rules in advisory_rules.txt. Adjusted to phpMyAdmin * * * @package PhpMyAdmin */class Advisor{    var $variables;    var $parseResult;    var $runResult;    function run()    {        // HowTo: A simple Advisory system in 3 easy steps.        // Step 1: Get some variables to evaluate on        $this->variables = array_merge(            PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1),            PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1)        );        if (PMA_DRIZZLE) {            $this->variables = array_merge(                $this->variables,                PMA_DBI_fetch_result(                    "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS", 0, 1                )            );        }        // Add total memory to variables as well        include_once 'libraries/sysinfo.lib.php';        $sysinfo = getSysInfo();        $memory  = $sysinfo->memory();        $this->variables['system_memory'] = $memory['MemTotal'];        // Step 2: Read and parse the list of rules        $this->parseResult = $this->parseRulesFile();        // Step 3: Feed the variables to the rules and let them fire. Sets $runResult        $this->runRules();        return array(            'parse' => array('errors' => $this->parseResult['errors']),            'run'   => $this->runResult        );    }    function runRules()    {        $this->runResult = array(            'fired' => array(),            'notfired' => array(),            'unchecked'=> array(),            'errors' => array()        );        foreach ($this->parseResult['rules'] as $rule) {            $this->variables['value'] = 0;            $precond = true;            if (isset($rule['precondition'])) {                try {                     $precond = $this->ruleExprEvaluate($rule['precondition']);                } catch (Exception $e) {                    $this->runResult['errors'][] = 'Failed evaluating precondition for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }            }            if (! $precond) {                $this->addRule('unchecked', $rule);            } else {                try {                    $value = $this->ruleExprEvaluate($rule['formula']);                } catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed calculating value for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }                $this->variables['value'] = $value;                try {                    if ($this->ruleExprEvaluate($rule['test'])) {                        $this->addRule('fired', $rule);                    } else {                        $this->addRule('notfired', $rule);                    }                }  catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed running test for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                }            }        }        return true;    }    /**     * Escapes percent string to be used in format string.     *     * @param string $str string to escape     *     * @return string     */    function escapePercent($str)    {        return preg_replace('/%( |,|\.|$|\(|\)|<|>)/', '%%\1', $str);    }    /**     * Wrapper function for translating.     *     * @param string $str     * @param mixed  $param     *     * @return string     */    function translate($str, $param = null)    {        if (is_null($param)) {            return sprintf(_gettext(Advisor::escapePercent($str)));        } else {            $printf = 'sprintf("' . _gettext(Advisor::escapePercent($str)) . '",';            return $this->ruleExprEvaluate(                $printf . $param . ')',                strlen($printf)            );        }    }    /**     * Splits justification to text and formula.     *     * @param string $rule     *     * @return array     */    function splitJustification($rule)    {        $jst = preg_split('/\s*\|\s*/', $rule['justification'], 2);        if (count($jst) > 1) {            return array($jst[0], $jst[1]);        }        return array($rule['justification']);    }    // Adds a rule to the result list    function addRule($type, $rule)    {        switch($type) {        case 'notfired':        case 'fired':            $jst = Advisor::splitJustification($rule);            if (count($jst) > 1) {                try {                    /* Translate */                    $str = $this->translate($jst[0], $jst[1]);                } catch (Exception $e) {                    $this->runResult['errors'][] = sprintf(                        __('Failed formatting string for rule \'%s\'. PHP threw following error: %s'),                        $rule['name'],                        $e->getMessage()                    );                    return;                }                $rule['justification'] = $str;            } else {                $rule['justification'] = $this->translate($rule['justification']);            }            $rule['name'] = $this->translate($rule['name']);            $rule['issue'] = $this->translate($rule['issue']);            // Replaces {server_variable} with 'server_variable'            // linking to server_variables.php            $rule['recommendation'] = preg_replace(                '/\{([a-z_0-9]+)\}/Ui',                '<a href="server_variables.php?' . PMA_generate_common_url() . '#filter=\1">\1</a>',                $this->translate($rule['recommendation'])            );            // Replaces external Links with PMA_linkURL() generated links            $rule['recommendation'] = preg_replace(                '#href=("|\')(https?://[^\1]+)\1#ie',                '\'href="\' . PMA_linkURL("\2") . \'"\'',                $rule['recommendation']            );            break;        }        $this->runResult[$type][] = $rule;    }    private function ruleExprEvaluate_var1($matches)    {        // '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Uie'        return '1'; //isset($this->runResult[\'fired\']    }    private function ruleExprEvaluate_var2($matches)    {        // '/\b(\w+)\b/e'        return isset($this->variables[$matches[1]])            ? (is_numeric($this->variables[$matches[1]])                ? $this->variables[$matches[1]]                : '"'.$this->variables[$matches[1]].'"')            : $matches[1];    }    // Runs a code expression, replacing variable names with their respective values    // ignoreUntil: if > 0, it doesn't replace any variables until that string    // position, but still evaluates the whole expr    function ruleExprEvaluate($expr, $ignoreUntil = 0)    {        if ($ignoreUntil > 0) {            $exprIgnore = substr($expr, 0, $ignoreUntil);            $expr = substr($expr, $ignoreUntil);        }        $expr = preg_replace_callback(            '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Ui',            array($this, 'ruleExprEvaluate_var1'),            $expr        );        $expr = preg_replace_callback(            '/\b(\w+)\b/',            array($this, 'ruleExprEvaluate_var2'),            $expr        );        if ($ignoreUntil > 0) {            $expr = $exprIgnore . $expr;        }        $value = 0;        $err = 0;        ob_start();        eval('$value = '.$expr.';');        $err = ob_get_contents();        ob_end_clean();        if ($err) {            throw new Exception(                strip_tags($err) . '<br />Executed code: $value = ' . $expr . ';'            );        }        return $value;    }    // Reads the rule file into an array, throwing errors messages on syntax errors    function parseRulesFile()    {        $file = file('libraries/advisory_rules.txt');        $errors = array();        $rules = array();        $ruleSyntax = array('name', 'formula', 'test', 'issue', 'recommendation', 'justification');        $numRules = count($ruleSyntax);        $numLines = count($file);        $j = -1;        $ruleLine = -1;        for ($i = 0; $i<$numLines; $i++) {            $line = $file[$i];            if ($line[0] == '#' || $line[0] == "\n") {                continue;            }            // Reading new rule            if (substr($line, 0, 4) == 'rule') {                if ($ruleLine > 0) {                    $errors[] = 'Invalid rule declaration on line ' . ($i+1)                        . ', expected line ' . $ruleSyntax[$ruleLine++]                        . ' of previous rule' ;                    continue;                }                if (preg_match("/rule\s'(.*)'( \[(.*)\])?$/", $line, $match)) {                    $ruleLine = 1;                    $j++;                    $rules[$j] = array( 'name' => $match[1]);                    if (isset($match[3])) {                        $rules[$j]['precondition'] = $match[3];                    }                } else {                    $errors[] = 'Invalid rule declaration on line '.($i+1);                }                continue;            } else {                if ($ruleLine == -1) {                    $errors[] = 'Unexpected characters on line '.($i+1);                }            }            // Reading rule lines            if ($ruleLine > 0) {                if (!isset($line[0])) {                    continue; // Empty lines are ok                }                // Non tabbed lines are not                if ($line[0] != "\t") {                    $errors[] = 'Unexpected character on line '.($i+1).'                        . Expected tab, but found \''.$line[0].'\'';                    continue;                }                $rules[$j][$ruleSyntax[$ruleLine++]] = chop(substr($line, 1));            }            // Rule complete            if ($ruleLine == $numRules) {                $ruleLine = -1;            }        }        return array('rules' => $rules, 'errors' => $errors);    }}function PMA_bytime($num, $precision){    $per = '';    if ($num >= 1) { // per second        $per = __('per second');    } elseif ($num*60 >= 1) { // per minute        $num = $num*60;        $per = __('per minute');    } elseif ($num*60*60 >=1 ) { // per hour        $num = $num*60*60;        $per = __('per hour');    } else {        $num = $num*60*60*24;        $per = __('per day');    }    $num = round($num, $precision);    if ($num == 0) {        $num = '<' . pow(10, -$precision);    }    return "$num $per";}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Zip file creation class. * Makes zip files. * * @see Official ZIP file format: http://www.pkware.com/support/zip-app-note * * @access  public * @package PhpMyAdmin */class zipfile{    /**     * Whether to echo zip as it's built or return as string from -> file     *     * @var  boolean  $doWrite     */    var $doWrite = false;    /**     * Array to store compressed data     *     * @var  array    $datasec     */    var $datasec      = array();    /**     * Central directory     *     * @var  array    $ctrl_dir     */    var $ctrl_dir     = array();    /**     * End of central directory record     *     * @var  string   $eof_ctrl_dir     */    var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";    /**     * Last offset position     *     * @var  integer  $old_offset     */    var $old_offset   = 0;    /**     * Sets member variable this -> doWrite to true     * - Should be called immediately after class instantiantion     * - If set to true, then ZIP archive are echo'ed to STDOUT as each     *   file is added via this -> addfile(), and central directories are     *   echoed to STDOUT on final call to this -> file().  Also,     *   this -> file() returns an empty string so it is safe to issue a     *   "echo $zipfile;" command     *     * @access public     *     * @return nothing     */    function setDoWrite()    {        $this -> doWrite = true;    } // end of the 'setDoWrite()' method    /**     * Converts an Unix timestamp to a four byte DOS date and time format (date     * in high two bytes, time in low two bytes allowing magnitude comparison).     *     * @param integer $unixtime the current Unix timestamp     *     * @return integer the current date in a four byte DOS format     *     * @access private     */    function unix2DosTime($unixtime = 0)    {        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);        if ($timearray['year'] < 1980) {            $timearray['year']    = 1980;            $timearray['mon']     = 1;            $timearray['mday']    = 1;            $timearray['hours']   = 0;            $timearray['minutes'] = 0;            $timearray['seconds'] = 0;        } // end if        return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) |                ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);    } // end of the 'unix2DosTime()' method    /**     * Adds "file" to archive     *     * @param string  $data file contents     * @param string  $name name of the file in the archive (may contains the path)     * @param integer $time the current timestamp     *     * @access public     *     * @return nothing     */    function addFile($data, $name, $time = 0)    {        $name     = str_replace('\\', '/', $name);        $dtime    = substr("00000000" . dechex($this->unix2DosTime($time)), -8);        $hexdtime = '\x' . $dtime[6] . $dtime[7]                  . '\x' . $dtime[4] . $dtime[5]                  . '\x' . $dtime[2] . $dtime[3]                  . '\x' . $dtime[0] . $dtime[1];        eval('$hexdtime = "' . $hexdtime . '";');        $fr   = "\x50\x4b\x03\x04";        $fr   .= "\x14\x00";            // ver needed to extract        $fr   .= "\x00\x00";            // gen purpose bit flag        $fr   .= "\x08\x00";            // compression method        $fr   .= $hexdtime;             // last mod time and date        // "local file header" segment        $unc_len = strlen($data);        $crc     = crc32($data);        $zdata   = gzcompress($data);        $zdata   = substr(substr($zdata, 0, strlen($zdata) - 4), 2); // fix crc bug        $c_len   = strlen($zdata);        $fr      .= pack('V', $crc);             // crc32        $fr      .= pack('V', $c_len);           // compressed filesize        $fr      .= pack('V', $unc_len);         // uncompressed filesize        $fr      .= pack('v', strlen($name));    // length of filename        $fr      .= pack('v', 0);                // extra field length        $fr      .= $name;        // "file data" segment        $fr .= $zdata;        // echo this entry on the fly, ...        if ( $this -> doWrite) {            echo $fr;        } else {                     // ... OR add this entry to array            $this -> datasec[] = $fr;        }        // now add to central directory record        $cdrec = "\x50\x4b\x01\x02";        $cdrec .= "\x00\x00";                // version made by        $cdrec .= "\x14\x00";                // version needed to extract        $cdrec .= "\x00\x00";                // gen purpose bit flag        $cdrec .= "\x08\x00";                // compression method        $cdrec .= $hexdtime;                 // last mod time & date        $cdrec .= pack('V', $crc);           // crc32        $cdrec .= pack('V', $c_len);         // compressed filesize        $cdrec .= pack('V', $unc_len);       // uncompressed filesize        $cdrec .= pack('v', strlen($name)); // length of filename        $cdrec .= pack('v', 0);             // extra field length        $cdrec .= pack('v', 0);             // file comment length        $cdrec .= pack('v', 0);             // disk number start        $cdrec .= pack('v', 0);             // internal file attributes        $cdrec .= pack('V', 32);            // external file attributes - 'archive' bit set        $cdrec .= pack('V', $this -> old_offset); // relative offset of local header        $this -> old_offset += strlen($fr);        $cdrec .= $name;        // optional extra field, file comment goes here        // save to central directory        $this -> ctrl_dir[] = $cdrec;    } // end of the 'addFile()' method    /**     * Echo central dir if ->doWrite==true, else build string to return     *     * @return  string  if ->doWrite {empty string} else the ZIP file contents     *     * @access public     */    function file()    {        $ctrldir = implode('', $this -> ctrl_dir);        $header = $ctrldir .            $this -> eof_ctrl_dir .            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries "on this disk"            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries overall            pack('V', strlen($ctrldir)) .           // size of central dir            pack('V', $this -> old_offset) .        // offset to start of central dir            "\x00\x00";                             // .zip file comment length        if ( $this -> doWrite ) {       // Send central directory & end ctrl dir to STDOUT            echo $header;            return "";                                   // Return empty string        } else {                        // Return entire ZIP archive as string            $data = implode('', $this -> datasec);            return $data . $header;        }    } // end of the 'file()' method} // end of the 'zipfile' class?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating the footer for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a fieldset for adding a new item, if the user has the privileges. * * @param    string   $docu   String used to create a link to the MySQL docs * @param    string   $priv   Privilege to check for adding a new item * @param    string   $name   MySQL name of the item * * @return   string   An HTML snippet with the link to add a new item */function PMA_RTE_getFooterLinks($docu, $priv, $name){    global $db, $url_query, $ajax_class;    $icon = 'b_' . strtolower($name) . '_add.png';    $retval  = "";    $retval .= "<!-- ADD " . $name . " FORM START -->\n";    $retval .= "<fieldset class='left'>\n";    $retval .= "    <legend>" . __('New'). "</legend>\n";    $retval .= "        <div class='wrap'>\n";    if (PMA_currentUserHasPrivilege($priv, $db)) {        $retval .= "            <a {$ajax_class['add']} ";        $retval .= "href='db_" . strtolower($name) . "s.php";        $retval .= "?$url_query&amp;add_item=1'>";        $retval .= PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('add') . "</a>\n";    } else {        $retval .= "            " . PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('no_create') . "\n";    }    $retval .= "            " . PMA_showMySQLDocu('SQL-Syntax', $docu) . "\n";    $retval .= "        </div>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- ADD " . $name . " FORM END -->\n\n";    return $retval;} // end PMA_RTE_getFooterLinks()/** * Creates a fieldset for adding a new routine, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_RTN_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');}// end PMA_RTN_getFooterLinks()/** * Creates a fieldset for adding a new trigger, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_TRI_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');} // end PMA_TRI_getFooterLinks()/** * Creates a fieldset for adding a new event, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_EVN_getFooterLinks(){    global $db, $url_query;    /**     * For events, we show the usual 'Add event' form and also     * a form for toggling the state of the event scheduler     */    // Init options for the event scheduler toggle functionality    $es_state = PMA_DBI_fetch_value(        "SHOW GLOBAL VARIABLES LIKE 'event_scheduler'",        0,        1    );    $es_state = strtolower($es_state);    $options = array(                    0 => array(                        'label' => __('OFF'),                        'value' => "SET GLOBAL event_scheduler=\"OFF\"",                        'selected' => ($es_state != 'on')                    ),                    1 => array(                        'label' => __('ON'),                        'value' => "SET GLOBAL event_scheduler=\"ON\"",                        'selected' => ($es_state == 'on')                    )               );    // Generate output    $retval  = "<!-- FOOTER LINKS START -->\n";    $retval .= "<div class='doubleFieldset'>\n";    // show the usual footer    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');    $retval .= "    <fieldset class='right'>\n";    $retval .= "        <legend>\n";    $retval .= "            " . __('Event scheduler status') . "\n";    $retval .= "        </legend>\n";    $retval .= "        <div class='wrap'>\n";    // show the toggle button    $retval .= PMA_toggleButton(        "sql.php?$url_query&amp;goto=db_events.php" . urlencode("?db=$db"),        'sql_query',        $options,        'PMA_slidingMessage(data.sql_query);'    );    $retval .= "        </div>\n";    $retval .= "    </fieldset>\n";    $retval .= "    <div style='clear: both;'></div>\n";    $retval .= "</div>";    $retval .= "<!-- FOOTER LINKS END -->\n";    return $retval;} // end PMA_EVN_getFooterLinks()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';// Check parametersPMA_checkParameters(array('db', 'table'));$db_is_information_schema = PMA_is_system_schema($db);/** * Set parameters for links * @deprecated */$url_query = PMA_generate_common_url($db, $table);$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Ensures the database and the table exist (else move to the "parent" script) */require_once './libraries/db_table_exists.lib.php';?>
<?php/** * Functions used to generate GIS visualizations. * * @package PhpMyAdmin *//** * Returns a modified sql query with only the label column * and spatial column(wrapped with 'ASTEXT()' function). * * @param string $sql_query             original sql query * @param array  $visualizationSettings settings for the visualization * * @return the modified sql query. */function PMA_GIS_modifyQuery($sql_query, $visualizationSettings){    $modified_query = 'SELECT ';    $analyzed_query = PMA_SQP_analyze(PMA_SQP_parse($sql_query));    // If select clause is not *    if (trim($analyzed_query[0]['select_expr_clause']) != '*') {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            // Check to see whether an alias has been used on the label column            $is_label_alias = false;            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['alias'] == $visualizationSettings['labelColumn']) {                    $modified_query .= sanitize($select) . ' AS `'                    . $select['alias'] . '`, ';                    $is_label_alias = true;                    break;                }            }            // If no alias have been used on the label column            if (! $is_label_alias) {                foreach ($analyzed_query[0]['select_expr'] as $select) {                    if ($select['column'] == $visualizationSettings['labelColumn']) {                        $modified_query .= sanitize($select) . ', ';                    }                }            }        }        // Check to see whether an alias has been used on the spatial column        $is_spatial_alias = false;        foreach ($analyzed_query[0]['select_expr'] as $select) {            if ($select['alias'] == $visualizationSettings['spatialColumn']) {                $sanitized = sanitize($select);                $modified_query .= 'ASTEXT(' . $sanitized . ') AS `'                . $select['alias'] . '`, ';                // Get the SRID                $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                $is_spatial_alias = true;                break;            }        }        // If no alias have been used on the spatial column        if (! $is_spatial_alias) {            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['column'] == $visualizationSettings['spatialColumn']) {                    $sanitized = sanitize($select);                    $modified_query .= 'ASTEXT(' . $sanitized                        . ') AS `' . $select['column'] . '`, ';                    // Get the SRID                    $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                }            }        }        // If select cluase is *    } else {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            $modified_query .= '`' . $visualizationSettings['labelColumn'] .'`, ';        }        // Wrap the spatial column with 'ASTEXT()' function and add it        $modified_query .= 'ASTEXT(`' . $visualizationSettings['spatialColumn']            . '`) AS `' . $visualizationSettings['spatialColumn'] . '`, ';        // Get the SRID        $modified_query .= 'SRID(`' . $visualizationSettings['spatialColumn']            . '`) AS `srid` ';    }    // Append the rest of the query    $from_pos = stripos($sql_query, 'FROM');    $modified_query .= substr($sql_query, $from_pos);    return $modified_query;}// Local function to sanitize the expression taken// from the results of PMA_SQP_analyze function.function sanitize($select){    $table_col = $select['table_name'] . "." . $select['column'];    $db_table_col = $select['db'] . "." . $select['table_name']        . "." . $select['column'];    if ($select['expr'] == $select['column']) {        return "`" . $select['column'] . "`";    } elseif ($select['expr'] == $table_col) {        return "`" . $select['table_name'] . "`.`" . $select['column'] . "`";    } elseif ($select['expr'] == $db_table_col) {        return "`" . $select['db'] . "`.`" . $select['table_name']            . "`.`" . $select['column'] . "`";    }    return $select['expr'];}/** * Formats a visualization for the GIS query results. * * @param array  $data                   Data for the status chart * @param array  &$visualizationSettings Settings used to generate the chart * @param string $format                 Format of the visulaization * * @return string HTML and JS code for the GIS visualization */function PMA_GIS_visualizationResults($data, &$visualizationSettings, $format){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (! isset($data[0])) {        // empty data        return __('No data found for GIS visualization.');    } else {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($visualizationSettings != null) {            foreach ($visualization->getSettings() as $setting => $val) {                if (! isset($visualizationSettings[$setting])) {                    $visualizationSettings[$setting] = $val;                }            }        }        if ($format == 'svg') {            return $visualization->asSvg();        } elseif ($format == 'png') {            return $visualization->asPng();        } elseif ($format == 'ol') {            return $visualization->asOl();        }    }}/** * Generate visualization for the GIS query results and save it to a file. * * @param array  $data                  data for the status chart * @param array  $visualizationSettings settings used to generate the chart * @param string $format                format of the visulaization * @param string $fileName              file name * * @return file File containing the visualization */function PMA_GIS_saveToFile($data, $visualizationSettings, $format, $fileName){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (isset($data[0])) {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($format == 'svg') {            $visualization->toFileAsSvg($fileName);        } elseif ($format == 'png') {            $visualization->toFileAsPng($fileName);        } elseif ($format == 'pdf') {            $visualization->toFileAsPdf($fileName);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php/** * Handles the visualization of GIS MULTIPOLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multipolygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            // If the polygon doesn't have an inner ring, use polygon itself            if (strpos($polygon, "),(") === false) {                $ring = $polygon;            } else {                // Seperate outer ring and use it to determin min-max                $parts = explode("),(", $polygon);                $ring = $parts[0];            }            $min_max = $this->setMinMax($ring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr,                        $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            $pdf->Polygon($points_arr, 'F*', array(), $color, true);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            $pdf->SetXY($label_point[0], $label_point[1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'class'       => 'multipolygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        $row = '';        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            $row .= '<path d="';            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $row .= $this->_drawPath($polygon, $scale_data);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $row .= $this->_drawPath($outer, $scale_data);                foreach ($inner as $inner_poly) {                    $row .= $this->_drawPath($inner_poly, $scale_data);                }            }            $polygon_options['id'] = $label . rand();            $row .= '"';            foreach ($polygon_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiPolygon(new Array(';        foreach ($polygons as $polygon) {            $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_polygons = isset($gis_data[$index]['MULTIPOLYGON']['no_of_polygons'])            ? $gis_data[$index]['MULTIPOLYGON']['no_of_polygons'] : 1;        if ($no_of_polygons < 1) {            $no_of_polygons = 1;        }        $wkt = 'MULTIPOLYGON(';        for ($k = 0; $k < $no_of_polygons; $k++) {            $no_of_lines = isset($gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'])                ? $gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'] : 1;            if ($no_of_lines < 1) {                $no_of_lines = 1;            }            $wkt .= '(';            for ($i = 0; $i < $no_of_lines; $i++) {                $no_of_points = isset($gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'])                    ? $gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'] : 4;                if ($no_of_points < 4) {                    $no_of_points = 4;                }                $wkt .= '(';                for ($j = 0; $j < $no_of_points; $j++) {                    $wkt .= ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'] : $empty)                        . ' ' . ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'] : $empty) .',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= '),';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        // Determines whether each line ring is an inner ring or an outer ring.        // If it's an inner ring get a point on the surface which can be used to        // correctly classify inner rings to their respective outer rings.        include_once './libraries/gis/pma_gis_polygon.php';        foreach ($row_data['parts'] as $i => $ring) {            $row_data['parts'][$i]['isOuter'] = PMA_GIS_Polygon::isOuterRing($ring['points']);        }        // Find points on surface for inner rings        foreach ($row_data['parts'] as $i => $ring) {            if (! $ring['isOuter']) {                $row_data['parts'][$i]['pointOnSurface']                    = PMA_GIS_Polygon::getPointOnSurface($ring['points']);            }        }        // Classify inner rings to their respective outer rings.        foreach ($row_data['parts'] as $j => $ring1) {            if (! $ring1['isOuter']) {                foreach ($row_data['parts'] as $k => $ring2) {                    if ($ring2['isOuter']) {                        // If the pointOnSurface of the inner ring                        // is also inside the outer ring                        if (PMA_GIS_Polygon::isPointInsidePolygon(                            $ring1['pointOnSurface'], $ring2['points']                        )) {                            if (! isset($ring2['inner'])) {                                $row_data['parts'][$k]['inner'] = array();                            }                            $row_data['parts'][$k]['inner'][] = $j;                        }                    }                }            }        }        $wkt = 'MULTIPOLYGON(';        // for each polygon        foreach ($row_data['parts'] as $ring) {            if ($ring['isOuter']) {                $wkt .= '('; // start of polygon                $wkt .= '('; // start of outer ring                foreach ($ring['points'] as $point) {                    $wkt .= $point['x'] . ' ' . $point['y'] . ',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= ')'; // end of outer ring                // inner rings if any                if (isset($ring['inner'])) {                    foreach ($ring['inner'] as $j) {                        $wkt .= ',('; // start of inner ring                        foreach ($row_data['parts'][$j]['points'] as $innerPoint) {                            $wkt .= $innerPoint['x'] . ' ' . $innerPoint['y'] . ',';                        }                        $wkt = substr($wkt, 0, strlen($wkt) - 1);                        $wkt .= ')';  // end of inner ring                    }                }                $wkt .= '),'; // end of polygon            }        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')'; // end of multipolygon        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTIPOLYGON';            $wkt = $value;        }        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($wkt, 15, (strlen($wkt) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $params[$index]['MULTIPOLYGON']['no_of_polygons'] = count($polygons);        $k = 0;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = 1;                $points_arr = $this->extractPoints($polygon, null);                $no_of_points = count($points_arr);                $params[$index]['MULTIPOLYGON'][$k][0]['no_of_points'] = $no_of_points;                for ($i = 0; $i < $no_of_points; $i++) {                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['x'] = $points_arr[$i][0];                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['y'] = $points_arr[$i][1];                }            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = count($parts);                $j = 0;                foreach ($parts as $ring) {                    $points_arr = $this->extractPoints($ring, null);                    $no_of_points = count($points_arr);                    $params[$index]['MULTIPOLYGON'][$k][$j]['no_of_points'] = $no_of_points;                    for ($i = 0; $i < $no_of_points; $i++) {                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['x'] = $points_arr[$i][0];                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['y'] = $points_arr[$i][1];                    }                    $j++;                }            }            $k++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the PMA_List_Database class * * @package PhpMyAdmin *//** * the list base class */require_once './libraries/List.class.php';/** * handles database lists * * <code> * $PMA_List_Database = new PMA_List_Database($userlink, $controllink); * </code> * * @todo this object should be attached to the PMA_Server object * @todo ? make use of INFORMATION_SCHEMA * @todo ? support --skip-showdatabases and user has only global rights * @access public * @since phpMyAdmin 2.9.10 * @package PhpMyAdmin *//*public*/ class PMA_List_Database extends PMA_List{    /**     * @var mixed   database link resource|object to be used     */    protected $_db_link = null;    /**     * @var mixed   user database link resource|object     */    protected $_db_link_user = null;    /**     * @var mixed   controluser database link resource|object     */    protected $_db_link_control = null;    /**     * @var boolean whether SHOW DATABASES is disabled or not     * @access protected     */    protected $_show_databases_disabled = false;    /**     * @var string command to retrieve databases from server     */    protected $_command = null;    /**     * Constructor     *     * @param mixed   $db_link_user       user database link resource|object     * @param mixed   $db_link_control    control database link resource|object     */    public function __construct($db_link_user = null, $db_link_control = null)    {        $this->_db_link = $db_link_user;        $this->_db_link_user = $db_link_user;        $this->_db_link_control = $db_link_control;        parent::__construct();        $this->build();    }    /**     * checks if the configuration wants to hide some databases     */    protected function _checkHideDatabase()    {        if (empty($GLOBALS['cfg']['Server']['hide_db'])) {            return;        }        foreach ($this->getArrayCopy() as $key => $db) {            if (preg_match('/' . $GLOBALS['cfg']['Server']['hide_db'] . '/', $db)) {                $this->offsetUnset($key);            }        }    }    /**     * retrieves database list from server     *     * @todo    we could also search mysql tables if all fail?     * @param string  $like_db_name   usally a db_name containing wildcards     * @return array     */    protected function _retrieve($like_db_name = null)    {        if ($this->_show_databases_disabled) {            return array();        }        if (null !== $like_db_name) {            $command = "SHOW DATABASES LIKE '" . $like_db_name . "'";        } elseif (null === $this->_command) {            $command = str_replace('#user#', $GLOBALS['cfg']['Server']['user'],                $GLOBALS['cfg']['Server']['ShowDatabasesCommand']);            $this->_command = $command;        } else {            $command = $this->_command;        }        $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);        PMA_DBI_getError();        if ($GLOBALS['errno'] !== 0) {            // failed to get database list, try the control user            // (hopefully there is one and he has SHOW DATABASES right)            $this->_db_link = $this->_db_link_control;            $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);            PMA_DBI_getError();            if ($GLOBALS['errno'] !== 0) {                // failed! we will display a warning that phpMyAdmin could not safely                // retrieve database list, the admin has to setup a control user or                // allow SHOW DATABASES                $GLOBALS['error_showdatabases'] = true;                $this->_show_databases_disabled = true;            }        }        if ($GLOBALS['cfg']['NaturalOrder']) {            natsort($database_list);        } else {            // need to sort anyway, otherwise information_schema            // goes at the top            sort($database_list);        }        return $database_list;    }    /**     * builds up the list     *     */    public function build()    {        if (! $this->_checkOnlyDatabase()) {            $items = $this->_retrieve();            $this->exchangeArray($items);        }        $this->_checkHideDatabase();    }    /**     * checks the only_db configuration     *     * @return  boolean false if there is no only_db, otherwise true     */    protected function _checkOnlyDatabase()    {        if (is_string($GLOBALS['cfg']['Server']['only_db'])         && strlen($GLOBALS['cfg']['Server']['only_db'])) {            $GLOBALS['cfg']['Server']['only_db'] = array(                $GLOBALS['cfg']['Server']['only_db']            );        }        if (! is_array($GLOBALS['cfg']['Server']['only_db'])) {            return false;        }        $items = array();        foreach ($GLOBALS['cfg']['Server']['only_db'] as $each_only_db) {            if ($each_only_db === '*' && ! $this->_show_databases_disabled) {                // append all not already listed dbs to the list                $items = array_merge($items,                    array_diff($this->_retrieve(), $items));                // there can only be one '*', and this can only be last                break;            }            // check if the db name contains wildcard,            // thus containing not escaped _ or %            if (! preg_match('/(^|[^\\\\])(_|%)/', $each_only_db)) {                // ... not contains wildcard                $items[] = PMA_unescape_mysql_wildcards($each_only_db);                continue;            }            if (! $this->_show_databases_disabled) {                $items = array_merge($items, $this->_retrieve($each_only_db));                continue;            }            // @todo induce error, about not using wildcards with SHOW DATABASE disabled?        }        $this->exchangeArray($items);        return true;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        if (strlen($GLOBALS['db'])) {            return $GLOBALS['db'];        }        return $this->getEmpty();    }    /**     * returns array with dbs grouped with extended infos     *     * @param integer $offset     * @param integer $count     * @return  array   db list     */    public function getGroupedDetails($offset, $count)    {        $dbgroups   = array();        if ($GLOBALS['cfg']['ShowTooltip']          && $GLOBALS['cfgRelation']['commwork']) {            $db_tooltips = PMA_getDbComments();        }        if (!$GLOBALS['cfg']['LeftFrameDBTree']) {            $separators = array();        } elseif (is_array($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = $GLOBALS['cfg']['LeftFrameDBSeparator'];        } elseif (!empty($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = array($GLOBALS['cfg']['LeftFrameDBSeparator']);        } else {            $separators = array();        }        foreach ($this->getLimitedItems($offset, $count) as $db) {            // Get comments from PMA comments table            $db_tooltip = '';            if (isset($db_tooltips[$db])) {                $db_tooltip = $db_tooltips[$db];            }            $pos = false;            foreach ($separators as $separator) {                // use strpos instead of strrpos; it seems more common to                // have the db name, the separator, then the rest which                // might contain a separator                // like dbname_the_rest                $pos = strpos($db, $separator, 1);                if ($pos !== false) {                    break;                }            }            if ($pos !== false) {                $group          = substr($db, 0, $pos);                $disp_name_cut  = substr($db, $pos);            } else {                $group          = $db;                $disp_name_cut  = $db;            }            $disp_name  = $db;            if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {                $disp_name      = $db_tooltip;                $disp_name_cut  = $db_tooltip;                $db_tooltip     = $db;            }            $dbgroups[$group][$db] = array(                'name'          => $db,                'disp_name_cut' => $disp_name_cut,                'disp_name'     => $disp_name,                'comment'       => $db_tooltip,            );            if ($GLOBALS['cfg']['Server']['CountTables']) {                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);            }        } // end foreach ($GLOBALS['PMA_List_Database']->items as $db)        return $dbgroups;    }    /**     * returns a part of the items     *     * @param integer $offset     * @param integer $count     * @return  array  some items     */    public function getLimitedItems($offset, $count)    {        return array_slice($this->getArrayCopy(), $offset, $count);    }    /**     * returns html code for list with dbs     *     * @return  string  html code list     */    public function getHtmlListGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<ul id="databaseList" xml:lang="en" dir="ltr">' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<li class="group"><span>' . htmlspecialchars($group) . '</span><ul>' . "\n";                // whether display db_name cut by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<li';                if ($db['name'] == $selected) {                    $return .= ' class="selected"';                }                $return .= '><a';                if (! empty($db['comment'])) {                    $return .= ' title="' . htmlspecialchars($db['comment']) . '"';                }                $return .= ' href="index.php?' . PMA_generate_common_url($db['name'])                    . '" target="_parent">';                if ($cut) {                    $return .= htmlspecialchars($db['disp_name_cut']);                } else {                    $return .= htmlspecialchars($db['disp_name']);                }                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</a></li>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</ul></li>' . "\n";            }        }        $return .= '</ul>';        return $return;    }    /**     * returns html code for select form element with dbs     *     * @todo IE can not handle different text directions in select boxes so,     * as mostly names will be in english, we set the whole selectbox to LTR     * and EN     *     * @return  string  html code select     */    public function getHtmlSelectGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<select name="db" id="lightm_db" xml:lang="en" dir="ltr"'            . ' onchange="if (this.value != \'\') window.parent.openDb(this.value);">' . "\n"            . '<option value="" dir="' . $GLOBALS['text_dir'] . '">'            . '(' . __('Databases') . ') ...</option>' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<optgroup label="' . htmlspecialchars($group)                    . '">' . "\n";                // whether display db_name cuted by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<option value="' . htmlspecialchars($db['name']) . '"'                    .' title="' . htmlspecialchars($db['comment']) . '"';                if ($db['name'] == $selected || (PMA_DRIZZLE && strtolower($db['name']) == strtolower($selected))) {                    $return .= ' selected="selected"';                }                $return .= '>' . htmlspecialchars($cut ? $db['disp_name_cut'] : $db['disp_name']);                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</option>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</optgroup>' . "\n";            }        }        $return .= '</select>';        return $return;    }    /**     * this is just a backup, if all is fine this can be deleted later     *     * @deprecated     */    protected function _checkAgainstPrivTables()    {        // 1. get allowed dbs from the "mysql.db" table        // User can be blank (anonymous user)        $local_query = "            SELECT DISTINCT `Db` FROM `mysql`.`db`            WHERE `Select_priv` = 'Y'            AND `User`            IN ('" . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . "', '')";        $tmp_mydbs = PMA_DBI_fetch_result($local_query, null, null,            $GLOBALS['controllink']);        if ($tmp_mydbs) {            // Will use as associative array of the following 2 code            // lines:            //   the 1st is the only line intact from before            //     correction,            //   the 2nd replaces $dblist[] = $row['Db'];            // Code following those 2 lines in correction continues            // populating $dblist[], as previous code did. But it is            // now populated with actual database names instead of            // with regular expressions.            $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $GLOBALS['controllink']);            // all databases cases - part 2            if (isset($tmp_mydbs['%'])) {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $dblist[] = $tmp_row[0];                } // end while            } else {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $tmp_db = $tmp_row[0];                    if (isset($tmp_mydbs[$tmp_db]) && $tmp_mydbs[$tmp_db] == 1) {                        $dblist[]           = $tmp_db;                        $tmp_mydbs[$tmp_db] = 0;                    } elseif (! isset($dblist[$tmp_db])) {                        foreach ($tmp_mydbs as $tmp_matchpattern => $tmp_value) {                            // fixed bad regexp                            // TODO: db names may contain characters                            //       that are regexp instructions                            $re        = '(^|(\\\\\\\\)+|[^\])';                            $tmp_regex = preg_replace('/' . addcslashes($re, '/') . '%/', '\\1.*', preg_replace('/' . addcslashes($re, '/') . '_/', '\\1.{1}', $tmp_matchpattern));                            // Fixed db name matching                            // 2000-08-28 -- Benjamin Gandon                            if (preg_match('/^' . addcslashes($tmp_regex, '/') . '$/', $tmp_db)) {                                $dblist[] = $tmp_db;                                break;                            }                        } // end while                    } // end if ... elseif ...                } // end while            } // end else            PMA_DBI_free_result($tmp_alldbs);            unset($tmp_mydbs);        } // end if        // 2. get allowed dbs from the "mysql.tables_priv" table        $local_query = 'SELECT DISTINCT Db FROM mysql.tables_priv WHERE Table_priv LIKE \'%Select%\' AND User = \'' . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . '\'';        $rs          = PMA_DBI_try_query($local_query, $GLOBALS['controllink']);        if ($rs && @PMA_DBI_num_rows($rs)) {            while ($row = PMA_DBI_fetch_assoc($rs)) {                if (!in_array($row['Db'], $dblist)) {                    $dblist[] = $row['Db'];                }            } // end while            PMA_DBI_free_result($rs);        } // end if    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';/** * Handles some variables that may have been sent by the calling script * Note: this can be called also from the db panel to get the privileges of *       a db, in which case we want to keep displaying the tabs of *       the Database panel */if (empty($viewing_mode)) {    $db = $table = '';}/** * Set parameters for links */$url_query = PMA_generate_common_url($db);/** * Defines the urls to return to in case of error in a sql statement */$err_url = 'main.php' . $url_query;/** * Displays the headers */require_once './libraries/header.inc.php';/** * @global boolean Checks for superuser privileges */$is_superuser = PMA_isSuperuser();// now, select the mysql dbif ($is_superuser && !PMA_DRIZZLE) {    PMA_DBI_select_db('mysql', $userlink);}/** * @global array binary log files */$binary_logs = PMA_DRIZZLE    ? null    : PMA_DBI_fetch_result('SHOW MASTER LOGS', 'Log_name', null, null, PMA_DBI_QUERY_STORE);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Charset conversion functions. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}define('PMA_CHARSET_NONE', 0);define('PMA_CHARSET_ICONV', 1);define('PMA_CHARSET_RECODE', 2);define('PMA_CHARSET_ICONV_AIX', 3);// Finally detect which function we will use:if ($cfg['RecodingEngine'] == 'iconv') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('iconv');    }} elseif ($cfg['RecodingEngine'] == 'recode') {    if (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('recode');    }} elseif ($cfg['RecodingEngine'] == 'auto') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } elseif (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;    }} else {    $PMA_recoding_engine = PMA_CHARSET_NONE;}/* Load AIX iconv wrapper if needed */if ($PMA_recoding_engine == PMA_CHARSET_ICONV_AIX) {    include_once './libraries/iconv_wrapper.lib.php';}/** * Converts encoding of text according to parameters with detected * conversion function. * * @param string   source charset * @param string   target charset * @param string   what to convert * * @return  string   converted text * * @access  public * */function PMA_convert_string($src_charset, $dest_charset, $what){    if ($src_charset == $dest_charset) {        return $what;    }    switch ($GLOBALS['PMA_recoding_engine']) {        case PMA_CHARSET_RECODE:            return recode_string($src_charset . '..'  . $dest_charset, $what);        case PMA_CHARSET_ICONV:            return iconv($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        case PMA_CHARSET_ICONV_AIX:            return PMA_aix_iconv_wrapper($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        default:            return $what;    }} //  end of the "PMA_convert_string()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * get some globals */require './libraries/common.inc.php';/* Theme Select */$path_to_themes = $cfg['ThemePath'] . '/';/* set language and charset */require './libraries/header_http.inc.php';/* HTML header */$page_title = 'phpMyAdmin - ' . __('Theme');require './libraries/header_meta_style.inc.php';require './libraries/header_scripts.inc.php';?></head><body id="bodythemes"><h1>phpMyAdmin - <?php echo __('Theme'); ?></h1><p><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/home_page/themes.php'); ?>#pma_<?php echo preg_replace('/([0-9]*)\.([0-9]*)\..*/', '\1_\2', PMA_VERSION); ?>"><?php echo __('Get more themes!'); ?></a></p><?php$_SESSION['PMA_Theme_Manager']->printPreviews();?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * To define form field, use the notatnion below: * $forms['Form group']['Form name'] = array('Option/path'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin */$forms = array();$forms['Features']['General'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'LoginCookieValidity',    'ReplaceHelpImg',    'Servers/1/only_db', // saves to Server/only_db    'Servers/1/hide_db', // saves to Server/hide_db    'SkipLockedTables',    'DisableMultiTableMaintenance',    'MaxDbList',    'MaxTableList',    'ShowHint');$forms['Features']['Text_fields'] = array(    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');// settings from this form are treated specially, see prefs_forms.php and user_preferences.lib.php$forms['Features']['Developer'] = array(    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array(    'SQLQuery/Edit',    'SQLQuery/Explain',    'SQLQuery/ShowAsPHP',    'SQLQuery/Validate',    'SQLQuery/Refresh');$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'PropertiesIconic',    'ShowAll',    'MaxRows',    'Order',    'DisplayBinaryAsHex',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable');$forms['Import']['Import_defaults'] = array(    'Import/format',    'Import/charset',    'Import/allow_interrupt',    'Import/skip_queries');$forms['Import']['Sql'] = array(    'Import/sql_compatibility',    'Import/sql_no_auto_value_on_zero');$forms['Import']['Csv'] = array(    ':group:' . __('CSV'),        'Import/csv_replace',        'Import/csv_ignore',        'Import/csv_terminated',        'Import/csv_enclosed',        'Import/csv_escaped',        'Import/csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'Import/ldi_replace',        'Import/ldi_ignore',        'Import/ldi_terminated',        'Import/ldi_enclosed',        'Import/ldi_escaped',        'Import/ldi_local_option');$forms['Import']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Import/ods_col_names',        'Import/ods_empty_rows',        'Import/ods_recognize_percentages',        'Import/ods_recognize_currency');$forms['Export']['Export_defaults'] = array(    'Export/method',    ':group:' . __('Quick'),        'Export/quick_export_onserver',        'Export/quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'Export/format',        'Export/compression',        'Export/charset',        'Export/asfile' => ':group',            'Export/onserver',            'Export/onserver_overwrite',            ':group:end',        'Export/file_template_table',        'Export/file_template_database',        'Export/file_template_server');$forms['Export']['Sql'] = array(    'Export/sql_include_comments' => ':group',        'Export/sql_dates',        'Export/sql_relation',        'Export/sql_mime',        ':group:end',    'Export/sql_use_transaction',    'Export/sql_disable_fk',    'Export/sql_compatibility',    ':group:' . __('Database export options'),        'Export/sql_drop_database',        'Export/sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'Export/sql_drop_table',        'Export/sql_procedure_function',        'Export/sql_create_table_statements' => ':group',            'Export/sql_if_not_exists',            'Export/sql_auto_increment',            ':group:end',        'Export/sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'Export/sql_delayed',        'Export/sql_ignore',        'Export/sql_type',        'Export/sql_insert_syntax',        'Export/sql_max_query_size',        'Export/sql_hex_for_blob',        'Export/sql_utc_time');$forms['Export']['CodeGen'] = array(    'Export/codegen_format');$forms['Export']['Csv'] = array(    ':group:' . __('CSV'),        'Export/csv_separator',        'Export/csv_enclosed',        'Export/csv_escaped',        'Export/csv_terminated',        'Export/csv_null',        'Export/csv_removeCRLF',        'Export/csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'Export/excel_null',        'Export/excel_removeCRLF',        'Export/excel_columns',        'Export/excel_edition');$forms['Export']['Latex'] = array(    'Export/latex_caption',    'Export/latex_structure_or_data',    ':group:' . __('Structure'),        'Export/latex_structure_caption',        'Export/latex_structure_continued_caption',        'Export/latex_structure_label',        'Export/latex_relation',        'Export/latex_comments',        'Export/latex_mime',        ':group:end',    ':group:' . __('Data'),        'Export/latex_columns',        'Export/latex_data_caption',        'Export/latex_data_continued_caption',        'Export/latex_data_label',        'Export/latex_null');$forms['Export']['Microsoft_Office'] = array(    ':group:' . __('Microsoft Word 2000'),        'Export/htmlword_structure_or_data',        'Export/htmlword_null',        'Export/htmlword_columns');$forms['Export']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Export/ods_columns',        'Export/ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'Export/odt_structure_or_data',        ':group:' . __('Structure'),            'Export/odt_relation',            'Export/odt_comments',            'Export/odt_mime',            ':group:end',        ':group:' . __('Data'),            'Export/odt_columns',            'Export/odt_null');$forms['Export']['Texy'] = array(    'Export/texytext_structure_or_data',    ':group:' . __('Data'),        'Export/texytext_null',        'Export/texytext_columns');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__link_info(){    return array(        'info' => __('Displays a link to download this image.'),        );}/** * */function PMA_transformation_image_jpeg__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]">[BLOB]</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
