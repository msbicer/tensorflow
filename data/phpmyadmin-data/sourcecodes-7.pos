<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/** * Column types and functions supported by MySQL * * @package PhpMyAdmin */// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INT',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'TINYINT',        'SMALLINT',        'MEDIUMINT',        'INT',        'BIGINT',        '-',        'DECIMAL',        'FLOAT',        'DOUBLE',        'REAL',        '-',        'BIT',        'BOOLEAN',        'SERIAL',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',        'YEAR',    ),    // Text    'STRING' => array(        'CHAR',        'VARCHAR',        '-',        'TINYTEXT',        'TEXT',        'MEDIUMTEXT',        'LONGTEXT',        '-',        'BINARY',        'VARBINARY',        '-',        'TINYBLOB',        'MEDIUMBLOB',        'BLOB',        'LONGBLOB',        '-',        'ENUM',        'SET',    ),    'SPATIAL' => array(        'GEOMETRY',        'POINT',        'LINESTRING',        'POLYGON',        'MULTIPOINT',        'MULTILINESTRING',        'MULTIPOLYGON',        'GEOMETRYCOLLECTION',    ),);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'BINARY',   'UNSIGNED',   'UNSIGNED ZEROFILL',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'TINYINT'   => 'FUNC_NUMBER',        'SMALLINT'  => 'FUNC_NUMBER',        'MEDIUMINT' => 'FUNC_NUMBER',        'INT'       => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'FLOAT'     => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'REAL'      => 'FUNC_NUMBER',        'BIT'       => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'YEAR'      => 'FUNC_DATE',        'CHAR'       => 'FUNC_CHAR',        'VARCHAR'    => 'FUNC_CHAR',        'TINYTEXT'   => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'MEDIUMTEXT' => 'FUNC_CHAR',        'LONGTEXT'   => 'FUNC_CHAR',        'BINARY'     => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'TINYBLOB'   => 'FUNC_CHAR',        'MEDIUMBLOB' => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'LONGBLOB'   => 'FUNC_CHAR',        'ENUM'       => '',        'SET'        => '',        'GEOMETRY'           => 'FUNC_SPATIAL',        'POINT'              => 'FUNC_SPATIAL',        'LINESTRING'         => 'FUNC_SPATIAL',        'POLYGON'            => 'FUNC_SPATIAL',        'MULTIPOINT'         => 'FUNC_SPATIAL',        'MULTILINESTRING'    => 'FUNC_SPATIAL',        'MULTIPOLYGON'       => 'FUNC_SPATIAL',        'GEOMETRYCOLLECTION' => 'FUNC_SPATIAL',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'DES_DECRYPT',            'DES_ENCRYPT',            'ENCRYPT',            'HEX',            'INET_NTOA',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'OLD_PASSWORD',            'PASSWORD',            'QUOTE',            'REVERSE',            'RTRIM',            'SHA1',            'SOUNDEX',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SEC_TO_TIME',            'SYSDATE',            'TIME',            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_LENGTH',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'INET_ATON',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TO_SECONDS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            'UUID_SHORT',            'WEEK',            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),        'FUNC_SPATIAL' => array(            'GeomFromText',            'GeomFromWKB',            'GeomCollFromText',            'LineFromText',            'MLineFromText',            'PointFromText',            'MPointFromText',            'PolyFromText',            'MPolyFromText',            'GeomCollFromWKB',            'LineFromWKB',            'MLineFromWKB',            'PointFromWKB',            'MPointFromWKB',            'PolyFromWKB',            'MPolyFromWKB',        ),    );    // $restrict_functions holds all known functions, remove these that are unavailable on current server    if (PMA_MYSQL_INT_VERSION < 50500) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('TO_SECONDS'));    }    if (PMA_MYSQL_INT_VERSION < 50120) {        $restrict_functions['FUNC_NUMBER'] = array_diff($restrict_functions['FUNC_NUMBER'], array('UUID_SHORT'));    }    if (empty($cfg['RestrictFunctions'])) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            if ($cat != 'FUNC_SPATIAL') {                $cfg['Functions'] = array_merge($cfg['Functions'], $functions);            }        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file generator * * @package PhpMyAdmin-setup *//** * Config file generation class * * @package PhpMyAdmin */class ConfigGenerator{    /**     * Creates config file     *     * @return string     */    public static function getConfigFile()    {        $cf = ConfigFile::getInstance();        $crlf = (isset($_SESSION['eol']) && $_SESSION['eol'] == 'win') ? "\r\n" : "\n";        $c = $cf->getConfig();        // header        $ret = '<?php' . $crlf            . '/*' . $crlf            . ' * Generated configuration file' . $crlf            . ' * Generated by: phpMyAdmin '                    . $GLOBALS['PMA_Config']->get('PMA_VERSION')                    . ' setup script' . $crlf            . ' * Date: ' . date(DATE_RFC1123) . $crlf            . ' */' . $crlf . $crlf;        // servers        if ($cf->getServerCount() > 0) {            $ret .= "/* Servers configuration */$crlf\$i = 0;" . $crlf . $crlf;            foreach ($c['Servers'] as $id => $server) {                $ret .= '/* Server: ' . strtr($cf->getServerName($id) . " [$id] ", '*/', '-') . "*/" . $crlf                    . '$i++;' . $crlf;                foreach ($server as $k => $v) {                    $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                    $ret .= "\$cfg['Servers'][\$i]['$k'] = "                        . (is_array($v) && self::_isZeroBasedArray($v)                                ? self::_exportZeroBasedArray($v, $crlf)                                : var_export($v, true))                        . ';' . $crlf;                }                $ret .= $crlf;            }            $ret .= '/* End of servers configuration */' . $crlf . $crlf;        }        unset($c['Servers']);        // other settings        $persistKeys = $cf->getPersistKeysMap();        foreach ($c as $k => $v) {            $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);            $ret .= self::_getVarExport($k, $v, $crlf);            if (isset($persistKeys[$k])) {                unset($persistKeys[$k]);            }        }        // keep 1d array keys which are present in $persist_keys (config.values.php)        foreach (array_keys($persistKeys) as $k) {            if (strpos($k, '/') === false) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= self::_getVarExport($k, $cf->getDefault($k), $crlf);            }        }        $ret .= '?>';        return $ret;    }    /**     * Returns exported configuration variable     *     * @param string $var_name     * @param mixed  $var_value     * @param string $crlf     * @return string     */    private static function _getVarExport($var_name, $var_value, $crlf)    {        if (!is_array($var_value) || empty($var_value)) {            return "\$cfg['$var_name'] = " . var_export($var_value, true) . ';' . $crlf;        }        $ret = '';        if (self::_isZeroBasedArray($var_value)) {            $ret = "\$cfg['$var_name'] = " . self::_exportZeroBasedArray($var_value, $crlf)                . ';' . $crlf;        } else {            // string keys: $cfg[key][subkey] = value            foreach ($var_value as $k => $v) {                $k = preg_replace('/[^A-Za-z0-9_]/', '_', $k);                $ret .= "\$cfg['$var_name']['$k'] = " . var_export($v, true) . ';' . $crlf;            }        }        return $ret;    }    /**     * Check whether $array is a continuous 0-based array     *     * @param array $array     * @return boolean     */    private static function _isZeroBasedArray(array $array)    {        for ($i = 0; $i < count($array); $i++) {            if (! isset($array[$i])) {                return false;            }        }        return true;    }    /**     * Exports continuous 0-based array     *     * @param array $array     * @param string $crlf     * @return string     */    private static function _exportZeroBasedArray(array $array, $crlf)    {        $retv = array();        foreach ($array as $v) {            $retv[] = var_export($v, true);        }        $ret = "array(";        if (count($retv) <= 4) {            // up to 4 values - one line            $ret .= implode(', ', $retv);        } else {            // more than 4 values - value per line            $imax = count($retv)-1;            for ($i = 0; $i <= $imax; $i++) {                $ret .= ($i < $imax ? ($i > 0 ? ',' : '') : '') . $crlf . '    ' . $retv[$i];            }        }        $ret .= ')';        return $ret;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */$GLOBALS['unparsed_sql'] = $sql_query;$parsed_sql = PMA_SQP_parse($sql_query);$analyzed_sql = PMA_SQP_analyze($parsed_sql);// for bug 780516: now that we use case insensitive preg_match// or flags from the analyser, do not put back the reformatted query// into $sql_query, to make this kind of query work without// capitalizing keywords://// CREATE TABLE SG_Persons (//  id int(10) unsigned NOT NULL auto_increment,//  first varchar(64) NOT NULL default '',//  PRIMARY KEY  (`id`)// )// check for a real SELECT ... FROM$is_select = isset($analyzed_sql[0]['queryflags']['select_from']);// If the query is a Select, extract the db and table names and modify// $db and $table, to have correct page headers, links and left frame.// db and table name may be enclosed with backquotes, db is optionnal,// query may contain aliases./** * @todo if there are more than one table name in the Select: * - do not extract the first table name * - do not show a table name in the page header * - do not display the sub-pages links) */if ($is_select) {    $prev_db = $db;    if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name'])) {        $table = $analyzed_sql[0]['table_ref'][0]['table_true_name'];    }    if (isset($analyzed_sql[0]['table_ref'][0]['db'])      && strlen($analyzed_sql[0]['table_ref'][0]['db'])) {        $db    = $analyzed_sql[0]['table_ref'][0]['db'];    } else {        $db = $prev_db;    }    // Nijel: don't change reload, if we already decided to reload in import    if (empty($reload)) {        $reload  = ($db == $prev_db) ? 0 : 1;    }}?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table search tab * * display table search form, create SQL query from form data * and include sql.php to execute it * * @todo display search form again if no results from previous search * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'tbl_select.js';$GLOBALS['js_include'][] = 'tbl_change.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'gis_data_editor.js';$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));$geom_types = PMA_getGISDatatypes();/** * Not selection yet required -> displays the selection form */if (! isset($param) || $param[0] == '') {    // Gets some core libraries    include_once './libraries/tbl_common.php';    //$err_url   = 'tbl_select.php' . $err_url;    $url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';    /**     * Gets tables informations     */    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    include_once './libraries/tbl_links.inc.php';    if (! isset($goto)) {        $goto = $GLOBALS['cfg']['DefaultTabTable'];    }    // Defines the url to return to in case of error in the next sql statement    $err_url   = $goto . '?' . PMA_generate_common_url($db, $table);    // Gets the list and number of fields    list($fields_list, $fields_type, $fields_collation, $fields_null, $geom_column_present) = PMA_tbl_getFields($db, $table);    $fields_cnt = count($fields_list);    // retrieve keys into foreign fields, if any    // check also foreigners even if relwork is FALSE (to get    // foreign keys from innodb)    $foreigners = PMA_getForeigners($db, $table);    ?><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');?>        <form method="post" action="tbl_select.php" name="insertForm" id="tbl_search_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_select.php" /><fieldset id="fieldset_table_search"><fieldset id="fieldset_table_qbe">    <legend><?php echo __('Do a "query by example" (wildcard: "%")') ?></legend>    <table class="data">    <?php echo PMA_tbl_setTableHeader($geom_column_present); ?>    <tbody>    <?php    $odd_row = true;    for ($i = 0; $i < $fields_cnt; $i++) {        ?>        <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">            <?php            // if 'Function' column is present            if ($geom_column_present) {                echo('<td>');                // if a geometry column                if (in_array($fields_type[$i], $geom_types)) {                    echo('<select class="geom_func" name="geom_func['. $i .']">');                        // get the relevant list of functions                        $funcs = PMA_getGISFunctions($fields_type[$i], true, true);                        foreach ($funcs as $func_name => $func) {                            $name =  isset($func['display']) ? $func['display'] : $func_name;                            echo('<option value="' . htmlspecialchars($name) . '">'                                . htmlspecialchars($name) . '</option>');                        }                    echo('</select>');                } else {                    echo('&nbsp;');                }                echo('</td>');            }            ?>            <th><?php echo htmlspecialchars($fields_list[$i]); ?></th>            <td><?php echo htmlspecialchars($fields_type[$i]); ?></td>            <td><?php echo $fields_collation[$i]; ?></td>            <td><select name="func[]">        <?php        if (strncasecmp($fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' . htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } elseif (preg_match('@char|blob|text|set@i', $fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {            echo "\n" . '                        '               . '<option value="' . htmlspecialchars($fc) . '">'               . htmlspecialchars($fc) . '</option>';            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        } // end if... else...        if ($fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                echo "\n" . '                        '                   . '<option value="' .  htmlspecialchars($fc) . '">'                   . htmlspecialchars($fc) . '</option>';            }        }        ?>                </select>            </td>            <td>        <?php        $field = $fields_list[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        echo PMA_getForeignFields_Values($foreigners, $foreignData, $field, $fields_type, $i, $db, $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', true);        ?>            <input type="hidden" name="names[<?php echo $i; ?>]"                value="<?php echo htmlspecialchars($fields_list[$i]); ?>" />            <input type="hidden" name="types[<?php echo $i; ?>]"                value="<?php echo $fields_type[$i]; ?>" />            <input type="hidden" name="collations[<?php echo $i; ?>]"                value="<?php echo $fields_collation[$i]; ?>" />        </td>    </tr>        <?php    } // end for    ?>    </tbody>    </table><div id="gis_editor"></div><div id="popup_background"></div></fieldset><?php    PMA_generate_slider_effect('searchoptions', __('Options'));?><fieldset id="fieldset_select_fields">    <legend><?php echo __('Select columns (at least one):'); ?></legend>    <select name="param[]" size="<?php echo min($fields_cnt, 10); ?>"        multiple="multiple">    <?php    // Displays the list of the fields    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '"'            .' selected="selected">' . htmlspecialchars($each_field)            .'</option>' . "\n";    }    ?>    </select>    <input type="checkbox" name="distinct" value="DISTINCT" id="oDistinct" />    <label for="oDistinct">DISTINCT</label></fieldset><fieldset id="fieldset_search_conditions">    <legend><?php echo '<em>' . __('Or') . '</em> ' . __('Add search conditions (body of the "where" clause):'); ?></legend><?php echo PMA_showMySQLDocu('SQL-Syntax', 'Functions'); ?><input type="text" name="where" class="textfield" size="64" /></fieldset><fieldset id="fieldset_limit_rows">    <legend><?php echo __('Number of rows per page'); ?></legend>    <input type="text" size="4" name="session_max_rows"        value="<?php echo $GLOBALS['cfg']['MaxRows']; ?>" class="textfield" /></fieldset><fieldset id="fieldset_display_order">    <legend><?php echo __('Display order:'); ?></legend>    <select name="orderField">        <option value="--nil--"></option>    <?php    foreach ($fields_list as $each_field) {        echo '        '            .'<option value="' . htmlspecialchars($each_field) . '">'            .htmlspecialchars($each_field) . '</option>' . "\n";    } // end for    ?>    </select><?php    $choices = array(        'ASC'  => __('Ascending'),        'DESC' => __('Descending')    );    PMA_display_html_radio('order', $choices, 'ASC', false, true, "formelement");    unset($choices);?></fieldset><br style="clear: both;"/></div></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="submit" value="<?php echo __('Go'); ?>" /></fieldset></form><div id="sqlqueryresults"></div>    <?php    include './libraries/footer.inc.php';?></fieldset><?php} else {    /**     * Selection criteria have been submitted -> do the work     */    // Builds the query    $sql_query = 'SELECT ' . (isset($distinct) ? 'DISTINCT ' : '');    // if all fields were selected to display, we do a SELECT *    // (more efficient and this helps prevent a problem in IE    // if one of the rows is edited and we come back to the Select results)    if (count($param) == $max_number_of_fields) {        $sql_query .= '* ';    } else {        $param = PMA_backquote($param);        $sql_query .= implode(', ', $param);    } // end if    // avoid a loop, for example when $cfg['DefaultTabTable'] is set    // to 'tbl_select.php'    unset($param);    $sql_query .= ' FROM ' . PMA_backquote($table);    // The where clause    if (trim($where) != '') {        $sql_query .= ' WHERE ' . $where;    } else {        $w = $charsets = array();        $cnt_func = count($func);        reset($func);        while (list($i, $func_type) = each($func)) {            list($charsets[$i]) = explode('_', $collations[$i]);            $unaryFlag =  (isset($GLOBALS['cfg']['UnaryOperators'][$func_type]) && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1) ? true : false;            $tmp_geom_func = isset($geom_func[$i]) ? $geom_func[$i] : null;            $whereClause = PMA_tbl_search_getWhereClause($fields[$i], $names[$i], $types[$i], $collations[$i], $func_type, $unaryFlag, $tmp_geom_func);            if($whereClause)                $w[] = $whereClause;            } // end for        if ($w) {            $sql_query .= ' WHERE ' . implode(' AND ', $w);        }    } // end if    if ($orderField != '--nil--') {        $sql_query .= ' ORDER BY ' . PMA_backquote($orderField) . ' ' . $order;    } // end if    include './sql.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle row specifc actions like edit, delete, export * * @package PhpMyAdmin *//** * do not globalize/import request variables * can only be enabled if all included files are switched superglobals too * but leave this here to show that this file is 'superglobalized'define('PMA_NO_VARIABLES_IMPORT', true); *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';/** * No rows were selected => show again the query and tell that user. */if (! PMA_isValid($_REQUEST['rows_to_delete'], 'array') && ! isset($_REQUEST['mult_btn'])) {    $disp_message = __('No rows selected');    $disp_query = '';    include './sql.php';    include './libraries/footer.inc.php';}if (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];// workaround for IE problem:} elseif (isset($_REQUEST['submit_mult_delete_x'])) {    $submit_mult = 'row_delete';} elseif (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'row_edit';} elseif (isset($_REQUEST['submit_mult_export_x'])) {    $submit_mult = 'row_export';}// If the 'Ask for confirmation' button was pressed, this can only come// from 'delete' mode, so we set it straight away.if (isset($_REQUEST['mult_btn'])) {    $submit_mult = 'row_delete';}switch($submit_mult) {    case 'row_delete':    case 'row_edit':    case 'row_export':        // leave as is        break;    case 'export':        $submit_mult = 'row_export';        break;    case 'delete':        $submit_mult = 'row_delete';        break;    default:    case 'edit':        $submit_mult = 'row_edit';        break;}if (!empty($submit_mult)) {    switch($submit_mult) {        case 'row_edit':            // As we got the rows to be edited from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_change.php';            include './tbl_change.php';            break;        case 'row_export':            // Needed to allow SQL export            $single_table = true;            // As we got the rows to be exported from the            // 'rows_to_delete' checkbox, we use the index of it as the            // indicating WHERE clause. Then we build the array which is used            // for the tbl_change.php script.            $where_clause = array();            foreach ($_REQUEST['rows_to_delete'] as $i_where_clause => $del_query) {                $where_clause[] = urldecode($i_where_clause);            }            $active_page = 'tbl_export.php';            include './tbl_export.php';            break;        case 'row_delete':        default:            $action = 'tbl_row_action.php';            $err_url = 'tbl_row_action.php' . PMA_generate_common_url($GLOBALS['url_params']);            if (! isset($_REQUEST['mult_btn'])) {                $original_sql_query = $sql_query;                if (! empty($url_query)) {                    $original_url_query = $url_query;                }            }            include './libraries/mult_submits.inc.php';            $_url_params = $GLOBALS['url_params'];            $_url_params['goto'] = 'tbl_sql.php';            $url_query = PMA_generate_common_url($_url_params);            /**             * Show result of multi submit operation             */            // sql_query is not set when user does not confirm multi-delete            if ((!empty($submit_mult) || isset($_REQUEST['mult_btn'])) && ! empty($sql_query)) {                $disp_message = __('Your SQL query has been executed successfully');                $disp_query = $sql_query;            }            if (isset($original_sql_query)) {                $sql_query = $original_sql_query;            }            if (isset($original_url_query)) {                $url_query = $original_url_query;            }            // this is because sql.php could call tbl_structure            // which would think it needs to call mult_submits.inc.php:            unset($submit_mult, $_REQUEST['mult_btn']);            $active_page = 'sql.php';            include './sql.php';            /**             * Displays the footer             */            include './libraries/footer.inc.php';            break;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';$_add_user_error = false;require './libraries/server_common.inc.php';if ($GLOBALS['cfg']['AjaxEnable']) {    $conditional_class = 'ajax';} else {    $conditional_class = '';}/** * Messages are built using the message name */$strPrivDescAllPrivileges = __('Includes all privileges except GRANT.');$strPrivDescAlter = __('Allows altering the structure of existing tables.');$strPrivDescAlterRoutine = __('Allows altering and dropping stored routines.');$strPrivDescCreateDb = __('Allows creating new databases and tables.');$strPrivDescCreateRoutine = __('Allows creating stored routines.');$strPrivDescCreateTbl = __('Allows creating new tables.');$strPrivDescCreateTmpTable = __('Allows creating temporary tables.');$strPrivDescCreateUser = __('Allows creating, dropping and renaming user accounts.');$strPrivDescCreateView = __('Allows creating new views.');$strPrivDescDelete = __('Allows deleting data.');$strPrivDescDropDb = __('Allows dropping databases and tables.');$strPrivDescDropTbl = __('Allows dropping tables.');$strPrivDescEvent = __('Allows to set up events for the event scheduler');$strPrivDescExecute = __('Allows executing stored routines.');$strPrivDescFile = __('Allows importing data from and exporting data into files.');$strPrivDescGrant = __('Allows adding users and privileges without reloading the privilege tables.');$strPrivDescIndex = __('Allows creating and dropping indexes.');$strPrivDescInsert = __('Allows inserting and replacing data.');$strPrivDescLockTables = __('Allows locking tables for the current thread.');$strPrivDescMaxConnections = __('Limits the number of new connections the user may open per hour.');$strPrivDescMaxQuestions = __('Limits the number of queries the user may send to the server per hour.');$strPrivDescMaxUpdates = __('Limits the number of commands that change any table or database the user may execute per hour.');$strPrivDescMaxUserConnections = __('Limits the number of simultaneous connections the user may have.');$strPrivDescProcess = __('Allows viewing processes of all users');$strPrivDescReferences = __('Has no effect in this MySQL version.');$strPrivDescReload = __('Allows reloading server settings and flushing the server\'s caches.');$strPrivDescReplClient = __('Allows the user to ask where the slaves / masters are.');$strPrivDescReplSlave = __('Needed for the replication slaves.');$strPrivDescSelect = __('Allows reading data.');$strPrivDescShowDb = __('Gives access to the complete list of databases.');$strPrivDescShowView = __('Allows performing SHOW CREATE VIEW queries.');$strPrivDescShutdown = __('Allows shutting down the server.');$strPrivDescSuper = __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.');$strPrivDescTrigger = __('Allows creating and dropping triggers');$strPrivDescUpdate = __('Allows changing data.');$strPrivDescUsage = __('No privileges.');/** * Checks if a dropdown box has been used for selecting a database / table */if (PMA_isValid($_REQUEST['pred_tablename'])) {    $tablename = $_REQUEST['pred_tablename'];    unset($pred_tablename);} elseif (PMA_isValid($_REQUEST['tablename'])) {    $tablename = $_REQUEST['tablename'];} else {    unset($tablename);}if (PMA_isValid($_REQUEST['pred_dbname'])) {    $dbname = $_REQUEST['pred_dbname'];    unset($pred_dbname);} elseif (PMA_isValid($_REQUEST['dbname'])) {    $dbname = $_REQUEST['dbname'];} else {    unset($dbname);    unset($tablename);}if (isset($dbname)) {    $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';    if (isset($tablename)) {        $db_and_table .= PMA_backquote($tablename);    } else {        $db_and_table .= '*';    }} else {    $db_and_table = '*.*';}// check if given $dbname is a wildcard or notif (isset($dbname)) {    //if (preg_match('/\\\\(?:_|%)/i', $dbname)) {    if (preg_match('/(?<!\\\\)(?:_|%)/i', $dbname)) {        $dbname_is_wildcard = true;    } else {        $dbname_is_wildcard = false;    }}/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"       . PMA_getIcon('b_usrlist.png')       . __('Privileges') . "\n"       . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}$random_n = mt_rand(0, 1000000); // a random number that will be appended to the id of the user forms/** * Escapes wildcard in a database+table specification * before using it in a GRANT statement. * * Escaping a wildcard character in a GRANT is only accepted at the global * or database level, not at table level; this is why I remove * the escaping character. Internally, in mysql.tables_priv.Db there are * no escaping (for example test_db) but in mysql.db you'll see test\_db * for a db-specific privilege. * * @param string $dbname    Database name * @param string $tablename Table name * * @return string the escaped (if necessary) database.table */function PMA_wildcardEscapeForGrant($dbname, $tablename){    if (! strlen($dbname)) {        $db_and_table = '*.*';    } else {        if (strlen($tablename)) {            $db_and_table = PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . '.';            $db_and_table .= PMA_backquote($tablename);        } else {            $db_and_table = PMA_backquote($dbname) . '.';            $db_and_table .= '*';        }    }    return $db_and_table;}/** * Generates a condition on the user name * * @param string $initial the user's initial * * @return  string   the generated condition */function PMA_rangeOfUsers($initial = ''){    // strtolower() is used because the User field    // might be BINARY, so LIKE would be case sensitive    if (! empty($initial)) {        $ret = " WHERE `User` LIKE '" . PMA_sqlAddSlashes($initial, true) . "%'"            . " OR `User` LIKE '" . PMA_sqlAddSlashes(strtolower($initial), true) . "%'";    } else {        $ret = '';    }    return $ret;} // end function/** * Extracts the privilege information of a priv table row * * @param array   $row        the row * @param boolean $enableHTML add <dfn> tag with tooltips * * @global  resource $user_link the database connection * * @return  array */function PMA_extractPrivInfo($row = '', $enableHTML = false){    $grants = array(        array(            'Select_priv',            'SELECT',            __('Allows reading data.')),        array(            'Insert_priv',            'INSERT',            __('Allows inserting and replacing data.')),        array(            'Update_priv',            'UPDATE',            __('Allows changing data.')),        array(            'Delete_priv',            'DELETE',            __('Allows deleting data.')),        array(            'Create_priv',            'CREATE',            __('Allows creating new databases and tables.')),        array(            'Drop_priv',            'DROP',            __('Allows dropping databases and tables.')),        array(            'Reload_priv',            'RELOAD',            __('Allows reloading server settings and flushing the server\'s caches.')),        array(            'Shutdown_priv',            'SHUTDOWN',            __('Allows shutting down the server.')),        array(            'Process_priv',            'PROCESS',            __('Allows viewing processes of all users')),        array(            'File_priv',            'FILE',            __('Allows importing data from and exporting data into files.')),        array(            'References_priv',            'REFERENCES',            __('Has no effect in this MySQL version.')),        array(            'Index_priv',            'INDEX',            __('Allows creating and dropping indexes.')),        array(            'Alter_priv',            'ALTER',            __('Allows altering the structure of existing tables.')),        array(            'Show_db_priv',            'SHOW DATABASES',            __('Gives access to the complete list of databases.')),        array(            'Super_priv',            'SUPER',            __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.')),        array(            'Create_tmp_table_priv',            'CREATE TEMPORARY TABLES',            __('Allows creating temporary tables.')),        array(            'Lock_tables_priv',            'LOCK TABLES',            __('Allows locking tables for the current thread.')),        array(            'Repl_slave_priv',            'REPLICATION SLAVE',            __('Needed for the replication slaves.')),        array(            'Repl_client_priv',            'REPLICATION CLIENT',            __('Allows the user to ask where the slaves / masters are.')),        array(            'Create_view_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Event_priv',            'EVENT',            __('Allows to set up events for the event scheduler')),        array(            'Trigger_priv',            'TRIGGER',            __('Allows creating and dropping triggers')),        // for table privs:        array(            'Create View_priv',            'CREATE VIEW',            __('Allows creating new views.')),        array(            'Show_view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        // for table privs:        array(            'Show view_priv',            'SHOW VIEW',            __('Allows performing SHOW CREATE VIEW queries.')),        array(            'Create_routine_priv',            'CREATE ROUTINE',            __('Allows creating stored routines.')),        array(            'Alter_routine_priv',            'ALTER ROUTINE',            __('Allows altering and dropping stored routines.')),        array(            'Create_user_priv',            'CREATE USER',            __('Allows creating, dropping and renaming user accounts.')),        array(            'Execute_priv',            'EXECUTE',            __('Allows executing stored routines.')),    );    if (! empty($row) && isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        $av_grants = explode('\',\'', substr($row1['Type'], 5, strlen($row1['Type']) - 7));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($current_grant);        unset($av_grants);        unset($users_grants);    }    $privs = array();    $allPrivileges = true;    foreach ($grants as $current_grant) {        if ((! empty($row) && isset($row[$current_grant[0]]))            || (empty($row) && isset($GLOBALS[$current_grant[0]]))        ) {            if ((! empty($row) && $row[$current_grant[0]] == 'Y')                || (empty($row)                && ($GLOBALS[$current_grant[0]] == 'Y'                || (is_array($GLOBALS[$current_grant[0]])                && count($GLOBALS[$current_grant[0]]) == $GLOBALS['column_count']                && empty($GLOBALS[$current_grant[0] . '_none']))))            ) {                if ($enableHTML) {                    $privs[] = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $privs[] = $current_grant[1];                }            } elseif (! empty($GLOBALS[$current_grant[0]])             && is_array($GLOBALS[$current_grant[0]])             && empty($GLOBALS[$current_grant[0] . '_none'])) {                if ($enableHTML) {                    $priv_string = '<dfn title="' . $current_grant[2] . '">' . $current_grant[1] . '</dfn>';                } else {                    $priv_string = $current_grant[1];                }                $privs[] = $priv_string . ' (`' . join('`, `', $GLOBALS[$current_grant[0]]) . '`)';            } else {                $allPrivileges = false;            }        }    }    if (empty($privs)) {        if ($enableHTML) {            $privs[] = '<dfn title="' . __('No privileges.') . '">USAGE</dfn>';        } else {            $privs[] = 'USAGE';        }    } elseif ($allPrivileges && (! isset($GLOBALS['grant_count']) || count($privs) == $GLOBALS['grant_count'])) {        if ($enableHTML) {            $privs = array('<dfn title="' . __('Includes all privileges except GRANT.') . '">ALL PRIVILEGES</dfn>');        } else {            $privs = array('ALL PRIVILEGES');        }    }    return $privs;} // end of the 'PMA_extractPrivInfo()' function/** * Displays on which column(s) a table-specific privilege is granted */function PMA_display_column_privs($columns, $row, $name_for_select,    $priv_for_header, $name, $name_for_dfn, $name_for_current){    echo '    <div class="item" id="div_item_' . $name . '">' . "\n"       . '        <label for="select_' . $name . '_priv">' . "\n"       . '            <tt><dfn title="' . $name_for_dfn . '">'        . $priv_for_header . '</dfn></tt>' . "\n"       . '        </label><br />' . "\n"       . '        <select id="select_' . $name . '_priv" name="'        . $name_for_select . '[]" multiple="multiple" size="8">' . "\n";    foreach ($columns as $current_column => $current_column_privileges) {        echo '            <option value="' . htmlspecialchars($current_column) . '"';        if ($row[$name_for_select] == 'Y' || $current_column_privileges[$name_for_current]) {            echo ' selected="selected"';        }        echo '>' . htmlspecialchars($current_column) . '</option>' . "\n";    }    echo '        </select>' . "\n"       . '        <i>' . __('Or') . '</i>' . "\n"       . '        <label for="checkbox_' . $name_for_select        . '_none"><input type="checkbox"'        . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')        . ' name="' . $name_for_select . '_none" id="checkbox_'        . $name_for_select . '_none" title="' . _pgettext('None privileges', 'None') . '" />'        . _pgettext('None privileges', 'None') . '</label>' . "\n"       . '    </div>' . "\n";} // end function/** * Displays the privileges form table * * @param string  $db     the database * @param string  $table  the table * @param boolean $submit wheather to display the submit button or not * * @global  array      $cfg         the phpMyAdmin configuration * @global  ressource  $user_link   the database connection * * @return  void */function PMA_displayPrivTable($db = '*', $table = '*', $submit = true){    global $random_n;    if ($db == '*') {        $table = '*';    }    if (isset($GLOBALS['username'])) {        $username = $GLOBALS['username'];        $hostname = $GLOBALS['hostname'];        if ($db == '*') {            $sql_query = "SELECT * FROM `mysql`.`user`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        } elseif ($table == '*') {            $sql_query = "SELECT * FROM `mysql`.`db`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND '" . PMA_unescape_mysql_wildcards($db) . "'"                ." LIKE `Db`;";        } else {            $sql_query = "SELECT `Table_priv`"                ." FROM `mysql`.`tables_priv`"                ." WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"                ." AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "'"                ." AND `Db` = '" . PMA_unescape_mysql_wildcards($db) . "'"                ." AND `Table_name` = '" . PMA_sqlAddSlashes($table) . "';";        }        $row = PMA_DBI_fetch_single_row($sql_query);    }    if (empty($row)) {        if ($table == '*') {            if ($db == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`user`;';            } elseif ($table == '*') {                $sql_query = 'SHOW COLUMNS FROM `mysql`.`db`;';            }            $res = PMA_DBI_query($sql_query);            while ($row1 = PMA_DBI_fetch_row($res)) {                if (substr($row1[0], 0, 4) == 'max_') {                    $row[$row1[0]] = 0;                } else {                    $row[$row1[0]] = 'N';                }            }            PMA_DBI_free_result($res);        } else {            $row = array('Table_priv' => '');        }    }    if (isset($row['Table_priv'])) {        $row1 = PMA_DBI_fetch_single_row(            'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \'Table_priv\';',            'ASSOC', $GLOBALS['userlink']        );        // note: in MySQL 5.0.3 we get "Create View', 'Show view';        // the View for Create is spelled with uppercase V        // the view for Show is spelled with lowercase v        // and there is a space between the words        $av_grants = explode('\',\'', substr($row1['Type'], strpos($row1['Type'], '(') + 2, strpos($row1['Type'], ')') - strpos($row1['Type'], '(') - 3));        unset($row1);        $users_grants = explode(',', $row['Table_priv']);        foreach ($av_grants as $current_grant) {            $row[$current_grant . '_priv'] = in_array($current_grant, $users_grants) ? 'Y' : 'N';        }        unset($row['Table_priv'], $current_grant, $av_grants, $users_grants);        // get collumns        $res = PMA_DBI_try_query('SHOW COLUMNS FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($db)) . '.' . PMA_backquote($table) . ';');        $columns = array();        if ($res) {            while ($row1 = PMA_DBI_fetch_row($res)) {                $columns[$row1[0]] = array(                    'Select' => false,                    'Insert' => false,                    'Update' => false,                    'References' => false                );            }            PMA_DBI_free_result($res);        }        unset($res, $row1);    }    // t a b l e - s p e c i f i c    p r i v i l e g e s    if (! empty($columns)) {        $res = PMA_DBI_query(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($hostname) . "'"            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes(PMA_unescape_mysql_wildcards($db)) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($table) . '\';'        );        while ($row1 = PMA_DBI_fetch_row($res)) {            $row1[1] = explode(',', $row1[1]);            foreach ($row1[1] as $current) {                $columns[$row1[0]][$current] = true;            }        }        PMA_DBI_free_result($res);        unset($res, $row1, $current);        echo '<input type="hidden" name="grant_count" value="' . count($row) . '" />' . "\n"           . '<input type="hidden" name="column_count" value="' . count($columns) . '" />' . "\n"           . '<fieldset id="fieldset_user_priv">' . "\n"           . '    <legend>' . __('Table-specific privileges')           . PMA_showHint(__('Note: MySQL privilege names are expressed in English'))           . '</legend>' . "\n";        // privs that are attached to a specific column        PMA_display_column_privs(            $columns, $row, 'Select_priv', 'SELECT',            'select', __('Allows reading data.'), 'Select'        );        PMA_display_column_privs(            $columns, $row, 'Insert_priv', 'INSERT',            'insert', __('Allows inserting and replacing data.'), 'Insert'        );        PMA_display_column_privs(            $columns, $row, 'Update_priv', 'UPDATE',            'update', __('Allows changing data.'), 'Update'        );        PMA_display_column_privs(            $columns, $row, 'References_priv', 'REFERENCES', 'references',            __('Has no effect in this MySQL version.'), 'References'        );        // privs that are not attached to a specific column        echo '    <div class="item">' . "\n";        foreach ($row as $current_grant => $current_grant_value) {            if (in_array(substr($current_grant, 0, (strlen($current_grant) - 5)),                    array('Select', 'Insert', 'Update', 'References'))) {                continue;            }            // make a substitution to match the messages variables;            // also we must substitute the grant we get, because we can't generate            // a form variable containing blanks (those would get changed to            // an underscore when receiving the POST)            if ($current_grant == 'Create View_priv') {                $tmp_current_grant = 'CreateView_priv';                $current_grant = 'Create_view_priv';            } elseif ($current_grant == 'Show view_priv') {                $tmp_current_grant = 'ShowView_priv';                $current_grant = 'Show_view_priv';            } else {                $tmp_current_grant = $current_grant;            }            echo '        <div class="item">' . "\n"               . '            <input type="checkbox"'               . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')               . ' name="' . $current_grant . '" id="checkbox_' . $current_grant               . '" value="Y" '               . ($current_grant_value == 'Y' ? 'checked="checked" ' : '')               . 'title="';            echo (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl']) . '"/>' . "\n";            echo '            <label for="checkbox_' . $current_grant                . '"><tt><dfn title="'                . (isset($GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))])                    ? $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5))]                    : $GLOBALS['strPrivDesc' . substr($tmp_current_grant, 0, (strlen($tmp_current_grant) - 5)) . 'Tbl'])               . '">' . strtoupper(substr($current_grant, 0, strlen($current_grant) - 5)) . '</dfn></tt></label>' . "\n"               . '        </div>' . "\n";        } // end foreach ()        echo '    </div>' . "\n";        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    } else {        // g l o b a l    o r    d b - s p e c i f i c        //        $privTable_names = array(0 => __('Data'), 1 => __('Structure'), 2 => __('Administration'));        // d a t a        $privTable[0] = array(            array('Select', 'SELECT', __('Allows reading data.')),            array('Insert', 'INSERT', __('Allows inserting and replacing data.')),            array('Update', 'UPDATE', __('Allows changing data.')),            array('Delete', 'DELETE', __('Allows deleting data.'))        );        if ($db == '*') {            $privTable[0][] = array('File', 'FILE', __('Allows importing data from and exporting data into files.'));        }        // s t r u c t u r e        $privTable[1] = array(            array('Create', 'CREATE', ($table == '*' ? __('Allows creating new databases and tables.') : __('Allows creating new tables.'))),            array('Alter', 'ALTER', __('Allows altering the structure of existing tables.')),            array('Index', 'INDEX', __('Allows creating and dropping indexes.')),            array('Drop', 'DROP', ($table == '*' ? __('Allows dropping databases and tables.') : __('Allows dropping tables.'))),            array('Create_tmp_table', 'CREATE TEMPORARY TABLES', __('Allows creating temporary tables.')),            array('Show_view', 'SHOW VIEW', __('Allows performing SHOW CREATE VIEW queries.')),            array('Create_routine', 'CREATE ROUTINE', __('Allows creating stored routines.')),            array('Alter_routine', 'ALTER ROUTINE', __('Allows altering and dropping stored routines.')),            array('Execute', 'EXECUTE', __('Allows executing stored routines.')),        );        // this one is for a db-specific priv: Create_view_priv        if (isset($row['Create_view_priv'])) {            $privTable[1][] = array('Create_view', 'CREATE VIEW', __('Allows creating new views.'));        }        // this one is for a table-specific priv: Create View_priv        if (isset($row['Create View_priv'])) {            $privTable[1][] = array('Create View', 'CREATE VIEW', __('Allows creating new views.'));        }        if (isset($row['Event_priv'])) {            // MySQL 5.1.6            $privTable[1][] = array('Event', 'EVENT', __('Allows to set up events for the event scheduler'));            $privTable[1][] = array('Trigger', 'TRIGGER', __('Allows creating and dropping triggers'));        }        // a d m i n i s t r a t i o n        $privTable[2] = array(            array('Grant', 'GRANT', __('Allows adding users and privileges without reloading the privilege tables.')),        );        if ($db == '*') {            $privTable[2][] = array('Super', 'SUPER', __('Allows connecting, even if maximum number of connections is reached; required for most administrative operations like setting global variables or killing threads of other users.'));            $privTable[2][] = array('Process', 'PROCESS', __('Allows viewing processes of all users'));            $privTable[2][] = array('Reload', 'RELOAD', __('Allows reloading server settings and flushing the server\'s caches.'));            $privTable[2][] = array('Shutdown', 'SHUTDOWN', __('Allows shutting down the server.'));            $privTable[2][] = array('Show_db', 'SHOW DATABASES', __('Gives access to the complete list of databases.'));        }        $privTable[2][] = array('Lock_tables', 'LOCK TABLES', __('Allows locking tables for the current thread.'));        $privTable[2][] = array('References', 'REFERENCES', __('Has no effect in this MySQL version.'));        if ($db == '*') {            $privTable[2][] = array('Repl_client', 'REPLICATION CLIENT', __('Allows the user to ask where the slaves / masters are.'));            $privTable[2][] = array('Repl_slave', 'REPLICATION SLAVE', __('Needed for the replication slaves.'));            $privTable[2][] = array('Create_user', 'CREATE USER', __('Allows creating, dropping and renaming user accounts.'));        }        echo '<input type="hidden" name="grant_count" value="'            . (count($privTable[0]) + count($privTable[1]) + count($privTable[2]) - (isset($row['Grant_priv']) ? 1 : 0))            . '" />' . "\n"           . '<fieldset id="fieldset_user_global_rights">' . "\n"           . '    <legend>' . "\n"           . '        '            . ($db == '*'                ? __('Global privileges')                : ($table == '*'                    ? __('Database-specific privileges')                    : __('Table-specific privileges'))) . "\n"           . '        (<a href="server_privileges.php?'            . $GLOBALS['url_query'] . '&amp;checkall=1" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', true); return false;">'            . __('Check All') . '</a> /' . "\n"           . '        <a href="server_privileges.php?'            . $GLOBALS['url_query'] . '" onclick="setCheckboxes(\'addUsersForm_' . $random_n . '\', false); return false;">'            . __('Uncheck All') . '</a>)' . "\n"           . '    </legend>' . "\n"           . '    <p><small><i>' . __('Note: MySQL privilege names are expressed in English') . '</i></small></p>' . "\n";        // Output the Global privilege tables with checkboxes        foreach ($privTable as $i => $table) {            echo '    <fieldset>' . "\n"                . '        <legend>' . __($privTable_names[$i]) . '</legend>' . "\n";            foreach ($table as $priv) {                echo '        <div class="item">' . "\n"                    . '            <input type="checkbox"'                    .                   ' name="' . $priv[0] . '_priv" id="checkbox_' . $priv[0] . '_priv"'                    .                   ' value="Y" title="' . $priv[2] . '"'                    .                   ((! empty($GLOBALS['checkall']) || $row[$priv[0] . '_priv'] == 'Y') ?  ' checked="checked"' : '')                    .               '/>' . "\n"                    . '            <label for="checkbox_' . $priv[0] . '_priv"><tt><dfn title="' . $priv[2] . '">'                    .                    $priv[1] . '</dfn></tt></label>' . "\n"                    . '        </div>' . "\n";            }            echo '    </fieldset>' . "\n";        }        // The "Resource limits" box is not displayed for db-specific privs        if ($db == '*') {            echo '    <fieldset>' . "\n"               . '        <legend>' . __('Resource limits') . '</legend>' . "\n"               . '        <p><small><i>' . __('Note: Setting these options to 0 (zero) removes the limit.') . '</i></small></p>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_questions"><tt><dfn title="'                . __('Limits the number of queries the user may send to the server per hour.') . '">MAX QUERIES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_questions" id="text_max_questions" value="'                . $row['max_questions'] . '" size="11" maxlength="11" title="' . __('Limits the number of queries the user may send to the server per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_updates"><tt><dfn title="'                . __('Limits the number of commands that change any table or database the user may execute per hour.') . '">MAX UPDATES PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_updates" id="text_max_updates" value="'                . $row['max_updates'] . '" size="11" maxlength="11" title="' . __('Limits the number of commands that change any table or database the user may execute per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_connections"><tt><dfn title="'                . __('Limits the number of new connections the user may open per hour.') . '">MAX CONNECTIONS PER HOUR</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_connections" id="text_max_connections" value="'                . $row['max_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of new connections the user may open per hour.') . '" />' . "\n"               . '        </div>' . "\n"               . '        <div class="item">' . "\n"               . '            <label for="text_max_user_connections"><tt><dfn title="'                . __('Limits the number of simultaneous connections the user may have.') . '">MAX USER_CONNECTIONS</dfn></tt></label>' . "\n"               . '            <input type="text" name="max_user_connections" id="text_max_user_connections" value="'                . $row['max_user_connections'] . '" size="11" maxlength="11" title="' . __('Limits the number of simultaneous connections the user may have.') . '" />' . "\n"               . '        </div>' . "\n"               . '    </fieldset>' . "\n";        }        // for Safari 2.0.2        echo '    <div class="clearfloat"></div>' . "\n";    }    echo '</fieldset>' . "\n";    if ($submit) {        echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">' . "\n"           . '    <input type="submit" name="update_privs" value="' . __('Go') . '" />' . "\n"           . '</fieldset>' . "\n";    }} // end of the 'PMA_displayPrivTable()' function/** * Displays the fields used by the "new user" form as well as the * "change login information / copy user" form. * * @param string $mode are we creating a new user or are we just *                     changing  one? (allowed values: 'new', 'change') * * @global  array      $cfg     the phpMyAdmin configuration * @global  ressource  $user_link the database connection * * @return  void */function PMA_displayLoginInformationFields($mode = 'new'){    // Get user/host name lengths    $fields_info = PMA_DBI_get_columns('mysql', 'user', null, true);    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    unset($fields_info);    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<fieldset id="fieldset_add_user_login">' . "\n"       . '<legend>' . __('Login Information') . '</legend>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_username">' . "\n"       . '    ' . __('User name') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"' . "\n"       . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">' . "\n"       . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>' . "\n"       . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])            ? ''            : ' value="' . htmlspecialchars(isset($GLOBALS['new_username'])                ? $GLOBALS['new_username']                : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_hostname">' . "\n"       . '    ' . __('Host') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"' . "\n";    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '       . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')       . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')            ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>' . "\n"       . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')            ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>' . "\n";    if (! empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')                ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>' . "\n";    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')            ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>' . "\n"       . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')            ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . htmlspecialchars(isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />' . "\n"       . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))       . '</div>' . "\n"       . '<div class="item">' . "\n"       . '<label for="select_pred_password">' . "\n"       . '    ' . __('Password') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">' . "\n"       . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"' . "\n"       . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">' . "\n"       . ($mode == 'change' ? '            <option value="keep" selected="selected">' . __('Do not change the password') . '</option>' . "\n" : '')       . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>' . "\n"       . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>' . "\n"       . '    </select>' . "\n"       . '</span>' . "\n"       . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       . '<div class="item" id="div_element_before_generate_password">' . "\n"       . '<label for="text_pma_pw2">' . "\n"       . '    ' . __('Re-type') . ':' . "\n"       . '</label>' . "\n"       . '<span class="options">&nbsp;</span>' . "\n"       . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />' . "\n"       . '</div>' . "\n"       // Generate password added here via jQuery       . '</fieldset>' . "\n";} // end of the 'PMA_displayUserAndHostFields()' function/** * Changes / copies a user, part I */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $row = PMA_DBI_fetch_single_row('SELECT * FROM `mysql`.`user` ' . $user_host_condition);    if (! $row) {        PMA_Message::notice(__('No user found.'))->display();        unset($_REQUEST['change_copy']);    } else {        extract($row, EXTR_OVERWRITE);        // Recent MySQL versions have the field "Password" in mysql.user,        // so the previous extract creates $Password but this script        // uses $password        if (! isset($password) && isset($Password)) {            $password = $Password;        }        $queries = array();    }}/** * Adds a user *   (Changes / copies a user, part II) */if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {    $sql_query = '';    if ($pred_username == 'any') {        $username = '';    }    switch ($pred_hostname) {    case 'any':        $hostname = '%';        break;    case 'localhost':        $hostname = 'localhost';        break;    case 'hosttable':        $hostname = '';        break;    case 'thishost':        $_user_name = PMA_DBI_fetch_value('SELECT USER()');        $hostname = substr($_user_name, (strrpos($_user_name, '@') + 1));        unset($_user_name);        break;    }    $sql = "SELECT '1' FROM `mysql`.`user`"        . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"        . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";    if (PMA_DBI_fetch_value($sql) == 1) {        $message = PMA_Message::error(__('The user %s already exists!'));        $message->addParam('[i]\'' . $username . '\'@\'' . $hostname . '\'[/i]');        $_REQUEST['adduser'] = true;        $_add_user_error = true;    } else {        $create_user_real = 'CREATE USER \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        $real_sql_query = 'GRANT ' . join(', ', PMA_extractPrivInfo()) . ' ON *.* TO \''            . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        if ($pred_password != 'none' && $pred_password != 'keep') {            $sql_query = $real_sql_query . ' IDENTIFIED BY \'***\'';            $real_sql_query .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            if (isset($create_user_real)) {                $create_user_show = $create_user_real . ' IDENTIFIED BY \'***\'';                $create_user_real .= ' IDENTIFIED BY \'' . PMA_sqlAddSlashes($pma_pw) . '\'';            }        } else {            if ($pred_password == 'keep' && ! empty($password)) {                $real_sql_query .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                if (isset($create_user_real)) {                    $create_user_real .= ' IDENTIFIED BY PASSWORD \'' . $password . '\'';                }            }            $sql_query = $real_sql_query;            if (isset($create_user_real)) {                $create_user_show = $create_user_real;            }        }        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections))        ) {            $real_sql_query .= ' WITH';            $sql_query .= ' WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $real_sql_query .= ' GRANT OPTION';                $sql_query .= ' GRANT OPTION';            }            if (isset($max_questions)) {                // avoid negative values                $max_questions = max(0, (int)$max_questions);                $real_sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;                $sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $real_sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;                $sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $real_sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;                $sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $real_sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;                $sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        if (isset($create_user_real)) {            $create_user_real .= ';';            $create_user_show .= ';';        }        $real_sql_query .= ';';        $sql_query .= ';';        if (empty($_REQUEST['change_copy'])) {            $_error = false;            if (isset($create_user_real)) {                if (! PMA_DBI_try_query($create_user_real)) {                    $_error = true;                }                $sql_query = $create_user_show . $sql_query;            }            if ($_error || ! PMA_DBI_try_query($real_sql_query)) {                $_REQUEST['createdb'] = false;                $message = PMA_Message::rawError(PMA_DBI_getError());            } else {                $message = PMA_Message::success(__('You have added a new user.'));            }            switch (PMA_ifSetOr($_REQUEST['createdb'], '0')) {            case '1' :                // Create database with same name and grant all privileges                $q = 'CREATE DATABASE IF NOT EXISTS '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . ';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                    break;                }                /**                 * If we are not in an Ajax request, we can't reload navigation now                 */                if ($GLOBALS['is_ajax_request'] != true) {                    // this is needed in case tracking is on:                    $GLOBALS['db'] = $username;                    $GLOBALS['reload'] = true;                    PMA_reloadNavigation();                }                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username)) . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '2' :                // Grant all privileges on wildcard name (username\_%)                $q = 'GRANT ALL PRIVILEGES ON '                    . PMA_backquote(PMA_sqlAddSlashes($username) . '\_%') . '.* TO \''                    . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '3' :                // Grant all privileges on the specified database to the new user                $q = 'GRANT ALL PRIVILEGES ON '                . PMA_backquote(PMA_sqlAddSlashes($dbname)) . '.* TO \''                . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';                $sql_query .= $q;                if (! PMA_DBI_try_query($q)) {                    $message = PMA_Message::rawError(PMA_DBI_getError());                }                break;            case '0' :            default :                break;            }        } else {            if (isset($create_user_real)) {                $queries[]             = $create_user_real;            }            $queries[]             = $real_sql_query;            // we put the query containing the hidden password in            // $queries_for_display, at the same position occupied            // by the real query in $queries            $tmp_count = count($queries);            if (isset($create_user_real)) {                $queries_for_display[$tmp_count - 2] = $create_user_show;            }            $queries_for_display[$tmp_count - 1] = $sql_query;        }        unset($res, $real_sql_query);    }}/** * Changes / copies a user, part III */if (isset($_REQUEST['change_copy'])) {    $user_host_condition = ' WHERE `User`'        .' = \'' . PMA_sqlAddSlashes($old_username) . "'"        .' AND `Host`'        .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\';';    $res = PMA_DBI_query('SELECT * FROM `mysql`.`db`' . $user_host_condition);    while ($row = PMA_DBI_fetch_assoc($res)) {        $queries[] = 'GRANT ' . join(', ', PMA_extractPrivInfo($row))            .' ON ' . PMA_backquote($row['Db']) . '.*'            .' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . ($row['Grant_priv'] == 'Y' ? ' WITH GRANT OPTION;' : ';');    }    PMA_DBI_free_result($res);    $res = PMA_DBI_query(        'SELECT `Db`, `Table_name`, `Table_priv` FROM `mysql`.`tables_priv`' . $user_host_condition,        $GLOBALS['userlink'],        PMA_DBI_QUERY_STORE    );    while ($row = PMA_DBI_fetch_assoc($res)) {        $res2 = PMA_DBI_QUERY(            'SELECT `Column_name`, `Column_priv`'            .' FROM `mysql`.`columns_priv`'            .' WHERE `User`'            .' = \'' . PMA_sqlAddSlashes($old_username) . "'"            .' AND `Host`'            .' = \'' . PMA_sqlAddSlashes($old_hostname) . '\''            .' AND `Db`'            .' = \'' . PMA_sqlAddSlashes($row['Db']) . "'"            .' AND `Table_name`'            .' = \'' . PMA_sqlAddSlashes($row['Table_name']) . "'"            .';',            null,            PMA_DBI_QUERY_STORE        );        $tmp_privs1 = PMA_extractPrivInfo($row);        $tmp_privs2 = array(            'Select' => array(),            'Insert' => array(),            'Update' => array(),            'References' => array()        );        while ($row2 = PMA_DBI_fetch_assoc($res2)) {            $tmp_array = explode(',', $row2['Column_priv']);            if (in_array('Select', $tmp_array)) {                $tmp_privs2['Select'][] = $row2['Column_name'];            }            if (in_array('Insert', $tmp_array)) {                $tmp_privs2['Insert'][] = $row2['Column_name'];            }            if (in_array('Update', $tmp_array)) {                $tmp_privs2['Update'][] = $row2['Column_name'];            }            if (in_array('References', $tmp_array)) {                $tmp_privs2['References'][] = $row2['Column_name'];            }            unset($tmp_array);        }        if (count($tmp_privs2['Select']) > 0 && ! in_array('SELECT', $tmp_privs1)) {            $tmp_privs1[] = 'SELECT (`' . join('`, `', $tmp_privs2['Select']) . '`)';        }        if (count($tmp_privs2['Insert']) > 0 && ! in_array('INSERT', $tmp_privs1)) {            $tmp_privs1[] = 'INSERT (`' . join('`, `', $tmp_privs2['Insert']) . '`)';        }        if (count($tmp_privs2['Update']) > 0 && ! in_array('UPDATE', $tmp_privs1)) {            $tmp_privs1[] = 'UPDATE (`' . join('`, `', $tmp_privs2['Update']) . '`)';        }        if (count($tmp_privs2['References']) > 0 && ! in_array('REFERENCES', $tmp_privs1)) {            $tmp_privs1[] = 'REFERENCES (`' . join('`, `', $tmp_privs2['References']) . '`)';        }        unset($tmp_privs2);        $queries[] = 'GRANT ' . join(', ', $tmp_privs1)            . ' ON ' . PMA_backquote($row['Db']) . '.' . PMA_backquote($row['Table_name'])            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\''            . (in_array('Grant', explode(',', $row['Table_priv'])) ? ' WITH GRANT OPTION;' : ';');    }}/** * Updates privileges */if (! empty($update_privs)) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, (isset($tablename) ? $tablename : ''));    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    if (! isset($Grant_priv) || $Grant_priv != 'Y') {        $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table            . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    } else {        $sql_query1 = '';    }    // Should not do a GRANT USAGE for a table-specific privilege, it    // causes problems later (cannot revoke it)    if (! (isset($tablename) && 'USAGE' == implode('', PMA_extractPrivInfo()))) {        $sql_query2 = 'GRANT ' . join(', ', PMA_extractPrivInfo())            . ' ON ' . $db_and_table            . ' TO \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\'';        /**         * @todo similar code appears twice in this script         */        if ((isset($Grant_priv) && $Grant_priv == 'Y')            || (! isset($dbname)            && (isset($max_questions) || isset($max_connections)            || isset($max_updates) || isset($max_user_connections)))        ) {            $sql_query2 .= 'WITH';            if (isset($Grant_priv) && $Grant_priv == 'Y') {                $sql_query2 .= ' GRANT OPTION';            }            if (isset($max_questions)) {                $max_questions = max(0, (int)$max_questions);                $sql_query2 .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;            }            if (isset($max_connections)) {                $max_connections = max(0, (int)$max_connections);                $sql_query2 .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;            }            if (isset($max_updates)) {                $max_updates = max(0, (int)$max_updates);                $sql_query2 .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;            }            if (isset($max_user_connections)) {                $max_user_connections = max(0, (int)$max_user_connections);                $sql_query2 .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;            }        }        $sql_query2 .= ';';    }    if (! PMA_DBI_try_query($sql_query0)) {        // This might fail when the executing user does not have ALL PRIVILEGES himself.        // See https://sourceforge.net/tracker/index.php?func=detail&aid=3285929&group_id=23067&atid=377408        $sql_query0 = '';    }    if (isset($sql_query1) && ! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    if (isset($sql_query2)) {        PMA_DBI_query($sql_query2);    } else {        $sql_query2 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1 . ' ' . $sql_query2;    $message = PMA_Message::success(__('You have updated the privileges for %s.'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');}/** * Revokes Privileges */if (isset($_REQUEST['revokeall'])) {    $db_and_table = PMA_wildcardEscapeForGrant($dbname, isset($tablename) ? $tablename : '');    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    $sql_query1 = 'REVOKE GRANT OPTION ON ' . $db_and_table        . ' FROM \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\';';    PMA_DBI_query($sql_query0);    if (! PMA_DBI_try_query($sql_query1)) {        // this one may fail, too...        $sql_query1 = '';    }    $sql_query = $sql_query0 . ' ' . $sql_query1;    $message = PMA_Message::success(__('You have revoked the privileges for %s'));    $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    if (! isset($tablename)) {        unset($dbname);    } else {        unset($tablename);    }}/** * Updates the password */if (isset($_REQUEST['change_pw'])) {    // similar logic in user_password.php    $message = '';    if ($nopass == 0 && isset($pma_pw) && isset($pma_pw2)) {        if ($pma_pw != $pma_pw2) {            $message = PMA_Message::error(__('The passwords aren\'t the same!'));        } elseif (empty($pma_pw) || empty($pma_pw2)) {            $message = PMA_Message::error(__('The password is empty!'));        }    } // end if    // here $nopass could be == 1    if (empty($message)) {        $hashing_function = (! empty($pw_hash) && $pw_hash == 'old' ? 'OLD_' : '')                      . 'PASSWORD';        // in $sql_query which will be displayed, hide the password        $sql_query        = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . preg_replace('@.@s', '*', $pma_pw) . '\')');        $local_query      = 'SET PASSWORD FOR \'' . PMA_sqlAddSlashes($username) . '\'@\'' . PMA_sqlAddSlashes($hostname) . '\' = ' . (($pma_pw == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($pma_pw) . '\')');        PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        $message = PMA_Message::success(__('The password for %s was changed successfully.'));        $message->addParam('\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname) . '\'');    }}/** * Deletes users *   (Changes / copies a user, part IV) */if (isset($_REQUEST['delete']) || (isset($_REQUEST['change_copy']) && $_REQUEST['mode'] < 4)) {    if (isset($_REQUEST['change_copy'])) {        $selected_usr = array($old_username . '&amp;#27;' . $old_hostname);    } else {        $selected_usr = $_REQUEST['selected_usr'];        $queries = array();    }    foreach ($selected_usr as $each_user) {        list($this_user, $this_host) = explode('&amp;#27;', $each_user);        $queries[] = '# ' . sprintf(__('Deleting %s'), '\'' . $this_user . '\'@\'' . $this_host . '\'') . ' ...';        $queries[] = 'DROP USER \'' . PMA_sqlAddSlashes($this_user) . '\'@\'' . PMA_sqlAddSlashes($this_host) . '\';';        if (isset($_REQUEST['drop_users_db'])) {            $queries[] = 'DROP DATABASE IF EXISTS ' . PMA_backquote($this_user) . ';';            $GLOBALS['reload'] = true;            if ($GLOBALS['is_ajax_request'] != true) {                PMA_reloadNavigation();            }        }    }    if (empty($_REQUEST['change_copy'])) {        if (empty($queries)) {            $message = PMA_Message::error(__('No users selected for deleting!'));        } else {            if ($_REQUEST['mode'] == 3) {                $queries[] = '# ' . __('Reloading the privileges') . ' ...';                $queries[] = 'FLUSH PRIVILEGES;';            }            $drop_user_error = '';            foreach ($queries as $sql_query) {                if ($sql_query{0} != '#') {                    if (! PMA_DBI_try_query($sql_query, $GLOBALS['userlink'])) {                        $drop_user_error .= PMA_DBI_getError() . "\n";                    }                }            }            // tracking sets this, causing the deleted db to be shown in navi            unset($GLOBALS['db']);            $sql_query = join("\n", $queries);            if (! empty($drop_user_error)) {                $message = PMA_Message::rawError($drop_user_error);            } else {                $message = PMA_Message::success(__('The selected users have been deleted successfully.'));            }        }        unset($queries);    }}/** * Changes / copies a user, part V */if (isset($_REQUEST['change_copy'])) {    $tmp_count = 0;    foreach ($queries as $sql_query) {        if ($sql_query{0} != '#') {            PMA_DBI_query($sql_query);        }        // when there is a query containing a hidden password, take it        // instead of the real query sent        if (isset($queries_for_display[$tmp_count])) {            $queries[$tmp_count] = $queries_for_display[$tmp_count];        }        $tmp_count++;    }    $message = PMA_Message::success();    $sql_query = join("\n", $queries);}/** * Reloads the privilege tables into memory */if (isset($_REQUEST['flush_privileges'])) {    $sql_query = 'FLUSH PRIVILEGES;';    PMA_DBI_query($sql_query);    $message = PMA_Message::success(__('The privileges were reloaded successfully.'));}/** * defines some standard links */$link_edit = '<a class="edit_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s">'    . PMA_getIcon('b_usredit.png', __('Edit Privileges'))    . '</a>';$link_revoke = '<a href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;dbname=%s'    . '&amp;tablename=%s'    . '&amp;revokeall=1">'    . PMA_getIcon('b_usrdrop.png', __('Revoke'))    . '</a>';$link_export = '<a class="export_user_anchor ' . $conditional_class . '" href="server_privileges.php?' . str_replace('%', '%%', $GLOBALS['url_query'])    . '&amp;username=%s'    . '&amp;hostname=%s'    . '&amp;initial=%s'    . '&amp;export=1">'    . PMA_getIcon('b_tblexport.png', __('Export'))    . '</a>';/** * If we are in an Ajax request for Create User/Edit User/Revoke User/ * Flush Privileges, show $message and exit. */if ($GLOBALS['is_ajax_request'] && ! isset($_REQUEST['export']) && (! isset($_REQUEST['adduser']) || $_add_user_error) && ! isset($_REQUEST['initial']) && ! isset($_REQUEST['showall']) && ! isset($_REQUEST['edit_user_dialog']) && ! isset($_REQUEST['db_specific'])) {    if (isset($sql_query)) {        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);    }    if (isset($_REQUEST['adduser_submit']) || isset($_REQUEST['change_copy'])) {        /**         * generate html on the fly for the new user that was just created.         */        $new_user_string = '<tr>'."\n"                           .'<td> <input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_" value="' . htmlspecialchars($username) . '&amp;#27;' . htmlspecialchars($hostname) . '" /> </td>' . "\n"                           .'<td><label for="checkbox_sel_users_">' . (empty($username) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($username) ) . '</label></td>' . "\n"                           .'<td>' . htmlspecialchars($hostname) . '</td>' . "\n";        $new_user_string .= '<td>';        if (! empty($password) || isset($pma_pw)) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= '<span style="color: #FF0000">' . __('No') . '</span>';        };        $new_user_string .= '</td>'."\n";        $new_user_string .= '<td><tt>' . join(', ', PMA_extractPrivInfo('', true)) . '</tt></td>'; //Fill in privileges here        $new_user_string .= '<td>';        if ((isset($Grant_priv) && $Grant_priv == 'Y')) {            $new_user_string .= __('Yes');        } else {            $new_user_string .= __('No');        }        $new_user_string .='</td>';        $new_user_string .= '<td>' . sprintf($link_edit, urlencode($username), urlencode($hostname), '', '') . '</td>' . "\n";        $new_user_string .= '<td>' . sprintf($link_export, urlencode($username), urlencode($hostname), (isset($initial) ? $initial : '')) . '</td>' . "\n";        $new_user_string .= '</tr>';        $extra_data['new_user_string'] = $new_user_string;        /**         * Generate the string for this alphabet's initial, to update the user         * pagination         */        $new_user_initial = strtoupper(substr($username, 0, 1));        $new_user_initial_string = '<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&initial=' . $new_user_initial            .'">' . $new_user_initial . '</a>';        $extra_data['new_user_initial'] = $new_user_initial;        $extra_data['new_user_initial_string'] = $new_user_initial_string;    }    if (isset($update_privs)) {        $extra_data['db_specific_privs'] = false;        if (isset($dbname_is_wildcard)) {            $extra_data['db_specific_privs'] = ! $dbname_is_wildcard;        }        $new_privileges = join(', ', PMA_extractPrivInfo('', true));        $extra_data['new_privileges'] = $new_privileges;    }    if ($message instanceof PMA_Message) {        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    }}/** * Displays the links */if (isset($viewing_mode) && $viewing_mode == 'db') {    $db = $checkprivs;    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";} else {    include './libraries/server_links.inc.php';}/** * Displays the page */// export user definitionif (isset($_REQUEST['export'])) {    $title = __('User') . ' `' . htmlspecialchars($username) . '`@`' . htmlspecialchars($hostname) . '`';    $response = '<textarea cols="' . $GLOBALS['cfg']['TextareaCols'] . '" rows="' . $GLOBALS['cfg']['TextareaRows'] . '">';    $grants = PMA_DBI_fetch_result("SHOW GRANTS FOR '" . PMA_sqlAddSlashes($username) . "'@'" . PMA_sqlAddSlashes($hostname) . "'");    foreach ($grants as $one_grant) {        $response .= $one_grant . ";\n\n";    }    $response .= '</textarea>';    unset($username, $hostname, $grants, $one_grant);    if ($GLOBALS['is_ajax_request']) {        PMA_ajaxResponse($response, 1, array('title' => $title));    } else {        echo "<h2>$title</h2>$response";    }}if (empty($_REQUEST['adduser']) && (! isset($checkprivs) || ! strlen($checkprivs))) {    if (! isset($username)) {        // No username is given --> display the overview        echo '<h2>' . "\n"           . PMA_getIcon('b_usrlist.png')           . __('Users overview') . "\n"           . '</h2>' . "\n";        $sql_query = 'SELECT *,' .            "       IF(`Password` = _latin1 '', 'N', 'Y') AS 'Password'" .            '  FROM `mysql`.`user`';        $sql_query .= (isset($initial) ? PMA_rangeOfUsers($initial) : '');        $sql_query .= ' ORDER BY `User` ASC, `Host` ASC;';        $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);        if (! $res) {            // the query failed! This may have two reasons:            // - the user does not have enough privileges            // - the privilege tables use a structure of an earlier version.            // so let's try a more simple query            $sql_query = 'SELECT * FROM `mysql`.`user`';            $res = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_STORE);            if (! $res) {                PMA_Message::error(__('No Privileges'))->display();                PMA_DBI_free_result($res);                unset($res);            } else {                // This message is hardcoded because I will replace it by                // a automatic repair feature soon.                $raw = 'Your privilege table structure seems to be older than'                    . ' this MySQL version!<br />'                    . 'Please run the <tt>mysql_upgrade</tt> command'                    . '(<tt>mysql_fix_privilege_tables</tt> on older systems)'                    . ' that should be included in your MySQL server distribution'                    . ' to solve this problem!';                PMA_Message::rawError($raw)->display();            }        } else {            // we also want users not in table `user` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            $tables_to_search_for_users = array(                'user', 'db', 'tables_priv', 'columns_priv', 'procs_priv',            );            $db_rights_sqls = array();            foreach ($tables_to_search_for_users as $table_search_in) {                if (in_array($table_search_in, $tables)) {                    $db_rights_sqls[] = 'SELECT DISTINCT `User`, `Host` FROM `mysql`.`' . $table_search_in . '` ' . (isset($initial) ? PMA_rangeOfUsers($initial) : '');                }            }            $user_defaults = array(                'User'      => '',                'Host'      => '%',                'Password'  => '?',                'Grant_priv' => 'N',                'privs'     => array('USAGE'),            );            // for all initials, even non A-Z            $array_initials = array();            // for the rights            $db_rights = array();            $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                .' ORDER BY `User` ASC, `Host` ASC';            $db_rights_result = PMA_DBI_query($db_rights_sql);            while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                $db_rights_row = array_merge($user_defaults, $db_rights_row);                $db_rights[$db_rights_row['User']][$db_rights_row['Host']]                    = $db_rights_row;            }            PMA_DBI_free_result($db_rights_result);            unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);            ksort($db_rights);            /**             * Displays the initials             * In an Ajax request, we don't need to show this.             * Also not necassary if there is less than 20 privileges             */            if ($GLOBALS['is_ajax_request'] != true && PMA_DBI_num_rows($res) > 20 ) {                // initialize to false the letters A-Z                for ($letter_counter = 1; $letter_counter < 27; $letter_counter++) {                    if (! isset($array_initials[chr($letter_counter + 64)])) {                        $array_initials[chr($letter_counter + 64)] = false;                    }                }                $initials = PMA_DBI_try_query('SELECT DISTINCT UPPER(LEFT(`User`,1)) FROM `user` ORDER BY `User` ASC', null, PMA_DBI_QUERY_STORE);                while (list($tmp_initial) = PMA_DBI_fetch_row($initials)) {                    $array_initials[$tmp_initial] = true;                }                // Display the initials, which can be any characters, not                // just letters. For letters A-Z, we add the non-used letters                // as greyed out.                uksort($array_initials, "strnatcasecmp");                echo '<table id="initials_table" class="' . $conditional_class . '" <cellspacing="5"><tr>';                foreach ($array_initials as $tmp_initial => $initial_was_found) {                    if ($initial_was_found) {                        echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;initial=' . urlencode($tmp_initial) . '">' . $tmp_initial . '</a></td>' . "\n";                    } else {                        echo '<td>' . $tmp_initial . '</td>';                    }                }                echo '<td><a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;showall=1" class="nowrap">[' . __('Show all') . ']</a></td>' . "\n";                echo '</tr></table>';            }            /**            * Display the user overview            * (if less than 50 users, display them immediately)            */            if (isset($initial) || isset($showall) || PMA_DBI_num_rows($res) < 50) {                while ($row = PMA_DBI_fetch_assoc($res)) {                    $row['privs'] = PMA_extractPrivInfo($row, true);                    $db_rights[$row['User']][$row['Host']] = $row;                }                @PMA_DBI_free_result($res);                unset($res);                echo '<form name="usersForm" id="usersForm" action="server_privileges.php" method="post">' . "\n"                   . PMA_generate_common_hidden_inputs('', '')                   . '    <table id="tableuserrights" class="data">' . "\n"                   . '    <thead>' . "\n"                   . '        <tr><th></th>' . "\n"                   . '            <th>' . __('User') . '</th>' . "\n"                   . '            <th>' . __('Host') . '</th>' . "\n"                   . '            <th>' . __('Password') . '</th>' . "\n"                   . '            <th>' . __('Global privileges') . ' '                   . PMA_showHint(__('Note: MySQL privilege names are expressed in English')) . '</th>' . "\n"                   . '            <th>' . __('Grant') . '</th>' . "\n"                   . '            <th colspan="2">' . __('Action') . '</th>' . "\n";                echo '        </tr>' . "\n";                echo '    </thead>' . "\n";                echo '    <tbody>' . "\n";                $odd_row = true;                $index_checkbox = -1;                foreach ($db_rights as $user) {                    $index_checkbox++;                    ksort($user);                    foreach ($user as $host) {                        $index_checkbox++;                        echo '        <tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                           . '            <td><input type="checkbox" name="selected_usr[]" id="checkbox_sel_users_'                            . $index_checkbox . '" value="'                            . htmlspecialchars($host['User'] . '&amp;#27;' . $host['Host'])                            . '"'                            . (empty($GLOBALS['checkall']) ?  '' : ' checked="checked"')                            . ' /></td>' . "\n"                           . '            <td><label for="checkbox_sel_users_' . $index_checkbox . '">' . (empty($host['User']) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($host['User'])) . '</label></td>' . "\n"                           . '            <td>' . htmlspecialchars($host['Host']) . '</td>' . "\n";                        echo '            <td>';                        switch ($host['Password']) {                        case 'Y':                            echo __('Yes');                            break;                        case 'N':                            echo '<span style="color: #FF0000">' . __('No') . '</span>';                            break;                        // this happens if this is a definition not coming from mysql.user                        default:                            echo '--'; // in future version, replace by "not present"                            break;                        } // end switch                        echo '</td>' . "\n"                           . '            <td><tt>' . "\n"                           . '                ' . implode(',' . "\n" . '            ', $host['privs']) . "\n"                           . '                </tt></td>' . "\n"                           . '            <td>' . ($host['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . '</td>' . "\n"                           . '            <td align="center">';                        printf($link_edit, urlencode($host['User']), urlencode($host['Host']), '', '');                        echo '</td>';                        echo '<td align="center">';                        printf($link_export, urlencode($host['User']), urlencode($host['Host']), (isset($initial) ? $initial : ''));                        echo '</td>';                        echo '</tr>';                        $odd_row = ! $odd_row;                    }                }                unset($user, $host, $odd_row);                echo '    </tbody></table>' . "\n"                   .'<img class="selectallarrow"'                   .' src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png"'                   .' width="38" height="22"'                   .' alt="' . __('With selected:') . '" />' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '&amp;checkall=1"'                   .' onclick="if (markAllRows(\'usersForm\')) return false;">'                   . __('Check All') . '</a>' . "\n"                   .'/' . "\n"                   .'<a href="server_privileges.php?' . $GLOBALS['url_query'] .  '"'                   .' onclick="if (unMarkAllRows(\'usersForm\')) return false;">'                   . __('Uncheck All') . '</a>' . "\n";                // add/delete user fieldset                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user">'                   . '        <legend>' . "\n"                   . PMA_getIcon('b_usrdrop.png')                   . '            ' . __('Remove selected users') . '' . "\n"                   . '        </legend>' . "\n"                   . '        <input type="hidden" name="mode" value="2" />' . "\n"                   . '(' . __('Revoke all active privileges from the users and delete them afterwards.') . ')<br />' . "\n"                   . '        <input type="checkbox" title="' . __('Drop the databases that have the same names as the users.') . '" name="drop_users_db" id="checkbox_drop_users_db" />' . "\n"                   . '        <label for="checkbox_drop_users_db" title="' . __('Drop the databases that have the same names as the users.') . '">' . "\n"                   . '            ' . __('Drop the databases that have the same names as the users.') . "\n"                   . '        </label>' . "\n"                   . '    </fieldset>' . "\n"                   . '    <fieldset id="fieldset_delete_user_footer" class="tblFooters">' . "\n"                   . '        <input type="submit" name="delete" value="' . __('Go') . '" id="buttonGo" class="' . $conditional_class . '"/>' . "\n"                   . '    </fieldset>' . "\n"                   . '</form>' . "\n";            } else {                unset ($row);                echo '    <fieldset id="fieldset_add_user">' . "\n"                   . '        <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1" class="' . $conditional_class . '">' . "\n"                   . PMA_getIcon('b_usradd.png')                   . '            ' . __('Add user') . '</a>' . "\n"                   . '    </fieldset>' . "\n";            } // end if (display overview)            if ($GLOBALS['is_ajax_request']) {                exit;            }            $flushnote = new PMA_Message(__('Note: phpMyAdmin gets the users\' privileges directly from MySQL\'s privilege tables. The content of these tables may differ from the privileges the server uses, if they have been changed manually. In this case, you should %sreload the privileges%s before you continue.'), PMA_Message::NOTICE);            $flushnote->addParam('<a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;flush_privileges=1" id="reload_privileges_anchor" class="' . $conditional_class . '">', false);            $flushnote->addParam('</a>', false);            $flushnote->display();        }    } else {        // A user was selected -> display the user's properties        // In an Ajax request, prevent cached values from showing        if ($GLOBALS['is_ajax_request'] == true) {            header('Cache-Control: no-cache');        }        echo '<h2>' . "\n"           . PMA_getIcon('b_usredit.png')           . __('Edit Privileges') . ': '           . __('User');        if (isset($dbname)) {            echo ' <i><a href="server_privileges.php?'                . $GLOBALS['url_query'] . '&amp;username=' . htmlspecialchars(urlencode($username))                . '&amp;hostname=' . htmlspecialchars(urlencode($hostname)) . '&amp;dbname=&amp;tablename=">\''                . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</a></i>' . "\n";            $url_dbname = urlencode(str_replace(array('\_', '\%'), array('_', '%'), $dbname));            echo ' - ' . ($dbname_is_wildcard ? __('Databases') : __('Database') );            if (isset($tablename)) {                echo ' <i><a href="server_privileges.php?' . $GLOBALS['url_query']                    . '&amp;username=' . htmlspecialchars(urlencode($username)) . '&amp;hostname=' . htmlspecialchars(urlencode($hostname))                    . '&amp;dbname=' . htmlspecialchars($url_dbname) . '&amp;tablename=">' . htmlspecialchars($dbname) . '</a></i>';                echo ' - ' . __('Table') . ' <i>' . htmlspecialchars($tablename) . '</i>';            } else {                echo ' <i>' . htmlspecialchars($dbname) . '</i>';            }        } else {            echo ' <i>\'' . htmlspecialchars($username) . '\'@\'' . htmlspecialchars($hostname)                . '\'</i>' . "\n";        }        echo '</h2>' . "\n";        $sql = "SELECT '1' FROM `mysql`.`user`"            . " WHERE `User` = '" . PMA_sqlAddSlashes($username) . "'"            . " AND `Host` = '" . PMA_sqlAddSlashes($hostname) . "';";        $user_does_not_exists = (bool) ! PMA_DBI_fetch_value($sql);        unset($sql);        if ($user_does_not_exists) {            PMA_Message::error(__('The selected user was not found in the privilege table.'))->display();            PMA_displayLoginInformationFields();            //require './libraries/footer.inc.php';        }        echo '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n";        $_params = array(            'username' => $username,            'hostname' => $hostname,        );        if (isset($dbname)) {            $_params['dbname'] = $dbname;            if (isset($tablename)) {                $_params['tablename'] = $tablename;            }        }        echo PMA_generate_common_hidden_inputs($_params);        PMA_displayPrivTable(            PMA_ifSetOr($dbname, '*', 'length'),            PMA_ifSetOr($tablename, '*', 'length')        );        echo '</form>' . "\n";        if (! isset($tablename) && empty($dbname_is_wildcard)) {            // no table name was given, display all table specific rights            // but only if $dbname contains no wildcards            // table header            echo '<form action="server_privileges.php" id="db_or_table_specific_priv" method="post">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset>' . "\n"               . '<legend>' . (! isset($dbname) ? __('Database-specific privileges') : __('Table-specific privileges')) . '</legend>' . "\n"               . '<table class="data">' . "\n"               . '<thead>' . "\n"               . '<tr><th>' . (! isset($dbname) ? __('Database') : __('Table')) . '</th>' . "\n"               . '    <th>' . __('Privileges') . '</th>' . "\n"               . '    <th>' . __('Grant') . '</th>' . "\n"               . '    <th>' . (! isset($dbname) ? __('Table-specific privileges') : __('Column-specific privileges')) . '</th>' . "\n"               . '    <th colspan="2">' . __('Action') . '</th>' . "\n"               . '</tr>' . "\n"               . '</thead>' . "\n"               . '<tbody>' . "\n";            $user_host_condition = ' WHERE `User`'                . ' = \'' . PMA_sqlAddSlashes($username) . "'"                . ' AND `Host`'                . ' = \'' . PMA_sqlAddSlashes($hostname) . "'";            // table body            // get data            // we also want privielgs for this user not in table `db` but in other table            $tables = PMA_DBI_fetch_result('SHOW TABLES FROM `mysql`;');            if (! isset($dbname)) {                // no db name given, so we want all privs for the given user                $tables_to_search_for_users = array(                    'tables_priv', 'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Db`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Db'          => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Table_privs' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Db` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    // only Db names in the table `mysql`.`db` uses wildcards                    // as we are in the db specific rights display we want                    // all db names escaped, also from other sources                    $db_rights_row['Db'] = PMA_escape_mysql_wildcards(                        $db_rights_row['Db']                    );                    $db_rights[$db_rights_row['Db']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT * FROM `mysql`.`db`' . $user_host_condition . ' ORDER BY `Db` ASC';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Db']])) {                        $db_rights[$row['Db']] = array_merge($db_rights[$row['Db']], $row);                    } else {                        $db_rights[$row['Db']] = $row;                    }                    // there are db specific rights for this user                    // so we can drop this db rights                    $db_rights[$row['Db']]['can_delete'] = true;                }                PMA_DBI_free_result($res);                unset($row, $res);            } else {                // db name was given,                // so we want all user specific rights for this db                $user_host_condition .=                    ' AND `Db`'                    .' LIKE \'' . PMA_sqlAddSlashes($dbname, true) . "'";                $tables_to_search_for_users = array(                    'columns_priv',                );                $db_rights_sqls = array();                foreach ($tables_to_search_for_users as $table_search_in) {                    if (in_array($table_search_in, $tables)) {                        $db_rights_sqls[] = '                            SELECT DISTINCT `Table_name`                                   FROM `mysql`.' . PMA_backquote($table_search_in)                                   . $user_host_condition;                    }                }                $user_defaults = array(                    'Table_name'  => '',                    'Grant_priv'  => 'N',                    'privs'       => array('USAGE'),                    'Column_priv' => true,                );                // for the rights                $db_rights = array();                $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'                    .' ORDER BY `Table_name` ASC';                $db_rights_result = PMA_DBI_query($db_rights_sql);                while ($db_rights_row = PMA_DBI_fetch_assoc($db_rights_result)) {                    $db_rights_row = array_merge($user_defaults, $db_rights_row);                    $db_rights[$db_rights_row['Table_name']] = $db_rights_row;                }                PMA_DBI_free_result($db_rights_result);                unset($db_rights_sql, $db_rights_sqls, $db_rights_result, $db_rights_row);                $sql_query = 'SELECT `Table_name`,'                    .' `Table_priv`,'                    .' IF(`Column_priv` = _latin1 \'\', 0, 1)'                    .' AS \'Column_priv\''                    .' FROM `mysql`.`tables_priv`'                    . $user_host_condition                    .' ORDER BY `Table_name` ASC;';                $res = PMA_DBI_query($sql_query);                $sql_query = '';                while ($row = PMA_DBI_fetch_assoc($res)) {                    if (isset($db_rights[$row['Table_name']])) {                        $db_rights[$row['Table_name']] = array_merge($db_rights[$row['Table_name']], $row);                    } else {                        $db_rights[$row['Table_name']] = $row;                    }                }                PMA_DBI_free_result($res);                unset($row, $res);            }            ksort($db_rights);            // display rows            if (count($db_rights) < 1) {                echo '<tr class="odd">' . "\n"                   . '    <td colspan="6"><center><i>' . __('None') . '</i></center></td>' . "\n"                   . '</tr>' . "\n";            } else {                $odd_row = true;                $found_rows = array();                //while ($row = PMA_DBI_fetch_assoc($res)) {                foreach ($db_rights as $row) {                    $found_rows[] = (! isset($dbname)) ? $row['Db'] : $row['Table_name'];                    echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                       . '    <td>' . htmlspecialchars((! isset($dbname)) ? $row['Db'] : $row['Table_name']) . '</td>' . "\n"                       . '    <td><tt>' . "\n"                       . '        ' . join(',' . "\n" . '            ', PMA_extractPrivInfo($row, true)) . "\n"                       . '        </tt></td>' . "\n"                       . '    <td>' . ((((! isset($dbname)) && $row['Grant_priv'] == 'Y') || (isset($dbname) && in_array('Grant', explode(',', $row['Table_priv'])))) ? __('Yes') : __('No')) . '</td>' . "\n"                       . '    <td>';                    if (! empty($row['Table_privs']) || ! empty ($row['Column_priv'])) {                        echo __('Yes');                    } else {                        echo __('No');                    }                    echo '</td>' . "\n"                       . '    <td>';                    printf(                        $link_edit,                        htmlspecialchars(urlencode($username)),                        urlencode(htmlspecialchars($hostname)),                        urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                        urlencode((! isset($dbname)) ? '' : $row['Table_name'])                    );                    echo '</td>' . "\n"                       . '    <td>';                    if (! empty($row['can_delete']) || isset($row['Table_name']) && strlen($row['Table_name'])) {                        printf(                            $link_revoke,                            htmlspecialchars(urlencode($username)),                            urlencode(htmlspecialchars($hostname)),                            urlencode((! isset($dbname)) ? $row['Db'] : htmlspecialchars($dbname)),                            urlencode((! isset($dbname)) ? '' : $row['Table_name'])                        );                    }                    echo '</td>' . "\n"                       . '</tr>' . "\n";                    $odd_row = ! $odd_row;                } // end while            }            unset($row);            echo '</tbody>' . "\n"               . '</table>' . "\n";            if (! isset($dbname)) {                // no database name was given, display select db                $pred_db_array =PMA_DBI_fetch_result('SHOW DATABASES;');                echo '    <label for="text_dbname">' . __('Add privileges on the following database') . ':</label>' . "\n";                if (! empty($pred_db_array)) {                    echo '    <select name="pred_dbname" class="autosubmit">' . "\n"                       . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                    foreach ($pred_db_array as $current_db) {                        $current_db = PMA_escape_mysql_wildcards($current_db);                        // cannot use array_diff() once, outside of the loop,                        // because the list of databases has special characters                        // already escaped in $found_rows,                        // contrary to the output of SHOW DATABASES                        if (empty($found_rows) || ! in_array($current_db, $found_rows)) {                            echo '        <option value="' . htmlspecialchars($current_db) . '">'                                . htmlspecialchars($current_db) . '</option>' . "\n";                        }                    }                    echo '    </select>' . "\n";                }                echo '    <input type="text" id="text_dbname" name="dbname" />' . "\n"                    . PMA_showHint(__('Wildcards % and _ should be escaped with a \ to use them literally'));            } else {                echo '    <input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '"/>' . "\n"                   . '    <label for="text_tablename">' . __('Add privileges on the following table') . ':</label>' . "\n";                if ($res = @PMA_DBI_try_query('SHOW TABLES FROM ' . PMA_backquote(PMA_unescape_mysql_wildcards($dbname)) . ';', null, PMA_DBI_QUERY_STORE)) {                    $pred_tbl_array = array();                    while ($row = PMA_DBI_fetch_row($res)) {                        if (! isset($found_rows) || ! in_array($row[0], $found_rows)) {                            $pred_tbl_array[] = $row[0];                        }                    }                    PMA_DBI_free_result($res);                    unset($res, $row);                    if (! empty($pred_tbl_array)) {                        echo '    <select name="pred_tablename" class="autosubmit">' . "\n"                           . '        <option value="" selected="selected">' . __('Use text field') . ':</option>' . "\n";                        foreach ($pred_tbl_array as $current_table) {                            echo '        <option value="' . htmlspecialchars($current_table) . '">' . htmlspecialchars($current_table) . '</option>' . "\n";                        }                        echo '    </select>' . "\n";                    }                } else {                    unset($res);                }                echo '    <input type="text" id="text_tablename" name="tablename" />' . "\n";            }            echo '</fieldset>' . "\n";            echo '<fieldset class="tblFooters">' . "\n"               . '    <input type="submit" value="' . __('Go') . '" />'               . '</fieldset>' . "\n"               . '</form>' . "\n";        }        // Provide a line with links to the relevant database and table        if (isset($dbname) && empty($dbname_is_wildcard)) {            echo '[ ' . __('Database')                . ' <a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'                . $GLOBALS['url_query'] . '&amp;db=' . $url_dbname . '&amp;reload=1">'                . htmlspecialchars($dbname) . ': ' . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabDatabase']) . "</a> ]\n";            if (isset($tablename)) {                echo ' [ ' . __('Table') . ' <a href="'                    . $GLOBALS['cfg']['DefaultTabTable'] . '?' . $GLOBALS['url_query']                    . '&amp;db=' . $url_dbname . '&amp;table=' . htmlspecialchars(urlencode($tablename))                    . '&amp;reload=1">' . htmlspecialchars($tablename) . ': '                    . PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])                    . "</a> ]\n";            }            unset($url_dbname);        }        if (! isset($dbname) && ! $user_does_not_exists) {            include_once './libraries/display_change_password.lib.php';            echo '<form action="server_privileges.php" method="post" onsubmit="return checkPassword(this);">' . "\n"               . PMA_generate_common_hidden_inputs('', '')               . '<input type="hidden" name="old_username" value="' . htmlspecialchars($username) . '" />' . "\n"               . '<input type="hidden" name="old_hostname" value="' . htmlspecialchars($hostname) . '" />' . "\n"               . '<fieldset id="fieldset_change_copy_user">' . "\n"               . '    <legend>' . __('Change Login Information / Copy User') . '</legend>' . "\n";            PMA_displayLoginInformationFields('change');            echo '    <fieldset>' . "\n"                . '        <legend>' . __('Create a new user with the same privileges and ...') . '</legend>' . "\n";            $choices = array(                '4' => __('... keep the old one.'),                '1' => __('... delete the old one from the user tables.'),                '2' => __('... revoke all active privileges from the old one and delete it afterwards.'),                '3' => __('... delete the old one from the user tables and reload the privileges afterwards.'));            PMA_display_html_radio('mode', $choices, '4', true);            unset($choices);            echo '    </fieldset>' . "\n"               . '</fieldset>' . "\n"               . '<fieldset id="fieldset_change_copy_user_footer" class="tblFooters">' . "\n"               . '    <input type="submit" name="change_copy" value="' . __('Go') . '" />' . "\n"               . '</fieldset>' . "\n"               . '</form>' . "\n";        }    }} elseif (isset($_REQUEST['adduser'])) {    // Add user    $GLOBALS['url_query'] .= '&amp;adduser=1';    echo '<h2>' . "\n"       . PMA_getIcon('b_usradd.png') . __('Add user') . "\n"       . '</h2>' . "\n"       . '<form name="usersForm" id="addUsersForm_' . $random_n . '" action="server_privileges.php" method="post">' . "\n"       . PMA_generate_common_hidden_inputs('', '');    PMA_displayLoginInformationFields('new');    echo '<fieldset id="fieldset_add_user_database">' . "\n"        . '<legend>' . __('Database for user') . '</legend>' . "\n";    $default_choice = 0;    $choices = array(        '0' => _pgettext('Create none database for user', 'None'),        '1' => __('Create database with same name and grant all privileges'),        '2' => __('Grant all privileges on wildcard name (username\\_%)'));    if (! empty($dbname) ) {        $choices['3'] = sprintf(            __('Grant all privileges on database &quot;%s&quot;'),            htmlspecialchars($dbname)        );        $default_choice = 3;        echo '<input type="hidden" name="dbname" value="' . htmlspecialchars($dbname) . '" />' . "\n";    }    // 4th parameter set to true to add line breaks    // 5th parameter set to false to avoid htmlspecialchars() escaping in the label    //  since we have some HTML in some labels    PMA_display_html_radio('createdb', $choices, $default_choice, true, false);    unset($choices);    unset($default_choice);    echo '</fieldset>' . "\n";    PMA_displayPrivTable('*', '*', false);    echo '    <fieldset id="fieldset_add_user_footer" class="tblFooters">' . "\n"       . '        <input type="submit" name="adduser_submit" value="' . __('Go') . '" />' . "\n"       . '    </fieldset>' . "\n"       . '</form>' . "\n";} else {    // check the privileges for a particular database.    $user_form = '<form id="usersForm" action="server_privileges.php"><fieldset>' . "\n"       . '<legend>' . "\n"       . PMA_getIcon('b_usrcheck.png')       . '    ' . sprintf(__('Users having access to &quot;%s&quot;'), '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?' . PMA_generate_common_url($checkprivs) . '">' .  htmlspecialchars($checkprivs) . '</a>') . "\n"       . '</legend>' . "\n"       . '<table id="dbspecificuserrights" class="data">' . "\n"       . '<thead>' . "\n"       . '    <tr><th>' . __('User') . '</th>' . "\n"       . '        <th>' . __('Host') . '</th>' . "\n"       . '        <th>' . __('Type') . '</th>' . "\n"       . '        <th>' . __('Privileges') . '</th>' . "\n"       . '        <th>' . __('Grant') . '</th>' . "\n"       . '        <th>' . __('Action') . '</th>' . "\n"       . '    </tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    unset($row, $row1, $row2);    // now, we build the table...    $list_of_privileges        = '`User`, '        . '`Host`, '        . '`Select_priv`, '        . '`Insert_priv`, '        . '`Update_priv`, '        . '`Delete_priv`, '        . '`Create_priv`, '        . '`Drop_priv`, '        . '`Grant_priv`, '        . '`Index_priv`, '        . '`Alter_priv`, '        . '`References_priv`, '        . '`Create_tmp_table_priv`, '        . '`Lock_tables_priv`, '        . '`Create_view_priv`, '        . '`Show_view_priv`, '        . '`Create_routine_priv`, '        . '`Alter_routine_priv`, '        . '`Execute_priv`';    $list_of_compared_privileges        = '`Select_priv` = \'N\''        . ' AND `Insert_priv` = \'N\''        . ' AND `Update_priv` = \'N\''        . ' AND `Delete_priv` = \'N\''        . ' AND `Create_priv` = \'N\''        . ' AND `Drop_priv` = \'N\''        . ' AND `Grant_priv` = \'N\''        . ' AND `References_priv` = \'N\''        . ' AND `Create_tmp_table_priv` = \'N\''        . ' AND `Lock_tables_priv` = \'N\''        . ' AND `Create_view_priv` = \'N\''        . ' AND `Show_view_priv` = \'N\''        . ' AND `Create_routine_priv` = \'N\''        . ' AND `Alter_routine_priv` = \'N\''        . ' AND `Execute_priv` = \'N\'';    if (PMA_MYSQL_INT_VERSION >= 50106) {        $list_of_privileges .=            ', `Event_priv`, '            . '`Trigger_priv`';        $list_of_compared_privileges .=            ' AND `Event_priv` = \'N\''            . ' AND `Trigger_priv` = \'N\'';    }    $sql_query = '(SELECT ' . $list_of_privileges . ', `Db`'        .' FROM `mysql`.`db`'        .' WHERE \'' . PMA_sqlAddSlashes($checkprivs) . "'"        .' LIKE `Db`'        .' AND NOT (' . $list_of_compared_privileges. ')) '        .'UNION '        .'(SELECT ' . $list_of_privileges . ', \'*\' AS `Db`'        .' FROM `mysql`.`user` '        .' WHERE NOT (' . $list_of_compared_privileges . ')) '        .' ORDER BY `User` ASC,'        .'  `Host` ASC,'        .'  `Db` ASC;';    $res = PMA_DBI_query($sql_query);    $row = PMA_DBI_fetch_assoc($res);    if ($row) {        $found = true;    }    if ($found) {        while (true) {            // prepare the current user            $current_privileges = array();            $current_user = $row['User'];            $current_host = $row['Host'];            while ($row && $current_user == $row['User'] && $current_host == $row['Host']) {                $current_privileges[] = $row;                $row = PMA_DBI_fetch_assoc($res);            }            $user_form .= '    <tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . (empty($current_user) ? '<span style="color: #FF0000">' . __('Any') . '</span>' : htmlspecialchars($current_user)) . "\n"               . '        </td>' . "\n"               . '        <td';            if (count($current_privileges) > 1) {                $user_form .= ' rowspan="' . count($current_privileges) . '"';            }            $user_form .= '>' . htmlspecialchars($current_host) . '</td>' . "\n";            for ($i = 0; $i < count($current_privileges); $i++) {                $current = $current_privileges[$i];                $user_form .= '        <td>' . "\n"                   . '            ';                if (! isset($current['Db']) || $current['Db'] == '*') {                    $user_form .= __('global');                } elseif ($current['Db'] == PMA_escape_mysql_wildcards($checkprivs)) {                    $user_form .= __('database-specific');                } else {                    $user_form .= __('wildcard'). ': <tt>' . htmlspecialchars($current['Db']) . '</tt>';                }                $user_form .= "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            <tt>' . "\n"                   . '                ' . join(',' . "\n" . '                ', PMA_extractPrivInfo($current, true)) . "\n"                   . '            </tt>' . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n"                   . '            ' . ($current['Grant_priv'] == 'Y' ? __('Yes') : __('No')) . "\n"                   . '        </td>' . "\n"                   . '        <td>' . "\n";                $user_form .= sprintf(                    $link_edit,                    urlencode($current_user),                    urlencode($current_host),                    urlencode(! isset($current['Db']) || $current['Db'] == '*' ? '' : $current['Db']),                    ''                );                $user_form .= '</td>' . "\n"                   . '    </tr>' . "\n";                if (($i + 1) < count($current_privileges)) {                    $user_form .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">' . "\n";                }            }            if (empty($row) && empty($row1) && empty($row2)) {                break;            }            $odd_row = ! $odd_row;        }    } else {        $user_form .= '    <tr class="odd">' . "\n"           . '        <td colspan="6">' . "\n"           . '            ' . __('No user found.') . "\n"           . '        </td>' . "\n"           . '    </tr>' . "\n";    }    $user_form .= '</tbody>' . "\n"       . '</table></fieldset></form>' . "\n";    if ($GLOBALS['is_ajax_request'] == true) {        $extra_data['user_form'] = $user_form;        $message = PMA_Message::success(__('User has been added.'));        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    } else {        // Offer to create a new user for the current database        $user_form .= '<fieldset id="fieldset_add_user">' . "\n"           . '<legend>' . __('New') . '</legend>' . "\n"           . '    <a href="server_privileges.php?' . $GLOBALS['url_query'] . '&amp;adduser=1&amp;dbname=' . htmlspecialchars($checkprivs) .'" rel="'.'checkprivs='.htmlspecialchars($checkprivs). '&amp;'.$GLOBALS['url_query'] . '" class="'.$conditional_class.'" name="db_specific">' . "\n"           . PMA_getIcon('b_usradd.png')           . '        ' . __('Add user') . '</a>' . "\n"           . '</fieldset>' . "\n";        echo $user_form ;    }} // end if (empty($_REQUEST['adduser']) && empty($checkprivs)) ... elseif ... else .../** * Displays the footer */echo "\n\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_variables.js';PMA_AddJSVar('pma_token', $_SESSION[' PMA_token ']);PMA_AddJSVar('url_query', str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar('is_superuser', PMA_isSuperuser() ? true : false);/** * Does the common work */require './libraries/server_common.inc.php';/** * Required to display documentation links */require './libraries/server_variables_doc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    if (isset($_REQUEST['type'])) {        switch($_REQUEST['type']) {            case 'getval':                $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                    && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte') {                    exit(implode(' ', PMA_formatByteDown($varValue[1], 3, 3)));                }                exit($varValue[1]);                break;            case 'setval':                $value = $_REQUEST['varValue'];                if (isset($VARIABLE_DOC_LINKS[$_REQUEST['varName']][3])                   && $VARIABLE_DOC_LINKS[$_REQUEST['varName']][3] == 'byte'                   && preg_match('/^\s*(\d+(\.\d+)?)\s*(mb|kb|mib|kib|gb|gib)\s*$/i', $value, $matches)) {                    $exp = array('kb' => 1, 'kib' => 1, 'mb' => 2, 'mib' => 2, 'gb' => 3, 'gib' => 3);                    $value = floatval($matches[1]) * pow(1024, $exp[strtolower($matches[3])]);                } else {                    $value = PMA_sqlAddslashes($value);                }                if (! is_numeric($value)) $value="'" . $value . "'";                if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName']) && PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value)) {                    // Some values are rounded down etc.                    $varValue = PMA_DBI_fetch_single_row('SHOW GLOBAL VARIABLES WHERE Variable_name="' . PMA_sqlAddslashes($_REQUEST['varName']) . '";', 'NUM');                    exit(json_encode(array(                        'success' => true,                        'variable' => formatVariable($_REQUEST['varName'], $varValue[1])                        ))                    );                }                exit(json_encode(array(                    'success' => false,                    'error' => __('Setting variable failed')                    ))                );                break;        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($cfg['MainPageIconic'] ? PMA_getImage('s_vars.png') : '')   . '' . __('Server variables and settings') . "\n"   . PMA_showMySQLDocu('server_system_variables', 'server_system_variables')   . '</h2>' . "\n";/** * Sends the queries and buffers the results */$serverVarsSession = PMA_DBI_fetch_result('SHOW SESSION VARIABLES;', 0, 1);$serverVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES;', 0, 1);/** * Displays the page */?><fieldset id="tableFilter" style="display:none;"><legend><?php echo __('Filters'); ?></legend><div class="formelement">    <label for="filterText"><?php echo __('Containing the word:'); ?></label>    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" /></div></fieldset><table id="serverVariables" class="data filteredData noclick"><thead><tr><th><?php echo __('Variable'); ?></th>    <th class="valueHeader"><?phpecho __('Session value') . ' / ' . __('Global value');?>    </th>    <th><?php echo __('Documentation'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($serverVars as $name => $value) {    $has_session_value = isset($serverVarsSession[$name]) && $serverVarsSession[$name] != $value;    $row_class = ($odd_row ? 'odd' : 'even') . ' ' . ($has_session_value ? 'diffSession' : '');    ?><tr class="<?php echo $row_class; ?>">    <th nowrap="nowrap"><?php echo htmlspecialchars(str_replace('_', ' ', $name)); ?></th>    <td class="value"><?php echo formatVariable($name, $value); ?></td>    <td class="value"><?php    // To display variable documentation link    if (isset($VARIABLE_DOC_LINKS[$name]))        echo PMA_showMySQLDocu($VARIABLE_DOC_LINKS[$name][1], $VARIABLE_DOC_LINKS[$name][1], false, $VARIABLE_DOC_LINKS[$name][2] . '_' . $VARIABLE_DOC_LINKS[$name][0]);    ?></td>    <?php    if ($has_session_value) {        ?></tr><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> ">    <td>(<?php echo __('Session value'); ?>)</td>    <td class="value"><?php echo formatVariable($name, $serverVarsSession[$name]); ?></td>    <td class="value"></td>    <?php } ?></tr>    <?php    $odd_row = ! $odd_row;}?></tbody></table><?phpfunction formatVariable($name, $value){    global $VARIABLE_DOC_LINKS;    if (is_numeric($value)) {        if (isset($VARIABLE_DOC_LINKS[$name][3]) && $VARIABLE_DOC_LINKS[$name][3]=='byte')            return '<abbr title="'.PMA_formatNumber($value, 0).'">'.implode(' ', PMA_formatByteDown($value, 3, 3)).'</abbr>';        else return PMA_formatNumber($value, 0);    }    return htmlspecialchars($value);}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build NHibernate dumps of tables * * @package PhpMyAdmin-Export * @subpackage Codegen */if (! defined('PHPMYADMIN')) {    exit;}/** * This gets executed twice so avoid a notice */if (! defined('CG_FORMAT_NHIBERNATE_CS')) {    define("CG_FORMAT_NHIBERNATE_CS", "NHibernate C# DO");    define("CG_FORMAT_NHIBERNATE_XML", "NHibernate XML");    define("CG_HANDLER_NHIBERNATE_CS_BODY", "handleNHibernateCSBody");    define("CG_HANDLER_NHIBERNATE_XML_BODY", "handleNHibernateXMLBody");}$CG_FORMATS = array(CG_FORMAT_NHIBERNATE_CS, CG_FORMAT_NHIBERNATE_XML);$CG_HANDLERS = array(CG_HANDLER_NHIBERNATE_CS_BODY, CG_HANDLER_NHIBERNATE_XML_BODY);/** * */if (isset($plugin_list)) {    $plugin_list['codegen'] = array(        'text' => 'CodeGen',        'extension' => 'cs',        'mime_type' => 'text/cs',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'select', 'name' => 'format', 'text' => __('Format:'), 'values' => $CG_FORMATS),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in NHibernate format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $CG_FORMATS, $CG_HANDLERS, $what;        $format = $GLOBALS[$what . '_format'];        if (isset($CG_FORMATS[$format])) {            return PMA_exportOutputHandler($CG_HANDLERS[$format]($db, $table, $crlf));        }        return PMA_exportOutputHandler(sprintf("%s is not supported.", $format));    }    /**     *     * @package PhpMyAdmin-Export     * @subpackage Codegen     */    class TableProperty    {        public $name;        public $type;        public $nullable;        public $key;        public $defaultValue;        public $ext;        function __construct($row)        {            $this->name = trim($row[0]);            $this->type = trim($row[1]);            $this->nullable = trim($row[2]);            $this->key = trim($row[3]);            $this->defaultValue = trim($row[4]);            $this->ext = trim($row[5]);        }        function getPureType()        {            $pos=strpos($this->type, "(");            if ($pos > 0)                return substr($this->type, 0, $pos);            return $this->type;        }        function isNotNull()        {            return $this->nullable == "NO" ? "true" : "false";        }        function isUnique()        {            return $this->key == "PRI" || $this->key == "UNI" ? "true" : "false";        }        function getDotNetPrimitiveType()        {            if (strpos($this->type, "int") === 0) return "int";            if (strpos($this->type, "long") === 0) return "long";            if (strpos($this->type, "char") === 0) return "string";            if (strpos($this->type, "varchar") === 0) return "string";            if (strpos($this->type, "text") === 0) return "string";            if (strpos($this->type, "longtext") === 0) return "string";            if (strpos($this->type, "tinyint") === 0) return "bool";            if (strpos($this->type, "datetime") === 0) return "DateTime";            return "unknown";        }        function getDotNetObjectType()        {            if (strpos($this->type, "int") === 0) return "Int32";            if (strpos($this->type, "long") === 0) return "Long";            if (strpos($this->type, "char") === 0) return "String";            if (strpos($this->type, "varchar") === 0) return "String";            if (strpos($this->type, "text") === 0) return "String";            if (strpos($this->type, "longtext") === 0) return "String";            if (strpos($this->type, "tinyint") === 0) return "Boolean";            if (strpos($this->type, "datetime") === 0) return "DateTime";            return "Unknown";        }        function getIndexName()        {            if (strlen($this->key)>0)                return "index=\"" . htmlspecialchars($this->name, ENT_COMPAT, 'UTF-8') . "\"";            return "";        }        function isPK()        {            return $this->key=="PRI";        }        function formatCs($text)        {            $text=str_replace("#name#", cgMakeIdentifier($this->name, false), $text);            return $this->format($text);        }        function formatXml($text)        {            $text=str_replace("#name#", htmlspecialchars($this->name, ENT_COMPAT, 'UTF-8'), $text);            $text=str_replace("#indexName#", $this->getIndexName(), $text);            return $this->format($text);        }        function format($text)        {            $text=str_replace("#ucfirstName#", cgMakeIdentifier($this->name), $text);            $text=str_replace("#dotNetPrimitiveType#", $this->getDotNetPrimitiveType(), $text);            $text=str_replace("#dotNetObjectType#", $this->getDotNetObjectType(), $text);            $text=str_replace("#type#", $this->getPureType(), $text);            $text=str_replace("#notNull#", $this->isNotNull(), $text);            $text=str_replace("#unique#", $this->isUnique(), $text);            return $text;        }    }    function cgMakeIdentifier($str, $ucfirst = true)    {        // remove unsafe characters        $str = preg_replace('/[^\p{L}\p{Nl}_]/u', '', $str);        // make sure first character is a letter or _        if (!preg_match('/^\pL/u', $str)) {            $str = '_' . $str;        }        if ($ucfirst) {            $str = ucfirst($str);        }        return $str;    }    function handleNHibernateCSBody($db, $table, $crlf)    {        $lines=array();        $result=PMA_DBI_query(sprintf('DESC %s.%s', PMA_backquote($db), PMA_backquote($table)));        if ($result) {            $tableProperties=array();            while ($row = PMA_DBI_fetch_row($result)) {                $tableProperties[] = new TableProperty($row);            }            PMA_DBI_free_result($result);            $lines[] = 'using System;';            $lines[] = 'using System.Collections;';            $lines[] = 'using System.Collections.Generic;';            $lines[] = 'using System.Text;';            $lines[] = 'namespace ' . cgMakeIdentifier($db);            $lines[] = '{';            $lines[] = '    #region ' . cgMakeIdentifier($table);            $lines[] = '    public class ' . cgMakeIdentifier($table);            $lines[] = '    {';            $lines[] = '        #region Member Variables';            foreach ($tableProperties as $tablePropertie) {                $lines[] = $tablePropertie->formatCs('        protected #dotNetPrimitiveType# _#name#;');            }            $lines[] = '        #endregion';            $lines[] = '        #region Constructors';            $lines[] = '        public ' . cgMakeIdentifier($table).'() { }';            $temp = array();            foreach ($tableProperties as $tablePropertie) {                if (! $tablePropertie->isPK()) {                    $temp[] = $tablePropertie->formatCs('#dotNetPrimitiveType# #name#');                }            }            $lines[] = '        public ' . cgMakeIdentifier($table) . '(' . implode(', ', $temp) . ')';            $lines[] = '        {';            foreach ($tableProperties as $tablePropertie) {                if (! $tablePropertie->isPK()) {                    $lines[] = $tablePropertie->formatCs('            this._#name#=#name#;');                }            }            $lines[] = '        }';            $lines[] = '        #endregion';            $lines[] = '        #region Public Properties';            foreach ($tableProperties as $tablePropertie) {                $lines[] = $tablePropertie->formatCs(''                    . '        public virtual #dotNetPrimitiveType# #ucfirstName#' . "\n"                    . '        {' . "\n"                    . '            get {return _#name#;}' . "\n"                    . '            set {_#name#=value;}' . "\n"                    . '        }'                    );            }            $lines[] = '        #endregion';            $lines[] = '    }';            $lines[] = '    #endregion';            $lines[] = '}';        }        return implode("\n", $lines);    }    function handleNHibernateXMLBody($db, $table, $crlf)    {        $lines = array();        $lines[] = '<?xml version="1.0" encoding="utf-8" ?' . '>';        $lines[] = '<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" '            . 'namespace="' . cgMakeIdentifier($db) . '" '            . 'assembly="' . cgMakeIdentifier($db) . '">';        $lines[] = '    <class '            . 'name="' . cgMakeIdentifier($table) . '" '            . 'table="' . cgMakeIdentifier($table) . '">';        $result = PMA_DBI_query(sprintf("DESC %s.%s", PMA_backquote($db), PMA_backquote($table)));        if ($result) {            while ($row = PMA_DBI_fetch_row($result)) {                $tablePropertie = new TableProperty($row);                if ($tablePropertie->isPK())                    $lines[] = $tablePropertie->formatXml(''                        . '        <id name="#ucfirstName#" type="#dotNetObjectType#" unsaved-value="0">' . "\n"                        . '            <column name="#name#" sql-type="#type#" not-null="#notNull#" unique="#unique#" index="PRIMARY"/>' . "\n"                        . '            <generator class="native" />' . "\n"                        . '        </id>');                else                    $lines[] = $tablePropertie->formatXml(''                        . '        <property name="#ucfirstName#" type="#dotNetObjectType#">' . "\n"                        . '            <column name="#name#" sql-type="#type#" not-null="#notNull#" #indexName#/>' . "\n"                        . '        </property>');            }            PMA_DBI_free_result($result);        }        $lines[] = '    </class>';        $lines[] = '</hibernate-mapping>';        return implode("\n", $lines);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_merge extends PMA_StorageEngine{}?>
<?php/** * Handles the visualization of GIS LINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Linestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        return $this->setMinMax($linesrting, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                $temp_point = $point;            }        }        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        foreach ($points_arr as $point) {            if (! isset($temp_point)) {                $temp_point = $point;            } else {                // draw line section                $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                $temp_point = $point;            }        }        // print label        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS LINESTRING object     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, $scale_data);        $row = '<polyline points="';        foreach ($points_arr as $point) {            $row .= $point[0] . ',' . $point[1] . ' ';        }        $row .= '"';        foreach ($line_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS LINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS LINESTRING object     * @param string $line_color Color for the GIS LINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linesrting = substr($spatial, 11, (strlen($spatial) - 12));        $points_arr = $this->extractPoints($linesrting, null);        $row = 'new Array(';        foreach ($points_arr as $point) {            $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject()), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')';        $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.LineString(' . $row . '), null, '            . json_encode($style_options) . '));';        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_points = isset($gis_data[$index]['LINESTRING']['no_of_points'])            ? $gis_data[$index]['LINESTRING']['no_of_points'] : 2;        if ($no_of_points < 2) {            $no_of_points = 2;        }        $wkt = 'LINESTRING(';        for ($i = 0; $i < $no_of_points; $i++) {            $wkt .= ((isset($gis_data[$index]['LINESTRING'][$i]['x'])                && trim($gis_data[$index]['LINESTRING'][$i]['x']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['x'] : $empty)                . ' ' . ((isset($gis_data[$index]['LINESTRING'][$i]['y'])                && trim($gis_data[$index]['LINESTRING'][$i]['y']) != '')                ? $gis_data[$index]['LINESTRING'][$i]['y'] : $empty) .',';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'LINESTRING';            $wkt = $value;        }        // Trim to remove leading 'LINESTRING(' and trailing ')'        $linestring = substr($wkt, 11, (strlen($wkt) - 12));        $points_arr = $this->extractPoints($linestring, null);        $no_of_points = count($points_arr);        $params[$index]['LINESTRING']['no_of_points'] = $no_of_points;        for ($i = 0; $i < $no_of_points; $i++) {            $params[$index]['LINESTRING'][$i]['x'] = $points_arr[$i][0];            $params[$index]['LINESTRING'][$i]['y'] = $points_arr[$i][1];        }        return $params;    }}?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'asc_order' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_bookmark' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_firstpage' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '18',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_lastpage' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'b_docs' => array(            'position' => '22',            'width'    => '16',            'height'   => '16'        ),        'b_docsql' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_prevpage' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'bd_select' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '33',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_firstpage' => array(            'position' => '37',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_home' => array(            'position' => '40',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '43',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '45',            'width'    => '16',            'height'   => '16'        ),        'b_lastpage' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_more' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_pdfdoc' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '53',            'width'    => '16',            'height'   => '16'        ),        'b_prevpage' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_primary' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '57',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_sdb' => array(            'position' => '63',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_spatial' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_sqldoc' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '78',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '81',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '82',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '83',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'database' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '90',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '93',            'width'    => '5',            'height'   => '9'        ),        'item' => array(            'position' => '94',            'width'    => '9',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '95',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '96',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '97',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '98',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        'pause' => array(            'position' => '105',            'width'    => '16',            'height'   => '16'        ),        'php_sym' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        'play' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '109',            'width'    => '16',            'height'   => '16'        ),        's_attention' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_cancel2' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_cancel' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_error2' => array(            'position' => '116',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '118',            'width'    => '16',            'height'   => '16'        ),        's_info' => array(            'position' => '119',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '120',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '121',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '122',            'width'    => '16',            'height'   => '16'        ),        's_okay' => array(            'position' => '123',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '124',            'width'    => '16',            'height'   => '16'        ),        's_process' => array(            'position' => '125',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '126',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '127',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '128',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '129',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '130',            'width'    => '16',            'height'   => '16'        ),        's_status' => array(            'position' => '131',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '132',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '133',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '134',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '135',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '136',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '137',            'width'    => '16',            'height'   => '16'        ),        'window-new' => array(            'position' => '138',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use script based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//** * This function returns username and password. * * It can optionally use configured username as parameter. * * @param string $user * @return array */function get_login_credentials($user){    return array('root', '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for displaying user preferences pages * * @package PhpMyAdmin *//** * Common initialization for user preferences modification pages * */function PMA_userprefs_pageinit(){    $forms_all_keys = PMA_read_userprefs_fieldnames($GLOBALS['forms']);    $cf = ConfigFile::getInstance();    $cf->resetConfigData(); // start with a clean instance    $cf->setAllowedKeys($forms_all_keys);    $cf->setCfgUpdateReadMapping(        array(            'Server/hide_db' => 'Servers/1/hide_db',            'Server/only_db' => 'Servers/1/only_db'        )    );    $cf->updateWithGlobalConfig($GLOBALS['cfg']);}/** * Loads user preferences * * Returns an array: * * config_data - path => value pairs * * mtime - last modification time * * type - 'db' (config read from pmadb) or 'session' (read from user session) * * @return array */function PMA_load_userprefs(){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['userconfigwork']) {        // no pmadb table, use session storage        if (! isset($_SESSION['userconfig'])) {            $_SESSION['userconfig'] = array(                'db' => array(),                'ts' => time());        }        return array(            'config_data' => $_SESSION['userconfig']['db'],            'mtime' => $_SESSION['userconfig']['ts'],            'type' => 'session');    }    // load configuration from pmadb    $query_table = PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['userconfig']);    $query = '        SELECT `config_data`, UNIX_TIMESTAMP(`timevalue`) ts        FROM ' . $query_table . '          WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    $row = PMA_DBI_fetch_single_row($query, 'ASSOC', $GLOBALS['controllink']);    return array(        'config_data' => $row ? (array)json_decode($row['config_data']) : array(),        'mtime' => $row ? $row['ts'] : time(),        'type' => 'db');}/** * Saves user preferences * * @param array $config_array configuration array * * @return true|PMA_Message */function PMA_save_userprefs(array $config_array){    $cfgRelation = PMA_getRelationsParam();    $server = isset($GLOBALS['server'])        ? $GLOBALS['server']        : $GLOBALS['cfg']['ServerDefault'];    $cache_key = 'server_' . $server;    if (! $cfgRelation['userconfigwork']) {        // no pmadb table, use session storage        $_SESSION['userconfig'] = array(            'db' => $config_array,            'ts' => time());        if (isset($_SESSION['cache'][$cache_key]['userprefs'])) {            unset($_SESSION['cache'][$cache_key]['userprefs']);        }        return true;    }    // save configuration to pmadb    $query_table = PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['userconfig']);    $query = '        SELECT `username`        FROM ' . $query_table . '          WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    $has_config = PMA_DBI_fetch_value($query, 0, 0, $GLOBALS['controllink']);    $config_data = json_encode($config_array);    if ($has_config) {        $query = '            UPDATE ' . $query_table . '            SET `config_data` = \'' . PMA_sqlAddSlashes($config_data) . '\'            WHERE `username` = \'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\'';    } else {        $query = '            INSERT INTO ' . $query_table . ' (`username`, `config_data`)            VALUES (\'' . PMA_sqlAddSlashes($cfgRelation['user']) . '\',                \'' . PMA_sqlAddSlashes($config_data) . '\')';    }    if (isset($_SESSION['cache'][$cache_key]['userprefs'])) {        unset($_SESSION['cache'][$cache_key]['userprefs']);    }    if (!PMA_DBI_try_query($query, $GLOBALS['controllink'])) {        $message = PMA_Message::error(__('Could not save configuration'));        $message->addMessage('<br /><br />');        $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));        return $message;    }    return true;}/** * Returns a user preferences array filtered by $cfg['UserprefsDisallow'] * (blacklist) and keys from user preferences form (whitelist) * * @param array $config_data path => value pairs * * @return array */function PMA_apply_userprefs(array $config_data){    $cfg = array();    $blacklist = array_flip($GLOBALS['cfg']['UserprefsDisallow']);    if (!$GLOBALS['cfg']['UserprefsDeveloperTab']) {        // disallow everything in the Developers tab        $blacklist['Error_Handler/display'] = true;        $blacklist['Error_Handler/gather'] = true;        $blacklist['DBG/sql'] = true;    }    $whitelist = array_flip(PMA_read_userprefs_fieldnames());    // whitelist some additional fields which are custom handled    $whitelist['ThemeDefault'] = true;    $whitelist['fontsize'] = true;    $whitelist['lang'] = true;    $whitelist['collation_connection'] = true;    $whitelist['Server/hide_db'] = true;    $whitelist['Server/only_db'] = true;    foreach ($config_data as $path => $value) {        if (! isset($whitelist[$path]) || isset($blacklist[$path])) {            continue;        }        PMA_array_write($path, $cfg, $value);    }    return $cfg;}/** * Reads user preferences field names * * @param array|null $forms * * @return array */function PMA_read_userprefs_fieldnames(array $forms = null){    static $names;    // return cached results    if ($names !== null) {        return $names;    }    if (is_null($forms)) {        $forms = array();        include 'libraries/config/user_preferences.forms.php';    }    $names = array();    foreach ($forms as $formset) {        foreach ($formset as $form) {            foreach ($form as $k => $v) {                $names[] = is_int($k) ? $v : $k;            }        }    }    return $names;}/** * Updates one user preferences option (loads and saves to database). * * No validation is done! * * @param string $path          configuration * @param mixed  $value         value * @param mixed  $default_value default value * * @return void */function PMA_persist_option($path, $value, $default_value){    $prefs = PMA_load_userprefs();    if ($value === $default_value) {        if (isset($prefs['config_data'][$path])) {            unset($prefs['config_data'][$path]);        } else {            return;        }    } else {        $prefs['config_data'][$path] = $value;    }    PMA_save_userprefs($prefs['config_data']);}/** * Redirects after saving new user preferences * * @param array  $forms * @param array  $old_settings * @param string $file_name * @param array  $params * @param string $hash */function PMA_userprefs_redirect(array $forms, array $old_settings, $file_name, $params = null, $hash = null){    $reload_left_frame = isset($params['reload_left_frame']) && $params['reload_left_frame'];    if (!$reload_left_frame) {        // compute differences and check whether left frame should be refreshed        $old_settings = isset($old_settings['config_data'])                ? $old_settings['config_data']                : array();        $new_settings = ConfigFile::getInstance()->getConfigArray();        $diff_keys = array_keys(            array_diff_assoc($old_settings, $new_settings)            + array_diff_assoc($new_settings, $old_settings)        );        $check_keys = array('NaturalOrder', 'MainPageIconic', 'DefaultTabDatabase',            'Server/hide_db', 'Server/only_db');        $check_keys = array_merge(            $check_keys, $forms['Left_frame']['Left_frame'],            $forms['Left_frame']['Left_databases']        );        $diff = array_intersect($check_keys, $diff_keys);        $reload_left_frame = !empty($diff);    }    // redirect    $url_params = array(        'saved' => 1,        'reload_left_frame' => $reload_left_frame);    if (is_array($params)) {        $url_params = array_merge($params, $url_params);    }    if ($hash) {        $hash = '#' . urlencode($hash);    }    PMA_sendHeaderLocation(        $GLOBALS['cfg']['PmaAbsoluteUri'] . $file_name        . PMA_generate_common_url($url_params, '&') . $hash    );}/** * Shows form which allows to quickly load settings stored in browser's local storage * */function PMA_userprefs_autoload_header(){    if (isset($_REQUEST['prefs_autoload']) && $_REQUEST['prefs_autoload'] == 'hide') {        $_SESSION['userprefs_autoload'] = true;        exit;    }    $script_name = basename(basename($GLOBALS['PMA_PHP_SELF']));    $return_url = $script_name . '?' . http_build_query($_GET, '', '&');    ?>    <div id="prefs_autoload" class="notice" style="display:none">        <form action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>            <input type="hidden" name="json" value="" />            <input type="hidden" name="submit_import" value="1" />            <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />            <?php echo __('Your browser has phpMyAdmin configuration for this domain. Would you like to import it for current session?') ?>            <br />            <a href="#yes"><?php echo __('Yes') ?></a> / <a href="#no"><?php echo __('No') ?></a>        </form>    </div>    <?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display the binary logs and the content of the selected * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work, provides $binary_logs */require_once './libraries/server_common.inc.php';/** * Displays the links */require_once './libraries/server_links.inc.php';$url_params = array();/** * Need to find the real end of rows? */if (! isset($_REQUEST['pos'])) {    $pos = 0;} else {    /* We need this to be a integer */    $pos = (int) $_REQUEST['pos'];}if (! isset($_REQUEST['log']) || ! array_key_exists($_REQUEST['log'], $binary_logs)) {    $_REQUEST['log'] = '';} else {    $url_params['log'] = $_REQUEST['log'];}$sql_query = 'SHOW BINLOG EVENTS';if (! empty($_REQUEST['log'])) {    $sql_query .= ' IN \'' . $_REQUEST['log'] . '\'';}if ($GLOBALS['cfg']['MaxRows'] !== 'all') {    $sql_query .= ' LIMIT ' . $pos . ', ' . (int) $GLOBALS['cfg']['MaxRows'];}/** * Sends the query */$result = PMA_DBI_query($sql_query);/** * prepare some vars for displaying the result table */// Gets the list of fields propertiesif (isset($result) && $result) {    $num_rows = PMA_DBI_num_rows($result);} else {    $num_rows = 0;}if (empty($_REQUEST['dontlimitchars'])) {    $dontlimitchars = false;} else {    $dontlimitchars = true;    $url_params['dontlimitchars'] = 1;}/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('s_tbl.png') : '')   . '    ' . __('Binary log') . "\n"   . '</h2>' . "\n";/** * Display log selector. */if (count($binary_logs) > 1) {    echo '<form action="server_binlog.php" method="get">';    echo PMA_generate_common_hidden_inputs($url_params);    echo '<fieldset><legend>';    echo __('Select binary log to view');    echo '</legend><select name="log">';    $full_size = 0;    foreach ($binary_logs as $each_log) {        echo '<option value="' . $each_log['Log_name'] . '"';        if ($each_log['Log_name'] == $_REQUEST['log']) {            echo ' selected="selected"';        }        echo '>' . $each_log['Log_name'];        if (isset($each_log['File_size'])) {            $full_size += $each_log['File_size'];            echo ' (' . implode(' ', PMA_formatByteDown($each_log['File_size'], 3, 2)) . ')';        }        echo '</option>';    }    echo '</select> ';    echo count($binary_logs) . ' ' . __('Files') . ', ';    if ($full_size > 0) {        echo implode(' ', PMA_formatByteDown($full_size));    }    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo '<input type="submit" value="' . __('Go') . '" />';    echo '</fieldset>';    echo '</form>';}PMA_showMessage(PMA_Message::success());/** * Displays the page */?><table border="0" cellpadding="2" cellspacing="1"><thead><tr>    <td colspan="6" align="center"><?php// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($pos > 0) {    $this_url_params = $url_params;    if ($pos > $GLOBALS['cfg']['MaxRows']) {        $this_url_params['pos'] = $pos - $GLOBALS['cfg']['MaxRows'];    }    echo '<a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Previous page', 'Previous') . '">';    } else {        echo '>' . _pgettext('Previous page', 'Previous');    } // end if... else...    echo ' &lt; </a> - ';}$this_url_params = $url_params;if ($pos > 0) {    $this_url_params['pos'] = $pos;}if ($dontlimitchars) {    unset($this_url_params['dontlimitchars']);    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Truncate Shown Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_partialtext.png"                    alt="<?php echo __('Truncate Shown Queries'); ?>" /></a>    <?php} else {    $this_url_params['dontlimitchars'] = 1;    ?>        <a href="./server_binlog.php<?php echo PMA_generate_common_url($this_url_params); ?>"            title="<?php __('Show Full Queries'); ?>">                <img src="<?php echo $pmaThemeImage; ?>s_fulltext.png"                    alt="<?php echo __('Show Full Queries'); ?>" /></a>    <?php}// we do not now how much rows are in the binlog// so we can just force 'NEXT' buttonif ($num_rows >= $GLOBALS['cfg']['MaxRows']) {    $this_url_params = $url_params;    $this_url_params['pos'] = $pos + $GLOBALS['cfg']['MaxRows'];    echo ' - <a href="./server_binlog.php' . PMA_generate_common_url($this_url_params) . '"';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo ' title="' . _pgettext('Next page', 'Next') . '">';    } else {        echo '>' . _pgettext('Next page', 'Next');    } // end if... else...    echo ' &gt; </a>';}?>    </td></tr><tr>    <th><?php echo __('Log name'); ?></th>    <th><?php echo __('Position'); ?></th>    <th><?php echo __('Event type'); ?></th>    <th><?php echo __('Server ID'); ?></th>    <th><?php echo __('Original position'); ?></th>    <th><?php echo __('Information'); ?></th></tr></thead><tbody><?php$odd_row = true;while ($value = PMA_DBI_fetch_assoc($result)) {    if (! $dontlimitchars && PMA_strlen($value['Info']) > $GLOBALS['cfg']['LimitChars']) {        $value['Info'] = PMA_substr($value['Info'], 0, $GLOBALS['cfg']['LimitChars']) . '...';    }    ?><tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">    <td>&nbsp;<?php echo $value['Log_name']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo $value['Event_type']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo $value['Server_id']; ?>&nbsp;</td>    <td align="right">&nbsp;<?php echo isset($value['Orig_log_pos']) ? $value['Orig_log_pos'] : $value['End_log_pos']; ?>&nbsp;</td>    <td>&nbsp;<?php echo htmlspecialchars($value['Info']); ?>&nbsp;</td></tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * */require_once './libraries/engines/merge.lib.php';/** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_mrg_myisam extends PMA_StorageEngine_merge{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'merge';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_bdb extends PMA_StorageEngine{    /**     * @return  array   variable names     */    function getVariables()    {        return array(            'version_bdb' => array(                'title' => __('Version information'),            ),            'bdb_cache_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_home' => array(            ),            'bdb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'bdb_logdir' => array(            ),            'bdb_max_lock' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'bdb_shared_data' => array(            ),            'bdb_tmpdir' => array(            ),            'bdb_data_direct' => array(            ),            'bdb_lock_detect' => array(            ),            'bdb_log_direct' => array(            ),            'bdb_no_recover' => array(            ),            'bdb_no_sync' => array(            ),            'skip_sync_bdb_logs' => array(            ),            'sync_bdb_logs' => array(            ),        );    }    /**     * @return string   LIKE pattern     */    function getVariablesLikePattern()    {        return '%bdb%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'bdb';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_ndbcluster extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'ndb_connectstring' => array(            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'ndb\\_%';    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'ndbcluster';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__longToIpv4_info(){    return array(        'info' => __('Converts an (IPv4) Internet network address into a string in Internet standard dotted format.'),        );}/** * returns IPv4 address * * @see http://php.net/long2ip */function PMA_transformation_text_plain__longToIpv4($buffer, $options = array(), $meta = ''){    if ($buffer < 0 || $buffer > 4294967295) {        return $buffer;    }    return long2ip($buffer);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build OpenDocument Spreadsheet dumps of tables * * @package PhpMyAdmin-Export * @subpackage ODS */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['ods'] = array(        'text' => __('Open Document Spreadsheet'),        'extension' => 'ods',        'mime_type' => 'application/vnd.oasis.opendocument.spreadsheet',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    $GLOBALS['ods_buffer'] = '';    include_once './libraries/opendocument.lib.php';    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        $GLOBALS['ods_buffer'] .= '</office:spreadsheet>'            . '</office:body>'            . '</office:document-content>';        if (!PMA_exportOutputHandler(PMA_createOpenDocument('application/vnd.oasis.opendocument.spreadsheet', $GLOBALS['ods_buffer']))) {            return false;        }        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        $GLOBALS['ods_buffer'] .= '<?xml version="1.0" encoding="utf-8"?' . '>'            . '<office:document-content '. $GLOBALS['OpenDocumentNS'] . 'office:version="1.0">'            . '<office:automatic-styles>'                . '<number:date-style style:name="N37" number:automatic-order="true">'                . '<number:month number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:day number:style="long"/>'                . '<number:text>/</number:text>'                . '<number:year/>'              . '</number:date-style>'              . '<number:time-style style:name="N43">'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:seconds number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:time-style>'              . '<number:date-style style:name="N50" number:automatic-order="true" number:format-source="language">'                . '<number:month/>'                . '<number:text>/</number:text>'                . '<number:day/>'                . '<number:text>/</number:text>'                . '<number:year/>'                . '<number:text> </number:text>'                . '<number:hours number:style="long"/>'                . '<number:text>:</number:text>'                . '<number:minutes number:style="long"/>'                . '<number:text> </number:text>'                . '<number:am-pm/>'              . '</number:date-style>'              . '<style:style style:name="DateCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>'              . '<style:style style:name="TimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N43"/>'              . '<style:style style:name="DateTimeCell" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N50"/>'            . '</office:automatic-styles>'            . '<office:body>'            . '<office:spreadsheet>';        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in ODS format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        $fields_meta = PMA_DBI_get_fields_meta($result);        $field_flags = array();        for ($j = 0; $j < $fields_cnt; $j++) {            $field_flags[$j] = PMA_DBI_field_flags($result, $j);        }        $GLOBALS['ods_buffer'] .= '<table:table table:name="' . htmlspecialchars($table) . '">';        // If required, get fields name at the first line        if (isset($GLOBALS[$what . '_columns'])) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($i = 0; $i < $fields_cnt; $i++) {                $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                    . '<text:p>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</text:p>'                    . '</table:table-cell>';            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $GLOBALS['ods_buffer'] .= '<table:table-row>';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($GLOBALS[$what . '_null']) . '</text:p>'                        . '</table:table-cell>';                // ignore BLOB                } elseif (stristr($field_flags[$j], 'BINARY')                        && $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p></text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "date") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d", strtotime($row[$j])) . '" table:style-name="DateCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "time") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="time" office:time-value="' . date("\P\TH\Hi\Ms\S", strtotime($row[$j])) . '" table:style-name="TimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->type == "datetime") {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="date" office:date-value="' . date("Y-m-d\TH:i:s", strtotime($row[$j])) . '" table:style-name="DateTimeCell">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp' && ! $fields_meta[$j]->blob) {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="float" office:value="' . $row[$j] . '" >'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                } else {                    $GLOBALS['ods_buffer'] .= '<table:table-cell office:value-type="string">'                        . '<text:p>' . htmlspecialchars($row[$j]) . '</text:p>'                        . '</table:table-cell>';                }            } // end for            $GLOBALS['ods_buffer'] .= '</table:table-row>';        } // end while        PMA_DBI_free_result($result);        $GLOBALS['ods_buffer'] .= '</table:table>';        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * the MEMORY (HEAP) storage engine * @package PhpMyAdmin-Engines */class PMA_StorageEngine_memory extends PMA_StorageEngine{    /**     * returns array with variable names dedicated to MyISAM storage engine     *     * @return  array   variable names     */    function getVariables()    {        return array(            'max_heap_table_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Handles table zoom search tab * * display table zoom search form, create SQL queries from form data * *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';require_once './libraries/tbl_select.lib.php';require_once './libraries/relation.lib.php';require_once './libraries/tbl_info.inc.php';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'tbl_zoom_plot.js';$GLOBALS['js_include'][] = 'date.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';$GLOBALS['js_include'][] = 'canvg/canvg.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';/** * Handle AJAX request for data row on point select * @var post_params Object containing parameters for the POST request */if (isset($_REQUEST['get_data_row']) && $_REQUEST['get_data_row'] == true) {    $extra_data = array();    $row_info_query = 'SELECT * FROM `' . $_REQUEST['db'] . '`.`'        . $_REQUEST['table'] . '` WHERE ' .  $_REQUEST['where_clause'];    $result = PMA_DBI_query($row_info_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        // for bit fields we need to convert them to printable form        $i = 0;        foreach ($row as $col => $val) {            if ($fields_meta[$i]->type == 'bit') {                $row[$col] = PMA_printable_bit_value($val, $fields_meta[$i]->length);            }            $i++;        }        $extra_data['row_info'] = $row;    }    PMA_ajaxResponse(null, true, $extra_data);}$titles['Browse'] = PMA_getIcon('b_browse.png', __('Browse foreign values'));/** * Not selection yet required -> displays the selection form */// Gets some core librariesrequire_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_select.php&amp;back=tbl_select.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (! isset($goto)) {    $goto = $GLOBALS['cfg']['DefaultTabTable'];}// Defines the url to return to in case of error in the next sql statement$err_url   = $goto . '?' . PMA_generate_common_url($db, $table);// Gets the list and number of fieldslist($fields_list, $fields_type, $fields_collation, $fields_null) = PMA_tbl_getFields($db, $table);$fields_cnt = count($fields_list);// retrieve keys into foreign fields, if any// check also foreigners even if relwork is FALSE (to get// foreign keys from innodb)$foreigners = PMA_getForeigners($db, $table);$flag = 1;$tbl_fields_type = $tbl_fields_collation = $tbl_fields_null = array();if (! isset($zoom_submit) && ! isset($inputs)) {    $dataLabel = PMA_getDisplayField($db, $table);}?><div id="sqlqueryresults"></div><fieldset id="fieldset_subtab"><?php$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;echo PMA_generate_html_tabs(PMA_tbl_getSubTabs(), $url_params, '', 'topmenu2');/** *  Set the field name,type,collation and whether null on select of a coulmn */if (isset($inputs) && ($inputs[0] != 'pma_null' || $inputs[1] != 'pma_null')) {    $flag = 2;    for ($i = 0 ; $i < 4 ; $i++) {        if ($inputs[$i] != 'pma_null') {            $key = array_search($inputs[$i], $fields_list);            $tbl_fields_type[$i] = $fields_type[$key];            $tbl_fields_collation[$i] = $fields_collation[$key];            $tbl_fields_null[$i] = $fields_null[$key];        }    }}/* * Form for input criteria */?><form method="post" action="tbl_zoom_select.php" name="insertForm" id="zoom_search_form"    <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?php echo PMA_generate_common_hidden_inputs($db, $table); ?><input type="hidden" name="goto" value="<?php echo $goto; ?>" /><input type="hidden" name="back" value="tbl_zoom_select.php" /><input type="hidden" name="flag" id="id_flag" value="<?php echo $flag; ?>" /><fieldset id="inputSection"><legend><?php echo __('Do a "query by example" (wildcard: "%") for two different columns') ?></legend><table class="data"><?php echo PMA_tbl_setTableHeader();?><tbody><?php    $odd_row = true;for ($i = 0; $i < 4; $i++) {    if ($i == 2) {        echo "<tr><td>";        echo __("Additional search criteria");        echo "</td></tr>";    }    ?>    <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <th><select name="inputs[]" id="<?php echo 'tableid_' . $i; ?>" >        <option value="<?php echo 'pma_null'; ?>"><?php echo __('None');  ?></option>    <?php    for ($j = 0 ; $j < $fields_cnt ; $j++) {        if (isset($inputs[$i]) && $inputs[$i] == htmlspecialchars($fields_list[$j])) {?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        } else { ?>            <option value="<?php echo htmlspecialchars($fields_list[$j]);?>">                <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php        }    } ?>        </select></th>        <td><?php if (isset($tbl_fields_type[$i])) echo $tbl_fields_type[$i]; ?></td>        <td><?php if (isset($tbl_fields_collation[$i])) echo $tbl_fields_collation[$i]; ?></td>        <td>    <?php    if (isset($inputs) && $inputs[$i] != 'pma_null') { ?>        <select name="zoomFunc[]">        <?php        if (strncasecmp($tbl_fields_type[$i], 'enum', 4) == 0) {            foreach ($GLOBALS['cfg']['EnumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == htmlspecialchars($fc)) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } elseif (preg_match('@char|blob|text|set@i', $tbl_fields_type[$i])) {            foreach ($GLOBALS['cfg']['TextOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' . htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } else {            foreach ($GLOBALS['cfg']['NumOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        } // end if... else...        if ($tbl_fields_null[$i]) {            foreach ($GLOBALS['cfg']['NullOperators'] as $fc) {                if (isset($zoomFunc[$i]) && $zoomFunc[$i] == $fc) {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '" selected="selected">'                    . htmlspecialchars($fc) . '</option>';                } else {                    echo "\n" . '                        '                    . '<option value="' .  htmlspecialchars($fc) . '">'                    . htmlspecialchars($fc) . '</option>';                }            }        }        ?>        </select>        </td>        <td>        <?php        $field = $inputs[$i];        $foreignData = PMA_getForeignData($foreigners, $field, false, '', '');        if (isset($fields)) {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], $fields            );        } else {            echo PMA_getForeignFields_Values(                $foreigners, $foreignData, $field, $tbl_fields_type, $i, $db,                $table, $titles, $GLOBALS['cfg']['ForeignKeyMaxLimit'], ''            );        }    } else { ?>        </td><td></td>        <?php    } ?>    </tr>    <tr><td>      <input type="hidden" name="types[<?php echo $i; ?>]" id="types_<?php echo $i; ?>"        value="<?php if(isset($tbl_fields_type[$i]))echo $tbl_fields_type[$i]; ?>" />      <input type="hidden" name="collations[<?php echo $i; ?>]"        value="<?php if(isset($tbl_fields_collation[$i]))echo $tbl_fields_collation[$i]; ?>" />    </td></tr>    <?php}//end for?>    </tbody>    </table><?php/* * Other inputs like data label and mode go after selection of column criteria *///Set default datalabel if not selectedif (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null') {    if ($dataLabel == '') {        $dataLabel = PMA_getDisplayField($db, $table);    }}?>    <table class="data">    <tr><td><label for="dataLabel"><?php echo __("Use this column to label each point"); ?></label></td>    <td><select name="dataLabel" id='dataLabel' >        <option value = ''> <?php echo __('None');  ?> </option><?phpfor ($j = 0; $j < $fields_cnt; $j++) {    if (isset($dataLabel) && $dataLabel == htmlspecialchars($fields_list[$j])) {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" selected="selected">            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    } else {        ?>        <option value="<?php echo htmlspecialchars($fields_list[$j]);?>" >            <?php echo htmlspecialchars($fields_list[$j]);?></option>        <?php    }}?>    </select>    </td></tr>    <tr><td><label for="maxRowPlotLimit"><?php echo __("Maximum rows to plot"); ?></label></td>    <td><?phpecho '<input type="text" name="maxPlotLimit" id="maxRowPlotLimit" value="';if (! empty($maxPlotLimit)) {    echo htmlspecialchars($maxPlotLimit);} else {    echo $GLOBALS['cfg']['maxRowPlotLimit'];}echo '" /></td></tr>';?>    </table></fieldset><fieldset class="tblFooters">    <input type="hidden" name="max_number_of_fields"        value="<?php echo $fields_cnt; ?>" />    <input type="submit" name="zoom_submit" id="inputFormSubmitId" value="<?php echo __('Go'); ?>" /></fieldset></form></fieldset><?php/* * Handle the input criteria and generate the query result * Form for displaying query results */if (isset($zoom_submit) && $inputs[0] != 'pma_null' && $inputs[1] != 'pma_null' && $inputs[0] != $inputs[1]) {    /*     * Query generation part     */    $w = $data = array();    $sql_query = 'SELECT *';    //Add the table    $sql_query .= ' FROM ' . PMA_backquote($table);    for ($i = 0; $i < 4; $i++) {        if ($inputs[$i] == 'pma_null') {            continue;        }        $tmp = array();        // The where clause        $charsets = array();        $cnt_func = count($zoomFunc[$i]);        $func_type = $zoomFunc[$i];        list($charsets[$i]) = explode('_', $collations[$i]);        $unaryFlag = (isset($GLOBALS['cfg']['UnaryOperators'][$func_type])                      && $GLOBALS['cfg']['UnaryOperators'][$func_type] == 1)                      ? true                      : false;        $whereClause = PMA_tbl_search_getWhereClause(            $fields[$i], $inputs[$i], $types[$i],            $collations[$i], $func_type, $unaryFlag        );        if ($whereClause) {            $w[] = $whereClause;        }    } // end for    if ($w) {        $sql_query .= ' WHERE ' . implode(' AND ', $w);    }    $sql_query .= ' LIMIT ' . $maxPlotLimit;    /*     * Query execution part     */    $result = PMA_DBI_query($sql_query . ";", null, PMA_DBI_QUERY_STORE);    $fields_meta = PMA_DBI_get_fields_meta($result);    while ($row = PMA_DBI_fetch_assoc($result)) {        //Need a row with indexes as 0,1,2 for the PMA_getUniqueCondition hence using a temporary array        $tmpRow = array();        foreach ($row as $val) {            $tmpRow[] = $val;        }        //Get unique conditon on each row (will be needed for row update)        $uniqueCondition = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $tmpRow, true);        //Append it to row array as where_clause        $row['where_clause'] = $uniqueCondition[0];        if ($dataLabel == $inputs[0] || $dataLabel == $inputs[1]) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                'where_clause' => $uniqueCondition[0]            );        } elseif ($dataLabel) {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => $row[$dataLabel],                'where_clause' => $uniqueCondition[0]            );        } else {            $data[] = array(                $inputs[0]     => $row[$inputs[0]],                $inputs[1]     => $row[$inputs[1]],                $dataLabel     => '',                'where_clause' => $uniqueCondition[0]            );        }    }    /*     * Form for displaying point data and also the scatter plot     */    ?>    <form method="post" action="tbl_zoom_select.php" name="displayResultForm" id="zoom_display_form"        <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>    <input type="hidden" name="goto" value="<?php echo $goto; ?>" />    <input type="hidden" name="back" value="tbl_zoom_select.php" />    <fieldset id="displaySection">      <legend><?php echo __('Browse/Edit the points') ?></legend>      <center>    <?php    //JSON encode the data(query result)    if (isset($zoom_submit) && ! empty($data)) {        ?>        <div id='resizer' style="width:600px;height:400px">          <center><a href="#" onclick="displayHelp();"><?php echo __('How to use'); ?></a></center>          <div id="querydata" style="display:none">        <?php        echo json_encode($data);        ?>          </div>          <div id="querychart" style="float:right"></div>        </div>        <?php    }    ?>      </center>      <div id='dataDisplay' style="display:none">        <table>          <thead>            <tr>              <th> <?php echo __('Column'); ?> </th>              <th> <?php echo __('Null'); ?> </th>              <th> <?php echo __('Value'); ?> </th>            </tr>          </thead>          <tbody>    <?php    $odd_row = true;    for ($i = 4; $i < $fields_cnt + 4; $i++) {        $tbl_fields_type[$i] = $fields_type[$i - 4];        $fieldpopup = $fields_list[$i - 4];        $foreignData = PMA_getForeignData($foreigners, $fieldpopup, false, '', '');        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">              <th><?php echo htmlspecialchars($fields_list[$i - 4]); ?></th>              <th><?php echo ($fields_null[$i - 4] == 'YES')                  ? '<input type="checkbox" class="checkbox_null" name="fields_null[ '                      . $i . ' ]" id="fields_null_id_' . $i . '" />'                  : ''; ?>              </th>              <th> <?php              echo PMA_getForeignFields_Values(                  $foreigners, $foreignData, $fieldpopup, $tbl_fields_type,                  $i, $db, $table, $titles,                  $GLOBALS['cfg']['ForeignKeyMaxLimit'], '', false, true              ); ?>              </th>            </tr>        <?php    }    ?>          </tbody>        </table>    </div>    <input type="hidden" id="queryID" name="sql_query" />    </form>    <?php}require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY = "UPLOAD_IDENTIFIER";/** * Returns upload status. * * This is implementation for uploadprogress extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_uploadprogressCheck() || $ret['finished']) {        return $ret;    }    $status = uploadprogress_get_info($id);    if ($status) {        if ($status['bytes_uploaded'] == $status['bytes_total']) {            $ret['finished'] = true;        } else {            $ret['finished'] = false;        }        $ret['total']    = $status['bytes_total'];        $ret['complete'] = $status['bytes_uploaded'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }    } else {       $ret = array(                    'id'       => $id,                    'finished' => true,                    'percent'  => 100,                    'total'    => $ret['total'],                    'complete' => $ret['total'],                    'plugin'   => $ID_KEY                );    }    $_SESSION[$SESSION_KEY][$id] = $ret;    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL Validator interface for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * This function uses the Mimer SQL Validator service * <http://developer.mimer.com/validator/index.htm> from phpMyAdmin * * Copyright for Server side validator systems: * "All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved." * * All data is transported over HTTP-SOAP * And uses the PEAR SOAP Module * * Install instructions for PEAR SOAP * Make sure you have a really recent PHP with PEAR support * run this: "pear install Mail_Mime Net_DIME SOAP" * * Enable the SQL Validator options in the configuration file * $cfg['SQLQuery']['Validate'] = true; * $cfg['SQLValidator']['use']  = true; * * Also set a username and password if you have a private one * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need the PEAR libraries, so do a minimum version check first * I'm not sure if PEAR was available before this point * For now we actually use a configuration flag */if ($cfg['SQLValidator']['use'] == true) {    include_once './libraries/sqlvalidator.class.php';} // if ($cfg['SQLValidator']['use'] == true)/** * This function utilizes the Mimer SQL Validator service * to validate an SQL query * * <http://developer.mimer.com/validator/index.htm> * * @param string   SQL query to validate * * @return  string   Validator result string * * @global  array    The PMA configuration array */function PMA_validateSQL($sql){    global $cfg;    $str = '';    if ($cfg['SQLValidator']['use']) {        if (isset($GLOBALS['sqlvalidator_error'])            && $GLOBALS['sqlvalidator_error']) {            $str = sprintf(__('The SQL validator could not be initialized. Please check if you have installed the necessary PHP extensions as described in the %sdocumentation%s.'), '<a href="./Documentation.html#faqsqlvalidator" target="documentation">', '</a>');        } else {            // create new class instance            $srv = new PMA_SQLValidator();            // Checks for username settings            // The class defaults to anonymous with an empty password            // automatically            if ($cfg['SQLValidator']['username'] != '') {                $srv->setCredentials($cfg['SQLValidator']['username'], $cfg['SQLValidator']['password']);            }            // Identify ourselves to the server properly...            $srv->appendCallingProgram('phpMyAdmin', PMA_VERSION);            // ... and specify what database system we are using            $srv->setTargetDbms('MySQL', PMA_MYSQL_STR_VERSION);            // Log on to service            $srv->start();            // Do service validation            $str = $srv->validationString($sql);        }    } // end if    // Gives string back to caller    return $str;} // end of the "PMA_validateSQL()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__imagelink_info(){    return array(        'info' => __('Displays an image and a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second and third options are the width and the height in pixels.'),        );}/** * */function PMA_transformation_text_plain__imagelink($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" target="_blank"><img src="' . (isset($options[0]) ? $options[0] : '') . $buffer . '" border="0" width="' . (isset($options[1]) ? $options[1] : 100) . '" height="' . (isset($options[2]) ? $options[2] : 50) . '" />' . $buffer . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/** * ESRI Shape file import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage ESRI_Shape */if (! defined('PHPMYADMIN')) {    exit;}// Drizzle does not suppost GIS data typesif (PMA_DRIZZLE) {    return;}if (isset($plugin_list)) {    $plugin_list['shp'] = array(        'text' => __('ESRI Shape File'),        'extension' => 'shp',        'options' => array(),        'options_text' => __('Options'),    );} else {    if ((int) ini_get('memory_limit') < 512) {        @ini_set('memory_limit', '512M');    }    @set_time_limit(300);    // Append the bfShapeFiles directory to the include path variable    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');    include_once './libraries/bfShapeFiles/ShapeFile.lib.php';    $GLOBALS['finished'] = false;    $buffer = '';    $eof = false;    // Returns specified number of bytes from the buffer.    // Buffer automatically fetches next chunk of data when the buffer falls short.    // Sets $eof when $GLOBALS['finished'] is set and the buffer falls short.    function readFromBuffer($length){        global $buffer, $eof;        if (strlen($buffer) < $length) {            if ($GLOBALS['finished']) {                $eof = true;            } else {                $buffer .= PMA_importGetNextChunk();            }        }        $result = substr($buffer, 0, $length);        $buffer = substr($buffer, $length);        return $result;    }    /**     * This class extends ShapeFile class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeFile extends ShapeFile    {        function _isDbaseLoaded()        {            return extension_loaded('dbase');        }        function loadFromFile($FileName)        {            $this->_loadHeaders();            $this->_loadRecords();            if ($this->_isDbaseLoaded()) {                $this->_closeDBFFile();            }        }        function _loadHeaders()        {            readFromBuffer(24);            $this->fileLength = loadData("N", readFromBuffer(4));            readFromBuffer(4);            $this->shapeType = loadData("V", readFromBuffer(4));            $this->boundingBox = array();            $this->boundingBox["xmin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["xmax"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymax"] = loadData("d", readFromBuffer(8));            if ($this->_isDbaseLoaded() && $this->_openDBFFile()) {                $this->DBFHeader = $this->_loadDBFHeader();            }        }        function _loadRecords()        {            global $eof;            readFromBuffer(32);            while (true) {                $record = new PMA_ShapeRecord(-1);                $record->loadFromFile($this->SHPFile, $this->DBFFile);                if ($record->lastError != "") {                    return false;                }                if ($eof) {                    break;                }                $this->records[] = $record;            }        }    }    /**     * This class extends ShapeRecord class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeRecord extends ShapeRecord    {        function loadFromFile(&$SHPFile, &$DBFFile)        {            $this->DBFFile = $DBFFile;            $this->_loadHeaders();            switch ($this->shapeType) {            case 0:                $this->_loadNullRecord();                break;            case 1:                $this->_loadPointRecord();                break;            case 3:                $this->_loadPolyLineRecord();                break;            case 5:                $this->_loadPolygonRecord();                break;            case 8:                $this->_loadMultiPointRecord();                break;            default:                $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));                break;            }            if (extension_loaded('dbase') && isset($this->DBFFile)) {                $this->_loadDBFData();            }        }        function _loadHeaders()        {            $this->recordNumber = loadData("N", readFromBuffer(4));            //We read the length of the record            $tmp = loadData("N", readFromBuffer(4));            $this->shapeType = loadData("V", readFromBuffer(4));        }        function _loadPoint()        {            $data = array();            $data["x"] = loadData("d", readFromBuffer(8));            $data["y"] = loadData("d", readFromBuffer(8));            return $data;        }        function _loadMultiPointRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {                $this->SHPData["points"][] = $this->_loadPoint();            }        }        function _loadPolyLineRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numparts"]  = loadData("V", readFromBuffer(4));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {                $this->SHPData["parts"][$i] = loadData("V", readFromBuffer(4));            }            $readPoints = 0;            reset($this->SHPData["parts"]);            while (list($partIndex, $partData) = each($this->SHPData["parts"])) {                if (! isset($this->SHPData["parts"][$partIndex]["points"])                    || !is_array($this->SHPData["parts"][$partIndex]["points"])                ) {                    $this->SHPData["parts"][$partIndex] = array();                    $this->SHPData["parts"][$partIndex]["points"] = array();                }                while (! in_array($readPoints, $this->SHPData["parts"])                && ($readPoints < ($this->SHPData["numpoints"]))                ) {                    $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();                    $readPoints++;                }            }        }    }    $shp = new PMA_ShapeFile(1);    // If the zip archive has more than one file,    // get the correct content to the buffer from .shp file.    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');        $GLOBALS['import_text'] = $zip_content['data'];    }    $temp_dbf_file = false;    // We need dbase extension to handle .dbf file    if (extension_loaded('dbase')) {        // If we can extract the zip archive to 'TempDir'        // and use the files in it for import        if ($compression == 'application/zip'            && ! empty($cfg['TempDir'])            && is_writable($cfg['TempDir'])        ) {            $dbf_file_name = PMA_findFileFromZipArchive('/^.*\.dbf$/i', $import_file);            // If the corresponding .dbf file is in the zip archive            if ($dbf_file_name) {                // Extract the .dbf file and point to it.                $extracted =  PMA_zipExtract(                    $import_file,                    realpath($cfg['TempDir']),                    array($dbf_file_name)                );                if ($extracted) {                    $dbf_file_path = realpath($cfg['TempDir'])                        . (PMA_IS_WINDOWS ? '\\' : '/') . $dbf_file_name;                    $temp_dbf_file = true;                    // Replace the .dbf with .*, as required by the bsShapeFiles library.                    $file_name = substr($dbf_file_path, 0, strlen($dbf_file_path) - 4) . '.*';                    $shp->FileName = $file_name;                }            }        }        // If file is in UploadDir, use .dbf file in the same UploadDir        // to load extra data.        elseif (! empty($local_import_file)            && ! empty($cfg['UploadDir'])            && $compression == 'none'        ) {            // Replace the .shp with .*,            // so the bsShapeFiles library correctly locates .dbf file.            $file_name = substr($import_file, 0, strlen($import_file) - 4) . '.*';            $shp->FileName = $file_name;        }    }    // Load data    $shp->loadFromFile('');    if ($shp->lastError != "") {        $error = true;        $message = PMA_Message::error(__('There was an error importing the ESRI shape file: "%s".'));        $message->addParam($shp->lastError);        return;    }    // Delete the .dbf file extracted to 'TempDir'    if ($temp_dbf_file) {        unlink($dbf_file_path);    }    $esri_types = array(        0  => 'Null Shape',        1  => 'Point',        3  => 'PolyLine',        5  => 'Polygon',        8  => 'MultiPoint',        11 => 'PointZ',        13 => 'PolyLineZ',        15 => 'PolygonZ',        18 => 'MultiPointZ',        21 => 'PointM',        23 => 'PolyLineM',        25 => 'PolygonM',        28 => 'MultiPointM',        31 => 'MultiPatch',    );    include_once './libraries/gis/pma_gis_geometry.php';    switch ($shp->shapeType) {    // ESRI Null Shape    case 0:        $gis_obj = null;        break;    // ESRI Point    case 1:        include_once './libraries/gis/pma_gis_point.php';        $gis_obj = PMA_GIS_Point::singleton();        break;    // ESRI PolyLine    case 3:        include_once './libraries/gis/pma_gis_multilinestring.php';        $gis_obj = PMA_GIS_Multilinestring::singleton();        break;    // ESRI Polygon    case 5:        include_once './libraries/gis/pma_gis_multipolygon.php';        $gis_obj = PMA_GIS_Multipolygon::singleton();        break;    // ESRI MultiPoint    case 8:        include_once './libraries/gis/pma_gis_multipoint.php';        $gis_obj = PMA_GIS_Multipoint::singleton();        break;    default:        $error = true;        if (! isset($esri_types[$shp->shapeType])) {            $message = PMA_Message::error(__('You tried to import an invalid file or the imported file contains invalid data'));        } else {            $message = PMA_Message::error(__('MySQL Spatial Extension does not support ESRI type "%s".'));            $message->addParam($param);        }        return;    }    $num_rows = count($shp->records);    // If .dbf file is loaded, the number of extra data columns    $num_data_cols = isset($shp->DBFHeader) ? count($shp->DBFHeader) : 0;    $rows = array();    $col_names = array();    if ($num_rows != 0) {        foreach ($shp->records as $record) {            $tempRow = array();            if ($gis_obj == null) {                $tempRow[] = null;            } else {                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";            }            if (isset($shp->DBFHeader)) {                foreach ($shp->DBFHeader as $c) {                    $cell = trim($record->DBFData[$c[0]]);                    if (! strcmp($cell, '')) {                        $cell = 'NULL';                    }                    $tempRow[] = $cell;                }            }            $rows[] = $tempRow;        }    }    if (count($rows) == 0) {        $error = true;        $message = PMA_Message::error(__('The imported file does not contain any data'));        return;    }    // Column names for spatial column and the rest of the columns,    // if they are available    $col_names[] = 'SPATIAL';    for ($n = 0; $n < $num_data_cols; $n++) {        $col_names[] = $shp->DBFHeader[$n][0];    }    // Set table name based on the number of tables    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $table_name = 'TABLE '.(count($result) + 1);    } else {        $table_name = 'TBL_NAME';    }    $tables = array(array($table_name, $col_names, $rows));    // Use data from shape file to chose best-fit MySQL types for each column    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    $table_no = 0; $spatial_col = 0;    $analyses[$table_no][TYPES][$spatial_col] = GEOMETRY;    $analyses[$table_no][FORMATTEDSQL][$spatial_col] = true;    // Set database name to the currently selected one, if applicable    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'SHP_DB';        $options = null;    }    // Created and execute necessary SQL statements from data    $null_param = null;    PMA_buildSQL($db_name, $tables, $analyses, $null_param, $options);    unset($tables);    unset($analyses);    $finished = true;    $error = false;    // Commit any possible data in buffers    PMA_importRunQuery();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * extracts table properties from create statement * * @todo should be handled by class Table * @todo this should be recoded as functions, to avoid messing with global variables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * requirements */require_once './libraries/common.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defining global variables, in case this script is included by a function. * This is necessary because this script can be included by libraries/header.inc.php. */global $showtable, $tbl_is_view, $tbl_type, $show_comment, $tbl_collation,       $table_info_num_rows, $auto_increment;/** * Gets table informations */// Seems we need to do this in MySQL 5.0.2,// otherwise error #1046, no database selectedPMA_DBI_select_db($GLOBALS['db']);/** * Holds information about the current table * * @todo replace this by PMA_Table * @global array $GLOBALS['showtable'] * @name $showtable */$GLOBALS['showtable'] = array();// PMA_Table::sGetStatusInfo() does caching by default, but here// we force reading of the current table status// if $reread_info is true (for example, coming from tbl_operations.php// and we just changed the table's storage engine)$GLOBALS['showtable'] = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, (isset($reread_info) && $reread_info ? true : false));// need this test because when we are creating a table, we get 0 rows// from the SHOW TABLE query// and we don't want to mess up the $tbl_type coming from the formif ($showtable) {    if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {        $tbl_is_view     = true;        $tbl_type        = __('View');        $show_comment    = null;    } else {        $tbl_is_view     = false;        $tbl_type        = isset($showtable['Engine'])            ? strtoupper($showtable['Engine'])            : '';        // a new comment could be coming from tbl_operations.php        // and we want to show it in the header        if (isset($submitcomment) && isset($comment)) {            $show_comment = $comment;        } else {            $show_comment    = isset($showtable['Comment'])                ? $showtable['Comment']                : '';        }    }    $tbl_collation       = empty($showtable['Collation'])        ? ''        : $showtable['Collation'];    if (null === $showtable['Rows']) {        $showtable['Rows']   = PMA_Table::countRecords($GLOBALS['db'],            $showtable['Name'], true);    }    $table_info_num_rows = isset($showtable['Rows']) ? $showtable['Rows'] : 0;    $row_format = isset($showtable['Row_format']) ? $showtable['Row_format'] : '';    $auto_increment      = isset($showtable['Auto_increment'])        ? $showtable['Auto_increment']        : '';    $create_options      = isset($showtable['Create_options'])        ? explode(' ', $showtable['Create_options'])        : array();    // export create options by its name as variables into global namespace    // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'    unset($pack_keys);    foreach ($create_options as $each_create_option) {        $each_create_option = explode('=', $each_create_option);        if (isset($each_create_option[1])) {            $$each_create_option[0]    = $each_create_option[1];        }    }    // we need explicit DEFAULT value here (different from '0')    $pack_keys = (! isset($pack_keys) || strlen($pack_keys) == 0) ? 'DEFAULT' : $pack_keys;    unset($create_options, $each_create_option);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides download to a given field defined in parameters. * @package PhpMyAdmin *//** * Common functions. */require_once './libraries/common.inc.php';require_once './libraries/mime.lib.php';/* Check parameters */PMA_checkParameters(array('db', 'table', 'where_clause', 'transform_key'));/* Select database */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '', '');}/* Check if table exists */if (!PMA_DBI_get_columns($db, $table)) {    PMA_mysqlDie(__('Invalid table name'));}/* Grab data */$sql = 'SELECT ' . PMA_backquote($transform_key) . ' FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';';$result = PMA_DBI_fetch_value($sql);/* Check return code */if ($result === false) {    PMA_mysqlDie(__('MySQL returned an empty result set (i.e. zero rows).'), $sql);}/* Avoid corrupting data */@ini_set('url_rewriter.tags', '');PMA_download_header(    $table . '-' .  $transform_key . '.bin',    PMA_detectMIME($result),    strlen($result)    );echo $result;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * hold the PMA_List base class * * @package PhpMyAdmin *//** * @todo add caching * @since phpMyAdmin 2.9.10 * @abstract * @package PhpMyAdmin */abstract class PMA_List extends ArrayObject{    /**     * @var mixed   empty item     */    protected $item_empty = '';    public function __construct($array = array(), $flags = 0, $iterator_class = "ArrayIterator")    {        parent::__construct($array, $flags, $iterator_class);    }    /**     * returns item only if there is only one in the list     *     * @return  single item     */    public function getSingleItem()    {        if (count($this) === 1) {            return reset($this);        }        return $this->getEmpty();    }    /**     * defines what is an empty item (0, '', false or null)     *     * @return  mixed   an empty item     */    public function getEmpty()    {        return $this->item_empty;    }    /**     * checks if the given db names exists in the current list, if there is     * missing at least one item it returns false otherwise true     *     * @param string  $db_name,..     one or more mysql result resources     * @return  boolean true if all items exists, otheriwse false     */    public function exists()    {        $this_elements = $this->getArrayCopy();        foreach (func_get_args() as $result) {            if (! in_array($result, $this_elements)) {                return false;            }        }        return true;    }    /**     * returns HTML <option>-tags to be used inside <select></select>     *     * @param mixed   $selected   the selected db or true for selecting current db     * @param boolean $include_information_schema     * @return  string  HTML option tags     */    public function getHtmlOptions($selected = '', $include_information_schema = true)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $options = '';        foreach ($this as $each_item) {            if (false === $include_information_schema                    && PMA_is_system_schema($each_item)) {                continue;            }            $options .= '<option value="' . htmlspecialchars($each_item) . '"';            if ($selected === $each_item) {                $options .= ' selected="selected"';            }            $options .= '>' . htmlspecialchars($each_item) . '</option>' . "\n";        }        return $options;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        return $this->getEmpty();    }    /**     * builds up the list     *     */    abstract public function build();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Message * * @package PhpMyAdmin *//** * a single message * * simple usage examples: * <code> * // display simple error message 'Error' * PMA_Message::error()->display(); * * // get simple success message 'Success' * $message = PMA_Message::success(); * * // get special notice 'Some locale notice' * $message = PMA_Message::notice('strSomeLocaleNotice'); * </code> * * more advanced usage example: * <code> * // create a localized success message * $message = PMA_Message::success('strSomeLocaleMessage'); * * // create another message, a hint, with a localized string which expects * // two parameters: $strSomeFootnote = 'Read the %smanual%s' * $hint = PMA_Message::notice('strSomeFootnote'); * // replace %d with the following params * $hint->addParam('[a@./Documentation.html#cfg_Example@_blank]'); * $hint->addParam('[/a]'); * // add this hint as a footnote * $hint = PMA_showHint($hint); * * // add the retrieved footnote reference to the original message * $message->addMessage($hint); * * // create another message ... * $more = PMA_Message::notice('strSomeMoreLocale'); * $more->addString('strSomeEvenMoreLocale', '<br />'); * $more->addParam('parameter for strSomeMoreLocale'); * $more->addParam('more parameter for strSomeMoreLocale'); * * // and add it also to the original message * $message->addMessage($more); * // finally add another raw message * $message->addMessage('some final words', ' - '); * * // display() will now print all messages in the same order as they are added * $message->display(); * // strSomeLocaleMessage <sup>1</sup> strSomeMoreLocale<br /> * // strSomeEvenMoreLocale - some final words * </code> * @package PhpMyAdmin */class PMA_Message{    const SUCCESS = 1; // 0001    const NOTICE  = 2; // 0010    const ERROR   = 8; // 1000    const SANITIZE_NONE   = 0;  // 0000 0000    const SANITIZE_STRING = 16; // 0001 0000    const SANITIZE_PARAMS = 32; // 0010 0000    const SANITIZE_BOOTH  = 48; // 0011 0000    /**     * message levels     *     * @var array     */    static public $level = array (        PMA_Message::SUCCESS => 'success',        PMA_Message::NOTICE  => 'notice',        PMA_Message::ERROR   => 'error',    );    /**     * The message number     *     * @access  protected     * @var     integer     */    protected $_number = PMA_Message::NOTICE;    /**     * The locale string identifier     *     * @access  protected     * @var     string     */    protected $_string = '';    /**     * The formatted message     *     * @access  protected     * @var     string     */    protected $_message = '';    /**     * Whether the message was already displayed     *     * @access  protected     * @var     boolean     */    protected $_is_displayed = false;    /**     * Unique id     *     * @access  protected     * @var string     */    protected $_hash = null;    /**     * holds parameters     *     * @access  protected     * @var     array     */    protected $_params = array();    /**     * holds additional messages     *     * @access  protected     * @var     array     */    protected $_added_messages = array();    /**     * Constructor     *     * @param string  $string     * @param integer $number     * @param array   $params     * @param integer $sanitize     */    public function __construct($string = '', $number = PMA_Message::NOTICE,        $params = array(), $sanitize = PMA_Message::SANITIZE_NONE)    {        $this->setString($string, $sanitize & PMA_Message::SANITIZE_STRING);        $this->setNumber($number);        $this->setParams($params, $sanitize & PMA_Message::SANITIZE_PARAMS);    }    /**     * magic method: return string representation for this object     *     * @return string     */    public function __toString()    {        return $this->getMessage();    }    /**     * get PMA_Message of type success     *     * shorthand for getting a simple success message     *     * @static     * @param string $string a localized string e.g. __('Your SQL query has been executed successfully')     * @return  PMA_Message     */    static public function success($string = '')    {        if (empty($string)) {            $string = __('Your SQL query has been executed successfully');        }        return new PMA_Message($string, PMA_Message::SUCCESS);    }    /**     * get PMA_Message of type error     *     * shorthand for getting a simple error message     *     * @static     * @param string $string a localized string e.g. __('Error')     * @return  PMA_Message     */    static public function error($string = '')    {        if (empty($string)) {            $string = __('Error');        }        return new PMA_Message($string, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice     *     * shorthand for getting a simple notice message     *     * @static     * @param string  $string a localized string e.g. __('The additional features for working with linked tables have been deactivated. To find out why click %shere%s.')     * @return  PMA_Message     */    static public function notice($string)    {        return new PMA_Message($string, PMA_Message::NOTICE);    }    /**     * get PMA_Message with customized content     *     * shorthand for getting a customized message     *     * @static     * @param string    $message     * @param integer   $type     * @return  PMA_Message     */    static public function raw($message, $type = PMA_Message::NOTICE)    {        $r = new PMA_Message('', $type);        $r->setMessage($message);        return $r;    }    /**     * get PMA_Message for number of affected rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function affected_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row affected.', '%1$d rows affected.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of deleted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function deleted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row deleted.', '%1$d rows deleted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message for number of inserted rows     *     * shorthand for getting a customized message     *     * @static     * @param integer   $rows Number of rows     * @return  PMA_Message     */    static public function inserted_rows($rows)    {        $message = PMA_Message::success(_ngettext('%1$d row inserted.', '%1$d rows inserted.', $rows));        $message->addParam($rows);        return $message;    }    /**     * get PMA_Message of type error with custom content     *     * shorthand for getting a customized error message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawError($message)    {        return PMA_Message::raw($message, PMA_Message::ERROR);    }    /**     * get PMA_Message of type notice with custom content     *     * shorthand for getting a customized notice message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawNotice($message)    {        return PMA_Message::raw($message, PMA_Message::NOTICE);    }    /**     * get PMA_Message of type success with custom content     *     * shorthand for getting a customized success message     *     * @static     * @param string  $message     * @return  PMA_Message     */    static public function rawSuccess($message)    {        return PMA_Message::raw($message, PMA_Message::SUCCESS);    }    /**     * returns whether this message is a success message or not     * and optionaly makes this message a success message     *     * @param boolean $set     * @return  boolean whether this is a success message or not     */    public function isSuccess($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::SUCCESS);        }        return $this->getNumber() === PMA_Message::SUCCESS;    }    /**     * returns whether this message is a notice message or not     * and optionally makes this message a notice message     *     * @param boolean $set     * @return  boolean whether this is a notice message or not     */    public function isNotice($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::NOTICE);        }        return $this->getNumber() === PMA_Message::NOTICE;    }    /**     * returns whether this message is an error message or not     * and optionally makes this message an error message     *     * @param boolean $set     * @return  boolean whether this is an error message or not     */    public function isError($set = false)    {        if ($set) {            $this->setNumber(PMA_Message::ERROR);        }        return $this->getNumber() === PMA_Message::ERROR;    }    /**     * set raw message (overrides string)     *     * @param string  $message     * @param boolean $sanitize whether to sanitize $message or not     */    public function setMessage($message, $sanitize = false)    {        if ($sanitize) {            $message = PMA_Message::sanitize($message);        }        $this->_message = $message;    }    /**     * set string (does not take effect if raw message is set)     *     * @param string  $_string     * @param boolean $sanitize whether to sanitize $string or not     */    public function setString($_string, $sanitize = true)    {        if ($sanitize) {            $_string = PMA_Message::sanitize($_string);        }        $this->_string = $_string;    }    /**     * set message type number     *     * @param integer $number     */    public function setNumber($number)    {        $this->_number = $number;    }    /**     * add parameter, usually in conjunction with strings     *     * usage     * <code>     * $message->addParam('strLocale', false);     * $message->addParam('[em]some string[/em]');     * $message->addParam('<img src="img" />', false);     * </code>     *     * @param mixed   $param     * @param boolean $raw     */    public function addParam($param, $raw = true)    {        if ($param instanceof PMA_Message) {            $this->_params[] = $param;        } elseif ($raw) {            $this->_params[] = htmlspecialchars($param);        } else {            $this->_params[] = PMA_Message::notice($param);        }    }    /**     * add another string to be concatenated on displaying     *     * @param string  $string    to be added     * @param string  $separator to use between this and previous string/message     */    public function addString($string, $separator = ' ')    {        $this->_added_messages[] = $separator;        $this->_added_messages[] = PMA_Message::notice($string);    }    /**     * add a bunch of messages at once     *     * @param array   $messages  to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessages($messages, $separator = ' ')    {        foreach ($messages as $message) {            $this->addMessage($message, $separator);        }    }    /**     * add another raw message to be concatenated on displaying     *     * @param mixed   $message   to be added     * @param string  $separator to use between this and previous string/message     */    public function addMessage($message, $separator = ' ')    {        if (strlen($separator)) {            $this->_added_messages[] = $separator;        }        if ($message instanceof PMA_Message) {            $this->_added_messages[] = $message;        } else {            $this->_added_messages[] = PMA_Message::rawNotice($message);        }    }    /**     * set all params at once, usually used in conjunction with string     *     * @param array   $params     * @param boolean $sanitize     */    public function setParams($params, $sanitize = false)    {        if ($sanitize) {            $params = PMA_Message::sanitize($params);        }        $this->_params = $params;    }    /**     * return all parameters     *     * @return array     */    public function getParams()    {        return $this->_params;    }    /**     * return all added messages     *     * @return array     */    public function getAddedMessages()    {        return $this->_added_messages;    }    /**     * Sanitizes $message     *     * @static     * @param mixed  $message the message(s)     * @return  mixed  the sanitized message(s)     * @access  public     */    static public function sanitize($message)    {        if (is_array($message)) {            foreach ($message as $key => $val) {                $message[$key] = PMA_Message::sanitize($val);            }            return $message;        }        return htmlspecialchars($message);    }    /**     * decode $message, taking into account our special codes     * for formatting     *     * @static     * @param string  $message the message     * @return  string  the decoded message     * @access  public     */    static public function decodeBB($message)    {        return PMA_sanitize($message, false, true);    }    /**     * wrapper for sprintf()     *     * @return  string formatted     */    static public function format()    {        $params = func_get_args();        if (isset($params[1]) && is_array($params[1])) {            array_unshift($params[1], $params[0]);            $params = $params[1];        }        return call_user_func_array('sprintf', $params);    }    /**     * returns unique PMA_Message::$_hash, if not exists it will be created     *     * @return  string PMA_Message::$_hash     */    public function getHash()    {        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->_string .                $this->_message            );        }        return $this->_hash;    }    /**     * returns compiled message     *     * @return  string complete message     */    public function getMessage()    {        $message = $this->_message;        if (0 === strlen($message)) {            $string = $this->getString();            if (isset($GLOBALS[$string])) {                $message = $GLOBALS[$string];            } elseif (0 === strlen($string)) {                $message = '';            } else {                $message = $string;            }        }        if (count($this->getParams()) > 0) {            $message = PMA_Message::format($message, $this->getParams());        }        $message = PMA_Message::decodeBB($message);        foreach ($this->getAddedMessages() as $add_message) {            $message .= $add_message;        }        return $message;    }    /**     * returns PMA_Message::$_string     *     * @return  string PMA_Message::$_string     */    public function getString()    {        return $this->_string;    }    /**     * returns PMA_Message::$_number     *     * @return  integer PMA_Message::$_number     */    public function getNumber()    {        return $this->_number;    }    /**     * returns level of message     *     * @return  string  level of message     */    public function getLevel()    {        return PMA_Message::$level[$this->getNumber()];    }    /**     * Displays the message in HTML     *     */    public function display()    {        echo $this->getDisplay();        $this->isDisplayed(true);    }    /**     * returns HTML code for displaying this message     *     *     * @return string whole message box     */    public function getDisplay()    {        return '<div class="' . $this->getLevel() . '">'            . $this->getMessage() . '</div>';    }    /**     * sets and returns whether the message was displayed or not     *     * @param boolean $is_displayed     * @return  boolean PMA_Message::$_is_displayed     */    public function isDisplayed($is_displayed = false)    {        if ($is_displayed) {            $this->_is_displayed = true;        }        return $this->_is_displayed;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-MB *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return mb_strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return mb_substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return mb_strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return mb_strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Generic plugin interface. * * @package PhpMyAdmin *//** * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param) * * Reads all plugin information from directory $plugins_dir. * * @param string  $plugins_dir    directrory with plugins * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work * @return  array                   list of plugins */function PMA_getPlugins($plugins_dir, $plugin_param){    /* Scan for plugins */    $plugin_list = array();    if ($handle = @opendir($plugins_dir)) {        while ($file = @readdir($handle)) {            // In some situations, Mac OS creates a new file for each file            // (for example ._csv.php) so the following regexp            // matches a file which does not start with a dot but ends            // with ".php"            if (is_file($plugins_dir . $file) && preg_match('@^[^\.](.)*\.php$@i', $file)) {                include $plugins_dir . $file;            }        }    }    ksort($plugin_list);    return $plugin_list;}/** * string PMA_getString(string $name) * * returns locale string for $name or $name if no locale is found * * @param string  $name   for local string * @return  string          locale string for $name */function PMA_getString($name){    return isset($GLOBALS[$name]) ? $GLOBALS[$name] : $name;}/** * string PMA_pluginCheckboxCheck(string $section, string $opt) * * returns html input tag option 'checked' if plugin $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              hmtl input tag option 'checked' */function PMA_pluginCheckboxCheck($section, $opt){    // If the form is being repopulated using $_GET data, that is priority    if (isset($_GET[$opt]) || ! isset($_GET['repopulate']) && ((isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) ||        (isset($GLOBALS['cfg'][$section][$opt]) && $GLOBALS['cfg'][$section][$opt]))) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetDefault(string $section, string $opt) * * returns default value for option $opt * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              default value for option $opt */function PMA_pluginGetDefault($section, $opt){    if (isset($_GET[$opt])) { // If the form is being repopulated using $_GET data, that is priority        return htmlspecialchars($_GET[$opt]);    } elseif (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) {        return htmlspecialchars($_REQUEST[$opt]);    } elseif (isset($GLOBALS['cfg'][$section][$opt])) {        $matches = array();        /* Possibly replace localised texts */        if (preg_match_all('/(str[A-Z][A-Za-z0-9]*)/', $GLOBALS['cfg'][$section][$opt], $matches)) {            $val = $GLOBALS['cfg'][$section][$opt];            foreach ($matches[0] as $match) {                if (isset($GLOBALS[$match])) {                    $val = str_replace($match, $GLOBALS[$match], $val);                }            }            return htmlspecialchars($val);        } else {            return htmlspecialchars($GLOBALS['cfg'][$section][$opt]);        }    }    return '';}/** * string PMA_pluginIsActive(string $section, string $opt, string $val) * * returns html input tag option 'checked' if option $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @param string  $val        value of option to check against * @return  string              html input tag option 'checked' */function PMA_pluginIsActive($section, $opt, $val){    if (! empty($GLOBALS['timeout_passed']) && isset($_REQUEST[$opt])) {        if ($_REQUEST[$opt] == $val) {            return ' checked="checked"';        }    } elseif (isset($GLOBALS['cfg'][$section][$opt]) &&  $GLOBALS['cfg'][$section][$opt] == $val) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname) * * returns html select form element for plugin choice * and hidden fields denoting whether each plugin must be exported as a file * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $name       name of select element * @param array   &$list      array with plugin configuration defined in plugin file * @param string  $cfgname    name of config value, if none same as $name * @return  string              html select tag */function PMA_pluginGetChoice($section, $name, &$list, $cfgname = null){    if (! isset($cfgname)) {        $cfgname = $name;    }    $ret = '<select id="plugins" name="' . $name . '">';    $default = PMA_pluginGetDefault($section, $cfgname);    foreach ($list as $plugin_name => $val) {        $ret .= '<option';         // If the form is being repopulated using $_GET data, that is priority        if (isset($_GET[$name]) && $plugin_name == $_GET[$name] || ! isset($_GET[$name]) && $plugin_name == $default) {            $ret .= ' selected="selected"';        }         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";    }    $ret .= '</select>' . "\n";    // Whether each plugin has to be saved as a file    foreach ($list as $plugin_name => $val) {        $ret .= '<input type="hidden" id="force_file_' . $plugin_name . '" value="';        if (isset($val['force_file'])) {            $ret .= 'true';        } else {            $ret .= 'false';        }        $ret .= '" />'. "\n";    }    return $ret;}/** * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt) * * returns single option in a list element * * @param string  $section        name of config section in *                                  $GLOBALS['cfg'][$section] for plugin * @param string  $plugin_name    unique plugin name * @param string  $id             option id * @param array   &$opt           plugin option details * @return  string                  table row with option */function PMA_pluginGetOneOption($section, $plugin_name, $id, &$opt){    $ret = "\n";    if ($opt['type'] == 'bool') {        $ret .= '<li>' . "\n";        $ret .= '<input type="checkbox" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="something" id="checkbox_' . $plugin_name . '_' . $opt['name'] . '"'            . ' ' . PMA_pluginCheckboxCheck($section, $plugin_name . '_' . $opt['name']);        if (isset($opt['force'])) {            /* Same code is also few lines lower, update both if needed */            $ret .= ' onclick="if (!this.checked &amp;&amp; '                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '                . 'return false; else return true;"';        }        $ret .= ' />';        $ret .= '<label for="checkbox_' . $plugin_name . '_' . $opt['name'] . '">'            . PMA_getString($opt['text']) . '</label>';    } elseif ($opt['type'] == 'text') {        $ret .= '<li>' . "\n";        $ret .= '<label for="text_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<input type="text" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"'            . ' id="text_' . $plugin_name . '_' . $opt['name'] . '"'            . (isset($opt['size']) ? ' size="' . $opt['size'] . '"' : '')            . (isset($opt['len']) ? ' maxlength="' . $opt['len'] . '"' : '') . ' />';    } elseif ($opt['type'] == 'message_only') {        $ret .= '<li>' . "\n";        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';    } elseif ($opt['type'] == 'select') {        $ret .= '<li>' . "\n";        $ret .= '<label for="select_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<select name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' id="select_' . $plugin_name . '_' . $opt['name'] . '">';        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<option value="' . $key . '"';            if ($key == $default) {                $ret .= ' selected="selected"';            }            $ret .= '>' . PMA_getString($val) . '</option>';        }        $ret .= '</select>';    } elseif ($opt['type'] == 'radio') {        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<li><input type="radio" name="' . $plugin_name . '_' . $opt['name'] . '" value="' . $key            . '" id="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '"';            if ($key == $default) {                $ret .= 'checked="checked"';            }            $ret .= ' />' . '<label for="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '">'            . PMA_getString($val) . '</label></li>';        }    } elseif ($opt['type'] == 'hidden') {        $ret .= '<li><input type="hidden" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"' . ' /></li>';    } elseif ($opt['type'] == 'begin_group') {        $ret .= '<div class="export_sub_options" id="' . $plugin_name . '_' . $opt['name'] . '">';        if (isset($opt['text'])) {            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';        }        $ret .= '<ul>';    } elseif ($opt['type'] == 'end_group') {        $ret .= '</ul></div>';    } elseif ($opt['type'] == 'begin_subgroup') {        /* each subgroup can have a header, which may also be a form element */        $ret .=  PMA_pluginGetOneOption($section, $plugin_name, $id, $opt['subgroup_header']) . '<li class="subgroup"><ul';        if (isset($opt['subgroup_header']['name'])) {            $ret .= ' id="ul_' . $opt['subgroup_header']['name'] . '">';        } else {            $ret .= '>';        }    } elseif ($opt['type'] == 'end_subgroup') {        $ret .= '</ul></li>';    } else {        /* This should be seen only by plugin writers, so I do not thing this         * needs translation. */        $ret .= 'UNKNOWN OPTION ' . $opt['type'] . ' IN IMPORT PLUGIN ' . $plugin_name . '!';    }    if (isset($opt['doc'])) {        if (count($opt['doc']) == 3) {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1], false, $opt['doc'][2]);        } elseif (count($opt['doc']) == 1) {            $ret .= PMA_showDocu($opt['doc'][0]);        } else {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1]);        }    }    // Close the list element after $opt['doc'] link is displayed    if ($opt['type'] == 'bool' || $opt['type'] == 'text' || $opt['type'] == 'message_only' || $opt['type'] == 'select') {        $ret .= '</li>';    }    $ret .= "\n";    return $ret;}/** * string PMA_pluginGetOptions(string $section, array &$list) * * return html div with editable options for plugin * * @param string  $section    name of config section in $GLOBALS['cfg'][$section] * @param array   &$list      array with plugin configuration defined in plugin file * @return  string              html fieldset with plugin options */function PMA_pluginGetOptions($section, &$list){    $ret = '';    $default = PMA_pluginGetDefault('Export', 'format');    // Options for plugins that support them    foreach ($list as $plugin_name => $val) {        $ret .= '<div id="' . $plugin_name . '_options" class="format_specific_options">';        $count = 0;            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';        if (isset($val['options']) && count($val['options']) > 0) {            foreach ($val['options'] as $id => $opt) {                if ($opt['type'] != 'hidden' && $opt['type'] != 'begin_group' && $opt['type'] != 'end_group' && $opt['type'] != 'begin_subgroup' && $opt['type'] != 'end_subgroup') {                    $count++;                }                $ret .= PMA_pluginGetOneOption($section, $plugin_name, $id, $opt);            }        }        if ($count == 0) {            $ret .= '<p>' . __('This format has no options') . '</p>';        }        $ret .= '</div>';    }    return $ret;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Loads libraries/common.inc.php and preforms some additional actions * * @package PhpMyAdmin-setup *//** * Do not include full common. * @ignore */define('PMA_MINIMUM_COMMON', true);define('PMA_SETUP', true);chdir('..');if (!file_exists('./libraries/common.inc.php')) {    die('Bad invocation!');}require_once './libraries/common.inc.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/url_generating.lib.php';require_once './libraries/user_preferences.lib.php';// use default error handlerrestore_error_handler();// Save current language in a cookie, required since we use PMA_MINIMUM_COMMON$GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);ConfigFile::getInstance()->setPersistKeys(array(    'DefaultLang',    'ServerDefault',    'UploadDir',    'SaveDir',    'Servers/1/verbose',    'Servers/1/host',    'Servers/1/port',    'Servers/1/socket',    'Servers/1/extension',    'Servers/1/connect_type',    'Servers/1/auth_type',    'Servers/1/user',    'Servers/1/password'));// allows for redirection even after sending some dataob_start();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once 'Export_Relation_Schema.class.php';/** * This Class inherits the XMLwriter class and * helps in developing structure of SVG Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_SVG extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_SVG" constructor     *     * Upon instantiation This starts writing the Svg XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');        $this->startDtd(            'svg', '-//W3C//DTD SVG 1.1//EN',            'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'        );        $this->endDtd();    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     * @access public     */    function setTitle($value)    {        $this->title = $value;    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     * @access public     */    function setAuthor($value)    {        $this->author = $value;    }    /**     * Set document font     *     * @param string $value sets the font e.g Arial, Sans-serif etc     *     * @return void     * @access public     */    function setFont($value)    {        $this->font = $value;    }    /**     * Get document font     *     * @return string returns the font name     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Set document font size     *     * @param string $value sets the font size in pixels     *     * @return void     * @access public     */    function setFontSize($value)    {        $this->fontSize = $value;    }    /**     * Get document font size     *     * @return string returns the font size     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Starts Svg Document     *     * svg document starts by first initializing svg tag     * which contains all the attributes and namespace that needed     * to define the svg document     *     * @param integer $width  total width of the Svg document     * @param integer $height total height of the Svg document     *     * @return void     * @access public     *     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function startSvgDoc($width,$height)    {        $this->startElement('svg');        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('xmlns', 'http://www.w3.org/2000/svg');        $this->writeAttribute('version', '1.1');    }    /**     * Ends Svg Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endSvgDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * output Svg Document     *     * svg document prompted to the user for download     * Svg document saved in .svg extension and can be     * easily changeable by using any svg IDE     *     * @param string $fileName file name     *     * @return void     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute()     */    function showOutput($fileName)    {        //ob_get_clean();        $output = $this->flush();        PMA_download_header($fileName . '.svg', 'image/svg+xml', strlen($output));        print $output;    }    /**     * Draws Svg elements     *     * SVG has some predefined shape elements like rectangle & text     * and other elements who have x,y co-ordinates are drawn.     * specify their width and height and can give styles too.     *     * @param string  $name   Svg element name     * @param integer $x      The x attr defines the left position of the element     * (e.g. x="0" places the element 0 pixels from the left of the browser window)     * @param integer $y      The y attribute defines the top position of the element     * (e.g. y="0" places the element 0 pixels from the top of the browser window)     * @param integer $width  The width attribute defines the width the element     * @param integer $height The height attribute defines the height the element     * @param string  $text   The text attribute defines the text the element     * @param string  $styles The style attribute defines the style the element     *  styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::text(), XMLWriter::endElement()     */    function printElement($name, $x, $y, $width = '', $height = '', $text = '', $styles = '')    {        $this->startElement($name);        $this->writeAttribute('width', $width);        $this->writeAttribute('height', $height);        $this->writeAttribute('x', $x);        $this->writeAttribute('y', $y);        $this->writeAttribute('style', $styles);        if (isset($text)) {            $this->writeAttribute('font-family', $this->font);            $this->writeAttribute('font-size', $this->fontSize);            $this->text($text);        }        $this->endElement();    }    /**     * Draws Svg Line element     *     * Svg line element is drawn for connecting the tables.     * arrows are also drawn by specify its start and ending     * co-ordinates     *     * @param string  $name   Svg element name i.e line     * @param integer $x1     Defines the start of the line on the x-axis     * @param integer $y1     Defines the start of the line on the y-axis     * @param integer $x2     Defines the end of the line on the x-axis     * @param integer $y2     Defines the end of the line on the y-axis     * @param string  $styles The style attribute defines the style the element     *                        styles can be defined like CSS styles     *     * @return void     * @access public     *     * @see XMLWriter::startElement(), XMLWriter::writeAttribute(),     * XMLWriter::endElement()     */    function printElementLine($name,$x1,$y1,$x2,$y2,$styles)    {        $this->startElement($name);        $this->writeAttribute('x1', $x1);        $this->writeAttribute('y1', $y1);        $this->writeAttribute('x2', $x2);        $this->writeAttribute('y2', $y2);        $this->writeAttribute('style', $styles);        $this->endElement();    }    /**     * get width of string/text     *     * Svg text element width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other than this.     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in SVG XML document. * * @name Table_Stats * @see PMA_SVG */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             Font face     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max. with among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current SVG image document     * @global integer   The current page number (from the     *                   $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     *     * @see PMA_SVG, Table_Stats::Table_Stats_setWidth,     *       Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber,    &$same_wide_width, $showKeys = false, $showInfo = false)    {        global $svg, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '         . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'         . PMA_backquote($cfgRelation['table_coords'])         . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''         . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''         . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $svg->dieSchema(                $pageNumber,                "SVG",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : ''        ) . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font size     * @param integer $fontSize The font size     *     * @global object    The current SVG image document     *     * @return nothing     * @access private     *     * @see PMA_SVG     */    private function _setWidthTable($font,$fontSize)    {        global $svg;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $svg->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $svg->getStringWidth('  ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $svg->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize font size     *     * @return nothing     * @access private     */    function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current SVG image document     *     * @access public     * @return nothing     *     * @see PMA_SVG,PMA_SVG::printElement     */    public function tableDraw($showColor)    {        global $svg;        //echo $this->_tableName.'<br />';        $svg->printElement(            'rect', $this->x, $this->y, $this->width,            $this->heightCell, null, 'fill:red;stroke:black;'        );        $svg->printElement(            'text', $this->x + 5, $this->y+ 14, $this->width, $this->heightCell,            $this->_getTitle(), 'fill:none;stroke:black;'        );        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $svg->printElement(                'rect', $this->x, $this->y + $this->currentCell, $this->width,                $this->heightCell, null, 'fill:'.$showColor.';stroke:black;'            );            $svg->printElement(                'text', $this->x + 5, $this->y + 14 + $this->currentCell,                $this->width, $this->heightCell, $field, 'fill:none;stroke:black;'            );        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in SVG XML document. * * @name Relation_Stats * @see PMA_SVG::printElementLine */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return nothing     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2];        $this->yDest = $dest_pos[2];    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     * @access private     */    function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current SVG image document     *     * @return nothing     * @access public     *     * @see PMA_SVG     */    public function relationDraw($changeColor)    {        global $svg;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        $svg->printElementLine(            'line', $this->xSrc, $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick,            $this->yDest, $this->xDest, $this->yDest,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick, $this->ySrc,            $this->xDest + $this->destDir * $this->wTick, $this->yDest,            'fill:' . $color . ';stroke:' . $color . ';stroke-width:1;'        );        $root2 = 2 * sqrt(2);        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xSrc + $this->srcDir * $this->wTick * 0.75, $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );        $svg->printElementLine(            'line', $this->xDest + $this->destDir * $this->wTick / 2, $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            'fill:' . $color . ';stroke:black;stroke-width:2;'        );    }}/** end of the "Relation_Stats" class*//** * Svg Relation Schema Class * * Purpose of this class is to generate the SVG XML Document because * SVG defines the graphics in XML format which is used for representing * the database diagrams as vector image. This class actually helps *  in preparing SVG XML format. * * SVG XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Svg_Relation_Schema */class PMA_Svg_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    private $_xMax = 0;    private $_yMax = 0;    private $scale;    private $_xMin = 100000;    private $_yMin = 100000;    private $t_marg = 10;    private $b_marg = 10;    private $l_marg = 10;    private $r_marg = 10;    private $_tablewidth;    /**     * The "PMA_Svg_Relation_Schema" constructor     *     * Upon instantiation This starts writing the SVG XML document     * user will be prompted for download as .svg extension     *     * @return void     * @see PMA_SVG     */    function __construct()    {        global $svg,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setExportType($_POST['export_type']);        $svg = new PMA_SVG();        $svg->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $svg->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $svg->setFont('Arial');        $svg->setFontSize('16px');        $svg->startSvgDoc('1000px', '1000px');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $svg->getFont(), $svg->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }            $this->_setMinMax($this->tables[$table]);        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $svg->getFont(), $svg->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $svg->endSvgDoc();        $svg->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Sets X and Y minimum and maximum for a table cell     *     * @param string $table The table name     *     * @return nothing     * @access private     */    private function _setMinMax($table)    {        $this->_xMax = max($this->_xMax, $table->x + $table->width);        $this->_yMax = max($this->_yMax, $table->y + $table->height);        $this->_xMin = min($this->_xMin, $table->x);        $this->_yMin = min($this->_yMin, $table->y);    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font face     * @param int     $fontSize     Font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @access private     * @return nothing     *     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable,$font,$fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$masterTable]);        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );            $this->_setMinMax($this->tables[$foreignTable]);        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines     * connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return nothing     * @access private     *     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return nothing     * @access private     *     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/** * Handles the visualization of GIS POLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Polygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesn't have an inner ring, use polygon itself        if (strpos($polygon, "),(") === false) {            $ring = $polygon;        } else {            // Seperate outer ring and use it to determin min-max            $parts = explode("),(", $polygon);            $ring = $parts[0];        }        return $this->setMinMax($ring, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);        // print label if applicable        if (isset($label) && trim($label) != '') {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, $scale_data, true);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $points_arr = $this->extractPoints($outer, $scale_data, true);            foreach ($inner as $inner_poly) {                $points_arr = array_merge(                    $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                );            }        }        // draw polygon        $pdf->Polygon($points_arr, 'F*', array(), $color, true);        // print label if applicable        if (isset($label) && trim($label) != '') {            $pdf->SetXY($points_arr[2], $points_arr[3]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS POLYGON object     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'polygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row = '<path d="';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $row .= $this->_drawPath($polygon, $scale_data);        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            $outer = $parts[0];            $inner = array_slice($parts, 1);            $row .= $this->_drawPath($outer, $scale_data);            foreach ($inner as $inner_poly) {                $row .= $this->_drawPath($inner_poly, $scale_data);            }        }        $row .= '"';        foreach ($polygon_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS POLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS POLYGON object     * @param string $fill_color Color for the GIS POLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($spatial, 9, (strlen($spatial) - 11));        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(';        $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        $row .= 'null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['POLYGON']['no_of_lines'])            ? $gis_data[$index]['POLYGON']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'POLYGON(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['POLYGON'][$i]['no_of_points'])                ? $gis_data[$index]['POLYGON'][$i]['no_of_points'] : 4;            if ($no_of_points < 4) {                $no_of_points = 4;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['POLYGON'][$i][$j]['x'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['x']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['POLYGON'][$i][$j]['y'])                    && trim($gis_data[$index]['POLYGON'][$i][$j]['y']) != '')                    ? $gis_data[$index]['POLYGON'][$i][$j]['y'] : $empty) .',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Calculates the area of a closed simple polygon.     *     * @param array $ring array of points forming the ring     *     * @return the area of a closed simple polygon.     */    public static function area($ring)    {        $no_of_points = count($ring);        // If the last point is same as the first point ignore it        $last = count($ring) - 1;        if (($ring[0]['x'] == $ring[$last]['x'])            && ($ring[0]['y'] == $ring[$last]['y'])        ) {            $no_of_points--;        }        //         _n-1        // A = _1_ \    (X(i) * Y(i+1)) - (Y(i) * X(i+1))        //      2  /__        //         i=0        $area = 0;        for ($i = 0; $i < $no_of_points; $i++) {            $j = ($i + 1) % $no_of_points;            $area += $ring[$i]['x'] * $ring[$j]['y'];            $area -= $ring[$i]['y'] * $ring[$j]['x'];        }        $area /= 2.0;        return $area;    }    /**     * Determines whether a set of points represents an outer ring.     * If points are in clockwise orientation then, they form an outer ring.     *     * @param array $ring array of points forming the ring     *     * @return whether a set of points represents an outer ring.     */    public static function isOuterRing($ring)    {        // If area is negative then it's in clockwise orientation,        // i.e. it's an outer ring        if (PMA_GIS_Polygon::area($ring) < 0) {            return true;        }        return false;    }    /**     * Determines whether a given point is inside a given polygon.     *     * @param array $point   x, y coordinates of the point     * @param array $polygon array of points forming the ring     *     * @return whether a given point is inside a given polygon     */    public static function isPointInsidePolygon($point, $polygon)    {        // If first point is repeated at the end remove it        $last = count($polygon) - 1;        if (($polygon[0]['x'] == $polygon[$last]['x'])            && ($polygon[0]['y'] == $polygon[$last]['y'])        ) {            $polygon = array_slice($polygon, 0, $last);        }        $no_of_points = count($polygon);        $counter = 0;        // Use ray casting algorithm        $p1 = $polygon[0];        for ($i = 1; $i <= $no_of_points; $i++) {            $p2 = $polygon[$i % $no_of_points];            if ($point['y'] > min(array($p1['y'], $p2['y']))) {                if ($point['y'] <= max(array($p1['y'], $p2['y']))) {                    if ($point['x'] <= max(array($p1['x'], $p2['x']))) {                        if ($p1['y'] != $p2['y']) {                            $xinters = ($point['y'] - $p1['y'])                                * ($p2['x'] - $p1['x'])                                / ($p2['y'] - $p1['y']) + $p1['x'];                            if ($p1['x'] == $p2['x'] || $point['x'] <= $xinters) {                                $counter++;                            }                        }                    }                }            }            $p1 = $p2;        }        if ($counter % 2 == 0) {            return  false;        } else {            return true;        }    }    /**     * Returns a point that is guaranteed to be on the surface of the ring.     * (for simple closed rings)     *     * @param array $ring array of points forming the ring     *     * @return a point on the surface of the ring     */    public static function getPointOnSurface($ring)    {        // Find two consecutive distinct points.        for ($i = 0; $i < count($ring) - 1; $i++) {            if ($ring[$i]['y'] != $ring[$i + 1]['y']) {                $x0 = $ring[$i]['x'];                $x1 = $ring[$i + 1]['x'];                $y0 = $ring[$i]['y'];                $y1 = $ring[$i + 1]['y'];                break;            }        }        if (! isset($x0)) {            return false;        }        // Find the mid point        $x2 = ($x0 + $x1) / 2;        $y2 = ($y0 + $y1) / 2;        // Always keep $epsilon < 1 to go with the reduction logic down here        $epsilon = 0.1;        $denominator = sqrt(pow(($y1 - $y0), 2) + pow(($x0 - $x1), 2));        $pointA = array(); $pointB = array();        while (true) {            // Get the points on either sides of the line            // with a distance of epsilon to the mid point            $pointA['x'] = $x2 + ($epsilon * ($y1 - $y0)) / $denominator;            $pointA['y'] = $y2 + ($pointA['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            $pointB['x'] = $x2 + ($epsilon * ($y1 - $y0)) / (0 - $denominator);            $pointB['y'] = $y2 + ($pointB['x'] - $x2) * ($x0 - $x1) / ($y1 - $y0);            // One of the points should be inside the polygon,            // unless epcilon chosen is too large            if (PMA_GIS_Polygon::isPointInsidePolygon($pointA, $ring)) {                return $pointA;            } elseif (PMA_GIS_Polygon::isPointInsidePolygon($pointB, $ring)) {                return $pointB;            } else {                //If both are outside the polygon reduce the epsilon and                //recalculate the points(reduce exponentially for faster convergance)                $epsilon = pow($epsilon, 2);                if ($epsilon == 0) {                    return false;                }            }        }    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POLYGON';            $wkt = $value;        }        // Trim to remove leading 'POLYGON((' and trailing '))'        $polygon = substr($wkt, 9, (strlen($wkt) - 11));        // Seperate each linestring        $linerings = explode("),(", $polygon);        $params[$index]['POLYGON']['no_of_lines'] = count($linerings);        $j = 0;        foreach ($linerings as $linering) {            $points_arr = $this->extractPoints($linering, null);            $no_of_points = count($points_arr);            $params[$index]['POLYGON'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['POLYGON'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['POLYGON'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/*   Copyright (c) 2003, 2009 Danilo Segan <danilo@kvota.net>.   Copyright (c) 2005 Nico Kaiser <nico@siriux.net>   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*//** * Provides a simple gettext replacement that works independently from * the system's gettext abilities. * It can read MO files and use them for translating strings. * The files are passed to gettext_reader as a Stream (see streams.php) * * This version has the ability to cache all strings and translations to * speed up the string lookup. * While the cache is enabled by default, it can be switched off with the * second parameter in the constructor (e.g. whenusing very large MO files * that you don't want to keep in memory) */class gettext_reader {  //public:   var $error = 0; // public variable that holds error code (0 if no error)   //private:  var $BYTEORDER = 0;        // 0: low endian, 1: big endian  var $STREAM = NULL;  var $short_circuit = false;  var $enable_cache = false;  var $originals = NULL;      // offset of original table  var $translations = NULL;    // offset of translation table  var $pluralheader = NULL;    // cache header field for plural forms  var $total = 0;          // total string count  var $table_originals = NULL;  // table for original strings (offsets)  var $table_translations = NULL;  // table for translated strings (offsets)  var $cache_translations = NULL;  // original -> translation mapping  /* Methods */  /**   * Reads a 32bit Integer from the Stream   *   * @access private   * @return Integer from the Stream   */  function readint() {      if ($this->BYTEORDER == 0) {        // low endian        $input=unpack('V', $this->STREAM->read(4));        return array_shift($input);      } else {        // big endian        $input=unpack('N', $this->STREAM->read(4));        return array_shift($input);      }    }  function read($bytes) {    return $this->STREAM->read($bytes);  }  /**   * Reads an array of Integers from the Stream   *   * @param int count How many elements should be read   * @return Array of Integers   */  function readintarray($count) {    if ($this->BYTEORDER == 0) {        // low endian        return unpack('V'.$count, $this->STREAM->read(4 * $count));      } else {        // big endian        return unpack('N'.$count, $this->STREAM->read(4 * $count));      }  }  /**   * Constructor   *   * @param object Reader the StreamReader object   * @param boolean enable_cache Enable or disable caching of strings (default on)   */  function gettext_reader($Reader, $enable_cache = true) {    // If there isn't a StreamReader, turn on short circuit mode.    if (! $Reader || isset($Reader->error) ) {      $this->short_circuit = true;      return;    }    // Caching can be turned off    $this->enable_cache = $enable_cache;    $MAGIC1 = "\x95\x04\x12\xde";    $MAGIC2 = "\xde\x12\x04\x95";    $this->STREAM = $Reader;    $magic = $this->read(4);    if ($magic == $MAGIC1) {      $this->BYTEORDER = 1;    } elseif ($magic == $MAGIC2) {      $this->BYTEORDER = 0;    } else {      $this->error = 1; // not MO file      return false;    }    // FIXME: Do we care about revision? We should.    $revision = $this->readint();    $this->total = $this->readint();    $this->originals = $this->readint();    $this->translations = $this->readint();  }  /**   * Loads the translation tables from the MO file into the cache   * If caching is enabled, also loads all strings into a cache   * to speed up translation lookups   *   * @access private   */  function load_tables() {    if (is_array($this->cache_translations) &&      is_array($this->table_originals) &&      is_array($this->table_translations))      return;    /* get original and translations tables */    if (!is_array($this->table_originals)) {      $this->STREAM->seekto($this->originals);      $this->table_originals = $this->readintarray($this->total * 2);    }    if (!is_array($this->table_translations)) {      $this->STREAM->seekto($this->translations);      $this->table_translations = $this->readintarray($this->total * 2);    }    if ($this->enable_cache) {      $this->cache_translations = array ();      /* read all strings in the cache */      for ($i = 0; $i < $this->total; $i++) {        $this->STREAM->seekto($this->table_originals[$i * 2 + 2]);        $original = $this->STREAM->read($this->table_originals[$i * 2 + 1]);        $this->STREAM->seekto($this->table_translations[$i * 2 + 2]);        $translation = $this->STREAM->read($this->table_translations[$i * 2 + 1]);        $this->cache_translations[$original] = $translation;      }    }  }  /**   * Returns a string from the "originals" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_original_string($num) {    $length = $this->table_originals[$num * 2 + 1];    $offset = $this->table_originals[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Returns a string from the "translations" table   *   * @access private   * @param int num Offset number of original string   * @return string Requested string if found, otherwise ''   */  function get_translation_string($num) {    $length = $this->table_translations[$num * 2 + 1];    $offset = $this->table_translations[$num * 2 + 2];    if (! $length)      return '';    $this->STREAM->seekto($offset);    $data = $this->STREAM->read($length);    return (string)$data;  }  /**   * Binary search for string   *   * @access private   * @param string string   * @param int start (internally used in recursive function)   * @param int end (internally used in recursive function)   * @return int string number (offset in originals table)   */  function find_string($string, $start = -1, $end = -1) {    if (($start == -1) or ($end == -1)) {      // find_string is called with only one parameter, set start end end      $start = 0;      $end = $this->total;    }    if (abs($start - $end) <= 1) {      // We're done, now we either found the string, or it doesn't exist      $txt = $this->get_original_string($start);      if ($string == $txt)        return $start;      else        return -1;    } else if ($start > $end) {      // start > end -> turn around and start over      return $this->find_string($string, $end, $start);    } else {      // Divide table in two parts      $half = (int)(($start + $end) / 2);      $cmp = strcmp($string, $this->get_original_string($half));      if ($cmp == 0)        // string is exactly in the middle => return it        return $half;      else if ($cmp < 0)        // The string is in the upper half        return $this->find_string($string, $start, $half);      else        // The string is in the lower half        return $this->find_string($string, $half, $end);    }  }  /**   * Translates a string   *   * @access public   * @param string string to be translated   * @return string translated string (or original, if not found)   */  function translate($string) {    if ($this->short_circuit)      return $string;    $this->load_tables();    if ($this->enable_cache) {      // Caching enabled, get translated string from cache      if (array_key_exists($string, $this->cache_translations))        return $this->cache_translations[$string];      else        return $string;    } else {      // Caching not enabled, try to find string      $num = $this->find_string($string);      if ($num == -1)        return $string;      else        return $this->get_translation_string($num);    }  }  /**   * Sanitize plural form expression for use in PHP eval call.   *   * @access private   * @return string sanitized plural form expression   */  function sanitize_plural_expression($expr) {    // Get rid of disallowed characters.    $expr = preg_replace('@[^a-zA-Z0-9_:;\(\)\?\|\&=!<>+*/\%-]@', '', $expr);    // Add parenthesis for tertiary '?' operator.    $expr .= ';';    $res = '';    $p = 0;    for ($i = 0; $i < strlen($expr); $i++) {      $ch = $expr[$i];      switch ($ch) {      case '?':        $res .= ' ? (';        $p++;        break;      case ':':        $res .= ') : (';        break;      case ';':        $res .= str_repeat( ')', $p) . ';';        $p = 0;        break;      default:        $res .= $ch;      }    }    return $res;  }  /**   * Parse full PO header and extract only plural forms line.   *   * @access private   * @return string verbatim plural form header field   */  function extract_plural_forms_header_from_po_header($header) {    if (preg_match("/(^|\n)plural-forms: ([^\n]*)\n/i", $header, $regs))      $expr = $regs[2];    else      $expr = "nplurals=2; plural=n == 1 ? 0 : 1;";    return $expr;  }  /**   * Get possible plural forms from MO header   *   * @access private   * @return string plural form header   */  function get_plural_forms() {    // lets assume message number 0 is header    // this is true, right?    $this->load_tables();    // cache header field for plural forms    if (! is_string($this->pluralheader)) {      if ($this->enable_cache) {        $header = $this->cache_translations[""];      } else {        $header = $this->get_translation_string(0);      }      $expr = $this->extract_plural_forms_header_from_po_header($header);      $this->pluralheader = $this->sanitize_plural_expression($expr);    }    return $this->pluralheader;  }  /**   * Detects which plural form to take   *   * @access private   * @param n count   * @return int array index of the right plural form   */  function select_string($n) {    $string = $this->get_plural_forms();    $string = str_replace('nplurals',"\$total",$string);    $string = str_replace("n",$n,$string);    $string = str_replace('plural',"\$plural",$string);    $total = 0;    $plural = 0;    eval("$string");    if ($plural >= $total) $plural = $total - 1;    return $plural;  }  /**   * Plural version of gettext   *   * @access public   * @param string single   * @param string plural   * @param string number   * @return translated plural form   */  function ngettext($single, $plural, $number) {    if ($this->short_circuit) {      if ($number != 1)        return $plural;      else        return $single;    }    // find out the appropriate form    $select = $this->select_string($number);    // this should contains all strings separated by NULLs    $key = $single . chr(0) . $plural;    if ($this->enable_cache) {      if (! array_key_exists($key, $this->cache_translations)) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->cache_translations[$key];        $list = explode(chr(0), $result);        return $list[$select];      }    } else {      $num = $this->find_string($key);      if ($num == -1) {        return ($number != 1) ? $plural : $single;      } else {        $result = $this->get_translation_string($num);        $list = explode(chr(0), $result);        return $list[$select];      }    }  }  function pgettext($context, $msgid) {    $key = $context . chr(4) . $msgid;    $ret = $this->translate($key);    if (strpos($ret, "\004") !== FALSE) {      return $msgid;    } else {      return $ret;    }  }  function npgettext($context, $singular, $plural, $number) {    $key = $context . chr(4) . $singular;    $ret = $this->ngettext($key, $plural, $number);    if (strpos($ret, "\004") !== FALSE) {      return $singular;    } else {      return $ret;    }  }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * MIME detection code. * * @package PhpMyAdmin * @todo Maybe we could try to use fileinfo module if loaded *//** * Tries to detect MIME type of content. * * @param string &$test * @return string */function PMA_detectMIME(&$test){    $len = strlen($test);    if ($len >= 2 && $test[0] == chr(0xff) && $test[1] == chr(0xd8)) {        return 'image/jpeg';    }    if ($len >= 3 && substr($test, 0, 3) == 'GIF') {        return 'image/gif';    }    if ($len >= 4 && substr($test, 0, 4) == "\x89PNG") {        return 'image/png';    }    return 'application/octet-stream';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Formset processing library * * @package PhpMyAdmin-setup *//** * Processes forms registered in $form_display, handles error correction * * @param FormDisplay $form_display */function process_formset(FormDisplay $form_display){    if (filter_input(INPUT_GET, 'mode') == 'revert') {        // revert erroneous fields to their default values        $form_display->fixErrors();        // drop post data        header('HTTP/1.1 303 See Other');        header('Location: index.php');        exit;    }    if (!$form_display->process(false)) {        // handle form view and failed POST        $form_display->display(true, true);    } else {        // check for form errors        if ($form_display->hasErrors()) {            // form has errors, show warning            $separator = PMA_get_arg_separator('html');            $page = filter_input(INPUT_GET, 'page');            $formset = filter_input(INPUT_GET, 'formset');            $formset = $formset ? "{$separator}formset=$formset" : '';            $id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);            if ($id === null && $page == 'servers') {                // we've just added a new server, get it's id                $id = ConfigFile::getInstance()->getServerCount();            }            $id = $id ? "{$separator}id=$id" : '';            ?>            <div class="error">                <h4><?php echo __('Warning') ?></h4>                <?php echo __('Submitted form contains errors') ?><br />                <a href="?page=<?php echo $page . $formset . $id . $separator ?>mode=revert"><?php echo __('Try to revert erroneous fields to their default values') ?></a>            </div>            <?php $form_display->displayErrors() ?>            <a class="btn" href="index.php"><?php echo __('Ignore errors') ?></a>            &nbsp;            <a class="btn" href="?page=<?php echo $page . $formset . $id . $separator ?>mode=edit"><?php echo __('Show form') ?></a>            <?php        } else {            // drop post data            header('HTTP/1.1 303 See Other');            header('Location: index.php');            exit;        }    }}?>
<?php/** * Column types and functions supported by Drizzle * * @package PhpMyAdmin */$auto_column_types = empty($cfg['ColumnTypes']);// VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity$cfg['ColumnTypes'] = !empty($cfg['ColumnTypes']) ? $cfg['ColumnTypes'] : array(    // most used    'INTEGER',    'VARCHAR',    'TEXT',    'DATE',    // numeric    'NUMERIC' => array(        'INTEGER',        'BIGINT',        '-',        'DECIMAL',        'DOUBLE',        '-',        'BOOLEAN',        'SERIAL',        'UUID',    ),    // Date/Time    'DATE and TIME' => array(        'DATE',        'DATETIME',        'TIMESTAMP',        'TIME',    ),    // Text    'STRING' => array(        'VARCHAR',        'TEXT',        '-',        'VARBINARY',        'BLOB',        '-',        'ENUM',    ),);if ($auto_column_types && PMA_MYSQL_INT_VERSION >= 20120130) {    $cfg['ColumnTypes']['STRING'][] = '-';    $cfg['ColumnTypes']['STRING'][] = 'IPV6';}unset($auto_column_types);$cfg['AttributeTypes'] = !empty($cfg['AttributeTypes']) ? $cfg['AttributeTypes'] : array(   '',   'on update CURRENT_TIMESTAMP',);if ($cfg['ShowFunctionFields']) {    $cfg['RestrictColumnTypes'] = !empty($cfg['RestrictColumnTypes']) ? $cfg['RestrictColumnTypes'] : array(        'INTEGER'   => 'FUNC_NUMBER',        'BIGINT'    => 'FUNC_NUMBER',        'DECIMAL'   => 'FUNC_NUMBER',        'DOUBLE'    => 'FUNC_NUMBER',        'BOOLEAN'   => 'FUNC_NUMBER',        'SERIAL'    => 'FUNC_NUMBER',        'DATE'      => 'FUNC_DATE',        'DATETIME'  => 'FUNC_DATE',        'TIMESTAMP' => 'FUNC_DATE',        'TIME'      => 'FUNC_DATE',        'VARCHAR'    => 'FUNC_CHAR',        'TEXT'       => 'FUNC_CHAR',        'VARBINARY'  => 'FUNC_CHAR',        'BLOB'       => 'FUNC_CHAR',        'UUID'       => 'FUNC_UUID',        'ENUM'       => '',    );    $restrict_functions = array(        'FUNC_CHAR' => array(            'BIN',            'CHAR',            'CURRENT_USER',            'COMPRESS',            'DATABASE',            'DAYNAME',            'HEX',            'LOAD_FILE',            'LOWER',            'LTRIM',            'MD5',            'MONTHNAME',            'QUOTE',            'REVERSE',            'RTRIM',            'SCHEMA',            'SPACE',            'TRIM',            'UNCOMPRESS',            'UNHEX',            'UPPER',            'USER',            'UUID',            'VERSION',        ),        'FUNC_UUID' => array(            'UUID',        ),        'FUNC_DATE' => array(            'CURRENT_DATE',            'CURRENT_TIME',            'DATE',            'FROM_DAYS',            'FROM_UNIXTIME',            'LAST_DAY',            'NOW',            'SYSDATE',            //'TIME', // https://bugs.launchpad.net/drizzle/+bug/804571            'TIMESTAMP',            'UTC_DATE',            'UTC_TIME',            'UTC_TIMESTAMP',            'YEAR',        ),        'FUNC_NUMBER' => array(            'ABS',            'ACOS',            'ASCII',            'ASIN',            'ATAN',            'BIT_COUNT',            'CEILING',            'CHAR_LENGTH',            'CONNECTION_ID',            'COS',            'COT',            'CRC32',            'DAYOFMONTH',            'DAYOFWEEK',            'DAYOFYEAR',            'DEGREES',            'EXP',            'FLOOR',            'HOUR',            'LENGTH',            'LN',            'LOG',            'LOG2',            'LOG10',            'MICROSECOND',            'MINUTE',            'MONTH',            'OCT',            'ORD',            'PI',            'QUARTER',            'RADIANS',            'RAND',            'ROUND',            'SECOND',            'SIGN',            'SIN',            'SQRT',            'TAN',            'TO_DAYS',            'TIME_TO_SEC',            'UNCOMPRESSED_LENGTH',            'UNIX_TIMESTAMP',            //'WEEK', // same as TIME            'WEEKDAY',            'WEEKOFYEAR',            'YEARWEEK',        ),    );    $cfg_default_restrict_funcs = empty($cfg['RestrictFunctions']);    if ($cfg_default_restrict_funcs) {        $cfg['RestrictFunctions'] = $restrict_functions;    }    if (empty($cfg['Functions'])) {        // build a list of functions based on $restrict_functions        $cfg['Functions'] = array();        foreach ($restrict_functions as $cat => $functions) {            $cfg['Functions'] = array_merge($cfg['Functions'], $functions);        }        // check for some functions known to be in modules        $functions = array(            'MYSQL_PASSWORD' => 'FUNC_CHAR',            'ROT13' => 'FUNC_CHAR',        );        // add new functions        $sql = "SELECT upper(plugin_name) f            FROM data_dictionary.plugins            WHERE plugin_name IN ('" . implode("','", array_keys($functions)) . "')              AND plugin_type = 'Function'              AND is_active";        $drizzle_functions = PMA_DBI_fetch_result($sql, 'f', 'f');        $cfg['Functions'] = array_merge($cfg['Functions'], $drizzle_functions);        if ($cfg_default_restrict_funcs) {            foreach ($drizzle_functions as $function) {                $category = $functions[$function];                $cfg['RestrictFunctions'][$category][] = $function;            }            foreach ($cfg['RestrictFunctions'] as &$v) {                sort($v);            }            unset($v);        }        sort($cfg['Functions']);    }    unset($restrict_functions);} // end if?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Run common work */require_once './libraries/common.inc.php';//Get some js files needed for Ajax requests$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_structure.js';/** * If we are not in an Ajax request, then do the common work and show the links etc. */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/db_common.inc.php';}$url_query .= '&amp;goto=tbl_tracking.php&amp;back=db_tracking.php';// Get the database structure$sub_part = '_structure';require './libraries/db_info.inc.php';// Work to do?//  (here, do not use $_REQUEST['db] as it can be crafted)if (isset($_REQUEST['delete_tracking']) && isset($_REQUEST['table'])) {    PMA_Tracker::deleteTracking($GLOBALS['db'], $_REQUEST['table']);    /**     * If in an Ajax request, generate the success message and use     * {@link PMA_ajaxResponse()} to send the output     */    if ($GLOBALS['is_ajax_request'] == true) {        $message = PMA_Message::success();        PMA_ajaxResponse($message, true);    }}// Get tracked data about the database$data = PMA_Tracker::getTrackedData($_REQUEST['db'], '', '1');// No tables present and no log existif ($num_tables == 0 && count($data['ddlog']) == 0) {    echo '<p>' . __('No tables found in database.') . '</p>' . "\n";    if (empty($db_is_information_schema)) {        include './libraries/display_create_table.lib.php';    }    // Display the footer    include './libraries/footer.inc.php';    exit;}// ---------------------------------------------------------------------------/* * Display top menu links */require_once './libraries/db_links.inc.php';// Prepare statement to get HEAD version$all_tables_query = ' SELECT table_name, MAX(version) as version FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE db_name = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' ' .             ' GROUP BY table_name' .             ' ORDER BY table_name ASC';$all_tables_result = PMA_query_as_controluser($all_tables_query);// If a HEAD version existsif (PMA_DBI_num_rows($all_tables_result) > 0) {?>    <div id="tracked_tables">    <h3><?php echo __('Tracked tables');?></h3>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Last version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Action');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    // Print out information about versions    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data for this table'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Drop');    }    $style = 'odd';    while ($one_result = PMA_DBI_fetch_array($all_tables_result)) {        list($table_name, $version_number) = $one_result;        $table_query = ' SELECT * FROM ' .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . '.' .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             ' WHERE `db_name` = \'' . PMA_sqlAddSlashes($_REQUEST['db']) . '\' AND `table_name`  = \'' . PMA_sqlAddSlashes($table_name) . '\' AND `version` = \'' . $version_number . '\'';        $table_result = PMA_query_as_controluser($table_query);        $version_data = PMA_DBI_fetch_array($table_result);        if ($version_data['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        $tmp_link = 'tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']);        $delete_link = 'db_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($version_data['table_name']) . '&amp;delete_tracking=true&amp';        ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version_data['db_name']);?></td>            <td><?php echo htmlspecialchars($version_data['table_name']);?></td>            <td><?php echo $version_data['version'];?></td>            <td><?php echo $version_data['date_created'];?></td>            <td><?php echo $version_data['date_updated'];?></td>            <td><?php echo $version_status;?></td>            <td><a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'class="drop_tracking_anchor"' : ''); ?> href="<?php echo $delete_link;?>" ><?php echo $drop_image_or_text; ?></a></td>            <td> <a href="<?php echo $tmp_link; ?>"><?php echo __('Versions');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;report=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Tracking report');?></a>               | <a href="<?php echo $tmp_link; ?>&amp;snapshot=true&amp;version=<?php echo $version_data['version'];?>"><?php echo __('Structure snapshot');?></a></td>        </tr>        <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    unset($tmp_link);    ?>    </tbody>    </table>    </div><?php}$sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];// Get list of tables$table_list = PMA_getTableList($GLOBALS['db']);// For each table try to get the tracking versionforeach ($table_list as $key => $value) {    // If $value is a table group.    if (array_key_exists(('is' . $sep . 'group'), $value) && $value['is' . $sep . 'group']) {        foreach ($value as $temp_table) {            // If $temp_table is a table with the value for 'Name' is set,            // rather than a propery of the table group.            if (is_array($temp_table) && array_key_exists('Name', $temp_table)) {                if (PMA_Tracker::getVersion($GLOBALS['db'], $temp_table['Name']) == -1) {                    $my_tables[] = $temp_table['Name'];                }            }        }    // If $value is a table.    } else {        if (PMA_Tracker::getVersion($GLOBALS['db'], $value['Name']) == -1) {            $my_tables[] = $value['Name'];        }    }}// If untracked tables existif (isset($my_tables)) {?>    <h3><?php echo __('Untracked tables');?></h3>    <table id="noversions" class="data">    <thead>    <tr>        <th width="300"><?php echo __('Table');?></th>        <th></th>    </tr>    </thead>    <tbody><?php    // Print out list of untracked tables    $style = 'odd';    foreach ($my_tables as $key => $tablename) {        if (PMA_Tracker::getVersion($GLOBALS['db'], $tablename) == -1) {            $my_link = '<a href="tbl_tracking.php?' . $url_query . '&amp;table=' . htmlspecialchars($tablename) .'">';            $my_link .= PMA_getIcon('eye.png', __('Track table')) . '</a>';        ?>            <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($tablename);?></td>            <td><?php echo $my_link;?></td>            </tr>        <?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }    }    ?>    </tbody>    </table><?php}// If available print out database logif (count($data['ddlog']) > 0) {    $log = '';    foreach ($data['ddlog'] as $entry) {        $log .= '# ' . $entry['date'] . ' ' . $entry['username'] . "\n" . $entry['statement'] . "\n";    }    PMA_showMessage(__('Database Log'), $log);}/** * Display the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Output buffer functions for phpMyAdmin * * Copyright 2001 Jeremy Brand <jeremy@nirvani.net> * http://www.jeremybrand.com/Jeremy/Brand/Jeremy_Brand.html * * Check for all the needed functions for output buffering * Make some wrappers for the top and bottoms of our files. * * @package PhpMyAdmin *//** * This function be used eventually to support more modes.  It is needed * because both header and footer functions must know what each other is * doing. * * @staticvar integer remember last calculated value * @return  integer  the output buffer mode */function PMA_outBufferModeGet(){    static $mode = null;    if (null !== $mode) {        return $mode;    }    $mode = 0;    if ($GLOBALS['cfg']['OBGzip'] && function_exists('ob_start')) {        if (ini_get('output_handler') == 'ob_gzhandler') {            // If a user sets the output_handler in php.ini to ob_gzhandler, then            // any right frame file in phpMyAdmin will not be handled properly by            // the browser. My fix was to check the ini file within the            // PMA_outBufferModeGet() function.            $mode = 0;        } elseif (function_exists('ob_get_level') && ob_get_level() > 0) {            // If output buffering is enabled in php.ini it's not possible to            // add the ob_gzhandler without a warning message from php 4.3.0.            // Being better safe than sorry, check for any existing output handler            // instead of just checking the 'output_buffering' setting.            $mode = 0;        } else {            $mode = 1;        }    }    // Zero (0) is no mode or in other words output buffering is OFF.    // Follow 2^0, 2^1, 2^2, 2^3 type values for the modes.    // Usefull if we ever decide to combine modes.  Then a bitmask field of    // the sum of all modes will be the natural choice.    return $mode;} // end of the 'PMA_outBufferModeGet()' function/** * This function will need to run at the top of all pages if output * output buffering is turned on.  It also needs to be passed $mode from * the PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPre(){    if ($mode = PMA_outBufferModeGet()) {        ob_start('ob_gzhandler');    }    header('X-ob_mode: ' . $mode);    register_shutdown_function('PMA_outBufferPost');} // end of the 'PMA_outBufferPre()' function/** * This function will need to run at the bottom of all pages if output * buffering is turned on.  It also needs to be passed $mode from the * PMA_outBufferModeGet() function or it will be useless. * */function PMA_outBufferPost(){    if (ob_get_status() && PMA_outBufferModeGet()) {        ob_flush();    }    /**     * previously we had here an "else flush()" but some PHP versions     * (at least PHP 5.2.11) have a bug (49816) that produces garbled     * data     */} // end of the 'PMA_outBufferPost()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying server selection * * @package PhpMyAdmin *//** * display server selection in list or selectbox form, or option tags only * * @param boolean $not_only_options   whether to include form tags or not * @param boolean $ommit_fieldset     whether to ommit fieldset tag or not */function PMA_select_server($not_only_options, $ommit_fieldset){    // Show as list?    if ($not_only_options) {        $list = $GLOBALS['cfg']['DisplayServersList'];        $not_only_options =! $list;    } else {        $list = false;    }    if ($not_only_options) {        echo '<form method="post" action="index.php" target="_parent">';        echo PMA_generate_common_hidden_inputs();        if (! $ommit_fieldset) {            echo '<fieldset>';        }        echo '<label for="select_server">' . __('Current Server') . ':</label> ';        echo '<select name="server" id="select_server" class="autosubmit">';        echo '<option value="">(' . __('Servers') . ') ...</option>' . "\n";    } elseif ($list) {        echo __('Current Server') . ':<br />';        echo '<ul id="list_server">';    }    foreach ($GLOBALS['cfg']['Servers'] as $key => $server) {        if (empty($server['host'])) {            continue;        }        if (!empty($GLOBALS['server']) && (int) $GLOBALS['server'] === (int) $key) {            $selected = 1;        } else {            $selected = 0;        }        if (!empty($server['verbose'])) {            $label = $server['verbose'];        } else {            $label = $server['host'];            if (!empty($server['port'])) {                $label .= ':' . $server['port'];            }        }        if (! empty($server['only_db'])) {            if (! is_array($server['only_db'])) {                $label .= ' - ' . $server['only_db'];            // try to avoid displaying a too wide selector            } elseif (count($server['only_db']) < 4) {                $label .= ' - ' . implode(', ', $server['only_db']);            }        }        if (!empty($server['user']) && $server['auth_type'] == 'config') {            $label .= '  (' . $server['user'] . ')';        }        if ($list) {            echo '<li>';            if ($selected) {                echo '<strong>' . htmlspecialchars($label) . '</strong>';            } else {                echo '<a class="item" href="index.php'                    . PMA_generate_common_url(array('server' => $key))                    . '" target="_top">' . htmlspecialchars($label) . '</a>';            }            echo '</li>';        } else {            echo '<option value="' . $key . '" '                . ($selected ? ' selected="selected"' : '') . '>'                . htmlspecialchars($label) . '</option>' . "\n";        }    } // end while    if ($not_only_options) {        echo '</select>';        // Show submit button if we have just one server (this happens with no default)        echo '<noscript>';        echo '<input type="submit" value="' . __('Go') . '" />';        echo '</noscript>';        if (! $ommit_fieldset) {            echo '</fieldset>';        }        echo '</form>';    } elseif ($list) {        echo '</ul>';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Routines management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';require_once './libraries/mysql_charsets.lib.php';if (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/routines.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_routines.lib.php';/** * Do the magic */$_PMA_RTE = 'RTN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying language selection * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sorts available languages by their true english names * * @param array   the array to be sorted * @param mixed   a required parameter * @return  the sorted array * @access  private */function PMA_language_cmp(&$a, &$b){    return (strcmp($a[1], $b[1]));} // end of the 'PMA_language_cmp()' function/** * Displays for for language selection * * @access  public */function PMA_select_language($use_fieldset = false, $show_doc = true){    global $cfg, $lang;    ?><form method="post" action="index.php" target="_parent">    <?php    $_form_params = array(        'db' => $GLOBALS['db'],        'table' => $GLOBALS['table'],    );    echo PMA_generate_common_hidden_inputs($_form_params);    // For non-English, display "Language" with emphasis because it's    // not a proper word in the current language; we show it to help    // people recognize the dialog    $language_title = __('Language')        . (__('Language') != 'Language' ? ' - <em>Language</em>' : '');    if ($show_doc) {        $language_title .= PMA_showDocu('faq7_2');    }    if ($use_fieldset) {        echo '<fieldset><legend xml:lang="en" dir="ltr">' . $language_title . '</legend>';    } else {        echo '<bdo xml:lang="en" dir="ltr">' . $language_title . ':</bdo>';    }    ?>    <select name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    uasort($GLOBALS['available_languages'], 'PMA_language_cmp');    foreach ($GLOBALS['available_languages'] as $id => $tmplang) {        $lang_name = PMA_langName($tmplang);        //Is current one active?        if ($lang == $id) {            $selected = ' selected="selected"';        } else {            $selected = '';        }        echo '        ';        echo '<option value="' . $id . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select>    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    <noscript>    <?php    if ($use_fieldset) {        echo '<fieldset class="tblFooters">';    }    ?>        <input type="submit" value="Go" />    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    </noscript></form>    <?php} // End of function PMA_select_language?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package     BLOBStreaming *//** * Core library. */require_once './libraries/common.inc.php';// Check URL parametersPMA_checkParameters(array('reference', 'c_type'));// Increase time limit, because fetching blob might take some time@set_time_limit(0);$reference = $_REQUEST['reference'];/* * FIXME: Maybe it would be better to check MIME type against whitelist as * this code sems to support only few MIME types (check * function PMA_BS_CreateReferenceLink in libraries/blobstreaming.lib.php). */$c_type = preg_replace('/[^A-Za-z0-9/_-]/', '_', $_REQUEST['c_type']);// Get the blob streaming URL$filename = PMA_BS_getURL($reference);if (empty($filename)) {    die(__('No blob streaming server configured!'));}$hdrs = get_headers($filename, 1);if ($hdrs === false) {    die(__('Failed to fetch headers'));}$fHnd = fopen($filename, "rb");if ($fHnd === false) {    die(__('Failed to open remote URL'));}$f_size = $hdrs['Content-Length'];PMA_download_header(basename($filename), $c_type, $f_size);$pos = 0;$content = "";while (!feof($fHnd)) {    $content .= fread($fHnd, $f_size);    $pos = strlen($content);    if ($pos >= $f_size) {        break;    }}echo $content;flush();fclose($fHnd);
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form management class, displays and processes forms * * Explanation of used terms: * o work_path - original field path, eg. Servers/4/verbose * o system_path - work_path modified so that it points to the first server, *                 eg. Servers/1/verbose * o translated_path - work_path modified for HTML field name, a path with *                     slashes changed to hyphens, eg. Servers-4-verbose * * @package PhpMyAdmin *//** * Core libraries. */require_once './libraries/config/FormDisplay.tpl.php';require_once './libraries/config/validate.lib.php';require_once './libraries/js_escape.lib.php';/** * Form management class, displays and processes forms */class FormDisplay{    /**     * Form list     * @var Form[]     */    private $forms = array();    /**     * Stores validation errors, indexed by paths     * [ Form_name ] is an array of form errors     * [path] is a string storing error associated with single field     * @var array     */    private $errors = array();    /**     * Paths changed so that they can be used as HTML ids, indexed by paths     * @var array     */    private $translated_paths = array();    /**     * Server paths change indexes so we define maps from current server     * path to the first one, indexed by work path     * @var array     */    private $system_paths = array();    /**     * Language strings which will be sent to PMA_messages JS variable     * Will be looked up in $GLOBALS: str{value} or strSetup{value}     * @var array     */    private $js_lang_strings = array();    /**     * Tells whether forms have been validated     * @var bool     */    private $is_validated = true;    /**     * Dictionary with user preferences keys     * @var array     */    private $userprefs_keys;    /**     * Dictionary with disallowed user preferences keys     * @var array     */    private $userprefs_disallow;    public function __construct()    {        $this->js_lang_strings = array(            'error_nan_p' => __('Not a positive number'),            'error_nan_nneg' => __('Not a non-negative number'),            'error_incorrect_port' => __('Not a valid port number'),            'error_invalid_value' => __('Incorrect value'),            'error_value_lte' => __('Value must be equal or lower than %s'));        // initialize validators        PMA_config_get_validators();    }    /**     * Registers form in form manager     *     * @param string $form_name     * @param array  $form     * @param int    $server_id 0 if new server, validation; >= 1 if editing a server     */    public function registerForm($form_name, array $form, $server_id = null)    {        $this->forms[$form_name] = new Form($form_name, $form, $server_id);        $this->is_validated = false;        foreach ($this->forms[$form_name]->fields as $path) {            $work_path = $server_id === null                ? $path                : str_replace('Servers/1/', "Servers/$server_id/", $path);            $this->system_paths[$work_path] = $path;            $this->translated_paths[$work_path] = str_replace('/', '-', $work_path);        }    }    /**     * Processes forms, returns true on successful save     *     * @param  bool  $allow_partial_save  allows for partial form saving on failed validation     * @param  bool  $check_form_submit   whether check for $_POST['submit_save']     * @return boolean     */    public function process($allow_partial_save = true, $check_form_submit = true)    {        if ($check_form_submit && !isset($_POST['submit_save'])) {            return false;        }        // save forms        if (count($this->forms) > 0) {            return $this->save(array_keys($this->forms), $allow_partial_save);        }        return false;    }    /**     * Runs validation for all registered forms     *     */    private function _validate()    {        if ($this->is_validated) {            return;        }        $cf = ConfigFile::getInstance();        $paths = array();        $values = array();        foreach ($this->forms as $form) {            /* @var $form Form */            $paths[] = $form->name;            // collect values and paths            foreach ($form->fields as $path) {                $work_path = array_search($path, $this->system_paths);                $values[$path] = $cf->getValue($work_path);                $paths[] = $path;            }        }        // run validation        $errors = PMA_config_validate($paths, $values, false);        // change error keys from canonical paths to work paths        if (is_array($errors) && count($errors) > 0) {            $this->errors = array();            foreach ($errors as $path => $error_list) {                $work_path = array_search($path, $this->system_paths);                // field error                if (!$work_path) {                    // form error, fix path                    $work_path = $path;                }                $this->errors[$work_path] = $error_list;            }        }        $this->is_validated = true;    }    /**     * Outputs HTML for forms     *     * @param bool $tabbed_form     * @param bool   $show_restore_default  whether show "restore default" button besides the input field     */    public function display($tabbed_form = false, $show_restore_default = false)    {        static $js_lang_sent = false;        $js = array();        $js_default = array();        $tabbed_form = $tabbed_form && (count($this->forms) > 1);        $validators = PMA_config_get_validators();        display_form_top();        if ($tabbed_form) {            $tabs = array();            foreach ($this->forms as $form) {                $tabs[$form->name] = PMA_lang("Form_$form->name");            }            display_tabs_top($tabs);        }        // valdiate only when we aren't displaying a "new server" form        $is_new_server = false;        foreach ($this->forms as $form) {            /* @var $form Form */            if ($form->index === 0) {                $is_new_server = true;                break;            }        }        if (!$is_new_server) {            $this->_validate();        }        // user preferences        $this->_loadUserprefsInfo();        // display forms        foreach ($this->forms as $form) {            /* @var $form Form */            $form_desc = isset($GLOBALS["strConfigForm_{$form->name}_desc"])                ? PMA_lang("Form_{$form->name}_desc")                : '';            $form_errors = isset($this->errors[$form->name])                ? $this->errors[$form->name] : null;            display_fieldset_top(                PMA_lang("Form_$form->name"),                $form_desc,                $form_errors,                array('id' => $form->name)            );            foreach ($form->fields as $field => $path) {                $work_path = array_search($path, $this->system_paths);                $translated_path = $this->translated_paths[$work_path];                // always true/false for user preferences display                // otherwise null                $userprefs_allow = isset($this->userprefs_keys[$path])                    ? !isset($this->userprefs_disallow[$path])                    : null;                // display input                $this->_displayFieldInput(                    $form,                    $field,                    $path,                    $work_path,                    $translated_path,                    $show_restore_default,                    $userprefs_allow,                    $js_default                );                // register JS validators for this field                if (isset($validators[$path])) {                    js_validate($translated_path, $validators[$path], $js);                }            }            display_fieldset_bottom();        }        if ($tabbed_form) {            display_tabs_bottom();        }        display_form_bottom();        // if not already done, send strings used for valdiation to JavaScript        if (!$js_lang_sent) {            $js_lang_sent = true;            $js_lang = array();            foreach ($this->js_lang_strings as $strName => $strValue) {                $js_lang[] = "'$strName': '" . PMA_jsFormat($strValue, false) . '\'';            }            $js[] = "$.extend(PMA_messages, {\n\t" . implode(",\n\t", $js_lang) . '})';        }        $js[] = "$.extend(defaultValues, {\n\t" . implode(",\n\t", $js_default) . '})';        display_js($js);    }    /**     * Prepares data for input field display and outputs HTML code     *     * @param Form   $form     * @param string $field                 field name as it appears in $form     * @param string $system_path           field path, eg. Servers/1/verbose     * @param string $work_path             work path, eg. Servers/4/verbose     * @param string $translated_path       work path changed so that it can be used as XHTML id     * @param bool   $show_restore_default  whether show "restore default" button besides the input field     * @param mixed  $userprefs_allow       whether user preferences are enabled for this field     *                                      (null - no support, true/false - enabled/disabled)     * @param array  &$js_default           array which stores JavaScript code to be displayed     */    private function _displayFieldInput(Form $form, $field, $system_path, $work_path,            $translated_path, $show_restore_default, $userprefs_allow, array &$js_default)    {        $name = PMA_lang_name($system_path);        $description = PMA_lang_name($system_path, 'desc', '');        $cf = ConfigFile::getInstance();        $value = $cf->get($work_path);        $value_default = $cf->getDefault($system_path);        $value_is_default = false;        if ($value === null || $value === $value_default) {            $value = $value_default;            $value_is_default = true;        }        $opts = array(            'doc' => $this->getDocLink($system_path),            'wiki' =>  $this->getWikiLink($system_path),            'show_restore_default' => $show_restore_default,            'userprefs_allow' => $userprefs_allow,            'userprefs_comment' => PMA_lang_name($system_path, 'cmt', ''));        if (isset($form->default[$system_path])) {            $opts['setvalue'] = $form->default[$system_path];        }        if (isset($this->errors[$work_path])) {            $opts['errors'] = $this->errors[$work_path];        }        switch ($form->getOptionType($field)) {            case 'string':                $type = 'text';                break;            case 'short_string':                $type = 'short_text';                break;            case 'double':            case 'integer':                $type = 'number_text';                break;            case 'boolean':                $type = 'checkbox';                break;            case 'select':                $type = 'select';                $opts['values'] = $form->getOptionValueList($form->fields[$field]);                break;            case 'array':                $type = 'list';                $value = (array) $value;                $value_default = (array) $value_default;                break;            case 'group':                if (substr($field, 7, 4) != 'end:') { // :group:end is changed to :group:end:{unique id} in Form class                    display_group_header(substr($field, 7));                } else {                    display_group_footer();                }                return;            case 'NULL':                trigger_error("Field $system_path has no type", E_USER_WARNING);                return;        }        // TrustedProxies requires changes before displaying        if ($system_path == 'TrustedProxies') {            foreach ($value as $ip => &$v) {                if (!preg_match('/^-\d+$/', $ip)) {                    $v = $ip . ': ' . $v;                }            }        }        $this->_setComments($system_path, $opts);        // send default value to form's JS        $js_line = '\'' . $translated_path . '\': ';        switch ($type) {            case 'text':            case 'short_text':            case 'number_text':                $js_line .= '\'' . PMA_escapeJsString($value_default) . '\'';                break;            case 'checkbox':                $js_line .= $value_default ? 'true' : 'false';                break;            case 'select':                $value_default_js = is_bool($value_default)                    ? (int) $value_default                    : $value_default;                $js_line .= '[\'' . PMA_escapeJsString($value_default_js) . '\']';                break;            case 'list':                $js_line .= '\'' . PMA_escapeJsString(implode("\n", $value_default)) . '\'';                break;        }        $js_default[] = $js_line;        display_input($translated_path, $name, $description, $type,            $value, $value_is_default, $opts);    }    /**     * Displays errors     *     */    public function displayErrors()    {        $this->_validate();        if (count($this->errors) == 0) {            return;        }        foreach ($this->errors as $system_path => $error_list) {            if (isset($this->system_paths[$system_path])) {                $path = $this->system_paths[$system_path];                $name = PMA_lang_name($path);            } else {                $name = $GLOBALS["strConfigForm_$system_path"];            }            display_errors($name, $error_list);        }    }    /**     * Reverts erroneous fields to their default values     *     *     */    public function fixErrors()    {        $this->_validate();        if (count($this->errors) == 0) {            return;        }        $cf = ConfigFile::getInstance();        foreach (array_keys($this->errors) as $work_path) {            if (!isset($this->system_paths[$work_path])) {                continue;            }            $canonical_path = $this->system_paths[$work_path];            $cf->set($work_path, $cf->getDefault($canonical_path));        }    }    /**     * Validates select field and casts $value to correct type     *     * @param  string  $value     * @param  array   $allowed     * @return bool     */    private function _validateSelect(&$value, array $allowed)    {        $value_cmp = is_bool($value)            ? (int) $value            : $value;        foreach ($allowed as $vk => $v) {            // equality comparison only if both values are numeric or not numeric            // (allows to skip 0 == 'string' equalling to true) or identity (for string-string)            if (($vk == $value && !(is_numeric($value_cmp) xor is_numeric($vk)))                    || $vk === $value) {                // keep boolean value as boolean                if (!is_bool($value)) {                    settype($value, gettype($vk));                }                return true;            }        }        return false;    }    /**     * Validates and saves form data to session     *     * @param  array|string  $forms               array of form names     * @param  bool          $allow_partial_save  allows for partial form saving on failed validation     * @return boolean  true on success (no errors and all saved)     */    public function save($forms, $allow_partial_save = true)    {        $result = true;        $cf = ConfigFile::getInstance();        $forms = (array) $forms;        $values = array();        $to_save = array();        $is_setup_script = defined('PMA_SETUP');        if ($is_setup_script) {            $this->_loadUserprefsInfo();        }        $this->errors = array();        foreach ($forms as $form_name) {            /* @var $form Form */            if (isset($this->forms[$form_name])) {                $form = $this->forms[$form_name];            } else {                continue;            }            // get current server id            $change_index = $form->index === 0                ? $cf->getServerCount() + 1                : false;            // grab POST values            foreach ($form->fields as $field => $system_path) {                $work_path = array_search($system_path, $this->system_paths);                $key = $this->translated_paths[$work_path];                $type = $form->getOptionType($field);                // skip groups                if ($type == 'group') {                    continue;                }                // ensure the value is set                if (!isset($_POST[$key])) {                    // checkboxes aren't set by browsers if they're off                    if ($type == 'boolean') {                        $_POST[$key] = false;                    } else {                        $this->errors[$form->name][] = sprintf(                            __('Missing data for %s'),                            '<i>' . PMA_lang_name($system_path) . '</i>');                        $result = false;                        continue;                    }                }                // user preferences allow/disallow                if ($is_setup_script && isset($this->userprefs_keys[$system_path])) {                    if (isset($this->userprefs_disallow[$system_path])                            && isset($_POST[$key . '-userprefs-allow'])) {                        unset($this->userprefs_disallow[$system_path]);                    } else if (!isset($_POST[$key . '-userprefs-allow'])) {                        $this->userprefs_disallow[$system_path] = true;                    }                }                // cast variables to correct type                switch ($type) {                    case 'double':                        settype($_POST[$key], 'float');                        break;                    case 'boolean':                    case 'integer':                        if ($_POST[$key] !== '') {                            settype($_POST[$key], $type);                        }                        break;                    case 'select':                        // special treatment for NavigationBarIconic and PropertiesIconic                        if ($key === 'NavigationBarIconic' || $key === 'PropertiesIconic') {                            if ($_POST[$key] !== 'both') {                                settype($_POST[$key], 'boolean');                            }                        }                        if (!$this->_validateSelect($_POST[$key], $form->getOptionValueList($system_path))) {                            $this->errors[$work_path][] = __('Incorrect value');                            $result = false;                            continue;                        }                        break;                    case 'string':                    case 'short_string':                        $_POST[$key] = trim($_POST[$key]);                        break;                    case 'array':                        // eliminate empty values and ensure we have an array                        $post_values = is_array($_POST[$key])                            ? $_POST[$key]                            : explode("\n", $_POST[$key]);                        $_POST[$key] = array();                        foreach ($post_values as $v) {                            $v = trim($v);                            if ($v !== '') {                                $_POST[$key][] = $v;                            }                        }                        break;                }                // now we have value with proper type                $values[$system_path] = $_POST[$key];                if ($change_index !== false) {                    $work_path = str_replace("Servers/$form->index/",                      "Servers/$change_index/", $work_path);                }                $to_save[$work_path] = $system_path;            }        }        // save forms        if ($allow_partial_save || empty($this->errors)) {            foreach ($to_save as $work_path => $path) {                // TrustedProxies requires changes before saving                if ($path == 'TrustedProxies') {                    $proxies = array();                    $i = 0;                    foreach ($values[$path] as $value) {                        $matches = array();                        if (preg_match("/^(.+):(?:[ ]?)(\\w+)$/", $value, $matches)) {                            // correct 'IP: HTTP header' pair                            $ip = trim($matches[1]);                            $proxies[$ip] = trim($matches[2]);                        } else {                            // save also incorrect values                            $proxies["-$i"] = $value;                            $i++;                        }                    }                    $values[$path] = $proxies;                }                $cf->set($work_path, $values[$path], $path);            }            if ($is_setup_script) {                $cf->set('UserprefsDisallow', array_keys($this->userprefs_disallow));            }        }        // don't look for non-critical errors        $this->_validate();        return $result;    }    /**     * Tells whether form validation failed     *     * @return boolean     */    public function hasErrors()    {        return count($this->errors) > 0;    }    /**     * Returns link to documentation     *     * @param string $path     * @return string     */    public function getDocLink($path)    {        $test = substr($path, 0, 6);        if ($test == 'Import' || $test == 'Export') {            return '';        }        return 'Documentation.html#cfg_' . $this->_getOptName($path);    }    /**     * Returns link to wiki     *     * @param string $path     * @return string     */    public function getWikiLink($path)    {        $opt_name = $this->_getOptName($path);        if (substr($opt_name, 0, 7) == 'Servers') {            $opt_name = substr($opt_name, 8);            if (strpos($opt_name, 'AllowDeny') === 0) {                $opt_name = str_replace('_', '_.28', $opt_name) . '.29';            }        }        $test = substr($path, 0, 6);        if ($test == 'Import') {            $opt_name = substr($opt_name, 7);            if ($opt_name == 'format') {                $opt_name = 'format_2';            }        }        if ($test == 'Export') {            $opt_name = substr($opt_name, 7);        }        return PMA_linkURL('http://wiki.phpmyadmin.net/pma/Config#' . $opt_name);    }    /**     * Changes path so it can be used in URLs     *     * @param string $path     * @return string     */    private function _getOptName($path)    {        return str_replace(array('Servers/1/', '/'), array('Servers/', '_'), $path);    }    /**     * Fills out {@link userprefs_keys} and {@link userprefs_disallow}     *     */    private function _loadUserprefsInfo()    {        if ($this->userprefs_keys === null) {            $this->userprefs_keys = array_flip(PMA_read_userprefs_fieldnames());            // read real config for user preferences display            $userprefs_disallow = defined('PMA_SETUP')                ? ConfigFile::getInstance()->get('UserprefsDisallow', array())                : $GLOBALS['cfg']['UserprefsDisallow'];            $this->userprefs_disallow = array_flip($userprefs_disallow);        }    }    /**     * Sets field comments and warnings based on current environment     *     * @param string $system_path     * @param array  $opts     */    private function _setComments($system_path, array &$opts)    {        // RecodingEngine - mark unavailable types        if ($system_path == 'RecodingEngine') {            $comment = '';            if (!function_exists('iconv')) {                $opts['values']['iconv'] .= ' (' . __('unavailable') . ')';                $comment = sprintf(__('"%s" requires %s extension'), 'iconv', 'iconv');            }            if (!function_exists('recode_string')) {                $opts['values']['recode'] .= ' (' . __('unavailable') . ')';                $comment .= ($comment ? ", " : '') . sprintf(__('"%s" requires %s extension'),                    'recode', 'recode');            }            $opts['comment'] = $comment;            $opts['comment_warning'] = true;        }        // ZipDump, GZipDump, BZipDump - check function availability        if ($system_path == 'ZipDump' || $system_path == 'GZipDump' || $system_path == 'BZipDump') {            $comment = '';            $funcs = array(                'ZipDump'  => array('zip_open', 'gzcompress'),                'GZipDump' => array('gzopen', 'gzencode'),                'BZipDump' => array('bzopen', 'bzcompress'));            if (!function_exists($funcs[$system_path][0])) {                $comment = sprintf(__('import will not work, missing function (%s)'),                    $funcs[$system_path][0]);            }            if (!function_exists($funcs[$system_path][1])) {                $comment .= ($comment ? '; ' : '') . sprintf(__('export will not work, missing function (%s)'),                    $funcs[$system_path][1]);            }            $opts['comment'] = $comment;            $opts['comment_warning'] = true;        }        if ($system_path == 'SQLQuery/Validate' && !$GLOBALS['cfg']['SQLValidator']['use']) {            $opts['comment'] = __('SQL Validator is disabled');            $opts['comment_warning'] = true;        }        if ($system_path == 'SQLValidator/use') {            if (!class_exists('SOAPClient')) {                @include_once 'SOAP/Client.php';                if (!class_exists('SOAP_Client')) {                    $opts['comment'] = __('SOAP extension not found');                    $opts['comment_warning'] = true;                }            }        }        if (!defined('PMA_SETUP')) {            if (($system_path == 'MaxDbList' || $system_path == 'MaxTableList'                    || $system_path == 'QueryHistoryMax')) {                $opts['comment'] = sprintf(__('maximum %s'), $GLOBALS['cfg'][$system_path]);            }        }    }}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=720012;$enc='';$file='dejavusans.z';$ctg='dejavusans.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1021 -415 1681 1167]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>34,'StemH'=>15,'AvgWidth'=>507,'MaxWidth'=>1735,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>318,33=>401,34=>460,35=>838,36=>636,37=>950,38=>780,39=>275,40=>390,41=>390,42=>500,43=>838,44=>318,45=>361,46=>318,47=>337,48=>636,49=>636,50=>636,51=>636,52=>636,53=>636,54=>636,55=>636,56=>636,57=>636,58=>337,59=>337,60=>838,61=>838,62=>838,63=>531,64=>1000,65=>684,66=>686,67=>698,68=>770,69=>632,70=>575,71=>775,72=>752,73=>295,74=>295,75=>656,76=>557,77=>863,78=>748,79=>787,80=>603,81=>787,82=>695,83=>635,84=>611,85=>732,86=>684,87=>989,88=>685,89=>611,90=>685,91=>390,92=>337,93=>390,94=>838,95=>500,96=>500,97=>613,98=>635,99=>550,100=>635,101=>615,102=>352,103=>635,104=>634,105=>278,106=>278,107=>579,108=>278,109=>974,110=>634,111=>612,112=>635,113=>635,114=>411,115=>521,116=>392,117=>634,118=>592,119=>818,120=>592,121=>592,122=>525,123=>636,124=>337,125=>636,126=>838,127=>600,128=>684,129=>684,130=>698,131=>632,132=>748,133=>787,134=>732,135=>613,136=>613,137=>613,138=>613,139=>613,140=>613,141=>550,142=>615,143=>615,144=>615,145=>615,146=>278,147=>278,148=>278,149=>278,150=>634,151=>612,152=>612,153=>612,154=>612,155=>612,156=>634,157=>634,158=>634,159=>634,160=>318,161=>401,162=>636,163=>636,164=>636,165=>636,166=>337,167=>500,168=>500,169=>1000,170=>471,171=>612,172=>838,173=>361,174=>1000,175=>500,176=>500,177=>838,178=>401,179=>401,180=>500,181=>636,182=>636,183=>318,184=>500,185=>401,186=>471,187=>612,188=>969,189=>969,190=>969,191=>531,192=>684,193=>684,194=>684,195=>684,196=>684,197=>684,198=>974,199=>698,200=>632,201=>632,202=>632,203=>632,204=>295,205=>295,206=>295,207=>295,208=>775,209=>748,210=>787,211=>787,212=>787,213=>787,214=>787,215=>838,216=>787,217=>732,218=>732,219=>732,220=>732,221=>611,222=>605,223=>630,224=>613,225=>613,226=>613,227=>613,228=>613,229=>613,230=>982,231=>550,232=>615,233=>615,234=>615,235=>615,236=>278,237=>278,238=>278,239=>278,240=>612,241=>634,242=>612,243=>612,244=>612,245=>612,246=>612,247=>838,248=>612,249=>634,250=>634,251=>634,252=>634,253=>592,254=>635,255=>592,256=>684,257=>613,258=>684,259=>613,260=>684,261=>613,262=>698,263=>550,264=>698,265=>550,266=>698,267=>550,268=>698,269=>550,270=>770,271=>635,272=>775,273=>635,274=>632,275=>615,276=>632,277=>615,278=>632,279=>615,280=>632,281=>615,282=>632,283=>615,284=>775,285=>635,286=>775,287=>635,288=>775,289=>635,290=>775,291=>635,292=>752,293=>634,294=>916,295=>695,296=>295,297=>278,298=>295,299=>278,300=>295,301=>278,302=>295,303=>278,304=>295,305=>278,306=>590,307=>556,308=>295,309=>278,310=>656,311=>579,312=>579,313=>557,314=>278,315=>557,316=>278,317=>557,318=>375,319=>557,320=>342,321=>562,322=>284,323=>748,324=>634,325=>748,326=>634,327=>748,328=>634,329=>813,330=>748,331=>634,332=>787,333=>612,334=>787,335=>612,336=>787,337=>612,338=>1070,339=>1023,340=>695,341=>411,342=>695,343=>411,344=>695,345=>411,346=>635,347=>521,348=>635,349=>521,350=>635,351=>521,352=>635,353=>521,354=>611,355=>392,356=>611,357=>392,358=>611,359=>392,360=>732,361=>634,362=>732,363=>634,364=>732,365=>634,366=>732,367=>634,368=>732,369=>634,370=>732,371=>634,372=>989,373=>818,374=>611,375=>592,376=>611,377=>685,378=>525,379=>685,380=>525,381=>685,382=>525,383=>352,384=>635,385=>735,386=>686,387=>635,388=>686,389=>635,390=>703,391=>698,392=>550,393=>775,394=>819,395=>686,396=>635,397=>612,398=>632,399=>787,400=>614,401=>575,402=>352,403=>775,404=>687,405=>984,406=>354,407=>295,408=>746,409=>579,410=>278,411=>592,412=>974,413=>748,414=>634,415=>787,416=>913,417=>612,418=>949,419=>759,420=>652,421=>635,422=>695,423=>635,424=>521,425=>632,426=>336,427=>392,428=>611,429=>392,430=>611,431=>858,432=>634,433=>764,434=>721,435=>744,436=>730,437=>685,438=>525,439=>666,440=>666,441=>578,442=>525,443=>636,444=>666,445=>578,446=>510,447=>635,448=>295,449=>492,450=>459,451=>295,452=>1422,453=>1299,454=>1154,455=>835,456=>787,457=>457,458=>931,459=>924,460=>797,461=>684,462=>613,463=>295,464=>278,465=>787,466=>612,467=>732,468=>634,469=>732,470=>634,471=>732,472=>634,473=>732,474=>634,475=>732,476=>634,477=>615,478=>684,479=>613,480=>684,481=>613,482=>974,483=>982,484=>775,485=>635,486=>775,487=>635,488=>656,489=>579,490=>787,491=>612,492=>787,493=>612,494=>666,495=>578,496=>278,497=>1422,498=>1299,499=>1154,500=>775,501=>635,502=>1113,503=>682,504=>748,505=>634,506=>684,507=>613,508=>974,509=>982,510=>787,511=>612,512=>684,513=>613,514=>684,515=>613,516=>632,517=>615,518=>632,519=>615,520=>295,521=>278,522=>295,523=>278,524=>787,525=>612,526=>787,527=>612,528=>695,529=>411,530=>695,531=>411,532=>732,533=>634,534=>732,535=>634,536=>635,537=>521,538=>611,539=>392,540=>627,541=>521,542=>752,543=>634,544=>735,545=>838,546=>698,547=>610,548=>685,549=>525,550=>684,551=>613,552=>632,553=>615,554=>787,555=>612,556=>787,557=>612,558=>787,559=>612,560=>787,561=>612,562=>611,563=>592,564=>475,565=>843,566=>477,567=>278,568=>998,569=>998,570=>684,571=>698,572=>550,573=>557,574=>611,575=>521,576=>525,577=>603,578=>479,579=>686,580=>732,581=>684,582=>632,583=>615,584=>295,585=>278,586=>781,587=>635,588=>695,589=>411,590=>611,591=>592,592=>600,593=>635,594=>635,595=>635,596=>549,597=>550,598=>635,599=>696,600=>615,601=>615,602=>819,603=>541,604=>532,605=>775,606=>664,607=>278,608=>696,609=>635,610=>629,611=>596,612=>596,613=>634,614=>634,615=>634,616=>278,617=>338,618=>372,619=>396,620=>487,621=>278,622=>706,623=>974,624=>974,625=>974,626=>646,627=>642,628=>634,629=>612,630=>858,631=>728,632=>660,633=>414,634=>414,635=>414,636=>411,637=>411,638=>530,639=>530,640=>604,641=>604,642=>521,643=>336,644=>336,645=>461,646=>336,647=>392,648=>392,649=>634,650=>618,651=>598,652=>592,653=>818,654=>592,655=>611,656=>525,657=>525,658=>578,659=>578,660=>510,661=>510,662=>510,663=>510,664=>787,665=>580,666=>664,667=>708,668=>654,669=>292,670=>667,671=>507,672=>727,673=>510,674=>510,675=>1014,676=>1058,677=>1013,678=>824,679=>610,680=>778,681=>848,682=>641,683=>654,684=>515,685=>515,686=>661,687=>664,688=>404,689=>399,690=>175,691=>259,692=>295,693=>296,694=>379,695=>515,696=>373,697=>278,698=>460,699=>318,700=>318,701=>318,702=>307,703=>307,704=>370,705=>370,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>275,713=>500,714=>500,715=>500,716=>275,717=>500,718=>500,719=>500,720=>337,721=>337,722=>307,723=>307,724=>500,725=>500,726=>390,727=>317,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>315,735=>500,736=>426,737=>166,738=>373,739=>444,740=>370,741=>493,742=>493,743=>493,744=>493,745=>493,748=>500,749=>500,750=>518,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>654,881=>568,882=>862,883=>647,884=>278,885=>278,886=>748,887=>650,890=>500,891=>549,892=>550,893=>549,894=>337,900=>500,901=>500,902=>692,903=>318,904=>746,905=>871,906=>408,908=>813,910=>825,911=>826,912=>338,913=>684,914=>686,915=>557,916=>684,917=>632,918=>685,919=>752,920=>787,921=>295,922=>656,923=>684,924=>863,925=>748,926=>632,927=>787,928=>752,929=>603,931=>632,932=>611,933=>611,934=>787,935=>685,936=>787,937=>764,938=>295,939=>611,940=>659,941=>541,942=>634,943=>338,944=>579,945=>659,946=>638,947=>592,948=>612,949=>541,950=>544,951=>634,952=>612,953=>338,954=>589,955=>592,956=>636,957=>559,958=>558,959=>612,960=>602,961=>635,962=>587,963=>634,964=>602,965=>579,966=>660,967=>578,968=>660,969=>837,970=>338,971=>579,972=>612,973=>579,974=>837,975=>656,976=>614,977=>619,978=>699,979=>842,980=>699,981=>660,982=>837,983=>664,984=>787,985=>612,986=>648,987=>587,988=>575,989=>458,990=>660,991=>660,992=>865,993=>627,994=>934,995=>837,996=>758,997=>659,998=>792,999=>615,1000=>687,1001=>607,1002=>768,1003=>625,1004=>699,1005=>612,1006=>611,1007=>536,1008=>664,1009=>635,1010=>550,1011=>278,1012=>787,1013=>615,1014=>615,1015=>605,1016=>635,1017=>698,1018=>863,1019=>651,1020=>635,1021=>703,1022=>698,1023=>703,1024=>632,1025=>632,1026=>786,1027=>610,1028=>698,1029=>635,1030=>295,1031=>295,1032=>295,1033=>1094,1034=>1045,1035=>786,1036=>710,1037=>748,1038=>609,1039=>752,1040=>684,1041=>686,1042=>686,1043=>610,1044=>781,1045=>632,1046=>1077,1047=>641,1048=>748,1049=>748,1050=>710,1051=>752,1052=>863,1053=>752,1054=>787,1055=>752,1056=>603,1057=>698,1058=>611,1059=>609,1060=>861,1061=>685,1062=>776,1063=>686,1064=>1069,1065=>1094,1066=>833,1067=>882,1068=>686,1069=>698,1070=>1080,1071=>695,1072=>613,1073=>617,1074=>589,1075=>525,1076=>691,1077=>615,1078=>901,1079=>532,1080=>650,1081=>650,1082=>604,1083=>639,1084=>754,1085=>654,1086=>612,1087=>654,1088=>635,1089=>550,1090=>583,1091=>592,1092=>855,1093=>592,1094=>681,1095=>591,1096=>915,1097=>942,1098=>707,1099=>790,1100=>589,1101=>549,1102=>842,1103=>602,1104=>615,1105=>615,1106=>625,1107=>525,1108=>549,1109=>521,1110=>278,1111=>278,1112=>278,1113=>902,1114=>898,1115=>652,1116=>604,1117=>650,1118=>592,1119=>654,1120=>934,1121=>837,1122=>771,1123=>672,1124=>942,1125=>749,1126=>879,1127=>783,1128=>1160,1129=>1001,1130=>787,1131=>612,1132=>1027,1133=>824,1134=>636,1135=>541,1136=>856,1137=>876,1138=>787,1139=>612,1140=>781,1141=>665,1142=>781,1143=>665,1144=>992,1145=>904,1146=>953,1147=>758,1148=>1180,1149=>1028,1150=>934,1151=>837,1152=>698,1153=>550,1154=>502,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>772,1163=>677,1164=>686,1165=>589,1166=>603,1167=>635,1168=>610,1169=>525,1170=>675,1171=>590,1172=>624,1173=>530,1174=>1077,1175=>901,1176=>641,1177=>532,1178=>710,1179=>604,1180=>710,1181=>604,1182=>710,1183=>604,1184=>856,1185=>832,1186=>752,1187=>661,1188=>1014,1189=>877,1190=>1081,1191=>916,1192=>878,1193=>693,1194=>698,1195=>550,1196=>611,1197=>583,1198=>611,1199=>592,1200=>611,1201=>592,1202=>685,1203=>592,1204=>934,1205=>807,1206=>686,1207=>591,1208=>686,1209=>591,1210=>686,1211=>634,1212=>941,1213=>728,1214=>941,1215=>728,1216=>295,1217=>1077,1218=>901,1219=>656,1220=>604,1221=>776,1222=>670,1223=>752,1224=>661,1225=>776,1226=>681,1227=>686,1228=>591,1229=>888,1230=>774,1231=>278,1232=>684,1233=>613,1234=>684,1235=>613,1236=>974,1237=>982,1238=>632,1239=>615,1240=>787,1241=>615,1242=>787,1243=>615,1244=>1077,1245=>901,1246=>641,1247=>532,1248=>666,1249=>578,1250=>748,1251=>650,1252=>748,1253=>650,1254=>787,1255=>612,1256=>787,1257=>612,1258=>787,1259=>612,1260=>698,1261=>549,1262=>609,1263=>592,1264=>609,1265=>592,1266=>609,1267=>592,1268=>686,1269=>591,1270=>610,1271=>525,1272=>882,1273=>790,1274=>675,1275=>590,1276=>685,1277=>592,1278=>685,1279=>592,1280=>686,1281=>589,1282=>1006,1283=>897,1284=>975,1285=>869,1286=>679,1287=>588,1288=>1072,1289=>957,1290=>1113,1291=>967,1292=>775,1293=>660,1294=>773,1295=>711,1296=>614,1297=>541,1298=>752,1299=>639,1300=>1169,1301=>994,1302=>894,1303=>864,1304=>1032,1305=>986,1306=>787,1307=>635,1308=>989,1309=>818,1310=>710,1311=>604,1312=>1081,1313=>905,1314=>1081,1315=>912,1316=>793,1317=>683,1329=>766,1330=>732,1331=>753,1332=>753,1333=>732,1334=>772,1335=>640,1336=>732,1337=>859,1338=>753,1339=>691,1340=>533,1341=>922,1342=>863,1343=>732,1344=>716,1345=>766,1346=>753,1347=>767,1348=>792,1349=>728,1350=>729,1351=>757,1352=>732,1353=>713,1354=>800,1355=>768,1356=>792,1357=>732,1358=>753,1359=>705,1360=>694,1361=>744,1362=>538,1363=>811,1364=>757,1365=>787,1366=>790,1369=>307,1370=>318,1371=>234,1372=>361,1373=>238,1374=>405,1375=>500,1377=>974,1378=>634,1379=>658,1380=>663,1381=>634,1382=>635,1383=>515,1384=>634,1385=>738,1386=>658,1387=>634,1388=>271,1389=>980,1390=>623,1391=>634,1392=>634,1393=>608,1394=>634,1395=>629,1396=>634,1397=>271,1398=>634,1399=>499,1400=>634,1401=>404,1402=>974,1403=>560,1404=>648,1405=>634,1406=>634,1407=>974,1408=>634,1409=>633,1410=>435,1411=>974,1412=>636,1413=>609,1414=>805,1415=>812,1417=>337,1418=>361,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>361,1471=>0,1472=>295,1473=>0,1474=>0,1475=>295,1478=>441,1479=>0,1488=>668,1489=>578,1490=>412,1491=>546,1492=>653,1493=>272,1494=>346,1495=>653,1496=>648,1497=>224,1498=>537,1499=>529,1500=>568,1501=>664,1502=>679,1503=>272,1504=>400,1505=>649,1506=>626,1507=>640,1508=>625,1509=>540,1510=>593,1511=>709,1512=>564,1513=>708,1514=>657,1520=>471,1521=>423,1522=>331,1523=>416,1524=>645,1542=>637,1543=>637,1545=>757,1546=>977,1548=>323,1557=>0,1563=>318,1567=>531,1569=>470,1570=>278,1571=>278,1572=>483,1573=>278,1574=>783,1575=>278,1576=>941,1577=>524,1578=>941,1579=>941,1580=>646,1581=>646,1582=>646,1583=>445,1584=>445,1585=>483,1586=>483,1587=>1221,1588=>1221,1589=>1209,1590=>1209,1591=>925,1592=>925,1593=>597,1594=>597,1600=>293,1601=>1037,1602=>776,1603=>824,1604=>727,1605=>619,1606=>734,1607=>524,1608=>483,1609=>783,1610=>783,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>537,1633=>537,1634=>537,1635=>537,1636=>537,1637=>537,1638=>537,1639=>537,1640=>537,1641=>537,1642=>537,1643=>325,1644=>318,1645=>545,1646=>941,1647=>776,1648=>0,1652=>292,1657=>941,1658=>941,1659=>941,1660=>941,1661=>941,1662=>941,1663=>941,1664=>941,1665=>646,1666=>646,1667=>646,1668=>646,1669=>646,1670=>646,1671=>646,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>483,1682=>483,1683=>498,1684=>530,1685=>610,1686=>530,1687=>483,1688=>483,1689=>483,1690=>1221,1691=>1221,1692=>1221,1693=>1209,1694=>1209,1695=>925,1696=>597,1697=>1037,1698=>1037,1699=>1037,1700=>1037,1701=>1037,1702=>1037,1703=>776,1704=>776,1705=>895,1706=>1054,1707=>895,1708=>824,1709=>824,1710=>824,1711=>895,1712=>895,1713=>895,1714=>895,1715=>895,1716=>895,1717=>727,1718=>727,1719=>727,1720=>727,1721=>734,1722=>734,1723=>734,1724=>734,1725=>734,1726=>698,1727=>646,1734=>483,1740=>783,1742=>783,1749=>524,1776=>537,1777=>537,1778=>537,1779=>537,1780=>537,1781=>537,1782=>537,1783=>537,1784=>537,1785=>537,1984=>636,1985=>636,1986=>636,1987=>636,1988=>636,1989=>636,1990=>636,1991=>636,1992=>636,1993=>636,1994=>278,1995=>571,1996=>424,1997=>592,1998=>654,1999=>654,2000=>594,2001=>654,2002=>829,2003=>438,2004=>438,2005=>559,2006=>612,2007=>350,2008=>959,2009=>473,2010=>783,2011=>654,2012=>625,2013=>734,2014=>530,2015=>724,2016=>473,2017=>625,2018=>594,2019=>530,2020=>530,2021=>522,2022=>594,2023=>594,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>313,2037=>313,2040=>560,2041=>560,2042=>361,3647=>636,3713=>670,3714=>684,3716=>688,3719=>482,3720=>628,3722=>684,3725=>688,3732=>669,3733=>642,3734=>645,3735=>655,3737=>659,3738=>625,3739=>625,3740=>745,3741=>767,3742=>687,3743=>687,3745=>702,3746=>688,3747=>684,3749=>649,3751=>632,3754=>703,3755=>819,3757=>633,3758=>684,3759=>788,3760=>632,3761=>0,3762=>539,3763=>539,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>663,3776=>375,3777=>657,3778=>460,3779=>547,3780=>491,3782=>674,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>636,3793=>641,3794=>641,3795=>670,3796=>625,3797=>625,3798=>703,3799=>670,3800=>674,3801=>677,3804=>1028,3805=>1028,4256=>840,4257=>690,4258=>642,4259=>759,4260=>591,4261=>686,4262=>789,4263=>811,4264=>467,4265=>565,4266=>789,4267=>793,4268=>584,4269=>837,4270=>750,4271=>688,4272=>811,4273=>584,4274=>584,4275=>837,4276=>837,4277=>646,4278=>604,4279=>584,4280=>596,4281=>584,4282=>721,4283=>795,4284=>584,4285=>566,4286=>584,4287=>669,4288=>799,4289=>542,4290=>664,4291=>542,4292=>565,4293=>674,4304=>508,4305=>508,4306=>533,4307=>785,4308=>522,4309=>517,4310=>508,4311=>797,4312=>507,4313=>518,4314=>1058,4315=>522,4316=>523,4317=>783,4318=>518,4319=>523,4320=>792,4321=>523,4322=>656,4323=>524,4324=>788,4325=>523,4326=>782,4327=>523,4328=>522,4329=>522,4330=>566,4331=>523,4332=>523,4333=>489,4334=>522,4335=>498,4336=>517,4337=>560,4338=>508,4339=>508,4340=>508,4341=>563,4342=>824,4343=>595,4344=>522,4345=>554,4346=>553,4347=>586,4348=>304,5121=>684,5122=>684,5123=>684,5124=>684,5125=>769,5126=>769,5127=>769,5129=>769,5130=>769,5131=>769,5132=>835,5133=>834,5134=>835,5135=>834,5136=>835,5137=>834,5138=>967,5139=>1007,5140=>967,5141=>1007,5142=>769,5143=>967,5144=>1007,5145=>967,5146=>1007,5147=>769,5149=>256,5150=>543,5151=>423,5152=>423,5153=>389,5154=>389,5155=>393,5156=>389,5157=>466,5158=>385,5159=>256,5160=>389,5161=>389,5162=>389,5163=>1090,5164=>909,5165=>953,5166=>1117,5167=>684,5168=>684,5169=>684,5170=>684,5171=>729,5172=>729,5173=>729,5175=>729,5176=>729,5177=>729,5178=>835,5179=>684,5180=>835,5181=>834,5182=>835,5183=>834,5184=>967,5185=>1007,5186=>967,5187=>1007,5188=>967,5189=>1007,5190=>967,5191=>1007,5192=>729,5193=>508,5194=>192,5196=>732,5197=>732,5198=>732,5199=>732,5200=>730,5201=>730,5202=>730,5204=>730,5205=>730,5206=>730,5207=>921,5208=>889,5209=>921,5210=>889,5211=>921,5212=>889,5213=>928,5214=>900,5215=>928,5216=>900,5217=>947,5218=>900,5219=>947,5220=>900,5221=>947,5222=>434,5223=>877,5224=>877,5225=>866,5226=>890,5227=>628,5228=>628,5229=>628,5230=>628,5231=>628,5232=>628,5233=>628,5234=>628,5235=>628,5236=>860,5237=>771,5238=>815,5239=>816,5240=>815,5241=>816,5242=>860,5243=>771,5244=>860,5245=>771,5246=>815,5247=>816,5248=>815,5249=>816,5250=>815,5251=>407,5252=>407,5253=>750,5254=>775,5255=>750,5256=>775,5257=>628,5258=>628,5259=>628,5260=>628,5261=>628,5262=>628,5263=>628,5264=>628,5265=>628,5266=>860,5267=>771,5268=>815,5269=>816,5270=>815,5271=>816,5272=>860,5273=>771,5274=>860,5275=>771,5276=>815,5277=>816,5278=>815,5279=>816,5280=>815,5281=>435,5282=>435,5283=>610,5284=>557,5285=>557,5286=>557,5287=>610,5288=>610,5289=>610,5290=>557,5291=>557,5292=>749,5293=>769,5294=>746,5295=>764,5296=>746,5297=>764,5298=>749,5299=>769,5300=>749,5301=>769,5302=>746,5303=>764,5304=>746,5305=>764,5306=>746,5307=>386,5308=>508,5309=>386,5312=>852,5313=>852,5314=>852,5315=>852,5316=>852,5317=>852,5318=>852,5319=>852,5320=>852,5321=>1069,5322=>1035,5323=>1059,5324=>852,5325=>1059,5326=>852,5327=>852,5328=>600,5329=>453,5330=>600,5331=>852,5332=>852,5333=>852,5334=>852,5335=>852,5336=>852,5337=>852,5338=>852,5339=>852,5340=>1069,5341=>1035,5342=>1059,5343=>1030,5344=>1059,5345=>1030,5346=>1069,5347=>1035,5348=>1069,5349=>1035,5350=>1083,5351=>1030,5352=>1083,5353=>1030,5354=>600,5356=>729,5357=>603,5358=>603,5359=>603,5360=>603,5361=>603,5362=>603,5363=>603,5364=>603,5365=>603,5366=>834,5367=>754,5368=>792,5369=>771,5370=>792,5371=>771,5372=>834,5373=>754,5374=>834,5375=>754,5376=>792,5377=>771,5378=>792,5379=>771,5380=>792,5381=>418,5382=>420,5383=>418,5392=>712,5393=>712,5394=>712,5395=>892,5396=>892,5397=>892,5398=>892,5399=>910,5400=>872,5401=>910,5402=>872,5403=>910,5404=>872,5405=>1140,5406=>1100,5407=>1140,5408=>1100,5409=>1140,5410=>1100,5411=>1140,5412=>1100,5413=>641,5414=>627,5415=>627,5416=>627,5417=>627,5418=>627,5419=>627,5420=>627,5421=>627,5422=>627,5423=>844,5424=>781,5425=>816,5426=>818,5427=>816,5428=>818,5429=>844,5430=>781,5431=>844,5432=>781,5433=>816,5434=>818,5435=>816,5436=>818,5437=>816,5438=>418,5440=>389,5441=>484,5442=>916,5443=>916,5444=>916,5445=>916,5446=>916,5447=>916,5448=>603,5449=>603,5450=>603,5451=>603,5452=>603,5453=>603,5454=>834,5455=>754,5456=>418,5458=>729,5459=>684,5460=>684,5461=>684,5462=>684,5463=>726,5464=>726,5465=>726,5466=>726,5467=>924,5468=>1007,5469=>508,5470=>732,5471=>732,5472=>732,5473=>732,5474=>732,5475=>732,5476=>730,5477=>730,5478=>730,5479=>730,5480=>947,5481=>900,5482=>508,5492=>831,5493=>831,5494=>831,5495=>831,5496=>831,5497=>831,5498=>831,5499=>563,5500=>752,5501=>484,5502=>1047,5503=>1047,5504=>1047,5505=>1047,5506=>1047,5507=>1047,5508=>1047,5509=>825,5514=>831,5515=>831,5516=>831,5517=>831,5518=>1259,5519=>1259,5520=>1259,5521=>1002,5522=>1002,5523=>1259,5524=>1259,5525=>700,5526=>1073,5536=>852,5537=>852,5538=>852,5539=>852,5540=>852,5541=>852,5542=>600,5543=>643,5544=>643,5545=>643,5546=>643,5547=>643,5548=>643,5549=>643,5550=>418,5551=>628,5598=>770,5601=>767,5702=>468,5703=>468,5742=>444,5743=>1047,5744=>1310,5745=>1632,5746=>1632,5747=>1375,5748=>1375,5749=>1632,5750=>1632,5760=>477,5761=>493,5762=>712,5763=>931,5764=>1150,5765=>1370,5766=>493,5767=>712,5768=>931,5769=>1150,5770=>1370,5771=>498,5772=>718,5773=>938,5774=>1159,5775=>1379,5776=>493,5777=>712,5778=>930,5779=>1149,5780=>1370,5781=>498,5782=>752,5783=>789,5784=>1205,5785=>1150,5786=>683,5787=>507,5788=>507,7424=>592,7425=>717,7426=>982,7427=>586,7428=>550,7429=>605,7430=>605,7431=>491,7432=>541,7433=>278,7434=>395,7435=>579,7436=>583,7437=>754,7438=>650,7439=>612,7440=>550,7441=>684,7442=>684,7443=>684,7444=>1023,7446=>612,7447=>612,7448=>524,7449=>602,7450=>602,7451=>583,7452=>574,7453=>737,7454=>948,7455=>638,7456=>592,7457=>818,7458=>525,7459=>526,7462=>583,7463=>592,7464=>564,7465=>524,7466=>590,7467=>639,7468=>431,7469=>613,7470=>432,7472=>485,7473=>398,7474=>398,7475=>488,7476=>474,7477=>186,7478=>186,7479=>413,7480=>351,7481=>543,7482=>471,7483=>471,7484=>496,7485=>439,7486=>380,7487=>438,7488=>385,7489=>461,7490=>623,7491=>392,7492=>392,7493=>405,7494=>648,7495=>428,7496=>405,7497=>417,7498=>417,7499=>360,7500=>359,7501=>405,7502=>179,7503=>426,7504=>623,7505=>409,7506=>414,7507=>370,7508=>414,7509=>414,7510=>428,7511=>295,7512=>405,7513=>470,7514=>623,7515=>417,7517=>402,7518=>373,7519=>385,7520=>416,7521=>364,7522=>179,7523=>259,7524=>405,7525=>417,7526=>402,7527=>373,7528=>412,7529=>416,7530=>364,7543=>635,7544=>474,7547=>372,7549=>667,7557=>278,7579=>405,7580=>370,7581=>370,7582=>414,7583=>360,7584=>296,7585=>233,7586=>405,7587=>405,7588=>261,7589=>250,7590=>261,7591=>261,7592=>234,7593=>250,7594=>235,7595=>376,7596=>623,7597=>623,7598=>411,7599=>479,7600=>409,7601=>414,7602=>414,7603=>360,7604=>287,7605=>295,7606=>508,7607=>418,7608=>361,7609=>406,7610=>417,7611=>366,7612=>437,7613=>366,7614=>392,7615=>414,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>684,7681=>613,7682=>686,7683=>635,7684=>686,7685=>635,7686=>686,7687=>635,7688=>698,7689=>550,7690=>770,7691=>635,7692=>770,7693=>635,7694=>770,7695=>635,7696=>770,7697=>635,7698=>770,7699=>635,7700=>632,7701=>615,7702=>632,7703=>615,7704=>632,7705=>615,7706=>632,7707=>615,7708=>632,7709=>615,7710=>575,7711=>352,7712=>775,7713=>635,7714=>752,7715=>634,7716=>752,7717=>634,7718=>752,7719=>634,7720=>752,7721=>634,7722=>752,7723=>634,7724=>295,7725=>278,7726=>295,7727=>278,7728=>656,7729=>579,7730=>656,7731=>579,7732=>656,7733=>579,7734=>557,7735=>288,7736=>557,7737=>288,7738=>557,7739=>278,7740=>557,7741=>278,7742=>863,7743=>974,7744=>863,7745=>974,7746=>863,7747=>974,7748=>748,7749=>634,7750=>748,7751=>634,7752=>748,7753=>634,7754=>748,7755=>634,7756=>787,7757=>612,7758=>787,7759=>612,7760=>787,7761=>612,7762=>787,7763=>612,7764=>603,7765=>635,7766=>603,7767=>635,7768=>695,7769=>411,7770=>695,7771=>411,7772=>695,7773=>411,7774=>695,7775=>411,7776=>635,7777=>521,7778=>635,7779=>521,7780=>635,7781=>521,7782=>635,7783=>521,7784=>635,7785=>521,7786=>611,7787=>392,7788=>611,7789=>392,7790=>611,7791=>392,7792=>611,7793=>392,7794=>732,7795=>634,7796=>732,7797=>634,7798=>732,7799=>634,7800=>732,7801=>634,7802=>732,7803=>634,7804=>684,7805=>592,7806=>684,7807=>592,7808=>989,7809=>818,7810=>989,7811=>818,7812=>989,7813=>818,7814=>989,7815=>818,7816=>989,7817=>818,7818=>685,7819=>592,7820=>685,7821=>592,7822=>611,7823=>592,7824=>685,7825=>525,7826=>685,7827=>525,7828=>685,7829=>525,7830=>634,7831=>392,7832=>818,7833=>592,7834=>613,7835=>352,7836=>352,7837=>352,7838=>769,7839=>612,7840=>684,7841=>613,7842=>684,7843=>613,7844=>684,7845=>613,7846=>684,7847=>613,7848=>684,7849=>613,7850=>684,7851=>613,7852=>684,7853=>613,7854=>684,7855=>613,7856=>684,7857=>613,7858=>684,7859=>613,7860=>684,7861=>613,7862=>684,7863=>613,7864=>632,7865=>615,7866=>632,7867=>615,7868=>632,7869=>615,7870=>632,7871=>615,7872=>632,7873=>615,7874=>632,7875=>615,7876=>632,7877=>615,7878=>632,7879=>615,7880=>295,7881=>278,7882=>295,7883=>278,7884=>787,7885=>612,7886=>787,7887=>612,7888=>787,7889=>612,7890=>787,7891=>612,7892=>787,7893=>612,7894=>787,7895=>612,7896=>787,7897=>612,7898=>913,7899=>612,7900=>913,7901=>612,7902=>913,7903=>612,7904=>913,7905=>612,7906=>913,7907=>612,7908=>732,7909=>634,7910=>732,7911=>634,7912=>858,7913=>634,7914=>858,7915=>634,7916=>858,7917=>634,7918=>858,7919=>634,7920=>858,7921=>634,7922=>611,7923=>592,7924=>611,7925=>592,7926=>611,7927=>592,7928=>611,7929=>592,7930=>769,7931=>477,7936=>659,7937=>659,7938=>659,7939=>659,7940=>659,7941=>659,7942=>659,7943=>659,7944=>684,7945=>684,7946=>877,7947=>877,7948=>769,7949=>801,7950=>708,7951=>743,7952=>541,7953=>541,7954=>541,7955=>541,7956=>541,7957=>541,7960=>711,7961=>711,7962=>966,7963=>975,7964=>898,7965=>928,7968=>634,7969=>634,7970=>634,7971=>634,7972=>634,7973=>634,7974=>634,7975=>634,7976=>837,7977=>835,7978=>1086,7979=>1089,7980=>1027,7981=>1051,7982=>934,7983=>947,7984=>338,7985=>338,7986=>338,7987=>338,7988=>338,7989=>338,7990=>338,7991=>338,7992=>380,7993=>374,7994=>635,7995=>635,7996=>570,7997=>600,7998=>489,7999=>493,8000=>612,8001=>612,8002=>612,8003=>612,8004=>612,8005=>612,8008=>804,8009=>848,8010=>1095,8011=>1100,8012=>938,8013=>970,8016=>579,8017=>579,8018=>579,8019=>579,8020=>579,8021=>579,8022=>579,8023=>579,8025=>784,8027=>998,8029=>1012,8031=>897,8032=>837,8033=>837,8034=>837,8035=>837,8036=>837,8037=>837,8038=>837,8039=>837,8040=>802,8041=>843,8042=>1089,8043=>1095,8044=>946,8045=>972,8046=>921,8047=>952,8048=>659,8049=>659,8050=>541,8051=>548,8052=>634,8053=>654,8054=>338,8055=>338,8056=>612,8057=>612,8058=>579,8059=>579,8060=>837,8061=>837,8064=>659,8065=>659,8066=>659,8067=>659,8068=>659,8069=>659,8070=>659,8071=>659,8072=>684,8073=>684,8074=>877,8075=>877,8076=>769,8077=>801,8078=>708,8079=>743,8080=>634,8081=>634,8082=>634,8083=>634,8084=>634,8085=>634,8086=>634,8087=>634,8088=>837,8089=>835,8090=>1086,8091=>1089,8092=>1027,8093=>1051,8094=>934,8095=>947,8096=>837,8097=>837,8098=>837,8099=>837,8100=>837,8101=>837,8102=>837,8103=>837,8104=>802,8105=>843,8106=>1089,8107=>1095,8108=>946,8109=>972,8110=>921,8111=>952,8112=>659,8113=>659,8114=>659,8115=>659,8116=>659,8118=>659,8119=>659,8120=>684,8121=>684,8122=>716,8123=>692,8124=>684,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>634,8131=>634,8132=>654,8134=>634,8135=>634,8136=>805,8137=>746,8138=>931,8139=>871,8140=>752,8141=>500,8142=>500,8143=>500,8144=>338,8145=>338,8146=>338,8147=>338,8150=>338,8151=>338,8152=>295,8153=>295,8154=>475,8155=>408,8157=>500,8158=>500,8159=>500,8160=>579,8161=>579,8162=>579,8163=>579,8164=>635,8165=>635,8166=>579,8167=>579,8168=>611,8169=>611,8170=>845,8171=>825,8172=>685,8173=>500,8174=>500,8175=>500,8178=>837,8179=>837,8180=>837,8182=>837,8183=>837,8184=>941,8185=>813,8186=>922,8187=>826,8188=>764,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>636,8200=>318,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>361,8209=>361,8210=>636,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>318,8217=>318,8218=>318,8219=>318,8220=>518,8221=>518,8222=>518,8223=>518,8224=>500,8225=>500,8226=>590,8227=>590,8228=>334,8229=>667,8230=>1000,8231=>318,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1342,8241=>1735,8242=>227,8243=>374,8244=>520,8245=>227,8246=>374,8247=>520,8248=>339,8249=>400,8250=>400,8251=>838,8252=>485,8253=>531,8254=>500,8255=>804,8256=>804,8257=>250,8258=>1000,8259=>500,8260=>167,8261=>390,8262=>390,8263=>922,8264=>733,8265=>733,8266=>497,8267=>636,8268=>500,8269=>500,8270=>500,8271=>337,8272=>804,8273=>500,8274=>450,8275=>1000,8276=>804,8277=>838,8278=>586,8279=>663,8280=>838,8281=>838,8282=>318,8283=>797,8284=>838,8285=>318,8286=>318,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>401,8305=>179,8308=>401,8309=>401,8310=>401,8311=>401,8312=>401,8313=>401,8314=>528,8315=>528,8316=>528,8317=>246,8318=>246,8319=>398,8320=>401,8321=>401,8322=>401,8323=>401,8324=>401,8325=>401,8326=>401,8327=>401,8328=>401,8329=>401,8330=>528,8331=>528,8332=>528,8333=>246,8334=>246,8336=>392,8337=>417,8338=>414,8339=>444,8340=>417,8341=>404,8342=>426,8343=>166,8344=>623,8345=>398,8346=>428,8347=>373,8348=>295,8352=>877,8353=>636,8354=>636,8355=>636,8356=>636,8357=>974,8358=>748,8359=>1272,8360=>1074,8361=>989,8362=>784,8363=>636,8364=>636,8365=>636,8366=>636,8367=>1272,8368=>636,8369=>636,8370=>636,8371=>636,8372=>774,8373=>636,8376=>636,8377=>636,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1019,8449=>1019,8450=>698,8451=>1123,8452=>642,8453=>1019,8454=>1067,8455=>614,8456=>698,8457=>952,8459=>988,8460=>754,8461=>850,8462=>634,8463=>634,8464=>470,8465=>697,8466=>720,8467=>413,8468=>818,8469=>801,8470=>1040,8471=>1000,8472=>697,8473=>701,8474=>787,8475=>798,8476=>814,8477=>792,8478=>896,8479=>684,8480=>1020,8481=>1074,8482=>1000,8483=>684,8484=>745,8485=>578,8486=>764,8487=>764,8488=>616,8489=>338,8490=>656,8491=>684,8492=>786,8493=>703,8494=>854,8495=>592,8496=>605,8497=>786,8498=>575,8499=>1069,8500=>462,8501=>745,8502=>674,8503=>466,8504=>645,8505=>380,8506=>926,8507=>1194,8508=>702,8509=>728,8510=>654,8511=>849,8512=>811,8513=>775,8514=>557,8515=>557,8516=>611,8517=>819,8518=>708,8519=>615,8520=>351,8521=>351,8523=>780,8526=>526,8528=>969,8529=>969,8530=>1370,8531=>969,8532=>969,8533=>969,8534=>969,8535=>969,8536=>969,8537=>969,8538=>969,8539=>969,8540=>969,8541=>969,8542=>969,8543=>568,8544=>295,8545=>492,8546=>689,8547=>923,8548=>684,8549=>922,8550=>1120,8551=>1317,8552=>917,8553=>685,8554=>933,8555=>1131,8556=>557,8557=>698,8558=>770,8559=>863,8560=>278,8561=>458,8562=>637,8563=>812,8564=>592,8565=>811,8566=>991,8567=>1170,8568=>819,8569=>592,8570=>822,8571=>1002,8572=>278,8573=>550,8574=>635,8575=>974,8576=>1245,8577=>770,8578=>1245,8579=>703,8580=>549,8581=>698,8585=>969,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>684,8705=>636,8706=>517,8707=>632,8708=>632,8709=>871,8710=>669,8711=>669,8712=>871,8713=>871,8714=>718,8715=>871,8716=>871,8717=>718,8718=>636,8719=>757,8720=>757,8721=>674,8722=>838,8723=>838,8724=>838,8725=>337,8726=>637,8727=>838,8728=>626,8729=>626,8730=>637,8731=>637,8732=>637,8733=>714,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>732,8744=>732,8745=>732,8746=>732,8747=>521,8748=>789,8749=>1057,8750=>521,8751=>789,8752=>1057,8753=>521,8754=>521,8755=>521,8756=>636,8757=>636,8758=>260,8759=>636,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>839,8787=>839,8788=>1000,8789=>1000,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>838,8809=>838,8810=>1047,8811=>1047,8812=>464,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>732,8845=>732,8846=>732,8847=>838,8848=>838,8849=>838,8850=>838,8851=>780,8852=>780,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>871,8867=>871,8868=>871,8869=>871,8870=>521,8871=>521,8872=>871,8873=>871,8874=>871,8875=>871,8876=>871,8877=>871,8878=>871,8879=>871,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>521,8891=>732,8892=>732,8893=>732,8894=>838,8895=>838,8896=>820,8897=>820,8898=>820,8899=>820,8900=>494,8901=>318,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>732,8911=>732,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1000,8947=>871,8948=>718,8949=>871,8950=>871,8951=>718,8952=>871,8953=>871,8954=>1000,8955=>871,8956=>718,8957=>871,8958=>718,8959=>871,8960=>602,8961=>602,8962=>635,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>390,8969=>390,8970=>390,8971=>390,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>513,8984=>1000,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>521,8993=>521,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>338,9076=>635,9077=>837,9082=>659,9085=>757,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>521,9166=>838,9167=>945,9187=>873,9189=>769,9192=>636,9250=>635,9251=>635,9312=>896,9313=>896,9314=>896,9315=>896,9316=>896,9317=>896,9318=>896,9319=>896,9320=>896,9321=>896,9472=>602,9473=>602,9474=>602,9475=>602,9476=>602,9477=>602,9478=>602,9479=>602,9480=>602,9481=>602,9482=>602,9483=>602,9484=>602,9485=>602,9486=>602,9487=>602,9488=>602,9489=>602,9490=>602,9491=>602,9492=>602,9493=>602,9494=>602,9495=>602,9496=>602,9497=>602,9498=>602,9499=>602,9500=>602,9501=>602,9502=>602,9503=>602,9504=>602,9505=>602,9506=>602,9507=>602,9508=>602,9509=>602,9510=>602,9511=>602,9512=>602,9513=>602,9514=>602,9515=>602,9516=>602,9517=>602,9518=>602,9519=>602,9520=>602,9521=>602,9522=>602,9523=>602,9524=>602,9525=>602,9526=>602,9527=>602,9528=>602,9529=>602,9530=>602,9531=>602,9532=>602,9533=>602,9534=>602,9535=>602,9536=>602,9537=>602,9538=>602,9539=>602,9540=>602,9541=>602,9542=>602,9543=>602,9544=>602,9545=>602,9546=>602,9547=>602,9548=>602,9549=>602,9550=>602,9551=>602,9552=>602,9553=>602,9554=>602,9555=>602,9556=>602,9557=>602,9558=>602,9559=>602,9560=>602,9561=>602,9562=>602,9563=>602,9564=>602,9565=>602,9566=>602,9567=>602,9568=>602,9569=>602,9570=>602,9571=>602,9572=>602,9573=>602,9574=>602,9575=>602,9576=>602,9577=>602,9578=>602,9579=>602,9580=>602,9581=>602,9582=>602,9583=>602,9584=>602,9585=>602,9586=>602,9587=>602,9588=>602,9589=>602,9590=>602,9591=>602,9592=>602,9593=>602,9594=>602,9595=>602,9596=>602,9597=>602,9598=>602,9599=>602,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>791,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>873,9697=>873,9698=>769,9699=>769,9700=>769,9701=>769,9702=>590,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>322,10076=>322,10077=>538,10078=>538,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>896,10103=>896,10104=>896,10105=>896,10106=>896,10107=>896,10108=>896,10109=>896,10110=>896,10111=>896,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>390,10182=>390,10208=>494,10214=>495,10215=>495,10216=>390,10217=>390,10218=>556,10219=>556,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>732,10241=>732,10242=>732,10243=>732,10244=>732,10245=>732,10246=>732,10247=>732,10248=>732,10249=>732,10250=>732,10251=>732,10252=>732,10253=>732,10254=>732,10255=>732,10256=>732,10257=>732,10258=>732,10259=>732,10260=>732,10261=>732,10262=>732,10263=>732,10264=>732,10265=>732,10266=>732,10267=>732,10268=>732,10269=>732,10270=>732,10271=>732,10272=>732,10273=>732,10274=>732,10275=>732,10276=>732,10277=>732,10278=>732,10279=>732,10280=>732,10281=>732,10282=>732,10283=>732,10284=>732,10285=>732,10286=>732,10287=>732,10288=>732,10289=>732,10290=>732,10291=>732,10292=>732,10293=>732,10294=>732,10295=>732,10296=>732,10297=>732,10298=>732,10299=>732,10300=>732,10301=>732,10302=>732,10303=>732,10304=>732,10305=>732,10306=>732,10307=>732,10308=>732,10309=>732,10310=>732,10311=>732,10312=>732,10313=>732,10314=>732,10315=>732,10316=>732,10317=>732,10318=>732,10319=>732,10320=>732,10321=>732,10322=>732,10323=>732,10324=>732,10325=>732,10326=>732,10327=>732,10328=>732,10329=>732,10330=>732,10331=>732,10332=>732,10333=>732,10334=>732,10335=>732,10336=>732,10337=>732,10338=>732,10339=>732,10340=>732,10341=>732,10342=>732,10343=>732,10344=>732,10345=>732,10346=>732,10347=>732,10348=>732,10349=>732,10350=>732,10351=>732,10352=>732,10353=>732,10354=>732,10355=>732,10356=>732,10357=>732,10358=>732,10359=>732,10360=>732,10361=>732,10362=>732,10363=>732,10364=>732,10365=>732,10366=>732,10367=>732,10368=>732,10369=>732,10370=>732,10371=>732,10372=>732,10373=>732,10374=>732,10375=>732,10376=>732,10377=>732,10378=>732,10379=>732,10380=>732,10381=>732,10382=>732,10383=>732,10384=>732,10385=>732,10386=>732,10387=>732,10388=>732,10389=>732,10390=>732,10391=>732,10392=>732,10393=>732,10394=>732,10395=>732,10396=>732,10397=>732,10398=>732,10399=>732,10400=>732,10401=>732,10402=>732,10403=>732,10404=>732,10405=>732,10406=>732,10407=>732,10408=>732,10409=>732,10410=>732,10411=>732,10412=>732,10413=>732,10414=>732,10415=>732,10416=>732,10417=>732,10418=>732,10419=>732,10420=>732,10421=>732,10422=>732,10423=>732,10424=>732,10425=>732,10426=>732,10427=>732,10428=>732,10429=>732,10430=>732,10431=>732,10432=>732,10433=>732,10434=>732,10435=>732,10436=>732,10437=>732,10438=>732,10439=>732,10440=>732,10441=>732,10442=>732,10443=>732,10444=>732,10445=>732,10446=>732,10447=>732,10448=>732,10449=>732,10450=>732,10451=>732,10452=>732,10453=>732,10454=>732,10455=>732,10456=>732,10457=>732,10458=>732,10459=>732,10460=>732,10461=>732,10462=>732,10463=>732,10464=>732,10465=>732,10466=>732,10467=>732,10468=>732,10469=>732,10470=>732,10471=>732,10472=>732,10473=>732,10474=>732,10475=>732,10476=>732,10477=>732,10478=>732,10479=>732,10480=>732,10481=>732,10482=>732,10483=>732,10484=>732,10485=>732,10486=>732,10487=>732,10488=>732,10489=>732,10490=>732,10491=>732,10492=>732,10493=>732,10494=>732,10495=>732,10502=>838,10503=>838,10506=>838,10507=>838,10560=>683,10561=>683,10627=>734,10628=>734,10702=>838,10703=>1000,10704=>1000,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1325,10765=>521,10766=>521,10767=>521,10768=>521,10769=>521,10770=>521,10771=>521,10772=>521,10773=>521,10774=>521,10775=>521,10776=>521,10777=>521,10778=>521,10779=>521,10780=>521,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>836,11023=>836,11024=>836,11025=>836,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>557,11361=>278,11362=>557,11363=>603,11364=>695,11365=>613,11366=>392,11367=>752,11368=>634,11369=>656,11370=>579,11371=>685,11372=>525,11373=>781,11374=>863,11375=>684,11376=>781,11377=>734,11378=>1128,11379=>961,11380=>592,11381=>654,11382=>568,11383=>660,11385=>414,11386=>612,11387=>491,11388=>175,11389=>431,11390=>635,11391=>685,11568=>646,11569=>888,11570=>888,11571=>682,11572=>684,11573=>635,11574=>562,11575=>684,11576=>684,11577=>632,11578=>632,11579=>683,11580=>875,11581=>685,11582=>491,11583=>685,11584=>888,11585=>888,11586=>300,11587=>627,11588=>752,11589=>656,11590=>527,11591=>685,11592=>645,11593=>632,11594=>502,11595=>953,11596=>778,11597=>748,11598=>621,11599=>295,11600=>778,11601=>295,11602=>752,11603=>633,11604=>888,11605=>888,11606=>752,11607=>320,11608=>749,11609=>888,11610=>888,11611=>698,11612=>768,11613=>685,11614=>698,11615=>622,11616=>684,11617=>752,11618=>632,11619=>788,11620=>567,11621=>788,11631=>515,11800=>531,11810=>390,11811=>390,11812=>390,11813=>390,11822=>531,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>635,42565=>521,42566=>354,42567=>338,42572=>1180,42573=>1028,42576=>1029,42577=>906,42580=>1080,42581=>842,42582=>977,42583=>843,42594=>1062,42595=>912,42596=>1066,42597=>901,42598=>1178,42599=>1008,42600=>787,42601=>612,42602=>855,42603=>712,42604=>1358,42605=>1019,42606=>879,42634=>782,42635=>685,42636=>611,42637=>583,42644=>686,42645=>634,42760=>493,42761=>493,42762=>493,42763=>493,42764=>493,42765=>493,42766=>493,42767=>493,42768=>493,42769=>493,42770=>493,42771=>493,42772=>493,42773=>493,42774=>493,42779=>369,42780=>369,42781=>252,42782=>252,42783=>252,42786=>385,42787=>356,42788=>472,42789=>472,42790=>752,42791=>634,42792=>878,42793=>709,42794=>614,42795=>541,42800=>491,42801=>521,42802=>1250,42803=>985,42804=>1203,42805=>990,42806=>1142,42807=>981,42808=>971,42809=>818,42810=>971,42811=>818,42812=>959,42813=>818,42814=>703,42815=>549,42822=>680,42823=>392,42824=>582,42825=>427,42826=>807,42827=>704,42830=>1358,42831=>1019,42832=>603,42833=>635,42834=>734,42835=>774,42838=>787,42839=>635,42852=>605,42853=>635,42854=>605,42855=>635,42880=>557,42881=>278,42882=>735,42883=>634,42889=>337,42890=>376,42891=>401,42892=>275,42893=>686,42894=>487,42896=>772,42897=>667,43002=>915,43003=>575,43004=>603,43005=>863,43006=>295,43007=>1199,61184=>213,61185=>238,61186=>257,61187=>264,61188=>267,61189=>238,61190=>213,61191=>238,61192=>257,61193=>264,61194=>257,61195=>238,61196=>213,61197=>238,61198=>257,61199=>264,61200=>257,61201=>238,61202=>213,61203=>238,61204=>267,61205=>264,61206=>257,61207=>238,61208=>213,61209=>275,61440=>977,61441=>977,61442=>977,61443=>977,63173=>612,64256=>689,64257=>630,64258=>630,64259=>967,64260=>967,64261=>686,64262=>861,64275=>1202,64276=>1202,64277=>1196,64278=>1186,64279=>1529,64285=>224,64286=>0,64287=>331,64288=>636,64289=>856,64290=>774,64291=>906,64292=>771,64293=>843,64294=>855,64295=>807,64296=>875,64297=>838,64298=>708,64299=>708,64300=>708,64301=>708,64302=>668,64303=>668,64304=>668,64305=>578,64306=>412,64307=>546,64308=>653,64309=>355,64310=>406,64312=>648,64313=>330,64314=>537,64315=>529,64316=>568,64318=>679,64320=>399,64321=>649,64323=>640,64324=>625,64326=>593,64327=>709,64328=>564,64329=>708,64330=>657,64331=>272,64332=>578,64333=>529,64334=>625,64335=>629,64338=>941,64339=>982,64340=>278,64341=>302,64342=>941,64343=>982,64344=>278,64345=>302,64346=>941,64347=>982,64348=>278,64349=>302,64350=>941,64351=>982,64352=>278,64353=>302,64354=>941,64355=>982,64356=>278,64357=>302,64358=>941,64359=>982,64360=>278,64361=>302,64362=>1037,64363=>1035,64364=>478,64365=>506,64366=>1037,64367=>1035,64368=>478,64369=>506,64370=>646,64371=>646,64372=>618,64373=>646,64374=>646,64375=>646,64376=>618,64377=>646,64378=>646,64379=>646,64380=>618,64381=>646,64382=>646,64383=>646,64384=>618,64385=>646,64386=>445,64387=>525,64388=>445,64389=>525,64390=>445,64391=>525,64392=>445,64393=>525,64394=>483,64395=>552,64396=>483,64397=>552,64398=>895,64399=>895,64400=>476,64401=>552,64402=>895,64403=>895,64404=>476,64405=>552,64406=>895,64407=>895,64408=>476,64409=>552,64410=>895,64411=>895,64412=>476,64413=>552,64414=>734,64415=>761,64416=>734,64417=>761,64418=>278,64419=>302,64426=>698,64427=>632,64428=>527,64429=>461,64467=>824,64468=>843,64469=>476,64470=>552,64473=>483,64474=>517,64488=>278,64489=>302,64508=>783,64509=>833,64510=>278,64511=>302,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>293,65137=>293,65138=>293,65139=>262,65140=>293,65142=>293,65143=>293,65144=>293,65145=>293,65146=>293,65147=>293,65148=>293,65149=>293,65150=>293,65151=>293,65152=>470,65153=>278,65154=>305,65155=>278,65156=>305,65157=>483,65158=>517,65159=>278,65160=>305,65161=>783,65162=>833,65163=>278,65164=>302,65165=>278,65166=>305,65167=>941,65168=>982,65169=>278,65170=>302,65171=>524,65172=>536,65173=>941,65174=>982,65175=>278,65176=>302,65177=>941,65178=>982,65179=>278,65180=>302,65181=>646,65182=>646,65183=>618,65184=>646,65185=>646,65186=>646,65187=>618,65188=>646,65189=>646,65190=>646,65191=>618,65192=>646,65193=>445,65194=>525,65195=>445,65196=>525,65197=>483,65198=>552,65199=>483,65200=>552,65201=>1221,65202=>1275,65203=>838,65204=>892,65205=>1221,65206=>1275,65207=>838,65208=>892,65209=>1209,65210=>1225,65211=>849,65212=>867,65213=>1209,65214=>1225,65215=>849,65216=>867,65217=>925,65218=>949,65219=>796,65220=>820,65221=>925,65222=>949,65223=>796,65224=>820,65225=>597,65226=>532,65227=>597,65228=>482,65229=>597,65230=>532,65231=>523,65232=>482,65233=>1037,65234=>1035,65235=>478,65236=>506,65237=>776,65238=>834,65239=>478,65240=>506,65241=>824,65242=>843,65243=>476,65244=>552,65245=>727,65246=>757,65247=>305,65248=>331,65249=>619,65250=>666,65251=>536,65252=>578,65253=>734,65254=>761,65255=>278,65256=>302,65257=>524,65258=>536,65259=>527,65260=>461,65261=>483,65262=>517,65263=>783,65264=>833,65265=>783,65266=>833,65267=>278,65268=>302,65269=>570,65270=>597,65271=>570,65272=>597,65273=>570,65274=>597,65275=>570,65276=>597,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1025,65535=>600);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpinfo() wrapper to allow displaying only when configured to do so. * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';/** * Displays PHP information */if ($GLOBALS['cfg']['ShowPhpInfo']) {    phpinfo();}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run config authentication (ie no authentication). * * @package PhpMyAdmin-Auth-Config *//** * Displays authentication form * * @return  boolean   always true * * @access  public */function PMA_auth(){    return true;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @return  boolean   always true * * @access  public */function PMA_auth_check(){    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @global  string    the MySQL error message PHP returns * @global  string    the connection type (persistent or not) * @global  string    the MySQL server port to use * @global  string    the MySQL socket port to use * @global  array     the current server settings * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * @global  boolean   tell the "PMA_mysqlDie()" function headers have been *                    sent * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $conn_error = PMA_DBI_getError();    if (!$conn_error) {        $conn_error = __('Cannot connect: invalid settings.');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin '); ?></h1></center><br /><table border="0" cellpadding="0" cellspacing="3" align="center" width="80%">    <tr>        <td>    <?php    $GLOBALS['is_header_sent'] = true;    if (isset($GLOBALS['allowDeny_forbidden']) && $GLOBALS['allowDeny_forbidden']) {        trigger_error(__('Access denied'), E_USER_NOTICE);    } else {        // Check whether user has configured something        if ($GLOBALS['PMA_Config']->source_mtime == 0) {            echo '<p>' . sprintf(__('You probably did not create a configuration file. You might want to use the %1$ssetup script%2$s to create one.'), '<a href="setup/">', '</a>') . '</p>' . "\n";        } elseif (!isset($GLOBALS['errno']) || (isset($GLOBALS['errno']) && $GLOBALS['errno'] != 2002) && $GLOBALS['errno'] != 2003) {        // if we display the "Server not responding" error, do not confuse users        // by telling them they have a settings problem        // (note: it's true that they could have a badly typed host name, but        //  anyway the current message tells that the server        //  rejected the connection, which is not really what happened)        // 2002 is the error given by mysqli        // 2003 is the error given by mysql            trigger_error(__('phpMyAdmin tried to connect to the MySQL server, and the server rejected the connection. You should check the host, username and password in your configuration and make sure that they correspond to the information given by the administrator of the MySQL server.'), E_USER_WARNING);        }        PMA_mysqlDie($conn_error, '', true, '', false);    }    $GLOBALS['error_handler']->dispUserErrors();?>        </td>    </tr><?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        // offer a chance to login to other servers if the current one failed        include_once './libraries/select_server.lib.php';        echo '<tr>' . "\n";        echo ' <td>' . "\n";        PMA_select_server(true, true);        echo ' </td>' . "\n";        echo '</tr>' . "\n";    }    echo '</table>' . "\n";    include './libraries/footer.inc.php';    return true;} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once "Export_Relation_Schema.class.php";/** * This Class inherits the XMLwriter class and * helps in developing structure of DIA Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_DIA extends XMLWriter{    public $title;    public $author;    public $font;    public $fontSize;    /**     * The "PMA_DIA" constructor     *     * Upon instantiation This starts writing the Dia XML document     *     * @return void     * @see XMLWriter::openMemory(),XMLWriter::setIndent(),XMLWriter::startDocument()     */    function __construct()    {        $this->openMemory();        /*         * Set indenting using three spaces,         * so output is formatted         */        $this->setIndent(true);        $this->setIndentString('   ');        /*         * Create the XML document         */        $this->startDocument('1.0', 'UTF-8');    }    /**     * Starts Dia Document     *     * dia document starts by first initializing dia:diagram tag     * then dia:diagramdata contains all the attributes that needed     * to define the document, then finally a Layer starts which     * holds all the objects.     *     * @param string $paper        the size of the paper/document     * @param float  $topMargin    top margin of the paper/document in cm     * @param float  $bottomMargin bottom margin of the paper/document in cm     * @param float  $leftMargin   left margin of the paper/document in cm     * @param float  $rightMargin  right margin of the paper/document in cm     * @param string $portrait     document will be portrait or landscape     *     * @return void     *     * @access public     * @see XMLWriter::startElement(),XMLWriter::writeAttribute(),XMLWriter::writeRaw()     */    function startDiaDoc($paper,$topMargin,$bottomMargin,$leftMargin,$rightMargin,$portrait)    {        if ($portrait == 'P') {            $isPortrait='true';        } else {            $isPortrait='false';        }        $this->startElement('dia:diagram');        $this->writeAttribute('xmlns:dia', 'http://www.lysator.liu.se/~alla/dia/');        $this->startElement('dia:diagramdata');        $this->writeRaw(        '<dia:attribute name="background">          <dia:color val="#ffffff"/>        </dia:attribute>        <dia:attribute name="pagebreak">          <dia:color val="#000099"/>        </dia:attribute>        <dia:attribute name="paper">          <dia:composite type="paper">            <dia:attribute name="name">              <dia:string>#' . $paper . '#</dia:string>            </dia:attribute>            <dia:attribute name="tmargin">              <dia:real val="' . $topMargin . '"/>            </dia:attribute>            <dia:attribute name="bmargin">              <dia:real val="' . $bottomMargin . '"/>            </dia:attribute>            <dia:attribute name="lmargin">              <dia:real val="' . $leftMargin . '"/>            </dia:attribute>            <dia:attribute name="rmargin">              <dia:real val="' . $rightMargin . '"/>            </dia:attribute>            <dia:attribute name="is_portrait">              <dia:boolean val="' . $isPortrait . '"/>            </dia:attribute>            <dia:attribute name="scaling">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="fitto">              <dia:boolean val="false"/>            </dia:attribute>          </dia:composite>        </dia:attribute>        <dia:attribute name="grid">          <dia:composite type="grid">            <dia:attribute name="width_x">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="width_y">              <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="visible_x">              <dia:int val="1"/>            </dia:attribute>            <dia:attribute name="visible_y">              <dia:int val="1"/>            </dia:attribute>            <dia:composite type="color"/>          </dia:composite>        </dia:attribute>        <dia:attribute name="color">          <dia:color val="#d8e5e5"/>        </dia:attribute>        <dia:attribute name="guides">          <dia:composite type="guides">            <dia:attribute name="hguides"/>            <dia:attribute name="vguides"/>          </dia:composite>        </dia:attribute>');         $this->endElement();         $this->startElement('dia:layer');         $this->writeAttribute('name', 'Background');         $this->writeAttribute('visible', 'true');         $this->writeAttribute('active', 'true');    }    /**     * Ends Dia Document     *     * @return void     * @access public     * @see XMLWriter::endElement(),XMLWriter::endDocument()     */    function endDiaDoc()    {        $this->endElement();        $this->endDocument();    }    /**     * Output Dia Document for download     *     * @param string $fileName name of the dia document     *     * @return void     * @access public     * @see XMLWriter::flush()     */    function showOutput($fileName)    {        if (ob_get_clean()) {            ob_end_clean();        }        $output = $this->flush();        PMA_download_header(            $fileName . '.dia', 'application/x-dia-diagram', strlen($output)        );        print $output;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in dia XML document. * * @name Table_Stats * @see PMA_DIA */class Table_Stats{    /**     * Defines properties     */    public $tableName;    public $fields = array();    public $x, $y;    public $primary = array();    public $tableId;    public $tableColor;    /**     * The "Table_Stats" constructor     *     * @param string  $tableName  The table name     * @param integer $pageNumber The current page number (from the     *                            $cfg['Servers'][$i]['table_coords'] table)     * @param boolean $showKeys   Whether to display ONLY keys or not     *     * @return void     *     * @global object    The current dia document     * @global array     The relations settings     * @global string    The current db name     *     * @see PMA_DIA     */    function __construct($tableName, $pageNumber, $showKeys = false)    {        global $dia, $cfgRelation, $db;        $this->tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (!$result || !PMA_DBI_num_rows($result)) {            $dia->dieSchema(                $pageNumber, "DIA",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*         * load fields         * check to see if it will load all fields or only the foreign keys         */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $sql = 'SELECT x, y FROM '             . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'             . PMA_backquote($cfgRelation['table_coords'])             . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''             . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''             . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $dia->dieSchema(                $pageNumber,                "DIA",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        /*         * displayfield         */        $this->displayfield = PMA_getDisplayField($db, $tableName);        /*         * index         */        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null,            PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }        /**         * Every object in Dia document needs an ID to identify         * so, we used a static variable to keep the things unique         */        PMA_Dia_Relation_Schema::$objectId += 1;        $this->tableId = PMA_Dia_Relation_Schema::$objectId;    }    /**     * Do draw the table     *     * Tables are generated using object type Database - Table     * primary fields are underlined in tables. Dia object     * is used to generate the XML of Dia Document. Database Table     * Object and their attributes are involved in the combination     * of displaing Database - Table on Dia Document.     *     * @param boolean $changeColor Whether to show color for tables text or not     * if changeColor is true then an array of $listOfColors will be used to choose     * the random colors for tables text we can change/add more colors to this array     *     * @return void     *     * @global object The current Dia document     *     * @access public     * @see PMA_DIA     */    public function tableDraw($changeColor)    {        global $dia;        if ($changeColor) {            $listOfColors = array(                'FF0000',                '000099',                '00FF00'            );            shuffle($listOfColors);            $this->tableColor =  '#' . $listOfColors[0] . '';        } else {            $this->tableColor = '#000000';        }        $factor = 0.1;        $dia->startElement('dia:object');        $dia->writeAttribute('type', 'Database - Table');        $dia->writeAttribute('version', '0');        $dia->writeAttribute('id', '' . $this->tableId . '');        $dia->writeRaw(            '<dia:attribute name="obj_pos">                <dia:point val="'            . ($this->x * $factor) . ',' . ($this->y * $factor) . '"/>            </dia:attribute>            <dia:attribute name="obj_bb">                <dia:rectangle val="'            .($this->x * $factor) . ',' . ($this->y * $factor) . ';9.97,9.2"/>            </dia:attribute>            <dia:attribute name="meta">                <dia:composite type="dict"/>            </dia:attribute>            <dia:attribute name="elem_corner">                <dia:point val="'            . ($this->x * $factor) . ',' . ($this->y * $factor) . '"/>            </dia:attribute>            <dia:attribute name="elem_width">                <dia:real val="5.9199999999999999"/>            </dia:attribute>            <dia:attribute name="elem_height">                <dia:real val="3.5"/>            </dia:attribute>            <dia:attribute name="text_colour">                <dia:color val="' . $this->tableColor . '"/>            </dia:attribute>            <dia:attribute name="line_colour">                <dia:color val="#000000"/>            </dia:attribute>            <dia:attribute name="fill_colour">                <dia:color val="#ffffff"/>            </dia:attribute>            <dia:attribute name="line_width">                <dia:real val="0.10000000000000001"/>            </dia:attribute>            <dia:attribute name="name">                <dia:string>#' . $this->tableName . '#</dia:string>            </dia:attribute>            <dia:attribute name="comment">                <dia:string>##</dia:string>            </dia:attribute>            <dia:attribute name="visible_comment">                <dia:boolean val="false"/>            </dia:attribute>            <dia:attribute name="tagging_comment">                <dia:boolean val="false"/>            </dia:attribute>            <dia:attribute name="underline_primary_key">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="bold_primary_keys">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="normal_font">                <dia:font family="monospace" style="0" name="Courier"/>            </dia:attribute>            <dia:attribute name="name_font">                <dia:font family="sans" style="80" name="Helvetica-Bold"/>            </dia:attribute>            <dia:attribute name="comment_font">                <dia:font family="sans" style="0" name="Helvetica"/>            </dia:attribute>            <dia:attribute name="normal_font_height">                <dia:real val="0.80000000000000004"/>            </dia:attribute>            <dia:attribute name="name_font_height">                <dia:real val="0.69999999999999996"/>            </dia:attribute>            <dia:attribute name="comment_font_height">                <dia:real val="0.69999999999999996"/>            </dia:attribute>'        );        $dia->startElement('dia:attribute');        $dia->writeAttribute('name', 'attributes');        foreach ($this->fields as $field) {            $dia->writeRaw(                '<dia:composite type="table_attribute">                    <dia:attribute name="name">                <dia:string>#' . $field . '#</dia:string>                </dia:attribute>                <dia:attribute name="type">                    <dia:string>##</dia:string>                </dia:attribute>                    <dia:attribute name="comment">                <dia:string>##</dia:string>                </dia:attribute>'            );            unset($pm);            $pm = 'false';            if (in_array($field, $this->primary)) {                $pm = 'true';            }            if ($field == $this->displayfield) {                $pm = 'false';            }            $dia->writeRaw(                '<dia:attribute name="primary_key">                    <dia:boolean val="' . $pm . '"/>                </dia:attribute>                <dia:attribute name="nullable">                    <dia:boolean val="false"/>                </dia:attribute>                <dia:attribute name="unique">                    <dia:boolean val="' . $pm . '"/>                </dia:attribute>                </dia:composite>'            );        }        $dia->endElement();        $dia->endElement();    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in dia XML document. * * @name Relation_Stats * @see PMA_DIA */class Relation_Stats{    /**     * Defines properties     */    public $srcConnPointsRight;    public $srcConnPointsLeft;    public $destConnPointsRight;    public $destConnPointsLeft;    public $masterTableId;    public $foreignTableId;    public $masterTablePos;    public $foreignTablePos;    public $referenceColor;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @return void     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        $this->srcConnPointsLeft = $src_pos[0];        $this->srcConnPointsRight = $src_pos[1];        $this->destConnPointsLeft = $dest_pos[0];        $this->destConnPointsRight = $dest_pos[1];        $this->masterTablePos = $src_pos[2];        $this->foreignTablePos = $dest_pos[2];        $this->masterTableId = $master_table->tableId;        $this->foreignTableId = $foreign_table->tableId;    }    /**     * Each Table object have connection points     * which is used to connect to other objects in Dia     * we detect the position of key in fields and     * then determines its left and right connection     * points.     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Table right,left connection points and key position     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // left, right, position        $value = 12;        if ($pos != 0) {            return array($pos + $value + $pos, $pos + $value + $pos + 1, $pos);        }        return array($pos + $value , $pos + $value + 1, $pos);    }    /**     * Draws relation references     *     * connects master table's master field to foreign table's     * forein field using Dia object type Database - Reference     * Dia object is used to generate the XML of Dia Document.     * Database reference Object and their attributes are involved     * in the combination of displaing Database - reference on Dia Document.     *     * @param boolean $changeColor Whether to use one color per relation or not     * if changeColor is true then an array of $listOfColors will be used to choose     * the random colors for references lines. we can change/add more colors to this     *     * @return void     *     * @global object The current Dia document     *     * @access public     * @see PMA_PDF     */    public function relationDraw($changeColor)    {        global $dia;        PMA_Dia_Relation_Schema::$objectId += 1;        /*         * if source connection points and destination connection         * points are same then return it false and don't draw that         * relation         */        if ( $this->srcConnPointsRight == $this->destConnPointsRight) {            if ( $this->srcConnPointsLeft == $this->destConnPointsLeft) {                return false;            }        }        if ($changeColor) {            $listOfColors = array(                'FF0000',                '000099',                '00FF00'            );            shuffle($listOfColors);            $this->referenceColor =  '#' . $listOfColors[0] . '';        } else {            $this->referenceColor = '#000000';        }        $dia->writeRaw(            '<dia:object type="Database - Reference" version="0" id="'            . PMA_Dia_Relation_Schema::$objectId . '">            <dia:attribute name="obj_pos">                <dia:point val="3.27,18.9198"/>            </dia:attribute>            <dia:attribute name="obj_bb">                <dia:rectangle val="2.27,8.7175;17.7679,18.9198"/>            </dia:attribute>            <dia:attribute name="meta">                <dia:composite type="dict"/>            </dia:attribute>            <dia:attribute name="orth_points">                <dia:point val="3.27,18.9198"/>                <dia:point val="2.27,18.9198"/>                <dia:point val="2.27,14.1286"/>                <dia:point val="17.7679,14.1286"/>                <dia:point val="17.7679,9.3375"/>                <dia:point val="16.7679,9.3375"/>            </dia:attribute>            <dia:attribute name="orth_orient">                <dia:enum val="0"/>                <dia:enum val="1"/>                <dia:enum val="0"/>                <dia:enum val="1"/>                <dia:enum val="0"/>            </dia:attribute>            <dia:attribute name="orth_autoroute">                <dia:boolean val="true"/>            </dia:attribute>            <dia:attribute name="text_colour">                <dia:color val="#000000"/>            </dia:attribute>            <dia:attribute name="line_colour">                <dia:color val="' . $this->referenceColor . '"/>            </dia:attribute>            <dia:attribute name="line_width">                <dia:real val="0.10000000000000001"/>            </dia:attribute>            <dia:attribute name="line_style">                <dia:enum val="0"/>                <dia:real val="1"/>            </dia:attribute>            <dia:attribute name="corner_radius">                <dia:real val="0"/>            </dia:attribute>            <dia:attribute name="end_arrow">                <dia:enum val="22"/>            </dia:attribute>            <dia:attribute name="end_arrow_length">                <dia:real val="0.5"/>            </dia:attribute>            <dia:attribute name="end_arrow_width">                <dia:real val="0.5"/>            </dia:attribute>            <dia:attribute name="start_point_desc">                <dia:string>#1#</dia:string>            </dia:attribute>            <dia:attribute name="end_point_desc">                <dia:string>#n#</dia:string>            </dia:attribute>            <dia:attribute name="normal_font">                <dia:font family="monospace" style="0" name="Courier"/>            </dia:attribute>            <dia:attribute name="normal_font_height">                <dia:real val="0.59999999999999998"/>            </dia:attribute>            <dia:connections>                <dia:connection handle="0" to="'            . $this->masterTableId . '" connection="'            . $this->srcConnPointsRight . '"/>                <dia:connection handle="1" to="'            . $this->foreignTableId . '" connection="'            . $this->destConnPointsRight . '"/>            </dia:connections>            </dia:object>'        );    }}/** * Dia Relation Schema Class * * Purpose of this class is to generate the Dia XML Document * which is used for representing the database diagrams in Dia IDE * This class uses Database Table and Reference Objects of Dia and with * the combination of these objects actually helps in preparing Dia XML. * * Dia XML is generated by using XMLWriter php extension and this class * inherits Export_Relation_Schema class has common functionality added * to this class * * @name Dia_Relation_Schema */class PMA_Dia_Relation_Schema extends PMA_Export_Relation_Schema{    /**     * Defines properties     */    private $_tables = array();    private $_relations = array();    private $_topMargin = 2.8222000598907471;    private $_bottomMargin = 2.8222000598907471;    private $_leftMargin = 2.8222000598907471;    private $_rightMargin = 2.8222000598907471;    public static $objectId = 0;    /**     * The "PMA_Dia_Relation_Schema" constructor     *     * Upon instantiation This outputs the Dia XML document     * that user can download     *     * @return void     * @see PMA_DIA,Table_Stats,Relation_Stats     */    function __construct()    {        global $dia,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowGrid(isset($_POST['show_grid']));        $this->setShowColor($_POST['show_color']);        $this->setShowKeys(isset($_POST['show_keys']));        $this->setOrientation(isset($_POST['orientation']));        $this->setPaper($_POST['paper']);        $this->setExportType($_POST['export_type']);        $dia = new PMA_DIA();        $dia->startDiaDoc(            $this->paper, $this->_topMargin, $this->_bottomMargin,            $this->_leftMargin, $this->_rightMargin, $this->orientation        );        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables as $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $this->pageNumber, $this->showKeys                );            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                     * by the user                     * (do not use array_search() because we would have to                     * to do a === false and this is not PHP3 compatible)                     */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->showKeys                        );                    }                }            }        }        $this->_drawTables($this->showColor);        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $dia->endDiaDoc();        $dia->showOutput($db . '-' . $this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string $masterTable  The master table name     * @param string $masterField  The relation field in the master table     * @param string $foreignTable The foreign table name     * @param string $foreignField The relation field in the foreign table     * @param bool   $showKeys     Whether to display ONLY keys or not     *     * @return void     *     * @access private     * @see Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable, $masterField, $foreignTable, $foreignField, $showKeys)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $this->pageNumber, $showKeys            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $this->pageNumber, $showKeys            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation references     *     * connects master table's master field to     * foreign table's forein field using Dia object     * type Database - Reference     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     *     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * Tables are generated using Dia object type Database - Table     * primary fields are underlined and bold in tables     *     * @param boolean $changeColor Whether to show color for tables text or not     *     * @return void     *     * @access private     * @see Table_Stats::tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';// text color of the selected database name (when showing the table list)$GLOBALS['cfg']['NaviDatabaseNameColor']    = '#0000FF';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 50,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => '#E5E5E5',    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => '#FBFBFB',    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          => '#D5D9DD',    // the background color of the graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgTwo'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * A simple rules engine, that parses and executes the rules in advisory_rules.txt. Adjusted to phpMyAdmin * * * @package PhpMyAdmin */class Advisor{    var $variables;    var $parseResult;    var $runResult;    function run()    {        // HowTo: A simple Advisory system in 3 easy steps.        // Step 1: Get some variables to evaluate on        $this->variables = array_merge(            PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1),            PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1)        );        if (PMA_DRIZZLE) {            $this->variables = array_merge(                $this->variables,                PMA_DBI_fetch_result(                    "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS", 0, 1                )            );        }        // Add total memory to variables as well        include_once 'libraries/sysinfo.lib.php';        $sysinfo = getSysInfo();        $memory  = $sysinfo->memory();        $this->variables['system_memory'] = $memory['MemTotal'];        // Step 2: Read and parse the list of rules        $this->parseResult = $this->parseRulesFile();        // Step 3: Feed the variables to the rules and let them fire. Sets $runResult        $this->runRules();        return array(            'parse' => array('errors' => $this->parseResult['errors']),            'run'   => $this->runResult        );    }    function runRules()    {        $this->runResult = array(            'fired' => array(),            'notfired' => array(),            'unchecked'=> array(),            'errors' => array()        );        foreach ($this->parseResult['rules'] as $rule) {            $this->variables['value'] = 0;            $precond = true;            if (isset($rule['precondition'])) {                try {                     $precond = $this->ruleExprEvaluate($rule['precondition']);                } catch (Exception $e) {                    $this->runResult['errors'][] = 'Failed evaluating precondition for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }            }            if (! $precond) {                $this->addRule('unchecked', $rule);            } else {                try {                    $value = $this->ruleExprEvaluate($rule['formula']);                } catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed calculating value for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                    continue;                }                $this->variables['value'] = $value;                try {                    if ($this->ruleExprEvaluate($rule['test'])) {                        $this->addRule('fired', $rule);                    } else {                        $this->addRule('notfired', $rule);                    }                }  catch(Exception $e) {                    $this->runResult['errors'][] = 'Failed running test for rule \''                        . $rule['name'] . '\'. PHP threw following error: '                        . $e->getMessage();                }            }        }        return true;    }    /**     * Escapes percent string to be used in format string.     *     * @param string $str string to escape     *     * @return string     */    function escapePercent($str)    {        return preg_replace('/%( |,|\.|$|\(|\)|<|>)/', '%%\1', $str);    }    /**     * Wrapper function for translating.     *     * @param string $str     * @param mixed  $param     *     * @return string     */    function translate($str, $param = null)    {        if (is_null($param)) {            return sprintf(_gettext(Advisor::escapePercent($str)));        } else {            $printf = 'sprintf("' . _gettext(Advisor::escapePercent($str)) . '",';            return $this->ruleExprEvaluate(                $printf . $param . ')',                strlen($printf)            );        }    }    /**     * Splits justification to text and formula.     *     * @param string $rule     *     * @return array     */    function splitJustification($rule)    {        $jst = preg_split('/\s*\|\s*/', $rule['justification'], 2);        if (count($jst) > 1) {            return array($jst[0], $jst[1]);        }        return array($rule['justification']);    }    // Adds a rule to the result list    function addRule($type, $rule)    {        switch($type) {        case 'notfired':        case 'fired':            $jst = Advisor::splitJustification($rule);            if (count($jst) > 1) {                try {                    /* Translate */                    $str = $this->translate($jst[0], $jst[1]);                } catch (Exception $e) {                    $this->runResult['errors'][] = sprintf(                        __('Failed formatting string for rule \'%s\'. PHP threw following error: %s'),                        $rule['name'],                        $e->getMessage()                    );                    return;                }                $rule['justification'] = $str;            } else {                $rule['justification'] = $this->translate($rule['justification']);            }            $rule['name'] = $this->translate($rule['name']);            $rule['issue'] = $this->translate($rule['issue']);            // Replaces {server_variable} with 'server_variable'            // linking to server_variables.php            $rule['recommendation'] = preg_replace(                '/\{([a-z_0-9]+)\}/Ui',                '<a href="server_variables.php?' . PMA_generate_common_url() . '#filter=\1">\1</a>',                $this->translate($rule['recommendation'])            );            // Replaces external Links with PMA_linkURL() generated links            $rule['recommendation'] = preg_replace(                '#href=("|\')(https?://[^\1]+)\1#ie',                '\'href="\' . PMA_linkURL("\2") . \'"\'',                $rule['recommendation']            );            break;        }        $this->runResult[$type][] = $rule;    }    private function ruleExprEvaluate_var1($matches)    {        // '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Uie'        return '1'; //isset($this->runResult[\'fired\']    }    private function ruleExprEvaluate_var2($matches)    {        // '/\b(\w+)\b/e'        return isset($this->variables[$matches[1]])            ? (is_numeric($this->variables[$matches[1]])                ? $this->variables[$matches[1]]                : '"'.$this->variables[$matches[1]].'"')            : $matches[1];    }    // Runs a code expression, replacing variable names with their respective values    // ignoreUntil: if > 0, it doesn't replace any variables until that string    // position, but still evaluates the whole expr    function ruleExprEvaluate($expr, $ignoreUntil = 0)    {        if ($ignoreUntil > 0) {            $exprIgnore = substr($expr, 0, $ignoreUntil);            $expr = substr($expr, $ignoreUntil);        }        $expr = preg_replace_callback(            '/fired\s*\(\s*(\'|")(.*)\1\s*\)/Ui',            array($this, 'ruleExprEvaluate_var1'),            $expr        );        $expr = preg_replace_callback(            '/\b(\w+)\b/',            array($this, 'ruleExprEvaluate_var2'),            $expr        );        if ($ignoreUntil > 0) {            $expr = $exprIgnore . $expr;        }        $value = 0;        $err = 0;        ob_start();        eval('$value = '.$expr.';');        $err = ob_get_contents();        ob_end_clean();        if ($err) {            throw new Exception(                strip_tags($err) . '<br />Executed code: $value = ' . $expr . ';'            );        }        return $value;    }    // Reads the rule file into an array, throwing errors messages on syntax errors    function parseRulesFile()    {        $file = file('libraries/advisory_rules.txt');        $errors = array();        $rules = array();        $ruleSyntax = array('name', 'formula', 'test', 'issue', 'recommendation', 'justification');        $numRules = count($ruleSyntax);        $numLines = count($file);        $j = -1;        $ruleLine = -1;        for ($i = 0; $i<$numLines; $i++) {            $line = $file[$i];            if ($line[0] == '#' || $line[0] == "\n") {                continue;            }            // Reading new rule            if (substr($line, 0, 4) == 'rule') {                if ($ruleLine > 0) {                    $errors[] = 'Invalid rule declaration on line ' . ($i+1)                        . ', expected line ' . $ruleSyntax[$ruleLine++]                        . ' of previous rule' ;                    continue;                }                if (preg_match("/rule\s'(.*)'( \[(.*)\])?$/", $line, $match)) {                    $ruleLine = 1;                    $j++;                    $rules[$j] = array( 'name' => $match[1]);                    if (isset($match[3])) {                        $rules[$j]['precondition'] = $match[3];                    }                } else {                    $errors[] = 'Invalid rule declaration on line '.($i+1);                }                continue;            } else {                if ($ruleLine == -1) {                    $errors[] = 'Unexpected characters on line '.($i+1);                }            }            // Reading rule lines            if ($ruleLine > 0) {                if (!isset($line[0])) {                    continue; // Empty lines are ok                }                // Non tabbed lines are not                if ($line[0] != "\t") {                    $errors[] = 'Unexpected character on line '.($i+1).'                        . Expected tab, but found \''.$line[0].'\'';                    continue;                }                $rules[$j][$ruleSyntax[$ruleLine++]] = chop(substr($line, 1));            }            // Rule complete            if ($ruleLine == $numRules) {                $ruleLine = -1;            }        }        return array('rules' => $rules, 'errors' => $errors);    }}function PMA_bytime($num, $precision){    $per = '';    if ($num >= 1) { // per second        $per = __('per second');    } elseif ($num*60 >= 1) { // per minute        $num = $num*60;        $per = __('per minute');    } elseif ($num*60*60 >=1 ) { // per hour        $num = $num*60*60;        $per = __('per hour');    } else {        $num = $num*60*60*24;        $per = __('per day');    }    $num = round($num, $precision);    if ($num == 0) {        $num = '<' . pow(10, -$precision);    }    return "$num $per";}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Zip file creation class. * Makes zip files. * * @see Official ZIP file format: http://www.pkware.com/support/zip-app-note * * @access  public * @package PhpMyAdmin */class zipfile{    /**     * Whether to echo zip as it's built or return as string from -> file     *     * @var  boolean  $doWrite     */    var $doWrite = false;    /**     * Array to store compressed data     *     * @var  array    $datasec     */    var $datasec      = array();    /**     * Central directory     *     * @var  array    $ctrl_dir     */    var $ctrl_dir     = array();    /**     * End of central directory record     *     * @var  string   $eof_ctrl_dir     */    var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";    /**     * Last offset position     *     * @var  integer  $old_offset     */    var $old_offset   = 0;    /**     * Sets member variable this -> doWrite to true     * - Should be called immediately after class instantiantion     * - If set to true, then ZIP archive are echo'ed to STDOUT as each     *   file is added via this -> addfile(), and central directories are     *   echoed to STDOUT on final call to this -> file().  Also,     *   this -> file() returns an empty string so it is safe to issue a     *   "echo $zipfile;" command     *     * @access public     *     * @return nothing     */    function setDoWrite()    {        $this -> doWrite = true;    } // end of the 'setDoWrite()' method    /**     * Converts an Unix timestamp to a four byte DOS date and time format (date     * in high two bytes, time in low two bytes allowing magnitude comparison).     *     * @param integer $unixtime the current Unix timestamp     *     * @return integer the current date in a four byte DOS format     *     * @access private     */    function unix2DosTime($unixtime = 0)    {        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);        if ($timearray['year'] < 1980) {            $timearray['year']    = 1980;            $timearray['mon']     = 1;            $timearray['mday']    = 1;            $timearray['hours']   = 0;            $timearray['minutes'] = 0;            $timearray['seconds'] = 0;        } // end if        return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) |                ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);    } // end of the 'unix2DosTime()' method    /**     * Adds "file" to archive     *     * @param string  $data file contents     * @param string  $name name of the file in the archive (may contains the path)     * @param integer $time the current timestamp     *     * @access public     *     * @return nothing     */    function addFile($data, $name, $time = 0)    {        $name     = str_replace('\\', '/', $name);        $dtime    = substr("00000000" . dechex($this->unix2DosTime($time)), -8);        $hexdtime = '\x' . $dtime[6] . $dtime[7]                  . '\x' . $dtime[4] . $dtime[5]                  . '\x' . $dtime[2] . $dtime[3]                  . '\x' . $dtime[0] . $dtime[1];        eval('$hexdtime = "' . $hexdtime . '";');        $fr   = "\x50\x4b\x03\x04";        $fr   .= "\x14\x00";            // ver needed to extract        $fr   .= "\x00\x00";            // gen purpose bit flag        $fr   .= "\x08\x00";            // compression method        $fr   .= $hexdtime;             // last mod time and date        // "local file header" segment        $unc_len = strlen($data);        $crc     = crc32($data);        $zdata   = gzcompress($data);        $zdata   = substr(substr($zdata, 0, strlen($zdata) - 4), 2); // fix crc bug        $c_len   = strlen($zdata);        $fr      .= pack('V', $crc);             // crc32        $fr      .= pack('V', $c_len);           // compressed filesize        $fr      .= pack('V', $unc_len);         // uncompressed filesize        $fr      .= pack('v', strlen($name));    // length of filename        $fr      .= pack('v', 0);                // extra field length        $fr      .= $name;        // "file data" segment        $fr .= $zdata;        // echo this entry on the fly, ...        if ( $this -> doWrite) {            echo $fr;        } else {                     // ... OR add this entry to array            $this -> datasec[] = $fr;        }        // now add to central directory record        $cdrec = "\x50\x4b\x01\x02";        $cdrec .= "\x00\x00";                // version made by        $cdrec .= "\x14\x00";                // version needed to extract        $cdrec .= "\x00\x00";                // gen purpose bit flag        $cdrec .= "\x08\x00";                // compression method        $cdrec .= $hexdtime;                 // last mod time & date        $cdrec .= pack('V', $crc);           // crc32        $cdrec .= pack('V', $c_len);         // compressed filesize        $cdrec .= pack('V', $unc_len);       // uncompressed filesize        $cdrec .= pack('v', strlen($name)); // length of filename        $cdrec .= pack('v', 0);             // extra field length        $cdrec .= pack('v', 0);             // file comment length        $cdrec .= pack('v', 0);             // disk number start        $cdrec .= pack('v', 0);             // internal file attributes        $cdrec .= pack('V', 32);            // external file attributes - 'archive' bit set        $cdrec .= pack('V', $this -> old_offset); // relative offset of local header        $this -> old_offset += strlen($fr);        $cdrec .= $name;        // optional extra field, file comment goes here        // save to central directory        $this -> ctrl_dir[] = $cdrec;    } // end of the 'addFile()' method    /**     * Echo central dir if ->doWrite==true, else build string to return     *     * @return  string  if ->doWrite {empty string} else the ZIP file contents     *     * @access public     */    function file()    {        $ctrldir = implode('', $this -> ctrl_dir);        $header = $ctrldir .            $this -> eof_ctrl_dir .            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries "on this disk"            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries overall            pack('V', strlen($ctrldir)) .           // size of central dir            pack('V', $this -> old_offset) .        // offset to start of central dir            "\x00\x00";                             // .zip file comment length        if ( $this -> doWrite ) {       // Send central directory & end ctrl dir to STDOUT            echo $header;            return "";                                   // Return empty string        } else {                        // Return entire ZIP archive as string            $data = implode('', $this -> datasec);            return $data . $header;        }    } // end of the 'file()' method} // end of the 'zipfile' class?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating the footer for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a fieldset for adding a new item, if the user has the privileges. * * @param    string   $docu   String used to create a link to the MySQL docs * @param    string   $priv   Privilege to check for adding a new item * @param    string   $name   MySQL name of the item * * @return   string   An HTML snippet with the link to add a new item */function PMA_RTE_getFooterLinks($docu, $priv, $name){    global $db, $url_query, $ajax_class;    $icon = 'b_' . strtolower($name) . '_add.png';    $retval  = "";    $retval .= "<!-- ADD " . $name . " FORM START -->\n";    $retval .= "<fieldset class='left'>\n";    $retval .= "    <legend>" . __('New'). "</legend>\n";    $retval .= "        <div class='wrap'>\n";    if (PMA_currentUserHasPrivilege($priv, $db)) {        $retval .= "            <a {$ajax_class['add']} ";        $retval .= "href='db_" . strtolower($name) . "s.php";        $retval .= "?$url_query&amp;add_item=1'>";        $retval .= PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('add') . "</a>\n";    } else {        $retval .= "            " . PMA_getIcon($icon);        $retval .= PMA_RTE_getWord('no_create') . "\n";    }    $retval .= "            " . PMA_showMySQLDocu('SQL-Syntax', $docu) . "\n";    $retval .= "        </div>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- ADD " . $name . " FORM END -->\n\n";    return $retval;} // end PMA_RTE_getFooterLinks()/** * Creates a fieldset for adding a new routine, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_RTN_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_PROCEDURE', 'CREATE ROUTINE', 'ROUTINE');}// end PMA_RTN_getFooterLinks()/** * Creates a fieldset for adding a new trigger, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_TRI_getFooterLinks(){    return PMA_RTE_getFooterLinks('CREATE_TRIGGER', 'TRIGGER', 'TRIGGER');} // end PMA_TRI_getFooterLinks()/** * Creates a fieldset for adding a new event, if the user has the privileges. * * @return   string    HTML code with containing the fotter fieldset */function PMA_EVN_getFooterLinks(){    global $db, $url_query;    /**     * For events, we show the usual 'Add event' form and also     * a form for toggling the state of the event scheduler     */    // Init options for the event scheduler toggle functionality    $es_state = PMA_DBI_fetch_value(        "SHOW GLOBAL VARIABLES LIKE 'event_scheduler'",        0,        1    );    $es_state = strtolower($es_state);    $options = array(                    0 => array(                        'label' => __('OFF'),                        'value' => "SET GLOBAL event_scheduler=\"OFF\"",                        'selected' => ($es_state != 'on')                    ),                    1 => array(                        'label' => __('ON'),                        'value' => "SET GLOBAL event_scheduler=\"ON\"",                        'selected' => ($es_state == 'on')                    )               );    // Generate output    $retval  = "<!-- FOOTER LINKS START -->\n";    $retval .= "<div class='doubleFieldset'>\n";    // show the usual footer    $retval .= PMA_RTE_getFooterLinks('CREATE_EVENT', 'EVENT', 'EVENT');    $retval .= "    <fieldset class='right'>\n";    $retval .= "        <legend>\n";    $retval .= "            " . __('Event scheduler status') . "\n";    $retval .= "        </legend>\n";    $retval .= "        <div class='wrap'>\n";    // show the toggle button    $retval .= PMA_toggleButton(        "sql.php?$url_query&amp;goto=db_events.php" . urlencode("?db=$db"),        'sql_query',        $options,        'PMA_slidingMessage(data.sql_query);'    );    $retval .= "        </div>\n";    $retval .= "    </fieldset>\n";    $retval .= "    <div style='clear: both;'></div>\n";    $retval .= "</div>";    $retval .= "<!-- FOOTER LINKS END -->\n";    return $retval;} // end PMA_EVN_getFooterLinks()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';// Check parametersPMA_checkParameters(array('db', 'table'));$db_is_information_schema = PMA_is_system_schema($db);/** * Set parameters for links * @deprecated */$url_query = PMA_generate_common_url($db, $table);$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Ensures the database and the table exist (else move to the "parent" script) */require_once './libraries/db_table_exists.lib.php';?>
<?php/** * Functions used to generate GIS visualizations. * * @package PhpMyAdmin *//** * Returns a modified sql query with only the label column * and spatial column(wrapped with 'ASTEXT()' function). * * @param string $sql_query             original sql query * @param array  $visualizationSettings settings for the visualization * * @return the modified sql query. */function PMA_GIS_modifyQuery($sql_query, $visualizationSettings){    $modified_query = 'SELECT ';    $analyzed_query = PMA_SQP_analyze(PMA_SQP_parse($sql_query));    // If select clause is not *    if (trim($analyzed_query[0]['select_expr_clause']) != '*') {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            // Check to see whether an alias has been used on the label column            $is_label_alias = false;            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['alias'] == $visualizationSettings['labelColumn']) {                    $modified_query .= sanitize($select) . ' AS `'                    . $select['alias'] . '`, ';                    $is_label_alias = true;                    break;                }            }            // If no alias have been used on the label column            if (! $is_label_alias) {                foreach ($analyzed_query[0]['select_expr'] as $select) {                    if ($select['column'] == $visualizationSettings['labelColumn']) {                        $modified_query .= sanitize($select) . ', ';                    }                }            }        }        // Check to see whether an alias has been used on the spatial column        $is_spatial_alias = false;        foreach ($analyzed_query[0]['select_expr'] as $select) {            if ($select['alias'] == $visualizationSettings['spatialColumn']) {                $sanitized = sanitize($select);                $modified_query .= 'ASTEXT(' . $sanitized . ') AS `'                . $select['alias'] . '`, ';                // Get the SRID                $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                $is_spatial_alias = true;                break;            }        }        // If no alias have been used on the spatial column        if (! $is_spatial_alias) {            foreach ($analyzed_query[0]['select_expr'] as $select) {                if ($select['column'] == $visualizationSettings['spatialColumn']) {                    $sanitized = sanitize($select);                    $modified_query .= 'ASTEXT(' . $sanitized                        . ') AS `' . $select['column'] . '`, ';                    // Get the SRID                    $modified_query .= 'SRID(' . $sanitized . ') AS `srid` ';                }            }        }        // If select cluase is *    } else {        // If label column is chosen add it to the query        if (isset($visualizationSettings['labelColumn'])            && $visualizationSettings['labelColumn'] != ''        ) {            $modified_query .= '`' . $visualizationSettings['labelColumn'] .'`, ';        }        // Wrap the spatial column with 'ASTEXT()' function and add it        $modified_query .= 'ASTEXT(`' . $visualizationSettings['spatialColumn']            . '`) AS `' . $visualizationSettings['spatialColumn'] . '`, ';        // Get the SRID        $modified_query .= 'SRID(`' . $visualizationSettings['spatialColumn']            . '`) AS `srid` ';    }    // Append the rest of the query    $from_pos = stripos($sql_query, 'FROM');    $modified_query .= substr($sql_query, $from_pos);    return $modified_query;}// Local function to sanitize the expression taken// from the results of PMA_SQP_analyze function.function sanitize($select){    $table_col = $select['table_name'] . "." . $select['column'];    $db_table_col = $select['db'] . "." . $select['table_name']        . "." . $select['column'];    if ($select['expr'] == $select['column']) {        return "`" . $select['column'] . "`";    } elseif ($select['expr'] == $table_col) {        return "`" . $select['table_name'] . "`.`" . $select['column'] . "`";    } elseif ($select['expr'] == $db_table_col) {        return "`" . $select['db'] . "`.`" . $select['table_name']            . "`.`" . $select['column'] . "`";    }    return $select['expr'];}/** * Formats a visualization for the GIS query results. * * @param array  $data                   Data for the status chart * @param array  &$visualizationSettings Settings used to generate the chart * @param string $format                 Format of the visulaization * * @return string HTML and JS code for the GIS visualization */function PMA_GIS_visualizationResults($data, &$visualizationSettings, $format){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (! isset($data[0])) {        // empty data        return __('No data found for GIS visualization.');    } else {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($visualizationSettings != null) {            foreach ($visualization->getSettings() as $setting => $val) {                if (! isset($visualizationSettings[$setting])) {                    $visualizationSettings[$setting] = $val;                }            }        }        if ($format == 'svg') {            return $visualization->asSvg();        } elseif ($format == 'png') {            return $visualization->asPng();        } elseif ($format == 'ol') {            return $visualization->asOl();        }    }}/** * Generate visualization for the GIS query results and save it to a file. * * @param array  $data                  data for the status chart * @param array  $visualizationSettings settings used to generate the chart * @param string $format                format of the visulaization * @param string $fileName              file name * * @return file File containing the visualization */function PMA_GIS_saveToFile($data, $visualizationSettings, $format, $fileName){    include_once './libraries/gis/pma_gis_visualization.php';    include_once './libraries/gis/pma_gis_factory.php';    if (isset($data[0])) {        $visualization = new PMA_GIS_Visualization($data, $visualizationSettings);        if ($format == 'svg') {            $visualization->toFileAsSvg($fileName);        } elseif ($format == 'png') {            $visualization->toFileAsPng($fileName);        } elseif ($format == 'pdf') {            $visualization->toFileAsPdf($fileName);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php/** * Handles the visualization of GIS MULTIPOLYGON objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multipolygon extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            // If the polygon doesn't have an inner ring, use polygon itself            if (strpos($polygon, "),(") === false) {                $ring = $polygon;            } else {                // Seperate outer ring and use it to determin min-max                $parts = explode("),(", $polygon);                $ring = $parts[0];            }            $min_max = $this->setMinMax($ring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $fill_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr, $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            imagefilledpolygon($image, $points_arr, sizeof($points_arr) / 2, $color);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            imagestring($image, 1, $points_arr[2], $points_arr[3], trim($label), $black);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $fill_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($fill_color, 1, 2));        $green = hexdec(substr($fill_color, 3, 2));        $blue  = hexdec(substr($fill_color, 4, 2));        $color = array($red, $green, $blue);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $first_poly = true;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $points_arr = $this->extractPoints($polygon, $scale_data, true);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $points_arr = $this->extractPoints($outer, $scale_data, true);                foreach ($inner as $inner_poly) {                    $points_arr = array_merge(                        $points_arr,                        $this->extractPoints($inner_poly, $scale_data, true)                    );                }            }            // draw polygon            $pdf->Polygon($points_arr, 'F*', array(), $color, true);            // mark label point if applicable            if (isset($label) && trim($label) != '' && $first_poly) {                $label_point = array($points_arr[2], $points_arr[3]);            }            $first_poly = false;        }        // print label if applicable        if (isset($label_point)) {            $pdf->SetXY($label_point[0], $label_point[1]);            $pdf->SetFontSize(5);            $pdf->Cell(0, 0, trim($label));        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $fill_color, $scale_data)    {        $polygon_options = array(            'name'        => $label,            'class'       => 'multipolygon vector',            'stroke'      => 'black',            'stroke-width'=> 0.5,            'fill'        => $fill_color,            'fill-rule'   => 'evenodd',            'fill-opacity'=> 0.8,        );        $row = '';        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        foreach ($polygons as $polygon) {            $row .= '<path d="';            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $row .= $this->_drawPath($polygon, $scale_data);            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $outer = $parts[0];                $inner = array_slice($parts, 1);                $row .= $this->_drawPath($outer, $scale_data);                foreach ($inner as $inner_poly) {                    $row .= $this->_drawPath($inner_poly, $scale_data);                }            }            $polygon_options['id'] = $label . rand();            $row .= '"';            foreach ($polygon_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTIPOLYGON object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTIPOLYGON object     * @param string $fill_color Color for the GIS MULTIPOLYGON object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $fill_color, $scale_data)    {        $style_options = array(            'strokeColor' => '#000000',            'strokeWidth' => 0.5,            'fillColor'   => $fill_color,            'fillOpacity' => 0.8,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($spatial, 15, (strlen($spatial) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiPolygon(new Array(';        foreach ($polygons as $polygon) {            $row .= $this->addPointsForOpenLayersPolygon($polygon, $srid);        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Draws a ring of the polygon using SVG path element.     *     * @param string $polygon    The ring     * @param array  $scale_data Array containing data related to scaling     *     * @return the code to draw the ring     */    private function _drawPath($polygon, $scale_data)    {        $points_arr = $this->extractPoints($polygon, $scale_data);        $row = ' M ' . $points_arr[0][0] . ', ' . $points_arr[0][1];        $other_points = array_slice($points_arr, 1, count($points_arr) - 2);        foreach ($other_points as $point) {            $row .= ' L ' . $point[0] . ', ' . $point[1];        }        $row .= ' Z ';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_polygons = isset($gis_data[$index]['MULTIPOLYGON']['no_of_polygons'])            ? $gis_data[$index]['MULTIPOLYGON']['no_of_polygons'] : 1;        if ($no_of_polygons < 1) {            $no_of_polygons = 1;        }        $wkt = 'MULTIPOLYGON(';        for ($k = 0; $k < $no_of_polygons; $k++) {            $no_of_lines = isset($gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'])                ? $gis_data[$index]['MULTIPOLYGON'][$k]['no_of_lines'] : 1;            if ($no_of_lines < 1) {                $no_of_lines = 1;            }            $wkt .= '(';            for ($i = 0; $i < $no_of_lines; $i++) {                $no_of_points = isset($gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'])                    ? $gis_data[$index]['MULTIPOLYGON'][$k][$i]['no_of_points'] : 4;                if ($no_of_points < 4) {                    $no_of_points = 4;                }                $wkt .= '(';                for ($j = 0; $j < $no_of_points; $j++) {                    $wkt .= ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['x'] : $empty)                        . ' ' . ((isset($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'])                        && trim($gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y']) != '')                        ? $gis_data[$index]['MULTIPOLYGON'][$k][$i][$j]['y'] : $empty) .',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= '),';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        // Determines whether each line ring is an inner ring or an outer ring.        // If it's an inner ring get a point on the surface which can be used to        // correctly classify inner rings to their respective outer rings.        include_once './libraries/gis/pma_gis_polygon.php';        foreach ($row_data['parts'] as $i => $ring) {            $row_data['parts'][$i]['isOuter'] = PMA_GIS_Polygon::isOuterRing($ring['points']);        }        // Find points on surface for inner rings        foreach ($row_data['parts'] as $i => $ring) {            if (! $ring['isOuter']) {                $row_data['parts'][$i]['pointOnSurface']                    = PMA_GIS_Polygon::getPointOnSurface($ring['points']);            }        }        // Classify inner rings to their respective outer rings.        foreach ($row_data['parts'] as $j => $ring1) {            if (! $ring1['isOuter']) {                foreach ($row_data['parts'] as $k => $ring2) {                    if ($ring2['isOuter']) {                        // If the pointOnSurface of the inner ring                        // is also inside the outer ring                        if (PMA_GIS_Polygon::isPointInsidePolygon(                            $ring1['pointOnSurface'], $ring2['points']                        )) {                            if (! isset($ring2['inner'])) {                                $row_data['parts'][$k]['inner'] = array();                            }                            $row_data['parts'][$k]['inner'][] = $j;                        }                    }                }            }        }        $wkt = 'MULTIPOLYGON(';        // for each polygon        foreach ($row_data['parts'] as $ring) {            if ($ring['isOuter']) {                $wkt .= '('; // start of polygon                $wkt .= '('; // start of outer ring                foreach ($ring['points'] as $point) {                    $wkt .= $point['x'] . ' ' . $point['y'] . ',';                }                $wkt = substr($wkt, 0, strlen($wkt) - 1);                $wkt .= ')'; // end of outer ring                // inner rings if any                if (isset($ring['inner'])) {                    foreach ($ring['inner'] as $j) {                        $wkt .= ',('; // start of inner ring                        foreach ($row_data['parts'][$j]['points'] as $innerPoint) {                            $wkt .= $innerPoint['x'] . ' ' . $innerPoint['y'] . ',';                        }                        $wkt = substr($wkt, 0, strlen($wkt) - 1);                        $wkt .= ')';  // end of inner ring                    }                }                $wkt .= '),'; // end of polygon            }        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')'; // end of multipolygon        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTIPOLYGON';            $wkt = $value;        }        // Trim to remove leading 'MULTIPOLYGON(((' and trailing ')))'        $multipolygon = substr($wkt, 15, (strlen($wkt) - 18));        // Seperate each polygon        $polygons = explode(")),((", $multipolygon);        $params[$index]['MULTIPOLYGON']['no_of_polygons'] = count($polygons);        $k = 0;        foreach ($polygons as $polygon) {            // If the polygon doesnt have an inner polygon            if (strpos($polygon, "),(") === false) {                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = 1;                $points_arr = $this->extractPoints($polygon, null);                $no_of_points = count($points_arr);                $params[$index]['MULTIPOLYGON'][$k][0]['no_of_points'] = $no_of_points;                for ($i = 0; $i < $no_of_points; $i++) {                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['x'] = $points_arr[$i][0];                    $params[$index]['MULTIPOLYGON'][$k][0][$i]['y'] = $points_arr[$i][1];                }            } else {                // Seperate outer and inner polygons                $parts = explode("),(", $polygon);                $params[$index]['MULTIPOLYGON'][$k]['no_of_lines'] = count($parts);                $j = 0;                foreach ($parts as $ring) {                    $points_arr = $this->extractPoints($ring, null);                    $no_of_points = count($points_arr);                    $params[$index]['MULTIPOLYGON'][$k][$j]['no_of_points'] = $no_of_points;                    for ($i = 0; $i < $no_of_points; $i++) {                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['x'] = $points_arr[$i][0];                        $params[$index]['MULTIPOLYGON'][$k][$j][$i]['y'] = $points_arr[$i][1];                    }                    $j++;                }            }            $k++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the PMA_List_Database class * * @package PhpMyAdmin *//** * the list base class */require_once './libraries/List.class.php';/** * handles database lists * * <code> * $PMA_List_Database = new PMA_List_Database($userlink, $controllink); * </code> * * @todo this object should be attached to the PMA_Server object * @todo ? make use of INFORMATION_SCHEMA * @todo ? support --skip-showdatabases and user has only global rights * @access public * @since phpMyAdmin 2.9.10 * @package PhpMyAdmin *//*public*/ class PMA_List_Database extends PMA_List{    /**     * @var mixed   database link resource|object to be used     */    protected $_db_link = null;    /**     * @var mixed   user database link resource|object     */    protected $_db_link_user = null;    /**     * @var mixed   controluser database link resource|object     */    protected $_db_link_control = null;    /**     * @var boolean whether SHOW DATABASES is disabled or not     * @access protected     */    protected $_show_databases_disabled = false;    /**     * @var string command to retrieve databases from server     */    protected $_command = null;    /**     * Constructor     *     * @param mixed   $db_link_user       user database link resource|object     * @param mixed   $db_link_control    control database link resource|object     */    public function __construct($db_link_user = null, $db_link_control = null)    {        $this->_db_link = $db_link_user;        $this->_db_link_user = $db_link_user;        $this->_db_link_control = $db_link_control;        parent::__construct();        $this->build();    }    /**     * checks if the configuration wants to hide some databases     */    protected function _checkHideDatabase()    {        if (empty($GLOBALS['cfg']['Server']['hide_db'])) {            return;        }        foreach ($this->getArrayCopy() as $key => $db) {            if (preg_match('/' . $GLOBALS['cfg']['Server']['hide_db'] . '/', $db)) {                $this->offsetUnset($key);            }        }    }    /**     * retrieves database list from server     *     * @todo    we could also search mysql tables if all fail?     * @param string  $like_db_name   usally a db_name containing wildcards     * @return array     */    protected function _retrieve($like_db_name = null)    {        if ($this->_show_databases_disabled) {            return array();        }        if (null !== $like_db_name) {            $command = "SHOW DATABASES LIKE '" . $like_db_name . "'";        } elseif (null === $this->_command) {            $command = str_replace('#user#', $GLOBALS['cfg']['Server']['user'],                $GLOBALS['cfg']['Server']['ShowDatabasesCommand']);            $this->_command = $command;        } else {            $command = $this->_command;        }        $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);        PMA_DBI_getError();        if ($GLOBALS['errno'] !== 0) {            // failed to get database list, try the control user            // (hopefully there is one and he has SHOW DATABASES right)            $this->_db_link = $this->_db_link_control;            $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);            PMA_DBI_getError();            if ($GLOBALS['errno'] !== 0) {                // failed! we will display a warning that phpMyAdmin could not safely                // retrieve database list, the admin has to setup a control user or                // allow SHOW DATABASES                $GLOBALS['error_showdatabases'] = true;                $this->_show_databases_disabled = true;            }        }        if ($GLOBALS['cfg']['NaturalOrder']) {            natsort($database_list);        } else {            // need to sort anyway, otherwise information_schema            // goes at the top            sort($database_list);        }        return $database_list;    }    /**     * builds up the list     *     */    public function build()    {        if (! $this->_checkOnlyDatabase()) {            $items = $this->_retrieve();            $this->exchangeArray($items);        }        $this->_checkHideDatabase();    }    /**     * checks the only_db configuration     *     * @return  boolean false if there is no only_db, otherwise true     */    protected function _checkOnlyDatabase()    {        if (is_string($GLOBALS['cfg']['Server']['only_db'])         && strlen($GLOBALS['cfg']['Server']['only_db'])) {            $GLOBALS['cfg']['Server']['only_db'] = array(                $GLOBALS['cfg']['Server']['only_db']            );        }        if (! is_array($GLOBALS['cfg']['Server']['only_db'])) {            return false;        }        $items = array();        foreach ($GLOBALS['cfg']['Server']['only_db'] as $each_only_db) {            if ($each_only_db === '*' && ! $this->_show_databases_disabled) {                // append all not already listed dbs to the list                $items = array_merge($items,                    array_diff($this->_retrieve(), $items));                // there can only be one '*', and this can only be last                break;            }            // check if the db name contains wildcard,            // thus containing not escaped _ or %            if (! preg_match('/(^|[^\\\\])(_|%)/', $each_only_db)) {                // ... not contains wildcard                $items[] = PMA_unescape_mysql_wildcards($each_only_db);                continue;            }            if (! $this->_show_databases_disabled) {                $items = array_merge($items, $this->_retrieve($each_only_db));                continue;            }            // @todo induce error, about not using wildcards with SHOW DATABASE disabled?        }        $this->exchangeArray($items);        return true;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        if (strlen($GLOBALS['db'])) {            return $GLOBALS['db'];        }        return $this->getEmpty();    }    /**     * returns array with dbs grouped with extended infos     *     * @param integer $offset     * @param integer $count     * @return  array   db list     */    public function getGroupedDetails($offset, $count)    {        $dbgroups   = array();        if ($GLOBALS['cfg']['ShowTooltip']          && $GLOBALS['cfgRelation']['commwork']) {            $db_tooltips = PMA_getDbComments();        }        if (!$GLOBALS['cfg']['LeftFrameDBTree']) {            $separators = array();        } elseif (is_array($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = $GLOBALS['cfg']['LeftFrameDBSeparator'];        } elseif (!empty($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = array($GLOBALS['cfg']['LeftFrameDBSeparator']);        } else {            $separators = array();        }        foreach ($this->getLimitedItems($offset, $count) as $db) {            // Get comments from PMA comments table            $db_tooltip = '';            if (isset($db_tooltips[$db])) {                $db_tooltip = $db_tooltips[$db];            }            $pos = false;            foreach ($separators as $separator) {                // use strpos instead of strrpos; it seems more common to                // have the db name, the separator, then the rest which                // might contain a separator                // like dbname_the_rest                $pos = strpos($db, $separator, 1);                if ($pos !== false) {                    break;                }            }            if ($pos !== false) {                $group          = substr($db, 0, $pos);                $disp_name_cut  = substr($db, $pos);            } else {                $group          = $db;                $disp_name_cut  = $db;            }            $disp_name  = $db;            if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {                $disp_name      = $db_tooltip;                $disp_name_cut  = $db_tooltip;                $db_tooltip     = $db;            }            $dbgroups[$group][$db] = array(                'name'          => $db,                'disp_name_cut' => $disp_name_cut,                'disp_name'     => $disp_name,                'comment'       => $db_tooltip,            );            if ($GLOBALS['cfg']['Server']['CountTables']) {                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);            }        } // end foreach ($GLOBALS['PMA_List_Database']->items as $db)        return $dbgroups;    }    /**     * returns a part of the items     *     * @param integer $offset     * @param integer $count     * @return  array  some items     */    public function getLimitedItems($offset, $count)    {        return array_slice($this->getArrayCopy(), $offset, $count);    }    /**     * returns html code for list with dbs     *     * @return  string  html code list     */    public function getHtmlListGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<ul id="databaseList" xml:lang="en" dir="ltr">' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<li class="group"><span>' . htmlspecialchars($group) . '</span><ul>' . "\n";                // whether display db_name cut by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<li';                if ($db['name'] == $selected) {                    $return .= ' class="selected"';                }                $return .= '><a';                if (! empty($db['comment'])) {                    $return .= ' title="' . htmlspecialchars($db['comment']) . '"';                }                $return .= ' href="index.php?' . PMA_generate_common_url($db['name'])                    . '" target="_parent">';                if ($cut) {                    $return .= htmlspecialchars($db['disp_name_cut']);                } else {                    $return .= htmlspecialchars($db['disp_name']);                }                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</a></li>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</ul></li>' . "\n";            }        }        $return .= '</ul>';        return $return;    }    /**     * returns html code for select form element with dbs     *     * @todo IE can not handle different text directions in select boxes so,     * as mostly names will be in english, we set the whole selectbox to LTR     * and EN     *     * @return  string  html code select     */    public function getHtmlSelectGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<select name="db" id="lightm_db" xml:lang="en" dir="ltr"'            . ' onchange="if (this.value != \'\') window.parent.openDb(this.value);">' . "\n"            . '<option value="" dir="' . $GLOBALS['text_dir'] . '">'            . '(' . __('Databases') . ') ...</option>' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<optgroup label="' . htmlspecialchars($group)                    . '">' . "\n";                // whether display db_name cuted by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<option value="' . htmlspecialchars($db['name']) . '"'                    .' title="' . htmlspecialchars($db['comment']) . '"';                if ($db['name'] == $selected || (PMA_DRIZZLE && strtolower($db['name']) == strtolower($selected))) {                    $return .= ' selected="selected"';                }                $return .= '>' . htmlspecialchars($cut ? $db['disp_name_cut'] : $db['disp_name']);                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</option>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</optgroup>' . "\n";            }        }        $return .= '</select>';        return $return;    }    /**     * this is just a backup, if all is fine this can be deleted later     *     * @deprecated     */    protected function _checkAgainstPrivTables()    {        // 1. get allowed dbs from the "mysql.db" table        // User can be blank (anonymous user)        $local_query = "            SELECT DISTINCT `Db` FROM `mysql`.`db`            WHERE `Select_priv` = 'Y'            AND `User`            IN ('" . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . "', '')";        $tmp_mydbs = PMA_DBI_fetch_result($local_query, null, null,            $GLOBALS['controllink']);        if ($tmp_mydbs) {            // Will use as associative array of the following 2 code            // lines:            //   the 1st is the only line intact from before            //     correction,            //   the 2nd replaces $dblist[] = $row['Db'];            // Code following those 2 lines in correction continues            // populating $dblist[], as previous code did. But it is            // now populated with actual database names instead of            // with regular expressions.            $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $GLOBALS['controllink']);            // all databases cases - part 2            if (isset($tmp_mydbs['%'])) {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $dblist[] = $tmp_row[0];                } // end while            } else {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $tmp_db = $tmp_row[0];                    if (isset($tmp_mydbs[$tmp_db]) && $tmp_mydbs[$tmp_db] == 1) {                        $dblist[]           = $tmp_db;                        $tmp_mydbs[$tmp_db] = 0;                    } elseif (! isset($dblist[$tmp_db])) {                        foreach ($tmp_mydbs as $tmp_matchpattern => $tmp_value) {                            // fixed bad regexp                            // TODO: db names may contain characters                            //       that are regexp instructions                            $re        = '(^|(\\\\\\\\)+|[^\])';                            $tmp_regex = preg_replace('/' . addcslashes($re, '/') . '%/', '\\1.*', preg_replace('/' . addcslashes($re, '/') . '_/', '\\1.{1}', $tmp_matchpattern));                            // Fixed db name matching                            // 2000-08-28 -- Benjamin Gandon                            if (preg_match('/^' . addcslashes($tmp_regex, '/') . '$/', $tmp_db)) {                                $dblist[] = $tmp_db;                                break;                            }                        } // end while                    } // end if ... elseif ...                } // end while            } // end else            PMA_DBI_free_result($tmp_alldbs);            unset($tmp_mydbs);        } // end if        // 2. get allowed dbs from the "mysql.tables_priv" table        $local_query = 'SELECT DISTINCT Db FROM mysql.tables_priv WHERE Table_priv LIKE \'%Select%\' AND User = \'' . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . '\'';        $rs          = PMA_DBI_try_query($local_query, $GLOBALS['controllink']);        if ($rs && @PMA_DBI_num_rows($rs)) {            while ($row = PMA_DBI_fetch_assoc($rs)) {                if (!in_array($row['Db'], $dblist)) {                    $dblist[] = $row['Db'];                }            } // end while            PMA_DBI_free_result($rs);        } // end if    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';/** * Handles some variables that may have been sent by the calling script * Note: this can be called also from the db panel to get the privileges of *       a db, in which case we want to keep displaying the tabs of *       the Database panel */if (empty($viewing_mode)) {    $db = $table = '';}/** * Set parameters for links */$url_query = PMA_generate_common_url($db);/** * Defines the urls to return to in case of error in a sql statement */$err_url = 'main.php' . $url_query;/** * Displays the headers */require_once './libraries/header.inc.php';/** * @global boolean Checks for superuser privileges */$is_superuser = PMA_isSuperuser();// now, select the mysql dbif ($is_superuser && !PMA_DRIZZLE) {    PMA_DBI_select_db('mysql', $userlink);}/** * @global array binary log files */$binary_logs = PMA_DRIZZLE    ? null    : PMA_DBI_fetch_result('SHOW MASTER LOGS', 'Log_name', null, null, PMA_DBI_QUERY_STORE);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Charset conversion functions. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}define('PMA_CHARSET_NONE', 0);define('PMA_CHARSET_ICONV', 1);define('PMA_CHARSET_RECODE', 2);define('PMA_CHARSET_ICONV_AIX', 3);// Finally detect which function we will use:if ($cfg['RecodingEngine'] == 'iconv') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('iconv');    }} elseif ($cfg['RecodingEngine'] == 'recode') {    if (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('recode');    }} elseif ($cfg['RecodingEngine'] == 'auto') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } elseif (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;    }} else {    $PMA_recoding_engine = PMA_CHARSET_NONE;}/* Load AIX iconv wrapper if needed */if ($PMA_recoding_engine == PMA_CHARSET_ICONV_AIX) {    include_once './libraries/iconv_wrapper.lib.php';}/** * Converts encoding of text according to parameters with detected * conversion function. * * @param string   source charset * @param string   target charset * @param string   what to convert * * @return  string   converted text * * @access  public * */function PMA_convert_string($src_charset, $dest_charset, $what){    if ($src_charset == $dest_charset) {        return $what;    }    switch ($GLOBALS['PMA_recoding_engine']) {        case PMA_CHARSET_RECODE:            return recode_string($src_charset . '..'  . $dest_charset, $what);        case PMA_CHARSET_ICONV:            return iconv($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        case PMA_CHARSET_ICONV_AIX:            return PMA_aix_iconv_wrapper($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        default:            return $what;    }} //  end of the "PMA_convert_string()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * get some globals */require './libraries/common.inc.php';/* Theme Select */$path_to_themes = $cfg['ThemePath'] . '/';/* set language and charset */require './libraries/header_http.inc.php';/* HTML header */$page_title = 'phpMyAdmin - ' . __('Theme');require './libraries/header_meta_style.inc.php';require './libraries/header_scripts.inc.php';?></head><body id="bodythemes"><h1>phpMyAdmin - <?php echo __('Theme'); ?></h1><p><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/home_page/themes.php'); ?>#pma_<?php echo preg_replace('/([0-9]*)\.([0-9]*)\..*/', '\1_\2', PMA_VERSION); ?>"><?php echo __('Get more themes!'); ?></a></p><?php$_SESSION['PMA_Theme_Manager']->printPreviews();?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * List of avaible forms, each form is described as an array of fields to display. * Fields MUST have their counterparts in the $cfg array. * * To define form field, use the notatnion below: * $forms['Form group']['Form name'] = array('Option/path'); * * You can assign default values set by special button ("set value: ..."), eg.: * 'Servers/1/pmadb' => 'phpmyadmin' * * To group options, use: * ':group:' . __('group name') // just define a group * or * 'option' => ':group' // group starting from this option * End group blocks with: * ':group:end' * * @package PhpMyAdmin */$forms = array();$forms['Features']['General'] = array(    'AjaxEnable',    'VersionCheck',    'NaturalOrder',    'InitialSlidersState',    'ErrorIconic',    'LoginCookieValidity',    'ReplaceHelpImg',    'Servers/1/only_db', // saves to Server/only_db    'Servers/1/hide_db', // saves to Server/hide_db    'SkipLockedTables',    'DisableMultiTableMaintenance',    'MaxDbList',    'MaxTableList',    'ShowHint');$forms['Features']['Text_fields'] = array(    'CharEditing',    'MinSizeForInputField',    'MaxSizeForInputField',    'CharTextareaCols',    'CharTextareaRows',    'TextareaCols',    'TextareaRows',    'LongtextDoubleTextarea');$forms['Features']['Page_titles'] = array(    'TitleDefault',    'TitleTable',    'TitleDatabase',    'TitleServer');$forms['Features']['Warnings'] = array(    'PmaNoRelation_DisableWarning',    'SuhosinDisableWarning',    'McryptDisableWarning');// settings from this form are treated specially, see prefs_forms.php and user_preferences.lib.php$forms['Features']['Developer'] = array(    'Error_Handler/display',    'Error_Handler/gather',    'DBG/sql');$forms['Sql_queries']['Sql_queries'] = array(    'ShowSQL',    'Confirm',    'QueryHistoryMax',    'IgnoreMultiSubmitErrors',    'VerboseMultiSubmit',    'MaxCharactersInDisplayedSQL',    'EditInWindow',    //'QueryWindowWidth', // overridden in theme    //'QueryWindowHeight',    'QueryWindowDefTab',    'RetainQueryBox');$forms['Sql_queries']['Sql_box'] = array(    'SQLQuery/Edit',    'SQLQuery/Explain',    'SQLQuery/ShowAsPHP',    'SQLQuery/Validate',    'SQLQuery/Refresh');$forms['Left_frame']['Left_frame'] = array(    'LeftFrameLight',    'LeftDisplayLogo',    'LeftLogoLink',    'LeftLogoLinkWindow',    'LeftPointerEnable',    'LeftRecentTable');$forms['Left_frame']['Left_databases'] = array(    'DisplayDatabasesList',    'LeftFrameDBTree',    'LeftFrameDBSeparator',    'ShowTooltipAliasDB');$forms['Left_frame']['Left_tables'] = array(    'LeftDisplayTableFilterMinimum',    'LeftDefaultTabTable',    'LeftFrameTableSeparator',    'LeftFrameTableLevel',    'ShowTooltip',    'ShowTooltipAliasTB');$forms['Main_frame']['Startup'] = array(    'MainPageIconic',    'ShowCreateDb' => ':group',        'SuggestDBName',        ':group:end',    'ShowStats',    'ShowServerInfo');$forms['Main_frame']['Browse'] = array(    'NavigationBarIconic',    'PropertiesIconic',    'ShowAll',    'MaxRows',    'Order',    'DisplayBinaryAsHex',    'BrowsePointerEnable',    'BrowseMarkerEnable',    'SaveCellsAtOnce',    'ShowDisplayDirection',    'RepeatCells',    'LimitChars',    'RowActionLinks',    'DefaultDisplay',    'RememberSorting');$forms['Main_frame']['Edit'] = array(    'ProtectBinary',    'ShowFunctionFields',    'ShowFieldTypesInDataEditView',    'InsertRows',    'ForeignKeyDropdownOrder',    'ForeignKeyMaxLimit');$forms['Main_frame']['Tabs'] = array(    'LightTabs',    'DefaultTabServer',    'DefaultTabDatabase',    'DefaultTabTable');$forms['Import']['Import_defaults'] = array(    'Import/format',    'Import/charset',    'Import/allow_interrupt',    'Import/skip_queries');$forms['Import']['Sql'] = array(    'Import/sql_compatibility',    'Import/sql_no_auto_value_on_zero');$forms['Import']['Csv'] = array(    ':group:' . __('CSV'),        'Import/csv_replace',        'Import/csv_ignore',        'Import/csv_terminated',        'Import/csv_enclosed',        'Import/csv_escaped',        'Import/csv_col_names',        ':group:end',    ':group:' . __('CSV using LOAD DATA'),        'Import/ldi_replace',        'Import/ldi_ignore',        'Import/ldi_terminated',        'Import/ldi_enclosed',        'Import/ldi_escaped',        'Import/ldi_local_option');$forms['Import']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Import/ods_col_names',        'Import/ods_empty_rows',        'Import/ods_recognize_percentages',        'Import/ods_recognize_currency');$forms['Export']['Export_defaults'] = array(    'Export/method',    ':group:' . __('Quick'),        'Export/quick_export_onserver',        'Export/quick_export_onserver_overwrite',        ':group:end',    ':group:' . __('Custom'),        'Export/format',        'Export/compression',        'Export/charset',        'Export/asfile' => ':group',            'Export/onserver',            'Export/onserver_overwrite',            ':group:end',        'Export/file_template_table',        'Export/file_template_database',        'Export/file_template_server');$forms['Export']['Sql'] = array(    'Export/sql_include_comments' => ':group',        'Export/sql_dates',        'Export/sql_relation',        'Export/sql_mime',        ':group:end',    'Export/sql_use_transaction',    'Export/sql_disable_fk',    'Export/sql_compatibility',    ':group:' . __('Database export options'),        'Export/sql_drop_database',        'Export/sql_structure_or_data',        ':group:end',    ':group:' . __('Structure'),        'Export/sql_drop_table',        'Export/sql_procedure_function',        'Export/sql_create_table_statements' => ':group',            'Export/sql_if_not_exists',            'Export/sql_auto_increment',            ':group:end',        'Export/sql_backquotes',        ':group:end',    ':group:' . __('Data'),        'Export/sql_delayed',        'Export/sql_ignore',        'Export/sql_type',        'Export/sql_insert_syntax',        'Export/sql_max_query_size',        'Export/sql_hex_for_blob',        'Export/sql_utc_time');$forms['Export']['CodeGen'] = array(    'Export/codegen_format');$forms['Export']['Csv'] = array(    ':group:' . __('CSV'),        'Export/csv_separator',        'Export/csv_enclosed',        'Export/csv_escaped',        'Export/csv_terminated',        'Export/csv_null',        'Export/csv_removeCRLF',        'Export/csv_columns',        ':group:end',    ':group:' . __('CSV for MS Excel'),        'Export/excel_null',        'Export/excel_removeCRLF',        'Export/excel_columns',        'Export/excel_edition');$forms['Export']['Latex'] = array(    'Export/latex_caption',    'Export/latex_structure_or_data',    ':group:' . __('Structure'),        'Export/latex_structure_caption',        'Export/latex_structure_continued_caption',        'Export/latex_structure_label',        'Export/latex_relation',        'Export/latex_comments',        'Export/latex_mime',        ':group:end',    ':group:' . __('Data'),        'Export/latex_columns',        'Export/latex_data_caption',        'Export/latex_data_continued_caption',        'Export/latex_data_label',        'Export/latex_null');$forms['Export']['Microsoft_Office'] = array(    ':group:' . __('Microsoft Word 2000'),        'Export/htmlword_structure_or_data',        'Export/htmlword_null',        'Export/htmlword_columns');$forms['Export']['Open_Document'] = array(    ':group:' . __('Open Document Spreadsheet'),        'Export/ods_columns',        'Export/ods_null',        ':group:end',    ':group:' . __('Open Document Text'),        'Export/odt_structure_or_data',        ':group:' . __('Structure'),            'Export/odt_relation',            'Export/odt_comments',            'Export/odt_mime',            ':group:end',        ':group:' . __('Data'),            'Export/odt_columns',            'Export/odt_null');$forms['Export']['Texy'] = array(    'Export/texytext_structure_or_data',    ':group:' . __('Data'),        'Export/texytext_null',        'Export/texytext_columns');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__link_info(){    return array(        'info' => __('Displays a link to download this image.'),        );}/** * */function PMA_transformation_image_jpeg__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]">[BLOB]</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This Class interacts with the user to gather the information * about their tables for which they want to export the relational schema * export options are shown to user from they can choose */class PMA_User_Schema{    public $chosenPage;    public $autoLayoutForeign;    public $autoLayoutInternal;    public $pageNumber;    public $c_table_rows;    public $action;    public function setAction($value)    {        $this->action = $value;    }    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * $this->action tells what the Schema is supposed to do     * create and select a page, generate schema etc     *     * @access public     * @return void     */    public function processUserChoice()    {        global $action_choose, $db, $cfgRelation;        if (isset($this->action)) {            switch ($this->action) {            case 'selectpage':                $this->chosenPage = $_REQUEST['chpage'];                if ($action_choose=="1") {                    $this->deleteCoordinates(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->deletePages(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->chosenPage = 0;                }                break;            case 'createpage':                $this->pageNumber = PMA_REL_create_page(                    $_POST['newpage'],                    $cfgRelation,                    $db                );                $this->autoLayoutForeign = isset($_POST['auto_layout_foreign'])                    ? "1"                    : null;                $this->autoLayoutInternal = isset($_POST['auto_layout_internal'])                    ? "1"                    : null;                $this->processRelations(                    $db,                    $this->pageNumber,                    $cfgRelation                );                break;            case 'edcoord':                $this->chosenPage = $_POST['chpage'];                $this->c_table_rows = $_POST['c_table_rows'];                $this->_editCoordinates($db, $cfgRelation);                break;            case 'delete_old_references':                $this->_deleteTableRows(                    $_POST['delrow'],                    $cfgRelation,                    $db,                    $_POST['chpage']                );                break;            case 'process_export':                $this->_processExportSchema();                break;            } // end switch        } // end if (isset($do))    }    /**     * shows/displays the HTML FORM to create the page     *     * @param string $db name of the selected database     *     * @return void     * @access public     */    public function showCreatePageDialog($db)    {        ?>        <form method="post" action="schema_edit.php" name="frm_create_page">        <fieldset>        <legend>        <?php echo __('Create a page') . "\n"; ?>        </legend>        <?php echo PMA_generate_common_hidden_inputs($db); ?>        <input type="hidden" name="do" value="createpage" />        <table>        <tr>        <td><label for="id_newpage"><?php echo __('Page name'); ?></label></td>        <td><input type="text" name="newpage" id="id_newpage" size="20" maxlength="50" /></td>        </tr>        <tr>        <td><?php echo __('Automatic layout based on'); ?></td>        <td>        <input type="checkbox" name="auto_layout_internal" id="id_auto_layout_internal" /><label for="id_auto_layout_internal">        <?php echo __('Internal relations'); ?></label><br />        <?php        /*         * Check to see whether INNODB and PBXT storage engines are Available in MYSQL PACKAGE         * If available, then provide AutoLayout for Foreign Keys in Schema View         */        if (PMA_StorageEngine::isValid('InnoDB') || PMA_StorageEngine::isValid('PBXT')) {            ?>            <input type="checkbox" name="auto_layout_foreign" id="id_auto_layout_foreign" /><label for="id_auto_layout_foreign">            <?php echo __('FOREIGN KEY'); ?></label><br />            <?php        }        ?>        </td></tr>        </table>        </fieldset>        <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />        </fieldset>        </form>        <?php    }    /**     * shows/displays the created page names in a drop down list     * User can select any page number and edit it using dashboard etc     *     * @return void     * @access public     */    public function selectPage()    {        global $db,$table,$cfgRelation;        $page_query = 'SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';        $page_rs    = PMA_query_as_controluser($page_query, false, PMA_DBI_QUERY_STORE);        if ($page_rs && PMA_DBI_num_rows($page_rs) > 0) {            ?>            <form method="get" action="schema_edit.php" name="frm_select_page">            <fieldset>            <legend>            <?php echo __('Please choose a page to edit') . "\n"; ?>            </legend>            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="do" value="selectpage" />            <select name="chpage" id="chpage" class="autosubmit">            <option value="0"><?php echo __('Select page'); ?></option>            <?php            while ($curr_page = PMA_DBI_fetch_assoc($page_rs)) {                echo "\n" . '        '                    . '<option value="' . $curr_page['page_nr'] . '"';                if (isset($this->chosenPage)                    && $this->chosenPage == $curr_page['page_nr']                ) {                    echo ' selected="selected"';                }                echo '>' . $curr_page['page_nr'] . ': '                    . htmlspecialchars($curr_page['page_descr']) . '</option>';            } // end while            echo "\n";            ?>            </select>            <?php            $choices = array(                 '0' => __('Edit'),                 '1' => __('Delete')            );            PMA_display_html_radio('action_choose', $choices, '0', false);            unset($choices);            ?>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" /><br />            </fieldset>            </form>            <?php        } // end IF        echo "\n";    } // end function    /**     * A dashboard is displayed to AutoLayout the position of tables     * users can drag n drop the tables and change their positions     *     * @return void     * @access public     */    public function showTableDashBoard()    {        global $db, $cfgRelation, $table, $with_field_names;        /*         * We will need an array of all tables in this db         */        $selectboxall = array('--');        $alltab_rs    = PMA_DBI_query(            'SHOW TABLES FROM ' . PMA_backquote($db) . ';',            null,            PMA_DBI_QUERY_STORE        );        while ($val = @PMA_DBI_fetch_row($alltab_rs)) {               $selectboxall[] = $val[0];        }        $tabExist = array();        /*         * Now if we already have chosen a page number then we should         * show the tables involved         */        if (isset($this->chosenPage) && $this->chosenPage > 0) {            echo "\n";            ?>            <h2><?php echo __('Select Tables'); ?></h2>            <?php            $page_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db'])                . '.' . PMA_backquote($cfgRelation['table_coords'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';            $page_rs    = PMA_query_as_controluser($page_query, false);            $array_sh_page = array();            while ($temp_sh_page = @PMA_DBI_fetch_assoc($page_rs)) {                   $array_sh_page[] = $temp_sh_page;            }            /*             * Display WYSIWYG parts             */            if (! isset($_POST['with_field_names']) && ! isset($_POST['showwysiwyg'])) {                $with_field_names = true;            }            $this->_displayScratchboardTables($array_sh_page);            ?>            <form method="post" action="schema_edit.php" name="edcoord">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="chpage" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <input type="hidden" name="do" value="edcoord" />            <table border="0">            <tr>                <th><?php echo __('Table'); ?></th>                <th><?php echo __('Delete'); ?></th>                <th>X</th>                <th>Y</th>            </tr>            <?php            if (isset($ctable)) {                unset($ctable);            }            $i = 0;            $odd_row = true;            foreach ($array_sh_page as $dummy_sh_page => $sh_page) {                $_mtab            =  $sh_page['table_name'];                $tabExist[$_mtab] =  false;                echo "\n" . '    <tr class="noclick ';                if ($odd_row) {                    echo 'odd';                } else {                    echo 'even';                }                echo '">';                $odd_row != $odd_row;                echo "\n" . '        <td>'                     . "\n" . '            <select name="c_table_' . $i . '[name]">';                foreach ($selectboxall as $key => $value) {                    echo "\n" . '                <option value="' . htmlspecialchars($value) . '"';                    if ($value == $sh_page['table_name']) {                        echo ' selected="selected"';                        $tabExist[$_mtab] = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>';                }                echo "\n" . '            </select>'                     . "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'x\', this.value)" name="c_table_' . $i . '[x]" value="' . $sh_page['x'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'y\', this.value)" name="c_table_' . $i . '[y]" value="' . $sh_page['y'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '    </tr>';                $i++;            }            /*             * Add one more empty row             */            echo "\n" . '    <tr class="noclick ';            if ($odd_row) {                echo 'odd';            } else {                echo 'even';            }            $odd_row != $odd_row;            echo '">';            echo "\n" . '        <td>'                 . "\n" . '            <select name="c_table_' . $i . '[name]">';            foreach ($selectboxall as $key => $value) {                echo "\n" . '                <option value="' . htmlspecialchars($value) . '">' . htmlspecialchars($value) . '</option>';            }            echo "\n" . '            </select>'                 . "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[x]" value="' . (isset($sh_page['x'])?$sh_page['x']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[y]" value="' . (isset($sh_page['y'])?$sh_page['y']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '    </tr>';            echo "\n" . '    </table>' . "\n";            echo "\n" . '    <input type="hidden" name="c_table_rows" value="' . ($i + 1) . '" />';            echo "\n" . '    <input type="hidden" id="showwysiwyg" name="showwysiwyg" value="' . ((isset($showwysiwyg) && $showwysiwyg == '1') ? '1' : '0') . '" />';            echo "\n" . '    <input type="checkbox" name="with_field_names" ' . (isset($with_field_names) ? 'checked="checked"' : ''). ' />' . __('Column names') . '<br />';            echo "\n" . '    <input type="submit" value="' . __('Save') . '" />';            echo "\n" . '</form>' . "\n\n";        } // end if        if (isset($tabExist)) {            $this->_deleteTables($db, $this->chosenPage, $tabExist);        }    }    /**     * show Export relational schema generation options     * user can select export type of his own choice     * and the attributes related to it     *     * @return void     * @access public     */    public function displaySchemaGenerationOptions()    {        global $cfg,$pmaThemeImage,$db,$test_rs,$chpage;        ?>        <form method="post" action="schema_export.php">            <fieldset>            <legend>            <?php            echo PMA_generate_common_hidden_inputs($db);            if ($cfg['PropertiesIconic']) {                echo PMA_getImage('b_views.png');            }            echo __('Display relational schema');            ?>:            </legend>            <select name="export_type" id="export_type">                <option value="pdf" selected="selected">PDF</option>                <option value="svg">SVG</option>                <option value="dia">DIA</option>                <option value="visio">Visio</option>                <option value="eps">EPS</option>            </select>            <label><?php echo __('Select Export Relational Type');?></label><br />            <?php            if (isset($test_rs)) {            ?>            <label for="pdf_page_number_opt"><?php echo __('Page number:'); ?></label>            <select name="pdf_page_number" id="pdf_page_number_opt">                <?php                while ($pages = @PMA_DBI_fetch_assoc($test_rs)) {                    echo '                <option value="' . $pages['page_nr'] . '">'                        . $pages['page_nr'] . ': ' . htmlspecialchars($pages['page_descr']) . '</option>' . "\n";                } // end while                PMA_DBI_free_result($test_rs);                unset($test_rs);                ?>            </select><br />            <?php } else { ?>            <input type="hidden" name="pdf_page_number" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <?php } ?>            <input type="hidden" name="do" value="process_export" />            <input type="hidden" name="chpage" value="<?php echo $chpage; ?>" />            <input type="checkbox" name="show_grid" id="show_grid_opt" />            <label for="show_grid_opt"><?php echo __('Show grid'); ?></label><br />            <input type="checkbox" name="show_color" id="show_color_opt" checked="checked" />            <label for="show_color_opt"><?php echo __('Show color'); ?></label><br />            <input type="checkbox" name="show_table_dimension" id="show_table_dim_opt" />            <label for="show_table_dim_opt"><?php echo __('Show dimension of tables'); ?>            </label><br />            <input type="checkbox" name="all_table_same_wide" id="all_table_same_wide" />            <label for="all_table_same_wide"><?php echo __('Display all tables with the same width'); ?>            </label><br />            <input type="checkbox" name="with_doc" id="with_doc" checked="checked" />            <label for="with_doc"><?php echo __('Data Dictionary'); ?></label><br />            <input type="checkbox" name="show_keys" id="show_keys" />            <label for="show_keys"><?php echo __('Only show keys'); ?></label><br />            <select name="orientation" id="orientation_opt" onchange="refreshDragOption('pdflayout');" >                <option value="L"><?php echo __('Landscape');?></option>                <option value="P"><?php echo __('Portrait');?></option>            </select>            <label for="orientation_opt"><?php echo __('Orientation'); ?></label>            <br />            <select name="paper" id="paper_opt" onchange="refreshDragOption('pdflayout');">                <?php                foreach ($cfg['PDFPageSizes'] as $key => $val) {                        echo '<option value="' . $val . '"';                        if ($val == $cfg['PDFDefaultPageSize']) {                            echo ' selected="selected"';                        }                        echo ' >' . $val . '</option>' . "\n";                }                ?>            </select>            <label for="paper_opt"><?php echo __('Paper size'); ?></label>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" />            </fieldset>        </form>        <?php    }    /**    * Check if there are tables that need to be deleted in dashboard,    * if there are, ask the user for allowance    *    * @param string  $db       name of database selected    * @param integer $chpage   selected page    * @param array   $tabExist    *    * @return void    * @access private    */    private function _deleteTables($db, $chpage, $tabExist)    {        global $table;        $_strtrans  = '';        $_strname   = '';        $shoot      = false;        if (! empty($tabExist) && is_array($tabExist)) {            foreach ($tabExist as $key => $value) {                if (! $value) {                    $_strtrans  .= '<input type="hidden" name="delrow[]" value="' . htmlspecialchars($key) . '" />' . "\n";                    $_strname   .= '<li>' . htmlspecialchars($key) . '</li>' . "\n";                    $shoot       = true;                }            }            if ($shoot) {                echo '<form action="schema_edit.php" method="post">' . "\n"                    . PMA_generate_common_hidden_inputs($db)                    . '<input type="hidden" name="do" value="delete_old_references" />' . "\n"                    . '<input type="hidden" name="chpage" value="' . htmlspecialchars($chpage) . '" />' . "\n"                    . __('The current page has references to tables that no longer exist. Would you like to delete those references?')                    . '<ul>' . "\n"                    . $_strname                    . '</ul>' . "\n"                    . $_strtrans                    . '<input type="submit" value="' . __('Go') . '" />' . "\n"                    . '</form>';            }        }    }    /**     * Check if there are tables that need to be deleted in dashboard,     * if there are, ask the user for allowance     *     * @return void     * @access private     */    private function _displayScratchboardTables($array_sh_page)    {        global $with_field_names, $db;        ?>        <script type="text/javascript" src="./js/dom-drag.js"></script>        <form method="post" action="schema_edit.php" name="dragdrop">        <input type="button" name="dragdrop" value="<?php echo __('Toggle scratchboard'); ?>" onclick="ToggleDragDrop('pdflayout');" />        <input type="button" name="dragdropreset" value="<?php echo __('Reset'); ?>" onclick="resetDrag();" />        </form>        <div id="pdflayout" class="pdflayout" style="visibility: hidden;">        <?php        $draginit = '';        $draginit2 = '';        $reset_draginit = '';        $i = 0;        foreach ($array_sh_page as $key => $temp_sh_page) {            $drag_x = $temp_sh_page['x'];            $drag_y = $temp_sh_page['y'];            $draginit2      .= ' Drag.init($("#table_' . $i . '")[0], null, 0, parseInt(myid.style.width)-2, 0, parseInt(myid.style.height)-5);' . "\n";            $draginit2      .= '    $("#table_' . $i . '")[0].onDrag = function (x, y) { document.edcoord.elements["c_table_' . $i . '[x]"].value = parseInt(x); document.edcoord.elements["c_table_' . $i . '[y]"].value = parseInt(y) }' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.left = "' . $drag_x . 'px";' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.top  = "' . $drag_y . 'px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.left = "2px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.top  = "' . (15 * $i) . 'px";' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[x]"].value = "2"' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[y]"].value = "' . (15 * $i) . '"' . "\n";            echo '<div id="table_' . $i . '" class="pdflayout_table"><u>' . $temp_sh_page['table_name'] . '</u>';            if (isset($with_field_names)) {                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);                // if the table has been dropped from outside phpMyAdmin,                // we can no longer obtain its columns list                if ($fields) {                    foreach ($fields as $row) {                        echo '<br />' . htmlspecialchars($row['Field']) . "\n";                    }                }            }            echo '</div>' . "\n";            $i++;        }        ?>        </div>        <script type="text/javascript">        //<![CDATA[        function PDFinit() {            refreshLayout();            myid = $('#pdflayout')[0];            <?php echo $draginit; ?>            TableDragInit();        }        function TableDragInit() {            myid = $('#pdflayout')[0];            <?php echo $draginit2; ?>        }        function resetDrag() {            <?php echo $reset_draginit; ?>        }        //]]>        </script>        <?php    }    /**     * delete the table rows with table co-ordinates     *     * @param int     $delrow      delete selected table from list of tables     * @param array   $cfgRelation relation settings     * @param string  $db          database name     * @param integer $chpage      selected page for adding relations etc     *     * @return void     * @access private     */    private function _deleteTableRows($delrow,$cfgRelation,$db,$chpage)    {        foreach ($delrow as $current_row) {            $del_query = 'DELETE FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' ' . "\n"                .   ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'' . "\n"                .   ' AND table_name = \'' . PMA_sqlAddSlashes($current_row) . '\'' . "\n"                .   ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($chpage) . '\'';                echo $del_query;            PMA_query_as_controluser($del_query, false);        }    }    /**     * get all the export options and verify     * call and include the appropriate Schema Class depending on $export_type     *     * @return void     * @access private     */    private function _processExportSchema()    {        /**        * Settings for relation stuff        */        include_once './libraries/transformations.lib.php';        include_once './libraries/Index.class.php';        /**         * default is PDF, otherwise validate it's only letters a-z         */        global  $db,$export_type;        if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {            $export_type = 'pdf';        }        PMA_DBI_select_db($db);        include "./libraries/schema/" . ucfirst($export_type) . "_Relation_Schema.class.php";        $obj_schema = eval("new PMA_" . ucfirst($export_type) . "_Relation_Schema();");    }    /**     * delete X and Y coordinates     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deleteCoordinates($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * delete pages     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deletePages($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   page_nr = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * process internal and foreign key relations     *     * @param string  $db          The database name     * @param integer $pageNumber  document number/Id     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function processRelations($db, $pageNumber, $cfgRelation)    {        /*         * A u t o m a t i c    l a y o u t         *         * There are 2 kinds of relations in PMA         * 1) Internal Relations 2) Foreign Key Relations         */        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $all_tables = array();        }        if (isset($this->autoLayoutForeign)) {            /*             * get the tables list             * who support FOREIGN KEY, it's not             * important that we group together InnoDB tables             * and PBXT tables, as this logic is just to put             * the tables on the layout, not to determine relations             */            $tables = PMA_DBI_get_tables_full($db);            $foreignkey_tables = array();            foreach ($tables as $table_name => $table_properties) {                if (PMA_foreignkey_supported($table_properties['ENGINE'])) {                    $foreignkey_tables[] = $table_name;                }            }            $all_tables = $foreignkey_tables;            /*             * could be improved by finding the tables which have the             * most references keys and placing them at the beginning             * of the array (so that they are all center of schema)             */            unset($tables, $foreignkey_tables);        }        if (isset($this->autoLayoutInternal)) {            /*             * get the tables list who support Internal Relations;             * This type of relations will be created when             * you setup the PMA tables correctly             */            $master_tables = 'SELECT COUNT(master_table), master_table'                . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['relation'])                . ' WHERE master_db = \'' . PMA_sqlAddSlashes($db) . '\''                . ' GROUP BY master_table'                . ' ORDER BY COUNT(master_table) DESC';            $master_tables_rs = PMA_query_as_controluser(                $master_tables, false, PMA_DBI_QUERY_STORE            );            if ($master_tables_rs && PMA_DBI_num_rows($master_tables_rs) > 0) {                /* first put all the master tables at beginning                 * of the list, so they are near the center of                 * the schema                 */                while (list(, $master_table) = PMA_DBI_fetch_row($master_tables_rs)) {                       $all_tables[] = $master_table;                }                /* Now for each master, add its foreigns into an array                 * of foreign tables, if not already there                 * (a foreign might be foreign for more than                 * one table, and might be a master itself)                 */                $foreign_tables = array();                foreach ($all_tables as $master_table) {                    $foreigners = PMA_getForeigners($db, $master_table);                    foreach ($foreigners as $foreigner) {                        if (! in_array($foreigner['foreign_table'], $foreign_tables)) {                            $foreign_tables[] = $foreigner['foreign_table'];                        }                    }                }                /*                 * Now merge the master and foreign arrays/tables                 */                foreach ($foreign_tables as $foreign_table) {                    if (! in_array($foreign_table, $all_tables)) {                        $all_tables[] = $foreign_table;                    }                }            }        }        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $this->addRelationCoordinates(                $all_tables, $pageNumber, $db, $cfgRelation            );        }        $this->chosenPage = $pageNumber;    }    /**     * Add X and Y coordinates for a table     *     * @param array   $all_tables  A list of all tables involved     * @param integer $pageNumber  document number/Id     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function addRelationCoordinates($all_tables, $pageNumber, $db, $cfgRelation)    {        /*         * Now generate the coordinates for the schema         * in a clockwise spiral and add to co-ordinates table         */        $pos_x = 300;        $pos_y = 300;        $delta = 110;        $delta_mult = 1.10;        $direction = "right";        foreach ($all_tables as $current_table) {            /*            * save current table's coordinates            */            $insert_query = 'INSERT INTO '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' '                . '(db_name, table_name, pdf_page_number, x, y) '                . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                . PMA_sqlAddSlashes($current_table) . '\',' . $pageNumber                . ',' . $pos_x . ',' . $pos_y . ')';            PMA_query_as_controluser($insert_query, false);            /*             * compute for the next table             */            switch ($direction) {            case 'right':                $pos_x    += $delta;                $direction = "down";                $delta    *= $delta_mult;                break;            case 'down':                $pos_y    += $delta;                $direction = "left";                $delta    *= $delta_mult;                break;            case 'left':                $pos_x    -= $delta;                $direction = "up";                $delta    *= $delta_mult;                break;            case 'up':                $pos_y    -= $delta;                $direction = "right";                $delta    *= $delta_mult;                break;            }        }    }    /**     * update X and Y coordinates for a table     *     * @param string $db          The database name     * @param array  $cfgRelation relation settings     *     * @return void     * @access private     */    private function _editCoordinates($db, $cfgRelation)    {        for ($i = 0; $i < $this->c_table_rows; $i++) {            $arrvalue = 'c_table_' . $i;            global $$arrvalue;            $arrvalue = $$arrvalue;            if (! isset($arrvalue['x']) || $arrvalue['x'] == '') {                $arrvalue['x'] = 0;            }            if (! isset($arrvalue['y']) || $arrvalue['y'] == '') {                $arrvalue['y'] = 0;            }            if (isset($arrvalue['name']) && $arrvalue['name'] != '--') {                $test_query = 'SELECT * FROM '                    . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name = \'' .  PMA_sqlAddSlashes($db) . '\''                    . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                    . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                $test_rs = PMA_query_as_controluser($test_query, false, PMA_DBI_QUERY_STORE);                //echo $test_query;                if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {                    if (isset($arrvalue['delete']) && $arrvalue['delete'] == 'y') {                        $ch_query = 'DELETE FROM '                            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                            . PMA_backquote($cfgRelation['table_coords'])                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    } else {                        $ch_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                            . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                            . 'SET x = ' . $arrvalue['x'] . ', y= ' . $arrvalue['y']                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    }                } else {                    $ch_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                        . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                        . '(db_name, table_name, pdf_page_number, x, y) '                        . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                        . PMA_sqlAddSlashes($arrvalue['name']) . '\', \''                        . PMA_sqlAddSlashes($this->chosenPage) . '\','                        . $arrvalue['x'] . ',' . $arrvalue['y'] . ')';                }                //echo $ch_query;                PMA_query_as_controluser($ch_query, false);            } // end if        } // end for    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library that provides common import functions that are used by import plugins * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need to know something about user */require_once './libraries/check_user_privileges.lib.php';/** * We do this check, DROP DATABASE does not need to be confirmed elsewhere */define('PMA_CHK_DROP', 1);/** *  Check whether timeout is getting close * *  @return boolean true if timeout is close *  @access public */function PMA_checkTimeout(){    global $timestamp, $maximum_time, $timeout_passed;    if ($maximum_time == 0) {        return false;    } elseif ($timeout_passed) {        return true;    /* 5 in next row might be too much */    } elseif ((time() - $timestamp) > ($maximum_time - 5)) {        $timeout_passed = true;        return true;    } else {        return false;    }}/** *  Detects what compression filse uses * *  @param string  $filepath  filename to check *  @return string MIME type of compression, none for none *  @access public */function PMA_detectCompression($filepath){    $file = @fopen($filepath, 'rb');    if (!$file) {        return false;    }    $test = fread($file, 4);    $len = strlen($test);    fclose($file);    if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {        return 'application/gzip';    }    if ($len >= 3 && substr($test, 0, 3) == 'BZh') {        return 'application/bzip2';    }    if ($len >= 4 && $test == "PK\003\004") {        return 'application/zip';    }    return 'none';}/** * Runs query inside import buffer. This is needed to allow displaying * of last SELECT, SHOW or HANDLER results and similar nice stuff. * * @param string  $sql          query to run * @param string  $full         query to display, this might be commented * @param bool    $controluser  whether to use control user for queries * @access public */function PMA_importRunQuery($sql = '', $full = '', $controluser = false){    global $import_run_buffer, $go_sql, $complete_query, $display_query,        $sql_query, $my_die, $error, $reload,        $last_query_with_results,        $skip_queries, $executed_queries, $max_sql_len, $read_multiply,        $cfg, $sql_query_disabled, $db, $run_query, $is_superuser;    $read_multiply = 1;    if (isset($import_run_buffer)) {        // Should we skip something?        if ($skip_queries > 0) {            $skip_queries--;        } else {            if (!empty($import_run_buffer['sql']) && trim($import_run_buffer['sql']) != '') {                $max_sql_len = max($max_sql_len, strlen($import_run_buffer['sql']));                if (!$sql_query_disabled) {                    $sql_query .= $import_run_buffer['full'];                }                if (!$cfg['AllowUserDropDatabase']                    && !$is_superuser                    && preg_match('@^[[:space:]]*DROP[[:space:]]+(IF EXISTS[[:space:]]+)?DATABASE @i', $import_run_buffer['sql'])                ) {                    $GLOBALS['message'] = PMA_Message::error(__('"DROP DATABASE" statements are disabled.'));                    $error = true;                } else {                    $executed_queries++;                    if ($run_query                        && $GLOBALS['finished']                        && empty($sql)                        && !$error                        && ((!empty($import_run_buffer['sql'])                        && preg_match('/^[\s]*(SELECT|SHOW|HANDLER)/i', $import_run_buffer['sql']))                        || ($executed_queries == 1))                    ) {                        $go_sql = true;                        if (!$sql_query_disabled) {                            $complete_query = $sql_query;                            $display_query = $sql_query;                        } else {                            $complete_query = '';                            $display_query = '';                        }                        $sql_query = $import_run_buffer['sql'];                        // If a 'USE <db>' SQL-clause was found, set our current $db to the new one                        list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                    } elseif ($run_query) {                        if ($controluser) {                            $result = PMA_query_as_controluser($import_run_buffer['sql']);                        } else {                            $result = PMA_DBI_try_query($import_run_buffer['sql']);                        }                        $msg = '# ';                        if ($result === false) { // execution failed                            if (! isset($my_die)) {                                $my_die = array();                            }                            $my_die[] = array('sql' => $import_run_buffer['full'], 'error' => PMA_DBI_getError());                            if ($cfg['VerboseMultiSubmit']) {                                $msg .= __('Error');                            }                            if (!$cfg['IgnoreMultiSubmitErrors']) {                                $error = true;                                return;                            }                        } elseif ($cfg['VerboseMultiSubmit']) {                            $a_num_rows = (int)@PMA_DBI_num_rows($result);                            $a_aff_rows = (int)@PMA_DBI_affected_rows();                            if ($a_num_rows > 0) {                                $msg .= __('Rows'). ': ' . $a_num_rows;                                $last_query_with_results = $import_run_buffer['sql'];                            } elseif ($a_aff_rows > 0) {                                $message = PMA_Message::affected_rows($a_aff_rows);                                $msg .= $message->getMessage();                            } else {                                $msg .= __('MySQL returned an empty result set (i.e. zero rows).');                            }                        }                        if (!$sql_query_disabled) {                            $sql_query .= $msg . "\n";                        }                        // If a 'USE <db>' SQL-clause was found and the query succeeded, set our current $db to the new one                        if ($result != false) {                            list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                        }                        if ($result != false                            && preg_match('@^[\s]*(DROP|CREATE)[\s]+(IF EXISTS[[:space:]]+)?(TABLE|DATABASE)[[:space:]]+(.+)@im', $import_run_buffer['sql'])                        ) {                            $reload = true;                        }                    } // end run query                } // end if not DROP DATABASE            // end non empty query            } elseif (!empty($import_run_buffer['full'])) {                if ($go_sql) {                    $complete_query .= $import_run_buffer['full'];                    $display_query .= $import_run_buffer['full'];                } else {                    if (!$sql_query_disabled) {                        $sql_query .= $import_run_buffer['full'];                    }                }            }            // check length of query unless we decided to pass it to sql.php            // (if $run_query is false, we are just displaying so show            // the complete query in the textarea)            if (! $go_sql && $run_query) {                if ($cfg['VerboseMultiSubmit'] && ! empty($sql_query)) {                    if (strlen($sql_query) > 50000 || $executed_queries > 50 || $max_sql_len > 1000) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                } else {                    if (strlen($sql_query) > 10000 || $executed_queries > 10 || $max_sql_len > 500) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                }            }        } // end do query (no skip)    } // end buffer exists    // Do we have something to push into buffer?    if (!empty($sql) || !empty($full)) {        $import_run_buffer = array('sql' => $sql, 'full' => $full);    } else {        unset($GLOBALS['import_run_buffer']);    }}/** * Looks for the presence of USE to possibly change current db * * @param string  $buffer  buffer to examine * @param string  $db      current db * @param bool    $reload  reload * @return array (current or new db, whether to reload) * @access public */function PMA_lookForUse($buffer, $db, $reload){    if (preg_match('@^[\s]*USE[[:space:]]+([\S]+)@i', $buffer, $match)) {        $db = trim($match[1]);        $db = trim($db, ';'); // for example, USE abc;        $reload = true;    }    return(array($db, $reload));}/** * Returns next part of imported file/buffer * * @param int  $size  size of buffer to read (this is maximal size function will return) * @return string part of file/buffer * @access public */function PMA_importGetNextChunk($size = 32768){    global $compression, $import_handle, $charset_conversion, $charset_of_file,        $read_multiply;    // Add some progression while reading large amount of data    if ($read_multiply <= 8) {        $size *= $read_multiply;    } else {        $size *= 8;    }    $read_multiply++;    // We can not read too much    if ($size > $GLOBALS['read_limit']) {        $size = $GLOBALS['read_limit'];    }    if (PMA_checkTimeout()) {        return false;    }    if ($GLOBALS['finished']) {        return true;    }    if ($GLOBALS['import_file'] == 'none') {        // Well this is not yet supported and tested, but should return content of textarea        if (strlen($GLOBALS['import_text']) < $size) {            $GLOBALS['finished'] = true;            return $GLOBALS['import_text'];        } else {            $r = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['offset'] += $size;            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            return $r;        }    }    switch ($compression) {        case 'application/bzip2':            $result = bzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/gzip':            $result = gzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/zip':            $result = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            $GLOBALS['finished'] = empty($GLOBALS['import_text']);            break;        case 'none':            $result = fread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;    }    $GLOBALS['offset'] += $size;    if ($charset_conversion) {        return PMA_convert_string($charset_of_file, 'utf-8', $result);    } else {        /**         * Skip possible byte order marks (I do not think we need more         * charsets, but feel free to add more, you can use wikipedia for         * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)         *         * @todo BOM could be used for charset autodetection         */        if ($GLOBALS['offset'] == $size) {            // UTF-8            if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                $result = substr($result, 3);            // UTF-16 BE, LE            } elseif (strncmp($result, "\xFE\xFF", 2) == 0 || strncmp($result, "\xFF\xFE", 2) == 0) {                $result = substr($result, 2);            }        }        return $result;    }}/** * Returns the "Excel" column name (i.e. 1 = "A", 26 = "Z", 27 = "AA", etc.) * * This functions uses recursion to build the Excel column name. * * The column number (1-26) is converted to the responding ASCII character (A-Z) and returned. * * If the column number is bigger than 26 (= num of letters in alfabet), * an extra character needs to be added. To find this extra character, the number is divided by 26 * and this value is passed to another instance of the same function (hence recursion). * In that new instance the number is evaluated again, and if it is still bigger than 26, it is divided again * and passed to another instance of the same function. This continues until the number is smaller than 26. * Then the last called function returns the corresponding ASCII character to the function that called it. * Each time a called function ends an extra character is added to the column name. * When the first function is reached, the last character is addded and the complete column name is returned. * * @access  public * * @param int $num * @return  string The column's "Excel" name */function PMA_getColumnAlphaName($num){    $A = 65; // ASCII value for capital "A"    $col_name = "";    if ($num > 26) {        $div = (int)($num / 26);        $remain = (int)($num % 26);        // subtract 1 of divided value in case the modulus is 0,        // this is necessary because A-Z has no 'zero'        if ($remain == 0) {            $div--;        }        // recursive function call        $col_name = PMA_getColumnAlphaName($div);        // use modulus as new column number        $num = $remain;    }    if ($num == 0) {        // use 'Z' if column number is 0,        // this is necessary because A-Z has no 'zero'        $col_name .= chr(($A + 26) - 1);    } else {        // convert column number to ASCII character        $col_name .= chr(($A + $num) - 1);    }    return $col_name;}/** * Returns the column number based on the Excel name. * So "A" = 1, "Z" = 26, "AA" = 27, etc. * * Basicly this is a base26 (A-Z) to base10 (0-9) conversion. * It iterates through all characters in the column name and * calculates the corresponding value, based on character value * (A = 1, ..., Z = 26) and position in the string. * * @access  public * * @param string $name (i.e. "A", or "BC", etc.) * @return  int The column number */function PMA_getColumnNumberFromName($name){    if (!empty($name)) {        $name = strtoupper($name);        $num_chars = strlen($name);        $column_number = 0;        for ($i = 0; $i < $num_chars; ++$i) {        // read string from back to front        $char_pos = ($num_chars - 1) - $i;        // convert capital character to ASCII value        // and subtract 64 to get corresponding decimal value        // ASCII value of "A" is 65, "B" is 66, etc.        // Decimal equivalent of "A" is 1, "B" is 2, etc.        $number = (ord($name[$char_pos]) - 64);        // base26 to base10 conversion : multiply each number        // with corresponding value of the position, in this case        // $i=0 : 1; $i=1 : 26; $i=2 : 676; ...        $column_number += $number * pow(26, $i);        }        return $column_number;    } else {        return 0;    }}/** * Constants definitions *//* MySQL type defs */define("NONE",      0);define("VARCHAR",   1);define("INT",       2);define("DECIMAL",   3);define("BIGINT",    4);define("GEOMETRY",  5);/* Decimal size defs */define("M",         0);define("D",         1);define("FULL",      2);/* Table array defs */define("TBL_NAME",  0);define("COL_NAMES", 1);define("ROWS",      2);/* Analysis array defs */define("TYPES",        0);define("SIZES",        1);define("FORMATTEDSQL", 2);/** * Obtains the precision (total # of digits) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Precision of the given decimal size notation */function PMA_getM($last_cumulative_size){    return (int)substr($last_cumulative_size, 0, strpos($last_cumulative_size, ","));}/** * Obtains the scale (# of digits to the right of the decimal point) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Scale of the given decimal size notation */function PMA_getD($last_cumulative_size){    return (int)substr($last_cumulative_size, (strpos($last_cumulative_size, ",") + 1), (strlen($last_cumulative_size) - strpos($last_cumulative_size, ",")));}/** * Obtains the decimal size of a given cell * * @access  public * * @param string &$cell * @return  array Contains the precision, scale, and full size representation of the given decimal cell */function PMA_getDecimalSize(&$cell){    $curr_size = strlen((string)$cell);    $decPos = strpos($cell, ".");    $decPrecision = ($curr_size - 1) - $decPos;    $m = $curr_size - 1;    $d = $decPrecision;    return array($m, $d, ($m . "," . $d));}/** * Obtains the size of the given cell * * @todo    Handle the error cases more elegantly * * @access  public * * @param string $last_cumulative_size    Last cumulative column size * @param int    $last_cumulative_type    Last cumulative column type  (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param int    $curr_type               Type of the current cell     (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param string &$cell                   The current cell * @return  string                          Size of the given cell in the type-appropriate format */function PMA_detectSize($last_cumulative_size, $last_cumulative_type, $curr_type, &$cell){    $curr_size = strlen((string)$cell);    /**     * If the cell is NULL, don't treat it as a varchar     */    if (! strcmp('NULL', $cell)) {        return $last_cumulative_size;    }    /**     * What to do if the current cell is of type VARCHAR     */    elseif ($curr_type == VARCHAR) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            if ($curr_size >= $oldM) {                return $curr_size;            } else {                return $oldM;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type DECIMAL     */    elseif ($curr_type == DECIMAL) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            /* Convert $last_cumulative_size from varchar to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[M];            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $size = PMA_getDecimalSize($cell);            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            /* New val if M or D is greater than current largest */            if ($size[M] > $oldM || $size[D] > $oldD) {                /* Take the largest of both types */                return (string)((($size[M] > $oldM) ? $size[M] : $oldM) . "," . (($size[D] > $oldD) ? $size[D] : $oldD));            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            /* Convert $last_cumulative_size from int to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[FULL];            } else {                return ($last_cumulative_size.",".$size[D]);            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            /* First row of the column */            $size = PMA_getDecimalSize($cell);            return $size[FULL];        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type BIGINT or INT     */    elseif ($curr_type == BIGINT || $curr_type == INT) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            $oldInt = $oldM - $oldD;            $newInt = strlen((string)$cell);            /* See which has the larger integer length */            if ($oldInt >= $newInt) {                /* Use old decimal size */                return $last_cumulative_size;            } else {                /* Use $newInt + $oldD as new M */                return (($newInt + $oldD) . "," . $oldD);            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * An error has DEFINITELY occurred     */    else {        /**         * TODO: Handle this MUCH more elegantly         */        return -1;    }}/** * Determines what MySQL type a cell is * * @access  public * * @param int    $last_cumulative_type  Last cumulative column type  (VARCHAR or INT or BIGINT or DECIMAL or NONE) * @param string &$cell                 String representation of the cell for which a best-fit type is to be determined * @return  int                           The MySQL type representation (VARCHAR or INT or BIGINT or DECIMAL or NONE) */function PMA_detectType($last_cumulative_type, &$cell){    /**     * If numeric, determine if decimal, int or bigint     * Else, we call it varchar for simplicity     */    if (! strcmp('NULL', $cell)) {        if ($last_cumulative_type === null || $last_cumulative_type == NONE) {            return NONE;        } else {            return $last_cumulative_type;        }    } elseif (is_numeric($cell)) {        if ($cell == (string)(float)$cell && strpos($cell, ".") !== false && substr_count($cell, ".") == 1) {            return DECIMAL;        } else {        if (abs($cell) > 2147483647) {            return BIGINT;        } else {            return INT;        }        }    } else {        return VARCHAR;    }}/** * Determines if the column types are int, decimal, or string * * @link http://wiki.phpmyadmin.net/pma/Import * * @todo    Handle the error case more elegantly * * @access  public * * @param &$table  array(string $table_name, array $col_names, array $rows) * @return  array    array(array $types, array $sizes) */function PMA_analyzeTable(&$table){    /* Get number of rows in table */    $numRows = count($table[ROWS]);    /* Get number of columns */    $numCols = count($table[COL_NAMES]);    /* Current type for each column */    $types = array();    $sizes = array();    /* Initialize $sizes to all 0's */    for ($i = 0; $i < $numCols; ++$i) {        $sizes[$i] = 0;    }    /* Initialize $types to NONE */    for ($i = 0; $i < $numCols; ++$i) {        $types[$i] = NONE;    }    /* Temp vars */    $curr_type = NONE;    $curr_size = 0;    /* If the passed array is not of the correct form, do not process it */    if (is_array($table) && ! is_array($table[TBL_NAME]) && is_array($table[COL_NAMES]) && is_array($table[ROWS])) {        /* Analyze each column */        for ($i = 0; $i < $numCols; ++$i) {            /* Analyze the column in each row */            for ($j = 0; $j < $numRows; ++$j) {                /* Determine type of the current cell */                $curr_type = PMA_detectType($types[$i], $table[ROWS][$j][$i]);                /* Determine size of the current cell */                $sizes[$i] = PMA_detectSize($sizes[$i], $types[$i], $curr_type, $table[ROWS][$j][$i]);                /**                 * If a type for this column has already been declared,                 * only alter it if it was a number and a varchar was found                 */                if ($curr_type != NONE) {                    if ($curr_type == VARCHAR) {                        $types[$i] = VARCHAR;                    } else if ($curr_type == DECIMAL) {                        if ($types[$i] != VARCHAR) {                            $types[$i] = DECIMAL;                        }                    } else if ($curr_type == BIGINT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL) {                            $types[$i] = BIGINT;                        }                    } else if ($curr_type == INT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL && $types[$i] != BIGINT) {                            $types[$i] = INT;                        }                    }                }            }        }        /* Check to ensure that all types are valid */        $len = count($types);        for ($n = 0; $n < $len; ++$n) {            if (! strcmp(NONE, $types[$n])) {                $types[$n] = VARCHAR;                $sizes[$n] = '10';            }        }        return array($types, $sizes);    } else {        /**         * TODO: Handle this better         */        return false;    }}/* Needed to quell the beast that is PMA_Message */$import_notice = null;/** * Builds and executes SQL statements to create the database and tables * as necessary, as well as insert all the data. * * @link http://wiki.phpmyadmin.net/pma/Import * * @access  public * * @param string  $db_name          Name of the database * @param array   &$tables          Array of tables for the specified database * @param array   &$analyses        Analyses of the tables * @param array   &$additional_sql  Additional SQL statements to be executed * @param array   $options          Associative array of options * @return  void */function PMA_buildSQL($db_name, &$tables, &$analyses = null, &$additional_sql = null, $options = null){    /* Take care of the options */    if (isset($options['db_collation'])&& ! is_null($options['db_collation'])) {        $collation = $options['db_collation'];    } else {        $collation = "utf8_general_ci";    }    if (isset($options['db_charset']) && ! is_null($options['db_charset'])) {        $charset = $options['db_charset'];    } else {        $charset = "utf8";    }    if (isset($options['create_db'])) {        $create_db = $options['create_db'];    } else {        $create_db = true;    }    /* Create SQL code to handle the database */    $sql = array();    if ($create_db) {        if (PMA_DRIZZLE) {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " COLLATE " . $collation;        } else {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " DEFAULT CHARACTER SET " . $charset . " COLLATE " . $collation;        }    }    /**     * The calling plug-in should include this statement, if necessary, in the $additional_sql parameter     *     * $sql[] = "USE " . PMA_backquote($db_name);     */    /* Execute the SQL statements create above */    $sql_len = count($sql);    for ($i = 0; $i < $sql_len; ++$i) {        PMA_importRunQuery($sql[$i], $sql[$i]);    }    /* No longer needed */    unset($sql);    /* Run the $additional_sql statements supplied by the caller plug-in */    if ($additional_sql != null) {        /* Clean the SQL first */        $additional_sql_len = count($additional_sql);        /**         * Only match tables for now, because CREATE IF NOT EXISTS         * syntax is lacking or nonexisting for views, triggers,         * functions, and procedures.         *         * See: http://bugs.mysql.com/bug.php?id=15287         *         * To the best of my knowledge this is still an issue.         *         * $pattern = 'CREATE (TABLE|VIEW|TRIGGER|FUNCTION|PROCEDURE)';         */        $pattern = '/CREATE .*(TABLE)/';        $replacement = 'CREATE \\1 IF NOT EXISTS';        /* Change CREATE statements to CREATE IF NOT EXISTS to support inserting into existing structures */        for ($i = 0; $i < $additional_sql_len; ++$i) {            $additional_sql[$i] = preg_replace($pattern, $replacement, $additional_sql[$i]);            /* Execute the resulting statements */            PMA_importRunQuery($additional_sql[$i], $additional_sql[$i]);        }    }    if ($analyses != null) {        $type_array = array(NONE => "NULL", VARCHAR => "varchar", INT => "int", DECIMAL => "decimal", BIGINT => "bigint", GEOMETRY => 'geometry');        /* TODO: Do more checking here to make sure they really are matched */        if (count($tables) != count($analyses)) {            exit();        }        /* Create SQL code to create the tables */        $tempSQLStr = "";        $num_tables = count($tables);        for ($i = 0; $i < $num_tables; ++$i) {            $num_cols = count($tables[$i][COL_NAMES]);            $tempSQLStr = "CREATE TABLE IF NOT EXISTS " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";            for ($j = 0; $j < $num_cols; ++$j) {                $size = $analyses[$i][SIZES][$j];                if ((int)$size == 0) {                    $size = 10;                }                $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$j]) . " " . $type_array[$analyses[$i][TYPES][$j]];                if ($analyses[$i][TYPES][$j] != GEOMETRY) {                    $tempSQLStr .= "(" . $size . ")";                }                if ($j != (count($tables[$i][COL_NAMES]) - 1)) {                    $tempSQLStr .= ", ";                }            }            $tempSQLStr .= ")"                . (PMA_DRIZZLE ? "" : " DEFAULT CHARACTER SET " . $charset)                . " COLLATE " . $collation . ";";            /**             * Each SQL statement is executed immediately             * after it is formed so that we don't have             * to store them in a (possibly large) buffer             */            PMA_importRunQuery($tempSQLStr, $tempSQLStr);        }    }    /**     * Create the SQL statements to insert all the data     *     * Only one insert query is formed for each table     */    $tempSQLStr = "";    $col_count = 0;    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $num_cols = count($tables[$i][COL_NAMES]);        $num_rows = count($tables[$i][ROWS]);        $tempSQLStr = "INSERT INTO " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";        for ($m = 0; $m < $num_cols; ++$m) {            $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$m]);            if ($m != ($num_cols - 1)) {                $tempSQLStr .= ", ";            }        }        $tempSQLStr .= ") VALUES ";        for ($j = 0; $j < $num_rows; ++$j) {            $tempSQLStr .= "(";            for ($k = 0; $k < $num_cols; ++$k) {                // If fully formatted SQL, no need to enclose with aphostrophes, add shalshes etc.                if ($analyses != null                    && isset($analyses[$i][FORMATTEDSQL][$col_count])                    && $analyses[$i][FORMATTEDSQL][$col_count] == true                ) {                    $tempSQLStr .= (string) $tables[$i][ROWS][$j][$k];                } else {                    if ($analyses != null) {                        $is_varchar = ($analyses[$i][TYPES][$col_count] === VARCHAR);                    } else {                        $is_varchar = !is_numeric($tables[$i][ROWS][$j][$k]);                    }                    /* Don't put quotes around NULL fields */                    if (! strcmp($tables[$i][ROWS][$j][$k], 'NULL')) {                        $is_varchar = false;                    }                    $tempSQLStr .= (($is_varchar) ? "'" : "");                    $tempSQLStr .= PMA_sqlAddSlashes((string)$tables[$i][ROWS][$j][$k]);                    $tempSQLStr .= (($is_varchar) ? "'" : "");                }                if ($k != ($num_cols - 1)) {                    $tempSQLStr .= ", ";                }                if ($col_count == ($num_cols - 1)) {                    $col_count = 0;                } else {                    $col_count++;                }                /* Delete the cell after we are done with it */                unset($tables[$i][ROWS][$j][$k]);            }            $tempSQLStr .= ")";            if ($j != ($num_rows - 1)) {                $tempSQLStr .= ",\n ";            }            $col_count = 0;            /* Delete the row after we are done with it */            unset($tables[$i][ROWS][$j]);        }        $tempSQLStr .= ";";        /**         * Each SQL statement is executed immediately         * after it is formed so that we don't have         * to store them in a (possibly large) buffer         */        PMA_importRunQuery($tempSQLStr, $tempSQLStr);    }    /* No longer needed */    unset($tempSQLStr);    /**     * A work in progress     */    /* Add the viewable structures from $additional_sql to $tables so they are also displayed */    $view_pattern = '@VIEW `[^`]+`\.`([^`]+)@';    $table_pattern = '@CREATE TABLE IF NOT EXISTS `([^`]+)`@';    /* Check a third pattern to make sure its not a "USE `db_name`;" statement */    $regs = array();    $inTables = false;    $additional_sql_len = count($additional_sql);    for ($i = 0; $i < $additional_sql_len; ++$i) {        preg_match($view_pattern, $additional_sql[$i], $regs);        if (count($regs) == 0) {            preg_match($table_pattern, $additional_sql[$i], $regs);        }        if (count($regs)) {            for ($n = 0; $n < $num_tables; ++$n) {                if (!strcmp($regs[1], $tables[$n][TBL_NAME])) {                    $inTables = true;                    break;                }            }            if (!$inTables) {                $tables[] = array(TBL_NAME => $regs[1]);            }        }        /* Reset the array */        $regs = array();        $inTables = false;    }    $params = array('db' => (string)$db_name);    $db_url = 'db_structure.php' . PMA_generate_common_url($params);    $db_ops_url = 'db_operations.php' . PMA_generate_common_url($params);    $message = '<br /><br />';    $message .= '<strong>' . __('The following structures have either been created or altered. Here you can:') . '</strong><br />';    $message .= '<ul><li>' . __("View a structure's contents by clicking on its name") . '</li>';    $message .= '<li>' . __('Change any of its settings by clicking the corresponding "Options" link') . '</li>';    $message .= '<li>' . __('Edit structure by following the "Structure" link') . '</li>';    $message .= sprintf('<br /><li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                        $db_url,                        sprintf(__('Go to database: %s'), htmlspecialchars(PMA_backquote($db_name))),                        htmlspecialchars($db_name),                        $db_ops_url,                        sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));    $message .= '<ul>';    unset($params);    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $params = array('db' => (string)$db_name, 'table' => (string)$tables[$i][TBL_NAME]);        $tbl_url = 'sql.php' . PMA_generate_common_url($params);        $tbl_struct_url = 'tbl_structure.php' . PMA_generate_common_url($params);        $tbl_ops_url = 'tbl_operations.php' . PMA_generate_common_url($params);        unset($params);        if (! PMA_Table::isView($db_name, $tables[$i][TBL_NAME])) {            $message .= sprintf('<li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Structure') . '</a>) (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                                $tbl_url,                                sprintf(__('Go to table: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]),                                $tbl_struct_url,                                sprintf(__('Structure of %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                $tbl_ops_url,                                sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));        } else {            $message .= sprintf('<li><a href="%s" title="%s">%s</a></li>',                                $tbl_url,                                sprintf(__('Go to view: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]));        }    }    $message .= '</ul></ul>';    global $import_notice;    $import_notice = $message;    unset($tables);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Front controller for config view / download and clear * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/ConfigGenerator.class.php';require './libraries/config/setup.forms.php';$form_display = new FormDisplay();$form_display->registerForm('_config.php', $forms['_config.php']);$form_display->save('_config.php');$config_file_path = ConfigFile::getInstance()->getFilePath();if (isset($_POST['eol'])) {    $_SESSION['eol'] = ($_POST['eol'] == 'unix') ? 'unix' : 'win';}if (PMA_ifSetOr($_POST['submit_clear'], '')) {    //    // Clear current config and return to main page    //    ConfigFile::getInstance()->resetConfigData();    // drop post data    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} elseif (PMA_ifSetOr($_POST['submit_download'], '')) {    //    // Output generated config file    //    PMA_download_header('config.inc.php', 'text/plain');    echo ConfigGenerator::getConfigFile();    exit;} elseif (PMA_ifSetOr($_POST['submit_save'], '')) {    //    // Save generated config file on the server    //    file_put_contents($config_file_path, ConfigGenerator::getConfigFile());    header('HTTP/1.1 303 See Other');    header('Location: index.php?action_done=config_saved');    exit;} elseif (PMA_ifSetOr($_POST['submit_load'], '')) {    //    // Load config file from the server    //    $cfg = array();    include_once $config_file_path;    ConfigFile::getInstance()->setConfigData($cfg);    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} elseif (PMA_ifSetOr($_POST['submit_delete'], '')) {    //    // Delete config file on the server    //    @unlink($config_file_path);    header('HTTP/1.1 303 See Other');    header('Location: index.php');    exit;} else {    //    // Show generated config file in a <textarea>    //    header('HTTP/1.1 303 See Other');    header('Location: index.php?page=config');    exit;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the available storage engines * * @package PhpMyAdmin *//** * defines */define('PMA_ENGINE_SUPPORT_NO', 0);define('PMA_ENGINE_SUPPORT_DISABLED', 1);define('PMA_ENGINE_SUPPORT_YES', 2);define('PMA_ENGINE_SUPPORT_DEFAULT', 3);define('PMA_ENGINE_DETAILS_TYPE_PLAINTEXT', 0);define('PMA_ENGINE_DETAILS_TYPE_SIZE',      1);define('PMA_ENGINE_DETAILS_TYPE_NUMERIC',   2); //Has no effect yet...define('PMA_ENGINE_DETAILS_TYPE_BOOLEAN',   3); // 'ON' or 'OFF'/** * base Storage Engine Class * @package PhpMyAdmin */class PMA_StorageEngine{    /**     * @var string engine name     */    var $engine  = 'dummy';    /**     * @var string engine title/description     */    var $title   = 'PMA Dummy Engine Class';    /**     * @var string engine lang description     */    var $comment = 'If you read this text inside phpMyAdmin, something went wrong...';    /**     * @var integer engine supported by current server     */    var $support = PMA_ENGINE_SUPPORT_NO;    /**     * returns array of storage engines     *     * @static     * @staticvar array $storage_engines storage engines     * @access  public     * @return  array    of storage engines     */    static public function getStorageEngines()    {        static $storage_engines = null;        if (null == $storage_engines) {            if (PMA_DRIZZLE) {                $sql = "SELECT                        p.plugin_name            AS Engine,                        (CASE                            WHEN p.plugin_name = @@storage_engine THEN 'DEFAULT'                            WHEN p.is_active THEN 'YES'                            ELSE 'DISABLED' END) AS Support,                        m.module_description     AS Comment                    FROM data_dictionary.plugins p                        JOIN data_dictionary.modules m USING (module_name)                    WHERE p.plugin_type = 'StorageEngine'                        AND p.plugin_name NOT IN ('FunctionEngine', 'schema')";                $storage_engines = PMA_DBI_fetch_result($sql, 'Engine');            } else {                $storage_engines = PMA_DBI_fetch_result('SHOW STORAGE ENGINES', 'Engine');            }        }        return $storage_engines;    }    /**     * returns HTML code for storage engine select box     *     * @param string  $name                    The name of the select form element     * @param string  $id                      The ID of the form field     * @param string  $selected                The selected engine     * @param boolean $offerUnavailableEngines Should unavailable storage engines be offered?     *     * @static     * @return  string  html selectbox     */    static public function getHtmlSelect($name = 'engine', $id = null,      $selected = null, $offerUnavailableEngines = false)    {        $selected   = strtolower($selected);        $output     = '<select name="' . $name . '"'            . (empty($id) ? '' : ' id="' . $id . '"') . '>' . "\n";        foreach (PMA_StorageEngine::getStorageEngines() as $key => $details) {            // Don't show PERFORMANCE_SCHEMA engine (MySQL 5.5)            // Don't show MyISAM for Drizzle (allowed only for temporary tables)            if (! $offerUnavailableEngines                && ($details['Support'] == 'NO'                || $details['Support'] == 'DISABLED'                || $details['Engine'] == 'PERFORMANCE_SCHEMA')                || (PMA_DRIZZLE && $details['Engine'] == 'MyISAM')            ) {                continue;            }            $output .= '    <option value="' . htmlspecialchars($key). '"'                . (empty($details['Comment'])                    ? '' : ' title="' . htmlspecialchars($details['Comment']) . '"')                . (strtolower($key) == $selected || (empty($selected) && $details['Support'] == 'DEFAULT')                    ? ' selected="selected"' : '') . '>' . "\n"                . '        ' . htmlspecialchars($details['Engine']) . "\n"                . '    </option>' . "\n";        }        $output .= '</select>' . "\n";        return $output;    }    /**     * public static final PMA_StorageEngine getEngine()     *     * Loads the corresponding engine plugin, if available.     *     * @param string $engine The engine ID     *     * @return  object  The engine plugin     */    static public function getEngine($engine)    {        $engine = str_replace('/', '', str_replace('.', '', $engine));        $engine_lowercase_filename = strtolower($engine);        if (file_exists('./libraries/engines/' . $engine_lowercase_filename . '.lib.php')            && include_once './libraries/engines/' . $engine_lowercase_filename . '.lib.php'        ) {            $class_name = 'PMA_StorageEngine_' . $engine;            $engine_object = new $class_name($engine);        } else {            $engine_object = new PMA_StorageEngine($engine);        }        return $engine_object;    }    /**     * return true if given engine name is supported/valid, otherwise false     *     * @param string $engine name of engine     *     * @static     * @return  boolean whether $engine is valid or not     */    static public function isValid($engine)    {        if ($engine == "PBMS") {            return true;        }        $storage_engines = PMA_StorageEngine::getStorageEngines();        return isset($storage_engines[$engine]);    }    /**     * returns as HTML table of the engine's server variables     *     * @return string The table that was generated based on the retrieved information     */    function getHtmlVariables()    {        $odd_row    = false;        $ret        = '';        foreach ($this->getVariablesStatus() as $details) {            $ret .= '<tr class="' . ($odd_row ? 'odd' : 'even') . '">' . "\n"                  . '    <td>' . "\n";            if (! empty($details['desc'])) {                $ret .= '        ' . PMA_showHint($details['desc']) . "\n";            }            $ret .= '    </td>' . "\n"                  . '    <th>' . htmlspecialchars($details['title']) . '</th>' . "\n"                  . '    <td class="value">';            switch ($details['type']) {            case PMA_ENGINE_DETAILS_TYPE_SIZE:                $parsed_size = $this->resolveTypeSize($details['value']);                $ret .= $parsed_size[0] . '&nbsp;' . $parsed_size[1];                unset($parsed_size);                break;            case PMA_ENGINE_DETAILS_TYPE_NUMERIC:                $ret .= PMA_formatNumber($details['value']) . ' ';                break;            default:                $ret .= htmlspecialchars($details['value']) . '   ';            }            $ret .= '</td>' . "\n"                  . '</tr>' . "\n";            $odd_row = ! $odd_row;        }        if (! $ret) {            $ret = '<p>' . "\n"                 . '    ' . __('There is no detailed status information available for this storage engine.') . "\n"                 . '</p>' . "\n";        } else {            $ret = '<table class="data">' . "\n" . $ret . '</table>' . "\n";        }        return $ret;    }    /**     * returns the engine specific handling for     * PMA_ENGINE_DETAILS_TYPE_SIZE type variables.     *     * This function should be overridden when     * PMA_ENGINE_DETAILS_TYPE_SIZE type needs to be     * handled differently for a particular engine.     *     * @return string the formatted value and its unit     */    function resolveTypeSize($value)    {        return PMA_formatByteDown($value);    }    /**     * returns array with detailed info about engine specific server variables     *     * @return  array   with detailed info about specific engine server variables     */    function getVariablesStatus()    {        $variables = $this->getVariables();        $like = $this->getVariablesLikePattern();        if ($like) {            $like = " LIKE '" . $like . "' ";        } else {            $like = '';        }        $mysql_vars = array();        $sql_query = 'SHOW GLOBAL VARIABLES ' . $like . ';';        $res = PMA_DBI_query($sql_query);        while ($row = PMA_DBI_fetch_assoc($res)) {            if (isset($variables[$row['Variable_name']])) {                $mysql_vars[$row['Variable_name']] = $variables[$row['Variable_name']];            } elseif (! $like             && strpos(strtolower($row['Variable_name']), strtolower($this->engine)) !== 0) {                continue;            }            $mysql_vars[$row['Variable_name']]['value'] = $row['Value'];            if (empty($mysql_vars[$row['Variable_name']]['title'])) {                $mysql_vars[$row['Variable_name']]['title'] = $row['Variable_name'];            }            if (! isset($mysql_vars[$row['Variable_name']]['type'])) {                $mysql_vars[$row['Variable_name']]['type'] = PMA_ENGINE_DETAILS_TYPE_PLAINTEXT;            }        }        PMA_DBI_free_result($res);        return $mysql_vars;    }    function engine_init() {}    /**     * Constructor     *     * @param string $engine The engine ID     */    function __construct($engine)    {        $storage_engines = PMA_StorageEngine::getStorageEngines();        if (! empty($storage_engines[$engine])) {            $this->engine  = $engine;            $this->title   = $storage_engines[$engine]['Engine'];            $this->comment                = (isset($storage_engines[$engine]['Comment'])                    ? $storage_engines[$engine]['Comment']                    : '');            switch ($storage_engines[$engine]['Support']) {            case 'DEFAULT':                $this->support = PMA_ENGINE_SUPPORT_DEFAULT;                break;            case 'YES':                $this->support = PMA_ENGINE_SUPPORT_YES;                break;            case 'DISABLED':                $this->support = PMA_ENGINE_SUPPORT_DISABLED;                break;            case 'NO':            default:                $this->support = PMA_ENGINE_SUPPORT_NO;            }        } else {            $this->engine_init();        }    }    /**     * public String getTitle()     *     * Reveals the engine's title     *     * @return string The title     */    function getTitle()    {        return $this->title;    }    /**     * public String getComment()     *     * Fetches the server's comment about this engine     *     * @return string The comment     */    function getComment()    {        return $this->comment;    }    /**     * public String getSupportInformationMessage()     *     * @return  string   The localized message.     */    function getSupportInformationMessage()    {        switch ($this->support) {        case PMA_ENGINE_SUPPORT_DEFAULT:            $message = __('%s is the default storage engine on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_YES:            $message = __('%s is available on this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_DISABLED:            $message = __('%s has been disabled for this MySQL server.');            break;        case PMA_ENGINE_SUPPORT_NO:        default:            $message = __('This MySQL server does not support the %s storage engine.');        }        return sprintf($message, htmlspecialchars($this->title));    }    /**     * public string[][] getVariables()     *     * Generates a list of MySQL variables that provide information about this     * engine. This function should be overridden when extending this class     * for a particular engine.     *     * @abstract     * @return   Array   The list of variables.     */    function getVariables()    {        return array();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return $this->engine . '-storage-engine';    }    /**     * public string getVariablesLikePattern()     *     * @abstract     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return false;    }    /**     * public String[] getInfoPages()     *     * Returns a list of available information pages with labels     *     * @abstract     * @return  array    The list     */    function getInfoPages()    {        return array();    }    /**     * public String getPage()     *     * Generates the requested information page     *     * @param string $id The page ID     *     * @abstract     * @return  string      The page     *          boolean     or false on error.     */    function getPage($id)    {        return false;    }}?>
<?php//============================================================+// File name   : htmlcolors.php// Version     : 1.0.008// Begin       : 2002-04-09// Last Update : 2010-12-16// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2002-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Array of WEB safe colors////============================================================+/** * @file * Array of WEB safe colors * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 2.9.000 (2008-03-26) *//** * Array of WEB safe colors */$webcolor = array ('aliceblue' => 'f0f8ff','antiquewhite' => 'faebd7','aqua' => '00ffff','aquamarine' => '7fffd4','azure' => 'f0ffff','beige' => 'f5f5dc','bisque' => 'ffe4c4','black' => '000000','blanchedalmond' => 'ffebcd','blue' => '0000ff','blueviolet' => '8a2be2','brown' => 'a52a2a','burlywood' => 'deb887','cadetblue' => '5f9ea0','chartreuse' => '7fff00','chocolate' => 'd2691e','coral' => 'ff7f50','cornflowerblue' => '6495ed','cornsilk' => 'fff8dc','crimson' => 'dc143c','cyan' => '00ffff','darkblue' => '00008b','darkcyan' => '008b8b','darkgoldenrod' => 'b8860b','dkgray' => 'a9a9a9','darkgray' => 'a9a9a9','darkgrey' => 'a9a9a9','darkgreen' => '006400','darkkhaki' => 'bdb76b','darkmagenta' => '8b008b','darkolivegreen' => '556b2f','darkorange' => 'ff8c00','darkorchid' => '9932cc','darkred' => '8b0000','darksalmon' => 'e9967a','darkseagreen' => '8fbc8f','darkslateblue' => '483d8b','darkslategray' => '2f4f4f','darkslategrey' => '2f4f4f','darkturquoise' => '00ced1','darkviolet' => '9400d3','deeppink' => 'ff1493','deepskyblue' => '00bfff','dimgray' => '696969','dimgrey' => '696969','dodgerblue' => '1e90ff','firebrick' => 'b22222','floralwhite' => 'fffaf0','forestgreen' => '228b22','fuchsia' => 'ff00ff','gainsboro' => 'dcdcdc','ghostwhite' => 'f8f8ff','gold' => 'ffd700','goldenrod' => 'daa520','gray' => '808080','grey' => '808080','green' => '008000','greenyellow' => 'adff2f','honeydew' => 'f0fff0','hotpink' => 'ff69b4','indianred' => 'cd5c5c','indigo' => '4b0082','ivory' => 'fffff0','khaki' => 'f0e68c','lavender' => 'e6e6fa','lavenderblush' => 'fff0f5','lawngreen' => '7cfc00','lemonchiffon' => 'fffacd','lightblue' => 'add8e6','lightcoral' => 'f08080','lightcyan' => 'e0ffff','lightgoldenrodyellow' => 'fafad2','ltgray' => 'd3d3d3','lightgray' => 'd3d3d3','lightgrey' => 'd3d3d3','lightgreen' => '90ee90','lightpink' => 'ffb6c1','lightsalmon' => 'ffa07a','lightseagreen' => '20b2aa','lightskyblue' => '87cefa','lightslategray' => '778899','lightslategrey' => '778899','lightsteelblue' => 'b0c4de','lightyellow' => 'ffffe0','lime' => '00ff00','limegreen' => '32cd32','linen' => 'faf0e6','magenta' => 'ff00ff','maroon' => '800000','mediumaquamarine' => '66cdaa','mediumblue' => '0000cd','mediumorchid' => 'ba55d3','mediumpurple' => '9370d8','mediumseagreen' => '3cb371','mediumslateblue' => '7b68ee','mediumspringgreen' => '00fa9a','mediumturquoise' => '48d1cc','mediumvioletred' => 'c71585','midnightblue' => '191970','mintcream' => 'f5fffa','mistyrose' => 'ffe4e1','moccasin' => 'ffe4b5','navajowhite' => 'ffdead','navy' => '000080','oldlace' => 'fdf5e6','olive' => '808000','olivedrab' => '6b8e23','orange' => 'ffa500','orangered' => 'ff4500','orchid' => 'da70d6','palegoldenrod' => 'eee8aa','palegreen' => '98fb98','paleturquoise' => 'afeeee','palevioletred' => 'd87093','papayawhip' => 'ffefd5','peachpuff' => 'ffdab9','peru' => 'cd853f','pink' => 'ffc0cb','plum' => 'dda0dd','powderblue' => 'b0e0e6','purple' => '800080','red' => 'ff0000','rosybrown' => 'bc8f8f','royalblue' => '4169e1','saddlebrown' => '8b4513','salmon' => 'fa8072','sandybrown' => 'f4a460','seagreen' => '2e8b57','seashell' => 'fff5ee','sienna' => 'a0522d','silver' => 'c0c0c0','skyblue' => '87ceeb','slateblue' => '6a5acd','slategray' => '708090','slategrey' => '708090','snow' => 'fffafa','springgreen' => '00ff7f','steelblue' => '4682b4','tan' => 'd2b48c','teal' => '008080','thistle' => 'd8bfd8','tomato' => 'ff6347','turquoise' => '40e0d0','violet' => 'ee82ee','wheat' => 'f5deb3','white' => 'ffffff','whitesmoke' => 'f5f5f5','yellow' => 'ffff00','yellowgreen' => '9acd32');//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build YAML dumps of tables * * @package PhpMyAdmin-Export * @subpackage YAML */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['yaml'] = array(        'text'          => 'YAML',        'extension'     => 'yml',        'mime_type'     => 'text/yaml',        'force_file'    => true,        'options'       => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),            array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        PMA_exportOutputHandler('...' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler('%YAML 1.1' . $GLOBALS['crlf'] . '---' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in YAML format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer = '# ' . $db . '.' . $table . $crlf;                $buffer .= '-' . $crlf;            } else {                $buffer = '-' . $crlf;            }            for ($i = 0; $i < $columns_cnt; $i++) {                if (! isset($record[$i])) {                    continue;                }                $column = $columns[$i];                if (is_null($record[$i])) {                    $buffer .= '  ' . $column . ': null' . $crlf;                    continue;                }                if (is_numeric($record[$i])) {                    $buffer .= '  ' . $column . ': '  . $record[$i] . $crlf;                    continue;                }                $record[$i] = str_replace(array('\\', '"', "\n", "\r"), array('\\\\', '\"', '\n', '\r'), $record[$i]);                $buffer .= '  ' . $column . ': "' . $record[$i] . '"' . $crlf;            }            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        PMA_DBI_free_result($result);        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays and handles the form where the user can change his password * linked from main.php * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'server_privileges.js';/** * Displays an error message and exits if the user isn't allowed to use this * script */if (!$cfg['ShowChgPassword']) {    $cfg['ShowChgPassword'] = PMA_DBI_select_db('mysql');}if ($cfg['Server']['auth_type'] == 'config' || !$cfg['ShowChgPassword']) {    include_once './libraries/header.inc.php';    PMA_Message::error(__('You don\'t have sufficient privileges to be here right now!'))->display();    include './libraries/footer.inc.php';} // end if/** * If the "change password" form has been submitted, checks for valid values * and submit the query or logout */if (isset($_REQUEST['nopass'])) {    // similar logic in server_privileges.php    $_error = false;    if ($_REQUEST['nopass'] == '1') {        $password = '';    } elseif (empty($_REQUEST['pma_pw']) || empty($_REQUEST['pma_pw2'])) {        $message = PMA_Message::error(__('The password is empty!'));        $_error = true;    } elseif ($_REQUEST['pma_pw'] != $_REQUEST['pma_pw2']) {        $message = PMA_Message::error(__('The passwords aren\'t the same!'));        $_error = true;    } else {        $password = $_REQUEST['pma_pw'];    }    if ($GLOBALS['is_ajax_request'] == true && $_error == true) {        /**         * If in an Ajax request, we don't need to show the rest of the page         */        PMA_ajaxResponse($message, false);    }    if (! $_error) {        // Defines the url to return to in case of error in the sql statement        $_url_params = array();        $err_url          = 'user_password.php' . PMA_generate_common_url($_url_params);        if (PMA_isValid($_REQUEST['pw_hash'], 'identical', 'old')) {            $hashing_function = 'OLD_PASSWORD';        } else {            $hashing_function = 'PASSWORD';        }        $sql_query        = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'***\')');        $local_query      = 'SET password = ' . (($password == '') ? '\'\'' : $hashing_function . '(\'' . PMA_sqlAddSlashes($password) . '\')');        $result           = @PMA_DBI_try_query($local_query)            or PMA_mysqlDie(PMA_DBI_getError(), $sql_query, false, $err_url);        // Changes password cookie if required        // Duration = till the browser is closed for password (we don't want this to be saved)        if ($cfg['Server']['auth_type'] == 'cookie') {            $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $server,                PMA_blowfish_encrypt($password, $GLOBALS['cfg']['blowfish_secret']));        } // end if        // For http auth. mode, the "back" link will also enforce new        // authentication        if ($cfg['Server']['auth_type'] == 'http') {            $_url_params['old_usr'] = 'relog';        }        $message = PMA_Message::success(__('The profile has been updated.'));        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage($message, $sql_query, 'success');            PMA_ajaxResponse($message, true, $extra_data);        }        // Displays the page        include_once './libraries/header.inc.php';        echo '<h1>' . __('Change password') . '</h1>' . "\n\n";        PMA_showMessage($message, $sql_query, 'success');        ?>        <a href="index.php<?php echo PMA_generate_common_url($_url_params); ?>" target="_parent">            <strong><?php echo __('Back'); ?></strong></a>        <?php        include './libraries/footer.inc.php';    } // end if} // end if/** * If the "change password" form hasn't been submitted or the values submitted * aren't valid -> displays the form */// Loads the headersrequire_once './libraries/header.inc.php';echo '<h1>' . __('Change password') . '</h1>' . "\n\n";// Displays an error message if requiredif (isset($message)) {    $message->display();}require_once './libraries/display_change_password.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__link_info(){    return array(        'info' => __('Displays a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second option is a title for the link.'),        );}/** * */function PMA_transformation_text_plain__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';//    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . '%1$s" title="' . (isset($options[1]) ? $options[1] : '%1$s') . '">' . (isset($options[1]) ? $options[1] : '%1$s') . '</a>');    $transform_options = array ('string' => '<a href="' . PMA_linkURL((isset($options[0]) ? $options[0] : '') . $buffer) . '" title="' . (isset($options[1]) ? $options[1] : '') . '">' . (isset($options[1]) ? $options[1] : $buffer) . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php// TCPDF FONT FILE DESCRIPTION$type='TrueTypeUnicode';$name='DejaVuSans-Bold';$up=-63;$ut=44;$dw=600;$diff='';$originalsize=672300;$enc='';$file='dejavusansb.z';$ctg='dejavusansb.ctg.z';$desc=array('Flags'=>32,'FontBBox'=>'[-1069 -415 1975 1174]','ItalicAngle'=>0,'Ascent'=>928,'Descent'=>-236,'Leading'=>0,'CapHeight'=>729,'XHeight'=>547,'StemV'=>60,'StemH'=>26,'AvgWidth'=>573,'MaxWidth'=>2016,'MissingWidth'=>600);$cw=array(0=>600,1=>600,2=>600,3=>600,4=>600,5=>600,6=>600,7=>600,8=>0,9=>333,10=>600,11=>600,12=>600,13=>333,14=>600,15=>600,16=>600,17=>600,18=>600,19=>600,20=>600,21=>600,22=>600,23=>600,24=>600,25=>600,26=>600,27=>600,28=>600,29=>0,30=>600,31=>600,32=>348,33=>456,34=>521,35=>838,36=>696,37=>1002,38=>872,39=>306,40=>457,41=>457,42=>523,43=>838,44=>380,45=>415,46=>380,47=>365,48=>696,49=>696,50=>696,51=>696,52=>696,53=>696,54=>696,55=>696,56=>696,57=>696,58=>400,59=>400,60=>838,61=>838,62=>838,63=>580,64=>1000,65=>774,66=>762,67=>734,68=>830,69=>683,70=>683,71=>821,72=>837,73=>372,74=>372,75=>775,76=>637,77=>995,78=>837,79=>850,80=>733,81=>850,82=>770,83=>720,84=>682,85=>812,86=>774,87=>1103,88=>771,89=>724,90=>725,91=>457,92=>365,93=>457,94=>838,95=>500,96=>500,97=>675,98=>716,99=>593,100=>716,101=>678,102=>435,103=>716,104=>712,105=>343,106=>343,107=>665,108=>343,109=>1042,110=>712,111=>687,112=>716,113=>716,114=>493,115=>595,116=>478,117=>712,118=>652,119=>924,120=>645,121=>652,122=>582,123=>712,124=>365,125=>712,126=>838,127=>600,128=>774,129=>774,130=>734,131=>683,132=>837,133=>850,134=>812,135=>675,136=>675,137=>675,138=>675,139=>675,140=>675,141=>593,142=>678,143=>678,144=>678,145=>678,146=>343,147=>343,148=>343,149=>343,150=>712,151=>687,152=>687,153=>687,154=>687,155=>687,156=>712,157=>712,158=>712,159=>712,160=>348,161=>456,162=>696,163=>696,164=>636,165=>696,166=>365,167=>500,168=>500,169=>1000,170=>564,171=>646,172=>838,173=>415,174=>1000,175=>500,176=>500,177=>838,178=>438,179=>438,180=>500,181=>736,182=>636,183=>380,184=>500,185=>438,186=>564,187=>646,188=>1035,189=>1035,190=>1035,191=>580,192=>774,193=>774,194=>774,195=>774,196=>774,197=>774,198=>1085,199=>734,200=>683,201=>683,202=>683,203=>683,204=>372,205=>372,206=>372,207=>372,208=>838,209=>837,210=>850,211=>850,212=>850,213=>850,214=>850,215=>838,216=>850,217=>812,218=>812,219=>812,220=>812,221=>724,222=>738,223=>719,224=>675,225=>675,226=>675,227=>675,228=>675,229=>675,230=>1048,231=>593,232=>678,233=>678,234=>678,235=>678,236=>343,237=>343,238=>343,239=>343,240=>687,241=>712,242=>687,243=>687,244=>687,245=>687,246=>687,247=>838,248=>687,249=>712,250=>712,251=>712,252=>712,253=>652,254=>716,255=>652,256=>774,257=>675,258=>774,259=>675,260=>774,261=>675,262=>734,263=>593,264=>734,265=>593,266=>734,267=>593,268=>734,269=>593,270=>830,271=>716,272=>838,273=>716,274=>683,275=>678,276=>683,277=>678,278=>683,279=>678,280=>683,281=>678,282=>683,283=>678,284=>821,285=>716,286=>821,287=>716,288=>821,289=>716,290=>821,291=>716,292=>837,293=>712,294=>974,295=>790,296=>372,297=>343,298=>372,299=>343,300=>372,301=>343,302=>372,303=>343,304=>372,305=>343,306=>744,307=>686,308=>372,309=>343,310=>775,311=>665,312=>665,313=>637,314=>343,315=>637,316=>343,317=>637,318=>479,319=>637,320=>557,321=>642,322=>371,323=>837,324=>712,325=>837,326=>712,327=>837,328=>712,329=>983,330=>837,331=>712,332=>850,333=>687,334=>850,335=>687,336=>850,337=>687,338=>1167,339=>1094,340=>770,341=>493,342=>770,343=>493,344=>770,345=>493,346=>720,347=>595,348=>720,349=>595,350=>720,351=>595,352=>720,353=>595,354=>682,355=>478,356=>682,357=>478,358=>682,359=>478,360=>812,361=>712,362=>812,363=>712,364=>812,365=>712,366=>812,367=>712,368=>812,369=>712,370=>812,371=>712,372=>1103,373=>924,374=>724,375=>652,376=>724,377=>725,378=>582,379=>725,380=>582,381=>725,382=>582,383=>435,384=>716,385=>811,386=>762,387=>716,388=>762,389=>716,390=>734,391=>734,392=>593,393=>838,394=>879,395=>757,396=>716,397=>688,398=>683,399=>849,400=>696,401=>683,402=>435,403=>821,404=>793,405=>1045,406=>436,407=>389,408=>775,409=>665,410=>360,411=>592,412=>1042,413=>837,414=>712,415=>850,416=>874,417=>687,418=>1083,419=>912,420=>782,421=>716,422=>770,423=>720,424=>595,425=>683,426=>552,427=>478,428=>707,429=>478,430=>682,431=>835,432=>712,433=>850,434=>813,435=>797,436=>778,437=>725,438=>582,439=>772,440=>772,441=>641,442=>582,443=>696,444=>772,445=>641,446=>573,447=>716,448=>372,449=>659,450=>544,451=>372,452=>1555,453=>1412,454=>1298,455=>1009,456=>980,457=>686,458=>1209,459=>1180,460=>1055,461=>774,462=>675,463=>372,464=>343,465=>850,466=>687,467=>812,468=>712,469=>812,470=>712,471=>812,472=>712,473=>812,474=>712,475=>812,476=>712,477=>678,478=>774,479=>675,480=>774,481=>675,482=>1085,483=>1048,484=>821,485=>716,486=>821,487=>716,488=>775,489=>665,490=>850,491=>687,492=>850,493=>687,494=>772,495=>582,496=>343,497=>1555,498=>1412,499=>1298,500=>821,501=>716,502=>1289,503=>787,504=>837,505=>712,506=>774,507=>675,508=>1085,509=>1048,510=>850,511=>687,512=>774,513=>675,514=>774,515=>675,516=>683,517=>678,518=>683,519=>678,520=>372,521=>343,522=>372,523=>343,524=>850,525=>687,526=>850,527=>687,528=>770,529=>493,530=>770,531=>493,532=>812,533=>712,534=>812,535=>712,536=>720,537=>595,538=>682,539=>478,540=>690,541=>607,542=>837,543=>712,544=>837,545=>865,546=>809,547=>659,548=>725,549=>582,550=>774,551=>675,552=>683,553=>678,554=>850,555=>687,556=>850,557=>687,558=>850,559=>687,560=>850,561=>687,562=>724,563=>652,564=>492,565=>867,566=>512,567=>343,568=>1088,569=>1088,570=>774,571=>734,572=>593,573=>637,574=>682,575=>595,576=>582,577=>782,578=>614,579=>762,580=>812,581=>774,582=>683,583=>678,584=>372,585=>343,586=>860,587=>791,588=>770,589=>493,590=>724,591=>652,592=>675,593=>716,594=>716,595=>716,596=>593,597=>593,598=>717,599=>792,600=>678,601=>678,602=>876,603=>557,604=>545,605=>815,606=>731,607=>343,608=>792,609=>716,610=>627,611=>644,612=>635,613=>712,614=>712,615=>712,616=>545,617=>440,618=>545,619=>559,620=>693,621=>343,622=>841,623=>1042,624=>1042,625=>1042,626=>712,627=>793,628=>707,629=>687,630=>909,631=>681,632=>796,633=>538,634=>538,635=>650,636=>493,637=>493,638=>596,639=>596,640=>642,641=>642,642=>595,643=>415,644=>435,645=>605,646=>552,647=>478,648=>478,649=>920,650=>772,651=>670,652=>652,653=>924,654=>652,655=>724,656=>694,657=>684,658=>641,659=>641,660=>573,661=>573,662=>573,663=>573,664=>850,665=>633,666=>731,667=>685,668=>691,669=>343,670=>732,671=>539,672=>792,673=>573,674=>573,675=>1156,676=>1214,677=>1155,678=>974,679=>769,680=>929,681=>1026,682=>792,683=>780,684=>591,685=>415,686=>677,687=>789,688=>456,689=>456,690=>219,691=>315,692=>315,693=>315,694=>411,695=>591,696=>417,697=>302,698=>521,699=>380,700=>380,701=>380,702=>366,703=>366,704=>326,705=>326,706=>500,707=>500,708=>500,709=>500,710=>500,711=>500,712=>306,713=>500,714=>500,715=>500,716=>306,717=>500,718=>500,719=>500,720=>337,721=>337,722=>366,723=>366,724=>500,725=>500,726=>416,727=>328,728=>500,729=>500,730=>500,731=>500,732=>500,733=>500,734=>351,735=>500,736=>412,737=>219,738=>381,739=>413,740=>326,741=>500,742=>500,743=>500,744=>500,745=>500,748=>500,749=>500,750=>657,755=>500,759=>500,768=>0,769=>0,770=>0,771=>0,772=>0,773=>0,774=>0,775=>0,776=>0,777=>0,778=>0,779=>0,780=>0,781=>0,782=>0,783=>0,784=>0,785=>0,786=>0,787=>0,788=>0,789=>0,790=>0,791=>0,792=>0,793=>0,794=>0,795=>0,796=>0,797=>0,798=>0,799=>0,800=>0,801=>0,802=>0,803=>0,804=>0,805=>0,806=>0,807=>0,808=>0,809=>0,810=>0,811=>0,812=>0,813=>0,814=>0,815=>0,816=>0,817=>0,818=>0,819=>0,820=>0,821=>0,822=>0,823=>0,824=>0,825=>0,826=>0,827=>0,828=>0,829=>0,830=>0,831=>0,832=>0,833=>0,834=>0,835=>0,836=>0,837=>0,838=>0,839=>0,840=>0,841=>0,842=>0,843=>0,844=>0,845=>0,846=>0,847=>0,849=>0,850=>0,851=>0,855=>0,856=>0,858=>0,860=>0,861=>0,862=>0,863=>0,864=>0,865=>0,866=>0,880=>698,881=>565,882=>1022,883=>836,884=>302,885=>302,886=>837,887=>701,890=>500,891=>593,892=>550,893=>549,894=>400,900=>441,901=>500,902=>797,903=>380,904=>846,905=>1009,906=>563,908=>891,910=>980,911=>894,912=>390,913=>774,914=>762,915=>637,916=>774,917=>683,918=>725,919=>837,920=>850,921=>372,922=>775,923=>774,924=>995,925=>837,926=>632,927=>850,928=>837,929=>733,931=>683,932=>682,933=>724,934=>850,935=>771,936=>850,937=>850,938=>372,939=>724,940=>687,941=>557,942=>712,943=>390,944=>675,945=>687,946=>716,947=>681,948=>687,949=>557,950=>591,951=>712,952=>687,953=>390,954=>710,955=>633,956=>736,957=>681,958=>591,959=>687,960=>791,961=>716,962=>593,963=>779,964=>638,965=>675,966=>782,967=>645,968=>794,969=>869,970=>390,971=>675,972=>687,973=>675,974=>869,975=>775,976=>651,977=>661,978=>746,979=>981,980=>746,981=>796,982=>869,983=>744,984=>850,985=>687,986=>734,987=>593,988=>683,989=>494,990=>702,991=>660,992=>919,993=>627,994=>1093,995=>837,996=>832,997=>716,998=>928,999=>744,1000=>733,1001=>650,1002=>789,1003=>671,1004=>752,1005=>716,1006=>682,1007=>590,1008=>744,1009=>716,1010=>593,1011=>343,1012=>850,1013=>645,1014=>644,1015=>738,1016=>716,1017=>734,1018=>995,1019=>732,1020=>716,1021=>698,1022=>734,1023=>698,1024=>683,1025=>683,1026=>878,1027=>637,1028=>734,1029=>720,1030=>372,1031=>372,1032=>372,1033=>1154,1034=>1130,1035=>878,1036=>817,1037=>837,1038=>771,1039=>837,1040=>774,1041=>762,1042=>762,1043=>637,1044=>891,1045=>683,1046=>1224,1047=>710,1048=>837,1049=>837,1050=>817,1051=>831,1052=>995,1053=>837,1054=>850,1055=>837,1056=>733,1057=>734,1058=>682,1059=>771,1060=>992,1061=>771,1062=>928,1063=>808,1064=>1235,1065=>1326,1066=>939,1067=>1036,1068=>762,1069=>734,1070=>1174,1071=>770,1072=>675,1073=>698,1074=>633,1075=>522,1076=>808,1077=>678,1078=>995,1079=>581,1080=>701,1081=>701,1082=>679,1083=>732,1084=>817,1085=>691,1086=>687,1087=>691,1088=>716,1089=>593,1090=>580,1091=>652,1092=>992,1093=>645,1094=>741,1095=>687,1096=>1062,1097=>1105,1098=>751,1099=>904,1100=>632,1101=>593,1102=>972,1103=>642,1104=>678,1105=>678,1106=>714,1107=>522,1108=>593,1109=>595,1110=>343,1111=>343,1112=>343,1113=>991,1114=>956,1115=>734,1116=>679,1117=>701,1118=>652,1119=>691,1120=>1093,1121=>869,1122=>840,1123=>736,1124=>1012,1125=>839,1126=>992,1127=>832,1128=>1358,1129=>1121,1130=>850,1131=>687,1132=>1236,1133=>1007,1134=>696,1135=>557,1136=>1075,1137=>1061,1138=>850,1139=>687,1140=>850,1141=>695,1142=>850,1143=>695,1144=>1148,1145=>1043,1146=>1074,1147=>863,1148=>1405,1149=>1173,1150=>1093,1151=>869,1152=>734,1153=>593,1154=>652,1155=>0,1156=>0,1157=>0,1158=>0,1159=>0,1160=>418,1161=>418,1162=>957,1163=>807,1164=>762,1165=>611,1166=>733,1167=>716,1168=>637,1169=>522,1170=>666,1171=>543,1172=>808,1173=>669,1174=>1224,1175=>995,1176=>710,1177=>581,1178=>775,1179=>679,1180=>817,1181=>679,1182=>817,1183=>679,1184=>1015,1185=>826,1186=>956,1187=>808,1188=>1103,1189=>874,1190=>1273,1191=>1017,1192=>952,1193=>858,1194=>734,1195=>593,1196=>682,1197=>580,1198=>724,1199=>652,1200=>724,1201=>652,1202=>771,1203=>645,1204=>1112,1205=>1000,1206=>808,1207=>687,1208=>808,1209=>687,1210=>808,1211=>712,1212=>1026,1213=>810,1214=>1026,1215=>810,1216=>372,1217=>1224,1218=>995,1219=>775,1220=>630,1221=>951,1222=>805,1223=>837,1224=>691,1225=>957,1226=>807,1227=>808,1228=>687,1229=>1115,1230=>933,1231=>343,1232=>774,1233=>675,1234=>774,1235=>675,1236=>1085,1237=>1048,1238=>683,1239=>678,1240=>849,1241=>678,1242=>849,1243=>678,1244=>1224,1245=>995,1246=>710,1247=>581,1248=>772,1249=>641,1250=>837,1251=>701,1252=>837,1253=>701,1254=>850,1255=>687,1256=>850,1257=>687,1258=>850,1259=>687,1260=>734,1261=>593,1262=>771,1263=>652,1264=>771,1265=>652,1266=>771,1267=>652,1268=>808,1269=>687,1270=>637,1271=>522,1272=>1036,1273=>904,1274=>666,1275=>543,1276=>771,1277=>645,1278=>771,1279=>645,1280=>762,1281=>608,1282=>1159,1283=>893,1284=>1119,1285=>920,1286=>828,1287=>693,1288=>1242,1289=>1017,1290=>1289,1291=>1013,1292=>839,1293=>638,1294=>938,1295=>803,1296=>696,1297=>557,1298=>831,1299=>732,1300=>1286,1301=>1068,1302=>1065,1303=>979,1304=>1082,1305=>1013,1306=>850,1307=>716,1308=>1103,1309=>924,1310=>817,1311=>679,1312=>1267,1313=>1059,1314=>1273,1315=>1017,1316=>957,1317=>807,1329=>813,1330=>729,1331=>728,1332=>731,1333=>729,1334=>733,1335=>652,1336=>720,1337=>903,1338=>728,1339=>666,1340=>558,1341=>961,1342=>788,1343=>713,1344=>651,1345=>730,1346=>715,1347=>704,1348=>780,1349=>689,1350=>715,1351=>708,1352=>731,1353=>677,1354=>867,1355=>711,1356=>780,1357=>731,1358=>715,1359=>693,1360=>666,1361=>698,1362=>576,1363=>833,1364=>698,1365=>763,1366=>855,1369=>330,1370=>342,1371=>308,1372=>374,1373=>313,1374=>461,1375=>468,1377=>938,1378=>642,1379=>704,1380=>708,1381=>642,1382=>644,1383=>565,1384=>642,1385=>756,1386=>704,1387=>643,1388=>310,1389=>984,1390=>638,1391=>643,1392=>643,1393=>603,1394=>643,1395=>642,1396=>643,1397=>309,1398=>643,1399=>486,1400=>643,1401=>366,1402=>938,1403=>573,1404=>666,1405=>643,1406=>643,1407=>934,1408=>643,1409=>643,1410=>479,1411=>934,1412=>648,1413=>620,1414=>813,1415=>812,1417=>360,1418=>374,1456=>0,1457=>0,1458=>0,1459=>0,1460=>0,1461=>0,1462=>0,1463=>0,1464=>0,1465=>0,1466=>0,1467=>0,1468=>0,1469=>0,1470=>415,1471=>0,1472=>372,1473=>0,1474=>0,1475=>372,1478=>497,1479=>0,1488=>728,1489=>610,1490=>447,1491=>588,1492=>687,1493=>343,1494=>400,1495=>687,1496=>679,1497=>294,1498=>578,1499=>566,1500=>605,1501=>696,1502=>724,1503=>343,1504=>453,1505=>680,1506=>666,1507=>675,1508=>658,1509=>661,1510=>653,1511=>736,1512=>602,1513=>758,1514=>683,1520=>664,1521=>567,1522=>519,1523=>444,1524=>710,1542=>667,1543=>667,1545=>884,1546=>1157,1548=>380,1557=>0,1563=>400,1567=>580,1569=>511,1570=>343,1571=>343,1572=>622,1573=>343,1574=>917,1575=>343,1576=>1005,1577=>590,1578=>1005,1579=>1005,1580=>721,1581=>721,1582=>721,1583=>513,1584=>513,1585=>576,1586=>576,1587=>1380,1588=>1380,1589=>1345,1590=>1345,1591=>1039,1592=>1039,1593=>683,1594=>683,1600=>342,1601=>1162,1602=>894,1603=>917,1604=>868,1605=>733,1606=>854,1607=>590,1608=>622,1609=>917,1610=>917,1611=>0,1612=>0,1613=>0,1614=>0,1615=>0,1616=>0,1617=>0,1618=>0,1619=>0,1620=>0,1621=>0,1623=>0,1626=>500,1632=>610,1633=>610,1634=>610,1635=>610,1636=>610,1637=>610,1638=>610,1639=>610,1640=>610,1641=>610,1642=>610,1643=>374,1644=>380,1645=>545,1646=>1005,1647=>894,1648=>0,1652=>292,1657=>1005,1658=>1005,1659=>1005,1660=>1005,1661=>1005,1662=>1005,1663=>1005,1664=>1005,1665=>721,1666=>721,1667=>721,1668=>721,1669=>721,1670=>721,1671=>721,1672=>445,1673=>445,1674=>445,1675=>445,1676=>445,1677=>445,1678=>445,1679=>445,1680=>445,1681=>576,1682=>576,1683=>576,1684=>576,1685=>681,1686=>576,1687=>576,1688=>576,1689=>576,1690=>1380,1691=>1380,1692=>1380,1693=>1345,1694=>1345,1695=>1039,1696=>683,1697=>1162,1698=>1162,1699=>1162,1700=>1162,1701=>1162,1702=>1162,1703=>894,1704=>894,1705=>1024,1706=>1271,1707=>1024,1708=>917,1709=>917,1710=>917,1711=>1024,1712=>1024,1713=>1024,1714=>1024,1715=>1024,1716=>1024,1717=>868,1718=>868,1719=>868,1720=>868,1721=>854,1722=>854,1723=>854,1724=>854,1725=>854,1726=>938,1727=>721,1734=>622,1740=>917,1742=>917,1749=>590,1776=>610,1777=>610,1778=>610,1779=>610,1780=>610,1781=>610,1782=>610,1783=>610,1784=>610,1785=>610,1984=>696,1985=>696,1986=>696,1987=>696,1988=>696,1989=>696,1990=>696,1991=>696,1992=>696,1993=>696,1994=>343,1995=>547,1996=>543,1997=>652,1998=>691,1999=>691,2000=>594,2001=>691,2002=>904,2003=>551,2004=>551,2005=>627,2006=>688,2007=>444,2008=>1022,2009=>506,2010=>826,2011=>691,2012=>652,2013=>912,2014=>627,2015=>707,2016=>506,2017=>652,2018=>574,2019=>627,2020=>627,2021=>627,2022=>574,2023=>574,2027=>0,2028=>0,2029=>0,2030=>0,2031=>0,2032=>0,2033=>0,2034=>0,2035=>0,2036=>380,2037=>380,2040=>691,2041=>691,2042=>415,3647=>696,3713=>790,3714=>748,3716=>749,3719=>569,3720=>742,3722=>744,3725=>761,3732=>706,3733=>704,3734=>747,3735=>819,3737=>730,3738=>727,3739=>727,3740=>922,3741=>827,3742=>866,3743=>866,3745=>836,3746=>761,3747=>770,3749=>769,3751=>713,3754=>827,3755=>1031,3757=>724,3758=>784,3759=>934,3760=>688,3761=>0,3762=>610,3763=>610,3764=>0,3765=>0,3766=>0,3767=>0,3768=>0,3769=>0,3771=>0,3772=>0,3773=>670,3776=>516,3777=>860,3778=>516,3779=>650,3780=>632,3782=>759,3784=>0,3785=>0,3786=>0,3787=>0,3788=>0,3789=>0,3792=>771,3793=>771,3794=>693,3795=>836,3796=>729,3797=>729,3798=>849,3799=>790,3800=>759,3801=>910,3804=>1363,3805=>1363,4256=>918,4257=>744,4258=>739,4259=>837,4260=>649,4261=>773,4262=>857,4263=>889,4264=>530,4265=>633,4266=>857,4267=>900,4268=>643,4269=>903,4270=>814,4271=>752,4272=>869,4273=>643,4274=>643,4275=>886,4276=>886,4277=>733,4278=>653,4279=>643,4280=>646,4281=>643,4282=>790,4283=>902,4284=>633,4285=>619,4286=>643,4287=>778,4288=>892,4289=>601,4290=>742,4291=>616,4292=>633,4293=>742,4304=>553,4305=>552,4306=>596,4307=>815,4308=>562,4309=>563,4310=>553,4311=>827,4312=>553,4313=>543,4314=>1074,4315=>563,4316=>563,4317=>812,4318=>552,4319=>591,4320=>822,4321=>563,4322=>690,4323=>583,4324=>813,4325=>562,4326=>813,4327=>563,4328=>563,4329=>563,4330=>632,4331=>563,4332=>563,4333=>552,4334=>563,4335=>563,4336=>558,4337=>604,4338=>552,4339=>552,4340=>553,4341=>605,4342=>852,4343=>635,4344=>563,4345=>596,4346=>542,4347=>684,4348=>368,5121=>774,5122=>774,5123=>774,5124=>774,5125=>905,5126=>905,5127=>905,5129=>905,5130=>905,5131=>905,5132=>1018,5133=>1009,5134=>1018,5135=>1009,5136=>1018,5137=>1009,5138=>1149,5139=>1140,5140=>1149,5141=>1140,5142=>905,5143=>1149,5144=>1142,5145=>1149,5146=>1142,5147=>905,5149=>310,5150=>529,5151=>425,5152=>425,5153=>395,5154=>395,5155=>395,5156=>395,5157=>564,5158=>470,5159=>310,5160=>395,5161=>395,5162=>395,5163=>1213,5164=>986,5165=>1216,5166=>1297,5167=>774,5168=>774,5169=>774,5170=>774,5171=>886,5172=>886,5173=>886,5175=>886,5176=>886,5177=>886,5178=>1018,5179=>1009,5180=>1018,5181=>1009,5182=>1018,5183=>1009,5184=>1149,5185=>1140,5186=>1149,5187=>1140,5188=>1149,5189=>1142,5190=>1149,5191=>1142,5192=>886,5193=>576,5194=>229,5196=>812,5197=>812,5198=>812,5199=>812,5200=>815,5201=>815,5202=>815,5204=>815,5205=>815,5206=>815,5207=>1056,5208=>1048,5209=>1056,5210=>1048,5211=>1056,5212=>1048,5213=>1060,5214=>1054,5215=>1060,5216=>1054,5217=>1060,5218=>1052,5219=>1060,5220=>1052,5221=>1060,5222=>483,5223=>1005,5224=>1005,5225=>1023,5226=>1017,5227=>743,5228=>743,5229=>743,5230=>743,5231=>743,5232=>743,5233=>743,5234=>743,5235=>743,5236=>1029,5237=>975,5238=>980,5239=>975,5240=>980,5241=>975,5242=>1029,5243=>975,5244=>1029,5245=>975,5246=>980,5247=>975,5248=>980,5249=>975,5250=>980,5251=>501,5252=>501,5253=>938,5254=>938,5255=>938,5256=>938,5257=>743,5258=>743,5259=>743,5260=>743,5261=>743,5262=>743,5263=>743,5264=>743,5265=>743,5266=>1029,5267=>975,5268=>1029,5269=>975,5270=>1029,5271=>975,5272=>1029,5273=>975,5274=>1029,5275=>975,5276=>1029,5277=>975,5278=>1029,5279=>975,5280=>1029,5281=>501,5282=>501,5283=>626,5284=>626,5285=>626,5286=>626,5287=>626,5288=>626,5289=>626,5290=>626,5291=>626,5292=>881,5293=>854,5294=>863,5295=>874,5296=>863,5297=>874,5298=>881,5299=>874,5300=>881,5301=>874,5302=>863,5303=>874,5304=>863,5305=>874,5306=>863,5307=>436,5308=>548,5309=>436,5312=>988,5313=>988,5314=>988,5315=>988,5316=>931,5317=>931,5318=>931,5319=>931,5320=>931,5321=>1238,5322=>1247,5323=>1200,5324=>1228,5325=>1200,5326=>1228,5327=>931,5328=>660,5329=>497,5330=>660,5331=>988,5332=>988,5333=>988,5334=>988,5335=>931,5336=>931,5337=>931,5338=>931,5339=>931,5340=>1231,5341=>1247,5342=>1283,5343=>1228,5344=>1283,5345=>1228,5346=>1228,5347=>1214,5348=>1228,5349=>1214,5350=>1283,5351=>1228,5352=>1283,5353=>1228,5354=>660,5356=>886,5357=>730,5358=>730,5359=>730,5360=>730,5361=>730,5362=>730,5363=>730,5364=>730,5365=>730,5366=>998,5367=>958,5368=>967,5369=>989,5370=>967,5371=>989,5372=>998,5373=>958,5374=>998,5375=>958,5376=>967,5377=>989,5378=>967,5379=>989,5380=>967,5381=>493,5382=>460,5383=>493,5392=>923,5393=>923,5394=>923,5395=>1136,5396=>1136,5397=>1136,5398=>1136,5399=>1209,5400=>1202,5401=>1209,5402=>1202,5403=>1209,5404=>1202,5405=>1431,5406=>1420,5407=>1431,5408=>1420,5409=>1431,5410=>1420,5411=>1431,5412=>1420,5413=>746,5414=>776,5415=>776,5416=>776,5417=>776,5418=>776,5419=>776,5420=>776,5421=>776,5422=>776,5423=>1003,5424=>1003,5425=>1013,5426=>996,5427=>1013,5428=>996,5429=>1003,5430=>1003,5431=>1003,5432=>1003,5433=>1013,5434=>996,5435=>1013,5436=>996,5437=>1013,5438=>495,5440=>395,5441=>510,5442=>1033,5443=>1033,5444=>976,5445=>976,5446=>976,5447=>976,5448=>733,5449=>733,5450=>733,5451=>733,5452=>733,5453=>733,5454=>1003,5455=>959,5456=>495,5458=>886,5459=>774,5460=>774,5461=>774,5462=>774,5463=>928,5464=>928,5465=>928,5466=>928,5467=>1172,5468=>1142,5469=>602,5470=>812,5471=>812,5472=>812,5473=>812,5474=>812,5475=>812,5476=>815,5477=>815,5478=>815,5479=>815,5480=>1060,5481=>1052,5482=>548,5492=>977,5493=>977,5494=>977,5495=>977,5496=>977,5497=>977,5498=>977,5499=>618,5500=>837,5501=>510,5502=>1238,5503=>1238,5504=>1238,5505=>1238,5506=>1238,5507=>1238,5508=>1238,5509=>989,5514=>977,5515=>977,5516=>977,5517=>977,5518=>1591,5519=>1591,5520=>1591,5521=>1295,5522=>1295,5523=>1591,5524=>1591,5525=>848,5526=>1273,5536=>988,5537=>988,5538=>931,5539=>931,5540=>931,5541=>931,5542=>660,5543=>776,5544=>776,5545=>776,5546=>776,5547=>776,5548=>776,5549=>776,5550=>495,5551=>743,5598=>830,5601=>830,5702=>496,5703=>496,5742=>413,5743=>1238,5744=>1591,5745=>2016,5746=>2016,5747=>1720,5748=>1678,5749=>2016,5750=>2016,5760=>543,5761=>637,5762=>945,5763=>1254,5764=>1563,5765=>1871,5766=>627,5767=>936,5768=>1254,5769=>1559,5770=>1871,5771=>569,5772=>877,5773=>1187,5774=>1497,5775=>1807,5776=>637,5777=>945,5778=>1240,5779=>1555,5780=>1871,5781=>569,5782=>569,5783=>789,5784=>1234,5785=>1559,5786=>740,5787=>638,5788=>638,7424=>652,7425=>833,7426=>1048,7427=>608,7428=>593,7429=>676,7430=>676,7431=>559,7432=>557,7433=>343,7434=>494,7435=>665,7436=>539,7437=>817,7438=>701,7439=>687,7440=>593,7441=>660,7442=>660,7443=>660,7444=>1094,7446=>687,7447=>687,7448=>556,7449=>642,7450=>642,7451=>580,7452=>634,7453=>737,7454=>948,7455=>695,7456=>652,7457=>924,7458=>582,7459=>646,7462=>539,7463=>652,7464=>691,7465=>556,7466=>781,7467=>732,7468=>487,7469=>683,7470=>480,7472=>523,7473=>430,7474=>430,7475=>517,7476=>527,7477=>234,7478=>234,7479=>488,7480=>401,7481=>626,7482=>527,7483=>527,7484=>535,7485=>509,7486=>461,7487=>485,7488=>430,7489=>511,7490=>695,7491=>458,7492=>458,7493=>479,7494=>712,7495=>479,7496=>479,7497=>479,7498=>479,7499=>386,7500=>386,7501=>479,7502=>219,7503=>487,7504=>664,7505=>456,7506=>488,7507=>414,7508=>488,7509=>488,7510=>479,7511=>388,7512=>456,7513=>462,7514=>664,7515=>501,7517=>451,7518=>429,7519=>433,7520=>493,7521=>406,7522=>219,7523=>315,7524=>456,7525=>501,7526=>451,7527=>429,7528=>451,7529=>493,7530=>406,7543=>716,7544=>527,7547=>545,7549=>747,7557=>514,7579=>479,7580=>414,7581=>414,7582=>488,7583=>386,7584=>377,7585=>348,7586=>479,7587=>456,7588=>347,7589=>281,7590=>347,7591=>347,7592=>431,7593=>326,7594=>330,7595=>370,7596=>664,7597=>664,7598=>562,7599=>562,7600=>448,7601=>488,7602=>542,7603=>422,7604=>396,7605=>388,7606=>583,7607=>494,7608=>399,7609=>451,7610=>501,7611=>417,7612=>523,7613=>470,7614=>455,7615=>425,7620=>0,7621=>0,7622=>0,7623=>0,7624=>0,7625=>0,7680=>774,7681=>675,7682=>762,7683=>716,7684=>762,7685=>716,7686=>762,7687=>716,7688=>734,7689=>593,7690=>830,7691=>716,7692=>830,7693=>716,7694=>830,7695=>716,7696=>830,7697=>716,7698=>830,7699=>716,7700=>683,7701=>678,7702=>683,7703=>678,7704=>683,7705=>678,7706=>683,7707=>678,7708=>683,7709=>678,7710=>683,7711=>435,7712=>821,7713=>716,7714=>837,7715=>712,7716=>837,7717=>712,7718=>837,7719=>712,7720=>837,7721=>712,7722=>837,7723=>712,7724=>372,7725=>343,7726=>372,7727=>343,7728=>775,7729=>665,7730=>775,7731=>665,7732=>775,7733=>665,7734=>637,7735=>343,7736=>637,7737=>343,7738=>637,7739=>343,7740=>637,7741=>343,7742=>995,7743=>1042,7744=>995,7745=>1042,7746=>995,7747=>1042,7748=>837,7749=>712,7750=>837,7751=>712,7752=>837,7753=>712,7754=>837,7755=>712,7756=>850,7757=>687,7758=>850,7759=>687,7760=>850,7761=>687,7762=>850,7763=>687,7764=>733,7765=>716,7766=>733,7767=>716,7768=>770,7769=>493,7770=>770,7771=>493,7772=>770,7773=>493,7774=>770,7775=>493,7776=>720,7777=>595,7778=>720,7779=>595,7780=>720,7781=>595,7782=>720,7783=>595,7784=>720,7785=>595,7786=>682,7787=>478,7788=>682,7789=>478,7790=>682,7791=>478,7792=>682,7793=>478,7794=>812,7795=>712,7796=>812,7797=>712,7798=>812,7799=>712,7800=>812,7801=>712,7802=>812,7803=>712,7804=>774,7805=>652,7806=>774,7807=>652,7808=>1103,7809=>924,7810=>1103,7811=>924,7812=>1103,7813=>924,7814=>1103,7815=>924,7816=>1103,7817=>924,7818=>771,7819=>645,7820=>771,7821=>645,7822=>724,7823=>652,7824=>725,7825=>582,7826=>725,7827=>582,7828=>725,7829=>582,7830=>712,7831=>478,7832=>924,7833=>652,7834=>675,7835=>435,7836=>435,7837=>435,7838=>896,7839=>687,7840=>774,7841=>675,7842=>774,7843=>675,7844=>774,7845=>675,7846=>774,7847=>675,7848=>774,7849=>675,7850=>774,7851=>675,7852=>774,7853=>675,7854=>774,7855=>675,7856=>774,7857=>675,7858=>774,7859=>675,7860=>774,7861=>675,7862=>774,7863=>675,7864=>683,7865=>678,7866=>683,7867=>678,7868=>683,7869=>678,7870=>683,7871=>678,7872=>683,7873=>678,7874=>683,7875=>678,7876=>683,7877=>678,7878=>683,7879=>678,7880=>372,7881=>343,7882=>372,7883=>343,7884=>850,7885=>687,7886=>850,7887=>687,7888=>850,7889=>687,7890=>850,7891=>687,7892=>850,7893=>687,7894=>850,7895=>687,7896=>850,7897=>687,7898=>874,7899=>687,7900=>874,7901=>687,7902=>874,7903=>687,7904=>874,7905=>687,7906=>874,7907=>687,7908=>812,7909=>712,7910=>812,7911=>712,7912=>835,7913=>712,7914=>835,7915=>712,7916=>835,7917=>712,7918=>835,7919=>712,7920=>835,7921=>712,7922=>724,7923=>652,7924=>724,7925=>652,7926=>724,7927=>652,7928=>724,7929=>652,7930=>953,7931=>644,7936=>687,7937=>687,7938=>687,7939=>687,7940=>687,7941=>687,7942=>687,7943=>687,7944=>774,7945=>774,7946=>1041,7947=>1043,7948=>935,7949=>963,7950=>835,7951=>859,7952=>557,7953=>557,7954=>557,7955=>557,7956=>557,7957=>557,7960=>792,7961=>794,7962=>1100,7963=>1096,7964=>1023,7965=>1052,7968=>712,7969=>712,7970=>712,7971=>712,7972=>712,7973=>712,7974=>712,7975=>712,7976=>945,7977=>951,7978=>1250,7979=>1250,7980=>1180,7981=>1206,7982=>1054,7983=>1063,7984=>390,7985=>390,7986=>390,7987=>390,7988=>390,7989=>390,7990=>390,7991=>390,7992=>483,7993=>489,7994=>777,7995=>785,7996=>712,7997=>738,7998=>604,7999=>604,8000=>687,8001=>687,8002=>687,8003=>687,8004=>687,8005=>687,8008=>892,8009=>933,8010=>1221,8011=>1224,8012=>1053,8013=>1082,8016=>675,8017=>675,8018=>675,8019=>675,8020=>675,8021=>675,8022=>675,8023=>675,8025=>930,8027=>1184,8029=>1199,8031=>1049,8032=>869,8033=>869,8034=>869,8035=>869,8036=>869,8037=>869,8038=>869,8039=>869,8040=>909,8041=>958,8042=>1246,8043=>1251,8044=>1076,8045=>1105,8046=>1028,8047=>1076,8048=>687,8049=>687,8050=>557,8051=>557,8052=>712,8053=>712,8054=>390,8055=>390,8056=>687,8057=>687,8058=>675,8059=>675,8060=>869,8061=>869,8064=>687,8065=>687,8066=>687,8067=>687,8068=>687,8069=>687,8070=>687,8071=>687,8072=>774,8073=>774,8074=>1041,8075=>1043,8076=>935,8077=>963,8078=>835,8079=>859,8080=>712,8081=>712,8082=>712,8083=>712,8084=>712,8085=>712,8086=>712,8087=>712,8088=>945,8089=>951,8090=>1250,8091=>1250,8092=>1180,8093=>1206,8094=>1054,8095=>1063,8096=>869,8097=>869,8098=>869,8099=>869,8100=>869,8101=>869,8102=>869,8103=>869,8104=>909,8105=>958,8106=>1246,8107=>1251,8108=>1076,8109=>1105,8110=>1028,8111=>1076,8112=>687,8113=>687,8114=>687,8115=>687,8116=>687,8118=>687,8119=>687,8120=>774,8121=>774,8122=>876,8123=>797,8124=>774,8125=>500,8126=>500,8127=>500,8128=>500,8129=>500,8130=>712,8131=>712,8132=>712,8134=>712,8135=>712,8136=>929,8137=>846,8138=>1080,8139=>1009,8140=>837,8141=>500,8142=>500,8143=>500,8144=>390,8145=>390,8146=>390,8147=>390,8150=>390,8151=>390,8152=>372,8153=>372,8154=>621,8155=>563,8157=>500,8158=>500,8159=>500,8160=>675,8161=>675,8162=>675,8163=>675,8164=>716,8165=>716,8166=>675,8167=>675,8168=>724,8169=>724,8170=>1020,8171=>980,8172=>838,8173=>500,8174=>500,8175=>500,8178=>869,8179=>869,8180=>869,8182=>869,8183=>869,8184=>1065,8185=>891,8186=>1084,8187=>894,8188=>850,8189=>500,8190=>500,8192=>500,8193=>1000,8194=>500,8195=>1000,8196=>330,8197=>250,8198=>167,8199=>696,8200=>380,8201=>200,8202=>100,8203=>0,8204=>0,8205=>0,8206=>0,8207=>0,8208=>415,8209=>415,8210=>696,8211=>500,8212=>1000,8213=>1000,8214=>500,8215=>500,8216=>380,8217=>380,8218=>380,8219=>380,8220=>657,8221=>657,8222=>657,8223=>657,8224=>500,8225=>500,8226=>639,8227=>639,8228=>333,8229=>667,8230=>1000,8231=>348,8232=>0,8233=>0,8234=>0,8235=>0,8236=>0,8237=>0,8238=>0,8239=>200,8240=>1440,8241=>1887,8242=>264,8243=>447,8244=>630,8245=>264,8246=>447,8247=>630,8248=>733,8249=>412,8250=>412,8251=>972,8252=>627,8253=>580,8254=>500,8255=>828,8256=>828,8257=>329,8258=>1023,8259=>500,8260=>167,8261=>457,8262=>457,8263=>1030,8264=>829,8265=>829,8266=>513,8267=>636,8268=>500,8269=>500,8270=>523,8271=>400,8272=>828,8273=>523,8274=>556,8275=>1000,8276=>828,8277=>838,8278=>684,8279=>813,8280=>838,8281=>838,8282=>380,8283=>872,8284=>838,8285=>380,8286=>380,8287=>222,8288=>0,8289=>0,8290=>0,8291=>0,8292=>0,8298=>0,8299=>0,8300=>0,8301=>0,8302=>0,8303=>0,8304=>438,8305=>219,8308=>438,8309=>438,8310=>438,8311=>438,8312=>438,8313=>438,8314=>528,8315=>528,8316=>528,8317=>288,8318=>288,8319=>456,8320=>438,8321=>438,8322=>438,8323=>438,8324=>438,8325=>438,8326=>438,8327=>438,8328=>438,8329=>438,8330=>528,8331=>528,8332=>528,8333=>288,8334=>288,8336=>458,8337=>479,8338=>488,8339=>413,8340=>479,8341=>456,8342=>487,8343=>219,8344=>664,8345=>456,8346=>479,8347=>381,8348=>388,8352=>929,8353=>696,8354=>696,8355=>696,8356=>696,8357=>1042,8358=>837,8359=>1518,8360=>1205,8361=>1103,8362=>904,8363=>696,8364=>696,8365=>696,8366=>696,8367=>1392,8368=>696,8369=>696,8370=>696,8371=>696,8372=>859,8373=>696,8376=>696,8377=>696,8400=>0,8401=>0,8406=>0,8407=>0,8411=>0,8412=>0,8417=>0,8448=>1120,8449=>1170,8450=>734,8451=>1211,8452=>896,8453=>1091,8454=>1144,8455=>614,8456=>698,8457=>1086,8459=>1073,8460=>913,8461=>888,8462=>712,8463=>712,8464=>597,8465=>697,8466=>856,8467=>472,8468=>974,8469=>837,8470=>1203,8471=>1000,8472=>697,8473=>750,8474=>850,8475=>938,8476=>814,8477=>801,8478=>896,8479=>710,8480=>1020,8481=>1281,8482=>1000,8483=>755,8484=>754,8485=>578,8486=>850,8487=>850,8488=>763,8489=>338,8490=>775,8491=>774,8492=>928,8493=>818,8494=>854,8495=>636,8496=>729,8497=>808,8498=>683,8499=>1184,8500=>465,8501=>794,8502=>731,8503=>494,8504=>684,8505=>380,8506=>945,8507=>1348,8508=>790,8509=>737,8510=>654,8511=>863,8512=>840,8513=>775,8514=>557,8515=>637,8516=>760,8517=>830,8518=>716,8519=>678,8520=>343,8521=>343,8523=>872,8526=>547,8528=>1035,8529=>1035,8530=>1483,8531=>1035,8532=>1035,8533=>1035,8534=>1035,8535=>1035,8536=>1035,8537=>1035,8538=>1035,8539=>1035,8540=>1035,8541=>1035,8542=>1035,8543=>615,8544=>372,8545=>659,8546=>945,8547=>1099,8548=>774,8549=>1099,8550=>1386,8551=>1672,8552=>1121,8553=>771,8554=>1120,8555=>1407,8556=>637,8557=>734,8558=>830,8559=>995,8560=>343,8561=>607,8562=>872,8563=>984,8564=>652,8565=>962,8566=>1227,8567=>1491,8568=>969,8569=>645,8570=>969,8571=>1233,8572=>343,8573=>593,8574=>716,8575=>1042,8576=>1289,8577=>830,8578=>1289,8579=>734,8580=>593,8581=>734,8585=>1035,8592=>838,8593=>838,8594=>838,8595=>838,8596=>838,8597=>838,8598=>838,8599=>838,8600=>838,8601=>838,8602=>838,8603=>838,8604=>838,8605=>838,8606=>838,8607=>838,8608=>838,8609=>838,8610=>838,8611=>838,8612=>838,8613=>838,8614=>838,8615=>838,8616=>838,8617=>838,8618=>838,8619=>838,8620=>838,8621=>838,8622=>838,8623=>838,8624=>838,8625=>838,8626=>838,8627=>838,8628=>838,8629=>838,8630=>838,8631=>838,8632=>838,8633=>838,8634=>838,8635=>838,8636=>838,8637=>838,8638=>838,8639=>838,8640=>838,8641=>838,8642=>838,8643=>838,8644=>838,8645=>838,8646=>838,8647=>838,8648=>838,8649=>838,8650=>838,8651=>838,8652=>838,8653=>838,8654=>838,8655=>838,8656=>838,8657=>838,8658=>838,8659=>838,8660=>838,8661=>838,8662=>838,8663=>838,8664=>838,8665=>838,8666=>838,8667=>838,8668=>838,8669=>838,8670=>838,8671=>838,8672=>838,8673=>838,8674=>838,8675=>838,8676=>838,8677=>838,8678=>838,8679=>838,8680=>838,8681=>838,8682=>838,8683=>838,8684=>838,8685=>838,8686=>838,8687=>838,8688=>838,8689=>838,8690=>838,8691=>838,8692=>838,8693=>838,8694=>838,8695=>838,8696=>838,8697=>838,8698=>838,8699=>838,8700=>838,8701=>838,8702=>838,8703=>838,8704=>774,8705=>696,8706=>544,8707=>683,8708=>683,8709=>856,8710=>697,8711=>697,8712=>896,8713=>896,8714=>750,8715=>896,8716=>896,8717=>750,8718=>636,8719=>787,8720=>787,8721=>718,8722=>838,8723=>838,8724=>696,8725=>365,8726=>696,8727=>838,8728=>626,8729=>380,8730=>667,8731=>667,8732=>667,8733=>712,8734=>833,8735=>838,8736=>896,8737=>896,8738=>838,8739=>500,8740=>500,8741=>500,8742=>500,8743=>812,8744=>812,8745=>812,8746=>812,8747=>610,8748=>929,8749=>1295,8750=>563,8751=>977,8752=>1313,8753=>563,8754=>563,8755=>563,8756=>696,8757=>696,8758=>294,8759=>696,8760=>838,8761=>838,8762=>838,8763=>838,8764=>838,8765=>838,8766=>838,8767=>838,8768=>375,8769=>838,8770=>838,8771=>838,8772=>838,8773=>838,8774=>838,8775=>838,8776=>838,8777=>838,8778=>838,8779=>838,8780=>838,8781=>838,8782=>838,8783=>838,8784=>838,8785=>838,8786=>838,8787=>838,8788=>1063,8789=>1063,8790=>838,8791=>838,8792=>838,8793=>838,8794=>838,8795=>838,8796=>838,8797=>838,8798=>838,8799=>838,8800=>838,8801=>838,8802=>838,8803=>838,8804=>838,8805=>838,8806=>838,8807=>838,8808=>841,8809=>841,8810=>1047,8811=>1047,8812=>500,8813=>838,8814=>838,8815=>838,8816=>838,8817=>838,8818=>838,8819=>838,8820=>838,8821=>838,8822=>838,8823=>838,8824=>838,8825=>838,8826=>838,8827=>838,8828=>838,8829=>838,8830=>838,8831=>838,8832=>838,8833=>838,8834=>838,8835=>838,8836=>838,8837=>838,8838=>838,8839=>838,8840=>838,8841=>838,8842=>838,8843=>838,8844=>812,8845=>812,8846=>812,8847=>838,8848=>838,8849=>838,8850=>838,8851=>796,8852=>796,8853=>838,8854=>838,8855=>838,8856=>838,8857=>838,8858=>838,8859=>838,8860=>838,8861=>838,8862=>838,8863=>838,8864=>838,8865=>838,8866=>914,8867=>914,8868=>914,8869=>914,8870=>542,8871=>542,8872=>914,8873=>914,8874=>914,8875=>914,8876=>914,8877=>914,8878=>914,8879=>914,8880=>838,8881=>838,8882=>838,8883=>838,8884=>838,8885=>838,8886=>1000,8887=>1000,8888=>838,8889=>838,8890=>542,8891=>812,8892=>812,8893=>812,8894=>838,8895=>838,8896=>843,8897=>843,8898=>843,8899=>843,8900=>494,8901=>380,8902=>626,8903=>838,8904=>1000,8905=>1000,8906=>1000,8907=>1000,8908=>1000,8909=>838,8910=>812,8911=>812,8912=>838,8913=>838,8914=>838,8915=>838,8916=>838,8917=>838,8918=>838,8919=>838,8920=>1422,8921=>1422,8922=>838,8923=>838,8924=>838,8925=>838,8926=>838,8927=>838,8928=>838,8929=>838,8930=>838,8931=>838,8932=>838,8933=>838,8934=>838,8935=>838,8936=>838,8937=>838,8938=>838,8939=>838,8940=>838,8941=>838,8942=>1000,8943=>1000,8944=>1000,8945=>1000,8946=>1158,8947=>896,8948=>750,8949=>896,8950=>896,8951=>750,8952=>896,8953=>896,8954=>1158,8955=>896,8956=>750,8957=>896,8958=>750,8959=>896,8960=>602,8961=>602,8962=>716,8963=>838,8964=>838,8965=>838,8966=>838,8967=>488,8968=>457,8969=>457,8970=>457,8971=>457,8972=>809,8973=>809,8974=>809,8975=>809,8976=>838,8977=>539,8984=>928,8985=>838,8988=>469,8989=>469,8990=>469,8991=>469,8992=>610,8993=>610,8996=>1152,8997=>1152,8998=>1414,8999=>1152,9000=>1443,9003=>1414,9004=>873,9075=>390,9076=>716,9077=>869,9082=>687,9085=>863,9095=>1152,9108=>873,9115=>500,9116=>500,9117=>500,9118=>500,9119=>500,9120=>500,9121=>500,9122=>500,9123=>500,9124=>500,9125=>500,9126=>500,9127=>750,9128=>750,9129=>750,9130=>750,9131=>750,9132=>750,9133=>750,9134=>610,9166=>838,9167=>945,9187=>873,9189=>769,9192=>696,9250=>716,9251=>716,9312=>847,9313=>847,9314=>847,9315=>847,9316=>847,9317=>847,9318=>847,9319=>847,9320=>847,9321=>847,9600=>769,9601=>769,9602=>769,9603=>769,9604=>769,9605=>769,9606=>769,9607=>769,9608=>769,9609=>769,9610=>769,9611=>769,9612=>769,9613=>769,9614=>769,9615=>769,9616=>769,9617=>769,9618=>769,9619=>769,9620=>769,9621=>769,9622=>769,9623=>769,9624=>769,9625=>769,9626=>769,9627=>769,9628=>769,9629=>769,9630=>769,9631=>769,9632=>945,9633=>945,9634=>945,9635=>945,9636=>945,9637=>945,9638=>945,9639=>945,9640=>945,9641=>945,9642=>678,9643=>678,9644=>945,9645=>945,9646=>550,9647=>550,9648=>769,9649=>769,9650=>769,9651=>769,9652=>502,9653=>502,9654=>769,9655=>769,9656=>502,9657=>502,9658=>769,9659=>769,9660=>769,9661=>769,9662=>502,9663=>502,9664=>769,9665=>769,9666=>502,9667=>502,9668=>769,9669=>769,9670=>769,9671=>769,9672=>769,9673=>873,9674=>494,9675=>873,9676=>873,9677=>873,9678=>873,9679=>873,9680=>873,9681=>873,9682=>873,9683=>873,9684=>873,9685=>873,9686=>527,9687=>527,9688=>840,9689=>970,9690=>970,9691=>970,9692=>387,9693=>387,9694=>387,9695=>387,9696=>769,9697=>769,9698=>769,9699=>769,9700=>769,9701=>769,9702=>639,9703=>945,9704=>945,9705=>945,9706=>945,9707=>945,9708=>769,9709=>769,9710=>769,9711=>1119,9712=>945,9713=>945,9714=>945,9715=>945,9716=>873,9717=>873,9718=>873,9719=>873,9720=>769,9721=>769,9722=>769,9723=>830,9724=>830,9725=>732,9726=>732,9727=>769,9728=>896,9729=>1000,9730=>896,9731=>896,9732=>896,9733=>896,9734=>896,9735=>573,9736=>896,9737=>896,9738=>888,9739=>888,9740=>671,9741=>1013,9742=>1246,9743=>1250,9744=>896,9745=>896,9746=>896,9747=>532,9748=>896,9749=>896,9750=>896,9751=>896,9752=>896,9753=>896,9754=>896,9755=>896,9756=>896,9757=>609,9758=>896,9759=>609,9760=>896,9761=>896,9762=>896,9763=>896,9764=>669,9765=>746,9766=>649,9767=>784,9768=>545,9769=>896,9770=>896,9771=>896,9772=>710,9773=>896,9774=>896,9775=>896,9776=>896,9777=>896,9778=>896,9779=>896,9780=>896,9781=>896,9782=>896,9783=>896,9784=>896,9785=>1042,9786=>1042,9787=>1042,9788=>896,9789=>896,9790=>896,9791=>614,9792=>732,9793=>732,9794=>896,9795=>896,9796=>896,9797=>896,9798=>896,9799=>896,9800=>896,9801=>896,9802=>896,9803=>896,9804=>896,9805=>896,9806=>896,9807=>896,9808=>896,9809=>896,9810=>896,9811=>896,9812=>896,9813=>896,9814=>896,9815=>896,9816=>896,9817=>896,9818=>896,9819=>896,9820=>896,9821=>896,9822=>896,9823=>896,9824=>896,9825=>896,9826=>896,9827=>896,9828=>896,9829=>896,9830=>896,9831=>896,9832=>896,9833=>472,9834=>638,9835=>896,9836=>896,9837=>472,9838=>357,9839=>484,9840=>748,9841=>766,9842=>896,9843=>896,9844=>896,9845=>896,9846=>896,9847=>896,9848=>896,9849=>896,9850=>896,9851=>896,9852=>896,9853=>896,9854=>896,9855=>896,9856=>869,9857=>869,9858=>869,9859=>869,9860=>869,9861=>869,9862=>896,9863=>896,9864=>896,9865=>896,9866=>896,9867=>896,9868=>896,9869=>896,9870=>896,9871=>896,9872=>896,9873=>896,9874=>896,9875=>896,9876=>896,9877=>541,9878=>896,9879=>896,9880=>896,9881=>896,9882=>896,9883=>896,9884=>896,9888=>896,9889=>702,9890=>1004,9891=>1089,9892=>1175,9893=>903,9894=>838,9895=>838,9896=>838,9897=>838,9898=>838,9899=>838,9900=>838,9901=>838,9902=>838,9903=>838,9904=>844,9905=>838,9906=>732,9907=>732,9908=>732,9909=>732,9910=>850,9911=>732,9912=>732,9920=>838,9921=>838,9922=>838,9923=>838,9954=>732,9985=>838,9986=>838,9987=>838,9988=>838,9990=>838,9991=>838,9992=>838,9993=>838,9996=>838,9997=>838,9998=>838,9999=>838,10000=>838,10001=>838,10002=>838,10003=>838,10004=>838,10005=>838,10006=>838,10007=>838,10008=>838,10009=>838,10010=>838,10011=>838,10012=>838,10013=>838,10014=>838,10015=>838,10016=>838,10017=>838,10018=>838,10019=>838,10020=>838,10021=>838,10022=>838,10023=>838,10025=>838,10026=>838,10027=>838,10028=>838,10029=>838,10030=>838,10031=>838,10032=>838,10033=>838,10034=>838,10035=>838,10036=>838,10037=>838,10038=>838,10039=>838,10040=>838,10041=>838,10042=>838,10043=>838,10044=>838,10045=>838,10046=>838,10047=>838,10048=>838,10049=>838,10050=>838,10051=>838,10052=>838,10053=>838,10054=>838,10055=>838,10056=>838,10057=>838,10058=>838,10059=>838,10061=>896,10063=>896,10064=>896,10065=>896,10066=>896,10070=>896,10072=>838,10073=>838,10074=>838,10075=>347,10076=>347,10077=>587,10078=>587,10081=>838,10082=>838,10083=>838,10084=>838,10085=>838,10086=>838,10087=>838,10088=>838,10089=>838,10090=>838,10091=>838,10092=>838,10093=>838,10094=>838,10095=>838,10096=>838,10097=>838,10098=>838,10099=>838,10100=>838,10101=>838,10102=>847,10103=>847,10104=>847,10105=>847,10106=>847,10107=>847,10108=>847,10109=>847,10110=>847,10111=>847,10112=>838,10113=>838,10114=>838,10115=>838,10116=>838,10117=>838,10118=>838,10119=>838,10120=>838,10121=>838,10122=>838,10123=>838,10124=>838,10125=>838,10126=>838,10127=>838,10128=>838,10129=>838,10130=>838,10131=>838,10132=>838,10136=>838,10137=>838,10138=>838,10139=>838,10140=>838,10141=>838,10142=>838,10143=>838,10144=>838,10145=>838,10146=>838,10147=>838,10148=>838,10149=>838,10150=>838,10151=>838,10152=>838,10153=>838,10154=>838,10155=>838,10156=>838,10157=>838,10158=>838,10159=>838,10161=>838,10162=>838,10163=>838,10164=>838,10165=>838,10166=>838,10167=>838,10168=>838,10169=>838,10170=>838,10171=>838,10172=>838,10173=>838,10174=>838,10181=>457,10182=>457,10208=>494,10214=>487,10215=>487,10216=>457,10217=>457,10218=>721,10219=>721,10224=>838,10225=>838,10226=>838,10227=>838,10228=>1157,10229=>1434,10230=>1434,10231=>1434,10232=>1434,10233=>1434,10234=>1434,10235=>1434,10236=>1434,10237=>1434,10238=>1434,10239=>1434,10240=>781,10241=>781,10242=>781,10243=>781,10244=>781,10245=>781,10246=>781,10247=>781,10248=>781,10249=>781,10250=>781,10251=>781,10252=>781,10253=>781,10254=>781,10255=>781,10256=>781,10257=>781,10258=>781,10259=>781,10260=>781,10261=>781,10262=>781,10263=>781,10264=>781,10265=>781,10266=>781,10267=>781,10268=>781,10269=>781,10270=>781,10271=>781,10272=>781,10273=>781,10274=>781,10275=>781,10276=>781,10277=>781,10278=>781,10279=>781,10280=>781,10281=>781,10282=>781,10283=>781,10284=>781,10285=>781,10286=>781,10287=>781,10288=>781,10289=>781,10290=>781,10291=>781,10292=>781,10293=>781,10294=>781,10295=>781,10296=>781,10297=>781,10298=>781,10299=>781,10300=>781,10301=>781,10302=>781,10303=>781,10304=>781,10305=>781,10306=>781,10307=>781,10308=>781,10309=>781,10310=>781,10311=>781,10312=>781,10313=>781,10314=>781,10315=>781,10316=>781,10317=>781,10318=>781,10319=>781,10320=>781,10321=>781,10322=>781,10323=>781,10324=>781,10325=>781,10326=>781,10327=>781,10328=>781,10329=>781,10330=>781,10331=>781,10332=>781,10333=>781,10334=>781,10335=>781,10336=>781,10337=>781,10338=>781,10339=>781,10340=>781,10341=>781,10342=>781,10343=>781,10344=>781,10345=>781,10346=>781,10347=>781,10348=>781,10349=>781,10350=>781,10351=>781,10352=>781,10353=>781,10354=>781,10355=>781,10356=>781,10357=>781,10358=>781,10359=>781,10360=>781,10361=>781,10362=>781,10363=>781,10364=>781,10365=>781,10366=>781,10367=>781,10368=>781,10369=>781,10370=>781,10371=>781,10372=>781,10373=>781,10374=>781,10375=>781,10376=>781,10377=>781,10378=>781,10379=>781,10380=>781,10381=>781,10382=>781,10383=>781,10384=>781,10385=>781,10386=>781,10387=>781,10388=>781,10389=>781,10390=>781,10391=>781,10392=>781,10393=>781,10394=>781,10395=>781,10396=>781,10397=>781,10398=>781,10399=>781,10400=>781,10401=>781,10402=>781,10403=>781,10404=>781,10405=>781,10406=>781,10407=>781,10408=>781,10409=>781,10410=>781,10411=>781,10412=>781,10413=>781,10414=>781,10415=>781,10416=>781,10417=>781,10418=>781,10419=>781,10420=>781,10421=>781,10422=>781,10423=>781,10424=>781,10425=>781,10426=>781,10427=>781,10428=>781,10429=>781,10430=>781,10431=>781,10432=>781,10433=>781,10434=>781,10435=>781,10436=>781,10437=>781,10438=>781,10439=>781,10440=>781,10441=>781,10442=>781,10443=>781,10444=>781,10445=>781,10446=>781,10447=>781,10448=>781,10449=>781,10450=>781,10451=>781,10452=>781,10453=>781,10454=>781,10455=>781,10456=>781,10457=>781,10458=>781,10459=>781,10460=>781,10461=>781,10462=>781,10463=>781,10464=>781,10465=>781,10466=>781,10467=>781,10468=>781,10469=>781,10470=>781,10471=>781,10472=>781,10473=>781,10474=>781,10475=>781,10476=>781,10477=>781,10478=>781,10479=>781,10480=>781,10481=>781,10482=>781,10483=>781,10484=>781,10485=>781,10486=>781,10487=>781,10488=>781,10489=>781,10490=>781,10491=>781,10492=>781,10493=>781,10494=>781,10495=>781,10502=>838,10503=>838,10506=>838,10507=>838,10560=>838,10561=>838,10627=>753,10628=>753,10702=>838,10703=>1046,10704=>1046,10705=>1000,10706=>1000,10707=>1000,10708=>1000,10709=>1000,10731=>494,10746=>838,10747=>838,10752=>1000,10753=>1000,10754=>1000,10764=>1661,10765=>563,10766=>563,10767=>563,10768=>563,10769=>563,10770=>563,10771=>563,10772=>563,10773=>563,10774=>563,10775=>563,10776=>563,10777=>563,10778=>563,10779=>563,10780=>563,10799=>838,10877=>838,10878=>838,10879=>838,10880=>838,10881=>838,10882=>838,10883=>838,10884=>838,10885=>838,10886=>838,10887=>838,10888=>838,10889=>838,10890=>838,10891=>838,10892=>838,10893=>838,10894=>838,10895=>838,10896=>838,10897=>838,10898=>838,10899=>838,10900=>838,10901=>838,10902=>838,10903=>838,10904=>838,10905=>838,10906=>838,10907=>838,10908=>838,10909=>838,10910=>838,10911=>838,10912=>838,10926=>838,10927=>838,10928=>838,10929=>838,10930=>838,10931=>838,10932=>838,10933=>838,10934=>838,10935=>838,10936=>838,10937=>838,10938=>838,11001=>838,11002=>838,11008=>838,11009=>838,11010=>838,11011=>838,11012=>838,11013=>838,11014=>838,11015=>838,11016=>838,11017=>838,11018=>838,11019=>838,11020=>838,11021=>838,11022=>838,11023=>838,11024=>838,11025=>838,11026=>945,11027=>945,11028=>945,11029=>945,11030=>769,11031=>769,11032=>769,11033=>769,11034=>945,11039=>869,11040=>869,11041=>873,11042=>873,11043=>873,11044=>1119,11091=>869,11092=>869,11360=>637,11361=>360,11362=>637,11363=>733,11364=>770,11365=>675,11366=>478,11367=>956,11368=>712,11369=>775,11370=>665,11371=>725,11372=>582,11373=>860,11374=>995,11375=>774,11376=>860,11377=>778,11378=>1221,11379=>1056,11380=>652,11381=>698,11382=>565,11383=>782,11385=>538,11386=>687,11387=>559,11388=>219,11389=>487,11390=>720,11391=>725,11568=>691,11569=>941,11570=>941,11571=>725,11572=>725,11573=>725,11574=>676,11575=>774,11576=>774,11577=>683,11578=>683,11579=>802,11580=>989,11581=>761,11582=>623,11583=>761,11584=>941,11585=>941,11586=>373,11587=>740,11588=>837,11589=>914,11590=>672,11591=>737,11592=>680,11593=>683,11594=>602,11595=>1039,11596=>778,11597=>837,11598=>683,11599=>372,11600=>778,11601=>373,11602=>725,11603=>691,11604=>941,11605=>941,11606=>837,11607=>373,11608=>836,11609=>941,11610=>941,11611=>734,11612=>876,11613=>771,11614=>734,11615=>683,11616=>774,11617=>837,11618=>683,11619=>850,11620=>697,11621=>850,11631=>716,11800=>580,11810=>457,11811=>457,11812=>457,11813=>457,11822=>580,19904=>896,19905=>896,19906=>896,19907=>896,19908=>896,19909=>896,19910=>896,19911=>896,19912=>896,19913=>896,19914=>896,19915=>896,19916=>896,19917=>896,19918=>896,19919=>896,19920=>896,19921=>896,19922=>896,19923=>896,19924=>896,19925=>896,19926=>896,19927=>896,19928=>896,19929=>896,19930=>896,19931=>896,19932=>896,19933=>896,19934=>896,19935=>896,19936=>896,19937=>896,19938=>896,19939=>896,19940=>896,19941=>896,19942=>896,19943=>896,19944=>896,19945=>896,19946=>896,19947=>896,19948=>896,19949=>896,19950=>896,19951=>896,19952=>896,19953=>896,19954=>896,19955=>896,19956=>896,19957=>896,19958=>896,19959=>896,19960=>896,19961=>896,19962=>896,19963=>896,19964=>896,19965=>896,19966=>896,19967=>896,42564=>720,42565=>595,42566=>436,42567=>440,42572=>1405,42573=>1173,42576=>1234,42577=>1027,42580=>1174,42581=>972,42582=>1093,42583=>958,42594=>1085,42595=>924,42596=>1096,42597=>912,42598=>1260,42599=>997,42600=>850,42601=>687,42602=>1037,42603=>868,42604=>1406,42605=>1106,42606=>961,42634=>963,42635=>787,42636=>682,42637=>580,42644=>808,42645=>712,42760=>500,42761=>500,42762=>500,42763=>500,42764=>500,42765=>500,42766=>500,42767=>500,42768=>500,42769=>500,42770=>500,42771=>500,42772=>500,42773=>500,42774=>500,42779=>400,42780=>400,42781=>287,42782=>287,42783=>287,42786=>444,42787=>390,42788=>540,42789=>540,42790=>837,42791=>712,42792=>1031,42793=>857,42794=>696,42795=>557,42800=>559,42801=>595,42802=>1349,42803=>1052,42804=>1284,42805=>1064,42806=>1216,42807=>1054,42808=>1079,42809=>922,42810=>1079,42811=>922,42812=>1035,42813=>922,42814=>698,42815=>549,42822=>850,42823=>542,42824=>683,42825=>531,42826=>918,42827=>814,42830=>1406,42831=>1106,42832=>733,42833=>716,42834=>948,42835=>937,42838=>850,42839=>716,42852=>738,42853=>716,42854=>738,42855=>716,42880=>637,42881=>343,42882=>837,42883=>712,42889=>400,42890=>386,42891=>456,42892=>306,42893=>808,42894=>693,42896=>928,42897=>768,43002=>1062,43003=>683,43004=>733,43005=>995,43006=>372,43007=>1325,61184=>216,61185=>242,61186=>267,61187=>277,61188=>282,61189=>242,61190=>216,61191=>242,61192=>267,61193=>277,61194=>267,61195=>242,61196=>216,61197=>242,61198=>267,61199=>277,61200=>267,61201=>242,61202=>216,61203=>242,61204=>282,61205=>277,61206=>267,61207=>242,61208=>216,61209=>282,63173=>687,64256=>810,64257=>741,64258=>741,64259=>1115,64260=>1116,64261=>808,64262=>1020,64275=>1388,64276=>1384,64277=>1378,64278=>1384,64279=>1713,64285=>294,64286=>0,64287=>519,64288=>665,64289=>939,64290=>788,64291=>920,64292=>786,64293=>857,64294=>869,64295=>821,64296=>890,64297=>838,64298=>758,64299=>758,64300=>758,64301=>758,64302=>728,64303=>728,64304=>728,64305=>610,64306=>447,64307=>588,64308=>687,64309=>437,64310=>485,64312=>679,64313=>435,64314=>578,64315=>566,64316=>605,64318=>724,64320=>453,64321=>680,64323=>675,64324=>658,64326=>653,64327=>736,64328=>602,64329=>758,64330=>683,64331=>343,64332=>610,64333=>566,64334=>658,64335=>710,64338=>1005,64339=>1059,64340=>375,64341=>408,64342=>1005,64343=>1059,64344=>375,64345=>408,64346=>1005,64347=>1059,64348=>375,64349=>408,64350=>1005,64351=>1059,64352=>375,64353=>408,64354=>1005,64355=>1059,64356=>375,64357=>408,64358=>1005,64359=>1059,64360=>375,64361=>408,64362=>1162,64363=>1191,64364=>655,64365=>720,64366=>1162,64367=>1191,64368=>655,64369=>720,64370=>721,64371=>721,64372=>721,64373=>721,64374=>721,64375=>721,64376=>721,64377=>721,64378=>721,64379=>721,64380=>721,64381=>721,64382=>721,64383=>721,64384=>721,64385=>721,64386=>513,64387=>578,64388=>513,64389=>578,64390=>513,64391=>578,64392=>513,64393=>578,64394=>576,64395=>622,64396=>576,64397=>622,64398=>1024,64399=>1024,64400=>582,64401=>582,64402=>1024,64403=>1024,64404=>582,64405=>582,64406=>1024,64407=>1024,64408=>582,64409=>582,64410=>1024,64411=>1024,64412=>582,64413=>582,64414=>854,64415=>900,64416=>854,64417=>900,64418=>375,64419=>408,64426=>938,64427=>880,64428=>693,64429=>660,64467=>824,64468=>843,64469=>476,64470=>552,64473=>622,64474=>627,64488=>375,64489=>408,64508=>917,64509=>1012,64510=>375,64511=>408,65024=>0,65025=>0,65026=>0,65027=>0,65028=>0,65029=>0,65030=>0,65031=>0,65032=>0,65033=>0,65034=>0,65035=>0,65036=>0,65037=>0,65038=>0,65039=>0,65056=>0,65057=>0,65058=>0,65059=>0,65136=>342,65137=>342,65138=>342,65139=>346,65140=>342,65142=>342,65143=>342,65144=>342,65145=>342,65146=>342,65147=>342,65148=>342,65149=>342,65150=>342,65151=>342,65152=>511,65153=>343,65154=>375,65155=>343,65156=>375,65157=>622,65158=>627,65159=>343,65160=>375,65161=>917,65162=>917,65163=>375,65164=>408,65165=>343,65166=>375,65167=>1005,65168=>1059,65169=>375,65170=>408,65171=>590,65172=>606,65173=>1005,65174=>1059,65175=>375,65176=>408,65177=>1005,65178=>1059,65179=>375,65180=>408,65181=>721,65182=>721,65183=>721,65184=>721,65185=>721,65186=>721,65187=>721,65188=>721,65189=>721,65190=>721,65191=>721,65192=>721,65193=>513,65194=>578,65195=>513,65196=>578,65197=>576,65198=>622,65199=>576,65200=>622,65201=>1380,65202=>1414,65203=>983,65204=>1018,65205=>1380,65206=>1414,65207=>983,65208=>1018,65209=>1345,65210=>1364,65211=>966,65212=>985,65213=>1345,65214=>1364,65215=>966,65216=>985,65217=>1039,65218=>1071,65219=>942,65220=>974,65221=>1039,65222=>1071,65223=>942,65224=>974,65225=>683,65226=>683,65227=>683,65228=>564,65229=>683,65230=>683,65231=>683,65232=>564,65233=>1162,65234=>1191,65235=>655,65236=>720,65237=>894,65238=>901,65239=>655,65240=>720,65241=>917,65242=>931,65243=>582,65244=>582,65245=>868,65246=>893,65247=>375,65248=>408,65249=>733,65250=>784,65251=>619,65252=>670,65253=>854,65254=>900,65255=>375,65256=>408,65257=>590,65258=>606,65259=>693,65260=>660,65261=>622,65262=>627,65263=>917,65264=>1012,65265=>917,65266=>1012,65267=>375,65268=>408,65269=>745,65270=>759,65271=>745,65272=>759,65273=>745,65274=>759,65275=>745,65276=>759,65279=>0,65529=>0,65530=>0,65531=>0,65532=>0,65533=>1113,65535=>600);// --- EOF ---
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handle field values (possibly uploaded from a file) * * original if-clause checked, whether input was stored in a possible * fields_upload_XX var. Now check, if the field is set. If it is empty or a * malicious file, do not alter fields contents. If an empty or invalid file is * specified, the binary data gets deleter. Maybe a nice new text-variable is * appropriate to document this behaviour. * * security cautions! You could trick the form and submit any file the * webserver has access to for upload to a binary field. Shouldn't be that easy! ;) * * default is to advance to the field-value parsing. Will only be set to * true when a binary file is uploaded, thus bypassing further manipulation of $val. * * note: grab_globals has extracted the fields from _FILES or HTTP_POST_FILES * * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * do not import request variable into global scope */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/File.class.php';$file_to_insert = new PMA_File();$file_to_insert->checkTblChangeForm($key, $rownumber);$possibly_uploaded_val = $file_to_insert->getContent();if ($file_to_insert->isError()) {    $message .= $file_to_insert->getError();}$file_to_insert->cleanUp();if (false !== $possibly_uploaded_val) {    $val = $possibly_uploaded_val;} else {    // f i e l d    v a l u e    i n    t h e    f o r m    if (isset($me_fields_type[$key])) {        $type = $me_fields_type[$key];    } else {        $type = '';    }    // $key contains the md5() of the fieldname    if ($type != 'protected' && $type != 'set' && 0 === strlen($val)) {        // best way to avoid problems in strict mode (works also in non-strict mode)        if (isset($me_auto_increment)  && isset($me_auto_increment[$key])) {            $val = 'NULL';        } else {            $val = "''";        }    } elseif ($type == 'set') {        if (! empty($_REQUEST['fields']['multi_edit'][$rownumber][$key])) {            $val = implode(',', $_REQUEST['fields']['multi_edit'][$rownumber][$key]);            $val = "'" . PMA_sqlAddSlashes($val) . "'";        } else {             $val = "''";        }    } elseif ($type == 'protected') {        // here we are in protected mode (asked in the config)        // so tbl_change has put this special value in the        // fields array, so we do not change the field value        // but we can still handle field upload        // when in UPDATE mode, do not alter field's contents. When in INSERT        // mode, insert empty field because no values were submitted. If protected        // blobs where set, insert original fields content.            if (! empty($prot_row[$me_fields_name[$key]])) {                $val = '0x' . bin2hex($prot_row[$me_fields_name[$key]]);            } else {                $val = '';            }    } elseif ($type == 'bit') {        $val = preg_replace('/[^01]/', '0', $val);        $val = "b'" . PMA_sqlAddSlashes($val) . "'";    } elseif (! (($type == 'datetime' || $type == 'timestamp') && $val == 'CURRENT_TIMESTAMP')) {        $val = "'" . PMA_sqlAddSlashes($val) . "'";    }    // Was the Null checkbox checked for this field?    // (if there is a value, we ignore the Null checkbox: this could    // be possible if Javascript is disabled in the browser)    if (! empty($me_fields_null[$key])     && ($val == "''" || $val == '')) {        $val = 'NULL';    }    // The Null checkbox was unchecked for this field    if (empty($val) && ! empty($me_fields_null_prev[$key]) && ! isset($me_fields_null[$key])) {        $val = "''";    }}  // end else (field value in the form)unset($type);?>
<?php/** * handles creation of the GIS visualizations. * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'openlayers/OpenLayers.js';$GLOBALS['js_include'][] = 'jquery/jquery.svg.js';$GLOBALS['js_include'][] = 'jquery/jquery.mousewheel.js';$GLOBALS['js_include'][] = 'jquery/jquery.event.drag-2.0.min.js';$GLOBALS['js_include'][] = 'tbl_gis_visualization.js';$GLOBALS['js_include'][] = 'OpenStreetMap.js';// Allows for resending headers even after sending some dataob_start();// Runs common workrequire_once './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'sql.php';// Import visualization functionsrequire_once './libraries/gis_visualization.lib.php';// Execute the query and return the result$result = PMA_DBI_try_query($sql_query);// Get the meta data of results$meta = PMA_DBI_get_fields_meta($result);// Find the candidate fields for label column and spatial column$labelCandidates = array(); $spatialCandidates = array();foreach ($meta as $column_meta) {    if ($column_meta->type == 'geometry') {        $spatialCandidates[] = $column_meta->name;    } else {        $labelCandidates[] = $column_meta->name;    }}// Get settings if any posted$visualizationSettings = array();if (PMA_isValid($_REQUEST['visualizationSettings'], 'array')) {    $visualizationSettings = $_REQUEST['visualizationSettings'];}if (! isset($visualizationSettings['labelColumn']) && isset($labelCandidates[0])) {    $visualizationSettings['labelColumn'] = '';}// If spatial column is not set, use first geometric colum as spatial columnif (! isset($visualizationSettings['spatialColumn'])) {    $visualizationSettings['spatialColumn'] = $spatialCandidates[0];}// Convert geometric columns from bytes to text.$modified_query = PMA_GIS_modifyQuery($sql_query, $visualizationSettings);$modified_result = PMA_DBI_try_query($modified_query);$data = array();while ($row = PMA_DBI_fetch_assoc($modified_result)) {    $data[] = $row;}// If all the rows contain SRID, use OpenStreetMaps on the initial loading.if (! isset($_REQUEST['displayVisualization'])) {    $visualizationSettings['choice'] = 'useBaseLayer';    foreach ($data as $row) {        if ($row['srid'] == 0) {            unset($visualizationSettings['choice']);            break;        }    }}if (isset($_REQUEST['saveToFile'])) {    $file_name = $_REQUEST['fileName'];    if ($file_name == '') {        $file_name = $visualizationSettings['spatialColumn'];    }    $save_format = $_REQUEST['fileFormat'];    PMA_GIS_saveToFile($data, $visualizationSettings, $save_format, $file_name);    exit();}$svg_support = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? false : true;$format = $svg_support ? 'svg' : 'png';// get the chart and settings after chart generation$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);/** * Displays the page */?><!-- Display visulalization options --><div id="div_view_options"><form method="post" action="tbl_gis_visualization.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display GIS Visualization'); ?></legend>    <div id="placeholder" style="width:<?php echo($visualizationSettings['width']); ?>px;height:<?php echo($visualizationSettings['height']); ?>px;">        <?php echo $visualization; ?>    </div>    <div id="openlayersmap"></div>    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <script language="javascript" type="text/javascript">        function drawOpenLayers() {            <?php echo (PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol')); ?>        }    </script>    <input type="hidden" name="sql_query" id="sql_query" value="<?php echo htmlspecialchars($sql_query); ?>" />    <table class="gis_table">    <tr><td><label for="width"><?php echo __("Width"); ?></label></td>        <td><input type="text" name="visualizationSettings[width]" id="width" value="<?php echo (isset($visualizationSettings['width']) ? htmlspecialchars($visualizationSettings['width']) : ''); ?>" /></td>    </tr>    <tr><td><label for="height"><?php echo __("Height"); ?></label></td>        <td><input type="text" name="visualizationSettings[height]" id="height" value="<?php echo (isset($visualizationSettings['height']) ? htmlspecialchars($visualizationSettings['height']) : ''); ?>" /></td>    </tr>    <tr><td><label for="labelColumn"><?php echo __("Label column"); ?></label></td>        <td><select name="visualizationSettings[labelColumn]" id="labelColumn">            <option value=""><?php echo __("-- None --"); ?></option>        <?php            foreach ($labelCandidates as $labelCandidate) {                echo('<option value="' . htmlspecialchars($labelCandidate) . '"');                if ($labelCandidate == $visualizationSettings['labelColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($labelCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td><label for="spatial Column"><?php echo __("Spatial column"); ?></label></td>        <td><select name="visualizationSettings[spatialColumn]" id="spatialColumn">        <?php            foreach ($spatialCandidates as $spatialCandidate) {                echo('<option value="' . htmlspecialchars($spatialCandidate) . '"');                if ($spatialCandidate == $visualizationSettings['spatialColumn']) {                    echo(' selected="selected"');                }                echo('>' . htmlspecialchars($spatialCandidate) . '</option>');            }        ?>        </select></td>    </tr>    <tr><td class="choice" colspan="2">        <input type="checkbox" name="visualizationSettings[choice]" id="choice" value="useBaseLayer"        <?php            if (isset($visualizationSettings['choice'])) {                echo(' checked="checked"');            }        ?>        />        <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>    </td></tr>    <tr><td></td>        <td class="button"><input type="submit" name="displayVisualization" value="<?php echo __('Redraw'); ?>" /></td>    </tr>    <tr><td class="save"><?php echo __("Save to file"); ?></td></tr>    <tr><td><label for="fileName"><?php echo __("File name"); ?></label></td>        <td><input type="text" name="fileName" id="fileName" /></td>    </tr>    <tr><td><label for="fileFormat"><?php echo __("Format"); ?></label></td>        <td><select name="fileFormat" id="fileFormat">            <option value="png">PNG</option>            <option value="pdf">PDF</option>            <?php            if ($svg_support) {                echo ('<option value="svg" selected="selected">SVG</option>');            }            ?>        </select></td>    </tr>    <tr><td></td>        <td class="button"><input type="submit" name="saveToFile" value="<?php echo __('Save'); ?>" /></td>    </tr>    </table></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Handles the visualization of GIS GEOMETRYCOLLECTION objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Geometrycollection extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($sub_part);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $color, $scale_data, $image)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $image = $gis_obj->prepareRowAsPng($sub_part, $label, $color, $scale_data, $image);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $pdf = $gis_obj->prepareRowAsPdf($sub_part, $label, $color, $scale_data, $pdf);        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsSvg($sub_part, $label, $color, $scale_data);        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsOl($sub_part, $srid, $label, $color, $scale_data);        }        return $row;    }    /**     * Split the GEOMETRYCOLLECTION object and get its constituents.     *     * @param string $goem_col Geometry collection string     *     * @return the constituents of the geometry collection object     */    private function _explodeGeomCol($goem_col)    {        $sub_parts = array();        $br_count = 0;        $start = 0;        $count = 0;        foreach (str_split($goem_col) as $char) {            if ($char == '(') {                $br_count++;            } elseif ($char == ')') {                $br_count--;                if ($br_count == 0) {                    $sub_parts[] = substr($goem_col, $start, ($count + 1 - $start));                    $start = $count + 2;                }            }            $count++;        }        return $sub_parts;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $geom_count = (isset($gis_data['GEOMETRYCOLLECTION']['geom_count']))            ? $gis_data['GEOMETRYCOLLECTION']['geom_count'] : 1;        $wkt = 'GEOMETRYCOLLECTION(';        for ($i = 0; $i < $geom_count; $i++) {            if (isset($gis_data[$i]['gis_type'])) {                $type = $gis_data[$i]['gis_type'];                $gis_obj = PMA_GIS_Factory::factory($type);                if (! $gis_obj) {                    continue;                }                $wkt .= $gis_obj->generateWkt($gis_data, $i, $empty) . ',';            }        }        if (isset($gis_data[0]['gis_type'])) {            $wkt = substr($wkt, 0, strlen($wkt) - 1);        }        $wkt .= ')';        return $wkt;    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value)    {        $params = array();        $data = PMA_GIS_Geometry::generateParams($value);        $params['srid'] = $data['srid'];        $wkt = $data['wkt'];        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($wkt, 19, (strlen($wkt) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        $params['GEOMETRYCOLLECTION']['geom_count'] = count($sub_parts);        $i = 0;        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $params = array_merge($params, $gis_obj->generateParams($sub_part, $i));            $i++;        }        return $params;    }}?>
<?php/** * generate an WebApp file for Prism / WebRunner * * @see http://wiki.mozilla.org/Prism * @package PhpMyAdmin *//** * @ignore */define('PMA_MINIMUM_COMMON', true);/** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * ZIP file handler. */require './libraries/zip.lib.php';// ini file$parameters = array(    'id'        => 'phpMyAdmin@' . $_SERVER['HTTP_HOST'],    'uri'       => $GLOBALS['PMA_Config']->get('PmaAbsoluteUri'),    'status'    => 'yes',    'location'  => 'no',    'sidebar'   => 'no',    'navigation' => 'no',    'icon'      => 'phpMyAdmin',);// dom sript file// none need yet// icon$icon = 'favicon.ico';// name$name = 'phpMyAdmin.webapp';$ini_file = "[Parameters]\n";foreach ($parameters as $key => $value) {    $ini_file .= $key . '=' . $value . "\n";}PMA_download_header($name, 'application/webapp', 0, false);$zip = new zipfile;$zip->setDoWrite();$zip->addFile($ini_file, 'webapp.ini');$zip->addFile(file_get_contents($icon), 'phpMyAdmin.ico');$zip->file();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * get master replication from server */$server_master_replication = PMA_DBI_fetch_result('SHOW MASTER STATUS');/** * get slave replication from server */$server_slave_replication = PMA_DBI_fetch_result('SHOW SLAVE STATUS');/** * replication types */$replication_types = array('master', 'slave');/** * define variables for master status */$master_variables = array(    'File',    'Position',    'Binlog_Do_DB',    'Binlog_Ignore_DB',);/** * Define variables for slave status */$slave_variables  = array(    'Slave_IO_State',    'Master_Host',    'Master_User',    'Master_Port',    'Connect_Retry',    'Master_Log_File',    'Read_Master_Log_Pos',    'Relay_Log_File',    'Relay_Log_Pos',    'Relay_Master_Log_File',    'Slave_IO_Running',    'Slave_SQL_Running',    'Replicate_Do_DB',    'Replicate_Ignore_DB',    'Replicate_Do_Table',    'Replicate_Ignore_Table',    'Replicate_Wild_Do_Table',    'Replicate_Wild_Ignore_Table',    'Last_Errno',    'Last_Error',    'Skip_Counter',    'Exec_Master_Log_Pos',    'Relay_Log_Space',    'Until_Condition',    'Until_Log_File',    'Until_Log_Pos',    'Master_SSL_Allowed',    'Master_SSL_CA_File',    'Master_SSL_CA_Path',    'Master_SSL_Cert',    'Master_SSL_Cipher',    'Master_SSL_Key',    'Seconds_Behind_Master',);/** * define important variables, which need to be watched for correct running of replication in slave mode * * @usedby PMA_replication_print_status_table() */// TODO change to regexp or something, to allow for negative match. To e.g. highlight 'Last_Error'//$slave_variables_alerts = array(    'Slave_IO_Running' => 'No',    'Slave_SQL_Running' => 'No',);$slave_variables_oks = array(    'Slave_IO_Running' => 'Yes',    'Slave_SQL_Running' => 'Yes',);// check which replication is available and set $server_{master/slave}_status and assign values// replication info is more easily passed to functions/* * @todo use $replication_info everywhere instead of the generated variable names */$replication_info = array();foreach ($replication_types as $type) {    if (count(${"server_{$type}_replication"}) > 0) {        ${"server_{$type}_status"} = true;        $replication_info[$type]['status'] = true;    } else {        ${"server_{$type}_status"} = false;        $replication_info[$type]['status'] = false;    }    if (${"server_{$type}_status"}) {        if ($type == "master") {            ${"server_{$type}_Do_DB"} = explode(",", $server_master_replication[0]["Binlog_Do_DB"]);            $replication_info[$type]['Do_DB'] = ${"server_{$type}_Do_DB"};            ${"server_{$type}_Ignore_DB"} = explode(",", $server_master_replication[0]["Binlog_Ignore_DB"]);            $replication_info[$type]['Ignore_DB'] = ${"server_{$type}_Ignore_DB"};        } elseif ($type == "slave") {            ${"server_{$type}_Do_DB"} = explode(",", $server_slave_replication[0]["Replicate_Do_DB"]);            $replication_info[$type]['Do_DB'] = ${"server_{$type}_Do_DB"};            ${"server_{$type}_Ignore_DB"} = explode(",", $server_slave_replication[0]["Replicate_Ignore_DB"]);            $replication_info[$type]['Ignore_DB'] = ${"server_{$type}_Ignore_DB"};            ${"server_{$type}_Do_Table"} = explode(",", $server_slave_replication[0]["Replicate_Do_Table"]);            $replication_info[$type]['Do_Table'] = ${"server_{$type}_Do_Table"};            ${"server_{$type}_Ignore_Table"} = explode(",", $server_slave_replication[0]["Replicate_Ignore_Table"]);            $replication_info[$type]['Ignore_Table'] = ${"server_{$type}_Ignore_Table"};            ${"server_{$type}_Wild_Do_Table"} = explode(",", $server_slave_replication[0]["Replicate_Wild_Do_Table"]);            $replication_info[$type]['Wild_Do_Table'] = ${"server_{$type}_Wild_Do_Table"};            ${"server_{$type}_Wild_Ignore_Table"} = explode(",", $server_slave_replication[0]["Replicate_Wild_Ignore_Table"]);            $replication_info[$type]['Wild_Ignore_Table'] = ${"server_{$type}_Wild_Ignore_Table"};        }    }}/** * @param $string contains "dbname.tablename" * @param $what   what to extract (db|table) * @return $string the extracted part */function PMA_extract_db_or_table($string, $what = 'db'){    $list = explode(".", $string);    if ('db' == $what) {        return $list[0];    } else {        return $list[1];    }}/** * @param string $action  possible values: START or STOP * @param string $control default: null, possible values: SQL_THREAD or IO_THREAD or null. If it is set to null, it controls both SQL_THREAD and IO_THREAD * @param mixed  $link    mysql link * * @return mixed output of PMA_DBI_try_query */function PMA_replication_slave_control($action, $control = null, $link = null){    $action = strtoupper($action);    $control = strtoupper($control);    if ($action != "START" && $action != "STOP") {        return -1;    }    if ($control != "SQL_THREAD" && $control != "IO_THREAD" && $control != null) {        return -1;    }    return PMA_DBI_try_query($action . " SLAVE " . $control . ";", $link);}/** * @param string $user     replication user on master * @param string $password password for the user * @param string $host     master's hostname or IP * @param int    $port     port, where mysql is running * @param array  $pos      position of mysql replication, array should contain fields File and Position * @param bool   $stop     shall we stop slave? * @param bool   $start    shall we start slave? * @param mixed  $link     mysql link * * @return output of CHANGE MASTER mysql command */function PMA_replication_slave_change_master($user, $password, $host, $port, $pos, $stop = true, $start = true, $link = null){    if ($stop) {        PMA_replication_slave_control("STOP", null, $link);    }    $out = PMA_DBI_try_query('CHANGE MASTER TO ' .        'MASTER_HOST=\'' . $host . '\',' .        'MASTER_PORT=' . ($port * 1) . ',' .        'MASTER_USER=\'' . $user . '\',' .        'MASTER_PASSWORD=\'' . $password . '\',' .        'MASTER_LOG_FILE=\'' . $pos["File"] . '\',' .        'MASTER_LOG_POS=' . $pos["Position"] . ';', $link);    if ($start) {        PMA_replication_slave_control("START", null, $link);    }    return $out;}/** * This function provides connection to remote mysql server * * @param string $user     mysql username * @param string $password password for the user * @param string $host     mysql server's hostname or IP * @param int    $port     mysql remote port * @param string $socket   path to unix socket * * @return mixed $link mysql link on success */function PMA_replication_connect_to_master($user, $password, $host = null, $port = null, $socket = null){    $server = array();    $server["host"] = $host;    $server["port"] = $port;    $server["socket"] = $socket;    // 5th parameter set to true means that it's an auxiliary connection    // and we must not go back to login page if it fails    return PMA_DBI_connect($user, $password, false, $server, true);}/** * @param mixed $link mysql link * * @return array - containing File and Position in MySQL replication on master server, useful for PMA_replication_slave_change_master */function PMA_replication_slave_bin_log_master($link = null){    $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $link);    $output = array();    if (! empty($data)) {        $output["File"] = $data[0]["File"];        $output["Position"] = $data[0]["Position"];    }    return $output;}/** * Get list of replicated databases on master server * * @param mixed $link mysql link * * @return array array of replicated databases */function PMA_replication_master_replicated_dbs($link = null){    $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $link); // let's find out, which databases are replicated    $do_db     = array();    $ignore_db = array();    if (! empty($data[0]['Binlog_Do_DB'])) {        $do_db     = explode(',', $data[0]['Binlog_Do_DB']);    }    if (! empty($data[0]['Binlog_Ignore_DB'])) {        $ignore_db = explode(',', $data[0]['Binlog_Ignore_DB']);    }    $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $link);    while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {        if (PMA_is_system_schema($tmp_row[0]))            continue;        if (count($do_db) == 0) {            if (array_search($tmp_row[0], $ignore_db) !== false) {                continue;            }            $dblist[] = $tmp_row[0];        } else {            if (array_search($tmp_row[0], $do_db) !== false) {                $dblist[] = $tmp_row[0];            }        }    } // end while    return $link;}/** * This function provides synchronization of structure and data between two mysql servers. * * @todo improve code sharing between the function and synchronization * * @param string $db       name of database, which should be synchronized * @param mixed  $src_link link of source server, note: if the server is current PMA server, use null * @param mixed  $trg_link link of target server, note: if the server is current PMA server, use null * @param bool   $data     if true, then data will be copied as well */function PMA_replication_synchronize_db($db, $src_link, $trg_link, $data = true){    $src_db = $trg_db = $db;    $src_tables = PMA_DBI_get_tables($src_db, $src_link);    $trg_tables = PMA_DBI_get_tables($trg_db, $trg_link);    /**     * initializing arrays to save table names     */    $source_tables_uncommon = array();    $target_tables_uncommon = array();    $matching_tables = array();    $matching_tables_num = 0;    /**     * Criterion for matching tables is just their names.     * Finding the uncommon tables for the source database     * BY comparing the matching tables with all the tables in the source database     */    PMA_getMatchingTables($trg_tables, $src_tables, $matching_tables, $source_tables_uncommon);    /**     * Finding the uncommon tables for the target database     * BY comparing the matching tables with all the tables in the target database     */    PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, $target_tables_uncommon);    /**     *     * Comparing Data In the Matching Tables     * It is assumed that the matching tables are structurally     * and typely exactly the same     */    $fields_num = array();    $matching_tables_fields = array();    $matching_tables_keys   = array();    $insert_array = array(array(array()));    $update_array = array(array(array()));    $delete_array = array();    $row_count = array();    $uncommon_tables_fields = array();    $matching_tables_num = sizeof($matching_tables);    for ($i = 0; $i < sizeof($matching_tables); $i++) {        PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $matching_tables_fields, $update_array, $insert_array,            $delete_array, $fields_num, $i, $matching_tables_keys);    }    for ($j = 0; $j < sizeof($source_tables_uncommon); $j++) {        PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $j, $row_count);    }    /**     * INTEGRATION OF STRUCTURE DIFFERENCE CODE     *     */    $source_columns = array();    $target_columns = array();    $alter_str_array = array(array());    $add_column_array = array(array());    $uncommon_columns = array();    $target_tables_keys = array();    $source_indexes = array();    $target_indexes = array();    $add_indexes_array = array();    $alter_indexes_array = array();    $remove_indexes_array = array();    $criteria = array('Field', 'Type', 'Null', 'Collation', 'Key', 'Default', 'Comment');    for ($counter = 0; $counter < $matching_tables_num; $counter++) {        PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns,            $target_columns, $alter_str_array, $add_column_array, $uncommon_columns, $criteria, $target_tables_keys, $counter);        PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_indexes, $target_indexes,            $add_indexes_array, $alter_indexes_array, $remove_indexes_array, $counter);    }    /**     * Generating Create Table query for all the non-matching tables present in Source but not in Target and populating tables.     */    for ($q = 0; $q < sizeof($source_tables_uncommon); $q++) {        if (isset($source_tables_uncommon[$q])) {            PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, $source_tables_uncommon, $q, $uncommon_tables_fields, false);        }        if (isset($row_count[$q]) && $data) {            PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $source_tables_uncommon, $q, $uncommon_tables_fields, false);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__sql_info(){    return array(        'info' => __('Formats text as SQL query with syntax highlighting.'),        );}/** * */function PMA_transformation_text_plain__sql($buffer, $options = array(), $meta = ''){    $result = PMA_SQP_formatHtml(PMA_SQP_parse($buffer));    // Need to clear error state not to break subsequent queries display.    PMA_SQP_resetError();    return $result;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run single signon authentication. * * @package PhpMyAdmin-Auth-Signon *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    unset($_SESSION['LAST_SIGNON_URL']);    if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {        PMA_fatalError('You must set SignonURL!');    } elseif (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        /* Perform logout to custom URL */        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);    } else {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);    }    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    /* Check if we're using same sigon server */    if (isset($_SESSION['LAST_SIGNON_URL']) && $_SESSION['LAST_SIGNON_URL'] != $GLOBALS['cfg']['Server']['SignonURL']) {        return false;    }    /* Script name */    $script_name = $GLOBALS['cfg']['Server']['SignonScript'];    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Login URL */    $signon_url = $GLOBALS['cfg']['Server']['SignonURL'];    /* Current host */    $single_signon_host = $GLOBALS['cfg']['Server']['host'];    /* Current port */    $single_signon_port = $GLOBALS['cfg']['Server']['port'];    /* No configuration updates */    $single_signon_cfgupdate = array();    /* Are we requested to do logout? */    $do_logout = !empty($_REQUEST['old_usr']);    /* Handle script based auth */    if (!empty($script_name)) {        if (! file_exists($script_name)) {            PMA_fatalError(__('Can not find signon authentication script:') . ' ' . $script_name);        }        include $script_name;        list ($PHP_AUTH_USER, $PHP_AUTH_PW) = get_login_credentials($cfg['Server']['user']);    /* Does session exist? */    } elseif (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Clear error message */        unset($_SESSION['PMA_single_signon_error_message']);        /* Grab credentials if they exist */        if (isset($_SESSION['PMA_single_signon_user'])) {            if ($do_logout) {                $PHP_AUTH_USER = '';            } else {                $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];            }        }        if (isset($_SESSION['PMA_single_signon_password'])) {            if ($do_logout) {                $PHP_AUTH_PW = '';            } else {                $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];            }        }        if (isset($_SESSION['PMA_single_signon_host'])) {            $single_signon_host = $_SESSION['PMA_single_signon_host'];        }        if (isset($_SESSION['PMA_single_signon_port'])) {            $single_signon_port = $_SESSION['PMA_single_signon_port'];        }        if (isset($_SESSION['PMA_single_signon_cfgupdate'])) {            $single_signon_cfgupdate = $_SESSION['PMA_single_signon_cfgupdate'];        }        /* Also get token as it is needed to access subpages */        if (isset($_SESSION['PMA_single_signon_token'])) {            /* No need to care about token on logout */            $pma_token = $_SESSION['PMA_single_signon_token'];        }        /* End single signon session */        session_write_close();        /* Restart phpMyAdmin session */        session_name($old_session);        if (!empty($old_id)) {            session_id($old_id);        }        session_start();        /* Set the single signon host */        $GLOBALS['cfg']['Server']['host'] = $single_signon_host;        /* Set the single signon port */        $GLOBALS['cfg']['Server']['port'] = $single_signon_port;        /* Configuration update */        $GLOBALS['cfg']['Server'] = array_merge($GLOBALS['cfg']['Server'], $single_signon_cfgupdate);        /* Restore our token */        if (!empty($pma_token)) {            $_SESSION[' PMA_token '] = $pma_token;        }        /**         * Clear user cache.         */        PMA_clearUserCache();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        unset($_SESSION['LAST_SIGNON_URL']);        return false;    } else {        $_SESSION['LAST_SIGNON_URL'] = $GLOBALS['cfg']['Server']['SignonURL'];        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Does session exist? */    if (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Set error message */        if (! empty($GLOBALS['login_without_password_is_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Login without a password is forbidden by configuration (see AllowNoPassword)');        } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Access denied');        } elseif (! empty($GLOBALS['no_activity'])) {            $_SESSION['PMA_single_signon_error_message'] = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        } elseif (PMA_DBI_getError()) {            $_SESSION['PMA_single_signon_error_message'] = PMA_sanitize(PMA_DBI_getError());        } else {            $_SESSION['PMA_single_signon_error_message'] = __('Cannot log in to the MySQL server');        }    }    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build XML dumps of tables * * @package PhpMyAdmin-Export * @subpackage XML */if (! defined('PHPMYADMIN')) {    exit;}if (!strlen($GLOBALS['db'])) { /* Can't do server export */    return;}if (isset($plugin_list)) {    $plugin_list['xml'] = array(        'text' => __('XML'),        'extension' => 'xml',        'mime_type' => 'text/xml',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options')        );    /* Export structure */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'structure',        'text' => __('Object creation options (all are recommended)')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_functions',            'text' => __('Functions')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_procedures',            'text' => __('Procedures')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_tables',        'text' => __('Tables')        );    if (!PMA_DRIZZLE) {        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_triggers',            'text' => __('Triggers')            );        $plugin_list['xml']['options'][] = array(            'type' => 'bool',            'name' => 'export_views',            'text' => __('Views')            );    }    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );    /* Data */    $plugin_list['xml']['options'][] = array(        'type' => 'begin_group',        'name' => 'data',        'text' => __('Data dump options')        );    $plugin_list['xml']['options'][] = array(        'type' => 'bool',        'name' => 'export_contents',        'text' => __('Export contents')        );    $plugin_list['xml']['options'][] = array(        'type' => 'end_group'        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        $foot = '</pma_xml_export>';        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $db;        global $table;        global $tables;        $export_struct = isset($GLOBALS['xml_export_functions']) || isset($GLOBALS['xml_export_procedures'])            || isset($GLOBALS['xml_export_tables']) || isset($GLOBALS['xml_export_triggers'])            || isset($GLOBALS['xml_export_views']);        $export_data = isset($GLOBALS['xml_export_contents']) ? true : false;        if ($GLOBALS['output_charset_conversion']) {            $charset = $GLOBALS['charset_of_file'];        } else {            $charset = 'utf-8';        }        $head  =  '<?xml version="1.0" encoding="' . $charset . '"?>' . $crlf               .  '<!--' . $crlf               .  '- phpMyAdmin XML Dump' . $crlf               .  '- version ' . PMA_VERSION . $crlf               .  '- http://www.phpmyadmin.net' . $crlf               .  '-' . $crlf               .  '- ' . __('Host') . ': ' . $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '- ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '- ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '- ' . __('PHP Version') . ': ' . phpversion() . $crlf               .  '-->' . $crlf . $crlf;        $head .= '<pma_xml_export version="1.0"' . (($export_struct) ? ' xmlns:pma="http://www.phpmyadmin.net/some_doc_url/"' : '') . '>' . $crlf;        if ($export_struct) {            if (PMA_DRIZZLE) {                $result = PMA_DBI_fetch_result("                    SELECT                        'utf8' AS DEFAULT_CHARACTER_SET_NAME,                        DEFAULT_COLLATION_NAME                    FROM data_dictionary.SCHEMAS                    WHERE SCHEMA_NAME = '" . PMA_sqlAddSlashes($db) . "'");            } else {                $result = PMA_DBI_fetch_result('SELECT `DEFAULT_CHARACTER_SET_NAME`, `DEFAULT_COLLATION_NAME` FROM `information_schema`.`SCHEMATA` WHERE `SCHEMA_NAME` = \''.PMA_sqlAddSlashes($db).'\' LIMIT 1');            }            $db_collation = $result[0]['DEFAULT_COLLATION_NAME'];            $db_charset = $result[0]['DEFAULT_CHARACTER_SET_NAME'];            $head .= '    <!--' . $crlf;            $head .= '    - Structure schemas' . $crlf;            $head .= '    -->' . $crlf;            $head .= '    <pma:structure_schemas>' . $crlf;            $head .= '        <pma:database name="' . htmlspecialchars($db) . '" collation="' . $db_collation . '" charset="' . $db_charset . '">' . $crlf;            if (count($tables) == 0) {                $tables[] = $table;            }            foreach ($tables as $table) {                // Export tables and views                $result = PMA_DBI_fetch_result('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0);                $tbl =  $result[$table][1];                $is_view = PMA_Table::isView($db, $table);                if ($is_view) {                    $type = 'view';                } else {                    $type = 'table';                }                if ($is_view && ! isset($GLOBALS['xml_export_views'])) {                    continue;                }                if (! $is_view && ! isset($GLOBALS['xml_export_tables'])) {                    continue;                }                $head .= '            <pma:' . $type . ' name="' . $table . '">' . $crlf;                $tbl = "                " . htmlspecialchars($tbl);                $tbl = str_replace("\n", "\n                ", $tbl);                $head .= $tbl . ';' . $crlf;                $head .= '            </pma:' . $type . '>' . $crlf;                if (isset($GLOBALS['xml_export_triggers']) && $GLOBALS['xml_export_triggers']) {                    // Export triggers                    $triggers = PMA_DBI_get_triggers($db, $table);                    if ($triggers) {                        foreach ($triggers as $trigger) {                            $code = $trigger['create'];                            $head .= '            <pma:trigger name="' . $trigger['name'] . '">' . $crlf;                            // Do some formatting                            $code = substr(rtrim($code), 0, -3);                            $code = "                " . htmlspecialchars($code);                            $code = str_replace("\n", "\n                ", $code);                            $head .= $code . $crlf;                            $head .= '            </pma:trigger>' . $crlf;                        }                        unset($trigger);                        unset($triggers);                    }                }            }            if (isset($GLOBALS['xml_export_functions']) && $GLOBALS['xml_export_functions']) {                // Export functions                $functions = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');                if ($functions) {                    foreach ($functions as $function) {                        $head .= '            <pma:function name="' . $function . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'FUNCTION', $function);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:function>' . $crlf;                    }                    unset($create_func);                    unset($function);                    unset($functions);                }            }            if (isset($GLOBALS['xml_export_procedures']) && $GLOBALS['xml_export_procedures']) {                // Export procedures                $procedures = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');                if ($procedures) {                    foreach ($procedures as $procedure) {                        $head .= '            <pma:procedure name="' . $procedure . '">' . $crlf;                        // Do some formatting                        $sql = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure);                        $sql = rtrim($sql);                        $sql = "                " . htmlspecialchars($sql);                        $sql = str_replace("\n", "\n                ", $sql);                        $head .= $sql . $crlf;                        $head .= '            </pma:procedure>' . $crlf;                    }                    unset($create_proc);                    unset($procedure);                    unset($procedures);                }            }            unset($result);            $head .= '        </pma:database>' . $crlf;            $head .= '    </pma:structure_schemas>' . $crlf;            if ($export_data) {                $head .= $crlf;            }        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $head = '    <!--' . $crlf                  . '    - ' . __('Database') . ': ' .  '\'' . $db . '\'' . $crlf                  . '    -->' . $crlf                  . '    <database name="' . htmlspecialchars($db) . '">' . $crlf;            return PMA_exportOutputHandler($head);        } else {            return true;        }    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            return PMA_exportOutputHandler('    </database>' . $crlf);        } else {            return true;        }    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in XML format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        if (isset($GLOBALS['xml_export_contents']) && $GLOBALS['xml_export_contents']) {            $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);            $columns_cnt = PMA_DBI_num_fields($result);            $columns = array();            for ($i = 0; $i < $columns_cnt; $i++) {                $columns[$i] = stripslashes(str_replace(' ', '_', PMA_DBI_field_name($result, $i)));            }            unset($i);            $buffer      = '        <!-- ' . __('Table') . ' ' . $table . ' -->' . $crlf;            if (!PMA_exportOutputHandler($buffer)) {                return false;            }            while ($record = PMA_DBI_fetch_row($result)) {                $buffer         = '        <table name="' . htmlspecialchars($table) . '">' . $crlf;                for ($i = 0; $i < $columns_cnt; $i++) {                    // If a cell is NULL, still export it to preserve the XML structure                    if (!isset($record[$i]) || is_null($record[$i])) {                        $record[$i] = 'NULL';                    }                    $buffer .= '            <column name="' . htmlspecialchars($columns[$i]) . '">' . htmlspecialchars((string)$record[$i])                            .  '</column>' . $crlf;                }                $buffer         .= '        </table>' . $crlf;                if (!PMA_exportOutputHandler($buffer)) {                    return false;                }            }            PMA_DBI_free_result($result);        }        return true;    } // end of the 'PMA_getTableXML()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Alter one or more table columns * * linked from table_structure, uses libraries/tbl_properties.inc.php to display * form and handles this form data * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Gets tables informations */require_once './libraries/tbl_common.php';require_once './libraries/tbl_info.inc.php';$active_page = 'tbl_structure.php';/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);/** * Modifications have been submitted -> updates the table */$abort = false;if (isset($_REQUEST['do_save_data'])) {    $field_cnt = count($_REQUEST['field_orig']);    $key_fields = array();    $changes = array();    for ($i = 0; $i < $field_cnt; $i++) {        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(            $_REQUEST['field_orig'][$i],            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $key_fields,            $i,            $_REQUEST['field_default_orig'][$i]        );    } // end for    // Builds the primary keys statements and updates the table    $key_query = '';    /**     * this is a little bit more complex     *     * @todo if someone selects A_I when altering a column we need to check:     *  - no other column with A_I     *  - the column has an index, if not create one     *    if (count($key_fields)) {        $fields = array();        foreach ($key_fields as $each_field) {            if (isset($_REQUEST['field_name'][$each_field]) && strlen($_REQUEST['field_name'][$each_field])) {                $fields[] = PMA_backquote($_REQUEST['field_name'][$each_field]);            }        } // end for        $key_query = ', ADD KEY (' . implode(', ', $fields) . ') ';    }     */    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_DBI_getError(), 'USE ' . PMA_backquote($db) . ';', '', $err_url);    $sql_query = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $changes) . $key_query;    $result    = PMA_DBI_try_query($sql_query);    if ($result !== false) {        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        $btnDrop = 'Fake';        /**         * If comments were sent, enable relation stuff         */        include_once './libraries/transformations.lib.php';        // updaet field names in relation        if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {            foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {                if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {                    PMA_REL_renameField($db, $table, $fieldcontent,                        $_REQUEST['field_name'][$fieldindex]);                }            }        }        // update mime types        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table, $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        if (isset($_REQUEST['orig_field'])) {            $_REQUEST['field'] = $_REQUEST['orig_field'];        }        $regenerate = true;    }}/** * No modifications yet required -> displays the table fields * * $selected comes from multi_submits.inc.php */if ($abort == false) {    if ($_REQUEST['ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    if (! isset($selected)) {        PMA_checkParameters(array('field'));        $selected[]   = $_REQUEST['field'];        $selected_cnt = 1;    } else { // from a multiple submit        $selected_cnt = count($selected);    }    /**     * @todo optimize in case of multiple fields to modify     */    for ($i = 0; $i < $selected_cnt; $i++) {        $fields_meta[] = PMA_DBI_get_columns($db, $table, $selected[$i], true);    }    $num_fields  = count($fields_meta);    $action      = 'tbl_alter.php';    // Get more complete field information.    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options    // and to know when there is an empty DEFAULT value.    // Later, if the analyser returns more information, it    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.    /**     * @todo put this code into a require()     * or maybe make it part of PMA_DBI_get_columns();     */    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25).    $show_create_table = PMA_DBI_fetch_value('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    unset($show_create_table);    /**     * Form for changing properties.     */    include './libraries/tbl_properties.inc.php';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * XML import plugin for phpMyAdmin * * @todo    Improve efficiency * @package PhpMyAdmin-Import * @subpackage XML */if (! defined('PHPMYADMIN')) {    exit;}/** * We need way to disable external XML entities processing. */if (!function_exists('libxml_disable_entity_loader')) {    return;}/** * The possible scopes for $plugin_param are: 'table', 'database', and 'server' */if (isset($plugin_list)) {    $plugin_list['xml'] = array(        'text' => __('XML'),        'extension' => 'xml',        'options' => array(            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}$i = 0;$len = 0;$buffer = "";/** * Read in the file via PMA_importGetNextChunk so that * it can process compressed files */while (! ($finished && $i >= $len) && ! $error && ! $timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        /* subtract data we didn't handle yet and stop processing */        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        /* Handle rest of buffer */    } else {        /* Append new data to buffer */        $buffer .= $data;        unset($data);    }}unset($data);/** * Disable loading of external XML entities. */libxml_disable_entity_loader();/** * Load the XML string * * The option LIBXML_COMPACT is specified because it can * result in increased performance without the need to * alter the code in any way. It's basically a freebee. */$xml = simplexml_load_string($buffer, "SimpleXMLElement", LIBXML_COMPACT);unset($buffer);/** * The XML was malformed */if ($xml === false) {    PMA_Message::error(__('The XML file specified was either malformed or incomplete. Please correct the issue and try again.'))->display();    unset($xml);    $GLOBALS['finished'] = false;    return;}/** * Table accumulator */$tables = array();/** * Row accumulator */$rows = array();/** * Temp arrays */$tempRow = array();$tempCells = array();/** * CREATE code included (by default: no) */$struct_present = false;/** * Analyze the data in each table */$namespaces = $xml->getNameSpaces(true);/** * Get the database name, collation and charset */$db_attr = $xml->children($namespaces['pma'])->{'structure_schemas'}->{'database'};if ($db_attr instanceof SimpleXMLElement) {    $db_attr = $db_attr->attributes();    $db_name = (string)$db_attr['name'];    $collation = (string)$db_attr['collation'];    $charset = (string)$db_attr['charset'];} else {    /**     * If the structure section is not present     * get the database name from the data section     */    $db_attr = $xml->children()->attributes();    $db_name = (string)$db_attr['name'];    $collation = null;    $charset = null;}/** * The XML was malformed */if ($db_name === null) {    PMA_Message::error(__('The XML file specified was either malformed or incomplete. Please correct the issue and try again.'))->display();    unset($xml);    $GLOBALS['finished'] = false;    return;}/** * Retrieve the structure information */if (isset($namespaces['pma'])) {    /**     * Get structures for all tables     */    $struct = $xml->children($namespaces['pma']);    $create = array();    foreach ($struct as $tier1 => $val1) {        foreach ($val1 as $tier2 => $val2) {            /* Need to select the correct database for the creation of tables, views, triggers, etc. */            /**             * @todo    Generating a USE here blocks importing of a table             *          into another database.             */            $attrs = $val2->attributes();            $create[] = "USE " . PMA_backquote($attrs["name"]);            foreach ($val2 as $val3) {                /**                 * Remove the extra cosmetic spacing                 */                $val3 = str_replace("                ", "", (string)$val3);                $create[] = $val3;            }        }    }    $struct_present = true;}/** * Move down the XML tree to the actual data */$xml = $xml->children()->children();$data_present = false;/** * Only attempt to analyze/collect data if there is data present */if ($xml && @$xml->count()) {    $data_present = true;    /**     * Process all database content     */    foreach ($xml as $k1 => $v1) {        $tbl_attr = $v1->attributes();        $isInTables = false;        for ($i = 0; $i < count($tables); ++$i) {            if (! strcmp($tables[$i][TBL_NAME], (string)$tbl_attr['name'])) {                $isInTables = true;                break;            }        }        if ($isInTables == false) {            $tables[] = array((string)$tbl_attr['name']);        }        foreach ($v1 as $k2 => $v2) {            $row_attr = $v2->attributes();            if (! array_search((string)$row_attr['name'], $tempRow)) {                $tempRow[] = (string)$row_attr['name'];            }            $tempCells[] = (string)$v2;        }        $rows[] = array((string)$tbl_attr['name'], $tempRow, $tempCells);        $tempRow = array();        $tempCells = array();    }    unset($tempRow);    unset($tempCells);    unset($xml);    /**     * Bring accumulated rows into the corresponding table     */    $num_tbls = count($tables);    for ($i = 0; $i < $num_tbls; ++$i) {        for ($j = 0; $j < count($rows); ++$j) {            if (! strcmp($tables[$i][TBL_NAME], $rows[$j][TBL_NAME])) {                if (! isset($tables[$i][COL_NAMES])) {                    $tables[$i][] = $rows[$j][COL_NAMES];                }                $tables[$i][ROWS][] = $rows[$j][ROWS];            }        }    }    unset($rows);    if (! $struct_present) {        $analyses = array();        $len = count($tables);        for ($i = 0; $i < $len; ++$i) {            $analyses[] = PMA_analyzeTable($tables[$i]);        }    }}unset($xml);unset($tempRows);unset($tempCells);unset($rows);/** * Only build SQL from data if there is data present */if ($data_present) {    /**     * Set values to NULL if they were not present     * to maintain PMA_buildSQL() call integrity     */    if (! isset($analyses)) {        $analyses = null;        if (! $struct_present) {            $create = null;        }    }}/** * string $db_name (no backquotes) * * array $table = array(table_name, array() column_names, array()() rows) * array $tables = array of "$table"s * * array $analysis = array(array() column_types, array() column_sizes) * array $analyses = array of "$analysis"s * * array $create = array of SQL strings * * array $options = an associative array of options *//* Set database name to the currently selected one, if applicable */if (strlen($db)) {    /* Override the database name in the XML file, if one is selected */    $db_name = $db;    $options = array('create_db' => false);} else {    if ($db_name === null) {        $db_name = 'XML_DB';    }    /* Set database collation/charset */    $options = array(        'db_collation' => $collation,        'db_charset'   => $charset,    );}/* Created and execute necessary SQL statements from data */PMA_buildSQL($db_name, $tables, $analyses, $create, $options);unset($analyses);unset($tables);unset($create);/* Commit any possible data in buffers */PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin * * @todo    add an option for handling NULL values * @package PhpMyAdmin-Import * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}$analyze = false;if ($plugin_param !== 'table') {    $analyze = true;}if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns separated with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated with:'), 'size' => 2),            ),        'options_text' => __('Options'),        );    if ($plugin_param !== 'table') {        $plugin_list['csv']['options'][]            = array('type' => 'bool', 'name' => 'col_names', 'text' => __('The first line of the file contains the table column names <i>(if this is unchecked, the first line will become part of the data)</i>'));    } else {        $hint = new PMA_Message(__('If the data in each row of the file is not in the same order as in the database, list the corresponding column names here. Column names must be separated by commas and not enclosed in quotations.'));        $plugin_list['csv']['options'][]            = array('type' => 'text', 'name' => 'columns', 'text' => __('Column names: ') . PMA_showHint($hint));    }    $plugin_list['csv']['options'][] = array('type' => 'end_group');    /* We do not define function when plugin is just queried for information above */    return;}$replacements = array(    '\\n'   => "\n",    '\\t'   => "\t",    '\\r'   => "\r",    );$csv_terminated = strtr($csv_terminated, $replacements);$csv_enclosed = strtr($csv_enclosed,  $replacements);$csv_escaped = strtr($csv_escaped, $replacements);$csv_new_line = strtr($csv_new_line, $replacements);$param_error = false;if (strlen($csv_terminated) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns terminated by'), false);    $error = true;    $param_error = true;    // The default dialog of MS Excel when generating a CSV produces a    // semi-colon-separated file with no chance of specifying the    // enclosing character. Thus, users who want to import this file    // tend to remove the enclosing character on the Import dialog.    // I could not find a test case where having no enclosing characters    // confuses this script.    // But the parser won't work correctly with strings so we allow just    // one character.} elseif (strlen($csv_enclosed) > 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns enclosed by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_escaped) != 1) {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Columns escaped by'), false);    $error = true;    $param_error = true;} elseif (strlen($csv_new_line) != 1 && $csv_new_line != 'auto') {    $message = PMA_Message::error(__('Invalid parameter for CSV import: %s'));    $message->addParam(__('Lines terminated by'), false);    $error = true;    $param_error = true;}// If there is an error in the parameters entered, indicate that immediately.if ($param_error) {    PMA_mysqlDie($message->getMessage(), '', '', $err_url);}$buffer = '';$required_fields = 0;if (!$analyze) {    if (isset($csv_replace)) {        $sql_template = 'REPLACE';    } else {        $sql_template = 'INSERT';        if (isset($csv_ignore)) {            $sql_template .= ' IGNORE';        }    }    $sql_template .= ' INTO ' . PMA_backquote($table);    $tmp_fields = PMA_DBI_get_columns($db, $table);    if (empty($csv_columns)) {        $fields = $tmp_fields;    } else {        $sql_template .= ' (';        $fields = array();        $tmp   = preg_split('/,( ?)/', $csv_columns);        foreach ($tmp as $key => $val) {            if (count($fields) > 0) {                $sql_template .= ', ';            }            /* Trim also `, if user already included backquoted fields */            $val = trim($val, " \t\r\n\0\x0B`");            $found = false;            foreach ($tmp_fields as $id => $field) {                if ($field['Field'] == $val) {                    $found = true;                    break;                }            }            if (!$found) {                $message = PMA_Message::error(__('Invalid column (%s) specified! Ensure that columns names are spelled correctly, separated by commas, and not enclosed in quotes.'));                $message->addParam($val);                $error = true;                break;            }            $fields[] = $field;            $sql_template .= PMA_backquote($val);        }        $sql_template .= ') ';    }    $required_fields = count($fields);    $sql_template .= ' VALUES (';}// Defaults for parser$i = 0;$len = 0;$line = 1;$lasti = -1;$values = array();$csv_finish = false;$tempRow = array();$rows = array();$col_names = array();$tables = array();$col_count = 0;$max_cols = 0;while (!($finished && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        unset($data);        // Do not parse string when we're not at the end and don't have new line inside        if (($csv_new_line == 'auto' && strpos($buffer, "\r") === false && strpos($buffer, "\n") === false)            || ($csv_new_line != 'auto' && strpos($buffer, $csv_new_line) === false)        ) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Currently parsed char    $ch = $buffer[$i];    while ($i < $len) {        // Deadlock protection        if ($lasti == $i && $lastlen == $len) {            $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));            $message->addParam($line);            $error = true;            break;        }        $lasti = $i;        $lastlen = $len;        // This can happen with auto EOL and \r at the end of buffer        if (!$csv_finish) {            // Grab empty field            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    break;                }                $values[] = '';                $i++;                $ch = $buffer[$i];                continue;            }            // Grab one field            $fallbacki = $i;            if ($ch == $csv_enclosed) {                if ($i == $len - 1) {                    break;                }                $need_end = true;                $i++;                $ch = $buffer[$i];            } else {                $need_end = false;            }            $fail = false;            $value = '';            while (($need_end && ($ch != $csv_enclosed || $csv_enclosed == $csv_escaped))             || (!$need_end && !($ch == $csv_terminated               || $ch == $csv_new_line || ($csv_new_line == 'auto'                && ($ch == "\r" || $ch == "\n"))))) {                if ($ch == $csv_escaped) {                    if ($i == $len - 1) {                        $fail = true;                        break;                    }                    $i++;                    $ch = $buffer[$i];                    if ($csv_enclosed == $csv_escaped && ($ch == $csv_terminated                     || $ch == $csv_new_line || ($csv_new_line == 'auto'                      && ($ch == "\r" || $ch == "\n")))) {                        break;                    }                }                $value .= $ch;                if ($i == $len - 1) {                    if (!$finished) {                        $fail = true;                    }                    break;                }                $i++;                $ch = $buffer[$i];            }            // unquoted NULL string            if (false === $need_end && $value === 'NULL') {                $value = null;            }            if ($fail) {                $i = $fallbacki;                $ch = $buffer[$i];                break;            }            // Need to strip trailing enclosing char?            if ($need_end && $ch == $csv_enclosed) {                if ($finished && $i == $len - 1) {                    $ch = null;                } elseif ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                } else {                    $i++;                    $ch = $buffer[$i];                }            }            // Are we at the end?            if ($ch == $csv_new_line                || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))                || ($finished && $i == $len - 1)            ) {                $csv_finish = true;            }            // Go to next char            if ($ch == $csv_terminated) {                if ($i == $len - 1) {                    $i = $fallbacki;                    $ch = $buffer[$i];                    break;                }                $i++;                $ch = $buffer[$i];            }            // If everything went okay, store value            $values[] = $value;        }        // End of line        if ($csv_finish            || $ch == $csv_new_line            || ($csv_new_line == 'auto' && ($ch == "\r" || $ch == "\n"))        ) {            if ($csv_new_line == 'auto' && $ch == "\r") { // Handle "\r\n"                if ($i >= ($len - 2) && !$finished) {                    break; // We need more data to decide new line                }                if ($buffer[$i + 1] == "\n") {                    $i++;                }            }            // We didn't parse value till the end of line, so there was empty one            if (!$csv_finish) {                $values[] = '';            }            if ($analyze) {                foreach ($values as $ley => $val) {                    $tempRow[] = $val;                    ++$col_count;                }                if ($col_count > $max_cols) {                    $max_cols = $col_count;                }                $col_count = 0;                $rows[] = $tempRow;                $tempRow = array();            } else {                // Do we have correct count of values?                if (count($values) != $required_fields) {                    // Hack for excel                    if ($values[count($values) - 1] == ';') {                        unset($values[count($values) - 1]);                    } else {                        $message = PMA_Message::error(__('Invalid column count in CSV input on line %d.'));                        $message->addParam($line);                        $error = true;                        break;                    }                }                $first = true;                $sql = $sql_template;                foreach ($values as $key => $val) {                    if (!$first) {                        $sql .= ', ';                    }                    if ($val === null) {                        $sql .= 'NULL';                    } else {                        $sql .= '\'' . PMA_sqlAddSlashes($val) . '\'';                    }                    $first = false;                }                $sql .= ')';                /**                 * @todo maybe we could add original line to verbose SQL in comment                 */                PMA_importRunQuery($sql, $sql);            }            $line++;            $csv_finish = false;            $values = array();            $buffer = substr($buffer, $i + 1);            $len = strlen($buffer);            $i = 0;            $lasti = -1;            $ch = $buffer[0];        }    } // End of parser loop} // End of import loopif ($analyze) {    /* Fill out all rows */    $num_rows = count($rows);    for ($i = 0; $i < $num_rows; ++$i) {        for ($j = count($rows[$i]); $j < $max_cols; ++$j) {            $rows[$i][] = 'NULL';        }    }    if (isset($_REQUEST['csv_col_names'])) {        $col_names = array_splice($rows, 0, 1);        $col_names = $col_names[0];    }    if ((isset($col_names) && count($col_names) != $max_cols)        || ! isset($col_names)    ) {        // Fill out column names        for ($i = 0; $i < $max_cols; ++$i) {            $col_names[] = 'COL '.($i+1);        }    }    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $tbl_name = 'TABLE '.(count($result) + 1);    } else {        $tbl_name = 'TBL_NAME';    }    $tables[] = array($tbl_name, $col_names, $rows);    /* Obtain the best-fit MySQL types for each column */    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    /**     * string $db_name (no backquotes)     *     * array $table = array(table_name, array() column_names, array()() rows)     * array $tables = array of "$table"s     *     * array $analysis = array(array() column_types, array() column_sizes)     * array $analyses = array of "$analysis"s     *     * array $create = array of SQL strings     *     * array $options = an associative array of options     */    /* Set database name to the currently selected one, if applicable */    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'CSV_DB';        $options = null;    }    /* Non-applicable parameters */    $create = null;    /* Created and execute necessary SQL statements from data */    PMA_buildSQL($db_name, $tables, $analyses, $create, $options);    unset($tables);    unset($analyses);}// Commit any possible data in buffersPMA_importRunQuery();if (count($values) != 0 && !$error) {    $message = PMA_Message::error(__('Invalid format of CSV input on line %d.'));    $message->addParam($line);    $error = true;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display table relations for viewing and editing * * includes phpMyAdmin relations and InnoDB relations * * @todo fix name handling: currently names with dots (.) are not properly handled for internal relations (but foreign keys relations are correct) * @todo foreign key constraints require both fields being of equal type and size * @todo check foreign fields to be from same type and size, all other makes no sense * @todo add an link to create an index required for constraints, or an option to do automatically * @todo if above todos are fullfilled we can add all fields meet requirements in the select dropdown * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_relation.js';require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_sql.php';/** * Gets tables informations */require_once './libraries/tbl_info.inc.php';// Note: in libraries/tbl_links.inc.php we get and display the table comment.// For InnoDB, this comment contains the REFER information but any update// has not been done yet (will be done in tbl_relation.php later).$avoid_show_comment = true;/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$options_array = array(    'CASCADE'   => 'CASCADE',    'SET_NULL'  => 'SET NULL',    'NO_ACTION' => 'NO ACTION',    'RESTRICT'  => 'RESTRICT',);/** * Generate dropdown choices * * @param string $dropdown_question Message to display * @param string $select_name       Name of the <select> field * @param array  $choices           Choices for dropdown * @param string $selected_value    Selected value * * @return  string   The existing value (for selected) * * @access  public */function PMA_generate_dropdown($dropdown_question, $select_name, $choices, $selected_value){    echo htmlspecialchars($dropdown_question) . '&nbsp;&nbsp;';    echo '<select name="' . htmlspecialchars($select_name) . '">' . "\n";    foreach ($choices as $one_value => $one_label) {        echo '<option value="' . htmlspecialchars($one_value) . '"';        if ($selected_value == $one_value) {            echo ' selected="selected" ';        }        echo '>' . htmlspecialchars($one_label) . '</option>' . "\n";    }    echo '</select>' . "\n";}/** * Split a string on backquote pairs * * @param string $text original string * * @return  array   containing the elements (and their surrounding backquotes) * * @access  public */function PMA_backquote_split($text){    $elements = array();    $final_pos = strlen($text) - 1;    $pos = 0;    while ($pos <= $final_pos) {        $first_backquote = strpos($text, '`', $pos);        $second_backquote = strpos($text, '`', $first_backquote + 1);        // after the second one, there might be another one which means        // this is an escaped backquote        if ($second_backquote < $final_pos && '`' == $text[$second_backquote + 1]) {            $second_backquote = strpos($text, '`', $second_backquote + 2);        }        if (false === $first_backquote || false === $second_backquote) {            break;        }        $elements[] = substr($text, $first_backquote, $second_backquote - $first_backquote + 1);        $pos = $second_backquote + 1;    }    return($elements);}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Updates */if ($cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}// will be used in the logic for internal relations and foreign keys:$me_fields_name = isset($_REQUEST['fields_name'])    ? $_REQUEST['fields_name']    : null;// u p d a t e s   f o r   I n t e r n a l    r e l a t i o n sif (isset($destination) && $cfgRelation['relwork']) {    foreach ($destination as $master_field_md5 => $foreign_string) {        $upd_query = false;        // Map the fieldname's md5 back to its real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            $foreign_string = trim($foreign_string, '`');            list($foreign_db, $foreign_table, $foreign_field) = explode('.', $foreign_string);            if (! isset($existrel[$master_field])) {                $upd_query  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($table) . '\', '                            . '\'' . PMA_sqlAddSlashes($master_field) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . '\'' . PMA_sqlAddSlashes($foreign_table) . '\','                            . '\'' . PMA_sqlAddSlashes($foreign_field) . '\')';            } elseif ($existrel[$master_field]['foreign_db'] . '.' .$existrel[$master_field]['foreign_table'] . '.' . $existrel[$master_field]['foreign_field'] != $foreign_string) {                $upd_query  = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation']) . ' SET'                            . ' foreign_db       = \'' . PMA_sqlAddSlashes($foreign_db) . '\', '                            . ' foreign_table    = \'' . PMA_sqlAddSlashes($foreign_table) . '\', '                            . ' foreign_field    = \'' . PMA_sqlAddSlashes($foreign_field) . '\' '                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';            } // end if... else....        } elseif (isset($existrel[$master_field])) {            $upd_query      = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                            . ' AND master_field = \'' . PMA_sqlAddSlashes($master_field) . '\'';        } // end if... else....        if ($upd_query) {            PMA_query_as_controluser($upd_query);        }    } // end while} // end if (updates for internal relations)// u p d a t e s    f o r    f o r e i g n    k e y s// (for now, one index name only; we keep the definitions if the// foreign db is not the same)// I use $sql_query to be able to display directly the query via// PMA_showMessage()if (isset($_REQUEST['destination_foreign'])) {    $display_query = '';    $seen_error = false;    foreach ($_REQUEST['destination_foreign'] as $master_field_md5 => $foreign_string) {        // Map the fieldname's md5 back to it's real name        $master_field = $me_fields_name[$master_field_md5];        if (! empty($foreign_string)) {            list($foreign_db, $foreign_table, $foreign_field) = PMA_backquote_split($foreign_string);            if (! isset($existrel_foreign[$master_field])) {                // no key defined for this field                // The next few lines are repeated below, so they                // could be put in an include file                // Note: I tried to enclose the db and table name with                // backquotes but MySQL 4.0.16 did not like the syntax                // (for example: `base2`.`table1`)                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query .= ' ON DELETE ' . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query .= ' ON UPDATE ' . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";                // end repeated code            } elseif (PMA_backquote($existrel_foreign[$master_field]['foreign_db']) != $foreign_db                || PMA_backquote($existrel_foreign[$master_field]['foreign_table']) != $foreign_table                || PMA_backquote($existrel_foreign[$master_field]['foreign_field']) != $foreign_field                || ($_REQUEST['on_delete'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_delete']) ? $existrel_foreign[$master_field]['on_delete'] : 'RESTRICT'))                || ($_REQUEST['on_update'][$master_field_md5] != (!empty($existrel_foreign[$master_field]['on_update']) ? $existrel_foreign[$master_field]['on_update'] : 'RESTRICT'))                   ) {                // another foreign key is already defined for this field                // or                // an option has been changed for ON DELETE or ON UPDATE                // remove existing key and add the new one                $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                            . ' DROP FOREIGN KEY '                            . PMA_backquote($existrel_foreign[$master_field]['constraint']) . ', '                            . 'ADD FOREIGN KEY ('                            . PMA_backquote($master_field) . ')'                            . ' REFERENCES '                            . $foreign_db . '.'                            . $foreign_table . '('                            . $foreign_field . ')';                if (! empty($_REQUEST['on_delete'][$master_field_md5])) {                    $sql_query   .= ' ON DELETE '                        . $options_array[$_REQUEST['on_delete'][$master_field_md5]];                }                if (! empty($_REQUEST['on_update'][$master_field_md5])) {                    $sql_query   .= ' ON UPDATE '                        . $options_array[$_REQUEST['on_update'][$master_field_md5]];                }                $sql_query .= ';';                $display_query .= $sql_query . "\n";            } // end if... else....        } elseif (isset($existrel_foreign[$master_field])) {            $sql_query  = 'ALTER TABLE ' . PMA_backquote($table)                    . ' DROP FOREIGN KEY '                    . PMA_backquote($existrel_foreign[$master_field]['constraint']);            $sql_query .= ';';            $display_query .= $sql_query . "\n";        } // end if... else....        if (! empty($sql_query)) {            PMA_DBI_try_query($sql_query);            $tmp_error = PMA_DBI_getError();            if (! empty($tmp_error)) {                $seen_error = true;            }            if (substr($tmp_error, 1, 4) == '1216'                ||  substr($tmp_error, 1, 4) == '1452'            ) {                PMA_mysqlDie($tmp_error, $sql_query, false, '', false);                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            if (substr($tmp_error, 1, 4) == '1005') {                $message = PMA_Message::error(__('Error creating foreign key on %1$s (check data types)'));                $message->addParam($master_field);                $message->display();                echo PMA_showMySQLDocu('manual_Table_types', 'InnoDB_foreign_key_constraints') . "\n";            }            unset($tmp_error);            $sql_query = '';        }    } // end foreach    if (!empty($display_query)) {        if ($seen_error) {            PMA_showMessage(__('Error'), null, 'error');        } else {            PMA_showMessage(__('Your SQL query has been executed successfully'), null, 'success');        }    }} // end if isset($destination_foreign)// U p d a t e s   f o r   d i s p l a y   f i e l dif ($cfgRelation['displaywork'] && isset($display_field)) {    $upd_query = false;    if ($disp) {        if ($display_field != '') {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if ($upd_query) {        PMA_query_as_controluser($upd_query);    }} // end if// If we did an update, refresh our dataif (isset($destination) && $cfgRelation['relwork']) {    $existrel = PMA_getForeigners($db, $table, '', 'internal');}if (isset($destination_foreign) && PMA_foreignkey_supported($tbl_type)) {    $existrel_foreign = PMA_getForeigners($db, $table, '', 'foreign');}if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);}/** * Dialog */// common formecho '<form method="post" action="tbl_relation.php">' . "\n";echo PMA_generate_common_hidden_inputs($db, $table);// relationsif ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {    // To choose relations we first need all tables names in current db    // and if the main table supports foreign keys    // we use SHOW TABLE STATUS because we need to find other tables of the    // same engine.    if (PMA_foreignkey_supported($tbl_type)) {        $tab_query           = 'SHOW TABLE STATUS FROM ' . PMA_backquote($db);        // [0] of the row is the name        // [1] is the type    } else {        $tab_query           = 'SHOW TABLES FROM ' . PMA_backquote($db);        // [0] of the row is the name    }    $tab_rs              = PMA_DBI_query($tab_query, null, PMA_DBI_QUERY_STORE);    $selectboxall[] = '';    $selectboxall_foreign[] = '';    while ($curr_table = PMA_DBI_fetch_row($tab_rs)) {        $current_table = new PMA_Table($curr_table[0], $db);        // explicitely ask for non-quoted list of indexed columns        $selectboxall = array_merge($selectboxall, $current_table->getUniqueColumns($backquoted = false));        // if foreign keys are supported, collect all keys from other        // tables of the same engine        if (PMA_foreignkey_supported($tbl_type)            && isset($curr_table[1])            && strtoupper($curr_table[1]) == $tbl_type        ) {             // explicitely ask for non-quoted list of indexed columns             // need to obtain backquoted values to support dots inside values             $selectboxall_foreign = array_merge($selectboxall_foreign, $current_table->getIndexedColumns($backquoted = true));        }    } // end while over tables} // end if// Now find out the columns of our $table// need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli$columns = PMA_DBI_get_columns($db, $table);if (count($columns) > 0) {    foreach ($columns as $row) {        $save_row[] = $row;    }    $saved_row_cnt  = count($save_row);    ?>    <fieldset>    <legend><?php echo __('Relations'); ?></legend>    <table>    <tr><th><?php echo __('Column'); ?></th>    <?php    if ($cfgRelation['relwork']) {        echo '<th>' . __('Internal relation');        if (PMA_foreignkey_supported($tbl_type)) {            echo PMA_showHint(__('An internal relation is not necessary when a corresponding FOREIGN KEY relation exists.'));        }        echo '</th>';    }    if (PMA_foreignkey_supported($tbl_type)) {        // this does not have to be translated, it's part of the MySQL syntax        echo '<th colspan="2">' . __('Foreign key constraint') . ' (' . $tbl_type . ')';        echo '</th>';    }    ?>    </tr>    <?php    $odd_row = true;    for ($i = 0; $i < $saved_row_cnt; $i++) {        $myfield = $save_row[$i]['Field'];        // Use an md5 as array index to avoid having special characters in the name atttibure (see bug #1746964 )        $myfield_md5 = md5($myfield);        $myfield_html = htmlspecialchars($myfield);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">        <td align="center">            <strong><?php echo $myfield_html; ?></strong>            <input type="hidden" name="fields_name[<?php echo $myfield_md5; ?>]" value="<?php echo $myfield_html; ?>"/>        </td>        <?php        if ($cfgRelation['relwork']) {            ?>        <td><select name="destination[<?php echo $myfield_md5; ?>]">            <?php            // PMA internal relations            if (isset($existrel[$myfield])) {                $foreign_field    = $existrel[$myfield]['foreign_db'] . '.'                         . $existrel[$myfield]['foreign_table'] . '.'                         . $existrel[$myfield]['foreign_field'];            } else {                $foreign_field    = false;            }            $seen_key = false;            foreach ($selectboxall as $value) {                echo '                '                     . '<option value="' . htmlspecialchars($value) . '"';                if ($foreign_field && $value == $foreign_field) {                    echo ' selected="selected"';                    $seen_key = true;                }                echo '>' . htmlspecialchars($value) . '</option>'. "\n";            } // end while            // if the link defined in relationtable points to a foreign field            // that is not a key in the foreign table, we show the link            // (will not be shown with an arrow)            if ($foreign_field && !$seen_key) {                echo '                '                    .'<option value="' . htmlspecialchars($foreign_field) . '"'                    .' selected="selected"'                    .'>' . $foreign_field . '</option>'. "\n";            }            ?>            </select>        </td>            <?php        } // end if (internal relations)        if (PMA_foreignkey_supported($tbl_type)) {            echo '<td>';            if (!empty($save_row[$i]['Key'])) {                ?>            <span class="formelement">            <select name="destination_foreign[<?php echo $myfield_md5; ?>]" class="referenced_column_dropdown">                <?php                if (isset($existrel_foreign[$myfield])) {                    // need to backquote to support a dot character inside                    // an element                    $foreign_field    = PMA_backquote($existrel_foreign[$myfield]['foreign_db']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_table']) . '.'                             . PMA_backquote($existrel_foreign[$myfield]['foreign_field']);                } else {                    $foreign_field    = false;                }                $found_foreign_field = false;                foreach ($selectboxall_foreign as $value) {                    echo '                '                         . '<option value="' . htmlspecialchars($value) . '"';                    if ($foreign_field && $value == $foreign_field) {                        echo ' selected="selected"';                        $found_foreign_field = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>'. "\n";                } // end while                // we did not find the foreign field in the tables of current db,                // must be defined in another db so show it to avoid erasing it                if (!$found_foreign_field && $foreign_field) {                    echo '                '                         . '<option value="' . htmlspecialchars($foreign_field) . '"';                    echo ' selected="selected"';                    echo '>' . $foreign_field . '</option>' . "\n";                }                ?>            </select>            </span>            <span class="formelement">                <?php                // For ON DELETE and ON UPDATE, the default action                // is RESTRICT as per MySQL doc; however, a SHOW CREATE TABLE                // won't display the clause if it's set as RESTRICT.                PMA_generate_dropdown('ON DELETE',                    'on_delete[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_delete']) ? $existrel_foreign[$myfield]['on_delete']: 'RESTRICT');                echo '</span>' . "\n"                    .'<span class="formelement">' . "\n";                PMA_generate_dropdown('ON UPDATE',                    'on_update[' . $myfield_md5 . ']',                    $options_array,                    isset($existrel_foreign[$myfield]['on_update']) ? $existrel_foreign[$myfield]['on_update']: 'RESTRICT');                echo '</span>' . "\n";            } else {                echo __('No index defined!');            } // end if (a key exists)            echo '        </td>';        } // end if (InnoDB)        ?>    </tr>        <?php    } // end for    unset( $myfield, $myfield_md5, $myfield_html);    echo '    </table>' . "\n";    echo '</fieldset>' . "\n";    if ($cfgRelation['displaywork']) {        // Get "display_field" infos        $disp = PMA_getDisplayField($db, $table);        ?>    <fieldset>        <label><?php echo __('Choose column to display') . ': '; ?></label>        <select name="display_field">            <option value="">---</option>        <?php        foreach ($save_row AS $row) {            echo '            <option value="' . htmlspecialchars($row['Field']) . '"';            if (isset($disp) && $row['Field'] == $disp) {                echo ' selected="selected"';            }            echo '>' . htmlspecialchars($row['Field']) . '</option>'. "\n";        } // end while        ?>        </select>    </fieldset>        <?php    } // end if (displayworks)    ?>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Save'); ?>" />    </fieldset></form>    <?php} // end if (we have columns in this table)/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about the partitions * * @package PhpMyAdmin *//** * base Partition Class * @package PhpMyAdmin */class PMA_Partition{    /**     * returns array of partition names for a specific db/table     *     * @access  public     * @return  array   of partition names     */    static public function getPartitionNames($db, $table)    {        if (PMA_Partition::havePartitioning()) {            return PMA_DBI_fetch_result("select `PARTITION_NAME` from `information_schema`.`PARTITIONS` where `TABLE_SCHEMA` = '" . $db . "' and `TABLE_NAME` = '" . $table . "'");        } else {            return array();        }    }    /**     * checks if MySQL server supports partitioning     *     * @static     * @staticvar boolean $have_partitioning     * @staticvar boolean $already_checked     * @access  public     * @return  boolean     */    static public function havePartitioning()    {        static $have_partitioning = false;        static $already_checked = false;        if (! $already_checked) {            $have_partitioning = PMA_MYSQL_INT_VERSION >= 50100 && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'have_partitioning';");            $already_checked = true;        }        return $have_partitioning;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Events management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/events.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_events.lib.php';/** * Do the magic */$_PMA_RTE = 'EVN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'b_bookmark' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '18',            'width'    => '8',            'height'   => '13'        ),        'b_docs' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '22',            'width'    => '10',            'height'   => '10'        ),        'bd_select' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '33',            'width'    => '11',            'height'   => '11'        ),        'b_home' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '37',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '40',            'width'    => '9',            'height'   => '9'        ),        'b_more' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '43',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '45',            'width'    => '9',            'height'   => '9'        ),        'b_primary' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '53',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '57',            'width'    => '10',            'height'   => '10'        ),        'b_spatial' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '63',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '78',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '81',            'width'    => '5',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '82',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '83',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '90',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '93',            'width'    => '11',            'height'   => '9'        ),        's_cancel' => array(            'position' => '94',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '95',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '96',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '97',            'width'    => '11',            'height'   => '9'        ),        's_error2' => array(            'position' => '98',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '105',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '109',            'width'    => '11',            'height'   => '15'        ),        's_status' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '116',            'width'    => '10',            'height'   => '10'        ),        'window-new' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * configures general layout * for detailed layout configuration please refer to the css files * * @package PhpMyAdmin-theme * @subpackage Original *//** * navi frame */// navi frame width$GLOBALS['cfg']['NaviWidth']                = 200;// foreground (text) color for the navi frame$GLOBALS['cfg']['NaviColor']                = '#000000';// background for the navi frame$GLOBALS['cfg']['NaviBackground']           = '#D0DCE0';// foreground (text) color of the pointer in navi frame$GLOBALS['cfg']['NaviPointerColor']         = '#000000';// background of the pointer in navi frame$GLOBALS['cfg']['NaviPointerBackground']    = '#9999CC';/** * main frame */// foreground (text) color for the main frame$GLOBALS['cfg']['MainColor']                = '#000000';// background for the main frame$GLOBALS['cfg']['MainBackground']           = '#F5F5F5';// foreground (text) color of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerColor']       = '#000000';// background of the pointer in browse mode$GLOBALS['cfg']['BrowsePointerBackground']  = '#CCFFCC';// foreground (text) color of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerColor']        = '#000000';// background of the marker (visually marks row by clicking on it) in browse mode$GLOBALS['cfg']['BrowseMarkerBackground']   = '#FFCC99';/** * fonts *//** * the font family as a valid css font family value, * if not set the browser default will be used * (depending on browser, DTD and system settings) */$GLOBALS['cfg']['FontFamily']           = 'sans-serif';/** * fixed width font family, used in textarea */$GLOBALS['cfg']['FontFamilyFixed']      = 'monospace';/** * tables */// border$GLOBALS['cfg']['Border']               = 0;// table header and footer color$GLOBALS['cfg']['ThBackground']         = '#D3DCE3';// table header and footer background$GLOBALS['cfg']['ThColor']              = '#000000';// table data row background$GLOBALS['cfg']['BgOne']                = '#E5E5E5';// table data row background, alternate$GLOBALS['cfg']['BgTwo']                = '#D5D5D5';/** * query window */// Width of Query window$GLOBALS['cfg']['QueryWindowWidth']     = 600;// Height of Query window$GLOBALS['cfg']['QueryWindowHeight']    = 400;/** * SQL Parser Settings * Syntax colouring data */$GLOBALS['cfg']['SQP']['fmtColor']      = array(    'comment'            => '#808000',    'comment_mysql'      => '',    'comment_ansi'       => '',    'comment_c'          => '',    'digit'              => '',    'digit_hex'          => 'teal',    'digit_integer'      => 'teal',    'digit_float'        => 'aqua',    'punct'              => 'fuchsia',    'alpha'              => '',    'alpha_columnType'   => '#FF9900',    'alpha_columnAttrib' => '#0000FF',    'alpha_reservedWord' => '#990099',    'alpha_functionName' => '#FF0000',    'alpha_identifier'   => 'black',    'alpha_charset'      => '#6495ed',    'alpha_variable'     => '#800000',    'quote'              => '#008000',    'quote_double'       => '',    'quote_single'       => '',    'quote_backtick'     => '');/** * Chart colors */ $GLOBALS['cfg']['chartColor'] = array(    'gradientIntensity'       => 0,    // The style of the chart title.    'titleColor'              => '#000000',    'titleBgColor'            => $GLOBALS['cfg']['ThBackground'],    // Chart border (0 for no border)    'border'                  => '#CCCCCC',    // Chart background color.    'bgColor'                 => $GLOBALS['cfg']['BgTwo'],    // when graph area gradient is used, this is the color of the graph    // area border    'graphAreaColor'          =>  '#D5D9DD',    // the background color of the inner graph area    'graphAreaGradientColor'  => $GLOBALS['cfg']['BgOne'],    // the color of the grid lines in the graph area    'gridColor'               => '#E6E6E6',    // the color of the scale and the labels    'scaleColor'              => '#D5D9DD', );?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences management page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();$error = '';if (isset($_POST['submit_export']) && filter_input(INPUT_POST, 'export_type') == 'text_file') {    // export to JSON file    $filename = 'phpMyAdmin-config-' . urlencode(PMA_getenv('HTTP_HOST')) . '.json';    PMA_download_header($filename, 'application/json');    $settings = PMA_load_userprefs();    echo json_encode($settings['config_data']);    return;} else if (isset($_POST['submit_get_json'])) {    $settings = PMA_load_userprefs();    header('Content-Type: application/json');    echo json_encode(array(        'prefs' => json_encode($settings['config_data']),        'mtime' => $settings['mtime']));    return;} else if (isset($_POST['submit_import'])) {    // load from JSON file    $json = '';    if (filter_input(INPUT_POST, 'import_type') == 'text_file'            && isset($_FILES['import_file'])            && $_FILES['import_file']['error'] == UPLOAD_ERR_OK            && is_uploaded_file($_FILES['import_file']['tmp_name'])) {        // read JSON from uploaded file        $open_basedir = @ini_get('open_basedir');        $file_to_unlink = '';        $import_file = $_FILES['import_file']['tmp_name'];        // If we are on a server with open_basedir, we must move the file        // before opening it. The doc explains how to create the "./tmp"        // directory        if (!empty($open_basedir)) {            $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');            if (is_writable($tmp_subdir)) {                $import_file_new = tempnam($tmp_subdir, 'prefs');                if (move_uploaded_file($import_file, $import_file_new)) {                    $import_file = $import_file_new;                    $file_to_unlink = $import_file_new;                }            }        }        $json = file_get_contents($import_file);        if ($file_to_unlink) {            unlink($file_to_unlink);        }    } else {        // read from POST value (json)        $json = filter_input(INPUT_POST, 'json');    }    // hide header message    $_SESSION['userprefs_autoload'] = true;    $config = json_decode($json, true);    $return_url = filter_input(INPUT_POST, 'return_url');    if (! is_array($config)) {        $error = __('Could not import configuration');    } else {        // sanitize input values: treat them as though they came from HTTP POST request        $form_display = new FormDisplay();        foreach ($forms as $formset_id => $formset) {            foreach ($formset as $form_name => $form) {                $form_display->registerForm($formset_id . ': ' . $form_name, $form);            }        }        $cf = ConfigFile::getInstance();        $new_config = $cf->getFlatDefaultConfig();        if (!empty($_POST['import_merge'])) {            $new_config = array_merge($new_config, $cf->getConfigArray());        }        $new_config = array_merge($new_config, $config);        $_POST_bak = $_POST;        foreach ($new_config as $k => $v) {            $_POST[str_replace('/', '-', $k)] = $v;        }        $cf->resetConfigData();        $all_ok = $form_display->process(true, false);        $all_ok = $all_ok && !$form_display->hasErrors();        $_POST = $_POST_bak;        if (!$all_ok && isset($_POST['fix_errors'])) {            $form_display->fixErrors();            $all_ok = true;        }        if (!$all_ok) {            // mimic original form and post json in a hidden field            include './libraries/header.inc.php';            include './libraries/user_preferences.inc.php';            $msg = PMA_Message::error(__('Configuration contains incorrect data for some fields.'));            $msg->display();            echo '<div class="config-form">';            $form_display->displayErrors();            echo '</div>';            ?>            <form action="prefs_manage.php" method="post">                <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>                <input type="hidden" name="json" value="<?php echo htmlspecialchars($json) ?>" />                <input type="hidden" name="fix_errors" value="1" />                <?php if (!empty($_POST['import_merge'])): ?>                <input type="hidden" name="import_merge" value="1" />                <?php endif; ?>                <?php if ($return_url): ?>                <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />                <?php endif; ?>                <p><?php echo __('Do you want to import remaining settings?') ?></p>                <input type="submit" name="submit_import" value="<?php echo __('Yes') ?>" />                <input type="submit" name="submit_ignore" value="<?php echo __('No') ?>" />            </form>            <?php            include './libraries/footer.inc.php';            return;        }        // check for ThemeDefault and fontsize        $params = array();        if (isset($config['ThemeDefault'])                && $_SESSION['PMA_Theme_Manager']->theme->getId() != $config['ThemeDefault']                && $_SESSION['PMA_Theme_Manager']->checkTheme($config['ThemeDefault'])) {            $_SESSION['PMA_Theme_Manager']->setActiveTheme($config['ThemeDefault']);            $_SESSION['PMA_Theme_Manager']->setThemeCookie();            $params['reload_left_frame'] = true;        }        if (isset($config['fontsize'])                && $config['fontsize'] != $GLOBALS['PMA_Config']->get('fontsize')) {            $params['set_fontsize'] = $config['fontsize'];            $params['reload_left_frame'] = true;        }        if (isset($config['lang'])                && $config['lang'] != $GLOBALS['lang']) {            $params['lang'] = $config['lang'];            $params['reload_left_frame'] = true;        }        if (isset($config['collation_connection'])                && $config['collation_connection'] != $GLOBALS['collation_connection']) {            $params['collation_connection'] = $config['collation_connection'];            $params['reload_left_frame'] = true;        }        // save settings        $old_settings = PMA_load_userprefs();        $result = PMA_save_userprefs($cf->getConfigArray());        if ($result === true) {            if ($return_url) {                $query = explode('&', parse_url($return_url, PHP_URL_QUERY));                $return_url = parse_url($return_url, PHP_URL_PATH);                foreach ($query as $q) {                    $pos = strpos($q, '=');                    $k = substr($q, 0, $pos);                    if ($k == 'token') {                        continue;                    }                    $params[$k] = substr($q, $pos+1);                }            } else {                $return_url = 'prefs_manage.php';            }            // reload config            $GLOBALS['PMA_Config']->loadUserPreferences();            PMA_userprefs_redirect($forms, $old_settings, $return_url, $params);            exit;        } else {            $error = $result;        }    }} else if (isset($_POST['submit_clear'])) {    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(array());    if ($result === true) {        $params = array();        if ($_SESSION['PMA_Theme_Manager']->theme->getId() != 'original') {            $GLOBALS['PMA_Config']->removeCookie($_SESSION['PMA_Theme_Manager']->getThemeCookieName());            unset($_SESSION['PMA_Theme_Manager']);            unset($_SESSION['PMA_Theme']);            $params['reload_left_frame'] = true;        }        if ($GLOBALS['PMA_Config']->get('fontsize') != '82%') {            $GLOBALS['PMA_Config']->removeCookie('pma_fontsize');            $params['reload_left_frame'] = true;        }        $GLOBALS['PMA_Config']->removeCookie('pma_collaction_connection');        $GLOBALS['PMA_Config']->removeCookie('pma_lang');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_manage.php', $params);        exit;    } else {        $error = $result;    }    exit;}$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    if (!$error instanceof PMA_Message) {        $error = PMA_Message::error($error);    }    $error->display();}?><script type="text/javascript"><?phpPMA_printJsValue("PMA_messages['strSavedOn']", __('Saved on: @DATE@'));?></script><div id="maincontainer">    <div id="main_pane_left">        <div class="group">            <h2><?php echo __('Import') ?></h2>            <form class="group-cnt prefs-form" name="prefs_import" action="prefs_manage.php" method="post" enctype="multipart/form-data">                <?php                echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";                echo PMA_generate_common_hidden_inputs() . "\n";                ?>                <input type="hidden" name="json" value="" />                <input type="radio" id="import_text_file" name="import_type" value="text_file" checked="checked" />                <label for="import_text_file"><?php echo __('Import from file') ?></label>                <div id="opts_import_text_file" class="prefsmanage_opts">                    <label for="input_import_file"><?php echo __('Browse your computer:'); ?></label>                    <input type="file" name="import_file" id="input_import_file" />                </div>                <input type="radio" id="import_local_storage" name="import_type" value="local_storage" disabled="disabled" />                <label for="import_local_storage"><?php echo __('Import from browser\'s storage') ?></label>                <div id="opts_import_local_storage" class="prefsmanage_opts disabled">                    <div class="localStorage-supported">                        <?php echo __('Settings will be imported from your browser\'s local storage.') ?>                        <br />                        <span class="localStorage-exists">                            <?php echo __('Saved on: @DATE@') ?>                        </span>                        <span class="localStorage-empty">                            <?php  PMA_Message::notice(__('You have no saved settings!'))->display() ?>                        </span>                    </div>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <input type="checkbox" id="import_merge" name="import_merge" />                <label for="import_merge"><?php echo __('Merge with current configuration') ?></label>                <br /><br />                <input type="submit" name="submit_import" value="<?php echo __('Go'); ?>" />            </form>        </div>        <?php        if (file_exists('./setup/index.php')) {            // show only if setup script is available, allows to disable this message            // by simply removing setup directory        ?>        <div class="group">            <h2><?php echo __('More settings') ?></h2>            <div class="group-cnt">                <?php                echo sprintf(__('You can set more settings by modifying config.inc.php, eg. by using %sSetup script%s.'), '<a href="setup/index.php">', '</a>');                echo PMA_showDocu('setup_script');                ?>            </div>        </div>        <?php        }        ?>    </div>    <div id="main_pane_right">        <div class="group">            <h2><?php echo __('Export') ?></h2>            <div class="click-hide-message group-cnt" style="display:none">                <?php                $message = PMA_Message::rawSuccess(__('Configuration has been saved'));                $message->display();                ?>            </div>            <form class="group-cnt prefs-form" name="prefs_export" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <div style="padding-bottom:0.5em">                    <input type="radio" id="export_text_file" name="export_type" value="text_file" checked="checked" />                    <label for="export_text_file"><?php echo __('Save as file') ?></label>                    <br />                    <input type="radio" id="export_local_storage" name="export_type" value="local_storage" disabled="disabled" />                    <label for="export_local_storage"><?php echo __('Save to browser\'s storage') ?></label>                </div>                <div id="opts_export_local_storage" class="prefsmanage_opts disabled">                    <span class="localStorage-supported">                        <?php echo __('Settings will be saved in your browser\'s local storage.') ?>                        <span class="localStorage-exists">                            <br /><b><?php echo __('Existing settings will be overwritten!') ?></b>                        </span>                    </span>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <br />                <input type="submit" name="submit_export" value="<?php echo __('Go'); ?>" />            </form>        </div>        <div class="group">            <h2><?php echo __('Reset') ?></h2>            <form class="group-cnt prefs-form" name="prefs_reset" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <?php echo __('You can reset all your settings and restore them to default values.') ?>                <br /><br />                <input type="submit" name="submit_clear" value="<?php echo __('Reset') ?>" />            </form>        </div>    </div>    <br class="clearfloat" /></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php//============================================================+// File name   : encodings_maps.php// Version     : 1.0.001// Begin       : 2011-10-01// Last Update : 2011-11-15// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2008-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Unicode data for TCPDF library.////============================================================+/** * @file * Font encodings maps class for TCPDF library. * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 5.9.123 (2011-10-01) *//** * @class TCPDF_ENCODING_MAPS * This is a PHP class containing Font encodings maps class for TCPDF library. * @package com.tecnick.tcpdf * @version 1.0.000 * @author Nicola Asuni - info@tecnick.com */class TCPDF_ENCODING_MAPS {/** * Array of Encoding Maps. * @public */public $encmap = array(// encoding map for: cp1251'cp1251' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'afii10051',129=>'afii10052',130=>'quotesinglbase',131=>'afii10100',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'Euro',137=>'perthousand',138=>'afii10058',139=>'guilsinglleft',140=>'afii10059',141=>'afii10061',142=>'afii10060',143=>'afii10145',144=>'afii10099',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'afii10106',155=>'guilsinglright',156=>'afii10107',157=>'afii10109',158=>'afii10108',159=>'afii10193',160=>'space',161=>'afii10062',162=>'afii10110',163=>'afii10057',164=>'currency',165=>'afii10050',166=>'brokenbar',167=>'section',168=>'afii10023',169=>'copyright',170=>'afii10053',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii10056',176=>'degree',177=>'plusminus',178=>'afii10055',179=>'afii10103',180=>'afii10098',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'afii10071',185=>'afii61352',186=>'afii10101',187=>'guillemotright',188=>'afii10105',189=>'afii10054',190=>'afii10102',191=>'afii10104',192=>'afii10017',193=>'afii10018',194=>'afii10019',195=>'afii10020',196=>'afii10021',197=>'afii10022',198=>'afii10024',199=>'afii10025',200=>'afii10026',201=>'afii10027',202=>'afii10028',203=>'afii10029',204=>'afii10030',205=>'afii10031',206=>'afii10032',207=>'afii10033',208=>'afii10034',209=>'afii10035',210=>'afii10036',211=>'afii10037',212=>'afii10038',213=>'afii10039',214=>'afii10040',215=>'afii10041',216=>'afii10042',217=>'afii10043',218=>'afii10044',219=>'afii10045',220=>'afii10046',221=>'afii10047',222=>'afii10048',223=>'afii10049',224=>'afii10065',225=>'afii10066',226=>'afii10067',227=>'afii10068',228=>'afii10069',229=>'afii10070',230=>'afii10072',231=>'afii10073',232=>'afii10074',233=>'afii10075',234=>'afii10076',235=>'afii10077',236=>'afii10078',237=>'afii10079',238=>'afii10080',239=>'afii10081',240=>'afii10082',241=>'afii10083',242=>'afii10084',243=>'afii10085',244=>'afii10086',245=>'afii10087',246=>'afii10088',247=>'afii10089',248=>'afii10090',249=>'afii10091',250=>'afii10092',251=>'afii10093',252=>'afii10094',253=>'afii10095',254=>'afii10096',255=>'afii10097'),// encoding map for: iso-8859-4'iso-8859-4' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'kgreenlandic',163=>'Rcommaaccent',164=>'currency',165=>'Itilde',166=>'Lcommaaccent',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Emacron',171=>'Gcommaaccent',172=>'Tbar',173=>'hyphen',174=>'Zcaron',175=>'macron',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'rcommaaccent',180=>'acute',181=>'itilde',182=>'lcommaaccent',183=>'caron',184=>'cedilla',185=>'scaron',186=>'emacron',187=>'gcommaaccent',188=>'tbar',189=>'Eng',190=>'zcaron',191=>'eng',192=>'Amacron',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Iogonek',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Edotaccent',205=>'Iacute',206=>'Icircumflex',207=>'Imacron',208=>'Dcroat',209=>'Ncommaaccent',210=>'Omacron',211=>'Kcommaaccent',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Uogonek',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Utilde',222=>'Umacron',223=>'germandbls',224=>'amacron',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'iogonek',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'edotaccent',237=>'iacute',238=>'icircumflex',239=>'imacron',240=>'dcroat',241=>'ncommaaccent',242=>'omacron',243=>'kcommaaccent',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'uogonek',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'utilde',254=>'umacron',255=>'dotaccent'),// encoding map for: cp1255'cp1255' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'afii57636',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'multiply',171=>'guillemotleft',172=>'logicalnot',173=>'sfthyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'middot',184=>'cedilla',185=>'onesuperior',186=>'divide',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'afii57799',193=>'afii57801',194=>'afii57800',195=>'afii57802',196=>'afii57793',197=>'afii57794',198=>'afii57795',199=>'afii57798',200=>'afii57797',201=>'afii57806',202=>'.notdef',203=>'afii57796',204=>'afii57807',205=>'afii57839',206=>'afii57645',207=>'afii57841',208=>'afii57842',209=>'afii57804',210=>'afii57803',211=>'afii57658',212=>'afii57716',213=>'afii57717',214=>'afii57718',215=>'gereshhebrew',216=>'gershayimhebrew',217=>'.notdef',218=>'.notdef',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'.notdef',224=>'afii57664',225=>'afii57665',226=>'afii57666',227=>'afii57667',228=>'afii57668',229=>'afii57669',230=>'afii57670',231=>'afii57671',232=>'afii57672',233=>'afii57673',234=>'afii57674',235=>'afii57675',236=>'afii57676',237=>'afii57677',238=>'afii57678',239=>'afii57679',240=>'afii57680',241=>'afii57681',242=>'afii57682',243=>'afii57683',244=>'afii57684',245=>'afii57685',246=>'afii57686',247=>'afii57687',248=>'afii57688',249=>'afii57689',250=>'afii57690',251=>'.notdef',252=>'.notdef',253=>'afii299',254=>'afii300',255=>'.notdef'),// encoding map for: iso-8859-11'iso-8859-11' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: cp1257'cp1257' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'dieresis',142=>'caron',143=>'cedilla',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'macron',158=>'ogonek',159=>'.notdef',160=>'space',161=>'.notdef',162=>'cent',163=>'sterling',164=>'currency',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'Oslash',169=>'copyright',170=>'Rcommaaccent',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'AE',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'oslash',185=>'onesuperior',186=>'rcommaaccent',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'ae',192=>'Aogonek',193=>'Iogonek',194=>'Amacron',195=>'Cacute',196=>'Adieresis',197=>'Aring',198=>'Eogonek',199=>'Emacron',200=>'Ccaron',201=>'Eacute',202=>'Zacute',203=>'Edotaccent',204=>'Gcommaaccent',205=>'Kcommaaccent',206=>'Imacron',207=>'Lcommaaccent',208=>'Scaron',209=>'Nacute',210=>'Ncommaaccent',211=>'Oacute',212=>'Omacron',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Uogonek',217=>'Lslash',218=>'Sacute',219=>'Umacron',220=>'Udieresis',221=>'Zdotaccent',222=>'Zcaron',223=>'germandbls',224=>'aogonek',225=>'iogonek',226=>'amacron',227=>'cacute',228=>'adieresis',229=>'aring',230=>'eogonek',231=>'emacron',232=>'ccaron',233=>'eacute',234=>'zacute',235=>'edotaccent',236=>'gcommaaccent',237=>'kcommaaccent',238=>'imacron',239=>'lcommaaccent',240=>'scaron',241=>'nacute',242=>'ncommaaccent',243=>'oacute',244=>'omacron',245=>'otilde',246=>'odieresis',247=>'divide',248=>'uogonek',249=>'lslash',250=>'sacute',251=>'umacron',252=>'udieresis',253=>'zdotaccent',254=>'zcaron',255=>'dotaccent'),// encoding map for: cp1258'cp1258' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'gravecomb',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Ntilde',210=>'hookabovecomb',211=>'Oacute',212=>'Ocircumflex',213=>'Ohorn',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Uhorn',222=>'tildecomb',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'acutecomb',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'ntilde',242=>'dotbelowcomb',243=>'oacute',244=>'ocircumflex',245=>'ohorn',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'uhorn',254=>'dong',255=>'ydieresis'),// encoding map for: cp1253'cp1253' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'.notdef',139=>'guilsinglleft',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'.notdef',155=>'guilsinglright',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'dieresistonos',162=>'Alphatonos',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: cp874'cp874' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'ellipsis',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'kokaithai',162=>'khokhaithai',163=>'khokhuatthai',164=>'khokhwaithai',165=>'khokhonthai',166=>'khorakhangthai',167=>'ngonguthai',168=>'chochanthai',169=>'chochingthai',170=>'chochangthai',171=>'sosothai',172=>'chochoethai',173=>'yoyingthai',174=>'dochadathai',175=>'topatakthai',176=>'thothanthai',177=>'thonangmonthothai',178=>'thophuthaothai',179=>'nonenthai',180=>'dodekthai',181=>'totaothai',182=>'thothungthai',183=>'thothahanthai',184=>'thothongthai',185=>'nonuthai',186=>'bobaimaithai',187=>'poplathai',188=>'phophungthai',189=>'fofathai',190=>'phophanthai',191=>'fofanthai',192=>'phosamphaothai',193=>'momathai',194=>'yoyakthai',195=>'roruathai',196=>'ruthai',197=>'lolingthai',198=>'luthai',199=>'wowaenthai',200=>'sosalathai',201=>'sorusithai',202=>'sosuathai',203=>'hohipthai',204=>'lochulathai',205=>'oangthai',206=>'honokhukthai',207=>'paiyannoithai',208=>'saraathai',209=>'maihanakatthai',210=>'saraaathai',211=>'saraamthai',212=>'saraithai',213=>'saraiithai',214=>'sarauethai',215=>'saraueethai',216=>'sarauthai',217=>'sarauuthai',218=>'phinthuthai',219=>'.notdef',220=>'.notdef',221=>'.notdef',222=>'.notdef',223=>'bahtthai',224=>'saraethai',225=>'saraaethai',226=>'saraothai',227=>'saraaimaimuanthai',228=>'saraaimaimalaithai',229=>'lakkhangyaothai',230=>'maiyamokthai',231=>'maitaikhuthai',232=>'maiekthai',233=>'maithothai',234=>'maitrithai',235=>'maichattawathai',236=>'thanthakhatthai',237=>'nikhahitthai',238=>'yamakkanthai',239=>'fongmanthai',240=>'zerothai',241=>'onethai',242=>'twothai',243=>'threethai',244=>'fourthai',245=>'fivethai',246=>'sixthai',247=>'seventhai',248=>'eightthai',249=>'ninethai',250=>'angkhankhuthai',251=>'khomutthai',252=>'.notdef',253=>'.notdef',254=>'.notdef',255=>'.notdef'),// encoding map for: iso-8859-2'iso-8859-2' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'breve',163=>'Lslash',164=>'currency',165=>'Lcaron',166=>'Sacute',167=>'section',168=>'dieresis',169=>'Scaron',170=>'Scedilla',171=>'Tcaron',172=>'Zacute',173=>'hyphen',174=>'Zcaron',175=>'Zdotaccent',176=>'degree',177=>'aogonek',178=>'ogonek',179=>'lslash',180=>'acute',181=>'lcaron',182=>'sacute',183=>'caron',184=>'cedilla',185=>'scaron',186=>'scedilla',187=>'tcaron',188=>'zacute',189=>'hungarumlaut',190=>'zcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: cp1250'cp1250' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'.notdef',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'.notdef',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'Sacute',141=>'Tcaron',142=>'Zcaron',143=>'Zacute',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'.notdef',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'sacute',157=>'tcaron',158=>'zcaron',159=>'zacute',160=>'space',161=>'caron',162=>'breve',163=>'Lslash',164=>'currency',165=>'Aogonek',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'Scedilla',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'ogonek',179=>'lslash',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'aogonek',186=>'scedilla',187=>'guillemotright',188=>'Lcaron',189=>'hungarumlaut',190=>'lcaron',191=>'zdotaccent',192=>'Racute',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Lacute',198=>'Cacute',199=>'Ccedilla',200=>'Ccaron',201=>'Eacute',202=>'Eogonek',203=>'Edieresis',204=>'Ecaron',205=>'Iacute',206=>'Icircumflex',207=>'Dcaron',208=>'Dcroat',209=>'Nacute',210=>'Ncaron',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'multiply',216=>'Rcaron',217=>'Uring',218=>'Uacute',219=>'Uhungarumlaut',220=>'Udieresis',221=>'Yacute',222=>'Tcommaaccent',223=>'germandbls',224=>'racute',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'lacute',230=>'cacute',231=>'ccedilla',232=>'ccaron',233=>'eacute',234=>'eogonek',235=>'edieresis',236=>'ecaron',237=>'iacute',238=>'icircumflex',239=>'dcaron',240=>'dcroat',241=>'nacute',242=>'ncaron',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'divide',248=>'rcaron',249=>'uring',250=>'uacute',251=>'uhungarumlaut',252=>'udieresis',253=>'yacute',254=>'tcommaaccent',255=>'dotaccent'),// encoding map for: iso-8859-7'iso-8859-7' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'quoteleft',162=>'quoteright',163=>'sterling',164=>'.notdef',165=>'.notdef',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'.notdef',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'.notdef',175=>'afii00208',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'tonos',181=>'dieresistonos',182=>'Alphatonos',183=>'periodcentered',184=>'Epsilontonos',185=>'Etatonos',186=>'Iotatonos',187=>'guillemotright',188=>'Omicrontonos',189=>'onehalf',190=>'Upsilontonos',191=>'Omegatonos',192=>'iotadieresistonos',193=>'Alpha',194=>'Beta',195=>'Gamma',196=>'Delta',197=>'Epsilon',198=>'Zeta',199=>'Eta',200=>'Theta',201=>'Iota',202=>'Kappa',203=>'Lambda',204=>'Mu',205=>'Nu',206=>'Xi',207=>'Omicron',208=>'Pi',209=>'Rho',210=>'.notdef',211=>'Sigma',212=>'Tau',213=>'Upsilon',214=>'Phi',215=>'Chi',216=>'Psi',217=>'Omega',218=>'Iotadieresis',219=>'Upsilondieresis',220=>'alphatonos',221=>'epsilontonos',222=>'etatonos',223=>'iotatonos',224=>'upsilondieresistonos',225=>'alpha',226=>'beta',227=>'gamma',228=>'delta',229=>'epsilon',230=>'zeta',231=>'eta',232=>'theta',233=>'iota',234=>'kappa',235=>'lambda',236=>'mu',237=>'nu',238=>'xi',239=>'omicron',240=>'pi',241=>'rho',242=>'sigma1',243=>'sigma',244=>'tau',245=>'upsilon',246=>'phi',247=>'chi',248=>'psi',249=>'omega',250=>'iotadieresis',251=>'upsilondieresis',252=>'omicrontonos',253=>'upsilontonos',254=>'omegatonos',255=>'.notdef'),// encoding map for: iso-8859-9'iso-8859-9' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: cp1252'cp1252' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'Zcaron',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'zcaron',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: cp1254'cp1254' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'Euro',129=>'.notdef',130=>'quotesinglbase',131=>'florin',132=>'quotedblbase',133=>'ellipsis',134=>'dagger',135=>'daggerdbl',136=>'circumflex',137=>'perthousand',138=>'Scaron',139=>'guilsinglleft',140=>'OE',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'quoteleft',146=>'quoteright',147=>'quotedblleft',148=>'quotedblright',149=>'bullet',150=>'endash',151=>'emdash',152=>'tilde',153=>'trademark',154=>'scaron',155=>'guilsinglright',156=>'oe',157=>'.notdef',158=>'.notdef',159=>'Ydieresis',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Gbreve',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Idotaccent',222=>'Scedilla',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'gbreve',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'dotlessi',254=>'scedilla',255=>'ydieresis'),// encoding map for: iso-8859-1'iso-8859-1' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'currency',165=>'yen',166=>'brokenbar',167=>'section',168=>'dieresis',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'acute',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'cedilla',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'onequarter',189=>'onehalf',190=>'threequarters',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-15'iso-8859-15' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'exclamdown',162=>'cent',163=>'sterling',164=>'Euro',165=>'yen',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'ordfeminine',171=>'guillemotleft',172=>'logicalnot',173=>'hyphen',174=>'registered',175=>'macron',176=>'degree',177=>'plusminus',178=>'twosuperior',179=>'threesuperior',180=>'Zcaron',181=>'mu',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'onesuperior',186=>'ordmasculine',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'questiondown',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Atilde',196=>'Adieresis',197=>'Aring',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Eth',209=>'Ntilde',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Otilde',214=>'Odieresis',215=>'multiply',216=>'Oslash',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Yacute',222=>'Thorn',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'atilde',228=>'adieresis',229=>'aring',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'eth',241=>'ntilde',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'otilde',246=>'odieresis',247=>'divide',248=>'oslash',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'yacute',254=>'thorn',255=>'ydieresis'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: iso-8859-5'iso-8859-5' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'afii10023',162=>'afii10051',163=>'afii10052',164=>'afii10053',165=>'afii10054',166=>'afii10055',167=>'afii10056',168=>'afii10057',169=>'afii10058',170=>'afii10059',171=>'afii10060',172=>'afii10061',173=>'hyphen',174=>'afii10062',175=>'afii10145',176=>'afii10017',177=>'afii10018',178=>'afii10019',179=>'afii10020',180=>'afii10021',181=>'afii10022',182=>'afii10024',183=>'afii10025',184=>'afii10026',185=>'afii10027',186=>'afii10028',187=>'afii10029',188=>'afii10030',189=>'afii10031',190=>'afii10032',191=>'afii10033',192=>'afii10034',193=>'afii10035',194=>'afii10036',195=>'afii10037',196=>'afii10038',197=>'afii10039',198=>'afii10040',199=>'afii10041',200=>'afii10042',201=>'afii10043',202=>'afii10044',203=>'afii10045',204=>'afii10046',205=>'afii10047',206=>'afii10048',207=>'afii10049',208=>'afii10065',209=>'afii10066',210=>'afii10067',211=>'afii10068',212=>'afii10069',213=>'afii10070',214=>'afii10072',215=>'afii10073',216=>'afii10074',217=>'afii10075',218=>'afii10076',219=>'afii10077',220=>'afii10078',221=>'afii10079',222=>'afii10080',223=>'afii10081',224=>'afii10082',225=>'afii10083',226=>'afii10084',227=>'afii10085',228=>'afii10086',229=>'afii10087',230=>'afii10088',231=>'afii10089',232=>'afii10090',233=>'afii10091',234=>'afii10092',235=>'afii10093',236=>'afii10094',237=>'afii10095',238=>'afii10096',239=>'afii10097',240=>'afii61352',241=>'afii10071',242=>'afii10099',243=>'afii10100',244=>'afii10101',245=>'afii10102',246=>'afii10103',247=>'afii10104',248=>'afii10105',249=>'afii10106',250=>'afii10107',251=>'afii10108',252=>'afii10109',253=>'section',254=>'afii10110',255=>'afii10193'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: koi8-r'koi8-r' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'periodcentered',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'SF520000',165=>'SF390000',166=>'SF220000',167=>'SF210000',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'SF270000',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'SF200000',181=>'SF230000',182=>'SF470000',183=>'SF480000',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'SF530000',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: iso-8859-16'iso-8859-16' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'space',161=>'Aogonek',162=>'aogonek',163=>'Lslash',164=>'Euro',165=>'quotedblbase',166=>'Scaron',167=>'section',168=>'scaron',169=>'copyright',170=>'Scommaaccent',171=>'guillemotleft',172=>'Zacute',173=>'hyphen',174=>'zacute',175=>'Zdotaccent',176=>'degree',177=>'plusminus',178=>'Ccaron',179=>'lslash',180=>'Zcaron',181=>'quotedblright',182=>'paragraph',183=>'periodcentered',184=>'zcaron',185=>'ccaron',186=>'scommaaccent',187=>'guillemotright',188=>'OE',189=>'oe',190=>'Ydieresis',191=>'zdotaccent',192=>'Agrave',193=>'Aacute',194=>'Acircumflex',195=>'Abreve',196=>'Adieresis',197=>'Cacute',198=>'AE',199=>'Ccedilla',200=>'Egrave',201=>'Eacute',202=>'Ecircumflex',203=>'Edieresis',204=>'Igrave',205=>'Iacute',206=>'Icircumflex',207=>'Idieresis',208=>'Dcroat',209=>'Nacute',210=>'Ograve',211=>'Oacute',212=>'Ocircumflex',213=>'Ohungarumlaut',214=>'Odieresis',215=>'Sacute',216=>'Uhungarumlaut',217=>'Ugrave',218=>'Uacute',219=>'Ucircumflex',220=>'Udieresis',221=>'Eogonek',222=>'Tcommaaccent',223=>'germandbls',224=>'agrave',225=>'aacute',226=>'acircumflex',227=>'abreve',228=>'adieresis',229=>'cacute',230=>'ae',231=>'ccedilla',232=>'egrave',233=>'eacute',234=>'ecircumflex',235=>'edieresis',236=>'igrave',237=>'iacute',238=>'icircumflex',239=>'idieresis',240=>'dcroat',241=>'nacute',242=>'ograve',243=>'oacute',244=>'ocircumflex',245=>'ohungarumlaut',246=>'odieresis',247=>'sacute',248=>'uhungarumlaut',249=>'ugrave',250=>'uacute',251=>'ucircumflex',252=>'udieresis',253=>'eogonek',254=>'tcommaaccent',255=>'ydieresis'),// encoding map for: koi8-u'koi8-u' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'quotedbl',35=>'numbersign',36=>'dollar',37=>'percent',38=>'ampersand',39=>'quotesingle',40=>'parenleft',41=>'parenright',42=>'asterisk',43=>'plus',44=>'comma',45=>'hyphen',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'at',65=>'A',66=>'B',67=>'C',68=>'D',69=>'E',70=>'F',71=>'G',72=>'H',73=>'I',74=>'J',75=>'K',76=>'L',77=>'M',78=>'N',79=>'O',80=>'P',81=>'Q',82=>'R',83=>'S',84=>'T',85=>'U',86=>'V',87=>'W',88=>'X',89=>'Y',90=>'Z',91=>'bracketleft',92=>'backslash',93=>'bracketright',94=>'asciicircum',95=>'underscore',96=>'grave',97=>'a',98=>'b',99=>'c',100=>'d',101=>'e',102=>'f',103=>'g',104=>'h',105=>'i',106=>'j',107=>'k',108=>'l',109=>'m',110=>'n',111=>'o',112=>'p',113=>'q',114=>'r',115=>'s',116=>'t',117=>'u',118=>'v',119=>'w',120=>'x',121=>'y',122=>'z',123=>'braceleft',124=>'bar',125=>'braceright',126=>'asciitilde',127=>'.notdef',128=>'SF100000',129=>'SF110000',130=>'SF010000',131=>'SF030000',132=>'SF020000',133=>'SF040000',134=>'SF080000',135=>'SF090000',136=>'SF060000',137=>'SF070000',138=>'SF050000',139=>'upblock',140=>'dnblock',141=>'block',142=>'lfblock',143=>'rtblock',144=>'ltshade',145=>'shade',146=>'dkshade',147=>'integraltp',148=>'filledbox',149=>'bullet',150=>'radical',151=>'approxequal',152=>'lessequal',153=>'greaterequal',154=>'space',155=>'integralbt',156=>'degree',157=>'twosuperior',158=>'periodcentered',159=>'divide',160=>'SF430000',161=>'SF240000',162=>'SF510000',163=>'afii10071',164=>'afii10101',165=>'SF390000',166=>'afii10103',167=>'afii10104',168=>'SF250000',169=>'SF500000',170=>'SF490000',171=>'SF380000',172=>'SF280000',173=>'afii10098',174=>'SF260000',175=>'SF360000',176=>'SF370000',177=>'SF420000',178=>'SF190000',179=>'afii10023',180=>'afii10053',181=>'SF230000',182=>'afii10055',183=>'afii10056',184=>'SF410000',185=>'SF450000',186=>'SF460000',187=>'SF400000',188=>'SF540000',189=>'afii10050',190=>'SF440000',191=>'copyright',192=>'afii10096',193=>'afii10065',194=>'afii10066',195=>'afii10088',196=>'afii10069',197=>'afii10070',198=>'afii10086',199=>'afii10068',200=>'afii10087',201=>'afii10074',202=>'afii10075',203=>'afii10076',204=>'afii10077',205=>'afii10078',206=>'afii10079',207=>'afii10080',208=>'afii10081',209=>'afii10097',210=>'afii10082',211=>'afii10083',212=>'afii10084',213=>'afii10085',214=>'afii10072',215=>'afii10067',216=>'afii10094',217=>'afii10093',218=>'afii10073',219=>'afii10090',220=>'afii10095',221=>'afii10091',222=>'afii10089',223=>'afii10092',224=>'afii10048',225=>'afii10017',226=>'afii10018',227=>'afii10040',228=>'afii10021',229=>'afii10022',230=>'afii10038',231=>'afii10020',232=>'afii10039',233=>'afii10026',234=>'afii10027',235=>'afii10028',236=>'afii10029',237=>'afii10030',238=>'afii10031',239=>'afii10032',240=>'afii10033',241=>'afii10049',242=>'afii10034',243=>'afii10035',244=>'afii10036',245=>'afii10037',246=>'afii10024',247=>'afii10019',248=>'afii10046',249=>'afii10045',250=>'afii10025',251=>'afii10042',252=>'afii10047',253=>'afii10043',254=>'afii10041',255=>'afii10044'),// encoding map for: symbol'symbol' => array(0=>'.notdef',1=>'.notdef',2=>'.notdef',3=>'.notdef',4=>'.notdef',5=>'.notdef',6=>'.notdef',7=>'.notdef',8=>'.notdef',9=>'.notdef',10=>'.notdef',11=>'.notdef',12=>'.notdef',13=>'.notdef',14=>'.notdef',15=>'.notdef',16=>'.notdef',17=>'.notdef',18=>'.notdef',19=>'.notdef',20=>'.notdef',21=>'.notdef',22=>'.notdef',23=>'.notdef',24=>'.notdef',25=>'.notdef',26=>'.notdef',27=>'.notdef',28=>'.notdef',29=>'.notdef',30=>'.notdef',31=>'.notdef',32=>'space',33=>'exclam',34=>'universal',35=>'numbersign',36=>'existential',37=>'percent',38=>'ampersand',39=>'suchthat',40=>'parenleft',41=>'parenright',42=>'asteriskmath',43=>'plus',44=>'comma',45=>'minus',46=>'period',47=>'slash',48=>'zero',49=>'one',50=>'two',51=>'three',52=>'four',53=>'five',54=>'six',55=>'seven',56=>'eight',57=>'nine',58=>'colon',59=>'semicolon',60=>'less',61=>'equal',62=>'greater',63=>'question',64=>'congruent',65=>'Alpha',66=>'Beta',67=>'Chi',68=>'Delta',69=>'Epsilon',70=>'Phi',71=>'Gamma',72=>'Eta',73=>'Iota',74=>'theta1',75=>'Kappa',76=>'Lambda',77=>'Mu',78=>'Nu',79=>'Omicron',80=>'Pi',81=>'Theta',82=>'Rho',83=>'Sigma',84=>'Tau',85=>'Upsilon',86=>'sigma1',87=>'Omega',88=>'Xi',89=>'Psi',90=>'Zeta',91=>'bracketleft',92=>'therefore',93=>'bracketright',94=>'perpendicular',95=>'underscore',96=>'radicalex',97=>'alpha',98=>'beta',99=>'chi',100=>'delta',101=>'epsilon',102=>'phi',103=>'gamma',104=>'eta',105=>'iota',106=>'phi1',107=>'kappa',108=>'lambda',109=>'mu',110=>'nu',111=>'omicron',112=>'pi',113=>'theta',114=>'rho',115=>'sigma',116=>'tau',117=>'upsilon',118=>'omega1',119=>'omega',120=>'xi',121=>'psi',122=>'zeta',123=>'braceleft',124=>'bar',125=>'braceright',126=>'similar',127=>'.notdef',128=>'.notdef',129=>'.notdef',130=>'.notdef',131=>'.notdef',132=>'.notdef',133=>'.notdef',134=>'.notdef',135=>'.notdef',136=>'.notdef',137=>'.notdef',138=>'.notdef',139=>'.notdef',140=>'.notdef',141=>'.notdef',142=>'.notdef',143=>'.notdef',144=>'.notdef',145=>'.notdef',146=>'.notdef',147=>'.notdef',148=>'.notdef',149=>'.notdef',150=>'.notdef',151=>'.notdef',152=>'.notdef',153=>'.notdef',154=>'.notdef',155=>'.notdef',156=>'.notdef',157=>'.notdef',158=>'.notdef',159=>'.notdef',160=>'Euro',161=>'Upsilon1',162=>'minute',163=>'lessequal',164=>'fraction',165=>'infinity',166=>'florin',167=>'club',168=>'diamond',169=>'heart',170=>'spade',171=>'arrowboth',172=>'arrowleft',173=>'arrowup',174=>'arrowright',175=>'arrowdown',176=>'degree',177=>'plusminus',178=>'second',179=>'greaterequal',180=>'multiply',181=>'proportional',182=>'partialdiff',183=>'bullet',184=>'divide',185=>'notequal',186=>'equivalence',187=>'approxequal',188=>'ellipsis',189=>'arrowvertex',190=>'arrowhorizex',191=>'carriagereturn',192=>'aleph',193=>'Ifraktur',194=>'Rfraktur',195=>'weierstrass',196=>'circlemultiply',197=>'circleplus',198=>'emptyset',199=>'intersection',200=>'union',201=>'propersuperset',202=>'reflexsuperset',203=>'notsubset',204=>'propersubset',205=>'reflexsubset',206=>'element',207=>'notelement',208=>'angle',209=>'gradient',210=>'registerserif',211=>'copyrightserif',212=>'trademarkserif',213=>'product',214=>'radical',215=>'dotmath',216=>'logicalnot',217=>'logicaland',218=>'logicalor',219=>'arrowdblboth',220=>'arrowdblleft',221=>'arrowdblup',222=>'arrowdblright',223=>'arrowdbldown',224=>'lozenge',225=>'angleleft',226=>'registersans',227=>'copyrightsans',228=>'trademarksans',229=>'summation',230=>'parenlefttp',231=>'parenleftex',232=>'parenleftbt',233=>'bracketlefttp',234=>'bracketleftex',235=>'bracketleftbt',236=>'bracelefttp',237=>'braceleftmid',238=>'braceleftbt',239=>'braceex',240=>'.notdef',241=>'angleright',242=>'integral',243=>'integraltp',244=>'integralex',245=>'integralbt',246=>'parenrighttp',247=>'parenrightex',248=>'parenrightbt',249=>'bracketrighttp',250=>'bracketrightex',251=>'bracketrightbt',252=>'bracerighttp',253=>'bracerightmid',254=>'bracerightbt',255=>'.notdef',1226=>'registered',1227=>'copyright',1228=>'trademark')); // end of encoding maps} // --- END OF CLASS ---//============================================================+// END OF FILE//============================================================+
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin * * This is just example how to use session based single signon with * phpMyAdmin, it is not intended to be perfect code and look, only * shows how you can integrate this functionality in your application. * * @package PhpMyAdmin * @subpackage Example *//* Need to have cookie visible from parent directory */session_set_cookie_params(0, '/', '', 0);/* Create signon session */$session_name = 'SignonSession';session_name($session_name);session_start();/* Was data posted? */if (isset($_POST['user'])) {    /* Store there credentials */    $_SESSION['PMA_single_signon_user'] = $_POST['user'];    $_SESSION['PMA_single_signon_password'] = $_POST['password'];    $_SESSION['PMA_single_signon_host'] = $_POST['host'];    $_SESSION['PMA_single_signon_port'] = $_POST['port'];    /* Update another field of server configuration */    $_SESSION['PMA_single_signon_cfgupdate'] = array('verbose' => 'Signon test');    $id = session_id();    /* Close that session */    session_write_close();    /* Redirect to phpMyAdmin (should use absolute URL here!) */    header('Location: ../index.php');} else {    /* Show simple form */    header('Content-Type: text/html; charset=utf-8');    echo '<?xml version="1.0" encoding="utf-8"?>' . "\n";    ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head>    <link rel="icon" href="../favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />    <title>phpMyAdmin single signon example</title></head><body><?phpif (isset($_SESSION['PMA_single_signon_error_message'])) {    echo '<p class="error">' . $_SESSION['PMA_single_signon_error_message'] . '</p>';}?><form action="signon.php" method="post">Username: <input type="text" name="user" /><br />Password: <input type="password" name="password" /><br />Host: (will use the one from config.inc.php by default) <input type="text" name="host" /><br />Port: (will use the one from config.inc.php by default) <input type="text" name="port" /><br /><input type="submit" /></form></body></html><?php}?>
<?php/** * Overview (main page) * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/display_select_lang.lib.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/index.lib.php';// prepare unfiltered language list$all_languages = PMA_langList();uasort($all_languages, 'PMA_language_cmp');$cf = ConfigFile::getInstance();$separator = PMA_get_arg_separator('html');// message handlingmessages_begin();//// Check phpMyAdmin version//if (isset($_GET['version_check'])) {    PMA_version_check();}//// Perform various security, compatibility and consistency checks//perform_config_checks();//// Check whether we can read/write configuration//$config_readable = false;$config_writable = false;$config_exists = false;check_config_rw($config_readable, $config_writable, $config_exists);if (!$config_writable || !$config_readable) {    messages_set('error', 'config_rw', __('Cannot load or save configuration'),        PMA_lang(__('Please create web server writable folder [em]config[/em] in phpMyAdmin top level directory as described in [a@Documentation.html#setup_script]documentation[/a]. Otherwise you will be only able to download or display it.')));}//// Check https connection//$is_https = !empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on';if (!$is_https) {    $text = __('You are not using a secure connection; all data (including potentially sensitive information, like passwords) is transferred unencrypted!');    if (!empty($_SERVER['REQUEST_URI']) && !empty($_SERVER['HTTP_HOST'])) {        $link = 'https://' . htmlspecialchars($_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);        $strInsecureConnectionMsg2 = __('If your server is also configured to accept HTTPS requests follow [a@%s]this link[/a] to use a secure connection.');        $strInsecureConnectionMsg2 = sprintf($strInsecureConnectionMsg2, $link);        $text .= ' ' . PMA_lang($strInsecureConnectionMsg2);    }    messages_set('notice', 'no_https', __('Insecure connection'), $text);}?><form id="select_lang" method="post" action="<?php echo htmlspecialchars($_SERVER['REQUEST_URI']) ?>">    <?php echo PMA_generate_common_hidden_inputs() ?>    <bdo xml:lang="en" dir="ltr"><label for="lang">    <?php echo __('Language') . (__('Language') != 'Language' ? ' - Language' : '') ?>    </label></bdo><br />    <select id="lang" name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    // create language list    $lang_list = array();    foreach ($all_languages as $each_lang_key => $each_lang) {        $lang_name = PMA_langName($each_lang);        //Is current one active?        $selected = ($GLOBALS['lang'] == $each_lang_key) ? ' selected="selected"' : '';        echo '<option value="' . $each_lang_key . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select></form><?php// Check for done action info and set notice message if presentswitch ($action_done) {    case 'config_saved':        /* Use uniqid to display this message every time configuration is saved */        messages_set('notice', uniqid('config_saved'), __('Configuration saved.'),            PMA_lang(__('Configuration saved to file config/config.inc.php in phpMyAdmin top level directory, copy it to top level one and delete directory config to use it.')));        break;    default:        break;}?><h2><?php echo __('Overview') ?></h2><?php// message handlingmessages_end();messages_show_html();?><a href="#" id="show_hidden_messages" style="display:none"><?php echo __('Show hidden messages (#MSG_COUNT)') ?></a><h3><?php echo __('Servers') ?></h3><?php//// Display server list//display_form_top('index.php', 'get', array(    'page' => 'servers',    'mode' => 'add'));?><div class="form"><?php if ($cf->getServerCount() > 0): ?><table cellspacing="0" class="datatable" style="table-layout: fixed"><tr>    <th>#</th>    <th><?php echo __('Name') ?></th>    <th><?php echo __('Authentication type') ?></th>    <th colspan="2">DSN</th></tr><?php foreach ($cf->getServers() as $id => $server): ?><tr>    <td><?php echo $id ?></td>    <td><?php echo htmlspecialchars($cf->getServerName($id)) ?></td>    <td><?php echo htmlspecialchars($cf->getValue("Servers/$id/auth_type")) ?></td>    <td><?php echo htmlspecialchars($cf->getServerDSN($id)) ?></td>    <td style="white-space: nowrap">        <small>        <a href="<?php echo "?page=servers{$separator}mode=edit{$separator}id=$id" ?>"><?php echo __('Edit') ?></a>        | <a href="<?php echo "?page=servers{$separator}mode=remove{$separator}id=$id" ?>"><?php echo __('Delete') ?></a>        </small>    </td></tr><?php endforeach; ?></table><?php else: ?><table width="100%"><tr>    <td>        <i><?php echo __('There are no configured servers') ?></i>    </td></tr></table><?php endif; ?><table width="100%"><tr>    <td class="lastrow" style="text-align: left">        <input type="submit" name="submit" value="<?php echo __('New server') ?>" />    </td></tr></table></div><?phpdisplay_form_bottom();?><h3><?php echo __('Configuration file') ?></h3><?php//// Display config file settings and load/save form//$form_display = new FormDisplay();display_form_top('config.php');display_fieldset_top('', '', null, array('class' => 'simple'));// Display language list$opts = array(    'doc' => $form_display->getDocLink('DefaultLang'),    'wiki' => $form_display->getWikiLink('DefaultLang'),    'values' => array(),    'values_escaped' => true);foreach ($all_languages as $each_lang_key => $each_lang) {    $lang_name = PMA_langName($each_lang);    $opts['values'][$each_lang_key] = $lang_name;}display_input('DefaultLang', __('Default language'), '', 'select',    $cf->getValue('DefaultLang'), true, $opts);// Display server list$opts = array(    'doc' => $form_display->getDocLink('ServerDefault'),    'wiki' => $form_display->getWikiLink('ServerDefault'),    'values' => array(),    'values_disabled' => array());if ($cf->getServerCount() > 0) {    $opts['values']['0'] = __('let the user choose');    $opts['values']['-'] = '------------------------------';    if ($cf->getServerCount() == 1) {        $opts['values_disabled'][] = '0';    }    $opts['values_disabled'][] = '-';    foreach ($cf->getServers() as $id => $server) {        $opts['values'][(string)$id] = $cf->getServerName($id) . " [$id]";    }} else {    $opts['values']['1'] = __('- none -');    $opts['values_escaped'] = true;}display_input('ServerDefault', __('Default server'), '', 'select',    $cf->getValue('ServerDefault'), true, $opts);// Display EOL list$opts = array(    'values' => array(        'unix' => 'UNIX / Linux (\n)',        'win' => 'Windows (\r\n)'),    'values_escaped' => true);$eol = PMA_ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));display_input('eol', __('End of line'), '', 'select',    $eol, true, $opts);?><tr>    <td colspan="2" class="lastrow" style="text-align: left">        <input type="submit" name="submit_display" value="<?php echo __('Display') ?>" />        <input type="submit" name="submit_download" value="<?php echo __('Download') ?>" />        &nbsp; &nbsp;        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>"<?php if (!$config_writable) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_load" value="<?php echo __('Load') ?>"<?php if (!$config_exists) echo ' disabled="disabled"' ?> />        <input type="submit" name="submit_delete" value="<?php echo __('Delete') ?>"<?php if (!$config_exists || !$config_writable) echo ' disabled="disabled"' ?> />        &nbsp; &nbsp;        <input type="submit" name="submit_clear" value="<?php echo __('Clear') ?>" class="red" />    </td></tr><?phpdisplay_fieldset_bottom_simple();display_form_bottom();?><div id="footer">    <a href="http://phpmyadmin.net"><?php echo __('phpMyAdmin homepage') ?></a>    <a href="http://sourceforge.net/donate/index.php?group_id=23067"><?php echo __('Donate') ?></a>    <a href="?version_check=1<?php echo "{$separator}token=" . $_SESSION[' PMA_token '] ?>"><?php echo __('Check for latest version') ?></a></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * display list of server engines and additonal information about them * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';require './libraries/StorageEngine.class.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Did the user request information about a certain storage engine? */if (empty($_REQUEST['engine']) || ! PMA_StorageEngine::isValid($_REQUEST['engine'])) {    /**     * Displays the sub-page heading     */    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . "\n" . __('Storage Engines') . "\n"       . '</h2>' . "\n";    /**     * Displays the table header     */    echo '<table class="noclick">' . "\n"       . '<thead>' . "\n"       . '<tr><th>' . __('Storage Engine') . '</th>' . "\n"       . '    <th>' . __('Description') . '</th>' . "\n"       . '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    /**     * Listing the storage engines     */    $odd_row = true;    foreach (PMA_StorageEngine::getStorageEngines() as $engine => $details) {        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($details['Support'] == 'NO' || $details['Support'] == 'DISABLED'                ? ' disabled'                : '')           . '">' . "\n"           . '    <td><a href="./server_engines.php'           . PMA_generate_common_url(array('engine' => $engine)) . '">' . "\n"           . '            ' . htmlspecialchars($details['Engine']) . "\n"           . '        </a></td>' . "\n"           . '    <td>' . htmlspecialchars($details['Comment']) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }    $PMA_Config = $GLOBALS['PMA_Config'];    if ($PMA_Config->get('BLOBSTREAMING_PLUGINS_EXIST')) {        // Special case for PBMS daemon which is not listed as an engine        echo '<tr class="'            . ($odd_row ? 'odd' : 'even')            .  '">' . "\n"            . '    <td><a href="./server_engines.php'            . PMA_generate_common_url(array('engine' => "PBMS")) . '">' . "\n"            . '            '  . "PBMS\n"            . '        </a></td>' . "\n"            . '    <td>' . htmlspecialchars("PrimeBase MediaStream (PBMS) daemon") . '</td>' . "\n"            . '</tr>' . "\n";    }   unset($odd_row, $engine, $details);    echo '</tbody>' . "\n"       . '</table>' . "\n";} else {    /**     * Displays details about a given Storage Engine     */    $engine_plugin = PMA_StorageEngine::getEngine($_REQUEST['engine']);    echo '<h2>' . "\n"       . ($GLOBALS['cfg']['MainPageIconic'] ? PMA_getImage('b_engine.png') : '')       . '    ' . htmlspecialchars($engine_plugin->getTitle()) . "\n"       . '    ' . PMA_showMySQLDocu('', $engine_plugin->getMysqlHelpPage()) . "\n"       . '</h2>' . "\n\n";    echo '<p>' . "\n"       . '    <em>' . "\n"       . '        ' . htmlspecialchars($engine_plugin->getComment()) . "\n"       . '    </em>' . "\n"       . '</p>' . "\n\n";    $infoPages = $engine_plugin->getInfoPages();    if (!empty($infoPages) && is_array($infoPages)) {        echo '<p>' . "\n"           . '    <strong>[</strong>' . "\n";        if (empty($_REQUEST['page'])) {            echo '    <strong>' . __('Variables') . '</strong>' . "\n";        } else {            echo '    <a href="./server_engines.php'                . PMA_generate_common_url(array('engine' => $_REQUEST['engine'])) . '">'                . __('Variables') . '</a>' . "\n";        }        foreach ($infoPages as $current => $label) {            echo '    <strong>|</strong>' . "\n";            if (isset($_REQUEST['page']) && $_REQUEST['page'] == $current) {                echo '    <strong>' . $label . '</strong>' . "\n";            } else {                echo '    <a href="./server_engines.php'                    . PMA_generate_common_url(                        array('engine' => $_REQUEST['engine'], 'page' => $current))                    . '">' . htmlspecialchars($label) . '</a>' . "\n";            }        }        unset($current, $label);        echo '    <strong>]</strong>' . "\n"           . '</p>' . "\n\n";    }    unset($infoPages, $page_output);    if (!empty($_REQUEST['page'])) {        $page_output = $engine_plugin->getPage($_REQUEST['page']);    }    if (!empty($page_output)) {        echo $page_output;    } else {        echo '<p> ' . $engine_plugin->getSupportInformationMessage() . "\n"           . '</p>' . "\n"           . $engine_plugin->getHtmlVariables();    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?phprequire_once './libraries/common.inc.php';if (! isset($_REQUEST['get_gis_editor']) && ! isset($_REQUEST['generate'])) {    include_once './libraries/header_http.inc.php';    include_once './libraries/header_meta_style.inc.php';}require_once './libraries/gis/pma_gis_factory.php';require_once './libraries/gis_visualization.lib.php';// Get data if any posted$gis_data = array();if (PMA_isValid($_REQUEST['gis_data'], 'array')) {    $gis_data = $_REQUEST['gis_data'];}$gis_types = array(    'POINT',    'MULTIPOINT',    'LINESTRING',    'MULTILINESTRING',    'POLYGON',    'MULTIPOLYGON',    'GEOMETRYCOLLECTION');// Extract type from the initial call and make sure that it's a valid one.// Extract from field's values if availbale, if not use the column type passed.if (! isset($gis_data['gis_type'])) {    if (isset($_REQUEST['type']) && $_REQUEST['type'] != '') {        $gis_data['gis_type'] = strtoupper($_REQUEST['type']);    }    if (isset($_REQUEST['value']) && trim($_REQUEST['value']) != '') {        $start = (substr($_REQUEST['value'], 0, 1) == "'") ? 1 : 0;        $gis_data['gis_type'] = substr($_REQUEST['value'], $start, strpos($_REQUEST['value'], "(") - $start);    }    if ((! isset($gis_data['gis_type'])) || (! in_array($gis_data['gis_type'], $gis_types))) {        $gis_data['gis_type'] = $gis_types[0];    }}$geom_type = $gis_data['gis_type'];// Generate parameters from value passed.$gis_obj = PMA_GIS_Factory::factory($geom_type);if (isset($_REQUEST['value'])) {    $gis_data = array_merge($gis_data, $gis_obj->generateParams($_REQUEST['value']));}// Generate Well Known Text$srid = (isset($gis_data['srid']) && $gis_data['srid'] != '') ? htmlspecialchars($gis_data['srid']) : 0;$wkt = $gis_obj->generateWkt($gis_data, 0);$wkt_with_zero = $gis_obj->generateWkt($gis_data, 0, '0');$result = "'" . $wkt . "'," . $srid;// Generate PNG or SVG based visualization$format = (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER <= 8) ? 'png' : 'svg';$visualizationSettings = array('width' => 450, 'height' => 300, 'spatialColumn' => 'wkt');$data = array(array('wkt' => $wkt_with_zero, 'srid' => $srid));$visualization = PMA_GIS_visualizationResults($data, $visualizationSettings, $format);$open_layers = PMA_GIS_visualizationResults($data, $visualizationSettings, 'ol');// If the call is to update the WKT and visualization make an AJAX responseif (isset($_REQUEST['generate']) && $_REQUEST['generate'] == true) {    $extra_data = array(        'result'        => $result,        'visualization' => $visualization,        'openLayers'    => $open_layers,    );    PMA_ajaxResponse(null, true, $extra_data);}// If the call is to get the whole content, start buffering, skipping </head> and <body> tagsif (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    ob_start();} else {?></head><body><?php}?>    <form id="gis_data_editor_form" action="gis_data_editor.php" method="post">    <input type="hidden" id="pmaThemeImage" value="<?php echo($GLOBALS['pmaThemeImage']); ?>" />    <div id="gis_data_editor">        <h3><?php printf(__('Value for the column "%s"'), htmlspecialchars($_REQUEST['field'])); ?></h3><?php   echo('<input type="hidden" name="field" value="' . htmlspecialchars($_REQUEST['field']) . '" />');        // The input field to which the final result should be added and corresponding null checkbox        if (isset($_REQUEST['input_name'])) {            echo('<input type="hidden" name="input_name" value="' . htmlspecialchars($_REQUEST['input_name']) . '" />');        }        echo PMA_generate_common_hidden_inputs();?>        <!-- Visualization section -->        <div id="placeholder" style="width:450px;height:300px;<?php       if ($srid != 0) {                echo('display:none;');            }?>      "><?php       echo ($visualization);?>      </div>        <div id="openlayersmap" style="width:450px;height:300px;<?php       if ($srid == 0) {                echo('display:none;');            }?>      ">        </div>        <div class="choice" style="float:right;clear:right;">            <input type="checkbox" id="choice" value="useBaseLayer"<?php       if ($srid != 0) {                echo(' checked="checked"');            }?>          />            <label for="choice"><?php echo __("Use OpenStreetMaps as Base Layer"); ?></label>        </div>        <script language="javascript" type="text/javascript">            <?php echo($open_layers); ?>        </script>        <!-- End of visualization section -->        <!-- Header section - Inclueds GIS type selector and input field for SRID -->        <div id="gis_data_header">            <select name="gis_data[gis_type]" class="gis_type"><?php                foreach ($gis_types as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($geom_type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }?>            </select>            <input type="submit" name="gis_data[go]" class="go" value="<?php echo __("Go")?>" />            <label for="srid"><?php echo __("SRID"); ?>:&nbsp;</label>            <input name="gis_data[srid]" type="text" value="<?php echo($srid); ?>" />        </div>        <!-- End of header section -->        <!-- Data section -->        <div id="gis_data"><?php   $geom_count = 1;        if ($geom_type == 'GEOMETRYCOLLECTION') {            $geom_count = (isset($gis_data[$geom_type]['geom_count'])) ? $gis_data[$geom_type]['geom_count'] : 1;            if (isset($gis_data[$geom_type]['add_geom'])) {                $geom_count++;            }            echo('<input type="hidden" name="gis_data[GEOMETRYCOLLECTION][geom_count]" value="' . $geom_count . '">');        }        for ($a = 0; $a < $geom_count; $a++) {            if ($geom_type == 'GEOMETRYCOLLECTION') {                echo('<br/><br/>'); echo __("Geometry"); echo($a + 1 . ':<br/>');                if (isset($gis_data[$a]['gis_type'])) {                    $type = $gis_data[$a]['gis_type'];                } else {                    $type = $gis_types[0];                }                echo('<select name="gis_data[' . $a . '][gis_type]" class="gis_type">');                foreach (array_slice($gis_types, 0, 6) as $gis_type) {                    echo('<option value="' . $gis_type . '"');                    if ($type == $gis_type) {                        echo(' selected="selected"');                    }                    echo('>' . $gis_type . '</option>');                }                echo('</select>');                echo('<input type="submit" name="gis_data[' . $a . '][go]" class="go" value="'); echo __("Go"); echo('">');            } else {                $type = $geom_type;            }            if ($type == 'POINT') {                echo('<br/>'); echo __("Point"); echo(' :');?>              <label for="x"><?php echo __("X"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][x]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['x']) ? htmlspecialchars($gis_data[$a]['POINT']['x']) : ''); ?>" />                <label for="y"><?php echo __("Y"); ?></label>                <input name="gis_data[<?php echo($a); ?>][POINT][y]" type="text" value="<?php echo(isset($gis_data[$a]['POINT']['y']) ? htmlspecialchars($gis_data[$a]['POINT']['y']) : ''); ?>" /><?php            } elseif ($type == 'MULTIPOINT' || $type == 'LINESTRING') {                $no_of_points = isset($gis_data[$a][$type]['no_of_points']) ? $gis_data[$a][$type]['no_of_points'] : 1;                if ($type == 'LINESTRING' && $no_of_points < 2) {                    $no_of_points = 2;                }                if ($type == 'MULTIPOINT' && $no_of_points < 1) {                    $no_of_points = 1;                }                if (isset($gis_data[$a][$type]['add_point'])) {                    $no_of_points++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_points]" value="' . $no_of_points . '">');                for ($i = 0; $i < $no_of_points; $i++) {                    echo('<br/>');                    printf(__('Point %d'), $i + 1);                    echo ':';?>                  <label for="x"><?php echo  __("X"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i]['x']) ? htmlspecialchars($gis_data[$a][$type][$i]['x']) : ''); ?>" />                    <label for="y"><?php echo  __("Y"); ?></label>                    <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i]['y']) ? htmlspecialchars($gis_data[$a][$type][$i]['y']) : ''); ?>" /><?php                }?>               <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php            } elseif ($type == 'MULTILINESTRING' || $type == 'POLYGON') {                $no_of_lines = isset($gis_data[$a][$type]['no_of_lines']) ? $gis_data[$a][$type]['no_of_lines'] : 1;                if ($no_of_lines < 1) {                    $no_of_lines = 1;                }                if (isset($gis_data[$a][$type]['add_line'])) {                    $no_of_lines++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_lines]" value="' . $no_of_lines . '">');                for ($i = 0; $i < $no_of_lines; $i++) {                    echo('<br/>');                    if ($type == 'MULTILINESTRING') {                        echo __("Linestring"); echo($i + 1 . ':');                    } else {                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                    }                    $no_of_points = isset($gis_data[$a][$type][$i]['no_of_points']) ? $gis_data[$a][$type][$i]['no_of_points'] : 2;                    if ($type == 'MULTILINESTRING' && $no_of_points < 2) {                        $no_of_points = 2;                    }                    if ($type == 'POLYGON' && $no_of_points < 4) {                        $no_of_points = 4;                    }                    if (isset($gis_data[$a][$type][$i]['add_point'])) {                        $no_of_points++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                    for ($j = 0; $j < $no_of_points; $j++) {                        echo('<br/>');                        printf(__('Point %d'), $j + 1);                        echo ':';?>                      <label for="x"><?php echo  __("X"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][x]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['x']) : ''); ?>" />                        <label for="y"><?php echo  __("Y"); ?></label>                        <input type="text" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][<?php echo($j); ?>][y]" value="<?php echo(isset($gis_data[$a][$type][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$i][$j]['y']) : ''); ?>" /><?php               }?>                  <input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][<?php echo($i); ?>][add_point]" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php           }                $caption = ($type == 'MULTILINESTRING') ? __('Add a linestring') : __('Add an inner ring');?>              <br/><input type="submit" name="gis_data[<?php echo($a); ?>][<?php echo($type); ?>][add_line]" class="add addLine" value="<?php echo($caption); ?>"><?php            } elseif ($type == 'MULTIPOLYGON') {                $no_of_polygons = isset($gis_data[$a][$type]['no_of_polygons']) ? $gis_data[$a][$type]['no_of_polygons'] : 1;                if ($no_of_polygons < 1) {                    $no_of_polygons = 1;                }                if (isset($gis_data[$a][$type]['add_polygon'])) {                    $no_of_polygons++;                }                echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][no_of_polygons]" value="' . $no_of_polygons . '">');                for ($k = 0; $k < $no_of_polygons; $k++) {                    echo('<br/>'); echo __("Polygon"); echo($k + 1 . ':');                    $no_of_lines = isset($gis_data[$a][$type][$k]['no_of_lines']) ? $gis_data[$a][$type][$k]['no_of_lines'] : 1;                    if ($no_of_lines < 1) {                        $no_of_lines = 1;                    }                    if (isset($gis_data[$a][$type][$k]['add_line'])) {                        $no_of_lines++;                    }                    echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][no_of_lines]" value="' . $no_of_lines . '">');                    for ($i = 0; $i < $no_of_lines; $i++) {                        echo('<br/><br/>');                        if ($i == 0) {                            echo __("Outer Ring") . ':';                        } else {                            echo __("Inner Ring"); echo($i . ':');                        }                        $no_of_points = isset($gis_data[$a][$type][$k][$i]['no_of_points']) ? $gis_data[$a][$type][$k][$i]['no_of_points'] : 4;                        if ($no_of_points < 4) {                            $no_of_points = 4;                        }                        if (isset($gis_data[$a][$type][$k][$i]['add_point'])) {                            $no_of_points++;                        }                        echo('<input type="hidden" name="gis_data[' . $a . '][' . $type . '][' . $k . '][' . $i . '][no_of_points]" value="' . $no_of_points . '">');                        for ($j = 0; $j < $no_of_points; $j++) {                            echo('<br/>');                            printf(__('Point %d'), $j + 1);                            echo ':';?>                          <label for="x"><?php echo  __("X"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][x]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['x']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['x']) : ''); ?>" />                            <label for="y"><?php echo  __("Y"); ?></label>                            <input type="text" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][" . $j . "][y]"); ?>" value="<?php echo(isset($gis_data[$a][$type][$k][$i][$j]['y']) ? htmlspecialchars($gis_data[$a][$type][$k][$i][$j]['y']) : ''); ?>" /><?php                   }?>                      <input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][" . $i . "][add_point]"); ?>" class="add addPoint" value="<?php echo __("Add a point"); ?>"><?php               }?>                  <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][" . $k . "][add_line]"); ?>" class="add addLine" value="<?php echo __('Add an inner ring') ?>"><br/><?php           }?>              <br/><input type="submit" name="<?php echo("gis_data[" . $a . "][" . $type . "][add_polygon]"); ?>" class="add addPolygon" value="<?php echo __('Add a polygon') ?>"><?php       }        }        if ($geom_type == 'GEOMETRYCOLLECTION') {?>          <br/><br/><input type="submit" name="gis_data[GEOMETRYCOLLECTION][add_geom]" class="add addGeom" value="<?php  echo __("Add geometry"); ?>" /><?php   }?>      </div>        <!-- End of data section -->        <br/><input type="submit" name="gis_data[save]" value="<?php echo __('Go') ?>">        <div id="gis_data_output">            <h3><?php echo __('Output'); ?></h3>            <p><?php echo __('Chose "GeomFromText" from the "Function" column and paste the below string into the "Value" field'); ?></p>            <textarea id="gis_data_textarea" cols="95" rows="5"><?php           echo($result);?>          </textarea>        </div>    </div>    </form><?php// If the call is to get the whole content, get the content in the buffer and make and AJAX response.if (isset($_REQUEST['get_gis_editor']) && $_REQUEST['get_gis_editor'] == true) {    $extra_data['gis_editor'] = ob_get_contents();    PMA_ajaxResponse(null, ob_end_clean(), $extra_data);}?></body><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/** * Handles the visualization of GIS POINT objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Point extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        return $this->setMinMax($point, array());    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $image       Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $point_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            imagearc($image, $points_arr[0][0], $points_arr[0][1], 7, 7, 0, 360, $color);            // print label if applicable            if (isset($label) && trim($label) != '') {                imagestring($image, 1, $points_arr[0][0], $points_arr[0][1], trim($label), $black);            }        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     * @param image  $pdf         TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $point_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($point_color, 1, 2));        $green = hexdec(substr($point_color, 3, 2));        $blue  = hexdec(substr($point_color, 4, 2));        $line  = array('width' => 1.25, 'color' => array($red, $green, $blue));        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        // draw a small circle to mark the point        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $pdf->Circle($points_arr[0][0], $points_arr[0][1], 2, 0, 360, 'D', $line);            // print label if applicable            if (isset($label) && trim($label) != '') {                $pdf->SetXY($points_arr[0][0], $points_arr[0][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial     GIS POINT object     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $point_color, $scale_data)    {        $point_options = array(            'name'        => $label,            'id'          => $label . rand(),            'class'       => 'point vector',            'fill'        => 'white',            'stroke'      => $point_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, $scale_data);        $row = '';        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $row .= '<circle cx="' . $points_arr[0][0] . '" cy="' . $points_arr[0][1] . '" r="3"';            foreach ($point_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial     GIS POINT object     * @param int    $srid        Spatial reference ID     * @param string $label       Label for the GIS POINT object     * @param string $point_color Color for the GIS POINT object     * @param array  $scale_data  Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $point_color, $scale_data)    {        $style_options = array(            'pointRadius'  => 3,            'fillColor'    => '#ffffff',            'strokeColor'  => $point_color,            'strokeWidth'  => 2,            'label'        => $label,            'labelYOffset' => -8,            'fontSize'     => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $result = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($spatial, 6, (strlen($spatial) - 7));        $points_arr = $this->extractPoints($point, null);        if ($points_arr[0][0] != '' && $points_arr[0][1] != '') {            $result .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector(('                . 'new OpenLayers.Geometry.Point(' . $points_arr[0][0] . ', '                . $points_arr[0][1] . ').transform(new OpenLayers.Projection("EPSG:'                . $srid . '"), map.getProjectionObject())), null, '                . json_encode($style_options) . '));';        }        return $result;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Point deos not adhere to this parameter     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {         return 'POINT('             . ((isset($gis_data[$index]['POINT']['x']) && trim($gis_data[$index]['POINT']['x']) != '')             ? $gis_data[$index]['POINT']['x'] : '') . ' '             . ((isset($gis_data[$index]['POINT']['y']) && trim($gis_data[$index]['POINT']['y']) != '')             ? $gis_data[$index]['POINT']['y'] : '') . ')';    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        return 'POINT(' . (isset($row_data['x']) ? $row_data['x'] : '')             . ' ' . (isset($row_data['y']) ? $row_data['y'] : '') . ')';    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'POINT';            $wkt = $value;        }        // Trim to remove leading 'POINT(' and trailing ')'        $point = substr($wkt, 6, (strlen($wkt) - 7));        $points_arr = $this->extractPoints($point, null);        $params[$index]['POINT']['x'] = $points_arr[0][0];        $params[$index]['POINT']['y'] = $points_arr[0][1];        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various validation functions * * Validation function takes two argument: id for which it is called * and array of fields' values (usually values for entire formset, as defined * in forms.inc.php). * The function must always return an array with an error (or error array) * assigned to a form element (formset name or field path). Even if there are * no errors, key must be set with an empty value. * * Valdiation functions are assigned in $cfg_db['_validators'] (config.values.php). * * @package PhpMyAdmin *//** * Returns validator list * * @return array */function PMA_config_get_validators(){    static $validators = null;    if ($validators === null) {        $cf = ConfigFile::getInstance();        $validators = $cf->getDbEntry('_validators', array());        if (!defined('PMA_SETUP')) {            // not in setup script: load additional validators for user preferences            // we need oryginal config values not overwritten by user preferences, creating a new PMA_Config            // instance is a better idea than hacking into its code            $org_cfg = $cf->getOrgConfigObj();            $uvs = $cf->getDbEntry('_userValidators', array());            foreach ($uvs as $field => $uv_list) {                $uv_list = (array)$uv_list;                foreach ($uv_list as &$uv) {                    if (!is_array($uv)) {                        continue;                    }                    for ($i = 1; $i < count($uv); $i++) {                        if (substr($uv[$i], 0, 6) == 'value:') {                            $uv[$i] = PMA_array_read(substr($uv[$i], 6), $org_cfg->settings);                        }                    }                }                $validators[$field] = isset($validators[$field])                    ? array_merge((array)$validators[$field], $uv_list)                    : $uv_list;            }        }    }    return $validators;}/** * Runs validation $validator_id on values $values and returns error list. * * Return values: * o array, keys - field path or formset id, values - array of errors *   when $isPostSource is true values is an empty array to allow for error list *   cleanup in HTML documen * o false - when no validators match name(s) given by $validator_id * * @param string|array  $validator_id * @param array         $values * @param bool          $isPostSource  tells whether $values are directly from POST request * @return bool|array */function PMA_config_validate($validator_id, &$values, $isPostSource){    // find validators    $validator_id = (array) $validator_id;    $validators = PMA_config_get_validators();    $vids = array();    $cf = ConfigFile::getInstance();    foreach ($validator_id as &$vid) {        $vid = $cf->getCanonicalPath($vid);        if (isset($validators[$vid])) {            $vids[] = $vid;        }    }    if (empty($vids)) {        return false;    }    // create argument list with canonical paths and remember path mapping    $arguments = array();    $key_map = array();    foreach ($values as $k => $v) {        $k2 = $isPostSource ? str_replace('-', '/', $k) : $k;        $k2 = strpos($k2, '/') ? $cf->getCanonicalPath($k2) : $k2;        $key_map[$k2] = $k;        $arguments[$k2] = $v;    }    // validate    $result = array();    foreach ($vids as $vid) {        // call appropriate validation functions        foreach ((array)$validators[$vid] as $validator) {            $vdef = (array) $validator;            $vname = array_shift($vdef);            $args = array_merge(array($vid, &$arguments), $vdef);            $r = call_user_func_array($vname, $args);            // merge results            if (is_array($r)) {                foreach ($r as $key => $error_list) {                    // skip empty values if $isPostSource is false                    if (!$isPostSource && empty($error_list)) {                        continue;                    }                    if (!isset($result[$key])) {                        $result[$key] = array();                    }                    $result[$key] = array_merge($result[$key], (array)$error_list);                }            }        }    }    // restore original paths    $new_result = array();    foreach ($result as $k => $v) {        $k2 = isset($key_map[$k]) ? $key_map[$k] : $k;        $new_result[$k2] = $v;    }    return empty($new_result) ? true : $new_result;}/** * Empty error handler, used to temporarily restore PHP internal error handler * * @return bool */function PMA_null_error_handler(){    return false;}/** * Ensures that $php_errormsg variable will be registered in case of an error * and enables output buffering (when $start = true). * Called with $start = false disables output buffering end restores * html_errors and track_errors. * * @param boolean $start */function test_php_errormsg($start = true){    static $old_html_errors, $old_track_errors, $old_error_reporting;    static $old_display_errors;    if ($start) {        $old_html_errors = ini_get('html_errors');        $old_track_errors = ini_get('track_errors');        $old_display_errors = ini_get('display_errors');        $old_error_reporting = error_reporting(E_ALL);        ini_set('html_errors', false);        ini_set('track_errors', true);        ini_set('display_errors', true);        set_error_handler("PMA_null_error_handler");        ob_start();    } else {        ob_end_clean();        restore_error_handler();        error_reporting($old_error_reporting);        ini_set('html_errors', $old_html_errors);        ini_set('track_errors', $old_track_errors);        ini_set('display_errors', $old_display_errors);    }}/** * Test database connection * * @param string $extension     'drizzle', 'mysql' or 'mysqli' * @param string $connect_type  'tcp' or 'socket' * @param string $host * @param string $port * @param string $socket * @param string $user * @param string $pass * @param string $error_key * @return bool|array */function test_db_connection($extension, $connect_type, $host, $port, $socket, $user, $pass = null, $error_key = 'Server'){    //    test_php_errormsg();    $socket = empty($socket) || $connect_type == 'tcp' ? null : $socket;    $port = empty($port) || $connect_type == 'socket' ? null : ':' . $port;    $error = null;    if ($extension == 'drizzle') {        while (1) {            $drizzle = @drizzle_create();            if (!$drizzle) {                $error = __('Could not initialize Drizzle connection library');                break;            }            $conn = $socket                ? @drizzle_con_add_uds($socket, $user, $pass, null, 0)                : @drizzle_con_add_tcp($drizzle, $host, $port, $user, $pass, null, 0);            if (!$conn) {                $error = __('Could not connect to Drizzle server');                drizzle_free($drizzle);                break;            }            // connection object is set up but we have to send some query to actually connect            $res = @drizzle_query($conn, 'SELECT 1');            if (!$res) {                $error = __('Could not connect to Drizzle server');            } else {                drizzle_result_free($res);            }            drizzle_con_free($conn);            drizzle_free($drizzle);            break;        }    } else if ($extension == 'mysql') {        $conn = @mysql_connect($host . $socket . $port, $user, $pass);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysql_close($conn);        }    } else {        $conn = @mysqli_connect($host, $user, $pass, null, $port, $socket);        if (!$conn) {            $error = __('Could not connect to MySQL server');        } else {            mysqli_close($conn);        }    }    //    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error .= " - $php_errormsg";    }    return is_null($error) ? true : array($error_key => $error);}/** * Validate server config * * @param string $path * @param array  $values * @return array */function validate_server($path, $values){    $result = array('Server' => '', 'Servers/1/user' => '', 'Servers/1/SignonSession' => '', 'Servers/1/SignonURL' => '');    $error = false;    if ($values['Servers/1/auth_type'] == 'config' && empty($values['Servers/1/user'])) {        $result['Servers/1/user'] = __('Empty username while using config authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonSession'])) {        $result['Servers/1/SignonSession'] = __('Empty signon session name while using signon authentication method');        $error = true;    }    if ($values['Servers/1/auth_type'] == 'signon' && empty($values['Servers/1/SignonURL'])) {        $result['Servers/1/SignonURL'] = __('Empty signon URL while using signon authentication method');        $error = true;    }    if (!$error && $values['Servers/1/auth_type'] == 'config') {        $password = $values['Servers/1/nopassword'] ? null : $values['Servers/1/password'];        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'], $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'], $values['Servers/1/user'], $password, 'Server');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validate pmadb config * * @param string $path * @param array  $values * @return array */function validate_pmadb($path, $values){    //$tables = array('Servers/1/bookmarktable', 'Servers/1/relation', 'Servers/1/table_info', 'Servers/1/table_coords', 'Servers/1/pdf_pages', 'Servers/1/column_info', 'Servers/1/history', 'Servers/1/designer_coords');    $result = array('Server_pmadb' => '', 'Servers/1/controluser' => '', 'Servers/1/controlpass' => '');    $error = false;    if ($values['Servers/1/pmadb'] == '') {        return $result;    }    $result = array();    if ($values['Servers/1/controluser'] == '') {        $result['Servers/1/controluser'] = __('Empty phpMyAdmin control user while using pmadb');        $error = true;    }    if ($values['Servers/1/controlpass'] == '') {        $result['Servers/1/controlpass'] = __('Empty phpMyAdmin control user password while using pmadb');        $error = true;    }    if (!$error) {        $test = test_db_connection($values['Servers/1/extension'], $values['Servers/1/connect_type'],            $values['Servers/1/host'], $values['Servers/1/port'], $values['Servers/1/socket'],            $values['Servers/1/controluser'], $values['Servers/1/controlpass'], 'Server_pmadb');        if ($test !== true) {            $result = array_merge($result, $test);        }    }    return $result;}/** * Validates regular expression * * @param string $path * @param array  $values * @return array */function validate_regex($path, $values){    $result = array($path => '');    if ($values[$path] == '') {        return $result;    }    test_php_errormsg();    $matches = array();    // in libraries/List_Database.class.php _checkHideDatabase(),    // a '/' is used as the delimiter for hide_db    preg_match('/' . $values[$path] . '/', '', $matches);    test_php_errormsg(false);    if (isset($php_errormsg)) {        $error = preg_replace('/^preg_match\(\): /', '', $php_errormsg);        return array($path => $error);    }    return $result;}/** * Validates TrustedProxies field * * @param string $path * @param array  $values * @return array */function validate_trusted_proxies($path, $values){    $result = array($path => array());    if (empty($values[$path])) {        return $result;    }    if (is_array($values[$path])) {        // value already processed by FormDisplay::save        $lines = array();        foreach ($values[$path] as $ip => $v) {            $lines[] = preg_match('/^-\d+$/', $ip)                ? $v                : $ip . ': ' . $v;        }    } else {        // AJAX validation        $lines = explode("\n", $values[$path]);    }    foreach ($lines as $line) {        $line = trim($line);        $matches = array();        // we catch anything that may (or may not) be an IP        if (!preg_match("/^(.+):(?:[ ]?)\\w+$/", $line, $matches)) {            $result[$path][] = __('Incorrect value') . ': ' . $line;            continue;        }        // now let's check whether we really have an IP address        if (filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) === false            && filter_var($matches[1], FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) === false) {            $ip = htmlspecialchars(trim($matches[1]));            $result[$path][] = sprintf(__('Incorrect IP address: %s'), $ip);            continue;        }    }    return $result;}/** * Tests integer value * * @param string $path * @param array  $values * @param bool   $allow_neg       allow negative values * @param bool   $allow_zero      allow zero * @param int    $max_value       max allowed value * @param string $error_string    error message key: $GLOBALS["strConfig$error_lang_key"] * @return string  empty string if test is successful */function test_number($path, $values, $allow_neg, $allow_zero, $max_value, $error_string){    if ($values[$path] === '') {        return '';    }    if (intval($values[$path]) != $values[$path] || (!$allow_neg && $values[$path] < 0) || (!$allow_zero && $values[$path] == 0) || $values[$path] > $max_value) {        return $error_string;    }    return '';}/** * Validates port number * * @param string $path * @param array  $values * @return array */function validate_port_number($path, $values){    return array($path => test_number($path, $values, false, false, 65535, __('Not a valid port number')));}/** * Validates positive number * * @param string $path * @param array  $values * @return array */function validate_positive_number($path, $values){    return array($path => test_number($path, $values, false, false, PHP_INT_MAX, __('Not a positive number')));}/** * Validates non-negative number * * @param string $path * @param array  $values * @return array */function validate_non_negative_number($path, $values){    return array($path => test_number($path, $values, false, true, PHP_INT_MAX, __('Not a non-negative number')));}/** * Validates value according to given regular expression * Pattern and modifiers must be a valid for PCRE <b>and</b> JavaScript RegExp * * @param string $path * @param array  $values * @param string $regex * @return void */function validate_by_regex($path, $values, $regex){    $result = preg_match($regex, $values[$path]);    return array($path => ($result ? '' : __('Incorrect value')));}/** * Validates upper bound for numeric inputs * * @param string $path * @param array  $values * @param int    $max_value * @return array */function validate_upper_bound($path, $values, $max_value){    $result = $values[$path] <= $max_value;    return array($path => ($result ? '' : sprintf(__('Value must be equal or lower than %s'), $max_value)));}?>
<?php/*   Copyright (c) 2003, 2005, 2006, 2009 Danilo Segan <danilo@kvota.net>.   This file is part of PHP-gettext.   PHP-gettext is free software; you can redistribute it and/or modify   it under the terms of the GNU General Public License as published by   the Free Software Foundation; either version 2 of the License, or   (at your option) any later version.   PHP-gettext is distributed in the hope that it will be useful,   but WITHOUT ANY WARRANTY; without even the implied warranty of   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the   GNU General Public License for more details.   You should have received a copy of the GNU General Public License   along with PHP-gettext; if not, write to the Free Software   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA*/  // Simple class to wrap file streams, string streams, etc.  // seek is essential, and it should be byte streamclass StreamReader {  // should return a string [FIXME: perhaps return array of bytes?]  function read($bytes) {    return false;  }  // should return new position  function seekto($position) {    return false;  }  // returns current position  function currentpos() {    return false;  }  // returns length of entire stream (limit for seekto()s)  function length() {    return false;  }};class StringReader {  var $_pos;  var $_str;  function StringReader($str='') {    $this->_str = $str;    $this->_pos = 0;  }  function read($bytes) {    $data = substr($this->_str, $this->_pos, $bytes);    $this->_pos += $bytes;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $data;  }  function seekto($pos) {    $this->_pos = $pos;    if (strlen($this->_str)<$this->_pos)      $this->_pos = strlen($this->_str);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return strlen($this->_str);  }};class FileReader {  var $_pos;  var $_fd;  var $_length;  function FileReader($filename) {    if (file_exists($filename)) {      $this->_length=filesize($filename);      $this->_pos = 0;      $this->_fd = fopen($filename,'rb');      if (!$this->_fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }    } else {      $this->error = 2; // File doesn't exist      return false;    }  }  function read($bytes) {    if ($bytes) {      fseek($this->_fd, $this->_pos);      // PHP 5.1.1 does not read more than 8192 bytes in one fread()      // the discussions at PHP Bugs suggest it's the intended behaviour      $data = '';      while ($bytes > 0) {        $chunk  = fread($this->_fd, $bytes);        $data  .= $chunk;        $bytes -= strlen($chunk);      }      $this->_pos = ftell($this->_fd);      return $data;    } else return '';  }  function seekto($pos) {    fseek($this->_fd, $pos);    $this->_pos = ftell($this->_fd);    return $this->_pos;  }  function currentpos() {    return $this->_pos;  }  function length() {    return $this->_length;  }  function close() {    fclose($this->_fd);  }};// Preloads entire file in memory first, then creates a StringReader// over it (it assumes knowledge of StringReader internals)class CachedFileReader extends StringReader {  function CachedFileReader($filename) {    if (file_exists($filename)) {      $length=filesize($filename);      $fd = fopen($filename,'rb');      if (!$fd) {        $this->error = 3; // Cannot read file, probably permissions        return false;      }      $this->_str = fread($fd, $length);      fclose($fd);    } else {      $this->error = 2; // File doesn't exist      return false;    }  }};?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides the functionality for retreiving images * which may be actual images or an icon from a sprite * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Get the data for the sprites, if it's availableif (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {    include $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';}$sprites = array();if (function_exists('PMA_sprites')) {    $sprites = PMA_sprites();}// We only need the keys from the array of sprites data,// since they contain the (partial) class names$keys = array();foreach ($sprites as $key => $value) {    $keys[] = "'$key'";}?>/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string image      The name of the file to get * @param string alternate  Used to set 'alt' and 'title' attributes of the image * @param object attributes An associative array of other attributes * * @return Object The requested image, this object has two methods: *                  .toString()        - Returns the IMG tag for the requested image *                  .attr(name)        - Returns a particular attribute of the IMG *                                       tag given it's name *                  .attr(name, value) - Sets a particular attribute of the IMG *                                       tag to the given value *                And one property: *                  .isSprite          - Whether the image is a sprite or not */function PMA_getImage(image, alternate, attributes) {    var in_array = function (needle, haystack) {        for (i in haystack) {            if (haystack[i] == needle) {                return true;            }        }        return false;    };    var sprites = [        <?php echo implode($keys, ",\n        ") . "\n"; ?>    ];    // custom image object, it will eventually be returned by this functions    var retval = {        data: {            // this is private            alt: '',            title: '',            src: 'themes/dot.gif'        },        isSprite: true,        attr: function (name, value) {            if (value == undefined) {                if (this.data[name] == undefined) {                    return '';                } else {                    return this.data[name];                }            } else {                this.data[name] = value;            }        },        toString: function () {            var retval = '<' + 'img';            for (var i in this.data) {                retval += ' ' + i + '="' + this.data[i] + '"';            }            retval += ' /' + '>';            return retval;        }    };    // initialise missing parameters    if (attributes == undefined) {        attributes = {};    }    if (alternate == undefined) {        alternate = '';    }    // set alt    if (attributes.alt != undefined) {        retval.attr('alt', attributes.alt);    } else {        retval.attr('alt', alternate);    }    // set title    if (attributes.title != undefined) {        retval.attr('title', attributes.title);    } else {        retval.attr('title', alternate);    }    // set src    var klass = image.replace('.gif', '').replace('.png', '');    if (in_array(klass, sprites)) {        // it's an icon from a sprite        retval.attr('class', 'icon ic_' + klass);    } else {        // it's an image file        retval.isSprite = false;        retval.attr('src', "<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>" + image);    }    // set all other attrubutes    for (var i in attributes) {        if (i == 'src') {            // do not allow to override the 'src' attribute            continue;        } else if (i == 'class') {            retval.attr(i, retval.attr('class') + ' ' + attributes[i]);        } else {            retval.attr(i, attributes[i]);        }    }    return retval;};
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form templates * * @package PhpMyAdmin *//** * Displays top part of the form * * @param string $action         default: $_SERVER['REQUEST_URI'] * @param string $method         'post' or 'get' * @param array  $hidden_fields  array of form hidden fields (key: field name) */function display_form_top($action = null, $method = 'post', $hidden_fields = null){    static $has_check_page_refresh = false;    if ($action === null) {        $action = $_SERVER['REQUEST_URI'];    }    if ($method != 'post') {        $method = 'get';    }?><form method="<?php echo $method ?>" action="<?php echo htmlspecialchars($action) ?>" class="config-form"><input type="hidden" name="tab_hash" value="" /><?php    // we do validation on page refresh when browser remembers field values,    // add a field with known value which will be used for checks    if (!$has_check_page_refresh) {        $has_check_page_refresh = true;        echo '<input type="hidden" name="check_page_refresh" id="check_page_refresh"'            . ' value="" />' . "\n";    }    echo PMA_generate_common_hidden_inputs('', '', 0, 'server') . "\n";    echo PMA_getHiddenFields((array)$hidden_fields);}/** * Displays form tabs which are given by an array indexed by fieldset id * ({@link display_fieldset_top}), with values being tab titles. * * @param array $tabs */function display_tabs_top($tabs){?><ul class="tabs"><?php foreach ($tabs as $tab_id => $tab_name): ?>    <li><a href="#<?php echo $tab_id ?>"><?php echo htmlspecialchars($tab_name); ?></a></li><?php endforeach; ?></ul><br clear="right" /><div class="tabs_contents"><?php}/** * Displays top part of a fieldset * * @param string $title * @param string $description * @param array  $errors * @param array  $attributes */function display_fieldset_top($title = '', $description = '', $errors = null, $attributes = array()){    global $_FormDisplayGroup;    $_FormDisplayGroup = 0;    $attributes = array_merge(array('class' => 'optbox'), $attributes);    foreach ($attributes as $k => &$attr) {        $attr = $k . '="' . htmlspecialchars($attr) . '"';    }    echo '<fieldset ' . implode(' ', $attributes) . '>';    echo '<legend>' . $title . '</legend>';    if (!empty($description)) {        echo '<p>' . $description . '</p>';    }    // this must match with displayErrors() in scripts.js    if (is_array($errors) && count($errors) > 0) {        echo '<dl class="errors">';        foreach ($errors as $error) {            echo '<dd>' . $error . '</dd>';        }        echo '</dl>';    }?><table width="100%" cellspacing="0"><?php}/** * Displays input field * * $opts keys: * o doc - (string) documentation link * o errors - error array * o setvalue - (string) shows button allowing to set poredefined value * o show_restore_default - (boolean) whether show "restore default" button * o userprefs_allow - whether user preferences are enabled for this field (null - no support, *                     true/false - enabled/disabled) * o userprefs_comment - (string) field comment * o values - key - value paris for <select> fields * o values_escaped - (boolean) tells whether values array is already escaped (defaults to false) * o values_disabled -  (array)list of disabled values (keys from values) * o comment - (string) tooltip comment * o comment_warning - (bool) whether this comments warns about something * o wiki - (string) wiki link * * @param string $path * @param string $name * @param string $description * @param string $type * @param mixed  $value * @param bool   $value_is_default * @param array  $opts */function display_input($path, $name, $description = '', $type, $value, $value_is_default = true, $opts = null){    global $_FormDisplayGroup;    static $base_dir; // Relative path to the root phpMyAdmin folder    static $icons;    // An array of IMG tags used further below in the function    $is_setup_script = defined('PMA_SETUP');    if ($base_dir === null) { // if the static variables have not been initialised        $base_dir = $is_setup_script ? '../' : '';        $icons = array();        // Icon definitions:        // The same indexes will be used in the $icons array.        // The first element contains the filename and the second        // element is used for the "alt" and "title" attributes.        $icon_init = array(            'edit'   => array('b_edit.png',   ''),            'help'   => array('b_help.png',   __('Documentation')),            'info'   => array('b_info.png',   __('Wiki')),            'reload' => array('s_reload.png', ''),            'tblops' => array('b_tblops.png', '')        );        if ($is_setup_script) {            // When called from the setup script, we don't have access to the            // sprite-aware PMA_getImage() function because the PMA_theme class            // has not been loaded, so we generate the img tags manually.            foreach ($icon_init as $k => $v) {                $title = '';                if (! empty($v[1])) {                    $title = ' title="' . $v[1] . '"';                }                $icons[$k] = sprintf(                    '<img alt="%s" src="%s"%s />',                    $v[1],                    ".{$GLOBALS['cfg']['ThemePath']}/original/img/{$v[0]}",                    $title                );            }        } else {            // In this case we just use PMA_getImage() because it's available            foreach ($icon_init as $k => $v) {                $icons[$k] = PMA_getImage($v[0], $v[1]);            }        }    }    $has_errors = isset($opts['errors']) && !empty($opts['errors']);    $option_is_disabled = !$is_setup_script && isset($opts['userprefs_allow']) && !$opts['userprefs_allow'];    $name_id = 'name="' . htmlspecialchars($path) . '" id="' . htmlspecialchars($path) . '"';    $field_class = $type == 'checkbox' ? 'checkbox' : '';    if (!$value_is_default) {        $field_class .= ($field_class == '' ? '' : ' ') . ($has_errors ? 'custom field-error' : 'custom');    }    $field_class = $field_class ? ' class="' . $field_class . '"' : '';    $tr_class = $_FormDisplayGroup > 0        ? 'group-field group-field-' . $_FormDisplayGroup        : '';    if (isset($opts['setvalue']) && $opts['setvalue'] == ':group') {        unset($opts['setvalue']);        $_FormDisplayGroup++;        $tr_class = 'group-header-field group-header-' . $_FormDisplayGroup;    }    if ($option_is_disabled) {        $tr_class .= ($tr_class ? ' ' : '') . 'disabled-field';    }    $tr_class = $tr_class ? ' class="' . $tr_class . '"' : '';?><tr<?php echo $tr_class ?>>    <th>        <label for="<?php echo htmlspecialchars($path) ?>"><?php echo $name ?></label>        <?php if (!empty($opts['doc']) || !empty($opts['wiki'])) { ?>        <span class="doc">            <?php if (!empty($opts['doc'])) { ?><a href="<?php echo $base_dir . $opts['doc']  ?>" target="documentation"><?php echo $icons['help']; ?></a><?php } ?>            <?php if (!empty($opts['wiki'])){ ?><a href="<?php echo $opts['wiki'] ?>" target="wiki"><?php echo $icons['info']; ?></a><?php } ?>        </span>        <?php } ?>        <?php if ($option_is_disabled) { ?>            <span class="disabled-notice" title="<?php echo __('This setting is disabled, it will not be applied to your configuration') ?>"><?php echo __('Disabled') ?></span>        <?php } ?>        <?php if (!empty($description)) { ?><small><?php echo $description ?></small><?php } ?>    </th>    <td>    <?php    switch ($type) {        case 'text':            echo '<input type="text" size="60" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'short_text':            echo '<input type="text" size="25" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'number_text':            echo '<input type="text" size="15" ' . $name_id . $field_class                . ' value="' . htmlspecialchars($value) . '" />';          break;        case 'checkbox':            echo '<span' . $field_class . '><input type="checkbox" ' . $name_id              . ($value ? ' checked="checked"' : '') . ' /></span>';          break;        case 'select':            echo '<select ' . $name_id . $field_class . '>';            $escape = !(isset($opts['values_escaped']) && $opts['values_escaped']);            $values_disabled = isset($opts['values_disabled'])                ? array_flip($opts['values_disabled']) : array();            foreach ($opts['values'] as $opt_value_key => $opt_value) {                // set names for boolean values                if (is_bool($opt_value)) {                    $opt_value = strtolower($opt_value ? __('Yes') : __('No'));                }                // escape if necessary                if ($escape) {                    $display = htmlspecialchars($opt_value);                    $display_value = htmlspecialchars($opt_value_key);                } else {                    $display = $opt_value;                    $display_value = $opt_value_key;                }                // compare with selected value                // boolean values are cast to integers when used as array keys                $selected = is_bool($value)                    ? (int) $value === $opt_value_key                    : $opt_value_key === $value;                echo '<option value="' . $display_value . '"'                    . ($selected ? ' selected="selected"' : '')                    . (isset($values_disabled[$opt_value_key]) ? ' disabled="disabled"' : '')                    . '>' . $display . '</option>';            }            echo '</select>';            break;        case 'list':            echo '<textarea cols="40" rows="5" ' . $name_id . $field_class . '>'                . htmlspecialchars(implode("\n", $value))                . '</textarea>';            break;    }    if (isset($opts['comment']) && $opts['comment']) {        $class = 'field-comment-mark';        if (isset($opts['comment_warning']) && $opts['comment_warning']) {            $class .= ' field-comment-warning';        }        ?>        <span class="<?php echo $class ?>" title="<?php echo htmlspecialchars($opts['comment']) ?>">i</span>        <?php    }    if ($is_setup_script && isset($opts['userprefs_comment']) && $opts['userprefs_comment']) {        ?>        <a class="userprefs-comment" title="<?php echo htmlspecialchars($opts['userprefs_comment']) ?>"><?php echo $icons['tblops']; ?></a>        <?php    }    if (isset($opts['setvalue']) && $opts['setvalue']) {        ?>        <a class="set-value" href="#<?php echo htmlspecialchars("$path={$opts['setvalue']}") ?>" title="<?php echo sprintf(__('Set value: %s'), htmlspecialchars($opts['setvalue'])) ?>" style="display:none"><?php echo $icons['edit']; ?></a>        <?php    }    if (isset($opts['show_restore_default']) && $opts['show_restore_default']) {        ?>        <a class="restore-default" href="#<?php echo $path ?>" title="<?php echo __('Restore default value') ?>" style="display:none"><?php echo $icons['reload']; ?></a>        <?php    }    // this must match with displayErrors() in scripts/config.js    if ($has_errors) {        echo "\n        <dl class=\"inline_errors\">";        foreach ($opts['errors'] as $error) {            echo '<dd>' . htmlspecialchars($error) . '</dd>';        }        echo '</dl>';    }    ?>    </td>    <?php    if ($is_setup_script && isset($opts['userprefs_allow'])) {    ?>    <td class="userprefs-allow" title="<?php echo __('Allow users to customize this value') ?>">        <input type="checkbox" name="<?php echo $path ?>-userprefs-allow" <?php if ($opts['userprefs_allow']) echo 'checked="checked"' ?> />    </td>    <?php    } else if ($is_setup_script) {        echo '<td>&nbsp;</td>';    }    ?></tr><?php}/** * Display group header * * @param string $header_text */function display_group_header($header_text){    global $_FormDisplayGroup;    $_FormDisplayGroup++;    if (!$header_text) {        return;    }    $colspan = defined('PMA_SETUP')        ? 3        : 2;?><tr class="group-header group-header-<?php echo $_FormDisplayGroup ?>">    <th colspan="<?php echo $colspan ?>">        <?php echo $header_text ?>    </th></tr><?php}/** * Display group footer * */function display_group_footer(){    global $_FormDisplayGroup;    $_FormDisplayGroup--;}/** * Displays bottom part of a fieldset */function display_fieldset_bottom(){    $colspan = 2;    if (defined('PMA_SETUP')) {        $colspan++;    }?><tr>    <td colspan="<?php echo $colspan ?>" class="lastrow">        <input type="submit" name="submit_save" value="<?php echo __('Save') ?>" class="green" />        <input type="button" name="submit_reset" value="<?php echo __('Reset') ?>" />    </td></tr></table></fieldset><?php}/** * Displays simple bottom part of a fieldset (without submit buttons) */function display_fieldset_bottom_simple(){?></table></fieldset><?php}/** * Closes form tabs */function display_tabs_bottom(){    echo "</div>\n";}/** * Displays bottom part of the form */function display_form_bottom(){    echo "</form>\n";}/** * Appends JS validation code to $js_array * * @param string       $field_id * @param string|array $validator * @param array        $js_array */function js_validate($field_id, $validators, &$js_array){    foreach ((array)$validators as $validator) {        $validator = (array)$validator;        $v_name = array_shift($validator);        $v_args = array();        foreach ($validator as $arg) {            $v_args[] = PMA_escapeJsString($arg);        }        $v_args = $v_args ? ", ['" . implode("', '", $v_args) . "']" : '';        $js_array[] = "validateField('$field_id', '$v_name', true$v_args)";    }}/** * Displays JavaScript code * * @param array $js_array */function display_js($js_array){    if (empty($js_array)) {        return;    }?><script type="text/javascript"><?php echo implode(";\n", $js_array) . ";\n" ?></script><?php}/** * Displays error list * * @param string $name * @param array  $error_list */function display_errors($name, $error_list){    echo '<dl>';    echo '<dt>' . htmlspecialchars($name) . '</dt>';    foreach ($error_list as $error) {        echo '<dd>' . htmlspecialchars($error) . '</dd>';    }    echo '</dl>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */define('IS_TRANSFORMATION_WRAPPER', true);/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/transformations.lib.php'; // Transformations$cfgRelation = PMA_getRelationsParam();/** * Ensures db and table are valid, else moves to the "parent" script */require_once './libraries/db_table_exists.lib.php';/** * Get the list of the fields of the current table */PMA_DBI_select_db($db);if (isset($where_clause)) {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);} else {    $result      = PMA_DBI_query('SELECT * FROM ' . PMA_backquote($table) . ' LIMIT 1;', null, PMA_DBI_QUERY_STORE);    $row         = PMA_DBI_fetch_assoc($result);}// No row returnedif (!$row) {    exit;} // end if (no record returned)$default_ct = 'application/octet-stream';if ($cfgRelation['commwork'] && $cfgRelation['mimework']) {    $mime_map = PMA_getMime($db, $table);    $mime_options = PMA_transformation_getOptions((isset($mime_map[$transform_key]['transformation_options']) ? $mime_map[$transform_key]['transformation_options'] : ''));    foreach ($mime_options AS $key => $option) {        if (substr($option, 0, 10) == '; charset=') {            $mime_options['charset'] = $option;        }    }}// For re-usability, moved http-headers and stylesheets// to a seperate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';// [MIME]if (isset($ct) && !empty($ct)) {    $mime_type = $ct;} else {    $mime_type = (isset($mime_map[$transform_key]['mimetype']) ? str_replace('_', '/', $mime_map[$transform_key]['mimetype']) : $default_ct) . (isset($mime_options['charset']) ? $mime_options['charset'] : '');}PMA_download_header($cn, $mime_type);if (! isset($resize)) {    echo $row[$transform_key];} else {    // if image_*__inline.inc.php finds that we can resize,    // it sets $resize to jpeg or png    $srcImage = imagecreatefromstring($row[$transform_key]);    $srcWidth = ImageSX($srcImage);    $srcHeight = ImageSY($srcImage);    // Check to see if the width > height or if width < height    // if so adjust accordingly to make sure the image    // stays smaller then the $newWidth and $newHeight    $ratioWidth = $srcWidth/$newWidth;    $ratioHeight = $srcHeight/$newHeight;    if ($ratioWidth < $ratioHeight) {        $destWidth = $srcWidth/$ratioHeight;        $destHeight = $newHeight;    } else {        $destWidth = $newWidth;        $destHeight = $srcHeight/$ratioWidth;    }    if ($resize) {        $destImage = ImageCreateTrueColor($destWidth, $destHeight);    }//    ImageCopyResized($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);// better quality but slower:    ImageCopyResampled($destImage, $srcImage, 0, 0, 0, 0, $destWidth, $destHeight, $srcWidth, $srcHeight);    if ($resize == 'jpeg') {        ImageJPEG($destImage, '', 75);    }    if ($resize == 'png') {        ImagePNG($destImage);    }    ImageDestroy($srcImage);    ImageDestroy($destImage);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the $column_order array * * @return array */function PMA_getColumnOrder(){    $column_order['DEFAULT_COLLATION_NAME'] = array(            'disp_name' => __('Collation'),            'description_function' => 'PMA_getCollationDescr',            'format'    => 'string',            'footer'    => PMA_getServerCollation(),        );    $column_order['SCHEMA_TABLES'] = array(        'disp_name' => __('Tables'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_TABLE_ROWS'] = array(        'disp_name' => __('Rows'),        'format'    => 'number',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_LENGTH'] = array(        'disp_name' => __('Data'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_INDEX_LENGTH'] = array(        'disp_name' => __('Indexes'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_LENGTH'] = array(        'disp_name' => __('Total'),        'format'    => 'byte',        'footer'    => 0,    );    $column_order['SCHEMA_DATA_FREE'] = array(        'disp_name' => __('Overhead'),        'format'    => 'byte',        'footer'    => 0,    );    return $column_order;}/* * Builds the HTML td elements for one database to display in the list * of databases from server_databases.php (which can be modified by * db_create.php) * * @param array $current * @param boolean $is_superuser * @param string $checkall * @param string $url_query * @param array $column_order * @param array $replication_types * @param array $replication_info * * @return array $column_order, $out */function PMA_buildHtmlForDb($current, $is_superuser, $checkall, $url_query, $column_order, $replication_types, $replication_info){    $out = '';    if ($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase']) {        $out .= '<td class="tool">';        $out .= '<input type="checkbox" name="selected_dbs[]" title="' . htmlspecialchars($current['SCHEMA_NAME']) . '" value="' . htmlspecialchars($current['SCHEMA_NAME']) . '" ';        if (!PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $out .= (empty($checkall) ? '' : 'checked="checked" ') . '/>';        } else {            $out .= ' disabled="disabled" />';        }        $out .= '</td>';    }    $out .= '<td class="name">'           . '        <a onclick="'           . 'if (window.parent.openDb &amp;&amp; window.parent.openDb(\'' . PMA_jsFormat($current['SCHEMA_NAME'], false) . '\')) return false;'           . '" href="index.php?' . $url_query . '&amp;db='           . urlencode($current['SCHEMA_NAME']) . '" title="'           . sprintf(__('Jump to database'), htmlspecialchars($current['SCHEMA_NAME']))           . '" target="_parent">'           . ' ' . htmlspecialchars($current['SCHEMA_NAME'])           . '</a>'           . '</td>';    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $current)) {            if (is_numeric($stat['footer'])) {                $column_order[$stat_name]['footer'] += $current[$stat_name];            }            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($current[$stat_name], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($current[$stat_name], 0);            } else {                $value = htmlentities($current[$stat_name], 0);            }            $out .= '<td class="value">';            if (isset($stat['description_function'])) {                $out .= '<dfn title="' . $stat['description_function']($current[$stat_name]) . '">';            }            $out .= $value;            if (isset($stat['description_function'])) {                $out .= '</dfn>';            }            $out .= '</td>';            if ($stat['format'] === 'byte') {                $out .= '<td class="unit">' . $unit . '</td>';            }        }    }    foreach ($replication_types as $type) {        if ($replication_info[$type]['status']) {            $out .= '<td class="tool" style="text-align: center;">';            if (strlen(array_search($current["SCHEMA_NAME"], $replication_info[$type]['Ignore_DB'])) > 0) {                $out .= PMA_getIcon('s_cancel.png',  __('Not replicated'));            } else {                $key = array_search($current["SCHEMA_NAME"], $replication_info[$type]['Do_DB']);                if (strlen($key) > 0 || ($replication_info[$type]['Do_DB'][0] == "" && count($replication_info[$type]['Do_DB']) == 1)) {                    // if ($key != null) did not work for index "0"                    $out .= PMA_getIcon('s_success.png', __('Replicated'));                }            }            $out .= '</td>';        }    }    if ($is_superuser && !PMA_DRIZZLE) {        $out .= '<td class="tool">'               . '<a onclick="'               . 'if (window.parent.setDb) window.parent.setDb(\'' . PMA_jsFormat($current['SCHEMA_NAME']) . '\');'               . '" href="./server_privileges.php?' . $url_query               . '&amp;checkprivs=' . urlencode($current['SCHEMA_NAME'])               . '" title="' . sprintf(__('Check privileges for database &quot;%s&quot;.'), htmlspecialchars($current['SCHEMA_NAME']))               . '">'               . ' '               . PMA_getIcon('s_rights.png', __('Check Privileges'))               . '</a></td>';    }    return array($column_order, $out);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the Drizzle extension * * WARNING - EXPERIMENTAL, never use in production, drizzle module segfaults often and when you least expect it to * * TODO: This file and drizzle-wrappers.lib.php should be devoid of any segault related hacks. * TODO: Crashing versions of drizzle module and/or libdrizzle should be blacklisted * * @package PhpMyAdmin-DBI-Drizzle */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';require_once './libraries/dbi/drizzle-wrappers.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    define('PMA_MYSQL_CLIENT_API', (int)drizzle_version());}/** * Helper function for connecting to the database server * * @param   PMA_Drizzle  $drizzle * @param   string       $host * @param   int          $port * @param   string       $uds * @param   string       $user * @param   string       $password * @param   string       $db * @param   int          $options * @return  PMA_DrizzleCon */function PMA_DBI_real_connect($drizzle, $host, $port, $uds, $user, $password, $db = null, $options = DRIZZLE_CON_NONE){    if ($uds) {        $con = $drizzle->addUds($uds, $user, $password, $db, $options);    } else {        $con = $drizzle->addTcp($host, $port, $user, $password, $db, $options);    }    return $con;}/** * connects to the database server * * @param   string  $user           drizzle user name * @param   string  $password       drizzle user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    if (strtolower($GLOBALS['cfg']['Server']['connect_type']) == 'tcp') {        $GLOBALS['cfg']['Server']['socket'] = '';    }    $drizzle = new PMA_Drizzle();    $client_flags = 0;    /* Optionally compress connection */    if ($GLOBALS['cfg']['Server']['compress']) {        $client_flags |= DRIZZLE_CAPABILITIES_COMPRESS;    }    /* Optionally enable SSL */    if ($GLOBALS['cfg']['Server']['ssl']) {        $client_flags |= DRIZZLE_CAPABILITIES_SSL;    }    if (!$server) {        $link = @PMA_DBI_real_connect($drizzle, $cfg['Server']['host'], $server_port, $server_socket, $user, $password, false, $client_flags);        // Retry with empty password if we're allowed to        if ($link == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = @PMA_DBI_real_connect($drizzle, $cfg['Server']['host'], $server_port, $server_socket, $user, null, false, $client_flags);        }    } else {        $link = @PMA_DBI_real_connect($drizzle, $server['host'], $server_port, $server_socket, $user, $password);    }    if ($link == false) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'drizzle-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string          $dbname  database name to select * @param PMA_DrizzleCom  $link    connection object * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return $link->selectDb($dbname);}/** * runs a query and returns the result * * @param   string          $query    query to execute * @param   PMA_DrizzleCon  $link     connection object * @param   int             $options * @return  PMA_DrizzleResult */function PMA_DBI_real_query($query, $link, $options){    $buffer_mode = $options & PMA_DBI_QUERY_UNBUFFERED        ? PMA_Drizzle::BUFFER_ROW        : PMA_Drizzle::BUFFER_RESULT;    $res = $link->query($query, $buffer_mode);    return $res;}/** * returns array of rows with associative and numeric keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_array($result){    return $result->fetchRow(PMA_Drizzle::FETCH_BOTH);}/** * returns array of rows with associative keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return $result->fetchRow(PMA_Drizzle::FETCH_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   PMA_DrizzleResult  $result * @return  array */function PMA_DBI_fetch_row($result){    return $result->fetchRow(PMA_Drizzle::FETCH_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   PMA_DrizzleResult  $result * @param   int                $offset * @return  boolean true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return $result->seek($offset);}/** * Frees memory associated with the result * * @param  PMA_DrizzleResult  $result */function PMA_DBI_free_result($result){    if ($result instanceof PMA_DrizzleResult) {        $result->free();    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results() {    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  bool         false */function PMA_DBI_next_result() {    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * @param   PMA_DrizzleCon  $link   connection object * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    $str = $link->port()        ? $link->host() . ':' . $link->port() . ' via TCP/IP'        : 'Localhost via UNIX socket';    return $str;}/** * Returns the version of the Drizzle protocol used * @param   PMA_DrizzleCon  $link   connection object * @return  int         version of the Drizzle protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return $link->protocolVersion();}/** * returns a string that represents the client library version * @return  string          Drizzle client library version */function PMA_DBI_get_client_info(){    return 'libdrizzle (Drizzle ' . drizzle_version() . ')';}/** * returns last error message or false if no errors occured * * @param   PMA_DrizzleCon  $link  connection object * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = drizzle_con_errno($link->getConnectionObject());        $error_message = drizzle_con_error($link->getConnectionObject());    } else {        $error_number = drizzle_errno();        $error_message = drizzle_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   PMA_DrizzleResult  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @$result->numRows();    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   PMA_DrizzleCon  $link  connection object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // copied from mysql and mysqli    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   PMA_DrizzleResult  $link            connection object * @param   bool               $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return $link->affectedRows();    }}/** * returns metainfo for fields in $result * * @param   PMA_DrizzleResult  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    /*$typeAr[DRIZZLE_COLUMN_TYPE_DECIMAL]     = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_NEWDECIMAL]  = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_BIT]         = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_TINY]        = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_SHORT]       = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_LONG]        = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_FLOAT]       = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_DOUBLE]      = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_NULL]        = 'null';    $typeAr[DRIZZLE_COLUMN_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[DRIZZLE_COLUMN_TYPE_LONGLONG]    = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_INT24]       = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DATE]        = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_TIME]        = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_DATETIME]    = 'datetime';    $typeAr[DRIZZLE_COLUMN_TYPE_YEAR]        = 'year';    $typeAr[DRIZZLE_COLUMN_TYPE_NEWDATE]     = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_ENUM]        = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_SET]         = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_VIRTUAL]     = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_TINY_BLOB]   = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_LONG_BLOB]   = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_BLOB]        = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_VAR_STRING]  = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_VARCHAR]     = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_STRING]      = 'string';    $typeAr[DRIZZLE_COLUMN_TYPE_GEOMETRY]    = 'geometry';*/    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_BLOB]      = 'blob';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DATE]      = 'date';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DATETIME]  = 'datetime';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_DOUBLE]    = 'real';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_ENUM]      = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_LONG]      = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_LONGLONG]  = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_MAX]       = 'unknown';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_NULL]      = 'null';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_TIMESTAMP] = 'timestamp';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_TINY]      = 'int';    $typeAr[DRIZZLE_COLUMN_TYPE_DRIZZLE_VARCHAR]   = 'string';    // array of DrizzleColumn    $columns = $result->getColumns();    // columns in a standarized format    $std_columns = array();    foreach ($columns as $k => $column) {        $c = new stdClass();        $c->name = $column->name();        $c->orgname = $column->origName();        $c->table = $column->table();        $c->orgtable = $column->origTable();        $c->def = $column->defaultValue();        $c->db = $column->db();        $c->catalog = $column->catalog();        // $column->maxSize() returns always 0 while size() seems        // to return a correct value (drizzle extension v.0.5, API v.7)        $c->max_length = $column->size();        $c->decimals = $column->decimals();        $c->charsetnr = $column->charset();        $c->type = $typeAr[$column->typeDrizzle()];        $c->_type = $column->type();        $c->flags = PMA_DBI_field_flags($result, $k);        $c->_flags = $column->flags();        $c->multiple_key = (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_MULTIPLE_KEY);        $c->primary_key =  (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_PRI_KEY);        $c->unique_key =   (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY);        $c->not_null =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_NOT_NULL);        $c->unsigned =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_UNSIGNED);        $c->zerofill =     (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_ZEROFILL);        $c->numeric =      (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_NUM);        $c->blob =         (int) (bool) ($c->_flags & DRIZZLE_COLUMN_FLAGS_BLOB);        $std_columns[] = $c;    }    return $std_columns;}/** * return number of fields in given $result * * @param   PMA_DrizzleResult  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return $result->numColumns();}/** * returns the length of the given field $i in $result * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    $colums = $result->getColumns();    return $colums[$i]->size();}/** * returns name of $i. field in $result * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    $colums = $result->getColumns();    return $colums[$i]->name();}/** * returns concatenated string of human readable field flags * * @param   PMA_DrizzleResult  $result * @param   int                $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    $columns = $result->getColumns();    $f = $columns[$i];    $type = $f->typeDrizzle();    $charsetnr = $f->charset();    $f = $f->flags();    $flags = '';    if ($f & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY) {        $flags .= 'unique ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_NUM) {        $flags .= 'num ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_PART_KEY) {        $flags .= 'part_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_SET) {        $flags .= 'set ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_TIMESTAMP) {        $flags .= 'timestamp ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_AUTO_INCREMENT) {        $flags .= 'auto_increment ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_ENUM) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == DRIZZLE_COLUMN_TYPE_DRIZZLE_BLOB || $type == DRIZZLE_COLUMN_TYPE_DRIZZLE_VARCHAR) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_ZEROFILL) {        $flags .= 'zerofill ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_UNSIGNED) {        $flags .= 'unsigned ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_BLOB) {        $flags .= 'blob ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_MULTIPLE_KEY) {        $flags .= 'multiple_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_UNIQUE_KEY) {        $flags .= 'unique_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_PRI_KEY) {        $flags .= 'primary_key ';    }    if ($f & DRIZZLE_COLUMN_FLAGS_NOT_NULL) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/** * Library that provides common functions that are used to help integrating Swekey Authentication in a PHP web site * Version 1.0 * * History: * 1.2 Use curl (widely installed) to query the server *     Fixed a possible tempfile race attack *     Random token cache can now be disabled * 1.1 Added Swekey_HttpGet function that support faulty servers *     Support for custom servers * 1.0 First release * * @package Swekey *//** * Errors codes */define ("SWEKEY_ERR_INVALID_DEV_STATUS", 901);   // The satus of the device is not SWEKEY_STATUS_OKdefine ("SWEKEY_ERR_INTERNAL", 902);             // Should never occurddefine ("SWEKEY_ERR_OUTDATED_RND_TOKEN", 910);   // You random token is too olddefine ("SWEKEY_ERR_INVALID_OTP", 911);          // The otp was not correct/** * Those errors are considered as an attack and your site will be blacklisted during one minute * if you receive one of those errors */define ("SWEKEY_ERR_BADLY_ENCODED_REQUEST", 920);define ("SWEKEY_ERR_INVALID_RND_TOKEN", 921);define ("SWEKEY_ERR_DEV_NOT_FOUND", 922);/** * Default values for configuration. */define ('SWEKEY_DEFAULT_CHECK_SERVER', 'https://auth-check.musbe.net');define ('SWEKEY_DEFAULT_RND_SERVER', 'https://auth-rnd-gen.musbe.net');define ('SWEKEY_DEFAULT_STATUS_SERVER', 'https://auth-status.musbe.net');/** * The last error of an operation is alway put in this global var */global $gSwekeyLastError;$gSwekeyLastError = 0;global $gSwekeyLastResult;$gSwekeyLastResult = "<not set>";/** * Servers addresses * Use the  Swekey_SetXxxServer($server) functions to set them */global $gSwekeyCheckServer;if (! isset($gSwekeyCheckServer))    $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;global $gSwekeyRndTokenServer;if (! isset($gSwekeyRndTokenServer))    $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;global $gSwekeyStatusServer;if (! isset($gSwekeyStatusServer))    $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;global $gSwekeyCA;global $gSwekeyTokenCacheEnabled;if (! isset($gSwekeyTokenCacheEnabled))    $gSwekeyTokenCacheEnabled = true;/** *  Change the address of the Check server. *  If $server is empty the default value 'http://auth-check.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetCheckServer($server){    global $gSwekeyCheckServer;    if (empty($server))        $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;    else        $gSwekeyCheckServer = $server;}/** *  Change the address of the Random Token Generator server. *  If $server is empty the default value 'http://auth-rnd-gen.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetRndTokenServer($server){    global $gSwekeyRndTokenServer;    if (empty($server))        $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;    else        $gSwekeyRndTokenServer = $server;}/** *  Change the address of the Satus server. *  If $server is empty the default value 'http://auth-status.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetStatusServer($server){    global $gSwekeyStatusServer;    if (empty($server))        $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;    else        $gSwekeyStatusServer = $server;}/** *  Change the certificat file in case of the the severs use https instead of http * *  @param  cafile              The path of the crt file to use *  @access public */function Swekey_SetCAFile($cafile){    global $gSwekeyCA;       $gSwekeyCA = $cafile;}/** *  Enable or disable the random token caching *  Because everybody has full access to the cache file, it can be a DOS vulnerability *  So disable it if you are running in a non secure enviromnement * *  @param  $enable *  @access public */function Swekey_EnableTokenCache($enable){    global $gSwekeyTokenCacheEnabled;    $gSwekeyTokenCacheEnabled = ! empty($enable);}/** *  Return the last error. * *  @return                     The Last Error *  @access public */function Swekey_GetLastError(){    global $gSwekeyLastError;    return $gSwekeyLastError;}/** *  Return the last result. * *  @return                     The Last Error *  @access public */function Swekey_GetLastResult(){    global $gSwekeyLastResult;    return $gSwekeyLastResult;}/** *  Send a synchronous request to the  server. *  This function manages timeout then will not block if one of the server is down * *  @param  url                 The url to get *  @param  response_code       The response code *  @return                     The body of the response or "" in case of error *  @access private */function Swekey_HttpGet($url, &$response_code){    global $gSwekeyLastError;    $gSwekeyLastError = 0;    global $gSwekeyLastResult;    $gSwekeyLastResult = "<not set>";     // use curl if available    if (function_exists('curl_init')) {        $sess = curl_init($url);        if (substr($url, 0, 8) == "https://") {            global $gSwekeyCA;            if (! empty($gSwekeyCA)) {                if (file_exists($gSwekeyCA)) {                    if (! curl_setopt($sess, CURLOPT_CAINFO, $gSwekeyCA)) {                        error_log("SWEKEY_ERROR:Could not set CA file : ".curl_error($sess));                    } else {                        $caFileOk = true;                    }                } else {                    error_log("SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url");                }            }            curl_setopt($sess, CURLOPT_SSL_VERIFYHOST, '2');            curl_setopt($sess, CURLOPT_SSL_VERIFYPEER, '2');            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '20');            curl_setopt($sess, CURLOPT_TIMEOUT, '20');        } else {            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '3');            curl_setopt($sess, CURLOPT_TIMEOUT, '5');        }        curl_setopt($sess, CURLOPT_RETURNTRANSFER, '1');        $res=curl_exec($sess);        $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);        $curlerr = curl_error($sess);        curl_close($sess);        if ($response_code == 200) {            $gSwekeyLastResult = $res;            return $res;        }        if (! empty($response_code)) {            $gSwekeyLastError = $response_code;            error_log("SWEKEY_ERROR:Error $gSwekeyLastError ($curlerr) getting $url");            return "";        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error $curlerr getting $url");        return "";    }    // use pecl_http if available    if (class_exists('HttpRequest')) {        // retry if one of the server is down        for ($num=1; $num <= 3; $num++ ) {            $r = new HttpRequest($url);            $options = array('timeout' => '3');            if (substr($url, 0, 6) == "https:") {                $sslOptions = array();                $sslOptions['verifypeer'] = true;                $sslOptions['verifyhost'] = true;                $capath = __FILE__;                $name = strrchr($capath, '/');                // windows                if (empty($name)) {                    $name = strrchr($capath, '\\');                }                $capath = substr($capath, 0, strlen($capath) - strlen($name) + 1).'musbe-ca.crt';                if (! empty($gSwekeyCA)) {                    $sslOptions['cainfo'] = $gSwekeyCA;                }                $options['ssl'] = $sslOptions;            }            $r->setOptions($options); //           try            {               $reply = $r->send();               $res = $reply->getBody();               $info = $r->getResponseInfo();               $response_code = $info['response_code'];               if ($response_code != 200)               {                    $gSwekeyLastError = $response_code;                    error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);                    return "";               }               $gSwekeyLastResult = $res;               return $res;            } //           catch (HttpException $e) //           { //               error_log("SWEKEY_WARNING:HttpException ".$e." getting ".$url); //           }        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);        return "";    }       global $http_response_header;    $res = @file_get_contents($url);    $response_code = substr($http_response_header[0], 9, 3); //HTTP/1.0    if ($response_code == 200) {       $gSwekeyLastResult = $res;       return $res;    }    $gSwekeyLastError = $response_code;    error_log("SWEKEY_ERROR:Error ".$response_code." getting ".$url);    return "";}/** *  Get a Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  You should better use Swekey_GetFastRndToken() for performance *  @access public */function Swekey_GetRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/FULL-RND-TOKEN', $response_code);}/** *  Get a Half Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  Use this value if you want to make your own Swekey_GetFastRndToken() *  @access public */function Swekey_GetHalfRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/HALF-RND-TOKEN', $response_code);}/** *  Get a Half Random Token *  The RT is a 64 vhars hexadecimal value *  This function get a new random token and reuse it. *  Token are refetched from the server only once every 30 seconds. *  You should always use this function to get half random token. *  @access public */function Swekey_GetFastHalfRndToken(){    global $gSwekeyTokenCacheEnabled;    $res = "";    $cachefile = "";    // We check if we have a valid RT is the session    if (isset($_SESSION['rnd-token-date'])) {        if (time() - $_SESSION['rnd-token-date'] < 30) {             $res = $_SESSION['rnd-token'];        }    }    // If not we try to get it from a temp file (PHP >= 5.2.1 only)    if (strlen($res) != 32 && $gSwekeyTokenCacheEnabled) {        if (function_exists('sys_get_temp_dir')) {            $tempdir = sys_get_temp_dir();            $cachefile = $tempdir."/swekey-rnd-token-".get_current_user();            $modif = filemtime($cachefile);            if ($modif != false) {                if (time() - $modif < 30) {                    $res = @file_get_contents($cachefile);                    if (strlen($res) != 32) {                         $res = "";                    } else {                         $_SESSION['rnd-token'] = $res;                         $_SESSION['rnd-token-date'] = $modif;                    }                }            }        }    }    // If we don't have a valid RT here we have to get it from the server    if (strlen($res) != 32) {        $res = substr(Swekey_GetHalfRndToken(), 0, 32);        $_SESSION['rnd-token'] = $res;        $_SESSION['rnd-token-date'] = time();        if (! empty($cachefile)) {            // we unlink the file so no possible tempfile race attack            unlink($cachefile);            $file = fopen($cachefile, "x");            if ($file != false) {                @fwrite($file, $res);                @fclose($file);            }        }    }   return $res."00000000000000000000000000000000";}/** *  Get a Random Token *  The RT is a 64 vhars hexadecimal value *  This function generates a unique random token for each call but call the *  server only once every 30 seconds. *  You should always use this function to get random token. *  @access public */function Swekey_GetFastRndToken(){    $res = Swekey_GetFastHalfRndToken();    if (strlen($res) == 64)        return substr($res, 0, 32).strtoupper(md5("Musbe Authentication Key" + mt_rand() + date(DATE_ATOM)));    return "";}/** *  Checks that an OTP generated by a Swekey is valid * *  @param  id                  The id of the swekey *  @param rt                   The random token used to generate the otp *  @param otp                  The otp generated by the swekey *  @return                     true or false *  @access public */function Swekey_CheckOtp($id, $rt, $otp){    global $gSwekeyCheckServer;    $res = Swekey_HttpGet($gSwekeyCheckServer.'/CHECK-OTP/'.$id.'/'.$rt.'/'.$otp, $response_code);    return $response_code == 200 && $res == "OK";}/** * Values that are associated with a key. * The following values can be returned by the Swekey_GetStatus() function */define ("SWEKEY_STATUS_OK", 0);define ("SWEKEY_STATUS_NOT_FOUND", 1);  // The key does not exist in the dbdefine ("SWEKEY_STATUS_INACTIVE", 2);   // The key has never been activateddefine ("SWEKEY_STATUS_LOST", 3);       // The user has lost his keydefine ("SWEKEY_STATUS_STOLEN", 4);       // The key was stolendefine ("SWEKEY_STATUS_FEE_DUE", 5);       // The annual fee was not paiddefine ("SWEKEY_STATUS_OBSOLETE", 6);   // The hardware is no longer supporteddefine ("SWEKEY_STATUS_UNKOWN", 201);   // We could not connect to the authentication server/** * Values that are associated with a key. * The Javascript Api can also return the following values */define ("SWEKEY_STATUS_REPLACED", 100);     // This key has been replaced by a backup keydefine ("SWEKEY_STATUS_BACKUP_KEY", 101); // This key is a backup key that is not activated yetdefine ("SWEKEY_STATUS_NOTPLUGGED", 200); // This key is not plugged in the computer/** *  Return the text corresponding to the integer status of a key * *  @param  status              The status *  @return                     The text corresponding to the status *  @access public */function Swekey_GetStatusStr($status){    switch($status)    {       case SWEKEY_STATUS_OK            : return 'OK';       case SWEKEY_STATUS_NOT_FOUND        : return 'Key does not exist in the db';       case SWEKEY_STATUS_INACTIVE        : return 'Key not activated';       case SWEKEY_STATUS_LOST            : return 'Key was lost';       case SWEKEY_STATUS_STOLEN        : return 'Key was stolen';       case SWEKEY_STATUS_FEE_DUE        : return 'The annual fee was not paid';       case SWEKEY_STATUS_OBSOLETE        : return 'Key no longer supported';       case SWEKEY_STATUS_REPLACED        : return 'This key has been replaced by a backup key';       case SWEKEY_STATUS_BACKUP_KEY    : return 'This key is a backup key that is not activated yet';       case SWEKEY_STATUS_NOTPLUGGED    : return 'This key is not plugged in the computer';       case SWEKEY_STATUS_UNKOWN        : return 'Unknow Status, could not connect to the authentication server';    }    return 'unknown status '.$status;}/** *  If your web site requires a key to login you should check that the key *  is still valid (has not been lost or stolen) before requiring it. *  A key can be authenticated only if its status is SWEKEY_STATUS_OK *  @param  id                  The id of the swekey *  @return                     The status of the swekey *  @access public */function Swekey_GetStatus($id){    global $gSwekeyStatusServer;    $res = Swekey_HttpGet($gSwekeyStatusServer.'/GET-STATUS/'.$id, $response_code);    if ($response_code == 200)        return intval($res);    return SWEKEY_STATUS_UNKOWN;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam(true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions for kanji-encoding convert (available only with japanese * language) * * PHP4 configure requirements: *     --enable-mbstring --enable-mbstr-enc-trans --enable-mbregex * * 2002/2/22 - by Yukihiro Kawada <kawada@den.fujifilm.co.jp> * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets the php internal encoding codes and sets the available encoding * codes list * 2002/1/4 by Y.Kawada * * @global  string   the current encoding code * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_internal_enc_check(){    global $internal_enc, $enc_list;    $internal_enc = mb_internal_encoding();    if ($internal_enc == 'EUC-JP') {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    } else {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    }    return true;} // end of the 'PMA_internal_enc_check' function/** * Reverses SJIS & EUC-JP position in the encoding codes list * 2002/1/4 by Y.Kawada * * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_change_enc_order(){    global $enc_list;    $p            = explode(',', $enc_list);    if ($p[1] == 'EUC-JP') {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    } else {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    }    return true;} // end of the 'PMA_change_enc_order' function/** * Kanji string encoding convert * 2002/1/4 by Y.Kawada * * @param string   the string to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @global  string   the available encoding codes list * * @return  string   the converted string */function PMA_kanji_str_conv($str, $enc, $kana){    global $enc_list;    if ($enc == '' && $kana == '') {        return $str;    }    $nw       = mb_detect_encoding($str, $enc_list);    if ($kana == 'kana') {        $dist = mb_convert_kana($str, 'KV', $nw);        $str  = $dist;    }    if ($nw != $enc && $enc != '') {        $dist = mb_convert_encoding($str, $enc, $nw);    } else {        $dist = $str;    }    return $dist;} // end of the 'PMA_kanji_str_conv' function/** * Kanji file encoding convert * 2002/1/4 by Y.Kawada * * @param string   the name of the file to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @return  string   the name of the converted file */function PMA_kanji_file_conv($file, $enc, $kana){    if ($enc == '' && $kana == '') {        return $file;    }    $tmpfname = tempnam('', $enc);    $fpd      = fopen($tmpfname, 'wb');    $fps      = fopen($file, 'r');    PMA_change_enc_order();    while (!feof($fps)) {        $line = fgets($fps, 4096);        $dist = PMA_kanji_str_conv($line, $enc, $kana);        fputs($fpd, $dist);    } // end while    PMA_change_enc_order();    fclose($fps);    fclose($fpd);    unlink($file);    return $tmpfname;} // end of the 'PMA_kanji_file_conv' function/** * Defines radio form fields to switch between encoding modes * 2002/1/4 by Y.Kawada * * @param string   spaces character to prepend the output with * * @return  string   xhtml code for the radio controls */function PMA_set_enc_form($spaces){    return "\n"             /* l10n: This is currently used only in Japanese locales */           . $spaces . '<ul>' . "\n" . '<li>'           . $spaces . '<input type="radio" name="knjenc" value="" checked="checked" id="kj-none" /><label for="kj-none">' . _pgettext('None encoding conversion', 'None') . "</label>\n"           . $spaces . '<input type="radio" name="knjenc" value="EUC-JP" id="kj-euc" /><label for="kj-euc">EUC</label>' . "\n"           . $spaces . '<input type="radio" name="knjenc" value="SJIS" id="kj-sjis" /><label for="kj-sjis">SJIS</label>' . "\n"           . $spaces . '</li>' . "\n" . '<li>'           . $spaces . '<input type="checkbox" name="xkana" value="kana" id="kj-kana" />' . "\n"           /* l10n: This is currently used only in Japanese locales */           . $spaces . '<label for="kj-kana">' . __('Convert to Kana') . '</label><br />' . "\n"           . $spaces . '</li>' . "\n" . '</ul>'           ;} // end of the 'PMA_set_enc_form' functionPMA_internal_enc_check();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-StringType-Native *//** * Checks if a character is an alphanumeric one * * @param string   character to check for * @return  boolean  whether the character is an alphanumeric one or not */function PMA_STR_isAlnum($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c) || PMA_STR_isDigit($c));} // end of the "PMA_STR_isAlnum()" function/** * Checks if a character is an alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an alphabetic one or not */function PMA_STR_isAlpha($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c));} // end of the "PMA_STR_isAlpha()" function/** * Checks if a character is a digit * * @param string   character to check for * @return  boolean  whether the character is a digit or not */function PMA_STR_isDigit($c){    $ord_zero = 48; //ord('0');    $ord_nine = 57; //ord('9');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isDigit()" function/** * Checks if a character is an upper alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an upper alphabetic one or not */function PMA_STR_isUpper($c){    $ord_zero = 65; //ord('A');    $ord_nine = 90; //ord('Z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isUpper()" function/** * Checks if a character is a lower alphabetic one * * @param string   character to check for * @return  boolean  whether the character is a lower alphabetic one or not */function PMA_STR_isLower($c){    $ord_zero = 97;  //ord('a');    $ord_nine = 122; //ord('z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isLower()" function/** * Checks if a character is a space one * * @param string   character to check for * @return  boolean  whether the character is a space one or not */function PMA_STR_isSpace($c){    $ord_space = 32;    //ord(' ')    $ord_tab   = 9;     //ord('\t')    $ord_CR    = 13;    //ord('\n')    $ord_NOBR  = 160;   //ord('U+00A0);    $ord_c     = ord($c);    return ($ord_c == $ord_space         || $ord_c == $ord_NOBR         || PMA_STR_numberInRangeInclusive($ord_c, $ord_tab, $ord_CR));} // end of the "PMA_STR_isSpace()" function/** * Checks if a character is an hexadecimal digit * * @param string   character to check for * @return  boolean  whether the character is an hexadecimal digit or not */function PMA_STR_isHexDigit($c){    $ord_Aupper = 65;  //ord('A');    $ord_Fupper = 70;  //ord('F');    $ord_Alower = 97;  //ord('a');    $ord_Flower = 102; //ord('f');    $ord_zero   = 48;  //ord('0');    $ord_nine   = 57;  //ord('9');    $ord_c      = ord($c);    return (PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Aupper, $ord_Fupper)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Alower, $ord_Flower));} // end of the "PMA_STR_isHexDigit()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Gets the variables sent or posted to this script, then displays headers */$print_view = true;require_once './libraries/header.inc.php';PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'db_sql.php?' . PMA_generate_common_url($db);/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Gets the list of the table in the current db and informations about these * tables if possible * * @todo merge this speedup _optionaly_ into PMA_DBI_get_tables_full() *// speedup view on locked tables// Special speedup for newer MySQL Versions (in 4.0 format changed)if ($cfg['SkipLockedTables'] == true) {    $result = PMA_DBI_query('SHOW OPEN TABLES FROM ' . PMA_backquote($db) . ';');    // Blending out tables in use    if ($result != false && PMA_DBI_num_rows($result) > 0) {        while ($tmp = PMA_DBI_fetch_row($result)) {            // if in use memorize tablename            if (preg_match('@in_use=[1-9]+@i', $tmp[0])) {                $sot_cache[$tmp[0]] = true;            }        }        PMA_DBI_free_result($result);        if (isset($sot_cache)) {            $result      = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);            if ($result != false && PMA_DBI_num_rows($result) > 0) {                while ($tmp = PMA_DBI_fetch_row($result)) {                    if (! isset($sot_cache[$tmp[0]])) {                        $sts_result  = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($tmp[0], true) . '\';');                        $sts_tmp     = PMA_DBI_fetch_assoc($sts_result);                        $tables[]    = $sts_tmp;                    } else { // table in use                        $tables[]    = array('Name' => $tmp[0]);                    }                }                PMA_DBI_free_result($result);                $sot_ready = true;            }        }        unset($tmp, $result);    }}if (! isset($sot_ready)) {    $result      = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ';');    if (PMA_DBI_num_rows($result) > 0) {        while ($sts_tmp = PMA_DBI_fetch_assoc($result)) {            $tables[] = $sts_tmp;        }        PMA_DBI_free_result($result);        unset($res);    }} *//** * If there is at least one table, displays the printer friendly view, else * an error message */$tables = PMA_DBI_get_tables_full($db);$num_tables = count($tables);echo '<br />';// 1. No tableif ($num_tables == 0) {    echo __('No tables found in database.');} else {// 2. Shows table information    ?><table><thead><tr>    <th><?php echo __('Table'); ?></th>    <th><?php echo __('Rows'); ?></th>    <th><?php echo __('Type'); ?></th>    <?php    if ($cfg['ShowStats']) {        echo '<th>' . __('Size') . '</th>';    }    ?>    <th><?php echo __('Comments'); ?></th></tr></thead><tbody>    <?php    $sum_entries = $sum_size = 0;    $odd_row = true;    foreach ($tables as $sts_data) {        if (PMA_Table::isMerge($db, $sts_data['TABLE_NAME'])         || strtoupper($sts_data['ENGINE']) == 'FEDERATED') {            $merged_size = true;        } else {            $merged_size = false;        }        $sum_entries += $sts_data['TABLE_ROWS'];        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">    <th>        <?php echo htmlspecialchars($sts_data['TABLE_NAME']); ?>    </th>        <?php        if (isset($sts_data['TABLE_ROWS'])) {            ?>    <td align="right">            <?php            if ($merged_size) {                echo '<i>' . PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . '</i>' . "\n";            } else {                echo PMA_formatNumber($sts_data['TABLE_ROWS'], 0) . "\n";            }            ?>    </td>    <td nowrap="nowrap">        <?php echo $sts_data['ENGINE']; ?>    </td>            <?php            if ($cfg['ShowStats']) {                $tblsize =  $sts_data['Data_length'] + $sts_data['Index_length'];                $sum_size += $tblsize;                list($formated_size, $unit) =  PMA_formatByteDown($tblsize, 3, 1);                ?>    <td align="right" nowrap="nowrap">        <?php echo $formated_size . ' ' . $unit; ?>    </td>                <?php            } // end if        } else {            ?>    <td colspan="3" align="center">        <?php echo __('in use'); ?>    </td>            <?php        }        ?>    <td>        <?php        if (! empty($sts_data['Comment'])) {            echo htmlspecialchars($sts_data['Comment']);            $needs_break = '<br />';        } else {            $needs_break = '';        }        if (! empty($sts_data['Create_time'])         || ! empty($sts_data['Update_time'])         || ! empty($sts_data['Check_time'])) {            echo $needs_break;            ?>            <table width="100%">            <?php            if (! empty($sts_data['Create_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Creation') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Create_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Update_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last update') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Update_time'])); ?></td>                </tr>                <?php            }            if (! empty($sts_data['Check_time'])) {                ?>                <tr>                    <td align="right"><?php echo __('Last check') . ': '; ?></td>                    <td align="right"><?php echo PMA_localisedDate(strtotime($sts_data['Check_time'])); ?></td>                </tr>                <?php            }            ?>            </table>            <?php        }        ?>    </td></tr>        <?php    }    ?><tr>    <th align="center">        <?php echo sprintf(_ngettext('%s table', '%s tables', $num_tables), PMA_formatNumber($num_tables, 0)); ?>    </th>    <th align="right" nowrap="nowrap">        <?php echo PMA_formatNumber($sum_entries, 0); ?>    </th>    <th align="center">        --    </th>    <?php    if ($cfg['ShowStats']) {        list($sum_formated, $unit) = PMA_formatByteDown($sum_size, 3, 1);        ?>    <th align="right" nowrap="nowrap">        <?php echo $sum_formated . ' ' . $unit; ?>    </th>        <?php    }    ?>    <th></th></tr></tbody></table>    <?php}/** * Displays the footer */PMA_printButton();echo "<div id='PMA_disable_floating_menubar'></div>\n";require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Wrappers for Drizzle extension classes * * Drizzle extension exposes libdrizzle functions and requires user to have it in mind while using them. * This wrapper is not complete and hides a lot of original functionality, but allows for easy usage * of the drizzle PHP extension. * * @package PhpMyAdmin-DBI-Drizzle */// TODO: drizzle module segfaults while freeing resources, often. This allows at least for some developmentfunction _drizzle_shutdown_flush() {    flush();}register_shutdown_function('_drizzle_shutdown_flush');function _dlog_argstr($args){    $r = array();    foreach ($args as $arg) {        if (is_object($arg)) {            $r[] = get_class($arg);        } elseif (is_bool($arg)) {            $r[] = $arg ? 'true' : 'false';        } elseif (is_null($arg)) {            $r[] = 'null';        } else {            $r[] = $arg;        }    }    return implode(', ', $r);}function _dlog($end = false){    /*    static $fp = null;    if (!$fp) {        $fp = fopen('./drizzle_log.log', 'a');        flock($fp, LOCK_EX);        fwrite($fp, "\r\n[" . date('H:i:s') . "]\t" . $_SERVER['REQUEST_URI'] . "\r\n");        register_shutdown_function(function() use ($fp) {            fwrite($fp, '[' . date('H:i:s') . "]\tEND\r\n\r\n");        });    }    if ($end) {        fwrite($fp, '[' . date('H:i:s') . "]\tok\r\n");    } else {        $bt = debug_backtrace(true);        $caller = (isset($bt[1]['class']) ? $bt[1]['class'] . '::' : '') . $bt[1]['function'];        if ($bt[1]['function'] == '__call') {            $caller .= '^' . $bt[1]['args'][0];            $args = _dlog_argstr($bt[1]['args'][1]);        } else {            $args = _dlog_argstr($bt[1]['args']);        }        fwrite($fp, '[' . date('H:i:s') . "]\t" . $caller . "\t" . $args . "\r\n");        for ($i = 2; $i <= count($bt)-1; $i++) {            if (!isset($bt[$i])) {                break;            }            $caller = (isset($bt[$i]['class']) ? $bt[$i]['class'] . '::' : '') . $bt[$i]['function'];            $caller .= ' (' . $bt[$i]['file'] . ':' . $bt[$i]['line'] .  ')';            fwrite($fp, str_repeat(' ', 20) . $caller . "\r\n");        }    }    //*/}/** * Wrapper for Drizzle class */class PMA_Drizzle extends Drizzle{    /**     * Fetch mode: result rows contain column names     */    const FETCH_ASSOC = 1;    /**     * Fetch mode: result rows contain only numeric indices     */    const FETCH_NUM = 2;    /**     * Fetch mode: result rows have both column names and numeric indices     */    const FETCH_BOTH = 3;    /**     * Result buffering: entire result set is buffered upon execution     */    const BUFFER_RESULT = 1;    /**     * Result buffering: buffering occurs only on row level     */    const BUFFER_ROW = 2;    /**     * Constructor     */    public function __construct()    {_dlog();        parent::__construct();    }    /**     * Creates a new database conection using TCP     *     * @param $host     * @param $port     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addTcp($host, $port, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addTcp($host, $port, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }    /**     * Creates a new connection using unix domain socket     *      * @param $uds     * @param $user     * @param $password     * @param $db     * @param $options     * @return PMA_DrizzleCon     */    public function addUds($uds, $user, $password, $db, $options)    {_dlog();        $dcon = parent::addUds($uds, $user, $password, $db, $options);        return $dcon instanceof DrizzleCon            ? new PMA_DrizzleCon($dcon)            : $dcon;    }}/** * Wrapper around DrizzleCon class * * Its main task is to wrap results with PMA_DrizzleResult class */class PMA_DrizzleCon{    /**     * Instance of DrizzleCon class     * @var DrizzleCon     */    private $dcon;    /**     * Result of the most recent query     * @var PMA_DrizzleResult     */    private $lastResult;    /**     * Constructor     *     * @param DrizzleCon $dcon     */    public function __construct(DrizzleCon $dcon)    {_dlog();        $this->dcon = $dcon;    }    /**     * Executes given query. Opens database connection if not already done.     *     * @param string $query     * @param int    $bufferMode  PMA_Drizzle::BUFFER_RESULT, PMA_Drizzle::BUFFER_ROW     * @param int    $fetchMode   PMA_Drizzle::FETCH_ASSOC, PMA_Drizzle::FETCH_NUM or PMA_Drizzle::FETCH_BOTH     * @return PMA_DrizzleResult     */    public function query($query, $bufferMode = PMA_Drizzle::BUFFER_RESULT, $fetchMode = PMA_Drizzle::FETCH_ASSOC)    {_dlog();        $result = $this->dcon->query($query);        if ($result instanceof DrizzleResult) {    _dlog(true);            $this->lastResult = new PMA_DrizzleResult($result, $bufferMode, $fetchMode);            return $this->lastResult;        }        return $result;    }    /**     * Returns the number of rows affected by last query     *     * @return int|false     */    public function affectedRows()    {        return $this->lastResult            ? $this->lastResult->affectedRows()            : false;    }    /**     * Pass calls of undefined methods to DrizzleCon object     *      * @param $method     * @param $args     * @return mixed     */    public function __call($method, $args)    {_dlog();        return call_user_func_array(array($this->dcon, $method), $args);    }    /**     * Returns original Drizzle connection object     *     * @return DrizzleCon     */    public function getConnectionObject()    {_dlog();        return $this->dcon;    }}/** * Wrapper around DrizzleResult. Allows for reading result rows as an associative array * and hides complexity behind buffering. */class PMA_DrizzleResult{    /**     * Instamce of DrizzleResult class     * @var DrizzleResult     */    private $dresult;    /**     * Fetch mode     * @var int     */    private $fetchMode;    /**     * Buffering mode     * @var int     */    private $bufferMode;    /**     * Cached column data     * @var DrizzleColumn[]     */    private $columns = null;    /**     * Cached column names     * @var string[]     */    private $columnNames = null;    /**     * Constructor     *     * @param DrizzleResult $dresult     * @param int           $bufferMode     * @param int           $fetchMode     */    public function __construct(DrizzleResult $dresult, $bufferMode, $fetchMode)    {_dlog();        $this->dresult = $dresult;        $this->bufferMode = $bufferMode;        $this->fetchMode = $fetchMode;        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            $this->dresult->buffer();        }    }    /**     * Sets fetch mode     *     * @param int $fetchMode     */    public function setFetchMode($fetchMode)    {_dlog();        $this->fetchMode = $fetchMode;    }    /**     * Reads information about columns contained in current result set into {@see $columns} and {@see $columnNames} arrays     */    private function _readColumns()    {_dlog();        $this->columns = array();        $this->columnNames = array();        if ($this->bufferMode == PMA_Drizzle::BUFFER_RESULT) {            while (($column = $this->dresult->columnNext()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        } else {            while (($column = $this->dresult->columnRead()) !== null) {                $this->columns[] = $column;                $this->columnNames[] = $column->name();            }        }    }    /**     * Returns columns in current result     *     * @return DrizzleColumn[]     */    public function getColumns()    {_dlog();        if (!$this->columns) {            $this->_readColumns();        }        return $this->columns;    }    /**     * Returns number if columns in result     *     * @return int     */    public function numColumns()    {_dlog();        return $this->dresult->columnCount();    }    /**     * Transforms result row to conform to current fetch mode     *     * @param mixed &$row     * @param int   $fetchMode     */    private function _transformResultRow(&$row, $fetchMode)    {        if (!$row) {            return;        }        switch ($fetchMode) {            case PMA_Drizzle::FETCH_ASSOC:                $row = array_combine($this->columnNames, $row);                break;            case PMA_Drizzle::FETCH_BOTH:                $length = count($row);                for ($i = 0; $i < $length; $i++) {                    $row[$this->columnNames[$i]] = $row[$i];                }                break;            default:                break;        }    }    /**     * Fetches next for from this result set     *     * @param int $fetchMode  fetch mode to use, if none given the default one is used     * @return array|null     */    public function fetchRow($fetchMode = null)    {_dlog();        // read column names on first fetch, only buffered results allow for reading it later        if (!$this->columns) {            $this->_readColumns();        }        if ($fetchMode === null) {            $fetchMode = $this->fetchMode;        }        $row = null;        switch ($this->bufferMode) {            case PMA_Drizzle::BUFFER_RESULT:                $row = $this->dresult->rowNext();                break;            case PMA_Drizzle::BUFFER_ROW:                $row = $this->dresult->rowBuffer();                break;        }        $this->_transformResultRow($row, $fetchMode);        return $row;    }    /**     * Adjusts the result pointer to an arbitrary row in buffered result     *     * @param $row_index     * @return bool     */    public function seek($row_index)    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't seek in an unbuffered result set", E_USER_WARNING);            return false;        }        // rowSeek always returns NULL (drizzle extension v.0.5, API v.7)        if ($row_index >= 0 && $row_index < $this->dresult->rowCount()) {            $this->dresult->rowSeek($row_index);            return true;        }        return false;    }    /**     * Returns the number of rows in buffered result set     *     * @return int|false     */    public function numRows()    {_dlog();        if ($this->bufferMode != PMA_Drizzle::BUFFER_RESULT) {            trigger_error("Can't count rows in an unbuffered result set", E_USER_WARNING);            return false;        }        return $this->dresult->rowCount();    }    /**     * Returns the number of rows affected by query     *     * @return int|false     */    public function affectedRows()    {_dlog();        return $this->dresult->affectedRows();    }    /**     * Frees resources taken by this result     */    public function free()    {_dlog();        unset($this->columns);        unset($this->columnNames);        drizzle_result_free($this->dresult);        unset($this->dresult);    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * File for vendor customisation, you can change here paths or some behaviour, * which vendors such as Linux distibutions might want to change. * * For changing this file you should know what you are doing. For this reason * options here are not part of normal configuration. * * @package PhpMyAdmin *//** * Path to changelog file, can be gzip compressed. Useful when you want to * have documentation somewhere else, eg. /usr/share/doc. */define('CHANGELOG_FILE', './ChangeLog');/** * Path to license file. Useful when you want to have documentation somewhere * else, eg. /usr/share/doc. */define('LICENSE_FILE', './LICENSE');/** * Path to config file generated using setup script. */define('SETUP_CONFIG_FILE', './config/config.inc.php');/** * Whether setup requires writable directory where config * file will be generated. */define('SETUP_DIR_WRITABLE', true);/** * Directory where configuration files are stored. * It is not used directly in code, just a convenient * define used further in this file. */define('CONFIG_DIR', './');/** * Filename of a configuration file. */define('CONFIG_FILE', CONFIG_DIR . 'config.inc.php');/** * Filename of custom header file. */define('CUSTOM_HEADER_FILE', CONFIG_DIR . 'config.header.inc.php');/** * Filename of custom footer file. */define('CUSTOM_FOOTER_FILE', CONFIG_DIR . 'config.footer.inc.php');/** * Default value for check for version upgrades. */define('VERSION_CHECK_DEFAULT', true);/** * Path to gettext.inc file. Useful when you want php-gettext somewhere else, * eg. /usr/share/php/gettext/gettext.inc. */define('GETTEXT_INC', './libraries/php-gettext/gettext.inc');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library is used with the server IP allow/deny host authentication * feature * * @todo Broken for IPv6 * * @package PhpMyAdmin *//** * Gets the "true" IP address of the current user * * @return  string   the ip of the user * * @access  private */function PMA_getIp(){    /* Get the address of user */    if (!empty($_SERVER['REMOTE_ADDR'])) {        $direct_ip = $_SERVER['REMOTE_ADDR'];    } else {        /* We do not know remote IP */        return false;    }    /* Do we trust this IP as a proxy? If yes we will use it's header. */    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {        $trusted_header_value = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);        $matches = array();        // the $ checks that the header contains only one IP address, ?: makes sure the () don't capture        $is_ip = preg_match('|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|', $trusted_header_value, $matches);        if ($is_ip && (count($matches) == 1)) {            // True IP behind a proxy            return $matches[0];        }    }    /* Return true IP */    return $direct_ip;} // end of the 'PMA_getIp()' function/** * Based on IP Pattern Matcher * Originally by J.Adams <jna@retina.net> * Found on <http://www.php.net/manual/en/function.ip2long.php> * Modified for phpMyAdmin * * Matches: * xxx.xxx.xxx.xxx        (exact) * xxx.xxx.xxx.[yyy-zzz]  (range) * xxx.xxx.xxx.xxx/nn     (CIDR) * * Does not match: * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported) * * @param string   string of IP range to match * @param string   string of IP to test against range * * @return  boolean    always true * * @access  public */function PMA_ipMaskTest($testRange, $ipToTest){   $result = true;   if (preg_match('|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|', $testRange, $regs)) {       // performs a mask match       $ipl    = ip2long($ipToTest);       $rangel = ip2long($regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]);       $maskl  = 0;       for ($i = 0; $i < 31; $i++) {           if ($i < $regs[5] - 1) {               $maskl = $maskl + PMA_pow(2, (30 - $i));           } // end if       } // end for       if (($maskl & $rangel) == ($maskl & $ipl)) {           return true;       } else {           return false;       }   } else {       // range based       $maskocts = explode('.', $testRange);       $ipocts   = explode('.', $ipToTest);       // perform a range match       for ($i = 0; $i < 4; $i++) {            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {                if (($ipocts[$i] > $regs[2])                    || ($ipocts[$i] < $regs[1])) {                    $result = false;                } // end if            } else {                if ($maskocts[$i] <> $ipocts[$i]) {                    $result = false;                } // end if            } // end if/else       } //end for   } //end if/else   return $result;} // end of the "PMA_IPMaskTest()" function/** * Runs through IP Allow/Deny rules the use of it below for more information * * @param string 'allow' | 'deny' type of rule to match * * @return  bool   Matched a rule ? * * @access  public * * @see     PMA_getIp() */function PMA_allowDeny($type){    global $cfg;    // Grabs true IP of the user and returns if it can't be found    $remote_ip = PMA_getIp();    if (empty($remote_ip)) {        return false;    }    // copy username    $username  = $cfg['Server']['user'];    // copy rule database    $rules     = $cfg['Server']['AllowDeny']['rules'];    // lookup table for some name shortcuts    $shortcuts = array(        'all'       => '0.0.0.0/0',        'localhost' => '127.0.0.1/8'    );    // Provide some useful shortcuts if server gives us address:    if (PMA_getenv('SERVER_ADDR')) {        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';    }    foreach ($rules as $rule) {        // extract rule data        $rule_data = explode(' ', $rule);        // check for rule type        if ($rule_data[0] != $type) {            continue;        }        // check for username        if (($rule_data[1] != '%') //wildcarded first            && ($rule_data[1] != $username)) {            continue;        }        // check if the config file has the full string with an extra        // 'from' in it and if it does, just discard it        if ($rule_data[2] == 'from') {            $rule_data[2] = $rule_data[3];        }        // Handle shortcuts with above array        if (isset($shortcuts[$rule_data[2]])) {            $rule_data[2] = $shortcuts[$rule_data[2]];        }        // Add code for host lookups here        // Excluded for the moment        // Do the actual matching now        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {            return true;        }    } // end while    return false;} // end of the "PMA_AllowDeny()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for generating lists of Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Creates a list of items containing the relevant * information and some action links. * * @param    string   $type    One of ['routine'|'trigger'|'event'] * @param    array    $items   An array of items * * @return   string   HTML code of the list of items */function PMA_RTE_getList($type, $items){    global $table;    /**     * Conditional classes switch the list on or off     */    $class1 = 'hide';    $class2 = '';    if (! $items) {        $class1 = '';        $class2 = ' hide';    }    /**     * Generate output     */    $retval  = "<!-- LIST OF " . PMA_RTE_getWord('docu') . " START -->\n";    $retval .= "<fieldset>\n";    $retval .= "    <legend>\n";    $retval .= "        " . PMA_RTE_getWord('title') . "\n";    $retval .= "        " . PMA_showMySQLDocu('SQL-Syntax', PMA_RTE_getWord('docu')) . "\n";    $retval .= "    </legend>\n";    $retval .= "    <div class='$class1' id='nothing2display'>\n";    $retval .= "      " . PMA_RTE_getWord('nothing') . "\n";    $retval .= "    </div>\n";    $retval .= "    <table class='data$class2'>\n";    $retval .= "        <!-- TABLE HEADERS -->\n";    $retval .= "        <tr>\n";    switch ($type) {    case 'routine':        $retval .= "            <th>" . __('Name') . "</th>\n";        $retval .= "            <th colspan='4'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Type') . "</th>\n";        $retval .= "            <th>" . __('Returns') . "</th>\n";        break;    case 'trigger':        $retval .= "            <th>" . __('Name') . "</th>\n";        if (empty($table)) {            $retval .= "            <th>" . __('Table') . "</th>\n";        }        $retval .= "            <th colspan='3'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Time') . "</th>\n";        $retval .= "            <th>" . __('Event') . "</th>\n";        break;    case 'event':        $retval .= "            <th>" . __('Name') . "</th>\n";        $retval .= "            <th>" . __('Status') . "</th>\n";        $retval .= "            <th colspan='3'>" . __('Action') . "</th>\n";        $retval .= "            <th>" . __('Type') . "</th>\n";        break;    default:        break;    }    $retval .= "        </tr>\n";    $retval .= "        <!-- TABLE DATA -->\n";    $ct = 0;    foreach ($items as $item) {        $rowclass = ($ct % 2 == 0) ? 'odd' : 'even';        if ($GLOBALS['is_ajax_request']) {            $rowclass .= ' ajaxInsert hide';        }        // Get each row from the correct function        switch ($type) {        case 'routine':            $retval .= PMA_RTN_getRowForList($item, $rowclass);            break;        case 'trigger':            $retval .= PMA_TRI_getRowForList($item, $rowclass);            break;        case 'event':            $retval .= PMA_EVN_getRowForList($item, $rowclass);            break;        default:            break;        }        $ct++;    }    $retval .= "    </table>\n";    $retval .= "</fieldset>\n";    $retval .= "<!-- LIST OF " . PMA_RTE_getWord('docu') . " END -->\n";    return $retval;} // end PMA_RTE_getList()/** * Creates the contents for a row in the list of routines * * @param    array    $routine    An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a row for the list of routines */function PMA_RTN_getRowForList($routine, $rowclass = ''){    global $ajax_class, $url_query, $db, $titles;    $sql_drop = sprintf('DROP %s IF EXISTS %s',                         $routine['ROUTINE_TYPE'],                         PMA_backquote($routine['SPECIFIC_NAME']));    $type_link = "item_type={$routine['ROUTINE_TYPE']}";    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>$sql_drop</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($routine['SPECIFIC_NAME']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if ($routine['ROUTINE_DEFINITION'] !== null        && PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)        && PMA_currentUserHasPrivilege('CREATE ROUTINE', $db)    ) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_routines.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                         . '&amp;' . $type_link                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if ($routine['ROUTINE_DEFINITION'] !== null        && PMA_currentUserHasPrivilege('EXECUTE', $db)    ) {        // Check if he routine has any input parameters. If it does,        // we will show a dialog to get values for these parameters,        // otherwise we can execute it directly.        $routine_details = PMA_RTN_getDataFromName(            $routine['SPECIFIC_NAME'],            $routine['ROUTINE_TYPE'],            false        );        if ($routine !== false) {            $execute_action = 'execute_routine';            for ($i=0; $i<$routine_details['item_num_params']; $i++) {                if ($routine_details['item_type'] == 'PROCEDURE'                    && $routine_details['item_param_dir'][$i] == 'OUT'                ) {                    continue;                }                $execute_action = 'execute_dialog';                break;            }            $retval .= '                <a ' . $ajax_class['exec']                                             . ' href="db_routines.php?'                                             . $url_query                                             . '&amp;' . $execute_action . '=1'                                             . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                             . '&amp;' . $type_link                                             . '">' . $titles['Execute'] . "</a>\n";        }    } else {        $retval .= "                {$titles['NoExecute']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                <a ' . $ajax_class['export']                                     . ' href="db_routines.php?'                                     . $url_query                                     . '&amp;export_item=1'                                     . '&amp;item_name=' . urlencode($routine['SPECIFIC_NAME'])                                     . '&amp;' . $type_link                                     . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('ALTER ROUTINE', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($sql_drop)                                         . '&amp;goto=db_routines.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$routine['ROUTINE_TYPE']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                " . htmlspecialchars($routine['DTD_IDENTIFIER']) . "\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getRowForList()/** * Creates the contents for a row in the list of triggers * * @param    array    $trigger    An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a cell for the list of triggers */function PMA_TRI_getRowForList($trigger, $rowclass = ''){    global $ajax_class, $url_query, $db, $table, $titles;    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>{$trigger['drop']}</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($trigger['name']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    if (empty($table)) {        $retval .= "            <td>\n";        $retval .= "                <a href='db_triggers.php?db={$db}"                                     . "&amp;table={$trigger['table']}'>"                                     . $trigger['table'] . "</a>\n";        $retval .= "            </td>\n";    }    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table)) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_triggers.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($trigger['name'])                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                    <a ' . $ajax_class['export']                                         . ' href="db_triggers.php?'                                         . $url_query                                         . '&amp;export_item=1'                                         . '&amp;item_name=' . urlencode($trigger['name'])                                         . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('TRIGGER', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($trigger['drop'])                                         . '&amp;goto=db_triggers.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$trigger['action_timing']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$trigger['event_manipulation']}\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_TRI_getRowForList()/** * Creates the contents for a row in the list of events * * @param    array    $event      An array of routine data * @param    string   $rowclass   Empty or one of ['even'|'odd'] * * @return   string   HTML code of a cell for the list of events */function PMA_EVN_getRowForList($event, $rowclass = ''){    global $ajax_class, $url_query, $db, $titles;    $sql_drop = sprintf(        'DROP EVENT IF EXISTS %s',        PMA_backquote($event['EVENT_NAME'])    );    $retval  = "        <tr class='noclick $rowclass'>\n";    $retval .= "            <td>\n";    $retval .= "                <span class='drop_sql hide'>$sql_drop</span>\n";    $retval .= "                <strong>\n";    $retval .= "                    " . htmlspecialchars($event['EVENT_NAME']) . "\n";    $retval .= "                </strong>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$event['STATUS']}\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('EVENT', $db)) {        $retval .= '                <a ' . $ajax_class['edit']                                         . ' href="db_events.php?'                                         . $url_query                                         . '&amp;edit_item=1'                                         . '&amp;item_name=' . urlencode($event['EVENT_NAME'])                                         . '">' . $titles['Edit'] . "</a>\n";    } else {        $retval .= "                {$titles['NoEdit']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= '                <a ' . $ajax_class['export']                                     . ' href="db_events.php?'                                     . $url_query                                     . '&amp;export_item=1'                                     . '&amp;item_name=' . urlencode($event['EVENT_NAME'])                                     . '">' . $titles['Export'] . "</a>\n";    $retval .= "            </td>\n";    $retval .= "            <td>\n";    if (PMA_currentUserHasPrivilege('EVENT', $db)) {        $retval .= '                <a ' . $ajax_class['drop']                                         . ' href="sql.php?'                                         . $url_query                                         . '&amp;sql_query=' . urlencode($sql_drop)                                         . '&amp;goto=db_events.php' . urlencode("?db={$db}")                                         . '" >' . $titles['Drop'] . "</a>\n";    } else {        $retval .= "                {$titles['NoDrop']}\n";    }    $retval .= "            </td>\n";    $retval .= "            <td>\n";    $retval .= "                 {$event['EVENT_TYPE']}\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_EVN_getRowForList()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . '    ' . ($GLOBALS['cfg']['MainPageIconic']    ? PMA_getImage('s_asci.png')    : '')   . '' . __('Character Sets and Collations') . "\n"   . '</h2>' . "\n";/** * Includes the required charset library */require_once './libraries/mysql_charsets.lib.php';/** * Outputs the result */echo '<div id="div_mysql_charset_collations">' . "\n"   . '<table class="data noclick">' . "\n"   . '<tr><th>' . __('Collation') . '</th>' . "\n"   . '    <th>' . __('Description') . '</th>' . "\n"   . '</tr>' . "\n";$i = 0;$table_row_count = count($mysql_charsets) + count($mysql_collations);foreach ($mysql_charsets as $current_charset) {    if ($i >= $table_row_count / 2) {        $i = 0;        echo '</table>' . "\n"           . '<table class="data noclick">' . "\n"           . '<tr><th>' . __('Collation') . '</th>' . "\n"           . '    <th>' . __('Description') . '</th>' . "\n"           . '</tr>' . "\n";    }    $i++;    echo '<tr><th colspan="2" align="right">' . "\n"       . '        ' . htmlspecialchars($current_charset) . "\n"       . (empty($mysql_charsets_descriptions[$current_charset])            ? ''            : '        (<i>' . htmlspecialchars(                $mysql_charsets_descriptions[$current_charset]) . '</i>)' . "\n")       . '    </th>' . "\n"       . '</tr>' . "\n";    $odd_row = true;    foreach ($mysql_collations[$current_charset] as $current_collation) {        $i++;        echo '<tr class="'           . ($odd_row ? 'odd' : 'even')           . ($mysql_default_collations[$current_charset] == $current_collation                ? ' marked'                : '')           . ($mysql_collations_available[$current_collation] ? '' : ' disabled')           . '">' . "\n"           . '    <td>' . htmlspecialchars($current_collation) . '</td>' . "\n"           . '    <td>' . PMA_getCollationDescr($current_collation) . '</td>' . "\n"           . '</tr>' . "\n";        $odd_row = !$odd_row;    }}unset($table_row_count);echo '</table>' . "\n"   . '</div>' . "\n";require './libraries/footer.inc.php';?>
<?php/** * Base class for the plot data type classes. * * @package PhpMyAdmin */abstract class PMA_SVG_Data_Element{    protected $label = '';    protected $dataRow = array();    /**     * Store user specified label and dataRow     * @param string $label users specified label     * @param array $dataRow A data row from the query result     */    function __construct($label,$dataRow)    {        $this->label = $label;        $this->dataRow = $dataRow;    }    /**     * Handles the generation of each Data Row/Element as a SVG element     * @return the code related to a row in the GIS dataset     */    public abstract function prepareRowAsSVG($options);    public function getLabel()    {        return $this->label;    }    public function setLabel($label)    {        $this->label = $label;    }    public function getDataRow()    {        return $this->dataRow;    }    public function setDataRow($dataRow)    {        $this->dataRow = $dataRow;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();// handle form processing$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$form_display = new FormDisplay();foreach ($forms[$form_param] as $form_name => $form) {    // skip Developer form if no setting is available    if ($form_name == 'Developer' && !$GLOBALS['cfg']['UserprefsDeveloperTab']) {        continue;    }    $form_display->registerForm($form_name, $form, 1);}if (isset($_POST['revert'])) {    // revert erroneous fields to their default values    $form_display->fixErrors();    // redirect    $url_params = array('form' => $form_param);    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'prefs_forms.php'            . PMA_generate_common_url($url_params, '&'));    exit;}$error = null;if ($form_display->process(false) && !$form_display->hasErrors()) {    // save settings    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());    if ($result === true) {        // reload config        $GLOBALS['PMA_Config']->loadUserPreferences();        $hash = ltrim(filter_input(INPUT_POST, 'tab_hash'), '#');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_forms.php', array(            'form' => $form_param), $hash);        exit;    } else {        $error = $result;    }}// display forms$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    $error->display();}if ($form_display->hasErrors()) {    // form has errors    ?>    <div class="error config-form">        <b><?php echo __('Cannot save settings, submitted form contains errors') ?></b>        <?php $form_display->displayErrors(); ?>    </div>    <?php}$form_display->display(true, true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY      = 'noplugin';/** * Returns upload status. * * This is implementation when no webserver support exists, so it returns just zeroes. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This file generates the CSS code for the sprites of a theme * * @package PhpMyAdmin-theme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}$bg = $_SESSION['PMA_Theme']->getImgPath() . 'sprites.png';?>/* Icon sprites */.icon, .footnotemarker {    margin:              0 0.3em;    padding:             0 !important;    width:               16px;    height:              16px;    background-image:    url('<?php echo $bg; ?>') !important;    background-repeat:   no-repeat !important;    background-position: top left !important;}<?php    /* Check if there is a valid data file for sprites */    if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {        include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';        $sprites = array();        if (function_exists('PMA_sprites')) {            $sprites = PMA_sprites();        }        $template = ".ic_%s { background-position: 0 -%upx !important;%s%s }\n";        foreach ($sprites as $name => $data) {            // generate the CSS code for each icon            $width = '';            $height = '';            // if either the height or width of an icon is 16px,            // then it's pointless to set this as a parameter,            //since it will be inherited from the "icon" class            if ($data['width'] != 16) {                $width = " width: " . $data['width'] . "px;";            }            if ($data['height'] != 16) {                $height = " height: " . $data['height'] . "px;";            }            printf(                $template,                $name,                ($data['position'] * 16),                $width,                $height            );        }        // Here we map some of the classes that we        // defined above to other CSS selectors.        // The indexes of the array correspond to        // already defined classes and the values        // are the selectors that we want to map to.        $elements = array(            's_sortable' => 'img.sortableIcon',            's_asc'      => 'th.headerSortUp img.sortableIcon',            's_desc'     => 'th.headerSortDown img.sortableIcon'        );        $template = "%s { background-position: 0 -%upx; "                  . "height: %upx; width: %upx; }\n";        foreach ($elements as $key => $value) {            if (isset($sprites[$key])) { // If the CSS class has been defined                printf(                    $template,                    $value,                    ($sprites[$key]['position'] * 16),                    $sprites[$key]['height'],                    $sprites[$key]['width']                );            }        }    }?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_innodb extends PMA_StorageEngine{    /**     * @return  array     */    function getVariables()    {        return array(            'innodb_data_home_dir' => array(                'title' => __('Data home directory'),                'desc'  => __('The common part of the directory path for all InnoDB data files.'),            ),            'innodb_data_file_path' => array(                'title' => __('Data files'),            ),            'innodb_autoextend_increment' => array(                'title' => __('Autoextend increment'),                'desc'  => __('The increment size for extending the size of an autoextending tablespace when it becomes full.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_buffer_pool_size' => array(                'title' => __('Buffer pool size'),                'desc'  => __('The size of the memory buffer InnoDB uses to cache data and indexes of its tables.'),                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_additional_mem_pool_size' => array(                'title' => 'innodb_additional_mem_pool_size',                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_buffer_pool_awe_mem_mb' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_checksums' => array(            ),            'innodb_commit_concurrency' => array(            ),            'innodb_concurrency_tickets' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_doublewrite' => array(            ),            'innodb_fast_shutdown' => array(            ),            'innodb_file_io_threads' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_file_per_table' => array(            ),            'innodb_flush_log_at_trx_commit' => array(            ),            'innodb_flush_method' => array(            ),            'innodb_force_recovery' => array(            ),            'innodb_lock_wait_timeout' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_locks_unsafe_for_binlog' => array(            ),            'innodb_log_arch_dir' => array(            ),            'innodb_log_archive' => array(            ),            'innodb_log_buffer_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_file_size' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_SIZE,            ),            'innodb_log_files_in_group' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_log_group_home_dir' => array(            ),            'innodb_max_dirty_pages_pct' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_max_purge_lag' => array(            ),            'innodb_mirrored_log_groups' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_open_files' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_support_xa' => array(            ),            'innodb_sync_spin_loops' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_table_locks' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_BOOLEAN,            ),            'innodb_thread_concurrency' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),            'innodb_thread_sleep_delay' => array(                'type'  => PMA_ENGINE_DETAILS_TYPE_NUMERIC,            ),         );    }    /**     * @return  string  SQL query LIKE pattern     */    function getVariablesLikePattern()    {        return 'innodb\\_%';    }    /**     * @return  array   detail pages     */    function getInfoPages()    {        if ($this->support < PMA_ENGINE_SUPPORT_YES) {            return array();        }        $pages = array();        $pages['Bufferpool'] = __('Buffer Pool');        $pages['Status'] = __('InnoDB Status');        return $pages;    }    /**     * returns html tables with stats over inno db buffer pool     *     * @return  string  html table with stats     */    function getPageBufferpool()    {        // The following query is only possible because we know        // that we are on MySQL 5 here (checked above)!        // side note: I love MySQL 5 for this. :-)        $sql = '             SHOW STATUS            WHERE Variable_name LIKE \'Innodb\\_buffer\\_pool\\_%\'               OR Variable_name = \'Innodb_page_size\';';        $status = PMA_DBI_fetch_result($sql, 0, 1);        $output = '<table class="data" id="table_innodb_bufferpool_usage">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Usage') . "\n"                . '    </caption>' . "\n"                . '    <tfoot>' . "\n"                . '        <tr>' . "\n"                . '            <th colspan="2">' . "\n"                . '                ' . __('Total') . "\n"                . '                : ' . PMA_formatNumber(                        $status['Innodb_buffer_pool_pages_total'], 0)                . '&nbsp;' . __('pages')                . ' / '                . join('&nbsp;',                    PMA_formatByteDown($status['Innodb_buffer_pool_pages_total'] * $status['Innodb_page_size'])) . "\n"                . '            </th>' . "\n"                . '        </tr>' . "\n"                . '    </tfoot>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Free pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_free'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Dirty pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_dirty'], 0)                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Pages containing data') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_data'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Pages to be flushed') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_flushed'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Busy pages') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_misc'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>';            // not present at least since MySQL 5.1.40            if (isset($status['Innodb_buffer_pool_pages_latched'])) {                $output .= '        <tr class="even">'                . '            <th>' . __('Latched pages') . '</th>'                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_pages_latched'], 0)                . '</td>'                . '        </tr>';            }            $output .= '    </tbody>' . "\n"                . '</table>' . "\n\n"                . '<table class="data" id="table_innodb_bufferpool_activity">' . "\n"                . '    <caption class="tblHeaders">' . "\n"                . '        ' . __('Buffer Pool Activity') . "\n"                . '    </caption>' . "\n"                . '    <tbody>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_read_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write requests') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_write_requests'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_reads'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits') . '</th>' . "\n"                . '            <td class="value">'                . PMA_formatNumber($status['Innodb_buffer_pool_wait_free'], 0) . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="odd">' . "\n"                . '            <th>' . __('Read misses in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_read_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_reads'] * 100 / $status['Innodb_buffer_pool_read_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '        <tr class="even">' . "\n"                . '            <th>' . __('Write waits in %') . '</th>' . "\n"                . '            <td class="value">'                . ($status['Innodb_buffer_pool_write_requests'] == 0                    ? '---'                    : htmlspecialchars(PMA_formatNumber($status['Innodb_buffer_pool_wait_free'] * 100 / $status['Innodb_buffer_pool_write_requests'], 3, 2)) . ' %') . "\n"                . '</td>' . "\n"                . '        </tr>' . "\n"                . '    </tbody>' . "\n"                . '</table>' . "\n";        return $output;    }    /**     * returns InnoDB status     *     * @return  string  result of SHOW INNODB STATUS inside pre tags     */    function getPageStatus()    {        return '<pre id="pre_innodb_status">' . "\n"            . htmlspecialchars(PMA_DBI_fetch_value('SHOW INNODB STATUS;', 0, 'Status')) . "\n"            . '</pre>' . "\n";    }    /**     * returns content for page $id     *     * @param   string  $id page id     * @return  string  html output     */    function getPage($id)    {        if (! array_key_exists($id, $this->getInfoPages())) {            return false;        }        $id = 'getPage' . $id;        return $this->$id();    }    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'innodb';    }    /**     *       * Gets the InnoDB plugin version number      * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the version number, or empty if not running as a plugin      */    function getInnodbPluginVersion()    {        return PMA_DBI_fetch_value('SELECT @@innodb_version;');    }    /**     *       * Gets the InnoDB file format      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return string the InnoDB file format      */    function getInnodbFileFormat()    {        return PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_format';", 0, 1);    }    /**     *       * Verifies if this server supports the innodb_file_per_table feature      * (works only for the InnoDB plugin)     * http://www.innodb.com/products/innodb_plugin      * (do not confuse this with phpMyAdmin's storage engine plugins!)     *     * @return boolean whether this feature is supported or not      */    function supportsFilePerTable()    {        $innodb_file_per_table = PMA_DBI_fetch_value("SHOW GLOBAL VARIABLES LIKE 'innodb_file_per_table';", 0, 1);        if ($innodb_file_per_table == 'ON') {            return true;        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';require './libraries/server_common.inc.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';} else {    $replication_types = array();    $replication_info = null;}require './libraries/build_html_for_db.lib.php';/** * avoids 'undefined index' errors */if (empty($_REQUEST['sort_by'])) {    $sort_by = 'SCHEMA_NAME';} else {    $sort_by_whitelist = array(        'SCHEMA_NAME',        'DEFAULT_COLLATION_NAME',        'SCHEMA_TABLES',        'SCHEMA_TABLE_ROWS',        'SCHEMA_DATA_LENGTH',        'SCHEMA_INDEX_LENGTH',        'SCHEMA_LENGTH',        'SCHEMA_DATA_FREE'    );    if (in_array($_REQUEST['sort_by'], $sort_by_whitelist)) {        $sort_by = $_REQUEST['sort_by'];    } else {        $sort_by = 'SCHEMA_NAME';    }}if (isset($_REQUEST['sort_order']) && strtolower($_REQUEST['sort_order']) == 'desc') {    $sort_order = 'desc';} else {    $sort_order = 'asc';}$dbstats    = empty($_REQUEST['dbstats']) ? 0 : 1;$pos        = empty($_REQUEST['pos']) ? 0 : (int) $_REQUEST['pos'];/** * Drops multiple databases */// workaround for IE behavior (it returns some coordinates based on where// the mouse was on the Drop image):if (isset($_REQUEST['drop_selected_dbs_x'])) {    $_REQUEST['drop_selected_dbs'] = true;}if ((isset($_REQUEST['drop_selected_dbs']) || isset($_REQUEST['query_type']))  && ($is_superuser || $cfg['AllowUserDropDatabase'])) {    if (! isset($_REQUEST['selected_dbs']) && ! isset($_REQUEST['query_type'])) {        $message = PMA_Message::error(__('No databases selected.'));    } else {        $action = 'server_databases.php';        $submit_mult = 'drop_db' ;        $err_url = 'server_databases.php?' . PMA_generate_common_url();        if (isset($_REQUEST['selected_dbs'])) {            $selected_db = $_REQUEST['selected_dbs'];        }        include './libraries/mult_submits.inc.php';        unset($action, $submit_mult, $err_url, $selected_db, $GLOBALS['db']);        if (empty($message)) {            $message = PMA_Message::success(__('%s databases have been dropped successfully.'));            if ($mult_btn == __('Yes')) {                $message->addParam(count($selected));            } else {                $message->addParam(0);            }        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']      ? PMA_getImage('s_db.png')      : '')   . ($dbstats ? __('Databases statistics') : __('Databases')) . "\n"   .'</h2>' . "\n";/** * Create database. */if ($cfg['ShowCreateDb']) {    echo '<ul><li id="li_create_database">' . "\n";    include './libraries/display_create_database.lib.php';    echo '    </li>' . "\n";    echo '</ul>' . "\n";}/** * Gets the databases list */if ($server > 0) {    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,        $sort_order, $pos, true);    $databases_count = count($GLOBALS['pma']->databases);} else {    $databases_count = 0;}/** * Displays the page */if ($databases_count > 0) {    echo '<div id="tableslistcontainer">';    reset($databases);    $first_database = current($databases);    // table col order    $column_order = PMA_getColumnOrder();    $_url_params = array(        'pos' => $pos,        'dbstats' => $dbstats,        'sort_by' => $sort_by,        'sort_order' => $sort_order,    );    PMA_listNavigator($databases_count, $pos, $_url_params, 'server_databases.php', 'frame_content', $GLOBALS['cfg']['MaxDbList']);    $_url_params['pos'] = $pos;    echo '<form action="./server_databases.php" method="post" name="dbStatsForm" id="dbStatsForm">' . "\n"       . PMA_generate_common_hidden_inputs($_url_params);    $_url_params['sort_by'] = 'SCHEMA_NAME';    $_url_params['sort_order'] = ($sort_by == 'SCHEMA_NAME' && $sort_order == 'asc') ? 'desc' : 'asc';    echo '<table id="tabledatabases" class="data">' . "\n"       . '<thead>' . "\n"       . '<tr>' . "\n"       . ($is_superuser || $cfg['AllowUserDropDatabase'] ? '        <th></th>' . "\n" : '')       . '    <th><a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"       . '            ' . __('Database') . "\n"       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')       . '        </a></th>' . "\n";    $table_columns = 3;    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                $table_columns += 2;                $colspan = ' colspan="2"';            } else {                $table_columns++;                $colspan = '';            }            $_url_params['sort_by'] = $stat_name;            $_url_params['sort_order'] = ($sort_by == $stat_name && $sort_order == 'desc') ? 'asc' : 'desc';            echo '    <th' . $colspan . '>'                .'<a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"                .'            ' . $stat['disp_name'] . "\n"                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')                .'        </a></th>' . "\n";        }    }    foreach ($replication_types as $type) {      if ($type=="master")        $name = __('Master replication');      elseif ($type == "slave")        $name = __('Slave replication');      if (${"server_{$type}_status"})        echo '    <th>'. $name .'</th>' . "\n";    }    if ($is_superuser && !PMA_DRIZZLE) {        echo '    <th>' . ($cfg['PropertiesIconic'] ? '' : __('Action')) . "\n"           . '    </th>' . "\n";    }    echo '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    foreach ($databases as $current) {        $tr_class = $odd_row ? 'odd' : 'even';        if (PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $tr_class .= ' noclick';        }        echo '<tr class="' . $tr_class . '">' . "\n";        $odd_row = ! $odd_row;        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        echo $generated_html;        echo '</tr>' . "\n";    } // end foreach ($databases as $key => $current)    unset($current, $odd_row);    echo '<tr id="db_summary_row">' . "\n";    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        echo '    <th></th>' . "\n";    }    echo '    <th>' . __('Total') . ': <span id="databases_count">' . $databases_count . '</span></th>' . "\n";    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($stat['footer'], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($stat['footer'], 0);            } else {                $value = htmlentities($stat['footer'], 0);            }            echo '    <th class="value">';            if (isset($stat['description_function'])) {                echo '<dfn title="' . $stat['description_function']($stat['footer']) . '">';            }            echo $value;            if (isset($stat['description_function'])) {                echo '</dfn>';            }            echo '</th>' . "\n";            if ($stat['format'] === 'byte') {                echo '    <th class="unit">' . $unit . '</th>' . "\n";            }        }    }    foreach ($replication_types as $type) {        if (${"server_{$type}_status"}) {            echo '    <th></th>' . "\n";        }    }    if ($is_superuser) {        echo '    <th></th>' . "\n";    }    echo '</tr>' . "\n";    echo '</tbody>' . "\n"        .'</table>' . "\n";    unset($column_order, $stat_name, $stat, $databases, $table_columns);    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        $common_url_query = PMA_generate_common_url(array('sort_by' => $sort_by, 'sort_order' => $sort_order, 'dbstats' => $dbstats));        echo '<img class="selectallarrow" src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png" width="38" height="22" alt="' . __('With selected:') . '" />' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '&amp;checkall=1" onclick="if (markAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Check All') . '</a> / ' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '" onclick="if (unMarkAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Uncheck All') . '</a>' . "\n"           . '<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage('drop_selected_dbs', 'mult_submit', 'drop_selected_dbs', __('Drop'), 'b_deltbl.png');    }    if (empty($dbstats)) {        echo '<ul><li id="li_switch_dbstats"><strong>' . "\n";            echo '        <a href="./server_databases.php?' . $url_query . '&amp;dbstats=1"'                .' title="' . __('Enable Statistics') . '">' . "\n"                .'            ' . __('Enable Statistics');        echo '</a></strong><br />' . "\n";        PMA_Message::notice(__('Note: Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server.'))->display();        echo '</li>' . "\n" . '</ul>' . "\n";    }    echo '</form>';    echo '</div>';} else {    echo __('No databases');}unset($databases_count);/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * TCPDF wrapper class. */require_once './libraries/tcpdf/tcpdf.php';/** * PDF font to use. */define('PMA_PDF_FONT', 'DejaVuSans');/** * PDF export base class providing basic configuration. */class PMA_PDF extends TCPDF{    var $footerset;    var $Alias = array();    public function __construct($orientation='P', $unit='mm', $format='A4', $unicode=true, $encoding='UTF-8', $diskcache=false)    {        parent::__construct();        $this->SetAuthor('phpMyAdmin ' . PMA_VERSION);        $this->AliasNbPages();        $this->AddFont('DejaVuSans', '', 'dejavusans.php');        $this->AddFont('DejaVuSans', 'B', 'dejavusansb.php');        $this->SetFont(PMA_PDF_FONT, '', 14);        $this->setFooterFont(array(PMA_PDF_FONT, '', 14));    }    /**     * This function must be named "Footer" to work with the TCPDF library     */    function Footer()    {        // Check if footer for this page already exists        if (!isset($this->footerset[$this->page])) {            $this->SetY(-15);            $this->SetFont(PMA_PDF_FONT, '', 14);            $this->Cell(0, 6, __('Page number:') . ' ' . $this->getAliasNumPage() . '/' .  $this->getAliasNbPages(), 'T', 0, 'C');            $this->Cell(0, 6, PMA_localisedDate(), 0, 1, 'R');            $this->SetY(20);            // set footerset            $this->footerset[$this->page] = 1;        }    }    /**     * Function to set alias which will be expanded on page rendering.     */    function SetAlias($name, $value)    {        $this->Alias[$this->UTF8ToUTF16BE($name)] = $this->UTF8ToUTF16BE($value);    }    /**     * Improved with alias expading.     */    function _putpages()    {        if (count($this->Alias) > 0) {            $nb = count($this->pages);            for ($n = 1;$n <= $nb;$n++) {                $this->pages[$n] = strtr($this->pages[$n], $this->Alias);            }        }        parent::_putpages();    }    /**     * Displays an error message     *     * @param string $error_message the error mesage     */    function Error($error_message = '')    {        include './libraries/header.inc.php';        PMA_Message::error(__('Error while creating PDF:') . ' ' . $error_message)->display();        include './libraries/footer.inc.php';    }    /**     * Sends file as a download to user.     */    function Download($filename)    {        $pdfData = $this->getPDFData();        PMA_download_header($filename, 'application/pdf', strlen($pdfData));        echo $pdfData;    }}
<?php/** * Generates the JavaScripts needed to visualize GIS data. * * @package PhpMyAdmin-GIS */class PMA_GIS_Visualization{    /**     * @var array   Raw data for the visualization     */    private $_data;    /**     * @var array   Set of default settigs values are here.     */    private $_settings = array(        // Array of colors to be used for GIS visualizations.        'colors' => array(            '#B02EE0',            '#E0642E',            '#E0D62E',            '#2E97E0',            '#BCE02E',            '#E02E75',            '#5CE02E',            '#E0B02E',            '#0022E0',            '#726CB1',            '#481A36',            '#BAC658',            '#127224',            '#825119',            '#238C74',            '#4C489B',            '#87C9BF',        ),        // The width of the GIS visualization.        'width' => 600,         // The height of the GIS visualization.        'height' => 450,    );    /**     * @var array   Options that the user has specified.     */    private $_userSpecifiedSettings = null;    /**     * Returns the settings array     *     * @return the settings array.     */    public function getSettings()    {        return $this->_settings;    }    /**     * Constructor. Stores user specified options.     *     * @param array $data    Data for the visualization     * @param array $options Users specified options     */    public function __construct($data, $options)    {        $this->_userSpecifiedSettings = $options;        $this->_data = $data;    }    /**     * All the variable initialization, options handling has to be done here.     *     * @return nothing     */    protected function init()    {        $this->_handleOptions();    }    /**     * A function which handles passed parameters. Useful if desired     * chart needs to be a little bit different from the default one.     *     * @return nothing     */    private function _handleOptions()    {        if (! is_null($this->_userSpecifiedSettings)) {            $this->_settings = array_merge($this->_settings, $this->_userSpecifiedSettings);        }    }    /**     * Sanitizes the file name.     *     * @param string $file_name file name     * @param string $ext       extension of the file     *     * @return the sanitized file name     */    private function _sanitizeName($file_name, $ext)    {        $file_name = PMA_sanitize_filename($file_name);        // Check if the user already added extension;        // get the substring where the extension would be if it was included        $extension_start_pos = strlen($file_name) - strlen($ext) - 1;        $user_extension = substr($file_name, $extension_start_pos, strlen($file_name));        $required_extension = "." . $ext;        if (strtolower($user_extension) != $required_extension) {            $file_name  .= $required_extension;        }        return $file_name;    }    /**     * Handles common tasks of writing the visualization to file for various formats.     *     * @param string $file_name file name     * @param string $type      mime type     * @param string $ext       extension of the file     *     * @return nothing     */    private function _toFile($file_name, $type, $ext)    {        $file_name = $this->_sanitizeName($file_name, $ext);        ob_clean();        PMA_download_header($file_name, $type);    }    /**     * Generate the visualization in SVG format.     *     * @return the generated image resource     */    private function _svg()    {        $this->init();        $output   = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . "\n";        $output  .= '<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg"'            . ' xmlns="http://www.w3.org/2000/svg" width="' . $this->_settings['width'] . '"'            . ' height="' . $this->_settings['height'] . '">';        $output .= '<g id="groupPanel">';        $scale_data = $this->_scaleDataSet($this->_data);        $output .= $this->_prepareDataSet($this->_data, $scale_data, 'svg', '');        $output .= '</g>';        $output .= '</svg>';        return $output;    }    /**     * Get the visualization as a SVG.     *     * @return the visualization as a SVG     */    public function asSVG()    {        $output = $this->_svg();        return $output;    }    /**     * Saves as a SVG image to a file.     *     * @param string $file_name File name     *     * @return nothing     */    public function toFileAsSvg($file_name)    {        $img = $this->_svg();        $this->_toFile($file_name, 'image/svg+xml', 'svg');        echo($img);    }    /**     * Generate the visualization in PNG format.     *     * @return the generated image resource     */    private function _png()    {        $this->init();        // create image        $image = imagecreatetruecolor($this->_settings['width'], $this->_settings['height']);        // fill the background        $bg = imagecolorallocate($image, 229, 229, 229);        imagefilledrectangle(            $image, 0, 0, $this->_settings['width'] - 1,            $this->_settings['height'] - 1, $bg        );        $scale_data = $this->_scaleDataSet($this->_data);        $image = $this->_prepareDataSet($this->_data, $scale_data, 'png', $image);        return $image;    }    /**     * Get the visualization as a PNG.     *     * @return the visualization as a PNG     */    public function asPng()    {        $img = $this->_png();        // render and save it to variable        ob_start();        imagepng($img, null, 9, PNG_ALL_FILTERS);        imagedestroy($img);        $output = ob_get_contents();        ob_end_clean();        // base64 encode        $encoded = base64_encode($output);        return '<img src="data:image/png;base64,'. $encoded .'" />';    }    /**     * Saves as a PNG image to a file.     *     * @param string $file_name File name     *     * @return nothing     */    public function toFileAsPng($file_name)    {        $img = $this->_png();        $this->_toFile($file_name, 'image/png', 'png');        imagepng($img, null, 9, PNG_ALL_FILTERS);        imagedestroy($img);    }    /**     * Get the code for visualization with OpenLayers.     *     * @return the code for visualization with OpenLayers     */    public function asOl()    {        $this->init();        $scale_data = $this->_scaleDataSet($this->_data);        $output            = 'var options = {'                . 'projection: new OpenLayers.Projection("EPSG:900913"),'                . 'displayProjection: new OpenLayers.Projection("EPSG:4326"),'                . 'units: "m",'                . 'numZoomLevels: 18,'                . 'maxResolution: 156543.0339,'                . 'maxExtent: new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508),'                . 'restrictedExtent: new OpenLayers.Bounds(-20037508, -20037508, 20037508, 20037508)'            . '};'            . 'var map = new OpenLayers.Map("openlayersmap", options);'            . 'var layerNone = new OpenLayers.Layer.Boxes("None", {isBaseLayer: true});'            . 'var layerMapnik = new OpenLayers.Layer.OSM.Mapnik("Mapnik");'            . 'var layerOsmarender = new OpenLayers.Layer.OSM.Osmarender("Osmarender");'            . 'var layerCycleMap = new OpenLayers.Layer.OSM.CycleMap("CycleMap");'            . 'map.addLayers([layerMapnik, layerOsmarender, layerCycleMap, layerNone]);'            . 'var vectorLayer = new OpenLayers.Layer.Vector("Data");'            . 'var bound;';        $output .= $this->_prepareDataSet($this->_data, $scale_data, 'ol', '');        $output .=              'map.addLayer(vectorLayer);'            . 'map.zoomToExtent(bound);'            . 'if (map.getZoom() < 2) {'                . 'map.zoomTo(2);'            . '}'            . 'map.addControl(new OpenLayers.Control.LayerSwitcher());'            . 'map.addControl(new OpenLayers.Control.MousePosition());';        return $output;    }    /**     * Saves as a PDF to a file.     *     * @param string $file_name File name     *     * @return nothing     */    public function toFileAsPdf($file_name)    {        $this->init();        include_once './libraries/tcpdf/tcpdf.php';        // create pdf        $pdf = new TCPDF('', 'pt', $GLOBALS['cfg']['PDFDefaultPageSize'], true, 'UTF-8', false);        // disable header and footer        $pdf->setPrintHeader(false);        $pdf->setPrintFooter(false);        //set auto page breaks        $pdf->SetAutoPageBreak(false);        // add a page        $pdf->AddPage();        $scale_data = $this->_scaleDataSet($this->_data);        $pdf = $this->_prepareDataSet($this->_data, $scale_data, 'pdf', $pdf);        // sanitize file name        $file_name = $this->_sanitizeName($file_name, 'pdf');        ob_clean();        $pdf->Output($file_name, 'D');    }    /**     * Calculates the scale, horizontal and vertical offset that should be used.     *     * @param array $data Row data     *     * @return an array containing the scale, x and y offsets     */    private function _scaleDataSet($data)    {        $min_max = array();        $border = 15;        // effective width and height of the plot        $plot_width = $this->_settings['width'] - 2 * $border;        $plot_height = $this->_settings['height'] - 2 * $border;        foreach ($data as $row) {            // Figure out the data type            $ref_data = $row[$this->_settings['spatialColumn']];            $type_pos = stripos($ref_data, '(');            $type = substr($ref_data, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($row[$this->_settings['spatialColumn']]);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        // scale the visualization        $x_ratio = ($min_max['maxX'] - $min_max['minX']) / $plot_width;        $y_ratio = ($min_max['maxY'] - $min_max['minY']) / $plot_height;        $ratio = ($x_ratio > $y_ratio) ? $x_ratio : $y_ratio;        $scale = ($ratio != 0) ? (1 / $ratio) : 1;        if ($x_ratio < $y_ratio) {            // center horizontally            $x = ($min_max['maxX'] + $min_max['minX'] - $plot_width / $scale) / 2;            // fit vertically            $y = $min_max['minY'] - ($border / $scale);        } else {            // fit horizontally            $x = $min_max['minX'] - ($border / $scale);            // center vertically            $y =($min_max['maxY'] + $min_max['minY'] - $plot_height / $scale) / 2;        }        return array(            'scale'  => $scale,            'x'      => $x,            'y'      => $y,            'minX'   => $min_max['minX'],            'maxX'   => $min_max['maxX'],            'minY'   => $min_max['minY'],            'maxY'   => $min_max['maxY'],            'height' => $this->_settings['height'],        );    }    /**     * Prepares and return the dataset as needed by the visualization.     *     * @param array  $data       Raw data     * @param array  $scale_data Data related to scaling     * @param string $format     Format of the visulaization     * @param image  $results    Image object in the case of png     *     * @return the formatted array of data.     */    private function _prepareDataSet($data, $scale_data, $format, $results)    {        $color_number = 0;        // loop through the rows        foreach ($data as $row) {            $index = $color_number % sizeof($this->_settings['colors']);            // Figure out the data type            $ref_data = $row[$this->_settings['spatialColumn']];            $type_pos = stripos($ref_data, '(');            $type = substr($ref_data, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $label = '';            if (isset($this->_settings['labelColumn'])                && isset($row[$this->_settings['labelColumn']])            ) {                $label = $row[$this->_settings['labelColumn']];            }            if ($format == 'svg') {                $results .= $gis_obj->prepareRowAsSvg(                    $row[$this->_settings['spatialColumn']], $label,                    $this->_settings['colors'][$index], $scale_data                );            } elseif ($format == 'png') {                $results = $gis_obj->prepareRowAsPng(                    $row[$this->_settings['spatialColumn']], $label,                    $this->_settings['colors'][$index], $scale_data, $results                );            } elseif ($format == 'pdf') {                $results = $gis_obj->prepareRowAsPdf(                    $row[$this->_settings['spatialColumn']], $label,                    $this->_settings['colors'][$index], $scale_data, $results                );            } elseif ($format == 'ol') {                $results .= $gis_obj->prepareRowAsOl(                    $row[$this->_settings['spatialColumn']], $row['srid'],                    $label, $this->_settings['colors'][$index], $scale_data                );            }            $color_number++;        }        return $results;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Holds class PMA_Error * * @package PhpMyAdmin *//** * base class */require_once './libraries/Message.class.php';/** * a single error * * @package PhpMyAdmin */class PMA_Error extends PMA_Message{    /**     * Error types     *     * @var array     */    static public $errortype = array (        E_ERROR              => 'Error',        E_WARNING            => 'Warning',        E_PARSE              => 'Parsing Error',        E_NOTICE             => 'Notice',        E_CORE_ERROR         => 'Core Error',        E_CORE_WARNING       => 'Core Warning',        E_COMPILE_ERROR      => 'Compile Error',        E_COMPILE_WARNING    => 'Compile Warning',        E_USER_ERROR         => 'User Error',        E_USER_WARNING       => 'User Warning',        E_USER_NOTICE        => 'User Notice',        E_STRICT             => 'Runtime Notice',        E_DEPRECATED         => 'Deprecation Notice',        E_RECOVERABLE_ERROR  => 'Catchable Fatal Error',    );    /**     * Error levels     *     * @var array     */    static public $errorlevel = array (        E_ERROR              => 'error',        E_WARNING            => 'error',        E_PARSE              => 'error',        E_NOTICE             => 'notice',        E_CORE_ERROR         => 'error',        E_CORE_WARNING       => 'error',        E_COMPILE_ERROR      => 'error',        E_COMPILE_WARNING    => 'error',        E_USER_ERROR         => 'error',        E_USER_WARNING       => 'error',        E_USER_NOTICE        => 'notice',        E_STRICT             => 'notice',        E_DEPRECATED         => 'notice',        E_RECOVERABLE_ERROR  => 'error',    );    /**     * The file in which the error occured     *     * @var string     */    protected $_file = '';    /**     * The line in which the error occured     *     * @var integer     */    protected $_line = 0;    /**     * Holds the backtrace for this error     *     * @var array     */    protected $_backtrace = array();    /**     * Unique id     *     * @var string     */    protected $_hash = null;    /**     * Constructor     *     * @param integer $errno     * @param string  $errstr     * @param string  $errfile     * @param integer $errline     */    public function __construct($errno, $errstr, $errfile, $errline)    {        $this->setNumber($errno);        $this->setMessage($errstr, false);        $this->setFile($errfile);        $this->setLine($errline);        $backtrace = debug_backtrace();        // remove last two calls: debug_backtrace() and handleError()        unset($backtrace[0]);        unset($backtrace[1]);        $this->setBacktrace($backtrace);    }    /**     * sets PMA_Error::$_backtrace     *     * @param array $backtrace     */    public function setBacktrace($backtrace)    {        $this->_backtrace = $backtrace;    }    /**     * sets PMA_Error::$_line     *     * @param integer $line     */    public function setLine($line)    {        $this->_line = $line;    }    /**     * sets PMA_Error::$_file     *     * @param string $file     */    public function setFile($file)    {        $this->_file = PMA_Error::relPath($file);    }    /**     * returns unique PMA_Error::$_hash, if not exists it will be created     *     * @param string $file     * @return  string PMA_Error::$_hash     */    public function getHash()    {        try {            $backtrace = serialize($this->getBacktrace());        } catch(Exception $e){            $backtrace = '';        }        if (null === $this->_hash) {            $this->_hash = md5(                $this->getNumber() .                $this->getMessage() .                $this->getFile() .                $this->getLine() .                $backtrace            );        }        return $this->_hash;    }    /**     * returns PMA_Error::$_backtrace     *     * @return  array PMA_Error::$_backtrace     */    public function getBacktrace()    {        return $this->_backtrace;    }    /**     * returns PMA_Error::$_file     *     * @return  string PMA_Error::$_file     */    public function getFile()    {        return $this->_file;    }    /**     * returns PMA_Error::$_line     *     * @return  integer PMA_Error::$_line     */    public function getLine()    {        return $this->_line;    }    /**     * returns type of error     *     * @return  string  type of error     */    public function getType()    {        return PMA_Error::$errortype[$this->getNumber()];    }    /**     * returns level of error     *     * @return  string  level of error     */    public function getLevel()    {        return PMA_Error::$errorlevel[$this->getNumber()];    }    /**     * returns title prepared for HTML Title-Tag     *     * @return  string   HTML escaped and truncated title     */    public function getHtmlTitle()    {        return htmlspecialchars(substr($this->getTitle(), 0, 100));    }    /**     * returns title for error     *     * @return string     */    public function getTitle()    {        return $this->getType() . ': ' . $this->getMessage();    }    /**     * Display HTML backtrace     *     */    public function displayBacktrace()    {        foreach ($this->getBacktrace() as $step) {            echo PMA_Error::relPath($step['file']) . '#' . $step['line'] . ': ';            if (isset($step['class'])) {                echo $step['class'] . $step['type'];            }            echo $step['function'] . '(';            if (isset($step['args']) && (count($step['args']) > 1)) {                echo "<br />\n";                foreach ($step['args'] as $arg) {                    echo "\t";                    $this->displayArg($arg, $step['function']);                    echo ',' . "<br />\n";                }            } elseif (isset($step['args']) && (count($step['args']) > 0)) {                foreach ($step['args'] as $arg) {                    $this->displayArg($arg, $step['function']);                }            }            echo ')' . "<br />\n";        }    }    /**     * Display a single function argument     * if $function is one of include/require the $arg is converted te relative path     *     * @param string $arg     * @param string $function     */    protected function displayArg($arg, $function)    {        $include_functions = array(            'include',            'include_once',            'require',            'require_once',        );        if (in_array($function, $include_functions)) {            echo PMA_Error::relPath($arg);        } elseif (is_scalar($arg)) {            echo gettype($arg) . ' ' . htmlspecialchars($arg);        } else {            echo gettype($arg);        }    }    /**     * Displays the error in HTML     *     */    public function display()    {        echo '<div class="' . $this->getLevel() . '">';        if (! $this->isUserError()) {            echo '<strong>' . $this->getType() . '</strong>';            echo ' in ' . $this->getFile() . '#' . $this->getLine();            echo "<br />\n";        }        echo $this->getMessage();        if (! $this->isUserError()) {            echo "<br />\n";            echo "<br />\n";            echo "<strong>Backtrace</strong><br />\n";            echo "<br />\n";            echo $this->displayBacktrace();        }        echo '</div>';        $this->isDisplayed(true);    }    /**     * whether this error is a user error     *     * @return  boolean     */    public function isUserError()    {        return $this->getNumber() & (E_USER_WARNING | E_USER_ERROR | E_USER_NOTICE);    }    /**     * return short relative path to phpMyAdmin basedir     *     * prevent path disclusore in error message,     * and make users feel save to submit error reports     *     * @static     * @param string $dest  path to be shorten     * @return  string shortened path     */    static function relPath($dest)    {        $dest = realpath($dest);        if (substr(PHP_OS, 0, 3) == 'WIN') {            $path_separator = '\\';        } else {            $path_separator = '/';        }        $Ahere = explode($path_separator, realpath(dirname(__FILE__) . $path_separator . '..'));        $Adest = explode($path_separator, $dest);        $result = '.';        // && count ($Adest)>0 && count($Ahere)>0 )        while (implode($path_separator, $Adest) != implode($path_separator, $Ahere)) {            if (count($Ahere) > count($Adest)) {                array_pop($Ahere);                $result .= $path_separator . '..';            } else {                array_pop($Adest);            }        }        $path = $result . str_replace(implode($path_separator, $Adest), '', $dest);        return str_replace($path_separator . $path_separator, $path_separator, $path);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage pmahomme *//** * If you have problems or questions about this theme email mikehomme@users.sourceforge.net */$theme_name = 'pmahomme';$theme_full_version = '1.1';?>
<?php/** * Handles the visualization of GIS MULTILINESTRING objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Multilinestring extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        foreach ($linestirngs as $linestring) {            $min_max = $this->setMinMax($linestring, $min_max);        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $line_color, $scale_data, $image)    {        // allocate colors        $black = imagecolorallocate($image, 0, 0, 0);        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $color = imagecolorallocate($image, $red, $green, $blue);        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $first_line = true;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            foreach ($points_arr as $point) {                if (! isset($temp_point)) {                    $temp_point = $point;                } else {                    // draw line section                    imageline($image, $temp_point[0], $temp_point[1], $point[0], $point[1], $color);                    $temp_point = $point;                }            }            unset($temp_point);            // print label if applicable            if (isset($label) && trim($label) != '' && $first_line) {                imagestring($image, 1, $points_arr[1][0], $points_arr[1][1], trim($label), $black);            }            $first_line = false;        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $line_color, $scale_data, $pdf)    {        // allocate colors        $red   = hexdec(substr($line_color, 1, 2));        $green = hexdec(substr($line_color, 3, 2));        $blue  = hexdec(substr($line_color, 4, 2));        $line  = array('width' => 1.5, 'color' => array($red, $green, $blue));        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $first_line = true;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            foreach ($points_arr as $point) {                if (! isset($temp_point)) {                    $temp_point = $point;                } else {                    // draw line section                    $pdf->Line($temp_point[0], $temp_point[1], $point[0], $point[1], $line);                    $temp_point = $point;                }            }            unset($temp_point);            // print label            if (isset($label) && trim($label) != '' && $first_line) {                $pdf->SetXY($points_arr[1][0], $points_arr[1][1]);                $pdf->SetFontSize(5);                $pdf->Cell(0, 0, trim($label));            }            $first_line = false;        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $line_color, $scale_data)    {        $line_options = array(            'name'        => $label,            'class'       => 'linestring vector',            'fill'        => 'none',            'stroke'      => $line_color,            'stroke-width'=> 2,        );        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $row = '';        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, $scale_data);            $row .= '<polyline points="';            foreach ($points_arr as $point) {                $row .= $point[0] . ',' . $point[1] . ' ';            }            $row .= '"';            $line_options['id'] = $label . rand();            foreach ($line_options as $option => $val) {                $row .= ' ' . $option . '="' . trim($val) . '"';            }            $row .= '/>';        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS MULTILINESTRING object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS MULTILINESTRING object     * @param string $line_color Color for the GIS MULTILINESTRING object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $line_color, $scale_data)    {        $style_options = array(            'strokeColor' => $line_color,            'strokeWidth' => 2,            'label'       => $label,            'fontSize'    => 10,        );        if ($srid == 0) {            $srid = 4326;        }        $row = $this->getBoundsForOl($srid, $scale_data);        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($spatial, 17, (strlen($spatial) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $row .= 'vectorLayer.addFeatures(new OpenLayers.Feature.Vector('            . 'new OpenLayers.Geometry.MultiLineString(new Array(';        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, null);            $row .= 'new OpenLayers.Geometry.LineString(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point(' . $point[0] . ', '                    . $point[1] . ')).transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= ')), ';        }        $row = substr($row, 0, strlen($row) - 2);        $row .= ')), null, ' . json_encode($style_options) . '));';        return $row;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $no_of_lines = isset($gis_data[$index]['MULTILINESTRING']['no_of_lines'])            ? $gis_data[$index]['MULTILINESTRING']['no_of_lines'] : 1;        if ($no_of_lines < 1) {            $no_of_lines = 1;        }        $wkt = 'MULTILINESTRING(';        for ($i = 0; $i < $no_of_lines; $i++) {            $no_of_points = isset($gis_data[$index]['MULTILINESTRING'][$i]['no_of_points'])                ? $gis_data[$index]['MULTILINESTRING'][$i]['no_of_points'] : 2;            if ($no_of_points < 2) {                $no_of_points = 2;            }            $wkt .= '(';            for ($j = 0; $j < $no_of_points; $j++) {                $wkt .= ((isset($gis_data[$index]['MULTILINESTRING'][$i][$j]['x'])                    && trim($gis_data[$index]['MULTILINESTRING'][$i][$j]['x']) != '')                    ? $gis_data[$index]['MULTILINESTRING'][$i][$j]['x'] : $empty)                    . ' ' . ((isset($gis_data[$index]['MULTILINESTRING'][$i][$j]['y'])                    && trim($gis_data[$index]['MULTILINESTRING'][$i][$j]['y']) != '')                    ? $gis_data[$index]['MULTILINESTRING'][$i][$j]['y'] : $empty) . ',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate the WKT for the data from ESRI shape files.     *     * @param array $row_data GIS data     *     * @return the WKT for the data from ESRI shape files     */    public function getShape($row_data)    {        $wkt = 'MULTILINESTRING(';        for ($i = 0; $i < $row_data['numparts']; $i++) {            $wkt .= '(';            foreach ($row_data['parts'][$i]['points'] as $point) {                $wkt .= $point['x'] . ' ' . $point['y'] . ',';            }            $wkt = substr($wkt, 0, strlen($wkt) - 1);            $wkt .= '),';        }        $wkt = substr($wkt, 0, strlen($wkt) - 1);        $wkt .= ')';        return $wkt;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value, $index = -1)    {        if ($index == -1) {            $index = 0;            $params = array();            $data = PMA_GIS_Geometry::generateParams($value);            $params['srid'] = $data['srid'];            $wkt = $data['wkt'];        } else {            $params[$index]['gis_type'] = 'MULTILINESTRING';            $wkt = $value;        }        // Trim to remove leading 'MULTILINESTRING((' and trailing '))'        $multilinestirng = substr($wkt, 17, (strlen($wkt) - 19));        // Seperate each linestring        $linestirngs = explode("),(", $multilinestirng);        $params[$index]['MULTILINESTRING']['no_of_lines'] = count($linestirngs);        $j = 0;        foreach ($linestirngs as $linestring) {            $points_arr = $this->extractPoints($linestring, null);            $no_of_points = count($points_arr);            $params[$index]['MULTILINESTRING'][$j]['no_of_points'] = $no_of_points;            for ($i = 0; $i < $no_of_points; $i++) {                $params[$index]['MULTILINESTRING'][$j][$i]['x'] = $points_arr[$i][0];                $params[$index]['MULTILINESTRING'][$j][$i]['y'] = $points_arr[$i][1];            }            $j++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * URL/hidden inputs generating. * * @package PhpMyAdmin *//** * Generates text with hidden inputs. * * @param string $db     optional database name *                       (can also be an array of parameters) * @param string $table  optional table name * @param int    $indent indenting level * @param string $skip   do not generate a hidden field for this parameter *                       (can be an array of strings) * * @see PMA_generate_common_url() * * @return  string   string with input fields * * @global  string   the current language * @global  string   the current conversion charset * @global  string   the current connection collation * @global  string   the current server * @global  array    the configuration array * @global  boolean  whether recoding is allowed or not * * @access  public */function PMA_generate_common_hidden_inputs($db = '', $table = '', $indent = 0, $skip = array()){    if (is_array($db)) {        $params  =& $db;        $_indent = empty($table) ? $indent : $table;        $_skip   = empty($indent) ? $skip : $indent;        $indent  =& $_indent;        $skip    =& $_skip;    } else {        $params = array();        if (strlen($db)) {            $params['db'] = $db;        }        if (strlen($table)) {            $params['table'] = $table;        }    }    if (! empty($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    $params['token'] = $_SESSION[' PMA_token '];    if (! is_array($skip)) {        if (isset($params[$skip])) {            unset($params[$skip]);        }    } else {        foreach ($skip as $skipping) {            if (isset($params[$skipping])) {                unset($params[$skipping]);            }        }    }    return PMA_getHiddenFields($params);}/** * create hidden form fields from array with name => value * * <code> * $values = array( *     'aaa' => aaa, *     'bbb' => array( *          'bbb_0', *          'bbb_1', *     ), *     'ccc' => array( *          'a' => 'ccc_a', *          'b' => 'ccc_b', *     ), * ); * echo PMA_getHiddenFields($values); * * // produces: * <input type="hidden" name="aaa" Value="aaa" /> * <input type="hidden" name="bbb[0]" Value="bbb_0" /> * <input type="hidden" name="bbb[1]" Value="bbb_1" /> * <input type="hidden" name="ccc[a]" Value="ccc_a" /> * <input type="hidden" name="ccc[b]" Value="ccc_b" /> * </code> * * @param array  $values hidden values * @param string $pre    prefix * * @return string form fields of type hidden */function PMA_getHiddenFields($values, $pre = ''){    $fields = '';    foreach ($values as $name => $value) {        if (! empty($pre)) {            $name = $pre. '[' . $name . ']';        }        if (is_array($value)) {            $fields .= PMA_getHiddenFields($value, $name);        } else {            // do not generate an ending "\n" because            // PMA_generate_common_hidden_inputs() is sometimes called            // from a JS document.write()            $fields .= '<input type="hidden" name="' . htmlspecialchars($name)                . '" value="' . htmlspecialchars($value) . '" />';        }    }    return $fields;}/** * Generates text with URL parameters. * * <code> * // OLD derepecated style * // note the ? * echo 'script.php?' . PMA_generate_common_url('mysql', 'rights'); * // produces with cookies enabled: * // script.php?db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights * * // NEW style * $params['myparam'] = 'myvalue'; * $params['db']      = 'mysql'; * $params['table']   = 'rights'; * // note the missing ? * echo 'script.php' . PMA_generate_common_url($params); * // produces with cookies enabled: * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights * * // note the missing ? * echo 'script.php' . PMA_generate_common_url(); * // produces with cookies enabled: * // script.php * // with cookies disabled: * // script.php?server=1&amp;lang=en * </code> * * @param mixed  assoc. array with url params or optional string with database name *               if first param is an array there is also an ? prefixed to the url * * @param string - if first param is array: 'html' to use htmlspecialchars() *               on the resulting URL (for a normal URL displayed in HTML) *               or something else to avoid using htmlspecialchars() (for *               a URL sent via a header); if not set,'html' is assumed *               - if first param is not array:  optional table name * * @param string - if first param is array: optional character to *               use instead of '?' *               - if first param is not array: optional character to use *               instead of '&amp;' for dividing URL parameters * * @return  string   string with URL parameters * @access  public */function PMA_generate_common_url(){    $args = func_get_args();    if (isset($args[0]) && is_array($args[0])) {        // new style        $params = $args[0];        if (isset($args[1])) {            $encode = $args[1];        } else {            $encode = 'html';        }        if (isset($args[2])) {            $questionmark = $args[2];        } else {            $questionmark = '?';        }    } else {        // old style        if (PMA_isValid($args[0])) {            $params['db'] = $args[0];        }        if (PMA_isValid($args[1])) {            $params['table'] = $args[1];        }        if (isset($args[2]) && $args[2] !== '&amp;') {            $encode = 'text';        } else {            $encode = 'html';        }        $questionmark = '';    }    $separator = PMA_get_arg_separator();    if (isset($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']        // avoid overwriting when creating navi panel links to servers        && ! isset($params['server'])    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    if (isset($_SESSION[' PMA_token '])) {        $params['token'] = $_SESSION[' PMA_token '];    }    if (empty($params)) {        return '';    }    $query = $questionmark . http_build_query($params, null, $separator);    if ($encode === 'html') {        $query = htmlspecialchars($query);    }    return $query;}/** * Returns url separator * * extracted from arg_separator.input as set in php.ini * we do not use arg_separator.output to avoid problems with &amp; and & * * @param string $encode whether to encode separator or not, * currently 'none' or 'html' * * @return  string  character used for separating url parts usally ; or & * @access  public */function PMA_get_arg_separator($encode = 'none'){    static $separator = null;    if (null === $separator) {        // use seperators defined by php, but prefer ';'        // as recommended by W3C        $php_arg_separator_input = ini_get('arg_separator.input');        if (strpos($php_arg_separator_input, ';') !== false) {            $separator = ';';        } elseif (strlen($php_arg_separator_input) > 0) {            $separator = $php_arg_separator_input{0};        } else {            $separator = '&';        }    }    switch ($encode) {    case 'html':        return htmlentities($separator);        break;    case 'text' :    case 'none' :    default :        return $separator;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Various checks and message functions used on index page. * * Security checks are the idea of Aung Khant <aungkhant[at]yehg.net>, http://yehg.net/lab * Version check taken from the old setup script by Michal iha <michal@cihar.com> * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Initializes message list */function messages_begin(){    if (! isset($_SESSION['messages']) || !is_array($_SESSION['messages'])) {        $_SESSION['messages'] = array('error' => array(), 'notice' => array());    } else {        // reset message states        foreach ($_SESSION['messages'] as &$messages) {            foreach ($messages as &$msg) {                $msg['fresh'] = false;                $msg['active'] = false;            }        }    }}/** * Adds a new message to message list * * @param string $type one of: notice, error * @param string $id unique message identifier * @param string $title language string id (in $str array) * @param string $message message text */function messages_set($type, $id, $title, $message){    $fresh = ! isset($_SESSION['messages'][$type][$id]);    $_SESSION['messages'][$type][$id] = array(        'fresh' => $fresh,        'active' => true,        'title' => $title,        'message' => $message);}/** * Cleans up message list */function messages_end(){    foreach ($_SESSION['messages'] as &$messages) {        $remove_ids = array();        foreach ($messages as $id => &$msg) {            if ($msg['active'] == false) {                $remove_ids[] = $id;            }        }        foreach ($remove_ids as $id) {            unset($messages[$id]);        }    }}/** * Prints message list, must be called after messages_end() */function messages_show_html(){    $old_ids = array();    foreach ($_SESSION['messages'] as $type => $messages) {        foreach ($messages as $id => $msg) {            echo '<div class="' . $type . '" id="' . $id . '">' . '<h4>' . $msg['title'] . '</h4>' . $msg['message'] . '</div>';            if (!$msg['fresh'] && $type != 'error') {                $old_ids[] = $id;            }        }    }    echo "\n" . '<script type="text/javascript">';    foreach ($old_ids as $id) {        echo "\nhiddenMessages.push('$id');";    }    echo "\n</script>\n";}/** * Checks for newest phpMyAdmin version and sets result as a new notice */function PMA_version_check(){    // version check messages should always be visible so let's make    // a unique message id each time we run it    $message_id = uniqid('version_check');    // wait 3s at most for server response, it's enough to get information    // from a working server    $connection_timeout = 3;    $url = 'http://phpmyadmin.net/home_page/version.php';    $context = stream_context_create(array(        'http' => array(            'timeout' => $connection_timeout)));    $data = @file_get_contents($url, null, $context);    if ($data === false) {        if (function_exists('curl_init')) {            $ch = curl_init($url);            curl_setopt($ch, CURLOPT_HEADER, false);            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            curl_setopt($ch, CURLOPT_TIMEOUT, $connection_timeout);            $data = curl_exec($ch);            curl_close($ch);        } else {            messages_set(                'error',                $message_id,                __('Version check'),                __('Neither URL wrapper nor CURL is available. Version check is not possible.'));            return;        }    }    if (empty($data)) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Reading of version failed. Maybe you\'re offline or the upgrade server does not respond.'));        return;    }    /* Format: version\ndate\n(download\n)* */    $data_list = explode("\n", $data);    if (count($data_list) > 1) {        $version = $data_list[0];        $date = $data_list[1];    } else {        $version = $date = '';    }    $version_upstream = version_to_int($version);    if ($version_upstream === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Got invalid version string from server'));        return;    }    $version_local = version_to_int($GLOBALS['PMA_Config']->get('PMA_VERSION'));    if ($version_local === false) {        messages_set(            'error',            $message_id,            __('Version check'),            __('Unparsable version string'));        return;    }    if ($version_upstream > $version_local) {        $version = htmlspecialchars($version);        $date = htmlspecialchars($date);        messages_set(            'notice',            $message_id,            __('Version check'),            sprintf(__('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.'), $version, $date));    } else {        if ($version_local % 100 == 0) {            messages_set(                'notice',                $message_id,                __('Version check'),                PMA_sanitize(sprintf(__('You are using Git version, run [kbd]git pull[/kbd] :-)[br]The latest stable version is %s, released on %s.'), $version, $date)));        } else {            messages_set(                'notice',                $message_id,                __('Version check'),                __('No newer stable version is available'));        }    }}/** * Calculates numerical equivalent of phpMyAdmin version string * * @param string  $version * @return mixed  false on failure, integer on success */function version_to_int($version){    $matches = array();    if (!preg_match('/^(\d+)\.(\d+)\.(\d+)((\.|-(pl|rc|dev|beta|alpha))(\d+)?(-dev)?)?$/', $version, $matches)) {        return false;    }    if (!empty($matches[6])) {        switch ($matches[6]) {            case 'pl':                $added = 60;                break;            case 'rc':                $added = 30;                break;            case 'beta':                $added = 20;                break;            case 'alpha':                $added = 10;                break;            case 'dev':                $added = 0;                break;            default:                messages_set(                    'notice',                    'version_match',                    __('Version check'),                    'Unknown version part: ' . htmlspecialchars($matches[6]));                $added = 0;                break;        }    } else {        $added = 50; // for final    }    if (!empty($matches[7])) {        $added = $added + $matches[7];    }    return $matches[1] * 1000000 + $matches[2] * 10000 + $matches[3] * 100 + $added;}/** * Checks whether config file is readable/writable * * @param bool &$is_readable * @param bool &$is_writable * @param bool &$file_exists */function check_config_rw(&$is_readable, &$is_writable, &$file_exists){    $file_path = ConfigFile::getInstance()->getFilePath();    $file_dir = dirname($file_path);    $is_readable = true;    $is_writable = is_dir($file_dir);    if (SETUP_DIR_WRITABLE) {        $is_writable = $is_writable && is_writable($file_dir);    }    $file_exists = file_exists($file_path);    if ($file_exists) {        $is_readable = is_readable($file_path);        $is_writable = $is_writable && is_writable($file_path);    }}/** * Performs various compatibility, security and consistency checks on current config * * Outputs results to message list, must be called between messages_begin() * and messages_end() */function perform_config_checks(){    $cf = ConfigFile::getInstance();    $blowfish_secret = $cf->get('blowfish_secret');    $blowfish_secret_set = false;    $cookie_auth_used = false;    $strAllowArbitraryServerWarning = __('This %soption%s should be disabled as it allows attackers to bruteforce login to any MySQL server. If you feel this is necessary, use %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strAllowArbitraryServerWarning = sprintf($strAllowArbitraryServerWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strBlowfishSecretMsg = __('You didn\'t have blowfish secret set and have enabled cookie authentication, so a key was automatically generated for you. It is used to encrypt cookies; you don\'t need to remember it.');    $strBZipDumpWarning = __('%sBzip2 compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strBZipDumpWarning = sprintf($strBZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strDirectoryNotice = __('This value should be double checked to ensure that this directory is neither world accessible nor readable or writable by other users on your server.');    $strForceSSLNotice = __('This %soption%s should be enabled if your web server supports it.');    $strForceSSLNotice = sprintf($strForceSSLNotice, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strGZipDumpWarning = __('%sGZip compression and decompression%s requires functions (%s) which are unavailable on this system.');    $strGZipDumpWarning = sprintf($strGZipDumpWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strLoginCookieValidityWarning = __('%sLogin cookie validity%s greater than 1440 seconds may cause random session invalidation if %ssession.gc_maxlifetime%s is lower than its value (currently %d).');    $strLoginCookieValidityWarning = sprintf($strLoginCookieValidityWarning, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@' . PMA_getPHPDocLink('session.configuration.php#ini.session.gc-maxlifetime') . ']', '[/a]', ini_get('session.gc_maxlifetime'));    $strLoginCookieValidityWarning2 = __('%sLogin cookie validity%s should be set to 1800 seconds (30 minutes) at most. Values larger than 1800 may pose a security risk such as impersonation.');    $strLoginCookieValidityWarning2 = sprintf($strLoginCookieValidityWarning2, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strLoginCookieValidityWarning3 = __('If using cookie authentication and %sLogin cookie store%s is not 0, %sLogin cookie validity%s must be set to a value less or equal to it.');    $strLoginCookieValidityWarning3 = sprintf($strLoginCookieValidityWarning3, '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strSecurityInfoMsg = __('If you feel this is necessary, use additional protection settings - %shost authentication%s settings and %strusted proxies list%s. However, IP-based protection may not be reliable if your IP belongs to an ISP where thousands of users, including you, are connected to.');    $strSecurityInfoMsg = sprintf($strSecurityInfoMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server_config]', '[/a]', '[a@?page=form&amp;formset=Features#tab_Security]', '[/a]');    $strServerAuthConfigMsg = __('You set the [kbd]config[/kbd] authentication type and included username and password for auto-login, which is not a desirable option for live hosts. Anyone who knows or guesses your phpMyAdmin URL can directly access your phpMyAdmin panel. Set %sauthentication type%s to [kbd]cookie[/kbd] or [kbd]http[/kbd].');    $strServerAuthConfigMsg = sprintf($strServerAuthConfigMsg, '[a@?page=servers&amp;mode=edit&amp;id=%1$d#tab_Server]', '[/a]');    $strZipDumpExportWarning = __('%sZip compression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpExportWarning = sprintf($strZipDumpExportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    $strZipDumpImportWarning = __('%sZip decompression%s requires functions (%s) which are unavailable on this system.');    $strZipDumpImportWarning = sprintf($strZipDumpImportWarning, '[a@?page=form&amp;formset=Features#tab_Import_export]', '[/a]', '%s');    for ($i = 1, $server_cnt = $cf->getServerCount(); $i <= $server_cnt; $i++) {        $cookie_auth_server = ($cf->getValue("Servers/$i/auth_type") == 'cookie');        $cookie_auth_used |= $cookie_auth_server;        $server_name = $cf->getServerName($i);        if ($server_name == 'localhost') {            $server_name .=  " [$i]";        }        $server_name = htmlspecialchars($server_name);        if ($cookie_auth_server && $blowfish_secret === null) {            $blowfish_secret = uniqid('', true);            $blowfish_secret_set = true;            $cf->set('blowfish_secret', $blowfish_secret);        }        //        // $cfg['Servers'][$i]['ssl']        // should be enabled if possible        //        if (!$cf->getValue("Servers/$i/ssl")) {            $title = PMA_lang(PMA_lang_name('Servers/1/ssl')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/ssl",                $title,                __('You should use SSL connections if your database server supports it.'));        }        //        // $cfg['Servers'][$i]['extension']        // warn about using 'mysql'        //        if ($cf->getValue("Servers/$i/extension") == 'mysql') {            $title = PMA_lang(PMA_lang_name('Servers/1/extension')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/extension",                $title,                __('You should use mysqli for performance reasons.'));        }        //        // $cfg['Servers'][$i]['auth_type']        // warn about full user credentials if 'auth_type' is 'config'        //        if ($cf->getValue("Servers/$i/auth_type") == 'config'                && $cf->getValue("Servers/$i/user") != ''                && $cf->getValue("Servers/$i/password") != '') {            $title = PMA_lang(PMA_lang_name('Servers/1/auth_type')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/auth_type",                $title,                PMA_lang($strServerAuthConfigMsg, $i) . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }        //        // $cfg['Servers'][$i]['AllowRoot']        // $cfg['Servers'][$i]['AllowNoPassword']        // serious security flaw        //        if ($cf->getValue("Servers/$i/AllowRoot")                && $cf->getValue("Servers/$i/AllowNoPassword")) {            $title = PMA_lang(PMA_lang_name('Servers/1/AllowNoPassword')) . " ($server_name)";            messages_set(                'notice',                "Servers/$i/AllowNoPassword",                $title,                __('You allow for connecting to the server without a password.') . ' ' .                    PMA_lang($strSecurityInfoMsg, $i));        }    }    //    // $cfg['blowfish_secret']    // it's required for 'cookie' authentication    //    if ($cookie_auth_used) {        if ($blowfish_secret_set) {            // 'cookie' auth used, blowfish_secret was generated            messages_set(                'notice',                'blowfish_secret_created',                PMA_lang(PMA_lang_name('blowfish_secret')),                $strBlowfishSecretMsg);        } else {            $blowfish_warnings = array();            // check length            if (strlen($blowfish_secret) < 8) {                // too short key                $blowfish_warnings[] = __('Key is too short, it should have at least 8 characters.');            }            // check used characters            $has_digits = (bool) preg_match('/\d/', $blowfish_secret);            $has_chars = (bool) preg_match('/\S/', $blowfish_secret);            $has_nonword = (bool) preg_match('/\W/', $blowfish_secret);            if (!$has_digits || !$has_chars || !$has_nonword) {                $blowfish_warnings[] = PMA_lang(__('Key should contain letters, numbers [em]and[/em] special characters.'));            }            if (!empty($blowfish_warnings)) {                messages_set(                    'error',                    'blowfish_warnings' . count($blowfish_warnings),                    PMA_lang(PMA_lang_name('blowfish_secret')),                    implode('<br />', $blowfish_warnings));            }        }    }    //    // $cfg['ForceSSL']    // should be enabled if possible    //    if (!$cf->getValue('ForceSSL')) {        messages_set(            'notice',            'ForceSSL',            PMA_lang(PMA_lang_name('ForceSSL')),            PMA_lang($strForceSSLNotice));    }    //    // $cfg['AllowArbitraryServer']    // should be disabled    //    if ($cf->getValue('AllowArbitraryServer')) {        messages_set(            'notice',            'AllowArbitraryServer',            PMA_lang(PMA_lang_name('AllowArbitraryServer')),            PMA_lang($strAllowArbitraryServerWarning));    }    //    // $cfg['LoginCookieValidity']    // value greater than session.gc_maxlifetime will cause random session invalidation after that time    //    if ($cf->getValue('LoginCookieValidity') > 1440            || $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')) {        $message_type = $cf->getValue('LoginCookieValidity') > ini_get('session.gc_maxlifetime')            ? 'error'            : 'notice';        messages_set(            $message_type,            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning));    }    //    // $cfg['LoginCookieValidity']    // should be at most 1800 (30 min)    //    if ($cf->getValue('LoginCookieValidity') > 1800) {        messages_set(            'notice',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning2));    }    //    // $cfg['LoginCookieValidity']    // $cfg['LoginCookieStore']    // LoginCookieValidity must be less or equal to LoginCookieStore    //    if ($cf->getValue('LoginCookieStore') != 0 && $cf->getValue('LoginCookieValidity') > $cf->getValue('LoginCookieStore')) {        messages_set(            'error',            'LoginCookieValidity',            PMA_lang(PMA_lang_name('LoginCookieValidity')),            PMA_lang($strLoginCookieValidityWarning3));    }    //    // $cfg['SaveDir']    // should not be world-accessible    //    if ($cf->getValue('SaveDir') != '') {        messages_set(            'notice',            'SaveDir',            PMA_lang(PMA_lang_name('SaveDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['TempDir']    // should not be world-accessible    //    if ($cf->getValue('TempDir') != '') {        messages_set(            'notice',            'TempDir',            PMA_lang(PMA_lang_name('TempDir')),            PMA_lang($strDirectoryNotice));    }    //    // $cfg['GZipDump']    // requires zlib functions    //    if ($cf->getValue('GZipDump')            && (@!function_exists('gzopen') || @!function_exists('gzencode'))) {        messages_set(            'error',            'GZipDump',            PMA_lang(PMA_lang_name('GZipDump')),            PMA_lang($strGZipDumpWarning, 'gzencode'));    }    //    // $cfg['BZipDump']    // requires bzip2 functions    //    if ($cf->getValue('BZipDump')            && (!@function_exists('bzopen') || !@function_exists('bzcompress'))) {        $functions = @function_exists('bzopen')                ? '' :                'bzopen';        $functions .= @function_exists('bzcompress')                ? ''                : ($functions ? ', ' : '') . 'bzcompress';        messages_set(            'error',            'BZipDump',            PMA_lang(PMA_lang_name('BZipDump')),            PMA_lang($strBZipDumpWarning, $functions));    }    //    // $cfg['ZipDump']    // requires zip_open in import    //    if ($cf->getValue('ZipDump') && !@function_exists('zip_open')) {        messages_set(            'error',            'ZipDump_import',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpImportWarning, 'zip_open'));    }    //    // $cfg['ZipDump']    // requires gzcompress in export    //    if ($cf->getValue('ZipDump') && !@function_exists('gzcompress')) {        messages_set(            'error',            'ZipDump_export',            PMA_lang(PMA_lang_name('ZipDump')),            PMA_lang($strZipDumpExportWarning, 'gzcompress'));    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of VIEWs * * @todo js error when view name is empty (strFormEmpty) * @todo (also validate if js is disabled, after form submission?) * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';/** * Runs common work */require './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'view_create.php';$view_algorithm_options = array(    'UNDEFINED',    'MERGE',    'TEMPTABLE',);$view_with_options = array(    'CASCADED CHECK OPTION',    'LOCAL CHECK OPTION');if (isset($_REQUEST['createview'])) {    /**     * Creates the view     */    $sep = "\r\n";    $sql_query = 'CREATE';    if (isset($_REQUEST['view']['or_replace'])) {        $sql_query .= ' OR REPLACE';    }    if (PMA_isValid($_REQUEST['view']['algorithm'], $view_algorithm_options)) {        $sql_query .= $sep . ' ALGORITHM = ' . $_REQUEST['view']['algorithm'];    }    $sql_query .= $sep . ' VIEW ' . PMA_backquote($_REQUEST['view']['name']);    if (! empty($_REQUEST['view']['column_names'])) {        $sql_query .= $sep . ' (' . $_REQUEST['view']['column_names'] . ')';    }    $sql_query .= $sep . ' AS ' . $_REQUEST['view']['as'];    if (isset($_REQUEST['view']['with'])) {        $options = array_intersect($_REQUEST['view']['with'], $view_with_options);        if (count($options)) {            $sql_query .= $sep . ' WITH ' . implode(' ', $options);        }    }    if (PMA_DBI_try_query($sql_query)) {        $message = PMA_Message::success();        include './' . $cfg['DefaultTabDatabase'];        exit();    } else {        $message = PMA_Message::rawError(PMA_DBI_getError());    }}// prefill values if not already filled from former submission$view = array(    'or_replace' => '',    'algorithm' => '',    'name' => '',    'column_names' => '',    'as' => $sql_query,    'with' => array(),);if (PMA_isValid($_REQUEST['view'], 'array')) {    $view = array_merge($view, $_REQUEST['view']);}/** * Displays top menu links * We use db links because a VIEW is not necessarily on a single table */$num_tables = 0;require_once './libraries/db_links.inc.php';$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */?><!-- CREATE VIEW options --><div id="div_view_options"><form method="post" action="view_create.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend>CREATE VIEW</legend>    <table>    <tr><td><label for="or_replace">OR REPLACE</label></td>        <td><input type="checkbox" name="view[or_replace]" id="or_replace"                <?php if ($view['or_replace']) { ?>                checked="checked"                <?php } ?>                value="1" />        </td>    </tr>    <tr>        <td><label for="algorithm">ALGORITHM</label></td>        <td><select name="view[algorithm]" id="algorithm">            <?php            foreach ($view_algorithm_options as $option) {                echo '<option value="' . htmlspecialchars($option) . '"';                if ($view['algorithm'] === $option) {                    echo 'selected="selected"';                }                echo '>' . htmlspecialchars($option) . '</option>';            }            ?>            </select>        </td>    </tr>    <tr><td><?php echo __('VIEW name'); ?></td>        <td><input type="text" size="20" name="view[name]" onfocus="this.select()"                value="<?php echo htmlspecialchars($view['name']); ?>" />        </td>    </tr>    <tr><td><?php echo __('Column names'); ?></td>        <td><input type="text" maxlength="100" size="50" name="view[column_names]"                onfocus="this.select()"                value="<?php echo htmlspecialchars($view['column_names']); ?>" />        </td>    </tr>    <tr><td>AS</td>        <td>            <textarea name="view[as]" rows="<?php echo $cfg['TextareaRows']; ?>"                cols="<?php echo $cfg['TextareaCols']; ?>"                dir="<?php echo $text_dir; ?>" onfocus="this.select();"                ><?php echo htmlspecialchars($view['as']); ?></textarea>        </td>    </tr>    <tr><td>WITH</td>        <td>            <?php            foreach ($view_with_options as $option) {                echo '<input type="checkbox" name="view[with][]"';                if (in_array($option, $view['with'])) {                    echo ' checked="checked"';                }                echo ' id="view_with_' . str_replace(' ', '_', htmlspecialchars($option)) . '"';                echo ' value="' . htmlspecialchars($option) . '" />';                echo '<label for="view_with_' . str_replace(' ', '_', htmlspecialchars($option)) . '">';                echo htmlspecialchars($option) . '</label>&nbsp;';            }            ?>        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="createview" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'server_privileges.js';$GLOBALS['js_include'][] = 'replication.js';require './libraries/server_common.inc.php';require './libraries/replication.inc.php';require './libraries/replication_gui.lib.php';require_once './libraries/server_synchronize.lib.php';/** * Checks if the user is allowed to do what he tries to... */if (! $is_superuser) {    include './libraries/server_links.inc.php';    echo '<h2>' . "\n"        . PMA_getIcon('s_replication.png')        . __('Replication') . "\n"        . '</h2>' . "\n";    PMA_Message::error(__('No Privileges'))->display();    include './libraries/footer.inc.php';}/** * Handling control requests */if (isset($GLOBALS['sr_take_action'])) {    $refresh = false;    if (isset($GLOBALS['slave_changemaster'])) {        $_SESSION['replication']['m_username'] = $sr['username'] = PMA_sqlAddSlashes($GLOBALS['username']);        $_SESSION['replication']['m_password'] = $sr['pma_pw']   = PMA_sqlAddSlashes($GLOBALS['pma_pw']);        $_SESSION['replication']['m_hostname'] = $sr['hostname'] = PMA_sqlAddSlashes($GLOBALS['hostname']);        $_SESSION['replication']['m_port']     = $sr['port']     = PMA_sqlAddSlashes($GLOBALS['port']);        $_SESSION['replication']['m_correct']  = '';        $_SESSION['replication']['sr_action_status'] = 'error';        $_SESSION['replication']['sr_action_info'] = __('Unknown error');        // Attempt to connect to the new master server        $link_to_master = PMA_replication_connect_to_master($sr['username'], $sr['pma_pw'], $sr['hostname'], $sr['port']);        if (! $link_to_master) {            $_SESSION['replication']['sr_action_status'] = 'error';            $_SESSION['replication']['sr_action_info'] = sprintf(__('Unable to connect to master %s.'), htmlspecialchars($sr['hostname']));        } else {            // Read the current master position            $position = PMA_replication_slave_bin_log_master($link_to_master);            if (empty($position)) {                $_SESSION['replication']['sr_action_status'] = 'error';                $_SESSION['replication']['sr_action_info'] = __('Unable to read master log position. Possible privilege problem on master.');            } else {                $_SESSION['replication']['m_correct']  = true;                if (! PMA_replication_slave_change_master($sr['username'], $sr['pma_pw'], $sr['hostname'], $sr['port'], $position, true, false)) {                    $_SESSION['replication']['sr_action_status'] = 'error';                    $_SESSION['replication']['sr_action_info'] = __('Unable to change master');                } else {                    $_SESSION['replication']['sr_action_status'] = 'success';                    $_SESSION['replication']['sr_action_info'] = sprintf(__('Master server changed successfully to %s'), htmlspecialchars($sr['hostname']));                }            }        }    } elseif (isset($GLOBALS['sr_slave_server_control'])) {        if ($GLOBALS['sr_slave_action'] == 'reset') {            PMA_replication_slave_control("STOP");            PMA_DBI_try_query("RESET SLAVE;");            PMA_replication_slave_control("START");        } else {            PMA_replication_slave_control($GLOBALS['sr_slave_action'], $GLOBALS['sr_slave_control_parm']);        }        $refresh = true;    } elseif (isset($GLOBALS['sr_slave_skip_error'])) {        $count = 1;        if (isset($GLOBALS['sr_skip_errors_count'])) {            $count = $GLOBALS['sr_skip_errors_count'] * 1;        }        PMA_replication_slave_control("STOP");        PMA_DBI_try_query("SET GLOBAL SQL_SLAVE_SKIP_COUNTER = ".$count.";");        PMA_replication_slave_control("START");    } elseif (isset($GLOBALS['sl_sync'])) {        // TODO username, host and port could be read from 'show slave status',        // when asked for a password this might work in more situations then just after changing master (where the master password is stored in session)        $src_link = PMA_replication_connect_to_master($_SESSION['replication']['m_username'], $_SESSION['replication']['m_password'], $_SESSION['replication']['m_hostname'], $_SESSION['replication']['m_port']);        $trg_link = null; // using null to indicate the current PMA server        $data = PMA_DBI_fetch_result('SHOW MASTER STATUS', null, null, $src_link); // let's find out, which databases are replicated        $do_db     = array();        $ignore_db = array();        $dblist    = array();        if (! empty($data[0]['Binlog_Do_DB'])) {            $do_db     = explode(',', $data[0]['Binlog_Do_DB']);        }        if (! empty($data[0]['Binlog_Ignore_DB'])) {            $ignore_db = explode(',', $data[0]['Binlog_Ignore_DB']);        }        $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $src_link);        while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {            if (PMA_is_system_schema($tmp_row[0])) {                continue;            }            if (count($do_db) == 0) {                if (array_search($tmp_row[0], $ignore_db) !== false) {                    continue;                }                $dblist[] = $tmp_row[0];                PMA_DBI_query('CREATE DATABASE IF NOT EXISTS '.PMA_backquote($tmp_row[0]), $trg_link);            } else {                if (array_search($tmp_row[0], $do_db) !== false) {                    $dblist[] = $tmp_row[0];                    PMA_DBI_query('CREATE DATABASE IF NOT EXISTS '.PMA_backquote($tmp_row[0]), $trg_link);                }            }        } // end while        unset($do_db, $ignore_db, $data);        if (isset($GLOBALS['repl_data'])) {            $include_data = true;        } else {            $include_data = false;        }        foreach ($dblist as $db) {            PMA_replication_synchronize_db($db, $src_link, $trg_link, $include_data);        }        // TODO some form of user feedback error/success would be nice        //  What happens if $dblist is empty?        //  or sync failed?    }    if ($refresh) {        Header("Location: ". PMA_generate_common_url($GLOBALS['url_params']));    }    unset($refresh);}/** * Displays the links */require './libraries/server_links.inc.php';echo '<div id="replication">';echo ' <h2>';echo '   ' . PMA_getImage('s_replication.png');echo     __('Replication');echo ' </h2>';// Display error messagesif (isset($_SESSION['replication']['sr_action_status']) && isset($_SESSION['replication']['sr_action_info'])) {    if ($_SESSION['replication']['sr_action_status'] == 'error') {        PMA_Message::error($_SESSION['replication']['sr_action_info'])->display();        $_SESSION['replication']['sr_action_status'] = 'unknown';    } elseif ($_SESSION['replication']['sr_action_status'] == 'success') {        PMA_Message::success($_SESSION['replication']['sr_action_info'])->display();        $_SESSION['replication']['sr_action_status'] = 'unknown';    }}if ($server_master_status) {    if (! isset($GLOBALS['repl_clear_scr'])) {        echo '<fieldset>';        echo '<legend>' . __('Master replication') . '</legend>';        echo __('This server is configured as master in a replication process.');        echo '<ul>';        echo '  <li><a href="#" id="master_status_href">' . __('Show master status') . '</a></li>';        PMA_replication_print_status_table('master', true, false);        echo '  <li><a href="#" id="master_slaves_href">' . __('Show connected slaves') . '</a></li>';        PMA_replication_print_slaves_table(true);        $_url_params = $GLOBALS['url_params'];        $_url_params['mr_adduser'] = true;        $_url_params['repl_clear_scr'] = true;        echo '  <li><a href="' . PMA_generate_common_url($_url_params) . '" id="master_addslaveuser_href">' . __('Add slave replication user') . '</a></li>';    }    // Display 'Add replication slave user' form    if (isset($GLOBALS['mr_adduser'])) {        PMA_replication_gui_master_addslaveuser();    } elseif (! isset($GLOBALS['repl_clear_scr'])) {        echo "</ul>";        echo "</fieldset>";    }} elseif (! isset($GLOBALS['mr_configure']) && ! isset($GLOBALS['repl_clear_scr'])) {    $_url_params = $GLOBALS['url_params'];    $_url_params['mr_configure'] = true;    echo '<fieldset>';    echo '<legend>' . __('Master replication') . '</legend>';    echo sprintf(__('This server is not configured as master in a replication process. Would you like to <a href="%s">configure</a> it?'), PMA_generate_common_url($_url_params));    echo '</fieldset>';}if (isset($GLOBALS['mr_configure'])) {    // Render the 'Master configuration' section    echo '<fieldset>';    echo '<legend>' . __('Master configuration') . '</legend>';    echo __('This server is not configured as master server in a replication process. You can choose from either replicating all databases and ignoring certain (useful if you want to replicate majority of databases) or you can choose to ignore all databases by default and allow only certain databases to be replicated. Please select the mode:') . '<br /><br />';    echo '<select name="db_type" id="db_type">';    echo '<option value="all">' . __('Replicate all databases; Ignore:') . '</option>';    echo '<option value="ign">' . __('Ignore all databases; Replicate:') . '</option>';    echo '</select>';    echo '<br /><br />';    echo __('Please select databases:') . '<br />';    echo PMA_replication_db_multibox();    echo '<br /><br />';    echo __('Now, add the following lines at the end of [mysqld] section in your my.cnf and please restart the MySQL server afterwards.') . '<br />';    echo '<pre id="rep"></pre>';    echo __('Once you restarted MySQL server, please click on Go button. Afterwards, you should see a message informing you, that this server <b>is</b> configured as master');    echo '</fieldset>';    echo '<fieldset class="tblFooters">';    echo ' <form method="post" action="server_replication.php" >';    echo PMA_generate_common_hidden_inputs('', '');    echo '  <input type="submit" value="' . __('Go') . '" id="goButton" />';    echo ' </form>';    echo '</fieldset>';    include './libraries/footer.inc.php';    exit;}echo '</div>';if (! isset($GLOBALS['repl_clear_scr'])) {    // Render the 'Slave configuration' section    echo '<fieldset>';    echo '<legend>' . __('Slave replication') . '</legend>';    if ($server_slave_status) {        echo '<div id="slave_configuration_gui">';        $_url_params = $GLOBALS['url_params'];        $_url_params['sr_take_action'] = true;        $_url_params['sr_slave_server_control'] = true;        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = 'IO_THREAD';        $slave_control_io_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = 'SQL_THREAD';        $slave_control_sql_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No'            || $server_slave_replication[0]['Slave_SQL_Running'] == 'No'        ) {            $_url_params['sr_slave_action'] = 'start';        } else {            $_url_params['sr_slave_action'] = 'stop';        }        $_url_params['sr_slave_control_parm'] = null;        $slave_control_full_link = PMA_generate_common_url($_url_params);        $_url_params['sr_slave_action'] = 'reset';        $slave_control_reset_link = PMA_generate_common_url($_url_params);        $_url_params = $GLOBALS['url_params'];        $_url_params['sr_slave_skip_error'] = true;        $slave_skip_error_link = PMA_generate_common_url($_url_params);        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            PMA_Message::error(__('Slave SQL Thread not running!'))->display();        }        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            PMA_Message::error(__('Slave IO Thread not running!'))->display();        }        $_url_params = $GLOBALS['url_params'];        $_url_params['sl_configure'] = true;        $_url_params['repl_clear_scr'] = true;        $reconfiguremaster_link = PMA_generate_common_url($_url_params);        echo __('Server is configured as slave in a replication process. Would you like to:');        echo '<br />';        echo '<ul>';        echo ' <li><a href="#" id="slave_status_href">' . __('See slave status table') . '</a></li>';        echo PMA_replication_print_status_table('slave', true, false);        if (isset($_SESSION['replication']['m_correct']) && $_SESSION['replication']['m_correct'] == true) {            echo ' <li><a href="#" id="slave_synchronization_href">' . __('Synchronize databases with master') . '</a></li>';            echo ' <div id="slave_synchronization_gui" style="display: none">';            echo '  <form method="post" action="server_replication.php">';            echo PMA_generate_common_hidden_inputs('', '');            echo '   <input type="checkbox" name="repl_struc" value="1" checked="checked" disabled="disabled" /> ' . __('Structure') . '<br />'; // this is just for vizualization, it has no other purpose            echo '   <input type="checkbox" name="repl_data"  value="1" checked="checked" /> ' . __('Data') .' <br />';            echo '   <input type="hidden" name="sr_take_action" value="1" />';            echo '   <input type="submit" name="sl_sync" value="' . __('Go') . '" />';            echo '  </form>';            echo ' </div>';        }        echo ' <li><a href="#" id="slave_control_href">' . __('Control slave:') . '</a>';        echo ' <div id="slave_control_gui" style="display: none">';        echo '  <ul>';        echo '   <li><a href="'. $slave_control_full_link . '">' . (($server_slave_replication[0]['Slave_IO_Running'] == 'No' || $server_slave_replication[0]['Slave_SQL_Running'] == 'No') ? __('Full start') : __('Full stop')) . ' </a></li>';        echo '   <li><a href="'. $slave_control_reset_link . '">' . __('Reset slave') . '</a></li>';        if ($server_slave_replication[0]['Slave_SQL_Running'] == 'No') {            echo '   <li><a href="' . $slave_control_sql_link . '">' . __('Start SQL Thread only') . '</a></li>';        } else {            echo '   <li><a href="' . $slave_control_sql_link . '">' . __('Stop SQL Thread only') . '</a></li>';        }        if ($server_slave_replication[0]['Slave_IO_Running'] == 'No') {            echo '   <li><a href="' . $slave_control_io_link . '">' . __('Start IO Thread only') . '</a></li>';        } else {            echo '   <li><a href="' . $slave_control_io_link . '">' . __('Stop IO Thread only') . '</a></li>';        }        echo '  </ul>';        echo ' </div>';        echo ' </li>';        echo ' <li><a href="#" id="slave_errormanagement_href">' . __('Error management:') . '</a>';        echo ' <div id="slave_errormanagement_gui" style="display: none">';        PMA_Message::error(__('Skipping errors might lead into unsynchronized master and slave!'))->display();        echo '  <ul>';        echo '   <li><a href="' . $slave_skip_error_link . '">' . __('Skip current error') . '</a></li>';        echo '   <li>' . __('Skip next');        echo '    <form method="post" action="server_replication.php">';        echo PMA_generate_common_hidden_inputs('', '');        echo '      <input type="text" name="sr_skip_errors_count" value="1" style="width: 30px" />' . __('errors.');        echo '              <input type="submit" name="sr_slave_skip_error" value="' . __('Go') . '" />';        echo '      <input type="hidden" name="sr_take_action" value="1" />';        echo '    </form></li>';        echo '  </ul>';        echo ' </div>';        echo ' </li>';        echo ' <li><a href="' . $reconfiguremaster_link . '">' . __('Change or reconfigure master server') . '</a></li>';        echo '</ul>';    } elseif (! isset($GLOBALS['sl_configure'])) {        $_url_params = $GLOBALS['url_params'];        $_url_params['sl_configure'] = true;        $_url_params['repl_clear_scr'] = true;        echo sprintf(__('This server is not configured as slave in a replication process. Would you like to <a href="%s">configure</a> it?'), PMA_generate_common_url($_url_params));    }    echo '</div>';    echo '</fieldset>';}if (isset($GLOBALS['sl_configure'])) {    PMA_replication_gui_changemaster("slave_changemaster");}require './libraries/footer.inc.php';?>
<?php/** * Theme based generator for SVG gradient. * * @package PhpMyAdmin-theme */header('Content-Type: image/svg+xml');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');function get_color($get_name, $default){    // get color from GET args, only alphanumeric chcracters    $opts = array('options' => array('regexp' => '/^[a-z0-9]+$/i'));    $color = filter_input(INPUT_GET, $get_name, FILTER_VALIDATE_REGEXP, $opts);    if (preg_match('/^[a-f0-9]{6}$/', $color)) {        return '#' . $color;    }    return $color ? $color : $default;}?><?php echo '<?xml version="1.0" ?>' ?><svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" version="1.0" width="100%" height="100%">    <defs>        <linearGradient id="linear-gradient" x1="0%" y1="0%" x2="0%" y2="100%">            <stop offset="0%" stop-color="<?php echo get_color('from', 'white') ?>" stop-opacity="1" />            <stop offset="100%" stop-color="<?php echo get_color('to', 'black') ?>" stop-opacity="1" />        </linearGradient>    </defs>    <rect width="100%" height="100%" style="fill:url(#linear-gradient);" /></svg>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-String-Native *//** * Returns length of string depending on current charset. * * @param string   string to count * @return  int      string length */function PMA_strlen($string){    return strlen($string);}/** * Returns substring from string, works depending on current charset. * * @param string $string  string to count * @param int    $start   start of substring * @param int    $length  length of substring * @return  string */function PMA_substr($string, $start, $length = 2147483647){    return substr($string, $start, $length);}/** * Returns postion of $needle in $haystack or false if not found * * @param string  $haystack * @param string  $needle * @param int     $offset * @return  integer position of $needle in $haystack or false */function PMA_strpos($haystack, $needle, $offset = 0){    return strpos($haystack, $needle, $offset);}/** * Make a string lowercase * * @param string  $string * @return  string */function PMA_strtolower($string){    return strtolower($string);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple wrapper just to enable error reporting and include config * * @package PhpMyAdmin */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';PMA_no_cache_header();header('Content-Type: text/html; charset=utf-8');require './libraries/vendor_config.php';error_reporting(E_ALL);/** * Read config file. */if (is_readable(CONFIG_FILE)) {    require CONFIG_FILE;}?>
<?php/** * Menu items * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}$separator = PMA_get_arg_separator('html');?><ul>    <li><a href="index.php"><?php echo __('Overview') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Features"><?php echo __('Features') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Sql_queries"><?php echo __('SQL queries') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Left_frame"><?php echo __('Navigation frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Main_frame"><?php echo __('Main frame') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Import"><?php echo __('Import') ?></a></li>    <li><a href="?page=form<?php echo $separator ?>formset=Export"><?php echo __('Export') ?></a></li></ul>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_image_jpeg__inline_info(){    return array(        'info' => __('Displays a clickable thumbnail. The options are the maximum width and height in pixels. The original aspect ratio is preserved.'),        );}/** * */function PMA_transformation_image_jpeg__inline($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';    if (PMA_IS_GD2) {        $transform_options = array ('string' => '<a href="transformation_wrapper.php' . $options['wrapper_link'] . '" target="_blank"><img src="transformation_wrapper.php' . $options['wrapper_link'] . '&amp;resize=jpeg&amp;newWidth=' . (isset($options[0]) ? $options[0] : '100') . '&amp;newHeight=' . (isset($options[1]) ? $options[1] : 100) . '" alt="[__BUFFER__]" border="0" /></a>');    } else {        $transform_options = array ('string' => '<img src="transformation_wrapper.php' . $options['wrapper_link'] . '" alt="[__BUFFER__]" width="320" height="240" />');    }    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as PHP Arrays * * @package PhpMyAdmin-Export * @subpackage PHP */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['php_array'] = array(        'text'          => __('PHP array'),        'extension'     => 'php',        'mime_type'     => 'text/plain',        'options'       => array(        array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),        array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(              '<?php' . $GLOBALS['crlf']            . '/**' . $GLOBALS['crlf']            . ' * Export to PHP Array plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' * @version 0.2b' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('//' . $GLOBALS['crlf'] . '// Database ' . PMA_backquote($db) . $GLOBALS['crlf'] . '//' . $GLOBALS['crlf']);        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table as a fragment of PHP code     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        // fix variable names (based on http://www.php.net/manual/language.variables.basics.php)        if (preg_match('/^[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*$/', $table) == false) {            // fix invalid chars in variable names by replacing them with underscores            $tablefixed = preg_replace('/[^a-zA-Z0-9_\x7f-\xff]/', '_', $table);            // variable name must not start with a number or dash...            if (preg_match('/^[a-zA-Z_\x7f-\xff]/', $tablefixed) == false) {                $tablefixed = '_' . $tablefixed;            }        } else {            $tablefixed = $table;        }        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= $crlf . '// ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                $buffer .= '$' . $tablefixed . ' = array(' . $crlf;                $buffer .= '  array(';            } else {                $buffer .= ',' . $crlf . '  array(';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= var_export($columns[$i], true) . " => " . var_export($record[$i], true) . (($i + 1 >= $columns_cnt) ? '' : ',');            }            $buffer .= ')';        }        $buffer .= $crlf . ');' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/** * Base class for all GIS data type classes. * * @package PhpMyAdmin-GIS */abstract class PMA_GIS_Geometry{    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public abstract function prepareRowAsSvg($spatial, $label, $color, $scale_data);    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public abstract function prepareRowAsPng($spatial, $label, $color, $scale_data, $image);    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public abstract function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf);    /**     * Prepares the JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS data object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     *     * @return the JavaScript related to a row in the GIS dataset     */    public abstract function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data);    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public abstract function scaleRow($spatial);    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public abstract function generateWkt($gis_data, $index, $empty);    /**     * Returns OpenLayers.Bounds object that correspond to the bounds of GIS data.     *     * @param string $srid       Spatial reference ID     * @param array  $scale_data Data related to scaling     *     * @return OpenLayers.Bounds object that correspond to the bounds of GIS data     */    protected function getBoundsForOl($srid, $scale_data)    {        return 'bound = new OpenLayers.Bounds(); bound.extend(new OpenLayers.LonLat('            . $scale_data['minX'] . ', ' . $scale_data['minY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject())); bound.extend(new OpenLayers.LonLat('            . $scale_data['maxX'] . ', ' . $scale_data['maxY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject()));';    }    /**     * Update the min, max values with the given point set.     *     * @param string $point_set Point set     * @param array  $min_max   Existing min, max values     *     * @return the updated min, max values     */    protected function setMinMax($point_set, $min_max)    {        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            $x = (float) $cordinates[0];            if (! isset($min_max['maxX']) || $x > $min_max['maxX']) {                $min_max['maxX'] = $x;            }            if (! isset($min_max['minX']) || $x < $min_max['minX']) {                $min_max['minX'] = $x;            }            $y = (float) $cordinates[1];            if (! isset($min_max['maxY']) || $y > $min_max['maxY']) {                $min_max['maxY'] = $y;            }            if (! isset($min_max['minY']) || $y < $min_max['minY']) {                $min_max['minY'] = $y;            }        }        return $min_max;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     * This method performs common work.     * More specific work is performed by each of the geom classes.     *     * @param $gis_string $value of the GIS column     *     * @return array parameters for the GIS editor from the value of the GIS column     */    protected function generateParams($value)    {        $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';        $srid = 0;        $wkt = '';        if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $value)) {            $last_comma = strripos($value, ",");            $srid = trim(substr($value, $last_comma + 1));            $wkt = trim(substr($value, 1, $last_comma - 2));        } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $value)) {            $wkt = $value;        }        return array('srid' => $srid, 'wkt' => $wkt);    }    /**     * Extracts points, scales and returns them as an array.     *     * @param string  $point_set  String of comma sperated points     * @param array   $scale_data Data related to scaling     * @param boolean $linear     If true, as a 1D array, else as a 2D array     *     * @return scaled points     */    protected function extractPoints($point_set, $scale_data, $linear = false)    {        $points_arr = array();        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            if (isset($cordinates[0]) && trim($cordinates[0]) != ''                && isset($cordinates[1]) && trim($cordinates[1]) != ''            ) {                if ($scale_data != null) {                    $x = ($cordinates[0] - $scale_data['x']) * $scale_data['scale'];                    $y = $scale_data['height'] - ($cordinates[1] - $scale_data['y']) * $scale_data['scale'];                } else {                    $x = trim($cordinates[0]);                    $y = trim($cordinates[1]);                }            } else {                $x = '';                $y = '';            }            if (! $linear) {                $points_arr[] = array($x, $y);            } else {                $points_arr[] = $x;                $points_arr[] = $y;            }        }        return $points_arr;    }    /**     * Generates JavaScriipt for adding points for OpenLayers polygon.     *     * @param string $polygon points of a polygon in WKT form     * @param string $srid    spatial reference id     *     * @return JavaScriipt for adding points for OpenLayers polygon     */    protected function addPointsForOpenLayersPolygon($polygon, $srid)    {        $row = 'new OpenLayers.Geometry.Polygon(new Array(';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, null);            $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point('                    . $point[0] . ', ' . $point[1] . '))'                    . '.transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= '))';        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            foreach ($parts as $ring) {                $points_arr = $this->extractPoints($ring, null);                $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';                foreach ($points_arr as $point) {                    $row .= '(new OpenLayers.Geometry.Point('                        . $point[0] . ', ' . $point[1] . '))'                        . '.transform(new OpenLayers.Projection("EPSG:'                        . $srid . '"), map.getProjectionObject()), ';                }                $row = substr($row, 0, strlen($row) - 2);                $row .= ')), ';            }            $row = substr($row, 0, strlen($row) - 2);        }        $row .= ')), ';        return $row;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as JSON * * @package PhpMyAdmin-Export * @subpackage JSON */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['json'] = array(        'text'          => 'JSON',        'extension'     => 'json',        'mime_type'     => 'text/plain',        'options'       => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),            array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(            '/**' . $GLOBALS['crlf']            . ' Export to JSON plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' @version 0.1' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('// Database \'' . $db . '\'' . $GLOBALS['crlf'] );        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in JSON format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= '// ' . $db . '.' . $table . $crlf . $crlf;                $buffer .= '[{';            } else {                $buffer .= ', {';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $isLastLine = ($i + 1 >= $columns_cnt);                $column = $columns[$i];                if (is_null($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": null' . (! $isLastLine ? ',' : '');                } elseif (is_numeric($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": ' . $record[$i] . (! $isLastLine ? ',' : '');                } else {                    $buffer .= '"' . addslashes($column) . '": "' . addslashes($record[$i]) . '"' . (! $isLastLine ? ',' : '');                }            }            $buffer .= '}';        }        if ($record_cnt) {            $buffer .=  ']';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Server synchronisation functions. * * @package PhpMyAdmin *//** * Places matching tables in source and target databases in $matching_tables * array whereas $uncommon_source_tables array gets the tables present in * source database but are absent from target database.  Criterion for * matching tables is just comparing their names. * * @param array $trg_tables              array of target database table names, * @param array $src_tables              array of source database table names, * @param array &$matching_tables        empty array passed by reference to save *                                       names of matching tables, * @param array &$uncommon_source_tables empty array passed by reference to save *                                       names of tables present in source database *                                       but absent from target database */function PMA_getMatchingTables($trg_tables, $src_tables, &$matching_tables, &$uncommon_source_tables){    for ($k=0; $k< sizeof($src_tables); $k++) {        $present_in_target = false;        for ($l=0; $l < sizeof($trg_tables); $l++) {            if ($src_tables[$k] === $trg_tables[$l]) {                $present_in_target = true;                $matching_tables[] = $src_tables[$k];            }        }        if ($present_in_target === false) {            $uncommon_source_tables[] = $src_tables[$k];        }    }}/** * Places tables present in target database but are absent from source database * * @param array $trg_tables              array of target database table names, * @param array $matching_tables         matching tables array containing names *                                       of matching tables, * @param array &$uncommon_target_tables empty array passed by reference to save *                                       names of tables presnet in target database *                                       but absent from source database */function PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, &$uncommon_target_tables){    for ($c=0; $c<sizeof($trg_tables); $c++) {        $match = false;        for ($d=0; $d < sizeof($matching_tables); $d++) {            if ($trg_tables[$c] === $matching_tables[$d]) {                $match=true;            }        }        if ($match === false) {            $uncommon_target_tables[] = $trg_tables[$c];        }    }}/** * Finds the difference in source and target matching tables by * first comparing source table's primary key entries with target table enteries. * It gets the field names for the matching table also for comparisons. * If the entry is found in target table also then it is checked for the remaining * field values also, in order to check whether update is required or not. * If update is required, it is placed in $update_array * Otherwise that entry is placed in the $insert_array. * * @param string  $src_db                  name of source database * @param string  $trg_db                  name of target database * @param db_link $src_link                connection established with source server * @param db_link $trg_link                connection established with target server * @param array   &$matching_table         array containing matching table names * @param array   &$matching_tables_fields A two dimensional array passed by reference to contain names of fields for each matching table * @param array   &$update_array           A three dimensional array passed by reference to *                                         contain updates required for each matching table * @param array   &$insert_array           A three dimensional array passed by reference to *                                         contain inserts required for each matching table * @param array   &$delete_array           Unused * @param array   &$fields_num             A two dimensional array passed by reference to *                                         contain number of fields for each matching table * @param int     $matching_table_index    Index of a table from $matching_table array * @param array   &$matching_tables_keys   A two dimensional array passed by reference to contain names of keys for each matching table */function PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, &$matching_table, &$matching_tables_fields,    &$update_array, &$insert_array, &$delete_array, &$fields_num, $matching_table_index, &$matching_tables_keys){    if (isset($matching_table[$matching_table_index])) {        $fld = array();        $fld_results = PMA_DBI_get_columns($src_db, $matching_table[$matching_table_index], null, true, $src_link);        $is_key = array();        if (isset($fld_results)) {            foreach ($fld_results as $each_field) {                $field_name = $each_field['Field'];                if ($each_field['Key'] == 'PRI') {                    $is_key[] = $field_name;                }                $fld[] = $field_name;            }        }        $matching_tables_fields[$matching_table_index] = $fld;        $fields_num[$matching_table_index] = sizeof($fld);        $matching_tables_keys[$matching_table_index] = $is_key;        $source_result_set = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $is_key, $src_link);        $source_size = sizeof($source_result_set);        $trg_fld_results = PMA_DBI_get_columns($trg_db, $matching_table[$matching_table_index], null, true, $trg_link);        $all_keys_match = true;        $trg_keys = array();        if (isset($trg_fld_results)) {            foreach ($trg_fld_results as $each_field) {                if ($each_field['Key'] == 'PRI') {                    $trg_keys[] = $each_field['Field'];                    if (! (in_array($each_field['Field'], $is_key))) {                        $all_keys_match = false;                    }                }            }        }        $update_row = 0;        $insert_row = 0;        for ($j = 0; $j < $source_size; $j++) {            $starting_index = 0;            $update_field = 0;            if (isset($source_result_set[$j]) && ($all_keys_match)) {                // Query the target server to see which rows already exist                $trg_select_query = "SELECT * FROM " . PMA_backquote($trg_db) . "."                    . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                if (sizeof($is_key) == 1) {                    $trg_select_query .= PMA_backquote($is_key[0]). "='" . $source_result_set[$j] . "'";                } elseif (sizeof($is_key) > 1) {                    for ($k=0; $k < sizeof($is_key); $k++) {                        $trg_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                        if ($k < (sizeof($is_key)-1)) {                            $trg_select_query .= " AND ";                        }                    }                }                $target_result_set = PMA_DBI_fetch_result($trg_select_query, null, null, $trg_link);                if ($target_result_set) {                    // Fetch the row from the source server to do a comparison                    $src_select_query = "SELECT * FROM " . PMA_backquote($src_db) . "."                        . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    if (sizeof($is_key) == 1) {                        $src_select_query .= PMA_backquote($is_key[0]) . "='" . $source_result_set[$j] . "'";                    } elseif (sizeof($is_key) > 1) {                        for ($k=0; $k< sizeof($is_key); $k++) {                            $src_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                            if ($k < (sizeof($is_key) - 1)) {                                $src_select_query .= " AND ";                            }                        }                    }                    $src_result_set = PMA_DBI_fetch_result($src_select_query, null, null, $src_link);                    /**                    * Comparing each corresponding field of the source and target matching rows.                    * Placing the primary key, value of primary key, field to be updated, and the                    * new value of field to be updated in each row of the update array.                    */                    for ($m = 0; ($m < $fields_num[$matching_table_index]) && ($starting_index == 0) ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (! (in_array($fld[$m], $is_key)))) {                                    if (sizeof($is_key) == 1) {                                        if ($source_result_set[$j]) {                                            $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                        }                                    } elseif (sizeof($is_key) > 1) {                                        for ($n=0; $n < sizeof($is_key); $n++) {                                            if (isset($src_result_set[0][$is_key[$n]])) {                                                $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                            }                                        }                                    }                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if (isset($src_result_set[0][$fld[$m]])) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $starting_index = $m;                                    $update_row++;                                }                            } else {                                if (sizeof($is_key) == 1) {                                    if ($source_result_set[$j]) {                                        $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                    }                                } elseif (sizeof($is_key) > 1) {                                    for ($n = 0; $n < sizeof($is_key); $n++) {                                        if (isset($src_result_set[0][$is_key[$n]])) {                                            $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                        }                                    }                                }                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if (isset($src_result_set[0][$fld[$m]])) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $starting_index = $m;                                $update_row++;                            }                        }                    }                    for ($m = $starting_index + 1; $m < $fields_num[$matching_table_index] ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (!(in_array($fld[$m], $is_key)))) {                                    $update_row--;                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if ($src_result_set[0][$fld[$m]]) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $update_row++;                                }                            } else {                                $update_row--;                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if ($src_result_set[0][$fld[$m]]) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $update_row++;                            }                        }                    }                } else {                    /**                     * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                     */                    if (sizeof($is_key) == 1) {                        if (isset($source_result_set[$j])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                        }                    } elseif (sizeof($is_key) > 1) {                        for ($l = 0; $l < sizeof($is_key); $l++) {                            if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                                $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                            }                        }                    }                    $insert_row++;                }            } else {                /**                 * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                 * This condition is met when there is an additional column in the source table                 */                if (sizeof($is_key) == 1) {                    if (isset($source_result_set[$j])) {                        $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                    }                } elseif (sizeof($is_key) > 1) {                    for ($l = 0; $l < sizeof($is_key); $l++) {                        if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                        }                    }                }                $insert_row++;            }        } // for loop ends    }}/** * Finds the rows which are to be deleted from target table. * * @param array   &$delete_array        array containing rows that are to be deleted * @param array   $matching_table       array containing matching table names * @param int     $matching_table_index index of a table from $matching_table array * @param array   $trg_keys             array of target table keys * @param array   $src_keys             array of source table keys * @param string  $trg_db               name of target database * @param db_link $trg_link             connection established with target server * @param string  $src_db               name of source database * @param db_link $src_link             connection established with source server */function PMA_findDeleteRowsFromTargetTables(&$delete_array, $matching_table, $matching_table_index, $trg_keys, $src_keys, $trg_db, $trg_link, $src_db, $src_link){    if (isset($trg_keys[$matching_table_index])) {        $target_key_values = PMA_get_column_values($trg_db, $matching_table[$matching_table_index], $trg_keys[$matching_table_index], $trg_link);    }    if (isset($src_keys[$matching_table_index])) {        $source_key_values = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $src_keys[$matching_table_index], $src_link);    }    $all_keys_match = 1;    for ($a = 0; $a < sizeof($trg_keys[$matching_table_index]); $a++) {        if (isset($trg_keys[$matching_table_index][$a])) {            if (! (in_array($trg_keys[$matching_table_index][$a], $src_keys[$matching_table_index]))) {                $all_keys_match = 0;            }        }    }    if (! ($all_keys_match)) {        if (isset($target_key_values)) {            $delete_array[$matching_table_index] = $target_key_values;        }    }    if (isset($trg_keys[$matching_table_index])) {        if ((sizeof($trg_keys[$matching_table_index]) == 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    if (! (in_array($target_key_values[$i], $source_key_values))) {                        $delete_array[$matching_table_index][$row] = $target_key_values[$i];                        $row++;                    }                }            }        } elseif ((sizeof($trg_keys[$matching_table_index]) > 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    $is_present = false;                    for ($j = 0; $j < sizeof($source_key_values) && ($is_present == false) ; $j++) {                        $check = true;                        for ($k = 0; $k < sizeof($trg_keys[$matching_table_index]); $k++) {                            if ($target_key_values[$i][$trg_keys[$matching_table_index][$k]] != $source_key_values[$j][$trg_keys[$matching_table_index][$k]]) {                                $check = false;                            }                        }                        if ($check) {                            $is_present = true;                        }                    }                    if (! ($is_present)) {                        for ($l = 0; $l < sizeof($trg_keys[$matching_table_index]); $l++) {                            $delete_array[$matching_table_index][$row][$trg_keys[$matching_table_index][$l]] = $target_key_values[$i][$trg_keys[$matching_table_index][$l]];                        }                        $row++;                    }                }            }        }    }}/** * PMA_dataDiffInUncommonTables() finds the data difference in  $source_tables_uncommon * * @param array  $source_tables_uncommon table names that are in source db and not in target db * @param string $src_db                 name of source database * @param mixed  $src_link               connection established with source server * @param int    $index                  index of a table from $matching_table array * @param array  &$row_count             number of rows * * @return nothing */function PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $index, &$row_count){    $query = "SELECT COUNT(*) FROM " . PMA_backquote($src_db) . "." . PMA_backquote($source_tables_uncommon[$index]);    $rows  = PMA_DBI_fetch_result($query, null, null, $src_link);    $row_count[$index] = $rows[0];}/** * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index] * * @param array   $table                Matching tables' names * @param array   $update_array         A three dimensional array containing field *                                      value updates required for each matching table * @param string  $src_db               Name of source database * @param string  $trg_db               Name of target database * @param mixed   $trg_link             Connection established with target server * @param int     $matching_table_index index of matching table in matching_table_array * @param array   $matching_table_keys * @param boolean $display */function PMA_updateTargetTables($table, $update_array, $src_db, $trg_db, $trg_link, $matching_table_index, $matching_table_keys, $display){    if (isset($update_array[$matching_table_index])) {        if (sizeof($update_array[$matching_table_index])) {            for ($update_row = 0; $update_row < sizeof($update_array[$matching_table_index]); $update_row++) {                if (isset($update_array[$matching_table_index][$update_row])) {                    $update_fields_num = sizeof($update_array[$matching_table_index][$update_row])-sizeof($matching_table_keys[$matching_table_index]);                    if ($update_fields_num > 0) {                        $query = "UPDATE " . PMA_backquote($trg_db) . "." .PMA_backquote($table[$matching_table_index]) . " SET ";                        for ($update_field = 0; $update_field < $update_fields_num; $update_field = $update_field+2) {                            if (isset($update_array[$matching_table_index][$update_row][$update_field]) && isset($update_array[$matching_table_index][$update_row][$update_field+1])) {                                $query .= PMA_backquote($update_array[$matching_table_index][$update_row][$update_field]) . "='" . $update_array[$matching_table_index][$update_row][$update_field+1] . "'";                            }                            if ($update_field < ($update_fields_num - 2)) {                                $query .= ", ";                            }                        }                        $query .= " WHERE ";                        if (isset($matching_table_keys[$matching_table_index])) {                            for ($key = 0; $key < sizeof($matching_table_keys[$matching_table_index]); $key++) {                                if (isset($matching_table_keys[$matching_table_index][$key])) {                                    $query .= PMA_backquote($matching_table_keys[$matching_table_index][$key]) . "='" . $update_array[$matching_table_index][$update_row][$matching_table_keys[$matching_table_index][$key]] . "'";                                }                                if ($key < (sizeof($matching_table_keys[$matching_table_index]) - 1)) {                                    $query .= " AND ";                                }                            }                        }                        $query .= ';';                        if ($display == true) {                            echo "<p>" . $query . "</p>";                        }                        PMA_DBI_try_query($query, $trg_link, 0);                    }                }            }        }    }}/** * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index] * * @todo this function uses undefined variables and is possibly broken: $matching_tables, *       $matching_tables_fields, $remove_indexes_array, $matching_table_keys * * @param array  $matching_table          matching table names * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $table_fields            field names of a table * @param array  &$array_insert * @param int    $matching_table_index    index of matching table in matching_table_array * @param array  $matching_tables_keys    field names that are keys in the matching table * @param array  $source_columns          source column information * @param array  &$add_column_array       column names that are to be added in target table * @param array  $criteria                criteria like type, null, collation, default etc * @param array  $target_tables_keys      field names that are keys in the target table * @param array  $uncommon_tables         table names that are present in source db but not in targt db * @param array  &$uncommon_tables_fields field names of the uncommon tables * @param array  $uncommon_cols           column names that are present in target table and not in source table * @param array  &$alter_str_array        column names that are to be altered * @param array  &$source_indexes         column names on which indexes are made in source table * @param array  &$target_indexes         column names on which indexes are made in target table * @param array  &$add_indexes_array      column names on which index is to be added in target table * @param array  &$alter_indexes_array    column names whose indexes are to be altered. Only index name and uniqueness of an index can be changed * @param array  &$delete_array           rows that are to be deleted * @param array  &$update_array           rows that are to be updated in target * @param bool   $display */function PMA_insertIntoTargetTable($matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, &$array_insert, $matching_table_index, $matching_tables_keys, $source_columns, &$add_column_array, $criteria, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $uncommon_cols, &$alter_str_array, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$delete_array, &$update_array, $display){    if (isset($array_insert[$matching_table_index])) {        if (sizeof($array_insert[$matching_table_index])) {            for ($insert_row = 0; $insert_row< sizeof($array_insert[$matching_table_index]); $insert_row++) {                if (isset($array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][0]])) {                    $select_query = "SELECT * FROM " . PMA_backquote($src_db) . "." . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    for ($i = 0; $i < sizeof($matching_tables_keys[$matching_table_index]); $i++) {                        $select_query .= $matching_tables_keys[$matching_table_index][$i] . "='";                        $select_query .= $array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][$i]] . "'" ;                        if ($i < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                            $select_query.= " AND ";                        }                    }                    $select_query .= "; ";                    $result = PMA_DBI_fetch_result($select_query, null, null, $src_link);                    $insert_query = "INSERT INTO " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_table[$matching_table_index]) ." (";                    for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                        $insert_query .=  PMA_backquote($table_fields[$matching_table_index][$field_index]);                        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db ."'                                         AND TABLE_NAME = '" . $matching_table[$matching_table_index]. "'AND COLUMN_NAME = '" .                                         $table_fields[$matching_table_index][$field_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;                        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $trg_link);                        if (sizeof($is_fk_result) > 0) {                            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                                $table_index = array_keys($matching_table, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                                if (isset($alter_str_array[$table_index[0]])) {                                    PMA_alterTargetTableStructure(                                        $trg_db, $trg_link, $matching_tables, $source_columns, $alter_str_array, $matching_tables_fields,                                        $criteria, $matching_tables_keys, $target_tables_keys, $table_index[0], $display                                    );                                    unset($alter_str_array[$table_index[0]]);                                }                                if (isset($uncommon_columns[$table_index[0]])) {                                    PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_index[0], $display);                                    unset($uncommon_columns[$table_index[0]]);                                }                                if (isset($add_column_array[$table_index[0]])) {                                    PMA_findDeleteRowsFromTargetTables(                                        $delete_array, $matching_tables, $table_index[0], $target_tables_keys,                                        $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link                                    );                                    if (isset($delete_array[$table_index[0]])) {                                        PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index[0], $target_tables_keys, $delete_array, $display);                                        unset($delete_array[$table_index[0]]);                                    }                                    PMA_addColumnsInTargetTable(                                        $src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, $add_column_array,                                        $matching_tables_fields, $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables,                                        $uncommon_tables_fields, $table_index[0], $uncommon_cols, $display                                    );                                    unset($add_column_array[$table_index[0]]);                                }                                if (isset($add_indexes_array[$table_index[0]])                                    || isset($remove_indexes_array[$table_index[0]])                                    || isset($alter_indexes_array[$table_index[0]])                                ) {                                    PMA_applyIndexesDiff(                                        $trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array,                                        $alter_indexes_array, $remove_indexes_array, $table_index[0], $display                                    );                                    unset($add_indexes_array[$table_index[0]]);                                    unset($alter_indexes_array[$table_index[0]]);                                    unset($remove_indexes_array[$table_index[0]]);                                }                                if (isset($update_array[$table_index[0]])) {                                    PMA_updateTargetTables(                                        $matching_tables, $update_array, $src_db, $trg_db, $trg_link,                                        $table_index[0], $matching_table_keys, $display                                    );                                    unset($update_array[$table_index[0]]);                                }                                if (isset($array_insert[$table_index[0]])) {                                     PMA_insertIntoTargetTable(                                         $matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, $array_insert, $table_index[0],                                         $matching_tables_keys, $source_columns, $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,                                         $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes, $target_indexes, $add_indexes_array,                                         $alter_indexes_array, $delete_array, $update_array, $display                                     );                                     unset($array_insert[$table_index[0]]);                                }                            }                        }                        if ($field_index < sizeof($table_fields[$matching_table_index])-1) {                            $insert_query .= ", ";                        }                    }                    $insert_query .= ") VALUES(";                    if (sizeof($table_fields[$matching_table_index]) == 1) {                         $insert_query .= "'" . PMA_sqlAddSlashes($result[0]) . "'";                    } else {                        for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                            if (isset($result[0][$table_fields[$matching_table_index][$field_index]])) {                                $insert_query .= "'" . PMA_sqlAddSlashes($result[0][$table_fields[$matching_table_index][$field_index]]) . "'";                            } else {                                $insert_query .= "'NULL'";                            }                            if ($field_index < (sizeof($table_fields[$matching_table_index])) - 1) {                                    $insert_query .= " ," ;                            }                        }                    }                    $insert_query .= ");";                    if ($display == true) {                        PMA_displayQuery($insert_query);                    }                    PMA_DBI_try_query($insert_query, $trg_link, 0);                }            }        }    }}/** * PMA_createTargetTables() Create the missing table $uncommon_table in target database * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  &$uncommon_tables        names of tables present in source but not in target * @param int    $table_index             index of table in $uncommon_tables array * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, &$uncommon_tables, $table_index, &$uncommon_tables_fields, $display){    if (isset($uncommon_tables[$table_index])) {        $fields_result = PMA_DBI_get_columns($src_db, $uncommon_tables[$table_index], null, true, $src_link);        $fields = array();        foreach ($fields_result as $each_field) {            $field_name = $each_field['Field'];            $fields[] = $field_name;        }        $uncommon_tables_fields[$table_index] = $fields;        $Create_Query = PMA_DBI_fetch_value("SHOW CREATE TABLE " . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), 0, 1, $src_link);        // Replace the src table name with a `dbname`.`tablename`        $Create_Table_Query = preg_replace('/' . preg_quote(PMA_backquote($uncommon_tables[$table_index]), '/') . '/',                                            PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]),                                            $Create_Query,                                            $limit = 1        );        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                        AND TABLE_NAME = '" . $uncommon_tables[$table_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);        if (sizeof($is_fk_result) > 0) {            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }            }        }        $Create_Table_Query .= ';';        if ($display == true) {            echo '<p>' . $Create_Table_Query . '</p>';        }        PMA_DBI_try_query($Create_Table_Query, $trg_link, 0);    }}/** * PMA_populateTargetTables() inserts data into uncommon tables after they have been created * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db) * @param int    $table_index            index of table in matching_table_array * @param array  $uncommon_tables_fields field names of the uncommon table * @param bool   $display * * @todo This turns NULL values into '' (empty string) */function PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $uncommon_tables, $table_index, $uncommon_tables_fields, $display){    $display = false; // todo: maybe display some of the queries if they are not too numerous    $unbuffered_result = PMA_DBI_try_query('SELECT * FROM ' . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), $src_link, PMA_DBI_QUERY_UNBUFFERED);    if (false !== $unbuffered_result) {        $insert_query = 'INSERT INTO ' . PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]) . ' VALUES';        while ($one_row = PMA_DBI_fetch_row($unbuffered_result)) {            $insert_query .= '(';            $key_of_last_value = count($one_row) - 1;            foreach ($one_row as $key => $value) {                $insert_query .= "'" . PMA_sqlAddSlashes($value) . "'";                if ($key < $key_of_last_value) {                    $insert_query .= ",";                }            }            $insert_query .= '),';        }        $insert_query = substr($insert_query, 0, -1);        $insert_query .= ';';        if ($display == true) {            PMA_displayQuery($insert_query);        }        PMA_DBI_try_query($insert_query, $trg_link, 0);    }}/** * PMA_deleteFromTargetTable() delete rows from target table * * @param string $trg_db             name of target database * @param mixed  $trg_link           connection established with target server * @param array  $matching_tables    matching table names * @param int    $table_index        index of table in matching_table_array * @param array  $target_tables_keys primary key names of the target tables * @param array  $delete_array       key values of rows that are to be deleted * @param bool   $display */function PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index, $target_tables_keys, $delete_array, $display){    for ($i = 0; $i < sizeof($delete_array[$table_index]); $i++) {        if (isset($target_tables_keys[$table_index])) {            $delete_query = 'DELETE FROM ' . PMA_backquote($trg_db) . '.' .PMA_backquote($matching_tables[$table_index]) . ' WHERE ';            for ($y = 0; $y < sizeof($target_tables_keys[$table_index]); $y++) {                $delete_query .= PMA_backquote($target_tables_keys[$table_index][$y]) . " = '";                if (sizeof($target_tables_keys[$table_index]) == 1) {                    $delete_query .= $delete_array[$table_index][$i] . "'";                } elseif (sizeof($target_tables_keys[$table_index]) > 1) {                    $delete_query .= $delete_array[$table_index][$i][$target_tables_keys[$table_index][$y]] . "'";                }                if ($y < (sizeof($target_tables_keys[$table_index]) - 1)) {                    $delete_query .= ' AND ';                }                $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                            AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_index]."' AND REFERENCED_COLUMN_NAME = '"                           . $target_tables_keys[$table_index][$y] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";                $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);                $result_size = sizeof($pk_query_result);                if ($result_size > 0) {                    for ($b = 0; $b < $result_size; $b++) {                        $drop_pk_query = "DELETE FROM " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . " WHERE " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . " = " . $target_tables_keys[$table_index][$y] . ";";                        PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                    }                }            }        }        if ($display == true) {            echo '<p>' . $delete_query . '</p>';        }        PMA_DBI_try_query($delete_query, $trg_link, 0);    }}/** * PMA_structureDiffInTables() Gets all the column information for source and target table. * Compare columns on their names. * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column. * If column does not exist in target table then it is placed in  $add_column_array. * If column exists in target table but criteria is different then it is palced in $alter_str_array. * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns. * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys. * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys. * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source tables * @param array  &$target_columns        columns information of the target tables * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target *                                       column have some criteria different and third index containing the criteria which is different. * @param array  &$add_column_array      two dimensional associative array, first index of the array contain the matching table number and second index contain the *                                       column name which is to be added in the target table * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table */function PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_columns, &$target_columns, &$alter_str_array, &$add_column_array, &$uncommon_columns, $criteria, &$target_tables_keys, $matching_table_index){    //Gets column information for source and target table    $source_columns[$matching_table_index] = PMA_DBI_get_columns_full($src_db, $matching_tables[$matching_table_index], null, $src_link);    $target_columns[$matching_table_index] = PMA_DBI_get_columns_full($trg_db, $matching_tables[$matching_table_index], null, $trg_link);    foreach ($source_columns[$matching_table_index] as $column_name => $each_column) {        if (isset($target_columns[$matching_table_index][$column_name]['Field'])) {            //If column exists in target table then matches criteria like type, null, collation, key, default, comment of the column            for ($i = 0; $i < sizeof($criteria); $i++) {                if ($source_columns[$matching_table_index][$column_name][$criteria[$i]] != $target_columns[$matching_table_index][$column_name][$criteria[$i]]) {                    if (($criteria[$i] == 'Default') && ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == '' )) {                        $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = 'None';                    } else {                        if (! (($criteria[$i] == 'Key') && (($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')))                        ) {                            $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = $source_columns[$matching_table_index][$column_name][$criteria[$i]];                        }                    }                }            }        } else {            $add_column_array[$matching_table_index][$column_name]= $column_name;        }    }    //Finds column names that are present in target table but not in source table    foreach ($target_columns[$matching_table_index] as $fld_name => $each_column) {        if (! (isset($source_columns[$matching_table_index][$fld_name]['Field']))) {            $fields_uncommon[] = $fld_name;        }        if ($target_columns[$matching_table_index][$fld_name]['Key'] == 'PRI') {            $keys[] = $fld_name;        }    }    if (isset($fields_uncommon)) {        $uncommon_columns[$matching_table_index] = $fields_uncommon;    }    if (isset($keys)) {        $target_tables_keys[$matching_table_index] = $keys;    }}/** * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $matching_tables         names of matching tables * @param array  $source_columns          columns information of the source tables * @param array  &$add_column_array       the names of the column(field) that are to be added in the target * @param array  $matching_tables_fields * @param array  $criteria                criteria * @param array  $matching_tables_keys    field names which is key in the source table * @param array  $target_tables_keys      field names which is key in the target table * @param array  $uncommon_tables         table names that are present in source db and not in target db * @param array  &$uncommon_tables_fields names of the fields of the uncommon tables * @param int    $table_counter           number of the matching table * @param array  $uncommon_cols * @param bool   $display */function PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, &$add_column_array, $matching_tables_fields,         $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $table_counter, $uncommon_cols, $display){    for ($i = 0; $i < sizeof($matching_tables_fields[$table_counter]); $i++) {        if (isset($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]])) {            $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]). " ADD COLUMN " .            PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . " " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Type'];            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'NO') {                $query .= ' Not Null ';            } elseif ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'YES') {                $query .= ' Null ';            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'] != '') {                $query .= ' COLLATE ' . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'] != '') {                $query .= " DEFAULT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'] != '') {                $query .= " COMMENT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Key'] == 'PRI' ) {                $trg_key_size = sizeof($target_tables_keys[$table_counter]);                if ($trg_key_size) {                    $check = true;                    for ($a = 0; ($a < $trg_key_size) && ($check); $a++) {                        if (! (in_array($target_tables_keys[$table_counter], $uncommon_cols))) {                             $check = false;                        }                    }                    if (! $check) {                        $query .= " ,DROP PRIMARY KEY " ;                    }                }                $query .= " , ADD PRIMARY KEY (";                for ($t = 0; $t < sizeof($matching_tables_keys[$table_counter]); $t++) {                    $query .= PMA_backquote($matching_tables_keys[$table_counter][$t]);                    if ($t < (sizeof($matching_tables_keys[$table_counter]) - 1)) {                        $query .= " , " ;                    }                }                $query .= ")";            }            $query .= ";";            if ($display == true) {                echo '<p>' . $query . '</p>';            }            PMA_DBI_try_query($query, $trg_link, 0);            //Checks if column to be added is a foreign key or not            $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"            . $matching_tables[$table_counter] . "' AND COLUMN_NAME ='" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] .            "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);            //If column is a foreign key then it is checked that referenced table exist in target db. If referenced table does not exist in target db then            //it is created first.            if (isset($is_fk_result)) {                if (in_array($is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[0]['REFERENCED_TABLE_NAME']);                    PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables, $uncommon_tables_fields, $display);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }                $fk_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]) .                            "ADD CONSTRAINT FOREIGN KEY " . PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . "                            (" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] . ") REFERENCES " . PMA_backquote($trg_db) .                             '.' . PMA_backquote($is_fk_result[0]['REFERENCED_TABLE_NAME']) . " (" . $is_fk_result[0]['REFERENCED_COLUMN_NAME'] . ");";                PMA_DBI_try_query($fk_query, $trg_link, null);            }        }    }}/** * PMA_checkForeignKeys() checks if the referenced table have foreign keys. * uses    PMA_createTargetTables() * * @param string $src_db                  name of source database * @param mixed  $src_link                connection established with source server * @param string $trg_db                  name of target database * @param mixed  $trg_link                connection established with target server * @param string $referenced_table        table whose column is a foreign key in another table * @param array  &$uncommon_tables        names that are uncommon * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $referenced_table, &$uncommon_tables, &$uncommon_tables_fields, $display){    $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                    AND TABLE_NAME = '" . $referenced_table . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";    $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);    if (sizeof($is_fk_result) > 0) {        for ($j = 0; $j < sizeof($is_fk_result); $j++) {            if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                PMA_checkForeignKeys(                    $src_db, $src_link, $trg_db, $trg_link, $is_fk_result[$j]['REFERENCED_TABLE_NAME'],                    $uncommon_tables, $uncommon_tables_fields, $display                );                PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                unset($uncommon_tables[$table_index[0]]);            }        }    }}/** * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array * * @param string $trg_db                 name of target database * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source table * @param array  &$alter_str_array       column name and criteria which is to be altered for the targert table * @param array  $matching_tables_fields name of the fields for the matching table * @param array  $criteria               criteria * @param array  &$matching_tables_keys  field names which is key in the source table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table * @param bool   $display */function PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables, &$source_columns, &$alter_str_array, $matching_tables_fields, $criteria, &$matching_tables_keys, &$target_tables_keys, $matching_table_index, $display){    $check = true;    $sql_query = '';    $found = false;    //Checks if the criteria to be altered is primary key    for ($v = 0; $v < sizeof($matching_tables_fields[$matching_table_index]); $v++) {        if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'])) {            if ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'] == 'PRI' ) {                $check = false;            }        }    }    $pri_query = null;    if (! $check) {        $pri_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);        if (sizeof($target_tables_keys[$matching_table_index]) > 0) {            $pri_query .= "  DROP PRIMARY KEY ," ;        }        $pri_query .= "  ADD PRIMARY KEY (";        for ($z = 0; $z < sizeof($matching_tables_keys[$matching_table_index]); $z++) {            $pri_query .= PMA_backquote($matching_tables_keys[$matching_table_index][$z]);            if ($z < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $pri_query .= " , " ;            }        }        $pri_query .= ");";    }    if (isset($pri_query)) {        if ($display == true) {            echo '<p>' . $pri_query . '</p>';        }        PMA_DBI_try_query($pri_query, $trg_link, 0);    }    for ($t = 0; $t < sizeof($matching_tables_fields[$matching_table_index]); $t++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]])) && (sizeof($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]) > 0)) {            $sql_query = 'ALTER TABLE ' . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]) . ' MODIFY ' .            PMA_backquote($matching_tables_fields[$matching_table_index][$t]) . ' ' . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'];            $found = false;            for ($i = 0; $i < sizeof($criteria); $i++) {                if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]]) && $criteria[$i] != 'Key') {                    $found = true;                    if (($criteria[$i] == 'Type') && (! isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i+1]]))) {                        if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'NO') {                            $sql_query .= " Not Null" ;                        } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'YES') {                            $sql_query .= " Null" ;                        }                    }                    if (($criteria[$i] == 'Null') && ( $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'NO')) {                        $sql_query .= " Not Null "  ;                    } elseif (($criteria[$i] == 'Null') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'YES')) {                        $sql_query .= " Null "  ;                    }                    if ($criteria[$i] == 'Collation') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COLLATE " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] ;                    }                    if (($criteria[$i] == 'Default') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'None')) {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                    } elseif ($criteria[$i] == 'Default') {                        if (! (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        if (is_string($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] != 'timestamp') {                                $sql_query .=  " DEFAULT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'";                            } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] == 'timestamp') {                                $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                            }                        } elseif (is_numeric($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                        }                    }                    if ($criteria[$i] == 'Comment') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COMMENT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'" ;                    }                }            }        }        $sql_query .= ";";        if ($found) {            if ($display == true) {                echo '<p>' . $sql_query . '</p>';            }            PMA_DBI_try_query($sql_query, $trg_link, 0);        }    }    $check = false;    $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);    for ($p = 0; $p < sizeof($matching_tables_keys[$matching_table_index]); $p++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_keys[$matching_table_index][$p]]['Key']))) {            $check = true;            $query .= ' MODIFY ' . PMA_backquote($matching_tables_keys[$matching_table_index][$p]) . ' '            . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$p]]['Type'] . ' Not Null ';            if ($p < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $query .= ', ';            }        }    }    $query .= ';';    if ($check) {        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }}/** * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table. * * @param string $trg_db           name of target database * @param mixed  $trg_link         connection established with target server * @param array  $matching_tables  names of matching tables * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table * @param int    $table_counter    index of the matching table as in $matchiing_tables array * @param bool   $display */function PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_counter, $display){    if (isset($uncommon_columns[$table_counter])) {        $drop_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($uncommon_columns[$table_counter]); $a++) {            //Checks if column to be removed is a foreign key in any table            $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                         AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_counter]."' AND REFERENCED_COLUMN_NAME = '"                         . $uncommon_columns[$table_counter][$a] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);            $result_size = sizeof($pk_query_result);            if ($result_size > 0) {                for ($b = 0; $b < $result_size; $b++) {                    $drop_pk_query = "ALTER TABLE " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . "                                      DROP FOREIGN KEY " . PMA_backquote($pk_query_result[$b]['CONSTRAINT_NAME']) . ", DROP COLUMN " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . ";";                    PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                }            }            $query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"                     . $matching_tables[$table_counter]. "' AND COLUMN_NAME = '" . $uncommon_columns[$table_counter][$a] . "'                      AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $result = PMA_DBI_fetch_result($query, null, null, $trg_link);            if (sizeof($result) > 0) {                $drop_query .= " DROP FOREIGN KEY " . PMA_backquote($result[0]['CONSTRAINT_NAME']) . ",";            }            $drop_query .=  " DROP COLUMN " . PMA_backquote($uncommon_columns[$table_counter][$a]);            if ($a < (sizeof($uncommon_columns[$table_counter]) - 1)) {                $drop_query .= " , " ;            }        }        $drop_query .= ";" ;        if ($display == true) {            echo '<p>' . $drop_query . '</p>';        }        PMA_DBI_try_query($drop_query, $trg_link, 0);    }}/** * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array. * Only keyname and uniqueness characteristic of the indexes are altered. * * @param string $src_db                name of source database * @param string $trg_db                name of target database * @param mixed  $src_link              connection established with source server * @param mixed  $trg_link              connection established with target server * @param array  $matching_tables       matching tables name * @param array  &$source_indexes       indexes of the source table * @param array  &$target_indexes       indexes of the target table * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table * @param array  &$alter_indexes_array  key name which needs to be altered * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table * @param int    $table_counter         number of the matching table */function PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$remove_indexes_array, $table_counter){    //Gets indexes information for source and target table    $source_indexes[$table_counter] = PMA_DBI_get_table_indexes($src_db, $matching_tables[$table_counter], $src_link);    $target_indexes[$table_counter] = PMA_DBI_get_table_indexes($trg_db, $matching_tables[$table_counter], $trg_link);    for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {        $found = false;        $z = 0;        //Compares key name and non_unique characteristic of source indexes with target indexes        /*         * @todo compare the length of each sub part         */        while (($z <= sizeof($target_indexes[$table_counter])) && ($found == false)) {            if (isset($source_indexes[$table_counter][$a]) && isset($target_indexes[$table_counter][$z]) && $source_indexes[$table_counter][$a]['Key_name'] == $target_indexes[$table_counter][$z]['Key_name']) {                $found = true;                if (($source_indexes[$table_counter][$a]['Column_name'] != $target_indexes[$table_counter][$z]['Column_name']) || ($source_indexes[$table_counter][$a]['Non_unique'] != $target_indexes[$table_counter][$z]['Non_unique'])) {                    if (! (($source_indexes[$table_counter][$a]['Key_name'] == "PRIMARY") || ($target_indexes[$table_counter][$z]['Key_name'] == 'PRIMARY'))) {                        $alter_indexes_array[$table_counter][] = $source_indexes[$table_counter][$a]['Key_name'];                    }                }            }            $z++;        }        if ($found === false) {            if (! ($source_indexes[$table_counter][$a]['Key_name'] == 'PRIMARY')) {                $add_indexes_array [$table_counter][] = $source_indexes[$table_counter][$a]['Column_name'];            }        }    }    //Finds indexes that exist on target table but not on source table    for ($b = 0; $b < sizeof($target_indexes[$table_counter]); $b++) {        $found = false;        $c = 0;        while (($c <= sizeof($source_indexes[$table_counter])) && ($found == false)) {            if ($target_indexes[$table_counter][$b]['Column_name'] == $source_indexes[$table_counter][$c]['Column_name']) {                $found = true;            }            $c++;        }        if ($found === false) {            $remove_indexes_array[$table_counter][] = $target_indexes[$table_counter][$b]['Key_name'];        }    }}/** * PMA_applyIndexesDiff() create indexes, alters indexes and remove indexes. * * @param string $trg_db               name of target database * @param mixed  $trg_link             connection established with target server * @param array  $matching_tables      matching tables name * @param array  $source_indexes       indexes of the source table * @param array  $target_indexes       indexes of the target table * @param array  $add_indexes_array    column names on which indexes are to be created in target table * @param array  $alter_indexes_array  column names for which indexes are to be altered * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table * @param int    $table_counter        number of the matching table * @param $display */function PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array, $alter_indexes_array,          $remove_indexes_array, $table_counter, $display){    //Adds indexes on target table    if (isset($add_indexes_array[$table_counter])) {        $sql = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]) . " ADD" ;        for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {            if (isset($add_indexes_array[$table_counter][$a])) {                for ($b = 0; $b < sizeof($source_indexes[$table_counter]); $b++) {                    if ($source_indexes[$table_counter][$b]['Column_name'] == $add_indexes_array[$table_counter][$a]) {                        if ($source_indexes[$table_counter][$b]['Non_unique'] == '0') {                            $sql .= " UNIQUE ";                        }                        $sql .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$b]['Key_name']) . " (" . $add_indexes_array[$table_counter][$a] . " );";                        if ($display == true) {                            echo '<p>' . $sql . '</p>';                        }                        PMA_DBI_try_query($sql, $trg_link, 0);                    }                }            }        }    }    //Alter indexes of target table    if (isset($alter_indexes_array[$table_counter])) {        $query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($alter_indexes_array[$table_counter]); $a++) {            if (isset($alter_indexes_array[$table_counter][$a])) {                $query .= ' DROP INDEX ' . PMA_backquote($alter_indexes_array[$table_counter][$a]) . " , ADD ";                $got_first_index_column = false;                for ($z = 0; $z < sizeof($source_indexes[$table_counter]); $z++) {                    if ($source_indexes[$table_counter][$z]['Key_name'] == $alter_indexes_array[$table_counter][$a]) {                        if (! $got_first_index_column) {                            if ($source_indexes[$table_counter][$z]['Non_unique'] == '0') {                                $query .= " UNIQUE ";                            }                            $query .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$z]['Key_name']) . " (" . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                            $got_first_index_column = true;                        } else {                            // another column for this index                            $query .= ', ' . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                        }                    }                }                $query .= " )";            }        }        $query .= ';';        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }    //Removes indexes from target table    if (isset($remove_indexes_array[$table_counter])) {        $drop_index_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($target_indexes[$table_counter]); $a++) {            if (isset($remove_indexes_array[$table_counter][$a])) {                $drop_index_query .= " DROP INDEX " . PMA_backquote($remove_indexes_array[$table_counter][$a]);            }            if ($a < (sizeof($remove_indexes_array[$table_counter]) - 1)) {                $drop_index_query .= " , " ;            }        }        $drop_index_query .= " ; " ;        if ($display == true) {            echo '<p>' . $drop_index_query . '</p>';        }        PMA_DBI_try_query($drop_index_query, $trg_link, 0);    }}/** * PMA_displayQuery() displays a query, taking the maximum display size * into account * * @param string $query the query to display * * @return nothing */function PMA_displayQuery($query){    if (strlen($query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        $query = substr($query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';    }    echo '<p>' . htmlspecialchars($query) . '</p>';}/** * PMA_syncDisplayHeaderCompare() shows the header for source database * * @param string $src_db source db name * @param string $trg_db target db name * * @return nothing */function PMA_syncDisplayHeaderCompare($src_db, $trg_db){    echo '<fieldset style="padding:0"><div style="padding:1.5em; overflow:auto; height:220px">';    echo '<table class="data">';    echo '<tr>';    echo '<th>' . __('Source database') . ':  ' . htmlspecialchars($src_db) . '<br />(';    if ('cur' == $_SESSION['src_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['src_server']['host']);    }    echo ')</th>';    echo '<th>' . __('Difference') . '</th>';    echo '<th>' . __('Target database') . ':  '. htmlspecialchars($trg_db) . '<br />(';    if ('cur' == $_SESSION['trg_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['trg_server']['host']);    }    echo ')</th>';    echo '</tr>';}/** * Prints table row * * $rows contains following keys: * - src_table_name - source server table name * - dst_table_name - target server table name * - btn_type - 'M' or 'U' * - btn_structure - null or arguments for showDetails in server_synchronize.js (without img_obj and table_name): *                       i, update_size, insert_size, remove_size, insert_index, remove_index * * @param array $rows */function PMA_syncDisplayDataCompare($rows){    global $pmaThemeImage;    $odd_row = true;    foreach ($rows as $row) {        echo '<tr class=" ' . ($odd_row ? 'odd' : 'even') . '">';        echo '<td>' . htmlspecialchars($row['src_table_name']) . '</td><td style="text-align:center">';        if (isset($row['btn_structure']) && $row['btn_structure']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_structure'];            $p[0] = $row['btn_type'] . 'S' . $p[0];            echo '<img class="icon struct_img" src="' . $pmaThemeImage . 'new_struct.png" width="16" height="16"                 alt="Structure" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                 . "'" . implode($p, "','") . "'"                 . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" /> ';        }        if (isset($row['btn_data']) && $row['btn_data']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_data'];            $p[0] = $row['btn_type'] . 'D' . $p[0];            echo '<img class="icon data_img" src="' . $pmaThemeImage . 'new_data.png" width="16" height="16"                alt="Data" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                . "'" . implode($p, "','") . "'"                . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" />';        }        echo '</td><td>' . htmlspecialchars($row['dst_table_name']) . '</td></tr>';        $odd_row = !$odd_row;    }}/** * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null) * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of the column to retrieve data from * @param mixed  $link     mysql link resource * * @return array $field_values */function PMA_get_column_values($database, $table, $column, $link = null){    $query = 'SELECT ';    for ($i=0; $i< sizeof($column); $i++) {        $query.= PMA_backquote($column[$i]);        if ($i < (sizeof($column)-1)) {            $query.= ', ';        }    }    $query.= ' FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    $field_values = PMA_DBI_fetch_result($query, null, null, $link);    if (! is_array($field_values) || count($field_values) < 1) {        return false;    }    return $field_values;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Ensure the database and the table exist (else move to the "parent" script) * and display headers * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}if (empty($is_db)) {    if (strlen($db)) {        $is_db = @PMA_DBI_select_db($db);    } else {        $is_db = false;    }    if (! $is_db) {        // not a valid db name -> back to the welcome page        if (! defined('IS_TRANSFORMATION_WRAPPER')) {            $url_params = array('reload' => 1);            if (isset($message)) {                $url_params['message'] = $message;            }            if (! empty($sql_query)) {                $url_params['sql_query'] = $sql_query;            }            if (isset($show_as_php)) {                $url_params['show_as_php'] = $show_as_php;            }            PMA_sendHeaderLocation(                $cfg['PmaAbsoluteUri'] . 'main.php'                    . PMA_generate_common_url($url_params, '&'));        }        exit;    }} // end if (ensures db exists)if (empty($is_table) && !defined('PMA_SUBMIT_MULT') && ! defined('TABLE_MAY_BE_ABSENT')) {    // Not a valid table name -> back to the db_sql.php    if (strlen($table)) {        $is_table = isset(PMA_Table::$cache[$db][$table]);        if (! $is_table) {            $_result = PMA_DBI_try_query(                'SHOW TABLES LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';',                null, PMA_DBI_QUERY_STORE);            $is_table = @PMA_DBI_num_rows($_result);            PMA_DBI_free_result($_result);        }    } else {        $is_table = false;    }    if (! $is_table) {        if (! defined('IS_TRANSFORMATION_WRAPPER')) {            if (strlen($table)) {                // SHOW TABLES doesn't show temporary tables, so try select                // (as it can happen just in case temporary table, it should be                // fast):                /**                 * @todo should this check really only happen if IS_TRANSFORMATION_WRAPPER?                 */                $_result = PMA_DBI_try_query(                    'SELECT COUNT(*) FROM ' . PMA_backquote($table) . ';',                    null, PMA_DBI_QUERY_STORE);                $is_table = ($_result && @PMA_DBI_num_rows($_result));                PMA_DBI_free_result($_result);            }            if (! $is_table) {                include './db_sql.php';                exit;            }        }        if (! $is_table) {            exit;        }    }} // end if (ensures table exists)?>
<?php/** * This example configuration shows how to configure phpMyAdmin for * many hosts that all have identical configuration otherwise. To add * a new host, just drop it into $hosts below. Contributed by * Matthew Hawkins. */$i=0;$hosts = array (    "foo.example.com",    "bar.example.com",    "baz.example.com",    "quux.example.com",);foreach ($hosts as $host) {    $i++;    $cfg['Servers'][$i]['host']     = $host;    $cfg['Servers'][$i]['port']     = '';    $cfg['Servers'][$i]['socket']   = '';    $cfg['Servers'][$i]['connect_type']     = 'tcp';    $cfg['Servers'][$i]['extension']        = 'mysql';    $cfg['Servers'][$i]['compress'] = FALSE;    $cfg['Servers'][$i]['controluser']      = 'pma';    $cfg['Servers'][$i]['controlpass']      = 'pmapass';    $cfg['Servers'][$i]['auth_type']        = 'cookie';    $cfg['Servers'][$i]['user']     = '';    $cfg['Servers'][$i]['password'] = '';    $cfg['Servers'][$i]['only_db']  = '';    $cfg['Servers'][$i]['verbose']  = '';    $cfg['Servers'][$i]['pmadb']    = 'phpmyadmin';    $cfg['Servers'][$i]['bookmarktable']    = 'pma_bookmark';    $cfg['Servers'][$i]['relation'] = 'pma_relation';    $cfg['Servers'][$i]['table_info']       = 'pma_table_info';    $cfg['Servers'][$i]['table_coords']     = 'pma_table_coords';    $cfg['Servers'][$i]['pdf_pages']        = 'pma_pdf_pages';    $cfg['Servers'][$i]['column_info']      = 'pma_column_info';    $cfg['Servers'][$i]['history']  = 'pma_history';    $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Javascript escaping functions. * * @package PhpMyAdmin * *//** * Format a string so it can be a string inside JavaScript code inside an * eventhandler (onclick, onchange, on..., ). * This function is used to displays a javascript confirmation box for * "DROP/DELETE/ALTER" queries. * * @param string   $a_string          the string to format * @param boolean  $add_backquotes    whether to add backquotes to the string or not * * @return  string   the formatted string * * @access  public */function PMA_jsFormat($a_string = '', $add_backquotes = true){    if (is_string($a_string)) {        $a_string = htmlspecialchars($a_string);        $a_string = PMA_escapeJsString($a_string);        // Needed for inline javascript to prevent some browsers        // treating it as a anchor        $a_string = str_replace('#', '\\#', $a_string);    }    return (($add_backquotes) ? PMA_backquote($a_string) : $a_string);} // end of the 'PMA_jsFormat()' function/** * escapes a string to be inserted as string a JavaScript block * enclosed by <![CDATA[ ... ]]> * this requires only to escape ' with \' and end of script block * * We also remove NUL byte as some browsers (namely MSIE) ignore it and * inserting it anywhere inside </script would allow to bypass this check. * * @param string  $string the string to be escaped * @return  string  the escaped string */function PMA_escapeJsString($string){    return preg_replace('@</script@i', '</\' + \'script',                        strtr($string, array(                                "\000" => '',                                '\\' => '\\\\',                                '\'' => '\\\'',                                '"' => '\"',                                "\n" => '\n',                                "\r" => '\r')));}/** * Formats a value for javascript code. * * @param string $value String to be formatted. * * @retrun string formatted value. */function PMA_formatJsVal($value){    if (is_bool($value)) {        if ($value) {            return 'true';        } else {            return 'false';        }    } elseif (is_int($value)) {        return (int)$value;    } else {        return '"' . PMA_escapeJsString($value) . '"';    }}/** * Formats an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * * @return string Javascript code. */function PMA_getJsValue($key, $value, $escape = true){    $result = $key . ' = ';    if (!$escape) {        $result .= $value;    } elseif (is_array($value)) {        $result .= '[';        foreach ($value as $id => $val) {            $result .= PMA_formatJsVal($val) . ",";        }        $result .= "];\n";    } else {        $result .= PMA_formatJsVal($value) . ";\n";    }    return $result;}/** * Prints an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key Name of value to set * @param mixed $value Value to set, can be either string or array of strings * * @return nothing */function PMA_printJsValue($key, $value){    echo PMA_getJsValue($key, $value);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This function is used to retreive some language strings that are used * in functionalities that are common to routines, triggers and events. * * @param   string  $index   The index of the string to get * * @return  string  The requested string or an empty string, if not available */function PMA_RTE_getWord($index){    global $_PMA_RTE;    switch ($_PMA_RTE) {    case 'RTN':        $words = array(            'add'       => __('Add routine'),            'docu'      => 'STORED_ROUTINES',            'export'    => __('Export of routine %s'),            'human'     => __('routine'),            'no_create' => __('You do not have the necessary privileges to create a routine'),            'not_found' => __('No routine with name %1$s found in database %2$s'),            'nothing'   => __('There are no routines to display.'),            'title'     => __('Routines'),        );        break;    case 'TRI':        $words = array(            'add'       => __('Add trigger'),            'docu'      => 'TRIGGERS',            'export'    => __('Export of trigger %s'),            'human'     => __('trigger'),            'no_create' => __('You do not have the necessary privileges to create a trigger'),            'not_found' => __('No trigger with name %1$s found in database %2$s'),            'nothing'   => __('There are no triggers to display.'),            'title'     => __('Triggers'),        );        break;    case 'EVN':        $words = array(            'add'       => __('Add event'),            'docu'      => 'EVENTS',            'export'    => __('Export of event %s'),            'human'     => __('event'),            'no_create' => __('You do not have the necessary privileges to create an event'),            'not_found' => __('No event with name %1$s found in database %2$s'),            'nothing'   => __('There are no events to display.'),            'title'     => __('Events'),        );        break;    default:        $words = array();        break;    }    return isset($words[$index]) ? $words[$index] : '';} // end PMA_RTE_getWord()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-StringType-CType *//** * Checks if a character is an alphanumeric one * * @param string   character to check for * @return  boolean  whether the character is an alphanumeric one or not */function PMA_STR_isAlnum($c){    return ctype_alnum($c);} // end of the "PMA_STR_isAlnum()" function/** * Checks if a character is an alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an alphabetic one or not */function PMA_STR_isAlpha($c){    return ctype_alpha($c);} // end of the "PMA_STR_isAlpha()" function/** * Checks if a character is a digit * * @param string   character to check for * @return  boolean  whether the character is a digit or not */function PMA_STR_isDigit($c){    return ctype_digit($c);} // end of the "PMA_STR_isDigit()" function/** * Checks if a character is an upper alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an upper alphabetic one or not */function PMA_STR_isUpper($c){    return ctype_upper($c);} // end of the "PMA_STR_isUpper()" function/** * Checks if a character is a lower alphabetic one * * @param string   character to check for * @return  boolean  whether the character is a lower alphabetic one or not */function PMA_STR_isLower($c){    return ctype_lower($c);} // end of the "PMA_STR_isLower()" function/** * Checks if a character is a space one * * @param string   character to check for * @return  boolean  whether the character is a space one or not */function PMA_STR_isSpace($c){    return ctype_space($c);} // end of the "PMA_STR_isSpace()" function/** * Checks if a character is an hexadecimal digit * * @param string   character to check for * @return  boolean  whether the character is an hexadecimal digit or not */function PMA_STR_isHexDigit($c){    return ctype_xdigit($c);} // end of the "PMA_STR_isHexDigit()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin fatal error display page * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}header('Content-Type: text/html; charset=utf-8');?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $lang; ?>" dir="<?php echo $dir; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <style type="text/css">    <!--    html {        padding: 0;        margin: 0;    }    body  {        font-family: sans-serif;        font-size: small;        color: #000000;        background-color: #F5F5F5;        margin: 1em;    }    h1 {        margin: 0;        padding: 0.3em;        font-size: 1.4em;        font-weight: bold;        color: #ffffff;        background-color: #ff0000;    }    p {        margin: 0;        padding: 0.5em;        border: 0.1em solid red;        background-color: #ffeeee;    }    //-->    </style></head><body><h1>phpMyAdmin - <?php echo $error_header; ?></h1><p><?php echo PMA_sanitize($error_message); ?></p></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_operations.php&amp;back=tbl_operations.php';$url_params['goto'] = $url_params['back'] = 'tbl_operations.php';/** * Gets relation settings */$cfgRelation = PMA_getRelationsParam();/** * Gets available MySQL charsets and storage engines */require_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';/** * Class for partition management */require_once './libraries/Partition.class.php';// reselect current db (needed in some cases probably due to// the calling of relation.lib.php)PMA_DBI_select_db($GLOBALS['db']);/** * Gets tables informations */require './libraries/tbl_info.inc.php';// define some globals here, for improved syntax in the conditionals$is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;// set initial value of these globals, based on the current table enginePMA_set_global_variables_for_engine($tbl_type);if ($is_aria) {    // the value for transactional can be implicit    // (no create option found, in this case it means 1)    // or explicit (option found with a value of 0 or 1)    // ($transactional may have been set by libraries/tbl_info.inc.php,    // from the $create_options)    $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';    $page_checksum = (isset($page_checksum)) ? $page_checksum : '';}$reread_info = false;$table_alters = array();/** * If the table has to be moved to some other database */if (isset($_REQUEST['submit_move']) || isset($_REQUEST['submit_copy'])) {    $_message = '';    include_once './tbl_move_copy.php';}/** * If the table has to be maintained */if (isset($_REQUEST['table_maintenance'])) {    include_once './sql.php';    unset($result);}/** * Updates table comment, type and options if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'])) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }    if (isset($_REQUEST['comment'])      && urldecode($_REQUEST['prev_comment']) !== $_REQUEST['comment']) {        $table_alters[] = 'COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (! empty($_REQUEST['new_tbl_type'])      && strtolower($_REQUEST['new_tbl_type']) !== strtolower($tbl_type)) {        $table_alters[] = 'ENGINE = ' . $_REQUEST['new_tbl_type'];        $tbl_type = $_REQUEST['new_tbl_type'];        // reset the globals for the new engine        PMA_set_global_variables_for_engine($tbl_type);        if ($is_aria) {            $transactional = (isset($transactional) && $transactional == '0') ? '0' : '1';            $page_checksum = (isset($page_checksum)) ? $page_checksum : '';        }    }    if (! empty($_REQUEST['tbl_collation'])      && $_REQUEST['tbl_collation'] !== $tbl_collation) {        $table_alters[] = 'DEFAULT ' . PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (($is_myisam_or_aria || $is_isam)      && isset($_REQUEST['new_pack_keys'])      && $_REQUEST['new_pack_keys'] != (string)$pack_keys) {        $table_alters[] = 'pack_keys = ' . $_REQUEST['new_pack_keys'];    }    $checksum = empty($checksum) ? '0' : '1';    $_REQUEST['new_checksum'] = empty($_REQUEST['new_checksum']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_checksum'] !== $checksum) {        $table_alters[] = 'checksum = ' . $_REQUEST['new_checksum'];    }    $_REQUEST['new_transactional'] = empty($_REQUEST['new_transactional']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_transactional'] !== $transactional) {        $table_alters[] = 'TRANSACTIONAL = ' . $_REQUEST['new_transactional'];    }    $_REQUEST['new_page_checksum'] = empty($_REQUEST['new_page_checksum']) ? '0' : '1';    if ($is_aria      && $_REQUEST['new_page_checksum'] !== $page_checksum) {        $table_alters[] = 'PAGE_CHECKSUM = ' . $_REQUEST['new_page_checksum'];    }    $delay_key_write = empty($delay_key_write) ? '0' : '1';    $_REQUEST['new_delay_key_write'] = empty($_REQUEST['new_delay_key_write']) ? '0' : '1';    if ($is_myisam_or_aria      && $_REQUEST['new_delay_key_write'] !== $delay_key_write) {        $table_alters[] = 'delay_key_write = ' . $_REQUEST['new_delay_key_write'];    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_auto_increment'])      && (! isset($auto_increment) || $_REQUEST['new_auto_increment'] !== $auto_increment)) {        $table_alters[] = 'auto_increment = ' . PMA_sqlAddSlashes($_REQUEST['new_auto_increment']);    }    if (($is_myisam_or_aria || $is_innodb || $is_pbxt)      &&  ! empty($_REQUEST['new_row_format'])      && (! isset($row_format) || strtolower($_REQUEST['new_row_format']) !== strtolower($row_format))) {        $table_alters[] = 'ROW_FORMAT = ' . PMA_sqlAddSlashes($_REQUEST['new_row_format']);    }    if (count($table_alters) > 0) {        $sql_query      = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']);        $sql_query     .= "\r\n" . implode("\r\n", $table_alters);        $result        .= PMA_DBI_query($sql_query) ? true : false;        $reread_info    = true;        unset($table_alters);        foreach (PMA_DBI_get_warnings() as $warning) {            // In MariaDB 5.1.44, when altering a table from Maria to MyISAM            // and if TRANSACTIONAL was set, the system reports an error;            // I discussed with a Maria developer and he agrees that this            // should not be reported with a Level of Error, so here            // I just ignore it. But there are other 1478 messages            // that it's better to show.            if (! ($_REQUEST['new_tbl_type'] == 'MyISAM' && $warning['Code'] == '1478' && $warning['Level'] == 'Error')) {                $warning_messages[] = $warning['Level'] . ': #' . $warning['Code']                    . ' ' . $warning['Message'];            }        }    }}/** * Reordering the table has been requested by the user */if (isset($_REQUEST['submitorderby']) && ! empty($_REQUEST['order_field'])) {    $sql_query = '        ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . '        ORDER BY ' . PMA_backquote(urldecode($_REQUEST['order_field']));    if (isset($_REQUEST['order_order']) && $_REQUEST['order_order'] === 'desc') {        $sql_query .= ' DESC';    }    $result = PMA_DBI_query($sql_query);} // end if/** * A partition operation has been requested by the user */if (isset($_REQUEST['submit_partition']) && ! empty($_REQUEST['partition_operation'])) {    $sql_query = 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ' . $_REQUEST['partition_operation'] . ' PARTITION ' . $_REQUEST['partition_name'];    $result = PMA_DBI_query($sql_query);} // end ifif ($reread_info) {    // to avoid showing the old value (for example the AUTO_INCREMENT) after    // a change, clear the cache    PMA_Table::$cache = array();    $page_checksum = $checksum = $delay_key_write = 0;    include './libraries/tbl_info.inc.php';}unset($reread_info);/** * Displays top menu links in non ajax requests */if (!isset($_REQUEST['ajax_request'])) {    include_once './libraries/tbl_links.inc.php';}if (isset($result) && empty($message_to_show)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? $message = PMA_Message::success(__('Your SQL query has been executed successfully')) : PMA_Message::error(__('Error'));        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($_message, $_message->isSuccess(), $extra_data);        }    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        if ( $_REQUEST['ajax_request'] == true) {            PMA_ajaxResponse($_message, false);        }        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type);    unset($_message, $_type);}$url_params['goto'] = 'tbl_operations.php';$url_params['back'] = 'tbl_operations.php';/** * Get columns names */$columns = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);/** * Displays the page */?><!-- Order the table --><div class="operations_half_width"><form method="post" id="alterTableOrderby" action="tbl_operations.php" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset id="fieldset_table_order">    <legend><?php echo __('Alter table order by'); ?></legend>    <select name="order_field"><?phpforeach ($columns as $fieldname) {    echo '            <option value="' . htmlspecialchars($fieldname['Field']) . '">'        . htmlspecialchars($fieldname['Field']) . '</option>' . "\n";}unset($columns);?>    </select> <?php echo __('(singly)'); ?>    <select name="order_order">        <option value="asc"><?php echo __('Ascending'); ?></option>        <option value="desc"><?php echo __('Descending'); ?></option>    </select></fieldset><fieldset class="tblFooters">    <input type="submit" name="submitorderby" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Move table --><div class="operations_half_width"><form method="post" action="tbl_operations.php"    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><input type="hidden" name="what" value="data" /><fieldset id="fieldset_table_rename">    <legend><?php echo __('Move table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()"value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" /><br />    <?php    // starting with MySQL 5.0.24, SHOW CREATE TABLE includes the AUTO_INCREMENT    // next value but users can decide if they want it or not for the operation    ?>    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_mv" checked="checked" />    <label for="checkbox_auto_increment_mv"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br /></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_move" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?phpif (strstr($show_comment, '; InnoDB free') === false) {    if (strstr($show_comment, 'InnoDB free') === false) {        // only user entered comment        $comment = $show_comment;    } else {        // here we have just InnoDB generated part        $comment = '';    }} else {    // remove InnoDB comment from end, just the minimal part (*? is non greedy)    $comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);}// PACK_KEYS: MyISAM or ISAM// DELAY_KEY_WRITE, CHECKSUM, : MyISAM only// AUTO_INCREMENT: MyISAM and InnoDB since 5.0.3, PBXT// Here should be version check for InnoDB, however it is supported// in >5.0.4, >4.1.12 and >4.0.11, so I decided not to// check for version?><!-- Table options --><div class="operations_half_width clearfloat"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Table options'); ?></legend>    <table>    <!-- Change table name -->    <tr><td><?php echo __('Rename table to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    <!-- Table comments -->    <tr><td><?php echo __('Table comments'); ?></td>        <td><input type="text" name="comment" maxlength="60" size="30"                value="<?php echo htmlspecialchars($comment); ?>" onfocus="this.select()" />            <input type="hidden" name="prev_comment" value="<?php echo htmlspecialchars($comment); ?>" />        </td>    </tr>    <!-- Storage engine -->    <tr><td><?php echo __('Storage Engine'); ?>            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </td>        <td><?php echo PMA_StorageEngine::getHtmlSelect('new_tbl_type', null, $tbl_type); ?>        </td>    </tr>    <!-- Table character set -->    <tr><td><?php echo __('Collation'); ?></td>        <td><?php echo PMA_generateCharsetDropdownBox(                PMA_CSDROPDOWN_COLLATION,                'tbl_collation', null, $tbl_collation, false, 3            ); ?>        </td>    </tr><?phpif ($is_myisam_or_aria || $is_isam) {    ?>    <tr>        <td><label for="new_pack_keys">PACK_KEYS</label></td>        <td><select name="new_pack_keys" id="new_pack_keys">                <option value="DEFAULT"                    <?php if ($pack_keys == 'DEFAULT') echo 'selected="selected"'; ?>                    >DEFAULT</option>                <option value="0"                    <?php if ($pack_keys == '0') echo 'selected="selected"'; ?>                    >0</option>                <option value="1"                    <?php if ($pack_keys == '1') echo 'selected="selected"'; ?>                    >1</option>            </select>        </td>    </tr>    <?php} // end if (MYISAM|ISAM)if ($is_myisam_or_aria) {    ?>    <tr><td><label for="new_checksum">CHECKSUM</label></td>        <td><input type="checkbox" name="new_checksum" id="new_checksum"                value="1"    <?php echo (isset($checksum) && $checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_delay_key_write">DELAY_KEY_WRITE</label></td>        <td><input type="checkbox" name="new_delay_key_write" id="new_delay_key_write"                value="1"    <?php echo (isset($delay_key_write) && $delay_key_write == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (MYISAM)if ($is_aria) {    ?>    <tr><td><label for="new_transactional">TRANSACTIONAL</label></td>        <td><input type="checkbox" name="new_transactional" id="new_transactional"                value="1"    <?php echo (isset($transactional) && $transactional == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <tr><td><label for="new_page_checksum">PAGE_CHECKSUM</label></td>        <td><input type="checkbox" name="new_page_checksum" id="new_page_checksum"                value="1"    <?php echo (isset($page_checksum) && $page_checksum == 1)        ? ' checked="checked"'        : ''; ?> />        </td>    </tr>    <?php} // end if (ARIA)if (isset($auto_increment) && strlen($auto_increment) > 0  && ($is_myisam_or_aria || $is_innodb || $is_pbxt)) {    ?>    <tr><td><label for="auto_increment_opt">AUTO_INCREMENT</label></td>        <td><input type="text" name="new_auto_increment" id="auto_increment_opt"                value="<?php echo $auto_increment; ?>" /></td>    </tr>    <?php} // end if (MYISAM|INNODB)// the outer array is for engines, the inner array contains the dropdown// option values as keys then the dropdown option labels$possible_row_formats = array(     'ARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MARIA'  => array(        'FIXED'     => 'FIXED',        'DYNAMIC'   => 'DYNAMIC',        'PAGE'      => 'PAGE'            ),     'MYISAM' => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'PBXT'   => array(         'FIXED'    => 'FIXED',         'DYNAMIC'  => 'DYNAMIC'     ),     'INNODB' => array(         'COMPACT'  => 'COMPACT',         'REDUNDANT' => 'REDUNDANT'));$innodb_engine_plugin = PMA_StorageEngine::getEngine('innodb');$innodb_plugin_version = $innodb_engine_plugin->getInnodbPluginVersion();if (!empty($innodb_plugin_version)) {    $innodb_file_format = $innodb_engine_plugin->getInnodbFileFormat();} else {    $innodb_file_format = '';}if ('Barracuda' == $innodb_file_format && $innodb_engine_plugin->supportsFilePerTable()) {    $possible_row_formats['INNODB']['DYNAMIC'] = 'DYNAMIC';    $possible_row_formats['INNODB']['COMPRESSED'] = 'COMPRESSED';}unset($innodb_engine_plugin, $innodb_plugin_version, $innodb_file_format);// for MYISAM there is also COMPRESSED but it can be set only by the// myisampack utility, so don't offer here the choice because if we// try it inside an ALTER TABLE, MySQL (at least in 5.1.23-maria)// does not return a warning// (if the table was compressed, it can be seen on the Structure page)if (isset($possible_row_formats[$tbl_type])) {    $current_row_format = strtoupper($showtable['Row_format']);    echo '<tr><td><label for="new_row_format">ROW_FORMAT</label></td>';    echo '<td>';    echo PMA_generate_html_dropdown('new_row_format', $possible_row_formats[$tbl_type], $current_row_format, 'new_row_format');    unset($possible_row_formats, $current_row_format);    echo '</td>';    echo '</tr>';}?>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><!-- Copy table --><div class="operations_half_width"><form method="post" action="tbl_operations.php" name="copyTable" id="copyTable" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return emptyFormElements(this, 'new_name')"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Copy table to (database<b>.</b>table):'); ?></legend><?php if (count($GLOBALS['pma']->databases) > $GLOBALS['cfg']['MaxDbList']) {?>    <input type="text" maxlength="100" size="30" name="target_db" value="<?php echo htmlspecialchars($GLOBALS['db']); ?>"/><?php    } else {?>    <select name="target_db">        <?php echo $GLOBALS['pma']->databases->getHtmlOptions(true, false); ?>    </select><?php    } // end if?>    &nbsp;<strong>.</strong>&nbsp;    <input type="text" size="20" name="new_name" onfocus="this.select()" value="<?php echo htmlspecialchars($GLOBALS['table']); ?>"/><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>    <input type="checkbox" name="drop_if_exists" value="true" id="checkbox_drop" />    <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), 'DROP TABLE'); ?></label><br />    <input type="checkbox" name="sql_auto_increment" value="1" id="checkbox_auto_increment_cp" />    <label for="checkbox_auto_increment_cp"><?php echo __('Add AUTO_INCREMENT value'); ?></label><br />    <?php        // display "Add constraints" choice only if there are        // foreign keys        if (PMA_getForeigners($GLOBALS['db'], $GLOBALS['table'], '', 'foreign')) {        ?>    <input type="checkbox" name="add_constraints" value="1" id="checkbox_constraints" />    <label for="checkbox_constraints"><?php echo __('Add constraints'); ?></label><br />        <?php        } // endif        if (isset($_COOKIE['pma_switch_to_new'])          && $_COOKIE['pma_switch_to_new'] == 'true') {            $pma_switch_to_new = 'true';        }    ?>    <input type="checkbox" name="switch_to_new" value="true"        id="checkbox_switch"<?php echo            isset($pma_switch_to_new) && $pma_switch_to_new == 'true'            ? ' checked="checked"'            : ''; ?> />    <label for="checkbox_switch"><?php echo __('Switch to copied table'); ?></label></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" /></fieldset></form></div><br class="clearfloat"/><div class="operations_half_width"><fieldset> <legend><?php echo __('Table maintenance'); ?></legend><ul id="tbl_maintenance" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>><?php// Note: BERKELEY (BDB) is no longer supported, starting with MySQL 5.1if ($is_myisam_or_aria || $is_innodb || $is_berkeleydb) {    if ($is_myisam_or_aria || $is_innodb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'CHECK TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Check table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'CHECK_TABLE'); ?>    </li>        <?php    }    if ($is_innodb) {        $this_url_params = array_merge(            $url_params,            array('sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' ENGINE = InnoDB')        );        ?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Defragment table'); ?></a>        <?php echo PMA_showMySQLDocu('Table_types', 'InnoDB_File_Defragmenting'); ?>    </li>        <?php    }    if ($is_myisam_or_aria || $is_berkeleydb) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'ANALYZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Analyze table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'ANALYZE_TABLE');?>    </li>        <?php    }    if ($is_myisam_or_aria && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'REPAIR TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Repair table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'REPAIR_TABLE'); ?>    </li>        <?php    }    if (($is_myisam_or_aria || $is_innodb || $is_berkeleydb) && !PMA_DRIZZLE) {        $this_url_params = array_merge(            $url_params,            array(                'sql_query' => 'OPTIMIZE TABLE ' . PMA_backquote($GLOBALS['table']),                'table_maintenance' => 'Go',                )        );        ?>    <li><a class='maintain_action' href="tbl_operations.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Optimize table'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'OPTIMIZE_TABLE'); ?>    </li>        <?php    }} // end MYISAM or BERKELEYDB case$this_url_params = array_merge(    $url_params,    array(        'sql_query' => 'FLUSH TABLE ' . PMA_backquote($GLOBALS['table']),        'message_to_show' => sprintf(            __('Table %s has been flushed'),            htmlspecialchars($GLOBALS['table'])        ),        'reload'    => 1,    ));?>    <li><a class='maintain_action' href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Flush the table (FLUSH)'); ?></a>        <?php echo PMA_showMySQLDocu('MySQL_Database_Administration', 'FLUSH'); ?>    </li></ul></fieldset></div><?php if (! (isset($db_is_information_schema) && $db_is_information_schema)) { ?><div class="operations_half_width"><fieldset class="caution"> <legend><?php echo __('Delete data or table'); ?></legend><ul><?phpif (! $tbl_is_view && ! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'tbl_structure.php',            'reload' => '1',            'message_to_show' => sprintf(__('Table %s has been emptied'), htmlspecialchars($table)),        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="truncate_tbl_anchor" class="ajax"' : ''); ?>>            <?php echo __('Empty the table (TRUNCATE)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'TRUNCATE_TABLE'); ?>    </li><?php}if (! (isset($db_is_information_schema) && $db_is_information_schema)) {    $this_sql_query = 'DROP TABLE ' . PMA_backquote($GLOBALS['table']);    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => $this_sql_query,            'goto' => 'db_operations.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(($tbl_is_view ? __('View %s has been dropped') : __('Table %s has been dropped')), htmlspecialchars($table)),            // table name is needed to avoid running            // PMA_relationsCleanupDatabase() on the whole db later            'table' => $GLOBALS['table'],        )    );    ?>    <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_tbl_anchor"' : ''); ?>>            <?php echo __('Delete the table (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_TABLE'); ?>    </li><?php}?></ul></fieldset></div><?php}?><br class="clearfloat"><?php if (PMA_Partition::havePartitioning()) {    $partition_names = PMA_Partition::getPartitionNames($db, $table);    // show the Partition maintenance section only if we detect a partition    if (! is_null($partition_names[0])) {    ?><div class="operations_half_width"><form method="post" action="tbl_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset> <legend><?php echo __('Partition maintenance'); ?></legend><?php        $html_select = '<select name="partition_name">' . "\n";        foreach ($partition_names as $one_partition) {            $one_partition = htmlspecialchars($one_partition);            $html_select .= '<option value="' . $one_partition . '">' . $one_partition . '</option>' . "\n";        }        $html_select .= '</select>' . "\n";        printf(__('Partition %s'), $html_select);        unset($partition_names, $one_partition, $html_select);        $choices = array(            'ANALYZE' => __('Analyze'),            'CHECK' => __('Check'),            'OPTIMIZE' => __('Optimize'),            'REBUILD' => __('Rebuild'),            'REPAIR' => __('Repair'));        PMA_display_html_radio('partition_operation', $choices, '', false);        unset($choices);        echo PMA_showMySQLDocu('partitioning_maintenance', 'partitioning_maintenance');        // I'm not sure of the best way to display that; this link does        // not depend on the Go button    $this_url_params = array_merge(        $url_params,        array(            'sql_query' => 'ALTER TABLE ' . PMA_backquote($GLOBALS['table']) . ' REMOVE PARTITIONING'            )        );?>    <br /><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>">            <?php echo __('Remove partitioning'); ?></a></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_partition" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php        } // end if    } // end if// Referential integrity check// The Referential integrity check was intended for the non-InnoDB// tables for which the relations are defined in pmadb// so I assume that if the current table is InnoDB, I don't display// this choice (InnoDB maintains integrity by itself)if ($cfgRelation['relwork'] && ! $is_innodb) {    PMA_DBI_select_db($GLOBALS['db']);    $foreign = PMA_getForeigners($GLOBALS['db'], $GLOBALS['table']);    if ($foreign) {        ?>    <!-- Referential integrity check --><div class="operations_half_width"><fieldset> <legend><?php echo __('Check referential integrity:'); ?></legend>    <ul>        <?php        echo "\n";        foreach ($foreign AS $master => $arr) {            $join_query  = 'SELECT ' . PMA_backquote($GLOBALS['table']) . '.* FROM '                         . PMA_backquote($GLOBALS['table']) . ' LEFT JOIN '                         . PMA_backquote($arr['foreign_table']);            if ($arr['foreign_table'] == $GLOBALS['table']) {                $foreign_table = $GLOBALS['table'] . '1';                $join_query .= ' AS ' . PMA_backquote($foreign_table);            } else {                $foreign_table = $arr['foreign_table'];            }            $join_query .= ' ON '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' = ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' WHERE '                         . PMA_backquote($foreign_table) . '.' . PMA_backquote($arr['foreign_field'])                         . ' IS NULL AND '                         . PMA_backquote($GLOBALS['table']) . '.' . PMA_backquote($master)                         . ' IS NOT NULL';            $this_url_params = array_merge(                $url_params,                array('sql_query' => $join_query)            );            echo '        <li>'                 . '<a href="sql.php'                 . PMA_generate_common_url($this_url_params)                 . '">' . $master . '&nbsp;->&nbsp;' . $arr['foreign_table'] . '.' . $arr['foreign_field']                 . '</a></li>' . "\n";        } //  foreach $foreign        unset($foreign_table, $join_query);        ?>    </ul>   </fieldset>  </div>        <?php    } // end if ($foreign)} // end  if (!empty($cfg['Server']['relation']))/** * Displays the footer */require './libraries/footer.inc.php';function PMA_set_global_variables_for_engine($tbl_type){    global $is_myisam_or_aria, $is_innodb, $is_isam, $is_berkeleydb, $is_aria, $is_pbxt;    $is_myisam_or_aria = $is_isam = $is_innodb = $is_berkeleydb = $is_aria = $is_pbxt = false;    $upper_tbl_type = strtoupper($tbl_type);    //Options that apply to MYISAM usually apply to ARIA    $is_myisam_or_aria = ($upper_tbl_type == 'MYISAM' || $upper_tbl_type == 'ARIA' || $upper_tbl_type == 'MARIA');    $is_aria = ($upper_tbl_type == 'ARIA');    $is_isam = ($upper_tbl_type == 'ISAM');    $is_innodb = ($upper_tbl_type == 'INNODB');    $is_berkeleydb = ($upper_tbl_type == 'BERKELEYDB');    $is_pbxt = ($upper_tbl_type == 'PBXT');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$die_save_pos = 0;require_once 'pmd_save_pos.php';extract($_POST, EXTR_SKIP);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);// native foreign keyif (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // relation exists?    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2])     && isset($existrel_foreign[$F2]['constraint'])) {         PMD_return_new(0, __('Error: relation already exists.'));    }// note: in InnoDB, the index does not requires to be on a PRIMARY// or UNIQUE key// improve: check all other requirements for InnoDB relations    $result      = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T1) . ';');    $index_array1   = array(); // will be use to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array1[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    $result     = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T2) . ';');    $index_array2  = array(); // will be used to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array2[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    if (! empty($index_array1[$F1]) && ! empty($index_array2[$F2])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                 . ' ADD FOREIGN KEY ('                 . PMA_backquote($F2) . ')'                 . ' REFERENCES '                 . PMA_backquote($db) . '.'                 . PMA_backquote($T1) . '('                 . PMA_backquote($F1) . ')';        if ($on_delete != 'nix') {            $upd_query   .= ' ON DELETE ' . $on_delete;        }        if ($on_update != 'nix') {            $upd_query   .= ' ON UPDATE ' . $on_update;        }        PMA_DBI_try_query($upd_query) or PMD_return_new(0, __('Error: Relation not added.'));    PMD_return_new(1, __('FOREIGN KEY relation added'));    }// internal (pmadb) relation} else {    if ($GLOBALS['cfgRelation']['relwork'] == false) {        PMD_return_new(0, _('General relation features') . ':' . _('Disabled'));    } else {        // no need to recheck if the keys are primary or unique at this point,        // this was checked on the interface part        $q  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T2) . '\', '                            . '\'' . PMA_sqlAddSlashes($F2) . '\', '                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T1) . '\','                            . '\'' . PMA_sqlAddSlashes($F1) . '\')';        if (PMA_query_as_controluser($q, false, PMA_DBI_QUERY_STORE)) {            PMD_return_new(1, __('Internal relation added'));        } else {            PMD_return_new(0, __('Error: Relation not added.'));        }   }}function PMD_return_new($b,$ret){    global $db,$T1,$F1,$T2,$F2;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_new" return="'.$ret.'" b="'.$b.    '" DB1="'.urlencode($db).    '" T1="'.urlencode($T1).    '" F1="'.urlencode($F1).    '" DB2="'.urlencode($db).    '" T2="'.urlencode($T2).    '" F2="'.urlencode($F2).    '"></root>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$tab_column       = get_tab_info();$script_tabs      = get_script_tabs();$script_contr     = get_script_contr();$tab_pos          = get_tab_pos();$tables_pk_or_unique_keys = get_pk_or_unique_keys();$tables_all_keys  = get_all_keys();$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}require_once './libraries/header_scripts.inc.php';?>    <script type="text/javascript">    // <![CDATA[<?phpecho '    var server = "' . PMA_escapeJsString($server) . '";    var db = "' . PMA_escapeJsString($db) . '";    var token = "' . PMA_escapeJsString($token) . '";';    echo "\n";    if (isset($_REQUEST['query'])) {    echo '     $(document).ready(function() {        $(".trigger").click(function() {        $(".panel").toggle("fast");        $(this).toggleClass("active");        return false;        });    });';    }?>    // ]]>    </script>    <script src="js/pmd/ajax.js" type="text/javascript"></script>    <script src="js/pmd/history.js" type="text/javascript"></script>    <script src="js/pmd/move.js" type="text/javascript"></script>    <!--[if IE]>    <script src="js/pmd/iecanvas.js" type="text/javascript"></script>    <![endif]--><?phpecho $script_tabs . $script_contr . $script_display_field;?></head><body onload="Main()" class="general_body" id="pmd_body"><div class="pmd_header" id="top_menu">        <a href="#"            onclick="Show_left_menu(document.getElementById('key_Show_left_menu')); return false" class="M_butt first" target="_self">            <img id='key_Show_left_menu' title="<?php echo __('Show/Hide left menu'); ?>"                alt="v" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2_m.png" /></a>        <a href="#" onclick="Save2(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Save position') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/save.png" alt=""        /></a><a href="#" onclick="Start_table_new(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Create table')?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/table.png" alt=""        /></a><a href="#" onclick="Start_relation(); return false"            class="M_butt" id="rel_button" target="_self"        ><img title="<?php echo __('Create relation') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/relation.png" alt=""        /></a><a href="#" onclick="Start_display_field(); return false"            class="M_butt" id="display_field_button" target="_self"        ><img title="<?php echo __('Choose column to display') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/display_field.png" alt=""        /></a><a href="#" onclick="location.reload(); return false"            class="M_butt" target="_self"        ><img title="<?php echo __('Reload'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/reload.png" alt=""        /></a><a href="Documentation.html#faq6_31" target="documentation"            class="M_butt" target="_self"        ><img title="<?php echo __('Help'); ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/help.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#" onclick="Angular_direct(); return false"            class="M_butt" id="angular_direct_button" target="_self"        ><img title="<?php echo __('Angular links') . ' / ' . __('Direct links'); ?>"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/ang_direct.png" alt=""        /></a><a href="#" onclick="Grid(); return false"            class="M_butt" id="grid_button" target="_self"        ><img title="<?php echo __('Snap to grid') ?>" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/grid.png" alt=""        /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt=""        /><a href="#"            onclick="Small_tab_all(document.getElementById('key_SB_all')); return false" class="M_butt" target="_self"        ><img id='key_SB_all' title="<?php echo __('Small/Big All'); ?>" alt="v"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png"        /></a><a href="#" onclick="Small_tab_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle small/big'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bottom.png" /></a><a href="#" onclick="Relation_lines_invert(); return false" class="M_butt" target="_self" ><img title="<?php echo __('Toggle relation lines'); ?>" alt="key" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/toggle_lines.png" /></a><img class="M_bord" src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/bord.png" alt="" /><a href="#" onclick="PDF_save(); return false"            class="M_butt" target="_self"        ><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/pdf.png" alt="key" width="20" height="20"                title="<?php echo __('Import/Export coordinates for PDF schema'); ?>" /></a         >        <?php if (isset($_REQUEST['query'])) {            echo '<a href="#" onclick="build_query(\'SQL Query on Database\', 0)" onmousedown="return false;"            class="M_butt" target="_self">';            echo '<img src="'. $GLOBALS['pmaThemeImage'] . 'pmd/query_builder.png" alt="key" width="20" height="20" title="';            echo __('Build Query');            echo '"/></a>'; }?>         <a href="#"            onclick="Top_menu_right(document.getElementById('key_Left_Right')); return false" class="M_butt last" target="_self">            <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2rightarrow_m.png" id="key_Left_Right" alt=">"                title="<?php echo __('Move Menu'); ?>" /></a></div><form action="" method="post" name="form1"><div id="osn_tab">  <canvas class="pmd" id="canvas" width="100" height="100" onclick="Canvas_click(this)"></canvas></div><div id="layer_menu" style="display:none;"><div align="center" style="padding-top:5px;">    <a href="#"        onclick="Hide_tab_all(document.getElementById('key_HS_all')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show all'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow1.png" id='key_HS_all' /></a>    <a href="#"        onclick="No_have_constr(document.getElementById('key_HS')); return false" class="M_butt" target="_self">    <img title="<?php echo __('Hide/Show Tables with no relation'); ?>" alt="v"        src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/downarrow2.png" id='key_HS' /></a></div><div id="id_scroll_tab" class="scroll_tab">    <table width="100%" style="padding-left: 3px;"><?php$name_cnt = count($GLOBALS['PMD']['TABLE_NAME']);for ($i = 0; $i < $name_cnt; $i++) {    ?>    <tr><td title="<?php echo __('Structure'); ?>" width="1px"            onmouseover="this.className='L_butt2_2'"            onmouseout="this.className='L_butt2_1'">            <img onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');"                src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec.png" alt="" /></td>        <td width="1px">            <input onclick="VisibleTab(this,'<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>')"                title="<?php echo __('Hide'); ?>"                id="check_vis_<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                style="margin:0px;" type="checkbox"                value="<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>"                <?php                if (isset($tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]])) {                    echo $tab_pos[$GLOBALS['PMD']["TABLE_NAME"][$i]]["H"] ? 'checked="checked"' : '';                } else {                    echo 'checked="checked"';                }                ?> /></td>        <td class="pmd_Tabs" onmouseover="this.className='pmd_Tabs2'"            onmouseout="this.className='pmd_Tabs'"            onclick="Select_tab('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME"][$i]; ?>');">            <?php echo $GLOBALS['PMD_OUT']["TABLE_NAME"][$i]; ?></td>    </tr>    <?php}?>    </table></div><div align="center">    <?php echo __('Number of tables') . ': ' . $name_cnt; ?></div><div align="right">    <div id="layer_menu_sizer" onmousedown="layer_menu_cur_click=1">    </div></div></div><?phpfor ($i = 0; $i < count($GLOBALS['PMD']["TABLE_NAME"]); $i++) {    $t_n = $GLOBALS['PMD']["TABLE_NAME"][$i];    $t_n_url = $GLOBALS['PMD_URL']["TABLE_NAME"][$i];    ?><input name="t_x[<?php echo $t_n_url ?>]" type="hidden" id="t_x_<?php echo $t_n_url ?>_" /><input name="t_y[<?php echo $t_n_url ?>]" type="hidden" id="t_y_<?php echo $t_n_url ?>_" /><input name="t_v[<?php echo $t_n_url ?>]" type="hidden" id="t_v_<?php echo $t_n_url ?>_" /><input name="t_h[<?php echo $t_n_url ?>]" type="hidden" id="t_h_<?php echo $t_n_url ?>_" /><table id="<?php echo $t_n_url ?>" cellpadding="0" cellspacing="0" class="pmd_tab"   style="position: absolute;          left: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["X"]; else echo rand(180, 800); ?>px;          top: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["Y"]; else echo rand(30, 500); ?>px;          visibility: <?php if (isset($tab_pos[$t_n])) echo $tab_pos[$t_n]["H"] ? "visible" : "hidden"; ?>;         "><thead><tr>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input type="checkbox" value="select_all_'.htmlspecialchars($t_n_url).'" style="margin: 0px;" ';        echo 'id="select_all_'.htmlspecialchars($t_n_url).'" title="select all" ';        echo 'onclick="Select_all(\''. htmlspecialchars($t_n_url) .'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\')"></td>';    }?>    <td class="small_tab" onmouseover="this.className='small_tab2';"        onmouseout="this.className='small_tab';"        id="id_hide_tbody_<?php echo $t_n_url ?>"        onclick="Small_tab('<?php echo $t_n_url ?>', 1)"><?php        // no space alloawd here, between tags and content !!!        // JavaScript function does require this        if (! isset($tab_pos[$t_n]) || ! empty($tab_pos[$t_n]["V"])) {            echo 'v';        } else {            echo '&gt;';        }        ?></td>    <td class="small_tab_pref" onmouseover="this.className='small_tab_pref2';"        onmouseout="this.className='small_tab_pref';"        onclick="Start_tab_upd('<?php echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]; ?>');">        <img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/exec_small.png" alt="" /></td>    <td nowrap="nowrap" id="id_zag_<?php echo $t_n_url ?>" class="tab_zag"        onmousedown="cur_click=document.getElementById('<?php echo $t_n_url ?>');"/        onmouseover="Table_onover('<?php echo $t_n_url ?>',0,<?php echo (isset($_REQUEST['query'])? 1 : 0 )?> )"        onmouseout="Table_onover('<?php echo $t_n_url ?>',1,<?php echo (isset($_REQUEST['query']) ? 1 : 0 )?>)">        <span class='owner'>        <?php        echo $GLOBALS['PMD_OUT']["OWNER"][$i];        echo '.</span>';        echo $GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];        ?></td>    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="tab_zag"  onmouseover="Table_onover(\''.htmlspecialchars($t_n_url).'\',0,1)"  id="id_zag_'.htmlspecialchars($t_n_url).'_2"';        echo 'onmousedown="cur_click=document.getElementById(\''.htmlspecialchars($t_n_url).'\');"';        echo 'onmouseout="Table_onover(\''.htmlspecialchars($t_n_url).'\',1,1)">';    }?></tr></thead><tbody id="id_tbody_<?php echo $t_n_url ?>"    <?php    if (isset($tab_pos[$t_n]) && empty($tab_pos[$t_n]["V"])) {        echo 'style="display: none;"';    }?>>    <?php    $display_field = PMA_getDisplayField($db, $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i]);    for ($j = 0, $id_cnt = count($tab_column[$t_n]["COLUMN_ID"]); $j < $id_cnt; $j++) {        ?><tr id="id_tr_<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . '.'            . urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>"        <?php        if ($display_field == $tab_column[$t_n]["COLUMN_NAME"][$j]) {            echo ' class="tab_field_3" ';        } else {            echo ' class="tab_field" ';        }        ?>    onmouseover="old_class = this.className; this.className = 'tab_field_2';"    onmouseout="this.className = old_class;"    onmousedown="Click_field('<?php        echo $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i]."','".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j])."',";        if (! PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i])) {            echo (isset($tables_pk_or_unique_keys[$t_n . "." . $tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        } else {            // if foreign keys are supported, it's not necessary that the            // index is a primary key            echo (isset($tables_all_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]]) ? 1 : 0);        }        ?>)">    <?php    if (isset($_REQUEST['query'])) {        echo '<td class="select_all">';        echo '<input value="'.htmlspecialchars($t_n_url).urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'"';        echo 'type="checkbox" id="select_'.htmlspecialchars($t_n_url).'._'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'style="margin: 0px;" title="select_'.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'" ';        echo 'onclick="store_column(\''.urlencode($GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i]).'\',\''.htmlspecialchars($GLOBALS['PMD_OUT']["OWNER"][$i]).'\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\')"></td>';    }?>    <td width="10px" colspan="3"        id="<?php echo $t_n_url.".".urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]) ?>">        <div style="white-space:nowrap">        <?php        if (isset($tables_pk_or_unique_keys[$t_n.".".$tab_column[$t_n]["COLUMN_NAME"][$j]])) {            ?>                <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/FieldKey_small.png"                    alt="*" />            <?php        } else {            ?>                    <img src="<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Field_small<?php            if (strstr($tab_column[$t_n]["TYPE"][$j], 'char')             || strstr($tab_column[$t_n]["TYPE"][$j], 'text')) {                echo '_char';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'int')             || strstr($tab_column[$t_n]["TYPE"][$j], 'float')             || strstr($tab_column[$t_n]["TYPE"][$j], 'double')             || strstr($tab_column[$t_n]["TYPE"][$j], 'decimal')) {                echo '_int';            } elseif (strstr($tab_column[$t_n]["TYPE"][$j], 'date')             || strstr($tab_column[$t_n]["TYPE"][$j], 'time')             || strstr($tab_column[$t_n]["TYPE"][$j], 'year')) {                echo '_date';            }            ?>.png" alt="*" />            <?php        }        echo htmlspecialchars($tab_column[$t_n]["COLUMN_NAME"][$j]            . " : " . $tab_column[$t_n]["TYPE"][$j], ENT_QUOTES);        ?>        </div>   </td>   <?php   if (isset($_REQUEST['query'])) {       //$temp = $GLOBALS['PMD_OUT']["OWNER"][$i].'.'.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i];       echo '<td class="small_tab_pref" onmouseover="this.className=\'small_tab_pref2\';"';       echo 'onmouseout="this.className=\'small_tab_pref\';"';       echo 'onclick="Click_option(\'pmd_optionse\',\''.urlencode($tab_column[$t_n]["COLUMN_NAME"][$j]).'\',\''.$GLOBALS['PMD_OUT']["TABLE_NAME_SMALL"][$i].'\')" >';       echo  '<img src="' . $GLOBALS['pmaThemeImage'] . 'pmd/exec_small.png" title="options" alt="" /></td> ';    } ?></tr>        <?php    }    ?></tbody></table>    <?php}?></form><div id="pmd_hint"></div><div id='layer_action' style="display:none;">Load...</div><table id="layer_new_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>            <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Create relation'); ?></strong></td>        </tr>        </thead>        <tbody id="foreign_relation">        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong>FOREIGN KEY</strong></td>        </tr>        <tr>            <td width="58" nowrap="nowrap">on delete</td>            <td width="102"><select name="on_delete" id="on_delete">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        <tr>            <td nowrap="nowrap">on update</td>            <td><select name="on_update" id="on_update">                    <option value="nix" selected="selected">--</option>                    <option value="CASCADE">CASCADE</option>                    <option value="SET NULL">SET NULL</option>                    <option value="NO ACTION">NO ACTION</option>                    <option value="RESTRICT">RESTRICT</option>                </select>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="New_relation()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_new_relation').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="layer_upd_relation" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%"></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="100%" border="0" align="center" cellpadding="2" cellspacing="0">        <tr>            <td colspan="3" align="center" nowrap="nowrap"><strong><?php echo __('Delete relation'); ?></strong></td>        </tr>        <tr>            <td colspan="3" align="center" nowrap="nowrap">                <input name="Button" type="button" class="butt"                    onclick="Upd_relation()" value="<?php echo __('Delete'); ?>" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('layer_upd_relation').style.display = 'none'; Re_load();" />            </td>        </tr>    </table></td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="pmd_optionse" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>            <td colspan="2" rowspan="2" id="option_col_name" nowrap="nowrap" align="center"></td>        </tr>        </thead>        <tbody id="where">        <tr><td align="center" nowrap="nowrap"><b>WHERE</b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="rel_opt" id="rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="Query" value="" cols="18"></textarea>            </td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Rename to'); ?></b></td></tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102"><input type="text" value="" id="new_name"/></td>        </tr>        <tr><td align="center" nowrap="nowrap"><b><?php echo __('Aggregate'); ?></b></td></tr>         <tr>         <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="operator" id="operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>GROUP BY</b></td>                <td><input type="checkbox" value="groupby" id="groupby"/></td>           </tr>           <tr>                <td nowrap="nowrap" width="58" align="center"><b>ORDER BY</b></td>                <td><input type="checkbox" value="orderby" id="orderby"/></td>           </tr>          <tr><td align="center" nowrap="nowrap"><b>HAVING</b></td></tr>          <tr>          <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="h_operator" id="h_operator">                    <option value="---" selected="selected">---</option>                    <option value="None" > <?php echo __('None'); ?> </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>               </td></tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Relation operator'); ?></td>            <td width="102"><select name="h_rel_opt" id="h_rel_opt">                    <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>            </tr>            <tr>            <td width="58" nowrap="nowrap"><?php echo __('Value'); ?>/<br/><?php echo __('subquery'); ?></td>                <td width="102"><textarea id="having" value="" cols="18"></textarea></td>            </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="add_object()" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="Close_option()" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_rename_to" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Rename to'); ?></strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('New name'); ?></td>            <td width="102">                <input type="text" value="" id="e_rename"/>            </td>        </tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Rename')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_rename_to').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_having" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>HAVING</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hoperator" id="hoperator">                    <option value="---" selected="selected">---</option>                    <option value="None" > None </option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                    <option value="avg"> AVG </option>                    <option value="count"> COUNT </option>                    </select>           </td></tr>        <tr>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="hrel_opt" id="hrel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="hQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Having')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_having').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_Aggregate" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody><tr>    <td class="frams1" width="10px"></td>    <td class="frams5" width="99%" ></td>    <td class="frams2" width="10px"><div class="bor"></div></td></tr><tr>    <td class="frams8"></td>    <td class="input_tab">        <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">        <thead>        <tr>        <td colspan="2" align="center" nowrap="nowrap"><strong><?php echo __('Aggregate'); ?></strong></td>        </tr>        </thead>        <tbody>        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102">                <select name="operator" id="e_operator">                    <option value="---" selected="selected">---</option>                    <option value="sum" > SUM </option>                    <option value="min"> MIN </option>                    <option value="max"> MAX </option>                       <option value="avg"> AVG </option>                    <option value="avg"> COUNT </option>                </select>           </td></tr>        </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Aggregate')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_Aggregate').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><table id="query_where" style="display:none;"    width="5%" border="0" cellpadding="0" cellspacing="0"><tbody>    <tr>        <td class="frams1" width="10px"></td>        <td class="frams5" width="99%" ></td>        <td class="frams2" width="10px"><div class="bor"></div></td>    </tr><tr>    <td class="frams8"></td>    <td class="input_tab">    <table width="168" border="0" align="center" cellpadding="2" cellspacing="0">       <thead>        <tr>          <td colspan="2" align="center" nowrap="nowrap"><strong>WHERE</strong></td>        </tr>        </thead>        <tbody id="rename_to">        <tr>        <td width="58" nowrap="nowrap"><?php echo __('Operator'); ?></td>            <td width="102"><select name="erel_opt" id="erel_opt">                <option value="--" selected="selected"> -- </option>                    <option value="=" > = </option>                    <option value=">"> > </option>                    <option value="<"> < </option>                    <option value=">="> >= </option>                    <option value="<="> <= </option>                    <option value="NOT"> NOT </option>                    <option value="IN"> IN </option>                    <option value="EXCEPT"> <?php echo __('Except'); ?> </option>                    <option value="NOT IN"> NOT IN </option>                </select>            </td>        </tr>        <tr>        <td nowrap="nowrap"><?php echo __('Value'); ?>/<br /><?php echo __('subquery'); ?></td>            <td><textarea id="eQuery" value="" cols="18"></textarea>            </td>            </tr>         </tbody>        <tbody>        <tr>            <td colspan="2" align="center" nowrap="nowrap">                <input type="button" class="butt" name="Button"                    value="<?php echo __('OK'); ?>" onclick="edit('Where')" />                <input type="button" class="butt" name="Button"                    value="<?php echo __('Cancel'); ?>"                    onclick="document.getElementById('query_where').style.display = 'none';" />            </td>        </tr>        </tbody>        </table>    </td>    <td class="frams6"></td></tr><tr>    <td class="frams4"><div class="bor"></div></td>    <td class="frams7"></td>    <td class="frams3"></td></tr></tbody></table><?phpif (! empty($_REQUEST['query'])) {    echo '<div class="panel">';    echo '<div style="clear:both;"></div>';    echo '<div id="ab"></div>';    echo '<div style="clear:both;"></div>';    echo '</div>';    echo '<a class="trigger" href="#">' . __('Active options') . '</a>';    echo '<div id="filter"></div>';    echo '<div id="box">';    echo '<span id="boxtitle"></span>';    echo '<form method="post" action="db_qbe.php" >';    echo '<textarea cols="80" name="sql_query" id="textSqlquery" rows="15"></textarea><div id="tblfooter">';    echo '  <input type="submit" name="submit_sql" class="btn">';    echo '  <input type="button" name="cancel" value="' . __('Cancel') . '" onclick="closebox()" class="btn">';    echo PMA_generate_common_hidden_inputs($GLOBALS['db']);    echo '</div></p>';    echo '</form></div>';} ?><!-- cache images --><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/2leftarrow_m.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow1.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/rightarrow2.png" width="0" height="0" alt="" /><img src="<?php echo $GLOBALS['pmaThemeImage'] ?>pmd/uparrow2_m.png" width="0" height="0" alt="" /><div id="PMA_disable_floating_menubar"></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common functions for the export functionality for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * This function is called from one of the other functions in this file * and it completes the handling of the export functionality. * * @param  string  $item_name    The name of the item that we are exporting * @param  string  $export_data  The SQL query to create the requested item */function PMA_RTE_handleExport($item_name, $export_data){    global $db;    $item_name = htmlspecialchars(PMA_backquote($_GET['item_name']));    if ($export_data !== false) {        $export_data = '<textarea cols="40" rows="15" style="width: 100%;">'                     . htmlspecialchars(trim($export_data)) . '</textarea>';        $title = sprintf(PMA_RTE_getWord('export'), $item_name);        if ($GLOBALS['is_ajax_request'] == true) {            $extra_data = array('title' => $title);            PMA_ajaxResponse($export_data, true, $extra_data);        } else {            echo "<fieldset>\n"               . "<legend>$title</legend>\n"               . $export_data               . "</fieldset>\n";        }    } else {        $_db = htmlspecialchars(PMA_backquote($db));        $response = __('Error in Processing Request') . ' : '                  . sprintf(PMA_RTE_getWord('not_found'), $item_name, $_db);        $response = PMA_message::error($response);        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($response, false);        } else {            $response->display();        }    }} // end PMA_RTE_handleExport()/** * If necessary, prepares event information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_EVN_handleExport(){    global $_GET, $db;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $export_data = PMA_DBI_get_definition($db, 'EVENT', $item_name);        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_EVN_handleExport()/** * If necessary, prepares routine information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_RTN_handleExport(){    global $_GET, $db;    if (   ! empty($_GET['export_item'])        && ! empty($_GET['item_name'])        && ! empty($_GET['item_type'])    ) {        if ($_GET['item_type'] == 'FUNCTION' || $_GET['item_type'] == 'PROCEDURE') {            $export_data = PMA_DBI_get_definition(                $db,                $_GET['item_type'],                $_GET['item_name']);            PMA_RTE_handleExport($_GET['item_name'], $export_data);        }    }} // end PMA_RTN_handleExport()/** * If necessary, prepares trigger information and passes * it to PMA_RTE_handleExport() for the actual export. */function PMA_TRI_handleExport(){    global $_GET, $db, $table;    if (! empty($_GET['export_item']) && ! empty($_GET['item_name'])) {        $item_name = $_GET['item_name'];        $triggers = PMA_DBI_get_triggers($db, $table, '');        $export_data = false;        foreach ($triggers as $trigger) {            if ($trigger['name'] === $item_name) {                $export_data = $trigger['create'];                break;            }        }        PMA_RTE_handleExport($item_name, $export_data);    }} // end PMA_TRI_handleExport()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Prepares the work and runs some other scripts if required */if (! empty($submit_mult) && $submit_mult != __('With selected:') && (! empty($selected_db)  || ! empty($selected_tbl)  || ! empty($selected_fld)  || ! empty($rows_to_delete))) {    define('PMA_SUBMIT_MULT', 1);    if (isset($selected_db) && !empty($selected_db)) {        // coming from server database view - do something with selected databases        $selected     = $selected_db;        $what         = 'drop_db';    } elseif (isset($selected_tbl) && !empty($selected_tbl)) {        // coming from database structure view - do something with selected tables        if ($submit_mult == 'print') {            include './tbl_printview.php';        } else {           $selected = $selected_tbl;           switch ($submit_mult) {               case 'add_prefix_tbl':               case 'replace_prefix_tbl':               case 'copy_tbl_change_prefix':               case 'drop_db':               case 'drop_tbl':               case 'empty_tbl':                   $what = $submit_mult;                   break;               case 'check_tbl':               case 'optimize_tbl':               case 'repair_tbl':               case 'analyze_tbl':                   $query_type = $submit_mult;                   unset($submit_mult);                   $mult_btn   = __('Yes');                   break;               case 'export':                   unset($submit_mult);                   include 'db_export.php';                   exit;                   break;           } // end switch        }    } elseif (isset($selected_fld) && !empty($selected_fld)) {        // coming from table structure view - do something with selected columns/fileds        $selected     = $selected_fld;        switch ($submit_mult) {            case 'drop':                $what     = 'drop_fld';                break;            case 'primary':                // Gets table primary key                PMA_DBI_select_db($db);                $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');                $primary     = '';                while ($row = PMA_DBI_fetch_assoc($result)) {                    // Backups the list of primary keys                    if ($row['Key_name'] == 'PRIMARY') {                        $primary .= $row['Column_name'] . ', ';                    }                } // end while                PMA_DBI_free_result($result);                if (empty($primary)) {                    // no primary key, so we can safely create new                    unset($submit_mult);                    $query_type = 'primary_fld';                    $mult_btn   = __('Yes');                } else {                    // primary key exists, so lets as user                    $what = 'primary_fld';                }                break;            case 'index':                unset($submit_mult);                $query_type = 'index_fld';                $mult_btn   = __('Yes');                break;            case 'unique':                unset($submit_mult);                $query_type = 'unique_fld';                $mult_btn   = __('Yes');                break;            case 'spatial':                unset($submit_mult);                $query_type = 'spatial_fld';                $mult_btn   = __('Yes');                break;            case 'ftext':                unset($submit_mult);                $query_type = 'fulltext_fld';                $mult_btn   = __('Yes');                break;            case 'change':                include './tbl_alter.php';                break;            case 'browse':                // this should already be handled by tbl_structure.php        }    } else {        // coming from browsing - do something with selected rows        $what = 'row_delete';        $selected = $rows_to_delete;    }} // end if/** * Displays the confirmation form if required */if (!empty($submit_mult) && !empty($what)) {    unset($message);    include_once './libraries/header.inc.php';    if (strlen($table)) {        include './libraries/tbl_common.php';        $url_query .= '&amp;goto=tbl_sql.php&amp;back=tbl_sql.php';        include './libraries/tbl_info.inc.php';        include_once './libraries/tbl_links.inc.php';    } elseif (strlen($db)) {        include './libraries/db_common.inc.php';        include './libraries/db_info.inc.php';    } else {        include_once './libraries/server_common.inc.php';        include_once './libraries/server_links.inc.php';    }    // Builds the query    $full_query     = '';    if ($what == 'drop_tbl') {        $full_query_views = '';    }    $selected_cnt   = count($selected);    $i = 0;    foreach ($selected AS $idx => $sval) {        switch ($what) {            case 'row_delete':                $full_query .= htmlspecialchars($sval)                    . ';<br />';                break;            case 'drop_db':                $full_query .= 'DROP DATABASE '                    . PMA_backquote(htmlspecialchars($sval))                    . ';<br />';                $reload = 1;                break;            case 'drop_tbl':                $current = $sval;                if (!empty($views) && in_array($current, $views)) {                    $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                } else {                    $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')                        . PMA_backquote(htmlspecialchars($current));                }                break;            case 'empty_tbl':                $full_query .= 'TRUNCATE ';                $full_query .= PMA_backquote(htmlspecialchars($sval))                            . ';<br />';                break;            case 'primary_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table))                        . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'                        . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('                        . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                } else {                    $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '                        . PMA_backquote(htmlspecialchars($sval))                        . ',';                }                if ($i == $selected_cnt-1) {                    $full_query = preg_replace('@,$@', ');<br />', $full_query);                }                break;            case 'drop_fld':                if ($full_query == '') {                    $full_query .= 'ALTER TABLE '                        . PMA_backquote(htmlspecialchars($table));                }                $full_query .= '<br />&nbsp;&nbsp;DROP '                    . PMA_backquote(htmlspecialchars($sval))                    . ',';                if ($i == $selected_cnt - 1) {                    $full_query = preg_replace('@,$@', ';<br />', $full_query);                }                break;        } // end switch        $i++;    }    if ($what == 'drop_tbl') {        if (!empty($full_query)) {            $full_query .= ';<br />' . "\n";        }        if (!empty($full_query_views)) {            $full_query .= $full_query_views . ';<br />' . "\n";        }        unset($full_query_views);    }    // Displays the confirmation form    $_url_params = array(        'query_type' => $what,        'reload' => (! empty($reload) ? 1 : 0),    );    if (strpos(' ' . $action, 'db_') == 1) {        $_url_params['db']= $db;    } elseif (strpos(' ' . $action, 'tbl_') == 1 || $what == 'row_delete') {        $_url_params['db']= $db;        $_url_params['table']= $table;    }    foreach ($selected as $idx => $sval) {        $_url_params['selected'][] = $sval;    }    if ($what == 'drop_tbl' && !empty($views)) {        foreach ($views as $current) {            $_url_params['views'][] = $current;       }    }    if ($what == 'row_delete') {        $_url_params['original_sql_query'] = $original_sql_query;        if (! empty($original_url_query)) {            $_url_params['original_url_query'] = $original_url_query;        }    }    ?><form action="<?php echo $action; ?>" method="post">    <?php    echo PMA_generate_common_hidden_inputs($_url_params);    ?><?php if ($what == 'replace_prefix_tbl' || $what == 'copy_tbl_change_prefix') { ?>        <fieldset class = "input">                <legend><?php echo ($what == 'replace_prefix_tbl' ? __('Replace table prefix') : __('Copy table with prefix')) ?>:</legend>                <table>                <tr>                <td><?php echo __('From'); ?></td><td><input type="text" name="from_prefix" id="initialPrefix"</td>                </tr>                <tr>                <td><?php echo __('To'); ?> </td><td><input type="text" name="to_prefix" id="newPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } elseif ($what == 'add_prefix_tbl') { ?>        <fieldset class = "input">                <legend><?php echo __('Add table prefix') ?>:</legend>                <table>                <tr>                <td><?php echo __('Add prefix'); ?></td>     <td><input type="text" name="add_prefix" id="txtPrefix"</td>                </tr>                </table>        </fieldset>        <fieldset class="tblFooters">                <button type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes"><?php echo __('Submit'); ?></button>        </fieldset>    <?php        } else { ?>    <fieldset class="confirmation">        <legend><?php echo ($what == 'drop_db' ? __('You are about to DESTROY a complete database!') . '&nbsp;' : '') . __('Do you really want to '); ?>:</legend>        <tt><?php echo $full_query; ?></tt>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="mult_btn" value="<?php echo __('Yes'); ?>" id="buttonYes" />        <input type="submit" name="mult_btn" value="<?php echo __('No'); ?>" id="buttonNo" />    </fieldset>    <?php    }    include './libraries/footer.inc.php';} elseif ($mult_btn == __('Yes')) {/** * Executes the query - dropping rows, columns/fields, tables or dbs */    if ($query_type == 'drop_db' || $query_type == 'drop_tbl' || $query_type == 'drop_fld') {        include_once './libraries/relation_cleanup.lib.php';    }    $sql_query      = '';    if ($query_type == 'drop_tbl') {        $sql_query_views = '';    }    $selected_cnt   = count($selected);    $run_parts      = false; // whether to run query after each pass    $use_sql        = false; // whether to include sql.php at the end (to display results)    if ($query_type == 'primary_fld') {        // Gets table primary key        PMA_DBI_select_db($db);        $result      = PMA_DBI_query('SHOW KEYS FROM ' . PMA_backquote($table) . ';');        $primary     = '';        while ($row = PMA_DBI_fetch_assoc($result)) {            // Backups the list of primary keys            if ($row['Key_name'] == 'PRIMARY') {                $primary .= $row['Column_name'] . ', ';            }        } // end while        PMA_DBI_free_result($result);    }    $rebuild_database_list = false;    for ($i = 0; $i < $selected_cnt; $i++) {        switch ($query_type) {            case 'row_delete':                $a_query = $selected[$i];                $run_parts = true;                break;            case 'drop_db':                PMA_relationsCleanupDatabase($selected[$i]);                $a_query   = 'DROP DATABASE '                           . PMA_backquote($selected[$i]);                $reload    = 1;                $run_parts = true;                $rebuild_database_list = true;                break;            case 'drop_tbl':                PMA_relationsCleanupTable($db, $selected[$i]);                $current = $selected[$i];                if (!empty($views) && in_array($current, $views)) {                    $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')                              . PMA_backquote($current);                } else {                    $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')                               . PMA_backquote($current);                }                $reload    = 1;                break;            case 'check_tbl':                $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'optimize_tbl':                $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'analyze_tbl':                $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'repair_tbl':                $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')                           . PMA_backquote($selected[$i]);                $use_sql    = true;                break;            case 'empty_tbl':                $a_query = 'TRUNCATE ';                $a_query .= PMA_backquote($selected[$i]);                $run_parts = true;                break;            case 'drop_fld':                PMA_relationsCleanupColumn($db, $table, $selected[$i]);                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) : ',')                           . ' DROP ' . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ';' : '');                break;            case 'primary_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . (empty($primary) ? '' : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'index_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'unique_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'spatial_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;            case 'fulltext_fld':                $sql_query .= (empty($sql_query) ? 'ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT( ' : ', ')                           . PMA_backquote($selected[$i])                           . (($i == $selected_cnt-1) ? ');' : '');                break;        case 'add_prefix_tbl':                $newtablename = $add_prefix . $selected[$i];                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // ADD PREFIX TO TABLE NAME                $run_parts = true;                break;            case 'replace_prefix_tbl':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'ALTER TABLE ' . PMA_backquote($selected[$i]) . ' RENAME ' . PMA_backquote($newtablename) ; // CHANGE PREFIX PATTERN                $run_parts = true;                break;            case 'copy_tbl_change_prefix':                $current = $selected[$i];                $newtablename = preg_replace("/^" . $from_prefix . "/", $to_prefix, $current);                $a_query = 'CREATE TABLE ' . PMA_backquote($newtablename) . ' SELECT * FROM ' . PMA_backquote($selected[$i]) ; // COPY TABLE AND CHANGE PREFIX PATTERN                $run_parts = true;                break;        } // end switch        // All "DROP TABLE", "DROP FIELD", "OPTIMIZE TABLE" and "REPAIR TABLE"        // statements will be run at once below        if ($run_parts) {            $sql_query .= $a_query . ';' . "\n";            if ($query_type != 'drop_db') {                PMA_DBI_select_db($db);            }            $result = PMA_DBI_query($a_query);        } // end if    } // end for    if ($query_type == 'drop_tbl') {        if (!empty($sql_query)) {        $sql_query .= ';';    } elseif (!empty($sql_query_views)) {        $sql_query = $sql_query_views . ';';            unset($sql_query_views);        }    }    if ($use_sql) {        include './sql.php';    } elseif (!$run_parts) {        PMA_DBI_select_db($db);        $result = PMA_DBI_try_query($sql_query);        if ($result && !empty($sql_query_views)) {            $sql_query .= ' ' . $sql_query_views . ';';            $result = PMA_DBI_try_query($sql_query_views);            unset($sql_query_views);        }        if (! $result) {            $message = PMA_Message::error(PMA_DBI_getError());        }    }    if ($rebuild_database_list) {        // avoid a problem with the database list navigator        // when dropping a db from server_databases        $GLOBALS['pma']->databases->build();    }} else {    $message = PMA_Message::success(__('No change'));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class is inherited by all schema classes * It contains those methods which are common in them * it works like factory pattern */class PMA_Export_Relation_Schema{    private $_pageTitle;    public $showGrid;    public $showColor;    public $tableDimension;    public $sameWide;    public $withDoc;    public $showKeys;    public $orientation;    public $paper;    public $pageNumber;    /**     * Set Page Number     *     * @param integer $value Page Number of the document to be created     *     * @return void     *     * @access public     */    public function setPageNumber($value)    {        $this->pageNumber = isset($value) ? $value : 1;    }    /**     * Set Show Grid     *     * @param boolean $value show grid of the document or not     *     * @return void     *     * @access public     */    public function setShowGrid($value)    {        $this->showGrid = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Sets showColor     *     * @param string $value 'on' to set the the variable     *     * @return nothing     */    public function setShowColor($value)    {        $this->showColor = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Table Dimension     *     * @param boolean $value show table co-ordinates or not     *     * @return void     *     * @access public     */    public function setTableDimension($value)    {        $this->tableDimension = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set same width of All Tables     *     * @param boolean $value set same width of all tables or not     *     * @return void     *     * @access public     */    public function setAllTableSameWidth($value)    {        $this->sameWide = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Data Dictionary     *     * @param boolean $value show selected database data dictionary or not     *     * @return void     *     * @access public     */    public function setWithDataDictionary($value)    {        $this->withDoc = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Show only keys     *     * @param boolean $value show only keys or not     *     * @return void     *     * @access public     */    public function setShowKeys($value)    {        $this->showKeys = (isset($value) && $value == 'on') ? 1 : 0;    }    /**     * Set Orientation     *     * @param string $value Orientation will be portrait or landscape     *     * @return void     *     * @access public     */    public function setOrientation($value)    {        $this->orientation = (isset($value) && $value == 'P') ? 'P' : 'L';    }    /**     * Set type of paper     *     * @param string $value paper type can be A4 etc     *     * @return void     *     * @access public     */    public function setPaper($value)    {        $this->paper = isset($value) ? $value : 'A4';    }    /**     * Set title of the page     *     * @param string $title title of the page displayed at top of the document     *     * @return void     *     * @access public     */    public function setPageTitle($title)    {        $this->_pageTitle=$title;    }    /**     * Set type of export relational schema     *     * @param string $value can be pdf,svg,dia,visio,eps etc     *     * @return void     *     * @access public     */    public function setExportType($value)    {        $this->exportType=$value;    }    /**     * get all tables involved or included in page     *     * @param string  $db         name of the database     * @param integer $pageNumber page no. whose tables will be fetched in an array     *     * @return Array an array of tables     *     * @access public     */    public function getAllTables($db, $pageNumber)    {        global $cfgRelation;         // Get All tables        $tab_sql = 'SELECT table_name FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND pdf_page_number = ' . $pageNumber;        $tab_rs = PMA_query_as_controluser($tab_sql, null, PMA_DBI_QUERY_STORE);        if (!$tab_rs || !PMA_DBI_num_rows($tab_rs) > 0) {            $this->dieSchema('', __('This page does not contain any tables!'));        }        while ($curr_table = @PMA_DBI_fetch_assoc($tab_rs)) {            $alltables[] = PMA_sqlAddSlashes($curr_table['table_name']);        }        return $alltables;    }    /**     * Displays an error message     *     * @param integer $pageNumber    ID of the chosen page     * @param string  $type          Schema Type     * @param string  $error_message The error mesage     *     * @global array    the PMA configuration array     * @global string   the current database name     *     * @access public     *     * @return void     */    function dieSchema($pageNumber, $type = '', $error_message = '')    {        global $cfg;        global $db;        include_once './libraries/header.inc.php';        echo "<p><strong>" . __("SCHEMA ERROR: ") .  $type . "</strong></p>" . "\n";        if (!empty($error_message)) {            $error_message = htmlspecialchars($error_message);        }        echo '<p>' . "\n";        echo '    ' . $error_message . "\n";        echo '</p>' . "\n";        echo '<a href="schema_edit.php?' . PMA_generate_common_url($db)            . '&do=selectpage&chpage=' . $pageNumber . '&action_choose=0'            . '">' . __('Back') . '</a>';        echo "\n";        include_once './libraries/footer.inc.php';        exit();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';PMA_checkParameters(array('db'));$is_show_stats = $cfg['ShowStats'];$db_is_information_schema = PMA_is_system_schema($db);if ($db_is_information_schema) {    $is_show_stats = false;}/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = 'main.php?' . PMA_generate_common_url();$err_url   = $cfg['DefaultTabDatabase'] . '?' . PMA_generate_common_url($db);/** * Ensures the database exists (else move to the "parent" script) and displays * headers */if (! isset($is_db) || ! $is_db) {    if (strlen($db)) {        $is_db = PMA_DBI_select_db($db);        // This "Command out of sync" 2014 error may happen, for example        // after calling a MySQL procedure; at this point we can't select        // the db but it's not necessarily wrong        if (PMA_DBI_getError() && $GLOBALS['errno'] == 2014) {            $is_db = true;            unset($GLOBALS['errno']);        }    }    // Not a valid db name -> back to the welcome page    if (! strlen($db) || ! $is_db) {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'main.php?' . PMA_generate_common_url('', '', '&') . (isset($message) ? '&message=' . urlencode($message) : '') . '&reload=1');        exit;    }} // end if (ensures db exists)/** * Changes database charset if requested by the user */if (isset($submitcollation) && !empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    $sql_query        = 'ALTER DATABASE ' . PMA_backquote($db) . ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    $result           = PMA_DBI_query($sql_query);    $message          = PMA_Message::success();    unset($db_charset, $db_collation);    /**     * If we are in an Ajax request, let us stop the execution here. Necessary for     * db charset change action on db_operations.php.  If this causes a bug on     * other pages, we might have to move this to a different location.     */    if ( $GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, $message->isSuccess());    };}require_once './libraries/header.inc.php';/** * Set parameters for links */$url_query = PMA_generate_common_url($db);?>
<?php/** * Server create and edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$mode = filter_input(INPUT_GET, 'mode');$id = filter_input(INPUT_GET, 'id', FILTER_VALIDATE_INT);$cf = ConfigFile::getInstance();$server_exists = !empty($id) && $cf->get("Servers/$id") !== null;if ($mode == 'edit' && $server_exists) {    $page_title = __('Edit server')        . ' ' . $id . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';} elseif ($mode == 'remove' && $server_exists) {    $cf->removeServer($id);    header('Location: index.php');    exit;} elseif ($mode == 'revert' && $server_exists) {    // handled by process_formset()} else {    $page_title = __('Add a new server');    $id = 0;}if (isset($page_title)) {    echo '<h2>' . $page_title . '</h2>';}$form_display = new FormDisplay();foreach ($forms['Servers'] as $form_name => $form) {    $form_display->registerForm($form_name, $form, $id);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/common.inc.php';require_once './libraries/RecentTable.class.php';/** * Add recently used table and reload the navigation. * * @param string $db Database name where the table is located. * @param string $table The table name */function PMA_addRecentTable($db, $table){    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);    if ($tmp_result === true) {        echo '<span class="hide" id="update_recent_tables"></span>';    } else {        $error = $tmp_result;        $error->display();    }}/** * This is not an Ajax request so we need to generate all this output. */if (isset($GLOBALS['is_ajax_request']) && !$GLOBALS['is_ajax_request']) {    if (empty($GLOBALS['is_header_sent'])) {        /**         * Gets a core script and starts output buffering work         */        include_once './libraries/ob.lib.php';        PMA_outBufferPre();        // if database storage for user preferences is transient, offer to load        // exported settings from localStorage (detection will be done in JavaScript)        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'                && ! isset($_SESSION['userprefs_autoload']);        if ($userprefs_offer_import) {            $GLOBALS['js_include'][] = 'config.js';        }        // For re-usability, moved http-headers and stylesheets        // to a seperate file. It can now be included by header.inc.php,        // querywindow.php.        include_once './libraries/header_http.inc.php';        include_once './libraries/header_meta_style.inc.php';        include_once './libraries/header_scripts.inc.php';        ?>        <meta name="OBGZip" content="<?php echo ($GLOBALS['cfg']['OBGzip'] ? 'true' : 'false'); ?>" />        <?php /* remove vertical scroll bar bug in ie */ ?>        <!--[if IE 6]>        <style type="text/css">        /* <![CDATA[ */        html {            overflow-y: scroll;        }        /* ]]> */        </style>        <![endif]-->    </head>    <body>        <?php        // Include possible custom headers        if (file_exists(CUSTOM_HEADER_FILE)) {            include CUSTOM_HEADER_FILE;        }        // message of "Cookies required" displayed for auth_type http or config        // note: here, the decoration won't work because without cookies,        // our standard CSS is not operational        if (empty($_COOKIE)) {            PMA_Message::notice(__('Cookies must be enabled past this point.'))->display();        }        // offer to load user preferences from localStorage        if ($userprefs_offer_import) {            include_once './libraries/user_preferences.lib.php';            PMA_userprefs_autoload_header();        }        if (!defined('PMA_DISPLAY_HEADING')) {            define('PMA_DISPLAY_HEADING', 1);        }        // pass configuration for hint tooltip display        // (to be used by PMA_createqTip in js/functions.js)        if (! $GLOBALS['cfg']['ShowHint']) {            echo '<span id="no_hint" class="hide"></span>';        }        /**         * Display heading if needed. Design can be set in css file.         */        if (PMA_DISPLAY_HEADING && $GLOBALS['server'] > 0) {            $server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                            ? $GLOBALS['cfg']['Server']['verbose']                            : $GLOBALS['cfg']['Server']['host'] . (empty($GLOBALS['cfg']['Server']['port'])                                                                   ? ''                                                                   : ':' . $GLOBALS['cfg']['Server']['port']                                                                  )                           );            $separator = "<span class='separator item'>&nbsp;</span>\n";            $item = '<a href="%1$s?%2$s" class="item">';                if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {                    $item .= '%4$s: ';                }                $item .= '%3$s</a>' . "\n";                echo "<div id='floating_menubar'></div>\n";                echo "<div id='serverinfo'>\n";                if ($GLOBALS['cfg']['NavigationBarIconic']) {                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";                }                printf($item,                        $GLOBALS['cfg']['DefaultTabServer'],                        PMA_generate_common_url(),                        htmlspecialchars($server_info),                        __('Server'));                if (strlen($GLOBALS['db'])) {                    echo $separator;                    if ($GLOBALS['cfg']['NavigationBarIconic']) {                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";                    }                    printf($item,                            $GLOBALS['cfg']['DefaultTabDatabase'],                            PMA_generate_common_url($GLOBALS['db']),                            htmlspecialchars($GLOBALS['db']),                            __('Database'));                    // if the table is being dropped, $_REQUEST['purge'] is set to '1'                    // so do not display the table name in upper div                    if (strlen($GLOBALS['table']) && ! (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1')) {                        include_once './libraries/tbl_info.inc.php';                        echo $separator;                        if ($GLOBALS['cfg']['NavigationBarIconic']) {                            $icon = isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? 'b_views.png' : 's_tbl.png';                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";                        }                        printf($item,                            $GLOBALS['cfg']['DefaultTabTable'],                            PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']),                            str_replace(' ', '&nbsp;', htmlspecialchars($GLOBALS['table'])),                            (isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? __('View') : __('Table')));                        /**                         * Displays table comment                         */                        if (!empty($show_comment) && ! isset($GLOBALS['avoid_show_comment'])) {                            if (strstr($show_comment, '; InnoDB free')) {                                $show_comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);                            }                            echo '<span class="table_comment" id="span_table_comment">'                                .'&quot;' . htmlspecialchars($show_comment)                                .'&quot;</span>' . "\n";                        } // end if                        // add recently used table and reload the navigation                        if ($GLOBALS['cfg']['LeftRecentTable'] > 0) {                            PMA_addRecentTable($GLOBALS['db'], $GLOBALS['table']);                        }                    } else {                        // no table selected, display database comment if present                        /**                         * Settings for relations stuff                         */                        include_once './libraries/relation.lib.php';                        $cfgRelation = PMA_getRelationsParam();                        // Get additional information about tables for tooltip is done                        // in libraries/db_info.inc.php only once                        if ($cfgRelation['commwork']) {                            $comment = PMA_getDbComment($GLOBALS['db']);                            /**                             * Displays table comment                             */                            if (! empty($comment)) {                                echo '<span class="table_comment"'                                    . ' id="span_table_comment">&quot;'                                    . htmlspecialchars($comment)                                    . '&quot;</span>' . "\n";                            } // end if                        }                    }                }            }            echo '<div class="clearfloat"></div>';            echo '</div>';        }        /**         * Sets a variable to remember headers have been sent         */        $GLOBALS['is_header_sent'] = true;//end if (!$GLOBALS['is_ajax_request'])} else {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header_http.inc.php';        $GLOBALS['is_header_sent'] = true;    }}?>
<?php  function loadData($type, $data) {    if (!$data) return $data;    $tmp = unpack($type, $data);    return current($tmp);  }  function swap($binValue) {    $result = $binValue{strlen($binValue) - 1};    for($i = strlen($binValue) - 2; $i >= 0 ; $i--) {      $result .= $binValue{$i};    }    return $result;  }  function packDouble($value, $mode = 'LE') {    $value = (double)$value;    $bin = pack("d", $value);    //We test if the conversion of an integer (1) is done as LE or BE by default    switch (pack ('L', 1)) {      case pack ('V', 1): //Little Endian        $result = ($mode == 'LE') ? $bin : swap($bin);      break;      case pack ('N', 1): //Big Endian        $result = ($mode == 'BE') ? $bin : swap($bin);      break;      default: //Some other thing, we just return false        $result = FALSE;    }    return $result;  }  class ShapeFile {    var $FileName;    var $SHPFile;    var $SHXFile;    var $DBFFile;    var $DBFHeader;    var $lastError = "";    var $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0);    var $fileLength = 0;    var $shapeType = 0;    var $records;    function ShapeFile($shapeType, $boundingBox = array("xmin" => 0.0, "ymin" => 0.0, "xmax" => 0.0, "ymax" => 0.0), $FileName = NULL) {      $this->shapeType = $shapeType;      $this->boundingBox = $boundingBox;      $this->FileName = $FileName;      $this->fileLength = 50;    }    function loadFromFile($FileName) {      $this->FileName = $FileName;      if (($this->_openSHPFile()) && ($this->_openDBFFile())) {        $this->_loadHeaders();        $this->_loadRecords();        $this->_closeSHPFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function saveToFile($FileName = NULL) {      if ($FileName != NULL) $this->FileName = $FileName;      if (($this->_openSHPFile(TRUE)) && ($this->_openSHXFile(TRUE)) && ($this->_openDBFFile(TRUE))) {        $this->_saveHeaders();        $this->_saveRecords();        $this->_closeSHPFile();        $this->_closeSHXFile();        $this->_closeDBFFile();      } else {        return false;      }    }    function addRecord($record) {      if ((isset($this->DBFHeader)) && (is_array($this->DBFHeader))) {        $record->updateDBFInfo($this->DBFHeader);      }      $this->fileLength += ($record->getContentLength() + 4);      $this->records[] = $record;      $this->records[count($this->records) - 1]->recordNumber = count($this->records);      return (count($this->records) - 1);    }    function deleteRecord($index) {      if (isset($this->records[$index])) {        $this->fileLength -= ($this->records[$index]->getContentLength() + 4);        for ($i = $index; $i < (count($this->records) - 1); $i++) {          $this->records[$i] = $this->records[$i + 1];        }        unset($this->records[count($this->records) - 1]);        $this->_deleteRecordFromDBF($index);      }    }    function getDBFHeader() {      return $this->DBFHeader;    }    function setDBFHeader($header) {      $this->DBFHeader = $header;      for ($i = 0; $i < count($this->records); $i++) {        $this->records[$i]->updateDBFInfo($header);      }    }    function getIndexFromDBFData($field, $value) {      $result = -1;      for ($i = 0; $i < (count($this->records) - 1); $i++) {        if (isset($this->records[$i]->DBFData[$field]) && (strtoupper($this->records[$i]->DBFData[$field]) == strtoupper($value))) {          $result = $i;        }      }      return $result;    }    function _loadDBFHeader() {      $DBFFile = fopen(str_replace('.*', '.dbf', $this->FileName), 'r');      $result = array();      $buff32 = array();      $i = 1;      $inHeader = true;      while ($inHeader) {        if (!feof($DBFFile)) {          $buff32 = fread($DBFFile, 32);          if ($i > 1) {            if (substr($buff32, 0, 1) == chr(13)) {              $inHeader = false;            } else {              $pos = strpos(substr($buff32, 0, 10), chr(0));              $pos = ($pos == 0 ? 10 : $pos);              $fieldName = substr($buff32, 0, $pos);              $fieldType = substr($buff32, 11, 1);              $fieldLen = ord(substr($buff32, 16, 1));              $fieldDec = ord(substr($buff32, 17, 1));              array_push($result, array($fieldName, $fieldType, $fieldLen, $fieldDec));            }          }          $i++;        } else {          $inHeader = false;        }      }      fclose($DBFFile);      return($result);    }    function _deleteRecordFromDBF($index) {      if (@dbase_delete_record($this->DBFFile, $index)) {        @dbase_pack($this->DBFFile);      }    }    function _loadHeaders() {      fseek($this->SHPFile, 24, SEEK_SET);      $this->fileLength = loadData("N", fread($this->SHPFile, 4));      fseek($this->SHPFile, 32, SEEK_SET);      $this->shapeType = loadData("V", fread($this->SHPFile, 4));      $this->boundingBox = array();      $this->boundingBox["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->boundingBox["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->DBFHeader = $this->_loadDBFHeader();    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHPFile, pack("N", $this->fileLength));      fwrite($this->SHPFile, pack("V", 1000));      fwrite($this->SHPFile, pack("V", $this->shapeType));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHPFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHPFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHPFile, pack("dddd", 0, 0, 0, 0));      fwrite($this->SHXFile, pack("NNNNNN", 9994, 0, 0, 0, 0, 0));      fwrite($this->SHXFile, pack("N", 50 + 4*count($this->records)));      fwrite($this->SHXFile, pack("V", 1000));      fwrite($this->SHXFile, pack("V", $this->shapeType));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymin']));      fwrite($this->SHXFile, packDouble($this->boundingBox['xmax']));      fwrite($this->SHXFile, packDouble($this->boundingBox['ymax']));      fwrite($this->SHXFile, pack("dddd", 0, 0, 0, 0));    }    function _loadRecords() {      fseek($this->SHPFile, 100);      while (!feof($this->SHPFile)) {        $bByte = ftell($this->SHPFile);        $record = new ShapeRecord(-1);        $record->loadFromFile($this->SHPFile, $this->DBFFile);        $eByte = ftell($this->SHPFile);        if (($eByte <= $bByte) || ($record->lastError != "")) {          return false;        }        $this->records[] = $record;      }    }    function _saveRecords() {      if (file_exists(str_replace('.*', '.dbf', $this->FileName))) {        @unlink(str_replace('.*', '.dbf', $this->FileName));      }      if (!($this->DBFFile = @dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader))) {        return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      $offset = 50;      if (is_array($this->records) && (count($this->records) > 0)) {        reset($this->records);        while (list($index, $record) = each($this->records)) {          //Save the record to the .shp file          $record->saveToFile($this->SHPFile, $this->DBFFile, $index + 1);          //Save the record to the .shx file          fwrite($this->SHXFile, pack("N", $offset));          fwrite($this->SHXFile, pack("N", $record->getContentLength()));          $offset += (4 + $record->getContentLength());        }      }      @dbase_pack($this->DBFFile);    }    function _openSHPFile($toWrite = false) {      $this->SHPFile = @fopen(str_replace('.*', '.shp', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHPFile) {        return $this->setError(sprintf("It wasn't possible to open the Shape file '%s'", str_replace('.*', '.shp', $this->FileName)));      }      return TRUE;    }    function _closeSHPFile() {      if ($this->SHPFile) {        fclose($this->SHPFile);        $this->SHPFile = NULL;      }    }    function _openSHXFile($toWrite = false) {      $this->SHXFile = @fopen(str_replace('.*', '.shx', $this->FileName), ($toWrite ? "wb+" : "rb"));      if (!$this->SHXFile) {        return $this->setError(sprintf("It wasn't possible to open the Index file '%s'", str_replace('.*', '.shx', $this->FileName)));      }      return TRUE;    }    function _closeSHXFile() {      if ($this->SHXFile) {        fclose($this->SHXFile);        $this->SHXFile = NULL;      }    }    function _openDBFFile($toWrite = false) {      $checkFunction = $toWrite ? "is_writable" : "is_readable";      if (($toWrite) && (!file_exists(str_replace('.*', '.dbf', $this->FileName)))) {        if (!@dbase_create(str_replace('.*', '.dbf', $this->FileName), $this->DBFHeader)) {          return $this->setError(sprintf("It wasn't possible to create the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      }      if ($checkFunction(str_replace('.*', '.dbf', $this->FileName))) {        $this->DBFFile = dbase_open(str_replace('.*', '.dbf', $this->FileName), ($toWrite ? 2 : 0));        if (!$this->DBFFile) {          return $this->setError(sprintf("It wasn't possible to open the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));        }      } else {        return $this->setError(sprintf("It wasn't possible to find the DBase file '%s'", str_replace('.*', '.dbf', $this->FileName)));      }      return TRUE;    }    function _closeDBFFile() {      if ($this->DBFFile) {        dbase_close($this->DBFFile);        $this->DBFFile = NULL;      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }  class ShapeRecord {    var $SHPFile = NULL;    var $DBFFile = NULL;    var $recordNumber = NULL;    var $shapeType = NULL;    var $lastError = "";    var $SHPData = array();    var $DBFData = array();    function ShapeRecord($shapeType) {      $this->shapeType = $shapeType;    }    function loadFromFile(&$SHPFile, &$DBFFile) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->_loadHeaders();      switch ($this->shapeType) {        case 0:          $this->_loadNullRecord();        break;        case 1:          $this->_loadPointRecord();        break;        case 3:          $this->_loadPolyLineRecord();        break;        case 5:          $this->_loadPolygonRecord();        break;        case 8:          $this->_loadMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_loadDBFData();    }    function saveToFile(&$SHPFile, &$DBFFile, $recordNumber) {      $this->SHPFile = $SHPFile;      $this->DBFFile = $DBFFile;      $this->recordNumber = $recordNumber;      $this->_saveHeaders();      switch ($this->shapeType) {        case 0:          $this->_saveNullRecord();        break;        case 1:          $this->_savePointRecord();        break;        case 3:          $this->_savePolyLineRecord();        break;        case 5:          $this->_savePolygonRecord();        break;        case 8:          $this->_saveMultiPointRecord();        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      $this->_saveDBFData();    }    function updateDBFInfo($header) {      $tmp = $this->DBFData;      unset($this->DBFData);      $this->DBFData = array();      reset($header);      while (list($key, $value) = each($header)) {        $this->DBFData[$value[0]] = (isset($tmp[$value[0]])) ? $tmp[$value[0]] : "";      }    }    function _loadHeaders() {      $this->recordNumber = loadData("N", fread($this->SHPFile, 4));      $tmp = loadData("N", fread($this->SHPFile, 4)); //We read the length of the record      $this->shapeType = loadData("V", fread($this->SHPFile, 4));    }    function _saveHeaders() {      fwrite($this->SHPFile, pack("N", $this->recordNumber));      fwrite($this->SHPFile, pack("N", $this->getContentLength()));      fwrite($this->SHPFile, pack("V", $this->shapeType));    }    function _loadPoint() {      $data = array();      $data["x"] = loadData("d", fread($this->SHPFile, 8));      $data["y"] = loadData("d", fread($this->SHPFile, 8));      return $data;    }    function _savePoint($data) {      fwrite($this->SHPFile, packDouble($data["x"]));      fwrite($this->SHPFile, packDouble($data["y"]));    }    function _loadNullRecord() {      $this->SHPData = array();    }    function _saveNullRecord() {      //Don't save anything    }    function _loadPointRecord() {      $this->SHPData = $this->_loadPoint();    }    function _savePointRecord() {      $this->_savePoint($this->SHPData);    }    function _loadMultiPointRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->SHPData["points"][] = $this->_loadPoint();      }    }    function _saveMultiPointRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("V", $this->SHPData["numpoints"]));      for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {        $this->_savePoint($this->SHPData["points"][$i]);      }    }    function _loadPolyLineRecord() {      $this->SHPData = array();      $this->SHPData["xmin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymin"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["xmax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["ymax"] = loadData("d", fread($this->SHPFile, 8));      $this->SHPData["numparts"]  = loadData("V", fread($this->SHPFile, 4));      $this->SHPData["numpoints"] = loadData("V", fread($this->SHPFile, 4));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        $this->SHPData["parts"][$i] = loadData("V", fread($this->SHPFile, 4));      }      $firstIndex = ftell($this->SHPFile);      $readPoints = 0;      reset($this->SHPData["parts"]);      while (list($partIndex, $partData) = each($this->SHPData["parts"])) {        if (!isset($this->SHPData["parts"][$partIndex]["points"]) || !is_array($this->SHPData["parts"][$partIndex]["points"])) {          $this->SHPData["parts"][$partIndex] = array();          $this->SHPData["parts"][$partIndex]["points"] = array();        }        while (!in_array($readPoints, $this->SHPData["parts"]) && ($readPoints < ($this->SHPData["numpoints"])) && !feof($this->SHPFile)) {          $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();          $readPoints++;        }      }      fseek($this->SHPFile, $firstIndex + ($readPoints*16));    }    function _savePolyLineRecord() {      fwrite($this->SHPFile, pack("dddd", $this->SHPData["xmin"], $this->SHPData["ymin"], $this->SHPData["xmax"], $this->SHPData["ymax"]));      fwrite($this->SHPFile, pack("VV", $this->SHPData["numparts"], $this->SHPData["numpoints"]));      for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {        fwrite($this->SHPFile, pack("V", count($this->SHPData["parts"][$i])));      }      reset($this->SHPData["parts"]);      foreach ($this->SHPData["parts"] as $partData){        reset($partData["points"]);        while (list($pointIndex, $pointData) = each($partData["points"])) {          $this->_savePoint($pointData);        }      }    }    function _loadPolygonRecord() {      $this->_loadPolyLineRecord();    }    function _savePolygonRecord() {      $this->_savePolyLineRecord();    }    function addPoint($point, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't add anything        break;        case 1:          //Substitutes the value of the current point          $this->SHPData = $point;        break;        case 3:        case 5:          //Adds a new point to the selected part          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["parts"][$partIndex]["points"][] = $point;          $this->SHPData["numparts"] = count($this->SHPData["parts"]);          $this->SHPData["numpoints"]++;        break;        case 8:          //Adds a new point          if (!isset($this->SHPData["xmin"]) || ($this->SHPData["xmin"] > $point["x"])) $this->SHPData["xmin"] = $point["x"];          if (!isset($this->SHPData["ymin"]) || ($this->SHPData["ymin"] > $point["y"])) $this->SHPData["ymin"] = $point["y"];          if (!isset($this->SHPData["xmax"]) || ($this->SHPData["xmax"] < $point["x"])) $this->SHPData["xmax"] = $point["x"];          if (!isset($this->SHPData["ymax"]) || ($this->SHPData["ymax"] < $point["y"])) $this->SHPData["ymax"] = $point["y"];          $this->SHPData["points"][] = $point;          $this->SHPData["numpoints"]++;        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function deletePoint($pointIndex = 0, $partIndex = 0) {      switch ($this->shapeType) {        case 0:          //Don't delete anything        break;        case 1:          //Sets the value of the point to zero          $this->SHPData["x"] = 0.0;          $this->SHPData["y"] = 0.0;        break;        case 3:        case 5:          //Deletes the point from the selected part, if exists          if (isset($this->SHPData["parts"][$partIndex]) && isset($this->SHPData["parts"][$partIndex]["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["parts"][$partIndex]["points"]) - 1); $i++) {              $this->SHPData["parts"][$partIndex]["points"][$i] = $this->SHPData["parts"][$partIndex]["points"][$i + 1];            }            unset($this->SHPData["parts"][$partIndex]["points"][count($this->SHPData["parts"][$partIndex]["points"]) - 1]);            $this->SHPData["numparts"] = count($this->SHPData["parts"]);            $this->SHPData["numpoints"]--;          }        break;        case 8:          //Deletes the point, if exists          if (isset($this->SHPData["points"][$pointIndex])) {            for ($i = $pointIndex; $i < (count($this->SHPData["points"]) - 1); $i++) {              $this->SHPData["points"][$i] = $this->SHPData["points"][$i + 1];            }            unset($this->SHPData["points"][count($this->SHPData["points"]) - 1]);            $this->SHPData["numpoints"]--;          }        break;        default:          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }    }    function getContentLength() {      switch ($this->shapeType) {        case 0:          $result = 0;        break;        case 1:          $result = 10;        break;        case 3:        case 5:          $result = 22 + 2*count($this->SHPData["parts"]);          for ($i = 0; $i < count($this->SHPData["parts"]); $i++) {            $result += 8*count($this->SHPData["parts"][$i]["points"]);          }        break;        case 8:          $result = 20 + 8*count($this->SHPData["points"]);        break;        default:          $result = false;          $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));        break;      }      return $result;    }    function _loadDBFData() {      $this->DBFData = @dbase_get_record_with_names($this->DBFFile, $this->recordNumber);      unset($this->DBFData["deleted"]);    }    function _saveDBFData() {      unset($this->DBFData["deleted"]);      if ($this->recordNumber <= dbase_numrecords($this->DBFFile)) {        if (!dbase_replace_record($this->DBFFile, array_values($this->DBFData), $this->recordNumber)) {          $this->setError("I wasn't possible to update the information in the DBF file.");        }      } else {        if (!dbase_add_record($this->DBFFile, array_values($this->DBFData))) {          $this->setError("I wasn't possible to add the information to the DBF file.");        }      }    }    function setError($error) {      $this->lastError = $error;      return false;    }  }?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the bookmark feature * * @package PhpMyAdmin *//** * Defines the bookmark parameters for the current user * * @return  array    the bookmark parameters for the current user * @access  public */function PMA_Bookmark_getParams(){    static $cfgBookmark = null;    if (null !== $cfgBookmark) {        return $cfgBookmark;    }    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['bookmarkwork']) {        $cfgBookmark = array(            'user'  => $GLOBALS['cfg']['Server']['user'],            'db'    => $GLOBALS['cfg']['Server']['pmadb'],            'table' => $GLOBALS['cfg']['Server']['bookmarktable'],        );    } else {        $cfgBookmark = false;    }    return $cfgBookmark;} // end of the 'PMA_Bookmark_getParams()' function/** * Gets the list of bookmarks defined for the current database * * @global  resource  the controluser db connection handle * * @param string    the current database name * * @return  array     the bookmarks list (key as index, label as value) * * @access  public */function PMA_Bookmark_getList($db){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return array();    }    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . ' ORDER BY label';    $per_user = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'\''            . ' ORDER BY label';    $global = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    foreach ($global as $key => $val) {        $global[$key] = $val . ' (' . __('shared') . ')';    }    $ret = $global + $per_user;    asort($ret);    return $ret;} // end of the 'PMA_Bookmark_getList()' function/** * Gets the sql command from a bookmark * * @global  resource  the controluser db connection handle * * @param string    the current database name * @param mixed     the id of the bookmark to get * @param string    which field to look up the $id * @param boolean  true: get all bookmarks regardless of the owning user * @param boolean   whether to ignore bookmarks with no user * * @return  string    the sql query * * @access  public */function PMA_Bookmark_get($db, $id, $id_field = 'id', $action_bookmark_all = false, $exact_user_match = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return '';    }    $query = 'SELECT query FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])        . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\'';    if (!$action_bookmark_all) {        $query .= ' AND (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\'';        if (!$exact_user_match) {            $query .= ' OR user = \'\'';        }        $query .= ')';    }    $query .= ' AND ' . PMA_backquote($id_field) . ' = ' . $id;    return PMA_DBI_fetch_value($query, 0, 0, $controllink);} // end of the 'PMA_Bookmark_get()' function/** * Adds a bookmark * * @global  resource  the controluser db connection handle * * @param array     the properties of the bookmark to add; here, *                    $fields['query'] is urlencoded * @param boolean   whether to make the bookmark available for all users * * @return  boolean   whether the INSERT succeeds or not * * @access  public */function PMA_Bookmark_save($fields, $all_users = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query = 'INSERT INTO ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])           . ' (id, dbase, user, query, label) VALUES (NULL, \'' . PMA_sqlAddSlashes($fields['dbase']) . '\', \'' . ($all_users ? '' : PMA_sqlAddSlashes($fields['user'])) . '\', \'' . PMA_sqlAddSlashes(urldecode($fields['query'])) . '\', \'' . PMA_sqlAddSlashes($fields['label']) . '\')';    return PMA_DBI_query($query, $controllink);} // end of the 'PMA_Bookmark_save()' function/** * Deletes a bookmark * * @global  resource  the controluser db connection handle * * @param string   the current database name * @param integer  the id of the bookmark to get * * @access  public */function PMA_Bookmark_delete($db, $id){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query  = 'DELETE FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . '        OR user = \'\')'            . ' AND id = ' . $id;    return PMA_DBI_try_query($query, $controllink);} // end of the 'PMA_Bookmark_delete()' function/** * Bookmark Support */$GLOBALS['cfg']['Bookmark'] = PMA_Bookmark_getParams();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */# GNU iconv code set to IBM AIX libiconv code set table# Keys of this table should be in lowercase, and searches should be performed using lowercase!$gnu_iconv_to_aix_iconv_codepage_map = array (    // "iso-8859-[1-9]" --> "ISO8859-[1-9]" according to http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/basetrf2/setlocale.htm    'iso-8859-1' => 'ISO8859-1',    'iso-8859-2' => 'ISO8859-2',    'iso-8859-3' => 'ISO8859-3',    'iso-8859-4' => 'ISO8859-4',    'iso-8859-5' => 'ISO8859-5',    'iso-8859-6' => 'ISO8859-6',    'iso-8859-7' => 'ISO8859-7',    'iso-8859-8' => 'ISO8859-8',    'iso-8859-9' => 'ISO8859-9',    // "big5" --> "IBM-eucTW" according to http://kadesh.cepba.upc.es/mancpp/classref/ref/ITranscoder_DSC.htm    'big5' => 'IBM-eucTW',    // Other mappings corresponding to the phpMyAdmin dropdown box when using the charset conversion feature    'euc-jp' => 'IBM-eucJP',    'koi8-r' => 'IBM-eucKR',    'ks_c_5601-1987' => 'KSC5601.1987-0',    'tis-620' => 'TIS-620',    'utf-8' => 'UTF-8');/** * Wrapper around IBM AIX iconv(), whose character set naming differs * from the GNU version of iconv(). * * @param string   input character set * @param string   output character set * @param string   the string to convert * * @return  mixed    converted string or false on failure * * @access  public * */function PMA_aix_iconv_wrapper($in_charset, $out_charset, $str){    global $gnu_iconv_to_aix_iconv_codepage_map;    // Check for transliteration argument at the end of output character set name    $translit_search = strpos(strtolower($out_charset), '//translit');    $using_translit = (!($translit_search === false));    // Extract "plain" output character set name (without any transliteration argument)    $out_charset_plain = ($using_translit ? substr($out_charset, 0, $translit_search) : $out_charset);    // Transform name of input character set (if found)    if (array_key_exists(strtolower($in_charset), $gnu_iconv_to_aix_iconv_codepage_map)) {        $in_charset = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($in_charset)];    }    // Transform name of "plain" output character set (if found)    if (array_key_exists(strtolower($out_charset_plain), $gnu_iconv_to_aix_iconv_codepage_map)) {        $out_charset_plain = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($out_charset_plain)];    }    // Add transliteration argument again (exactly as specified by user) if used    // Build the output character set name that we will use    $out_charset = ($using_translit ? $out_charset_plain . substr($out_charset, $translit_search) : $out_charset_plain);    // NOTE: Transliteration not supported; we will use the "plain" output character set name    $out_charset = $out_charset_plain;    // Call iconv() with the possibly modified parameters    $result = iconv($in_charset, $out_charset, $str);    return $result;} //  end of the "PMA_aix_iconv_wrapper()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for trigger management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_TRI_setGlobals(){    global $action_timings, $event_manipulations;    // Some definitions for triggers    $action_timings      = array('BEFORE',                                 'AFTER');    $event_manipulations = array('INSERT',                                 'UPDATE',                                 'DELETE');}/** * Main function for the triggers functionality */function PMA_TRI_main(){    global $db, $table;    PMA_TRI_setGlobals();    /**     * Process all requests     */    PMA_TRI_handleEditor();    PMA_TRI_handleExport();    /**     * Display a list of available triggers     */    $items = PMA_DBI_get_triggers($db, $table);    echo PMA_RTE_getList('trigger', $items);    /**     * Display a link for adding a new trigger,     * if the user has the necessary privileges     */    echo PMA_TRI_getFooterLinks();} // end PMA_TRI_main()/** * Handles editor requests for adding or editing an item */function PMA_TRI_handleEditor(){    global $_REQUEST, $_POST, $errors, $db, $table;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_TRI_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $trigger = PMA_TRI_getDataFromName($_REQUEST['item_original_name']);                $create_item = $trigger['create'];                $drop_item = $trigger['drop'] . ';';                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped trigger.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Trigger %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Trigger %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $items = PMA_DBI_get_triggers($db, $table, '');                $trigger = false;                foreach ($items as $value) {                    if ($value['name'] == $_REQUEST['item_name']) {                        $trigger = $value;                    }                }                $extra_data['insert'] = false;                if (empty($table) || ($trigger !== false && $table == $trigger['table'])) {                    $extra_data['insert'] = true;                    $extra_data['new_row'] = PMA_TRI_getRowForList($trigger);                    $extra_data['name'] = htmlspecialchars(                        strtoupper($_REQUEST['item_name'])                    );                }                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item']))) // FIXME: this must be simpler than that    ) {        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_TRI_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit trigger");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])            ) {                $item = PMA_TRI_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_TRI_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_TRI_getEditorForm($mode, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_TRI_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_table',                     'item_original_name',                     'item_action_timing',                     'item_event_manipulation',                     'item_definition',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    return $retval;} // end PMA_TRI_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit trigger" form given the name of a trigger. * * @param   string   $name   The name of the trigger. * * @return  array    Data necessary to create the editor. */function PMA_TRI_getDataFromName($name){    global $db, $table, $_REQUEST;    $temp = array();    $items = PMA_DBI_get_triggers($db, $table, '');    foreach ($items as $value) {        if ($value['name'] == $name) {            $temp = $value;        }    }    if (empty($temp)) {        return false;    } else {        $retval = array();        $retval['create']                  = $temp['create'];        $retval['drop']                    = $temp['drop'];        $retval['item_name']               = $temp['name'];        $retval['item_table']              = $temp['table'];        $retval['item_action_timing']      = $temp['action_timing'];        $retval['item_event_manipulation'] = $temp['event_manipulation'];        $retval['item_definition']         = $temp['definition'];        $retval['item_definer']            = $temp['definer'];        return $retval;    }} // end PMA_TRI_getDataFromName()/** * Displays a form used to add/edit a trigger * * @param   string   $mode         If the editor will be used edit a trigger *                                 or add a new one: 'edit' or 'add'. * @param   array    $item         Data for the trigger returned by *                                 PMA_TRI_getDataFromRequest() or *                                 PMA_TRI_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_TRI_getEditorForm($mode, $item){    global $db, $table, $event_manipulations, $action_timings;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_definition',                       'item_definer'                   );    foreach ($need_escape as $key => $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    $query  = "SELECT `TABLE_NAME` FROM `INFORMATION_SCHEMA`.`TABLES` ";    $query .= "WHERE `TABLE_SCHEMA`='" . PMA_sqlAddSlashes($db) . "' ";    $query .= "AND `TABLE_TYPE`='BASE TABLE'";    $tables = PMA_DBI_fetch_result($query);    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_triggers.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Trigger name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$item['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Table') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_table'>\n";    foreach ($tables as $key => $value) {        $selected = "";        if ($mode == 'add' && $value == $table) {            $selected = " selected='selected'";        } else if ($mode == 'edit' && $value == $item['item_table']) {            $selected = " selected='selected'";        }        $retval .= "            <option$selected>$value</option>\n";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . _pgettext('Trigger action time', 'Time') . "</td>\n";    $retval .= "    <td><select name='item_timing'>\n";    foreach ($action_timings as $key => $value) {        $selected = "";        if (! empty($item['item_action_timing'])            && $item['item_action_timing'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event') . "</td>\n";    $retval .= "    <td><select name='item_event'>\n";    foreach ($event_manipulations as $key => $value) {        $selected = "";        if (! empty($item['item_event_manipulation'])            && $item['item_event_manipulation'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " TRIGGER FORM -->\n\n";    return $retval;} // end PMA_TRI_getEditorForm()/** * Composes the query necessary to create a trigger from an HTTP request. * * @return  string  The CREATE TRIGGER query. */function PMA_TRI_getQueryFromRequest(){    global $_REQUEST, $db, $errors, $action_timings, $event_manipulations;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'TRIGGER ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide a trigger name');    }    if (! empty($_REQUEST['item_timing']) && in_array($_REQUEST['item_timing'], $action_timings)) {        $query .= $_REQUEST['item_timing'] . ' ';    } else {        $errors[] = __('You must provide a valid timing for the trigger');    }    if (! empty($_REQUEST['item_event']) && in_array($_REQUEST['item_event'], $event_manipulations)) {        $query .= $_REQUEST['item_event'] . ' ';    } else {        $errors[] = __('You must provide a valid event for the trigger');    }    $query .= 'ON ';    if (! empty($_REQUEST['item_table']) && in_array($_REQUEST['item_table'], PMA_DBI_get_tables($db))) {        $query .= PMA_backQuote($_REQUEST['item_table']);    } else {        $errors[] = __('You must provide a valid table name');    }    $query .= ' FOR EACH ROW ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a trigger definition.');    }    return $query;} // end PMA_TRI_getQueryFromRequest()?>
<?php/** * Generates the SVG needed for the plot * * @package PhpMyAdmin */require_once 'pma_svg_data_point.php';class PMA_Scatter_Plot{    /**     * @var array   Raw data for the plot     */    private $_data;    /**     * @var array   Data points of the plot     */    private $_dataPoints;    /**     * @var array   Set of default settigs values are here.     */    private $_settings = array(        // Array of colors to be used for plot.        'colors' => array(            '#BCE02E',            '#E0642E',            '#E0D62E',            '#2E97E0',            '#B02EE0',            '#E02E75',            '#5CE02E',            '#E0B02E',            '#000000',            '#0022E0',            '#726CB1',            '#481A36',            '#BAC658',            '#127224',            '#825119',            '#238C74',            '#4C489B',            '#87C9BF',        ),        // Plot background color.        'bgColor' => '#84AD83',        // The width of the plot.        'width' => 520,         // The height of the plot.        'height' => 325,        // Default X Axis label. If empty, label will be taken from the data.        'xLabel' => '',        // Default Y Axis label. If empty, label will be taken from the data.        'yLabel' => '',        // Data point label. If empty, label will be taken from the data.        'dataLabel' => '',    );    /**     * @var array   Options that the user has specified.     */    private $_userSpecifiedSettings = null;    /**     * Returns the settings array     *     * @return the settings array.     */    public function getSettings()    {        return $this->_settings;    }    /**     * Returns the data array     *     * @return the data array.     */    public function getData()    {        return $this->_data;    }    /**     * Constructor. Stores user specified options.     *     * @param array $data    Data for the visualization     * @param array $options Users specified options     */    public function __construct($data, $options)    {        $this->_userSpecifiedSettings = $options;        $this->_data = $data;    }    /**     * All the variable initialization, options handling has to be done here.     */    protected function init()    {        $this->_handleOptions();    }    /**     * A function which handles passed parameters. Useful if desired     * chart needs to be a little bit different from the default one.     */    private function _handleOptions()    {        $this->_dataPoints = array();        if (! is_null($this->_userSpecifiedSettings)) {            foreach (array_keys($this->_userSpecifiedSettings) as $key) {                $this->_settings[$key] = $this->_userSpecifiedSettings[$key];            }        }        if ($this->_settings['dataLabel'] == '') {            $labels = array_keys($this->_data[0]);            $this->_settings['dataLabel'] = $labels[0];        }    }    /**     * Generate the visualization in SVG format.     *     * @return the generated image resource     */    private function _svg()    {        $this->init();        $output   = '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' . "\n";        $output  .= '<svg version="1.1" xmlns:svg="http://www.w3.org/2000/svg"'            . ' xmlns="http://www.w3.org/2000/svg" width="' . $this->_settings['width'] . '"'            . ' height="' . $this->_settings['height'] . '">';        $output .= '<g id="groupPanel">';        $output .= '<defs>            <path id="myTextPath1"                    d="M10,190 L10,50"/>                    <path id="myTextPath2"                    d="M250,10 L370,10"/>                    </defs>';        $output .= '<text x="6" y="190"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath1" >';        $output .= $this->_settings['yLabel'];        $output .= '</textPath>                   </text>';        $output .= '<text x="250" y="10"  style="font-family: Arial; font-size  : 54; stroke:none; fill:#000000;" >                    <textPath xlink:href="#myTextPath2" >';        $output .= $this->_settings['xLabel'];        $output .= '</textPath>                   </text>';        $scale_data = $this->_scaleDataSet($this->_data, $this->_settings['xLabel'], $this->_settings['yLabel']);        $output .= $this->_prepareDataSet($this->_data, 0, $scale_data, $this->_settings['dataLabel']);        $output .= '</g>';        $output .= '</svg>';        return $output;    }    /**     * Get the visualization as a SVG.     *     * @return the visualization as a SVG     */    public function asSVG()    {        $output = $this->_svg();        return $output;    }    /**     * Calculates the scale, horizontal and vertical offset that should be used.     *     * @param array $data Row data     *     * @return an array containing the scale, x and y offsets     */    private function _scaleDataSet($data, $xField, $yField)    {        // Currently assuming only numeric fields are selected        $coordinates = array();        foreach ($data as $row) {            $coordinates[0][] = $row[$xField];            $coordinates[1][] = $row[$yField];        }        for ($i = 0 ; $i < 2 ; $i++) {            $maxC = ($i == 0) ? 500 : 320;            if ( !is_numeric($coordinates[$i][0])) {                $uniqueC = array_unique($coordinates[$i]);                $countC = count(array_unique($coordinates[$i]));                $map = $tmp = array();                foreach ($uniqueC as $uc) {                    $tmp[] = $uc;                }                for ($j = 0 ; $j < $countC ; $j++) {                    $map[$tmp[$j]] = 20 + $j * $maxC / $countC;                }                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                     $coordinates[$i][$j] = $map[$coordinates[$i][$j]];                }            } else if (is_numeric($coordinates[$i][0])) {                $maxC = max($coordinates[$i]);                for ($j = 0 ; $j < count($coordinates[$i]) ; $j++) {                    if ($i == 0) {                         $coordinates[$i][$j] = 20 + 500 * $coordinates[$i][$j] / $maxC;                    } else {                         $coordinates[$i][$j] = 20 + 320 * (1 - $coordinates[$i][$j] / $maxC);                    }                }            }        }        return $coordinates;    }    /**     * Prepares and return the dataset as needed by the visualization.     *     * @param array  $data         Raw data     * @param int    $color_number Start index to the color array     * @param array  $scale_data   Data related to scaling     * @param string $label        Label for the data points     * @return string the formatted array of data.     */    private function _prepareDataSet($data, $color_number, $scale_data, $label)    {        $result = '';        // loop through the rows        for ($i = 0 ; $i < count($data) ; $i++) {            $index = $color_number % sizeof($this->_settings['colors']);            $data_element = new PMA_SVG_Data_Point($scale_data[0][$i], $scale_data[1][$i], $data[$i][$label], $data[$i]);            $options = array('color' => $this->_settings['colors'][$index], 'id' => $i);            $this->_dataPoints[] = $data_element;            $result .= $data_element->prepareRowAsSVG($options);            $color_number++;        }        return $result;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Validation callback. * * @package PhpMyAdmin-setup *//** * Core libraries. */require './lib/common.inc.php';$validators = array();require './libraries/config/validate.lib.php';header('Content-type: application/json');$vids = explode(',', filter_input(INPUT_POST, 'id'));$values = json_decode(filter_input(INPUT_POST, 'values'));if (!($values instanceof stdClass)) {    die(__('Wrong data'));}$values = (array)$values;$result = PMA_config_validate($vids, $values, true);if ($result === false) {    $result = 'Wrong data or no validation for ' . $vids;}echo $result !== true ? json_encode($result) : '';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once "Export_Relation_Schema.class.php";/** * This Class is EPS Library and * helps in developing structure of EPS Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_EPS{    public $font;    public $fontSize;    public $stringCommands;    /**     * The "PMA_EPS" constructor     *     * Upon instantiation This starts writing the EPS Document.     * %!PS-Adobe-3.0 EPSF-3.0 This is the MUST first comment to include     * it shows/tells that the Post Script document is purely under     * Document Structuring Convention [DSC] and is Compliant     * Encapsulated Post Script Document     *     * @return void     * @access public     */    function __construct()    {        $this->stringCommands = "";        $this->stringCommands .= "%!PS-Adobe-3.0 EPSF-3.0 \n";    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     *     * @access public     */    function setTitle($value)    {        $this->stringCommands .= '%%Title: ' . $value . "\n";    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     *     * @access public     */    function setAuthor($value)    {        $this->stringCommands .= '%%Creator: ' . $value . "\n";    }    /**     * Set document creation date     *     * @param string $value sets the date     *     * @return void     *     * @access public     */    function setDate($value)    {        $this->stringCommands .= '%%CreationDate: ' . $value . "\n";    }    /**     * Set document orientation     *     * @param string $value sets the author     *     * @return void     *     * @access public     */    function setOrientation($value)    {        $this->stringCommands .= "%%PageOrder: Ascend \n";        if ($value == "L") {            $value = "Landscape";            $this->stringCommands .= '%%Orientation: ' . $value . "\n";        } else {            $value = "Portrait";            $this->stringCommands .= '%%Orientation: ' . $value . "\n";        }        $this->stringCommands .= "%%EndComments \n";        $this->stringCommands .= "%%Pages 1 \n";        $this->stringCommands .= "%%BoundingBox: 72 150 144 170 \n";    }    /**     * Set the font and size     *     * font can be set whenever needed in EPS     *     * @param string  $value sets the font name e.g Arial     * @param integer $size  sets the size of the font e.g 10     *     * @return void     *     * @access public     */    function setFont($value, $size)    {        $this->font = $value;        $this->fontSize = $size;        $this->stringCommands .= "/" . $value . " findfont   % Get the basic font\n";        $this->stringCommands .= "" . $size . " scalefont            % Scale the font to $size points\n";        $this->stringCommands .= "setfont                 % Make it the current font\n";    }    /**     * Get the font     *     * @return string return the font name e.g Arial     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Get the font Size     *     * @return string return the size of the font e.g 10     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Draw the line     *     * drawing the lines from x,y source to x,y destination and set the     * width of the line. lines helps in showing relationships of tables     *     * @param integer $x_from    The x_from attribute defines the start     *                           left position of the element     * @param integer $y_from    The y_from attribute defines the start     *                           right position of the element     * @param integer $x_to      The x_to attribute defines the end     *                           left position of the element     * @param integer $y_to      The y_to attribute defines the end     *                           right position of the element     * @param integer $lineWidth Sets the width of the line e.g 2     *     * @return void     *     * @access public     */    function line($x_from = 0, $y_from = 0, $x_to = 0, $y_to = 0, $lineWidth = 0)    {        $this->stringCommands .= $lineWidth . " setlinewidth  \n";        $this->stringCommands .= $x_from . ' ' . $y_from  . " moveto \n";        $this->stringCommands .= $x_to . ' ' . $y_to  . " lineto \n";        $this->stringCommands .= "stroke \n";    }    /**     * Draw the rectangle     *     * drawing the rectangle from x,y source to x,y destination and set the     * width of the line. rectangles drawn around the text shown of fields     *     * @param integer $x_from    The x_from attribute defines the start                                 left position of the element     * @param integer $y_from    The y_from attribute defines the start                                 right position of the element     * @param integer $x_to      The x_to attribute defines the end                                 left position of the element     * @param integer $y_to      The y_to attribute defines the end                                 right position of the element     * @param integer $lineWidth Sets the width of the line e.g 2     *     * @return void     *     * @access public     */    function rect($x_from, $y_from, $x_to, $y_to, $lineWidth)    {        $this->stringCommands .= $lineWidth . " setlinewidth  \n";        $this->stringCommands .= "newpath \n";        $this->stringCommands .= $x_from . " " . $y_from  . " moveto \n";        $this->stringCommands .= "0 " . $y_to  . " rlineto \n";        $this->stringCommands .= $x_to . " 0 rlineto \n";        $this->stringCommands .= "0 -" . $y_to  . " rlineto \n";        $this->stringCommands .= "closepath \n";        $this->stringCommands .= "stroke \n";    }    /**     * Set the current point     *     * The moveto operator takes two numbers off the stack and treats     * them as x and y coordinates to which to move. The coordinates     * specified become the current point.     *     * @param integer $x The x attribute defines the left position of the element     * @param integer $y The y attribute defines the right position of the element     *     * @return void     *     * @access public     */    function moveTo($x, $y)    {        $this->stringCommands .= $x . ' ' . $y . " moveto \n";    }    /**     * Output/Display the text     *     * @param string $text The string to be displayed     *     * @return void     *     * @access public     */    function show($text)    {        $this->stringCommands .=  '(' . $text  . ") show \n";    }    /**     * Output the text at specified co-ordinates     *     * @param string  $text String to be displayed     * @param integer $x    X attribute defines the left position of the element     * @param integer $y    Y attribute defines the right position of the element     *     * @return void     *     * @access public     */    function showXY($text, $x, $y)    {        $this->moveTo($x, $y);        $this->show($text);    }    /**     * get width of string/text     *     * EPS text width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other better than this.     * if someone found better than this. would love to hear that method     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     *     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }    /**     * Ends EPS Document     *     * @return void     * @access public     */    function endEpsDoc()    {        $this->stringCommands .= "showpage \n";    }    /**     * Output EPS Document for download     *     * @param string $fileName name of the eps document     *     * @return void     *     * @access public     */    function showOutput($fileName)    {        // if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->stringCommands;        PMA_download_header($fileName . '.eps', 'image/x-eps', strlen($output));        print $output;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in EPS. * * @name Table_Stats * @see PMA_EPS */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             The font  name     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max width among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current eps document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     * @see PMA_EPS, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber, &$same_wide_width,    $showKeys = false, $showInfo = false)    {        global $eps, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $eps->dieSchema(                $pageNumber, "EPS",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''            . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $eps->dieSchema(                $pageNumber, "EPS",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null, PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return string The relation/table name     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font name     * @param integer $fontSize The font size     *     * @global object    The current eps document     *     * @return void     *     * @access private     * @see PMA_EPS     */    private function _setWidthTable($font,$fontSize)    {        global $eps;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $eps->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $eps->getStringWidth('      ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $eps->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize The font size     *     * @return void     * @access private     */    private function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * Draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current eps document     *     * @return void     *     * @access public     * @see PMA_EPS,PMA_EPS::line,PMA_EPS::rect     */    public function tableDraw($showColor)    {        global $eps;        //echo $this->_tableName.'<br />';        $eps->rect($this->x, $this->y + 12, $this->width, $this->heightCell, 1);        $eps->showXY($this->_getTitle(), $this->x + 5, $this->y + 14);        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $eps->rect(                $this->x, $this->y + 12  + $this->currentCell,                $this->width, $this->heightCell, 1            );            $eps->showXY($field, $this->x + 5, $this->y + 14 + $this->currentCell);        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in EPS document. * * @name Relation_Stats * @see PMA_EPS */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2] + 10;        $this->yDest = $dest_pos[2] + 10;    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows     * shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current EPS document     *     * @access public     * @see PMA_EPS     *     * @return void     */    public function relationDraw($changeColor)    {        global $eps;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // draw a line like -- to foreign field        $eps->line(            $this->xSrc,            $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            1        );        // draw a line like -- to master field        $eps->line(            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            $this->xDest,            $this->yDest,            1        );        // draw a line that connects to master field line and foreign field line        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            1        );        $root2 = 2 * sqrt(2);        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            1        );        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            1        );        $eps->line(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            1        );        $eps->line(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            1        );    }}/** end of the "Relation_Stats" class*//** * EPS Relation Schema Class * * Purpose of this class is to generate the EPS Document * which is used for representing the database diagrams. * This class uses post script commands and with * the combination of these commands actually helps in preparing EPS Document. * * This class inherits Export_Relation_Schema class has common functionality added * to this class * * @name Eps_Relation_Schema */class PMA_Eps_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    /**     * The "PMA_EPS_Relation_Schema" constructor     *     * Upon instantiation This starts writing the EPS document     * user will be prompted for download as .eps extension     *     * @return void     * @see PMA_EPS     */    function __construct()    {        global $eps,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setOrientation($_POST['orientation']);        $this->setExportType($_POST['export_type']);        $eps = new PMA_EPS();        $eps->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $eps->setAuthor('phpMyAdmin ' . PMA_VERSION);        $eps->setDate(date("j F Y, g:i a"));        $eps->setOrientation($this->orientation);        $eps->setFont('Verdana', '10');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $eps->getFont(), $eps->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $eps->getFont(), $eps->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $eps->endEpsDoc();        $eps->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font     * @param int     $fontSize     The font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @return void     *     * @access private     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable, $font, $fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     *     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return void     *     * @access private     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * The form used to define the field to add has been submitted */$abort = false;// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    if (isset($_REQUEST['orig_after_field'])) {        $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];    }    if (isset($_REQUEST['orig_field_where'])) {        $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];    }    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];    $regenerate = true;} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 1;}if (isset($_REQUEST['do_save_data'])) {    $query = '';    $definitions = array();    // Transforms the radio button field_key into 3 arrays    $field_cnt      = count($_REQUEST['field_name']);    $field_primary  = array();    $field_index    = array();    $field_unique   = array();    $field_fulltext = array();    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])         && strlen($_REQUEST['field_name'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }            if ($_REQUEST['field_key'][$i] == 'fulltext_' . $i) {                $field_fulltext[]  = $i;            }        } // end if    } // end for    // Builds the field creation statement and alters the table    for ($i = 0; $i < $field_cnt; ++$i) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $definition = ' ADD ' . PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        if ($_REQUEST['field_where'] != 'last') {            // Only the first field can be added somewhere other than at the end            if ($i == 0) {                if ($_REQUEST['field_where'] == 'first') {                    $definition .= ' FIRST';                } else {                    $definition .= ' AFTER ' . PMA_backquote($_REQUEST['after_field']);                }            } else {                $definition .= ' AFTER ' . PMA_backquote($_REQUEST['field_name'][$i-1]);            }        }        $definitions[] = $definition;    } // end for    // Builds the primary keys statements and updates the table    if (count($field_primary)) {        $fields = array();        foreach ($field_primary as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD PRIMARY KEY (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the indexes statements and updates the table    if (count($field_index)) {        $fields = array();        foreach ($field_index as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD INDEX (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the uniques statements and updates the table    if (count($field_unique)) {        $fields = array();        foreach ($field_unique as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD UNIQUE (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the fulltext statements and updates the table    if (count($field_fulltext)) {        $fields = array();        foreach ($field_fulltext as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD FULLTEXT (' . implode(', ', $fields) . ') ';        unset($fields);    }    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);    $sql_query    = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $definitions);    $result = PMA_DBI_try_query($sql_query);    if ($result === true) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table,                        $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        // Go back to the structure sub-page        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        $num_fields = $_REQUEST['orig_num_fields'];        if (isset($_REQUEST['orig_after_field'])) {            $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];        }        if (isset($_REQUEST['orig_field_where'])) {            $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];        }        $regenerate = true;    }} // end do alter table/** * Displays the form used to define the new field */if ($abort == false) {    /**     * Gets tables informations     */    include_once './libraries/tbl_common.php';    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    $active_page = 'tbl_structure.php';    if ($GLOBALS['is_ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    /**     * Display the form     */    $action = 'tbl_addfield.php';    include_once './libraries/tbl_properties.inc.php';    // Diplays the footer    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/Message.class.php';/** * Handles the recently used tables. * * @TODO Change the release version in table pma_recent (#recent in Documentation.html) * * @package PhpMyAdmin */class PMA_RecentTable{    /**     * Defines the internal PMA table which contains recent tables.     *     * @access  private     * @var string     */    private $pma_table;    /**     * Reference to session variable containing recently used tables.     *     * @access public     * @var array     */    public $tables;    /**     * PMA_RecentTable instance.     *     * @var PMA_RecentTable     */    private static $_instance;    public function __construct()    {        if (strlen($GLOBALS['cfg']['Server']['pmadb']) &&            strlen($GLOBALS['cfg']['Server']['recent'])) {            $this->pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                               PMA_backquote($GLOBALS['cfg']['Server']['recent']);        }        $server_id = $GLOBALS['server'];        if (! isset($_SESSION['tmp_user_values']['recent_tables'][$server_id])) {            $_SESSION['tmp_user_values']['recent_tables'][$server_id] =                isset($this->pma_table) ? $this->getFromDb() : array();        }        $this->tables =& $_SESSION['tmp_user_values']['recent_tables'][$server_id];    }    /**     * Returns class instance.     *     * @return PMA_RecentTable     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new PMA_RecentTable();        }        return self::$_instance;    }    /**     * Returns recently used tables from phpMyAdmin database.     *     *     * @return array     */    public function getFromDb()    {        // Read from phpMyAdmin database, if recent tables is not in session        $sql_query            = " SELECT `tables` FROM " . $this->pma_table .            " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save recent tables into phpMyAdmin database.     *     *     * @return true|PMA_Message     */    public function saveToDb()    {        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query            = " REPLACE INTO " . $this->pma_table . " (`username`, `tables`)" .            " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes(json_encode($this->tables)) . "')";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save recent table'));            $message->addMessage('<br /><br />');            $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));            return $message;        }        return true;    }    /**     * Trim recent table according to the LeftRecentTable configuration.     *     * @return boolean True if trimming occurred     */    public function trim()    {        $max = max($GLOBALS['cfg']['LeftRecentTable'], 0);        $trimming_occured = count($this->tables) > $max;        while (count($this->tables) > $max) {            array_pop($this->tables);        }        return $trimming_occured;    }    /**     * Return options for HTML select.     *     * @return string     */    public function getHtmlSelectOption()    {        // trim and save, in case where the configuration is changed        if ($this->trim() && isset($this->pma_table)) {            $this->saveToDb();        }        $html = '<option value="">(' . __('Recent tables') . ') ...</option>';        if (count($this->tables)) {            foreach ($this->tables as $table) {                $html .= '<option value="' . htmlspecialchars(json_encode($table)) . '">' .                         htmlspecialchars('`' . $table['db'] . '`.`' . $table['table'] . '`') . '</option>';            }        } else {            $html .= '<option value="">' . __('There are no recent tables') . '</option>';        }        return $html;    }    /**     * Return HTML select.     *     * @return string     */    public function getHtmlSelect()    {        $html  = '<input type="hidden" name="goto" id="LeftDefaultTabTable" value="' .                         htmlspecialchars($GLOBALS['cfg']['LeftDefaultTabTable']) . '" />';        $html .= '<select name="selected_recent_table" id="recentTable">';        $html .= $this->getHtmlSelectOption();        $html .= '</select>';        return $html;    }    /**     * Add recently used tables.     *     * @param string $db Database name where the table is located     * @param string $table Table name     *     * @return true|PMA_Message True if success, PMA_Message if not     */    public function add($db, $table)    {        $table_arr = array();        $table_arr['db'] = $db;        $table_arr['table'] = $table;        // add only if this is new table        if (! isset($this->tables[0]) || $this->tables[0] != $table_arr) {            array_unshift($this->tables, $table_arr);            $this->tables = array_merge(array_unique($this->tables, SORT_REGULAR));            $this->trim();            if (isset($this->pma_table)) {                return $this->saveToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */$GLOBALS['data_dictionary_relations'] = array(    'CHARACTER_SETS' => array(        'DEFAULT_COLLATE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'COLLATIONS' => array(        'CHARACTER_SET_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'CHARACTER_SETS',            'foreign_field' => 'CHARACTER_SET_NAME'        )    ),    'COLUMNS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'INDEXES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INDEX_PARTS' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'INNODB_LOCKS' => array(        'LOCK_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        )    ),    'INNODB_LOCK_WAITS' => array(        'REQUESTING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'REQUESTED_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        ),        'BLOCKING_TRX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_TRX',            'foreign_field' => 'TRX_ID'        ),        'BLOCKING_LOCK_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_LOCKS',            'foreign_field' => 'LOCK_ID'        )    ),    'INNODB_SYS_COLUMNS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_FIELDS' => array(        'INDEX_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_INDEXES',            'foreign_field' => 'INDEX_ID'        )    ),    'INNODB_SYS_INDEXES' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'INNODB_SYS_TABLESTATS' => array(        'TABLE_ID' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'INNODB_SYS_TABLES',            'foreign_field' => 'TABLE_ID'        )    ),    'PLUGINS' => array(        'MODULE_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'MODULES',            'foreign_field' => 'MODULE_NAME'        )    ),    'SCHEMAS' => array(        'DEFAULT_COLLATION_NAME' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLES' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_COLLATION' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'COLLATIONS',            'foreign_field' => 'COLLATION_NAME'        )    ),    'TABLE_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_CONSTRAINTS' => array(        'CONSTRAINT_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        ),        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ),    'TABLE_DEFINITION_CACHE' => array(        'TABLE_SCHEMA' => array(            'foreign_db'    => 'data_dictionary',            'foreign_table' => 'SCHEMAS',            'foreign_field' => 'SCHEMA_NAME'        )    ));?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_binlog extends PMA_StorageEngine{    /**     * returns string with filename for the MySQL helppage     * about this storage engne     *     * @return  string  mysql helppage filename     */    function getMysqlHelpPage()    {        return 'binary-log';    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @todo a .lib filename should not have code in main(), split or rename file * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load proper code for handling input. */if (@function_exists('mb_strlen')) {    mb_internal_encoding('utf-8');    include './libraries/string_mb.lib.php';} else {    include './libraries/string_native.lib.php';}/** * Load ctype handler. */if (@extension_loaded('ctype')) {    include './libraries/string_type_ctype.lib.php';} else {    include './libraries/string_type_native.lib.php';}/** * Checks if a given character position in the string is escaped or not * * @param string   string to check for * @param integer  the character to check for * @param integer  starting position in the string * @return  boolean  whether the character is escaped or not */function PMA_STR_charIsEscaped($string, $pos, $start = 0){    $pos = max(intval($pos), 0);    $start = max(intval($start), 0);    $len = PMA_strlen($string);    // Base case:    // Check for string length or invalid input or special case of input    // (pos == $start)    if ($pos <= $start || $len <= max($pos, $start)) {        return false;    }    $pos--;    $escaped     = false;    while ($pos >= $start && PMA_substr($string, $pos, 1) == '\\') {        $escaped = !$escaped;        $pos--;    } // end while    return $escaped;} // end of the "PMA_STR_charIsEscaped()" function/** * Checks if a number is in a range * * @param integer  number to check for * @param integer  lower bound * @param integer  upper bound * @return  boolean  whether the number is in the range or not */function PMA_STR_numberInRangeInclusive($num, $lower, $upper){    return ($num >= $lower && $num <= $upper);} // end of the "PMA_STR_numberInRangeInclusive()" function/** * Checks if a character is an SQL identifier * * @param string   character to check for * @param boolean  whether the dot character is valid or not * @return  boolean  whether the character is an SQL identifier or not */function PMA_STR_isSqlIdentifier($c, $dot_is_valid = false){    return (PMA_STR_isAlnum($c)        || ($ord_c = ord($c)) && $ord_c >= 192 && $ord_c != 215 && $ord_c != 249        || $c == '_'        || $c == '$'        || ($dot_is_valid != false && $c == '.'));} // end of the "PMA_STR_isSqlIdentifier()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_application_octetstream__download_info(){    return array(        'info' =>  __('Displays a link to download the binary data of the column. You can use the first option to specify the filename, or use the second option as the name of a column which contains the filename. If you use the second option, you need to set the first option to the empty string.'),        );}/** * */function PMA_transformation_application_octetstream__download(&$buffer, $options = array(), $meta = ''){    global $row, $fields_meta;    if (isset($options[0]) && !empty($options[0])) {        $cn = $options[0]; // filename    } else {        if (isset($options[1]) && !empty($options[1])) {            foreach ($fields_meta as $key => $val) {                if ($val->name == $options[1]) {                    $pos = $key;                    break;                }            }            if (isset($pos)) {                $cn = $row[$pos];            }        }        if (empty($cn)) {            $cn = 'binary_file.dat';        }    }    return      sprintf(        '<a href="transformation_wrapper.php%s&amp;ct=application/octet-stream&amp;cn=%s" title="%s">%s</a>',        $options['wrapper_link'],        urlencode($cn),        htmlspecialchars($cn),        htmlspecialchars($cn)      );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * main css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : (        isset($_COOKIE['pma_fontsize']) ? $_COOKIE['pma_fontsize'] : '82%'));?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    padding:            0;    margin:             0 0.5em 0 0;    color:              #444;    background:         #fff;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>textarea, tt, pre, code {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>h1 {    font-size:          140%;    font-weight:        bold;}h2 {    font-size:          2em;    font-weight:        normal;    text-shadow:        0 1px 0 #fff;    padding:            10px 0 10px 3px;    color:              #777;}/* Hiding icons in the page titles */h2 img{display:none;}h2 a img{display:inline;}.data,.data_full_width {    margin: 0 0 12px 0;}.data_full_width {    width: 100%;}#table_results td.data {border-right: 1px solid #BBBBBB;}h3 {    font-weight:        bold;}a, a:link,a:visited,a:active {    text-decoration:    none;    color:              #235a81;    cursor:             pointer;    outline: none;}a:hover {    text-decoration:    underline;    color:              #235a81;}#initials_table {    background:#f3f3f3;    border:1px solid #aaa;    margin-bottom:10px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;}#initials_table td{padding:8px !important}#initials_table a {    border:1px solid #aaa;    background:#fff;    padding:4px 8px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}dfn {    font-style:         normal;}dfn:hover {    font-style:         normal;    cursor:             help;}th {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         #f3f3f3;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}a img {    border:             0;}hr {    color:              <?php echo $GLOBALS['cfg']['MainColor']; ?>;    background-color:   <?php echo $GLOBALS['cfg']['MainColor']; ?>;    border:             0;    height:             1px;}form {    padding:            0;    margin:             0;    display:            inline;}input[type=text]{    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    box-shadow:0 1px 2px #ddd;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);    border:1px solid #aaa;    color:#555555;    padding:4px;    margin:6px;}input[type=password]{    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    box-shadow:0 1px 2px #ddd;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif);    border:1px solid #aaa;    color:#555555;    padding:4px;    margin:6px;}input[type=submit]{    font-weight:bold;    margin-left:14px;    border: 1px solid #aaa;    padding: 3px 7px;    color: #111;    text-decoration: none;    background: #ddd;    border-radius: 12px;    -webkit-border-radius: 12px;    -moz-border-radius: 12px;    text-shadow: 0 1px 0 #fff;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}input[type=submit]:hover{position: relative;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>    cursor:pointer;}input[type=submit]:active{position: relative;    top: 1px;    left: 1px;}textarea {    overflow:           visible;    height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;}textarea.char {    height:             <?php echo ceil($GLOBALS['cfg']['CharTextareaRows'] * 1.2); ?>em;}fieldset {    margin-top:         1em;    border-radius:4px 4px 0 0;    -moz-border-radius:4px 4px 0 0;    -webkit-border-radius:4px 4px 0 0;    padding:5px;    border:             #aaa solid 1px;    padding:            1.5em;    background:         #eee;    text-shadow:0 1px 0 #fff;    -moz-box-shadow: 1px 1px 2px #fff inset;    -webkit-box-shadow: 1px 1px 2px #fff inset;    box-shadow: 1px 1px 2px #fff inset;}fieldset fieldset {    margin:             0.8em;    background:#fff;    border:1px solid #aaa;    background:none repeat scroll 0 0 #E8E8E8;}fieldset legend {    font-weight:        bold;    color:              #444;    padding:5px 10px;    border-radius:2px;    -moz-border-radius:2px;    -webkit-border-radius:2px;    border:1px solid #aaa;    background-color:   #fff;    -moz-box-shadow:3px 3px 15px #bbb;    -webkit-box-shadow:3px 3px 15px #bbb;    box-shadow:3px 3px 15px #bbb;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}table caption,table th,table td {    padding:            0.3em;    margin:             0.1em;    vertical-align:     top;    text-shadow:0 1px 0 #FFFFFF;}/* 3.4 */table{border-collapse:collapse;}th{border-right:1px solid #fff; text-align:left;}img, button {    vertical-align:     middle;}input[type="checkbox"],input[type="radio"] {    vertical-align: -11%;}select{    -moz-border-radius:2px;    -webkit-border-radius:2px;    border-radius:2px;    -moz-box-shadow:0 1px 2px #ddd;    -webkit-box-shadow:0 1px 2px #ddd;    box-shadow:0 1px 2px #ddd;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>input_bg.gif)}select[multiple] {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'f2f2f2'); ?>}/******************************************************************************//* classes */.clearfloat {    clear: both;}.floatleft {    float: <?php echo $left; ?>;    margin-<?php echo $right; ?>: 1em;}.paddingtop {    padding-top: 1em;}.separator {    color: white;    text-shadow: 0 1px 0 black;}div.tools {   /* border: 1px solid #000000; */    padding: 0.2em;}div.tools a{color:#3a7ead !important;}div.tools,fieldset.tblFooters {    margin-top:         0;    margin-bottom:      0.5em;    /* avoid a thick line since this should be used under another fieldset */    border-top:         0;    text-align:         <?php echo $right; ?>;    float:              none;    clear:              both;    -webkit-border-radius:0 0 4px 4px;    -moz-border-radius:0 0 4px 4px;    border-radius: 0 0 4px 5px;}div.null_div {    height: 20px;    text-align: center;    font-style:normal;    min-width:50px;}fieldset .formelement {    float:              <?php echo $left; ?>;    margin-<?php echo $right; ?>:       0.5em;    /* IE */    white-space:        nowrap;}/* revert for Gecko */fieldset div[class=formelement] {    white-space:        normal;}button.mult_submit {    border:             none;    background-color:   transparent;}/* odd items 1,3,5,7,... */table tr.odd th,.odd {    background: #fff;    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>}/* even items 2,4,6,8,... *//* (tested on CRTs and ACLs) */table tr.even th,.even {    background: #DFDFDF;    <?php echo $_SESSION['PMA_Theme']->getCssIEClearFilter(); ?>}/* odd table rows 1,3,5,7,... */table tr.odd th,table tr.odd,table tr.even th,table tr.even {    text-align:         <?php echo $left; ?>;}<?php if ($GLOBALS['cfg']['BrowseMarkerEnable']) { ?>/* marked table rows */td.marked,table tr.marked td,table tr.marked th,table tr.marked {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7;    color:   <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['BrowsePointerEnable']) { ?>/* hovered items */.odd:hover,.even:hover,.hover,.structure_actions_dropdown {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */    color: <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}/* hovered table rows */table tr.odd:hover th,table tr.even:hover th,table tr.hover th {    background:  url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>marked_bg.png) repeat-x #b6c6d7; /* 3.4 */    color:   <?php echo $GLOBALS['cfg']['BrowsePointerColor']; ?>;}<?php } ?>/** * marks table rows/cells if the db field is in a where condition */.condition {    border-color: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?> !important;}th.condition {    border-width: 1px 1px 0 1px;    border-style: solid;}td.condition {    border-width: 0 1px 0 1px;    border-style: solid;}tr:last-child td.condition {    border-width: 0 1px 1px 1px;}<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>/* for first th which must have right border set (ltr only) */.before-condition {    border-right: 1px solid <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;}<?php } ?>/** * cells with the value NULL */td.null {    font-style: italic;    text-align: <?php echo $right; ?>;}table .valueHeader {    text-align:         <?php echo $right; ?>;    white-space:        normal;}table .value {    text-align:         <?php echo $right; ?>;    white-space:        normal;}/* IE doesnt handles 'pre' right */table [class=value] {    white-space:        normal;}<?php if (! empty($GLOBALS['cfg']['FontFamilyFixed'])) { ?>.value {    font-family:        <?php echo $GLOBALS['cfg']['FontFamilyFixed']; ?>;}<?php } ?>.attention {    color:              red;    font-weight:        bold;}.allfine {    color:              green;}img.lightbulb {    cursor:             pointer;}.pdflayout {    overflow:           hidden;    clip:               inherit;    background-color:   #FFFFFF;    display:            none;    border:             1px solid #000000;    position:           relative;}.pdflayout_table {    background:         #D3DCE3;    color:              #000000;    overflow:           hidden;    clip:               inherit;    z-index:            2;    display:            inline;    visibility:         inherit;    cursor:             move;    position:           absolute;    font-size:          80%;    border:             1px dashed #000000;}/* MySQL Parser */.syntax {    font-family: Verdan, Arial, Tahoma;    font-size:          110%;}.syntax a {    text-decoration: none;    border-bottom:1px dotted black;}.syntax_comment {    padding-left:       4pt;    padding-right:      4pt;}.syntax_digit {}.syntax_digit_hex {}.syntax_digit_integer {}.syntax_digit_float {}.syntax_punct {}.syntax_alpha {}.syntax_alpha_columnType {    text-transform:     uppercase;}.syntax_alpha_columnAttrib {    text-transform:     uppercase;}.syntax_alpha_reservedWord {    text-transform:     uppercase;    font-weight:        bold;}.syntax_alpha_functionName {    text-transform:     uppercase;}.syntax_alpha_identifier {}.syntax_alpha_charset {}.syntax_alpha_variable {}.syntax_quote {    white-space:        pre;}.syntax_quote_backtick {}/* leave some space between icons and text */img.footnotemarker {    display: none;}/* no extra space in table cells */td .icon {    margin: 0;}.selectallarrow {    margin-<?php echo $right; ?>: 0.3em;    margin-<?php echo $left; ?>: 0.6em;}/* message boxes: error, confirmation */.success h1,.notice h1,div.error h1 {    border-bottom:      2px solid;    font-weight:        bold;    text-align:         <?php echo $left; ?>;    margin:             0 0 0.2em 0;}div.success,div.notice,div.error,div.footnotes {    margin:             0.5em 0 1.3em 0;    border:             1px solid;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            10px 10px 10px 25px;        <?php } else { ?>    background-position: 99% 50%;    padding:            25px 10px 10px 10px        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    -moz-box-shadow: 0 1px 1px #fff inset;    -webkit-box-shadow: 0 1px 1px #fff inset;    box-shadow:  0 1px 1px #fff inset;}.success  a{text-decoration:underline;}.notice a{text-decoration:underline;}.error a{text-decoration:underline;}.footnotes a{text-decoration:underline;}.success {    color:              #000000;    background-color:   #ebf8a4;}h1.success, div.success {    border-color:       #a2d246;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_success.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}.success h1 {    border-color:       #00FF00;}.notice, .footnotes {    color:              #000;    background-color:   #e8eef1;}h1.notice,div.notice,div.footnotes {    border-color:       #3a6c7e;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_notice.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}.notice h1 {    border-color:       #ffb10a;}.error {    border:1px solid maroon !important;    color: #000;    background:pink;}h1.error,div.error {    border-color:       #333;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-image:   url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_error.png);    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 5px 50%;        <?php } else { ?>    background-position: 97% 50%;        <?php } ?>    <?php } ?>}div.error h1 {    border-color:       #ff0000;}.confirmation {    color:              #000000;    background-color:   pink;}fieldset.confirmation {}fieldset.confirmation legend {}/* end messageboxes */.tblcomment {    font-size:          70%;    font-weight:        normal;    color:              #000099;}.tblHeaders {    font-weight:        bold;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}div.tools,.tblFooters {    font-weight:        normal;    color:              <?php echo $GLOBALS['cfg']['ThColor']; ?>;    background:         <?php echo $GLOBALS['cfg']['ThBackground']; ?>;}.tblHeaders a:link,.tblHeaders a:active,.tblHeaders a:visited,div.tools a:link,div.tools a:visited,div.tools a:active,.tblFooters a:link,.tblFooters a:active,.tblFooters a:visited {    color:              #0000FF;}.tblHeaders a:hover,div.tools a:hover,.tblFooters a:hover {    color:              #FF0000;}/* forbidden, no privilegs */.noPrivileges {    color:              #FF0000;    font-weight:        bold;}/* disabled text */.disabled,.disabled a:link,.disabled a:active,.disabled a:visited {    color:              #666666;}.disabled a:hover {    color:              #666666;    text-decoration:    none;}tr.disabled td,td.disabled {    background-color:   #f3f3f3;    color:#aaa;}.nowrap {    white-space:        nowrap;}/** * login form */body.loginform h1,body.loginform a.logo {    display: block;    text-align: center;}body.loginform {    text-align: center;}body.loginform div.container {    text-align: <?php echo $left; ?>;    width: 30em;    margin: 0 auto;}form.login label {    float: <?php echo $left; ?>;    width: 10em;    font-weight: bolder;}.commented_column {    border-bottom: 1px dashed black;}.column_attribute {    font-size: 70%;}/******************************************************************************//* specific elements *//* topmenu */#topmenu a {    text-shadow: 0 1px 0 #fff;}#topmenu .error {    background:#eee;border: 0 !important;color:#aaa;}ul#topmenu, ul#topmenu2, ul.tabs {    font-weight:        bold;    list-style-type:    none;    margin:             0;    padding:            0;}ul#topmenu2 {    margin: 0.25em 0.5em 0;    height: 2em;    clear: both;}ul#topmenu li, ul#topmenu2 li {    float:              <?php echo $left; ?>;    margin:             0;    vertical-align:     middle;}#topmenu img, #topmenu2 img {    margin-right:0.5em;    vertical-align:-3px;}.menucontainer{    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_bg.png) repeat-x;    border-top:1px solid #aaa;}/* default tab styles */.tabactive {    background:#fff !important;}ul#topmenu a, ul#topmenu span {    display:            block;    margin:             0;    padding:            0;    white-space:        nowrap;}ul#topmenu ul a {    margin:             0;}ul#topmenu .submenu {    display:           none;    position:          relative;}ul#topmenu .shown {    display:            inline-block;}ul#topmenu ul {    margin:             0;    padding:            0;    position:           absolute;    list-style-type:    none;    display:            none;    border:             1px #ddd solid;    z-index:            2;}ul#topmenu ul.only {    left: 0;}ul#topmenu ul.notonly {    right: 0;}ul#topmenu li:hover {    background:url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>tab_hover_bg.png) repeat-x 50% 0%!important;}ul#topmenu li:hover ul, ul#topmenu .submenuhover ul {    display:            block;    font-weight:3em;    background:#fff;}ul#topmenu ul li {    width:              100%;}ul#topmenu2 a {    display:            block;    margin:             7px 6px 7px 0;    padding:            4px 10px;    white-space:        nowrap;    border:1px solid #ddd;    border-radius: 20px;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    background:#f2f2f2;}/* disabled tabs */ul#topmenu span.tab {    color:              #666666;}fieldset.caution a {    color:              #FF0000;}fieldset.caution a:hover {    color:              #ffffff;    background-color:   #FF0000;}<?php if ($GLOBALS['cfg']['LightTabs']) { ?>/* active tab */ul#topmenu a.tabactive, ul#topmenu2 a.tabactive {    color:              black;}ul#topmenu ul {    background:         <?php echo $GLOBALS['cfg']['MainBackground']; ?>;}<?php } else { ?>#topmenu {    margin-top:         0.5em;    padding:            0.1em 0.3em 0.1em 0.3em;}ul#topmenu ul {    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;}ul#topmenu > li {    border-right: 1px solid #fff;    border-left: 1px solid #ccc;}/* default tab styles */ul#topmenu a, ul#topmenu span {    padding: 0.6em;}ul#topmenu ul a {    border-width:       1pt 0 0 0;    -moz-border-radius: 0;    -webkit-border-radius: 0;    border-radius:      0;}ul#topmenu ul li:first-child a {    border-width:       0;}/* enabled hover/active tabs */ul#topmenu > li > a:hover,ul#topmenu > li > .tabactive {    text-decoration:    none;}ul#topmenu ul a:hover,ul#topmenu ul .tabactive {    text-decoration:    none;}ul#topmenu a.tab:hover,ul#topmenu .tabactive {    /* background-color:   <?php echo $GLOBALS['cfg']['MainBackground']; ?>;  */}ul#topmenu2 a.tab:hover,ul#topmenu2 a.tabactive {    background-color:   <?php echo $GLOBALS['cfg']['BgOne']; ?>;    border-radius:      0.3em;    -moz-border-radius: 0.3em;    -webkit-border-radius: 0.3em;    text-decoration:    none;}/* to be able to cancel the bottom border, use <li class="active"> */ul#topmenu > li.active {    /* border-bottom:      0pt solid <?php echo $GLOBALS['cfg']['MainBackground']; ?>; */    border-right: 0;}/* disabled tabs */ul#topmenu span.tab,a.error {    cursor:             url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>error.ico), default;    color:#ccc;}<?php } ?>/* end topmenu *//* zoom search */div#dataDisplay input, div#dataDisplay select {    margin: 0;    margin-<?php echo $right; ?>: 0.5em;}div#dataDisplay th {    line-height: 2em;}/* Calendar */table.calendar {    width:              100%;}table.calendar td {    text-align:         center;}table.calendar td a {    display:            block;}table.calendar td a:hover {    background-color:   #CCFFCC;}table.calendar th {    background-color:   #D3DCE3;}table.calendar td.selected {    background-color:   #FFCC99;}img.calendar {    border:             none;}form.clock {    text-align:         center;}/* end Calendar *//* table stats */div#tablestatistics table {    float: <?php echo $left; ?>;    margin-bottom: 0.5em;    margin-<?php echo $right; ?>: 1.5em;    margin-top: 0.5em;}/* END table stats *//* server privileges */#tableuserrights td,#tablespecificuserrights td,#tabledatabases td {    vertical-align: middle;}/* END server privileges *//* Heading */#topmenucontainer {    padding-right: 1em;    width: 100%;    background-color: #dcdcdc;}#serverinfo {    border-bottom:1px solid #fff;    background:#888;    padding: 0.3em 0.9em;    text-shadow:0 1px 0 #000000;    width: 10000px;    overflow: hidden;}#serverinfo .item {    white-space:        nowrap;    color:#fff;    float: <?php echo $left; ?>}#span_table_comment {    font-weight:        normal;    font-style:         italic;    white-space:        nowrap;}#serverinfo img {    margin:             0 0.1em 0 0.2em;}#textSQLDUMP {    width:              95%;    height:             95%;    font-family:        "Courier New", Courier, mono;    font-size:          110%;}#TooltipContainer {    position:           absolute;    z-index:            99;    width:              20em;    height:             auto;    overflow:           visible;    visibility:         hidden;    background-color:   #ffffcc;    color:              #006600;    border:             0.1em solid #000000;    padding:            0.5em;}/* user privileges */#fieldset_add_user_login div.item {    border-bottom:      1px solid silver;    padding-bottom:     0.3em;    margin-bottom:      0.3em;}#fieldset_add_user_login label {    float:              <?php echo $left; ?>;    display:            block;    width:              10em;    max-width:          100%;    text-align:         <?php echo $right; ?>;    padding-<?php echo $right; ?>:      0.5em;}#fieldset_add_user_login span.options #select_pred_username,#fieldset_add_user_login span.options #select_pred_hostname,#fieldset_add_user_login span.options #select_pred_password {    width:              100%;    max-width:          100%;}#fieldset_add_user_login span.options {    float: <?php echo $left; ?>;    display: block;    width: 12em;    max-width: 100%;    padding-<?php echo $right; ?>: 0.5em;}#fieldset_add_user_login input {    width: 12em;    clear: <?php echo $right; ?>;    max-width: 100%;}#fieldset_add_user_login span.options input {    width: auto;}#fieldset_user_priv div.item {    float: <?php echo $left; ?>;    width: 9em;    max-width: 100%;}#fieldset_user_priv div.item div.item {    float: none;}#fieldset_user_priv div.item label {    white-space: nowrap;}#fieldset_user_priv div.item select {    width: 100%;}#fieldset_user_global_rights fieldset {    float: <?php echo $left; ?>;}/* END user privileges *//* serverstatus */.linkElem:hover {    text-decoration:    underline;    color:              #235a81;    cursor: pointer;}h3#serverstatusqueries span {    font-size:60%;    display:inline;}img.sortableIcon {    float:right;    background-repeat:no-repeat;    margin:0;}.buttonlinks {    float: <?php echo $right; ?>;    white-space: nowrap;}.jsfeature {    display: none; /* Made visible with js */}/* Also used for the variables page */fieldset#tableFilter {    margin-bottom:1em;}div#serverStatusTabs {    margin-top:1em;}caption a.top {    float: <?php echo $right; ?>;}div#serverstatusquerieschart {    float:<?php echo $left; ?>;    width:500px;    height:350px;    padding-<?php echo $left; ?>: 30px;}table#serverstatusqueriesdetails, table#serverstatustraffic {    float: <?php echo $left; ?>;}table#serverstatusqueriesdetails th {    min-width: 35px;}table#serverstatusvariables {    width: 100%;    margin-bottom: 1em;}table#serverstatusvariables .name {    width: 18em;    white-space:nowrap;}table#serverstatusvariables .value {    width: 6em;}table#serverstatusconnections {    float: <?php echo $left; ?>;    margin-<?php echo $left; ?>: 30px;}div#serverstatus table tbody td.descr a,div#serverstatus table .tblFooters a {    white-space: nowrap;}div.liveChart {    clear:both;    min-width:500px;    height:400px;    padding-bottom:80px;}#addChartDialog input[type="text"] {    margin: 0;    padding: 3px;}div#chartVariableSettings {    border:1px solid #ddd;    background-color:#E6E6E6;    margin-left:10px;}table#chartGrid div.monitorChart {    background: #EBEBEB;}div#serverstatus div.tabLinks {    float:<?php echo $left; ?>;    padding-bottom: 10px;}.popupContent {    display: none;    position: absolute;    border: 1px solid #CCC;    margin:0;    padding:3px;    -moz-box-shadow:    1px 1px 6px #ddd;    -webkit-box-shadow: 2px 2px 3px #666;    box-shadow:         2px 2px 3px #666;    background-color:white;    z-index: 2;}div#logTable {    padding-top: 10px;    clear: both;}div#logTable table {    width:100%;}div#queryAnalyzerDialog {    min-width: 700px;}div#queryAnalyzerDialog div.CodeMirror-scroll {    height:auto;}div#queryAnalyzerDialog div#queryProfiling {    height: 250px;}div#queryAnalyzerDialog td.explain {    width: 250px;}div#queryAnalyzerDialog table.queryNums {    display: none;    border:0;    text-align:left;}.smallIndent {    padding-left: 7px;}/* end serverstatus *//* server variables */a.editLink {    float: <?php echo $left; ?>;    font-family:sans-serif;}table.serverVariableEditTable {    border:0;    margin:0;    padding:0;    width:100%;}table.serverVariableEditTable td {    border:0;    margin:0;    padding:0;}table.serverVariableEditTable td:first-child {    white-space:nowrap;    vertical-align:middle;}table.serverVariableEditTable input {    width:95%;}table#serverVariables td {    height:18px;}/* end server variables */p.notice {    margin:             1.5em 0;    border:             1px solid #000;    <?php if ($GLOBALS['cfg']['ErrorIconic']) { ?>    background-repeat:  no-repeat;        <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    background-position: 10px 50%;    padding:            10px 10px 10px 25px;        <?php } else { ?>    background-position: 99% 50%;    padding:            25px 10px 10px 10px        <?php } ?>    <?php } else { ?>    padding:            0.3em;    <?php } ?>    -moz-border-radius:5px;    -webkit-border-radius:5px;    border-radius:5px;    -moz-box-shadow: 0 1px 2px #fff inset;    -webkit-box-shadow: 0 1px 2px #fff inset;    box-shadow: 0 1px 2px #fff; inset;    background:#555;    color:#d4fb6a;}p.notice a {    color:#fff;    text-decoration:underline;}/* querywindow */body#bodyquerywindow {    margin: 0;    padding: 0;    background-image: none;    background-color: #F5F5F5;}div#querywindowcontainer {    margin: 0;    padding: 0;    width: 100%;}div#querywindowcontainer fieldset {    margin-top: 0;}/* END querywindow *//* profiling */div#profilingchart {    width:550px;    height:370px;    float:left;}/* END profiling *//* table charting */#resizer {    border: 1px solid silver;}#inner-resizer { /* make room for the resize handle */    padding: 10px;}/* END table charting *//* querybox */#togglequerybox{margin:0 10px}#serverstatus h3{    margin: 15px 0;    font-weight:normal;    color:#999;    font-size:1.7em;}#sectionlinks{    padding:16px;    background:#f3f3f3;    border:1px solid #aaa;    border-radius:5px;    -webkit-border-radius:5px;    -moz-border-radius:5px;    box-shadow: 0 1px 1px #fff inset;    -webkit-box-shadow: 0 1px 1px #fff inset;    -moz-box-shadow: 0 1px 1px #fff inset;}#sectionlinks a, .buttonlinks a, a.button {    font-size:0.88em;    font-weight:bold;    text-shadow: 0 1px 0 #fff;    line-height:35px;    margin-left:7px;    border: 1px solid #aaa;    padding: 5px 10px;    color: #111;    text-decoration: none;    background: #ddd;    white-space: nowrap;    border-radius: 20px;    -webkit-border-radius: 20px;    -moz-border-radius: 20px;    box-shadow: 1px 1px 2px rgba(0,0,0,.5);    /*    -webkit-box-shadow: 1px 1px 2px rgba(0,0,0,.5);    -moz-box-shadow: 1px 1px 2px rgba(0,0,0,.5);    text-shadow: #fff 0 1px 0;    */    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>}#sectionlinks a:hover, .buttonlinks a:hover, a.button:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}div#sqlquerycontainer {    float: <?php echo $left; ?>;    width: 69%;    /* height: 15em; */}div#tablefieldscontainer {    float: <?php echo $right; ?>;    width: 29%;    /* height: 15em; */}div#tablefieldscontainer select {    width: 100%;    background:#fff;    /* height: 12em; */}textarea#sqlquery {    width: 100%;    /* height: 100%; */    -moz-border-radius:4px;    -webkit-border-radius:4px;    border-raduis:4px    border:1px solid #aaa;    padding:5px;    font-family:inherit;}textarea#sql_query_edit{    height:7em;    width: 95%;    display:block;}div#queryboxcontainer div#bookmarkoptions {    margin-top: 0.5em;}/* end querybox *//* main page */#maincontainer {    /* background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>logo_right.png); */    /* background-position: <?php echo $right; ?> bottom; */    /* background-repeat: no-repeat; */}#mysqlmaininformation,#pmamaininformation {    float: <?php echo $left; ?>;    width: 49%;}#maincontainer ul {    list-style-type: disc;    vertical-align: middle;}#maincontainer li {    margin-bottom:  0.3em;}/* END main page */<?php if ($GLOBALS['cfg']['MainPageIconic']) { ?>/* iconic view for ul items */li#li_create_database {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_newdb.png);}li#li_select_lang {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_lang.png);}li#li_select_mysql_collation {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_select_theme{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_theme.png);}li#li_user_info{    /* list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png); */}li#li_mysql_status{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_status.png);}li#li_mysql_variables{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_vars.png);}li#li_mysql_processes{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_process.png);}li#li_mysql_collations{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_asci.png);}li#li_mysql_engines{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_engine.png);}li#li_mysql_binlogs {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_tbl.png);}li#li_mysql_databases {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_db.png);}li#li_export {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_export.png);}li#li_import {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_import.png);}li#li_change_password {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_passwd.png);}li#li_log_out {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_loggoff.png);}li#li_mysql_privilegs{    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_rights.png);}li#li_switch_dbstats {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_dbstatistics.png);}li#li_flush_privileges {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_reload.png);}li#li_user_preferences {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>b_tblops.png);}/* END iconic view for ul items */<?php } /* end if $GLOBALS['cfg']['MainPageIconic'] */ ?>#body_browse_foreigners {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    margin:             0.5em 0.5em 0 0.5em;}#bodyquerywindow {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}#bodythemes {    width: 500px;    margin: auto;    text-align: center;}#bodythemes img {    border: 0.1em solid black;}#bodythemes a:hover img {    border: 0.1em solid red;}#fieldset_select_fields {    float: <?php echo $left; ?>;}#selflink {    clear: both;    display: block;    margin-top: 1em;    margin-bottom: 1em;    background:#f3f3f3;    width: 100%;    border-top: 0.1em solid silver;    text-align: <?php echo $right; ?>;}#table_innodb_bufferpool_usage,#table_innodb_bufferpool_activity {    float: <?php echo $left; ?>;}#div_mysql_charset_collations table {    float: <?php echo $left; ?>;}.operations_half_width {    width: 48%;    float: <?php echo $left; ?>;}.operations_full_width {    width: 100%;    clear: both;}#qbe_div_table_list {    float: <?php echo $left; ?>;}#qbe_div_sql_query {    float: <?php echo $left; ?>;}label.desc {    width: 30em;    float: <?php echo $left; ?>;}label.desc sup {    position: absolute;}code.sql, div.sqlvalidate {    display:            block;    padding:            1em;    margin-top:         0;    margin-bottom:      0;    border-top:         0;    border-bottom:      0;    max-height:         10em;    overflow:           auto;    background:         <?php echo $GLOBALS['cfg']['BgOne']; ?>;}#main_pane_left {    width:              60%;    float:              <?php echo $left; ?>;    padding-top:        1em;}#main_pane_right {    margin-<?php echo $left; ?>: 60%;    padding-top: 1em;    padding-<?php echo $left; ?>: 1em;}.group {    border:1px solid #999;    background:#f3f3f3;    -moz-border-radius:4px;    -webkit-border-radius:4px;    border-radius:4px;    -moz-box-shadow:2px 2px 5px #ccc;    -webkit-box-shadow:2px 2px 5px #ccc;    box-shadow:3px 3px 10px #ddd;    margin-bottom:      1em;    padding-bottom: 1em;}.group h2 {    background-color:   #bbb;    padding:            0.1em 0.3em;    margin-top:         0;    color:#fff;    font-size:1.6em;    font-weight:normal;    text-shadow:0 1px 0 #777;    -moz-box-shadow: 1px 1px 15px  #999 inset;    -webkit-box-shadow: 1px 1px 15px  #999 inset;    box-shadow: 1px 1px 15px  #999 inset;}.group-cnt {    padding: 0 0 0 0.5em;    display: inline-block;    width: 98%;}textarea#partitiondefinition {    height:3em;}/* for elements that should be revealed only via js */.hide {    display:            none;}#li_select_server {    list-style-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>s_host.png);}#list_server {    list-style-image: none;}/**  *  Progress bar styles  */div.upload_progress_bar_outer{    border: 1px solid black;    width: 202px;}div.upload_progress_bar_inner{    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    width: 0;    height: 12px;    margin: 1px;}table#serverconnection_src_remote,table#serverconnection_trg_remote,table#serverconnection_src_local,table#serverconnection_trg_local  {  float:left;}/**  *  Validation error message styles  */input[type=text].invalid_value,.invalid_value {    background:#FFCCCC;}/**  *  Ajax notification styling  */ .ajax_notification {    top: 0;           /** The notification needs to be shown on the top of the page */    position: fixed;    margin-top: 0;    margin-right: auto;    margin-bottom: 0;    margin-left: auto;    padding: 5px;   /** Keep a little space on the sides of the text */    width: 350px;    z-index: 1100;      /** If this is not kept at a high z-index, the jQueryUI modal dialogs (z-index:1000) might hide this */    text-align: center;    display: inline;    left: 0;    right: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif);    background-repeat: no-repeat;    background-position: 2%;    border:1px solid #e2b709; }/* additional styles */.ajax_notification{    margin-top:200px;background:#ffe57e;    border-radius:5px;    -moz-border-radius:5px;    -webkit-border-radius:5px;    box-shadow: 0 5px 90px #888;    -moz-box-shadow: 0 5px 90px #888;    -webkit-box-shadow: 0 5px 90px #888;}#loading_parent {    /** Need this parent to properly center the notification division */    position: relative;    width: 100%; }/**  * Export and Import styles  */.exportoptions h3, .importoptions h3 {    border-bottom: 1px #999999 solid;    font-size: 110%;}.exportoptions ul, .importoptions ul, .format_specific_options ul {    list-style-type: none;    margin-bottom: 15px;}.exportoptions li, .importoptions li {    margin: 7px;}.exportoptions label, .importoptions label, .exportoptions p, .importoptions p {    margin: 5px;    float: none;}#csv_options label.desc, #ldi_options label.desc, #latex_options label.desc, #output label.desc{    float: left;    width: 15em;}.exportoptions, .importoptions {    margin: 20px 30px 30px 10px}.exportoptions #buttonGo, .importoptions #buttonGo {    font-weight:bold;    margin-left:14px;    border: 1px solid #aaa;    padding: 5px 12px;    color: #111;    text-decoration: none;    background: #ddd;    border-radius: 12px;    -webkit-border-radius: 12px;    -moz-border-radius: 12px;    text-shadow: 0 1px 0 #fff;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    cursor: pointer;}#buttonGo:hover{    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}.format_specific_options h3 {    margin: 10px 0 0 10px;    border: 0;}.format_specific_options {    border: 1px solid #999999;    margin: 7px 0;    padding: 3px;}p.desc {    margin: 5px;}/**  * Export styles only  */select#db_select, select#table_select {    width: 400px;}.export_sub_options {    margin: 20px 0 0 30px;}.export_sub_options h4 {    border-bottom: 1px #999999 solid;}.export_sub_options li.subgroup {    display: inline-block;    margin-top: 0;}.export_sub_options li {    margin-bottom: 0;}#quick_or_custom, #output_quick_export {    display: none;}/** * Import styles only */.importoptions #import_notification {    margin: 10px 0;    font-style: italic;}input#input_import_file {    margin: 5px;}.formelementrow {    margin: 5px 0 5px 0;}/** * GIS data editor styles */a.close_gis_editor {    float: right;}#gis_editor {    display: none;    position: fixed;    _position: absolute; /* hack for IE */    z-index: 1001;    overflow-y: auto;    overflow-x: hidden;}#gis_data {    min-height: 230px;}#gis_data_textarea {    height: 6em;}#gis_data_editor {    background: #D0DCE0;    padding: 15px;    min-height: 500px;}#gis_data_editor .choice {    display: none;}#gis_data_editor input[type="text"] {    width: 75px;}#popup_background {    display: none;    position: fixed;    _position: absolute; /* hack for IE6 */    width: 100%;    height: 100%;    top: 0;    left: 0;    background: #000;    z-index: 1000;    overflow: hidden;}/** * ENUM/SET editor styles */p.enum_notice {    margin: 5px 2px;    font-size: 80%;}.enum_editor_no_js fieldset {    width: 40em;}hr.enum_editor_no_js {    background-color: #aaa;}#enum_editor p {    margin-top: 0;    font-style:italic;}#enum_editor .values, #enum_editor .add, .enum_editor_no_js #values {    width: 100%;}#enum_editor .add td {    vertical-align: middle;    width: 50%;    padding: 0 0 0 1em;}#enum_editor .values td.drop {    width: 1.8em;    cursor: pointer;    vertical-align: middle;}#enum_editor .values input {    margin: 0.1em 0;    padding-right: 2em;    width: 100%;}#enum_editor .values img {    width: 1.8em;    vertical-align: middle;}#enum_editor input.add_value {    margin: 0 0.4em 0 0;}#enum_editor_output textarea,.enum_editor_no_js input {    width: 100%;    float: right;    margin: 1em 0 0 0;}.enum_editor_no_js {    width: 40em;}.enum_editor_no_js input.submit {    float: left;    margin: 1em 0;}/** * ENUM/SET editor integration for the routines editor */.enum_hint {    position: relative;}.enum_hint a {    position: absolute;    left: 81%;    bottom: 0.35em;}/** * Table structure styles */.structure_actions_dropdown {    position: absolute;    padding: 3px;    display: none;    z-index: 100;    background:#fff;    line-height:24px;    border:1px solid #aaa;    -moz-box-shadow: 0 3px 3px #ddd;}.structure_actions_dropdown span{display:block;}.structure_actions_dropdown span:hover{background:#ddd;}td.more_opts {    white-space: nowrap;}/** * Indexes */#index_frm .index_info input,#index_frm .index_info select {    width: 14em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#index_frm .index_info div {    padding: 0.2em 0;}#index_frm .index_info .label {    float: left;    min-width: 12em;}#index_frm .slider {    width: 10em;    margin: 0.6em;    float: <?php echo $left; ?>;}#index_frm .add_fields {    float: <?php echo $left; ?>;}#index_frm .add_fields input {    margin-<?php echo $left; ?>: 1em;}#index_frm input {    margin: 0;}#index_frm td {    vertical-align: middle;}table#index_columns {    width: 100%;}table#index_columns select {    width: 100%;}iframe.IE_hack {    z-index: 1;    position: absolute;    display: none;    border: 0;    filter: alpha(opacity=0);}/* config forms */.config-form ul.tabs {    margin:      1.1em 0.2em 0;    padding:     0 0 0.3em 0;    list-style:  none;    font-weight: bold;}.config-form ul.tabs li {    float:         <?php echo $left; ?>;    margin-bottom: -1px;}.config-form ul.tabs li a {    display:          block;    margin:           0.1em 0.2em 0;    white-space:      nowrap;    text-decoration:  none;    border:           1px solid <?php echo $GLOBALS['cfg']['BgTwo']; ?>;    border-bottom:    1px solid #aaa;}.config-form ul.tabs li a {    padding:               7px 10px;    -webkit-border-radius: 5px 5px 0 0;    -moz-border-radius:    5px 5px 0 0;    border-radius:         5px 5px 0 0;    background:            #f2f2f2;    color:                 #555;    text-shadow:           0 1px 0 #fff;}.config-form ul.tabs li a:hover,.config-form ul.tabs li a:active {    background: #e5e5e5;}.config-form ul.tabs li.active a {    background-color: #fff;    margin-top:       1px;    color:            #000;    text-shadow:      none;    border-color:     #aaa;    border-bottom:    1px solid #fff;}.config-form fieldset {    margin-top:            0;    padding:               0;    clear:                 both;    -webkit-border-radius: 0;    -moz-border-radius:    0;    border-radius:         0;}.config-form legend {    display: none;}.config-form fieldset p {    margin:    0;    padding:   0.5em;    background: #fff;    border-top: 0;}.config-form fieldset .errors { /* form error list */    margin:       0 -2px 1em -2px;    padding:      0.5em 1.5em;    background:   #FBEAD9;    border:       0 #C83838 solid;    border-width: 1px 0;    list-style:   none;    font-family:  sans-serif;    font-size:    small;}.config-form fieldset .inline_errors { /* field error list */    margin:     0.3em 0.3em 0.3em 0;    padding:    0;    list-style: none;    color:      #9A0000;    font-size:  small;}.config-form fieldset th {    padding:        0.3em 0.3em 0.3em 0.5em;    text-align:     left;    vertical-align: top;    width:          40%;    background:     transparent;    filter:         none;}.config-form fieldset .doc, .config-form fieldset .disabled-notice {    margin-left: 1em;}.config-form fieldset .disabled-notice {    font-size: 80%;    text-transform: uppercase;    color: #E00;    cursor: help;}.config-form fieldset td {    padding-top:    0.3em;    padding-bottom: 0.3em;    vertical-align: top;}.config-form fieldset th small {    display:     block;    font-weight: normal;    font-family: sans-serif;    font-size:   x-small;    color:       #444;}.config-form fieldset th, .config-form fieldset td {    border-top: 1px <?php echo $GLOBALS['cfg']['BgTwo']; ?> solid;    border-right: none;}fieldset .group-header th {    background: <?php echo $GLOBALS['cfg']['BgTwo']; ?>;}fieldset .group-header + tr th {    padding-top: 0.6em;}fieldset .group-field-1 th, fieldset .group-header-2 th {    padding-left: 1.5em;}fieldset .group-field-2 th, fieldset .group-header-3 th {    padding-left: 3em;}fieldset .group-field-3 th {    padding-left: 4.5em;}fieldset .disabled-field th,fieldset .disabled-field th small,fieldset .disabled-field td {    color: #666;    background-color: #ddd;}.config-form .lastrow {    border-top: 1px #000 solid;}.config-form .lastrow {    background: <?php echo $GLOBALS['cfg']['ThBackground']; ?>;;    padding:    0.5em;    text-align: center;}.config-form .lastrow input {    font-weight: bold;}/* form elements */.config-form span.checkbox {    padding: 2px;    display: inline-block;}.config-form .custom { /* customized field */    background: #FFC;}.config-form span.checkbox.custom {    padding:    1px;    border:     1px #EDEC90 solid;    background: #FFC;}.config-form .field-error {    border-color: #A11 !important;}.config-form input[type="text"],.config-form select,.config-form textarea {    border: 1px #A7A6AA solid;    height: auto;}.config-form input[type="text"]:focus,.config-form select:focus,.config-form textarea:focus {    border:     1px #6676FF solid;    background: #F7FBFF;}.config-form .field-comment-mark {    font-family: serif;    color: #007;    cursor: help;    padding: 0 0.2em;    font-weight: bold;    font-style: italic;}.config-form .field-comment-warning {    color: #A00;}/* error list */.config-form dd {    margin-left: 0.5em;}.config-form dd:before {    content: "\25B8  ";}.click-hide-message {    cursor: pointer;}.prefsmanage_opts {    margin-<?php echo $left; ?>: 2em;}#prefs_autoload {    margin-bottom: 0.5em;}.rte_table {    table-layout: fixed;}.rte_table td {    vertical-align:     middle;}.rte_table tr td:nth-child(1) {    font-weight:        bold;}.rte_table input, .rte_table select, .rte_table textarea {    width:              100%;    margin:             0;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}.rte_table .routine_params_table {    width:              100%;}#placeholder .button {    position: absolute;    cursor: pointer;}#placeholder div.button {    font-size: smaller;    color: #999;    background-color: #eee;    padding: 2px;}.wrapper {    float: <?php echo $left; ?>;    margin-bottom: 1.5em;}.toggleButton {    position: relative;    cursor: pointer;    font-size: 0.8em;    text-align: center;    line-height: 1.55em;    height: 1.55em;    overflow: hidden;    border-right: 0.1em solid #888;    border-left: 0.1em solid #888;    -webkit-border-radius: 0.3em;    -moz-border-radius: 0.3em;    border-radius: 0.3em;}.toggleButton table,.toggleButton td,.toggleButton img {    padding: 0;    position: relative;}.toggleButton .container {    position: absolute;}.toggleButton .toggleOn {    color: white;    padding: 0 1em;    text-shadow: 0 0 0.2em #000;}.toggleButton .toggleOff {    padding: 0 1em;}.doubleFieldset fieldset {    width: 48%;    float: <?php echo $left; ?>;    padding: 0;}.doubleFieldset fieldset.left {    margin-<?php echo $right; ?>: 1%;}.doubleFieldset fieldset.right {    margin-<?php echo $left; ?>: 1%;}.doubleFieldset legend {    margin-<?php echo $left; ?>: 1.5em;}.doubleFieldset div.wrap {    padding: 1.5em;}#table_columns input[type="text"], #table_columns select {    width:              10em;    box-sizing:         border-box;    -ms-box-sizing:     border-box;    -moz-box-sizing:    border-box;    -webkit-box-sizing: border-box;}#table_columns select {    margin:             0 6px;}#placeholder {    position: relative;    border: 1px solid #aaa;    float: right;    overflow: hidden;}.placeholderDrag {    cursor: move;}#placeholder .button {    position: absolute;}#left_arrow {    left:8px;    top:26px;}#right_arrow {    left:26px;    top:26px;}#up_arrow {    left:17px;    top:8px;}#down_arrow {    left:17px;    top:44px;}#zoom_in {    left:17px;    top:67px;}#zoom_world {    left:17px;    top:85px;}#zoom_out {    left:17px;    top:103px;}.gis_table td {    vertical-align: middle;}.gis_table select {    min-width: 160px;    margin: 6px;}.gis_table .save {    color: #111;    font-weight: bold;    vertical-align: bottom;    height: 100px;}.gis_table .button {   text-align: <?php echo $right; ?>;}.gis_table .choice {    display: none;}.CodeMirror {  font-size: 140%;  font-family: monospace;  background: white;  border: 1px solid black;}.CodeMirror-scroll {  overflow: auto;  height:             <?php echo ceil($GLOBALS['cfg']['TextareaRows'] * 1.2); ?>em;  /* This is needed to prevent an IE[67] bug where the scrolled content     is visible outside of the scrolling box. */  position: relative;}.CodeMirror-gutter {  position: absolute; left: 0; top: 0;  z-index: 10;  background-color: #f7f7f7;  border-right: 1px solid #eee;  min-width: 2em;  height: 100%;}.CodeMirror-gutter-text {  color: #aaa;  text-align: right;  padding: .4em .2em .4em .4em;  white-space: pre !important;}.CodeMirror-lines {  padding: .4em;}.CodeMirror pre {  -moz-border-radius: 0;  -webkit-border-radius: 0;  -o-border-radius: 0;  border-radius: 0;  border-width: 0; margin: 0; padding: 0; background: transparent;  font-family: inherit;  font-size: inherit;  padding: 0; margin: 0;  white-space: pre;  word-wrap: normal;}.CodeMirror-wrap pre {  word-wrap: break-word;  white-space: pre-wrap;}.CodeMirror-wrap .CodeMirror-scroll {  overflow-x: hidden;}.CodeMirror textarea {  font-family: inherit !important;  font-size: inherit !important;}.CodeMirror-cursor {  z-index: 10;  position: absolute;  visibility: hidden;  border-left: 1px solid black !important;}.CodeMirror-focused .CodeMirror-cursor {  visibility: visible;}span.CodeMirror-selected {  background: #ccc !important;  color: HighlightText !important;}.CodeMirror-focused span.CodeMirror-selected {  background: Highlight !important;}.CodeMirror-matchingbracket {color: #0f0 !important;}.CodeMirror-nonmatchingbracket {color: #f22 !important;}<?php echo $_SESSION['PMA_Theme']->getCssCodeMirror(); ?>.colborder {    cursor: col-resize;    height: 100%;    margin-left: -6px;    position: absolute;    width: 5px;}.colborder_active {    border-right: 2px solid #a44;}.pma_table td {    position: static;}.pma_table th.draggable span, .pma_table tbody td span {    display: block;    overflow: hidden;}.cRsz {    position: absolute;}.cCpy {    background: #333;    color: #FFF;    font-weight: bold;    margin: 0.1em;    padding: 0.3em;    position: absolute;    text-shadow: -1px -1px #000;    -moz-box-shadow: 0 0 0.7em #000;    -webkit-box-shadow: 0 0 0.7em #000;    box-shadow: 0 0 0.7em #000;    -moz-border-radius: 0.3em;    -webkit-border-radius: 0.3em;    border-radius: 0.3em;}.cPointer {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_pointer.png);    height: 20px;    margin-left: -5px;  /* must be minus half of its width */    margin-top: -10px;    position: absolute;    width: 10px;}.normalqTip {    background: #333 !important;    opacity: 0.8 !important;    border:1px solid #000 !important;    -moz-border-radius: 0.3em !important;    -webkit-border-radius: 0.3em !important;    border-radius: 0.3em !important;    text-shadow: -1px -1px #000 !important;    font-size: 0.8em !important;    font-weight: bold !important;}.normalqTip * {    background: none !important;    color: #FFF !important;}.normalqTipContent {    padding: 1px 3px !important;}.cHide {    background: #EEE url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_hide.png);    color: #CCC;    cursor: pointer;    height: 16px;    margin-left: -10px;    margin-top: 0.3em;    position: absolute;    width: 16px;}.cHide:hover {    background-color: #AAA;}.cDrop {    left: 0;    position: absolute;    top: 0;}.coldrop {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>col_drop.png);    cursor: pointer;    height: 16px;    margin-left: 0.3em;    margin-top: 0.3em;    position: absolute;    width: 16px;}.coldrop:hover, .coldrop-hover {    background-color: #999;}.cList {    background: #EEE;    border: solid 1px #999;    position: absolute;    -moz-box-shadow: 0 0.2em 0.5em #333;    -webkit-box-shadow: 0 0.2em 0.5em #333;    box-shadow: 0 0.2em 0.5em #333;}.cList .lDiv div {    padding: 0.2em 0.5em 0.2em 0.2em;}.cList .lDiv div:hover {    background: #DDD;    cursor: pointer;}.cList .lDiv div input {    cursor: pointer;}.showAllColBtn {    border-bottom: solid 1px #999;    border-top: solid 1px #999;    cursor: pointer;    font-size: 0.9em;    font-weight: bold;    padding: 0.35em 1em;    text-align: center;}.showAllColBtn:hover {    background: #DDD;}.navigation {    margin: 0.8em 0;    border-radius: 5px;    -webkit-border-radius: 5px;    -moz-border-radius: 5px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('eeeeee', 'cccccc'); ?>}.navigation td {    margin: 0;    padding: 0;    vertical-align: middle;    white-space: nowrap;}.navigation_separator {    color: #999;    display: inline-block;    font-size: 1.5em;    text-align: center;    height: 1.4em;    width: 1.2em;    text-shadow: 1px 0 #FFF;}.navigation input[type=submit] {    background: none;    border: 0;    filter: none;    margin: 0;    padding: 0.8em 0.5em;    border-radius: 0;    -webkit-border-radius: 0;    -moz-border-radius: 0;}.navigation input[type=submit]:hover, .navigation input.edit_mode_active {    color: white;    cursor: pointer;    text-shadow: none;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('333333', '555555'); ?>}.navigation select {    margin: 0 0.8em;}.cEdit {    margin: 0;    padding: 0;    position: absolute;}.cEdit input[type=text] {    background: #FFF;    height: 100%;    margin: 0;    padding: 0;}.cEdit .edit_area {    background: #FFF;    border: 1px solid #999;    min-width: 10em;    padding: 0.3em 0.5em;}.cEdit .edit_area select, .cEdit .edit_area textarea {    width: 97%;}.cEdit .cell_edit_hint {    color: #555;    font-size: 0.8em;    margin: 0.3em 0.2em;}.cEdit .edit_box {    overflow: hidden;    padding: 0;}.cEdit .edit_box_posting {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat right center;    padding-right: 1.5em;}.cEdit .edit_area_loading {    background: #FFF url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat center;    height: 10em;}.cEdit .goto_link {    background: #EEE;    color: #555;    padding: 0.2em 0.3em;}.saving_edited_data {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>ajax_clock_small.gif) no-repeat left;    padding-left: 20px;}/* css for timepicker */.ui-timepicker-div .ui-widget-header{ margin-bottom: 8px; }.ui-timepicker-div dl{ text-align: left; }.ui-timepicker-div dl dt{ height: 25px; }.ui-timepicker-div dl dd{ margin: -25px 0 10px 65px; }.ui-timepicker-div td { font-size: 90%; }/* Designer */.input_tab {    background-color: #A6C7E1;    color: #000000;}#canvas {    background-color: #FFFFFF;    color: #000000;}canvas.pmd {    display: inline-block;    overflow: hidden;    text-align: left;}canvas.pmd * {    behavior: url(#default#VML);}.pmd_tab {    background-color: #FFFFFF;    color: #000000;    border-collapse: collapse;    border: 1px solid #AAAAAA;    z-index: 1;    -moz-user-select: none;}.tab_zag {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_zag_2 {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);    background-repeat: repeat-x;    text-align: center;    cursor: move;    padding: 1px;    font-weight: bold;}.tab_field {    background: #FFFFFF;    color: #000000;    cursor: default;}.tab_field_2 {    background-color: #CCFFCC;    color: #000000;    background-repeat: repeat-x;    cursor: default;}.tab_field_3 {    background-color: #FFE6E6; /*#DDEEFF*/    color: #000000;    cursor: default;}#pmd_hint {    white-space: nowrap;    position: absolute;    background-color: #99FF99;    color: #000000;    left: 200px;    top: 50px;    z-index: 3;    border: #00CC66 solid 1px;    display: none;}.scroll_tab {    overflow: auto;    width: 100%;    height: 500px;}.pmd_Tabs {    cursor: default;    color: #0055bb;    white-space: nowrap;    text-decoration: none;    text-indent: 3px;    font-weight: bold;    margin-left: 2px;    text-align: left;    background-color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/left_panel_butt.png);    border: #CCCCCC solid 1px;}.pmd_Tabs2 {    cursor: default;    color: #0055bb;    background: #FFEE99;    text-indent: 3px;    font-weight: bold;    white-space: nowrap;    text-decoration: none;    border: #9999FF solid 1px;    text-align: left;}.owner {    font-weight: normal;    color: #888888;}.option_tab {    padding-left: 2px;    padding-right: 2px;    width: 5px;}.select_all {    vertical-align: top;    padding-left: 2px;    padding-right: 2px;    cursor: default;    width: 1px;    color: #000000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;}.small_tab {    vertical-align: top;    background-color: #0064ea;    color: #FFFFFF;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/small_tab.png);    cursor: default;    text-align: center;    font-weight: bold;    padding-left: 2px;    padding-right: 2px;    width: 1px;    text-decoration: none;}.small_tab2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    padding-left: 2px;    padding-right: 2px;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.small_tab_pref {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    text-align: center;    width: 1px;}.small_tab_pref2 {    vertical-align: top;    color: #FFFFFF;    background-color: #FF9966;    cursor: default;    text-align: center;    font-weight: bold;    width: 1px;    text-decoration: none;}.butt {    border: #4477aa solid 1px;    font-weight: bold;    height: 19px;    width: 70px;    background-color: #FFFFFF;    color: #000000;    vertical-align: baseline;}.L_butt2_1 {    padding: 1px;    text-decoration: none;    background-color: #ffffff;    color: #000000;    vertical-align: middle;    cursor: default;}.L_butt2_2 {    padding: 0;    border: #0099CC solid 1px;    background: #FFEE99;    text-decoration: none;    color: #000000;    cursor: default;}/* ---------------------------------------------------------------------------*/.bor {    width: 10px;    height: 10px;}.frams1 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/1.png) no-repeat right bottom;}.frams2 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/2.png) no-repeat left bottom;}.frams3 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/3.png) no-repeat left top;}.frams4 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/4.png) no-repeat right top;}.frams5 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/5.png) repeat-x center bottom;}.frams6 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/6.png) repeat-y left;}.frams7 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/7.png) repeat-x top;}.frams8 {    background: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/8.png) repeat-y right;}#osn_tab {    background-color: #FFFFFF;    color: #000000;    border: #A9A9A9 solid 1px;}.pmd_header {    background-color: #EAEEF0;    color: #000000;    text-align: center;    font-weight: bold;    margin: 0;    padding: 0;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/top_panel.png);    background-position: top;    background-repeat: repeat-x;    border-right: #999999 solid 1px;    border-left: #999999 solid 1px;    height: 28px;}.pmd_header a {    display: block;    float: left;    margin: 3px 1px 4px 1px;    height: 20px;    border: 1px dotted #ffffff;}.pmd_header .M_bord {    display: block;    float: left;    margin: 4px;    height: 20px;    width: 2px;}.pmd_header a.first {    margin-right: 1em;}.pmd_header a.last {    margin-left: 1em;}a.M_butt_Selected_down_IE,a.M_butt_Selected_down {    border: 1px solid #C0C0BB;    background-color: #99FF99;    color: #000000;}a.M_butt_Selected_down_IE:hover,a.M_butt_Selected_down:hover,a.M_butt:hover {    border: 1px solid #0099CC;    background-color: #FFEE99;    color: #000000;}#layer_menu {    z-index: 1000;    position: absolute;    left: 0;    background-color: #EAEEF0;    border: #999999 solid 1px;}#layer_action {    position: absolute;    left: 638px;    top: 52px;    z-index: 1000;    background-color: #CCFF99;    padding: 3px;    border: #009933 solid 1px;    white-space: nowrap;    font-weight: bold;}#layer_upd_relation {    position: absolute;    left: 637px;    top: 224px;    z-index: 1000;}#layer_new_relation {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#pmd_optionse {    position: absolute;    left: 636px;    top: 85px;    z-index: 1000;    width: 153px;}#layer_menu_sizer {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/resize.png);    cursor: nw-resize;    width: 16px;    height: 16px;}.panel {    position: fixed;    top: 50px;    right: 0;    display: none;    background: #FFF;    border:1px solid #F5F5F5;    width: 350 px;    height: auto;    padding: 30px 170px 30px 30px;    color:#FFF;    z-index:99;}a.trigger{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#fff;    padding: 10px 40px 10px 15px;    background:#333333 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #444444;    display: block;}a.trigger:hover{    position: fixed;    text-decoration: none;    top: 60px; right: 0;    color:#080808;    padding: 10px 40px 10px 15px;    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/plus.png) 85% 55% no-repeat;    border:1px solid #999;    display: block;}a.active.trigger {    background:#222222 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}a.active.trigger:hover {    background:#fff696 url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/minus.png) 85% 55% no-repeat;    z-index:999;}h2.tiger{    background-repeat: repeat-x;    padding: 1px;    font-weight: bold;    padding: 50 20 50 20px;    margin: 0 0 5px 0;    width: 250px;    float: left;    color : #333;    text-align: center;}h2.tiger a {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    text-align: center;    text-decoration: none;    color : #333;    display: block;}h2.tiger a:hover {    color: #000;    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header_Linked.png);}h2.active {    background-image: url(<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>pmd/Header.png);    background-repeat: repeat-x;    padding: 1px;    background-position: left bottom;}.toggle_container {    margin: 0 0 5px;    padding: 0;    border-top: 1px solid #d6d6d6;    background: #FFF ;    width: 250px;    overflow: hidden;    font-size: 1.2em;    clear: both;}.toggle_container .block {    background-color: #DBE4E8;    padding:40 15 40 15px; /*--Padding of Container--*/    border:1px solid #999;    color:#000;}.history_table {    text-align: center;    background-color: #9999CC;}.history_table2 {    text-align: center;    background-color: #DBE4E8;}#filter {    display: none;    position: absolute;    top: 0%;    left: 0%;    width: 100%;    height: 100%;    background-color: #CCA;    z-index:10;    opacity:0.5;    filter: alpha(opacity=50);}#box {    display: none;    position: absolute;    top: 20%;    left: 30%;    width: 500px;    height: 220px;    padding: 48px;    margin:0;    border: 1px solid black;    background-color: white;    z-index:101;    overflow: visible;}#boxtitle {    position:absolute;    float:center;    top:0;    left:0;    width:593px;    height:20px;    padding:0;    padding-top:4px;    left-padding:8px;    margin:0;    border-bottom:4px solid #3CF;    background-color: #D0DCE0;    color:black;    font-weight:bold;    padding-left: 2px;    text-align:left;}#tblfooter {    background-color: #D3DCE3;    float: right;    padding-top:10px;    color: black;    font-weight: normal;}input.btn {    color:#333;    background-color: #D0DCE0;}body .ui-widget {    font-size: 1em;}.ui-dialog fieldset legend a {    color: #235A81;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used for cleaning up phpMyAdmin tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Cleanu column related relation stuff * * @param string $db * @param string $table * @param string $column */function PMA_relationsCleanupColumn($db, $table, $column){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND column_name = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND display_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND master_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND foreign_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup table related relation stuff * * @param string $db * @param string $table */function PMA_relationsCleanupTable($db, $table){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup database related relation stuff * * @param string $db */function PMA_relationsCleanupDatabase($db){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['bookmarkwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['bookmark'])                    . ' WHERE dbase  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);     }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }}?>
