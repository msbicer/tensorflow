<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Executes a query as controluser if possible, otherwise as normal user * * @param string  $sql        the query to execute * @param boolean $show_error whether to display SQL error messages or not * @param int     $options    query options * * @return  integer   the result set, or false if no result set * * @access  public * */function PMA_query_as_controluser($sql, $show_error = true, $options = 0){    // Avoid caching of the number of rows affected; for example, this function    // is called for tracking purposes but we want to display the correct number    // of rows affected by the original query, not by the query generated for    // tracking.    $cache_affected_rows = false;    if ($show_error) {        $result = PMA_DBI_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } else {        $result = @PMA_DBI_try_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } // end if... else...    if ($result) {        return $result;    } else {        return false;    }} // end of the "PMA_query_as_controluser()" function/** * @param bool $verbose whether to print diagnostic info * * @return  array   $cfgRelation */function PMA_getRelationsParam($verbose = false){    if (empty($_SESSION['relation'][$GLOBALS['server']])) {        $_SESSION['relation'][$GLOBALS['server']] = PMA__getRelationsParam();    }    // just for BC but needs to be before PMA_printRelationsParamDiagnostic()    // which uses it    $GLOBALS['cfgRelation'] = $_SESSION['relation'][$GLOBALS['server']];    if ($verbose) {        PMA_printRelationsParamDiagnostic($_SESSION['relation'][$GLOBALS['server']]);    }    return $_SESSION['relation'][$GLOBALS['server']];}/** * prints out diagnostic info for pma relation feature * * @param array $cfgRelation * * @return nothing */function PMA_printRelationsParamDiagnostic($cfgRelation){    $messages['error'] = '<font color="red"><strong>' . __('not OK')                   . '</strong></font> [ <a href="Documentation.html#%s" target="documentation">'                   . __('Documentation') . '</a> ]';    $messages['ok'] = '<font color="green"><strong>' . __('OK') . '</strong></font>';    $messages['enabled']  = '<font color="green">' . __('Enabled') . '</font>';    $messages['disabled'] = '<font color="red">'   . __('Disabled') . '</font>';    if (false === $GLOBALS['cfg']['Server']['pmadb']) {        echo 'PMA Database ... '             . sprintf($messages['error'], 'pmadb')             . '<br />' . "\n"             . __('General relation features')             . ' <font color="green">' . __('Disabled')             . '</font>' . "\n";        return;    }    echo '<table>' . "\n";    PMA_printDiagMessageForParameter('pmadb', $GLOBALS['cfg']['Server']['pmadb'], $messages, 'pmadb');    PMA_printDiagMessageForParameter('relation', isset($cfgRelation['relation']), $messages, 'relation');    PMA_printDiagMessageForFeature(__('General relation features'), 'relwork', $messages);    PMA_printDiagMessageForParameter('table_info', isset($cfgRelation['table_info']), $messages, 'table_info');    PMA_printDiagMessageForFeature(__('Display Features'), 'displaywork', $messages);    PMA_printDiagMessageForParameter('table_coords', isset($cfgRelation['table_coords']), $messages, 'table_coords');    PMA_printDiagMessageForParameter('pdf_pages', isset($cfgRelation['pdf_pages']), $messages, 'table_coords');    PMA_printDiagMessageForFeature(__('Creation of PDFs'), 'pdfwork', $messages);    PMA_printDiagMessageForParameter('column_info', isset($cfgRelation['column_info']), $messages, 'col_com');    PMA_printDiagMessageForFeature(__('Displaying Column Comments'), 'commwork', $messages, false);    PMA_printDiagMessageForFeature(__('Browser transformation'), 'mimework', $messages);    if ($cfgRelation['commwork'] && ! $cfgRelation['mimework']) {        echo '<tr><td colspan=2 align="left">' . __('Please see the documentation on how to update your column_comments table') . '</td></tr>' . "\n";    }    PMA_printDiagMessageForParameter('bookmarktable', isset($cfgRelation['bookmark']), $messages, 'bookmark');    PMA_printDiagMessageForFeature(__('Bookmarked SQL query'), 'bookmarkwork', $messages);    PMA_printDiagMessageForParameter('history', isset($cfgRelation['history']), $messages, 'history');    PMA_printDiagMessageForFeature(__('SQL history'), 'historywork', $messages);    PMA_printDiagMessageForParameter('designer_coords', isset($cfgRelation['designer_coords']), $messages, 'designer_coords');    PMA_printDiagMessageForFeature(__('Designer'), 'designerwork', $messages);    PMA_printDiagMessageForParameter('recent', isset($cfgRelation['recent']), $messages, 'recent');    PMA_printDiagMessageForFeature(__('Persistent recently used tables'), 'recentwork', $messages);    PMA_printDiagMessageForParameter('table_uiprefs', isset($cfgRelation['table_uiprefs']), $messages, 'table_uiprefs');    PMA_printDiagMessageForFeature(__('Persistent tables\' UI preferences'), 'uiprefswork', $messages);    PMA_printDiagMessageForParameter('tracking', isset($cfgRelation['tracking']), $messages, 'tracking');    PMA_printDiagMessageForFeature(__('Tracking'), 'trackingwork', $messages);    PMA_printDiagMessageForParameter('userconfig', isset($cfgRelation['userconfig']), $messages, 'userconfig');    PMA_printDiagMessageForFeature(__('User preferences'), 'userconfigwork', $messages);    echo '</table>' . "\n";    echo '<p>' . __('Quick steps to setup advanced features:') . '</p>';    echo '<ul>';    echo '<li>' . __('Create the needed tables with the <code>examples/create_tables.sql</code>.') . ' ' . PMA_showDocu('linked-tables') . '</li>';    echo '<li>' . __('Create a pma user and give access to these tables.') . ' ' . PMA_showDocu('pmausr') . '</li>';    echo '<li>' . __('Enable advanced features in configuration file (<code>config.inc.php</code>), for example by starting from <code>config.sample.inc.php</code>.') . ' ' . PMA_showDocu('quick_install') . '</li>';    echo '<li>' . __('Re-login to phpMyAdmin to load the updated configuration file.') . '</li>';    echo '</ul>';}/** * prints out one diagnostic message for a feature * * @param string  $feature_name       feature name in a message string * @param string  $relation_parameter the $GLOBALS['cfgRelation'] parameter to check * @param array   $messages           utility messages * @param boolean $skip_line          whether to skip a line after the message * * @return nothing */function PMA_printDiagMessageForFeature($feature_name, $relation_parameter, $messages, $skip_line=true){    echo '    <tr><td colspan=2 align="right">' . $feature_name . ': '         . ($GLOBALS['cfgRelation'][$relation_parameter] ? $messages['enabled'] : $messages['disabled'])         . '</td></tr>' . "\n";    if ($skip_line) {        echo '    <tr><td>&nbsp;</td></tr>' . "\n";    }}/** * prints out one diagnostic message for a configuration parameter * * @param string  $parameter              config parameter name to display * @param boolean $relation_parameter_set whether this parameter is set * @param array   $messages               utility messages * @param string  $doc_anchor             anchor in Documentation.html * * @return nothing */function PMA_printDiagMessageForParameter($parameter, $relation_parameter_set, $messages, $doc_anchor){    echo '    <tr><th align="left">';    echo '$cfg[\'Servers\'][$i][\'' . $parameter . '\']  ... </th><td align="right">';    echo ($relation_parameter_set ? $messages['ok'] : sprintf($messages['error'], $doc_anchor)) . '</td></tr>' . "\n";}/** * Defines the relation parameters for the current user * just a copy of the functions used for relations ;-) * but added some stuff to check what will work * * @access  protected * @return  array    the relation parameters for the current user */function PMA__getRelationsParam(){    $cfgRelation                = array();    $cfgRelation['relwork']     = false;    $cfgRelation['displaywork'] = false;    $cfgRelation['bookmarkwork']= false;    $cfgRelation['pdfwork']     = false;    $cfgRelation['commwork']    = false;    $cfgRelation['mimework']    = false;    $cfgRelation['historywork'] = false;    $cfgRelation['recentwork']  = false;    $cfgRelation['uiprefswork'] = false;    $cfgRelation['trackingwork'] = false;    $cfgRelation['designerwork'] = false;    $cfgRelation['userconfigwork'] = false;    $cfgRelation['allworks']    = false;    $cfgRelation['user']        = null;    $cfgRelation['db']          = null;    if ($GLOBALS['server'] == 0 || empty($GLOBALS['cfg']['Server']['pmadb'])        || ! PMA_DBI_select_db($GLOBALS['cfg']['Server']['pmadb'], $GLOBALS['controllink'])    ) {        // No server selected -> no bookmark table        // we return the array with the falses in it,        // to avoid some 'Unitialized string offset' errors later        $GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    $cfgRelation['user']  = $GLOBALS['cfg']['Server']['user'];    $cfgRelation['db']    = $GLOBALS['cfg']['Server']['pmadb'];    //  Now I just check if all tables that i need are present so I can for    //  example enable relations but not pdf...    //  I was thinking of checking if they have all required columns but I    //  fear it might be too slow    $tab_query = 'SHOW TABLES FROM ' . PMA_backquote($GLOBALS['cfg']['Server']['pmadb']);    $tab_rs    = PMA_query_as_controluser($tab_query, false, PMA_DBI_QUERY_STORE);    if (! $tab_rs) {        // query failed ... ?        //$GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    while ($curr_table = @PMA_DBI_fetch_row($tab_rs)) {        if ($curr_table[0] == $GLOBALS['cfg']['Server']['bookmarktable']) {            $cfgRelation['bookmark']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['relation']) {            $cfgRelation['relation']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_info']) {            $cfgRelation['table_info']      = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_coords']) {            $cfgRelation['table_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['designer_coords']) {            $cfgRelation['designer_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['column_info']) {            $cfgRelation['column_info'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['pdf_pages']) {            $cfgRelation['pdf_pages']       = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['history']) {            $cfgRelation['history'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['recent']) {            $cfgRelation['recent'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_uiprefs']) {            $cfgRelation['table_uiprefs'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['tracking']) {            $cfgRelation['tracking'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['userconfig']) {            $cfgRelation['userconfig'] = $curr_table[0];        }    } // end while    PMA_DBI_free_result($tab_rs);    if (isset($cfgRelation['relation'])) {        $cfgRelation['relwork']         = true;        if (isset($cfgRelation['table_info'])) {                $cfgRelation['displaywork'] = true;        }    }    if (isset($cfgRelation['table_coords']) && isset($cfgRelation['pdf_pages'])) {        $cfgRelation['pdfwork']     = true;    }    if (isset($cfgRelation['column_info'])) {        $cfgRelation['commwork']    = true;        if ($GLOBALS['cfg']['Server']['verbose_check']) {            $mime_query  = PMA_DBI_get_columns_sql($cfgRelation['db'], $cfgRelation['column_info']);            $mime_rs     = PMA_query_as_controluser($mime_query, false);            $mime_field_mimetype                = false;            $mime_field_transformation          = false;            $mime_field_transformation_options  = false;            while ($curr_mime_field = @PMA_DBI_fetch_row($mime_rs)) {                if ($curr_mime_field[0] == 'mimetype') {                    $mime_field_mimetype               = true;                } elseif ($curr_mime_field[0] == 'transformation') {                    $mime_field_transformation         = true;                } elseif ($curr_mime_field[0] == 'transformation_options') {                    $mime_field_transformation_options = true;                }            }            PMA_DBI_free_result($mime_rs);            if ($mime_field_mimetype                && $mime_field_transformation                && $mime_field_transformation_options            ) {                $cfgRelation['mimework'] = true;            }        } else {            $cfgRelation['mimework'] = true;        }    }    if (isset($cfgRelation['history'])) {        $cfgRelation['historywork']     = true;    }    if (isset($cfgRelation['recent'])) {        $cfgRelation['recentwork']      = true;    }    if (isset($cfgRelation['table_uiprefs'])) {        $cfgRelation['uiprefswork']     = true;    }    if (isset($cfgRelation['tracking'])) {        $cfgRelation['trackingwork']     = true;    }    if (isset($cfgRelation['userconfig'])) {        $cfgRelation['userconfigwork']   = true;    }    // we do not absolutely need that the internal relations or the PDF    // schema feature be activated    if (isset($cfgRelation['designer_coords'])) {        $cfgRelation['designerwork']     = true;    }    if (isset($cfgRelation['bookmark'])) {        $cfgRelation['bookmarkwork']     = true;    }    if ($cfgRelation['relwork'] && $cfgRelation['displaywork']        && $cfgRelation['pdfwork'] && $cfgRelation['commwork']        && $cfgRelation['mimework'] && $cfgRelation['historywork']        && $cfgRelation['recentwork'] && $cfgRelation['uiprefswork']        && $cfgRelation['trackingwork'] && $cfgRelation['userconfigwork']        && $cfgRelation['bookmarkwork'] && $cfgRelation['designerwork']    ) {        $cfgRelation['allworks'] = true;    }    return $cfgRelation;} // end of the 'PMA_getRelationsParam()' function/** * Gets all Relations to foreign tables for a given table or * optionally a given column in a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $column the name of the column to check for * @param string $source the source for foreign key information * * @return  array    db,table,column * * @access  public */function PMA_getForeigners($db, $table, $column = '', $source = 'both'){    $cfgRelation = PMA_getRelationsParam();    $foreign = array();    if ($cfgRelation['relwork'] && ($source == 'both' || $source == 'internal')) {        $rel_query = '             SELECT `master_field`,                    `foreign_db`,                    `foreign_table`,                    `foreign_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '              WHERE `master_db`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `master_table` = \'' . PMA_sqlAddSlashes($table) . '\' ';        if (strlen($column)) {            $rel_query .= ' AND `master_field` = \'' . PMA_sqlAddSlashes($column) . '\'';        }        $foreign = PMA_DBI_fetch_result($rel_query, 'master_field', null, $GLOBALS['controllink']);    }    if (($source == 'both' || $source == 'foreign') && strlen($table)) {        $show_create_table_query = 'SHOW CREATE TABLE '            . PMA_backquote($db) . '.' . PMA_backquote($table);        $show_create_table = PMA_DBI_fetch_value($show_create_table_query, 0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));        foreach ($analyzed_sql[0]['foreign_keys'] as $one_key) {            // The analyzer may return more than one column name in the            // index list or the ref_index_list; if this happens,            // the current logic just discards the whole index; having            // more than one index field is currently unsupported (see FAQ 3.6)            if (count($one_key['index_list']) == 1) {                foreach ($one_key['index_list'] as $i => $field) {                    // If a foreign key is defined in the 'internal' source (pmadb)                    // and as a native foreign key, we won't get it twice                    // if $source='both' because we use $field as key                    // The parser looks for a CONSTRAINT clause just before                    // the FOREIGN KEY clause. It finds it (as output from                    // SHOW CREATE TABLE) in MySQL 4.0.13, but not in older                    // versions like 3.23.58.                    // In those cases, the FOREIGN KEY parsing will put numbers                    // like -1, 0, 1... instead of the constraint number.                    if (isset($one_key['constraint'])) {                        $foreign[$field]['constraint'] = $one_key['constraint'];                    }                    if (isset($one_key['ref_db_name'])) {                        $foreign[$field]['foreign_db'] = $one_key['ref_db_name'];                    } else {                        $foreign[$field]['foreign_db'] = $db;                    }                    $foreign[$field]['foreign_table'] = $one_key['ref_table_name'];                    $foreign[$field]['foreign_field'] = $one_key['ref_index_list'][$i];                    if (isset($one_key['on_delete'])) {                        $foreign[$field]['on_delete'] = $one_key['on_delete'];                    }                    if (isset($one_key['on_update'])) {                        $foreign[$field]['on_update'] = $one_key['on_update'];                    }                }            }        }    }    /**     * Emulating relations for some information_schema and data_dictionary tables     */    $is_information_schema = strtolower($db) == 'information_schema';    $is_data_dictionary = PMA_DRIZZLE && strtolower($db) == 'data_dictionary';    if (($is_information_schema || $is_data_dictionary) && ($source == 'internal' || $source == 'both')) {        if ($is_information_schema) {            $relations_key = 'information_schema_relations';            include_once './libraries/information_schema_relations.lib.php';        } else {            $relations_key = 'data_dictionary_relations';            include_once './libraries/data_dictionary_relations.lib.php';        }        if (isset($GLOBALS[$relations_key][$table])) {            foreach ($GLOBALS[$relations_key][$table] as $field => $relations) {                if ((! strlen($column) || $column == $field)                    && (! isset($foreign[$field]) || ! strlen($foreign[$field]))                ) {                    $foreign[$field] = $relations;                }            }        }    }    return $foreign;} // end of the 'PMA_getForeigners()' function/** * Gets the display field of a table * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  string   field name * * @access  public */function PMA_getDisplayField($db, $table){    $cfgRelation = PMA_getRelationsParam();    /**     * Try to fetch the display field from DB.     */    if ($cfgRelation['displaywork']) {        $disp_query = '             SELECT `display_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info']) . '              WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'';        $row = PMA_DBI_fetch_single_row($disp_query, 'ASSOC', $GLOBALS['controllink']);        if (isset($row['display_field'])) {            return $row['display_field'];        }    }    /**     * Emulating the display field for some information_schema tables.     */    if ($db == 'information_schema') {        switch ($table) {        case 'CHARACTER_SETS':            return 'DESCRIPTION';        case 'TABLES':            return 'TABLE_COMMENT';        }    }    /**     * No Luck...     */    return false;} // end of the 'PMA_getDisplayField()' function/** * Gets the comments for all rows of a table or the db itself * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  array    [field_name] = comment * * @access  public */function PMA_getComments($db, $table = ''){    $comments = array();    if ($table != '') {        // MySQL native column comments        $fields = PMA_DBI_get_columns($db, $table, null, true);        if ($fields) {            foreach ($fields as $field) {                if (! empty($field['Comment'])) {                    $comments[$field['Field']] = $field['Comment'];                }            }        }    } else {        $comments[] = PMA_getDbComment($db);    }    return $comments;} // end of the 'PMA_getComments()' function/** * Gets the comment for a db * * @param string $db the name of the db to check for * * @return  string   comment * * @access  public */function PMA_getDbComment($db){    $cfgRelation = PMA_getRelationsParam();    $comment = '';    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE db_name     = '" . PMA_sqlAddSlashes($db) . "'                AND table_name  = ''                AND column_name = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            $row = PMA_DBI_fetch_assoc($com_rs);            $comment = $row['comment'];        }        PMA_DBI_free_result($com_rs);    }    return $comment;} // end of the 'PMA_getDbComment()' function/** * Gets the comment for a db * * @access  public * * @return  string   comment */function PMA_getDbComments(){    $cfgRelation = PMA_getRelationsParam();    $comments = array();    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `db_name`, `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE `column_name` = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            while ($row = PMA_DBI_fetch_assoc($com_rs)) {                $comments[$row['db_name']] = $row['comment'];            }        }        PMA_DBI_free_result($com_rs);    }    return $comments;} // end of the 'PMA_getDbComments()' function/** * Set a database comment to a certain value. * * @param string $db      the name of the db * @param string $comment the value of the column * * @return  boolean  true, if comment-query was made. * * @access  public */function PMA_setDbComment($db, $comment = ''){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    if (strlen($comment)) {        $upd_query = "             INSERT INTO                    " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "                    (`db_name`, `table_name`, `column_name`, `comment`)             VALUES (                   '" . PMA_sqlAddSlashes($db) . "',                   '',                   '(db_comment)',                   '" . PMA_sqlAddSlashes($comment) . "')             ON DUPLICATE KEY UPDATE                `comment` = '" . PMA_sqlAddSlashes($comment) . "'";    } else {        $upd_query = '             DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '              WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name`  = \'\'                AND `column_name` = \'(db_comment)\'';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    }    return false;} // end of 'PMA_setDbComment()' function/** * Set a SQL history entry * * @param string $db       the name of the db * @param string $table    the name of the table * @param string $username the username * @param string $sqlquery the sql query * * @return nothing * * @access  public */function PMA_setHistory($db, $table, $username, $sqlquery){    if (strlen($sqlquery) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        return;    }    $cfgRelation = PMA_getRelationsParam();    if (! isset($_SESSION['sql_history'])) {        $_SESSION['sql_history'] = array();    }    $key = md5($sqlquery . $db . $table);    if (isset($_SESSION['sql_history'][$key])) {        unset($_SESSION['sql_history'][$key]);    }    $_SESSION['sql_history'][$key] = array(        'db' => $db,        'table' => $table,        'sqlquery' => $sqlquery,    );    if (count($_SESSION['sql_history']) > $GLOBALS['cfg']['QueryHistoryMax']) {        // history should not exceed a maximum count        array_shift($_SESSION['sql_history']);    }    if (! $cfgRelation['historywork'] || ! $GLOBALS['cfg']['QueryHistoryDB']) {        return;    }    PMA_query_as_controluser(        'INSERT INTO                ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              (`username`,                `db`,                `table`,                `timevalue`,                `sqlquery`)        VALUES              (\'' . PMA_sqlAddSlashes($username) . '\',               \'' . PMA_sqlAddSlashes($db) . '\',               \'' . PMA_sqlAddSlashes($table) . '\',               NOW(),               \'' . PMA_sqlAddSlashes($sqlquery) . '\')'    );} // end of 'PMA_setHistory()' function/** * Gets a SQL history entry * * @param string $username the username * * @return  array    list of history items * * @access  public */function PMA_getHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['historywork']) {        return false;    }    $hist_query = '         SELECT `db`,                `table`,                `sqlquery`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `id` DESC';    return PMA_DBI_fetch_result($hist_query, null, null, $GLOBALS['controllink']);} // end of 'PMA_getHistory()' function/** * purges SQL history * * deletes entries that exceeds $cfg['QueryHistoryMax'], oldest first, for the * given user * * @param string $username the username * * @return nothing * * @access  public */function PMA_purgeHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $GLOBALS['cfg']['QueryHistoryDB'] || ! $cfgRelation['historywork']) {        return;    }    if (! $cfgRelation['historywork']) {        return;    }    $search_query = '         SELECT `timevalue`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `timevalue` DESC          LIMIT ' . $GLOBALS['cfg']['QueryHistoryMax'] . ', 1';    if ($max_time = PMA_DBI_fetch_value($search_query, 0, 0, $GLOBALS['controllink'])) {        PMA_query_as_controluser(            'DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'                AND `timevalue` <= \'' . $max_time . '\''        );    }} // end of 'PMA_purgeHistory()' function/** * Prepares the dropdown for one mode * * @param array  $foreign the keys and values for foreigns * @param string $data    the current data of the dropdown * @param string $mode    the needed mode * * @return  array   the <option value=""><option>s * * @access  protected */function PMA__foreignDropdownBuild($foreign, $data, $mode){    $reloptions = array();    // id-only is a special mode used when no foreign display column    // is available    if ($mode == 'id-content' || $mode == 'id-only') {        // sort for id-content        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($foreign, 'strnatcasecmp');        } else {            ksort($foreign);        }    } elseif ($mode == 'content-id') {        // sort for content-id        if ($GLOBALS['cfg']['NaturalOrder']) {            natcasesort($foreign);        } else {            asort($foreign);        }    }    foreach ($foreign as $key => $value) {        if (PMA_strlen($value) <= $GLOBALS['cfg']['LimitChars']) {            $vtitle = '';            $value  = htmlspecialchars($value);        } else {            $vtitle  = htmlspecialchars($value);            $value  = htmlspecialchars(substr($value, 0, $GLOBALS['cfg']['LimitChars']) . '...');        }        $reloption = '<option value="' . htmlspecialchars($key) . '"';        if ($vtitle != '') {            $reloption .= ' title="' . $vtitle . '"';        }        if ((string) $key == (string) $data) {            $reloption .= ' selected="selected"';        }        if ($mode == 'content-id') {            $reloptions[] = $reloption . '>' . $value . '&nbsp;-&nbsp;' . htmlspecialchars($key) .  '</option>';        } elseif ($mode == 'id-content') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) .  '&nbsp;-&nbsp;' . $value . '</option>';        } elseif ($mode == 'id-only') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) . '</option>';        }    } // end foreach    return $reloptions;} // end of 'PMA__foreignDropdownBuild' function/** * Outputs dropdown with values of foreign fields * * @param array  $disp_row        array of the displayed row * @param string $foreign_field   the foreign field * @param string $foreign_display the foreign field to display * @param string $data            the current data of the dropdown (field in row) * @param int    $max             maximum number of items in the dropdown * * @return  string   the <option value=""><option>s * * @access  public */function PMA_foreignDropdown($disp_row, $foreign_field, $foreign_display, $data,    $max = null){    if (null === $max) {        $max = $GLOBALS['cfg']['ForeignKeyMaxLimit'];    }    $foreign = array();    // collect the data    foreach ($disp_row as $relrow) {        $key   = $relrow[$foreign_field];        // if the display field has been defined for this foreign table        if ($foreign_display) {            $value  = $relrow[$foreign_display];        } else {            $value = '';        } // end if ($foreign_display)        $foreign[$key] = $value;    } // end foreach    // put the dropdown sections in correct order    $top = array();    $bottom = array();    if ($foreign_display) {        if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'], 'array')) {            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][0])) {                $top = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][0]                );            }            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][1])) {                $bottom = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][1]                );            }        } else {            $top = PMA__foreignDropdownBuild($foreign, $data, 'id-content');            $bottom = PMA__foreignDropdownBuild($foreign, $data, 'content-id');        }    } else {        $top = PMA__foreignDropdownBuild($foreign, $data, 'id-only');    }    // beginning of dropdown    $ret = '<option value="">&nbsp;</option>';    $top_count = count($top);    if ($max == -1 || $top_count < $max) {        $ret .= implode('', $top);        if ($foreign_display && $top_count > 0) {            // this empty option is to visually mark the beginning of the            // second series of values (bottom)            $ret .= '<option value="">&nbsp;</option>';        }    }    if ($foreign_display) {        $ret .= implode('', $bottom);    }    return $ret;} // end of 'PMA_foreignDropdown()' function/** * Gets foreign keys in preparation for a drop-down selector * * @param array  $foreigners     array of the foreign keys * @param string $field          the foreign field name * @param bool   $override_total whether to override the total * @param string $foreign_filter a possible filter * @param string $foreign_limit  a possible LIMIT clause * * @return  array    data about the foreign keys * * @access  public */function PMA_getForeignData($foreigners, $field, $override_total, $foreign_filter, $foreign_limit){    // we always show the foreign field in the drop-down; if a display    // field is defined, we show it besides the foreign field    $foreign_link = false;    if ($foreigners && isset($foreigners[$field])) {        $foreigner       = $foreigners[$field];        $foreign_db      = $foreigner['foreign_db'];        $foreign_table   = $foreigner['foreign_table'];        $foreign_field   = $foreigner['foreign_field'];        // Count number of rows in the foreign table. Currently we do        // not use a drop-down if more than 200 rows in the foreign table,        // for speed reasons and because we need a better interface for this.        //        // We could also do the SELECT anyway, with a LIMIT, and ensure that        // the current value of the field is one of the choices.        $the_total   = PMA_Table::countRecords($foreign_db, $foreign_table);        if ($override_total == true || $the_total < $GLOBALS['cfg']['ForeignKeyMaxLimit']) {            // foreign_display can be false if no display field defined:            $foreign_display = PMA_getDisplayField($foreign_db, $foreign_table);            $f_query_main = 'SELECT ' . PMA_backquote($foreign_field)                        . (($foreign_display == false) ? '' : ', ' . PMA_backquote($foreign_display));            $f_query_from = ' FROM ' . PMA_backquote($foreign_db) . '.' . PMA_backquote($foreign_table);            $f_query_filter = empty($foreign_filter) ? '' : ' WHERE ' . PMA_backquote($foreign_field)                            . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                            . (($foreign_display == false) ? '' : ' OR ' . PMA_backquote($foreign_display)                                . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                                );            $f_query_order = ($foreign_display == false) ? '' :' ORDER BY ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($foreign_display);            $f_query_limit = isset($foreign_limit) ? $foreign_limit : '';            if (!empty($foreign_filter)) {                $res = PMA_DBI_query('SELECT COUNT(*)' . $f_query_from . $f_query_filter);                if ($res) {                    $the_total = PMA_DBI_fetch_value($res);                    @PMA_DBI_free_result($res);                } else {                    $the_total = 0;                }            }            $disp  = PMA_DBI_query($f_query_main . $f_query_from . $f_query_filter . $f_query_order . $f_query_limit);            if ($disp && PMA_DBI_num_rows($disp) > 0) {                // If a resultset has been created, pre-cache it in the $disp_row array                // This helps us from not needing to use mysql_data_seek by accessing a pre-cached                // PHP array. Usually those resultsets are not that big, so a performance hit should                // not be expected.                $disp_row = array();                while ($single_disp_row = @PMA_DBI_fetch_assoc($disp)) {                    $disp_row[] = $single_disp_row;                }                @PMA_DBI_free_result($disp);            }        } else {            $disp_row = null;            $foreign_link = true;        }    }  // end if $foreigners    $foreignData['foreign_link'] = $foreign_link;    $foreignData['the_total'] = isset($the_total) ? $the_total : null;    $foreignData['foreign_display'] = isset($foreign_display) ? $foreign_display : null;    $foreignData['disp_row'] = isset($disp_row) ? $disp_row : null;    $foreignData['foreign_field'] = isset($foreign_field) ? $foreign_field : null;    return $foreignData;} // end of 'PMA_getForeignData()' function/** * Finds all related tables * * @param string $from whether to go from master to foreign or vice versa * * @return  boolean  always true * * @global  array    $tab_left the list of tables that we still couldn't connect * @global  array    $tab_know the list of allready connected tables * @global  string   $fromclause * * @access  private */function PMA_getRelatives($from){    global $tab_left, $tab_know, $fromclause;    if ($from == 'master') {        $to    = 'foreign';    } else {        $to    = 'master';    }    $in_know = '(\'' . implode('\', \'', $tab_know) . '\')';    $in_left = '(\'' . implode('\', \'', $tab_left) . '\')';    $rel_query = 'SELECT *'               . '  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db'])               .       '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])               . ' WHERE ' . $from . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $to   . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $from . '_table IN ' . $in_know               . '   AND ' . $to   . '_table IN ' . $in_left;    $relations = @PMA_DBI_query($rel_query, $GLOBALS['controllink']);    while ($row = PMA_DBI_fetch_assoc($relations)) {        $found_table                = $row[$to . '_table'];        if (isset($tab_left[$found_table])) {            $fromclause                .= "\n" . ' LEFT JOIN '                . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($row[$to . '_table']) . ' ON '                . PMA_backquote($row[$from . '_table']) . '.'                . PMA_backquote($row[$from . '_field']) . ' = '                . PMA_backquote($row[$to . '_table']) . '.'                . PMA_backquote($row[$to . '_field']) . ' ';            $tab_know[$found_table] = $found_table;            unset($tab_left[$found_table]);        }    } // end while    return true;} // end of the "PMA_getRelatives()" function/** * Rename a field in relation tables * * usually called after a field in a table was renamed in tbl_alter.php * * @param string $db       databse name * @param string $table    table name * @param string $field    old field name * @param string $new_name new field name * * @return nothing */function PMA_REL_renameField($db, $table, $field, $new_name){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['displaywork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                      . '   SET display_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE db_name       = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND table_name    = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND display_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    }    if ($cfgRelation['relwork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET master_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE master_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND master_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET foreign_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE foreign_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND foreign_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    } // end if relwork}/** * Create a PDF page * * @param string $newpage     name of the new PDF page * @param array  $cfgRelation * @param string $db          database name * * @return string   $pdf_page_number */function PMA_REL_create_page($newpage, $cfgRelation, $db){    if (! isset($newpage) || $newpage == '') {        $newpage = __('no description');    }    $ins_query   = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                 . ' (db_name, page_descr)'                 . ' VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \'' . PMA_sqlAddSlashes($newpage) . '\')';    PMA_query_as_controluser($ins_query, false);    return PMA_DBI_insert_id(isset($GLOBALS['controllink']) ? $GLOBALS['controllink'] : '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_import.php&amp;back=tbl_import.php';require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$import_type = 'table';require_once './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * * @package PhpMyAdmin */class PMA_Theme_Manager{    /**     * @var string path to theme folder     * @access protected     */    var $_themes_path;    /**     * @var array available themes     */    var $themes = array();    /**     * @var string  cookie name     */    var $cookie_name = 'pma_theme';    /**     * @var boolean     */    var $per_server = false;    /**     * @var string name of active theme     */    var $active_theme = '';    /**     * @var PMA_Theme PMA_Theme active theme     */    var $theme = null;    /**     * @var string     */    var $theme_default = 'original';    function __construct()    {        $this->init();    }    /**     * sets path to folder containing the themes     *     * @param string  $path   path to themes folder     * @return  boolean success     */    function setThemesPath($path)    {        if (! $this->_checkThemeFolder($path)) {            return false;        }        $this->_themes_path = trim($path);        return true;    }    /**     * @public     * @return  string     */    function getThemesPath()    {        return $this->_themes_path;    }    /**     * sets if there are different themes per server     *     * @param boolean $per_server     */    function setThemePerServer($per_server)    {        $this->per_server  = (bool) $per_server;    }    function init()    {        $this->themes = array();        $this->theme_default = 'original';        $this->active_theme = '';        if (! $this->setThemesPath($GLOBALS['cfg']['ThemePath'])) {            return false;        }        $this->setThemePerServer($GLOBALS['cfg']['ThemePerServer']);        $this->loadThemes();        $this->theme = new PMA_Theme;        if (! $this->checkTheme($GLOBALS['cfg']['ThemeDefault'])) {            trigger_error(                sprintf(                    __('Default theme %s not found!'),                    htmlspecialchars($GLOBALS['cfg']['ThemeDefault'])                    ),                E_USER_ERROR                );            $GLOBALS['cfg']['ThemeDefault'] = false;        }        $this->theme_default = $GLOBALS['cfg']['ThemeDefault'];        // check if user have a theme cookie        if (! $this->getThemeCookie()         || ! $this->setActiveTheme($this->getThemeCookie())) {            // otherwise use default theme            if ($GLOBALS['cfg']['ThemeDefault']) {                $this->setActiveTheme($GLOBALS['cfg']['ThemeDefault']);            } else {                // or original theme                $this->setActiveTheme('original');            }        }    }    function checkConfig()    {        if ($this->_themes_path != trim($GLOBALS['cfg']['ThemePath'])         || $this->theme_default != $GLOBALS['cfg']['ThemeDefault']) {            $this->init();        } else {            // at least the theme path needs to be checked every time for new            // themes, as there is no other way at the moment to keep track of            // new or removed themes            $this->loadThemes();        }    }    function setActiveTheme($theme = null)    {        if (! $this->checkTheme($theme)) {            trigger_error(                sprintf(                    __('Theme %s not found!'),                    htmlspecialchars($theme)                ),                E_USER_ERROR);            return false;        }        $this->active_theme = $theme;        $this->theme = $this->themes[$theme];        // need to set later        //$this->setThemeCookie();        return true;    }    /**     * @return  string  cookie name     */    function getThemeCookieName()    {        // Allow different theme per server        if (isset($GLOBALS['server']) && $this->per_server) {            return $this->cookie_name . '-' . $GLOBALS['server'];        } else {            return $this->cookie_name;        }    }    /**     * returns name of theme stored in the cookie     * @return  string  theme name from cookie     */    function getThemeCookie()    {        if (isset($_COOKIE[$this->getThemeCookieName()])) {            return $_COOKIE[$this->getThemeCookieName()];        }        return false;    }    /**     * save theme in cookie     *     * @return bool true     */    function setThemeCookie()    {        $GLOBALS['PMA_Config']->setCookie($this->getThemeCookieName(), $this->theme->id,            $this->theme_default);        // force a change of a dummy session variable to avoid problems        // with the caching of phpmyadmin.css.php        $GLOBALS['PMA_Config']->set('theme-update', $this->theme->id);        return true;    }    /**     * @private     * @param string $folder     * @return  boolean     */    private function _checkThemeFolder($folder)    {        if (! is_dir($folder)) {            trigger_error(                sprintf(__('Theme path not found for theme %s!'),                    htmlspecialchars($folder)),                E_USER_ERROR);            return false;        }        return true;    }    /**     * read all themes     *     * @return bool true     */    function loadThemes()    {        $this->themes = array();        if ($handleThemes = opendir($this->getThemesPath())) {            // check for themes directory            while (false !== ($PMA_Theme = readdir($handleThemes))) {                // Skip non dirs, . and ..                if ($PMA_Theme == '.' || $PMA_Theme == '..' || ! is_dir($this->getThemesPath() . '/' . $PMA_Theme)) {                    continue;                }                if (array_key_exists($PMA_Theme, $this->themes)) {                    continue;                }                $new_theme = PMA_Theme::load($this->getThemesPath() . '/' . $PMA_Theme);                if ($new_theme) {                    $new_theme->setId($PMA_Theme);                    $this->themes[$PMA_Theme] = $new_theme;                }            } // end get themes            closedir($handleThemes);        } else {            trigger_error(                'phpMyAdmin-ERROR: cannot open themes folder: ' . $this->getThemesPath(),                E_USER_WARNING);            return false;        } // end check for themes directory        ksort($this->themes);        return true;    }    /**     * checks if given theme name is a known theme     *     * @param string  $theme  name fo theme to check for     * @return bool     */    function checkTheme($theme)    {        if (! array_key_exists($theme, $this->themes)) {            return false;        }        return true;    }    /**     * returns HTML selectbox, with or without form enclosed     *     * @param boolean $form   whether enclosed by from tags or not     * @return string     */    function getHtmlSelectBox($form = true)    {        $select_box = '';        if ($form) {            $select_box .= '<form name="setTheme" method="post" action="index.php"'                .' target="_parent">';            $select_box .=  PMA_generate_common_hidden_inputs();        }        $theme_preview_path= './themes.php';        $theme_preview_href = '<a href="' . $theme_preview_path . '" target="themes" class="themeselect">';        $select_box .=  $theme_preview_href . __('Theme') . '</a>:' . "\n";        $select_box .=  '<select name="set_theme" xml:lang="en" dir="ltr" class="autosubmit">';        foreach ($this->themes as $each_theme_id => $each_theme) {            $select_box .=  '<option value="' . $each_theme_id . '"';            if ($this->active_theme === $each_theme_id) {                $select_box .=  ' selected="selected"';            }            $select_box .=  '>' . htmlspecialchars($each_theme->getName()) . '</option>';        }        $select_box .=  '</select>';        if ($form) {            $select_box .=  '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';            $select_box .=  '</form>';        }        return $select_box;    }    /**     * enables backward compatibility     */    function makeBc()    {        $GLOBALS['theme']           = $this->theme->getId();        $GLOBALS['pmaThemePath']    = $this->theme->getPath();        $GLOBALS['pmaThemeImage']   = $this->theme->getImgPath();        /**         * load layout file if exists         */        if (file_exists($this->theme->getLayoutFile())) {            include $this->theme->getLayoutFile();        }    }    /**     * prints out preview for every theme     *     */    function printPreviews()    {        foreach ($this->themes as $each_theme) {            $each_theme->printPreview();        } // end 'open themes'    }    /**     * returns PMA_Theme object for fall back theme     * @return object   PMA_Theme     */    function getFallBackTheme()    {        if (isset($this->themes['original'])) {            return $this->themes['original'];        }        return false;    }    /**     * prints css data     *     * @param string $type     * @return bool     */    function printCss($type)    {        if ($this->theme->loadCss($type)) {            return true;        }        // if loading css for this theme failed, try default theme css        $fallback_theme = $this->getFallBackTheme();        if ($fallback_theme && $fallback_theme->loadCss($type)) {            return true;        }        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core script for import, this is just the glue around all other stuff * * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';//require_once './libraries/display_import_functions.lib.php';// reset import messages for ajax request$_SESSION['Import_message']['message'] = null;$_SESSION['Import_message']['go_back_url'] = null;// default values$GLOBALS['reload'] = false;// Are we just executing plain query or sql file? (eg. non import, but query box/window run)if (!empty($sql_query)) {    // run SQL query    $import_text = $sql_query;    $import_type = 'query';    $format = 'sql';    // refresh left frame on changes in table or db structure    if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {        $GLOBALS['reload'] = true;    }    $sql_query = '';} elseif (!empty($sql_localfile)) {    // run SQL file on server    $local_import_file = $sql_localfile;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_localfile);} elseif (!empty($sql_file)) {    // run uploaded SQL file    $import_file = $sql_file;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_file);} elseif (!empty($id_bookmark)) {    // run bookmark    $import_type = 'query';    $format = 'sql';}// If we didn't get any parameters, either user called this directly, or// upload limit has been reached, let's assume the second possibility.;if ($_POST == array() && $_GET == array()) {    include_once './libraries/header.inc.php';    $message = PMA_Message::error(__('You probably tried to upload too large file. Please refer to %sdocumentation%s for ways to workaround this limit.'));    $message->addParam('[a@./Documentation.html#faq1_16@_blank]');    $message->addParam('[/a]');    // so we can obtain the message    $_SESSION['Import_message']['message'] = $message->getDisplay();    $_SESSION['Import_message']['go_back_url'] = $goto;    $message->display();    include './libraries/footer.inc.php';}// Check needed parametersPMA_checkParameters(array('import_type', 'format'));// We don't want anything special in format$format = PMA_securePath($format);// Import functionsrequire_once './libraries/import.lib.php';// Create error and goto urlif ($import_type == 'table') {    $err_url = 'tbl_import.php?' . PMA_generate_common_url($db, $table);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'tbl_import.php';} elseif ($import_type == 'database') {    $err_url = 'db_import.php?' . PMA_generate_common_url($db);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'db_import.php';} elseif ($import_type == 'server') {    $err_url = 'server_import.php?' . PMA_generate_common_url();    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'server_import.php';} else {    if (empty($goto) || !preg_match('@^(server|db|tbl)(_[a-z]*)*\.php$@i', $goto)) {        if (strlen($table) && strlen($db)) {            $goto = 'tbl_structure.php';        } elseif (strlen($db)) {            $goto = 'db_structure.php';        } else {            $goto = 'server_sql.php';        }    }    if (strlen($table) && strlen($db)) {        $common = PMA_generate_common_url($db, $table);    } elseif (strlen($db)) {        $common = PMA_generate_common_url($db);    } else {        $common = PMA_generate_common_url();    }    $err_url  = $goto              . '?' . $common              . (preg_match('@^tbl_[a-z]*\.php$@', $goto) ? '&amp;table=' . htmlspecialchars($table) : '');    $_SESSION['Import_message']['go_back_url'] = $err_url;}if (strlen($db)) {    PMA_DBI_select_db($db);}@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}$timestamp = time();if (isset($allow_interrupt)) {    $maximum_time = ini_get('max_execution_time');} else {    $maximum_time = 0;}// set default values$timeout_passed = false;$error = false;$read_multiply = 1;$finished = false;$offset = 0;$max_sql_len = 0;$file_to_unlink = '';$sql_query = '';$sql_query_disabled = false;$go_sql = false;$executed_queries = 0;$run_query = true;$charset_conversion = false;$reset_charset = false;$bookmark_created = false;// Bookmark Support: get a query back from bookmark if requiredif (!empty($id_bookmark)) {    $id_bookmark = (int)$id_bookmark;    include_once './libraries/bookmark.lib.php';    switch ($action_bookmark) {        case 0: // bookmarked query that have to be run            $import_text = PMA_Bookmark_get($db, $id_bookmark, 'id', isset($action_bookmark_all));            if (isset($bookmark_variable) && !empty($bookmark_variable)) {                $import_text = preg_replace('|/\*(.*)\[VARIABLE\](.*)\*/|imsU', '${1}' . PMA_sqlAddSlashes($bookmark_variable) . '${2}', $import_text);            }            // refresh left frame on changes in table or db structure            if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $import_text)) {                $GLOBALS['reload'] = true;            }            break;        case 1: // bookmarked query that have to be displayed            $import_text = PMA_Bookmark_get($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data['sql_query'] = $import_text;                $extra_data['action_bookmark'] = $action_bookmark;                $message = PMA_Message::success(__('Showing bookmark'));                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;            }            break;        case 2: // bookmarked query that have to be deleted            $import_text = PMA_Bookmark_get($db, $id_bookmark);            PMA_Bookmark_delete($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $message = PMA_Message::success(__('The bookmark has been deleted.'));                $extra_data['action_bookmark'] = $action_bookmark;                $extra_data['id_bookmark'] = $id_bookmark;                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;                $error = true; // this is kind of hack to skip processing the query            }            break;    }} // end bookmarks reading// Do no run query if we show PHP codeif (isset($GLOBALS['show_as_php'])) {    $run_query = false;    $go_sql = true;}// Store the query as a bookmark before executing it if bookmarklabel was givenif (!empty($bkm_label) && !empty($import_text)) {    include_once './libraries/bookmark.lib.php';    $bfields = array(                 'dbase' => $db,                 'user'  => $cfg['Bookmark']['user'],                 'query' => urlencode($import_text),                 'label' => $bkm_label    );    // Should we replace bookmark?    if (isset($bkm_replace)) {        $bookmarks = PMA_Bookmark_getList($db);        foreach ($bookmarks as $key => $val) {            if ($val == $bkm_label) {                PMA_Bookmark_delete($db, $key);            }        }    }    PMA_Bookmark_save($bfields, isset($bkm_all_users));    $bookmark_created = true;} // end store bookmarks// We can not read all at once, otherwise we can run out of memory$memory_limit = trim(@ini_get('memory_limit'));// 2 MB as defaultif (empty($memory_limit)) {    $memory_limit = 2 * 1024 * 1024;}// In case no memory limit we work on 10MB chunksif ($memory_limit == -1) {    $memory_limit = 10 * 1024 * 1024;}// Calculate value of the limitif (strtolower(substr($memory_limit, -1)) == 'm') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'k') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'g') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;} else {    $memory_limit = (int)$memory_limit;}$read_limit = $memory_limit / 8; // Just to be sure, there might be lot of memory needed for uncompression// handle filenamesif (!empty($local_import_file) && !empty($cfg['UploadDir'])) {    // sanitize $local_import_file as it comes from a POST    $local_import_file = PMA_securePath($local_import_file);    $import_file  = PMA_userDir($cfg['UploadDir']) . $local_import_file;} elseif (empty($import_file) || !is_uploaded_file($import_file)) {    $import_file  = 'none';}// Do we have file to import?if ($import_file != 'none' && !$error) {    // work around open_basedir and other limitations    $open_basedir = @ini_get('open_basedir');    // If we are on a server with open_basedir, we must move the file    // before opening it. The doc explains how to create the "./tmp"    // directory    if (!empty($open_basedir)) {        $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');        if (is_writable($tmp_subdir)) {            $import_file_new = $tmp_subdir . basename($import_file) . uniqid();            if (move_uploaded_file($import_file, $import_file_new)) {                $import_file = $import_file_new;                $file_to_unlink = $import_file_new;            }            $size = filesize($import_file);        }    }    /**     *  Handle file compression     *  @todo duplicate code exists in File.class.php     */    $compression = PMA_detectCompression($import_file);    if ($compression === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    } else {        switch ($compression) {            case 'application/bzip2':                if ($cfg['BZipDump'] && @function_exists('bzopen')) {                    $import_handle = @bzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/gzip':                if ($cfg['GZipDump'] && @function_exists('gzopen')) {                    $import_handle = @gzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/zip':                if ($cfg['ZipDump'] && @function_exists('zip_open')) {                    /**                     * Load interface for zip extension.                     */                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($import_file);                    if (! empty($result['error'])) {                        $message = PMA_Message::rawError($result['error']);                        $error = true;                    } else {                        $import_text = $result['data'];                    }                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'none':                $import_handle = @fopen($import_file, 'r');                break;            default:                $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                $message->addParam($compression);                $error = true;                break;        }    }    // use isset() because zip compression type does not use a handle    if (!$error && isset($import_handle) && $import_handle === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    }} elseif (!$error) {    if (! isset($import_text) || empty($import_text)) {        $message = PMA_Message::error(__('No data was received to import. Either no file name was submitted, or the file size exceeded the maximum size permitted by your PHP configuration. See [a@./Documentation.html#faq1_16@Documentation]FAQ 1.16[/a].'));        $error = true;    }}// so we can obtain the message//$_SESSION['Import_message'] = $message->getDisplay();// Convert the file's charset if necessaryif ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE && isset($charset_of_file)) {    if ($charset_of_file != 'utf-8') {        $charset_conversion = true;    }} elseif (isset($charset_of_file) && $charset_of_file != 'utf8') {    if (PMA_DRIZZLE) {        // Drizzle doesn't support other character sets, so we can't fallback to SET NAMES - throw an error        $error = true;        $message = PMA_Message::error(__('Cannot convert file\'s character set without character set conversion library'));    } else {        PMA_DBI_query('SET NAMES \'' . $charset_of_file . '\'');        // We can not show query in this case, it is in different charset        $sql_query_disabled = true;        $reset_charset = true;    }}// Something to skip?if (!$error && isset($skip)) {    $original_skip = $skip;    while ($skip > 0) {        PMA_importGetNextChunk($skip < $read_limit ? $skip : $read_limit);        $read_multiply = 1; // Disable read progresivity, otherwise we eat all memory!        $skip -= $read_limit;    }    unset($skip);}if (!$error) {    // Check for file existance    if (!file_exists('./libraries/import/' . $format . '.php')) {        $error = true;        $message = PMA_Message::error(__('Could not load import plugins, please check your installation!'));    } else {        // Do the real import        $plugin_param = $import_type;        include './libraries/import/' . $format . '.php';    }}if (! $error && false !== $import_handle && null !== $import_handle) {    fclose($import_handle);}// Cleanup temporary fileif ($file_to_unlink != '') {    unlink($file_to_unlink);}// Reset charset back, if we did some changesif ($reset_charset) {    PMA_DBI_query('SET CHARACTER SET utf8');    PMA_DBI_query('SET SESSION collation_connection =\'' . $collation_connection . '\'');}// Show correct messageif (!empty($id_bookmark) && $action_bookmark == 2) {    $message = PMA_Message::success(__('The bookmark has been deleted.'));    $display_query = $import_text;    $error = false; // unset error marker, it was used just to skip processing} elseif (!empty($id_bookmark) && $action_bookmark == 1) {    $message = PMA_Message::notice(__('Showing bookmark'));} elseif ($bookmark_created) {    $special_message = '[br]' . sprintf(__('Bookmark %s created'), htmlspecialchars($bkm_label));} elseif ($finished && !$error) {    if ($import_type == 'query') {        $message = PMA_Message::success();    } else {        if ($import_notice) {            $message = PMA_Message::success('<em>'.__('Import has been successfully finished, %d queries executed.').'</em>');            $message->addParam($executed_queries);            $message->addString($import_notice);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        } else {            $message = PMA_Message::success(__('Import has been successfully finished, %d queries executed.'));            $message->addParam($executed_queries);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        }    }}// Did we hit timeout? Tell it user.if ($timeout_passed) {    $message = PMA_Message::error(__('Script timeout passed, if you want to finish import, please resubmit same file and import will resume.'));    if ($offset == 0 || (isset($original_skip) && $original_skip == $offset)) {        $message->addString(__('However on last run no data has been parsed, this usually means phpMyAdmin won\'t be able to finish this import unless you increase php time limits.'));    }}// if there is any message, copy it into $_SESSION as well, so we can obtain it by AJAX callif (isset($message)) {    $_SESSION['Import_message']['message'] = $message->getDisplay();//  $_SESSION['Import_message']['go_back_url'] = $goto.'?'.  PMA_generate_common_url();}// Parse and analyze the query, for correct db and table name// in case of a query typed in the query window// (but if the query is too large, in case of an imported file, the parser//  can choke on it so avoid parsing)if (strlen($sql_query) <= $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {    include_once './libraries/parse_analyze.lib.php';}// There was an error?if (isset($my_die)) {    foreach ($my_die AS $key => $die) {        PMA_mysqlDie($die['error'], $die['sql'], '', $err_url, $error);    }}// we want to see the results of the last query that returned at least a rowif (! empty($last_query_with_results)) {    // but we want to show intermediate results too    $disp_query = $sql_query;    $disp_message = __('Your SQL query has been executed successfully');    $sql_query = $last_query_with_results;    $go_sql = true;}if ($go_sql) {    include './sql.php';} else {    $active_page = $goto;    include './' . $goto;}exit();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for event management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_EVN_setGlobals(){    global $event_status, $event_type, $event_interval;    $event_status        = array(                               'query'   => array('ENABLE',                                                  'DISABLE',                                                  'DISABLE ON SLAVE'),                               'display' => array('ENABLED',                                                  'DISABLED',                                                  'SLAVESIDE_DISABLED')                           );    $event_type          = array('RECURRING',                                 'ONE TIME');    $event_interval      = array('YEAR',                                 'QUARTER',                                 'MONTH',                                 'DAY',                                 'HOUR',                                 'MINUTE',                                 'WEEK',                                 'SECOND',                                 'YEAR_MONTH',                                 'DAY_HOUR',                                 'DAY_MINUTE',                                 'DAY_SECOND',                                 'HOUR_MINUTE',                                 'HOUR_SECOND',                                 'MINUTE_SECOND');}/** * Main function for the events functionality */function PMA_EVN_main(){    global $db;    PMA_EVN_setGlobals();    /**     * Process all requests     */    PMA_EVN_handleEditor();    PMA_EVN_handleExport();    /**     * Display a list of available events     */    $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` "             . "WHERE $where ORDER BY `EVENT_NAME` ASC;";    $items   = PMA_DBI_fetch_result($query);    echo PMA_RTE_getList('event', $items);    /**     * Display a link for adding a new event, if     * the user has the privileges and a link to     * toggle the state of the event scheduler.     */    echo PMA_EVN_getFooterLinks();} // end PMA_EVN_main()/** * Handles editor requests for adding or editing an item */function PMA_EVN_handleEditor(){    global $_REQUEST, $_POST, $errors, $db;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_EVN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $create_item = PMA_DBI_get_definition(                    $db,                    'EVENT',                    $_REQUEST['item_original_name']                );                $drop_item = "DROP EVENT " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped event.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Event %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Event %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";                $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                         . "AND EVENT_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'";                $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";                $event   = PMA_DBI_fetch_single_row($query);                $extra_data['name'] = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_EVN_getRowForList($event);                $extra_data['insert'] = ! empty($event);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['item_changetype'])))    ) { // FIXME: this must be simpler than that        $operation = '';        if (! empty($_REQUEST['item_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_EVN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit event");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])                && empty($_REQUEST['item_changetype'])            ) {                $item = PMA_EVN_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_EVN_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_EVN_getEditorForm($mode, $operation, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_EVN_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_status',                     'item_execute_at',                     'item_interval_value',                     'item_interval_field',                     'item_starts',                     'item_ends',                     'item_definition',                     'item_preserve',                     'item_comment',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']        = 'ONE TIME';    $retval['item_type_toggle'] = 'RECURRING';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'RECURRING') {        $retval['item_type']        = 'RECURRING';        $retval['item_type_toggle'] = 'ONE TIME';    }    return $retval;} // end PMA_EVN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit event" form given the name of a event. * * @param   string   $name   The name of the event. * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromName($name){    global $db;    $retval = array();    $columns = "`EVENT_NAME`, `STATUS`, `EVENT_TYPE`, `EXECUTE_AT`, "             . "`INTERVAL_VALUE`, `INTERVAL_FIELD`, `STARTS`, `ENDS`, "             . "`EVENT_DEFINITION`, `ON_COMPLETION`, `DEFINER`, `EVENT_COMMENT`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND EVENT_NAME='" . PMA_sqlAddSlashes($name) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";    $item    = PMA_DBI_fetch_single_row($query);    if (! $item) {        return false;    }    $retval['item_name']   = $item['EVENT_NAME'];    $retval['item_status'] = $item['STATUS'];    $retval['item_type']   = $item['EVENT_TYPE'];    if ($retval['item_type'] == 'RECURRING') {        $retval['item_type_toggle'] = 'ONE TIME';    } else {        $retval['item_type_toggle'] = 'RECURRING';    }    $retval['item_execute_at']     = $item['EXECUTE_AT'];    $retval['item_interval_value'] = $item['INTERVAL_VALUE'];    $retval['item_interval_field'] = $item['INTERVAL_FIELD'];    $retval['item_starts']         = $item['STARTS'];    $retval['item_ends']           = $item['ENDS'];    $retval['item_preserve']       = '';    if ($item['ON_COMPLETION'] == 'PRESERVE') {        $retval['item_preserve']   = " checked='checked'";    }    $retval['item_definition'] = $item['EVENT_DEFINITION'];    $retval['item_definer']    = $item['DEFINER'];    $retval['item_comment']    = $item['EVENT_COMMENT'];    return $retval;} // end PMA_EVN_getDataFromName()/** * Displays a form used to add/edit an event * * @param   string   $mode      If the editor will be used edit an event *                              or add a new one: 'edit' or 'add'. * @param   string   $operation If the editor was previously invoked with *                              JS turned off, this will hold the name of *                              the current operation * @param   array    $item      Data for the event returned by *                              PMA_EVN_getDataFromRequest() or *                              PMA_EVN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_EVN_getEditorForm($mode, $operation, $item){    global $db, $table, $event_status, $event_type, $event_interval;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_type',                       'item_execute_at',                       'item_interval_value',                       'item_starts',                       'item_ends',                       'item_definition',                       'item_definer',                       'item_comment'                   );    foreach ($need_escape as $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    // Handle some logic first    if ($operation == 'change') {        if ($item['item_type'] == 'RECURRING') {            $item['item_type']         = 'ONE TIME';            $item['item_type_toggle']  = 'RECURRING';        } else {            $item['item_type']         = 'RECURRING';            $item['item_type_toggle']  = 'ONE TIME';        }    }    if ($item['item_type'] == 'ONE TIME') {        $isrecurring_class = ' hide';        $isonetime_class   = '';    } else {        $isrecurring_class = '';        $isonetime_class   = ' hide';    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " EVENT FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_events.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Event name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' \n";    $retval .= "               value='{$item['item_name']}'\n";    $retval .= "               maxlength='64' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Status') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_status'>\n";    foreach ($event_status['display'] as $key => $value) {        $selected = "";        if (! empty($item['item_status']) && $item['item_status'] == $value) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>";        foreach ($event_type as $key => $value) {            $selected = "";            if (! empty($item['item_type']) && $item['item_type'] == $value) {                $selected = " selected='selected'";            }            $retval .= "<option$selected>$value</option>";        }        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' \n";        $retval .= "               value='{$item['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$item['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit'\n";        $retval .= "               name='item_changetype'\n";        $retval .= "               value='";        $retval .= sprintf(__('Change to %s'), $item['item_type_toggle']);        $retval .= "' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='onetime_event_row $isonetime_class'>\n";    $retval .= "    <td>" . __('Execute at') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_execute_at'\n";    $retval .= "               value='{$item['item_execute_at']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row $isrecurring_class'>\n";    $retval .= "    <td>" . __('Execute every') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='text'\n";    $retval .= "               name='item_interval_value'\n";    $retval .= "               value='{$item['item_interval_value']}' />\n";    $retval .= "        <select style='width: 49%;' name='item_interval_field'>";    foreach ($event_interval as $key => $value) {        $selected = "";        if (! empty($item['item_interval_field'])            && $item['item_interval_field'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('Start of recurring event', 'Start') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text'\n name='item_starts'\n";    $retval .= "               value='{$item['item_starts']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('End of recurring event', 'End') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_ends'\n";    $retval .= "               value='{$item['item_ends']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('On completion preserve') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_preserve'{$item['item_preserve']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$item['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " EVENT FORM -->\n\n";    return $retval;} // end PMA_EVN_getEditorForm()/** * Composes the query necessary to create an event from an HTTP request. * * @return  string  The CREATE EVENT query. */function PMA_EVN_getQueryFromRequest(){    global $_REQUEST, $errors, $event_status, $event_type, $event_interval;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'EVENT ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide an event name');    }    $query .= 'ON SCHEDULE ';    if (! empty($_REQUEST['item_type']) && in_array($_REQUEST['item_type'], $event_type)) {        if ($_REQUEST['item_type'] == 'RECURRING') {            if (! empty($_REQUEST['item_interval_value'])                && !empty($_REQUEST['item_interval_field'])                && in_array($_REQUEST['item_interval_field'], $event_interval)            ) {                $query .= 'EVERY ' . intval($_REQUEST['item_interval_value']) . ' ';                $query .= $_REQUEST['item_interval_field'] . ' ';            } else {                $errors[] = __('You must provide a valid interval value for the event.');            }            if (! empty($_REQUEST['item_starts'])) {                $query .= "STARTS '" . PMA_sqlAddSlashes($_REQUEST['item_starts']) . "' ";            }            if (! empty($_REQUEST['item_ends'])) {                $query .= "ENDS '" . PMA_sqlAddSlashes($_REQUEST['item_ends']) . "' ";            }        } else {            if (! empty($_REQUEST['item_execute_at'])) {                $query .= "AT '" . PMA_sqlAddSlashes($_REQUEST['item_execute_at']) . "' ";            } else {                $errors[] = __('You must provide a valid execution time for the event.');            }        }    } else {        $errors[] = __('You must provide a valid type for the event.');    }    $query .= 'ON COMPLETION ';    if (empty($_REQUEST['item_preserve'])) {        $query .= 'NOT ';    }    $query .= 'PRESERVE ';    if (! empty($_REQUEST['item_status'])) {        foreach ($event_status['display'] as $key => $value) {            if ($value == $_REQUEST['item_status']) {                $query .= $event_status['query'][$key] . ' ';                break;            }        }    }    $query .= 'DO ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide an event definition.');    }    return $query;} // end PMA_EVN_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common Option Constants For DBI Functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Force STORE_RESULT method, ignored by classic MySQL. */define('PMA_DBI_QUERY_STORE',       1);/** * Do not read whole query. */define('PMA_DBI_QUERY_UNBUFFERED',  2);/** * Get session variable. */define('PMA_DBI_GETVAR_SESSION',    1);/** * Get global variable. */define('PMA_DBI_GETVAR_GLOBAL',     2);/** * Checks whether database extension is loaded * * @param string $extension mysql extension to check * * @return bool */function PMA_DBI_checkDbExtension($extension = 'mysql'){    if ($extension == 'drizzle' && function_exists('drizzle_create')) {        return true;    } else if (function_exists($extension . '_connect')) {        return true;    }    return false;}/** * check for requested extension */if (! PMA_DBI_checkDbExtension($GLOBALS['cfg']['Server']['extension'])) {    // if it fails try alternative extension ...    // and display an error ...    /**     * @todo add different messages for alternative extension     * and complete fail (no alternative extension too)     */    PMA_warnMissingExtension(        $GLOBALS['cfg']['Server']['extension'],        false,        PMA_showDocu('faqmysql')    );    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        $alternativ_extension = 'mysqli';    } else {        $alternativ_extension = 'mysql';    }    if (! PMA_DBI_checkDbExtension($alternativ_extension)) {        // if alternative fails too ...        PMA_warnMissingExtension(            $GLOBALS['cfg']['Server']['extension'],            true,            PMA_showDocu('faqmysql')        );    }    $GLOBALS['cfg']['Server']['extension'] = $alternativ_extension;    unset($alternativ_extension);}/** * Including The DBI Plugin */require_once './libraries/dbi/'    . $GLOBALS['cfg']['Server']['extension'] . '.dbi.lib.php';/** * runs a query * * @param string $query               SQL query to execte * @param mixed  $link                optional database link to use * @param int    $options             optional query options * @param bool   $cache_affected_rows whether to cache affected rows * * @return mixed */function PMA_DBI_query($query, $link = null, $options = 0, $cache_affected_rows = true){    $res = PMA_DBI_try_query($query, $link, $options, $cache_affected_rows)        or PMA_mysqlDie(PMA_DBI_getError($link), $query);    return $res;}/** * runs a query and returns the result * * @param string   $query               query to run * @param resource $link                mysql link resource * @param integer  $options             query options * @param bool     $cache_affected_rows whether to cache affected row * * @return mixed */function PMA_DBI_try_query($query, $link = null, $options = 0, $cache_affected_rows = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true);    }    $r = PMA_DBI_real_query($query, $link, $options);    if ($cache_affected_rows) {        $GLOBALS['cached_affected_rows'] = PMA_DBI_affected_rows($link, $get_from_cache = false);    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true) - $time;        $hash = md5($query);        if (isset($_SESSION['debug']['queries'][$hash])) {            $_SESSION['debug']['queries'][$hash]['count']++;        } else {            $_SESSION['debug']['queries'][$hash] = array();            if ($r == false) {                $_SESSION['debug']['queries'][$hash]['error'] = '<b style="color:red">'.mysqli_error($link).'</b>';            }            $_SESSION['debug']['queries'][$hash]['count'] = 1;            $_SESSION['debug']['queries'][$hash]['query'] = $query;            $_SESSION['debug']['queries'][$hash]['time'] = $time;        }        $trace = array();        foreach (debug_backtrace() as $trace_step) {            $trace[] = PMA_Error::relPath($trace_step['file']) . '#'                . $trace_step['line'] . ': '                . (isset($trace_step['class']) ? $trace_step['class'] : '')                //. (isset($trace_step['object']) ? get_class($trace_step['object']) : '')                . (isset($trace_step['type']) ? $trace_step['type'] : '')                . (isset($trace_step['function']) ? $trace_step['function'] : '')                . '('                . (isset($trace_step['params']) ? implode(', ', $trace_step['params']) : '')                . ')'                ;        }        $_SESSION['debug']['queries'][$hash]['trace'][] = $trace;    }    if ($r != false && PMA_Tracker::isActive() == true ) {        PMA_Tracker::handleQuery($query);    }    return $r;}/** * converts charset of a mysql message, usually coming from mysql_error(), * into PMA charset, usally UTF-8 * uses language to charset mapping from mysql/share/errmsg.txt * and charset names to ISO charset from information_schema.CHARACTER_SETS * * @param string $message the message * * @return  string  $message */function PMA_DBI_convert_message($message){    // latin always last!    $encodings = array(        'japanese'      => 'EUC-JP', //'ujis',        'japanese-sjis' => 'Shift-JIS', //'sjis',        'korean'        => 'EUC-KR', //'euckr',        'russian'       => 'KOI8-R', //'koi8r',        'ukrainian'     => 'KOI8-U', //'koi8u',        'greek'         => 'ISO-8859-7', //'greek',        'serbian'       => 'CP1250', //'cp1250',        'estonian'      => 'ISO-8859-13', //'latin7',        'slovak'        => 'ISO-8859-2', //'latin2',        'czech'         => 'ISO-8859-2', //'latin2',        'hungarian'     => 'ISO-8859-2', //'latin2',        'polish'        => 'ISO-8859-2', //'latin2',        'romanian'      => 'ISO-8859-2', //'latin2',        'spanish'       => 'CP1252', //'latin1',        'swedish'       => 'CP1252', //'latin1',        'italian'       => 'CP1252', //'latin1',        'norwegian-ny'  => 'CP1252', //'latin1',        'norwegian'     => 'CP1252', //'latin1',        'portuguese'    => 'CP1252', //'latin1',        'danish'        => 'CP1252', //'latin1',        'dutch'         => 'CP1252', //'latin1',        'english'       => 'CP1252', //'latin1',        'french'        => 'CP1252', //'latin1',        'german'        => 'CP1252', //'latin1',    );    if ($server_language = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'language\';', 0, 1)) {        $found = array();        if (preg_match('&(?:\\\|\\/)([^\\\\\/]*)(?:\\\|\\/)$&i', $server_language, $found)) {            $server_language = $found[1];        }    }    if (! empty($server_language) && isset($encodings[$server_language])) {        if (function_exists('iconv')) {            if ((@stristr(PHP_OS, 'AIX'))                && (@strcasecmp(ICONV_IMPL, 'unknown') == 0)                && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)            ) {                include_once './libraries/iconv_wrapper.lib.php';                $message = PMA_aix_iconv_wrapper(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            } else {                $message = iconv(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            }        } elseif (function_exists('recode_string')) {            $message = recode_string(                $encodings[$server_language] . '..'  . 'utf-8',                $message            );        } elseif (function_exists('libiconv')) {            $message = libiconv($encodings[$server_language], 'utf-8', $message);        } elseif (function_exists('mb_convert_encoding')) {            // do not try unsupported charsets            if (! in_array($server_language, array('ukrainian', 'greek', 'serbian'))) {                $message = mb_convert_encoding(                    $message,                    'utf-8',                    $encodings[$server_language]                );            }        }    } else {        /**         * @todo lang not found, try all, what TODO ?         */    }    return $message;}/** * returns array with table names for given db * * @param string $database name of database * @param mixed  $link     mysql link resource|object * * @return  array   tables names */function PMA_DBI_get_tables($database, $link = null){    return PMA_DBI_fetch_result(        'SHOW TABLES FROM ' . PMA_backquote($database) . ';',        null,        0,        $link,        PMA_DBI_QUERY_STORE    );}/** * usort comparison callback * * @param string $a first argument to sort * @param string $b second argument to sort * * @return  integer  a value representing whether $a should be before $b in the *                   sorted array or not * * @access  private */function PMA_usort_comparison_callback($a, $b){    if ($GLOBALS['cfg']['NaturalOrder']) {        $sorter = 'strnatcasecmp';    } else {        $sorter = 'strcasecmp';    }    /* No sorting when key is not present */    if (! isset($a[$GLOBALS['callback_sort_by']]) || ! isset($b[$GLOBALS['callback_sort_by']])) {        return 0;    }    // produces f.e.:    // return -1 * strnatcasecmp($a["SCHEMA_TABLES"], $b["SCHEMA_TABLES"])    return ($GLOBALS['callback_sort_order'] == 'ASC' ? 1 : -1) * $sorter($a[$GLOBALS['callback_sort_by']], $b[$GLOBALS['callback_sort_by']]);} // end of the 'PMA_usort_comparison_callback()' function/** * returns array of all tables in given db or dbs * this function expects unquoted names: * RIGHT: my_database * WRONG: `my_database` * WRONG: my\_database * if $tbl_is_group is true, $table is used as filter for table names * if $tbl_is_group is 'comment, $table is used as filter for table comments * * <code> * PMA_DBI_get_tables_full('my_database'); * PMA_DBI_get_tables_full('my_database', 'my_table')); * PMA_DBI_get_tables_full('my_database', 'my_tables_', true)); * PMA_DBI_get_tables_full('my_database', 'my_tables_', 'comment')); * </code> * * @param string          $database     database * @param string|bool     $table        table or false * @param boolean|string  $tbl_is_group $table is a table group * @param mixed           $link         mysql link * @param integer         $limit_offset zero-based offset for the count * @param boolean|integer $limit_count  number of tables to return * @param string          $sort_by      table attribute to sort by * @param string          $sort_order   direction to sort (ASC or DESC) * * @todo    move into PMA_Table * * @return  array           list of tables in given db(s) */function PMA_DBI_get_tables_full($database, $table = false, $tbl_is_group = false, $link = null,     $limit_offset = 0, $limit_count = false, $sort_by = 'Name', $sort_order = 'ASC'){    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxTableList'];    }    // prepare and check parameters    if (! is_array($database)) {        $databases = array($database);    } else {        $databases = $database;    }    $tables = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // get table information from information_schema        if ($table) {            if (true === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_NAME` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } elseif ('comment' === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_COMMENT` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } else {                $sql_where_table = 'AND t.`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\'';            }        } else {            $sql_where_table = '';        }        // for PMA bc:        // `SCHEMA_FIELD_NAME` AS `SHOW_TABLE_STATUS_FIELD_NAME`        //        // on non-Windows servers,        // added BINARY in the WHERE clause to force a case sensitive        // comparison (if we are looking for the db Aa we don't want        // to find the db aa)        $this_databases = array_map('PMA_sqlAddSlashes', $databases);        if (PMA_DRIZZLE) {            $engine_info = PMA_cacheGet('drizzle_engines', true);            $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";            if (isset($engine_info['InnoDB'])                && $engine_info['InnoDB']['module_library'] == 'innobase'            ) {                $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";            }            // data_dictionary.table_cache may not contain any data for some tables, it's just a table cache            // auto_increment == 0 is cast to NULL because currently (2011.03.13 GA) Drizzle doesn't provide correct value            $sql = "                SELECT t.*,                    t.TABLE_SCHEMA        AS `Db`,                    t.TABLE_NAME          AS `Name`,                    t.TABLE_TYPE          AS `TABLE_TYPE`,                    t.ENGINE              AS `Engine`,                    t.ENGINE              AS `Type`,                    t.TABLE_VERSION       AS `Version`,-- VERSION                    t.ROW_FORMAT          AS `Row_format`,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `Rows`,-- TABLE_ROWS,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `TABLE_ROWS`,                    tc.AVG_ROW_LENGTH     AS `Avg_row_length`, -- AVG_ROW_LENGTH                    tc.TABLE_SIZE         AS `Data_length`, -- DATA_LENGTH                    NULL                  AS `Max_data_length`, -- MAX_DATA_LENGTH                    NULL                  AS `Index_length`, -- INDEX_LENGTH                    NULL                  AS `Data_free`, -- DATA_FREE                    nullif(t.AUTO_INCREMENT, 0)                                          AS `Auto_increment`,                    t.TABLE_CREATION_TIME AS `Create_time`, -- CREATE_TIME                    t.TABLE_UPDATE_TIME   AS `Update_time`, -- UPDATE_TIME                    NULL                  AS `Check_time`, -- CHECK_TIME                    t.TABLE_COLLATION     AS `Collation`,                    NULL                  AS `Checksum`, -- CHECKSUM                    NULL                  AS `Create_options`, -- CREATE_OPTIONS                    t.TABLE_COMMENT       AS `Comment`                FROM data_dictionary.TABLES t                    LEFT JOIN data_dictionary.TABLE_CACHE tc ON tc.TABLE_SCHEMA = t.TABLE_SCHEMA AND tc.TABLE_NAME = t.TABLE_NAME                    $stats_join                WHERE t.TABLE_SCHEMA IN ('" . implode("', '", $this_databases) . "')                    " . $sql_where_table;        } else {            $sql = '                SELECT *,                    `TABLE_SCHEMA`       AS `Db`,                    `TABLE_NAME`         AS `Name`,                    `TABLE_TYPE`         AS `TABLE_TYPE`,                    `ENGINE`             AS `Engine`,                    `ENGINE`             AS `Type`,                    `VERSION`            AS `Version`,                    `ROW_FORMAT`         AS `Row_format`,                    `TABLE_ROWS`         AS `Rows`,                    `AVG_ROW_LENGTH`     AS `Avg_row_length`,                    `DATA_LENGTH`        AS `Data_length`,                    `MAX_DATA_LENGTH`    AS `Max_data_length`,                    `INDEX_LENGTH`       AS `Index_length`,                    `DATA_FREE`          AS `Data_free`,                    `AUTO_INCREMENT`     AS `Auto_increment`,                    `CREATE_TIME`        AS `Create_time`,                    `UPDATE_TIME`        AS `Update_time`,                    `CHECK_TIME`         AS `Check_time`,                    `TABLE_COLLATION`    AS `Collation`,                    `CHECKSUM`           AS `Checksum`,                    `CREATE_OPTIONS`     AS `Create_options`,                    `TABLE_COMMENT`      AS `Comment`                FROM `information_schema`.`TABLES` t                WHERE ' . (PMA_IS_WINDOWS ? '' : 'BINARY') . ' `TABLE_SCHEMA` IN (\'' . implode("', '", $this_databases) . '\')                    ' . $sql_where_table;        }        // Sort the tables        $sql .= " ORDER BY $sort_by $sort_order";        if ($limit_count) {            $sql .= ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;        }        $tables = PMA_DBI_fetch_result(            $sql, array('TABLE_SCHEMA', 'TABLE_NAME'), null, $link        );        unset($sql_where_table, $sql);        if (PMA_DRIZZLE) {            // correct I_S and D_D names returned by D_D.TABLES - Drizzle generally uses lower case for them,            // but TABLES returns uppercase            foreach ((array)$database as $db) {                $db_upper = strtoupper($db);                if (!isset($tables[$db]) && isset($tables[$db_upper])) {                    $tables[$db] = $tables[$db_upper];                    unset($tables[$db_upper]);                }            }        }        if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {            // here, the array's first key is by schema name            foreach ($tables as $one_database_name => $one_database_tables) {                uksort($one_database_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $one_database_tables = array_reverse($one_database_tables);                }                $tables[$one_database_name] = $one_database_tables;            }        }    } // end (get information from table schema)    // If permissions are wrong on even one database directory,    // information_schema does not return any table info for any database    // this is why we fall back to SHOW TABLE STATUS even for MySQL >= 50002    if (empty($tables) && !PMA_DRIZZLE) {        foreach ($databases as $each_database) {            if ($table || (true === $tbl_is_group)) {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database)                    .' LIKE \'' . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table, true)) . '%\'';            } else {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database);            }            $each_tables = PMA_DBI_fetch_result($sql, 'Name', null, $link);            // Sort naturally if the config allows it and we're sorting            // the Name column.            if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {                uksort($each_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $each_tables = array_reverse($each_tables);                }            } else {                // Prepare to sort by creating array of the selected sort                // value to pass to array_multisort                // Size = Data_length + Index_length                if ($sort_by == 'Data_length') {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data['Data_length'] + $table_data['Index_length']);                    }                } else {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data[$sort_by]);                    }                }                if ($sort_order == 'DESC') {                    array_multisort($$sort_by, SORT_DESC, $each_tables);                } else {                    array_multisort($$sort_by, SORT_ASC, $each_tables);                }                // cleanup the temporary sort array                unset($$sort_by);            }            if ($limit_count) {                $each_tables = array_slice($each_tables, $limit_offset, $limit_count);            }            foreach ($each_tables as $table_name => $each_table) {                if ('comment' === $tbl_is_group                    && 0 === strpos($each_table['Comment'], $table)                ) {                    // remove table from list                    unset($each_tables[$table_name]);                    continue;                }                if (! isset($each_tables[$table_name]['Type'])                    && isset($each_tables[$table_name]['Engine'])                ) {                    // pma BC, same parts of PMA still uses 'Type'                    $each_tables[$table_name]['Type']                        =& $each_tables[$table_name]['Engine'];                } elseif (! isset($each_tables[$table_name]['Engine'])                        && isset($each_tables[$table_name]['Type'])) {                    // old MySQL reports Type, newer MySQL reports Engine                    $each_tables[$table_name]['Engine']                        =& $each_tables[$table_name]['Type'];                }                // MySQL forward compatibility                // so pma could use this array as if every server is of version >5.0                $each_tables[$table_name]['TABLE_SCHEMA']      = $each_database;                $each_tables[$table_name]['TABLE_NAME']        =& $each_tables[$table_name]['Name'];                $each_tables[$table_name]['ENGINE']            =& $each_tables[$table_name]['Engine'];                $each_tables[$table_name]['VERSION']           =& $each_tables[$table_name]['Version'];                $each_tables[$table_name]['ROW_FORMAT']        =& $each_tables[$table_name]['Row_format'];                $each_tables[$table_name]['TABLE_ROWS']        =& $each_tables[$table_name]['Rows'];                $each_tables[$table_name]['AVG_ROW_LENGTH']    =& $each_tables[$table_name]['Avg_row_length'];                $each_tables[$table_name]['DATA_LENGTH']       =& $each_tables[$table_name]['Data_length'];                $each_tables[$table_name]['MAX_DATA_LENGTH']   =& $each_tables[$table_name]['Max_data_length'];                $each_tables[$table_name]['INDEX_LENGTH']      =& $each_tables[$table_name]['Index_length'];                $each_tables[$table_name]['DATA_FREE']         =& $each_tables[$table_name]['Data_free'];                $each_tables[$table_name]['AUTO_INCREMENT']    =& $each_tables[$table_name]['Auto_increment'];                $each_tables[$table_name]['CREATE_TIME']       =& $each_tables[$table_name]['Create_time'];                $each_tables[$table_name]['UPDATE_TIME']       =& $each_tables[$table_name]['Update_time'];                $each_tables[$table_name]['CHECK_TIME']        =& $each_tables[$table_name]['Check_time'];                $each_tables[$table_name]['TABLE_COLLATION']   =& $each_tables[$table_name]['Collation'];                $each_tables[$table_name]['CHECKSUM']          =& $each_tables[$table_name]['Checksum'];                $each_tables[$table_name]['CREATE_OPTIONS']    =& $each_tables[$table_name]['Create_options'];                $each_tables[$table_name]['TABLE_COMMENT']     =& $each_tables[$table_name]['Comment'];                if (strtoupper($each_tables[$table_name]['Comment']) === 'VIEW'                    && $each_tables[$table_name]['Engine'] == null                ) {                    $each_tables[$table_name]['TABLE_TYPE'] = 'VIEW';                } else {                    /**                     * @todo difference between 'TEMPORARY' and 'BASE TABLE' but how to detect?                     */                    $each_tables[$table_name]['TABLE_TYPE'] = 'BASE TABLE';                }            }            $tables[$each_database] = $each_tables;        }    }    // cache table data    // so PMA_Table does not require to issue SHOW TABLE STATUS again    // Note: I don't see why we would need array_merge_recursive() here,    // as it creates double entries for the same table (for example a double    // entry for Comment when changing the storage engine in Operations)    // Note 2: Instead of array_merge(), simply use the + operator because    //  array_merge() renumbers numeric keys starting with 0, therefore    //  we would lose a db name thats consists only of numbers    foreach ($tables as $one_database => $its_tables) {        if (isset(PMA_Table::$cache[$one_database])) {            PMA_Table::$cache[$one_database] = PMA_Table::$cache[$one_database] + $tables[$one_database];        } else {            PMA_Table::$cache[$one_database] = $tables[$one_database];        }    }    unset($one_database, $its_tables);    if (! is_array($database)) {        if (isset($tables[$database])) {            return $tables[$database];        } elseif (isset($tables[strtolower($database)])) {            // on windows with lower_case_table_names = 1            // MySQL returns            // with SHOW DATABASES or information_schema.SCHEMATA: `Test`            // but information_schema.TABLES gives `test`            // bug #1436171            // http://sf.net/support/tracker.php?aid=1436171            return $tables[strtolower($database)];        } else {            // one database but inexact letter case match            // as Drizzle is always case insensitive, we can safely return the only result            if (PMA_DRIZZLE && count($tables) == 1) {                $keys = array_keys($tables);                if (strlen(array_pop($keys)) == strlen($database)) {                    return array_pop($tables);                }            }            return $tables;        }    } else {        return $tables;    }}/** * returns array with databases containing extended infos about them * * @param string   $database     database * @param boolean  $force_stats  retrieve stats also for MySQL < 5 * @param resource $link         mysql link * @param string   $sort_by      column to order by * @param string   $sort_order   ASC or DESC * @param integer  $limit_offset starting offset for LIMIT * @param bool|int $limit_count  row count for LIMIT or true for $GLOBALS['cfg']['MaxDbList'] * * @todo    move into PMA_List_Database? * * @return array $databases */function PMA_DBI_get_databases_full($database = null, $force_stats = false,    $link = null, $sort_by = 'SCHEMA_NAME', $sort_order = 'ASC',    $limit_offset = 0, $limit_count = false){    $sort_order = strtoupper($sort_order);    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxDbList'];    }    // initialize to avoid errors when there are no databases    $databases = array();    $apply_limit_and_order_manual = true;    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        /**         * if $GLOBALS['cfg']['NaturalOrder'] is enabled, we cannot use LIMIT         * cause MySQL does not support natural ordering, we have to do it afterward         */        $limit = '';        if (!$GLOBALS['cfg']['NaturalOrder']) {            if ($limit_count) {                $limit = ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;            }            $apply_limit_and_order_manual = false;        }        // get table information from information_schema        if ($database) {            $sql_where_schema = 'WHERE `SCHEMA_NAME` LIKE \''                . PMA_sqlAddSlashes($database) . '\'';        } else {            $sql_where_schema = '';        }        if (PMA_DRIZZLE) {            // data_dictionary.table_cache may not contain any data for some            // tables, it's just a table cache            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                // no TABLE_CACHE data, stable results are better than                // constantly changing                $sql .= ',                    COUNT(t.TABLE_SCHEMA) AS SCHEMA_TABLES,                    SUM(stat.NUM_ROWS)    AS SCHEMA_TABLE_ROWS';            }            $sql .= '                   FROM data_dictionary.SCHEMAS s';            if ($force_stats) {                $engine_info = PMA_cacheGet('drizzle_engines', true);                $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";                if (isset($engine_info['InnoDB']) && $engine_info['InnoDB']['module_library'] == 'innobase') {                    $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";                }                $sql .= "                    LEFT JOIN data_dictionary.TABLES t                        ON t.TABLE_SCHEMA = s.SCHEMA_NAME                    $stats_join";            }            $sql .= $sql_where_schema . '                    GROUP BY s.SCHEMA_NAME                    ORDER BY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        } else {            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                $sql .= ',                    COUNT(t.TABLE_SCHEMA)  AS SCHEMA_TABLES,                    SUM(t.TABLE_ROWS)      AS SCHEMA_TABLE_ROWS,                    SUM(t.DATA_LENGTH)     AS SCHEMA_DATA_LENGTH,                    SUM(t.MAX_DATA_LENGTH) AS SCHEMA_MAX_DATA_LENGTH,                    SUM(t.INDEX_LENGTH)    AS SCHEMA_INDEX_LENGTH,                    SUM(t.DATA_LENGTH + t.INDEX_LENGTH)                                           AS SCHEMA_LENGTH,                    SUM(t.DATA_FREE)       AS SCHEMA_DATA_FREE';            }            $sql .= '                   FROM `information_schema`.SCHEMATA s';            if ($force_stats) {                $sql .= '                    LEFT JOIN `information_schema`.TABLES t                        ON BINARY t.TABLE_SCHEMA = BINARY s.SCHEMA_NAME';            }            $sql .= $sql_where_schema . '                    GROUP BY BINARY s.SCHEMA_NAME                    ORDER BY BINARY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        }        $databases = PMA_DBI_fetch_result($sql, 'SCHEMA_NAME', null, $link);        $mysql_error = PMA_DBI_getError($link);        if (! count($databases) && $GLOBALS['errno']) {            PMA_mysqlDie($mysql_error, $sql);        }        // display only databases also in official database list        // f.e. to apply hide_db and only_db        $drops = array_diff(array_keys($databases), (array) $GLOBALS['pma']->databases);        if (count($drops)) {            foreach ($drops as $drop) {                unset($databases[$drop]);            }            unset($drop);        }        unset($sql_where_schema, $sql, $drops);    } else {        foreach ($GLOBALS['pma']->databases as $database_name) {            // MySQL forward compatibility            // so pma could use this array as if every server is of version >5.0            $databases[$database_name]['SCHEMA_NAME']      = $database_name;            if ($force_stats) {                include_once './libraries/mysql_charsets.lib.php';                $databases[$database_name]['DEFAULT_COLLATION_NAME']                    = PMA_getDbCollation($database_name);                // get additional info about tables                $databases[$database_name]['SCHEMA_TABLES']          = 0;                $databases[$database_name]['SCHEMA_TABLE_ROWS']      = 0;                $databases[$database_name]['SCHEMA_DATA_LENGTH']     = 0;                $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH'] = 0;                $databases[$database_name]['SCHEMA_INDEX_LENGTH']    = 0;                $databases[$database_name]['SCHEMA_LENGTH']          = 0;                $databases[$database_name]['SCHEMA_DATA_FREE']       = 0;                $res = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($database_name) . ';');                while ($row = PMA_DBI_fetch_assoc($res)) {                    $databases[$database_name]['SCHEMA_TABLES']++;                    $databases[$database_name]['SCHEMA_TABLE_ROWS']                        += $row['Rows'];                    $databases[$database_name]['SCHEMA_DATA_LENGTH']                        += $row['Data_length'];                    $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH']                        += $row['Max_data_length'];                    $databases[$database_name]['SCHEMA_INDEX_LENGTH']                        += $row['Index_length'];                    // for InnoDB, this does not contain the number of                    // overhead bytes but the total free space                    if ('InnoDB' != $row['Engine']) {                        $databases[$database_name]['SCHEMA_DATA_FREE']                            += $row['Data_free'];                    }                    $databases[$database_name]['SCHEMA_LENGTH']                        += $row['Data_length'] + $row['Index_length'];                }                PMA_DBI_free_result($res);                unset($res);            }        }    }    /**     * apply limit and order manually now     * (caused by older MySQL < 5 or $GLOBALS['cfg']['NaturalOrder'])     */    if ($apply_limit_and_order_manual) {        $GLOBALS['callback_sort_order'] = $sort_order;        $GLOBALS['callback_sort_by'] = $sort_by;        usort($databases, 'PMA_usort_comparison_callback');        unset($GLOBALS['callback_sort_order'], $GLOBALS['callback_sort_by']);        /**         * now apply limit         */        if ($limit_count) {            $databases = array_slice($databases, $limit_offset, $limit_count);        }    }    return $databases;}/** * returns detailed array with all columns for given table in database, * or all tables/databases * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of specific column * @param mixed  $link     mysql link resource * * @return array */function PMA_DBI_get_columns_full($database = null, $table = null,    $column = null, $link = null){    $columns = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        $sql_wheres = array();        $array_keys = array();        // get columns information from information_schema        if (null !== $database) {            $sql_wheres[] = '`TABLE_SCHEMA` = \'' . PMA_sqlAddSlashes($database) . '\' ';        } else {            $array_keys[] = 'TABLE_SCHEMA';        }        if (null !== $table) {            $sql_wheres[] = '`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\' ';        } else {            $array_keys[] = 'TABLE_NAME';        }        if (null !== $column) {            $sql_wheres[] = '`COLUMN_NAME` = \'' . PMA_sqlAddSlashes($column) . '\' ';        } else {            $array_keys[] = 'COLUMN_NAME';        }        // for PMA bc:        // `[SCHEMA_FIELD_NAME]` AS `[SHOW_FULL_COLUMNS_FIELD_NAME]`        if (PMA_DRIZZLE) {            $sql = "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME,                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                collation_name     AS `Collation`,                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`,                NULL               AS `Privileges`,                column_comment     AS `Comment`            FROM data_dictionary.columns";        } else {            $sql = '                 SELECT *,                        `COLUMN_NAME`       AS `Field`,                        `COLUMN_TYPE`       AS `Type`,                        `COLLATION_NAME`    AS `Collation`,                        `IS_NULLABLE`       AS `Null`,                        `COLUMN_KEY`        AS `Key`,                        `COLUMN_DEFAULT`    AS `Default`,                        `EXTRA`             AS `Extra`,                        `PRIVILEGES`        AS `Privileges`,                        `COLUMN_COMMENT`    AS `Comment`                   FROM `information_schema`.`COLUMNS`';        }        if (count($sql_wheres)) {            $sql .= "\n" . ' WHERE ' . implode(' AND ', $sql_wheres);        }        $columns = PMA_DBI_fetch_result($sql, $array_keys, null, $link);        unset($sql_wheres, $sql);    } else {        if (null === $database) {            foreach ($GLOBALS['pma']->databases as $database) {                $columns[$database] = PMA_DBI_get_columns_full(                    $database, null, null, $link                );            }            return $columns;        } elseif (null === $table) {            $tables = PMA_DBI_get_tables($database);            foreach ($tables as $table) {                $columns[$table] = PMA_DBI_get_columns_full(                    $database, $table, null, $link                );            }            return $columns;        }        $sql = 'SHOW FULL COLUMNS FROM '            . PMA_backquote($database) . '.' . PMA_backquote($table);        if (null !== $column) {            $sql .= " LIKE '" . PMA_sqlAddSlashes($column, true) . "'";        }        $columns = PMA_DBI_fetch_result($sql, 'Field', null, $link);    }    $ordinal_position = 1;    foreach ($columns as $column_name => $each_column) {        // MySQL forward compatibility        // so pma could use this array as if every server is of version >5.0        $columns[$column_name]['COLUMN_NAME'] =& $columns[$column_name]['Field'];        $columns[$column_name]['COLUMN_TYPE'] =& $columns[$column_name]['Type'];        $columns[$column_name]['COLLATION_NAME'] =& $columns[$column_name]['Collation'];        $columns[$column_name]['IS_NULLABLE'] =& $columns[$column_name]['Null'];        $columns[$column_name]['COLUMN_KEY'] =& $columns[$column_name]['Key'];        $columns[$column_name]['COLUMN_DEFAULT'] =& $columns[$column_name]['Default'];        $columns[$column_name]['EXTRA'] =& $columns[$column_name]['Extra'];        $columns[$column_name]['PRIVILEGES'] =& $columns[$column_name]['Privileges'];        $columns[$column_name]['COLUMN_COMMENT'] =& $columns[$column_name]['Comment'];        $columns[$column_name]['TABLE_CATALOG'] = null;        $columns[$column_name]['TABLE_SCHEMA'] = $database;        $columns[$column_name]['TABLE_NAME'] = $table;        $columns[$column_name]['ORDINAL_POSITION'] = $ordinal_position;        $columns[$column_name]['DATA_TYPE']            = substr(                $columns[$column_name]['COLUMN_TYPE'],                0,                strpos($columns[$column_name]['COLUMN_TYPE'], '(')            );        /**         * @todo guess CHARACTER_MAXIMUM_LENGTH from COLUMN_TYPE         */        $columns[$column_name]['CHARACTER_MAXIMUM_LENGTH'] = null;        /**         * @todo guess CHARACTER_OCTET_LENGTH from CHARACTER_MAXIMUM_LENGTH         */        $columns[$column_name]['CHARACTER_OCTET_LENGTH'] = null;        $columns[$column_name]['NUMERIC_PRECISION'] = null;        $columns[$column_name]['NUMERIC_SCALE'] = null;        $columns[$column_name]['CHARACTER_SET_NAME']            = substr(                $columns[$column_name]['COLLATION_NAME'],                0,                strpos($columns[$column_name]['COLLATION_NAME'], '_')            );        $ordinal_position++;    }    if (null !== $column) {        reset($columns);        $columns = current($columns);    }    return $columns;}/** * Returns SQL query for fetching columns for a table * * The 'Key' column is not calculated properly, use PMA_DBI_get_columns() to get * correct values. * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * * @see PMA_DBI_get_columns() * * @return  string */function PMA_DBI_get_columns_sql($database, $table, $column = null, $full = false){    if (PMA_DRIZZLE) {        // `Key` column:        // * used in primary key => PRI        // * unique one-column => UNI        // * indexed, one-column or first in multi-column => MUL        // Promotion of UNI to PRI in case no promary index exists is done after query is executed        $sql = "SELECT                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                " . ($full ? "                collation_name     AS `Collation`," : '') . "                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    WHEN is_unique AND NOT is_multi THEN 'UNI'                    WHEN is_indexed AND (NOT is_multi OR is_first_in_multi) THEN 'MUL'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update <> '' THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`                " . ($full ? " ,                NULL               AS `Privileges`,                column_comment     AS `Comment`" : '') . "            FROM data_dictionary.columns            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'                " . (($column != null) ? "                AND column_name = '" . PMA_sqlAddSlashes($column) . "'" : '');        // ORDER BY ordinal_position    } else {        $sql = 'SHOW ' . ($full ? 'FULL' : '') . ' COLUMNS            FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table)            . (($column != null) ? "LIKE '" . PMA_sqlAddSlashes($column, true) . "'" : '');    }    return $sql;}/** * Returns descriptions of columns in given table (all or given by $column) * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * @param mixed   $link     mysql link resource * * @return  false|array   array indexed by column names or, *                        if $column is given, flat array description */function PMA_DBI_get_columns($database, $table, $column = null, $full = false, $link = null){    $sql = PMA_DBI_get_columns_sql($database, $table, $column, $full);    $fields = PMA_DBI_fetch_result($sql, 'Field', null, $link);    if (! is_array($fields) || count($fields) == 0) {        return null;    }    if (PMA_DRIZZLE) {        // fix Key column, it's much simpler in PHP than in SQL        $has_pk = false;        $has_pk_candidates = false;        foreach ($fields as $f) {            if ($f['Key'] == 'PRI') {                $has_pk = true;                break;            } else if ($f['Null'] == 'NO' && ($f['Key'] == 'MUL' || $f['Key'] == 'UNI')) {                $has_pk_candidates = true;            }        }        if (!$has_pk && $has_pk_candidates) {            // check whether we can promote some unique index to PRI            $sql = "                SELECT i.index_name, p.column_name                FROM data_dictionary.indexes i                    JOIN data_dictionary.index_parts p USING (table_schema, table_name)                WHERE i.table_schema = '" . PMA_sqlAddSlashes($database) . "'                    AND i.table_name = '" . PMA_sqlAddSlashes($table) . "'                    AND i.is_unique                        AND NOT i.is_nullable";            $fs = PMA_DBI_fetch_result($sql, 'index_name', null, $link);            $fs = $fs ? array_shift($fs) : array();            foreach ($fs as $f) {                $fields[$f]['Key'] = 'PRI';            }        }    }    return ($column != null) ? array_shift($fields) : $fields;}/*** Returns SQL for fetching information on table indexes (SHOW INDEXES)** @param string $database name of database* @param string $table    name of the table whose indexes are to be retreived* @param string $where    additional conditions for WHERE** @return   array   $indexes*/function PMA_DBI_get_table_indexes_sql($database, $table, $where = null){    if (PMA_DRIZZLE) {        $sql = "SELECT                ip.table_name          AS `Table`,                (NOT ip.is_unique)     AS Non_unique,                ip.index_name          AS Key_name,                ip.sequence_in_index+1 AS Seq_in_index,                ip.column_name         AS Column_name,                (CASE                    WHEN i.index_type = 'BTREE' THEN 'A'                    ELSE NULL END)     AS Collation,                NULL                   AS Cardinality,                compare_length         AS Sub_part,                NULL                   AS Packed,                ip.is_nullable         AS `Null`,                i.index_type           AS Index_type,                NULL                   AS Comment,                i.index_comment        AS Index_comment            FROM data_dictionary.index_parts ip                LEFT JOIN data_dictionary.indexes i USING (table_schema, table_name, index_name)            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'        ";    } else {        $sql = 'SHOW INDEXES FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    }    if ($where) {        $sql .= (PMA_DRIZZLE ? ' AND (' : ' WHERE (') . $where . ')';    }    return $sql;}/*** Returns indexes of a table** @param string $database name of database* @param string $table    name of the table whose indexes are to be retrieved* @param mixed  $link     mysql link resource** @return   array   $indexes*/function PMA_DBI_get_table_indexes($database, $table, $link = null){    $sql = PMA_DBI_get_table_indexes_sql($database, $table);    $indexes = PMA_DBI_fetch_result($sql, null, null, $link);    if (! is_array($indexes) || count($indexes) < 1) {        return array();    }    return $indexes;}/** * returns value of given mysql server variable * * @param string $var  mysql server variable name * @param int    $type PMA_DBI_GETVAR_SESSION|PMA_DBI_GETVAR_GLOBAL * @param mixed  $link mysql link resource|object * * @return  mixed   value for mysql server variable */function PMA_DBI_get_variable($var, $type = PMA_DBI_GETVAR_SESSION, $link = null){    if ($link === null) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    switch ($type) {    case PMA_DBI_GETVAR_SESSION:        $modifier = ' SESSION';        break;    case PMA_DBI_GETVAR_GLOBAL:        $modifier = ' GLOBAL';        break;    default:        $modifier = '';    }    return PMA_DBI_fetch_value(        'SHOW' . $modifier . ' VARIABLES LIKE \'' . $var . '\';', 0, 1, $link    );}/** * Function called just after a connection to the MySQL database server has * been established. It sets the connection collation, and determins the * version of MySQL which is running. * * @param mixed   $link           mysql link resource|object * @param boolean $is_controluser whether link is for control user */function PMA_DBI_postConnect($link, $is_controluser = false){    if (! defined('PMA_MYSQL_INT_VERSION')) {        if (PMA_cacheExists('PMA_MYSQL_INT_VERSION', true)) {            define(                'PMA_MYSQL_INT_VERSION',                PMA_cacheGet('PMA_MYSQL_INT_VERSION', true)            );            define(                'PMA_MYSQL_MAJOR_VERSION',                PMA_cacheGet('PMA_MYSQL_MAJOR_VERSION', true)            );            define(                'PMA_MYSQL_STR_VERSION',                PMA_cacheGet('PMA_MYSQL_STR_VERSION', true)            );            define(                'PMA_MYSQL_VERSION_COMMENT',                PMA_cacheGet('PMA_MYSQL_VERSION_COMMENT', true)            );        } else {            $version = PMA_DBI_fetch_single_row(                'SELECT @@version, @@version_comment',                'ASSOC',                $link            );            if ($version) {                $match = explode('.', $version['@@version']);                define('PMA_MYSQL_MAJOR_VERSION', (int)$match[0]);                define(                    'PMA_MYSQL_INT_VERSION',                    (int) sprintf('%d%02d%02d', $match[0], $match[1], intval($match[2]))                );                define('PMA_MYSQL_STR_VERSION', $version['@@version']);                define('PMA_MYSQL_VERSION_COMMENT', $version['@@version_comment']);            } else {                define('PMA_MYSQL_INT_VERSION', 50015);                define('PMA_MYSQL_MAJOR_VERSION', 5);                define('PMA_MYSQL_STR_VERSION', '5.00.15');                define('PMA_MYSQL_VERSION_COMMENT', '');            }            PMA_cacheSet(                'PMA_MYSQL_INT_VERSION',                PMA_MYSQL_INT_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_MAJOR_VERSION',                PMA_MYSQL_MAJOR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_STR_VERSION',                PMA_MYSQL_STR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_VERSION_COMMENT',                PMA_MYSQL_VERSION_COMMENT,                true            );        }        // detect Drizzle by version number:        // <year>.<month>.<build number>(.<patch rev)        define('PMA_DRIZZLE', PMA_MYSQL_MAJOR_VERSION >= 2009);    }    // Skip charsets for Drizzle    if (!PMA_DRIZZLE) {        if (! empty($GLOBALS['collation_connection'])) {            PMA_DBI_query("SET CHARACTER SET 'utf8';", $link, PMA_DBI_QUERY_STORE);            PMA_DBI_query(                "SET collation_connection = '" . PMA_sqlAddSlashes($GLOBALS['collation_connection']) . "';",                $link,                PMA_DBI_QUERY_STORE            );        } else {            PMA_DBI_query(                "SET NAMES 'utf8' COLLATE 'utf8_general_ci';",                $link,                PMA_DBI_QUERY_STORE            );        }    }    // Cache plugin list for Drizzle    if (PMA_DRIZZLE && !PMA_cacheExists('drizzle_engines', true)) {        $sql = "SELECT p.plugin_name, m.module_library            FROM data_dictionary.plugins p                JOIN data_dictionary.modules m USING (module_name)            WHERE p.plugin_type = 'StorageEngine'                AND p.plugin_name NOT IN ('FunctionEngine', 'schema')                AND p.is_active = 'YES'";        $engines = PMA_DBI_fetch_result($sql, 'plugin_name', null, $link);        PMA_cacheSet('drizzle_engines', $engines, true);    }}/** * returns a single value from the given result or query, * if the query or the result has more than one row or field * the first field of the first row is returned * * <code> * $sql = 'SELECT `name` FROM `user` WHERE `id` = 123'; * $user_name = PMA_DBI_fetch_value($sql); * // produces * // $user_name = 'John Doe' * </code> * * @param string|mysql_result $result     query or mysql result * @param integer             $row_number row to fetch the value from, *                                        starting at 0, with 0 beeing default * @param integer|string      $field      field to fetch the value from, *                                        starting at 0, with 0 beeing default * @param resource            $link       mysql link * * @return mixed value of first field in first row from result *               or false if not found */function PMA_DBI_fetch_value($result, $row_number = 0, $field = 0, $link = null){    $value = false;    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return false if result is empty or false    // or requested row is larger than rows in result    if (PMA_DBI_num_rows($result) < ($row_number + 1)) {        return $value;    }    // if $field is an integer use non associative mysql fetch function    if (is_int($field)) {        $fetch_function = 'PMA_DBI_fetch_row';    } else {        $fetch_function = 'PMA_DBI_fetch_assoc';    }    // get requested row    for ($i = 0; $i <= $row_number; $i++) {        $row = $fetch_function($result);    }    PMA_DBI_free_result($result);    // return requested field    if (isset($row[$field])) {        $value = $row[$field];    }    unset($row);    return $value;}/** * returns only the first row from the result * * <code> * $sql = 'SELECT * FROM `user` WHERE `id` = 123'; * $user = PMA_DBI_fetch_single_row($sql); * // produces * // $user = array('id' => 123, 'name' => 'John Doe') * </code> * * @param string|mysql_result $result query or mysql result * @param string              $type   NUM|ASSOC|BOTH *                                    returned array should either numeric *                                    associativ or booth * @param resource            $link   mysql link * * @return array|boolean first row from result *                       or false if result is empty */function PMA_DBI_fetch_single_row($result, $type = 'ASSOC', $link = null){    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return null if result is empty or false    if (! PMA_DBI_num_rows($result)) {        return false;    }    switch ($type) {    case 'NUM' :        $fetch_function = 'PMA_DBI_fetch_row';        break;    case 'ASSOC' :        $fetch_function = 'PMA_DBI_fetch_assoc';        break;    case 'BOTH' :    default :        $fetch_function = 'PMA_DBI_fetch_array';        break;    }    $row = $fetch_function($result);    PMA_DBI_free_result($result);    return $row;}/** * returns all rows in the resultset in one array * * <code> * $sql = 'SELECT * FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id'); * // produces * // $users['123'] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 0); * // produces * // $users['123'] = array(0 => 123, 1 => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id', 'name'); * // or * $users = PMA_DBI_fetch_result($sql, 0, 1); * // produces * // $users['123'] = 'John Doe' * * $sql = 'SELECT `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', null), 'name'); * // produces * // $users['admin'][] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', 'name'), 'id'); * // produces * // $users['admin']['John Doe'] = '123' * </code> * * @param string|mysql_result $result query or mysql result * @param string|integer      $key    field-name or offset *                                    used as key for array * @param string|integer      $value  value-name or offset *                                    used as value for array * @param resource            $link   mysql link * @param mixed               $options * * @return array resultrows or values indexed by $key */function PMA_DBI_fetch_result($result, $key = null, $value = null,    $link = null, $options = 0){    $resultrows = array();    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, $options, false);    }    // return empty array if result is empty or false    if (! $result) {        return $resultrows;    }    $fetch_function = 'PMA_DBI_fetch_assoc';    // no nested array if only one field is in result    if (null === $key && 1 === PMA_DBI_num_fields($result)) {        $value = 0;        $fetch_function = 'PMA_DBI_fetch_row';    }    // if $key is an integer use non associative mysql fetch function    if (is_int($key)) {        $fetch_function = 'PMA_DBI_fetch_row';    }    if (null === $key && null === $value) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row;        }    } elseif (null === $key) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row[$value];        }    } elseif (null === $value) {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row;            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row;            }        }    } else {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row[$value];            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row[$value];            }        }    }    PMA_DBI_free_result($result);    return $resultrows;}/** * Get supported SQL compatibility modes * * @return array supported SQL compatibility modes */function PMA_DBI_getCompatibilities(){    // Drizzle doesn't support compatibility modes    if (PMA_DRIZZLE) {        return array();    }    $compats = array('NONE');    $compats[] = 'ANSI';    $compats[] = 'DB2';    $compats[] = 'MAXDB';    $compats[] = 'MYSQL323';    $compats[] = 'MYSQL40';    $compats[] = 'MSSQL';    $compats[] = 'ORACLE';    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //$compats[] = 'POSTGRESQL';    $compats[] = 'TRADITIONAL';    return $compats;}/** * returns warnings for last query * * @param resource $link mysql link resource * * @return array warnings */function PMA_DBI_get_warnings($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return array();        }    }    return PMA_DBI_fetch_result('SHOW WARNINGS', null, null, $link);}/** * returns true (int > 0) if current user is superuser * otherwise 0 * * @return bool Whether use is a superuser */function PMA_isSuperuser(){    if (PMA_cacheExists('is_superuser', true)) {        return PMA_cacheGet('is_superuser', true);    }    // when connection failed we don't have a $userlink    if (isset($GLOBALS['userlink'])) {        if (PMA_DRIZZLE) {            // Drizzle has no authorization by default, so when no plugin is            // enabled everyone is a superuser            // Known authorization libraries: regex_policy, simple_user_policy            // Plugins limit object visibility (dbs, tables, processes), we can            // safely assume we always deal with superuser            $r = true;        } else {            // check access to mysql.user table            $r = (bool) PMA_DBI_try_query(                'SELECT COUNT(*) FROM mysql.user',                $GLOBALS['userlink'],                PMA_DBI_QUERY_STORE            );        }        PMA_cacheSet('is_superuser', $r, true);    } else {        PMA_cacheSet('is_superuser', false, true);    }    return PMA_cacheGet('is_superuser', true);}/** * returns an array of PROCEDURE or FUNCTION names for a db * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION * @param resource $link  mysql link * * @returnarray the procedure names or function names */function PMA_DBI_get_procedures_or_functions($db, $which, $link = null){    if (PMA_DRIZZLE) {        // Drizzle doesn't support functions and procedures        return array();    }    $shows = PMA_DBI_fetch_result('SHOW ' . $which . ' STATUS;', null, null, $link);    $result = array();    foreach ($shows as $one_show) {        if ($one_show['Db'] == $db && $one_show['Type'] == $which) {            $result[] = $one_show['Name'];        }    }    return($result);}/** * returns the definition of a specific PROCEDURE, FUNCTION, EVENT or VIEW * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION | EVENT | VIEW * @param string   $name  the procedure|function|event|view name * @param resource $link  mysql link * * @return string the definition */function PMA_DBI_get_definition($db, $which, $name, $link = null){    $returned_field = array(        'PROCEDURE' => 'Create Procedure',        'FUNCTION'  => 'Create Function',        'EVENT'     => 'Create Event',        'VIEW'      => 'Create View'    );    $query = 'SHOW CREATE ' . $which . ' '        . PMA_backquote($db) . '.' . PMA_backquote($name);    return(PMA_DBI_fetch_value($query, 0, $returned_field[$which]));}/** * returns details about the TRIGGERs for a specific table or database * * @param string $db        db name * @param string $table     table name * @param string $delimiter the delimiter to use (may be empty) * * @return array information about triggers (may be empty) */function PMA_DBI_get_triggers($db, $table = '', $delimiter = '//'){    if (PMA_DRIZZLE) {        // Drizzle doesn't support triggers        return array();    }    $result = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // Note: in http://dev.mysql.com/doc/refman/5.0/en/faqs-triggers.html        // their example uses WHERE TRIGGER_SCHEMA='dbname' so let's use this        // instead of WHERE EVENT_OBJECT_SCHEMA='dbname'        $query = 'SELECT TRIGGER_SCHEMA, TRIGGER_NAME, EVENT_MANIPULATION'            . ', EVENT_OBJECT_TABLE, ACTION_TIMING, ACTION_STATEMENT'            . ', EVENT_OBJECT_SCHEMA, EVENT_OBJECT_TABLE, DEFINER'            . ' FROM information_schema.TRIGGERS'            . ' WHERE TRIGGER_SCHEMA= \'' . PMA_sqlAddSlashes($db) . '\'';        if (! empty($table)) {            $query .= " AND EVENT_OBJECT_TABLE = '" . PMA_sqlAddSlashes($table) . "';";        }    } else {        $query = "SHOW TRIGGERS FROM " . PMA_backquote($db);        if (! empty($table)) {            $query .= " LIKE '" . PMA_sqlAddSlashes($table, true) . "';";        }    }    if ($triggers = PMA_DBI_fetch_result($query)) {        foreach ($triggers as $trigger) {            if ($GLOBALS['cfg']['Server']['DisableIS']) {                $trigger['TRIGGER_NAME'] = $trigger['Trigger'];                $trigger['ACTION_TIMING'] = $trigger['Timing'];                $trigger['EVENT_MANIPULATION'] = $trigger['Event'];                $trigger['EVENT_OBJECT_TABLE'] = $trigger['Table'];                $trigger['ACTION_STATEMENT'] = $trigger['Statement'];                $trigger['DEFINER'] = $trigger['Definer'];            }            $one_result = array();            $one_result['name'] = $trigger['TRIGGER_NAME'];            $one_result['table'] = $trigger['EVENT_OBJECT_TABLE'];            $one_result['action_timing'] = $trigger['ACTION_TIMING'];            $one_result['event_manipulation'] = $trigger['EVENT_MANIPULATION'];            $one_result['definition'] = $trigger['ACTION_STATEMENT'];            $one_result['definer'] = $trigger['DEFINER'];            // do not prepend the schema name; this way, importing the            // definition into another schema will work            $one_result['full_trigger_name'] = PMA_backquote($trigger['TRIGGER_NAME']);            $one_result['drop'] = 'DROP TRIGGER IF EXISTS '                . $one_result['full_trigger_name'];            $one_result['create'] = 'CREATE TRIGGER '                . $one_result['full_trigger_name'] . ' '                . $trigger['ACTION_TIMING']. ' '                . $trigger['EVENT_MANIPULATION']                . ' ON ' . PMA_backquote($trigger['EVENT_OBJECT_TABLE'])                . "\n" . ' FOR EACH ROW '                . $trigger['ACTION_STATEMENT'] . "\n" . $delimiter . "\n";            $result[] = $one_result;        }    }    // Sort results by name    $name = array();    foreach ($result as $key => $value) {        $name[] = $value['name'];    }    array_multisort($name, SORT_ASC, $result);    return($result);}/** * Formats database error message in a friendly way. * This is needed because some errors messages cannot * be obtained by mysql_error(). * * @param int    $error_number  Error code * @param string $error_message Error message as returned by server * * @return string HML text with error details */function PMA_DBI_formatError($error_number, $error_message){    if (! empty($error_message)) {        $error_message = PMA_DBI_convert_message($error_message);    }    $error_message = htmlspecialchars($error_message);    $error = '#' . ((string) $error_number);    if ($error_number == 2002) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding (or the local server\'s socket is not correctly configured).');    } elseif ($error_number == 2003) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding.');    } elseif ($error_number == 1005) {        if (strpos($error_message, 'errno: 13') !== false) {            $error .= ' - ' . $error_message;            $error .= '<br />' . __('Please check privileges of directory containing database.');        } else {            /* InnoDB contraints, see             * http://dev.mysql.com/doc/refman/5.0/en/innodb-foreign-key-constraints.html             */            $error .= ' - ' . $error_message .                ' (<a href="server_engines.php' .                PMA_generate_common_url(array('engine' => 'InnoDB', 'page' => 'Status')) .                '">' . __('Details...') . '</a>)';        }    } else {        $error .= ' - ' . $error_message;    }    return $error;}/** * Checks whether given schema is a system schema: information_schema * (MySQL and Drizzle) or data_dictionary (Drizzle) * * @param string $schema_name           Name of schema (database) to test * @param bool   $test_for_mysql_schema Whether 'mysql' schema should *                                      be treated the same as IS and DD * * @return bool */function PMA_is_system_schema($schema_name, $test_for_mysql_schema = false){    return strtolower($schema_name) == 'information_schema'            || (!PMA_DRIZZLE && strtolower($schema_name) == 'performance_schema')            || (PMA_DRIZZLE && strtolower($schema_name) == 'data_dictionary')            || ($test_for_mysql_schema && !PMA_DRIZZLE && $schema_name == 'mysql');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Configuration handling. * * @package PhpMyAdmin *//** * Load vendor configuration. */require './libraries/vendor_config.php';/** * Configuration class * * @package PhpMyAdmin */class PMA_Config{    /**     * @var string  default config source     */    var $default_source = './libraries/config.default.php';    /**     * @var array   default configuration settings     */    var $default = array();    /**     * @var array   configuration settings     */    var $settings = array();    /**     * @var string  config source     */    var $source = '';    /**     * @var int     source modification time     */    var $source_mtime = 0;    var $default_source_mtime = 0;    var $set_mtime = 0;    /**     * @var boolean     */    var $error_config_file = false;    /**     * @var boolean     */    var $error_config_default_file = false;    /**     * @var boolean     */    var $error_pma_uri = false;    /**     * @var array     */    var $default_server = array();    /**     * @var boolean whether init is done or not     * set this to false to force some initial checks     * like checking for required functions     */    var $done = false;    /**     * constructor     *     * @param string $source source to read config from     */    function __construct($source = null)    {        $this->settings = array();        // functions need to refresh in case of config file changed goes in        // PMA_Config::load()        $this->load($source);        // other settings, independent from config file, comes in        $this->checkSystem();        $this->checkIsHttps();    }    /**     * sets system and application settings     *     * @return nothing     */    function checkSystem()    {        $this->set('PMA_VERSION', '3.5.0');        /**         * @deprecated         */        $this->set('PMA_THEME_VERSION', 2);        /**         * @deprecated         */        $this->set('PMA_THEME_GENERATION', 2);        $this->checkPhpVersion();        $this->checkWebServerOs();        $this->checkWebServer();        $this->checkGd2();        $this->checkClient();        $this->checkUpload();        $this->checkUploadSize();        $this->checkOutputCompression();    }    /**     * whether to use gzip output compression or not     *     * @return nothing     */    function checkOutputCompression()    {        // If zlib output compression is set in the php configuration file, no        // output buffering should be run        if (@ini_get('zlib.output_compression')) {            $this->set('OBGzip', false);        }        // disable output-buffering (if set to 'auto') for IE6, else enable it.        if (strtolower($this->get('OBGzip')) == 'auto') {            if ($this->get('PMA_USR_BROWSER_AGENT') == 'IE'                && $this->get('PMA_USR_BROWSER_VER') >= 6                && $this->get('PMA_USR_BROWSER_VER') < 7            ) {                $this->set('OBGzip', false);            } else {                $this->set('OBGzip', true);            }        }    }    /**     * Determines platform (OS), browser and version of the user     * Based on a phpBuilder article:     *     * @see http://www.phpbuilder.net/columns/tim20000821.php     *     * @return nothing     */    function checkClient()    {        if (PMA_getenv('HTTP_USER_AGENT')) {            $HTTP_USER_AGENT = PMA_getenv('HTTP_USER_AGENT');        } elseif (! isset($HTTP_USER_AGENT)) {            $HTTP_USER_AGENT = '';        }        // 1. Platform        if (strstr($HTTP_USER_AGENT, 'Win')) {            $this->set('PMA_USR_OS', 'Win');        } elseif (strstr($HTTP_USER_AGENT, 'Mac')) {            $this->set('PMA_USR_OS', 'Mac');        } elseif (strstr($HTTP_USER_AGENT, 'Linux')) {            $this->set('PMA_USR_OS', 'Linux');        } elseif (strstr($HTTP_USER_AGENT, 'Unix')) {            $this->set('PMA_USR_OS', 'Unix');        } elseif (strstr($HTTP_USER_AGENT, 'OS/2')) {            $this->set('PMA_USR_OS', 'OS/2');        } else {            $this->set('PMA_USR_OS', 'Other');        }        // 2. browser and version        // (must check everything else before Mozilla)        if (preg_match(            '@Opera(/| )([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'OPERA');        } elseif (preg_match(            '@MSIE ([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'IE');        } elseif (preg_match(            '@OmniWeb/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'OMNIWEB');        // Konqueror 2.2.2 says Konqueror/2.2.2        // Konqueror 3.0.3 says Konqueror/3        } elseif (preg_match(            '@(Konqueror/)(.*)(;)@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'KONQUEROR');        } elseif (preg_match(            '@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version)            && preg_match('@Safari/([0-9]*)@', $HTTP_USER_AGENT, $log_version2)        ) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1] . '.' . $log_version2[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'SAFARI');        } elseif (preg_match('@rv:1.9(.*)Gecko@', $HTTP_USER_AGENT)) {            $this->set('PMA_USR_BROWSER_VER', '1.9');            $this->set('PMA_USR_BROWSER_AGENT', 'GECKO');        } elseif (            preg_match('@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'MOZILLA');        } else {            $this->set('PMA_USR_BROWSER_VER', 0);            $this->set('PMA_USR_BROWSER_AGENT', 'OTHER');        }    }    /**     * Whether GD2 is present     *     * @return nothing     */    function checkGd2()    {        if ($this->get('GD2Available') == 'yes') {            $this->set('PMA_IS_GD2', 1);        } elseif ($this->get('GD2Available') == 'no') {            $this->set('PMA_IS_GD2', 0);        } else {            if (!@function_exists('imagecreatetruecolor')) {                $this->set('PMA_IS_GD2', 0);            } else {                if (@function_exists('gd_info')) {                    $gd_nfo = gd_info();                    if (strstr($gd_nfo["GD Version"], '2.')) {                        $this->set('PMA_IS_GD2', 1);                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                } else {                    /* We must do hard way... but almost no chance to execute this */                    ob_start();                    phpinfo(INFO_MODULES); /* Only modules */                    $a = strip_tags(ob_get_contents());                    ob_end_clean();                    /* Get GD version string from phpinfo output */                    if (preg_match('@GD Version[[:space:]]*\(.*\)@', $a, $v)) {                        if (strstr($v, '2.')) {                            $this->set('PMA_IS_GD2', 1);                        } else {                            $this->set('PMA_IS_GD2', 0);                        }                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                }            }        }    }    /**     * Whether the Web server php is running on is IIS     *     * @return nothing     */    function checkWebServer()    {        if (PMA_getenv('SERVER_SOFTWARE')            // some versions return Microsoft-IIS, some Microsoft/IIS            // we could use a preg_match() but it's slower            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'Microsoft')            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'IIS')        ) {            $this->set('PMA_IS_IIS', 1);        } else {            $this->set('PMA_IS_IIS', 0);        }    }    /**     * Whether the os php is running on is windows or not     *     * @return nothing     */    function checkWebServerOs()    {        // Default to Unix or Equiv        $this->set('PMA_IS_WINDOWS', 0);        // If PHP_OS is defined then continue        if (defined('PHP_OS')) {            if (stristr(PHP_OS, 'win')) {                // Is it some version of Windows                $this->set('PMA_IS_WINDOWS', 1);            } elseif (stristr(PHP_OS, 'OS/2')) {                // Is it OS/2 (No file permissions like Windows)                $this->set('PMA_IS_WINDOWS', 1);            }        }    }    /**     * detects PHP version     *     * @return nothing     */    function checkPhpVersion()    {        $match = array();        if (! preg_match(            '@([0-9]{1,2}).([0-9]{1,2}).([0-9]{1,2})@',            phpversion(),            $match        )) {            preg_match(                '@([0-9]{1,2}).([0-9]{1,2})@',                phpversion(),                $match            );        }        if (isset($match) && ! empty($match[1])) {            if (! isset($match[2])) {                $match[2] = 0;            }            if (! isset($match[3])) {                $match[3] = 0;            }            $this->set(                'PMA_PHP_INT_VERSION',                (int) sprintf('%d%02d%02d', $match[1], $match[2], $match[3])            );        } else {            $this->set('PMA_PHP_INT_VERSION', 0);        }        $this->set('PMA_PHP_STR_VERSION', phpversion());    }    /**     * loads default values from default source     *     * @return  boolean     success     */    function loadDefaults()    {        $cfg = array();        if (! file_exists($this->default_source)) {            $this->error_config_default_file = true;            return false;        }        include $this->default_source;        $this->default_source_mtime = filemtime($this->default_source);        $this->default_server = $cfg['Servers'][1];        unset($cfg['Servers']);        $this->default = $cfg;        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->error_config_default_file = false;        return true;    }    /**     * loads configuration from $source, usally the config file     * should be called on object creation     *     * @param string $source config file     *     * @return bool     */    function load($source = null)    {        $this->loadDefaults();        if (null !== $source) {            $this->setSource($source);        }        if (! $this->checkConfigSource()) {            return false;        }        $cfg = array();        /**         * Parses the configuration file, the eval is used here to avoid         * problems with trailing whitespace, what is often a problem.         */        $old_error_reporting = error_reporting(0);        $eval_result = eval('?' . '>' . trim(file_get_contents($this->getSource())));        error_reporting($old_error_reporting);        if ($eval_result === false) {            $this->error_config_file = true;        } else {            $this->error_config_file = false;            $this->source_mtime = filemtime($this->getSource());        }        /**         * Backward compatibility code         */        if (!empty($cfg['DefaultTabTable'])) {            $cfg['DefaultTabTable'] = str_replace(                '_properties',                '',                str_replace(                    'tbl_properties.php',                    'tbl_sql.php',                    $cfg['DefaultTabTable']                )            );        }        if (!empty($cfg['DefaultTabDatabase'])) {            $cfg['DefaultTabDatabase'] = str_replace(                '_details',                '',                str_replace(                    'db_details.php',                    'db_sql.php',                    $cfg['DefaultTabDatabase']                )            );        }        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->checkPmaAbsoluteUri();        $this->checkFontsize();        $this->checkPermissions();        // Handling of the collation must be done after merging of $cfg        // (from config.inc.php) so that $cfg['DefaultConnectionCollation']        // can have an effect. Note that the presence of collation        // information in a cookie has priority over what is defined        // in the default or user's config files.        /**         * @todo check validity of $_COOKIE['pma_collation_connection']         */        if (! empty($_COOKIE['pma_collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_COOKIE['pma_collation_connection'])            );        } else {            $this->set(                'collation_connection',                $this->get('DefaultConnectionCollation')            );        }        // Now, a collation information could come from REQUEST        // (an example of this: the collation selector in main.php)        // so the following handles the setting of collation_connection        // and later, in common.inc.php, the cookie will be set        // according to this.        $this->checkCollationConnection();        return true;    }    /**     * Loads user preferences and merges them with current config     * must be called after control connection has been estabilished     *     * @return boolean     */    function loadUserPreferences()    {        // index.php should load these settings, so that phpmyadmin.css.php        // will have everything avaiable in session cache        $server = isset($GLOBALS['server'])            ? $GLOBALS['server']            : (!empty($GLOBALS['cfg']['ServerDefault'])                ? $GLOBALS['cfg']['ServerDefault']                : 0);        $cache_key = 'server_' . $server;        if ($server > 0 && !defined('PMA_MINIMUM_COMMON')) {            $config_mtime = max($this->default_source_mtime, $this->source_mtime);            // cache user preferences, use database only when needed            if (! isset($_SESSION['cache'][$cache_key]['userprefs'])                || $_SESSION['cache'][$cache_key]['config_mtime'] < $config_mtime            ) {                // load required libraries                include_once './libraries/user_preferences.lib.php';                $prefs = PMA_load_userprefs();                $_SESSION['cache'][$cache_key]['userprefs']                    = PMA_apply_userprefs($prefs['config_data']);                $_SESSION['cache'][$cache_key]['userprefs_mtime'] = $prefs['mtime'];                $_SESSION['cache'][$cache_key]['userprefs_type'] = $prefs['type'];                $_SESSION['cache'][$cache_key]['config_mtime'] = $config_mtime;            }        } elseif ($server == 0            || ! isset($_SESSION['cache'][$cache_key]['userprefs'])        ) {            $this->set('user_preferences', false);            return;        }        $config_data = $_SESSION['cache'][$cache_key]['userprefs'];        // type is 'db' or 'session'        $this->set(            'user_preferences',            $_SESSION['cache'][$cache_key]['userprefs_type']        );        $this->set(            'user_preferences_mtime',            $_SESSION['cache'][$cache_key]['userprefs_mtime']        );        // backup some settings        $org_fontsize = $this->settings['fontsize'];        // load config array        $this->settings = PMA_array_merge_recursive($this->settings, $config_data);        $GLOBALS['cfg'] = PMA_array_merge_recursive($GLOBALS['cfg'], $config_data);        if (defined('PMA_MINIMUM_COMMON')) {            return;        }        // settings below start really working on next page load, but        // changes are made only in index.php so everything is set when        // in frames        // save theme        $tmanager = $_SESSION['PMA_Theme_Manager'];        if ($tmanager->getThemeCookie() || isset($_REQUEST['set_theme'])) {            if ((! isset($config_data['ThemeDefault'])                && $tmanager->theme->getId() != 'original')                || isset($config_data['ThemeDefault'])                && $config_data['ThemeDefault'] != $tmanager->theme->getId()            ) {                // new theme was set in common.inc.php                $this->setUserValue(                    null,                    'ThemeDefault',                    $tmanager->theme->getId(),                    'original'                );            }        } else {            // no cookie - read default from settings            if ($this->settings['ThemeDefault'] != $tmanager->theme->getId()                && $tmanager->checkTheme($this->settings['ThemeDefault'])            ) {                $tmanager->setActiveTheme($this->settings['ThemeDefault']);                $tmanager->setThemeCookie();            }        }        // save font size        if ((! isset($config_data['fontsize'])            && $org_fontsize != '82%')            || isset($config_data['fontsize'])            && $org_fontsize != $config_data['fontsize']        ) {            $this->setUserValue(null, 'fontsize', $org_fontsize, '82%');        }        // save language        if (isset($_COOKIE['pma_lang']) || isset($_POST['lang'])) {            if ((! isset($config_data['lang'])                && $GLOBALS['lang'] != 'en')                || isset($config_data['lang'])                && $GLOBALS['lang'] != $config_data['lang']            ) {                $this->setUserValue(null, 'lang', $GLOBALS['lang'], 'en');            }        } else {            // read language from settings            if (isset($config_data['lang']) && PMA_langSet($config_data['lang'])) {                $this->setCookie('pma_lang', $GLOBALS['lang']);            }        }        // save connection collation        if (isset($_COOKIE['pma_collation_connection'])            || isset($_POST['collation_connection'])        ) {            if ((! isset($config_data['collation_connection'])                && $GLOBALS['collation_connection'] != 'utf8_general_ci')                || isset($config_data['collation_connection'])                && $GLOBALS['collation_connection']                    != $config_data['collation_connection']            ) {                $this->setUserValue(                    null,                    'collation_connection',                    $GLOBALS['collation_connection'],                    'utf8_general_ci'                );            }        } else {            // read collation from settings            if (isset($config_data['collation_connection'])) {                $GLOBALS['collation_connection']                    = $config_data['collation_connection'];                $this->setCookie(                    'pma_collation_connection',                    $GLOBALS['collation_connection']                );            }        }    }    /**     * Sets config value which is stored in user preferences (if available)     * or in a cookie.     *     * If user preferences are not yet initialized, option is applied to     * global config and added to a update queue, which is processed     * by {@link loadUserPreferences()}     *     * @param string $cookie_name   can be null     * @param string $cfg_path     * @param mixed  $new_cfg_value new value     * @param mixed  $default_value default value     *     * @return nothing     */    function setUserValue($cookie_name, $cfg_path, $new_cfg_value, $default_value = null)    {        // use permanent user preferences if possible        $prefs_type = $this->get('user_preferences');        if ($prefs_type) {            include_once './libraries/user_preferences.lib.php';            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->default);            }            PMA_persist_option($cfg_path, $new_cfg_value, $default_value);        }        if ($prefs_type != 'db' && $cookie_name) {            // fall back to cookies            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->settings);            }            $this->setCookie($cookie_name, $new_cfg_value, $default_value);        }        PMA_array_write($cfg_path, $GLOBALS['cfg'], $new_cfg_value);        PMA_array_write($cfg_path, $this->settings, $new_cfg_value);    }    /**     * Reads value stored by {@link setUserValue()}     *     * @param string $cookie_name cookie name     * @param mixed  $cfg_value   config value     *     * @return mixed     */    function getUserValue($cookie_name, $cfg_value)    {        $cookie_exists = isset($_COOKIE) && !empty($_COOKIE[$cookie_name]);        $prefs_type = $this->get('user_preferences');        if ($prefs_type == 'db') {            // permanent user preferences value exists, remove cookie            if ($cookie_exists) {                $this->removeCookie($cookie_name);            }        } else if ($cookie_exists) {            return $_COOKIE[$cookie_name];        }        // return value from $cfg array        return $cfg_value;    }    /**     * set source     *     * @param string  $source     *     * @return nothing     */    function setSource($source)    {        $this->source = trim($source);    }    /**     * checks if the config folder still exists and terminates app if true     *     * @return nothing     */    function checkConfigFolder()    {        // Refuse to work while there still might be some world writable dir:        if (is_dir('./config')) {            die(__('Remove "./config" directory before using phpMyAdmin!'));        }    }    /**     * check config source     *     * @return  boolean whether source is valid or not     */    function checkConfigSource()    {        if (! $this->getSource()) {            // no configuration file set at all            return false;        }        if (! file_exists($this->getSource())) {            $this->source_mtime = 0;            return false;        }        if (! is_readable($this->getSource())) {            $this->source_mtime = 0;            die(                sprintf(__('Existing configuration file (%s) is not readable.'),                    $this->getSource()                )            );        }        return true;    }    /**     * verifies the permissions on config file (if asked by configuration)     * (must be called after config.inc.php has been merged)     *     * @return nothing     */    function checkPermissions()    {        // Check for permissions (on platforms that support it):        if ($this->get('CheckConfigurationPermissions')) {            $perms = @fileperms($this->getSource());            if (!($perms === false) && ($perms & 2)) {                // This check is normally done after loading configuration                $this->checkWebServerOs();                if ($this->get('PMA_IS_WINDOWS') == 0) {                    $this->source_mtime = 0;                    die(__('Wrong permissions on configuration file, should not be world writable!'));                }            }        }    }    /**     * returns specific config setting     *     * @param string $setting config setting     *     * @return mixed value     */    function get($setting)    {        if (isset($this->settings[$setting])) {            return $this->settings[$setting];        }        return null;    }    /**     * sets configuration variable     *     * @param string $setting configuration option     * @param string $value   new value for configuration option     *     * @return nothing     */    function set($setting, $value)    {        if (! isset($this->settings[$setting])            || $this->settings[$setting] != $value        ) {            $this->settings[$setting] = $value;            $this->set_mtime = time();        }    }    /**     * returns source for current config     *     * @return  string  config source     */    function getSource()    {        return $this->source;    }    /**     * returns a unique value to force a CSS reload if either the config     * or the theme changes     * must also check the pma_fontsize cookie in case there is no     * config file     *     * @return int Summary of unix timestamps and fontsize,     * to be unique on theme parameters change     */    function getThemeUniqueValue()    {        if (null !== $this->get('fontsize')) {            $fontsize = intval($this->get('fontsize'));        } elseif (isset($_COOKIE['pma_fontsize'])) {            $fontsize = intval($_COOKIE['pma_fontsize']);        } else {            $fontsize = 0;        }        return (            $fontsize +            $this->source_mtime +            $this->default_source_mtime +            $this->get('user_preferences_mtime') +            $_SESSION['PMA_Theme']->mtime_info +            $_SESSION['PMA_Theme']->filesize_info);    }    /**     * $cfg['PmaAbsoluteUri'] is a required directive else cookies won't be     * set properly and, depending on browsers, inserting or updating a     * record might fail     *     * @return bool     */    function checkPmaAbsoluteUri()    {        // Setup a default value to let the people and lazy sysadmins work anyway,        // they'll get an error if the autodetect code doesn't work        $pma_absolute_uri = $this->get('PmaAbsoluteUri');        $is_https = $this->detectHttps();        if (strlen($pma_absolute_uri) < 5) {            $url = array();            // If we don't have scheme, we didn't have full URL so we need to            // dig deeper            if (empty($url['scheme'])) {                // Scheme                if ($is_https) {                    $url['scheme'] = 'https';                } else {                    $url['scheme'] = 'http';                }                // Host and port                if (PMA_getenv('HTTP_HOST')) {                    // Prepend the scheme before using parse_url() since this                    // is not part of the RFC2616 Host request-header                    $parsed_url = parse_url(                        $url['scheme'] . '://' . PMA_getenv('HTTP_HOST')                    );                    if (!empty($parsed_url['host'])) {                        $url = $parsed_url;                    } else {                        $url['host'] = PMA_getenv('HTTP_HOST');                    }                } elseif (PMA_getenv('SERVER_NAME')) {                    $url['host'] = PMA_getenv('SERVER_NAME');                } else {                    $this->error_pma_uri = true;                    return false;                }                // If we didn't set port yet...                if (empty($url['port']) && PMA_getenv('SERVER_PORT')) {                    $url['port'] = PMA_getenv('SERVER_PORT');                }                // And finally the path could be already set from REQUEST_URI                if (empty($url['path'])) {                    $path = parse_url($GLOBALS['PMA_PHP_SELF']);                    $url['path'] = $path['path'];                }            }            // Make url from parts we have            $pma_absolute_uri = $url['scheme'] . '://';            // Was there user information?            if (!empty($url['user'])) {                $pma_absolute_uri .= $url['user'];                if (!empty($url['pass'])) {                    $pma_absolute_uri .= ':' . $url['pass'];                }                $pma_absolute_uri .= '@';            }            // Add hostname            $pma_absolute_uri .= $url['host'];            // Add port, if it not the default one            if (! empty($url['port'])                && (($url['scheme'] == 'http' && $url['port'] != 80)                || ($url['scheme'] == 'https' && $url['port'] != 443))            ) {                $pma_absolute_uri .= ':' . $url['port'];            }            // And finally path, without script name, the 'a' is there not to            // strip our directory, when path is only /pmadir/ without filename.            // Backslashes returned by Windows have to be changed.            // Only replace backslashes by forward slashes if on Windows,            // as the backslash could be valid on a non-Windows system.            $this->checkWebServerOs();            if ($this->get('PMA_IS_WINDOWS') == 1) {                $path = str_replace("\\", "/", dirname($url['path'] . 'a'));            } else {                $path = dirname($url['path'] . 'a');            }            // To work correctly within transformations overview:            if (defined('PMA_PATH_TO_BASEDIR') && PMA_PATH_TO_BASEDIR == '../../') {                if ($this->get('PMA_IS_WINDOWS') == 1) {                    $path = str_replace("\\", "/", dirname(dirname($path)));                } else {                    $path = dirname(dirname($path));                }            }            // PHP's dirname function would have returned a dot            // when $path contains no slash            if ($path == '.') {                $path = '';            }            // in vhost situations, there could be already an ending slash            if (substr($path, -1) != '/') {                $path .= '/';            }            $pma_absolute_uri .= $path;            // We used to display a warning if PmaAbsoluteUri wasn't set, but now            // the autodetect code works well enough that we don't display the            // warning at all. The user can still set PmaAbsoluteUri manually.            // See            // http://sf.net/tracker/?func=detail&aid=1257134&group_id=23067&atid=377411        } else {            // The URI is specified, however users do often specify this            // wrongly, so we try to fix this.            // Adds a trailing slash et the end of the phpMyAdmin uri if it            // does not exist.            if (substr($pma_absolute_uri, -1) != '/') {                $pma_absolute_uri .= '/';            }            // If URI doesn't start with http:// or https://, we will add            // this.            if (substr($pma_absolute_uri, 0, 7) != 'http://'                && substr($pma_absolute_uri, 0, 8) != 'https://'            ) {                $pma_absolute_uri                    = ($is_https ? 'https' : 'http')                    . ':' . (substr($pma_absolute_uri, 0, 2) == '//' ? '' : '//')                    . $pma_absolute_uri;            }        }        $this->set('PmaAbsoluteUri', $pma_absolute_uri);    }    /**     * check selected collation_connection     *     * @todo check validity of $_REQUEST['collation_connection']     *     * @return nothing     */    function checkCollationConnection()    {        if (! empty($_REQUEST['collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_REQUEST['collation_connection'])            );        }    }    /**     * checks for font size configuration, and sets font size as requested by user     *     * @return nothing     */    function checkFontsize()    {        $new_fontsize = '';        if (isset($_GET['set_fontsize'])) {            $new_fontsize = $_GET['set_fontsize'];        } elseif (isset($_POST['set_fontsize'])) {            $new_fontsize = $_POST['set_fontsize'];        } elseif (isset($_COOKIE['pma_fontsize'])) {            $new_fontsize = $_COOKIE['pma_fontsize'];        }        if (preg_match('/^[0-9.]+(px|em|pt|\%)$/', $new_fontsize)) {            $this->set('fontsize', $new_fontsize);        } elseif (! $this->get('fontsize')) {            // 80% would correspond to the default browser font size            // of 16, but use 82% to help read the monoface font            $this->set('fontsize', '82%');        }        $this->setCookie('pma_fontsize', $this->get('fontsize'), '82%');    }    /**     * checks if upload is enabled     *     * @return nothing     */    function checkUpload()    {        if (ini_get('file_uploads')) {            $this->set('enable_upload', true);            // if set "php_admin_value file_uploads Off" in httpd.conf            // ini_get() also returns the string "Off" in this case:            if ('off' == strtolower(ini_get('file_uploads'))) {                $this->set('enable_upload', false);            }        } else {            $this->set('enable_upload', false);        }    }    /**     * Maximum upload size as limited by PHP     * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas     *     * this section generates $max_upload_size in bytes     *     * @return nothing     */    function checkUploadSize()    {        if (! $filesize = ini_get('upload_max_filesize')) {            $filesize = "5M";        }        if ($postsize = ini_get('post_max_size')) {            $this->set(                'max_upload_size',                min(PMA_get_real_size($filesize), PMA_get_real_size($postsize))            );        } else {            $this->set('max_upload_size', PMA_get_real_size($filesize));        }    }    /**     * check for https     *     * @return nothing     */    function checkIsHttps()    {        $this->set('is_https', $this->isHttps());    }    /**     * Checks if protocol is https     *     * This function checks if the https protocol is used in the PmaAbsoluteUri     * configuration setting, as opposed to detectHttps() which checks if the     * https protocol is used on the active connection.     *     * @return bool     */    public function isHttps()    {        static $is_https = null;        if (null !== $is_https) {            return $is_https;        }        $url = parse_url($this->get('PmaAbsoluteUri'));        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * Detects whether https appears to be used.     *     * This function checks if the https protocol is used in the current connection     * with the webserver, based on environment variables.     * Please note that this just detects what we see, so     * it completely ignores things like reverse proxies.     *     * @return bool     */    function detectHttps()    {        $is_https = false;        $url = array();        // At first we try to parse REQUEST_URI, it might contain full URL,        if (PMA_getenv('REQUEST_URI')) {            // produces E_WARNING if it cannot get parsed, e.g. '/foobar:/'            $url = @parse_url(PMA_getenv('REQUEST_URI'));            if ($url === false) {                $url = array();            }        }        // If we don't have scheme, we didn't have full URL so we need to        // dig deeper        if (empty($url['scheme'])) {            // Scheme            if (PMA_getenv('HTTP_SCHEME')) {                $url['scheme'] = PMA_getenv('HTTP_SCHEME');            } elseif (PMA_getenv('HTTPS') && strtolower(PMA_getenv('HTTPS')) == 'on') {                $url['scheme'] = 'https';            } elseif (PMA_getenv('HTTP_X_FORWARDED_PROTO')) {                $url['scheme'] = strtolower(PMA_getenv('HTTP_X_FORWARDED_PROTO'));            } elseif (PMA_getenv('HTTP_FRONT_END_HTTPS') && strtolower(PMA_getenv('HTTP_FRONT_END_HTTPS')) == 'on') {                $url['scheme'] = 'https';            } else {                $url['scheme'] = 'http';            }        }        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * detect correct cookie path     *     * @return nothing     */    function checkCookiePath()    {        $this->set('cookie_path', $this->getCookiePath());    }    /**     * Get cookie path     *     * @return string     */    public function getCookiePath()    {        static $cookie_path = null;        if (null !== $cookie_path) {            return $cookie_path;        }        $parsed_url = parse_url($this->get('PmaAbsoluteUri'));        $cookie_path   = $parsed_url['path'];        return $cookie_path;    }    /**     * enables backward compatibility     *     * @return nothing     */    function enableBc()    {        $GLOBALS['cfg']             = $this->settings;        $GLOBALS['default_server']  = $this->default_server;        unset($this->default_server);        $GLOBALS['collation_connection'] = $this->get('collation_connection');        $GLOBALS['is_upload']       = $this->get('enable_upload');        $GLOBALS['max_upload_size'] = $this->get('max_upload_size');        $GLOBALS['cookie_path']     = $this->get('cookie_path');        $GLOBALS['is_https']        = $this->get('is_https');        $defines = array(            'PMA_VERSION',            'PMA_THEME_VERSION',            'PMA_THEME_GENERATION',            'PMA_PHP_STR_VERSION',            'PMA_PHP_INT_VERSION',            'PMA_IS_WINDOWS',            'PMA_IS_IIS',            'PMA_IS_GD2',            'PMA_USR_OS',            'PMA_USR_BROWSER_VER',            'PMA_USR_BROWSER_AGENT'            );        foreach ($defines as $define) {            if (! defined($define)) {                define($define, $this->get($define));            }        }    }    /**     * @todo finish     *     * @return nothing     */    function save()    {    }    /**     * returns options for font size selection     *     * @static     * @param string $current_size current selected font size with unit     *     * @return array selectable font sizes     */    static protected function _getFontsizeOptions($current_size = '82%')    {        $unit = preg_replace('/[0-9.]*/', '', $current_size);        $value = preg_replace('/[^0-9.]*/', '', $current_size);        $factors = array();        $options = array();        $options["$value"] = $value . $unit;        if ($unit === '%') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } elseif ($unit === 'em') {            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;        } elseif ($unit === 'pt') {            $factors[] = 0.5;            $factors[] = 2;        } elseif ($unit === 'px') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } else {            //unknown font size unit            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        }        foreach ($factors as $key => $factor) {            $option_inc = $value + $factor;            $option_dec = $value - $factor;            while (count($options) < 21) {                $options["$option_inc"] = $option_inc . $unit;                if ($option_dec > $factors[0]) {                    $options["$option_dec"] = $option_dec . $unit;                }                $option_inc += $factor;                $option_dec -= $factor;                if (isset($factors[$key + 1])                    && $option_inc >= $value + $factors[$key + 1]                ) {                    break;                }            }        }        ksort($options);        return $options;    }    /**     * returns html selectbox for font sizes     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static protected function _getFontsizeSelection()    {        $current_size = $GLOBALS['PMA_Config']->get('fontsize');        // for the case when there is no config file (this is supported)        if (empty($current_size)) {            if (isset($_COOKIE['pma_fontsize'])) {                $current_size = $_COOKIE['pma_fontsize'];            } else {                $current_size = '82%';            }        }        $options = PMA_Config::_getFontsizeOptions($current_size);        $return = '<label for="select_fontsize">' . __('Font size') . ':</label>' . "\n";        $return .= '<select name="set_fontsize" id="select_fontsize" class="autosubmit">' . "\n";        foreach ($options as $option) {            $return .= '<option value="' . $option . '"';            if ($option == $current_size) {                $return .= ' selected="selected"';            }            $return .= '>' . $option . '</option>' . "\n";        }        $return .= '</select>';        return $return;    }    /**     * return complete font size selection form     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static public function getFontsizeForm()    {        return '<form name="form_fontsize_selection" id="form_fontsize_selection"'            . ' method="post" action="index.php" target="_parent">' . "\n"            . PMA_generate_common_hidden_inputs() . "\n"            . PMA_Config::_getFontsizeSelection() . "\n"            . '<noscript>' . "\n"            . '<input type="submit" value="' . __('Go') . '" />' . "\n"            . '</noscript>' . "\n"            . '</form>';    }    /**     * removes cookie     *     * @param string $cookie name of cookie to remove     *     * @return boolean result of setcookie()     */    function removeCookie($cookie)    {        return setcookie(            $cookie,            '',            time() - 3600,            $this->getCookiePath(),            '',            $this->isHttps()        );    }    /**     * sets cookie if value is different from current cokkie value,     * or removes if value is equal to default     *     * @param string  $cookie   name of cookie to remove     * @param mixed   $value    new cookie value     * @param string  $default  default value     * @param int     $validity validity of cookie in seconds (default is one month)     * @param bool    $httponly whether cookie is only for HTTP (and not for scripts)     *     * @return boolean result of setcookie()     */    function setCookie($cookie, $value, $default = null, $validity = null, $httponly = true)    {        if ($validity == null) {            $validity = 2592000;        }        if (strlen($value) && null !== $default && $value === $default) {            // default value is used            if (isset($_COOKIE[$cookie])) {                // remove cookie                return $this->removeCookie($cookie);            }            return false;        }        if (! strlen($value) && isset($_COOKIE[$cookie])) {            // remove cookie, value is empty            return $this->removeCookie($cookie);        }        if (! isset($_COOKIE[$cookie]) || $_COOKIE[$cookie] !== $value) {            // set cookie with new value            /* Calculate cookie validity */            if ($validity == 0) {                $v = 0;            } else {                $v = time() + $validity;            }            return setcookie(                $cookie,                $value,                $v,                $this->getCookiePath(),                '',                $this->isHttps(),                $httponly            );        }        // cookie has already $value as value        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage Original *//** * */$theme_name = 'Original';$theme_full_version = '2.9';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the classic MySQL extension * * @package PhpMyAdmin-DBI-MySQL */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (! defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysql_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * Helper function for connecting to the database server * * @param   string  $server * @param   string  $user * @param   string  $password * @param   int     $client_flags * @param   bool    $persistent * @return  mixed   false on error or a mysql connection resource on success */function PMA_DBI_real_connect($server, $user, $password, $client_flags, $persistent = false){    global $cfg;    if (empty($client_flags)) {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password);        } else {            $link = @mysql_connect($server, $user, $password);        }    } else {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password, $client_flags);        } else {            $link = @mysql_connect($server, $user, $password, false, $client_flags);        }    }    return $link;}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket/persistent * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port = (empty($server['port']))            ? ''            : ':' . (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : ':' . $server['socket'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? ''            : ':' . (int)$cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? ''            : ':' . $cfg['Server']['socket'];    }    $client_flags = 0;    // always use CLIENT_LOCAL_FILES as defined in mysql_com.h    // for the case where the client library was not compiled    // with --enable-local-infile    $client_flags |= 128;    /* Optionally compress connection */    if (defined('MYSQL_CLIENT_COMPRESS') && $cfg['Server']['compress']) {        $client_flags |= MYSQL_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if (defined('MYSQL_CLIENT_SSL') && $cfg['Server']['ssl']) {        $client_flags |= MYSQL_CLIENT_SSL;    }    if (!$server) {        $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, $password, empty($client_flags) ? null : $client_flags);      // Retry with empty password if we're allowed to        if (empty($link) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, '', empty($client_flags) ? null : $client_flags);        }    } else {        if (!isset($server['host'])) {            $link = PMA_DBI_real_connect($server_socket, $user, $password, null);        } else {            $link = PMA_DBI_real_connect($server['host'] . $server_port . $server_socket, $user, $password, null);        }    }    if (empty($link)) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } // end if    if (! $server) {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string    $dbname  name of db to select * @param resource  $link    mysql link resource * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_select_db($dbname, $link);}/** * runs a query and returns the result * * @param string    $query    query to run * @param resource  $link     mysql link resource * @param int       $options * @return mixed */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        return mysql_query($query, $link);    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        return mysql_unbuffered_query($query, $link);    } else {        return mysql_query($query, $link);    }}/** * returns array of rows with associative and numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysql_fetch_array($result, MYSQL_BOTH);}/** * returns array of rows with associative keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysql_fetch_array($result, MYSQL_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysql_fetch_array($result, MYSQL_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysql_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  resource  $result */function PMA_DBI_free_result($result){    if (is_resource($result) && get_resource_type($result) === 'mysql result') {        mysql_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  boo         false */function PMA_DBI_next_result(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  int         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysql_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];// Do not stop now. On the initial connection, we don't have a $link,// we don't have a $GLOBALS['userlink'], but we can catch the error code//    } else {//            return false;    }    if (null !== $link && false !== $link) {        $error_number = mysql_errno($link);        $error_message = mysql_error($link);    } else {        $error_number = mysql_errno();        $error_message = mysql_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   resource  $result * @return  string|int */function PMA_DBI_num_rows($result){    if (!is_bool($result)) {        return mysql_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   resource  $link  the mysql object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // If the primary key is BIGINT we get an incorrect result    // (sometimes negative, sometimes positive)    // and in the present function we don't know if the PK is BIGINT    // so better play safe and use LAST_INSERT_ID()    //    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);}/** * returns the number of rows affected by last query * * @param   resource  $link            the mysql object * @param   bool      $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysql_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @todo add missing keys like in mysqli_query (decimals) * @param   resource  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    $fields       = array();    $num_fields   = mysql_num_fields($result);    for ($i = 0; $i < $num_fields; $i++) {        $field = mysql_fetch_field($result, $i);        $field->flags = mysql_field_flags($result, $i);        $field->orgtable = mysql_field_table($result, $i);        $field->orgname = mysql_field_name($result, $i);        $fields[] = $field;    }    return $fields;}/** * return number of fields in given $result * * @param   resource  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysql_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   resource  $result * @param   int       $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysql_field_len($result, $i);}/** * returns name of $i. field in $result * * @param   resource  $result * @param   int       $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysql_field_name($result, $i);}/** * returns concatenated string of human readable field flags * * @param   resource  $result * @param   int       $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    return mysql_field_flags($result, $i);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Displays the links */require './libraries/server_links.inc.php';$export_page_title = __('View dump (schema) of databases') . "\n";$checkall_url = 'server_export.php?'              . PMA_generate_common_url()              . '&amp;goto=db_export.php';$multi_values = '<div align="left">';$multi_values .= '<a href="' . $checkall_url . '&amp;selectall=1" onclick="setSelectOptions(\'dump\', \'db_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'db_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="db_select[]" id="db_select" size="10" multiple="multiple">';$multi_values .= "\n";// Check if the selected databases are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['db_select'])) {    $_GET['db_select'] = urldecode($_GET['db_select']);    $_GET['db_select'] = explode(",", $_GET['db_select']);}foreach ($GLOBALS['pma']->databases as $current_db) {    if (isset($_GET['db_select'])) {        if (in_array($current_db, $_GET['db_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (!empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    $current_db   = htmlspecialchars($current_db);    $multi_values .= '                <option value="' . $current_db . '"' . $is_selected . '>' . $current_db . '</option>' . "\n";} // end while$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'server';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays status variables with descriptions and some hints an optmizing *  + reset status variables * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_header_sent'] = true;}require_once './libraries/common.inc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    // real-time charting data    if (isset($_REQUEST['chart_data'])) {        switch($_REQUEST['type']) {        // Process and Connections realtime chart        case 'proc':            $c = PMA_DBI_fetch_result("SHOW GLOBAL STATUS WHERE Variable_name = 'Connections'", 0, 1);            $result = PMA_DBI_query('SHOW PROCESSLIST');            $num_procs = PMA_DBI_num_rows($result);            $ret = array(                'x'      => microtime(true) * 1000,                'y_proc' => $num_procs,                'y_conn' => $c['Connections']            );            exit(json_encode($ret));        // Query realtime chart        case 'queries':            if (PMA_DRIZZLE) {                $sql = "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS                    WHERE variable_value > 0                      UNION                    SELECT variable_name, variable_value                    FROM data_dictionary.GLOBAL_STATUS                    WHERE variable_name = 'Questions'";                $queries = PMA_DBI_fetch_result($sql, 0, 1);            } else {                $queries = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE (Variable_name LIKE 'Com_%' OR Variable_name = 'Questions')                        AND Value > 0", 0, 1                );            }            cleanDeprecated($queries);            // admin commands are not queries            unset($queries['Com_admin_commands']);            $questions = $queries['Questions'];            unset($queries['Questions']);            //$sum=array_sum($queries);            $ret = array(                'x'         => microtime(true) * 1000,                'y'         => $questions,                'pointInfo' => $queries            );            exit(json_encode($ret));        // Traffic realtime chart        case 'traffic':            $traffic = PMA_DBI_fetch_result(                "SHOW GLOBAL STATUS                WHERE Variable_name = 'Bytes_received'                    OR Variable_name = 'Bytes_sent'", 0, 1            );            $ret = array(                'x'          => microtime(true) * 1000,                'y_sent'     => $traffic['Bytes_sent'],                'y_received' => $traffic['Bytes_received']            );            exit(json_encode($ret));        // Data for the monitor        case 'chartgrid':            $ret = json_decode($_REQUEST['requiredData'], true);            $statusVars = array();            $serverVars = array();            $sysinfo = $cpuload = $memory = 0;            $pName = '';            /* Accumulate all required variables and data */            // For each chart            foreach ($ret as $chart_id => $chartNodes) {                // For each data series                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    // For each data point in the series (usually just 1)                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        $pName = $dataPoint['name'];                        switch ($dataPoint['type']) {                        /* We only collect the status and server variables here to                         * read them all in one query, and only afterwards assign them.                         * Also do some white list filtering on the names                        */                        case 'servervar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $serverVars[] = $pName;                            }                            break;                        case 'statusvar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $statusVars[] = $pName;                            }                            break;                        case 'proc':                            $result = PMA_DBI_query('SHOW PROCESSLIST');                            $ret[$chart_id][$node_id][$point_id]['value'] = PMA_DBI_num_rows($result);                            break;                        case 'cpu':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$cpuload) {                                $cpuload = $sysinfo->loadavg();                            }                            if (PHP_OS == 'Linux') {                                $ret[$chart_id][$node_id][$point_id]['idle'] = $cpuload['idle'];                                $ret[$chart_id][$node_id][$point_id]['busy'] = $cpuload['busy'];                            } else                                $ret[$chart_id][$node_id][$point_id]['value'] = $cpuload['loadavg'];                            break;                        case 'memory':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$memory) {                                $memory  = $sysinfo->memory();                            }                            $ret[$chart_id][$node_id][$point_id]['value'] = $memory[$pName];                            break;                        } /* switch */                    } /* foreach */                } /* foreach */            } /* foreach */            // Retrieve all required status variables            if (count($statusVars)) {                $statusVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE Variable_name='" . implode("' OR Variable_name='", $statusVars) . "'", 0, 1                );            } else {                $statusVarValues = array();            }            // Retrieve all required server variables            if (count($serverVars)) {                $serverVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL VARIABLES                    WHERE Variable_name='" . implode("' OR Variable_name='", $serverVars) . "'", 0, 1                );            } else {                $serverVarValues = array();            }            // ...and now assign them            foreach ($ret as $chart_id => $chartNodes) {                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        switch($dataPoint['type']) {                        case 'statusvar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $statusVarValues[$dataPoint['name']];                            break;                        case 'servervar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $serverVarValues[$dataPoint['name']];                            break;                        }                    }                }            }            $ret['x'] = microtime(true) * 1000;            exit(json_encode($ret));        }    }    if (isset($_REQUEST['log_data'])) {        if (PMA_MYSQL_INT_VERSION < 50106) {            /* FIXME: why this? */            exit('""');        }        $start = intval($_REQUEST['time_start']);        $end = intval($_REQUEST['time_end']);        if ($_REQUEST['type'] == 'slow') {            $q = 'SELECT start_time, user_host, Sec_to_Time(Sum(Time_to_Sec(query_time))) as query_time, Sec_to_Time(Sum(Time_to_Sec(lock_time))) as lock_time, '.                 'SUM(rows_sent) AS rows_sent, SUM(rows_examined) AS rows_examined, db, sql_text, COUNT(sql_text) AS \'#\' '.                 'FROM `mysql`.`slow_log` WHERE start_time > FROM_UNIXTIME(' . $start . ') '.                 'AND start_time < FROM_UNIXTIME(' . $end . ') GROUP BY sql_text';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            while ($row = PMA_DBI_fetch_assoc($result)) {                $type = strtolower(substr($row['sql_text'], 0, strpos($row['sql_text'], ' ')));                switch($type) {                case 'insert':                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['sql_text']) > 220) {                        $row['sql_text'] = substr($row['sql_text'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['sql_text']), 2, 2))                            . ']';                    }                    break;                default:                    break;                }                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                $return['rows'][] = $row;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }        if ($_REQUEST['type'] == 'general') {            $limitTypes = (isset($_REQUEST['limitTypes']) && $_REQUEST['limitTypes'])                            ? 'AND argument REGEXP \'^(INSERT|SELECT|UPDATE|DELETE)\' ' : '';            $q = 'SELECT TIME(event_time) as event_time, user_host, thread_id, server_id, argument, count(argument) as \'#\' '.                 'FROM `mysql`.`general_log` WHERE command_type=\'Query\' '.                 'AND event_time > FROM_UNIXTIME(' . $start . ') AND event_time < FROM_UNIXTIME(' . $end . ') '.                 $limitTypes . 'GROUP by argument'; // HAVING count > 1';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            $insertTables = array();            $insertTablesFirst = -1;            $i = 0;            $removeVars = isset($_REQUEST['removeVariables']) && $_REQUEST['removeVariables'];            while ($row = PMA_DBI_fetch_assoc($result)) {                preg_match('/^(\w+)\s/', $row['argument'], $match);                $type = strtolower($match[1]);                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                switch($type) {                case 'insert':                    // Group inserts if selected                    if ($removeVars && preg_match('/^INSERT INTO (`|\'|"|)([^\s\\1]+)\\1/i', $row['argument'], $matches)) {                        $insertTables[$matches[2]]++;                        if ($insertTables[$matches[2]] > 1) {                            $return['rows'][$insertTablesFirst]['#'] = $insertTables[$matches[2]];                            // Add a ... to the end of this query to indicate that there's been other queries                            if ($return['rows'][$insertTablesFirst]['argument'][strlen($return['rows'][$insertTablesFirst]['argument'])-1] != '.') {                                $return['rows'][$insertTablesFirst]['argument'] .= '<br/>...';                            }                            // Group this value, thus do not add to the result list                            continue 2;                        } else {                            $insertTablesFirst = $i;                            $insertTables[$matches[2]] += $row['#'] - 1;                        }                    }                    // No break here                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['argument']) > 220) {                        $row['argument'] = substr($row['argument'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['argument'])), 2, 2)                            . ']';                    }                    break;                default:                    break;                }                $return['rows'][] = $row;                $i++;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }    }    if (isset($_REQUEST['logging_vars'])) {        if (isset($_REQUEST['varName']) && isset($_REQUEST['varValue'])) {            $value = PMA_sqlAddslashes($_REQUEST['varValue']);            if (!is_numeric($value)) {                $value="'" . $value . "'";            }            if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName'])) {                PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value);            }        }        $loggingVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES WHERE Variable_name IN ("general_log","slow_query_log","long_query_time","log_output")', 0, 1);        exit(json_encode($loggingVars));    }    if (isset($_REQUEST['query_analyzer'])) {        $return = array();        if (strlen($_REQUEST['database'])) {            PMA_DBI_select_db($_REQUEST['database']);        }        if ($profiling = PMA_profilingSupported()) {            PMA_DBI_query('SET PROFILING=1;');        }        // Do not cache query        $query = preg_replace('/^(\s*SELECT)/i', '\\1 SQL_NO_CACHE', $_REQUEST['query']);        $result = PMA_DBI_try_query($query);        $return['affectedRows'] = $GLOBALS['cached_affected_rows'];        $result = PMA_DBI_try_query('EXPLAIN ' . $query);        while ($row = PMA_DBI_fetch_assoc($result)) {            $return['explain'][] = $row;        }        // In case an error happened        $return['error'] = PMA_DBI_getError();        PMA_DBI_free_result($result);        if ($profiling) {            $return['profiling'] = array();            $result = PMA_DBI_try_query('SELECT seq,state,duration FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID=1 ORDER BY seq');            while ($row = PMA_DBI_fetch_assoc($result)) {                $return['profiling'][]= $row;            }            PMA_DBI_free_result($result);        }        exit(json_encode($return));    }    if (isset($_REQUEST['advisor'])) {        include 'libraries/Advisor.class.php';        $advisor = new Advisor();        exit(json_encode($advisor->run()));    }}/** * Replication library */if (PMA_DRIZZLE) {    $server_master_status = false;    $server_slave_status = false;} else {    include_once './libraries/replication.inc.php';    include_once './libraries/replication_gui.lib.php';}/** * JS Includes */$GLOBALS['js_include'][] = 'server_status.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js'; // For tab persistence// Charting$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * flush status variables if requested */if (isset($_REQUEST['flush'])) {    $_flush_commands = array(        'STATUS',        'TABLES',        'QUERY CACHE',    );    if (in_array($_REQUEST['flush'], $_flush_commands)) {        PMA_DBI_query('FLUSH ' . $_REQUEST['flush'] . ';');    }    unset($_flush_commands);}/** * Kills a selected process */if (!empty($_REQUEST['kill'])) {    if (PMA_DBI_try_query('KILL ' . $_REQUEST['kill'] . ';')) {        $message = PMA_Message::success(__('Thread %s was successfully killed.'));    } else {        $message = PMA_Message::error(__('phpMyAdmin was unable to kill thread %s. It probably has already been closed.'));    }    $message->addParam($_REQUEST['kill']);    //$message->display();}/** * get status from server */$server_status = PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1);if (PMA_DRIZZLE) {    // Drizzle doesn't put query statistics into variables, add it    $sql = "SELECT concat('Com_', variable_name), variable_value        FROM data_dictionary.GLOBAL_STATEMENTS";    $statements = PMA_DBI_fetch_result($sql, 0, 1);    $server_status = array_merge($server_status, $statements);}/** * for some calculations we require also some server settings */$server_variables = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1);/** * cleanup of some deprecated values */cleanDeprecated($server_status);/** * calculate some values */// Key_buffer_fractionif (isset($server_status['Key_blocks_unused'])    && isset($server_variables['key_cache_block_size'])    && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = 100        - $server_status['Key_blocks_unused']        * $server_variables['key_cache_block_size']        / $server_variables['key_buffer_size']        * 100;} elseif (isset($server_status['Key_blocks_used'])        && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = $server_status['Key_blocks_used']        * 1024        / $server_variables['key_buffer_size'];}// Ratio for key read/writeif (isset($server_status['Key_writes'])    && isset($server_status['Key_write_requests'])    && $server_status['Key_write_requests'] > 0) {    $server_status['Key_write_ratio_%'] = 100 * $server_status['Key_writes'] / $server_status['Key_write_requests'];}if (isset($server_status['Key_reads'])    && isset($server_status['Key_read_requests'])    && $server_status['Key_read_requests'] > 0) {    $server_status['Key_read_ratio_%'] = 100 * $server_status['Key_reads'] / $server_status['Key_read_requests'];}// Threads_cache_hitrateif (isset($server_status['Threads_created'])    && isset($server_status['Connections'])    && $server_status['Connections'] > 0) {    $server_status['Threads_cache_hitrate_%']        = 100 - $server_status['Threads_created'] / $server_status['Connections'] * 100;}/** * split variables in sections */$allocations = array(    // variable name => section    // variable names match when they begin with the given string    'Com_'              => 'com',    'Innodb_'           => 'innodb',    'Ndb_'              => 'ndb',    'Handler_'          => 'handler',    'Qcache_'           => 'qcache',    'Threads_'          => 'threads',    'Slow_launch_threads' => 'threads',    'Binlog_cache_'     => 'binlog_cache',    'Created_tmp_'      => 'created_tmp',    'Key_'              => 'key',    'Delayed_'          => 'delayed',    'Not_flushed_delayed_rows' => 'delayed',    'Flush_commands'    => 'query',    'Last_query_cost'   => 'query',    'Slow_queries'      => 'query',    'Queries'           => 'query',    'Prepared_stmt_count' => 'query',    'Select_'           => 'select',    'Sort_'             => 'sort',    'Open_tables'       => 'table',    'Opened_tables'     => 'table',    'Open_table_definitions' => 'table',    'Opened_table_definitions' => 'table',    'Table_locks_'      => 'table',    'Rpl_status'        => 'repl',    'Slave_'            => 'repl',    'Tc_'               => 'tc',    'Ssl_'              => 'ssl',    'Open_files'        => 'files',    'Open_streams'      => 'files',    'Opened_files'      => 'files',);$sections = array(    // section => section name (description)    'com'           => 'Com',    'query'         => __('SQL query'),    'innodb'        => 'InnoDB',    'ndb'           => 'NDB',    'handler'       => __('Handler'),    'qcache'        => __('Query cache'),    'threads'       => __('Threads'),    'binlog_cache'  => __('Binary log'),    'created_tmp'   => __('Temporary data'),    'delayed'       => __('Delayed inserts'),    'key'           => __('Key cache'),    'select'        => __('Joins'),    'repl'          => __('Replication'),    'sort'          => __('Sorting'),    'table'         => __('Tables'),    'tc'            => __('Transaction coordinator'),    'files'         => __('Files'),    'ssl'           => 'SSL',    'other'         => __('Other'));/** * define some needfull links/commands */// variable or section name => (name => url)$links = array();$links['table'][__('Flush (close) all tables')]    = $PMA_PHP_SELF . '?flush=TABLES&amp;' . PMA_generate_common_url();$links['table'][__('Show open tables')]    = 'sql.php?sql_query=' . urlencode('SHOW OPEN TABLES') .        '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();if ($server_master_status) {    $links['repl'][__('Show slave hosts')]        = 'sql.php?sql_query=' . urlencode('SHOW SLAVE HOSTS') .            '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();    $links['repl'][__('Show master status')] = '#replication_master';}if ($server_slave_status) {    $links['repl'][__('Show slave status')] = '#replication_slave';}$links['repl']['doc'] = 'replication';$links['qcache'][__('Flush query cache')]    = $PMA_PHP_SELF . '?flush=' . urlencode('QUERY CACHE') . '&amp;' .        PMA_generate_common_url();$links['qcache']['doc'] = 'query_cache';//$links['threads'][__('Show processes')]//    = 'server_processlist.php?' . PMA_generate_common_url();$links['threads']['doc'] = 'mysql_threads';$links['key']['doc'] = 'myisam_key_cache';$links['binlog_cache']['doc'] = 'binary_log';$links['Slow_queries']['doc'] = 'slow_query_log';$links['innodb'][__('Variables')]    = 'server_engines.php?engine=InnoDB&amp;' . PMA_generate_common_url();$links['innodb'][__('InnoDB Status')]    = 'server_engines.php?engine=InnoDB&amp;page=Status&amp;' .        PMA_generate_common_url();$links['innodb']['doc'] = 'innodb';// Variable to contain all com_ variables (query statistics)$used_queries = array();// Variable to map variable names to their respective section name// (used for js category filtering)$allocationMap = array();// Variable to mark used sections$categoryUsed = array();// sort vars into arraysforeach ($server_status as $name => $value) {    $section_found = false;    foreach ($allocations as $filter => $section) {        if (strpos($name, $filter) !== false) {            $allocationMap[$name] = $section;            $categoryUsed[$section] = true;            $section_found = true;            if ($section == 'com' && $value > 0) {                $used_queries[$name] = $value;            }            break; // Only exits inner loop        }    }    if (!$section_found) {        $allocationMap[$name] = 'other';        $categoryUsed['other'] = true;    }}if (PMA_DRIZZLE) {    $used_queries = PMA_DBI_fetch_result(        'SELECT * FROM data_dictionary.global_statements',        0,        1    );    unset($used_queries['admin_commands']);} else {    // admin commands are not queries (e.g. they include COM_PING,    // which is excluded from $server_status['Questions'])    unset($used_queries['Com_admin_commands']);}/* Ajax request refresh */if (isset($_REQUEST['show']) && isset($_REQUEST['ajax_request'])) {    switch($_REQUEST['show']) {    case 'query_statistics':        printQueryStatistics();        exit();    case 'server_traffic':        printServerTraffic();        exit();    case 'variables_table':        // Prints the variables table        printVariablesTable();        exit();    default:        break;    }}$server_db_isLocal = strtolower($cfg['Server']['host']) == 'localhost'                              || $cfg['Server']['host'] == '127.0.0.1'                              || $cfg['Server']['host'] == '::1';PMA_AddJSVar(    'pma_token',    $_SESSION[' PMA_token ']);PMA_AddJSVar(    'url_query',    str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar(    'server_time_diff',    'new Date().getTime() - ' . (microtime(true) * 1000),    false);PMA_AddJSVar(    'server_os',    PHP_OS);PMA_AddJSVar(    'is_superuser',    PMA_isSuperuser());PMA_AddJSVar(    'server_db_isLocal',    $server_db_isLocal);PMA_AddJSVar(    'profiling_docu',    PMA_showMySQLDocu('general-thread-states', 'general-thread-states'));PMA_AddJSVar(    'explain_docu',    PMA_showMySQLDocu('explain-output', 'explain-output'));/** * start output */ /** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';?><div id="serverstatus">    <h2><?php/** * Displays the sub-page heading */if ($GLOBALS['cfg']['MainPageIconic']) {    echo PMA_getImage('s_status.png');}echo __('Runtime Information');?></h2>    <div id="serverStatusTabs">        <ul>            <li><a href="#statustabs_traffic"><?php echo __('Server'); ?></a></li>            <li><a href="#statustabs_queries"><?php echo __('Query statistics'); ?></a></li>            <li><a href="#statustabs_allvars"><?php echo __('All status variables'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_charting"><?php echo __('Monitor'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_advisor"><?php echo __('Advisor'); ?></a></li>        </ul>        <div id="statustabs_traffic" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=server_traffic&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_trafficChartRefresh"><?php echo __('Refresh rate: '); ?></label>                    <?php refreshList('trafficChartRefresh'); ?>                </span>                <a class="tabChart livetrafficLink" href="#">                    <?php echo __('Live traffic chart'); ?>                </a>                <a class="tabChart liveconnectionsLink" href="#">                    <?php echo __('Live conn./process chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printServerTraffic(); ?>            </div>        </div>        <div id="statustabs_queries" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh"  href="<?php echo $PMA_PHP_SELF . '?show=query_statistics&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_queryChartRefresh"><?php echo __('Refresh rate: '); ?></label>                       <?php refreshList('queryChartRefresh'); ?>                </span>                <a class="tabChart livequeriesLink" href="#">                    <?php echo __('Live query chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printQueryStatistics(); ?>            </div>        </div>        <div id="statustabs_allvars" class="clearfloat">            <fieldset id="tableFilter" class="jsfeature">                <div class="buttonlinks">                    <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=variables_table&amp;' . PMA_generate_common_url(); ?>" >                        <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                        <?php echo __('Refresh'); ?>                    </a>                </div>                <legend><?php echo __('Filters'); ?></legend>                <div class="formelement">                    <label for="filterText"><?php echo __('Containing the word:'); ?></label>                    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" />                </div>                <div class="formelement">                    <input type="checkbox" name="filterAlert" id="filterAlert" />                    <label for="filterAlert"><?php echo __('Show only alert values'); ?></label>                </div>                <div class="formelement">                    <select id="filterCategory" name="filterCategory">                        <option value=''><?php echo __('Filter by category...'); ?></option>                <?php                        foreach ($sections as $section_id => $section_name) {                            if (isset($categoryUsed[$section_id])) {                ?>                                <option value='<?php echo $section_id; ?>'><?php echo $section_name; ?></option>                <?php                            }                        }                ?>                    </select>                </div>                <div class="formelement">                    <input type="checkbox" name="dontFormat" id="dontFormat" />                    <label for="dontFormat"><?php echo __('Show unformatted values'); ?></label>                </div>            </fieldset>            <div id="linkSuggestions" class="defaultLinks" style="display:none">                <p class="notice"><?php echo __('Related links:'); ?>                <?php                foreach ($links as $section_name => $section_links) {                    echo '<span class="status_' . $section_name . '"> ';                    $i=0;                    foreach ($section_links as $link_name => $link_url) {                        if ($i > 0) {                            echo ', ';                        }                        if ('doc' == $link_name) {                            echo PMA_showMySQLDocu($link_url, $link_url);                        } else {                            echo '<a href="' . $link_url . '">' . $link_name . '</a>';                        }                        $i++;                    }                    echo '</span>';                }                unset($link_url, $link_name, $i);                ?>                </p>            </div>            <div class="tabInnerContent">                <?php printVariablesTable(); ?>            </div>        </div>        <div id="statustabs_charting" class="jsfeature">            <?php printMonitor(); ?>        </div>        <div id="statustabs_advisor" class="jsfeature">            <div class="tabLinks">                <?php echo PMA_getImage('play.png'); ?> <a href="#startAnalyzer"><?php echo __('Run analyzer'); ?></a>                <?php echo PMA_getImage('b_help.png'); ?> <a href="#openAdvisorInstructions"><?php echo __('Instructions'); ?></a>            </div>            <div class="tabInnerContent clearfloat">            </div>            <div id="advisorInstructionsDialog" style="display:none;">            <?php            echo '<p>';            echo __('The Advisor system can provide recommendations on server variables by analyzing the server status variables.');            echo '</p> <p>';            echo __('Do note however that this system provides recommendations based on simple calculations and by rule of thumb which may not necessarily apply to your system.');            echo '</p> <p>';            echo __('Prior to changing any of the configuration, be sure to know what you are changing (by reading the documentation) and how to undo the change. Wrong tuning can have a very negative effect on performance.');            echo '</p> <p>';            echo __('The best way to tune your system would be to change only one setting at a time, observe or benchmark your database, and undo the change if there was no clearly measurable improvement.');            echo '</p>';            ?>            </div>        </div>    </div></div><?phpfunction printQueryStatistics(){    global $server_status, $used_queries, $url_query, $PMA_PHP_SELF;    $hour_factor   = 3600 / $server_status['Uptime'];    $total_queries = array_sum($used_queries);    ?>    <h3 id="serverstatusqueries">        <?php        /* l10n: Questions is the name of a MySQL Status variable */        echo sprintf(__('Questions since startup: %s'), PMA_formatNumber($total_queries, 0)) . ' ';        echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_Questions');        ?>        <br />        <span>        <?php        echo '&oslash; ' . __('per hour') . ': ';        echo PMA_formatNumber($total_queries * $hour_factor, 0);        echo '<br />';        echo '&oslash; ' . __('per minute') . ': ';        echo PMA_formatNumber($total_queries * 60 / $server_status['Uptime'], 0);        echo '<br />';        if ($total_queries / $server_status['Uptime'] >= 1) {            echo '&oslash; ' . __('per second') . ': ';            echo PMA_formatNumber($total_queries / $server_status['Uptime'], 0);        }        ?>        </span>    </h3>    <?php    // reverse sort by value to show most used statements first    arsort($used_queries);    $odd_row        = true;    $count_displayed_rows = 0;    $perc_factor    = 100 / $total_queries; //(- $server_status['Connections']);    ?>        <table id="serverstatusqueriesdetails" class="data sortable noclick">        <col class="namecol" />        <col class="valuecol" span="3" />        <thead>            <tr><th><?php echo __('Statements'); ?></th>                <th><?php                    /* l10n: # = Amount of queries */                    echo __('#');                    ?>                </th>                <th>&oslash; <?php echo __('per hour'); ?></th>                <th>%</th>            </tr>        </thead>        <tbody>    <?php    $chart_json = array();    $query_sum = array_sum($used_queries);    $other_sum = 0;    foreach ($used_queries as $name => $value) {        $odd_row = !$odd_row;        // For the percentage column, use Questions - Connections, because        // the number of connections is not an item of the Query types        // but is included in Questions. Then the total of the percentages is 100.        $name = str_replace(array('Com_', '_'), array('', ' '), $name);        // Group together values that make out less than 2% into "Other", but only if we have more than 6 fractions already        if ($value < $query_sum * 0.02 && count($chart_json)>6) {            $other_sum += $value;        } else {            $chart_json[$name] = $value;        }    ?>            <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">                <th class="name"><?php echo htmlspecialchars($name); ?></th>                <td class="value"><?php echo htmlspecialchars(PMA_formatNumber($value, 5, 0, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $hour_factor, 4, 1, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $perc_factor, 0, 2)); ?>%</td>            </tr>    <?php    }    ?>        </tbody>        </table>        <div id="serverstatusquerieschart">            <span style="display:none;">        <?php            if ($other_sum > 0) {                $chart_json[__('Other')] = $other_sum;            }            echo json_encode($chart_json);        ?>            </span>        </div>        <?php}function printServerTraffic(){    global $server_status, $PMA_PHP_SELF;    global $server_master_status, $server_slave_status, $replication_types;    $hour_factor    = 3600 / $server_status['Uptime'];    /**     * starttime calculation     */    $start_time = PMA_DBI_fetch_value(        'SELECT UNIX_TIMESTAMP() - ' . $server_status['Uptime']    );    ?>    <h3><?php    echo sprintf(        __('Network traffic since startup: %s'),        implode(' ', PMA_formatByteDown($server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1))    );    ?>    </h3>    <p>    <?php    echo sprintf(        __('This MySQL server has been running for %1$s. It started up on %2$s.'),        PMA_timespanFormat($server_status['Uptime']),        PMA_localisedDate($start_time)    ) . "\n";    ?>    </p>    <?php    if ($server_master_status || $server_slave_status) {        echo '<p class="notice">';        if ($server_master_status && $server_slave_status) {            echo __('This MySQL server works as <b>master</b> and <b>slave</b> in <b>replication</b> process.');        } elseif ($server_master_status) {            echo __('This MySQL server works as <b>master</b> in <b>replication</b> process.');        } elseif ($server_slave_status) {            echo __('This MySQL server works as <b>slave</b> in <b>replication</b> process.');        }        echo ' ';        echo __('For further information about replication status on the server, please visit the <a href="#replication">replication section</a>.');        echo '</p>';    }    /* if the server works as master or slave in replication process, display useful information */    if ($server_master_status || $server_slave_status) {    ?>      <hr class="clearfloat" />      <h3><a name="replication"></a><?php echo __('Replication status'); ?></h3>    <?php        foreach ($replication_types as $type) {            if (${"server_{$type}_status"}) {                PMA_replication_print_status_table($type);            }        }        unset($types);    }    ?>    <table id="serverstatustraffic" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Traffic') . '&nbsp;' . PMA_showHint(__('On a busy server, the byte counters may overrun, so those statistics as reported by the MySQL server may be incorrect.')); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('Received'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_received'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Sent'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_sent'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_sent'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1)            ); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    ($server_status['Bytes_received'] + $server_status['Bytes_sent'])                    * $hour_factor, 3, 1)            ); ?></td>    </tr>    </tbody>    </table>    <table id="serverstatusconnections" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Connections'); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>        <th>%</th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('max. concurrent connections'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Max_used_connections'], 0); ?>  </td>        <td class="value">--- </td>        <td class="value">--- </td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Failed attempts'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_connects'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Aborted'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_clients'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'], 4, 0); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'] * $hour_factor,                4, 2); ?></td>        <td class="value"><?php echo            PMA_formatNumber(100, 0, 2); ?>%</td>    </tr>    </tbody>    </table>    <?php    $url_params = array();    $show_full_sql = !empty($_REQUEST['full']);    if ($show_full_sql) {        $url_params['full'] = 1;        $full_text_link = 'server_status.php' . PMA_generate_common_url(array(), 'html', '?');    } else {        $full_text_link = 'server_status.php' . PMA_generate_common_url(array('full' => 1));    }    if (PMA_DRIZZLE) {        $sql_query = "SELECT                p.id       AS Id,                p.username AS User,                p.host     AS Host,                p.db       AS db,                p.command  AS Command,                p.time     AS Time,                p.state    AS State,                " . ($show_full_sql ? 's.query' : 'left(p.info, ' . (int)$GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] . ')') . " AS Info            FROM data_dictionary.PROCESSLIST p                " . ($show_full_sql ? 'LEFT JOIN data_dictionary.SESSIONS s ON s.session_id = p.id' : '');    } else {        $sql_query = $show_full_sql            ? 'SHOW FULL PROCESSLIST'            : 'SHOW PROCESSLIST';    }    $result = PMA_DBI_query($sql_query);    /**     * Displays the page     */    ?>    <table id="tableprocesslist" class="data clearfloat noclick">    <thead>    <tr>        <th><?php echo __('Processes'); ?></th>        <th><?php echo __('ID'); ?></th>        <th><?php echo __('User'); ?></th>        <th><?php echo __('Host'); ?></th>        <th><?php echo __('Database'); ?></th>        <th><?php echo __('Command'); ?></th>        <th><?php echo __('Time'); ?></th>        <th><?php echo __('Status'); ?></th>        <th><?php            echo __('SQL query');            if (! PMA_DRIZZLE) {                ?>            <a href="<?php echo $full_text_link; ?>"                title="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>">                <img src="<?php echo $GLOBALS['pmaThemeImage'] . 's_' . ($show_full_sql ? 'partial' : 'full'); ?>text.png"                alt="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>" />            </a>            <?php } ?>        </th>    </tr>    </thead>    <tbody>    <?php    $odd_row = true;    while ($process = PMA_DBI_fetch_assoc($result)) {        $url_params['kill'] = $process['Id'];        $kill_process = 'server_status.php' . PMA_generate_common_url($url_params);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><a href="<?php echo $kill_process ; ?>"><?php echo __('Kill'); ?></a></td>        <td class="value"><?php echo $process['Id']; ?></td>        <td><?php echo $process['User']; ?></td>        <td><?php echo $process['Host']; ?></td>        <td><?php echo ((! isset($process['db']) || ! strlen($process['db'])) ? '<i>' . __('None') . '</i>' : $process['db']); ?></td>        <td><?php echo $process['Command']; ?></td>        <td class="value"><?php echo $process['Time']; ?></td>        <td><?php echo (empty($process['State']) ? '---' : $process['State']); ?></td>        <td>        <?php        if (empty($process['Info'])) {            echo '---';        } else {            if (!$show_full_sql && strlen($process['Info']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                echo htmlspecialchars(substr($process['Info'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';            } else {                echo PMA_SQP_formatHtml(PMA_SQP_parse($process['Info']));            }        }        ?>        </td>    </tr>        <?php        $odd_row = ! $odd_row;    }    ?>    </tbody>    </table>    <?php}function printVariablesTable(){    global $server_status, $server_variables, $allocationMap, $links;    /**     * Messages are built using the message name     */    $strShowStatus = array(        'Aborted_clients' => __('The number of connections that were aborted because the client died without closing the connection properly.'),        'Aborted_connects' => __('The number of failed attempts to connect to the MySQL server.'),        'Binlog_cache_disk_use' => __('The number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size and used a temporary file to store statements from the transaction.'),        'Binlog_cache_use' => __('The number of transactions that used the temporary binary log cache.'),        'Connections' => __('The number of connection attempts (successful or not) to the MySQL server.'),        'Created_tmp_disk_tables' => __('The number of temporary tables on disk created automatically by the server while executing statements. If Created_tmp_disk_tables is big, you may want to increase the tmp_table_size  value to cause temporary tables to be memory-based instead of disk-based.'),        'Created_tmp_files' => __('How many temporary files mysqld has created.'),        'Created_tmp_tables' => __('The number of in-memory temporary tables created automatically by the server while executing statements.'),        'Delayed_errors' => __('The number of rows written with INSERT DELAYED for which some error occurred (probably duplicate key).'),        'Delayed_insert_threads' => __('The number of INSERT DELAYED handler threads in use. Every different table on which one uses INSERT DELAYED gets its own thread.'),        'Delayed_writes' => __('The number of INSERT DELAYED rows written.'),        'Flush_commands'  => __('The number of executed FLUSH statements.'),        'Handler_commit' => __('The number of internal COMMIT statements.'),        'Handler_delete' => __('The number of times a row was deleted from a table.'),        'Handler_discover' => __('The MySQL server can ask the NDB Cluster storage engine if it knows about a table with a given name. This is called discovery. Handler_discover indicates the number of time tables have been discovered.'),        'Handler_read_first' => __('The number of times the first entry was read from an index. If this is high, it suggests that the server is doing a lot of full index scans; for example, SELECT col1 FROM foo, assuming that col1 is indexed.'),        'Handler_read_key' => __('The number of requests to read a row based on a key. If this is high, it is a good indication that your queries and tables are properly indexed.'),        'Handler_read_next' => __('The number of requests to read the next row in key order. This is incremented if you are querying an index column with a range constraint or if you are doing an index scan.'),        'Handler_read_prev' => __('The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ... DESC.'),        'Handler_read_rnd' => __('The number of requests to read a row based on a fixed position. This is high if you are doing a lot of queries that require sorting of the result. You probably have a lot of queries that require MySQL to scan whole tables or you have joins that don\'t use keys properly.'),        'Handler_read_rnd_next' => __('The number of requests to read the next row in the data file. This is high if you are doing a lot of table scans. Generally this suggests that your tables are not properly indexed or that your queries are not written to take advantage of the indexes you have.'),        'Handler_rollback' => __('The number of internal ROLLBACK statements.'),        'Handler_update' => __('The number of requests to update a row in a table.'),        'Handler_write' => __('The number of requests to insert a row in a table.'),        'Innodb_buffer_pool_pages_data' => __('The number of pages containing data (dirty or clean).'),        'Innodb_buffer_pool_pages_dirty' => __('The number of pages currently dirty.'),        'Innodb_buffer_pool_pages_flushed' => __('The number of buffer pool pages that have been requested to be flushed.'),        'Innodb_buffer_pool_pages_free' => __('The number of free pages.'),        'Innodb_buffer_pool_pages_latched' => __('The number of latched pages in InnoDB buffer pool. These are pages currently being read or written or that can\'t be flushed or removed for some other reason.'),        'Innodb_buffer_pool_pages_misc' => __('The number of pages busy because they have been allocated for administrative overhead such as row locks or the adaptive hash index. This value can also be calculated as Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data.'),        'Innodb_buffer_pool_pages_total' => __('Total size of buffer pool, in pages.'),        'Innodb_buffer_pool_read_ahead_rnd' => __('The number of "random" read-aheads InnoDB initiated. This happens when a query is to scan a large portion of a table but in random order.'),        'Innodb_buffer_pool_read_ahead_seq' => __('The number of sequential read-aheads InnoDB initiated. This happens when InnoDB does a sequential full table scan.'),        'Innodb_buffer_pool_read_requests' => __('The number of logical read requests InnoDB has done.'),        'Innodb_buffer_pool_reads' => __('The number of logical reads that InnoDB could not satisfy from buffer pool and had to do a single-page read.'),        'Innodb_buffer_pool_wait_free' => __('Normally, writes to the InnoDB buffer pool happen in the background. However, if it\'s necessary to read or create a page and no clean pages are available, it\'s necessary to wait for pages to be flushed first. This counter counts instances of these waits. If the buffer pool size was set properly, this value should be small.'),        'Innodb_buffer_pool_write_requests' => __('The number writes done to the InnoDB buffer pool.'),        'Innodb_data_fsyncs' => __('The number of fsync() operations so far.'),        'Innodb_data_pending_fsyncs' => __('The current number of pending fsync() operations.'),        'Innodb_data_pending_reads' => __('The current number of pending reads.'),        'Innodb_data_pending_writes' => __('The current number of pending writes.'),        'Innodb_data_read' => __('The amount of data read so far, in bytes.'),        'Innodb_data_reads' => __('The total number of data reads.'),        'Innodb_data_writes' => __('The total number of data writes.'),        'Innodb_data_written' => __('The amount of data written so far, in bytes.'),        'Innodb_dblwr_pages_written' => __('The number of pages that have been written for doublewrite operations.'),        'Innodb_dblwr_writes' => __('The number of doublewrite operations that have been performed.'),        'Innodb_log_waits' => __('The number of waits we had because log buffer was too small and we had to wait for it to be flushed before continuing.'),        'Innodb_log_write_requests' => __('The number of log write requests.'),        'Innodb_log_writes' => __('The number of physical writes to the log file.'),        'Innodb_os_log_fsyncs' => __('The number of fsync() writes done to the log file.'),        'Innodb_os_log_pending_fsyncs' => __('The number of pending log file fsyncs.'),        'Innodb_os_log_pending_writes' => __('Pending log file writes.'),        'Innodb_os_log_written' => __('The number of bytes written to the log file.'),        'Innodb_pages_created' => __('The number of pages created.'),        'Innodb_page_size' => __('The compiled-in InnoDB page size (default 16KB). Many values are counted in pages; the page size allows them to be easily converted to bytes.'),        'Innodb_pages_read' => __('The number of pages read.'),        'Innodb_pages_written' => __('The number of pages written.'),        'Innodb_row_lock_current_waits' => __('The number of row locks currently being waited for.'),        'Innodb_row_lock_time_avg' => __('The average time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_time' => __('The total time spent in acquiring row locks, in milliseconds.'),        'Innodb_row_lock_time_max' => __('The maximum time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_waits' => __('The number of times a row lock had to be waited for.'),        'Innodb_rows_deleted' => __('The number of rows deleted from InnoDB tables.'),        'Innodb_rows_inserted' => __('The number of rows inserted in InnoDB tables.'),        'Innodb_rows_read' => __('The number of rows read from InnoDB tables.'),        'Innodb_rows_updated' => __('The number of rows updated in InnoDB tables.'),        'Key_blocks_not_flushed' => __('The number of key blocks in the key cache that have changed but haven\'t yet been flushed to disk. It used to be known as Not_flushed_key_blocks.'),        'Key_blocks_unused' => __('The number of unused blocks in the key cache. You can use this value to determine how much of the key cache is in use.'),        'Key_blocks_used' => __('The number of used blocks in the key cache. This value is a high-water mark that indicates the maximum number of blocks that have ever been in use at one time.'),        'Key_read_requests' => __('The number of requests to read a key block from the cache.'),        'Key_reads' => __('The number of physical reads of a key block from disk. If Key_reads is big, then your key_buffer_size value is probably too small. The cache miss rate can be calculated as Key_reads/Key_read_requests.'),        'Key_write_requests' => __('The number of requests to write a key block to the cache.'),        'Key_writes' => __('The number of physical writes of a key block to disk.'),        'Last_query_cost' => __('The total cost of the last compiled query as computed by the query optimizer. Useful for comparing the cost of different query plans for the same query. The default value of 0 means that no query has been compiled yet.'),        'Max_used_connections' => __('The maximum number of connections that have been in use simultaneously since the server started.'),        'Not_flushed_delayed_rows' => __('The number of rows waiting to be written in INSERT DELAYED queues.'),        'Opened_tables' => __('The number of tables that have been opened. If opened tables is big, your table cache value is probably too small.'),        'Open_files' => __('The number of files that are open.'),        'Open_streams' => __('The number of streams that are open (used mainly for logging).'),        'Open_tables' => __('The number of tables that are open.'),        'Qcache_free_blocks' => __('The number of free memory blocks in query cache. High numbers can indicate fragmentation issues, which may be solved by issuing a FLUSH QUERY CACHE statement.'),        'Qcache_free_memory' => __('The amount of free memory for query cache.'),        'Qcache_hits' => __('The number of cache hits.'),        'Qcache_inserts' => __('The number of queries added to the cache.'),        'Qcache_lowmem_prunes' => __('The number of queries that have been removed from the cache to free up memory for caching new queries. This information can help you tune the query cache size. The query cache uses a least recently used (LRU) strategy to decide which queries to remove from the cache.'),        'Qcache_not_cached' => __('The number of non-cached queries (not cachable, or not cached due to the query_cache_type setting).'),        'Qcache_queries_in_cache' => __('The number of queries registered in the cache.'),        'Qcache_total_blocks' => __('The total number of blocks in the query cache.'),        'Rpl_status' => __('The status of failsafe replication (not yet implemented).'),        'Select_full_join' => __('The number of joins that do not use indexes. If this value is not 0, you should carefully check the indexes of your tables.'),        'Select_full_range_join' => __('The number of joins that used a range search on a reference table.'),        'Select_range_check' => __('The number of joins without keys that check for key usage after each row. (If this is not 0, you should carefully check the indexes of your tables.)'),        'Select_range' => __('The number of joins that used ranges on the first table. (It\'s normally not critical even if this is big.)'),        'Select_scan' => __('The number of joins that did a full scan of the first table.'),        'Slave_open_temp_tables' => __('The number of temporary tables currently open by the slave SQL thread.'),        'Slave_retried_transactions' => __('Total (since startup) number of times the replication slave SQL thread has retried transactions.'),        'Slave_running' => __('This is ON if this server is a slave that is connected to a master.'),        'Slow_launch_threads' => __('The number of threads that have taken more than slow_launch_time seconds to create.'),        'Slow_queries' => __('The number of queries that have taken more than long_query_time seconds.'),        'Sort_merge_passes' => __('The number of merge passes the sort algorithm has had to do. If this value is large, you should consider increasing the value of the sort_buffer_size system variable.'),        'Sort_range' => __('The number of sorts that were done with ranges.'),        'Sort_rows' => __('The number of sorted rows.'),        'Sort_scan' => __('The number of sorts that were done by scanning the table.'),        'Table_locks_immediate' => __('The number of times that a table lock was acquired immediately.'),        'Table_locks_waited' => __('The number of times that a table lock could not be acquired immediately and a wait was needed. If this is high, and you have performance problems, you should first optimize your queries, and then either split your table or tables or use replication.'),        'Threads_cached' => __('The number of threads in the thread cache. The cache hit rate can be calculated as Threads_created/Connections. If this value is red you should raise your thread_cache_size.'),        'Threads_connected' => __('The number of currently open connections.'),        'Threads_created' => __('The number of threads created to handle connections. If Threads_created is big, you may want to increase the thread_cache_size value. (Normally this doesn\'t give a notable performance improvement if you have a good thread implementation.)'),        'Threads_running' => __('The number of threads that are not sleeping.')    );    /**     * define some alerts     */    // name => max value before alert    $alerts = array(        // lower is better        // variable => max value        'Aborted_clients' => 0,        'Aborted_connects' => 0,        'Binlog_cache_disk_use' => 0,        'Created_tmp_disk_tables' => 0,        'Handler_read_rnd' => 0,        'Handler_read_rnd_next' => 0,        'Innodb_buffer_pool_pages_dirty' => 0,        'Innodb_buffer_pool_reads' => 0,        'Innodb_buffer_pool_wait_free' => 0,        'Innodb_log_waits' => 0,        'Innodb_row_lock_time_avg' => 10, // ms        'Innodb_row_lock_time_max' => 50, // ms        'Innodb_row_lock_waits' => 0,        'Slow_queries' => 0,        'Delayed_errors' => 0,        'Select_full_join' => 0,        'Select_range_check' => 0,        'Sort_merge_passes' => 0,        'Opened_tables' => 0,        'Table_locks_waited' => 0,        'Qcache_lowmem_prunes' => 0,        'Qcache_free_blocks' => isset($server_status['Qcache_total_blocks']) ? $server_status['Qcache_total_blocks'] / 5 : 0,        'Slow_launch_threads' => 0,        // depends on Key_read_requests        // normaly lower then 1:0.01        'Key_reads' => isset($server_status['Key_read_requests']) ? (0.01 * $server_status['Key_read_requests']) : 0,        // depends on Key_write_requests        // normaly nearly 1:1        'Key_writes' => isset($server_status['Key_write_requests']) ? (0.9 * $server_status['Key_write_requests']) : 0,        'Key_buffer_fraction' => 0.5,        // alert if more than 95% of thread cache is in use        'Threads_cached' => isset($server_variables['thread_cache_size']) ? 0.95 * $server_variables['thread_cache_size'] : 0        // higher is better        // variable => min value        //'Handler read key' => '> ',    );?><table class="data sortable noclick" id="serverstatusvariables">    <col class="namecol" />    <col class="valuecol" />    <col class="descrcol" />    <thead>        <tr>            <th><?php echo __('Variable'); ?></th>            <th><?php echo __('Value'); ?></th>            <th><?php echo __('Description'); ?></th>        </tr>    </thead>    <tbody>    <?php    $odd_row = false;    foreach ($server_status as $name => $value) {            $odd_row = !$odd_row;?>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; echo isset($allocationMap[$name])?' s_' . $allocationMap[$name]:''; ?>">            <th class="name"><?php            echo htmlspecialchars(str_replace('_', ' ', $name));            /* Fields containing % are calculated, they can not be described in MySQL documentation */            if (strpos($name, '%') === FALSE) {                 echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_' . $name);            }            ?>            </th>            <td class="value"><span class="formatted"><?php            if (isset($alerts[$name])) {                if ($value > $alerts[$name]) {                    echo '<span class="attention">';                } else {                    echo '<span class="allfine">';                }            }            if ('%' === substr($name, -1, 1)) {                echo htmlspecialchars(PMA_formatNumber($value, 0, 2)) . ' %';            } elseif (strpos($name, 'Uptime') !== false) {                echo htmlspecialchars(PMA_timespanFormat($value));            } elseif (is_numeric($value) && $value == (int) $value && $value > 1000) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } elseif (is_numeric($value) && $value == (int) $value) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 0));            } elseif (is_numeric($value)) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } else {                echo htmlspecialchars($value);            }            if (isset($alerts[$name])) {                echo '</span>';            }            ?></span><span style="display:none;" class="original"><?php echo $value; ?></span>            </td>            <td class="descr">            <?php            if (isset($strShowStatus[$name ])) {                echo $strShowStatus[$name];            }            if (isset($links[$name])) {                foreach ($links[$name] as $link_name => $link_url) {                    if ('doc' == $link_name) {                        echo PMA_showMySQLDocu($link_url, $link_url);                    } else {                        echo ' <a href="' . $link_url . '">' . $link_name . '</a>' .                        "\n";                    }                }                unset($link_url, $link_name);            }            ?>            </td>        </tr>    <?php    }    ?>    </tbody>    </table>    <?php}function printMonitor(){    global $server_status, $server_db_isLocal;?>    <div class="tabLinks" style="display:none;">        <a href="#pauseCharts">            <?php echo PMA_getImage('play.png'); ?>            <?php echo __('Start Monitor'); ?>        </a>        <a href="#settingsPopup" rel="popupLink" style="display:none;">            <?php echo PMA_getImage('s_cog.png'); ?>            <?php echo __('Settings'); ?>        </a>        <?php if (!PMA_DRIZZLE) { ?>        <a href="#monitorInstructionsDialog">            <?php echo PMA_getImage('b_help.png'); ?>            <?php echo __('Instructions/Setup'); ?>        </a>        <?php } ?>        <a href="#endChartEditMode" style="display:none;">            <?php echo PMA_getImage('s_okay.png'); ?>            <?php echo __('Done rearranging/editing charts'); ?>        </a>    </div>    <div class="popupContent settingsPopup">        <a href="#addNewChart">            <?php echo PMA_getImage('b_chart.png'); ?>            <?php echo __('Add chart'); ?>        </a>        <a href="#rearrangeCharts"><?php echo PMA_getImage('b_tblops.png'); ?><?php echo __('Rearrange/edit charts'); ?></a>        <div class="clearfloat paddingtop"></div>        <div class="floatleft">            <?php            echo __('Refresh rate') . '<br />';            refreshList('gridChartRefresh', 5, Array(2, 3, 4, 5, 10, 20, 40, 60, 120, 300, 600, 1200));        ?><br />        </div>        <div class="floatleft">            <?php echo __('Chart columns'); ?> <br />            <select name="chartColumns">                <option>1</option>                <option>2</option>                <option>3</option>                <option>4</option>                <option>5</option>                <option>6</option>                <option>7</option>                <option>8</option>                <option>9</option>                <option>10</option>            </select>        </div>        <div class="clearfloat paddingtop">        <b><?php echo __('Chart arrangement'); ?></b> <?php echo PMA_showHint(__('The arrangement of the charts is stored to the browsers local storage. You may want to export it if you have a complicated set up.')); ?><br/>        <a href="#importMonitorConfig"><?php echo __('Import'); ?></a>&nbsp;&nbsp;<a href="#exportMonitorConfig"><?php echo __('Export'); ?></a>&nbsp;&nbsp;<a href="#clearMonitorConfig"><?php echo __('Reset to default'); ?></a>        </div>    </div>    <div id="monitorInstructionsDialog" title="<?php echo __('Monitor Instructions'); ?>" style="display:none;">        <?php echo __('The phpMyAdmin Monitor can assist you in optimizing the server configuration and track down time intensive queries. For the latter you will need to set log_output to \'TABLE\' and have either the slow_query_log or general_log enabled. Note however, that the general_log produces a lot of data and increases server load by up to 15%'); ?>    <?php if (PMA_MYSQL_INT_VERSION < 50106) { ?>        <p>        <?php echo PMA_getImage('s_attention.png'); ?>        <?php            echo __('Unfortunately your Database server does not support logging to table, which is a requirement for analyzing the database logs with phpMyAdmin. Logging to table is supported by MySQL 5.1.6 and onwards. You may still use the server charting features however.');        ?>        </p>    <?php    } else {    ?>        <p></p>        <img class="ajaxIcon" src="<?php echo $GLOBALS['pmaThemeImage']; ?>ajax_clock_small.gif" alt="Loading" />        <div class="ajaxContent"></div>        <div class="monitorUse" style="display:none;">            <p></p>            <?php                echo '<strong>';                echo __('Using the monitor:');                echo '</strong><p>';                echo __('Your browser will refresh all displayed charts in a regular interval. You may add charts and change the refresh rate under \'Settings\', or remove any chart using the cog icon on each respective chart.');                echo '</p><p>';                echo __('To display queries from the logs, select the relevant time span on any chart by holding down the left mouse button and panning over the chart. Once confirmed, this will load a table of grouped queries, there you may click on any occuring SELECT statements to further analyze them.');                echo '</p>';            ?>            <p>            <?php echo PMA_getImage('s_attention.png'); ?>            <?php                echo '<strong>';                echo __('Please note:');                echo '</strong><br />';                echo __('Enabling the general_log may increase the server load by 5-15%. Also be aware that generating statistics from the logs is a load intensive task, so it is advisable to select only a small time span and to disable the general_log and empty its table once monitoring is not required any more.');            ?>            </p>        </div>    <?php } ?>    </div>    <div id="addChartDialog" title="<?php echo __('Add chart'); ?>" style="display:none;">        <div id="tabGridVariables">            <p><input type="text" name="chartTitle" value="<?php echo __('Chart Title'); ?>" /></p>            <input type="radio" name="chartType" value="preset" id="chartPreset" />            <label for="chartPreset"><?php echo __('Preset chart'); ?></label>            <select name="presetCharts"></select><br/>            <input type="radio" name="chartType" value="variable" id="chartStatusVar" checked="checked" />            <label for="chartStatusVar"><?php echo __('Status variable(s)'); ?></label><br/>            <div id="chartVariableSettings">                <label for="chartSeries"><?php echo __('Select series:'); ?></label><br />                <select id="chartSeries" name="varChartList" size="1">                    <option><?php echo __('Commonly monitored'); ?></option>                    <option>Processes</option>                    <option>Questions</option>                    <option>Connections</option>                    <option>Bytes_sent</option>                    <option>Bytes_received</option>                    <option>Threads_connected</option>                    <option>Created_tmp_disk_tables</option>                    <option>Handler_read_first</option>                    <option>Innodb_buffer_pool_wait_free</option>                    <option>Key_reads</option>                    <option>Open_tables</option>                    <option>Select_full_join</option>                    <option>Slow_queries</option>                </select><br />                <label for="variableInput"><?php echo __('or type variable name:'); ?> </label>                <input type="text" name="variableInput" id="variableInput" />                <p></p>                <input type="checkbox" name="differentialValue" id="differentialValue" value="differential" checked="checked" />                <label for="differentialValue"><?php echo __('Display as differential value'); ?></label><br />                <input type="checkbox" id="useDivisor" name="useDivisor" value="1" />                <label for="useDivisor"><?php echo __('Apply a divisor'); ?></label>                <span class="divisorInput" style="display:none;">                    <input type="text" name="valueDivisor" size="4" value="1" />                    (<a href="#kibDivisor"><?php echo __('KiB'); ?></a>, <a href="#mibDivisor"><?php echo __('MiB'); ?></a>)                </span><br />                <input type="checkbox" id="useUnit" name="useUnit" value="1" />                <label for="useUnit"><?php echo __('Append unit to data values'); ?></label>                <span class="unitInput" style="display:none;">                    <input type="text" name="valueUnit" size="4" value="" />                </span>                <p>                    <a href="#submitAddSeries"><b><?php echo __('Add this series'); ?></b></a>                    <span id="clearSeriesLink" style="display:none;">                       | <a href="#submitClearSeries"><?php echo __('Clear series'); ?></a>                    </span>                </p>                <?php echo __('Series in Chart:'); ?><br/>                <span id="seriesPreview">                <i><?php echo __('None'); ?></i>                </span>            </div>        </div>    </div>    <!-- For generic use -->    <div id="emptyDialog" title="Dialog" style="display:none;">    </div>    <?php if (!PMA_DRIZZLE) { ?>    <div id="logAnalyseDialog" title="<?php echo __('Log statistics'); ?>" style="display:none;">        <p> <?php echo __('Selected time range:'); ?>        <input type="text" name="dateStart" class="datetimefield" value="" /> -        <input type="text" name="dateEnd" class="datetimefield" value="" /></p>        <input type="checkbox" id="limitTypes" value="1" checked="checked" />        <label for="limitTypes">            <?php echo __('Only retrieve SELECT,INSERT,UPDATE and DELETE Statements'); ?>        </label>        <br/>        <input type="checkbox" id="removeVariables" value="1" checked="checked" />        <label for="removeVariables">            <?php echo __('Remove variable data in INSERT statements for better grouping'); ?>        </label>        <?php        echo '<p>';        echo __('Choose from which log you want the statistics to be generated from.');        echo '</p><p>';        echo __('Results are grouped by query text.');        echo '</p>';        ?>    </div>    <div id="queryAnalyzerDialog" title="<?php echo __('Query analyzer'); ?>" style="display:none;">        <textarea id="sqlquery"> </textarea>        <p></p>        <div class="placeHolder"></div>    </div>    <?php } ?>    <table border="0" class="clearfloat" id="chartGrid">    </table>    <div id="logTable">        <br/>    </div>    <script type="text/javascript">        variableNames = [ <?php            $i=0;            foreach ($server_status as $name=>$value) {                if (is_numeric($value)) {                    if ($i++ > 0) {                        echo ", ";                    }                    echo "'" . $name . "'";                }            }            ?> ];    </script><?php}/* Builds a <select> list for refresh rates */function refreshList($name, $defaultRate=5, $refreshRates=Array(1, 2, 5, 10, 20, 40, 60, 120, 300, 600)){?>    <select name="<?php echo $name; ?>" id="id_<?php echo $name; ?>">        <?php            foreach ($refreshRates as $rate) {                $selected = ($rate == $defaultRate)?' selected="selected"':'';                if ($rate<60) {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d second', '%d seconds', $rate), $rate) . '</option>';                } else {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d minute', '%d minutes', $rate/60), $rate/60) . '</option>';                }            }        ?>    </select><?php}/** * cleanup of some deprecated values * * @param array &$server_status */function cleanDeprecated(&$server_status){    $deprecated = array(        'Com_prepare_sql' => 'Com_stmt_prepare',        'Com_execute_sql' => 'Com_stmt_execute',        'Com_dealloc_sql' => 'Com_stmt_close',    );    foreach ($deprecated as $old => $new) {        if (isset($server_status[$old]) && isset($server_status[$new])) {            unset($server_status[$old]);        }    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build SQL dumps of tables * * @package PhpMyAdmin-Export * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_sql       = false;    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;        $hide_sql       = true;    }    if (!$hide_sql) {        $plugin_list['sql'] = array(            'text' => __('SQL'),            'extension' => 'sql',            'mime_type' => 'text/x-sql',            'options' => array());        $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'general_opts');        /* comments */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'bool',                'name' => 'include_comments',                'text' => __('Display comments <i>(includes info such as export timestamp, PHP version, and server version)</i>')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'header_comment',            'text' => __('Additional custom header comment (\n splits lines):')            );        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'dates',            'text' => __('Include a timestamp of when databases were created, last updated, and last checked')            );        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'relation',                'text' => __('Display foreign key relationships')                );        }        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'mime',                'text' => __('Display MIME types')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end comments */        /* enclose in a transaction */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'use_transaction',            'text' => __('Enclose export in a transaction'),            'doc' => array('programs', 'mysqldump', 'option_mysqldump_single-transaction')            );        /* disable foreign key checks */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'disable_fk',            'text' => __('Disable foreign key checks'),            'doc' => array(                'manual_MySQL_Database_Administration',                'server-system-variables',                'sysvar_foreign_key_checks')            );        $plugin_list['sql']['options_text'] = __('Options');        /* compatibility maximization */        $compats = PMA_DBI_getCompatibilities();        if (count($compats) > 0) {            $values = array();            foreach ($compats as $val) {                $values[$val] = $val;            }            $plugin_list['sql']['options'][] = array(                'type' => 'select',                'name' => 'compatibility',                'text' => __('Database system or older MySQL server to maximize output compatibility with:'),                'values' => $values,                'doc' => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode')                );            unset($values);        }        /* server export options */        if ($plugin_param['export_type'] == 'server') {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_database',                'text' => sprintf(__('Add %s statement'), '<code>DROP DATABASE</code>')                );         }        /* what to dump (structure/data/both) */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Dump table')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'structure_or_data',            'values' => array(                'structure' => __('structure'),                'data' => __('data'),                'structure_and_data' => __('structure and data')            ));        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        $plugin_list['sql']['options'][] = array('type' => 'end_group');        /* begin Structure options */        if (!$hide_structure) {            $plugin_list['sql']['options'][] = array(                'type' => 'begin_group',                'name' => 'structure',                'text' => __('Object creation options'),                'force' => 'data'                );            /* begin SQL Statements */            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'message_only',                    'name' => 'add_statements',                    'text' => __('Add statements:')                ));            if ($plugin_param['export_type'] == 'table') {                if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {                    $drop_clause = '<code>DROP VIEW</code>';                } else {                    $drop_clause = '<code>DROP TABLE</code>';                }            } else {                if (PMA_DRIZZLE) {                    $drop_clause = '<code>DROP TABLE</code>';                } else {                    $drop_clause = '<code>DROP TABLE / VIEW / PROCEDURE / FUNCTION</code>';                    if (PMA_MYSQL_INT_VERSION > 50100) {                        $drop_clause .= '<code> / EVENT</code>';                    }                }            }            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_table',                'text' => sprintf(__('Add %s statement'), $drop_clause)                );            // Drizzle doesn't support procedures and functions            if (!PMA_DRIZZLE) {                $plugin_list['sql']['options'][] = array(                    'type' => 'bool',                    'name' => 'procedure_function',                    'text' => sprintf(__('Add %s statement'), '<code>CREATE PROCEDURE / FUNCTION' . (PMA_MYSQL_INT_VERSION > 50100 ? ' / EVENT</code>' : '</code>'))                    );            }            /* begin CREATE TABLE statements*/            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'bool',                    'name' => 'create_table_statements',                    'text' => __('<code>CREATE TABLE</code> options:')                ));            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'if_not_exists',                'text' => '<code>IF NOT EXISTS</code>'                );            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'auto_increment',                'text' => '<code>AUTO_INCREMENT</code>'                );            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end CREATE TABLE statements */            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end SQL statements */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'backquotes',                'text' => __('Enclose table and column names with backquotes <i>(Protects column and table names formed with special characters or keywords)</i>')                );            $plugin_list['sql']['options'][] = array('type' => 'end_group');        }        /* end Structure options */        /* begin Data options */         $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'data',            'text' => __('Data dump options'),            'force' => 'structure'            );        /* begin SQL statements */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Instead of <code>INSERT</code> statements, use:')            ));        // Not supported in Drizzle        if (!PMA_DRIZZLE) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'delayed',                'text' => __('<code>INSERT DELAYED</code> statements'),                'doc' => array('manual_MySQL_Database_Administration', 'insert_delayed')                );        }        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'ignore',            'text' => __('<code>INSERT IGNORE</code> statements'),            'doc' => array('manual_MySQL_Database_Administration', 'insert')            );        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end SQL statements */        /* Function to use when dumping data */        $plugin_list['sql']['options'][] = array(            'type' => 'select',            'name' => 'type',            'text' => __('Function to use when dumping data:'),            'values' => array(                'INSERT' => 'INSERT',                'UPDATE' => 'UPDATE',                'REPLACE' => 'REPLACE'                )            );        /* Syntax to use when inserting data */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Syntax to use when inserting data:')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'insert_syntax',            'values' => array(                'complete' => __('include column names in every <code>INSERT</code> statement <br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B,col_C) VALUES (1,2,3)</code>'),                'extended' => __('insert multiple rows in every <code>INSERT</code> statement<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'both' => __('both of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B) VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'none' => __('neither of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3)</code>')            ));          $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* Max length of query */        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'max_query_size',            'text' => __('Maximal length of created query')            );        /* Dump binary columns in hexadecimal */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'hex_for_blob',            'text' => __('Dump binary columns in hexadecimal notation <i>(for example, "abc" becomes 0x616263)</i>')            );        // Drizzle works only with UTC timezone        if (!PMA_DRIZZLE) {            /* Dump time in UTC */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'utc_time',                'text' => __('Dump TIMESTAMP columns in UTC <i>(enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones)</i>')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_group');         /* end Data options */    }} else {    /**     * Avoids undefined variables, use NULL so isset() returns false     */    if (! isset($GLOBALS['sql_backquotes'])) {        $GLOBALS['sql_backquotes'] = null;    }    /**     * Exports routines (procedures and functions)     *     * @param string  $db     * @return  bool  Whether it succeeded     *     * @access  public     */    function PMA_exportRoutines($db) {        global $crlf;        $text = '';        $delimiter = '$$';        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($procedure_names || $function_names) {            $text .= $crlf                . 'DELIMITER ' . $delimiter . $crlf;        }        if ($procedure_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Procedures'))              . PMA_exportComment();            foreach ($procedure_names as $procedure_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP PROCEDURE IF EXISTS '                        . PMA_backquote($procedure_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($function_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Functions'))              . PMA_exportComment();            foreach ($function_names as $function_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP FUNCTION IF EXISTS '                        . PMA_backquote($function_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'FUNCTION', $function_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($procedure_names || $function_names) {            $text .= 'DELIMITER ;' . $crlf;        }        if (! empty($text)) {            return PMA_exportOutputHandler($text);        } else {            return false;        }    }    /**     * Possibly outputs comment     *     * @param string  $text  Text of comment     * @return  string      The formatted comment     *     * @access  private     */    function PMA_exportComment($text = '')    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            // see http://dev.mysql.com/doc/refman/5.0/en/ansi-diff-comments.html            return '--' . (empty($text) ? '' : ' ') . $text . $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Possibly outputs CRLF     *     * @return  string  $crlf or nothing     *     * @access private     */    function PMA_possibleCRLF()    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            return $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $crlf;        global $mysql_charset_map;        $foot = '';        if (isset($GLOBALS['sql_disable_fk'])) {            $foot .=  'SET FOREIGN_KEY_CHECKS=1;' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $foot .=  'COMMIT;' . $crlf;        }        // restore connection settings        $charset_of_file = isset($GLOBALS['charset_of_file']) ? $GLOBALS['charset_of_file'] : '';        if (!empty($GLOBALS['asfile']) && isset($mysql_charset_map[$charset_of_file]) && !PMA_DRIZZLE) {            $foot .=  $crlf                    . '/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;' . $crlf                    . '/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;' . $crlf                    . '/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;' . $crlf;        }        /* Restore timezone */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            PMA_DBI_query('SET time_zone = "' . $GLOBALS['old_tz'] . '"');        }        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $mysql_charset_map;        if (isset($GLOBALS['sql_compatibility'])) {            $tmp_compat = $GLOBALS['sql_compatibility'];            if ($tmp_compat == 'NONE') {                $tmp_compat = '';            }            PMA_DBI_try_query('SET SQL_MODE="' . $tmp_compat . '"');            unset($tmp_compat);        }        $head  =  PMA_exportComment('phpMyAdmin SQL Dump')               .  PMA_exportComment('version ' . PMA_VERSION)               .  PMA_exportComment('http://www.phpmyadmin.net')               .  PMA_exportComment();        $host_string = __('Host') . ': ' .  $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {            $host_string .= ':' . $cfg['Server']['port'];        }        $head .= PMA_exportComment($host_string);        $head .= PMA_exportComment(__('Generation Time')              . ': ' .  PMA_localisedDate())              .  PMA_exportComment(__('Server version') . ': ' . PMA_MYSQL_STR_VERSION)              .  PMA_exportComment(__('PHP Version') . ': ' . phpversion())              .  PMA_possibleCRLF();        if (isset($GLOBALS['sql_header_comment']) && !empty($GLOBALS['sql_header_comment'])) {            // '\n' is not a newline (like "\n" would be), it's the characters            // backslash and n, as explained on the export interface            $lines = explode('\n', $GLOBALS['sql_header_comment']);            $head .= PMA_exportComment();            foreach ($lines as $one_line) {                $head .= PMA_exportComment($one_line);            }            $head .= PMA_exportComment();        }        if (isset($GLOBALS['sql_disable_fk'])) {            $head .= 'SET FOREIGN_KEY_CHECKS=0;' . $crlf;        }        /* We want exported AUTO_INCREMENT columns to have still same value, do this only for recent MySQL exports */        if ((!isset($GLOBALS['sql_compatibility']) || $GLOBALS['sql_compatibility'] == 'NONE')                && !PMA_DRIZZLE) {            $head .= 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $head .= 'SET AUTOCOMMIT=0;' . $crlf                   . 'START TRANSACTION;' . $crlf;        }        /* Change timezone if we should export timestamps in UTC */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            $head .= 'SET time_zone = "+00:00";' . $crlf;            $GLOBALS['old_tz'] = PMA_DBI_fetch_value('SELECT @@session.time_zone');            PMA_DBI_query('SET time_zone = "+00:00"');        }        $head .= PMA_possibleCRLF();        if (! empty($GLOBALS['asfile']) && !PMA_DRIZZLE) {            // we are saving as file, therefore we provide charset information            // so that a utility like the mysql client can interpret            // the file correctly            if (isset($GLOBALS['charset_of_file']) && isset($mysql_charset_map[$GLOBALS['charset_of_file']])) {                // we got a charset from the export dialog                $set_names = $mysql_charset_map[$GLOBALS['charset_of_file']];            } else {                // by default we use the connection charset                $set_names = $mysql_charset_map['utf-8'];            }            $head .=  $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;' . $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;' . $crlf                   . '/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;' . $crlf                   . '/*!40101 SET NAMES ' . $set_names . ' */;' . $crlf . $crlf;        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        global $crlf;        if (isset($GLOBALS['sql_drop_database'])) {            if (!PMA_exportOutputHandler('DROP DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db) . ';' . $crlf)) {                return false;            }        }        $create_query = 'CREATE DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db);        $collation = PMA_getDbCollation($db);        if (PMA_DRIZZLE) {            $create_query .= ' COLLATE ' . $collation;        } else {            if (strpos($collation, '_')) {                $create_query .= ' DEFAULT CHARACTER SET ' . substr($collation, 0, strpos($collation, '_')) . ' COLLATE ' . $collation;            } else {                $create_query .= ' DEFAULT CHARACTER SET ' . $collation;            }        }        $create_query .= ';' . $crlf;        if (!PMA_exportOutputHandler($create_query)) {            return false;        }        if (isset($GLOBALS['sql_backquotes'])                && ((isset($GLOBALS['sql_compatibility']) && $GLOBALS['sql_compatibility'] == 'NONE') || PMA_DRIZZLE)) {            $result = PMA_exportOutputHandler('USE ' . PMA_backquote($db) . ';' . $crlf);        } else {            $result = PMA_exportOutputHandler('USE ' . $db . ';' . $crlf);        }        return $result;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        $head = PMA_exportComment()              . PMA_exportComment(__('Database') . ': ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : '\'' . $db . '\''))              . PMA_exportComment();        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        $result = true;        if (isset($GLOBALS['sql_constraints'])) {            $result = PMA_exportOutputHandler($GLOBALS['sql_constraints']);            unset($GLOBALS['sql_constraints']);        }        if (($GLOBALS['sql_structure_or_data'] == 'structure' || $GLOBALS['sql_structure_or_data'] == 'structure_and_data') && isset($GLOBALS['sql_procedure_function'])) {            $text = '';            $delimiter = '$$';            if (PMA_MYSQL_INT_VERSION > 50100) {                $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            } else {                $event_names = array();            }            if ($event_names) {                $text .= $crlf                  . 'DELIMITER ' . $delimiter . $crlf;                $text .=                    PMA_exportComment()                  . PMA_exportComment(__('Events'))                  . PMA_exportComment();                foreach ($event_names as $event_name) {                    if (! empty($GLOBALS['sql_drop_table'])) {                $text .= 'DROP EVENT ' . PMA_backquote($event_name) . $delimiter . $crlf;                    }                    $text .= PMA_DBI_get_definition($db, 'EVENT', $event_name) . $delimiter . $crlf . $crlf;                }                $text .= 'DELIMITER ;' . $crlf;            }            if (! empty($text)) {                $result = PMA_exportOutputHandler($text);            }        }        return $result;    }    /**     * Returns a stand-in CREATE definition to resolve view dependencies     *     * @param string  $db    the database name     * @param string  $view  the view name     * @param string  $crlf  the end of line sequence     * @return  string         resulting definition     *     * @access  public     */    function PMA_getTableDefStandIn($db, $view, $crlf) {        $create_query = '';        if (! empty($GLOBALS['sql_drop_table'])) {            $create_query .= 'DROP VIEW IF EXISTS ' . PMA_backquote($view) . ';' . $crlf;        }        $create_query .= 'CREATE TABLE ';        if (isset($GLOBALS['sql_if_not_exists']) && $GLOBALS['sql_if_not_exists']) {            $create_query .= 'IF NOT EXISTS ';        }        $create_query .= PMA_backquote($view) . ' (' . $crlf;        $tmp = array();        $columns = PMA_DBI_get_columns_full($db, $view);        foreach ($columns as $column_name => $definition) {            $tmp[] = PMA_backquote($column_name) . ' ' . $definition['Type'] . $crlf;        }        $create_query .= implode(',', $tmp) . ');';        return($create_query);    }    /**     * Returns $table's CREATE definition     *     * @param string  $db             the database name     * @param string  $table          the table name     * @param string  $crlf           the end of line sequence     * @param string  $error_url      the url to go back in case of error     * @param bool    $show_dates     whether to include creation/update/check dates     * @param bool    $add_semicolon  whether to add semicolon and end-of-line at the end     * @param bool    $view           whether we're handling a view     * @return  string   resulting schema     *     * @access  public     */    function PMA_getTableDef($db, $table, $crlf, $error_url, $show_dates = false, $add_semicolon = true, $view = false)    {        global $sql_drop_table;        global $sql_backquotes;        global $sql_constraints;        global $sql_constraints_query; // just the text of the query        global $sql_drop_foreign_keys;        $schema_create = '';        $auto_increment = '';        $new_crlf = $crlf;        // need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli        $result = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\'', null, PMA_DBI_QUERY_STORE);        if ($result != false) {            if (PMA_DBI_num_rows($result) > 0) {                $tmpres        = PMA_DBI_fetch_assoc($result);                if (PMA_DRIZZLE && $show_dates) {                    // Drizzle doesn't give Create_time and Update_time in SHOW TABLE STATUS, add it                    $sql ="SELECT                            TABLE_CREATION_TIME AS Create_time,                            TABLE_UPDATE_TIME AS Update_time                        FROM data_dictionary.TABLES                        WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                          AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'";                    $tmpres = array_merge(PMA_DBI_fetch_single_row($sql), $tmpres);                }                // Here we optionally add the AUTO_INCREMENT next value,                // but starting with MySQL 5.0.24, the clause is already included                // in SHOW CREATE TABLE so we'll remove it below                // It's required for Drizzle because SHOW CREATE TABLE uses                // the value from table's creation time                if (isset($GLOBALS['sql_auto_increment']) && !empty($tmpres['Auto_increment'])) {                    $auto_increment .= ' AUTO_INCREMENT=' . $tmpres['Auto_increment'] . ' ';                }                if ($show_dates && isset($tmpres['Create_time']) && !empty($tmpres['Create_time'])) {                    $schema_create .= PMA_exportComment(__('Creation') . ': ' . PMA_localisedDate(strtotime($tmpres['Create_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Update_time']) && !empty($tmpres['Update_time'])) {                    $schema_create .= PMA_exportComment(__('Last update') . ': ' . PMA_localisedDate(strtotime($tmpres['Update_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Check_time']) && !empty($tmpres['Check_time'])) {                    $schema_create .= PMA_exportComment(__('Last check') . ': ' . PMA_localisedDate(strtotime($tmpres['Check_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }            }            PMA_DBI_free_result($result);        }        $schema_create .= $new_crlf;        // no need to generate a DROP VIEW here, it was done earlier        if (! empty($sql_drop_table) && ! PMA_Table::isView($db, $table)) {            $schema_create .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table, $sql_backquotes) . ';' . $crlf;        }        // Complete table dump,        // Whether to quote table and column names or not        // Drizzle always quotes names        if (!PMA_DRIZZLE) {            if ($sql_backquotes) {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 1');            } else {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 0');            }        }        // I don't see the reason why this unbuffered query could cause problems,        // because SHOW CREATE TABLE returns only one row, and we free the        // results below. Nonetheless, we got 2 user reports about this        // (see bug 1562533) so I remove the unbuffered mode.        //$result = PMA_DBI_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), null, PMA_DBI_QUERY_UNBUFFERED);        //        // Note: SHOW CREATE TABLE, at least in MySQL 5.1.23, does not        // produce a displayable result for the default value of a BIT        // column, nor does the mysqldump command. See MySQL bug 35796        $result = PMA_DBI_try_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table));        // an error can happen, for example the table is crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportComment(__('in use') . '(' . $tmp_error . ')');        }        if ($result != false && ($row = PMA_DBI_fetch_row($result))) {            $create_query = $row[1];            unset($row);            // Convert end of line chars to one that we want (note that MySQL doesn't return query it will accept in all cases)            if (strpos($create_query, "(\r\n ")) {                $create_query = str_replace("\r\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\n ")) {                $create_query = str_replace("\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\r ")) {                $create_query = str_replace("\r", $crlf, $create_query);            }            /*             * Drop database name from VIEW creation.             *             * This is a bit tricky, but we need to issue SHOW CREATE TABLE with             * database name, but we don't want name to show up in CREATE VIEW             * statement.             */            if ($view) {                $create_query = preg_replace('/' . PMA_backquote($db) . '\./', '', $create_query);            }            // Should we use IF NOT EXISTS?            if (isset($GLOBALS['sql_if_not_exists'])) {                $create_query     = preg_replace('/^CREATE TABLE/', 'CREATE TABLE IF NOT EXISTS', $create_query);            }            // Drizzle (checked on 2011.03.13) returns ROW_FORMAT surrounded with quotes, which is not accepted by parser            if (PMA_DRIZZLE) {                $create_query = preg_replace('/ROW_FORMAT=\'(\S+)\'/', 'ROW_FORMAT=$1', $create_query);            }            // are there any constraints to cut out?            if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $create_query)) {                // Split the query into lines, so we can easily handle it. We know lines are separated by $crlf (done few lines above).                $sql_lines = explode($crlf, $create_query);                $sql_count = count($sql_lines);                // lets find first line with constraints                for ($i = 0; $i < $sql_count; $i++) {                    if (preg_match('@^[\s]*(CONSTRAINT|FOREIGN[\s]+KEY)@', $sql_lines[$i])) {                        break;                    }                }                // If we really found a constraint                if ($i != $sql_count) {                    // remove , from the end of create statement                    $sql_lines[$i - 1] = preg_replace('@,$@', '', $sql_lines[$i - 1]);                    // prepare variable for constraints                    if (!isset($sql_constraints)) {                        if (isset($GLOBALS['no_constraints_comments'])) {                            $sql_constraints = '';                        } else {                            $sql_constraints = $crlf                                             . PMA_exportComment()                                             . PMA_exportComment(__('Constraints for dumped tables'))                                             . PMA_exportComment();                        }                    }                    // comments for current table                    if (!isset($GLOBALS['no_constraints_comments'])) {                        $sql_constraints .= $crlf                                          . PMA_exportComment()                                          . PMA_exportComment(__('Constraints for table') . ' ' . PMA_backquote($table))                                          . PMA_exportComment();                    }                    // let's do the work                    $sql_constraints_query .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_constraints .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_drop_foreign_keys .= 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                    $first = true;                    for ($j = $i; $j < $sql_count; $j++) {                        if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $sql_lines[$j])) {                            if (!$first) {                                $sql_constraints .= $crlf;                            }                            if (strpos($sql_lines[$j], 'CONSTRAINT') === false) {                                $tmp_str = preg_replace('/(FOREIGN[\s]+KEY)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                            } else {                                $tmp_str = preg_replace('/(CONSTRAINT)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                                preg_match('/(CONSTRAINT)([\s])([\S]*)([\s])/', $sql_lines[$j], $matches);                                if (! $first) {                                    $sql_drop_foreign_keys .= ', ';                                }                                $sql_drop_foreign_keys .= 'DROP FOREIGN KEY ' . $matches[3];                            }                            $first = false;                        } else {                            break;                        }                    }                    $sql_constraints .= ';' . $crlf;                    $sql_constraints_query .= ';';                    $create_query = implode($crlf, array_slice($sql_lines, 0, $i)) . $crlf . implode($crlf, array_slice($sql_lines, $j, $sql_count - 1));                    unset($sql_lines);                }            }            $schema_create .= $create_query;        }        // remove a possible "AUTO_INCREMENT = value" clause        // that could be there starting with MySQL 5.0.24        // in Drizzle it's useless as it contains the value given at table creation time        $schema_create = preg_replace('/AUTO_INCREMENT\s*=\s*([0-9])+/', '', $schema_create);        $schema_create .= $auto_increment;        PMA_DBI_free_result($result);        return $schema_create . ($add_semicolon ? ';' . $crlf : '');    } // end of the 'PMA_getTableDef()' function    /**     * Returns $table's comments, relations etc.     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         end of line sequence     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_mime      whether to include mime comments     * @return  string   resulting comments     *     * @access  private     */    function PMA_getTableComments($db, $table, $crlf, $do_relation = false, $do_mime = false)    {        global $cfgRelation;        global $sql_backquotes;        global $sql_constraints;        $schema_create = '';        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        if ($do_mime && $cfgRelation['mimework']) {            if (!($mime_map = PMA_getMIME($db, $table, true))) {                unset($mime_map);            }        }        if (isset($mime_map) && count($mime_map) > 0) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('MIME TYPES FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            @reset($mime_map);            foreach ($mime_map AS $mime_field => $mime) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($mime_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($mime['mimetype'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        if ($have_rel) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('RELATIONS FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            foreach ($res_rel AS $rel_field => $rel) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($rel_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($rel['foreign_table'], $sql_backquotes)                                . ' -> ' . PMA_backquote($rel['foreign_field'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        return $schema_create;    } // end of the 'PMA_getTableComments()' function    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $relation     whether to include relation comments     * @param bool    $comments     whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $mime         whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $relation = false, $comments = false, $mime = false, $dates = false, $export_mode, $export_type)    {        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        $dump = PMA_possibleCRLF()              . PMA_exportComment(str_repeat('-', 56))              . PMA_possibleCRLF()              . PMA_exportComment();        switch($export_mode) {            case 'create_table':                $dump .= PMA_exportComment(__('Table structure for table') . ' ' . $formatted_table_name);                $dump .= PMA_exportComment();                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates);                $dump .= PMA_getTableComments($db, $table, $crlf, $relation, $mime);                break;            case 'triggers':                $dump = '';                $triggers = PMA_DBI_get_triggers($db, $table);                if ($triggers) {                    $dump .=  PMA_possibleCRLF()                            . PMA_exportComment()                            . PMA_exportComment(__('Triggers') . ' ' . $formatted_table_name)                            . PMA_exportComment();                    $delimiter = '//';                    foreach ($triggers as $trigger) {                        $dump .= $trigger['drop'] . ';' . $crlf;                        $dump .= 'DELIMITER ' . $delimiter . $crlf;                        $dump .= $trigger['create'];                        $dump .= 'DELIMITER ;' . $crlf;                    }                }                break;            case 'create_view':                $dump .= PMA_exportComment(__('Structure for view') . ' ' . $formatted_table_name)                       . PMA_exportComment();                // delete the stand-in table previously created (if any)                if ($export_type != 'table') {                    $dump .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table) . ';' . $crlf;                }                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates, true, true);                break;            case 'stand_in':                $dump .=  PMA_exportComment(__('Stand-in structure for view') . ' ' . $formatted_table_name)                        . PMA_exportComment();                // export a stand-in definition to resolve view dependencies                $dump .= PMA_getTableDefStandIn($db, $table, $crlf);        } // end switch        // this one is built by PMA_getTableDef() to use in table copy/move        // but not in the case of export        unset($GLOBALS['sql_constraints_query']);        return PMA_exportOutputHandler($dump);    }    /**     * Outputs the content of a table in SQL format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $sql_backquotes;        global $current_row;        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        // Do not export data for a VIEW        // (For a VIEW, this is called only when exporting a single VIEW)        if (PMA_Table::isView($db, $table)) {            $head = PMA_possibleCRLF()              . PMA_exportComment()              . PMA_exportComment('VIEW ' . ' ' . $formatted_table_name)              . PMA_exportComment(__('Data') . ': ' . __('None'))              . PMA_exportComment()              . PMA_possibleCRLF();            if (! PMA_exportOutputHandler($head)) {                return false;            }            return true;        }        // analyze the query to get the true column names, not the aliases        // (this fixes an undefined index, also if Complete inserts        //  are used, we did not get the true column name in case of aliases)        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($sql_query));        $result = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        // a possible error: the table has crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportOutputHandler(PMA_exportComment(__('Error reading data:') . ' (' . $tmp_error . ')'));        }        if ($result != false) {            $fields_cnt = PMA_DBI_num_fields($result);            // Get field information            $fields_meta = PMA_DBI_get_fields_meta($result);            $field_flags = array();            for ($j = 0; $j < $fields_cnt; $j++) {                $field_flags[$j] = PMA_DBI_field_flags($result, $j);            }            for ($j = 0; $j < $fields_cnt; $j++) {                if (isset($analyzed_sql[0]['select_expr'][$j]['column'])) {                    $field_set[$j] = PMA_backquote($analyzed_sql[0]['select_expr'][$j]['column'], $sql_backquotes);                } else {                    $field_set[$j] = PMA_backquote($fields_meta[$j]->name, $sql_backquotes);                }            }            if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                // update                $schema_insert  = 'UPDATE ';                if (isset($GLOBALS['sql_ignore'])) {                    $schema_insert .= 'IGNORE ';                }                // avoid EOL blank                $schema_insert .= PMA_backquote($table, $sql_backquotes) . ' SET';            } else {                // insert or replace                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'REPLACE') {                    $sql_command = 'REPLACE';                } else {                    $sql_command = 'INSERT';                }                // delayed inserts?                if (isset($GLOBALS['sql_delayed'])) {                    $insert_delayed = ' DELAYED';                } else {                    $insert_delayed = '';                }                // insert ignore?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'INSERT' && isset($GLOBALS['sql_ignore'])) {                    $insert_delayed .= ' IGNORE';                }                // scheme for inserting fields                if ($GLOBALS['sql_insert_syntax'] == 'complete' || $GLOBALS['sql_insert_syntax'] == 'both') {                    $fields        = implode(', ', $field_set);                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                // avoid EOL blank                                   . ' (' . $fields . ') VALUES';                } else {                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                                   . ' VALUES';                }            }            $search      = array("\x00", "\x0a", "\x0d", "\x1a"); //\x08\\x09, not required            $replace     = array('\0', '\n', '\r', '\Z');            $current_row = 0;            $query_size  = 0;            if (($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') && (!isset($GLOBALS['sql_type']) || $GLOBALS['sql_type'] != 'UPDATE')) {                $separator    = ',';                $schema_insert .= $crlf;            } else {                $separator    = ';';            }            while ($row = PMA_DBI_fetch_row($result)) {                if ($current_row == 0) {                    $head = PMA_possibleCRLF()                          . PMA_exportComment()                          . PMA_exportComment(__('Dumping data for table') . ' ' . $formatted_table_name)                          . PMA_exportComment()                          . $crlf;                    if (! PMA_exportOutputHandler($head)) {                        return false;                    }                }                $current_row++;                for ($j = 0; $j < $fields_cnt; $j++) {                    // NULL                    if (!isset($row[$j]) || is_null($row[$j])) {                        $values[] = 'NULL';                    // a number                    // timestamp is numeric on some MySQL 4.1, BLOBs are sometimes numeric                    } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp'                            && ! $fields_meta[$j]->blob) {                        $values[] = $row[$j];                    // a true BLOB                    // - mysqldump only generates hex data when the --hex-blob                    //   option is used, for fields having the binary attribute                    //   no hex is generated                    // - a TEXT field returns type blob but a real blob                    //   returns also the 'binary' flag                    } elseif (stristr($field_flags[$j], 'BINARY')                            && $fields_meta[$j]->blob                            && isset($GLOBALS['sql_hex_for_blob'])) {                        // empty blobs need to be different, but '0' is also empty :-(                        if (empty($row[$j]) && $row[$j] != '0') {                            $values[] = '\'\'';                        } else {                            $values[] = '0x' . bin2hex($row[$j]);                        }                    // detection of 'bit' works only on mysqli extension                    } elseif ($fields_meta[$j]->type == 'bit') {                        $values[] = "b'" . PMA_sqlAddSlashes(PMA_printable_bit_value($row[$j], $fields_meta[$j]->length)) . "'";                    // something else -> treat as a string                    } else {                        $values[] = '\'' . str_replace($search, $replace, PMA_sqlAddSlashes($row[$j])) . '\'';                    } // end if                } // end for                // should we make update?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                    $insert_line = $schema_insert;                    for ($i = 0; $i < $fields_cnt; $i++) {                        if (0 == $i) {                            $insert_line .= ' ';                        }                        if ($i > 0) {                            // avoid EOL blank                            $insert_line .= ',';                        }                        $insert_line .= $field_set[$i] . ' = ' . $values[$i];                    }                    list($tmp_unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $row);                    $insert_line .= ' WHERE ' . $tmp_unique_condition;                    unset($tmp_unique_condition, $tmp_clause_is_unique);                } else {                    // Extended inserts case                    if ($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') {                        if ($current_row == 1) {                            $insert_line  = $schema_insert . '(' . implode(', ', $values) . ')';                        } else {                            $insert_line  = '(' . implode(', ', $values) . ')';                            if (isset($GLOBALS['sql_max_query_size']) && $GLOBALS['sql_max_query_size'] > 0 && $query_size + strlen($insert_line) > $GLOBALS['sql_max_query_size']) {                                if (!PMA_exportOutputHandler(';' . $crlf)) {                                    return false;                                }                                $query_size = 0;                                $current_row = 1;                                $insert_line = $schema_insert . $insert_line;                            }                        }                        $query_size += strlen($insert_line);                    }                    // Other inserts case                    else {                        $insert_line = $schema_insert . '(' . implode(', ', $values) . ')';                    }                }                unset($values);                if (!PMA_exportOutputHandler(($current_row == 1 ? '' : $separator . $crlf) . $insert_line)) {                    return false;                }            } // end while            if ($current_row > 0) {                if (!PMA_exportOutputHandler(';' . $crlf)) {                    return false;                }            }        } // end if ($result != false)        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin Language Loading File * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Returns language name * * @param string $tmplang * @return string */function PMA_langName($tmplang){    $lang_name = ucfirst(substr(strrchr($tmplang[0], '|'), 1));    // Include native name if non empty    if (!empty($tmplang[2])) {        $lang_name = $tmplang[2] . ' - ' . $lang_name;    }    return $lang_name;}/** * tries to find the language to use * * @return  bool    success if valid lang is found, otherwise false */function PMA_langCheck(){    // check forced language    if (! empty($GLOBALS['cfg']['Lang'])) {        if (PMA_langSet($GLOBALS['cfg']['Lang'])) {            return true;        } else {            $GLOBALS['lang_failed_cfg'] = $GLOBALS['cfg']['Lang'];        }    }    // Don't use REQUEST in following code as it might be confused by cookies with same name    // check user requested language (POST)    if (! empty($_POST['lang'])) {        if (PMA_langSet($_POST['lang'])) {            return true;        } elseif (!is_string($_POST['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_POST['lang'];        }    }    // check user requested language (GET)    if (! empty($_GET['lang'])) {        if (PMA_langSet($_GET['lang'])) {            return true;        } elseif (!is_string($_GET['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_GET['lang'];        }    }    // check previous set language    if (! empty($_COOKIE['pma_lang'])) {        if (PMA_langSet($_COOKIE['pma_lang'])) {            return true;        } elseif (!is_string($_COOKIE['pma_lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_cookie'] = 'Yes';        } else {            $GLOBALS['lang_failed_cookie'] = $_COOKIE['pma_lang'];        }    }    // try to findout user's language by checking its HTTP_ACCEPT_LANGUAGE variable    if (PMA_getenv('HTTP_ACCEPT_LANGUAGE')) {        foreach (explode(',', PMA_getenv('HTTP_ACCEPT_LANGUAGE')) as $lang) {            if (PMA_langDetect($lang, 1)) {                return true;            }        }    }    // try to findout user's language by checking its HTTP_USER_AGENT variable    if (PMA_langDetect(PMA_getenv('HTTP_USER_AGENT'), 2)) {        return true;    }    // Didn't catch any valid lang : we use the default settings    if (PMA_langSet($GLOBALS['cfg']['DefaultLang'])) {        return true;    }    return false;}/** * checks given lang and sets it if valid * returns true on success, otherwise flase * * @param string  $lang   language to set * @return  bool    success */function PMA_langSet(&$lang){    /* Partial backward compatibility with 3.3 and older branches */    $lang = str_replace('-utf-8', '', $lang);    if (!is_string($lang) || empty($lang) || empty($GLOBALS['available_languages'][$lang])) {        return false;    }    $GLOBALS['lang'] = $lang;    return true;}/** * Analyzes some PHP environment variables to find the most probable language * that should be used * * @param string   string to analyze * @param integer  type of the PHP environment variable which value is $str * * @return  bool    true on success, otherwise false * * * @access  private */function PMA_langDetect($str, $envType){    if (empty($str)) {        return false;    }    if (empty($GLOBALS['available_languages'])) {        return false;    }    foreach ($GLOBALS['available_languages'] as $lang => $value) {        // $envType =  1 for the 'HTTP_ACCEPT_LANGUAGE' environment variable,        //             2 for the 'HTTP_USER_AGENT' one        $expr = $value[0];        if (strpos($expr, '[-_]') === false) {            $expr = str_replace('|', '([-_][[:alpha:]]{2,3})?|', $expr);        }        if (($envType == 1 && preg_match('/^(' . addcslashes($expr, '/') . ')(;q=[0-9]\\.[0-9])?$/i', $str))            || ($envType == 2 && preg_match('/(\(|\[|;[[:space:]])(' . addcslashes($expr, '/') . ')(;|\]|\))/i', $str))) {            if (PMA_langSet($lang)) {                return true;            }        }    }    return false;} // end of the 'PMA_langDetect()' function/** * All the supported languages have to be listed in the array below. * 1. The key must be the "official" ISO 639 language code and, if required, *    the dialect code. It can also contain some information about the *    charset (see the Russian case). * 2. The first of the values associated to the key is used in a regular *    expression to find some keywords corresponding to the language inside two *    environment variables. *    These values contain: *    - the "official" ISO language code and, if required, the dialect code *      too ('bu' for Bulgarian, 'fr([-_][[:alpha:]]{2})?' for all French *      dialects, 'zh[-_]tw' for Chinese traditional...), the dialect has to *      be specified first; *    - the '|' character (it means 'OR'); *    - the full language name. * 3. The second value associated to the key is the language code as defined by *    the RFC1766. * 4. The third value is its native name in html entities or UTF-8. * * Beware that the sorting order (first values associated to keys by * alphabetical reverse order in the array) is important: 'zh-tw' (chinese * traditional) must be detected before 'zh' (chinese simplified) for * example. * * @param string $lang * @return array */function PMA_langDetails($lang){    switch ($lang) {    case 'af':        return array('af|afrikaans', 'af', '');    case 'ar':        return array('ar|arabic', 'ar', '&#1575;&#1604;&#1593;&#1585;&#1576;&#1610;&#1577;');    case 'az':        return array('az|azerbaijani', 'az', 'Az&#601;rbaycanca');    case 'bn':        return array('bn|bangla', 'bn', '');    case 'be':        return array('be|belarusian', 'be', '&#1041;&#1077;&#1083;&#1072;&#1088;&#1091;&#1089;&#1082;&#1072;&#1103;');    case 'be@latin':        return array('be[-_]lat|belarusian latin', 'be-lat', 'Bie&#0322;aruskaja');    case 'bg':        return array('bg|bulgarian', 'bg', '&#1041;&#1098;&#1083;&#1075;&#1072;&#1088;&#1089;&#1082;&#1080;');    case 'bs':        return array('bs|bosnian', 'bs', 'Bosanski');    case 'br':        return array('br|breton', 'br', 'Brezhoneg');    case 'ca':        return array('ca|catalan', 'ca', 'Catal&agrave;');    case 'cs':        return array('cs|czech', 'cs', 'etina');    case 'cy':        return array('cy|welsh', 'cy', 'Cymraeg');    case 'da':        return array('da|danish', 'da', 'Dansk');    case 'de':        return array('de|german', 'de', 'Deutsch');    case 'el':        return array('el|greek', 'el', '&Epsilon;&lambda;&lambda;&eta;&nu;&iota;&kappa;&#940;');    case 'en':        return array('en|english', 'en', '');    case 'en_GB':        return array('en[_-]gb|english (United Kingdom)', 'en-gb', '');    case 'es':        return array('es|spanish', 'es', 'Espa&ntilde;ol');    case 'et':        return array('et|estonian', 'et', 'Eesti');    case 'eu':        return array('eu|basque', 'eu', 'Euskara');    case 'fa':        return array('fa|persian', 'fa', '&#1601;&#1575;&#1585;&#1587;&#1740;');    case 'fi':        return array('fi|finnish', 'fi', 'Suomi');    case 'fr':        return array('fr|french', 'fr', 'Fran&ccedil;ais');    case 'gl':        return array('gl|galician', 'gl', 'Galego');    case 'he':        return array('he|hebrew', 'he', '&#1506;&#1489;&#1512;&#1497;&#1514;');    case 'hi':        return array('hi|hindi', 'hi', '&#2361;&#2367;&#2344;&#2381;&#2342;&#2368;');    case 'hr':        return array('hr|croatian', 'hr', 'Hrvatski');    case 'hu':        return array('hu|hungarian', 'hu', 'Magyar');    case 'id':        return array('id|indonesian', 'id', 'Bahasa Indonesia');    case 'it':        return array('it|italian', 'it', 'Italiano');    case 'ja':        return array('ja|japanese', 'ja', '&#26085;&#26412;&#35486;');    case 'ko':        return array('ko|korean', 'ko', '&#54620;&#44397;&#50612;');    case 'ka':        return array('ka|georgian', 'ka', '&#4325;&#4304;&#4320;&#4311;&#4323;&#4314;&#4312;');    case 'lt':        return array('lt|lithuanian', 'lt', 'Lietuvi&#371;');    case 'lv':        return array('lv|latvian', 'lv', 'Latvie&scaron;u');    case 'mk':        return array('mk|macedonian', 'mk', 'Macedonian');    case 'mn':        return array('mn|mongolian', 'mn', '&#1052;&#1086;&#1085;&#1075;&#1086;&#1083;');    case 'ms':        return array('ms|malay', 'ms', 'Bahasa Melayu');    case 'nl':        return array('nl|dutch', 'nl', 'Nederlands');    case 'nb':        return array('nb|norwegian', 'nb', 'Norsk');    case 'pl':        return array('pl|polish', 'pl', 'Polski');    case 'pt_BR':        return array('pt[-_]br|brazilian portuguese', 'pt-BR', 'Portugu&ecirc;s');    case 'pt':        return array('pt|portuguese', 'pt', 'Portugu&ecirc;s');    case 'ro':        return array('ro|romanian', 'ro', 'Rom&acirc;n&#259;');    case 'ru':        return array('ru|russian', 'ru', '&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;');    case 'si':        return array('si|sinhala', 'si', '&#3523;&#3538;&#3458;&#3524;&#3517;');    case 'sk':        return array('sk|slovak', 'sk', 'Sloven&#269;ina');    case 'sl':        return array('sl|slovenian', 'sl', 'Sloven&scaron;&#269;ina');    case 'sq':        return array('sq|albanian', 'sq', 'Shqip');    case 'sr@latin':        return array('sr[-_]lat|serbian latin', 'sr-lat', 'Srpski');    case 'sr':        return array('sr|serbian', 'sr', '&#1057;&#1088;&#1087;&#1089;&#1082;&#1080;');    case 'sv':        return array('sv|swedish', 'sv', 'Svenska');    case 'ta':        return array('ta|tamil', 'ta', '');    case 'te':        return array('te|telugu', 'te', '');    case 'th':        return array('th|thai', 'th', '&#3616;&#3634;&#3625;&#3634;&#3652;&#3607;&#3618;');    case 'tk':        return array('tk|turkmen', 'tk', 'trkmene');    case 'tr':        return array('tr|turkish', 'tr', 'T&uuml;rk&ccedil;e');    case 'tt':        return array('tt|tatarish', 'tt', 'Tatar&ccedil;a');    case 'ug':        return array('ug|uyghur', 'ug', '');    case 'uk':        return array('uk|ukrainian', 'uk', '&#1059;&#1082;&#1088;&#1072;&#1111;&#1085;&#1089;&#1100;&#1082;&#1072;');    case 'ur':        return array('ur|urdu', 'ur', '');    case 'uz@latin':        return array('uz[-_]lat|uzbek-latin', 'uz-lat', 'O&lsquo;zbekcha');    case 'uz':        return array('uz[-_]cyr|uzbek-cyrillic', 'uz-cyr', '&#1038;&#1079;&#1073;&#1077;&#1082;&#1095;&#1072;');    case 'zh_TW':        return array('zh[-_](tw|hk)|chinese traditional', 'zh-TW', '&#20013;&#25991;');    case 'zh_CN':        return array('zh|chinese simplified', 'zh', '&#20013;&#25991;');    }    return array("$lang|$lang", $lang, $lang);}/** * Returns list of languages supported by phpMyAdmin * * @return array */function PMA_langList(){    /* We can always speak English */    $result = array('en' => PMA_langDetails('en'));    /* Check for existing directory */    if (!is_dir($GLOBALS['lang_path'])) {        return $result;    }    /* Open the directory */    $handle = @opendir($GLOBALS['lang_path']);    /* This can happen if the kit is English-only */    if ($handle === false) {        return $result;    }    /* Process all files */    while (false !== ($file = readdir($handle))) {        if ($file != "." && $file != ".." && file_exists($GLOBALS['lang_path'] . '/' . $file . '/LC_MESSAGES/phpmyadmin.mo')) {            $result[$file] = PMA_langDetails($file);        }    }    /* Close the handle */    closedir($handle);    return $result;}/** * @global string  path to the translations directory; may be absent if the kit is English-only */$GLOBALS['lang_path'] = './locale/';/** * Load gettext functions. */require_once GETTEXT_INC;/** * @global string  interface language */$GLOBALS['lang'] = 'en';/** * @global boolean whether loading lang from cfg failed */$GLOBALS['lang_failed_cfg'] = false;/** * @global boolean whether loading lang from cookie failed */$GLOBALS['lang_failed_cookie'] = false;/** * @global boolean whether loading lang from user request failed */$GLOBALS['lang_failed_request'] = false;/** * @global string text direction ltr or rtl */$GLOBALS['text_dir'] = 'ltr';/** * @global array supported languages */$GLOBALS['available_languages'] = PMA_langList();// Language filtering supportif (! empty($GLOBALS['cfg']['FilterLanguages'])) {    $new_lang = array();    foreach ($GLOBALS['available_languages'] as $key => $val) {        if (preg_match('@' . $GLOBALS['cfg']['FilterLanguages'] . '@', $key)) {            $new_lang[$key] = $val;        }    }    if (count($new_lang) > 0) {        $GLOBALS['available_languages'] = $new_lang;    }    unset($key, $val, $new_lang);}/** * @global array MySQL charsets map */$GLOBALS['mysql_charset_map'] = array(    'big5'         => 'big5',    'cp-866'       => 'cp866',    'euc-jp'       => 'ujis',    'euc-kr'       => 'euckr',    'gb2312'       => 'gb2312',    'gbk'          => 'gbk',    'iso-8859-1'   => 'latin1',    'iso-8859-2'   => 'latin2',    'iso-8859-7'   => 'greek',    'iso-8859-8'   => 'hebrew',    'iso-8859-8-i' => 'hebrew',    'iso-8859-9'   => 'latin5',    'iso-8859-13'  => 'latin7',    'iso-8859-15'  => 'latin1',    'koi8-r'       => 'koi8r',    'shift_jis'    => 'sjis',    'tis-620'      => 'tis620',    'utf-8'        => 'utf8',    'windows-1250' => 'cp1250',    'windows-1251' => 'cp1251',    'windows-1252' => 'latin1',    'windows-1256' => 'cp1256',    'windows-1257' => 'cp1257',);/* * Do the work! */if (! PMA_langCheck()) {    // fallback language    $fall_back_lang = 'en';    $line = __LINE__;    if (! PMA_langSet($fall_back_lang)) {        trigger_error('phpMyAdmin-ERROR: invalid lang code: '            . __FILE__ . '#' . $line . ', check hard coded fall back language.',            E_USER_WARNING);        // stop execution        // and tell the user that his chosen language is invalid        PMA_fatalError('Could not load any language, please check your language settings and folder.');    }}// Set locale_setlocale(LC_MESSAGES, $GLOBALS['lang']);_bindtextdomain('phpmyadmin', $GLOBALS['lang_path']);_bind_textdomain_codeset('phpmyadmin', 'UTF-8');_textdomain('phpmyadmin');/** * Messages for phpMyAdmin. * * These messages are here for easy transition to Gettext. * You should not add any messages here, use instead gettext directly * in your template/PHP file. */if (! function_exists('__')) {    die('Bad invocation!');}/* l10n: Text direction, use either ltr or rtl */$GLOBALS['text_dir'] = __('ltr');/* TCPDF */$GLOBALS['l'] = array();/* TCPDF settings */$GLOBALS['l']['a_meta_charset'] = 'UTF-8';$GLOBALS['l']['a_meta_dir'] = $GLOBALS['text_dir'];$GLOBALS['l']['a_meta_language'] = $GLOBALS['lang'];/* TCPDF translations */$GLOBALS['l']['w_page'] = __('Page number:');// now, that we have loaded the language strings we can send the errorsif ($GLOBALS['lang_failed_cfg']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cfg'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_cookie']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cookie'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_request']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_request'])),        E_USER_ERROR);}unset($line, $fall_back_lang,    $GLOBALS['lang_failed_cfg'], $GLOBALS['lang_failed_cookie'], $GLOBALS['lang_failed_request']);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays table structure infos like fields/columns, indexes, size, rows * and allows manipulation of indexes and columns/fields * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'indexes.js';/** * handle multiple field commands if required * * submit_mult_*_x comes from IE if <input type="img" ...> is used */if (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'change';} elseif (isset($_REQUEST['submit_mult_drop_x'])) {    $submit_mult = 'drop';} elseif (isset($_REQUEST['submit_mult_primary_x'])) {    $submit_mult = 'primary';} elseif (isset($_REQUEST['submit_mult_index_x'])) {    $submit_mult = 'index';} elseif (isset($_REQUEST['submit_mult_unique_x'])) {    $submit_mult = 'unique';} elseif (isset($_REQUEST['submit_mult_spatial_x'])) {    $submit_mult = 'spatial';} elseif (isset($_REQUEST['submit_mult_fulltext_x'])) {    $submit_mult = 'ftext';} elseif (isset($_REQUEST['submit_mult_browse_x'])) {    $submit_mult = 'browse';} elseif (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];} elseif (isset($_REQUEST['mult_btn']) && $_REQUEST['mult_btn'] == __('Yes')) {    $submit_mult = 'row_delete';    if (isset($_REQUEST['selected'])) {        $_REQUEST['selected_fld'] = $_REQUEST['selected'];    }}if (! empty($submit_mult) && isset($_REQUEST['selected_fld'])) {    $err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);    if ($submit_mult == 'browse') {        // browsing the table displaying only selected fields/columns        $GLOBALS['active_page'] = 'sql.php';        $sql_query = '';        foreach ($_REQUEST['selected_fld'] as $idx => $sval) {            if ($sql_query == '') {                $sql_query .= 'SELECT ' . PMA_backquote($sval);            } else {                $sql_query .=  ', ' . PMA_backquote($sval);            }        }        // what is this htmlspecialchars() for??        //$sql_query .= ' FROM ' . PMA_backquote(htmlspecialchars($table));        $sql_query .= ' FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);        include './sql.php';        exit;    } else {        // handle multiple field commands        // handle confirmation of deleting multiple fields/columns        $action = 'tbl_structure.php';        include './libraries/mult_submits.inc.php';        //require_once './libraries/header.inc.php';        //require_once './libraries/tbl_links.inc.php';        if (empty($message)) {            $message = PMA_Message::success();        }    }}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Runs common work */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_structure.php&amp;back=tbl_structure.php';$url_params['goto'] = 'tbl_structure.php';$url_params['back'] = 'tbl_structure.php';/** * Prepares the table structure display *//** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';require_once './libraries/Index.class.php';// 2. Gets table keys and retains them// @todo should be: $server->db($db)->table($table)->primary()$primary = PMA_Index::getPrimary($table, $db);$columns_with_unique_index = array();foreach (PMA_Index::getFromTable($table, $db) as $index) {    if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {        $columns = $index->getColumns();        foreach ($columns as $column_name => $dummy) {            $columns_with_unique_index[$column_name] = 1;        }    }}unset($index, $columns, $column_name, $dummy);// 3. Get fields$fields = (array) PMA_DBI_get_columns($db, $table, null, true);// Get more complete field information// For now, this is done just for MySQL 4.1.2+ new TIMESTAMP options// but later, if the analyser returns more information, it// could be executed for any MySQL version and replace// the info given by SHOW FULL COLUMNS FROM.//// We also need this to correctly learn if a TIMESTAMP is NOT NULL, since// SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL// and SHOW CREATE TABLE says NOT NULL (tested// in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));/** * prepare table infos */// action titles (image or string)$titles = array();$titles['Change']               = PMA_getIcon('b_edit.png', __('Change'));$titles['Drop']                 = PMA_getIcon('b_drop.png', __('Drop'));$titles['NoDrop']               = PMA_getIcon('b_drop.png', __('Drop'));$titles['Primary']              = PMA_getIcon('b_primary.png', __('Primary'));$titles['Index']                = PMA_getIcon('b_index.png', __('Index'));$titles['Unique']               = PMA_getIcon('b_unique.png', __('Unique'));$titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Spatial'));$titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Fulltext'));$titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Primary'));$titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Index'));$titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Unique'));$titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Spatial'));$titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Fulltext'));$titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'));// hidden action titles (image and string)$hidden_titles = array();$hidden_titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'), true);$hidden_titles['Primary']              = PMA_getIcon('b_primary.png', __('Add primary key'), true);$hidden_titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Add primary key'), true);$hidden_titles['Index']                = PMA_getIcon('b_index.png', __('Add index'), true);$hidden_titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Add index'), true);$hidden_titles['Unique']               = PMA_getIcon('b_unique.png', __('Add unique index'), true);$hidden_titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Add unique index'), true);$hidden_titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Add FULLTEXT index'), true);$hidden_titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Add FULLTEXT index'), true);/** * Displays the table structure ('show table' works correct since 3.23.03) *//* TABLE INFORMATION */// table header$i = 0;?><form method="post" action="tbl_structure.php" name="fieldsForm" id="fieldsForm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table);    echo '<input type="hidden" name="table_type" value=';    if ($db_is_information_schema) {         echo '"information_schema" />';    } else if ($tbl_is_view) {         echo '"view" />';    } else {         echo '"table" />';    } ?><table id="tablestructure" class="data"><thead><tr>    <th id="th<?php echo ++$i; ?>"></th>    <th id="th<?php echo ++$i; ?>">#</th>    <th id="th<?php echo ++$i; ?>" class="column"><?php echo __('Name'); ?></th>    <th id="th<?php echo ++$i; ?>" class="type"><?php echo __('Type'); ?></th>    <th id="th<?php echo ++$i; ?>" class="collation"><?php echo __('Collation'); ?></th>    <th id="th<?php echo ++$i; ?>" class="attributes"><?php echo __('Attributes'); ?></th>    <th id="th<?php echo ++$i; ?>" class="null"><?php echo __('Null'); ?></th>    <th id="th<?php echo ++$i; ?>" class="default"><?php echo __('Default'); ?></th>    <th id="th<?php echo ++$i; ?>" class="extra"><?php echo __('Extra'); ?></th><?php if ($db_is_information_schema || $tbl_is_view) { ?>    <th id="th<?php echo ++$i; ?>" class="view"><?php echo __('View'); ?></th><?php } else { ?>    <th colspan="7" id="th<?php echo ++$i; ?>" class="action"><?php echo __('Action'); ?></th><?php } ?></tr></thead><tbody><?phpunset($i);// table body// prepare comments$comments_map = array();$mime_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    include_once './libraries/transformations.lib.php';    //$cfgRelation = PMA_getRelationsParam();    $comments_map = PMA_getComments($db, $table);    if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {        $mime_map = PMA_getMIME($db, $table, true);    }}$rownum    = 0;$aryFields = array();$checked   = (!empty($checkall) ? ' checked="checked"' : '');$save_row  = array();$odd_row   = true;foreach ($fields as $row) {    $save_row[] = $row;    $rownum++;    $aryFields[]      = $row['Field'];    $type             = $row['Type'];    $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);    if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {        $type_nowrap  = '';    } else {        $type_nowrap  = ' nowrap="nowrap"';    }    $type         = $extracted_fieldspec['print_type'];    if (empty($type)) {        $type     = ' ';    }    // for the case ENUM('&#8211;','&ldquo;')    $type         = htmlspecialchars($type);    // in case it is too long    $start = 0;    if (strlen($type) > $GLOBALS['cfg']['LimitChars']) {        $start = 13;        $type = '<abbr title="' . $type . '">' . substr($type, 0, $GLOBALS['cfg']['LimitChars']) . '</abbr>';    }    unset($field_charset);    if ((substr($type, $start, 4) == 'char'        || substr($type, $start, 7) == 'varchar'        || substr($type, $start, 4) == 'text'        || substr($type, $start, 8) == 'tinytext'        || substr($type, $start, 10) == 'mediumtext'        || substr($type, $start, 8) == 'longtext'        || substr($type, $start, 3) == 'set'        || substr($type, $start, 4) == 'enum')        && !$extracted_fieldspec['binary']    ) {        if (strpos($type, ' character set ')) {            $type = substr($type, 0, strpos($type, ' character set '));        }        if (!empty($row['Collation'])) {            $field_charset = $row['Collation'];        } else {            $field_charset = '';        }    } else {        $field_charset = '';    }    // Display basic mimetype [MIME]    if ($cfgRelation['commwork'] && $cfgRelation['mimework'] && $cfg['BrowseMIME'] && isset($mime_map[$row['Field']]['mimetype'])) {        $type_mime = '<br />MIME: ' . str_replace('_', '/', $mime_map[$row['Field']]['mimetype']);    } else {        $type_mime = '';    }    $attribute     = $extracted_fieldspec['attribute'];    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (!empty($analyzed_sql[0]['create_table_fields'][$row['Field']]['type']) && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null']) {        $row['Null'] = '';    }    if (! isset($row['Default'])) {        if ($row['Null'] == 'YES') {            $row['Default'] = '<i>NULL</i>';        }    } else {        $row['Default'] = htmlspecialchars($row['Default']);    }    $field_encoded = urlencode($row['Field']);    $field_name    = htmlspecialchars($row['Field']);    $displayed_field_name = $field_name;    // underline commented fields and display a hover-title (CSS only)    if (isset($comments_map[$row['Field']])) {        $displayed_field_name = '<span class="commented_column" title="' . htmlspecialchars($comments_map[$row['Field']]) . '">' . $field_name . '</span>';    }    if ($primary && $primary->hasColumn($field_name)) {        $displayed_field_name = '<u>' . $field_name . '</u>';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd': 'even'; $odd_row = !$odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_fld[]" value="<?php echo htmlspecialchars($row['Field']); ?>" id="checkbox_row_<?php echo $rownum; ?>" <?php echo $checked; ?> />    </td>    <td align="right">        <?php echo $rownum; ?>    </td>    <th nowrap="nowrap"><label for="checkbox_row_<?php echo $rownum; ?>"><?php echo $displayed_field_name; ?></label></th>    <td<?php echo $type_nowrap; ?>><bdo dir="ltr" xml:lang="en"><?php echo $type; echo $type_mime; ?></bdo></td>    <td><?php echo (empty($field_charset) ? '' : '<dfn title="' . PMA_getCollationDescr($field_charset) . '">' . $field_charset . '</dfn>'); ?></td>    <td nowrap="nowrap" class="column_attribute"><?php echo $attribute; ?></td>    <td><?php echo (($row['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>    <td nowrap="nowrap"><?php    if (isset($row['Default'])) {        if ($extracted_fieldspec['type'] == 'bit') {            // here, $row['Default'] contains something like b'010'            echo PMA_convert_bit_default_value($row['Default']);        } else {            echo $row['Default'];        }    } else {        echo '<i>' . _pgettext('None for default', 'None') . '</i>';    } ?></td>    <td nowrap="nowrap"><?php echo strtoupper($row['Extra']); ?></td>    <td align="center" class="browse">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">            <?php echo $titles['BrowseDistinctValues']; ?></a>    </td>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <td align="center" class="edit">        <a href="tbl_alter.php?<?php echo $url_query; ?>&amp;field=<?php echo $field_encoded; ?>">            <?php echo $titles['Change']; ?></a>    </td>    <td align="center" class="drop">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="drop_column_anchor"' : ''); ?> href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' DROP ' . PMA_backquote($row['Field'])); ?>&amp;dropped_column=<?php echo urlencode($row['Field']); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('Column %s has been dropped'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Drop']; ?></a>    </td>    <td align="center" class="primary">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || ($primary && $primary->hasColumn($field_name))) {            echo $titles['NoPrimary'] . "\n";            $primary_enabled = false;        } else {            echo "\n";            ?>        <a class="add_primary_key_anchor" href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Primary']; ?></a>            <?php $primary_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="unique">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || isset($columns_with_unique_index[$field_name])) {            echo $titles['NoUnique'] . "\n";            $unique_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Unique']; ?></a>            <?php $unique_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="index">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type) {            echo $titles['NoIndex'] . "\n";            $index_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Index']; ?></a>            <?php            $index_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="spatial">        <?php        $spatial_types = array(            'geometry', 'point', 'linestring', 'polygon', 'multipoint',            'multilinestring', 'multipolygon', 'geomtrycollection'        );        if (! in_array($type, $spatial_types) || 'MYISAM' != $tbl_type) {            echo $titles['NoSpatial'] . "\n";            $spatial_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Spatial']; ?></a>            <?php            $spatial_enabled = true;        }        echo "\n";        ?>    </td>    <?php        if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || ($tbl_type == 'INNODB' && PMA_MYSQL_INT_VERSION >= 50604))            // FULLTEXT is possible on TEXT, CHAR and VARCHAR            && (strpos(' ' . $type, 'text') || strpos(' ' . $type, 'char'))) {            echo "\n";            ?>    <td align="center" nowrap="nowrap" class="fulltext">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['IdxFulltext']; ?></a>            <?php $fulltext_enabled = true; ?>    </td>            <?php        } else {            echo "\n";        ?>    <td align="center" nowrap="nowrap" class="fulltext">        <?php echo $titles['NoIdxFulltext'] . "\n"; ?>        <?php $fulltext_enabled = false; ?>    </td>        <?php        } // end if... else...        echo "\n";        ?>    <td class="more_opts" id="more_opts<?php echo $rownum; ?>">        <?php echo PMA_getImage('more.png', __('Show more actions')); ?> <?php echo __('More'); ?>        <div class="structure_actions_dropdown" id="row_<?php echo $rownum; ?>">            <div class="action_browse">                <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">                    <?php echo $hidden_titles['BrowseDistinctValues']; ?>                </a>            </div>            <div <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="action_primary"' : ''); ?>>                <?php                if (isset($primary_enabled)) {                     if ($primary_enabled) { ?>                          <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Primary']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoPrimary'];                     }                } ?>            </div>            <div class="action_unique">                <?php                if (isset($unique_enabled)) {                     if ($unique_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Unique']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoUnique'];                     }                } ?>            </div>            <div class="action_index">               <?php                if (isset($index_enabled)) {                     if ($index_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Index']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIndex'];                     }                  } ?>            </div>            <?php if (!PMA_DRIZZLE) { ?>            <div class="action_spatial">                <?php                if (isset($spatial_enabled)) {                    if ($spatial_enabled) { ?>                        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                            <?php echo $hidden_titles['Spatial']; ?>                        </a>                    <?php                    } else {                        echo $hidden_titles['NoSpatial'];                    }                } ?>            </div>            <div class="action_fulltext">                <?php                if (isset($fulltext_enabled)) {                     if ($fulltext_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['IdxFulltext']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIdxFulltext'];                     }                } ?>            </div>            <?php } ?>        </div>    </td>    <?php    } // end if (! $tbl_is_view && ! $db_is_information_schema)    ?></tr>    <?php    unset($field_charset);} // end foreachecho '</tbody>' . "\n"    .'</table>' . "\n";$checkall_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);?><img class="selectallarrow" src="<?php echo $pmaThemeImage . 'arrow_' . $text_dir . '.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('fieldsForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('fieldsForm')) return false;">    <?php echo __('Uncheck All'); ?></a><i><?php echo __('With selected:'); ?></i><?phpPMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_browse', __('Browse'), 'b_browse.png', 'browse');if (! $tbl_is_view && ! $db_is_information_schema) {    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_change', __('Change'), 'b_edit.png', 'change');    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_drop', __('Drop'), 'b_drop.png', 'drop');    if ('ARCHIVE' != $tbl_type) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_primary', __('Primary'), 'b_primary.png', 'primary');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_unique', __('Unique'), 'b_unique.png', 'unique');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_index', __('Index'), 'b_index.png', 'index');    }    if (! empty($tbl_type) && $tbl_type == 'MYISAM') {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_spatial', __('Spatial'), 'b_spatial.png', 'spatial');    }    if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA')) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_fulltext', __('Fulltext'), 'b_ftext.png', 'ftext');    }}?></form><hr /><?php/** * Work on the table */if ($tbl_is_view) {    $create_view = PMA_DBI_get_definition($db, 'VIEW', $table);    $create_view = preg_replace('@^CREATE@', 'ALTER', $create_view);    echo PMA_linkOrButton(        'tbl_sql.php' . PMA_generate_common_url(            $url_params +            array(                'sql_query' => $create_view,                'show_query' => '1',            )        ),        PMA_getIcon('b_edit.png', __('Edit view'), true)        );}?><a href="tbl_printview.php?<?php echo $url_query; ?>"><?phpecho PMA_getIcon('b_print.png', __('Print view'), true);?></a><?phpif (! $tbl_is_view && ! $db_is_information_schema) {    // if internal relations are available, or foreign keys are supported    // ($tbl_type comes from libraries/tbl_info.inc.php)    if ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {        ?><a href="tbl_relation.php?<?php echo $url_query; ?>"><?php        echo PMA_getIcon('b_relations.png', __('Relation view'), true);        ?></a>        <?php    }    if (!PMA_DRIZZLE) {        ?><a href="sql.php?<?php echo $url_query; ?>&amp;session_max_rows=all&amp;sql_query=<?php echo urlencode('SELECT * FROM ' . PMA_backquote($table) . ' PROCEDURE ANALYSE()'); ?>"><?php        echo PMA_getIcon('b_tblanalyse.png', __('Propose table structure'), true);        ?></a><?php        echo PMA_showMySQLDocu('Extending_MySQL', 'procedure_analyse') . "\n";    }    if (PMA_Tracker::isActive()) {        echo '<a href="tbl_tracking.php?' . $url_query . '">';        echo PMA_getIcon('eye.png', __('Track table'), true);        echo '</a>';    }    ?>    <br /><form method="post" action="tbl_addfield.php" id="addColumns" name="addColumns" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return checkFormElementInRange(this, 'num_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)">    <?php    echo PMA_generate_common_hidden_inputs($db, $table);    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_insrow.png', __('Add column'));    }    echo sprintf(__('Add %s column(s)'), '<input type="text" name="num_fields" size="2" maxlength="2" value="1" onfocus="this.select()" />');    // I tried displaying the drop-down inside the label but with Firefox    // the drop-down was blinking    $fieldOptions = '<select name="after_field" onclick="this.form.field_where[2].checked=true" onchange="this.form.field_where[2].checked=true">';    foreach ($aryFields as $fieldname) {        $fieldOptions .= '<option value="' . htmlspecialchars($fieldname) . '">' . htmlspecialchars($fieldname) . '</option>' . "\n";    }    unset($aryFields);    $fieldOptions .= '</select>';    $choices = array(        'last'  => __('At End of Table'),        'first' => __('At Beginning of Table'),        'after' => sprintf(__('After %s'), '')    );    PMA_display_html_radio('field_where', $choices, 'last', false);    echo $fieldOptions;    unset($fieldOptions, $choices);    ?><input type="submit" value="<?php echo __('Go'); ?>" /></form><iframe class="IE_hack" scrolling="no"></iframe><hr /><div id="index_div" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> >    <?php}/** * If there are more than 20 rows, displays browse/select/insert/empty/drop * links again */if (count($fields) > 20) {    include './libraries/tbl_links.inc.php';} // end if (count($fields) > 20)/** * Displays indexes */if (! $tbl_is_view && ! $db_is_information_schema && 'ARCHIVE' !=  $tbl_type) {    PMA_generate_slider_effect('indexes', __('Indexes'));    /**     * Display indexes     */    echo PMA_Index::getView($table, $db);    ?>        <fieldset class="tblFooters" style="text-align: left;">            <form action="./tbl_indexes.php" method="post">                <?php                echo PMA_generate_common_hidden_inputs($db, $table);                echo sprintf(__('Create an index on &nbsp;%s&nbsp;columns'),                    '<input type="text" size="2" name="added_fields" value="1" />');                ?>                <input type="hidden" name="create_index" value="1" />                <input class="add_index<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' ajax' : '');?>" type="submit" value="<?php echo __('Go'); ?>" />            </form>        </fieldset>    </div></div>    <?php}/** * Displays Space usage and row statistics */// BEGIN - Calc Table Space// Get valid statistics whatever is the table typeif ($cfg['ShowStats']) {    echo '<div id="tablestatistics">';    if (empty($showtable)) {        $showtable = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, true);    }    $nonisam     = false;    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {        $nonisam = true;    }    // Gets some sizes    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);    // this is to display for example 261.2 MiB instead of 268k KiB    $max_digits = 3;    $decimals = 1;    list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length'], $max_digits, $decimals);    if ($mergetable == false) {        list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length'], $max_digits, $decimals);    }    // InnoDB returns a huge value in Data_free, do not use it    if (! $is_innodb && isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {        list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free'], $max_digits, $decimals);        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free'], $max_digits, $decimals);    } else {        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    }    list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    if ($table_info_num_rows > 0) {        list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);    }    // Displays them    $odd_row = false;    ?>    <fieldset>    <legend><?php echo __('Information'); ?></legend>    <a name="showusage"></a>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <table id="tablespaceusage" class="data">    <caption class="tblHeaders"><?php echo __('Space usage'); ?></caption>    <thead>    <tr>        <th><?php echo __('Type'); ?></th>        <th colspan="2"><?php echo __('Usage'); ?></th>    </tr>    </thead>    <tbody>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Data'); ?></th>        <td class="value"><?php echo $data_size; ?></td>        <td class="unit"><?php echo $data_unit; ?></td>    </tr>        <?php        if (isset($index_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Index'); ?></th>        <td class="value"><?php echo $index_size; ?></td>        <td class="unit"><?php echo $index_unit; ?></td>    </tr>            <?php        }        if (isset($free_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?> error">        <th class="name"><?php echo __('Overhead'); ?></th>        <td class="value"><?php echo $free_size; ?></td>        <td class="unit"><?php echo $free_unit; ?></td>    </tr>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Effective'); ?></th>        <td class="value"><?php echo $effect_size; ?></td>        <td class="unit"><?php echo $effect_unit; ?></td>    </tr>            <?php        }        if (isset($tot_size) && $mergetable == false) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo $tot_size; ?></td>        <td class="unit"><?php echo $tot_unit; ?></td>    </tr>            <?php        }        // Optimize link if overhead        if (isset($free_size) && !PMA_DRIZZLE && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || $tbl_type == 'BDB')) {            ?>    <tr class="tblFooters">        <td colspan="3" align="center">            <a href="sql.php?<?php echo $url_query; ?>&pos=0&amp;sql_query=<?php echo urlencode('OPTIMIZE TABLE ' . PMA_backquote($table)); ?>"><?php            echo PMA_getIcon('b_tbloptimize.png', __('Optimize table'));            ?></a>        </td>    </tr>            <?php        }        ?>    </tbody>    </table>        <?php    }    $odd_row = false;    ?>    <table id="tablerowstats" class="data">    <caption class="tblHeaders"><?php echo __('Row Statistics'); ?></caption>    <thead>    <tr>        <th><?php echo __('Statements'); ?></th>        <th><?php echo __('Value'); ?></th>    </tr>    </thead>    <tbody>    <?php    if (isset($showtable['Row_format'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Format'); ?></th>        <td class="value"><?php        if ($showtable['Row_format'] == 'Fixed') {            echo __('static');        } elseif ($showtable['Row_format'] == 'Dynamic') {            echo __('dynamic');        } else {            echo $showtable['Row_format'];        }        ?></td>    </tr>        <?php    }    if (! empty($showtable['Create_options'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Options'); ?></th>        <td class="value"><?php        if ($showtable['Create_options'] == 'partitioned') {            echo __('partitioned');        } else {            echo $showtable['Create_options'];        }        ?></td>    </tr>        <?php    }    if (!empty($tbl_collation)) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Collation'); ?></th>        <td class="value"><?php            echo '<dfn title="' . PMA_getCollationDescr($tbl_collation) . '">' . $tbl_collation . '</dfn>';            ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Rows'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Rows'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Rows'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row length'); ?> &oslash;</th>        <td class="value"><?php echo PMA_formatNumber($showtable['Avg_row_length'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row size'); ?> &oslash;</th>        <td class="value"><?php echo $avg_size . ' ' . $avg_unit; ?></td>    </tr>        <?php    }    if (isset($showtable['Auto_increment'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Next autoindex'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Auto_increment'], 0); ?></td>    </tr>        <?php    }    if (isset($showtable['Create_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Creation'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Create_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Update_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last update'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Update_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Check_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last check'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Check_time'])); ?></td>    </tr>        <?php    }    ?>    </tbody>    </table>    </fieldset>    <!-- close tablestatistics div -->    </div>    <?php}// END - Calc Table Spaceecho '<div class="clearfloat"></div>' . "\n";/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays the pma logo, links and db and server selection in left frame * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (empty($query_url)) {    // avoid putting here $db because it could display a db name    // to which the next user does not have access    $query_url = PMA_generate_common_url();}// display Logo, depending on $GLOBALS['cfg']['LeftDisplayLogo']if ($GLOBALS['cfg']['LeftDisplayLogo']) {    $logo = 'phpMyAdmin';    if (@file_exists($GLOBALS['pmaThemeImage'] . 'logo_left.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'logo_left.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    } elseif (@file_exists($GLOBALS['pmaThemeImage'] . 'pma_logo2.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo2.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    }    echo '<div id="pmalogo">' . "\n";    if ($GLOBALS['cfg']['LeftLogoLink']) {        echo '<a href="' . htmlspecialchars($GLOBALS['cfg']['LeftLogoLink']);        switch ($GLOBALS['cfg']['LeftLogoLinkWindow']) {            case 'new':                echo '" target="_blank"';                break;            case 'main':                // do not add our parameters for an external link                if (substr(strtolower($GLOBALS['cfg']['LeftLogoLink']), 0, 4) !== '://') {                    echo '?' . $query_url . '" target="frame_content"';                } else {                    echo '" target="_blank"';                }        }        echo '>' . $logo . '</a>' . "\n";    } else {        echo $logo . "\n";    }    echo '</div>' . "\n";} // end of display logo?><div id="leftframelinks"><?php    echo '<a href="main.php?' . $query_url . '"'        .' title="' . __('Home') . '">'        .($GLOBALS['cfg']['MainPageIconic']            ? PMA_getImage('b_home.png', __('Home'))            : __('Home'))        .'</a>' . "\n";    // if we have chosen server    if ($server != 0) {        // Logout for advanced authentication        if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {            echo ($GLOBALS['cfg']['MainPageIconic'] ? '' : ' - ');            echo '<a href="index.php?' . $query_url . '&amp;old_usr='                .urlencode($PHP_AUTH_USER) . '" target="_parent"'                .' title="' . __('Log out') . '" >'                .($GLOBALS['cfg']['MainPageIconic']                    ? PMA_getImage('s_loggoff.png', __('Log out'))                    : __('Log out'))                .'</a>' . "\n";        } // end if ($GLOBALS['cfg']['Server']['auth_type'] != 'config'        $anchor = 'querywindow.php?' . PMA_generate_common_url($db, $table);        if ($GLOBALS['cfg']['MainPageIconic']) {            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));        } else {            echo '<br />' . "\n";            $query_frame_link_text = __('Query window');        }        echo '<a href="' . $anchor . '&amp;no_js=true"'            .' title="' . __('Query window') . '"';        echo ' onclick="if (window.parent.open_querywindow()) return false;"';        echo '>' . $query_frame_link_text . '</a>' . "\n";    } // end if ($server != 0)    echo '    <a href="Documentation.html" target="documentation"'        .' title="' . __('phpMyAdmin documentation') . '" >';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));    } else {        echo '<br />' . __('phpMyAdmin documentation');    }    echo '</a>';    $documentation_link = PMA_showMySQLDocu('', '', true);    if ($GLOBALS['cfg']['MainPageIconic']) {        echo $documentation_link . "\n";    } else {        preg_match('/<a[^>]*>/', $documentation_link, $matches);        $link = $matches[0];        echo substr($link, 0, strlen($link) - 1) . ' title="' . __('Documentation') . '" >'            . '<br />' . __('Documentation') . '</a>';    }    $params = array('uniqid' => uniqid());    if (!empty($GLOBALS['db'])) {        $params['db'] = $GLOBALS['db'];    }    echo '<a href="navigation.php?' . PMA_generate_common_url($params)        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('s_reload', __('Reload navigation frame'));    } else {        echo '<br />' . __('Reload navigation frame');    }    echo '</a>';echo '</div>' . "\n";/** * Displays the MySQL servers choice form */if ($GLOBALS['cfg']['LeftDisplayServers'] && (count($GLOBALS['cfg']['Servers']) > 1 || $server == 0 && count($GLOBALS['cfg']['Servers']) == 1)) {    echo '<div id="serverinfo">';    include './libraries/select_server.lib.php';    PMA_select_server(true, true);    echo '</div><br />';} // end if LeftDisplayServers?>
<?php/** * Front controller for setup script * * @package    phpMyAdmin-setup * @copyright  Copyright (c) 2008, Piotr Przybylski <piotrprz@gmail.com> * @license    http://www.gnu.org/licenses/gpl.html GNU GPL 2.0 *//** * Core libraries. */require './lib/common.inc.php';$page = filter_input(INPUT_GET, 'page');$page = preg_replace('/[^a-z]/', '', $page);if ($page === '') {    $page = 'index';}if (!file_exists("./setup/frames/$page.inc.php")) {    // it will happen only when enterung URL by hand, we don't care for these cases    die(__('Wrong GET file attribute value'));}// Handle done action info$action_done = filter_input(INPUT_GET, 'action_done');$action_done = preg_replace('/[^a-z_]/', '', $action_done);// send no-cache headersrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>phpMyAdmin setup</title><link href="../favicon.ico" rel="icon" type="image/x-icon" /><link href="../favicon.ico" rel="shortcut icon" type="image/x-icon" /><link href="styles.css" rel="stylesheet" type="text/css" /><script type="text/javascript" src="../js/jquery/jquery-1.6.2.js"></script><script type="text/javascript" src="../js/jquery/jquery-ui-1.8.16.custom.js"></script><script type="text/javascript" src="../js/jquery/jquery.json-2.2.js"></script><script type="text/javascript" src="../js/config.js"></script><script type="text/javascript" src="scripts.js"></script></head><body><h1><span class="blue">php</span><span class="orange">MyAdmin</span>  setup</h1><div id="menu"><?phprequire './setup/frames/menu.inc.php';?></div><div id="page"><?phprequire "./setup/frames/$page.inc.php";?></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the database index class * * @package PhpMyAdmin *//** * @since phpMyAdmin 3.0.0 * * @package PhpMyAdmin */class PMA_Index{    /**     * Class-wide storage container for indexes (caching, singleton)     *     * @var array     */    protected static $_registry = array();    /**     * @var string The name of the schema     */    protected $_schema = '';    /**     * @var string The name of the table     */    protected $_table = '';    /**     * @var string The name of the index     */    protected $_name = '';    /**     * Columns in index     *     * @var array     */    protected $_columns = array();    /**     * The index method used (BTREE, SPATIAL, FULLTEXT, HASH, RTREE).     *     * @var string     */    protected $_type = '';    /**     * The index choice (PRIMARY, UNIQUE, INDEX, SPATIAL, FULLTEXT)     *     * @var string     */    protected $_choice = '';    /**     * Various remarks.     *     * @var string     */    protected $_remarks = '';    /**     * Any comment provided for the index with a COMMENT attribute when the     * index was created.     *     * @var string     */    protected $_comment = '';    /**     * @var integer 0 if the index cannot contain duplicates, 1 if it can.     */    protected $_non_unique = 0;    /**     * Indicates how the key is packed. NULL if it is not.     *     * @var string     */    protected $_packed = null;    /**     * Constructor     *     * @param array $params     */    public function __construct($params = array())    {        $this->set($params);    }    static public function singleton($schema, $table, $index_name = '')    {        PMA_Index::_loadIndexes($table, $schema);        if (! isset(PMA_Index::$_registry[$schema][$table][$index_name])) {            $index = new PMA_Index;            if (strlen($index_name)) {                $index->setName($index_name);                PMA_Index::$_registry[$schema][$table][$index->getName()] = $index;            }            return $index;        } else {            return PMA_Index::$_registry[$schema][$table][$index_name];        }    }    /**     * returns an array with all indexes from the given table     *     * @param string $table     * @param string $schema     * @return  array     */    static public function getFromTable($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table])) {            return PMA_Index::$_registry[$schema][$table];        } else {            return array();        }    }    /**     * return primary if set, false otherwise     *     * @param string $table     * @param string $schema     * @return  mixed primary index or false if no one exists     */    static public function getPrimary($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table]['PRIMARY'])) {            return PMA_Index::$_registry[$schema][$table]['PRIMARY'];        } else {            return false;        }    }    /**     * Load index data for table     *     * @param string $table     * @param string $schema     * @return  boolean     */    static protected function _loadIndexes($table, $schema)    {        if (isset(PMA_Index::$_registry[$schema][$table])) {            return true;        }        $_raw_indexes = PMA_DBI_get_table_indexes($schema, $table);        foreach ($_raw_indexes as $_each_index) {            $_each_index['Schema'] = $schema;            if (! isset(PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']])) {                $key = new PMA_Index($_each_index);                PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']] = $key;            } else {                $key = PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']];            }            $key->addColumn($_each_index);        }        return true;    }    /**     * Add column to index     *     * @param array $params column params     */    public function addColumn($params)    {        if (strlen($params['Column_name'])) {            $this->_columns[$params['Column_name']] = new PMA_Index_Column($params);        }    }    public function addColumns($columns)    {        $_columns = array();        if (isset($columns['names'])) {            // coming from form            // $columns[names][]            // $columns[sub_parts][]            foreach ($columns['names'] as $key => $name) {                $sub_part = isset($columns['sub_parts'][$key]) ? $columns['sub_parts'][$key] : '';                $_columns[] = array(                    'Column_name'   => $name,                    'Sub_part'      => $sub_part,                );            }        } else {            // coming from SHOW INDEXES            // $columns[][name]            // $columns[][sub_part]            // ...            $_columns = $columns;        }        foreach ($_columns as $column) {            $this->addColumn($column);        }    }    /**     * Returns true if $column indexed in this index     *     * @param string $column     * @return  boolean     */    public function hasColumn($column)    {        return isset($this->_columns[$column]);    }    public function set($params)    {        if (isset($params['columns'])) {            $this->addColumns($params['columns']);        }        if (isset($params['Schema'])) {            $this->_schema = $params['Schema'];        }        if (isset($params['Table'])) {            $this->_table = $params['Table'];        }        if (isset($params['Key_name'])) {            $this->_name = $params['Key_name'];        }        if (isset($params['Index_type'])) {            $this->_type = $params['Index_type'];        }        if (isset($params['Comment'])) {            $this->_remarks = $params['Comment'];        }        if (isset($params['Index_comment'])) {            $this->_comment = $params['Index_comment'];        }        if (isset($params['Non_unique'])) {            $this->_non_unique = $params['Non_unique'];        }        if (isset($params['Packed'])) {            $this->_packed = $params['Packed'];        }        if ('PRIMARY' == $this->_name) {            $this->_choice = 'PRIMARY';        } elseif ('FULLTEXT' == $this->_type) {            $this->_choice = 'FULLTEXT';        } elseif ('SPATIAL' == $this->_type) {            $this->_choice = 'SPATIAL';        } elseif ('0' == $this->_non_unique) {            $this->_choice = 'UNIQUE';        } else {            $this->_choice = 'INDEX';        }    }    public function getColumnCount()    {        return count($this->_columns);    }    public function getComment()    {        return $this->_comment;    }    public function getRemarks()    {        return $this->_remarks;    }    public function getComments()    {        $comments = $this->getRemarks();        if (strlen($comments)) {            $comments .= "\n";        }        $comments .= $this->getComment();        return $comments;    }    public function getType()    {        return $this->_type;    }    public function getChoice()    {        return $this->_choice;    }    /**     * Return a list of all index choices     *     * @return  array index choices     */    static public function getIndexChoices()    {        return array(            'PRIMARY',            'INDEX',            'UNIQUE',            'SPATIAL',            'FULLTEXT',        );    }    public function generateIndexSelector()    {        $html_options = '';        foreach (PMA_Index::getIndexChoices() as $each_index_choice) {            if ($each_index_choice === 'PRIMARY'             && $this->_choice !== 'PRIMARY'             && PMA_Index::getPrimary($this->_table, $this->_schema)) {                // skip PRIMARY if there is already one in the table                continue;            }            $html_options .= '<option value="' . $each_index_choice . '"'                 . (($this->_choice == $each_index_choice) ? ' selected="selected"' : '')                 . '>'. $each_index_choice . '</option>' . "\n";        }        return $html_options;    }    public function getPacked()    {        return $this->_packed;    }    public function isPacked($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('No'),                '1' => __('Yes'),            );        } else {            $r = array(                '0' => false,                '1' => true,            );        }        if (null === $this->_packed) {            return $r[0];        }        return $this->_packed;    }    public function getNonUnique()    {        return $this->_non_unique;    }    public function isUnique($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('Yes'),                '1' => __('No'),            );        } else {            $r = array(                '0' => true,                '1' => false,            );        }        return $r[$this->_non_unique];    }    public function getName()    {        return $this->_name;    }    public function setName($name)    {        $this->_name = (string) $name;    }    public function getColumns()    {        return $this->_columns;    }    /**     * Show index data     *     * @param string      $table          The tablename     * @param array       $indexes_info   Referenced info array     * @param array       $indexes_data   Referenced data array     * @param boolean     $print_mode     * @access  public     * @return  array       Index collection array     */    static public function getView($table, $schema, $print_mode = false)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $no_indexes_class = count($indexes) > 0 ? ' hide' : '';        $no_indexes  = "<div class='no_indexes_defined$no_indexes_class'>";        $no_indexes .= PMA_Message::notice(__('No index defined!'))->getDisplay();        $no_indexes .= '</div>';        $r  = '<fieldset>';        $r .= '<legend id="index_header">' . __('Indexes');        $r .= PMA_showMySQLDocu('optimization', 'optimizing-database-structure');        $r .= '</legend>';        $r .= $no_indexes;        if (count($indexes) < 1) {            $r .= '</fieldset>';            return $r;        }        if (! $print_mode) {            $r .= PMA_Index::findDuplicates($table, $schema);        }        $r .= '<table id="table_index">';        $r .= '<thead>';        $r .= '<tr>';        if (! $print_mode) {            $r .= '<th colspan="2">' . __('Action') . '</th>';        }        $r .= '<th>' . __('Keyname') . '</th>';        $r .= '<th>' . __('Type') . '</th>';        $r .= '<th>' . __('Unique') . '</th>';        $r .= '<th>' . __('Packed') . '</th>';        $r .= '<th>' . __('Column') . '</th>';        $r .= '<th>' . __('Cardinality') . '</th>';        $r .= '<th>' . __('Collation') . '</th>';        $r .= '<th>' . __('Null') . '</th>';        $r .= '<th>' . __('Comment') . '</th>';        $r .= '</tr>';        $r .= '</thead>';        $r .= '<tbody>';        $odd_row = true;        foreach ($indexes as $index) {            $row_span = ' rowspan="' . $index->getColumnCount() . '" ';            $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';            if (! $print_mode) {                $this_params = $GLOBALS['url_params'];                $this_params['index'] = $index->getName();                $r .= '<td class="edit_index ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'ajax" ';                }                $r .= '" ' . $row_span . '>'                   . '    <a href="tbl_indexes.php' . PMA_generate_common_url($this_params)                   . '">' . PMA_getIcon('b_edit.png', __('Edit')) . '</a>'                   . '</td>' . "\n";                $this_params = $GLOBALS['url_params'];                if ($index->getName() == 'PRIMARY') {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP PRIMARY KEY';                    $this_params['message_to_show'] = __('The primary key has been dropped');                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP PRIMARY KEY');                } else {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP INDEX ' . PMA_backquote($index->getName());                    $this_params['message_to_show'] = sprintf(__('Index %s has been dropped'), $index->getName());                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP INDEX ' . $index->getName());                }                $r .= '<td ' . $row_span . '>';                $r .= '<input type="hidden" class="drop_primary_key_index_msg" value="' . $js_msg . '" />';                $r .= '    <a ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'class="drop_primary_key_index_anchor" ';                }                $r .= ' href="sql.php' . PMA_generate_common_url($this_params)                   . '" >'                   . PMA_getIcon('b_drop.png', __('Drop'))  . '</a>'                   . '</td>' . "\n";            }            $r .= '<th ' . $row_span . '>' . htmlspecialchars($index->getName()) . '</th>';            $r .= '<td ' . $row_span . '>' . htmlspecialchars($index->getType()) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isUnique(true) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isPacked(true) . '</td>';            foreach ($index->getColumns() as $column) {                if ($column->getSeqInIndex() > 1) {                    $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';                }                $r .= '<td>' . htmlspecialchars($column->getName());                if ($column->getSubPart()) {                    $r .= ' (' . $column->getSubPart() . ')';                }                $r .= '</td>';                $r .= '<td>' . htmlspecialchars($column->getCardinality()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getCollation()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getNull(true)) . '</td>';                if ($column->getSeqInIndex() == 1) {                    $r .= '<td ' . $row_span . '>'                        . htmlspecialchars($index->getComments()) . '</td>';                }                $r .= '</tr>';            } // end foreach $index['Sequences']            $odd_row = ! $odd_row;        } // end while        $r .= '</tbody>';        $r .= '</table>';        $r .= '</fieldset>';        return $r;    }    public function getCompareData()    {        $data = array(            // 'Non_unique'    => $this->_non_unique,            'Packed'        => $this->_packed,            'Index_type'    => $this->_type,        );        foreach ($this->_columns as $column) {            $data['columns'][] = $column->getCompareData();        }        return $data;    }    /**     * Function to check over array of indexes and look for common problems     *     * @access  public     * @param string      name of table     * @return  string      Output HTML     */    static public function findDuplicates($table, $schema)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $output  = '';        // count($indexes) < 2:        //   there is no need to check if there less than two indexes        if (count($indexes) < 2) {            return $output;        }        // remove last index from stack and ...        while ($while_index = array_pop($indexes)) {            // ... compare with every remaining index in stack            foreach ($indexes as $each_index) {                if ($each_index->getCompareData() !== $while_index->getCompareData()) {                    continue;                }                // did not find any difference                // so it makes no sense to have this two equal indexes                $message = PMA_Message::notice(__('The indexes %1$s and %2$s seem to be equal and one of them could possibly be removed.'));                $message->addParam($each_index->getName());                $message->addParam($while_index->getName());                $output .= $message->getDisplay();                // there is no need to check any further indexes if we have already                // found that this one has a duplicate                continue 2;            }        }        return $output;    }}/** * @package PhpMyAdmin */class PMA_Index_Column{    /**     * @var string The column name     */    protected $_name = '';    /**     * @var integer The column sequence number in the index, starting with 1.     */    protected $_seq_in_index = 1;    /**     * @var string How the column is sorted in the index. A (Ascending) or NULL (Not sorted)     */    protected $_collation = null;    /**     * The number of indexed characters if the column is only partly indexed,     * NULL if the entire column is indexed.     *     * @var integer     */    protected $_sub_part = null;    /**     * Contains YES if the column may contain NULL.     * If not, the column contains NO.     *     * @var string     */    protected $_null = '';    /**     * An estimate of the number of unique values in the index. This is updated     * by running ANALYZE TABLE or myisamchk -a. Cardinality is counted based on     * statistics stored as integers, so the value is not necessarily exact even     * for small tables. The higher the cardinality, the greater the chance that     * MySQL uses the index when doing joins.     *     * @var integer     */    protected $_cardinality = null;    public function __construct($params = array())    {        $this->set($params);    }    public function set($params)    {        if (isset($params['Column_name'])) {            $this->_name = $params['Column_name'];        }        if (isset($params['Seq_in_index'])) {            $this->_seq_in_index = $params['Seq_in_index'];        }        if (isset($params['Collation'])) {            $this->_collation = $params['Collation'];        }        if (isset($params['Cardinality'])) {            $this->_cardinality = $params['Cardinality'];        }        if (isset($params['Sub_part'])) {            $this->_sub_part = $params['Sub_part'];        }        if (isset($params['Null'])) {            $this->_null = $params['Null'];        }    }    public function getName()    {        return $this->_name;    }    public function getCollation()    {        return $this->_collation;    }    public function getCardinality()    {        return $this->_cardinality;    }    public function getNull($as_text = false)    {        return $as_text            ? (!$this->_null || $this->_null == 'NO' ? __('No') : __('Yes'))            : $this->_null;    }    public function getSeqInIndex()    {        return $this->_seq_in_index;    }    public function getSubPart()    {        return $this->_sub_part;    }    public function getCompareData()    {        return array(            'Column_name'   => $this->_name,            'Seq_in_index'  => $this->_seq_in_index,            'Collation'     => $this->_collation,            'Sub_part'      => $this->_sub_part,            'Null'          => $this->_null,        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($GLOBALS['text_dir'] == 'ltr') {    $GLOBALS['cell_align_left']  = 'left';    $GLOBALS['cell_align_right'] = 'right';} else {    $GLOBALS['cell_align_left']  = 'right';    $GLOBALS['cell_align_right'] = 'left';}// removes the bug with the horizontal scrollbar in IE (it's allways shown, if need it or not)// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title><?php    if (!empty($page_title)) {        echo htmlspecialchars($page_title);    } else {        echo 'phpMyAdmin';    }?></title>    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>phpmyadmin.css.php<?php echo PMA_generate_common_url(array('server' => $GLOBALS['server'])); ?>&amp;js_frame=<?php echo isset($print_view) ? 'print' : 'right'; ?>&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>print.css" media="print" />    <link rel="stylesheet" type="text/css" href="<?php echo $GLOBALS['pmaThemePath']; ?>/jquery/jquery-ui-1.8.16.custom.css" />    <meta name="robots" content="noindex,nofollow" />
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the improved MySQL extension (MySQLi) * * @package PhpMyAdmin-DBI-MySQLi */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysqli_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * some PHP versions are reporting extra messages like "No index used in query" */mysqli_report(MYSQLI_REPORT_OFF);/** * some older mysql client libs are missing these constants ... */if (! defined('MYSQLI_BINARY_FLAG')) {   define('MYSQLI_BINARY_FLAG', 128);}/** * @see http://bugs.php.net/36007 */if (! defined('MYSQLI_TYPE_NEWDECIMAL')) {    define('MYSQLI_TYPE_NEWDECIMAL', 246);}if (! defined('MYSQLI_TYPE_BIT')) {    define('MYSQLI_TYPE_BIT', 16);}// for Drizzleif (! defined('MYSQLI_TYPE_VARCHAR')) {    define('MYSQLI_TYPE_VARCHAR', 15);}/** * Helper function for connecting to the database server * * @param   mysqli  $link * @param   string  $host * @param   string  $user * @param   string  $password * @param   string  $dbname * @param   int     $server_port * @param   string  $server_socket * @param   int     $client_flags * @param   bool    $persistent * @return  bool */function PMA_DBI_real_connect($link, $host, $user, $password, $dbname, $server_port, $server_socket, $client_flags = null, $persistent = false){    global $cfg;    // mysqli persistent connections only on PHP 5.3+    if (PMA_PHP_INT_VERSION >= 50300) {        if ($cfg['PersistentConnections'] || $persistent) {            $host = 'p:' . $host;        }    }    if ($client_flags === null) {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket        );    } else {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket,            $client_flags        );    }}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    // NULL enables connection to the default socket    $link = mysqli_init();    mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, true);    $client_flags = 0;    /* Optionally compress connection */    if ($cfg['Server']['compress'] && defined('MYSQLI_CLIENT_COMPRESS')) {        $client_flags |= MYSQLI_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if ($cfg['Server']['ssl'] && defined('MYSQLI_CLIENT_SSL')) {        $client_flags |= MYSQLI_CLIENT_SSL;    }    if (!$server) {        $return_value = @PMA_DBI_real_connect(            $link,            $cfg['Server']['host'],            $user,            $password,            false,            $server_port,            $server_socket,            $client_flags        );        // Retry with empty password if we're allowed to        if ($return_value == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $return_value = @PMA_DBI_real_connect(                $link,                $cfg['Server']['host'],                $user,                '',                false,                $server_port,                $server_socket,                $client_flags            );        }    } else {        $return_value = @PMA_DBI_real_connect(            $link,            $server['host'],            $user,            $password,            false,            $server_port,            $server_socket        );    }    if ($return_value == false) {        if ($is_controluser) {            trigger_error(                __('Connection for controluser as defined in your configuration failed.'),                E_USER_WARNING            );            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string  $dbname  database name to select * @param mysqli  $link    the mysqli object * @return boolean */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_select_db($link, $dbname);}/** * runs a query and returns the result * * @param   string  $query    query to execute * @param   mysqli  $link     mysqli object * @param   int     $options * @return  mysqli_result|bool */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        $method = MYSQLI_STORE_RESULT;    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        $method = MYSQLI_USE_RESULT;    } else {        $method = 0;    }    return mysqli_query($link, $query, $method);}/** * returns array of rows with associative and numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysqli_fetch_array($result, MYSQLI_BOTH);}/** * returns array of rows with associative keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysqli_fetch_array($result, MYSQLI_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysqli_fetch_array($result, MYSQLI_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool  true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysqli_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  mysqli_result  $result */function PMA_DBI_free_result($result){    if ($result instanceof mysqli_result) {        mysqli_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_more_results($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_more_results($link);}/** * Prepare next result from multi_query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_next_result($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_next_result($link);}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  integer         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysqli_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = mysqli_errno($link);        $error_message = mysqli_error($link);    } else {        $error_number = mysqli_connect_errno();        $error_message = mysqli_connect_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   mysqli_result  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @mysqli_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   mysqli  $link  the mysqli object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   mysqli   $link            the mysqli object * @param   boolean  $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysqli_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @param   mysqli_result  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    $typeAr[MYSQLI_TYPE_DECIMAL]     = 'real';    $typeAr[MYSQLI_TYPE_NEWDECIMAL]  = 'real';    $typeAr[MYSQLI_TYPE_BIT]         = 'int';    $typeAr[MYSQLI_TYPE_TINY]        = 'int';    $typeAr[MYSQLI_TYPE_SHORT]       = 'int';    $typeAr[MYSQLI_TYPE_LONG]        = 'int';    $typeAr[MYSQLI_TYPE_FLOAT]       = 'real';    $typeAr[MYSQLI_TYPE_DOUBLE]      = 'real';    $typeAr[MYSQLI_TYPE_NULL]        = 'null';    $typeAr[MYSQLI_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[MYSQLI_TYPE_LONGLONG]    = 'int';    $typeAr[MYSQLI_TYPE_INT24]       = 'int';    $typeAr[MYSQLI_TYPE_DATE]        = 'date';    $typeAr[MYSQLI_TYPE_TIME]        = 'time';    $typeAr[MYSQLI_TYPE_DATETIME]    = 'datetime';    $typeAr[MYSQLI_TYPE_YEAR]        = 'year';    $typeAr[MYSQLI_TYPE_NEWDATE]     = 'date';    $typeAr[MYSQLI_TYPE_ENUM]        = 'unknown';    $typeAr[MYSQLI_TYPE_SET]         = 'unknown';    $typeAr[MYSQLI_TYPE_TINY_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[MYSQLI_TYPE_LONG_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_BLOB]        = 'blob';    $typeAr[MYSQLI_TYPE_VAR_STRING]  = 'string';    $typeAr[MYSQLI_TYPE_STRING]      = 'string';    $typeAr[MYSQLI_TYPE_VARCHAR]     = 'string'; // for Drizzle    // MySQL returns MYSQLI_TYPE_STRING for CHAR    // and MYSQLI_TYPE_CHAR === MYSQLI_TYPE_TINY    // so this would override TINYINT and mark all TINYINT as string    // https://sf.net/tracker/?func=detail&aid=1532111&group_id=23067&atid=377408    //$typeAr[MYSQLI_TYPE_CHAR]        = 'string';    $typeAr[MYSQLI_TYPE_GEOMETRY]    = 'geometry';    $typeAr[MYSQLI_TYPE_BIT]         = 'bit';    $fields = mysqli_fetch_fields($result);    // this happens sometimes (seen under MySQL 4.0.25)    if (!is_array($fields)) {        return false;    }    foreach ($fields as $k => $field) {        $fields[$k]->_type = $field->type;        $fields[$k]->type = $typeAr[$field->type];        $fields[$k]->_flags = $field->flags;        $fields[$k]->flags = PMA_DBI_field_flags($result, $k);        // Enhance the field objects for mysql-extension compatibilty        //$flags = explode(' ', $fields[$k]->flags);        //array_unshift($flags, 'dummy');        $fields[$k]->multiple_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_MULTIPLE_KEY_FLAG);        $fields[$k]->primary_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_PRI_KEY_FLAG);        $fields[$k]->unique_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNIQUE_KEY_FLAG);        $fields[$k]->not_null            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NOT_NULL_FLAG);        $fields[$k]->unsigned            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNSIGNED_FLAG);        $fields[$k]->zerofill            = (int) (bool) ($fields[$k]->_flags & MYSQLI_ZEROFILL_FLAG);        $fields[$k]->numeric            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NUM_FLAG);        $fields[$k]->blob            = (int) (bool) ($fields[$k]->_flags & MYSQLI_BLOB_FLAG);    }    return $fields;}/** * return number of fields in given $result * * @param   mysqli_result  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysqli_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysqli_fetch_field_direct($result, $i)->length;}/** * returns name of $i. field in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysqli_fetch_field_direct($result, $i)->name;}/** * returns concatenated string of human readable field flags * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    // This is missing from PHP 5.2.5, see http://bugs.php.net/bug.php?id=44846    if (! defined('MYSQLI_ENUM_FLAG')) {        define('MYSQLI_ENUM_FLAG', 256); // see MySQL source include/mysql_com.h    }    $f = mysqli_fetch_field_direct($result, $i);    $type = $f->type;    $charsetnr = $f->charsetnr;    $f = $f->flags;    $flags = '';    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique ';    }    if ($f & MYSQLI_NUM_FLAG) {        $flags .= 'num ';    }    if ($f & MYSQLI_PART_KEY_FLAG) {        $flags .= 'part_key ';    }    if ($f & MYSQLI_SET_FLAG) {        $flags .= 'set ';    }    if ($f & MYSQLI_TIMESTAMP_FLAG) {        $flags .= 'timestamp ';    }    if ($f & MYSQLI_AUTO_INCREMENT_FLAG) {        $flags .= 'auto_increment ';    }    if ($f & MYSQLI_ENUM_FLAG) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == MYSQLI_TYPE_TINY_BLOB || $type == MYSQLI_TYPE_BLOB || $type == MYSQLI_TYPE_MEDIUM_BLOB || $type == MYSQLI_TYPE_LONG_BLOB || $type == MYSQLI_TYPE_VAR_STRING || $type == MYSQLI_TYPE_STRING) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & MYSQLI_ZEROFILL_FLAG) {        $flags .= 'zerofill ';    }    if ($f & MYSQLI_UNSIGNED_FLAG) {        $flags .= 'unsigned ';    }    if ($f & MYSQLI_BLOB_FLAG) {        $flags .= 'blob ';    }    if ($f & MYSQLI_MULTIPLE_KEY_FLAG) {        $flags .= 'multiple_key ';    }    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique_key ';    }    if ($f & MYSQLI_PRI_KEY_FLAG) {        $flags .= 'primary_key ';    }    if ($f & MYSQLI_NOT_NULL_FLAG) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc functions used all over the scripts. * * @package PhpMyAdmin *//** * Detects which function to use for PMA_pow. * * @return string Function name. */function PMA_detect_pow(){    if (function_exists('bcpow')) {        // BCMath Arbitrary Precision Mathematics Function        return 'bcpow';    } elseif (function_exists('gmp_pow')) {        // GMP Function        return 'gmp_pow';    } else {        // PHP function        return 'pow';    }}/** * Exponential expression / raise number into power * * @param string $base         base to raise * @param string $exp          exponent to use * @param mixed  $use_function pow function to use, or false for auto-detect * * @return mixed string or float */function PMA_pow($base, $exp, $use_function = false){    static $pow_function = null;    if (null == $pow_function) {        $pow_function = PMA_detect_pow();    }    if (! $use_function) {        $use_function = $pow_function;    }    if ($exp < 0 && 'pow' != $use_function) {        return false;    }    switch ($use_function) {    case 'bcpow' :        // bcscale() needed for testing PMA_pow() with base values < 1        bcscale(10);        $pow = bcpow($base, $exp);        break;    case 'gmp_pow' :         $pow = gmp_strval(gmp_pow($base, $exp));        break;    case 'pow' :        $base = (float) $base;        $exp = (int) $exp;        $pow = pow($base, $exp);        break;    default:        $pow = $use_function($base, $exp);    }    return $pow;}/** * Returns an HTML IMG tag for a particular icon from a theme, * which may be an actual file or an icon from a sprite. * This function takes into account the PropertiesIconic * configuration setting and wraps the image tag in a span tag. * * @param string  $icon       name of icon file * @param string  $alternate  alternate text * @param boolean $force_text whether to force alternate text to be displayed * * @return string an html snippet */function PMA_getIcon($icon, $alternate = '', $force_text = false){    // $cfg['PropertiesIconic'] is true or both    $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);    // $cfg['PropertiesIconic'] is false or both    // OR we have no $include_icon    $include_text = ($force_text || true !== $GLOBALS['cfg']['PropertiesIconic']);    // Always use a span (we rely on this in js/sql.js)    $button = '<span class="nowrap">';    if ($include_icon) {        $button .= PMA_getImage($icon, $alternate);    }    if ($include_icon && $include_text) {        $button .= ' ';    }    if ($include_text) {        $button .= $alternate;    }    $button .= '</span>';    return $button;}/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string $image      The name of the file to get * @param string $alternate  Used to set 'alt' and 'title' attributes of the image * @param array  $attributes An associative array of other attributes * * @return string an html IMG tag */function PMA_getImage($image, $alternate = '', $attributes = array()){    static $sprites; // cached list of available sprites (if any)    $url       = '';    $is_sprite = false;    $alternate = htmlspecialchars($alternate);    // If it's the first time this function is called    if (! isset($sprites)) {        // Try to load the list of sprites        if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {            include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';            $sprites = PMA_sprites();        } else {            // No sprites are available for this theme            $sprites = array();        }    }    // Check if we have the requested image as a sprite    //  and set $url accordingly    $class = str_replace(array('.gif','.png'), '', $image);    if (array_key_exists($class, $sprites)) {        $is_sprite = true;        $url = 'themes/dot.gif';    } else {        $url = $GLOBALS['pmaThemeImage'] . $image;    }    // set class attribute    if ($is_sprite) {        if (isset($attributes['class'])) {            $attributes['class'] = "icon ic_$class " . $attributes['class'];        } else {            $attributes['class'] = "icon ic_$class";        }    }    // set all other attributes    $attr_str = '';    foreach ($attributes as $key => $value) {        if (! in_array($key, array('alt', 'title'))) {            $attr_str .= " $key=\"$value\"";        }    }    // override the alt attribute    if (isset($attributes['alt'])) {        $alt = $attributes['alt'];    } else {        $alt = $alternate;    }    // override the title attribute    if (isset($attributes['title'])) {        $title = $attributes['title'];    } else {        $title = $alternate;    }    // generate the IMG tag    $template = '<img src="%s" title="%s" alt="%s"%s />';    $retval = sprintf($template, $url, $title, $alt, $attr_str);    return $retval;}/** * Displays the maximum size for an upload * * @param integer $max_upload_size the size * * @return string the message * * @access  public */function PMA_displayMaximumUploadSize($max_upload_size){    // I have to reduce the second parameter (sensitiveness) from 6 to 4    // to avoid weird results like 512 kKib    list($max_size, $max_unit) = PMA_formatByteDown($max_upload_size, 4);    return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';}/** * Generates a hidden field which should indicate to the browser * the maximum size for upload * * @param integer $max_size the size * * @return string the INPUT field * * @access  public */function PMA_generateHiddenMaxFileSize($max_size){    return '<input type="hidden" name="MAX_FILE_SIZE" value="' .$max_size . '" />';}/** * Add slashes before "'" and "\" characters so a value containing them can * be used in a sql comparison. * * @param string $a_string the string to slash * @param bool   $is_like  whether the string will be used in a 'LIKE' clause *                         (it then requires two more escaped sequences) or not * @param bool   $crlf     whether to treat cr/lfs as escape-worthy entities *                         (converts \n to \\n, \r to \\r) * @param bool   $php_code whether this function is used as part of the *                         "Create PHP code" dialog * * @return  string   the slashed string * * @access  public */function PMA_sqlAddSlashes($a_string = '', $is_like = false, $crlf = false, $php_code = false){    if ($is_like) {        $a_string = str_replace('\\', '\\\\\\\\', $a_string);    } else {        $a_string = str_replace('\\', '\\\\', $a_string);    }    if ($crlf) {        $a_string = strtr(            $a_string,            array("\n" => '\n', "\r" => '\r', "\t" => '\t')        );    }    if ($php_code) {        $a_string = str_replace('\'', '\\\'', $a_string);    } else {        $a_string = str_replace('\'', '\'\'', $a_string);    }    return $a_string;} // end of the 'PMA_sqlAddSlashes()' function/** * Add slashes before "_" and "%" characters for using them in MySQL * database, table and field names. * Note: This function does not escape backslashes! * * @param string $name the string to escape * * @return string the escaped string * * @access  public */function PMA_escape_mysql_wildcards($name){    return strtr($name, array('_' => '\\_', '%' => '\\%'));} // end of the 'PMA_escape_mysql_wildcards()' function/** * removes slashes before "_" and "%" characters * Note: This function does not unescape backslashes! * * @param string $name the string to escape * * @return  string   the escaped string * * @access  public */function PMA_unescape_mysql_wildcards($name){    return strtr($name, array('\\_' => '_', '\\%' => '%'));} // end of the 'PMA_unescape_mysql_wildcards()' function/** * removes quotes (',",`) from a quoted string * * checks if the sting is quoted and removes this quotes * * @param string $quoted_string string to remove quotes from * @param string $quote         type of quote to remove * * @return string unqoted string */function PMA_unQuote($quoted_string, $quote = null){    $quotes = array();    if (null === $quote) {        $quotes[] = '`';        $quotes[] = '"';        $quotes[] = "'";    } else {        $quotes[] = $quote;    }    foreach ($quotes as $quote) {        if (substr($quoted_string, 0, 1) === $quote            && substr($quoted_string, -1, 1) === $quote        ) {            $unquoted_string = substr($quoted_string, 1, -1);            // replace escaped quotes            $unquoted_string = str_replace(                $quote . $quote,                $quote,                $unquoted_string            );            return $unquoted_string;        }    }    return $quoted_string;}/** * format sql strings * * @param mixed  $parsed_sql   pre-parsed SQL structure * @param string $unparsed_sql raw SQL string * * @return string  the formatted sql * * @global  array    the configuration array * @global  boolean  whether the current statement is a multiple one or not * * @access  public * @todo    move into PMA_Sql */function PMA_formatSql($parsed_sql, $unparsed_sql = ''){    global $cfg;    // Check that we actually have a valid set of parsed data    // well, not quite    // first check for the SQL parser having hit an error    if (PMA_SQP_isError()) {        return htmlspecialchars($parsed_sql['raw']);    }    // then check for an array    if (! is_array($parsed_sql)) {        // We don't so just return the input directly        // This is intended to be used for when the SQL Parser is turned off        $formatted_sql = "<pre>\n";        if ($cfg['SQP']['fmtType'] == 'none' && $unparsed_sql != '') {            $formatted_sql .= $unparsed_sql;        } else {            $formatted_sql .= $parsed_sql;        }        $formatted_sql .= "\n</pre>";        return $formatted_sql;    }    $formatted_sql        = '';    switch ($cfg['SQP']['fmtType']) {    case 'none':        if ($unparsed_sql != '') {            $formatted_sql = '<span class="inner_sql"><pre>' . "\n"                . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . "\n"                . '</pre></span>';        } else {            $formatted_sql = PMA_SQP_formatNone($parsed_sql);        }        break;    case 'html':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');        break;    case 'text':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');        break;    default:        break;    } // end switch    return $formatted_sql;} // end of the "PMA_formatSql()" function/** * Displays a link to the official MySQL documentation * * @param string $chapter   chapter of "HTML, one page per chapter" documentation * @param string $link      contains name of page/anchor that is being linked * @param bool   $big_icon  whether to use big icon (like in left frame) * @param string $anchor    anchor to page part * @param bool   $just_open whether only the opening <a> tag should be returned * * @return  string  the html link * * @access  public */function PMA_showMySQLDocu($chapter, $link, $big_icon = false, $anchor = '', $just_open = false){    global $cfg;    if ($cfg['MySQLManualType'] == 'none' || empty($cfg['MySQLManualBase'])) {        return '';    }    // Fixup for newly used names:    $chapter = str_replace('_', '-', strtolower($chapter));    $link = str_replace('_', '-', strtolower($link));    switch ($cfg['MySQLManualType']) {    case 'chapters':        if (empty($chapter)) {            $chapter = 'index';        }        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;        break;    case 'big':        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '#' . $anchor;        break;    case 'searchable':        if (empty($link)) {            $link = 'index';        }        $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    case 'viewable':    default:        if (empty($link)) {            $link = 'index';        }        $mysql = '5.0';        $lang = 'en';        if (defined('PMA_MYSQL_INT_VERSION')) {            if (PMA_MYSQL_INT_VERSION >= 50500) {                $mysql = '5.5';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.5 documentation language', 'en');            } else if (PMA_MYSQL_INT_VERSION >= 50100) {                $mysql = '5.1';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.1 documentation language', 'en');            } else {                $mysql = '5.0';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.0 documentation language', 'en');            }        }        $url = $cfg['MySQLManualBase'] . '/' . $mysql . '/' . $lang . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    }    $open_link = '<a href="' . PMA_linkURL($url) . '" target="mysql_doc">';    if ($just_open) {        return $open_link;    } elseif ($big_icon) {        return $open_link . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';    } elseif ($GLOBALS['cfg']['ReplaceHelpImg']) {        return $open_link . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        return '[' . $open_link . __('Documentation') . '</a>]';    }} // end of the 'PMA_showMySQLDocu()' function/** * Displays a link to the phpMyAdmin documentation * * @param string $anchor anchor in documentation * * @return  string  the html link * * @access  public */function PMA_showDocu($anchor){    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="Documentation.html#' . $anchor . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="Documentation.html#' . $anchor . '" target="documentation">'        . __('Documentation') . '</a>]';    }} // end of the 'PMA_showDocu()' function/** * Displays a link to the PHP documentation * * @param string $target anchor in documentation * * @return string  the html link * * @access  public */function PMA_showPHPDocu($target){    $url = PMA_getPHPDocLink($target);    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="' . $url . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="' . $url . '" target="documentation">' . __('Documentation') . '</a>]';    }} // end of the 'PMA_showPHPDocu()' function/** * returns HTML for a footnote marker and add the messsage to the footnotes * * @param string $message the error message * @param bool   $bbcode * @param string $type    message types * * @return  string html code for a footnote marker * * @access  public */function PMA_showHint($message, $bbcode = false, $type = 'notice'){    if ($message instanceof PMA_Message) {        $key = $message->getHash();        $type = $message->getLevel();    } else {        $key = md5($message);    }    if (! isset($GLOBALS['footnotes'][$key])) {        if (empty($GLOBALS['footnotes']) || ! is_array($GLOBALS['footnotes'])) {            $GLOBALS['footnotes'] = array();        }        $nr = count($GLOBALS['footnotes']) + 1;        $GLOBALS['footnotes'][$key] = array(            'note'      => $message,            'type'      => $type,            'nr'        => $nr,        );    } else {        $nr = $GLOBALS['footnotes'][$key]['nr'];    }    if ($bbcode) {        return '[sup]' . $nr . '[/sup]';    }    // footnotemarker used in js/tooltip.js    return '<sup class="footnotemarker">' . $nr . '</sup>' .           PMA_getImage('b_help.png', '', array('class' => 'footnotemarker footnote_' . $nr));}/** * Displays a MySQL error message in the right frame. * * @param string $error_message  the error message * @param string $the_query      the sql query that failed * @param bool   $is_modify_link whether to show a "modify" link or not * @param string $back_url       the "back" link url (full path is not required) * @param bool   $exit           EXIT the page? * * @global  string    the curent table * @global  string    the current db * * @access  public */function PMA_mysqlDie($error_message = '', $the_query = '',$is_modify_link = true, $back_url = '', $exit = true){    global $table, $db;    /**     * start http output, display html headers     */    include_once './libraries/header.inc.php';    $error_msg_output = '';    if (!$error_message) {        $error_message = PMA_DBI_getError();    }    if (!$the_query && !empty($GLOBALS['sql_query'])) {        $the_query = $GLOBALS['sql_query'];    }    // --- Added to solve bug #641765    if (!function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {        $formatted_sql = htmlspecialchars($the_query);    } elseif (empty($the_query) || trim($the_query) == '') {        $formatted_sql = '';    } else {        if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {            $formatted_sql = htmlspecialchars(substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';        } else {            $formatted_sql = PMA_formatSql(PMA_SQP_parse($the_query), $the_query);        }    }    // ---    $error_msg_output .= "\n" . '<!-- PMA-SQL-ERROR -->' . "\n";    $error_msg_output .= '    <div class="error"><h1>' . __('Error') . '</h1>' . "\n";    // if the config password is wrong, or the MySQL server does not    // respond, do not show the query that would reveal the    // username/password    if (!empty($the_query) && !strstr($the_query, 'connect')) {        // --- Added to solve bug #641765        if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {            $error_msg_output .= PMA_SQP_getErrorString() . "\n";            $error_msg_output .= '<br />' . "\n";        }        // ---        // modified to show the help on sql errors        $error_msg_output .= '    <p><strong>' . __('SQL query') . ':</strong>' . "\n";        if (strstr(strtolower($formatted_sql), 'select')) {            // please show me help to the error on select            $error_msg_output .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT');        }        if ($is_modify_link) {            $_url_params = array(                'sql_query' => $the_query,                'show_query' => 1,            );            if (strlen($table)) {                $_url_params['db'] = $db;                $_url_params['table'] = $table;                $doedit_goto = '<a href="tbl_sql.php' . PMA_generate_common_url($_url_params) . '">';            } elseif (strlen($db)) {                $_url_params['db'] = $db;                $doedit_goto = '<a href="db_sql.php' . PMA_generate_common_url($_url_params) . '">';            } else {                $doedit_goto = '<a href="server_sql.php' . PMA_generate_common_url($_url_params) . '">';            }            $error_msg_output .= $doedit_goto               . PMA_getIcon('b_edit.png', __('Edit'))               . '</a>';        } // end if        $error_msg_output .= '    </p>' . "\n"            .'    <p>' . "\n"            .'        ' . $formatted_sql . "\n"            .'    </p>' . "\n";    } // end if    if (! empty($error_message)) {        $error_message = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $error_message        );    }    // modified to show the help on error-returns    // (now error-messages-server)    $error_msg_output .= '<p>' . "\n"            . '    <strong>' . __('MySQL said: ') . '</strong>'            . PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')            . "\n"            . '</p>' . "\n";    // The error message will be displayed within a CODE segment.    // To preserve original formatting, but allow wordwrapping,    // we do a couple of replacements    // Replace all non-single blanks with their HTML-counterpart    $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);    // Replace TAB-characters with their HTML-counterpart    $error_message = str_replace("\t", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);    // Replace linebreaks    $error_message = nl2br($error_message);    $error_msg_output .= '<code>' . "\n"        . $error_message . "\n"        . '</code><br />' . "\n";    $error_msg_output .= '</div>';    $_SESSION['Import_message']['message'] = $error_msg_output;    if ($exit) {        /**         * If in an Ajax request         * - avoid displaying a Back link         * - use PMA_ajaxResponse() to transmit the message and exit         */        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($error_msg_output, false);        }        if (! empty($back_url)) {            if (strstr($back_url, '?')) {                $back_url .= '&amp;no_history=true';            } else {                $back_url .= '?no_history=true';            }            $_SESSION['Import_message']['go_back_url'] = $back_url;            $error_msg_output .= '<fieldset class="tblFooters">';            $error_msg_output .= '[ <a href="' . $back_url . '">' . __('Back') . '</a> ]';            $error_msg_output .= '</fieldset>' . "\n\n";        }        echo $error_msg_output;        /**         * display footer and exit         */        include './libraries/footer.inc.php';    } else {        echo $error_msg_output;    }} // end of the 'PMA_mysqlDie()' function/** * returns array with tables of given db with extended information and grouped * * @param string   $db           name of db * @param string   $tables       name of tables * @param integer  $limit_offset list offset * @param int|bool $limit_count  max tables to return * * @return  array    (recursive) grouped table list */function PMA_getTableList($db, $tables = null, $limit_offset = 0, $limit_count = false){    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if (null === $tables) {        $tables = PMA_DBI_get_tables_full($db, false, false, null, $limit_offset, $limit_count);        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($tables, 'strnatcasecmp');        }    }    if (count($tables) < 1) {        return $tables;    }    $default = array(        'Name'      => '',        'Rows'      => 0,        'Comment'   => '',        'disp_name' => '',    );    $table_groups = array();    // for blobstreaming - list of blobstreaming tables    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    foreach ($tables as $table_name => $table) {        // if BS tables exist        if (PMA_BS_IsHiddenTable($table_name)) {            continue;        }        // check for correct row count        if (null === $table['Rows']) {            // Do not check exact row count here,            // if row count is invalid possibly the table is defect            // and this would break left frame;            // but we can check row count if this is a view or the            // information_schema database            // since PMA_Table::countRecords() returns a limited row count            // in this case.            // set this because PMA_Table::countRecords() can use it            $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';            if ($tbl_is_view || PMA_is_system_schema($db)) {                $table['Rows'] = PMA_Table::countRecords($db, $table['Name'], false, true);            }        }        // in $group we save the reference to the place in $table_groups        // where to store the table info        if ($GLOBALS['cfg']['LeftFrameDBTree']            && $sep && strstr($table_name, $sep)        ) {            $parts = explode($sep, $table_name);            $group =& $table_groups;            $i = 0;            $group_name_full = '';            $parts_cnt = count($parts) - 1;            while ($i < $parts_cnt                    && $i < $GLOBALS['cfg']['LeftFrameTableLevel']) {                $group_name = $parts[$i] . $sep;                $group_name_full .= $group_name;                if (! isset($group[$group_name])) {                    $group[$group_name] = array();                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {                    $table = $group[$group_name];                    $group[$group_name] = array();                    $group[$group_name][$group_name] = $table;                    unset($table);                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } else {                    $group[$group_name]['tab' . $sep . 'count']++;                }                $group =& $group[$group_name];                $i++;            }        } else {            if (! isset($table_groups[$table_name])) {                $table_groups[$table_name] = array();            }            $group =& $table_groups;        }        if ($GLOBALS['cfg']['ShowTooltipAliasTB']            && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'            && $table['Comment'] // do not switch if the comment is empty        ) {            // switch tooltip and name            $table['disp_name'] = $table['Comment'];            $table['Comment'] = $table['Name'];        } else {            $table['disp_name'] = $table['Name'];        }        $group[$table_name] = array_merge($default, $table);    }    return $table_groups;}/* ----------------------- Set of misc functions ----------------------- *//** * Adds backquotes on both sides of a database, table or field name. * and escapes backquotes inside the name with another backquote * * example: * <code> * echo PMA_backquote('owner`s db'); // `owner``s db` * * </code> * * @param mixed   $a_name the database, table or field name to "backquote" *                        or array of it * @param boolean $do_it  a flag to bypass this function (used by dump *                        functions) * * @return  mixed    the "backquoted" database, table or field name * * @access  public */function PMA_backquote($a_name, $do_it = true){    if (is_array($a_name)) {        foreach ($a_name as &$data) {            $data = PMA_backquote($data, $do_it);        }        return $a_name;    }    if (! $do_it) {        global $PMA_SQPdata_forbidden_word;        if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {            return $a_name;        }    }    // '0' is also empty for php :-(    if (strlen($a_name) && $a_name !== '*') {        return '`' . str_replace('`', '``', $a_name) . '`';    } else {        return $a_name;    }} // end of the 'PMA_backquote()' function/** * Defines the <CR><LF> value depending on the user OS. * * @return  string   the <CR><LF> value to use * * @access  public */function PMA_whichCrlf(){    // The 'PMA_USR_OS' constant is defined in "./libraries/Config.class.php"    // Win case    if (PMA_USR_OS == 'Win') {        $the_crlf = "\r\n";    } else {        // Others        $the_crlf = "\n";    }    return $the_crlf;} // end of the 'PMA_whichCrlf()' function/** * Reloads navigation if needed. * * @param bool $jsonly prints out pure JavaScript * * @access  public */function PMA_reloadNavigation($jsonly=false){    // Reloads the navigation frame via JavaScript if required    if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {        // one of the reasons for a reload is when a table is dropped        // in this case, get rid of the table limit offset, otherwise        // we have a problem when dropping a table on the last page        // and the offset becomes greater than the total number of tables        unset($_SESSION['tmp_user_values']['table_limit_offset']);        echo "\n";        $reload_url = './navigation.php?' . PMA_generate_common_url($GLOBALS['db'], '', '&');        if (!$jsonly) {            echo '<script type="text/javascript">' . PHP_EOL;        }    ?>//<![CDATA[if (typeof(window.parent) != 'undefined'    && typeof(window.parent.frame_navigation) != 'undefined'    && window.parent.goTo) {    window.parent.goTo('<?php echo $reload_url; ?>');}//]]><?php        if (!$jsonly) {            echo '</script>' . PHP_EOL;        }        unset($GLOBALS['reload']);    }}/** * displays the message and the query * usually the message is the result of the query executed * * @param string  $message   the message to display * @param string  $sql_query the query to display * @param string  $type      the type (level) of the message * @param boolean $is_view   is this a message after a VIEW operation? * * @return  string * * @access  public */function PMA_showMessage($message, $sql_query = null, $type = 'notice', $is_view = false){    /*     * PMA_ajaxResponse uses this function to collect the string of HTML generated     * for showing the message.  Use output buffering to collect it and return it     * in a string.  In some special cases on sql.php, buffering has to be disabled     * and hence we check with $GLOBALS['buffer_message']     */    if ( $GLOBALS['is_ajax_request'] == true && ! isset($GLOBALS['buffer_message']) ) {        ob_start();    }    global $cfg;    if (null === $sql_query) {        if (! empty($GLOBALS['display_query'])) {            $sql_query = $GLOBALS['display_query'];        } elseif ($cfg['SQP']['fmtType'] == 'none' && ! empty($GLOBALS['unparsed_sql'])) {            $sql_query = $GLOBALS['unparsed_sql'];        } elseif (! empty($GLOBALS['sql_query'])) {            $sql_query = $GLOBALS['sql_query'];        } else {            $sql_query = '';        }    }    if (isset($GLOBALS['using_bookmark_message'])) {        $GLOBALS['using_bookmark_message']->display();        unset($GLOBALS['using_bookmark_message']);    }    // Corrects the tooltip text via JS if required    // @todo this is REALLY the wrong place to do this - very unexpected here    if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {        $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);        $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);        echo "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo "if (window.parent.updateTableTitle) window.parent.updateTableTitle('"            . $uni_tbl . "', '" . PMA_jsFormat($tooltip, false) . "');" . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";    } // end if ... elseif    // Checks if the table needs to be repaired after a TRUNCATE query.    // @todo what about $GLOBALS['display_query']???    // @todo this is REALLY the wrong place to do this - very unexpected here    if (strlen($GLOBALS['table'])        && $GLOBALS['sql_query'] == 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table'])    ) {        if (PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Index_length') > 1024 && !PMA_DRIZZLE) {            PMA_DBI_try_query('REPAIR TABLE ' . PMA_backquote($GLOBALS['table']));        }    }    unset($tbl_status);    // In an Ajax request, $GLOBALS['cell_align_left'] may not be defined. Hence,    // check for it's presence before using it    echo '<div id="result_query" align="'        . ( isset($GLOBALS['cell_align_left']) ? $GLOBALS['cell_align_left'] : '' )        . '">' . "\n";    if ($message instanceof PMA_Message) {        if (isset($GLOBALS['special_message'])) {            $message->addMessage($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        $message->display();        $type = $message->getLevel();    } else {        echo '<div class="' . $type . '">';        echo PMA_sanitize($message);        if (isset($GLOBALS['special_message'])) {            echo PMA_sanitize($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        echo '</div>';    }    if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {        // Html format the query to be displayed        // If we want to show some sql code it is easiest to create it here        /* SQL-Parser-Analyzer */        if (! empty($GLOBALS['show_as_php'])) {            $new_line = '\\n"<br />' . "\n"                . '&nbsp;&nbsp;&nbsp;&nbsp;. "';            $query_base = htmlspecialchars(addslashes($sql_query));            $query_base = preg_replace('/((\015\012)|(\015)|(\012))/', $new_line, $query_base);        } else {            $query_base = $sql_query;        }        $query_too_big = false;        if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {            // when the query is large (for example an INSERT of binary            // data), the parser chokes; so avoid parsing the query            $query_too_big = true;            $shortened_query_base = nl2br(                htmlspecialchars(                    substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL']) . '[...]'                )            );        } elseif (! empty($GLOBALS['parsed_sql'])         && $query_base == $GLOBALS['parsed_sql']['raw']) {            // (here, use "! empty" because when deleting a bookmark,            // $GLOBALS['parsed_sql'] is set but empty            $parsed_sql = $GLOBALS['parsed_sql'];        } else {            // Parse SQL if needed            $parsed_sql = PMA_SQP_parse($query_base);        }        // Analyze it        if (isset($parsed_sql) && ! PMA_SQP_isError()) {            $analyzed_display_query = PMA_SQP_analyze($parsed_sql);            // Same as below (append LIMIT), append the remembered ORDER BY            if ($GLOBALS['cfg']['RememberSorting']                && isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_order_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_order_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);                // update the $analyzed_display_query                $analyzed_display_query[0]['section_before_limit'] .= $GLOBALS['sql_order_to_append'];                $analyzed_display_query[0]['order_by_clause'] = $GLOBALS['sorted_col'];            }            // Here we append the LIMIT added for navigation, to            // enable its display. Adding it higher in the code            // to $sql_query would create a problem when            // using the Refresh or Edit links.            // Only append it on SELECTs.            /**             * @todo what would be the best to do when someone hits Refresh:             * use the current LIMITs ?             */            if (isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_limit_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_limit_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);            }        }        if (! empty($GLOBALS['show_as_php'])) {            $query_base = '$sql  = "' . $query_base;        } elseif (! empty($GLOBALS['validatequery'])) {            try {                $query_base = PMA_validateSQL($query_base);            } catch (Exception $e) {                PMA_Message::error(__('Failed to connect to SQL validator!'))->display();            }        } elseif (isset($parsed_sql)) {            $query_base = PMA_formatSql($parsed_sql, $query_base);        }        // Prepares links that may be displayed to edit/explain the query        // (don't go to default pages, we must go to the page        // where the query box is available)        // Basic url query part        $url_params = array();        if (! isset($GLOBALS['db'])) {            $GLOBALS['db'] = '';        }        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];            if (strlen($GLOBALS['table'])) {                $url_params['table'] = $GLOBALS['table'];                $edit_link = 'tbl_sql.php';            } else {                $edit_link = 'db_sql.php';            }        } else {            $edit_link = 'server_sql.php';        }        // Want to have the query explained        // but only explain a SELECT (that has not been explained)        /* SQL-Parser-Analyzer */        $explain_link = '';        $is_select = false;        if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {            $explain_params = $url_params;            // Detect if we are validating as well            // To preserve the validate uRL data            if (! empty($GLOBALS['validatequery'])) {                $explain_params['validatequery'] = 1;            }            if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;                $_message = __('Explain SQL');                $is_select = true;            } elseif (preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = substr($sql_query, 8);                $_message = __('Skip Explain SQL');            }            if (isset($explain_params['sql_query'])) {                $explain_link = 'import.php' . PMA_generate_common_url($explain_params);                $explain_link = ' [' . PMA_linkOrButton($explain_link, $_message) . ']';            }        } //show explain        $url_params['sql_query']  = $sql_query;        $url_params['show_query'] = 1;        // even if the query is big and was truncated, offer the chance        // to edit it (unless it's enormous, see PMA_linkOrButton() )        if (! empty($cfg['SQLQuery']['Edit'])) {            if ($cfg['EditInWindow'] == true) {                $onclick = 'window.parent.focus_querywindow(\''                    . PMA_jsFormat($sql_query, false) . '\'); return false;';            } else {                $onclick = '';            }            $edit_link .= PMA_generate_common_url($url_params) . '#querybox';            $edit_link = ' [' . PMA_linkOrButton($edit_link, __('Edit'), array('onclick' => $onclick)) . ']';        } else {            $edit_link = '';        }        $url_qpart = PMA_generate_common_url($url_params);        // Also we would like to get the SQL formed in some nice        // php-code        if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {            $php_params = $url_params;            if (! empty($GLOBALS['show_as_php'])) {                $_message = __('Without PHP Code');            } else {                $php_params['show_as_php'] = 1;                $_message = __('Create PHP Code');            }            $php_link = 'import.php' . PMA_generate_common_url($php_params);            $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';            if (isset($GLOBALS['show_as_php'])) {                $runquery_link = 'import.php' . PMA_generate_common_url($url_params);                $php_link .= ' [' . PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';            }        } else {            $php_link = '';        } //show as php        // Refresh query        if (! empty($cfg['SQLQuery']['Refresh'])            && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same            && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)        ) {            $refresh_link = 'import.php' . PMA_generate_common_url($url_params);            $refresh_link = ' [' . PMA_linkOrButton($refresh_link, __('Refresh')) . ']';        } else {            $refresh_link = '';        } //refresh        if (! empty($cfg['SQLValidator']['use'])            && ! empty($cfg['SQLQuery']['Validate'])        ) {            $validate_params = $url_params;            if (!empty($GLOBALS['validatequery'])) {                $validate_message = __('Skip Validate SQL');            } else {                $validate_params['validatequery'] = 1;                $validate_message = __('Validate SQL');            }            $validate_link = 'import.php' . PMA_generate_common_url($validate_params);            $validate_link = ' [' . PMA_linkOrButton($validate_link, $validate_message) . ']';        } else {            $validate_link = '';        } //validator        if (!empty($GLOBALS['validatequery'])) {            echo '<div class="sqlvalidate">';        } else {            echo '<code class="sql">';        }        if ($query_too_big) {            echo $shortened_query_base;        } else {            echo $query_base;        }        //Clean up the end of the PHP        if (! empty($GLOBALS['show_as_php'])) {            echo '";';        }        if (!empty($GLOBALS['validatequery'])) {            echo '</div>';        } else {            echo '</code>';        }        echo '<div class="tools">';        // avoid displaying a Profiling checkbox that could        // be checked, which would reexecute an INSERT, for example        if (! empty($refresh_link)) {            PMA_profilingCheckbox($sql_query);        }        // if needed, generate an invisible form that contains controls for the        // Inline link; this way, the behavior of the Inline link does not        // depend on the profiling support or on the refresh link        if (empty($refresh_link) || ! PMA_profilingSupported()) {            echo '<form action="sql.php" method="post">';            echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);            echo '<input type="hidden" name="sql_query" value="'                . htmlspecialchars($sql_query) . '" />';            echo '</form>';        }        // in the tools div, only display the Inline link when not in ajax        // mode because 1) it currently does not work and 2) we would        // have two similar mechanisms on the page for the same goal        if ($is_select            || $GLOBALS['is_ajax_request'] === false            && ! $query_too_big        ) {            // see in js/functions.js the jQuery code attached to id inline_edit            // document.write conflicts with jQuery, hence used $().append()            echo "<script type=\"text/javascript\">\n" .                "//<![CDATA[\n" .                "$('.tools form').last().after('[<a href=\"#\" title=\"" .                PMA_escapeJsString(__('Inline edit of this query')) .                "\" class=\"inline_edit_sql\">" .                PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .                "</a>]');\n" .                "//]]>\n" .                "</script>";        }        echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;        echo '</div>';    }    echo '</div>';    if ($GLOBALS['is_ajax_request'] === false) {        echo '<br class="clearfloat" />';    }    // If we are in an Ajax request, we have most probably been called in    // PMA_ajaxResponse().  Hence, collect the buffer contents and return it    // to PMA_ajaxResponse(), which will encode it for JSON.    if ($GLOBALS['is_ajax_request'] == true        && ! isset($GLOBALS['buffer_message'])    ) {        $buffer_contents =  ob_get_contents();        ob_end_clean();        return $buffer_contents;    }    return null;} // end of the 'PMA_showMessage()' function/** * Verifies if current MySQL server supports profiling * * @access  public * * @return  boolean whether profiling is supported */function PMA_profilingSupported(){    if (! PMA_cacheExists('profiling_supported', true)) {        // 5.0.37 has profiling but for example, 5.1.20 does not        // (avoid a trip to the server for MySQL before 5.0.37)        // and do not set a constant as we might be switching servers        if (defined('PMA_MYSQL_INT_VERSION')            && PMA_MYSQL_INT_VERSION >= 50037            && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'profiling'")        ) {            PMA_cacheSet('profiling_supported', true, true);        } else {            PMA_cacheSet('profiling_supported', false, true);        }    }    return PMA_cacheGet('profiling_supported', true);}/** * Displays a form with the Profiling checkbox * * @param string $sql_query sql query * * @access  public */function PMA_profilingCheckbox($sql_query){    if (PMA_profilingSupported()) {        echo '<form action="sql.php" method="post">' . "\n";        echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);        echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";        echo '<input type="hidden" name="profiling_form" value="1" />' . "\n";        PMA_display_html_checkbox('profiling', __('Profiling'), isset($_SESSION['profiling']), true);        echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";        echo '</form>' . "\n";    }}/** * Formats $value to byte view * * @param double $value the value to format * @param int    $limes the sensitiveness * @param int    $comma the number of decimals to retain * * @return   array    the formatted value and its unit * * @access  public */function PMA_formatByteDown($value, $limes = 6, $comma = 0){    if ($value === null) {        return null;    }    $byteUnits = array(        /* l10n: shortcuts for Byte */        __('B'),        /* l10n: shortcuts for Kilobyte */        __('KiB'),        /* l10n: shortcuts for Megabyte */        __('MiB'),        /* l10n: shortcuts for Gigabyte */        __('GiB'),        /* l10n: shortcuts for Terabyte */        __('TiB'),        /* l10n: shortcuts for Petabyte */        __('PiB'),        /* l10n: shortcuts for Exabyte */        __('EiB')        );    $dh   = PMA_pow(10, $comma);    $li   = PMA_pow(10, $limes);    $unit = $byteUnits[0];    for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {        if (isset($byteUnits[$d]) && $value >= $li * PMA_pow(10, $ex)) {            // use 1024.0 to avoid integer overflow on 64-bit machines            $value = round($value / (PMA_pow(1024, $d) / $dh)) /$dh;            $unit = $byteUnits[$d];            break 1;        } // end if    } // end for    if ($unit != $byteUnits[0]) {        // if the unit is not bytes (as represented in current language)        // reformat with max length of 5        // 4th parameter=true means do not reformat if value < 1        $return_value = PMA_formatNumber($value, 5, $comma, true);    } else {        // do not reformat, just handle the locale        $return_value = PMA_formatNumber($value, 0);    }    return array(trim($return_value), $unit);} // end of the 'PMA_formatByteDown' function/** * Changes thousands and decimal separators to locale specific values. * * @param string $value the value * * @return string */function PMA_localizeNumber($value){    return str_replace(        array(',', '.'),        array(            /* l10n: Thousands separator */            __(','),            /* l10n: Decimal separator */            __('.'),            ),        $value    );}/** * Formats $value to the given length and appends SI prefixes * with a $length of 0 no truncation occurs, number is only formated * to the current locale * * examples: * <code> * echo PMA_formatNumber(123456789, 6);     // 123,457 k * echo PMA_formatNumber(-123456789, 4, 2); //    -123.46 M * echo PMA_formatNumber(-0.003, 6);        //      -3 m * echo PMA_formatNumber(0.003, 3, 3);      //       0.003 * echo PMA_formatNumber(0.00003, 3, 2);    //       0.03 m * echo PMA_formatNumber(0, 6);             //       0 * </code> * * @param double  $value          the value to format * @param integer $digits_left    number of digits left of the comma * @param integer $digits_right   number of digits right of the comma * @param boolean $only_down      do not reformat numbers below 1 * @param boolean $noTrailingZero removes trailing zeros right of the comma *                                (default: true) * * @return  string   the formatted value and its unit * * @access  public */function PMA_formatNumber($value, $digits_left = 3, $digits_right = 0,$only_down = false, $noTrailingZero = true){    if ($value==0) {        return '0';    }    $originalValue = $value;    //number_format is not multibyte safe, str_replace is safe    if ($digits_left === 0) {        $value = number_format($value, $digits_right);        if ($originalValue != 0 && floatval($value) == 0) {            $value = ' <' . (1 / PMA_pow(10, $digits_right));        }        return PMA_localizeNumber($value);    }    // this units needs no translation, ISO    $units = array(        -8 => 'y',        -7 => 'z',        -6 => 'a',        -5 => 'f',        -4 => 'p',        -3 => 'n',        -2 => '&micro;',        -1 => 'm',        0 => ' ',        1 => 'k',        2 => 'M',        3 => 'G',        4 => 'T',        5 => 'P',        6 => 'E',        7 => 'Z',        8 => 'Y'    );    // check for negative value to retain sign    if ($value < 0) {        $sign = '-';        $value = abs($value);    } else {        $sign = '';    }    $dh = PMA_pow(10, $digits_right);    /*     * This gives us the right SI prefix already,     * but $digits_left parameter not incorporated     */    $d = floor(log10($value) / 3);    /*     * Lowering the SI prefix by 1 gives us an additional 3 zeros     * So if we have 3,6,9,12.. free digits ($digits_left - $cur_digits)     * to use, then lower the SI prefix     */    $cur_digits = floor(log10($value / PMA_pow(1000, $d, 'pow'))+1);    if ($digits_left > $cur_digits) {        $d-= floor(($digits_left - $cur_digits)/3);    }    if ($d<0 && $only_down) {        $d=0;    }    $value = round($value / (PMA_pow(1000, $d, 'pow') / $dh)) /$dh;    $unit = $units[$d];    // If we dont want any zeros after the comma just add the thousand seperator    if ($noTrailingZero) {        $value = PMA_localizeNumber(            preg_replace('/(?<=\d)(?=(\d{3})+(?!\d))/', ',', $value)        );    } else {        //number_format is not multibyte safe, str_replace is safe        $value = PMA_localizeNumber(number_format($value, $digits_right));    }    if ($originalValue!=0 && floatval($value) == 0) {        return ' <' . (1 / PMA_pow(10, $digits_right)) . ' ' . $unit;    }    return $sign . $value . ' ' . $unit;} // end of the 'PMA_formatNumber' function/** * Returns the number of bytes when a formatted size is given * * @param string $formatted_size the size expression (for example 8MB) * * @return  integer  The numerical part of the expression (for example 8) */function PMA_extractValueFromFormattedSize($formatted_size){    $return_value = -1;    if (preg_match('/^[0-9]+GB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 3);    } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 2);    } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -1) * PMA_pow(1024, 1);    }    return $return_value;}// end of the 'PMA_extractValueFromFormattedSize' function/** * Writes localised date * * @param string $timestamp the current timestamp * @param string $format    format * * @return  string   the formatted date * * @access  public */function PMA_localisedDate($timestamp = -1, $format = ''){    $month = array(        /* l10n: Short month name */        __('Jan'),        /* l10n: Short month name */        __('Feb'),        /* l10n: Short month name */        __('Mar'),        /* l10n: Short month name */        __('Apr'),        /* l10n: Short month name */        _pgettext('Short month name', 'May'),        /* l10n: Short month name */        __('Jun'),        /* l10n: Short month name */        __('Jul'),        /* l10n: Short month name */        __('Aug'),        /* l10n: Short month name */        __('Sep'),        /* l10n: Short month name */        __('Oct'),        /* l10n: Short month name */        __('Nov'),        /* l10n: Short month name */        __('Dec'));    $day_of_week = array(        /* l10n: Short week day name */        _pgettext('Short week day name', 'Sun'),        /* l10n: Short week day name */        __('Mon'),        /* l10n: Short week day name */        __('Tue'),        /* l10n: Short week day name */        __('Wed'),        /* l10n: Short week day name */        __('Thu'),        /* l10n: Short week day name */        __('Fri'),        /* l10n: Short week day name */        __('Sat'));    if ($format == '') {        /* l10n: See http://www.php.net/manual/en/function.strftime.php */        $format = __('%B %d, %Y at %I:%M %p');    }    if ($timestamp == -1) {        $timestamp = time();    }    $date = preg_replace(        '@%[aA]@',        $day_of_week[(int)strftime('%w', $timestamp)],        $format    );    $date = preg_replace(        '@%[bB]@',        $month[(int)strftime('%m', $timestamp)-1],        $date    );    return strftime($date, $timestamp);} // end of the 'PMA_localisedDate()' function/** * returns a tab for tabbed navigation. * If the variables $link and $args ar left empty, an inactive tab is created * * @param array $tab        array with all options * @param array $url_params * * @return  string  html code for one tab, a link if valid otherwise a span * * @access  public */function PMA_generate_html_tab($tab, $url_params = array(), $base_dir=''){    // default values    $defaults = array(        'text'      => '',        'class'     => '',        'active'    => null,        'link'      => '',        'sep'       => '?',        'attr'      => '',        'args'      => '',        'warning'   => '',        'fragment'  => '',        'id'        => '',    );    $tab = array_merge($defaults, $tab);    // determine additionnal style-class    if (empty($tab['class'])) {        if (! empty($tab['active'])            || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])        ) {            $tab['class'] = 'active';        } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])          && basename($GLOBALS['PMA_PHP_SELF']) == $tab['link']          && empty($tab['warning'])) {            $tab['class'] = 'active';        }    }    if (!empty($tab['warning'])) {        $tab['class'] .= ' error';        $tab['attr'] .= ' title="' . htmlspecialchars($tab['warning']) . '"';    }    // If there are any tab specific URL parameters, merge those with    // the general URL parameters    if (! empty($tab['url_params']) && is_array($tab['url_params'])) {        $url_params = array_merge($url_params, $tab['url_params']);    }    // build the link    if (!empty($tab['link'])) {        $tab['link'] = htmlentities($tab['link']);        $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);        if (! empty($tab['args'])) {            foreach ($tab['args'] as $param => $value) {                $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)                    . '=' . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    // display icon, even if iconic is disabled but the link-text is missing    if (($GLOBALS['cfg']['MainPageIconic'] || empty($tab['text']))        && isset($tab['icon'])    ) {        // avoid generating an alt tag, because it only illustrates        // the text that follows and if browser does not display        // images, the text is duplicated        $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];    } elseif (empty($tab['text'])) {        // check to not display an empty link-text        $tab['text'] = '?';        trigger_error(            'empty linktext in function ' . __FUNCTION__ . '()',            E_USER_NOTICE        );    }    //Set the id for the tab, if set in the params    $id_string = ( empty($tab['id']) ? '' : ' id="'.$tab['id'].'" ' );    $out = '<li' . ($tab['class'] == 'active' ? ' class="active"' : '') . '>';    if (!empty($tab['link'])) {        $out .= '<a class="tab' . htmlentities($tab['class']) . '"'            .$id_string            .' href="' . $tab['link'] . '" ' . $tab['attr'] . '>'            . $tab['text'] . '</a>';    } else {        $out .= '<span class="tab' . htmlentities($tab['class']) . '"'.$id_string.'>'            . $tab['text'] . '</span>';    }    $out .= '</li>';    return $out;} // end of the 'PMA_generate_html_tab()' function/** * returns html-code for a tab navigation * * @param array  $tabs       one element per tab * @param string $url_params * @param string $base_dir * @param string $menu_id * * @return  string  html-code for tab-navigation */function PMA_generate_html_tabs($tabs, $url_params, $base_dir='', $menu_id='topmenu'){    $tab_navigation = '<div id="' . htmlentities($menu_id) . 'container" class="menucontainer">'        .'<ul id="' . htmlentities($menu_id) . '">';    foreach ($tabs as $tab) {        $tab_navigation .= PMA_generate_html_tab($tab, $url_params, $base_dir);    }    $tab_navigation .=         '</ul>' . "\n"        .'<div class="clearfloat"></div>'        .'</div>' . "\n";    return $tab_navigation;}/** * Displays a link, or a button if the link's URL is too large, to * accommodate some browsers' limitations * * @param string  $url        the URL * @param string  $message    the link message * @param mixed   $tag_params string: js confirmation *                            array: additional tag params (f.e. style="") * @param boolean $new_form   we set this to false when we are already in *                            a  form, to avoid generating nested forms * @param boolean $strip_img  whether to strip the image * @param string  $target     target * * @return string  the results to be echoed or saved in an array */function PMA_linkOrButton($url, $message, $tag_params = array(),    $new_form = true, $strip_img = false, $target = ''){    $url_length = strlen($url);    // with this we should be able to catch case of image upload    // into a (MEDIUM) BLOB; not worth generating even a form for these    if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {        return '';    }    if (! is_array($tag_params)) {        $tmp = $tag_params;        $tag_params = array();        if (!empty($tmp)) {            $tag_params['onclick'] = 'return confirmLink(this, \'' . PMA_escapeJsString($tmp) . '\')';        }        unset($tmp);    }    if (! empty($target)) {        $tag_params['target'] = htmlentities($target);    }    $tag_params_strings = array();    foreach ($tag_params as $par_name => $par_value) {        // htmlspecialchars() only on non javascript        $par_value = substr($par_name, 0, 2) == 'on'            ? $par_value            : htmlspecialchars($par_value);        $tag_params_strings[] = $par_name . '="' . $par_value . '"';    }    $displayed_message = '';    // Add text if not already added    if (stristr($message, '<img')        && (!$strip_img || $GLOBALS['cfg']['PropertiesIconic'] === true)        && strip_tags($message)==$message    ) {        $displayed_message = '<span>'        . htmlspecialchars(            preg_replace('/^.*\salt="([^"]*)".*$/si', '\1', $message)        )        . '</span>';    }    // Suhosin: Check that each query parameter is not above maximum    $in_suhosin_limits = true;    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {        if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {            $query_parts = PMA_splitURLQuery($url);            foreach ($query_parts as $query_pair) {                list($eachvar, $eachval) = explode('=', $query_pair);                if (strlen($eachval) > $suhosin_get_MaxValueLength) {                    $in_suhosin_limits = false;                    break;                }            }        }    }    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit'] && $in_suhosin_limits) {        // no whitespace within an <a> else Safari will make it part of the link        $ret = "\n" . '<a href="' . $url . '" '            . implode(' ', $tag_params_strings) . '>'            . $message . $displayed_message . '</a>' . "\n";    } else {        // no spaces (linebreaks) at all        // or after the hidden fields        // IE will display them all        // add class=link to submit button        if (empty($tag_params['class'])) {            $tag_params['class'] = 'link';        }        if (! isset($query_parts)) {            $query_parts = PMA_splitURLQuery($url);        }        $url_parts   = parse_url($url);        if ($new_form) {            $ret = '<form action="' . $url_parts['path'] . '" class="link"'                 . ' method="post"' . $target . ' style="display: inline;">';            $subname_open   = '';            $subname_close  = '';            $submit_link    = '#';        } else {            $query_parts[] = 'redirect=' . $url_parts['path'];            if (empty($GLOBALS['subform_counter'])) {                $GLOBALS['subform_counter'] = 0;            }            $GLOBALS['subform_counter']++;            $ret            = '';            $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';            $subname_close  = ']';            $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';        }        foreach ($query_parts as $query_pair) {            list($eachvar, $eachval) = explode('=', $query_pair);            $ret .= '<input type="hidden" name="' . $subname_open . $eachvar                . $subname_close . '" value="'                . htmlspecialchars(urldecode($eachval)) . '" />';        } // end while        $ret .= "\n" . '<a href="' . $submit_link . '" class="formLinkSubmit" '        . implode(' ', $tag_params_strings) . '>'        . $message . ' ' . $displayed_message . '</a>' . "\n";        if ($new_form) {            $ret .= '</form>';        }    } // end if... else...    return $ret;} // end of the 'PMA_linkOrButton()' function/** * Splits a URL string by parameter * * @param string $url the URL * * @return array  the parameter/value pairs, for example [0] db=sakila */function PMA_splitURLQuery($url){    // decode encoded url separators    $separator   = PMA_get_arg_separator();    // on most places separator is still hard coded ...    if ($separator !== '&') {        // ... so always replace & with $separator        $url         = str_replace(htmlentities('&'), $separator, $url);        $url         = str_replace('&', $separator, $url);    }    $url         = str_replace(htmlentities($separator), $separator, $url);    // end decode    $url_parts   = parse_url($url);    return explode($separator, $url_parts['query']);}/** * Returns a given timespan value in a readable format. * * @param int $seconds the timespan * * @return string  the formatted value */function PMA_timespanFormat($seconds){    $days = floor($seconds / 86400);    if ($days > 0) {        $seconds -= $days * 86400;    }    $hours = floor($seconds / 3600);    if ($days > 0 || $hours > 0) {        $seconds -= $hours * 3600;    }    $minutes = floor($seconds / 60);    if ($days > 0 || $hours > 0 || $minutes > 0) {        $seconds -= $minutes * 60;    }    return sprintf(        __('%s days, %s hours, %s minutes and %s seconds'),        (string)$days, (string)$hours, (string)$minutes, (string)$seconds    );}/** * Takes a string and outputs each character on a line for itself. Used * mainly for horizontalflipped display mode. * Takes care of special html-characters. * Fulfills todo-item * http://sf.net/tracker/?func=detail&aid=544361&group_id=23067&atid=377411 * * @param string $string    The string * @param string $Separator The Separator (defaults to "<br />\n") * * @access  public * @todo    add a multibyte safe function PMA_STR_split() * * @return  string      The flipped string */function PMA_flipstring($string, $Separator = "<br />\n"){    $format_string = '';    $charbuff = false;    for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {        $char = $string{$i};        $append = false;        if ($char == '&') {            $format_string .= $charbuff;            $charbuff = $char;        } elseif ($char == ';' && !empty($charbuff)) {            $format_string .= $charbuff . $char;            $charbuff = false;            $append = true;        } elseif (! empty($charbuff)) {            $charbuff .= $char;        } else {            $format_string .= $char;            $append = true;        }        // do not add separator after the last character        if ($append && ($i != $str_len - 1)) {            $format_string .= $Separator;        }    }    return $format_string;}/** * Function added to avoid path disclosures. * Called by each script that needs parameters, it displays * an error message and, by default, stops the execution. * * Not sure we could use a strMissingParameter message here, * would have to check if the error message file is always available * * @param array $params  The names of the parameters needed by the calling script. * @param bool  $die     Stop the execution? *                       (Set this manually to false in the calling script *                       until you know all needed parameters to check). * @param bool  $request Whether to include this list in checking for special params. * * @global  string  path to current script * @global  boolean flag whether any special variable was required * * @access  public * @todo    use PMA_fatalError() if $die === true? */function PMA_checkParameters($params, $die = true, $request = true){    global $checked_special;    if (! isset($checked_special)) {        $checked_special = false;    }    $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);    $found_error = false;    $error_message = '';    foreach ($params as $param) {        if ($request && $param != 'db' && $param != 'table') {            $checked_special = true;        }        if (! isset($GLOBALS[$param])) {            $error_message .= $reported_script_name                . ': ' . __('Missing parameter:') . ' '                . $param                . PMA_showDocu('faqmissingparameters')                . '<br />';            $found_error = true;        }    }    if ($found_error) {        /**         * display html meta tags         */        include_once './libraries/header_meta_style.inc.php';        echo '</head><body><p>' . $error_message . '</p></body></html>';        if ($die) {            exit();        }    }} // end function/** * Function to generate unique condition for specified row. * * @param resource $handle       current query result * @param integer  $fields_cnt   number of fields * @param array    $fields_meta  meta information about fields * @param array    $row          current row * @param boolean  $force_unique generate condition only on pk or unique * * @access  public * * @return  array     the calculated condition and whether condition is unique */function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row, $force_unique = false){    $primary_key          = '';    $unique_key           = '';    $nonprimary_condition = '';    $preferred_condition = '';    $primary_key_array    = array();    $unique_key_array     = array();    $nonprimary_condition_array = array();    $condition_array = array();    for ($i = 0; $i < $fields_cnt; ++$i) {        $condition   = '';        $con_key     = '';        $con_val     = '';        $field_flags = PMA_DBI_field_flags($handle, $i);        $meta        = $fields_meta[$i];        // do not use a column alias in a condition        if (! isset($meta->orgname) || ! strlen($meta->orgname)) {            $meta->orgname = $meta->name;            if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])                && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])            ) {                foreach ($GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr) {                    // need (string) === (string)                    // '' !== 0 but '' == 0                    if ((string) $select_expr['alias'] === (string) $meta->name) {                        $meta->orgname = $select_expr['column'];                        break;                    } // end if                } // end foreach            }        }        // Do not use a table alias in a condition.        // Test case is:        // select * from galerie x WHERE        //(select count(*) from galerie y where y.datum=x.datum)>1        //        // But orgtable is present only with mysqli extension so the        // fix is only for mysqli.        // Also, do not use the original table name if we are dealing with        // a view because this view might be updatable.        // (The isView() verification should not be costly in most cases        // because there is some caching in the function).        if (isset($meta->orgtable)            && $meta->table != $meta->orgtable            && ! PMA_Table::isView($GLOBALS['db'], $meta->table)        ) {            $meta->table = $meta->orgtable;        }        // to fix the bug where float fields (primary or not)        // can't be matched because of the imprecision of        // floating comparison, use CONCAT        // (also, the syntax "CONCAT(field) IS NULL"        // that we need on the next "if" will work)        if ($meta->type == 'real') {            $con_key = 'CONCAT(' . PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname) . ')';        } else {            $con_key = PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname);        } // end if... else...        $condition = ' ' . $con_key . ' ';        if (! isset($row[$i]) || is_null($row[$i])) {            $con_val = 'IS NULL';        } else {            // timestamp is numeric on some MySQL 4.1            // for real we use CONCAT above and it should compare to string            if ($meta->numeric                && $meta->type != 'timestamp'                && $meta->type != 'real'            ) {                $con_val = '= ' . $row[$i];            } elseif (($meta->type == 'blob' || $meta->type == 'string')                // hexify only if this is a true not empty BLOB or a BINARY                    && stristr($field_flags, 'BINARY')                    && !empty($row[$i])) {                // do not waste memory building a too big condition                if (strlen($row[$i]) < 1000) {                    // use a CAST if possible, to avoid problems                    // if the field contains wildcard characters % or _                    $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';                } else {                    // this blob won't be part of the final condition                    $con_val = null;                }            } elseif (in_array($meta->type, PMA_getGISDatatypes())                && ! empty($row[$i])            ) {                // do not build a too big condition                if (strlen($row[$i]) < 5000) {                    $condition .= '=0x' . bin2hex($row[$i]) . ' AND';                } else {                    $condition = '';                }            } elseif ($meta->type == 'bit') {                $con_val = "= b'" . PMA_printable_bit_value($row[$i], $meta->length) . "'";            } else {                $con_val = '= \'' . PMA_sqlAddSlashes($row[$i], false, true) . '\'';            }        }        if ($con_val != null) {            $condition .= $con_val . ' AND';            if ($meta->primary_key > 0) {                $primary_key .= $condition;                $primary_key_array[$con_key] = $con_val;            } elseif ($meta->unique_key > 0) {                $unique_key  .= $condition;                $unique_key_array[$con_key] = $con_val;            }            $nonprimary_condition .= $condition;            $nonprimary_condition_array[$con_key] = $con_val;        }    } // end for    // Correction University of Virginia 19991216:    // prefer primary or unique keys for condition,    // but use conjunction of all values if no primary key    $clause_is_unique = true;    if ($primary_key) {        $preferred_condition = $primary_key;        $condition_array = $primary_key_array;    } elseif ($unique_key) {        $preferred_condition = $unique_key;        $condition_array = $unique_key_array;    } elseif (! $force_unique) {        $preferred_condition = $nonprimary_condition;        $condition_array = $nonprimary_condition_array;        $clause_is_unique = false;    }    $where_clause = trim(preg_replace('|\s?AND$|', '', $preferred_condition));    return(array($where_clause, $clause_is_unique, $condition_array));} // end function/** * Generate a button or image tag * * @param string $button_name  name of button element * @param string $button_class class of button element * @param string $image_name   name of image element * @param string $text         text to display * @param string $image        image to display * @param string $value        value * * @access  public */function PMA_buttonOrImage($button_name, $button_class, $image_name, $text,    $image, $value = ''){    if ($value == '') {        $value = $text;    }    if (false === $GLOBALS['cfg']['PropertiesIconic']) {        echo ' <input type="submit" name="' . $button_name . '"'                .' value="' . htmlspecialchars($value) . '"'                .' title="' . htmlspecialchars($text) . '" />' . "\n";        return;    }    /* Opera has trouble with <input type="image"> */    /* IE has trouble with <button> */    if (PMA_USR_BROWSER_AGENT != 'IE') {        echo '<button class="' . $button_class . '" type="submit"'            .' name="' . $button_name . '" value="' . htmlspecialchars($value) . '"'            .' title="' . htmlspecialchars($text) . '">' . "\n"            . PMA_getIcon($image, $text)            .'</button>' . "\n";    } else {        echo '<input type="image" name="' . $image_name            . '" value="' . htmlspecialchars($value)            . '" title="' . htmlspecialchars($text)            . '" src="' . $GLOBALS['pmaThemeImage']. $image . '" />'            . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'                ? '&nbsp;' . htmlspecialchars($text)                : '') . "\n";    }} // end function/** * Generate a pagination selector for browsing resultsets * * @param int    $rows        Number of rows in the pagination set * @param int    $pageNow     current page number * @param int    $nbTotalPage number of total pages * @param int    $showAll     If the number of pages is lower than this *                            variable, no pages will be omitted in pagination * @param int    $sliceStart  How many rows at the beginning should always be shown? * @param int    $sliceEnd    How many rows at the end should always be shown? * @param int    $percent     Percentage of calculation page offsets to hop to a *                            next page * @param int    $range       Near the current page, how many pages should *                            be considered "nearby" and displayed as well? * @param string $prompt      The prompt to display (sometimes empty) * * @return string * * @access  public */function PMA_pageselector($rows, $pageNow = 1, $nbTotalPage = 1,    $showAll = 200, $sliceStart = 5, $sliceEnd = 5, $percent = 20,    $range = 10, $prompt = ''){    $increment = floor($nbTotalPage / $percent);    $pageNowMinusRange = ($pageNow - $range);    $pageNowPlusRange = ($pageNow + $range);    $gotopage = $prompt . ' <select id="pageselector" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        $gotopage .= ' class="ajax"';    }    $gotopage .= ' name="pos" >' . "\n";    if ($nbTotalPage < $showAll) {        $pages = range(1, $nbTotalPage);    } else {        $pages = array();        // Always show first X pages        for ($i = 1; $i <= $sliceStart; $i++) {            $pages[] = $i;        }        // Always show last X pages        for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {            $pages[] = $i;        }        // Based on the number of results we add the specified        // $percent percentage to each page number,        // so that we have a representing page number every now and then to        // immediately jump to specific pages.        // As soon as we get near our currently chosen page ($pageNow -        // $range), every page number will be shown.        $i = $sliceStart;        $x = $nbTotalPage - $sliceEnd;        $met_boundary = false;        while ($i <= $x) {            if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {                // If our pageselector comes near the current page, we use 1                // counter increments                $i++;                $met_boundary = true;            } else {                // We add the percentage increment to our current page to                // hop to the next one in range                $i += $increment;                // Make sure that we do not cross our boundaries.                if ($i > $pageNowMinusRange && ! $met_boundary) {                    $i = $pageNowMinusRange;                }            }            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }/*    Add page numbers with "geometrically increasing" distances.    This helps me a lot when navigating through giant tables.    Test case: table with 2.28 million sets, 76190 pages. Page of interest is    between 72376 and 76190.    Selecting page 72376.    Now, old version enumerated only +/- 10 pages around 72376 and the    percentage increment produced steps of about 3000.    The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.    around the current page.*/        $i = $pageNow;        $dist = 1;        while ($i < $x) {            $dist = 2 * $dist;            $i = $pageNow + $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        $i = $pageNow;        $dist = 1;        while ($i >0) {            $dist = 2 * $dist;            $i = $pageNow - $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        // Since because of ellipsing of the current page some numbers may be double,        // we unify our array:        sort($pages);        $pages = array_unique($pages);    }    foreach ($pages as $i) {        if ($i == $pageNow) {            $selected = 'selected="selected" style="font-weight: bold"';        } else {            $selected = '';        }        $gotopage .= '                <option ' . $selected            . ' value="' . (($i - 1) * $rows) . '">' . $i . '</option>' . "\n";    }    $gotopage .= ' </select><noscript><input type="submit" value="'        . __('Go') . '" /></noscript>';    return $gotopage;} // end function/** * Generate navigation for a list * * @param int    $count       number of elements in the list * @param int    $pos         current position in the list * @param array  $_url_params url parameters * @param string $script      script name for form target * @param string $frame       target frame * @param int    $max_count   maximum number of elements to display from the list * * @access  public * * @todo    use $pos from $_url_params */function PMA_listNavigator($count, $pos, $_url_params, $script, $frame, $max_count){    if ($max_count < $count) {        echo 'frame_navigation' == $frame            ? '<div id="navidbpageselector">' . "\n"            : '';        echo __('Page number:');        echo 'frame_navigation' == $frame ? '<br />' : ' ';        // Move to the beginning or to the previous page        if ($pos > 0) {            // patch #474210 - part 1            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption1 = '&lt;&lt;';                $caption2 = ' &lt; ';                $title1   = ' title="' . _pgettext('First page', 'Begin') . '"';                $title2   = ' title="' . _pgettext('Previous page', 'Previous') . '"';            } else {                $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';                $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';                $title1   = '';                $title2   = '';            } // end if... else...            $_url_params['pos'] = 0;            echo '<a' . $title1 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption1 . '</a>';            $_url_params['pos'] = $pos - $max_count;            echo '<a' . $title2 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption2 . '</a>';        }        echo "\n", '<form action="./', basename($script), '" method="post" target="', $frame, '">', "\n";        echo PMA_generate_common_hidden_inputs($_url_params);        echo PMA_pageselector(            $max_count,            floor(($pos + 1) / $max_count) + 1,            ceil($count / $max_count)        );        echo '</form>';        if ($pos + $max_count < $count) {            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption3 = ' &gt; ';                $caption4 = '&gt;&gt;';                $title3   = ' title="' . _pgettext('Next page', 'Next') . '"';                $title4   = ' title="' . _pgettext('Last page', 'End') . '"';            } else {                $caption3 = '&gt; ' . _pgettext('Next page', 'Next');                $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');                $title3   = '';                $title4   = '';            } // end if... else...            $_url_params['pos'] = $pos + $max_count;            echo '<a' . $title3 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption3 . '</a>';            $_url_params['pos'] = floor($count / $max_count) * $max_count;            if ($_url_params['pos'] == $count) {                $_url_params['pos'] = $count - $max_count;            }            echo '<a' . $title4 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption4 . '</a>';        }        echo "\n";        if ('frame_navigation' == $frame) {            echo '</div>' . "\n";        }    }}/** * replaces %u in given path with current user name * * example: * <code> * $user_dir = PMA_userDir('/var/pma_tmp/%u/'); // '/var/pma_tmp/root/' * * </code> * * @param string $dir with wildcard for user * * @return  string  per user directory */function PMA_userDir($dir){    // add trailing slash    if (substr($dir, -1) != '/') {        $dir .= '/';    }    return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);}/** * returns html code for db link to default db page * * @param string $database database * * @return  string  html link to default db page */function PMA_getDbLink($database = null){    if (! strlen($database)) {        if (! strlen($GLOBALS['db'])) {            return '';        }        $database = $GLOBALS['db'];    } else {        $database = PMA_unescape_mysql_wildcards($database);    }    return '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'        . PMA_generate_common_url($database) . '" title="'        . sprintf(            __('Jump to database &quot;%s&quot;.'),            htmlspecialchars($database)        )        . '">' . htmlspecialchars($database) . '</a>';}/** * Displays a lightbulb hint explaining a known external bug * that affects a functionality * * @param string $functionality   localized message explaining the func. * @param string $component       'mysql' (eventually, 'php') * @param string $minimum_version of this component * @param string $bugref          bug reference for this component */function PMA_externalBug($functionality, $component, $minimum_version, $bugref){    if ($component == 'mysql' && PMA_MYSQL_INT_VERSION < $minimum_version) {        echo PMA_showHint(            sprintf(                __('The %s functionality is affected by a known bug, see %s'),                $functionality,                PMA_linkURL('http://bugs.mysql.com/') . $bugref            )        );    }}/** * Generates and echoes an HTML checkbox * * @param string  $html_field_name the checkbox HTML field * @param string  $label           label for checkbox * @param boolean $checked         is it initially checked? * @param boolean $onclick         should it submit the form on click? * * @return the HTML for the checkbox */function PMA_display_html_checkbox($html_field_name, $label, $checked, $onclick){    echo '<input type="checkbox" name="' . $html_field_name . '" id="'        . $html_field_name . '"' . ($checked ? ' checked="checked"' : '')        . ($onclick ? ' class="autosubmit"' : '') . ' /><label for="'        . $html_field_name . '">' . $label . '</label>';}/** * Generates and echoes a set of radio HTML fields * * @param string  $html_field_name the radio HTML field * @param array   $choices         the choices values and labels * @param string  $checked_choice  the choice to check by default * @param boolean $line_break      whether to add an HTML line break after a choice * @param boolean $escape_label    whether to use htmlspecialchars() on label * @param string  $class           enclose each choice with a div of this class * * @return the HTML for the tadio buttons */function PMA_display_html_radio($html_field_name, $choices, $checked_choice = '',$line_break = true, $escape_label = true, $class=''){    foreach ($choices as $choice_value => $choice_label) {        if (! empty($class)) {            echo '<div class="' . $class . '">';        }        $html_field_id = $html_field_name . '_' . $choice_value;        echo '<input type="radio" name="' . $html_field_name . '" id="'            . $html_field_id . '" value="' . htmlspecialchars($choice_value) . '"';        if ($choice_value == $checked_choice) {            echo ' checked="checked"';        }        echo ' />' . "\n";        echo '<label for="' . $html_field_id . '">'            . ($escape_label ? htmlspecialchars($choice_label)  : $choice_label)            . '</label>';        if ($line_break) {            echo '<br />';        }        if (! empty($class)) {            echo '</div>';        }        echo "\n";    }}/** * Generates and returns an HTML dropdown * * @param string $select_name   name for the select element * @param array  $choices       choices values * @param string $active_choice the choice to select by default * @param string $id            id of the select element; can be different in case *                              the dropdown is present more than once on the page * * @return string * * @todo    support titles */function PMA_generate_html_dropdown($select_name, $choices, $active_choice, $id){    $result = '<select name="' . htmlspecialchars($select_name) . '" id="'        . htmlspecialchars($id) . '">';    foreach ($choices as $one_choice_value => $one_choice_label) {        $result .= '<option value="' . htmlspecialchars($one_choice_value) . '"';        if ($one_choice_value == $active_choice) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';    }    $result .= '</select>';    return $result;}/** * Generates a slider effect (jQjuery) * Takes care of generating the initial <div> and the link * controlling the slider; you have to generate the </div> yourself * after the sliding section. * * @param string $id      the id of the <div> on which to apply the effect * @param string $message the message to show as a link */function PMA_generate_slider_effect($id, $message){    if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {        echo '<div id="' . $id . '">';        return;    }    /**     * Bad hack on the next line. document.write() conflicts with jQuery, hence,     * opening the <div> with PHP itself instead of JavaScript.     *     * @todo find a better solution that uses $.append(), the recommended method     * maybe by using an additional param, the id of the div to append to     */    ?><div id="<?php echo $id; ?>" <?php echo $GLOBALS['cfg']['InitialSlidersState'] == 'closed' ? ' style="display: none; overflow:auto;"' : ''; ?> class="pma_auto_slider" title="<?php echo htmlspecialchars($message); ?>">    <?php}/** * Creates an AJAX sliding toggle button * (or and equivalent form when AJAX is disabled) * * @param string $action      The URL for the request to be executed * @param string $select_name The name for the dropdown box * @param array  $options     An array of options (see rte_footer.lib.php) * @param string $callback    A JS snippet to execute when the request is *                            successfully processed * * @return   string   HTML code for the toggle button */function PMA_toggleButton($action, $select_name, $options, $callback){    // Do the logic first    $link_on = "$action&amp;$select_name=" . urlencode($options[1]['value']);    $link_off = "$action&amp;$select_name=" . urlencode($options[0]['value']);    if ($options[1]['selected'] == true) {        $state = 'on';    } else if ($options[0]['selected'] == true) {        $state = 'off';    } else {        $state = 'on';    }    $selected1 = '';    $selected0 = '';    if ($options[1]['selected'] == true) {        $selected1 = " selected='selected'";    } else if ($options[0]['selected'] == true) {        $selected0 = " selected='selected'";    }    // Generate output    $retval  = "<!-- TOGGLE START -->\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "<noscript>\n";    }    $retval .= "<div class='wrapper'>\n";    $retval .= "    <form action='$action' method='post'>\n";    $retval .= "        <select name='$select_name'>\n";    $retval .= "            <option value='{$options[1]['value']}'$selected1>";    $retval .= "                {$options[1]['label']}\n";    $retval .= "            </option>\n";    $retval .= "            <option value='{$options[0]['value']}'$selected0>";    $retval .= "                {$options[0]['label']}\n";    $retval .= "            </option>\n";    $retval .= "        </select>\n";    $retval .= "        <input type='submit' value='" . __('Change') . "'/>\n";    $retval .= "    </form>\n";    $retval .= "</div>\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "</noscript>\n";        $retval .= "<div class='wrapper toggleAjax hide'>\n";        $retval .= "    <div class='toggleButton'>\n";        $retval .= "        <div title='" . __('Click to toggle') . "' class='container $state'>\n";        $retval .= "            <img src='{$GLOBALS['pmaThemeImage']}toggle-{$GLOBALS['text_dir']}.png'\n";        $retval .= "                 alt='' />\n";        $retval .= "            <table cellspacing='0' cellpadding='0'><tr>\n";        $retval .= "                <tbody>\n";        $retval .= "                <td class='toggleOn'>\n";        $retval .= "                    <span class='hide'>$link_on</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[1]['label']) . "</div>\n";        $retval .= "                </td>\n";        $retval .= "                <td><div>&nbsp;</div></td>\n";        $retval .= "                <td class='toggleOff'>\n";        $retval .= "                    <span class='hide'>$link_off</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[0]['label']) . "</div>\n";        $retval .= "                    </div>\n";        $retval .= "                </tbody>\n";        $retval .= "            </tr></table>\n";        $retval .= "            <span class='hide callback'>$callback</span>\n";        $retval .= "            <span class='hide text_direction'>{$GLOBALS['text_dir']}</span>\n";        $retval .= "        </div>\n";        $retval .= "    </div>\n";        $retval .= "</div>\n";    }    $retval .= "<!-- TOGGLE END -->";    return $retval;} // end PMA_toggleButton()/** * Clears cache content which needs to be refreshed on user change. * * @return nothing */function PMA_clearUserCache(){    PMA_cacheUnset('is_superuser', true);}/** * Verifies if something is cached in the session * * @param string   $var    variable name * @param int|true $server server * * @return boolean */function PMA_cacheExists($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    return isset($_SESSION['cache']['server_' . $server][$var]);}/** * Gets cached information from the session * * @param string   $var    varibale name * @param int|true $server server * * @return mixed */function PMA_cacheGet($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    if (isset($_SESSION['cache']['server_' . $server][$var])) {        return $_SESSION['cache']['server_' . $server][$var];    } else {        return null;    }}/** * Caches information in the session * * @param string   $var    variable name * @param mixed    $val    value * @param int|true $server server * * @return mixed */function PMA_cacheSet($var, $val = null, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    $_SESSION['cache']['server_' . $server][$var] = $val;}/** * Removes cached information from the session * * @param string   $var    variable name * @param int|true $server server * * @return nothing */function PMA_cacheUnset($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    unset($_SESSION['cache']['server_' . $server][$var]);}/** * Converts a bit value to printable format; * in MySQL a BIT field can be from 1 to 64 bits so we need this * function because in PHP, decbin() supports only 32 bits * * @param numeric $value  coming from a BIT field * @param integer $length length * * @return  string  the printable value */function PMA_printable_bit_value($value, $length){    $printable = '';    for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {        $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));    }    $printable = substr($printable, -$length);    return $printable;}/** * Verifies whether the value contains a non-printable character * * @param string $value value * * @return  boolean */function PMA_contains_nonprintable_ascii($value){    return preg_match('@[^[:print:]]@', $value);}/** * Converts a BIT type default value * for example, b'010' becomes 010 * * @param string $bit_default_value value * * @return  string the converted value */function PMA_convert_bit_default_value($bit_default_value){    return strtr($bit_default_value, array("b" => "", "'" => ""));}/** * Extracts the various parts from a field type spec * * @param string $fieldspec Field specification * * @return  array associative array containing type, spec_in_brackets *          and possibly enum_set_values (another array) */function PMA_extractFieldSpec($fieldspec){    $first_bracket_pos = strpos($fieldspec, '(');    if ($first_bracket_pos) {        $spec_in_brackets = chop(            substr(                $fieldspec,                $first_bracket_pos + 1,                (strrpos($fieldspec, ')') - $first_bracket_pos - 1)            )        );        // convert to lowercase just to be sure        $type = strtolower(chop(substr($fieldspec, 0, $first_bracket_pos)));    } else {        $type = strtolower($fieldspec);        $spec_in_brackets = '';    }    if ('enum' == $type || 'set' == $type) {        // Define our working vars        $enum_set_values = array();        $working = "";        $in_string = false;        $index = 0;        // While there is another character to process        while (isset($fieldspec[$index])) {            // Grab the char to look at            $char = $fieldspec[$index];            // If it is a single quote, needs to be handled specially            if ($char == "'") {                // If we are not currently in a string, begin one                if (! $in_string) {                    $in_string = true;                    $working = "";                } else {                    // Otherwise, it may be either an end of a string,                    // or a 'double quote' which can be handled as-is                    // Check out the next character (if possible)                    $has_next = isset($fieldspec[$index + 1]);                    $next = $has_next ? $fieldspec[$index + 1] : null;                    //If we have reached the end of our 'working' string (because                    //there are no more chars,or the next char is not another quote)                    if (! $has_next || $next != "'") {                        $enum_set_values[] = $working;                        $in_string = false;                    } elseif ($next == "'") {                        // Otherwise, this is a 'double quote',                        // and can be added to the working string                        $working .= "'";                        // Skip the next char; we already know what it is                        $index++;                    }                }            } elseif ('\\' == $char                && isset($fieldspec[$index + 1])                && "'" == $fieldspec[$index + 1]            ) {                // escaping of a quote?                $working .= "'";                $index++;            } else {                // Otherwise, add it to our working string like normal                $working .= $char;            }            // Increment character index            $index++;        } // end while        $printtype = $type . '(' .  str_replace("','", "', '", $spec_in_brackets) . ')';        $binary = false;        $unsigned = false;        $zerofill = false;    } else {        $enum_set_values = array();        /* Create printable type name */        $printtype = strtolower($fieldspec);        // Strip the "BINARY" attribute, except if we find "BINARY(" because        // this would be a BINARY or VARBINARY field type;        // by the way, a BLOB should not show the BINARY attribute        // because this is not accepted in MySQL syntax.        if (preg_match('@binary@', $printtype) && ! preg_match('@binary[\(]@', $printtype)) {            $printtype = preg_replace('@binary@', '', $printtype);            $binary = true;        } else {            $binary = false;        }        $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);        $zerofill = ($zerofill_cnt > 0);        $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);        $unsigned = ($unsigned_cnt > 0);        $printtype = trim($printtype);    }    $attribute     = ' ';    if ($binary) {        $attribute = 'BINARY';    }    if ($unsigned) {        $attribute = 'UNSIGNED';    }    if ($zerofill) {        $attribute = 'UNSIGNED ZEROFILL';    }    return array(        'type' => $type,        'spec_in_brackets' => $spec_in_brackets,        'enum_set_values'  => $enum_set_values,        'print_type' => $printtype,        'binary' => $binary,        'unsigned' => $unsigned,        'zerofill' => $zerofill,        'attribute' => $attribute,    );}/** * Verifies if this table's engine supports foreign keys * * @param string $engine engine * * @return  boolean */function PMA_foreignkey_supported($engine){    $engine = strtoupper($engine);    if ('INNODB' == $engine || 'PBXT' == $engine) {        return true;    } else {        return false;    }}/** * Replaces some characters by a displayable equivalent * * @param string $content content * * @return  string the content with characters replaced */function PMA_replace_binary_contents($content){    $result = str_replace("\x00", '\0', $content);    $result = str_replace("\x08", '\b', $result);    $result = str_replace("\x0a", '\n', $result);    $result = str_replace("\x0d", '\r', $result);    $result = str_replace("\x1a", '\Z', $result);    return $result;}/** * Converts GIS data to Well Known Text format * * @param binary $data        GIS data * @param bool   $includeSRID Add SRID to the WKT * * @return GIS data in Well Know Text format */function PMA_asWKT($data, $includeSRID = false){    // Convert to WKT format    $hex = bin2hex($data);    $wktsql     = "SELECT ASTEXT(x'" . $hex . "')";    if ($includeSRID) {        $wktsql .= ", SRID(x'" . $hex . "')";    }    $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);    $wktarr     = PMA_DBI_fetch_row($wktresult, 0);    $wktval     = $wktarr[0];    if ($includeSRID) {        $srid = $wktarr[1];        $wktval = "'" . $wktval . "'," . $srid;    }    @PMA_DBI_free_result($wktresult);    return $wktval;}/** * If the string starts with a \r\n pair (0x0d0a) add an extra \n * * @param string $string string * * @return  string with the chars replaced */function PMA_duplicateFirstNewline($string){    $first_occurence = strpos($string, "\r\n");    if ($first_occurence === 0) {        $string = "\n".$string;    }    return $string;}/** * Get the action word corresponding to a script name * in order to display it as a title in navigation panel * * @param string $target a valid value for $cfg['LeftDefaultTabTable'], *                       $cfg['DefaultTabTable'] or $cfg['DefaultTabDatabase'] * * @return array */function PMA_getTitleForTarget($target){    $mapping = array(        // Values for $cfg['DefaultTabTable']        'tbl_structure.php' =>  __('Structure'),        'tbl_sql.php' => __('SQL'),        'tbl_select.php' =>__('Search'),        'tbl_change.php' =>__('Insert'),        'sql.php' => __('Browse'),        // Values for $cfg['DefaultTabDatabase']        'db_structure.php' => __('Structure'),        'db_sql.php' => __('SQL'),        'db_search.php' => __('Search'),        'db_operations.php' => __('Operations'),    );    return $mapping[$target];}/** * Formats user string, expanding @VARIABLES@, accepting strftime format string. * * @param string   $string  Text where to do expansion. * @param function $escape  Function to call for escaping variable values. * @param array    $updates Array with overrides for default parameters *                 (obtained from GLOBALS). * * @return string */function PMA_expandUserString($string, $escape = null, $updates = array()){    /* Content */    $vars['http_host'] = PMA_getenv('HTTP_HOST') ? PMA_getenv('HTTP_HOST') : '';    $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];    $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];    $vars['server_verbose_or_name'] = ! empty($GLOBALS['cfg']['Server']['verbose'])        ? $GLOBALS['cfg']['Server']['verbose']        : $GLOBALS['cfg']['Server']['host'];    $vars['database'] = $GLOBALS['db'];    $vars['table'] = $GLOBALS['table'];    $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;    /* Update forced variables */    foreach ($updates as $key => $val) {        $vars[$key] = $val;    }    /* Replacement mapping */    /*     * The __VAR__ ones are for backward compatibility, because user     * might still have it in cookies.     */    $replace = array(        '@HTTP_HOST@' => $vars['http_host'],        '@SERVER@' => $vars['server_name'],        '__SERVER__' => $vars['server_name'],        '@VERBOSE@' => $vars['server_verbose'],        '@VSERVER@' => $vars['server_verbose_or_name'],        '@DATABASE@' => $vars['database'],        '__DB__' => $vars['database'],        '@TABLE@' => $vars['table'],        '__TABLE__' => $vars['table'],        '@PHPMYADMIN@' => $vars['phpmyadmin_version'],        );    /* Optional escaping */    if (!is_null($escape)) {        foreach ($replace as $key => $val) {            $replace[$key] = $escape($val);        }    }    /* Backward compatibility in 3.5.x */    if (strpos($string, '@FIELDS@') !== false) {        $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));    }    /* Fetch columns list if required */    if (strpos($string, '@COLUMNS@') !== false) {        $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);        $column_names = array();        foreach ($columns_list as $column) {            if (! is_null($escape)) {                $column_names[] = $escape($column['Field']);            } else {                $column_names[] = $field['Field'];            }        }        $replace['@COLUMNS@'] = implode(',', $column_names);    }    /* Do the replacement */    return strtr(strftime($string), $replace);}/** * function that generates a json output for an ajax request and ends script * execution * * @param PMA_Message|string $message    message string containing the *                                       html of the message * @param bool               $success    success whether the ajax request *                                       was successfull * @param array              $extra_data extra data  optional - *                                       any other data as part of the json request * * @return nothing */function PMA_ajaxResponse($message, $success = true, $extra_data = array()){    $response = array();    if ( $success == true ) {        $response['success'] = true;        if ($message instanceof PMA_Message) {            $response['message'] = $message->getDisplay();        } else {            $response['message'] = $message;        }    } else {        $response['success'] = false;        if ($message instanceof PMA_Message) {            $response['error'] = $message->getDisplay();        } else {            $response['error'] = $message;        }    }    // If extra_data has been provided, append it to the response array    if ( ! empty($extra_data) && count($extra_data) > 0 ) {        $response = array_merge($response, $extra_data);    }    // Set the Content-Type header to JSON so that jQuery parses the    // response correctly.    //    // At this point, other headers might have been sent;    // even if $GLOBALS['is_header_sent'] is true,    // we have to send these additional headers.    header('Cache-Control: no-cache');    header("Content-Type: application/json");    echo json_encode($response);    if (!defined('TESTSUITE'))        exit;}/** * Display the form used to browse anywhere on the local server for a file to import * * @param string $max_upload_size maximum upload size * * @return nothing */function PMA_browseUploadFile($max_upload_size){    echo '<label for="radio_import_file">' . __("Browse your computer:") . '</label>';    echo '<div id="upload_form_status" style="display: none;"></div>';    echo '<div id="upload_form_status_info" style="display: none;"></div>';    echo '<input type="file" name="import_file" id="input_import_file" />';    echo PMA_displayMaximumUploadSize($max_upload_size) . "\n";    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";}/** * Display the form used to select a file to import from the server upload directory * * @param array  $import_list array of import types * @param string $uploaddir   upload directory * * @return nothing */function PMA_selectUploadFile($import_list, $uploaddir){    echo '<label for="radio_local_import_file">' . sprintf(__("Select from the web server upload directory <b>%s</b>:"), htmlspecialchars(PMA_userDir($uploaddir))) . '</label>';    $extensions = '';    foreach ($import_list as $key => $val) {        if (!empty($extensions)) {            $extensions .= '|';        }        $extensions .= $val['extension'];    }    $matcher = '@\.(' . $extensions . ')(\.('        . PMA_supportedDecompressions() . '))?$@';    $active = (isset($timeout_passed) && $timeout_passed && isset($local_import_file))        ? $local_import_file        : '';    $files = PMA_getFileSelectOptions(        PMA_userDir($uploaddir),        $matcher,        $active    );    if ($files === false) {        PMA_Message::error(            __('The directory you set for upload work cannot be reached')        )->display();    } elseif (!empty($files)) {        echo "\n";        echo '    <select style="margin: 5px" size="1" name="local_import_file" id="select_local_import_file">' . "\n";        echo '        <option value="">&nbsp;</option>' . "\n";        echo $files;        echo '    </select>' . "\n";    } elseif (empty ($files)) {        echo '<i>' . __('There are no files to upload') . '</i>';    }}/** * Build titles and icons for action links * * @return   array   the action titles */function PMA_buildActionTitles(){    $titles = array();    $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));    $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));    $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));    $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));    $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));    $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));    $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));    $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));    $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));    $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));    $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));    $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));    $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));    $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));    $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));    $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));    $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));    return $titles;}/** * This function processes the datatypes supported by the DB, as specified in * $cfg['ColumnTypes'] and either returns an array (useful for quickly checking * if a datatype is supported) or an HTML snippet that creates a drop-down list. * * @param bool   $html     Whether to generate an html snippet or an array * @param string $selected The value to mark as selected in HTML mode * * @return  mixed   An HTML snippet or an array of datatypes. * */function PMA_getSupportedDatatypes($html = false, $selected = ''){    global $cfg;    if ($html) {        // NOTE: the SELECT tag in not included in this snippet.        $retval = '';        foreach ($cfg['ColumnTypes'] as $key => $value) {            if (is_array($value)) {                $retval .= "<optgroup label='" . htmlspecialchars($key) . "'>";                foreach ($value as $subvalue) {                    if ($subvalue == $selected) {                        $retval .= "<option selected='selected'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else if ($subvalue === '-') {                        $retval .= "<option disabled='disabled'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else {                        $retval .= "<option>$subvalue</option>";                    }                }                $retval .= '</optgroup>';            } else {                if ($selected == $value) {                    $retval .= "<option selected='selected'>$value</option>";                } else {                    $retval .= "<option>$value</option>";                }            }        }    } else {        $retval = array();        foreach ($cfg['ColumnTypes'] as $value) {            if (is_array($value)) {                foreach ($value as $subvalue) {                    if ($subvalue !== '-') {                        $retval[] = $subvalue;                    }                }            } else {                if ($value !== '-') {                    $retval[] = $value;                }            }        }    }    return $retval;} // end PMA_getSupportedDatatypes()/** * Returns a list of datatypes that are not (yet) handled by PMA. * Used by: tbl_change.php and libraries/db_routines.inc.php * * @return   array   list of datatypes */function PMA_unsupportedDatatypes(){    $no_support_types = array();    return $no_support_types;}/** * Return GIS data types * * @param bool $upper_case whether to return values in upper case * * @return array GIS data types */function PMA_getGISDatatypes($upper_case = false){    $gis_data_types = array(        'geometry',        'point',        'linestring',        'polygon',        'multipoint',        'multilinestring',        'multipolygon',        'geometrycollection'    );    if ($upper_case) {        for ($i = 0; $i < count($gis_data_types); $i++) {            $gis_data_types[$i] = strtoupper($gis_data_types[$i]);        }    }    return $gis_data_types;}/** * Generates GIS data based on the string passed. * * @param string $gis_string GIS string * * @return GIS data enclosed in 'GeomFromText' function */function PMA_createGISData($gis_string){    $gis_string =  trim($gis_string);    $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'        . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';    if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $gis_string)) {        return 'GeomFromText(' . $gis_string . ')';    } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $gis_string)) {        return "GeomFromText('" . $gis_string . "')";    } else {        return $gis_string;    }}/** * Returns the names and details of the functions * that can be applied on geometry data typess. * * @param string $geom_type if provided the output is limited to the functions *                          that are applicable to the provided geometry type. * @param bool   $binary    if set to false functions that take two geometries *                          as arguments will not be included. * @param bool   $display   if set to true seperators will be added to the *                          output array. * * @return array names and details of the functions that can be applied on *               geometry data typess. */function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false){    $funcs = array();    if ($display) {        $funcs[] = array('display' => ' ');    }    // Unary functions common to all geomety types    $funcs['Dimension']    = array('params' => 1, 'type' => 'int');    $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');    $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');    $funcs['SRID']         = array('params' => 1, 'type' => 'int');    $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');    $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');    $geom_type = trim(strtolower($geom_type));    if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {        $funcs[] = array('display' => '--------');    }    // Unary functions that are specific to each geomety type    if ($geom_type == 'point') {        $funcs['X'] = array('params' => 1, 'type' => 'float');        $funcs['Y'] = array('params' => 1, 'type' => 'float');    } elseif ($geom_type == 'multipoint') {        // no fucntions here    } elseif ($geom_type == 'linestring') {        $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');        $funcs['GLength']    = array('params' => 1, 'type' => 'float');        $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');        $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');        $funcs['IsRing']     = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multilinestring') {        $funcs['GLength']  = array('params' => 1, 'type' => 'float');        $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'polygon') {        $funcs['Area']             = array('params' => 1, 'type' => 'float');        $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');        $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multipolygon') {        $funcs['Area']     = array('params' => 1, 'type' => 'float');        $funcs['Centroid'] = array('params' => 1, 'type' => 'point');        // Not yet implemented in MySQL        //$funcs['PointOnSurface'] = array('params' => 1, 'type' => 'point');    } elseif ($geom_type == 'geometrycollection') {        $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');    }    // If we are asked for binary functions as well    if ($binary) {        // section seperator        if ($display) {            $funcs[] = array('display' => '--------');        }        if (PMA_MYSQL_INT_VERSION < 50601) {            $funcs['Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['Contains']   = array('params' => 2, 'type' => 'int');            $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['Equals']     = array('params' => 2, 'type' => 'int');            $funcs['Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['Touches']    = array('params' => 2, 'type' => 'int');            $funcs['Within']     = array('params' => 2, 'type' => 'int');        } else {            // If MySQl version is greaeter than or equal 5.6.1, use the ST_ prefix.            $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');            $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');        }        if ($display) {            $funcs[] = array('display' => '--------');        }        // Minimum bounding rectangle functions        $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');        $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');        $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');        $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');        $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');        $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');        $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');    }    return $funcs;}/** * Creates a dropdown box with MySQL functions for a particular column. * * @param array $field       Data about the column for which *                           to generate the dropdown * @param bool  $insert_mode Whether the operation is 'insert' * * @global   array    $cfg            PMA configuration * @global   array    $analyzed_sql   Analyzed SQL query * @global   mixed    $data           (null/string) FIXME: what is this for? * * @return   string   An HTML snippet of a dropdown list with function *                    names appropriate for the requested column. */function PMA_getFunctionsForField($field, $insert_mode){    global $cfg, $analyzed_sql, $data;    $selected = '';    // Find the current type in the RestrictColumnTypes. Will result in 'FUNC_CHAR'    // or something similar. Then directly look up the entry in the    // RestrictFunctions array, which'll then reveal the available dropdown options    if (isset($cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])])        && isset($cfg['RestrictFunctions'][$cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])]])    ) {        $current_func_type  = $cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])];        $dropdown           = $cfg['RestrictFunctions'][$current_func_type];        $default_function   = $cfg['DefaultFunctions'][$current_func_type];    } else {        $dropdown = array();        $default_function   = '';    }    $dropdown_built = array();    $op_spacing_needed = false;    // what function defined as default?    // for the first timestamp we don't set the default function    // if there is a default value for the timestamp    // (not including CURRENT_TIMESTAMP)    // and the column does not have the    // ON UPDATE DEFAULT TIMESTAMP attribute.    if ($field['True_Type'] == 'timestamp'        && empty($field['Default'])        && empty($data)        && ! isset($analyzed_sql[0]['create_table_fields'][$field['Field']]['on_update_current_timestamp'])    ) {        $default_function = $cfg['DefaultFunctions']['first_timestamp'];    }    // For primary keys of type char(36) or varchar(36) UUID if the default function    // Only applies to insert mode, as it would silently trash data on updates.    if ($insert_mode        && $field['Key'] == 'PRI'        && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')    ) {         $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];    }    // this is set only when appropriate and is always true    if (isset($field['display_binary_as_hex'])) {        $default_function = 'UNHEX';    }    // Create the output    $retval = '                <option></option>' . "\n";    // loop on the dropdown array and print all available options for that field.    foreach ($dropdown as $each_dropdown) {        $retval .= '                ';        $retval .= '<option';        if ($default_function === $each_dropdown) {            $retval .= ' selected="selected"';        }        $retval .= '>' . $each_dropdown . '</option>' . "\n";        $dropdown_built[$each_dropdown] = 'true';        $op_spacing_needed = true;    }    // For compatibility's sake, do not let out all other functions. Instead    // print a separator (blank) and then show ALL functions which weren't shown    // yet.    $cnt_functions = count($cfg['Functions']);    for ($j = 0; $j < $cnt_functions; $j++) {        if (! isset($dropdown_built[$cfg['Functions'][$j]])            || $dropdown_built[$cfg['Functions'][$j]] != 'true'        ) {            // Is current function defined as default?            $selected = ($field['first_timestamp'] && $cfg['Functions'][$j] == $cfg['DefaultFunctions']['first_timestamp'])                        || (! $field['first_timestamp'] && $cfg['Functions'][$j] == $default_function)                      ? ' selected="selected"'                      : '';            if ($op_spacing_needed == true) {                $retval .= '                ';                $retval .= '<option value="">--------</option>' . "\n";                $op_spacing_needed = false;            }            $retval .= '                ';            $retval .= '<option' . $selected . '>' . $cfg['Functions'][$j]                . '</option>' . "\n";        }    } // end for    return $retval;} // end PMA_getFunctionsForField()/** * Checks if the current user has a specific privilege and returns true if the * user indeed has that privilege or false if (s)he doesn't. This function must * only be used for features that are available since MySQL 5, because it * relies on the INFORMATION_SCHEMA database to be present. * * Example:   PMA_currentUserHasPrivilege('CREATE ROUTINE', 'mydb'); *            // Checks if the currently logged in user has the global *            // 'CREATE ROUTINE' privilege or, if not, checks if the *            // user has this privilege on database 'mydb'. * * @param string $priv The privilege to check * @param mixed  $db   null, to only check global privileges *                     string, db name where to also check for privileges * @param mixed  $tbl  null, to only check global privileges *                     string, db name where to also check for privileges * * @return bool */function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null){    // Get the username for the current user in the format    // required to use in the information schema database.    $user = PMA_DBI_fetch_value("SELECT CURRENT_USER();");    if ($user === false) {        return false;    }    $user = explode('@', $user);    $username  = "''";    $username .= str_replace("'", "''", $user[0]);    $username .= "''@''";    $username .= str_replace("'", "''", $user[1]);    $username .= "''";    // Prepage the query    $query = "SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` "           . "WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'";    // Check global privileges first.    if (PMA_DBI_fetch_value(        sprintf(            $query,            'USER_PRIVILEGES',            $username,            $priv        )    )    ) {        return true;    }    // If a database name was provided and user does not have the    // required global privilege, try database-wise permissions.    if ($db !== null) {        $query .= " AND TABLE_SCHEMA='%s'";        if (PMA_DBI_fetch_value(            sprintf(                $query,                'SCHEMA_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db)            )        )        ) {            return true;        }    } else {        // There was no database name provided and the user        // does not have the correct global privilege.        return false;    }    // If a table name was also provided and we still didn't    // find any valid privileges, try table-wise privileges.    if ($tbl !== null) {        $query .= " AND TABLE_NAME='%s'";        if ($retval = PMA_DBI_fetch_value(            sprintf(                $query,                'TABLE_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db),                PMA_sqlAddSlashes($tbl)            )        )        ) {            return true;        }    }    // If we reached this point, the user does not    // have even valid table-wise privileges.    return false;}/** * Returns server type for current connection * * Known types are: Drizzle, MariaDB and MySQL (default) * * @return string */function PMA_getServerType(){    $server_type = 'MySQL';    if (PMA_DRIZZLE) {        $server_type = 'Drizzle';    } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {        $server_type = 'MariaDB';    } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {        $server_type = 'Percona Server';    }    return $server_type;}/** * Analyzes the limit clause and return the start and length attributes of it. * * @param string $limit_clause limit clause * * @return array Start and length attributes of the limit clause */function PMA_analyzeLimitClause($limit_clause){    $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));    return array(        'start'  => trim($start_and_length[0]),        'length' => trim($start_and_length[1])    );}/** * Outputs HTML code for print button. * * @return nothing */function PMA_printButton(){    echo '<p class="print_ignore">';    echo '<input type="button" id="print" value="' . __('Print') . '" />';    echo '</p>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * functions for displaying the sql query form * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php'; // used for file listingrequire_once './libraries/bookmark.lib.php'; // used for file listing/** * prints the sql query boxes * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @param boolean|string  $query          query to display in the textarea *                                          or true to display last executed * @param boolean|string  $display_tab    sql|files|history|full|false *                                          what part to display *                                          false if not inside querywindow * @param string          $delimiter */function PMA_sqlQueryForm($query = true, $display_tab = false, $delimiter = ';'){    // check tab to display if inside querywindow    if (! $display_tab) {        $display_tab = 'full';        $is_querywindow = false;    } else {        $is_querywindow = true;    }    // query to show    if (true === $query) {        $query = $GLOBALS['sql_query'];    }    // set enctype to multipart for file uploads    if ($GLOBALS['is_upload']) {        $enctype = ' enctype="multipart/form-data"';    } else {        $enctype = '';    }    $table  = '';    $db     = '';    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $goto   = empty($GLOBALS['goto']) ?                    'server_sql.php' : $GLOBALS['goto'];    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'db_sql.php' : $GLOBALS['goto'];    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'tbl_sql.php' : $GLOBALS['goto'];    }    // start output    if ($is_querywindow) {        ?>        <form method="post" id="sqlqueryform" target="frame_content"              action="import.php"<?php echo $enctype; ?> name="sqlform"              onsubmit="var save_name = window.opener.parent.frame_content.name;              window.opener.parent.frame_content.name = save_name + '<?php echo time(); ?>';              this.target = window.opener.parent.frame_content.name;              return checkSqlQuery(this)">        <?php    } else {        echo '<form method="post" action="import.php" ' . $enctype;        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo ' id="sqlqueryform" name="sqlform">' . "\n";    }    if ($is_querywindow) {        echo '<input type="hidden" name="focus_querywindow" value="true" />'            ."\n";        if ($display_tab != 'sql' && $display_tab != 'full') {            echo '<input type="hidden" name="sql_query" value="" />' . "\n";            echo '<input type="hidden" name="show_query" value="1" />' . "\n";        }    }    echo '<input type="hidden" name="is_js_confirmed" value="0" />' . "\n"        .PMA_generate_common_hidden_inputs($db, $table) . "\n"        .'<input type="hidden" name="pos" value="0" />' . "\n"        .'<input type="hidden" name="goto" value="'        .htmlspecialchars($goto) . '" />' . "\n"        .'<input type="hidden" name="message_to_show" value="'        . __('Your SQL query has been executed successfully') . '" />' . "\n"        .'<input type="hidden" name="prev_sql_query" value="'        . htmlspecialchars($query) . '" />' . "\n";    // display querybox    if ($display_tab === 'full' || $display_tab === 'sql') {        PMA_sqlQueryFormInsert($query, $is_querywindow, $delimiter);    }    // display uploads    if ($display_tab === 'files' && $GLOBALS['is_upload']) {        PMA_sqlQueryFormUpload();    }    // Bookmark Support    if ($display_tab === 'full' || $display_tab === 'history') {        if (! empty($GLOBALS['cfg']['Bookmark'])) {            PMA_sqlQueryFormBookmark();        }    }    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) {        echo PMA_set_enc_form('    ');    }    echo '</form>' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            if (window.opener) {                window.opener.parent.insertQuery();            }        //]]>        </script>        <?php    }    // print an empty div, which will be later filled with the sql query results by ajax    echo '<div id="sqlqueryresults"></div>';}/** * prints querybox fieldset * * @usedby  PMA_sqlQueryForm() * @param string      $query          query to display in the textarea * @param boolean     $is_querywindow if inside querywindow or not * @param string      $delimiter      default delimiter to use */function PMA_sqlQueryFormInsert($query = '', $is_querywindow = false, $delimiter = ';'){    // enable auto select text in textarea    if ($GLOBALS['cfg']['TextareaAutoSelect']) {        $auto_sel = ' onclick="selectContent(this, sql_box_locked, true)"';    } else {        $auto_sel = '';    }    // enable locking if inside query window    if ($is_querywindow) {        $locking = ' onkeypress="document.sqlform.elements[\'LockFromUpdate\'].'            .'checked = true;"';        $height = $GLOBALS['cfg']['TextareaRows'] * 1.25;    } else {        $locking = '';        $height = $GLOBALS['cfg']['TextareaRows'] * 2;    }    $table          = '';    $db             = '';    $fields_list    = array();    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $legend = sprintf(__('Run SQL query/queries on server %s'),            '&quot;' . htmlspecialchars(                ! empty($GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose']) ? $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose'] : $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['host']) . '&quot;');    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        // if you want navigation:        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryDatabase'], 'PMA_backquote');        }    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        // Get the list and number of fields        // we do a try_query here, because we could be in the query window,        // trying to synchonize and the table has not yet been created        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryTable'], 'PMA_backquote');        }    }    $legend .= ': ' . PMA_showMySQLDocu('SQL-Syntax', 'SELECT');    if (count($fields_list)) {        $sqlquerycontainer_id = 'sqlquerycontainer';    } else {        $sqlquerycontainer_id = 'sqlquerycontainerfull';    }    echo '<a name="querybox"></a>' . "\n"        .'<div id="queryboxcontainer">' . "\n"        .'<fieldset id="querybox">' . "\n";    echo '<legend>' . $legend . '</legend>' . "\n";    echo '<div id="queryfieldscontainer">' . "\n";    echo '<div id="' . $sqlquerycontainer_id . '">' . "\n"        .'<textarea tabindex="100" name="sql_query" id="sqlquery"'        .'  cols="' . $GLOBALS['cfg']['TextareaCols'] . '"'        .'  rows="' . $height . '"'        .'  dir="' . $GLOBALS['text_dir'] . '"'        .$auto_sel . $locking . '>' . htmlspecialchars($query) . '</textarea>' . "\n";    // Add buttons to generate query easily for select all,single select,insert,update and delete    if (count($fields_list)) {        echo '<input type="button" value="SELECT *" id="selectall" class="sqlbutton" />';        echo '<input type="button" value="SELECT" id="select" class="sqlbutton" />';        echo '<input type="button" value="INSERT" id="insert" class="sqlbutton" />';        echo '<input type="button" value="UPDATE" id="update" class="sqlbutton" />';        echo '<input type="button" value="DELETE" id="delete" class="sqlbutton" />';    }    echo '<input type="button" value="' . __('Clear') . '" id="clear" class="sqlbutton" />';    echo '</div>' . "\n";    if (count($fields_list)) {        echo '<div id="tablefieldscontainer">' . "\n"            .'<label>' . __('Columns') . '</label>' . "\n"            .'<select id="tablefields" name="dummy" '            .'size="' . ($GLOBALS['cfg']['TextareaRows'] - 2) . '" '            .'multiple="multiple" ondblclick="insertValueQuery()">' . "\n";        foreach ($fields_list as $field) {            echo '<option value="'                .PMA_backquote(htmlspecialchars($field['Field'])) . '"';            if (isset($field['Field']) && strlen($field['Field']) && isset($field['Comment'])) {                echo ' title="' . htmlspecialchars($field['Comment']) . '"';            }            echo '>' . htmlspecialchars($field['Field']) . '</option>' . "\n";        }        echo '</select>' . "\n"            .'<div id="tablefieldinsertbuttoncontainer">' . "\n";        if ($GLOBALS['cfg']['PropertiesIconic']) {            echo '<input type="button" name="insert" value="&lt;&lt;"'                .' onclick="insertValueQuery()"'                .' title="' . __('Insert') . '" />' . "\n";        } else {            echo '<input type="button" name="insert"'                .' value="' . __('Insert') . '"'                .' onclick="insertValueQuery()" />' . "\n";        }        echo '</div>' . "\n"            .'</div>' . "\n";    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</div>' . "\n";    if (! empty($GLOBALS['cfg']['Bookmark'])) {        ?>        <div id="bookmarkoptions">        <div class="formelement">        <label for="bkm_label">            <?php echo __('Bookmark this SQL query'); ?>:</label>        <input type="text" name="bkm_label" id="bkm_label" tabindex="110" value="" />        </div>        <div class="formelement">        <input type="checkbox" name="bkm_all_users" tabindex="111" id="id_bkm_all_users"            value="true" />        <label for="id_bkm_all_users">            <?php echo __('Let every user access this bookmark'); ?></label>        </div>        <div class="formelement">        <input type="checkbox" name="bkm_replace" tabindex="112" id="id_bkm_replace"            value="true" />        <label for="id_bkm_replace">            <?php echo __('Replace existing bookmark of same name'); ?></label>        </div>        </div>        <?php    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n"        .'</div>' . "\n";    echo '<fieldset id="queryboxfooter" class="tblFooters">' . "\n";    echo '<div class="formelement">' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            document.writeln(' <input type="checkbox" name="LockFromUpdate" checked="checked" tabindex="120" id="checkbox_lock" /> <label for="checkbox_lock"><?php echo __('Do not overwrite this query from outside the window'); ?></label> ');        //]]>        </script>        <?php    }    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<label for="id_sql_delimiter">[ ' . __('Delimiter')        .'</label>' . "\n";    echo '<input type="text" name="sql_delimiter" tabindex="131" size="3" '        .'value="' . $delimiter . '" '        .'id="id_sql_delimiter" /> ]' . "\n";    echo '<input type="checkbox" name="show_query" value="1" '        .'id="checkbox_show_query" tabindex="132" checked="checked" />' . "\n"        .'<label for="checkbox_show_query">' . __('Show this query here again')        .'</label>' . "\n";    if (! $is_querywindow) {        echo '<input type="checkbox" name="retain_query_box" value="1" '            . 'id="retain_query_box" tabindex="133" '            . ($GLOBALS['cfg']['RetainQueryBox'] === false ? '' : ' checked="checked"')            . ' />'            . '<label for="retain_query_box">' . __('Retain query box')            . '</label>';    }    echo '</div>' . "\n";    echo '<input type="submit" id="button_submit_query" name="SQL" tabindex="200" value="' . __('Go') . '" />'        ."\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormBookmark(){    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);    if (! $bookmark_list || count($bookmark_list) < 1) {        return;    }    echo '<fieldset id="bookmarkoptions">';    echo '<legend>';    echo __('Bookmarked SQL query') . '</legend>' . "\n";    echo '<div class="formelement">';    echo '<select name="id_bookmark" id="id_bookmark">' . "\n";    echo '<option value="">&nbsp;</option>' . "\n";    foreach ($bookmark_list as $key => $value) {        echo '<option value="' . htmlspecialchars($key) . '">'            .htmlspecialchars($value) . '</option>' . "\n";    }    // &nbsp; is required for correct display with styles/line height    echo '</select>&nbsp;' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo __('Variable');    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo ' <a href="./Documentation.html#faqbookmark"'            .' target="documentation">'            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        echo ' (<a href="./Documentation.html#faqbookmark"'            .' target="documentation">' . __('Documentation') . '</a>): ';    }    echo '<input type="text" name="bookmark_variable" class="textfield"'        .' size="10" />' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<input type="radio" name="action_bookmark" value="0"'        .' id="radio_bookmark_exe" checked="checked" />'        .'<label for="radio_bookmark_exe">' . __('Submit')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="1"'        .' id="radio_bookmark_view" />'        .'<label for="radio_bookmark_view">' . __('View only')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="2"'        .' id="radio_bookmark_del" />'        .'<label for="radio_bookmark_del">' . __('Delete')        .'</label>' . "\n";    echo '</div>' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";    echo '<fieldset id="bookmarkoptionsfooter" class="tblFooters">' . "\n";    echo '<input type="submit" name="SQL" id="button_submit_bookmark" value="' . __('Go') . '" />';    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormUpload(){    $errors = array ();    $matcher = '@\.sql(\.(' . PMA_supportedDecompressions() . '))?$@'; // we allow only SQL here    if (!empty($GLOBALS['cfg']['UploadDir'])) {        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');    } else {        $files = '';    }    // start output    echo '<fieldset id="">';    echo '<legend>';    echo __('Browse your computer:') . '</legend>';    echo '<div class="formelement">';    echo '<input type="file" name="sql_file" class="textfield" /> ';    echo PMA_displayMaximumUploadSize($GLOBALS['max_upload_size']);    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($GLOBALS['max_upload_size']) . "\n";    echo '</div>';    if ($files === false) {        $errors[] = PMA_Message::error( __('The directory you set for upload work cannot be reached'));    } elseif (!empty($files)) {        echo '<div class="formelement">';        echo '<strong>' . __('web server upload directory') .':</strong>' . "\n";        echo '<select size="1" name="sql_localfile">' . "\n";        echo '<option value="" selected="selected"></option>' . "\n";        echo $files;        echo '</select>' . "\n";        echo '</div>';    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    echo '<fieldset id="" class="tblFooters">';    echo __('Character set of the file:') . "\n";    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET,            'charset_of_file', null, 'utf8', false);    echo '<input type="submit" name="SQL" value="' . __('Go')        .'" />' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    foreach ($errors as $error) {        $error->display();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for routine management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_RTN_setGlobals(){    global $param_directions, $param_opts_num, $param_sqldataaccess;    $param_directions    = array('IN',                                 'OUT',                                 'INOUT');    $param_opts_num      = array('UNSIGNED',                                 'ZEROFILL',                                 'UNSIGNED ZEROFILL');    $param_sqldataaccess = array('NO SQL',                                 'CONTAINS SQL',                                 'READS SQL DATA',                                 'MODIFIES SQL DATA');}/** * Main function for the routines functionality */function PMA_RTN_main(){    global $db;    PMA_RTN_setGlobals();    /**     * Process all requests     */    PMA_RTN_handleEditor();    PMA_RTN_handleExecute();    PMA_RTN_handleExport();    /**     * Display a list of available routines     */    $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, ";    $columns .= "`DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";    $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $items    = PMA_DBI_fetch_result(        "SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;"    );    echo PMA_RTE_getList('routine', $items);    /**     * Display the form for adding a new routine, if the user has the privileges.     */    echo PMA_RTN_getFooterLinks();    /**     * Display a warning for users with PHP's old "mysql" extension.     */    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        trigger_error(            __('You are using PHP\'s deprecated \'mysql\' extension, '            . 'which is not capable of handling multi queries. '            . '<b>The execution of some stored routines may fail!</b> '            . 'Please use the improved \'mysqli\' extension to '            . 'avoid any problems.'),            E_USER_WARNING        );    }} // end PMA_RTN_main()/** * This function parses a string containing one parameter of a routine, * as returned by PMA_RTN_parseAllParameters() and returns an array containing * the information about this parameter. * * @param   string  $value    A string containing one parameter of a routine * * @return  array             Parsed information about the input parameter */function PMA_RTN_parseOneParameter($value){    global $param_directions;    $retval = array(0 => '',                    1 => '',                    2 => '',                    3 => '',                    4 => '');    $parsed_param = PMA_SQP_parse($value);    $pos = 0;    if (in_array(strtoupper($parsed_param[$pos]['data']), $param_directions)) {        $retval[0] = strtoupper($parsed_param[0]['data']);        $pos++;    }    if ($parsed_param[$pos]['type'] == 'alpha_identifier'        || $parsed_param[$pos]['type'] == 'quote_backtick'    ) {        $retval[1] = PMA_unQuote($parsed_param[$pos]['data']);        $pos++;    }    $depth = 0;    $param_length = '';    $param_opts = array();    for ($i=$pos; $i<$parsed_param['len']; $i++) {        if (($parsed_param[$i]['type'] == 'alpha_columnType'            || $parsed_param[$i]['type'] == 'alpha_functionName') && $depth == 0 // "CHAR" seems to be mistaken for a function by the parser        ) {            $retval[2] = strtoupper($parsed_param[$i]['data']);        } else if ($parsed_param[$i]['type'] == 'punct_bracket_open_round' && $depth == 0) {            $depth = 1;        } else if ($parsed_param[$i]['type'] == 'punct_bracket_close_round' && $depth == 1) {            $depth = 0;        } else if ($depth == 1) {            $param_length .= $parsed_param[$i]['data'];        } else if ($parsed_param[$i]['type'] == 'alpha_reservedWord' && strtoupper($parsed_param[$i]['data']) == 'CHARSET' && $depth == 0) {            if ($parsed_param[$i+1]['type'] == 'alpha_charset' || $parsed_param[$i+1]['type'] == 'alpha_identifier') {                $param_opts[] = strtolower($parsed_param[$i+1]['data']);            }        } else if ($parsed_param[$i]['type'] == 'alpha_columnAttrib' && $depth == 0) {            $param_opts[] = strtoupper($parsed_param[$i]['data']);        }    }    $retval[3] = $param_length;    sort($param_opts);    $retval[4] = implode(' ', $param_opts);    return $retval;} // end PMA_RTN_parseOneParameter()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's parameters. * * @param   array   $parsed_query  Parsed query, returned by by PMA_SQP_parse() * @param   string  $routine_type  Routine type: 'PROCEDURE' or 'FUNCTION' * * @return  array   Information about the parameteres of a routine. */function PMA_RTN_parseAllParameters($parsed_query, $routine_type){    $retval = array();    $retval['num'] = 0;    // First get the list of parameters from the query    $buffer = '';    $params = array();    $fetching = false;    $depth = 0;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == $routine_type) {            $fetching = true;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_open_round') {            $depth++;            if ($depth > 1) {                $buffer .= $parsed_query[$i]['data'] . ' ';            }        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_close_round') {            $depth--;            if ($depth > 0) {                $buffer .= $parsed_query[$i]['data'] . ' ';            } else {                break;            }        } else if ($parsed_query[$i]['type'] == 'punct_listsep' && $depth == 1) {            $params[] = $buffer;            $retval['num']++;            $buffer = '';        } else if ($fetching == true && $depth > 0) {            $buffer .= $parsed_query[$i]['data'] . ' ';        }    }    if (! empty($buffer)) {        $params[] = $buffer;        $retval['num']++;    }    // Now parse each parameter individually    foreach ($params as $key => $value) {        list($retval['dir'][],             $retval['name'][],             $retval['type'][],             $retval['length'][],             $retval['opts'][]) = PMA_RTN_parseOneParameter($value);    }    // Since some indices of $retval may be still undefined, we fill    // them each with an empty array to avoid E_ALL errors in PHP.    foreach (array('dir', 'name', 'type', 'length', 'opts') as $key => $index) {        if (! isset($retval[$index])) {            $retval[$index] = array();        }    }    return $retval;} // end PMA_RTN_parseAllParameters()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's definer. * * @param   array   $parsed_query   Parsed query, returned by PMA_SQP_parse() * * @return  string  The definer of a routine. */function PMA_RTN_parseRoutineDefiner($parsed_query){    $retval = '';    $fetching = false;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == 'DEFINER') {            $fetching = true;        } else if ($fetching == true && ($parsed_query[$i]['type'] != 'quote_backtick' && substr($parsed_query[$i]['type'], 0, 5) != 'punct')) {            break;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'quote_backtick') {            $retval .= PMA_unQuote($parsed_query[$i]['data']);        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_user') {            $retval .= $parsed_query[$i]['data'];        }    }    return $retval;} // end PMA_RTN_parseRoutineDefiner()/** * Handles editor requests for adding or editing an item */function PMA_RTN_handleEditor(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $errors;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        /**         * Handle a request to create/edit a routine         */        $sql_query = '';        $routine_query = PMA_RTN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                if (! in_array($_REQUEST['item_original_type'], array('PROCEDURE', 'FUNCTION'))) {                    $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_original_type']));                } else {                    // Backup the old routine, in case something goes wrong                    $create_routine = PMA_DBI_get_definition($db, $_REQUEST['item_original_type'], $_REQUEST['item_original_name']);                    $drop_routine = "DROP {$_REQUEST['item_original_type']} " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                    $result = PMA_DBI_try_query($drop_routine);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_routine) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                    } else {                        $result = PMA_DBI_try_query($routine_query);                        if (! $result) {                            $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                            // We dropped the old routine, but were unable to create the new one                            // Try to restore the backup query                            $result = PMA_DBI_try_query($create_routine);                            if (! $result) {                                // OMG, this is really bad! We dropped the query, failed to create a new one                                // and now even the backup query does not execute!                                // This should not happen, but we better handle this just in case.                                $errors[] = __('Sorry, we failed to restore the dropped routine.') . '<br />'                                                  . __('The backed up query was:') . "\"$create_routine\"" . '<br />'                                                  . __('MySQL said: ') . PMA_DBI_getError(null);                            }                        } else {                            $message = PMA_Message::success(__('Routine %1$s has been modified.'));                            $message->addParam(PMA_backquote($_REQUEST['item_name']));                            $sql_query = $drop_routine . $routine_query;                        }                    }                }            } else {                // 'Add a new routine' mode                $result = PMA_DBI_try_query($routine_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Routine %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $routine_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, `DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";                $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                          . "AND ROUTINE_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'"                          . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($_REQUEST['item_type']) . "'";                $routine  = PMA_DBI_fetch_single_row("SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;");                $extra_data['name']    = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_RTN_getRowForList($routine);                $extra_data['insert']  = ! empty($routine);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a routine, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['routine_addparameter']) || ! empty($_REQUEST['routine_removeparameter'])        || ! empty($_REQUEST['routine_changetype']))) // FIXME: this must be simpler than that    ) {        // Handle requests to add/remove parameters and changing routine type        // This is necessary when JS is disabled        $operation = '';        if (! empty($_REQUEST['routine_addparameter'])) {            $operation = 'add';        } else if (! empty($_REQUEST['routine_removeparameter'])) {            $operation = 'remove';        } else if (! empty($_REQUEST['routine_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $routine = PMA_RTN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit routine");            if (! $operation && ! empty($_REQUEST['item_name']) && empty($_REQUEST['editor_process_edit'])) {                $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type']);                if ($routine !== false) {                    $routine['item_original_name'] = $routine['item_name'];                    $routine['item_original_type'] = $routine['item_type'];                }            } else {                $routine = PMA_RTN_getDataFromRequest();            }            $mode = 'edit';        }        if ($routine !== false) {            // Show form            $editor = PMA_RTN_getEditorForm($mode, $operation, $routine);            if ($GLOBALS['is_ajax_request']) {                $template   = PMA_RTN_getParameterRow();                $extra_data = array('title' => $title,                                    'param_template' => $template,                                    'type' => $routine['item_type']);                PMA_ajaxResponse($editor, true, $extra_data);            }            echo "\n\n<h2>$title</h2>\n\n$editor";            include './libraries/footer.inc.php';            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_RTN_handleEditor()/** * This function will generate the values that are required to * complete the editor form. It is especially necessary to handle * the 'Add another parameter', 'Remove last parameter' and * 'Change routine type' functionalities when JS is disabled. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromRequest(){    global $_REQUEST, $param_directions, $param_sqldataaccess;    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_returnlength',                     'item_returnopts_num',                     'item_returnopts_text',                     'item_definition',                     'item_comment',                     'item_definer');    foreach ($indices as $key => $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']         = 'PROCEDURE';    $retval['item_type_toggle']  = 'FUNCTION';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'FUNCTION') {        $retval['item_type']         = 'FUNCTION';        $retval['item_type_toggle']  = 'PROCEDURE';    }    $retval['item_original_type'] = 'PROCEDURE';    if (isset($_REQUEST['item_original_type'])        && $_REQUEST['item_original_type'] == 'FUNCTION'    ) {        $retval['item_original_type'] = 'FUNCTION';    }    $retval['item_num_params']      = 0;    $retval['item_param_dir']       = array();    $retval['item_param_name']      = array();    $retval['item_param_type']      = array();    $retval['item_param_length']    = array();    $retval['item_param_opts_num']  = array();    $retval['item_param_opts_text'] = array();    if (   isset($_REQUEST['item_param_name'])        && isset($_REQUEST['item_param_type'])        && isset($_REQUEST['item_param_length'])        && isset($_REQUEST['item_param_opts_num'])        && isset($_REQUEST['item_param_opts_text'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_opts_num'])        && is_array($_REQUEST['item_param_opts_text'])    ) {        if ($_REQUEST['item_type'] == 'PROCEDURE') {            $retval['item_param_dir'] = $_REQUEST['item_param_dir'];            foreach ($retval['item_param_dir'] as $key => $value) {                if (! in_array($value, $param_directions, true)) {                    $retval['item_param_dir'][$key] = '';                }            }        }        $retval['item_param_name'] = $_REQUEST['item_param_name'];        $retval['item_param_type'] = $_REQUEST['item_param_type'];        foreach ($retval['item_param_type'] as $key => $value) {            if (! in_array($value, PMA_getSupportedDatatypes(), true)) {                $retval['item_param_type'][$key] = '';            }        }        $retval['item_param_length']    = $_REQUEST['item_param_length'];        $retval['item_param_opts_num']  = $_REQUEST['item_param_opts_num'];        $retval['item_param_opts_text'] = $_REQUEST['item_param_opts_text'];        $retval['item_num_params'] = max(            count($retval['item_param_name']),            count($retval['item_param_type']),            count($retval['item_param_length']),            count($retval['item_param_opts_num']),            count($retval['item_param_opts_text'])        );    }    $retval['item_returntype'] = '';    if (isset($_REQUEST['item_returntype'])        && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())    ) {        $retval['item_returntype'] = $_REQUEST['item_returntype'];    }    $retval['item_isdeterministic'] = '';    if (isset($_REQUEST['item_isdeterministic'])        && strtolower($_REQUEST['item_isdeterministic']) == 'on'    ) {        $retval['item_isdeterministic'] = " checked='checked'";    }    $retval['item_securitytype_definer'] = '';    $retval['item_securitytype_invoker'] = '';    if (isset($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] === 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($_REQUEST['item_securitytype'] === 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }    }    $retval['item_sqldataaccess'] = '';    if (isset($_REQUEST['item_sqldataaccess'])        && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess, true)    ) {        $retval['item_sqldataaccess'] = $_REQUEST['item_sqldataaccess'];    }    return $retval;} // end function PMA_RTN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit routine" form given the name of a routine. * * @param   string   $name   The name of the routine. * @param   string   $type   Type of routine (ROUTINE|PROCEDURE) * @param   bool     $all    Whether to return all data or just *                           the info about parameters. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromName($name, $type, $all = true){    global $db;    $retval  = array();    // Build and execute the query    $fields  = "SPECIFIC_NAME, ROUTINE_TYPE, DTD_IDENTIFIER, "             . "ROUTINE_DEFINITION, IS_DETERMINISTIC, SQL_DATA_ACCESS, "             . "ROUTINE_COMMENT, SECURITY_TYPE";    $where   = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND SPECIFIC_NAME='" . PMA_sqlAddSlashes($name) . "'"             . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($type) . "'";    $query   = "SELECT $fields FROM INFORMATION_SCHEMA.ROUTINES WHERE $where;";    $routine = PMA_DBI_fetch_single_row($query);    if (! $routine) {        return false;    }    // Get required data    $retval['item_name'] = $routine['SPECIFIC_NAME'];    $retval['item_type'] = $routine['ROUTINE_TYPE'];    $parsed_query = PMA_SQP_parse(        PMA_DBI_get_definition(            $db,            $routine['ROUTINE_TYPE'],            $routine['SPECIFIC_NAME']        )    );    $params = PMA_RTN_parseAllParameters($parsed_query, $routine['ROUTINE_TYPE']);    $retval['item_num_params']      = $params['num'];    $retval['item_param_dir']       = $params['dir'];    $retval['item_param_name']      = $params['name'];    $retval['item_param_type']      = $params['type'];    $retval['item_param_length']    = $params['length'];    $retval['item_param_opts_num']  = $params['opts'];    $retval['item_param_opts_text'] = $params['opts'];    // Get extra data    if ($all) {        if ($retval['item_type'] == 'FUNCTION') {            $retval['item_type_toggle'] = 'PROCEDURE';        } else {            $retval['item_type_toggle'] = 'FUNCTION';        }        $retval['item_returntype']   = '';        $retval['item_returnlength'] = '';        $retval['item_returnopts_num']  = '';        $retval['item_returnopts_text'] = '';        if (! empty($routine['DTD_IDENTIFIER'])) {            if (strlen($routine['DTD_IDENTIFIER']) > 63) {                // If the DTD_IDENTIFIER string from INFORMATION_SCHEMA is                // at least 64 characters, then it may actually have been                // chopped because that column is a varchar(64), so we will                // parse the output of SHOW CREATE query to get accurate                // information about the return variable.                $dtd = '';                $fetching = false;                for ($i=0; $i<$parsed_query['len']; $i++) {                    if ($parsed_query[$i]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_query[$i]['data']) == 'RETURNS'                    ) {                        $fetching = true;                    } else if ($fetching == true && $parsed_query[$i]['type'] == 'alpha_reservedWord') {                        // We will not be looking for options such as UNSIGNED                        // or ZEROFILL because there is no way that a numeric                        // field's DTD_IDENTIFIER can be longer than 64                        // characters. We can safely assume that the return                        // datatype is either ENUM or SET, so we only look                        // for CHARSET.                        $word = strtoupper($parsed_query[$i]['data']);                        if ($word == 'CHARSET'                            && ($parsed_query[$i+1]['type'] == 'alpha_charset'                            || $parsed_query[$i+1]['type'] == 'alpha_identifier')                        ) {                            $dtd .= $word . ' ' . $parsed_query[$i+1]['data'];                        }                        break;                    } else if ($fetching == true) {                        $dtd .= $parsed_query[$i]['data'] . ' ';                    }                }                $routine['DTD_IDENTIFIER'] = $dtd;            }            $returnparam = PMA_RTN_parseOneParameter($routine['DTD_IDENTIFIER']);            $retval['item_returntype']      = $returnparam[2];            $retval['item_returnlength']    = $returnparam[3];            $retval['item_returnopts_num']  = $returnparam[4];            $retval['item_returnopts_text'] = $returnparam[4];        }        $retval['item_definer']         = PMA_RTN_parseRoutineDefiner($parsed_query);        $retval['item_definition']      = $routine['ROUTINE_DEFINITION'];        $retval['item_isdeterministic'] = '';        if ($routine['IS_DETERMINISTIC'] == 'YES') {            $retval['item_isdeterministic'] = " checked='checked'";        }        $retval['item_securitytype_definer'] = '';        $retval['item_securitytype_invoker'] = '';        if ($routine['SECURITY_TYPE'] == 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($routine['SECURITY_TYPE'] == 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }        $retval['item_sqldataaccess'] = $routine['SQL_DATA_ACCESS'];        $retval['item_comment']       = $routine['ROUTINE_COMMENT'];    }    return $retval;} // PMA_RTN_getDataFromName()/** * Creates one row for the parameter table used in the routine editor. * * @param   array    $routine    Data for the routine returned by *                               PMA_RTN_getDataFromRequest() or *                               PMA_RTN_getDataFromName() * @param   mixed    $index      Either a numeric index of the row being processed *                               or NULL to create a template row for AJAX request * @param   string   $class      Class used to hide the direction column, if the *                               row is for a stored function. * * @return    string    HTML code of one row of parameter table for the editor. */function PMA_RTN_getParameterRow($routine = array(), $index = null, $class = ''){    global $param_directions, $param_opts_num, $titles;    if ($index === null) {        // template row for AJAX request        $i = 0;        $index = '%s';        $drop_class = '';        $routine = array(            'item_param_dir'       => array(0 => ''),            'item_param_name'      => array(0 => ''),            'item_param_type'      => array(0 => ''),            'item_param_length'    => array(0 => ''),            'item_param_opts_num'  => array(0 => ''),            'item_param_opts_text' => array(0 => '')        );    } else if (! empty($routine)) {        // regular row for routine editor        $drop_class = ' hide';        $i = $index;    } else {        // No input data. This shouldn't happen,        // but better be safe than sorry.        return '';    }    // Create the output    $retval  = "";    $retval .= "        <tr>\n";    $retval .= "            <td class='routine_direction_cell$class'>\n";    $retval .= "                <select name='item_param_dir[$index]'>\n";    foreach ($param_directions as $key => $value) {        $selected = "";        if (! empty($routine['item_param_dir'][$i])            && $routine['item_param_dir'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "                    <option$selected>$value</option>\n";    }    $retval .= "                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td><input name='item_param_name[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_name'][$i]}' /></td>\n";    $retval .= "            <td><select name='item_param_type[$index]'>";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_param_type'][$i]) . "\n";    $retval .= "            </select></td>\n";    $retval .= "            <td>\n";    $retval .= "                <input id='item_param_length_$index'\n";    $retval .= "                       name='item_param_length[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_length'][$i]}' />\n";    $retval .= "                <div class='enum_hint'>\n";    $retval .= "                    <a class='open_enum_editor' target='_blank'\n";    $retval .= "                       href='enum_editor.php?" . PMA_generate_common_url() . "&amp;values=" . $routine['item_param_length'][$i] . "&amp;field=" . $routine['item_param_name'][$i] . "'>\n";    $retval .= "                        " . PMA_getImage('b_edit', '', array('title'=>__('ENUM/SET editor'))) . "\n";    $retval .= "                    </a>\n";    $retval .= "                </div>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_len'>---</td>\n";    $retval .= "            <td class='routine_param_opts_text'>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_param_opts_text[$index]",        null,        $routine['item_param_opts_text'][$i]    );    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_opts'>---</td>\n";    $retval .= "            <td class='routine_param_opts_num'>\n";    $retval .= "                <select name='item_param_opts_num[$index]'>\n";    $retval .= "                    <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_param_opts_num'][$i])            && $routine['item_param_opts_num'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='routine_param_remove$drop_class'>\n";    $retval .= "                <a href='#' class='routine_param_remove_anchor'>\n";    $retval .= "                    {$titles['Drop']}\n";    $retval .= "                </a>\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getParameterRow()/** * Displays a form used to add/edit a routine * * @param   string   $mode         If the editor will be used edit a routine *                                 or add a new one: 'edit' or 'add'. * @param   string   $operation    If the editor was previously invoked with *                                 JS turned off, this will hold the name of *                                 the current operation * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromRequest() or *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_RTN_getEditorForm($mode, $operation, $routine){    global $db, $errors, $param_sqldataaccess, $param_opts_num;    // Escape special characters    $need_escape = array(        'item_original_name',        'item_name',        'item_returnlength',        'item_definition',        'item_definer',        'item_comment'    );    foreach ($need_escape as $key => $index) {        $routine[$index] = htmlentities($routine[$index], ENT_QUOTES);    }    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i]   = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );        $routine['item_param_length'][$i] = htmlentities(            $routine['item_param_length'][$i],            ENT_QUOTES        );    }    // Handle some logic first    if ($operation == 'change') {        if ($routine['item_type'] == 'PROCEDURE') {            $routine['item_type']        = 'FUNCTION';            $routine['item_type_toggle'] = 'PROCEDURE';        } else {            $routine['item_type']        = 'PROCEDURE';            $routine['item_type_toggle'] = 'FUNCTION';        }    } else if ($operation == 'add' || ($routine['item_num_params'] == 0 && $mode == 'add' && ! $errors)) {        $routine['item_param_dir'][]       = '';        $routine['item_param_name'][]      = '';        $routine['item_param_type'][]      = '';        $routine['item_param_length'][]    = '';        $routine['item_param_opts_num'][]  = '';        $routine['item_param_opts_text'][] = '';        $routine['item_num_params']++;    } else if ($operation == 'remove') {        unset($routine['item_param_dir'][$routine['item_num_params']-1]);        unset($routine['item_param_name'][$routine['item_num_params']-1]);        unset($routine['item_param_type'][$routine['item_num_params']-1]);        unset($routine['item_param_length'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_num'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_text'][$routine['item_num_params']-1]);        $routine['item_num_params']--;    }    $disable_remove_parameter = '';    if (! $routine['item_num_params']) {        $disable_remove_parameter = " color: gray;' disabled='disabled";    }    $original_routine = '';    if ($mode == 'edit') {        $original_routine = "<input name='item_original_name' "                          . "type='hidden' "                          . "value='{$routine['item_original_name']}'/>\n"                          . "<input name='item_original_type' "                          . "type='hidden' "                          . "value='{$routine['item_original_type']}'/>\n";    }    $isfunction_class   = '';    $isprocedure_class  = '';    $isfunction_select  = '';    $isprocedure_select = '';    if ($routine['item_type'] == 'PROCEDURE') {        $isfunction_class   = ' hide';        $isprocedure_select = " selected='selected'";    } else {        $isprocedure_class = ' hide';        $isfunction_select = " selected='selected'";    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_routines.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_routine;    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Routine name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$routine['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>\n";        $retval .= "            <option value='PROCEDURE'$isprocedure_select>PROCEDURE</option>\n";        $retval .= "            <option value='FUNCTION'$isfunction_select>FUNCTION</option>\n";        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' value='{$routine['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$routine['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit' name='routine_changetype'\n";        $retval .= "               value='".sprintf(__('Change to %s'), $routine['item_type_toggle'])."' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Parameters') . "</td>\n";    $retval .= "    <td>\n";    // parameter handling start    $retval .= "        <table class='routine_params_table'>\n";    $retval .= "        <tr>\n";    $retval .= "            <th class='routine_direction_cell$isprocedure_class'>" . __('Direction') . "</th>\n";    $retval .= "            <th>" . __('Name') . "</th>\n";    $retval .= "            <th>" . __('Type') . "</th>\n";    $retval .= "            <th>" . __('Length/Values') . "</th>\n";    $retval .= "            <th colspan='2'>" . __('Options') . "</th>\n";    $retval .= "            <th class='routine_param_remove hide'>&nbsp;</th>\n";    $retval .= "        </tr>";    for ($i=0; $i<$routine['item_num_params']; $i++) { // each parameter        $retval .= PMA_RTN_getParameterRow($routine, $i, $isprocedure_class);    }    $retval .= "        </table>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>&nbsp;</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='submit' \n";    $retval .= "               name='routine_addparameter'\n";    $retval .= "               value='" . __('Add parameter') . "' />\n";    $retval .= "        <input style='width: 49%;$disable_remove_parameter'\n";    $retval .= "               type='submit' \n";    $retval .= "               name='routine_removeparameter'\n";    $retval .= "               value='" . __('Remove last parameter') . "' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    // parameter handling end    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return type') . "</td>\n";    $retval .= "    <td><select name='item_returntype'>\n";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_returntype']) . "\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return length/values') . "</td>\n";    $retval .= "    <td><input type='text' name='item_returnlength'\n";    $retval .= "               value='{$routine['item_returnlength']}' /></td>\n";    $retval .= "    <td class='hide no_len'>---</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return options') . "</td>\n";    $retval .= "    <td><div>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_returnopts_text",        null,        $routine['item_returnopts_text']    );    $retval .= "\n    </div>\n";    $retval .= "    <div><select name='item_returnopts_num'>\n";    $retval .= "        <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_returnopts_num'])            && $routine['item_returnopts_num'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n    </select></div>\n";    $retval .= "    <div class='hide no_opts'>---</div>\n";    $retval .= "</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $routine['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Is deterministic') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_isdeterministic'{$routine['item_isdeterministic']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$routine['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Security type') . "</td>\n";    $retval .= "    <td><select name='item_securitytype'>\n";    $retval .= "        <option value='DEFINER'{$routine['item_securitytype_definer']}>DEFINER</option>\n";    $retval .= "        <option value='INVOKER'{$routine['item_securitytype_invoker']}>INVOKER</option>\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('SQL data access') . "</td>\n";    $retval .= "    <td><select name='item_sqldataaccess'>\n";    foreach ($param_sqldataaccess as $key => $value) {        $selected = "";        if ($routine['item_sqldataaccess'] == $value) {            $selected = " selected='selected'";        }        $retval .= "        <option$selected>$value</option>\n";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$routine['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    return $retval;} // end PMA_RTN_getEditorForm()/** * Composes the query necessary to create a routine from an HTTP request. * * @return  string  The CREATE [ROUTINE | PROCEDURE] query. */function PMA_RTN_getQueryFromRequest(){    global $_REQUEST, $cfg, $errors, $param_sqldataaccess, $param_directions;    $_REQUEST['item_type'] = isset($_REQUEST['item_type']) ? $_REQUEST['item_type'] : '';    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    if ($_REQUEST['item_type'] == 'FUNCTION'        || $_REQUEST['item_type'] == 'PROCEDURE'    ) {        $query .= $_REQUEST['item_type'] . ' ';    } else {        $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_type']));    }    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']);    } else {        $errors[] = __('You must provide a routine name');    }    $params = '';    $warned_about_dir    = false;    $warned_about_name   = false;    $warned_about_length = false;    if (   ! empty($_REQUEST['item_param_name'])        && ! empty($_REQUEST['item_param_type'])        && ! empty($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])    ) {        for ($i=0; $i<count($_REQUEST['item_param_name']); $i++) {            if (! empty($_REQUEST['item_param_name'][$i]) && ! empty($_REQUEST['item_param_type'][$i])) {                if ($_REQUEST['item_type'] == 'PROCEDURE'                    && ! empty($_REQUEST['item_param_dir'][$i])                    && in_array($_REQUEST['item_param_dir'][$i], $param_directions)                ) {                    $params .= $_REQUEST['item_param_dir'][$i] . " " . PMA_backquote($_REQUEST['item_param_name'][$i]) . " "                            . $_REQUEST['item_param_type'][$i];                } else if ($_REQUEST['item_type'] == 'FUNCTION') {                    $params .= PMA_backquote($_REQUEST['item_param_name'][$i]) . " " . $_REQUEST['item_param_type'][$i];                } else if (! $warned_about_dir) {                    $warned_about_dir = true;                    $errors[] = sprintf(                        __('Invalid direction "%s" given for parameter.'),                        htmlspecialchars($_REQUEST['item_param_dir'][$i])                    );                }                if ($_REQUEST['item_param_length'][$i] != ''                    && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                                   $_REQUEST['item_param_type'][$i])                ) {                    $params .= "(" . $_REQUEST['item_param_length'][$i] . ")";                } else if ($_REQUEST['item_param_length'][$i] == '' && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_param_type'][$i])) {                    if (! $warned_about_length) {                        $warned_about_length = true;                        $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');                    }                }                if (! empty($_REQUEST['item_param_opts_text'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['STRING'])) {                        $params .= ' CHARSET ' . strtolower($_REQUEST['item_param_opts_text'][$i]);                    }                }                if (! empty($_REQUEST['item_param_opts_num'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['NUMERIC'])) {                        $params .= ' ' . strtoupper($_REQUEST['item_param_opts_num'][$i]);                    }                }                if ($i != count($_REQUEST['item_param_name'])-1) {                    $params .= ", ";                }            } else if (! $warned_about_name) {                $warned_about_name = true;                $errors[] = __('You must provide a name and a type for each routine parameter.');                break;            }        }    }    $query .= "(" . $params . ") ";    if ($_REQUEST['item_type'] == 'FUNCTION') {        if (! empty($_REQUEST['item_returntype']) && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())) {            $query .= "RETURNS {$_REQUEST['item_returntype']}";        } else {            $errors[] = __('You must provide a valid return type for the routine.');        }        if (! empty($_REQUEST['item_returnlength'])            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                            $_REQUEST['item_returntype'])        ) {            $query .= "(" . $_REQUEST['item_returnlength'] . ")";        } else if (empty($_REQUEST['item_returnlength']) && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_returntype'])) {            if (! $warned_about_length) {                $warned_about_length = true;                $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');            }        }        if (! empty($_REQUEST['item_returnopts_text'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['STRING'])) {                $query .= ' CHARSET ' . strtolower($_REQUEST['item_returnopts_text']);            }        }        if (! empty($_REQUEST['item_returnopts_num'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['NUMERIC'])) {                $query .= ' ' . strtoupper($_REQUEST['item_returnopts_num']);            }        }        $query .= ' ';    }    if (! empty($_REQUEST['item_comment'])) {        $query .= "COMMENT '" . PMA_sqlAddslashes($_REQUEST['item_comment']) . "' ";    }    if (isset($_REQUEST['item_isdeterministic'])) {        $query .= 'DETERMINISTIC ';    } else {        $query .= 'NOT DETERMINISTIC ';    }    if (! empty($_REQUEST['item_sqldataaccess']) && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess)) {        $query .= $_REQUEST['item_sqldataaccess'] . ' ';    }    if (! empty($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] == 'DEFINER' || $_REQUEST['item_securitytype'] == 'INVOKER') {            $query .= 'SQL SECURITY ' . $_REQUEST['item_securitytype'] . ' ';        }    }    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a routine definition.');    }    return $query;} // end PMA_RTN_getQueryFromRequest()/** * Handles requests for executing a routine */function PMA_RTN_handleExecute(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $cfg;    /**     * Handle all user requests other than the default of listing routines     */    if (! empty($_REQUEST['execute_routine']) && ! empty($_REQUEST['item_name'])) {        // Build the queries        $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type'], false);        if ($routine !== false) {            $queries   = array();            $end_query = array();            $args      = array();            for ($i=0; $i<$routine['item_num_params']; $i++) {                if (isset($_REQUEST['params'][$routine['item_param_name'][$i]])) {                    $value = $_REQUEST['params'][$routine['item_param_name'][$i]];                    if (is_array($value)) { // is SET type                        $value = implode(',', $value);                    }                    $value = PMA_sqlAddSlashes($value);                    if (! empty($_REQUEST['funcs'][$routine['item_param_name'][$i]])                        && in_array($_REQUEST['funcs'][$routine['item_param_name'][$i]], $cfg['Functions'])                    ) {                        $queries[] = "SET @p$i={$_REQUEST['funcs'][$routine['item_param_name'][$i]]}('$value');\n";                    } else {                        $queries[] = "SET @p$i='$value';\n";                    }                    $args[] = "@p$i";                } else {                    $args[] = "@p$i";                }                if ($routine['item_type'] == 'PROCEDURE') {                    if ($routine['item_param_dir'][$i] == 'OUT'                        || $routine['item_param_dir'][$i] == 'INOUT'                    ) {                        $end_query[] = "@p$i AS " . PMA_backquote($routine['item_param_name'][$i]);                    }                }            }            if ($routine['item_type'] == 'PROCEDURE') {                $queries[] = "CALL " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ");\n";                if (count($end_query)) {                    $queries[] = "SELECT " . implode(', ', $end_query) . ";\n";                }            } else {                $queries[] = "SELECT " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ") "                           . "AS " . PMA_backquote($routine['item_name']) . ";\n";            }            // Execute the queries            $affected = 0;            $result = null;            $outcome = true;            foreach ($queries as $query) {                $resource = PMA_DBI_try_query($query);                if ($resource === false) {                    $outcome = false;                    break;                }                while (true) {                    if (! PMA_DBI_more_results()) {                        break;                    }                    PMA_DBI_next_result();                }                if (substr($query, 0, 6) == 'SELECT') {                    $result = $resource;                } else if (substr($query, 0, 4) == 'CALL') {                    $result = $resource ? $resource : $result;                    $affected = PMA_DBI_affected_rows() - PMA_DBI_num_rows($resource);                }            }            // Generate output            if ($outcome) {                $message = __('Your SQL query has been executed successfully');                if ($routine['item_type'] == 'PROCEDURE') {                    $message .= '<br />';                    $message .= sprintf(                        _ngettext(                            '%d row affected by the last statement inside the procedure',                            '%d rows affected by the last statement inside the procedure',                            $affected                        ),                        $affected                    );                }                $message = PMA_message::success($message);                // Pass the SQL queries through the "pretty printer"                $output  = '<code class="sql" style="margin-bottom: 1em;">';                $output .= PMA_SQP_formatHtml(PMA_SQP_parse(implode($queries)));                $output .= '</code>';                // Display results                if ($result) {                    $output .= "<fieldset><legend>";                    $output .= sprintf(                        __('Execution results of routine %s'),                        PMA_backquote(htmlspecialchars($routine['item_name']))                    );                    $output .= "</legend>";                    $output .= "<table><tr>";                    foreach (PMA_DBI_get_fields_meta($result) as $key => $field) {                        $output .= "<th>";                        $output .= htmlspecialchars($field->name);                        $output .= "</th>";                    }                    $output .= "</tr>";                    // Stored routines can only ever return ONE ROW.                    $data = PMA_DBI_fetch_single_row($result);                    foreach ($data as $key => $value) {                        if ($value === null) {                            $value = '<i>NULL</i>';                        } else {                            $value = htmlspecialchars($value);                        }                        $output .= "<td class='odd'>" . $value . "</td>";                    }                    $output .= "</table></fieldset>";                } else {                    $notice = __('MySQL returned an empty result set (i.e. zero rows).');                    $output .= PMA_message::notice($notice)->getDisplay();                }            } else {                $output = '';                $message = PMA_message::error(sprintf(__('The following query has failed: "%s"'), $query) . '<br /><br />'                                                    . __('MySQL said: ') . PMA_DBI_getError(null));            }            // Print/send output            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('dialog' => false);                PMA_ajaxResponse(                    $message->getDisplay() . $output,                    $message->isSuccess(),                    $extra_data                );            } else {                echo $message->getDisplay() . $output;                if ($message->isError()) {                    // At least one query has failed, so shouldn't                    // execute any more queries, so we quit.                    exit;                }                unset($_POST);                // Now deliberately fall through to displaying the routines list            }        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, $message->isSuccess());            } else {                echo $message->getDisplay();                unset($_POST);            }        }    } else if (! empty($_GET['execute_dialog']) && ! empty($_GET['item_name'])) {        /**         * Display the execute form for a routine.         */        $routine = PMA_RTN_getDataFromName($_GET['item_name'], $_GET['item_type'], true);        if ($routine !== false) {            $form = PMA_RTN_getExecuteForm($routine);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data = array();                $extra_data['dialog'] = true;                $extra_data['title']  = __("Execute routine") . " ";                $extra_data['title'] .= PMA_backquote(                    htmlentities($_GET['item_name'], ENT_QUOTES)                );                PMA_ajaxResponse($form, true, $extra_data);            } else {                echo "\n\n<h2>" . __("Execute routine") . "</h2>\n\n";                echo $form;                include './libraries/footer.inc.php';                // exit;            }        } else if (($GLOBALS['is_ajax_request'] == true)) {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            PMA_ajaxResponse($message, false);        }    }}/** * Creates the HTML code that shows the routine execution dialog. * * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the routine execution dialog. */function PMA_RTN_getExecuteForm($routine){    global $db, $cfg;    // Escape special characters    $routine['item_name'] = htmlentities($routine['item_name'], ENT_QUOTES);    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i] = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );    }    // Create the output    $retval  = "";    $retval .= "<!-- START ROUTINE EXECUTE FORM -->\n\n";    $retval .= "<form action='db_routines.php' method='post' class='rte_form'>\n";    $retval .= "<input type='hidden' name='item_name'\n";    $retval .= "       value='{$routine['item_name']}' />\n";    $retval .= "<input type='hidden' name='item_type'\n";    $retval .= "       value='{$routine['item_type']}' />\n";    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "<legend>{$routine['item_name']}</legend>\n";        $retval .= "<table class='rte_table'>\n";        $retval .= "<caption class='tblHeaders'>\n";        $retval .= __('Routine parameters');        $retval .= "</caption>\n";    } else {        $retval .= "<legend>" . __('Routine parameters') . "</legend>\n";        $retval .= "<table class='rte_table' style='width: 100%;'>\n";    }    $retval .= "<tr>\n";    $retval .= "<th>" . __('Name') . "</th>\n";    $retval .= "<th>" . __('Type') . "</th>\n";    if ($cfg['ShowFunctionFields']) {        $retval .= "<th>" . __('Function') . "</th>\n";    }    $retval .= "<th>" . __('Value')    . "</th>\n";    $retval .= "</tr>\n";    // Get a list of data types that are not yet supported.    $no_support_types = PMA_unsupportedDatatypes();    for ($i=0; $i<$routine['item_num_params']; $i++) { // Each parameter        if ($routine['item_type'] == 'PROCEDURE'            && $routine['item_param_dir'][$i] == 'OUT'        ) {            continue;        }        $rowclass = ($i % 2 == 0) ? 'even' : 'odd';        $retval .= "\n<tr class='$rowclass'>\n";        $retval .= "<td>{$routine['item_param_name'][$i]}</td>\n";        $retval .= "<td>{$routine['item_param_type'][$i]}</td>\n";        if ($cfg['ShowFunctionFields']) {            $retval .= "<td>\n";            if (stristr($routine['item_param_type'][$i], 'enum')                || stristr($routine['item_param_type'][$i], 'set')                || in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)            ) {                $retval .= "--\n";            } else {                $field = array(                    'True_Type'       => strtolower($routine['item_param_type'][$i]),                    'Type'            => '',                    'Key'             => '',                    'Field'           => '',                    'Default'         => '',                    'first_timestamp' => false                );                $retval .= "<select name='funcs[{$routine['item_param_name'][$i]}]'>";                $retval .= PMA_getFunctionsForField($field, false);                $retval .= "</select>";            }            $retval .= "</td>\n";        }        // Append a class to date/time fields so that        // jQuery can attach a datepicker to them        $class = '';        if ($routine['item_param_type'][$i] == 'DATETIME'            || $routine['item_param_type'][$i] == 'TIMESTAMP'        ) {            $class = 'datetimefield';        } else if ($routine['item_param_type'][$i] == 'DATE') {            $class = 'datefield';        }        $retval .= "<td class='nowrap'>\n";        if (in_array($routine['item_param_type'][$i], array('ENUM', 'SET'))) {            $tokens = PMA_SQP_parse($routine['item_param_length'][$i]);            if ($routine['item_param_type'][$i] == 'ENUM') {                $input_type = 'radio';            } else {                $input_type = 'checkbox';            }            for ($j=0; $j<$tokens['len']; $j++) {                if ($tokens[$j]['type'] != 'punct_listsep') {                    $tokens[$j]['data'] = htmlentities(                        PMA_unquote($tokens[$j]['data']),                        ENT_QUOTES                    );                    $retval .= "<input name='params[{$routine['item_param_name'][$i]}][]' "                             . "value='{$tokens[$j]['data']}' type='$input_type' />"                             . "{$tokens[$j]['data']}<br />\n";                }            }        } else if (in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)) {            $retval .= "\n";        } else {            $retval .= "<input class='$class' type='text' name='params[{$routine['item_param_name'][$i]}]' />\n";        }        $retval .= "</td>\n";        $retval .= "</tr>\n";    }    $retval .= "\n</table>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "</fieldset>\n\n";        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='execute_routine'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    } else {        $retval .= "<input type='hidden' name='execute_routine' value='true' />";        $retval .= "<input type='hidden' name='ajax_request' value='true' />";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END ROUTINE EXECUTE FORM -->\n\n";    return $retval;} // end PMA_RTN_getExecuteForm()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Get relations & co. status$cfgRelation = PMA_getRelationsParam();require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';function PMA_exportCheckboxCheck($str){    if (isset($GLOBALS['cfg']['Export'][$str]) && $GLOBALS['cfg']['Export'][$str]) {        echo ' checked="checked"';    }}function PMA_exportIsActive($what, $val){    if (isset($GLOBALS['cfg']['Export'][$what]) &&  $GLOBALS['cfg']['Export'][$what] == $val) {        echo ' checked="checked"';    }}/* Scan for plugins */$export_list = PMA_getPlugins('./libraries/export/', array('export_type' => $export_type, 'single_table' => isset($single_table)));/* Fail if we didn't find any plugin */if (empty($export_list)) {    PMA_Message::error( __('Could not load export plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><form method="post" action="export.php" name="dump"><?phpif ($export_type == 'server') {    echo PMA_generate_common_hidden_inputs('', '', 1);} elseif ($export_type == 'database') {    echo PMA_generate_common_hidden_inputs($db, '', 1);} else {    echo PMA_generate_common_hidden_inputs($db, $table, 1);}// just to keep this value for possible next display of this form after saving on serverif (isset($single_table)) {    echo '<input type="hidden" name="single_table" value="TRUE" />' . "\n";}echo '<input type="hidden" name="export_type" value="' . $export_type . '" />' . "\n";// If the export method was not set, the default is quickif (isset($_GET['export_method'])) {    $cfg['Export']['method'] = $_GET['export_method'];} elseif (! isset($cfg['Export']['method'])) {    $cfg['Export']['method'] = 'quick';}// The export method (quick, custom or custom-no-form)echo '<input type="hidden" name="export_method" value="' . htmlspecialchars($cfg['Export']['method']) . '" />';if (isset($_GET['sql_query'])) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($_GET['sql_query']) . '" />' . "\n";} elseif (! empty($sql_query)) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";}?><div class="exportoptions" id="header">    <h2>        <?php echo PMA_getImage('b_export.png', __('Export')); ?>        <?php        if ($export_type == 'server') {            echo __('Exporting databases from the current server');        } elseif ($export_type == 'database') {            printf(__('Exporting tables from "%s" database'), htmlspecialchars($db));        } else {            printf(__('Exporting rows from "%s" table'), htmlspecialchars($table));        }?>    </h2></div><div class="exportoptions" id="quick_or_custom">    <h3><?php echo __('Export Method:'); ?></h3>    <ul>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="quick" id="radio_quick_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' />';                } else {                    echo ' checked="checked" />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' />';            } else {                echo ' checked="checked" />';            }            echo '<label for ="radio_quick_export">' . __('Quick - display only the minimal options') . '</label>'; ?>        </li>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="custom" id="radio_custom_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' checked="checked" />';                } else {                    echo ' />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' checked="checked" />';            } else {                echo ' />';            }            echo '<label for="radio_custom_export">' . __('Custom - display all possible options') . '</label>';?>        </li>    </ul></div><div class="exportoptions" id="databases_and_tables">    <?php        if ($export_type == 'server') {            echo '<h3>' . __('Database(s):') . '</h3>';        } else if ($export_type == 'database') {            echo '<h3>' . __('Table(s):') . '</h3>';        }        if (! empty($multi_values)) {            echo $multi_values;        }    ?></div><?php if (strlen($table) && ! isset($num_tables) && ! PMA_Table::isMerge($db, $table)) { ?>    <div class="exportoptions" id="rows">        <h3><?php echo __('Rows:'); ?></h3>        <ul>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 1) {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" />';                    } else {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" checked="checked" />';                    }                    echo '<label for ="radio_allrows_0">' . __('Dump some row(s)') . '</label>'; ?>                <ul>                    <li><label for="limit_to"><?php echo __('Number of rows:') . '</label> <input type="text" id="limit_to" name="limit_to" size="5" value="'                . ((isset($_GET['limit_to'])) ? htmlspecialchars($_GET['limit_to']) : ((isset($unlim_num_rows) ? $unlim_num_rows : PMA_Table::countRecords($db, $table))))                . '" onfocus="this.select()" />' ?></li>                    <li><label for="limit_from"><?php echo __('Row to begin at:') . '</label> <input type="text" id="limit_from" name="limit_from" value="'                 . ((isset($_GET['limit_from'])) ? htmlspecialchars($_GET['limit_from']) : '0')                 . '" size="5" onfocus="this.select()" />'; ?></li>                </ul>            </li>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 0) {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" />';                } else {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" checked="checked" />';                }                echo ' <label for="radio_allrows_1">' . __('Dump all rows') . '</label>';?>            </li>        </ul>     </div><?php } ?><?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>    <div class="exportoptions" id="output_quick_export">        <h3><?php echo __('Output:'); ?></h3>        <ul>            <li>                <input type="checkbox" name="quick_export_onserver" value="saveit"                    id="checkbox_quick_dump_onserver"                    <?php PMA_exportCheckboxCheck('quick_export_onserver'); ?> />                <label for="checkbox_quick_dump_onserver">                    <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                </label>            </li>            <li>                <input type="checkbox" name="quick_export_onserverover" value="saveitover"                id="checkbox_quick_dump_onserverover"                <?php PMA_exportCheckboxCheck('quick_export_onserver_overwrite'); ?> />                <label for="checkbox_quick_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>            </li>        </ul>    </div><?php } ?><div class="exportoptions" id="output">    <h3><?php echo __('Output:'); ?></h3>    <ul id="ul_output">        <li>            <input type="radio" name="output_format" value="sendit" id="radio_dump_asfile" <?php isset($_GET['repopulate']) ? '' : PMA_exportCheckboxCheck('asfile'); ?> />            <label for="radio_dump_asfile"><?php echo __('Save output to a file'); ?></label>            <ul id="ul_save_asfile">                <?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>                <li>                    <input type="checkbox" name="onserver" value="saveit"                        id="checkbox_dump_onserver"                        <?php PMA_exportCheckboxCheck('onserver'); ?> />                    <label for="checkbox_dump_onserver">                        <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                    </label>                </li>                <li>                    <input type="checkbox" name="onserverover" value="saveitover"                    id="checkbox_dump_onserverover"                    <?php PMA_exportCheckboxCheck('onserver_overwrite'); ?> />                    <label for="checkbox_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>                </li>                <?php } ?>                <li>                    <label for="filename_template" class="desc">                    <?php                    echo __('File name template:');                    $trans = new PMA_Message;                    $trans->addMessage(__('@SERVER@ will become the server name'));                    if ($export_type == 'database' || $export_type == 'table') {                        $trans->addMessage(__(', @DATABASE@ will become the database name'));                        if ($export_type == 'table') {                            $trans->addMessage(__(', @TABLE@ will become the table name'));                        }                    }                    $message = new PMA_Message(__('This value is interpreted using %1$sstrftime%2$s, so you can use time formatting strings. Additionally the following transformations will happen: %3$s. Other text will be kept as is. See the %4$sFAQ%5$s for details.'));                    $message->addParam('<a href="' . PMA_linkURL(PMA_getPHPDocLink('function.strftime.php')). '" target="documentation" title="'                        . __('Documentation') . '">', false);                    $message->addParam('</a>', false);                    $message->addParam($trans);                    $message->addParam('<a href="Documentation.html#faq6_27" target="documentation">', false);                    $message->addParam('</a>', false);                    echo PMA_showHint($message);                    ?>                    </label>                    <input type="text" name="filename_template" id="filename_template"                    <?php                        echo ' value="';                        if (isset($_GET['filename_template'])) {                            echo htmlspecialchars($_GET['filename_template']);                        } else {                            if ($export_type == 'database') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_db_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_database']));                            } elseif ($export_type == 'table') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_table_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_table']));                            } else {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_server_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_server']));                            }                    }                        echo '"';                    ?>                    />                    <input type="checkbox" name="remember_template"                        id="checkbox_remember_template"                        <?php PMA_exportCheckboxCheck('remember_file_template'); ?> />                    <label for="checkbox_remember_template">                        <?php echo __('use this for future exports'); ?></label>                </li>                <?php                // charset of file                if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {                    echo '        <li><label for="select_charset_of_file" class="desc">'                        . __('Character set of the file:') . '</label>' . "\n";                    reset($cfg['AvailableCharsets']);                    echo '<select id="select_charset_of_file" name="charset_of_file" size="1">';                    foreach ($cfg['AvailableCharsets'] as $temp_charset) {                        echo '<option value="' . $temp_charset . '"';                        if (isset($_GET['charset_of_file']) && ($_GET['charset_of_file'] != $temp_charset)) {                            echo '';                        } elseif ((empty($cfg['Export']['charset']) && $temp_charset == 'utf-8')                          || $temp_charset == $cfg['Export']['charset']) {                            echo ' selected="selected"';                        }                        echo '>' . $temp_charset . '</option>';                    } // end foreach                    echo '</select></li>';                } // end if                ?>                 <?php                if (isset($_GET['compression'])) {                    $selected_compression = $_GET['compression'];                } elseif (isset($cfg['Export']['compression'])) {                    $selected_compression = $cfg['Export']['compression'];                } else {                    $selected_compression = "none";                }                // zip, gzip and bzip2 encode features                $is_zip  = ($cfg['ZipDump']  && @function_exists('gzcompress'));                $is_gzip = ($cfg['GZipDump'] && @function_exists('gzencode'));                $is_bzip2 = ($cfg['BZipDump'] && @function_exists('bzcompress'));                if ($is_zip || $is_gzip || $is_bzip2) { ?>                    <li>                    <label for="compression" class="desc"><?php echo __('Compression:'); ?></label>                    <select id="compression" name="compression">                        <option value="none"><?php echo __('None'); ?></option>                        <?php if ($is_zip) { ?>                            <option value="zip" <?php echo ($selected_compression == "zip") ? 'selected="selected"' : ''; ?>><?php echo __('zipped'); ?></option>                        <?php } if ($is_gzip) { ?>                            <option value="gzip" <?php echo ($selected_compression == "gzip") ? 'selected="selected"' : ''; ?>><?php echo __('gzipped'); ?></option>                        <?php } if ($is_bzip2) { ?>                            <option value="bzip2" <?php echo ($selected_compression == "bzip2") ? 'selected="selected"' : ''; ?>><?php echo __('bzipped'); ?></option>                        <?php } ?>                    </select>                    </li>                <?php } else { ?>                    <input type="hidden" name="compression" value="<?php echo $selected_compression; ?>" />                <?php } ?>             </ul>        </li>        <li><input type="radio" id="radio_view_as_text" name="output_format" value="astext" <?php echo (isset($_GET['repopulate']) || $GLOBALS['cfg']['Export']['asfile'] == false) ? 'checked="checked"' : '' ?>/><label for="radio_view_as_text"><?php echo __('View output as text'); ?></label></li>    </ul> </div><div class="exportoptions" id="format">    <h3><?php echo __('Format:'); ?></h3>    <?php echo PMA_pluginGetChoice('Export', 'what', $export_list, 'format'); ?></div><div class="exportoptions" id="format_specific_opts">    <h3><?php echo __('Format-specific options:'); ?></h3>    <p class="no_js_msg" id="scroll_to_options_msg"><?php echo __('Scroll down to fill in the options for the selected format and ignore the options for other formats.'); ?></p>    <?php echo PMA_pluginGetOptions('Export', $export_list); ?></div><?php if (function_exists('PMA_set_enc_form')) { ?><!-- Encoding setting form appended by Y.Kawada --><!-- Japanese encoding setting -->    <div class="exportoptions" id="kanji_encoding">        <h3><?php echo __('Encoding Conversion:'); ?></h3>        <?php echo PMA_set_enc_form('            '); ?>    </div><?php } ?><div class="exportoptions" id="submit"><?php PMA_externalBug(__('SQL compatibility mode'), 'mysql', '50027', '14515'); ?>    <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" /></div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This is in a separate script because it's called from a number of scripts * * @package PhpMyAdmin *//** * Checks whether given link is valid * * @param string $url URL to check * @return boolean True if string can be used as link */function PMA_checkLink($url){    $valid_starts = array(        'http://',        'https://',        './url.php?url=http%3A%2F%2F',        './url.php?url=https%3A%2F%2F',    );    if (defined('PMA_SETUP')) {        $valid_starts[] = '../Documentation.html';        $valid_starts[] = '?page=form&';    } else {        $valid_starts[] = './Documentation.html';    }    foreach ($valid_starts as $val) {        if (substr($url, 0, strlen($val)) == $val) {            return true;        }    }    return false;}/** * Callback function for replacing [a@link@target] links in bb code. * * @param array $found Array of preg matches * @return string Replaced string */function PMA_replaceBBLink($found){    /* Check for valid link */    if (! PMA_checkLink($found[1])) {        return $found[0];    }    /* a-z and _ allowed in target */    if (! empty($found[3]) && preg_match('/[^a-z_]+/i', $found[3])) {        return $found[0];    }    /* Construct target */    $target = '';    if (! empty($found[3])) {        $target = ' target="' . $found[3] . '"';    }    /* Construct url */    if (substr($found[1], 0, 4) == 'http') {        $url = PMA_linkURL($found[1]);    } else {        $url = $found[1];    }    return '<a href="' . $url . '"' . $target . '>';}/** * Sanitizes $message, taking into account our special codes * for formatting. * * If you want to include result in element attribute, you should escape it. * * Examples: * * <p><?php echo PMA_sanitize($foo); ?></p> * * <a title="<?php echo PMA_sanitize($foo, true); ?>">bar</a> * * @param string  $message the message * @param boolean $escape  whether to escape html in result * @param boolean $safe    whether string is safe (can keep < and > chars) * @return  string   the sanitized message */function PMA_sanitize($message, $escape = false, $safe = false){    if (!$safe) {        $message = strtr($message, array('<' => '&lt;', '>' => '&gt;'));    }    /* Interpret bb code */    $replace_pairs = array(        '[i]'       => '<em>',      // deprecated by em        '[/i]'      => '</em>',     // deprecated by em        '[em]'      => '<em>',        '[/em]'     => '</em>',        '[b]'       => '<strong>',  // deprecated by strong        '[/b]'      => '</strong>', // deprecated by strong        '[strong]'  => '<strong>',        '[/strong]' => '</strong>',        '[tt]'      => '<code>',    // deprecated by CODE or KBD        '[/tt]'     => '</code>',   // deprecated by CODE or KBD        '[code]'    => '<code>',        '[/code]'   => '</code>',        '[kbd]'     => '<kbd>',        '[/kbd]'    => '</kbd>',        '[br]'      => '<br />',        '[/a]'      => '</a>',        '[sup]'      => '<sup>',        '[/sup]'      => '</sup>',    );    /* Adjust links for setup, which lives in subfolder */    if (defined('PMA_SETUP')) {        $replace_pairs['[a@Documentation.html'] = '[a@../Documentation.html';    } else {        $replace_pairs['[a@Documentation.html'] = '[a@./Documentation.html';    }    $message = strtr($message, $replace_pairs);    /* Match links in bb code ([a@url@target], where @target is options) */    $pattern = '/\[a@([^]"@]*)(@([^]"]*))?\]/';    /* Find and replace all links */    $message = preg_replace_callback($pattern, 'PMA_replaceBBLink', $message);    /* Possibly escape result */    if ($escape) {        $message = htmlspecialchars($message);    }    return $message;}/** * Sanitize a filename by removing anything besides A-Za-z0-9_.- * * Intended usecase: *    When using a filename in a Content-Disposition header the value should not contain ; or " * * @param   string  The filename * * @return  string  the sanitized filename * */function PMA_sanitize_filename($filename) {    $filename = preg_replace('/[^A-Za-z0-9_.-]/', '_', $filename);    return $filename;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * forms frameset * *                                              or common.inc.php * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';// free the session file, for the other frames to be loadedsession_write_close();// Gets the host nameif (empty($HTTP_HOST)) {    if (PMA_getenv('HTTP_HOST')) {        $HTTP_HOST = PMA_getenv('HTTP_HOST');    } else {        $HTTP_HOST = '';    }}// purge querywindow history$cfgRelation = PMA_getRelationsParam();if ($GLOBALS['cfg']['QueryHistoryDB'] && $cfgRelation['historywork']) {    PMA_purgeHistory($GLOBALS['cfg']['Server']['user']);}unset($cfgRelation);/** * pass variables to child pages */$drops = array('lang', 'server', 'collation_connection',    'db', 'table');foreach ($drops as $each_drop) {    if (array_key_exists($each_drop, $_GET)) {        unset($_GET[$each_drop]);    }}unset($drops, $each_drop);if (! strlen($GLOBALS['db'])) {    $main_target = $GLOBALS['cfg']['DefaultTabServer'];} elseif (! strlen($GLOBALS['table'])) {    $_GET['db'] = $GLOBALS['db'];    $main_target = $GLOBALS['cfg']['DefaultTabDatabase'];} else {    $_GET['db'] = $GLOBALS['db'];    $_GET['table'] = $GLOBALS['table'];    $main_target = isset($GLOBALS['goto']) ? $GLOBALS['goto'] : $GLOBALS['cfg']['DefaultTabTable'];}$url_query = PMA_generate_common_url($_GET);if (isset($GLOBALS['target']) && is_string($GLOBALS['target']) && !empty($GLOBALS['target']) && in_array($GLOBALS['target'], $goto_whitelist)) {    $main_target = $GLOBALS['target'];}$main_target .= $url_query;$lang_iso_code = $GLOBALS['available_languages'][$GLOBALS['lang']][1];// start outputrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $lang_iso_code; ?>"    lang="<?php echo $lang_iso_code; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin <?php echo PMA_VERSION; ?> -    <?php echo htmlspecialchars($HTTP_HOST); ?></title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="robots" content="noindex,nofollow" /><script type="text/javascript">// <![CDATA[    // definitions used in common.js    var common_query = '<?php echo PMA_escapeJsString(PMA_generate_common_url('', '', '&'));?>';    var opendb_url = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['DefaultTabDatabase']); ?>';    var safari_browser = <?php echo PMA_USR_BROWSER_AGENT == 'SAFARI' ? 'true' : 'false' ?>;    var querywindow_height = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowHeight']); ?>;    var querywindow_width = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowWidth']); ?>;    var collation_connection = '<?php echo PMA_escapeJsString($GLOBALS['collation_connection']); ?>';    var lang = '<?php echo PMA_escapeJsString($GLOBALS['lang']); ?>';    var server = '<?php echo PMA_escapeJsString($GLOBALS['server']); ?>';    var table = '<?php echo PMA_escapeJsString($GLOBALS['table']); ?>';    var db    = '<?php echo PMA_escapeJsString($GLOBALS['db']); ?>';    var token = '<?php echo PMA_escapeJsString($_SESSION[' PMA_token ']); ?>';    var text_dir = '<?php echo PMA_escapeJsString($GLOBALS['text_dir']); ?>';    var pma_absolute_uri = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['PmaAbsoluteUri']); ?>';    var pma_text_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])); ?>';    var pma_text_left_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable'])); ?>';    // for content and navigation frames    var frame_content = 0;    var frame_navigation = 0;    function getFrames() {<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>        frame_content = window.frames[1];        frame_navigation = window.frames[0];<?php } else { ?>        frame_content = window.frames[0];        frame_navigation = window.frames[1];<?php } ?>    }    var onloadCnt = 0;    var onLoadHandler = window.onload;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(getFrames) != 'undefined' && typeof(getFrames) == 'function') {                getFrames();            }            onloadCnt++;        }    };// ]]></script><?phpecho PMA_includeJS('jquery/jquery-1.6.2.js');echo PMA_includeJS('update-location.js');echo PMA_includeJS('common.js');?></head><frameset cols="<?phpif ($GLOBALS['text_dir'] === 'rtl') {    echo '*,';}echo $GLOBALS['cfg']['NaviWidth'];if ($GLOBALS['text_dir'] === 'ltr') {    echo ',*';}?>" rows="*" id="mainFrameset">    <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <frame frameborder="0" id="frame_content"        src="<?php echo $main_target; ?>"        name="frame_content" />    <?php if ($GLOBALS['text_dir'] === 'rtl') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <noframes>        <body>            <p><?php echo __('phpMyAdmin is more friendly with a <b>frames-capable</b> browser.'); ?></p>        </body>    </noframes></frameset></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles miscellaneous db operations: *  - move/rename *  - copy *  - changing collation *  - changing comment *  - adding tables *  - viewing PDF schemas * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';// add blobstreaming library functionsrequire_once "./libraries/blobstreaming.lib.php";// add a javascript file for jQuery functions to handle Ajax actions// also add jQueryUI$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'db_operations.js';/** * Rename/move or copy database */if (strlen($db) && (! empty($db_rename) || ! empty($db_copy))) {    if (! empty($db_rename)) {        $move = true;    } else {        $move = false;    }    if (! isset($newname) || ! strlen($newname)) {        $message = PMA_Message::error(__('The database name is empty!'));    } else {        $sql_query = ''; // in case target db exists        $_error = false;        if ($move || (isset($create_database_before_copying) && $create_database_before_copying)) {            // lower_case_table_names=1 `DB` becomes `db`            if (!PMA_DRIZZLE) {                $lower_case_table_names = PMA_DBI_fetch_value('SHOW VARIABLES LIKE "lower_case_table_names"', 0, 1);                if ($lower_case_table_names === '1') {                    $newname = PMA_strtolower($newname);                }            }            $local_query = 'CREATE DATABASE ' . PMA_backquote($newname);            if (isset($db_collation)) {                $local_query .= ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);            }            $local_query .= ';';            $sql_query = $local_query;            // save the original db name because Tracker.class.php which            // may be called under PMA_DBI_query() changes $GLOBALS['db']            // for some statements, one of which being CREATE DATABASE            $original_db = $db;            PMA_DBI_query($local_query);            $db = $original_db;            unset($original_db);            // rebuild the database list because PMA_Table::moveCopy            // checks in this list if the target db exists            $GLOBALS['pma']->databases->build();        }        // here I don't use DELIMITER because it's not part of the        // language; I have to send each statement one by one        // to avoid selecting alternatively the current and new db        // we would need to modify the CREATE definitions to qualify        // the db name        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        if ($procedure_names) {            foreach ($procedure_names as $procedure_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($function_names) {            foreach ($function_names as $function_name) {                PMA_DBI_select_db($db);                $tmp_query = PMA_DBI_get_definition($db, 'FUNCTION', $function_name);                // collect for later display                $GLOBALS['sql_query'] .= "\n" . $tmp_query;                PMA_DBI_select_db($newname);                PMA_DBI_query($tmp_query);            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        $GLOBALS['sql_constraints_query_full_db'] = array();        $tables_full = PMA_DBI_get_tables_full($db);        $views = array();        // remove all foreign key constraints, otherwise we can get errors        include_once './libraries/export/sql.php';        foreach ($tables_full as $each_table => $tmp) {            $sql_constraints = '';            $sql_drop_foreign_keys = '';            $sql_structure = PMA_getTableDef($db, $each_table, "\n", '', false, false);            if ($move && ! empty($sql_drop_foreign_keys)) {                PMA_DBI_query($sql_drop_foreign_keys);            }            // keep the constraint we just dropped            if (! empty($sql_constraints)) {                $GLOBALS['sql_constraints_query_full_db'][] = $sql_constraints;            }        }        unset($sql_constraints, $sql_drop_foreign_keys, $sql_structure);        foreach ($tables_full as $each_table => $tmp) {            // to be able to rename a db containing views,            // first all the views are collected and a stand-in is created            // the real views are created after the tables            if (PMA_Table::isView($db, $each_table)) {                $views[] = $each_table;                // Create stand-in definition to resolve view dependencies                $sql_view_standin = PMA_getTableDefStandIn($db, $each_table, "\n");                PMA_DBI_select_db($newname);                PMA_DBI_query($sql_view_standin);                $GLOBALS['sql_query'] .= "\n" . $sql_view_standin;            }        }        foreach ($tables_full as $each_table => $tmp) {            // skip the views; we have creted stand-in definitions            if (PMA_Table::isView($db, $each_table)) {                continue;            }            $back = $sql_query;            $sql_query = '';            // value of $what for this table only            $this_what = $what;            // do not copy the data from a Merge table            // note: on the calling FORM, 'data' means 'structure and data'            if (PMA_Table::isMerge($db, $each_table)) {                if ($this_what == 'data') {                    $this_what = 'structure';                }                if ($this_what == 'dataonly') {                    $this_what = 'nocopy';                }            }            if ($this_what != 'nocopy') {                // keep the triggers from the original db+table                // (third param is empty because delimiters are only intended                //  for importing via the mysql client or our Import feature)                $triggers = PMA_DBI_get_triggers($db, $each_table, '');                if (! PMA_Table::moveCopy(                    $db, $each_table, $newname, $each_table,                    isset($this_what) ? $this_what : 'data', $move, 'db_copy')                ) {                    $_error = true;                    // $sql_query is filled by PMA_Table::moveCopy()                    $sql_query = $back . $sql_query;                    break;                }                // apply the triggers to the destination db+table                if ($triggers) {                    PMA_DBI_select_db($newname);                    foreach ($triggers as $trigger) {                        PMA_DBI_query($trigger['create']);                        $GLOBALS['sql_query'] .= "\n" . $trigger['create'] . ';';                    }                    unset($trigger);                }                unset($triggers);                // this does not apply to a rename operation                if (isset($GLOBALS['add_constraints']) && !empty($GLOBALS['sql_constraints_query'])) {                    $GLOBALS['sql_constraints_query_full_db'][] = $GLOBALS['sql_constraints_query'];                    unset($GLOBALS['sql_constraints_query']);                }            }            // $sql_query is filled by PMA_Table::moveCopy()            $sql_query = $back . $sql_query;        } // end (foreach)        unset($each_table);        // handle the views        if (! $_error) {            // temporarily force to add DROP IF EXIST to CREATE VIEW query,            // to remove stand-in VIEW that was created earlier            if (isset($GLOBALS['drop_if_exists'])) {                $temp_drop_if_exists = $GLOBALS['drop_if_exists'];            }            $GLOBALS['drop_if_exists'] = 'true';            foreach ($views as $view) {                if (! PMA_Table::moveCopy($db, $view, $newname, $view, 'structure', $move, 'db_copy')) {                    $_error = true;                    break;                }            }            unset($GLOBALS['drop_if_exists']);            if (isset($temp_drop_if_exists)) {                // restore previous value                $GLOBALS['drop_if_exists'] = $temp_drop_if_exists;                unset($temp_drop_if_exists);            }        }        unset($view, $views);        // now that all tables exist, create all the accumulated constraints        if (! $_error && count($GLOBALS['sql_constraints_query_full_db']) > 0) {            PMA_DBI_select_db($newname);            foreach ($GLOBALS['sql_constraints_query_full_db'] as $one_query) {                PMA_DBI_query($one_query);            // and prepare to display them                $GLOBALS['sql_query'] .= "\n" . $one_query;            }            unset($GLOBALS['sql_constraints_query_full_db'], $one_query);        }        if (!PMA_DRIZZLE && PMA_MYSQL_INT_VERSION >= 50100) {            // here DELIMITER is not used because it's not part of the            // language; each statement is sent one by one            // to avoid selecting alternatively the current and new db            // we would need to modify the CREATE definitions to qualify            // the db name            $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            if ($event_names) {                foreach ($event_names as $event_name) {                    PMA_DBI_select_db($db);                    $tmp_query = PMA_DBI_get_definition($db, 'EVENT', $event_name);                    // collect for later display                    $GLOBALS['sql_query'] .= "\n" . $tmp_query;                    PMA_DBI_select_db($newname);                    PMA_DBI_query($tmp_query);                }            }        }        // go back to current db, just in case        PMA_DBI_select_db($db);        // Duplicate the bookmarks for this db (done once for each db)        if (! $_error && $db != $newname) {            $get_fields = array('user', 'label', 'query');            $where_fields = array('dbase' => $db);            $new_fields = array('dbase' => $newname);            PMA_Table::duplicateInfo('bookmarkwork', 'bookmark', $get_fields,                $where_fields, $new_fields);        }        if (! $_error && $move) {            /**             * cleanup pmadb stuff for this db             */            include_once './libraries/relation_cleanup.lib.php';            PMA_relationsCleanupDatabase($db);            // if someday the RENAME DATABASE reappears, do not DROP            $local_query = 'DROP DATABASE ' . PMA_backquote($db) . ';';            $sql_query .= "\n" . $local_query;            PMA_DBI_query($local_query);            $message = PMA_Message::success(__('Database %s has been renamed to %s'));            $message->addParam($db);            $message->addParam($newname);        } elseif (! $_error) {            $message = PMA_Message::success(__('Database %s has been copied to %s'));            $message->addParam($db);            $message->addParam($newname);        }        $reload     = true;        /* Change database to be used */        if (! $_error && $move) {            $db = $newname;        } elseif (! $_error) {            if (isset($switch_to_new) && $switch_to_new == 'true') {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', 'true');                $db = $newname;            } else {                $GLOBALS['PMA_Config']->setCookie('pma_switch_to_new', '');            }        }        if ($_error && ! isset($message)) {            $message = PMA_Message::error();        }    }    /**     * Database has been successfully renamed/moved.  If in an Ajax request,     * generate the output with {@link PMA_ajaxResponse} and exit     */    if ( $GLOBALS['is_ajax_request'] == true) {        $extra_data['newname'] = $newname;        $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);        PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);    };}/** * Settings for relations stuff */$cfgRelation = PMA_getRelationsParam();/** * Check if comments were updated * (must be done before displaying the menu tabs) */if (isset($_REQUEST['comment'])) {    PMA_setDbComment($db, $comment);}/** * Prepares the tables list if the user where not redirected to this script * because there is no table in the database ($is_info is true) */if (empty($is_info)) {    include './libraries/db_common.inc.php';    $url_query .= '&amp;goto=db_operations.php';    // Gets the database structure    $sub_part = '_structure';    include './libraries/db_info.inc.php';    echo "\n";    if (isset($message)) {        PMA_showMessage($message, $sql_query);        unset($message);    }}$db_collation = PMA_getDbCollation($db);$is_information_schema = PMA_is_system_schema($db);if (!$is_information_schema) {    if ($cfgRelation['commwork']) {        /**         * database comment         */        ?>    <div class="operations_half_width">    <form method="post" action="db_operations.php">    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>        <?php        if ($cfg['PropertiesIconic']) {            echo '<img class="icon ic_b_comment" src="themes/dot.gif" alt="" />';        }        echo __('Database comment: ');        ?>        </legend>        <input type="text" name="comment" class="textfield" size="30"            value="<?php            echo htmlspecialchars(PMA_getDBComment($db)); ?>" />    </fieldset>    <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>        <?php    }    ?>    <div class="operations_half_width">    <?php include './libraries/display_create_table.lib.php'; ?>    </div>    <?php    /**     * rename database     */if ($db != 'mysql') {    ?>        <div class="operations_half_width">        <form id="rename_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">        <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }        ?>    <input type="hidden" name="what" value="data" />    <input type="hidden" name="db_rename" value="true" />    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Rename database to') . ':';    ?>        </legend>        <input id="new_db_name" type="text" name="newname" size="30" class="textfield" value="" />    </fieldset>    <fieldset class="tblFooters">        <input id="rename_db_input" type="submit" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div><?php} // end if// Drop link if allowed// Don't even try to drop information_schema. You won't be able to. Believe me. You won't.// Don't allow to easily drop mysql database, RFE #1327514.if (($is_superuser || $GLOBALS['cfg']['AllowUserDropDatabase'])        && !$db_is_information_schema        && (PMA_DRIZZLE || $db != 'mysql')) {?><div class="operations_half_width"><fieldset class="caution"> <legend><?phpif ($cfg['PropertiesIconic']) {    echo PMA_getImage('b_deltbl.png');}echo __('Remove database');?></legend><ul><?php    $this_sql_query = 'DROP DATABASE ' . PMA_backquote($GLOBALS['db']);    $this_url_params = array(            'sql_query' => $this_sql_query,            'back' => 'db_operations.php',            'goto' => 'main.php',            'reload' => '1',            'purge' => '1',            'message_to_show' => sprintf(__('Database %s has been dropped.'), htmlspecialchars(PMA_backquote($db))),            'db' => null,        );    ?>        <li><a href="sql.php<?php echo PMA_generate_common_url($this_url_params); ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? 'id="drop_db_anchor"' : ''); ?>>            <?php echo __('Drop the database (DROP)'); ?></a>        <?php echo PMA_showMySQLDocu('SQL-Syntax', 'DROP_DATABASE'); ?>    </li></ul></fieldset></div><?php } ?>    <?php    /**     * Copy database     */    ?>        <div class="operations_half_width clearfloat">        <form id="copy_db_form" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : ''); ?>method="post" action="db_operations.php"        onsubmit="return emptyFormElements(this, 'newname')">    <?php    if (isset($db_collation)) {        echo '<input type="hidden" name="db_collation" value="' . $db_collation            .'" />' . "\n";    }    echo '<input type="hidden" name="db_copy" value="true" />' . "\n";    echo PMA_generate_common_hidden_inputs($db);    ?>    <fieldset>        <legend>    <?php    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Copy database to') . ':';    $drop_clause = 'DROP TABLE / DROP VIEW';    ?>        </legend>        <input type="text" name="newname" size="30" class="textfield" value="" /><br /><?php        $choices = array(            'structure' => __('Structure only'),            'data'      => __('Structure and data'),            'dataonly'  => __('Data only'));        PMA_display_html_radio('what', $choices, 'data', true);        unset($choices);?>        <input type="checkbox" name="create_database_before_copying" value="1"            id="checkbox_create_database_before_copying"            checked="checked" />        <label for="checkbox_create_database_before_copying">            <?php echo __('CREATE DATABASE before copying'); ?></label><br />        <input type="checkbox" name="drop_if_exists" value="true"            id="checkbox_drop" />        <label for="checkbox_drop"><?php echo sprintf(__('Add %s'), $drop_clause); ?></label><br />        <input type="checkbox" name="sql_auto_increment" value="1" checked="checked"            id="checkbox_auto_increment" />        <label for="checkbox_auto_increment">            <?php echo __('Add AUTO_INCREMENT value'); ?></label><br />        <input type="checkbox" name="add_constraints" value="1"            id="checkbox_constraints" />        <label for="checkbox_constraints">            <?php echo __('Add constraints'); ?></label><br />    <?php    unset($drop_clause);    if (isset($_COOKIE) && isset($_COOKIE['pma_switch_to_new'])      && $_COOKIE['pma_switch_to_new'] == 'true') {        $pma_switch_to_new = 'true';    }    ?>        <input type="checkbox" name="switch_to_new" value="true"            id="checkbox_switch"            <?php echo ((isset($pma_switch_to_new) && $pma_switch_to_new == 'true') ? ' checked="checked"' : ''); ?>            />        <label for="checkbox_switch"><?php echo __('Switch to copied database'); ?></label>    </fieldset>    <fieldset class="tblFooters">        <input type="submit" name="submit_copy" value="<?php echo __('Go'); ?>" />    </fieldset>    </form>    </div>    <?php    /**     * Change database charset     */    echo '<div class="operations_half_width"><form id="change_db_charset_form" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' class="ajax" ';    }    echo 'method="post" action="./db_operations.php">'       . PMA_generate_common_hidden_inputs($db, $table)       . '<fieldset>' . "\n"       . '    <legend>';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('s_asci.png');    }    echo '    <label for="select_db_collation">' . __('Collation') . ':</label>' . "\n"       . '    </legend>' . "\n"       . PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION,            'db_collation', 'select_db_collation', $db_collation, false, 3)       . '</fieldset>'       . '<fieldset class="tblFooters">'       . '    <input type="submit" name="submitcollation"'       . ' value="' . __('Go') . '" />' . "\n"       . '</fieldset>' . "\n"       . '</form></div>' . "\n";    if ($num_tables > 0      && ! $cfgRelation['allworks'] && $cfg['PmaNoRelation_DisableWarning'] == false) {        $message = PMA_Message::notice(__('The phpMyAdmin configuration storage has been deactivated. To find out why click %shere%s.'));        $message->addParam('<a href="' . $cfg['PmaAbsoluteUri'] . 'chk_rel.php?' . $url_query . '">', false);        $message->addParam('</a>', false);        /* Show error if user has configured something, notice elsewhere */        if (!empty($cfg['Servers'][$server]['pmadb'])) {            $message->isError(true);        }        echo '<div class="operations_full_width">';        $message->display();        echo '</div>';    } // end if} // end if (!$is_information_schema)// not sure about displaying the PDF dialog in case db is information_schemaif ($cfgRelation['pdfwork'] && $num_tables > 0) { ?>    <!-- Work on PDF Pages -->    <?php    // We only show this if we find something in the new pdf_pages table    $test_query = '         SELECT *           FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages']) . '          WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';    $test_rs    = PMA_query_as_controluser($test_query, null, PMA_DBI_QUERY_STORE);    /*     * Export Relational Schema View     */    echo '<div class="operations_full_width"><fieldset><a href="schema_edit.php?' . $url_query . '">';    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_edit.png');    }    echo __('Edit or export relational schema') . '</a></fieldset></div>';} // end if/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';PMA_checkParameters(array('db', 'table'));/** * Prepares links */require_once './libraries/bookmark.lib.php';/** * Set parameters for links */$url_params = array();$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Displays headers */require_once './libraries/header.inc.php';/** * Ensure that $db_is_information_schema is not null */if (! isset($db_is_information_schema)) {    $db_is_information_schema = false;}/** * Displays links */$tabs = array();$tabs['browse']['icon'] = 'b_browse.png';$tabs['browse']['text'] = __('Browse');$tabs['browse']['link'] = 'sql.php';$tabs['browse']['args']['pos'] = 0;$tabs['structure']['icon'] = 'b_props.png';$tabs['structure']['link'] = 'tbl_structure.php';$tabs['structure']['text'] = __('Structure');$tabs['sql']['icon'] = 'b_sql.png';$tabs['sql']['link'] = 'tbl_sql.php';$tabs['sql']['text'] = __('SQL');$tabs['search']['icon'] = 'b_search.png';$tabs['search']['text'] = __('Search');$tabs['search']['link'] = 'tbl_select.php';if (!$db_is_information_schema) {    $tabs['insert']['icon'] = 'b_insrow.png';    $tabs['insert']['link'] = 'tbl_change.php';    $tabs['insert']['text'] = __('Insert');}$tabs['export']['icon'] = 'b_tblexport.png';$tabs['export']['link'] = 'tbl_export.php';$tabs['export']['args']['single_table'] = 'true';$tabs['export']['text'] = __('Export');/** * Don't display "Import" and "Operations" * for views and information_schema */if (! $tbl_is_view && !$db_is_information_schema) {    $tabs['import']['icon'] = 'b_tblimport.png';    $tabs['import']['link'] = 'tbl_import.php';    $tabs['import']['text'] = __('Import');    $tabs['operation']['icon'] = 'b_tblops.png';    $tabs['operation']['link'] = 'tbl_operations.php';    $tabs['operation']['text'] = __('Operations');}if (PMA_Tracker::isActive()) {    $tabs['tracking']['icon'] = 'eye.png';    $tabs['tracking']['text'] = __('Tracking');    $tabs['tracking']['link'] = 'tbl_tracking.php';}if (!$db_is_information_schema && !PMA_DRIZZLE) {    if (PMA_currentUserHasPrivilege('TRIGGER', $db, $table) && ! PMA_Table::isView($db, $table)) {        $tabs['triggers']['link'] = 'tbl_triggers.php';        $tabs['triggers']['text'] = __('Triggers');        $tabs['triggers']['icon'] = 'b_triggers.png';    }}/** * Views support a limited number of operations */if ($tbl_is_view && !$db_is_information_schema) {    $tabs['operation']['icon'] = 'b_tblops.png';    $tabs['operation']['link'] = 'view_operations.php';    $tabs['operation']['text'] = __('Operations');}if ($table_info_num_rows == 0 && !$tbl_is_view) {    $tabs['browse']['warning'] = __('Table seems to be empty!');    $tabs['search']['warning'] = __('Table seems to be empty!');}echo PMA_generate_html_tabs($tabs, $url_params);unset($tabs);if (PMA_Tracker::isActive() and PMA_Tracker::isTracked($GLOBALS["db"], $GLOBALS["table"])) {    $msg = PMA_Message::notice('<a href="tbl_tracking.php?'.$url_query.'">'.sprintf(__('Tracking of %s.%s is activated.'), htmlspecialchars($GLOBALS["db"]), htmlspecialchars($GLOBALS["table"])).'</a>');    $msg->display();}/** * Displays a message */if (!empty($message)) {    PMA_showMessage($message);    unset($message);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * query by example the whole database * * @package PhpMyAdmin *//** * requirements */require_once './libraries/common.inc.php';/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * A query has been submitted -> (maybe) execute it */$message_to_display = false;if (isset($_REQUEST['submit_sql']) && ! empty($sql_query)) {    if (! preg_match('@^SELECT@i', $sql_query)) {        $message_to_display = true;    } else {        $goto      = 'db_sql.php';        include './sql.php';        exit;    }}$sub_part  = '_qbe';require './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_qbe.php';$url_params['goto'] = 'db_qbe.php';require './libraries/db_info.inc.php';if ($message_to_display) {    PMA_Message::error(__('You have to choose at least one column to display'))->display();}unset($message_to_display);/** * Initialize some variables */$col_cnt = PMA_ifSetOr($_REQUEST['col_cnt'], 3, 'numeric');$add_col = PMA_ifSetOr($_REQUEST['add_col'], 0, 'numeric');$add_row = PMA_ifSetOr($_REQUEST['add_row'], 0, 'numeric');$rows    = PMA_ifSetOr($_REQUEST['rows'],    0, 'numeric');$ins_col = PMA_ifSetOr($_REQUEST['ins_col'], null, 'array');$del_col = PMA_ifSetOr($_REQUEST['del_col'], null, 'array');$prev_criteria = isset($_REQUEST['prev_criteria'])    ? $_REQUEST['prev_criteria']    : array();$criteria = isset($_REQUEST['criteria'])    ? $_REQUEST['criteria']    : array_fill(0, $col_cnt, '');$ins_row = isset($_REQUEST['ins_row'])    ? $_REQUEST['ins_row']    : array_fill(0, $col_cnt, '');$del_row = isset($_REQUEST['del_row'])    ? $_REQUEST['del_row']    : array_fill(0, $col_cnt, '');$and_or_row = isset($_REQUEST['and_or_row'])    ? $_REQUEST['and_or_row']    : array_fill(0, $col_cnt, '');$and_or_col = isset($_REQUEST['and_or_col'])    ? $_REQUEST['and_or_col']    : array_fill(0, $col_cnt, '');// minimum width$form_column_width = 12;$col = max($col_cnt + $add_col, 0);$row = max($rows + $add_row, 0);// The tables list sent by a previously submitted formif (PMA_isValid($_REQUEST['TableList'], 'array')) {    foreach ($_REQUEST['TableList'] as $each_table) {        $tbl_names[$each_table] = ' selected="selected"';    }} // end if// this was a work in progress, deactivated for now//$columns = PMA_DBI_get_columns_full($GLOBALS['db']);//$tables  = PMA_DBI_get_columns_full($GLOBALS['db']);/** * Prepares the form */$tbl_result     = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($db) . ';', null, PMA_DBI_QUERY_STORE);$tbl_result_cnt = PMA_DBI_num_rows($tbl_result);if (0 == $tbl_result_cnt) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;}// The tables list gets from MySQLwhile (list($tbl) = PMA_DBI_fetch_row($tbl_result)) {    $fld_results = PMA_DBI_get_columns($db, $tbl);    if (empty($tbl_names[$tbl]) && !empty($_REQUEST['TableList'])) {        $tbl_names[$tbl] = '';    } else {        $tbl_names[$tbl] = ' selected="selected"';    } //  end if    // The fields list per selected tables    if ($tbl_names[$tbl] == ' selected="selected"') {        $each_table = PMA_backquote($tbl);        $fld[]  = $each_table . '.*';        foreach ($fld_results as $each_field) {            $each_field = $each_table . '.' . PMA_backquote($each_field['Field']);            $fld[] = $each_field;            // increase the width if necessary            $form_column_width = max(strlen($each_field), $form_column_width);        } // end foreach    } // end if} // end whilePMA_DBI_free_result($tbl_result);// largest width found$realwidth = $form_column_width . 'ex';/** * Displays the Query by example form *//** * Enter description here... * * @param array     $columns * @param integer   $column_number * @param string    $selected */function showColumnSelectCell($columns, $column_number, $selected = ''){    ?>    <td align="center">        <select name="Field[<?php echo $column_number; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    foreach ($columns as $column) {        if ($column === $selected) {            $sel = ' selected="selected"';        } else {            $sel = '';        }        echo '<option value="' . htmlspecialchars($column) . '"' . $sel . '>'            . str_replace(' ', '&nbsp;', htmlspecialchars($column)) . '</option>' . "\n";    }    ?>        </select>    </td>    <?php}?><?php if (!empty($tab_designer['link'])) {        $tab_designer['link'] = htmlentities($tab_designer['link']);        $tab_designer['link'] = $tab_designer['link'] . PMA_generate_common_url($url_params);        if (! empty($tab_designer['args'])) {            foreach ($tab_designer['args'] as $param => $value) {                $tab_designer['link'] .= PMA_get_arg_separator('html') . urlencode($param) . '='                    . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    if (isset($tab_designer['link'])) {?><div id="visual_builder_anchor" class="notice hide">    <span id="footnote_1"><?php printf(__('Switch to %svisual builder%s'), ' <a href="' . $tab_designer['link'] . PMA_get_arg_separator('html') . 'query=1">', '</a>'); ?>    </span></div><?php    }?><form action="db_qbe.php" method="post"><fieldset><table class="data" style="width: 100%;"><tr class="odd noclick">    <th><?php echo __('Column'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {        showColumnSelectCell($fld, $z);        $z++;    }    if (! empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    $selected = '';    if (isset($Field[$x])) {        $selected = $Field[$x];        $curField[$z] = $Field[$x];    }    showColumnSelectCell($fld, $z, $selected);    $z++;} // end for?></tr><!-- Sort row --><tr class="even noclick">    <th><?php echo __('Sort'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>            <option value="ASC"><?php echo __('Ascending'); ?></option>            <option value="DESC"><?php echo __('Descending'); ?></option>        </select>    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    ?>    <td align="center">        <select style="width: <?php echo $realwidth; ?>" name="Sort[<?php echo $z; ?>]" size="1">            <option value="">&nbsp;</option>    <?php    echo "\n";    // If they have chosen all fields using the * selector,    // then sorting is not available    // Fix for Bug #570698    if (isset($Sort[$x]) && isset($Field[$x])     && substr($Field[$x], -2) == '.*') {        $Sort[$x] = '';    } //end if    if (isset($Sort[$x]) && $Sort[$x] == 'ASC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="ASC"' . $sel . '>' . __('Ascending') . '</option>' . "\n";    if (isset($Sort[$x]) && $Sort[$x] == 'DESC') {        $curSort[$z] = $Sort[$x];        $sel         = ' selected="selected"';    } else {        $sel         = '';    } // end if    echo '                ';    echo '<option value="DESC"' . $sel . '>' . __('Descending') . '</option>' . "\n";    ?>        </select>    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Show row --><tr class="odd noclick">    <th><?php echo __('Show'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($Show[$x])) {        $checked     = ' checked="checked"';        $curShow[$z] = $Show[$x];    } else {        $checked     =  '';    }    ?>    <td align="center">        <input type="checkbox" name="Show[<?php echo $z; ?>]"<?php echo $checked; ?> />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- Criteria row --><tr class="even noclick">    <th><?php echo __('Criteria'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        ?>    <td align="center">        <input type="text" name="criteria[<?php echo $z; ?>]" value="" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($criteria[$x])) {        $tmp_criteria = $criteria[$x];    }    if ((empty($prev_criteria) || ! isset($prev_criteria[$x]))        || $prev_criteria[$x] != htmlspecialchars($tmp_criteria)) {        $curCriteria[$z]   = $tmp_criteria;    } else {        $curCriteria[$z]   = $prev_criteria[$x];    }    ?>    <td align="center">        <input type="hidden" name="prev_criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($curCriteria[$z]); ?>" />        <input type="text" name="criteria[<?php echo $z; ?>]" value="<?php echo htmlspecialchars($tmp_criteria); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>    <?php    $z++;    echo "\n";} // end for?></tr><!-- And/Or columns and rows --><?php$w = 0;$odd_row = true;for ($y = 0; $y <= $row; $y++) {    if (isset($ins_row[$y]) && $ins_row[$y] == 'on') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table cellpadding="0" cellspacing="0" border="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />                &nbsp;            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />                &nbsp;            </td>        </tr>        </table>    </td>        <?php        $z = 0;        for ($x = 0; $x < $col; $x++) {            if (isset($ins_col[$x]) && $ins_col[$x] == 'on') {                echo "\n";                $or = 'Or' . $w . '[' . $z . ']';                ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>                <?php                $z++;            } // end if            if (isset($del_col[$x]) && $del_col[$x] == 'on') {                continue;            }            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end for        $w++;        echo "\n";        ?></tr>        <?php        $odd_row =! $odd_row;    } // end if    if (isset($del_row[$y]) && $del_row[$y] == 'on') {        continue;    }    if (isset($and_or_row[$y])) {        $curAndOrRow[$w] = $and_or_row[$y];    }    if (isset($and_or_row[$y]) && $and_or_row[$y] == 'and') {        $chk['and'] =  ' checked="checked"';        $chk['or']  =  '';    } else {        $chk['or']  =  ' checked="checked"';        $chk['and'] =  '';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">        <!-- Row controls -->        <table border="0" cellpadding="0" cellspacing="0">        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Ins'); ?>:</small>                <input type="checkbox" name="ins_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('And'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="and"<?php echo $chk['and']; ?> />            </td>        </tr>        <tr>            <td align="<?php echo $cell_align_right; ?>" nowrap="nowrap">                <small><?php echo __('Del'); ?>:</small>                <input type="checkbox" name="del_row[<?php echo $w; ?>]" />            </td>            <td align="<?php echo $cell_align_right; ?>">                <strong><?php echo __('Or'); ?>:</strong>            </td>            <td>                <input type="radio" name="and_or_row[<?php echo $w; ?>]" value="or"<?php echo $chk['or']; ?> />            </td>        </tr>        </table>    </td>    <?php    $z = 0;    for ($x = 0; $x < $col; $x++) {        if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {            echo "\n";            $or = 'Or' . $w . '[' . $z . ']';            ?>    <td align="center">        <input type="text" name="Or<?php echo $or; ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>            <?php            $z++;        } // end if        if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {            continue;        }        echo "\n";        $or = 'Or' . $y;        if (! isset(${$or})) {            ${$or} = '';        }        if (!empty(${$or}) && isset(${$or}[$x])) {            $tmp_or = ${$or}[$x];        } else {            $tmp_or     = '';        }        ?>    <td align="center">        <input type="text" name="Or<?php echo $w . '[' . $z . ']'; ?>" value="<?php echo htmlspecialchars($tmp_or); ?>" class="textfield" style="width: <?php echo $realwidth; ?>" size="20" />    </td>        <?php        if (!empty(${$or}) && isset(${$or}[$x])) {            ${'cur' . $or}[$z] = ${$or}[$x];        }        $z++;    } // end for    $w++;    echo "\n";    ?></tr>    <?php    echo "\n";    $odd_row =! $odd_row;} // end for?><!-- Modify columns --><tr class="even noclick">    <th><?php echo __('Modify'); ?>:</th><?php$z = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($ins_col) && isset($ins_col[$x]) && $ins_col[$x] == 'on') {        $curAndOrCol[$z] = $and_or_col[$y];        if ($and_or_col[$z] == 'or') {            $chk['or']  = ' checked="checked"';            $chk['and'] = '';        } else {            $chk['and'] = ' checked="checked"';            $chk['or']  = '';        }        ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>        <?php        $z++;    } // end if    echo "\n";    if (!empty($del_col) && isset($del_col[$x]) && $del_col[$x] == 'on') {        continue;    }    if (isset($and_or_col[$y])) {        $curAndOrCol[$z] = $and_or_col[$y];    }    if (isset($and_or_col[$z]) && $and_or_col[$z] == 'or') {        $chk['or']  = ' checked="checked"';        $chk['and'] = '';    } else {        $chk['and'] = ' checked="checked"';        $chk['or']  = '';    }    ?>    <td align="center">        <strong><?php echo __('Or'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="or"<?php echo $chk['or']; ?> />        &nbsp;&nbsp;<strong><?php echo __('And'); ?>:</strong>        <input type="radio" name="and_or_col[<?php echo $z; ?>]" value="and"<?php echo $chk['and']; ?> />        <br />        <?php echo __('Ins') . "\n"; ?>        <input type="checkbox" name="ins_col[<?php echo $z; ?>]" />        &nbsp;&nbsp;<?php echo __('Del') . "\n"; ?>        <input type="checkbox" name="del_col[<?php echo $z; ?>]" />    </td>    <?php    $z++;    echo "\n";} // end for?>    </tr></table><!-- Other controls --><?php$w--;$url_params['db']       = $db;$url_params['col_cnt']  = $z;$url_params['rows']     = $w;echo PMA_generate_common_hidden_inputs($url_params);?></fieldset><fieldset class="tblFooters"><table border="0" cellpadding="2" cellspacing="1"><tr>    <td nowrap="nowrap">        <?php echo __('Add/Delete criteria rows'); ?>:        <select size="1" name="add_row">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <td nowrap="nowrap"><?php echo __('Add/Delete columns'); ?>:        <select size="1" name="add_col">            <option value="-3">-3</option>            <option value="-2">-2</option>            <option value="-1">-1</option>            <option value="0" selected="selected">0</option>            <option value="1">1</option>            <option value="2">2</option>            <option value="3">3</option>        </select>    </td>    <td width="10">&nbsp;</td>    <!-- Generates a query -->    <td><input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" /></td></tr></table></fieldset><table><tr><td>        <fieldset>            <legend><?php echo __('Use Tables'); ?></legend><?php$options = '';$numTableListOptions = 0;foreach ($tbl_names as $key => $val) {    $options .= '                        ';    $options .= '<option value="' . htmlspecialchars($key) . '"' . $val . '>'        . str_replace(' ', '&nbsp;', htmlspecialchars($key)) . '</option>' . "\n";    $numTableListOptions++;}?>            <select name="TableList[]" multiple="multiple" id="listTable"                size="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>">                <?php echo $options; ?>            </select>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="modify" value="<?php echo __('Update Query'); ?>" />        </fieldset>    </td>    <td width="20">&nbsp;</td>    <td>        <fieldset>            <legend><?php echo sprintf(__('SQL query on database <b>%s</b>:'), PMA_getDbLink($db)); ?>                </legend>            <textarea cols="80" name="sql_query" id="textSqlquery"                rows="<?php echo ($numTableListOptions > 30) ? '15' : '7'; ?>"                dir="<?php echo $text_dir; ?>"><?php// 1. SELECT$last_select = 0;if (! isset($qry_select)) {    $qry_select         = '';}for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && isset($curShow[$x]) && $curShow[$x] == 'on') {        if ($last_select) {            $qry_select .=  ', ';        }        $qry_select     .= $curField[$x];        $last_select    = 1;    }} // end forif (!empty($qry_select)) {    echo  'SELECT ' . htmlspecialchars($qry_select) . "\n";}// 2. FROM// Create LEFT JOINS out of Relations// If we can use Relations we could make some left joins.// First find out if relations are available in this database.// First we need the really needed Tables - those in TableList might still be// all Tables.if (isset($Field) && count($Field) > 0) {    // Initialize some variables    $tab_all    = array();    $col_all    = array();    $tab_wher   = array();    $tab_know   = array();    $tab_left   = array();    $col_where  = array();    $fromclause = '';    // We only start this if we have fields, otherwise it would be dumb    foreach ($Field as $value) {        $parts             = explode('.', $value);        if (!empty($parts[0]) && !empty($parts[1])) {            $tab_raw       = $parts[0];            $tab           = str_replace('`', '', $tab_raw);            $tab_all[$tab] = $tab;            $col_raw       = $parts[1];            $col_all[]     = $tab . '.' . str_replace('`', '', $col_raw);         }    } // end while    // Check 'where' clauses    if ($cfgRelation['relwork'] && count($tab_all) > 0) {        // Now we need all tables that we have in the where clause        $crit_cnt         = count($criteria);        for ($x = 0; $x < $crit_cnt; $x++) {            $curr_tab     = explode('.', $Field[$x]);            if (!empty($curr_tab[0]) && !empty($curr_tab[1])) {                $tab_raw  = $curr_tab[0];                $tab      = str_replace('`', '', $tab_raw);                $col_raw  = $curr_tab[1];                $col1     = str_replace('`', '', $col_raw);                $col1     = $tab . '.' . $col1;                // Now we know that our array has the same numbers as $criteria                // we can check which of our columns has a where clause                if (!empty($criteria[$x])) {                    if (substr($criteria[$x], 0, 1) == '=' || stristr($criteria[$x], 'is')) {                        $col_where[$col] = $col1;                        $tab_wher[$tab]  = $tab;                    }                } // end if            } // end if        } // end for        // Cleans temp vars w/o further use        unset($tab_raw);        unset($col_raw);        unset($col1);        if (count($tab_wher) == 1) {            // If there is exactly one column that has a decent where-clause            // we will just use this            $master = key($tab_wher);        } else {            // Now let's find out which of the tables has an index            // (When the control user is the same as the normal user            // because he is using one of his databases as pmadb,            // the last db selected is not always the one where we need to work)            PMA_DBI_select_db($db);            foreach ($tab_all as $tab) {                $indexes = PMA_DBI_get_table_indexes($db, $tab);                foreach ($indexes as $ind) {                    $col1 = $tab . '.' . $ind['Column_name'];                    if (isset($col_all[$col1])) {                        if ($ind['Non_unique'] == 0) {                            if (isset($col_where[$col1])) {                                $col_unique[$col1] = 'Y';                            } else {                                $col_unique[$col1] = 'N';                            }                        } else {                            if (isset($col_where[$col1])) {                                $col_index[$col1] = 'Y';                            } else {                                $col_index[$col1] = 'N';                            }                        }                    }                } // end while (each col of tab)            } // end while (each tab)            // now we want to find the best.            if (isset($col_unique) && count($col_unique) > 0) {                $col_cand = $col_unique;                $needsort = 1;            } elseif (isset($col_index) && count($col_index) > 0) {                $col_cand = $col_index;                $needsort = 1;            } elseif (isset($col_where) && count($col_where) > 0) {                $col_cand = $tab_wher;                $needsort = 0;            } else {                $col_cand = $tab_all;                $needsort = 0;            }            // If we came up with $col_unique (very good) or $col_index (still            // good) as $col_cand we want to check if we have any 'Y' there            // (that would mean that they were also found in the whereclauses            // which would be great). if yes, we take only those            if ($needsort == 1) {                foreach ($col_cand as $col => $is_where) {                    $tab           = explode('.', $col);                    $tab           = $tab[0];                    if ($is_where == 'Y') {                        $vg[$col]  = $tab;                    } else {                        $sg[$col]  = $tab;                    }                }                if (isset($vg)) {                    $col_cand      = $vg;                    // Candidates restricted in index+where                } else {                    $col_cand      = $sg;                    // None of the candidates where in a where-clause                }            }            // If our array of candidates has more than one member we'll just            // find the smallest table.            // Of course the actual query would be faster if we check for            // the Criteria which gives the smallest result set in its table,            // but it would take too much time to check this            if (count($col_cand) > 1) {                // Of course we only want to check each table once                $checked_tables = $col_cand;                foreach ($col_cand as $tab) {                    if ($checked_tables[$tab] != 1) {                        $tsize[$tab] = PMA_Table::countRecords($db, $tab, false);                        $checked_tables[$tab] = 1;                    }                    $csize[$tab] = $tsize[$tab];                }                asort($csize);                reset($csize);                $master = key($csize); // Smallest            } else {                reset($col_cand);                $master = current($col_cand); // Only one single candidate            }        } // end if (exactly one where clause)        $tab_left = $tab_all;        unset($tab_left[$master]);        $tab_know[$master] = $master;        $run   = 0;        $emerg = '';        while (count($tab_left) > 0) {            if ($run % 2 == 0) {                PMA_getRelatives('master');            } else {                PMA_getRelatives('foreign');            }            $run++;            if ($run > 5) {                foreach ($tab_left as $tab) {                    $emerg .= ', ' . PMA_backquote($tab);                    unset($tab_left[$tab]);                }            }        } // end while        $qry_from = PMA_backquote($master) . $emerg . $fromclause;    } // end if ($cfgRelation['relwork'] && count($tab_all) > 0)} // end count($Field) > 0// In case relations are not defined, just generate the FROM clause// from the list of tables, however we don't generate any JOINif (empty($qry_from) && isset($tab_all)) {    $qry_from = implode(', ', $tab_all);}// Now let's see what we gotif (!empty($qry_from)) {    echo 'FROM ' . htmlspecialchars($qry_from) . "\n";}// 3. WHERE$qry_where          = '';$criteria_cnt       = 0;for ($x = 0; $x < $col; $x++) {    if (!empty($curField[$x]) && !empty($curCriteria[$x]) && $x && isset($last_where) && isset($curAndOrCol)) {        $qry_where  .= ' ' . strtoupper($curAndOrCol[$last_where]) . ' ';    }    if (!empty($curField[$x]) && !empty($curCriteria[$x])) {        $qry_where  .= '(' . $curField[$x] . ' ' . $curCriteria[$x] . ')';        $last_where = $x;        $criteria_cnt++;    }} // end forif ($criteria_cnt > 1) {    $qry_where      = '(' . $qry_where . ')';}// OR rows ${'cur' . $or}[$x]if (! isset($curAndOrRow)) {    $curAndOrRow          = array();}for ($y = 0; $y <= $row; $y++) {    $criteria_cnt         = 0;    $qry_orwhere          = '';    $last_orwhere         = '';    for ($x = 0; $x < $col; $x++) {        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x]) && $x) {            $qry_orwhere  .= ' ' . strtoupper($curAndOrCol[$last_orwhere]) . ' ';        }        if (!empty($curField[$x]) && !empty(${'curOr' . $y}[$x])) {            $qry_orwhere  .= '(' . $curField[$x]                          .  ' '                          .  ${'curOr' . $y}[$x]                          .  ')';            $last_orwhere = $x;            $criteria_cnt++;        }    } // end for    if ($criteria_cnt > 1) {        $qry_orwhere      = '(' . $qry_orwhere . ')';    }    if (!empty($qry_orwhere)) {        $qry_where .= "\n"                   .  strtoupper(isset($curAndOrRow[$y]) ? $curAndOrRow[$y] . ' ' : '')                   .  $qry_orwhere;    } // end if} // end forif (!empty($qry_where) && $qry_where != '()') {    echo 'WHERE ' . htmlspecialchars($qry_where) . "\n";} // end if// 4. ORDER BY$last_orderby = 0;if (! isset($qry_orderby)) {    $qry_orderby      = '';}for ($x = 0; $x < $col; $x++) {    if ($last_orderby && $x && !empty($curField[$x]) && !empty($curSort[$x])) {        $qry_orderby  .=  ', ';    }    if (!empty($curField[$x]) && !empty($curSort[$x])) {        // if they have chosen all fields using the * selector,        // then sorting is not available        // Fix for Bug #570698        if (substr($curField[$x], -2) != '.*') {            $qry_orderby  .=  $curField[$x] . ' ' . $curSort[$x];            $last_orderby = 1;        }    }} // end forif (!empty($qry_orderby)) {    echo 'ORDER BY ' . htmlspecialchars($qry_orderby) . "\n";}?>        </textarea>        </fieldset>        <fieldset class="tblFooters">            <input type="submit" name="submit_sql" value="<?php echo __('Submit Query'); ?>" />        </fieldset>    </td></tr></table></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';require_once './libraries/ob.lib.php';PMA_outBufferPre();// Check parametersPMA_checkParameters(array('db', 'full_sql_query'));// For re-usability, moved http-headers// to a separate file. It can now be included by libraries/header.inc.php,// querywindow.php.require_once './libraries/header_http.inc.php';/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($text_dir == 'ltr') {    $cell_align_left  = 'left';    $cell_align_right = 'right';} else {    $cell_align_left  = 'right';    $cell_align_right = 'left';}?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $available_languages[$lang][1]; ?>" lang="<?php echo $available_languages[$lang][1]; ?>" dir="<?php echo $text_dir; ?>"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title><?php echo __('SQL result'); ?> - phpMyAdmin <?php echo PMA_VERSION ?></title><link rel="stylesheet" type="text/css" href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=print&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" /><?phprequire_once './libraries/header_scripts.inc.php';?></head><body bgcolor="#ffffff"><h1><?php echo __('SQL result'); ?></h1><p>    <strong><?php echo __('Host'); ?>:</strong> <?php echo $cfg['Server']['verbose'] ? $cfg['Server']['verbose'] : $cfg['Server']['host'] . ((!empty($cfg['Server']['port'])) ? ':' . $cfg['Server']['port'] : ''); ?><br />    <strong><?php echo __('Database'); ?>:</strong> <?php echo htmlspecialchars($db); ?><br />    <strong><?php echo __('Generation Time'); ?>:</strong> <?php echo PMA_localisedDate(); ?><br />    <strong><?php echo __('Generated by'); ?>:</strong> phpMyAdmin&nbsp;<?php echo PMA_VERSION; ?>&nbsp;/ MySQL&nbsp;<?php echo PMA_MYSQL_STR_VERSION; ?><br />    <strong><?php echo __('SQL query'); ?>:</strong> <?php echo htmlspecialchars($full_sql_query); ?>;    <?php if (isset($num_rows)) { ?><br />    <strong><?php echo __('Rows'); ?>:</strong> <?php echo $num_rows; ?>    <?php } ?></p><?php/** * Sets a variable to remember headers have been sent */$is_header_sent = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_export.php&amp;back=tbl_export.php';require_once './libraries/tbl_info.inc.php';// Dump of a table$export_page_title = __('View dump (schema) of table');// When we have some query, we need to remove LIMIT from that and possibly// generate WHERE clause (if we are asked to export specific rows)if (! empty($sql_query)) {    // Parse query so we can work with tokens    $parsed_sql = PMA_SQP_parse($sql_query);    $analyzed_sql = PMA_SQP_analyze($parsed_sql);    // Need to generate WHERE clause?    if (isset($where_clause)) {        // Yes => rebuild query from scratch; this doesn't work with nested        // selects :-(        $sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $sql_query .= ' DISTINCT ';        }        $sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }        $wheres = array();        if (isset($where_clause) && is_array($where_clause)         && count($where_clause) > 0) {            $wheres[] = '(' . implode(') OR (', $where_clause) . ')';        }        if (!empty($analyzed_sql[0]['where_clause'])) {            $wheres[] = $analyzed_sql[0]['where_clause'];        }        if (count($wheres) > 0) {            $sql_query .= ' WHERE (' . implode(') AND (', $wheres) . ')';        }        if (!empty($analyzed_sql[0]['group_by_clause'])) {            $sql_query .= ' GROUP BY ' . $analyzed_sql[0]['group_by_clause'];        }        if (!empty($analyzed_sql[0]['having_clause'])) {            $sql_query .= ' HAVING ' . $analyzed_sql[0]['having_clause'];        }        if (!empty($analyzed_sql[0]['order_by_clause'])) {            $sql_query .= ' ORDER BY ' . $analyzed_sql[0]['order_by_clause'];        }    } else {        // Just crop LIMIT clause        $sql_query = $analyzed_sql[0]['section_before_limit'] . $analyzed_sql[0]['section_after_limit'];    }    $message = PMA_Message::success();}/** * Displays top menu links */require './libraries/tbl_links.inc.php';$export_type = 'table';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run cookie based authentication. * * @package PhpMyAdmin-Auth-Cookie */if (! defined('PHPMYADMIN')) {    exit;}/** * Swekey authentication functions. */require './libraries/auth/swekey/swekey.auth.lib.php';if (function_exists('mcrypt_encrypt')) {    /**     * Uses faster mcrypt library if available     * (as this is not called from anywhere else, put the code in-line     *  for faster execution)     */    /**     * Initialization     * Store the initialization vector because it will be needed for     * further decryption. I don't think necessary to have one iv     * per server so I don't put the server number in the cookie name.     */    if (empty($_COOKIE['pma_mcrypt_iv']) || false === ($iv = base64_decode($_COOKIE['pma_mcrypt_iv'], true))) {        srand((double) microtime() * 1000000);        $td = mcrypt_module_open(MCRYPT_BLOWFISH, '', MCRYPT_MODE_CBC, '');        if ($td === false) {            die(__('Failed to use Blowfish from mcrypt!'));        }        $iv = mcrypt_create_iv(mcrypt_enc_get_iv_size($td), MCRYPT_RAND);        $GLOBALS['PMA_Config']->setCookie('pma_mcrypt_iv', base64_encode($iv));    }    /**     * Encryption using blowfish algorithm (mcrypt)     *     * @param   string  original data     * @param   string  the secret     *     * @return  string  the encrypted result     *     * @access  public     *     */    function PMA_blowfish_encrypt($data, $secret)    {        global $iv;        return base64_encode(mcrypt_encrypt(MCRYPT_BLOWFISH, $secret, $data, MCRYPT_MODE_CBC, $iv));    }    /**     * Decryption using blowfish algorithm (mcrypt)     *     * @param   string  encrypted data     * @param   string  the secret     *     * @return  string  original data     *     * @access  public     *     */    function PMA_blowfish_decrypt($encdata, $secret)    {        global $iv;        return trim(mcrypt_decrypt(MCRYPT_BLOWFISH, $secret, base64_decode($encdata), MCRYPT_MODE_CBC, $iv));    }} else {    include_once './libraries/blowfish.php';}/** * Returns blowfish secret or generates one if needed. * * @access  public * @return string */function PMA_get_blowfish_secret(){    if (empty($GLOBALS['cfg']['blowfish_secret'])) {        if (empty($_SESSION['auto_blowfish_secret'])) {            // this returns 23 characters            $_SESSION['auto_blowfish_secret'] = uniqid('', true);        }        return $_SESSION['auto_blowfish_secret'];    } else {        // apply md5() to work around too long secrets (returns 32 characters)        return md5($GLOBALS['cfg']['blowfish_secret']);    }}/** * Displays authentication form * * this function MUST exit/quit the application * * @global  string    the last connection error * * @access  public */function PMA_auth(){    global $conn_error;    /* Perform logout to custom URL */    if (! empty($_REQUEST['old_usr'])     && ! empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    /* No recall if blowfish secret is not configured as it would produce garbage */    if ($GLOBALS['cfg']['LoginCookieRecall'] && !empty($GLOBALS['cfg']['blowfish_secret'])) {        $default_user   = $GLOBALS['PHP_AUTH_USER'];        $default_server = $GLOBALS['pma_auth_server'];        $autocomplete   = '';    } else {        $default_user   = '';        $default_server = '';        // skip the IE autocomplete feature.        $autocomplete   = ' autocomplete="off"';    }    $cell_align = ($GLOBALS['text_dir'] == 'ltr') ? 'left' : 'right';    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header; do not show here the PMA version to improve security */    $page_title = 'phpMyAdmin ';    include './libraries/header_meta_style.inc.php';    // if $page_title is set, this script uses it as the title:    include './libraries/header_scripts.inc.php';    ?><script type="text/javascript">//<![CDATA[// show login form in top frameif (top != self) {    window.top.location.href=location;}//]]></script></head><body class="loginform">    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><div class="container"><a href="<?php echo PMA_linkURL('http://www.phpmyadmin.net/'); ?>" target="_blank" class="logo"><?php    $logo_image = $GLOBALS['pmaThemeImage'] . 'logo_right.png';    if (@file_exists($logo_image)) {        echo '<img src="' . $logo_image . '" id="imLogo" name="imLogo" alt="phpMyAdmin" border="0" />';    } else {        echo '<img name="imLogo" id="imLogo" src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo.png' . '" '           . 'border="0" width="88" height="31" alt="phpMyAdmin" />';    }    ?></a><h1>    <?php    echo sprintf(__('Welcome to %s'),        '<bdo dir="ltr" xml:lang="en">' . $page_title . '</bdo>');    ?></h1>    <?php    // Show error message    if (! empty($conn_error)) {        PMA_Message::rawError($conn_error)->display();    }    // Displays the languages form    if (empty($GLOBALS['cfg']['Lang'])) {        include_once './libraries/display_select_lang.lib.php';        // use fieldset, don't show doc link        PMA_select_language(true, false);    }    ?><br /><!-- Login form --><form method="post" action="index.php" name="login_form"<?php echo $autocomplete; ?> target="_top" class="login">    <fieldset>    <legend><?php    echo __('Log in');    echo '<a href="./Documentation.html" target="documentation" ' .        'title="' . __('phpMyAdmin documentation') . '"> ';    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo PMA_getImage('b_help.png', __('phpMyAdmin documentation'));    } else {        echo '(*)';    }    echo '</a>';?></legend><?php if ($GLOBALS['cfg']['AllowArbitraryServer']) { ?>        <div class="item">            <label for="input_servername" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>"><?php echo __('Server:'); ?></label>            <input type="text" name="pma_servername" id="input_servername" value="<?php echo htmlspecialchars($default_server); ?>" size="24" class="textfield" title="<?php echo __('You can enter hostname/IP address and port separated by space.'); ?>" />        </div><?php } ?>        <div class="item">            <label for="input_username"><?php echo __('Username:'); ?></label>            <input type="text" name="pma_username" id="input_username" value="<?php echo htmlspecialchars($default_user); ?>" size="24" class="textfield"/>        </div>        <div class="item">            <label for="input_password"><?php echo __('Password:'); ?></label>            <input type="password" name="pma_password" id="input_password" value="" size="24" class="textfield" />        </div>    <?php    if (count($GLOBALS['cfg']['Servers']) > 1) {        ?>        <div class="item">            <label for="select_server"><?php echo __('Server Choice'); ?>:</label>            <select name="server" id="select_server"        <?php        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            echo ' onchange="document.forms[\'login_form\'].elements[\'pma_servername\'].value = \'\'" ';        }        echo '>';        include_once './libraries/select_server.lib.php';        PMA_select_server(false, false);        echo '</select></div>';    } else {        echo '    <input type="hidden" name="server" value="' . $GLOBALS['server'] . '" />';    } // end if (server choice)    ?>    </fieldset>    <fieldset class="tblFooters">        <input value="<?php echo __('Go'); ?>" type="submit" id="input_go" />    <?php    $_form_params = array();    if (! empty($GLOBALS['target'])) {        $_form_params['target'] = $GLOBALS['target'];    }    if (! empty($GLOBALS['db'])) {        $_form_params['db'] = $GLOBALS['db'];    }    if (! empty($GLOBALS['table'])) {        $_form_params['table'] = $GLOBALS['table'];    }    // do not generate a "server" hidden field as we want the "server"    // drop-down to have priority    echo PMA_generate_common_hidden_inputs($_form_params, '', 0, 'server');    ?>    </fieldset></form>    <?php    // BEGIN Swekey Integration    Swekey_login('input_username', 'input_go');    // END Swekey Integration    // show the "Cookies required" message only if cookies are disabled    // (we previously tried to set some cookies)    if (empty($_COOKIE)) {        trigger_error(__('Cookies must be enabled past this point.'), E_USER_NOTICE);    }    if ($GLOBALS['error_handler']->hasDisplayErrors()) {        echo '<div>';        $GLOBALS['error_handler']->dispErrors();        echo '</div>';    }    ?></div>    <?php    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit;} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * this function DOES NOT check authentication - it just checks/provides * authentication credentials required to connect to the MySQL server * usually with PMA_DBI_connect() * * it returns false if something is missing - which usually leads to * PMA_auth() which displays login form * * it returns true if all seems ok which usually leads to PMA_auth_set_user() * * it directly switches to PMA_auth_fails() if user inactivity timout is reached * * @todo    AllowArbitraryServer on does not imply that the user wants an *          arbitrary server, or? so we should also check if this is filled and *          not only if allowed * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    // Initialization    /**     * @global $GLOBALS['pma_auth_server'] the user provided server to connect to     */    $GLOBALS['pma_auth_server'] = '';    $GLOBALS['PHP_AUTH_USER'] = $GLOBALS['PHP_AUTH_PW'] = '';    $GLOBALS['from_cookie'] = false;    // BEGIN Swekey Integration    if (! Swekey_auth_check()) {        return false;    }    // END Swekey Integration    if (defined('PMA_CLEAR_COOKIES')) {        foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $key);            $GLOBALS['PMA_Config']->removeCookie('pmaUser-' . $key);        }        return false;    }    if (! empty($_REQUEST['old_usr'])) {        // The user wants to be logged out        // -> delete his choices that were stored in session        // according to the PHP manual we should do this before the destroy:        //$_SESSION = array();        // but we still need some parts of the session information        // in libraries/header_meta_style.inc.php        session_destroy();        // -> delete password cookie(s)        if ($GLOBALS['cfg']['LoginCookieDeleteAll']) {            foreach ($GLOBALS['cfg']['Servers'] as $key => $val) {                $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $key);                if (isset($_COOKIE['pmaPass-' . $key])) {                    unset($_COOKIE['pmaPass-' . $key]);                }            }        } else {            $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);            if (isset($_COOKIE['pmaPass-' . $GLOBALS['server']])) {                unset($_COOKIE['pmaPass-' . $GLOBALS['server']]);            }        }    }    if (! empty($_REQUEST['pma_username'])) {        // The user just logged in        $GLOBALS['PHP_AUTH_USER'] = $_REQUEST['pma_username'];        $GLOBALS['PHP_AUTH_PW']   = empty($_REQUEST['pma_password']) ? '' : $_REQUEST['pma_password'];        if ($GLOBALS['cfg']['AllowArbitraryServer'] && isset($_REQUEST['pma_servername'])) {            $GLOBALS['pma_auth_server'] = $_REQUEST['pma_servername'];        }        return true;    }    // At the end, try to set the $GLOBALS['PHP_AUTH_USER']    // and $GLOBALS['PHP_AUTH_PW'] variables from cookies    // servername    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($_COOKIE['pmaServer-' . $GLOBALS['server']])) {        $GLOBALS['pma_auth_server'] = $_COOKIE['pmaServer-' . $GLOBALS['server']];    }    // username    if (empty($_COOKIE['pmaUser-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_USER'] = PMA_blowfish_decrypt(        $_COOKIE['pmaUser-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    // user was never logged in since session start    if (empty($_SESSION['last_access_time'])) {        return false;    }    // User inactive too long    if ($_SESSION['last_access_time'] < time() - $GLOBALS['cfg']['LoginCookieValidity']) {        PMA_cacheUnset('is_create_db_priv', true);        PMA_cacheUnset('is_process_priv', true);        PMA_cacheUnset('is_reload_priv', true);        PMA_cacheUnset('db_to_create', true);        PMA_cacheUnset('dbs_where_create_table_allowed', true);        $GLOBALS['no_activity'] = true;        PMA_auth_fails();        exit;    }    // password    if (empty($_COOKIE['pmaPass-' . $GLOBALS['server']])) {        return false;    }    $GLOBALS['PHP_AUTH_PW'] = PMA_blowfish_decrypt(        $_COOKIE['pmaPass-' . $GLOBALS['server']],        PMA_get_blowfish_secret());    if ($GLOBALS['PHP_AUTH_PW'] == "\xff(blank)") {        $GLOBALS['PHP_AUTH_PW'] = '';    }    $GLOBALS['from_cookie'] = true;    return true;} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $GLOBALS['PHP_AUTH_USER']) {        foreach ($cfg['Servers'] as $idx => $current) {            if ($current['host'] == $cfg['Server']['host']             && $current['port'] == $cfg['Server']['port']             && $current['socket'] == $cfg['Server']['socket']             && $current['ssl'] == $cfg['Server']['ssl']             && $current['connect_type'] == $cfg['Server']['connect_type']             && $current['user'] == $GLOBALS['PHP_AUTH_USER']) {                $GLOBALS['server'] = $idx;                $cfg['Server']     = $current;                break;            }        } // end foreach    } // end if    if ($GLOBALS['cfg']['AllowArbitraryServer']     && ! empty($GLOBALS['pma_auth_server'])) {        /* Allow to specify 'host port' */        $parts = explode(' ', $GLOBALS['pma_auth_server']);        if (count($parts) == 2) {            $tmp_host = $parts[0];            $tmp_port = $parts[1];        } else {            $tmp_host = $GLOBALS['pma_auth_server'];            $tmp_port = '';        }        if ($cfg['Server']['host'] != $GLOBALS['pma_auth_server']) {            $cfg['Server']['host'] = $tmp_host;            if (!empty($tmp_port)) {                $cfg['Server']['port'] = $tmp_port;            }        }        unset($tmp_host, $tmp_port, $parts);    }    $cfg['Server']['user']     = $GLOBALS['PHP_AUTH_USER'];    $cfg['Server']['password'] = $GLOBALS['PHP_AUTH_PW'];    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    $_SESSION['last_access_time'] = time();    // Name and password cookies need to be refreshed each time    // Duration = one month for username    $GLOBALS['PMA_Config']->setCookie('pmaUser-' . $GLOBALS['server'],        PMA_blowfish_encrypt($cfg['Server']['user'],            PMA_get_blowfish_secret()));    // Duration = as configured    $GLOBALS['PMA_Config']->setCookie('pmaPass-' . $GLOBALS['server'],        PMA_blowfish_encrypt(!empty($cfg['Server']['password']) ? $cfg['Server']['password'] : "\xff(blank)",            PMA_get_blowfish_secret()),        null,        $GLOBALS['cfg']['LoginCookieStore']);    // Set server cookies if required (once per session) and, in this case, force    // reload to ensure the client accepts cookies    if (! $GLOBALS['from_cookie']) {        if ($GLOBALS['cfg']['AllowArbitraryServer']) {            if (! empty($GLOBALS['pma_auth_server'])) {                // Duration = one month for servername                $GLOBALS['PMA_Config']->setCookie('pmaServer-' . $GLOBALS['server'], $cfg['Server']['host']);            } else {                // Delete servername cookie                $GLOBALS['PMA_Config']->removeCookie('pmaServer-' . $GLOBALS['server']);            }        }        // URL where to go:        $redirect_url = $cfg['PmaAbsoluteUri'] . 'index.php';        // any parameters to pass?        $url_params = array();        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];        }        if (strlen($GLOBALS['table'])) {            $url_params['table'] = $GLOBALS['table'];        }        // any target to pass?        if (! empty($GLOBALS['target']) && $GLOBALS['target'] != 'index.php') {            $url_params['target'] = $GLOBALS['target'];        }        /**         * whether we come from a fresh cookie login         */        define('PMA_COMING_FROM_COOKIE_LOGIN', true);        /**         * Clear user cache.         */        PMA_clearUserCache();        PMA_sendHeaderLocation($redirect_url . PMA_generate_common_url($url_params, '&'));        exit();    } // end if    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * prepares error message and switches to PMA_auth() which display the error * and the login form * * this function MUST exit/quit the application, * currently doen by call to PMA_auth() * * @access  public */function PMA_auth_fails(){    global $conn_error;    // Deletes password cookie and displays the login form    $GLOBALS['PMA_Config']->removeCookie('pmaPass-' . $GLOBALS['server']);    if (! empty($GLOBALS['login_without_password_is_forbidden'])) {        $conn_error = __('Login without a password is forbidden by configuration (see AllowNoPassword)');    } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {        $conn_error = __('Access denied');    } elseif (! empty($GLOBALS['no_activity'])) {        $conn_error = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        // Remember where we got timeout to return on same place        if (PMA_getenv('SCRIPT_NAME')) {            $GLOBALS['target'] = basename(PMA_getenv('SCRIPT_NAME'));            // avoid "missing parameter: field" on re-entry            if ('tbl_alter.php' == $GLOBALS['target']) {                $GLOBALS['target'] = 'tbl_structure.php';            }        }    } elseif (PMA_DBI_getError()) {        $conn_error = '#' . $GLOBALS['errno'] . ' ' . __('Cannot log in to the MySQL server');    } else {        $conn_error = __('Cannot log in to the MySQL server');    }    // needed for PHP-CGI (not need for FastCGI or mod-php)    header('Cache-Control: no-store, no-cache, must-revalidate');    header('Pragma: no-cache');    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to export a set of queries to a MS Word document * * @package PhpMyAdmin-Export * @subpackage HTMLWord */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['htmlword'] = array(        'text' => __('Microsoft Word 2000'),        'extension' => 'doc',        'mime_type' => 'application/vnd.ms-word',        'force_file' => true,        'options' => array(            /* what to dump (structure/data/both) */            array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table')),            array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data'))),            array('type' => 'end_group'),            /* data options */            array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure'),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return PMA_exportOutputHandler('</body></html>');    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $charset_of_file;        return PMA_exportOutputHandler('<html xmlns:o="urn:schemas-microsoft-com:office:office"    xmlns:x="urn:schemas-microsoft-com:office:word"    xmlns="http://www.w3.org/TR/REC-html40">    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">    <html>    <head>        <meta http-equiv="Content-type" content="text/html;charset=' . (isset($charset_of_file) ? $charset_of_file : 'utf-8') . '" />    </head>    <body>');    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return PMA_exportOutputHandler('<h1>' . __('Database') . ' ' . htmlspecialchars($db) . '</h1>');    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in HTML (Microsoft Word) format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $what;        if (! PMA_exportOutputHandler('<h2>' . __('Dumping data for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['htmlword_columns'])) {            $schema_insert = '<tr class="print-category">';            for ($i = 0; $i < $fields_cnt; $i++) {                $schema_insert .= '<td class="print"><b>' . htmlspecialchars(stripslashes(PMA_DBI_field_name($result, $i))) . '</b></td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '<tr class="print-category">';            for ($j = 0; $j < $fields_cnt; $j++) {                if (! isset($row[$j]) || is_null($row[$j])) {                    $value = $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    $value = $row[$j];                } else {                    $value = '';                }                $schema_insert .= '<td class="print">' . htmlspecialchars($value) . '</td>';            } // end for            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        if (! PMA_exportOutputHandler('</table>')) {            return false;        }        return true;    }    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_comments  whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $do_mime      whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        if (! PMA_exportOutputHandler('<h2>' . __('Table structure for table') . ' ' . htmlspecialchars($table) . '</h2>')) {            return false;        }        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        if (! PMA_exportOutputHandler('<table class="width100" cellspacing="1">')) {            return false;        }        $columns_cnt = 4;        if ($do_relation && $have_rel) {            $columns_cnt++;        }        if ($do_comments && $cfgRelation['commwork']) {            $columns_cnt++;        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;        }        $schema_insert = '<tr class="print-category">';        $schema_insert .= '<th class="print">' . __('Column') . '</th>';        $schema_insert .= '<td class="print"><b>' . __('Type') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Null') . '</b></td>';        $schema_insert .= '<td class="print"><b>' . __('Default') . '</b></td>';        if ($do_relation && $have_rel) {            $schema_insert .= '<td class="print"><b>' . __('Links to') . '</b></td>';        }        if ($do_comments) {            $schema_insert .= '<td class="print"><b>' . __('Comments') . '</b></td>';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $schema_insert .= '<td class="print"><b>' . htmlspecialchars('MIME') . '</b></td>';            $mime_map = PMA_getMIME($db, $table, true);        }        $schema_insert .= '</tr>';        if (! PMA_exportOutputHandler($schema_insert)) {            return false;        }        $columns = PMA_DBI_get_columns($db, $table);        foreach ($columns as $column) {            $schema_insert = '<tr class="print-category">';            $extracted_fieldspec = PMA_extractFieldSpec($column['Type']);            $type = htmlspecialchars($extracted_fieldspec['print_type']);            if (empty($type)) {                $type     = '&nbsp;';            }            if (! isset($column['Default'])) {                if ($column['Null'] != 'NO') {                    $column['Default'] = 'NULL';                }            }            $fmt_pre = '';            $fmt_post = '';            if (in_array($column['Field'], $unique_keys)) {                $fmt_pre = '<b>' . $fmt_pre;                $fmt_post = $fmt_post . '</b>';            }            if ($column['Key'] == 'PRI') {                $fmt_pre = '<i>' . $fmt_pre;                $fmt_post = $fmt_post . '</i>';            }            $schema_insert .= '<td class="print">' . $fmt_pre . htmlspecialchars($column['Field']) . $fmt_post . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars($type) . '</td>';            $schema_insert .= '<td class="print">' . (($column['Null'] == '' || $column['Null'] == 'NO') ? __('No') : __('Yes')) . '</td>';            $schema_insert .= '<td class="print">' . htmlspecialchars(isset($column['Default']) ? $column['Default'] : '') . '</td>';            $field_name = $column['Field'];            if ($do_relation && $have_rel) {                $schema_insert .= '<td class="print">' . (isset($res_rel[$field_name]) ? htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' (' . $res_rel[$field_name]['foreign_field'] . ')') : '') . '</td>';            }            if ($do_comments && $cfgRelation['commwork']) {                $schema_insert .= '<td class="print">' . (isset($comments[$field_name]) ? htmlspecialchars($comments[$field_name]) : '') . '</td>';            }            if ($do_mime && $cfgRelation['mimework']) {                $schema_insert .= '<td class="print">' . (isset($mime_map[$field_name]) ? htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype'])) : '') . '</td>';            }            $schema_insert .= '</tr>';            if (! PMA_exportOutputHandler($schema_insert)) {                return false;            }        } // end while        return PMA_exportOutputHandler('</table>');    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require './libraries/db_common.inc.php';require './libraries/db_info.inc.php';$import_type = 'database';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * dumps a database * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';// $sub_part is also used in db_info.inc.php to see if we are coming from// db_export.php, in which case we don't obey $cfg['MaxTableList']$sub_part  = '_export';require_once './libraries/db_common.inc.php';$url_query .= '&amp;goto=db_export.php';require_once './libraries/db_info.inc.php';/** * Displays the form */$export_page_title = __('View dump (schema) of database');// exit if no tables in db foundif ($num_tables < 1) {    PMA_Message::error(__('No tables found in database.'))->display();    include './libraries/footer.inc.php';    exit;} // end if$checkall_url = 'db_export.php?'              . PMA_generate_common_url($db)              . '&amp;goto=db_export.php';$multi_values = '<div>';$multi_values .= '<a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'table_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '&amp;unselectall=1" onclick="setSelectOptions(\'dump\', \'table_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="table_select[]" id="table_select" size="10" multiple="multiple">';$multi_values .= "\n";if (!empty($selected_tbl) && empty($table_select)) {    $table_select = $selected_tbl;}// Check if the selected tables are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['table_select'])) {    $_GET['table_select'] = urldecode($_GET['table_select']);    $_GET['table_select'] = explode(",", $_GET['table_select']);}foreach ($tables as $each_table) {    if (isset($_GET['table_select'])) {        if (in_array($each_table['Name'], $_GET['table_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (! empty($unselectall)            || (! empty($table_select) && !in_array($each_table['Name'], $table_select))) {        $is_selected = '';    } else {        $is_selected = ' selected="selected"';    }    $table_html   = htmlspecialchars($each_table['Name']);    $multi_values .= '                <option value="' . $table_html . '"'        . $is_selected . '>'        . str_replace(' ', '&nbsp;', $table_html) . '</option>' . "\n";} // end for$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'database';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * the navigation frame - displays server, db and table selection tree * * @package PhpMyAdmin *//** * Gets a core script and starts output buffering work */require_once './libraries/common.inc.php';/** * finish and cleanup navigation.php script execution, only to be used in navigation.php * * @access private */function PMA_exitNavigationFrame(){    echo '</body></html>';    exit;}require_once './libraries/common.lib.php';require_once './libraries/RecentTable.class.php';/** * Check if it is an ajax request to reload the recent tables list. */if ($GLOBALS['is_ajax_request'] && $_REQUEST['recent_table']) {    PMA_ajaxResponse('', true, array('options' => PMA_RecentTable::getInstance()->getHtmlSelectOption()) );}// keep the offset of the db list in session before closing itif (! isset($_SESSION['tmp_user_values']['navi_limit_offset'])) {    $_SESSION['tmp_user_values']['navi_limit_offset'] = 0;}if (! isset($_SESSION['tmp_user_values']['table_limit_offset']) || $_SESSION['tmp_user_values']['table_limit_offset_db'] != $db) {    $_SESSION['tmp_user_values']['table_limit_offset'] = 0;    $_SESSION['tmp_user_values']['table_limit_offset_db'] = $db;}if (isset($_REQUEST['pos'])) {    if (isset($_REQUEST['tpos'])) {        $_SESSION['tmp_user_values']['table_limit_offset'] = (int) $_REQUEST['pos'];    } else {        $_SESSION['tmp_user_values']['navi_limit_offset'] = (int) $_REQUEST['pos'];    }}$pos = $_SESSION['tmp_user_values']['navi_limit_offset'];$tpos = $_SESSION['tmp_user_values']['table_limit_offset'];// free the session file, for the other frames to be loaded// but only if debugging is not enabledif (empty($_SESSION['debug'])) {    session_write_close();}/** * the output compression library */require_once './libraries/ob.lib.php';PMA_outBufferPre();/* * selects the database if there is only one on current server */if ($GLOBALS['server'] && ! strlen($GLOBALS['db'])) {    $GLOBALS['db'] = $GLOBALS['pma']->databases->getSingleItem();}$db_start = $GLOBALS['db'];/** * the relation settings */$cfgRelation = PMA_getRelationsParam();/** * For re-usability, moved http-headers to a seperate file. * It can now be included by libraries/header.inc.php, querywindow.php. */require_once './libraries/header_http.inc.php';/* * Displays the frame */// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $available_languages[$lang][1]; ?>"    lang="<?php echo $available_languages[$lang][1]; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title>phpMyAdmin</title>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <base target="frame_content" />    <link rel="stylesheet" type="text/css"        href="phpmyadmin.css.php?<?php echo PMA_generate_common_url('', ''); ?>&amp;js_frame=left&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <?php    echo PMA_includeJS('jquery/jquery-1.6.2.js');    echo PMA_includeJS('jquery/jquery-ui-1.8.16.custom.js');    echo PMA_includeJS('jquery/jquery.qtip-1.0.0-rc3.js');    echo PMA_includeJS('navigation.js');    echo PMA_includeJS('functions.js');    echo PMA_includeJS('messages.php');    // Append the theme id to this url to invalidate the cache on a theme change    echo PMA_includeJS('get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId()));    ?>    <script type="text/javascript">    // <![CDATA[    // INIT PMA_setFrameSize    var onloadCnt = 0;    var onLoadHandler = window.onload;    var resizeHandler = window.onresize;    window.document.onresize  = resizeHandler;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(PMA_setFrameSize) != 'undefined' && typeof(PMA_setFrameSize) == 'function') {                PMA_setFrameSize();            }            onloadCnt++;        }    };    window.onresize = function() {        if (typeof(resizeHandler) == "function") {            resizeHandler();        }        if (typeof(PMA_saveFrameSize) != 'undefined' && typeof(PMA_saveFrameSize) == 'function') {            PMA_saveFrameSize();        }    };    // ]]>    </script>    <?php    /*     * remove horizontal scroll bar bug in IE 6 by forcing a vertical scroll bar     */    ?>    <!--[if IE 6]>    <style type="text/css">    /* <![CDATA[ */    html {        overflow-y: scroll;    }    /* ]]> */    </style>    <![endif]--></head><body id="body_leftFrame"><?phprequire './libraries/navigation_header.inc.php';// display recently used tablesif ($GLOBALS['cfg']['LeftRecentTable'] > 0) {    echo '<div id="recentTableList">' . "\n"        .'<form method="post" action="index.php" target="_parent">' . "\n"        .PMA_generate_common_hidden_inputs() . "\n"        .PMA_RecentTable::getInstance()->getHtmlSelect()        .'<noscript>' . "\n"        .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"        .'</noscript>' . "\n"        .'</form>' . "\n"        .'</div>' . "\n";}if (! $GLOBALS['server']) {    // no server selected    PMA_exitNavigationFrame();} elseif (! count($GLOBALS['pma']->databases)) {    // no database available, so we break here    echo '<p>' . __('No databases') . '</p>';    PMA_exitNavigationFrame();} elseif ($GLOBALS['cfg']['LeftFrameLight'] && count($GLOBALS['pma']->databases) > 1) {    $list = $cfg['DisplayDatabasesList'];    if ($list === 'auto') {        if (empty($GLOBALS['db'])) {            $list = true;        } else {            $list = false;        }    }    if (!$list) {        // more than one database available and LeftFrameLight is true        // display db selectbox        //        // Light mode -> beginning of the select combo for databases        // Note: When javascript is active, the frameset will be changed from        // within navigation.php. With no JS (<noscript>) the whole frameset will        // be rebuilt with the new target frame.    ?>    <div id="databaseList">    <form method="post" action="index.php" target="_parent" id="left">    <?php        echo PMA_generate_common_hidden_inputs() . "\n";        echo $GLOBALS['pma']->databases->getHtmlSelectGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";        echo '<noscript>' . "\n"            .'<input type="submit" name="Go" value="' . __('Go') . '" />' . "\n"            .'</noscript>' . "\n"            .'</form>' . "\n"            . '</div>' . "\n";    } else {        echo $GLOBALS['pma']->databases->getHtmlListGrouped(true, $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']) . "\n";    }    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);}?><div id="left_tableList"><?php// Don't display expansible/collapsible database info if:// 1. $GLOBALS['server'] == 0 (no server selected)//    This is the case when there are multiple servers and//    '$GLOBALS['cfg']['ServerDefault'] = 0' is set. In that case, we want the welcome//    screen to appear with no database info displayed.// 2. there is only one database available (ie either only one database exists//    or $GLOBALS['cfg']['Servers']['only_db'] is defined and is not an array)//    In this case, the database should not be collapsible/expandable$img_plus = PMA_getImage('b_plus.png', '+', array('id' => 'el%dImg'));$img_minus = PMA_getImage('b_minus.png', '-', array('id' => 'el%dImg'));$href_left = '<a onclick="if (toggle(\'%d\')) return false;"'    .' href="navigation.php?%s" target="_self">';$element_counter = 0;if ($GLOBALS['cfg']['LeftFrameLight'] && strlen($GLOBALS['db'])) {    $table_list = PMA_getTableList($GLOBALS['db'], null, $tpos, $cfg['MaxTableList']);    $table_count = PMA_getTableCount($GLOBALS['db']);    // show selected databasename as link to DefaultTabDatabase-page    // with table count in ()    $common_url_query = PMA_generate_common_url($GLOBALS['db']);    $db_tooltip = '';    if ($GLOBALS['cfg']['ShowTooltip']      && $GLOBALS['cfgRelation']['commwork']) {        $_db_tooltip = PMA_getDbComment($GLOBALS['db']);        if ($_db_tooltip) {            $db_tooltip = $_db_tooltip;        }    }    $disp_name  = $GLOBALS['db'];    if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {        $disp_name      = $db_tooltip;        $disp_name_cut  = $db_tooltip;        $db_tooltip     = $GLOBALS['db'];    }    if ($table_count >= $GLOBALS['cfg']['LeftDisplayTableFilterMinimum']) {        ?>        <span id="NavFilter">        <span id="clear_fast_filter" title="<?php echo __('Clear'); ?>">X</span>            <input type="text" class="gray" name="fast_filter" id="fast_filter" title="<?php echo __('Filter tables by name'); ?>" value="<?php echo __('Filter tables by name'); ?>" />        </span>        <?php    }    /**     * This helps reducing the navi panel size; in the right panel,     * user can find a navigator to page thru all tables.     *     */    if (! empty($table_list)) {        // upper table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            $_url_params = array(              'tpos' => 'true',              'pos' => $tpos,              'db' => $GLOBALS['db']            );            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }        PMA_displayTableList($table_list, true, '', $GLOBALS['db']);        // lower table list paginator        if (count($table_list) <= $GLOBALS['cfg']['MaxTableList'] && $table_count > $GLOBALS['cfg']['MaxTableList']) {            PMA_listNavigator($table_count, $tpos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxTableList']);        }    } else {        echo __('No tables found in database.');    }    unset($table_list);    if (!PMA_is_system_schema($db)) {        $class = '';        $GLOBALS['cfg']['AjaxEnable'] ? $class="ajax" : '';        echo '<ul id="newtable"><li><a target="frame_content" href="tbl_create.php' . PMA_generate_common_url(array('db' => $GLOBALS['db'])) . '"  class="'.$class .'" >'            . PMA_getImage('b_snewtbl.png', _pgettext('short form', 'Create table'), array('id' => "icon_newtable"))            . _pgettext('short form', 'Create table') . '</a></li></ul>';    }} elseif ($GLOBALS['cfg']['LeftFrameLight']) {    /* No need to tell user to select database if we're showing complete list */    if (!$list) {        echo '<p>' . __('Please select a database') . '</p>';    }} else {    echo '<div id="databaseList">' . "\n";    $_url_params = array('pos' => $pos);    PMA_listNavigator(count($GLOBALS['pma']->databases), $pos, $_url_params, 'navigation.php', 'frame_navigation', $GLOBALS['cfg']['MaxDbList']);    echo '</div>' . "\n";    $common_url_query = PMA_generate_common_url();    PMA_displayDbList($GLOBALS['pma']->databases->getGroupedDetails($_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']), $_SESSION['tmp_user_values']['navi_limit_offset'], $GLOBALS['cfg']['MaxDbList']);}/** * displays collapsable db list * * @global  integer $element_counter * @global  string $img_minus * @global  string $img_plus * @global  string $href_left * @global  string $db_start * @global  string $common_url_query * @param array   $ext_dblist extended db list * @param integer $offset * @param integer $count */function PMA_displayDbList($ext_dblist, $offset, $count){    global $element_counter, $img_minus, $img_plus, $href_left,        $db_start, $common_url_query;    // get table list, for all databases    // doing this in one step takes advantage of a single query with information_schema!    $tables_full = PMA_DBI_get_tables_full($GLOBALS['pma']->databases->getLimitedItems($offset, $count));    $url_dbgroup = '';    echo '<ul id="leftdatabaselist">';    $close_db_group = false;    foreach ($ext_dblist as $group => $db_group) {        if (count($GLOBALS['pma']->databases) > 1) {            if ($close_db_group) {                $url_dbgroup = '';                echo '</ul>';                echo '</li>';                $close_db_group = false;            }            if (count($db_group) > 1) {                $close_db_group = true;                $url_dbgroup = '&amp;dbgroup=' . urlencode($group);                $common_url_query = PMA_generate_common_url() . $url_dbgroup;                $element_counter++;                echo '<li class="dbgroup">';                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    // display + only if this db(group) is not preselected                    printf($href_left, $element_counter, PMA_generate_common_url());                    printf($img_minus, $element_counter);                } else {                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                }                echo '</a> ' . $group . "\n";                if ((! empty($_REQUEST['dbgroup']) && $_REQUEST['dbgroup'] == $group)                  || $db_start == $group || strpos($db_start, $group) === 0) {                    echo '<ul id="subel' . $element_counter . '">' . "\n";                } else {                    echo '<ul id="subel' . $element_counter . '"'                        .' style="display: none">' . "\n";                }            }        }        foreach ($db_group as $db) {            $common_url_query = PMA_generate_common_url($db['name']) . $url_dbgroup;            $element_counter++;            // Displays the database name            echo '<li>' . "\n";            if (count($GLOBALS['pma']->databases) > 1) {                // only with more than one db we need collapse ...                if ($db_start != $db['name'] || $db['num_tables'] < 1) {                    // display + only if this db is not preselected                    // or table count is 0                    printf($href_left, $element_counter, $common_url_query);                    printf($img_plus, $element_counter);                } else {                    printf($href_left, $element_counter,                        PMA_generate_common_url() . $url_dbgroup);                    printf($img_minus, $element_counter);                }                echo '</a>';                // ... and we need to refresh both frames on db selection                ?>                <a class="item"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    href="index.php?<?php echo $common_url_query; ?>"                    target="_parent"                    title="<?php echo htmlspecialchars($db['comment']); ?>"                    onclick="                        if (! toggle('<?php echo $element_counter; ?>', true))                            window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                        window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                            . '?' . $common_url_query; ?>', 'main');                        return false;">                    <?php                    // Might be unset if CountTables directive is false                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            } else {                // with only 1 db available we dont need to refresh navi frame                // on db selection, only phpmain                ?>                <a href="<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                    . '?' . $common_url_query; ?>"                    id="<?php echo htmlspecialchars($db['name']); ?>"                    title="<?php echo htmlspecialchars($db['comment']); ?>">                    <?php                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'rtl') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    echo htmlspecialchars($db['disp_name']);                    if (isset($db['num_tables'])) {                        if ($GLOBALS['text_dir'] === 'ltr') {                            echo ' <bdo dir="ltr">(' . $db['num_tables'] . ')</bdo> ';                        }                    }                    ?>                </a>                <?php            }            if (($GLOBALS['cfg']['Server']['CountTables'] === false) || $db['num_tables']) {                if (isset($tables_full[$db['name']])) {                    $tables = PMA_getTableList($db['name'], $tables_full[$db['name']]);                } elseif (isset($tables_full[strtolower($db['name'])])) {                    // on windows with lower_case_table_names = 1                    // MySQL returns                    // with SHOW DATABASES or information_schema.SCHEMATA: `Test`                    // but information_schema.TABLES gives `test`                    // bug #1436171                    // sf.net/tracker/?func=detail&aid=1436171&group_id=23067&atid=377408                    $tables = PMA_getTableList($db['name'], $tables_full[strtolower($db['name'])]);                } else {                    $tables = PMA_getTableList($db['name']);                }                $child_visible                    = (bool) (count($GLOBALS['pma']->databases) === 1 || $db_start == $db['name']);                PMA_displayTableList($tables, $child_visible, '', $db['name']);            } elseif ($GLOBALS['cfg']['LeftFrameLight']) {                // no tables and LeftFrameLight:                // display message no tables in selected db                echo '<p>' . __('Please select a database') . '</p>' . "\n";            }            echo '</li>' . "\n";        } // end foreach db    } // end foreach group    if ($close_db_group) {        $url_dbgroup = '';        echo '</ul>';        echo '</li>';        $close_db_group = false;    }    echo '</ul>' . "\n";}/** * display unordered list of tables * calls itself recursively if table in given list * is a list itself * * @global  integer the element counter * @global  string  html code for '-' image * @global  string  html code for '+' image * @global  string  html code for self link * @param array   $tables         array of tables/tablegroups * @param boolean $visible        whether the list is visible or not * @param string  $tab_group_full full tab group name * @param string  $table_db       db of this table */function PMA_displayTableList($tables, $visible = false,    $tab_group_full = '', $table_db = ''){    if (! is_array($tables) || count($tables) === 0) {        return;    }    global $element_counter, $img_minus, $img_plus, $href_left;    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if ($visible) {        echo '<ul id="subel' . $element_counter . '">';    } else {        echo '<ul id="subel' . $element_counter . '" style="display: none">';    }    foreach ($tables as $group => $table) {        // only allow grouping if the group has more than 1 table        if (isset($table['is' . $sep . 'group']) && $table['tab' . $sep . 'count'] > 1) {            $common_url_query = $GLOBALS['common_url_query']                . '&amp;tbl_group=' . urlencode($tab_group_full . $group);            $element_counter++;            echo '<li>' . "\n";            if ($visible             && ((isset($_REQUEST['tbl_group'])               && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                printf($href_left, $element_counter,                    $GLOBALS['common_url_query'] . '&amp;tbl_group=' . $tab_group_full);                printf($img_minus, $element_counter);            } else {                printf($href_left, $element_counter, $common_url_query);                printf($img_plus, $element_counter);            }            echo '</a>';            ?>            <a href="index.php?<?php echo $common_url_query; ?>"                target="_parent"                onclick="                    if (! toggle('<?php echo $element_counter; ?>', true))                        window.parent.goTo('./navigation.php?<?php echo $common_url_query; ?>');                    window.parent.goTo('./<?php echo $GLOBALS['cfg']['DefaultTabDatabase']                        . '?' . $common_url_query; ?>', 'main');                    return false;">                <?php                if ($GLOBALS['text_dir'] === 'rtl') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                echo htmlspecialchars(substr($group, 0, strlen($group) - strlen($sep)));                if ($GLOBALS['text_dir'] === 'ltr') {                    echo ' <bdo dir="ltr">(' . $table['tab' . $sep . 'count'] . ')</bdo> ';                }                ?>            </a>            <?php            unset($table['is' . $sep . 'group']);            unset($table['tab' . $sep . 'group']);            unset($table['tab' . $sep . 'count']);            if ($visible &&              ((isset($_REQUEST['tbl_group'])                && (strpos($_REQUEST['tbl_group'], $group) === 0                || strpos($_REQUEST['tbl_group'], $sep . $group) !== false))              || strpos($GLOBALS['table'], $group) === 0)) {                PMA_displayTableList($table, true,                    $tab_group_full . $group, $table_db);            } else {                PMA_displayTableList($table, false, '', $table_db);            }            echo '</li>' . "\n";        } elseif (is_array($table)) {            // the table was not grouped because it is the only one with its prefix            while (isset($table['is' . $sep . 'group'])) {                // get the array with the actual table information                foreach ($table as $value) {                    if (is_array($value)) {                        $table = $value;                    }                }            }            $link_title = PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable']);            // quick access icon next to each table name            echo '<li>' . "\n";            echo '<a class="tableicon" title="'                . htmlspecialchars($link_title)                . ': ' . htmlspecialchars($table['Comment'])                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows') . ')"'                .' id="quick_' . htmlspecialchars($table_db . '.' . $table['Name']) . '"'                .' href="' . $GLOBALS['cfg']['LeftDefaultTabTable'] . '?'                . $GLOBALS['common_url_query']                .'&amp;table=' . urlencode($table['Name'])                .'&amp;goto=' . $GLOBALS['cfg']['LeftDefaultTabTable']                . '" >';            $attr = array('id' => 'icon_' . htmlspecialchars($table_db . '.' . $table['Name']));            if (PMA_Table::isView($table_db, $table['Name'])) {                echo PMA_getImage('s_views.png', htmlspecialchars($link_title), $attr);            } else {                echo PMA_getImage('b_browse.png', htmlspecialchars($link_title), $attr);            }            echo '</a>';            // link for the table name itself            $href = $GLOBALS['cfg']['DefaultTabTable'] . '?'                .$GLOBALS['common_url_query'] . '&amp;table='                .urlencode($table['Name']) . '&amp;pos=0';            echo '<a href="' . $href            . '" title="' . htmlspecialchars(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable']) . ': ' . $table['Comment']                .' (' . PMA_formatNumber($table['Rows'], 0) . ' ' . __('Rows')) . ')"'                .' id="' . htmlspecialchars($table_db . '.' . $table['Name']) . '">'                // preserve spaces in table name                . str_replace(' ', '&nbsp;', htmlspecialchars($table['disp_name'])) . '</a>';            echo '</li>' . "\n";        }    }    echo '</ul>';}echo '</div>' . "\n";PMA_exitNavigationFrame();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';$action = 'tbl_create.php';require_once './libraries/header.inc.php';$titles = PMA_buildActionTitles();// Check parametersPMA_checkParameters(array('db'));/* Check if database name is empty */if (strlen($db) == 0) {    PMA_mysqlDie(__('The database name is empty!'), '', '', 'main.php');}/** * Defines the url to return to in case of error in a sql statement */if (PMA_DBI_get_columns($db, $table)) {    // table exists already    PMA_mysqlDie(        sprintf(__('Table %s already exists!'), htmlspecialchars($table)),        '',        '',        'db_structure.php?' . PMA_generate_common_url($db)    );}$err_url = 'tbl_create.php?' . PMA_generate_common_url($db, $table);// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    $regenerate = true; // for libraries/tbl_properties.inc.php    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 4;}/** * Selects the database to work with */if (!PMA_DBI_select_db($db)) {    PMA_mysqlDie(        sprintf(__('\'%s\' database does not exist.'), htmlspecialchars($db)),        '',        '',        'main.php'    );}/** * The form used to define the structure of the table has been submitted */if (isset($_REQUEST['do_save_data'])) {    $sql_query = '';    // Transforms the radio button field_key into 3 arrays    $field_cnt = count($_REQUEST['field_name']);    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }        } // end if    } // end for    // Builds the fields creation statements    for ($i = 0; $i < $field_cnt; $i++) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $query = PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        $query .= ', ';        $sql_query .= $query;    } // end for    unset($field_cnt, $query);    $sql_query = preg_replace('@, $@', '', $sql_query);    // Builds the primary keys statements    $primary     = '';    $primary_cnt = (isset($field_primary) ? count($field_primary) : 0);    for ($i = 0; $i < $primary_cnt; $i++) {        $j = $field_primary[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $primary .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($primary_cnt);    $primary = preg_replace('@, $@', '', $primary);    if (strlen($primary)) {        $sql_query .= ', PRIMARY KEY (' . $primary . ')';    }    unset($primary);    // Builds the indexes statements    $index     = '';    $index_cnt = (isset($field_index) ? count($field_index) : 0);    for ($i = 0;$i < $index_cnt; $i++) {        $j = $field_index[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {            $index .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($index_cnt);    $index = preg_replace('@, $@', '', $index);    if (strlen($index)) {        $sql_query .= ', INDEX (' . $index . ')';    }    unset($index);    // Builds the uniques statements    $unique     = '';    $unique_cnt = (isset($field_unique) ? count($field_unique) : 0);    for ($i = 0; $i < $unique_cnt; $i++) {        $j = $field_unique[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $unique .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    unset($unique_cnt);    $unique = preg_replace('@, $@', '', $unique);    if (strlen($unique)) {        $sql_query .= ', UNIQUE (' . $unique . ')';    }    unset($unique);    // Builds the FULLTEXT statements    $fulltext     = '';    $fulltext_cnt = (isset($field_fulltext) ? count($field_fulltext) : 0);    for ($i = 0; $i < $fulltext_cnt; $i++) {        $j = $field_fulltext[$i];        if (isset($_REQUEST['field_name'][$j]) && strlen($_REQUEST['field_name'][$j])) {           $fulltext .= PMA_backquote($_REQUEST['field_name'][$j]) . ', ';        }    } // end for    $fulltext = preg_replace('@, $@', '', $fulltext);    if (strlen($fulltext)) {        $sql_query .= ', FULLTEXT (' . $fulltext . ')';    }    unset($fulltext);    // Builds the 'create table' statement    $sql_query = 'CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table)     . ' (' . $sql_query . ')';    // Adds table type, character set, comments and partition definition    if (!empty($_REQUEST['tbl_type']) && ($_REQUEST['tbl_type'] != 'Default')) {        $sql_query .= ' ENGINE = ' . $_REQUEST['tbl_type'];    }    if (!empty($_REQUEST['tbl_collation'])) {        $sql_query .= PMA_generateCharsetQueryPart($_REQUEST['tbl_collation']);    }    if (!empty($_REQUEST['comment'])) {        $sql_query .= ' COMMENT = \'' . PMA_sqlAddSlashes($_REQUEST['comment']) . '\'';    }    if (!empty($_REQUEST['partition_definition'])) {        $sql_query .= ' ' . PMA_sqlAddSlashes($_REQUEST['partition_definition']);    }    $sql_query .= ';';    // Executes the query    $result = PMA_DBI_try_query($sql_query);    if ($result) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME(                        $db, $table, $_REQUEST['field_name'][$fieldindex], $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]                    );                }            }        }        $message = PMA_Message::success(__('Table %1$s has been created.'));        $message->addParam(PMA_backquote($db) . '.' . PMA_backquote($table));        if ($GLOBALS['is_ajax_request'] == true) {            /**             * construct the html for the newly created table's row to be appended             * to the list of tables.             *             * Logic taken from db_structure.php             */            $tbl_url_params = array();            $tbl_url_params['db'] = $db;            $tbl_url_params['table'] = $table;            $is_show_stats = $cfg['ShowStats'];            $tbl_stats_result = PMA_DBI_query('SHOW TABLE STATUS FROM '                    . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\';');            $tbl_stats = PMA_DBI_fetch_assoc($tbl_stats_result);            PMA_DBI_free_result($tbl_stats_result);            unset($tbl_stats_result);            if ($is_show_stats) {                $sum_size       = (double) 0;                $overhead_size  = (double) 0;                $overhead_check = '';                $tblsize                    =  doubleval($tbl_stats['Data_length']) + doubleval($tbl_stats['Index_length']);                $sum_size                   += $tblsize;                list($formatted_size, $unit) =  PMA_formatByteDown($tblsize, 3, ($tblsize > 0) ? 1 : 0);                if (isset($tbl_stats['Data_free']) && $tbl_stats['Data_free'] > 0) {                    list($formatted_overhead, $overhead_unit)     = PMA_formatByteDown($tbl_stats['Data_free'], 3, ($tbl_stats['Data_free'] > 0) ? 1 : 0);                    $overhead_size           += $tbl_stats['Data_free'];                }                if (isset($formatted_overhead)) {                        $overhead = '<span>' . $formatted_overhead . '</span> <span class="unit">' . $overhead_unit . '</span>';                        unset($formatted_overhead);                    } else {                        $overhead = '-';                }           }            $new_table_string = '<tr>' . "\n";            $new_table_string .= '<td align="center"> <input type="checkbox" id="checkbox_tbl_" name="selected_tbl[]" value="'.htmlspecialchars($table).'" /> </td>' . "\n";            $new_table_string .= '<th>';            $new_table_string .= '<a href="sql.php' . PMA_generate_common_url($tbl_url_params) . '">'. $table . '</a>';            if (PMA_Tracker::isActive()) {                $truename = str_replace(' ', '&nbsp;', htmlspecialchars($table));                if (PMA_Tracker::isTracked($db, $truename)) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye.png', __('Tracking is active.'));                } elseif (PMA_Tracker::getVersion($db, $truename) > 0) {                    $new_table_string .= '<a href="tbl_tracking.php' . PMA_generate_common_url($tbl_url_params) . '">';                    $new_table_string .= PMA_getImage('eye_grey.png', __('Tracking is not active.'));                }                unset($truename);            }            $new_table_string .= '</th>' . "\n";            $new_table_string .= '<td>' . $titles['NoBrowse'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Structure'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoSearch'] . '</td>' . "\n";            $new_table_string .= '<td><a href="tbl_change.php' . PMA_generate_common_url($tbl_url_params) . '">' . $titles['Insert'] . '</a></td>' . "\n";            $new_table_string .= '<td>' . $titles['NoEmpty'] . '</td>' . "\n";            $new_table_string .= '<td><a class="drop_table_anchor" href="sql.php' . PMA_generate_common_url($tbl_url_params) . '&amp;sql_query=';            $new_table_string .= urlencode('DROP TABLE ' . PMA_backquote($table));            $new_table_string .= '">';            $new_table_string .= $titles['Drop'];            $new_table_string .= '</a></td>' . "\n";            $new_table_string .= '<td class="value">' . $tbl_stats['Rows'] . '</td>' . "\n";            $new_table_string .= '<td nowrap="nowrap">' . $tbl_stats['Engine'] . '</td>' . "\n";            $new_table_string .= '<td> <dfn title="' . PMA_getCollationDescr($tbl_stats['Collation']) . '">'. $tbl_stats['Collation'] .'</dfn></td>' . "\n";            if ($is_show_stats) {                $new_table_string .= '<td class="value tbl_size"> <a href="tbl_structure.php' . PMA_generate_common_url($tbl_url_params) . '#showusage" ><span>' . $formatted_size . '</span> <span class="unit">' . $unit . '</class></a> </td>' . "\n" ;                $new_table_string .= '<td class="value tbl_overhead">' . $overhead . '</td>' . "\n" ;            }            $new_table_string .= '</tr>' . "\n";            $extra_data['new_table_string'] = $new_table_string;            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $display_query = $sql_query;        $sql_query = '';        // read table info on this newly created table, in case        // the next page is Structure        $reread_info = true;        include './libraries/tbl_info.inc.php';        // do not switch to sql.php - as there is no row to be displayed on a new table        if ($cfg['DefaultTabTable'] === 'sql.php') {            include './tbl_structure.php';        } else {            include './' . $cfg['DefaultTabTable'];        }        exit;    } else {        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse(PMA_DBI_getError(), false);        } else {            PMA_mysqlDie('', '', '', $err_url, false);            // An error happened while inserting/updating a table definition.            // to prevent total loss of that data, we embed the form once again.            // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php            $num_fields = $_REQUEST['orig_num_fields'];            $regenerate = true;        }    }} // end do create table/** * Displays the form used to define the structure of the table */// This div is used to show the content(eg: create table form with more columns) fetched with AJAX subsequently.if ($GLOBALS['is_ajax_request'] != true) {    echo('<div id="create_table_div">');}require './libraries/tbl_properties.inc.php';// Displays the footerrequire './libraries/footer.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    echo('</div>');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * SQL import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['sql'] = array(        'text'          => __('SQL'),        'extension'     => 'sql',        'options_text'  => __('Options'),    );    $compats = PMA_DBI_getCompatibilities();    if (count($compats) > 0) {        $values = array();        foreach ($compats as $val) {            $values[$val] = $val;        }        $plugin_list['sql']['options'] = array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type'      => 'select',                'name'      => 'compatibility',                'text'      => __('SQL compatibility mode:'),                'values'    => $values,                'doc'       => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode',                ),            ),            array(                'type' => 'bool',                'name' => 'no_auto_value_on_zero',                'text' => __('Do not use <code>AUTO_INCREMENT</code> for zero values'),                'doc'       => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode',                    'sqlmode_no_auto_value_on_zero'                ),            ),            array('type' => 'end_group'),        );    }    /* We do not define function when plugin is just queried for information above */    return;}$buffer = '';// Defaults for parser$sql = '';$start_pos = 0;$i = 0;$len= 0;$big_value = 2147483647;$delimiter_keyword = 'DELIMITER '; // include the space because it's mandatory$length_of_delimiter_keyword = strlen($delimiter_keyword);if (isset($_POST['sql_delimiter'])) {    $sql_delimiter = $_POST['sql_delimiter'];} else {    $sql_delimiter = ';';}// Handle compatibility options$sql_modes = array();if (isset($_REQUEST['sql_compatibility']) && 'NONE' != $_REQUEST['sql_compatibility']) {    $sql_modes[] = $_REQUEST['sql_compatibility'];}if (isset($_REQUEST['sql_no_auto_value_on_zero'])) {    $sql_modes[] = 'NO_AUTO_VALUE_ON_ZERO';}if (count($sql_modes) > 0) {    PMA_DBI_try_query('SET SQL_MODE="' . implode(',', $sql_modes) . '"');}unset($sql_modes);/** * will be set in PMA_importGetNextChunk() * * @global boolean $GLOBALS['finished'] */$GLOBALS['finished'] = false;while (!($GLOBALS['finished'] && $i >= $len) && !$error && !$timeout_passed) {    $data = PMA_importGetNextChunk();    if ($data === false) {        // subtract data we didn't handle yet and stop processing        $offset -= strlen($buffer);        break;    } elseif ($data === true) {        // Handle rest of buffer    } else {        // Append new data to buffer        $buffer .= $data;        // free memory        unset($data);        // Do not parse string when we're not at the end and don't have ; inside        if ((strpos($buffer, $sql_delimiter, $i) === false) && !$GLOBALS['finished']) {            continue;        }    }    // Current length of our buffer    $len = strlen($buffer);    // Grab some SQL queries out of it    while ($i < $len) {        $found_delimiter = false;        // Find first interesting character        $old_i = $i;        // this is about 7 times faster that looking for each sequence i        // one by one with strpos()        if (preg_match('/(\'|"|#|-- |\/\*|`|(?i)(?<![A-Z0-9_])' . $delimiter_keyword . ')/', $buffer, $matches, PREG_OFFSET_CAPTURE, $i)) {            // in $matches, index 0 contains the match for the complete            // expression but we don't use it            $first_position = $matches[1][1];        } else {            $first_position = $big_value;        }        /**         * @todo we should not look for a delimiter that might be         *       inside quotes (or even double-quotes)         */        // the cost of doing this one with preg_match() would be too high        $first_sql_delimiter = strpos($buffer, $sql_delimiter, $i);        if ($first_sql_delimiter === false) {            $first_sql_delimiter = $big_value;        } else {            $found_delimiter = true;        }        // set $i to the position of the first quote, comment.start or delimiter found        $i = min($first_position, $first_sql_delimiter);        if ($i == $big_value) {            // none of the above was found in the string            $i = $old_i;            if (!$GLOBALS['finished']) {                break;            }            // at the end there might be some whitespace...            if (trim($buffer) == '') {                $buffer = '';                $len = 0;                break;            }            // We hit end of query, go there!            $i = strlen($buffer) - 1;        }        // Grab current character        $ch = $buffer[$i];        // Quotes        if (strpos('\'"`', $ch) !== false) {            $quote = $ch;            $endq = false;            while (!$endq) {                // Find next quote                $pos = strpos($buffer, $quote, $i + 1);                /*                 * Behave same as MySQL and accept end of query as end of backtick.                 * I know this is sick, but MySQL behaves like this:                 *                 * SELECT * FROM `table                 *                 * is treated like                 *                 * SELECT * FROM `table`                 */                if ($pos === false && $quote == '`' && $found_delimiter) {                    $pos = $first_sql_delimiter - 1;                // No quote? Too short string                } elseif ($pos === false) {                    // We hit end of string => unclosed quote, but we handle it as end of query                    if ($GLOBALS['finished']) {                        $endq = true;                        $i = $len - 1;                    }                    $found_delimiter = false;                    break;                }                // Was not the quote escaped?                $j = $pos - 1;                while ($buffer[$j] == '\\') $j--;                // Even count means it was not escaped                $endq = (((($pos - 1) - $j) % 2) == 0);                // Skip the string                $i = $pos;                if ($first_sql_delimiter < $pos) {                    $found_delimiter = false;                }            }            if (!$endq) {                break;            }            $i++;            // Aren't we at the end?            if ($GLOBALS['finished'] && $i == $len) {                $i--;            } else {                continue;            }        }        // Not enough data to decide        if ((($i == ($len - 1) && ($ch == '-' || $ch == '/'))          || ($i == ($len - 2) && (($ch == '-' && $buffer[$i + 1] == '-')            || ($ch == '/' && $buffer[$i + 1] == '*')))) && !$GLOBALS['finished']) {            break;        }        // Comments        if ($ch == '#'         || ($i < ($len - 1) && $ch == '-' && $buffer[$i + 1] == '-'          && (($i < ($len - 2) && $buffer[$i + 2] <= ' ')           || ($i == ($len - 1)  && $GLOBALS['finished'])))         || ($i < ($len - 1) && $ch == '/' && $buffer[$i + 1] == '*')                ) {            // Copy current string to SQL            if ($start_pos != $i) {                $sql .= substr($buffer, $start_pos, $i - $start_pos);            }            // Skip the rest            $start_of_comment = $i;            // do not use PHP_EOL here instead of "\n", because the export            // file might have been produced on a different system            $i = strpos($buffer, $ch == '/' ? '*/' : "\n", $i);            // didn't we hit end of string?            if ($i === false) {                if ($GLOBALS['finished']) {                    $i = $len - 1;                } else {                    break;                }            }            // Skip *            if ($ch == '/') {                $i++;            }            // Skip last char            $i++;            // We need to send the comment part in case we are defining            // a procedure or function and comments in it are valuable            $sql .= substr($buffer, $start_of_comment, $i - $start_of_comment);            // Next query part will start here            $start_pos = $i;            // Aren't we at the end?            if ($i == $len) {                $i--;            } else {                continue;            }        }        // Change delimiter, if redefined, and skip it (don't send to server!)        if (strtoupper(substr($buffer, $i, $length_of_delimiter_keyword)) == $delimiter_keyword         && ($i + $length_of_delimiter_keyword < $len)) {             // look for EOL on the character immediately after 'DELIMITER '             // (see previous comment about PHP_EOL)           $new_line_pos = strpos($buffer, "\n", $i + $length_of_delimiter_keyword);           // it might happen that there is no EOL           if (false === $new_line_pos) {               $new_line_pos = $len;           }           $sql_delimiter = substr($buffer, $i + $length_of_delimiter_keyword, $new_line_pos - $i - $length_of_delimiter_keyword);           $i = $new_line_pos + 1;           // Next query part will start here           $start_pos = $i;           continue;        }        // End of SQL        if ($found_delimiter || ($GLOBALS['finished'] && ($i == $len - 1))) {            $tmp_sql = $sql;            if ($start_pos < $len) {                $length_to_grab = $i - $start_pos;                if (! $found_delimiter) {                    $length_to_grab++;                }                $tmp_sql .= substr($buffer, $start_pos, $length_to_grab);                unset($length_to_grab);            }            // Do not try to execute empty SQL            if (! preg_match('/^([\s]*;)*$/', trim($tmp_sql))) {                $sql = $tmp_sql;                PMA_importRunQuery($sql, substr($buffer, 0, $i + strlen($sql_delimiter)));                $buffer = substr($buffer, $i + strlen($sql_delimiter));                // Reset parser:                $len = strlen($buffer);                $sql = '';                $i = 0;                $start_pos = 0;                // Any chance we will get a complete query?                //if ((strpos($buffer, ';') === false) && !$GLOBALS['finished']) {                if ((strpos($buffer, $sql_delimiter) === false) && !$GLOBALS['finished']) {                    break;                }            } else {                $i++;                $start_pos = $i;            }        }    } // End of parser loop} // End of import loop// Commit any possible data in buffersPMA_importRunQuery('', substr($buffer, 0, $len));PMA_importRunQuery();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * file upload functions * * @package PhpMyAdmin *//** * * @todo when uploading a file into a blob field, should we also consider using *       chunks like in import? UPDATE `table` SET `field` = `field` + [chunk] * @package PhpMyAdmin */class PMA_File{    /**     * @var string the temporary file name     * @access protected     */    var $_name = null;    /**     * @var string the content     * @access protected     */    var $_content = null;    /**     * @var string the error message     * @access protected     */    var $_error_message = '';    /**     * @var bool whether the file is temporary or not     * @access protected     */    var $_is_temp = false;    /**     * @var string type of compression     * @access protected     */    var $_compression = null;    /**     * @var integer     */    var $_offset = 0;    /**     * @var integer size of chunk to read with every step     */    var $_chunk_size = 32768;    /**     * @var resource file handle     */    var $_handle = null;    /**     * @var boolean whether to decompress content before returning     */    var $_decompress = false;    /**     * @var string charset of file     */    var $_charset = null;    /**     * @staticvar string most recent BLOB repository reference    */    static $_recent_bs_reference = null;    /**     * constructor     *     * @access  public     * @param string  $name   file name     */    function __construct($name = false)    {        if ($name) {            $this->setName($name);        }    }    /**     * destructor     *     * @see     PMA_File::cleanUp()     * @access  public     */    function __destruct()    {        $this->cleanUp();    }    /**     * deletes file if it is temporary, usally from a moved upload file     *     * @access  public     * @return  boolean success     */    function cleanUp()    {        if ($this->isTemp()) {            return $this->delete();        }        return true;    }    /**     * deletes the file     *     * @access  public     * @return  boolean success     */    function delete()    {        return unlink($this->getName());    }    /**     * checks or sets the temp flag for this file     * file objects with temp flags are deleted with object destruction     *     * @access  public     * @param boolean sets the temp flag     * @return  boolean PMA_File::$_is_temp     */    function isTemp($is_temp = null)    {        if (null !== $is_temp) {            $this->_is_temp = (bool) $is_temp;        }        return $this->_is_temp;    }    /**     * accessor     *     * @access  public     * @param string  $name   file name     */    function setName($name)    {        $this->_name = trim($name);    }    /**     * @access  public     * @return  string  binary file content     */    function getContent($as_binary = true, $offset = 0, $length = null)    {        if (null === $this->_content) {            if ($this->isUploaded() && ! $this->checkUploadedFile()) {                return false;            }            if (! $this->isReadable()) {                return false;            }            if (function_exists('file_get_contents')) {                $this->_content = file_get_contents($this->getName());            } elseif ($size = filesize($this->getName())) {                $this->_content = fread(fopen($this->getName(), 'rb'), $size);            }        }        if (! empty($this->_content) && $as_binary) {            return '0x' . bin2hex($this->_content);        }        if (null !== $length) {            return substr($this->_content, $offset, $length);        } elseif ($offset > 0) {            return substr($this->_content, $offset);        }        return $this->_content;    }    /**     * @access  public     * @return bool     */    function isUploaded()    {        return is_uploaded_file($this->getName());    }    /**     * accessor     *     * @access  public     * @return  string  PMA_File::$_name     */    function getName()    {        return $this->_name;    }    /**     * @access  public     * @param string  name of file uploaded     * @return  boolean success     */    function setUploadedFile($name)    {        $this->setName($name);        if (! $this->isUploaded()) {            $this->setName(null);            $this->_error_message = __('File was not an uploaded file.');            return false;        }        return true;    }    /**     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function setUploadedFromTblChangeRequest($key, $rownumber)    {        if (! isset($_FILES['fields_upload'])  || empty($_FILES['fields_upload']['name']['multi_edit'][$rownumber][$key])) {            return false;        }        $file = PMA_File::fetchUploadedFromTblChangeRequestMultiple($_FILES['fields_upload'], $rownumber, $key);        // for blobstreaming        $is_bs_upload = false;        // check if this field requires a repository upload        if (isset($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key])) {            $is_bs_upload = ($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key] == "on") ? true : false;        }        // if request is an upload to the BLOB repository        if ($is_bs_upload) {            $bs_db = $_REQUEST['db'];            $bs_table = $_REQUEST['table'];            $tmp_filename = $file['tmp_name'];            $tmp_file_type = $file['type'];            if (! $tmp_file_type) {                $tmp_file_type = null;            }            if (! $bs_db || ! $bs_table) {                $this->_error_message = __('Unknown error while uploading.');                return false;            }            $blob_url =  PMA_BS_UpLoadFile($bs_db, $bs_table, $tmp_file_type, $tmp_filename);            PMA_File::setRecentBLOBReference($blob_url);         }   // end if ($is_bs_upload)        // check for file upload errors        switch ($file['error']) {            // we do not use the PHP constants here cause not all constants            // are defined in all versions of PHP - but the correct constants names            // are given as comment            case 0: //UPLOAD_ERR_OK:                return $this->setUploadedFile($file['tmp_name']);                break;            case 4: //UPLOAD_ERR_NO_FILE:                break;            case 1: //UPLOAD_ERR_INI_SIZE:                $this->_error_message = __('The uploaded file exceeds the upload_max_filesize directive in php.ini.');                break;            case 2: //UPLOAD_ERR_FORM_SIZE:                $this->_error_message = __('The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.');                break;            case 3: //UPLOAD_ERR_PARTIAL:                $this->_error_message = __('The uploaded file was only partially uploaded.');                break;            case 6: //UPLOAD_ERR_NO_TMP_DIR:                $this->_error_message = __('Missing a temporary folder.');                break;            case 7: //UPLOAD_ERR_CANT_WRITE:                $this->_error_message = __('Failed to write file to disk.');                break;            case 8: //UPLOAD_ERR_EXTENSION:                $this->_error_message = __('File upload stopped by extension.');                break;            default:                $this->_error_message = __('Unknown error in file upload.');        } // end switch        return false;    }    /**     * strips some dimension from the multi-dimensional array from $_FILES     *     * <code>     * $file['name']['multi_edit'][$rownumber][$key] = [value]     * $file['type']['multi_edit'][$rownumber][$key] = [value]     * $file['size']['multi_edit'][$rownumber][$key] = [value]     * $file['tmp_name']['multi_edit'][$rownumber][$key] = [value]     * $file['error']['multi_edit'][$rownumber][$key] = [value]     *     * // becomes:     *     * $file['name'] = [value]     * $file['type'] = [value]     * $file['size'] = [value]     * $file['tmp_name'] = [value]     * $file['error'] = [value]     * </code>     *     * @access  public     * @static     * @param array   $file       the array     * @param string  $rownumber     * @param string  $key     * @return  array     */    function fetchUploadedFromTblChangeRequestMultiple($file, $rownumber, $key)    {        $new_file = array(            'name' => $file['name']['multi_edit'][$rownumber][$key],            'type' => $file['type']['multi_edit'][$rownumber][$key],            'size' => $file['size']['multi_edit'][$rownumber][$key],            'tmp_name' => $file['tmp_name']['multi_edit'][$rownumber][$key],            'error' => $file['error']['multi_edit'][$rownumber][$key],        );        return $new_file;    }    /**     * sets the name if the file to the one selected in the tbl_change form     *     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function setSelectedFromTblChangeRequest($key, $rownumber = null)    {        if (! empty($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key])         && is_string($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key])) {            // ... whether with multiple rows ...            // for blobstreaming            $is_bs_upload = false;            // check if this field requires a repository upload            if (isset($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key])) {                $is_bs_upload = ($_REQUEST['upload_blob_repo']['multi_edit'][$rownumber][$key] == "on") ? true : false;            }            // is a request to upload file to BLOB repository using uploadDir mechanism            if ($is_bs_upload) {                $bs_db = $_REQUEST['db'];                $bs_table = $_REQUEST['table'];                $tmp_filename = $GLOBALS['cfg']['UploadDir'] . '/' . $_REQUEST['fields_uploadlocal_' . $key]['multi_edit'][$rownumber];                // check if fileinfo library exists                if ($PMA_Config->get('FILEINFO_EXISTS')) {                // attempt to init fileinfo                    $finfo = finfo_open(FILEINFO_MIME);                    // fileinfo exists                    if ($finfo) {                        // pass in filename to fileinfo and close fileinfo handle after                        $tmp_file_type = finfo_file($finfo, $tmp_filename);                        finfo_close($finfo);                    }                } else {                    // no fileinfo library exists, use file command                    $tmp_file_type = exec("file -bi " . escapeshellarg($tmp_filename));                }                if (! $tmp_file_type) {                    $tmp_file_type = null;                }                if (! $bs_db || !$bs_table) {                    $this->_error_message = __('Unknown error while uploading.');                    return false;                }                $blob_url = PMA_BS_UpLoadFile($bs_db, $bs_table, $tmp_file_type, $tmp_filename);                PMA_File::setRecentBLOBReference($blob_url);            }   // end if ($is_bs_upload)            return $this->setLocalSelectedFile($_REQUEST['fields_uploadlocal']['multi_edit'][$rownumber][$key]);        } else {            return false;        }    }    /**     * @access  public     * @return  string  error message     */    function getError()    {        return $this->_error_message;    }    /**     * @access  public     * @return  boolean whether an error occured or not     */    function isError()    {        return ! empty($this->_error_message);    }    /**     * checks the superglobals provided if the tbl_change form is submitted     * and uses the submitted/selected file     *     * @access  public     * @param string  $key the md5 hash of the column name     * @param string  $rownumber     * @return  boolean success     */    function checkTblChangeForm($key, $rownumber)    {        if ($this->setUploadedFromTblChangeRequest($key, $rownumber)) {            // well done ...            $this->_error_message = '';            return true;        } elseif ($this->setSelectedFromTblChangeRequest($key, $rownumber)) {            // well done ...            $this->_error_message = '';            return true;        }        // all failed, whether just no file uploaded/selected or an error        return false;    }    /**     *     * @access  public     * @param string  $name     * @return  boolean success     */    function setLocalSelectedFile($name)    {        if (empty($GLOBALS['cfg']['UploadDir'])) return false;        $this->setName(PMA_userDir($GLOBALS['cfg']['UploadDir']) . PMA_securePath($name));        if (! $this->isReadable()) {            $this->_error_message = __('File could not be read');            $this->setName(null);            return false;        }        return true;    }    /**     * @access  public     * @return  boolean whether the file is readable or not     */    function isReadable()    {        // suppress warnings from being displayed, but not from being logged        // any file access outside of open_basedir will issue a warning        ob_start();        $is_readable = is_readable($this->getName());        ob_end_clean();        return $is_readable;    }    /**     * If we are on a server with open_basedir, we must move the file     * before opening it. The FAQ 1.11 explains how to create the "./tmp"     * directory - if needed     *     * @todo move check of $cfg['TempDir'] into PMA_Config?     * @access  public     * @return  boolean whether uploaded fiel is fine or not     */    function checkUploadedFile()    {        if ($this->isReadable()) {            return true;        }        if (empty($GLOBALS['cfg']['TempDir']) || ! is_writable($GLOBALS['cfg']['TempDir'])) {            // cannot create directory or access, point user to FAQ 1.11            $this->_error_message = __('Error moving the uploaded file, see [a@./Documentation.html#faq1_11@Documentation]FAQ 1.11[/a]');            return false;        }        $new_file_to_upload = tempnam(realpath($GLOBALS['cfg']['TempDir']), basename($this->getName()));        // suppress warnings from being displayed, but not from being logged        // any file access outside of open_basedir will issue a warning        ob_start();        $move_uploaded_file_result = move_uploaded_file($this->getName(), $new_file_to_upload);        ob_end_clean();        if (! $move_uploaded_file_result) {            $this->_error_message = __('Error while moving uploaded file.');            return false;        }        $this->setName($new_file_to_upload);        $this->isTemp(true);        if (! $this->isReadable()) {            $this->_error_message = __('Cannot read (moved) upload file.');            return false;        }        return true;    }    /**     * Detects what compression filse uses     *     * @todo    move file read part into readChunk() or getChunk()     * @todo    add support for compression plugins     * @access  protected     * @return  string MIME type of compression, none for none     */    function _detectCompression()    {        // suppress warnings from being displayed, but not from being logged        // f.e. any file access outside of open_basedir will issue a warning        ob_start();        $file = fopen($this->getName(), 'rb');        ob_end_clean();        if (! $file) {            $this->_error_message = __('File could not be read');            return false;        }        /**         * @todo         * get registered plugins for file compression        foreach (PMA_getPlugins($type = 'compression') as $plugin) {            if (call_user_func_array(array($plugin['classname'], 'canHandle'), array($this->getName()))) {                $this->setCompressionPlugin($plugin);                break;            }        }         */        $test = fread($file, 4);        $len = strlen($test);        fclose($file);        if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {            $this->_compression = 'application/gzip';        } elseif ($len >= 3 && substr($test, 0, 3) == 'BZh') {            $this->_compression = 'application/bzip2';        } elseif ($len >= 4 && $test == "PK\003\004") {            $this->_compression = 'application/zip';        } else {            $this->_compression = 'none';        }        return $this->_compression;    }    /**     * whether the content should be decompressed before returned     */    function setDecompressContent($decompress)    {        $this->_decompress = (bool) $decompress;    }    function getHandle()    {        if (null === $this->_handle) {            $this->open();        }        return $this->_handle;    }    function setHandle($handle)    {        $this->_handle = $handle;    }    /**     * @return bool     */    function open()    {        if (! $this->_decompress) {            $this->_handle = @fopen($this->getName(), 'r');        }        switch ($this->getCompression()) {            case false:                return false;            case 'application/bzip2':                if ($GLOBALS['cfg']['BZipDump'] && @function_exists('bzopen')) {                    $this->_handle = @bzopen($this->getName(), 'r');                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'application/gzip':                if ($GLOBALS['cfg']['GZipDump'] && @function_exists('gzopen')) {                    $this->_handle = @gzopen($this->getName(), 'r');                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'application/zip':                if ($GLOBALS['cfg']['ZipDump'] && @function_exists('zip_open')) {                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($this->getName());                    if (! empty($result['error'])) {                        $this->_error_message = PMA_Message::rawError($result['error']);                        return false;                    } else {                        $this->content_uncompressed = $result['data'];                    }                    unset($result);                } else {                    $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                    return false;                }                break;            case 'none':                $this->_handle = @fopen($this->getName(), 'r');                break;            default:                $this->_error_message = sprintf(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'), $this->getCompression());                return false;                break;        }        return true;    }    function getCharset()    {        return $this->_charset;    }    function setCharset($charset)    {        $this->_charset = $charset;    }    /**     * @return  string MIME type of compression, none for none     * @access  public     */    function getCompression()    {        if (null === $this->_compression) {            return $this->_detectCompression();        }        return $this->_compression;    }    /**     * advances the file pointer in the file handle by $length bytes/chars     *     * @param integer $length numbers of chars/bytes to skip     * @return  boolean     * @todo this function is unused     */    function advanceFilePointer($length)    {        while ($length > 0) {            $this->getNextChunk($length);            $length -= $this->getChunkSize();        }    }    /**     * http://bugs.php.net/bug.php?id=29532     * bzip reads a maximum of 8192 bytes on windows systems     * @todo this function is unused     * @param int $max_size     * @return bool|string     */    function getNextChunk($max_size = null)    {        if (null !== $max_size) {            $size = min($max_size, $this->getChunkSize());        } else {            $size = $this->getChunkSize();        }        // $result = $this->handler->getNextChunk($size);        $result = '';        switch ($this->getCompression()) {            case 'application/bzip2':                $result = '';                while (strlen($result) < $size - 8192 && ! feof($this->getHandle())) {                    $result .= bzread($this->getHandle(), $size);                }                break;            case 'application/gzip':                $result = gzread($this->getHandle(), $size);                break;            case 'application/zip':                /*                 * if getNextChunk() is used some day,                 * replace this code by code similar to the one                 * in open()                 *                include_once './libraries/unzip.lib.php';                $import_handle = new SimpleUnzip();                $import_handle->ReadFile($this->getName());                if ($import_handle->Count() == 0) {                    $this->_error_message = __('No files found inside ZIP archive!');                    return false;                } elseif ($import_handle->GetError(0) != 0) {                    $this->_error_message = __('Error in ZIP archive:')                        . ' ' . $import_handle->GetErrorMsg(0);                    return false;                } else {                    $result = $import_handle->GetData(0);                }                 */                break;            case 'none':                $result = fread($this->getHandle(), $size);                break;            default:                return false;        }        if ($GLOBALS['charset_conversion']) {            $result = PMA_convert_string($this->getCharset(), 'utf-8', $result);        } else {            /**             * Skip possible byte order marks (I do not think we need more             * charsets, but feel free to add more, you can use wikipedia for             * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)             *             * @todo BOM could be used for charset autodetection             */            if ($this->getOffset() === 0) {                // UTF-8                if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                    $result = substr($result, 3);                // UTF-16 BE, LE                } elseif (strncmp($result, "\xFE\xFF", 2) == 0                 || strncmp($result, "\xFF\xFE", 2) == 0) {                    $result = substr($result, 2);                }            }        }        $this->_offset += $size;        if (0 === $result) {            return true;        }        return $result;    }    function getOffset()    {        return $this->_offset;    }    function getChunkSize()    {        return $this->_chunk_size;    }    function setChunkSize($chunk_size)    {        $this->_chunk_size = (int) $chunk_size;    }    function getContentLength()    {        return strlen($this->_content);    }    function eof()    {        if ($this->getHandle()) {            return feof($this->getHandle());        } else {            return ($this->getOffset() >= $this->getContentLength());        }    }    /**     * sets reference to most recent BLOB repository reference     *     * @access  public     * @param string - BLOB repository reference    */    static function setRecentBLOBReference($ref)    {        PMA_File::$_recent_bs_reference = $ref;    }    /**     * retrieves reference to most recent BLOB repository reference     *     * @access  public     * @return  string - most recent BLOB repository reference    */    static function getRecentBLOBReference()    {        $ref = PMA_File::$_recent_bs_reference;        PMA_File::$_recent_bs_reference = null;        return $ref;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple script to set correct charset for the license * * Note: please do not fold this script into a general script * that would read any file using a GET parameter, it would open a hole * * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require './libraries/common.inc.php';/** * */header('Content-type: text/plain; charset=utf-8');$filename = LICENSE_FILE;// Check if the file is available, some distributions remove these.if (is_readable($filename)) {    readfile($filename);} else {    printf(__('The %s file is not available on this system, please visit www.phpmyadmin.net for more information.'), $filename);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library grabs the names and values of the variables sent or posted to a * script in $_GET, $_POST and $_FILES superglobals and sets simple globals * variables from them. It does the same work for $HTTP_ACCEPT_LANGUAGE and * $HTTP_AUTHORIZATION. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * copy values from one array to another, usually from a superglobal into $GLOBALS * * @param array   $array      values from * @param array   &$target    values to * @param bool    $sanitize   prevent importing key names in $_import_blacklist * @return bool */function PMA_recursive_extract($array, &$target, $sanitize = true){    if (! is_array($array)) {        return false;    }    if ($sanitize) {        $valid_variables = preg_replace($GLOBALS['_import_blacklist'], '',            array_keys($array));        $valid_variables = array_unique($valid_variables);    } else {        $valid_variables = array_keys($array);    }    foreach ($valid_variables as $key) {        if (strlen($key) === 0) {            continue;        }        if (is_array($array[$key])) {            // there could be a variable coming from a cookie of            // another application, with the same name as this array            unset($target[$key]);            PMA_recursive_extract($array[$key], $target[$key], false);        } else {            $target[$key] = $array[$key];        }    }    return true;}/** * @var array $_import_blacklist variable names that should NEVER be imported *                              from superglobals */$_import_blacklist = array(    '/^cfg$/i',         // PMA configuration    '/^server$/i',      // selected server    '/^db$/i',          // page to display    '/^table$/i',       // page to display    '/^goto$/i',        // page to display    '/^back$/i',        // the page go back    '/^lang$/i',        // selected language    '/^collation_connection$/i', //    '/^set_theme$/i',   //    '/^sql_query$/i',   // the query to be executed    '/^GLOBALS$/i',     // the global scope    '/^str.*$/i',       // PMA localized strings    '/^error_handler.*$/i',       // the error handler    '/^_.*$/i',         // PMA does not use variables starting with _ from extern    '/^.*\s+.*$/i',     // no whitespaces anywhere    '/^[0-9]+.*$/i',    // numeric variable names    //'/^PMA_.*$/i',      // other PMA variables);if (! empty($_GET)) {    PMA_recursive_extract($_GET, $GLOBALS);}if (! empty($_POST)) {    PMA_recursive_extract($_POST, $GLOBALS);}if (! empty($_FILES)) {    $_valid_variables = preg_replace($GLOBALS['_import_blacklist'], '', array_keys($_FILES));    foreach ($_valid_variables as $name) {        if (strlen($name) != 0) {            $$name = $_FILES[$name]['tmp_name'];            ${$name . '_name'} = $_FILES[$name]['name'];        }    }    unset($name, $value);}/** * globalize some environment variables */$server_vars = array('HTTP_ACCEPT_LANGUAGE', 'HTTP_AUTHORIZATION');foreach ($server_vars as $current) {    // it's not important HOW we detect html tags    // it's more important to prevent XSS    // so it's not important if we result in an invalid string,    // it's even better than a XSS capable string    if (PMA_getenv($current) && false === strpos(PMA_getenv($current), '<')) {        $$current = PMA_getenv($current);    // already imported by register_globals?    } elseif (! isset($$current) || false !== strpos($$current, '<')) {        $$current = '';    }}unset($server_vars, $current, $_import_blacklist);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * <code> * N   N  OOO  !!   DDDD   OOO    N   N  OOO  TTTTT   EEEE DDDD  I TTTTT !! * NN  N O   O !!   D   D O   O   NN  N O   O   T     E    D   D I   T   !! * N N N O   O !!   D   D O   O   N N N O   O   T     EEEE D   D I   T   !! * N  NN O   O      D   D O   O   N  NN O   O   T     E    D   D I   T * N   N  OOO  !!   DDDD   OOO    N   N  OOO    T     EEEE DDDD  I   T   !! * </code> * * DO NOT EDIT THIS FILE, EDIT config.inc.php INSTEAD !!! * * phpMyAdmin default configuration, you can copy values from here to your * config.inc.php * * All directives are explained in Documentation.html * * @package PhpMyAdmin *//** * Your phpMyAdmin URL. * * Complete the variable below with the full URL ie *    http://www.your_web.net/path_to_your_phpMyAdmin_directory/ * * It must contain characters that are valid for a URL, and the path is * case sensitive on some Web servers, for example Unix-based servers. * * In most cases you can leave this variable empty, as the correct value * will be detected automatically. However, we recommend that you do * test to see that the auto-detection code works in your system. A good * test is to browse a table, then edit a row and save it.  There will be * an error message if phpMyAdmin cannot auto-detect the correct value. * * @global string $cfg['PmaAbsoluteUri'] */$cfg['PmaAbsoluteUri'] = '';/** * Disable the default warning that is displayed on the DB Details Structure page if * any of the required Tables for the configuration storage could not be found * * @global boolean $cfg['PmaNoRelation_DisableWarning'] */$cfg['PmaNoRelation_DisableWarning'] = false;/** * Disable the default warning that is displayed if Suhosin is detected * * @global boolean $cfg['SuhosinDisableWarning'] */$cfg['SuhosinDisableWarning'] = false;/** * Disable the default warning that is displayed if mcrypt is missing for * cookie authentication. * * @global boolean $cfg['McryptDisableWarning'] */$cfg['McryptDisableWarning'] = false;/** * Show warning about incomplete translations on certain threshold. * * @global boolean $cfg['TranslationWarningThreshold'] */$cfg['TranslationWarningThreshold'] = 80;/** * Allows phpMyAdmin to be included from a document located on * another domain; setting this to true is a potential security hole * * @global boolean $cfg['AllowThirdPartyFraming'] */$cfg['AllowThirdPartyFraming'] = false;/** * The 'cookie' auth_type uses blowfish algorithm to encrypt the password. If * at least one server configuration uses 'cookie' auth_type, enter here a * pass phrase that will be used by blowfish. The maximum length seems to be 46 * characters. * * @global string $cfg['blowfish_secret'] */$cfg['blowfish_secret'] = '';/******************************************************************************* * Server(s) configuration * * The $cfg['Servers'] array starts with $cfg['Servers'][1].  Do not use * $cfg['Servers'][0]. You can disable a server configuration entry by setting host * to ''. If you want more than one server, just copy following section * (including $i incrementation) several times. There is no need to define * full server array, just define values you need to change. * * @global array $cfg['Servers'] */$cfg['Servers'] = array();$i = 1;/** * MySQL hostname or IP address * * @global string $cfg['Servers'][$i]['host'] */$cfg['Servers'][$i]['host'] = 'localhost';/** * MySQL port - leave blank for default port * * @global string $cfg['Servers'][$i]['port'] */$cfg['Servers'][$i]['port'] = '';/** * Path to the socket - leave blank for default socket * * @global string $cfg['Servers'][$i]['socket'] */$cfg['Servers'][$i]['socket'] = '';/** * Use SSL for connecting to MySQL server? * * @global boolean $cfg['Servers'][$i]['ssl'] */$cfg['Servers'][$i]['ssl'] = false;/** * How to connect to MySQL server ('tcp' or 'socket') * * @global string $cfg['Servers'][$i]['connect_type'] */$cfg['Servers'][$i]['connect_type'] = 'tcp';/** * The PHP MySQL extension to use ('mysql' or 'mysqli') * * @global string $cfg['Servers'][$i]['extension'] */$cfg['Servers'][$i]['extension'] = 'mysqli';/** * Use compressed protocol for the MySQL connection * * @global boolean $cfg['Servers'][$i]['compress'] */$cfg['Servers'][$i]['compress'] = false;/** * MySQL control host. This permits to use a host different than the * main host, for the phpMyAdmin configuration storage. If left empty, * $cfg['Servers'][$i]['host'] is used instead. * * @global string $cfg['Servers'][$i]['controlhost'] */$cfg['Servers'][$i]['controlhost'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controluser'] */$cfg['Servers'][$i]['controluser'] = '';/** * MySQL control user settings (this user must have read-only * access to the "mysql/user" and "mysql/db" tables). The controluser is also * used for all relational features (pmadb) * * @global string $cfg['Servers'][$i]['controlpass'] */$cfg['Servers'][$i]['controlpass'] = '';/** * Authentication method (valid choices: config, http, signon or cookie) * * @global string $cfg['Servers'][$i]['auth_type'] */$cfg['Servers'][$i]['auth_type'] = 'cookie';/** * HTTP Basic Auth Realm name to display (only used with 'HTTP' auth_type) * * @global string $cfg['Servers'][$i]['auth_http_realm'] */$cfg['Servers'][$i]['auth_http_realm'] = '';/** * File containing Swekey ids and login names (see /contrib); * leave empty to deactivate Swekey hardware authentication * * @global string $cfg['Servers'][$i]['auth_swekey_config'] */$cfg['Servers'][$i]['auth_swekey_config'] = '';/** * MySQL user * * @global string $cfg['Servers'][$i]['user'] */$cfg['Servers'][$i]['user'] = 'root';/** * MySQL password (only needed with 'config' auth_type) * * @global string $cfg['Servers'][$i]['password'] */$cfg['Servers'][$i]['password'] = '';/** * Session to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonSession'] */$cfg['Servers'][$i]['SignonSession'] = '';/** * PHP script to use for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonScript'] */$cfg['Servers'][$i]['SignonScript'] = '';/** * URL where to redirect user to login for 'signon' authentication method * * @global string $cfg['Servers'][$i]['SignonURL'] */$cfg['Servers'][$i]['SignonURL'] = '';/** * URL where to redirect user after logout * * @global string $cfg['Servers'][$i]['LogoutURL'] */$cfg['Servers'][$i]['LogoutURL'] = '';/** * Whether to try to connect without password * * @global boolean $cfg['Servers'][$i]['nopassword'] */$cfg['Servers'][$i]['nopassword'] = false;/** * If set to a db-name, only this db is displayed in left frame * It may also be an array of db-names, where sorting order is relevant. * * @global string $cfg['Servers'][$i]['only_db'] */$cfg['Servers'][$i]['only_db'] = '';/** * Database name to be hidden from listings * * @global string $cfg['Servers'][$i]['hide_db'] */$cfg['Servers'][$i]['hide_db'] = '';/** * Verbose name for this host - leave blank to show the hostname * (for HTTP authentication, all non-US-ASCII characters will be stripped) * * @global string $cfg['Servers'][$i]['verbose'] */$cfg['Servers'][$i]['verbose'] = '';/** * Database used for Relation, Bookmark and PDF Features * (see examples/create_tables.sql) *   - leave blank for no support *     SUGGESTED: 'phpmyadmin' * * @global string $cfg['Servers'][$i]['pmadb'] */$cfg['Servers'][$i]['pmadb'] = '';/** * Bookmark table *   - leave blank for no bookmark support *     SUGGESTED: 'pma_bookmark' * * @global string $cfg['Servers'][$i]['bookmarktable'] */$cfg['Servers'][$i]['bookmarktable'] = '';/** * table to describe the relation between links (see doc) *   - leave blank for no relation-links support *     SUGGESTED: 'pma_relation' * * @global string $cfg['Servers'][$i]['relation'] */$cfg['Servers'][$i]['relation'] = '';/** * table to describe the display fields *   - leave blank for no display fields support *     SUGGESTED: 'pma_table_info' * * @global string $cfg['Servers'][$i]['table_info'] */$cfg['Servers'][$i]['table_info'] = '';/** * table to describe the tables position for the PDF schema *   - leave blank for no PDF schema support *     SUGGESTED: 'pma_table_coords' * * @global string $cfg['Servers'][$i]['table_coords'] */$cfg['Servers'][$i]['table_coords'] = '';/** * table to describe pages of relationpdf *   - leave blank if you don't want to use this *     SUGGESTED: 'pma_pdf_pages' * * @global string $cfg['Servers'][$i]['pdf_pages'] */$cfg['Servers'][$i]['pdf_pages'] = '';/** * table to store column information *   - leave blank for no column comments/mime types *     SUGGESTED: 'pma_column_info' * * @global string $cfg['Servers'][$i]['column_info'] */$cfg['Servers'][$i]['column_info'] = '';/** * table to store SQL history *   - leave blank for no SQL query history *     SUGGESTED: 'pma_history' * * @global string $cfg['Servers'][$i]['history'] */$cfg['Servers'][$i]['history'] = '';/** * table to store the coordinates for Designer *   - leave blank for no Designer feature *     SUGGESTED: 'pma_designer_coords' * * @global string $cfg['Servers'][$i]['designer_coords'] */$cfg['Servers'][$i]['designer_coords'] = '';/** * table to store recently used tables *   - leave blank for no "persistent" recently used tables *     SUGGESTED: 'pma_recent' */$cfg['Servers'][$i]['recent'] = '';/** * table to store UI preferences for tables *   - leave blank for no "persistent" UI preferences *     SUGGESTED: 'pma_table_uiprefs' */$cfg['Servers'][$i]['table_uiprefs'] = '';/** * table to store SQL tracking *   - leave blank for no SQL tracking *     SUGGESTED: 'pma_tracking' * * @global string $cfg['Servers'][$i]['tracking'] */$cfg['Servers'][$i]['tracking'] = '';/** * table to store user preferences *   - leave blank to disable server storage *     SUGGESTED: 'pma_userconfig' * * @global string $cfg['Servers'][$i]['userconfig'] */$cfg['Servers'][$i]['userconfig'] = '';/** * Maximum number of records saved in $cfg['Servers'][$i]['table_uiprefs'] table. * * In case where tables in databases is modified (e.g. dropped or renamed), * table_uiprefs may contains invalid data (referring to tables which are not * exist anymore). * This configuration make sure that we only keep N (N = MaxTableUiprefs) * newest record in table_uiprefs and automatically delete older records. * * @global integer $cfg['Servers'][$i]['userconfig'] = ''; */$cfg['Servers'][$i]['MaxTableUiprefs'] = 100;/** * set to false if you know that your pma_* tables are up to date. * This prevents compatibility checks and thereby increases performance. * * @global boolean $cfg['Servers'][$i]['verbose_check'] */$cfg['Servers'][$i]['verbose_check'] = true;/** * whether to allow root login * * @global boolean $cfg['Servers'][$i]['AllowRoot'] */$cfg['Servers'][$i]['AllowRoot'] = true;/** * whether to allow login of any user without a password * * @global boolean $cfg['Servers'][$i]['AllowNoPassword'] */$cfg['Servers'][$i]['AllowNoPassword'] = false;/** * Host authentication order, leave blank to not use * * @global string $cfg['Servers'][$i]['AllowDeny']['order'] */$cfg['Servers'][$i]['AllowDeny']['order'] = '';/** * Host authentication rules, leave blank for defaults * * @global array $cfg['Servers'][$i]['AllowDeny']['rules'] */$cfg['Servers'][$i]['AllowDeny']['rules'] = array();/** * Disable use of INFORMATION_SCHEMA. Is always 'true' for Drizzle. * * @see http://sf.net/support/tracker.php?aid=1849494 * @see http://bugs.mysql.com/19588 * @global boolean $cfg['Servers'][$i]['DisableIS'] */$cfg['Servers'][$i]['DisableIS'] = true;/** * SQL command to fetch available databases * * by default most user will be fine with SHOW DATABASES, * for servers with a huge amount of databases it is possible to * define a command which executes faster but with less information * * especially when accessing database servers from ISPs changing this command * can result in a great speed improvement * * false will disable fetching databases from the server, only databases in * $cfg['Servers'][$i]['only_db'] will be displayed * * #user# will be replaced by current user * * examples: * 'SHOW DATABASES' * "SHOW DATABASES LIKE '#user#\_%'" * 'SELECT DISTINCT TABLE_SCHEMA FROM information_schema.SCHEMA_PRIVILEGES' * 'SELECT SCHEMA_NAME FROM information_schema.SCHEMATA' * false * * @global array $cfg['Servers'][$i]['ShowDatabasesCommand'] */$cfg['Servers'][$i]['ShowDatabasesCommand'] = 'SHOW DATABASES';/** * Whether to count tables when showing database list * * @global array $cfg['Servers'][$i]['CountTables'] */$cfg['Servers'][$i]['CountTables'] = false;/** * Whether the tracking mechanism creates versions for tables and views automatically. * * @global bool $cfg['Servers'][$i]['tracking_version_auto_create'] */$cfg['Servers'][$i]['tracking_version_auto_create'] = false;/** * Defines the list of statements the auto-creation uses for new versions. * * @global string $cfg['Servers'][$i]['tracking_default_statements'] */$cfg['Servers'][$i]['tracking_default_statements'] = 'CREATE TABLE,ALTER TABLE,DROP TABLE,RENAME TABLE,' .                                          'CREATE INDEX,DROP INDEX,' .                                          'INSERT,UPDATE,DELETE,TRUNCATE,REPLACE,' .                                          'CREATE VIEW,ALTER VIEW,DROP VIEW,' .                                          'CREATE DATABASE,ALTER DATABASE,DROP DATABASE';/** * Whether a DROP VIEW IF EXISTS statement will be added as first line to the log when creating a view. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_view'] */$cfg['Servers'][$i]['tracking_add_drop_view'] = true;/** * Whether a DROP TABLE IF EXISTS statement will be added as first line to the log when creating a table. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_table'] */$cfg['Servers'][$i]['tracking_add_drop_table'] = true;/** * Whether a DROP DATABASE IF EXISTS statement will be added as first line to the log when creating a database. * * @global bool $cfg['Servers'][$i]['tracking_add_drop_database'] */$cfg['Servers'][$i]['tracking_add_drop_database'] = true;/** * Default server (0 = no default server) * * If you have more than one server configured, you can set $cfg['ServerDefault'] * to any one of them to auto-connect to that server when phpMyAdmin is started, * or set it to 0 to be given a list of servers without logging in * If you have only one server configured, $cfg['ServerDefault'] *MUST* be * set to that server. * * @global integer $cfg['ServerDefault'] */$cfg['ServerDefault'] = 1;/* * Other core phpMyAdmin settings *//** * whether Ajax behavior is active * * @global boolean $cfg['AjaxEnable'] */$cfg['AjaxEnable'] = true;/** * whether version check is active * * @global boolean $cfg['VersionCheck'] */$cfg['VersionCheck'] = VERSION_CHECK_DEFAULT;/** * maximum number of db's displayed in left frame and database list * * @global integer $cfg['MaxDbList'] */$cfg['MaxDbList'] = 100;/** * maximum number of tables displayed in table list * * @global integer $cfg['MaxTableList'] */$cfg['MaxTableList'] = 250;/** * whether to show hint or not * * @global boolean $cfg['ShowHint'] */$cfg['ShowHint'] = true;/** * maximum number of characters when a SQL query is displayed * * @global integer $cfg['MaxCharactersInDisplayedSQL'] */$cfg['MaxCharactersInDisplayedSQL'] = 1000;/** * use GZIP output buffering if possible (true|false|'auto') * * @global string $cfg['OBGzip'] */$cfg['OBGzip'] = 'auto';/** * use persistent connections to MySQL database * * @global boolean $cfg['PersistentConnections'] */$cfg['PersistentConnections'] = false;/** * whether to force using HTTPS * * @global boolean $cfg['ForceSSL'] */$cfg['ForceSSL'] = false;/** * maximum execution time in seconds (0 for no limit) * * @global integer $cfg['ExecTimeLimit'] */$cfg['ExecTimeLimit'] = 300;/** * Path for storing session data (session_save_path PHP parameter). * * @global integer $cfg['SessionSavePath'] */$cfg['SessionSavePath'] = '';/** * maximum allocated bytes ('0' for no limit) * this is a string because '16M' is a valid value; we must put here * a string as the default value so that /setup accepts strings * * @global string $cfg['MemoryLimit'] */$cfg['MemoryLimit'] = '0';/** * mark used tables, make possible to show locked tables (since MySQL 3.23.30) * Is ignored for Drizzle. * * @global boolean $cfg['SkipLockedTables'] */$cfg['SkipLockedTables'] = false;/** * show SQL queries as run * * @global boolean $cfg['ShowSQL'] */$cfg['ShowSQL'] = true;/** * retain SQL input on Ajax execute * * @global boolean $cfg['RetainQueryEditor'] */$cfg['RetainQueryBox'] = false;/** * show a 'Drop database' link to normal users * * @global boolean $cfg['AllowUserDropDatabase'] */$cfg['AllowUserDropDatabase'] = false;/** * confirm some commands that can result in loss of data * (see "need_confirm" in the parser) * * @global boolean $cfg['Confirm'] */$cfg['Confirm'] = true;/** * recall previous login in cookie authentication mode or not * * @global boolean $cfg['LoginCookieRecall'] */$cfg['LoginCookieRecall'] = true;/** * validity of cookie login (in seconds; 1440 matches php.ini's * session.gc_maxlifetime) * * @global integer $cfg['LoginCookieValidity'] */$cfg['LoginCookieValidity'] = 1440;/** * how long login cookie should be stored (in seconds) * * @global integer $cfg['LoginCookieStore'] */$cfg['LoginCookieStore'] = 0;/** * whether to delete all login cookies on logout * * @global boolean $cfg['LoginCookieDeleteAll'] */$cfg['LoginCookieDeleteAll'] = true;/** * whether to enable the "database search" feature or not * * @global boolean $cfg['UseDbSearch'] */$cfg['UseDbSearch'] = true;/** * if set to true, PMA continues computing multiple-statement queries * even if one of the queries failed * * @global boolean $cfg['IgnoreMultiSubmitErrors'] */$cfg['IgnoreMultiSubmitErrors'] = false;/** * if set to true, PMA will show the affected rows of EACH statement on * multiple-statement queries. See the libraries/import.php file for * hard coded defaults on how many queries a statement may contain! * * @global boolean $cfg['VerboseMultiSubmit'] */$cfg['VerboseMultiSubmit'] = true;/** * allow login to any user entered server in cookie based authentication * * @global boolean $cfg['AllowArbitraryServer'] */$cfg['AllowArbitraryServer'] = false;/******************************************************************************* * Error handler configuration * * this configures phpMyAdmin's own error handler, it is used to avoid information * disclosure, gather errors for logging, reporting and displaying * * @global array $cfg['Error_Handler'] */$cfg['Error_Handler'] = array();/** * whether to display errors or not * * this does not affect errors of type  E_USER_* * * @global boolean $cfg['Error_Handler']['display'] */$cfg['Error_Handler']['display'] = false;/** * (NOT IMPLEMENTED YET) * where to log errors, false or empty to disable * * <code> * // EXAMPLE log to std PHP error log * $cfg['Error_Handler']['log'] = array(0); * // EXAMPLE mail errors * $cfg['Error_Handler']['log'] = array(1, 'admin@example.org'); * // EXAMPLE append to specific file * $cfg['Error_Handler']['log'] = array(3, '/var/log/phpmyadmin_error.log'); * </code> * * @see     http://php.net/error_log * @global  string $cfg['Error_Handler']['log'] *///$cfg['Error_Handler']['log'] = false;/** * gather all errors in session to be displayed on a error reporting page * for viewing and/or sending to phpMyAdmin developer team * * @global boolean $cfg['Error_Handler']['gather'] */$cfg['Error_Handler']['gather'] = false;/******************************************************************************* * Left frame setup *//** * use a select-based menu and display only the current tables in the left frame. * * @global boolean $cfg['LeftFrameLight'] */$cfg['LeftFrameLight'] = true;/** * turn the select-based light menu into a tree * * @global boolean $cfg['LeftFrameDBTree'] */$cfg['LeftFrameDBTree'] = true;/** * the separator to sub-tree the select-based light menu tree * * @global string $cfg['LeftFrameDBSeparator'] */$cfg['LeftFrameDBSeparator'] = '_';/** * Which string will be used to generate table prefixes * to split/nest tables into multiple categories * * @global string $cfg['LeftFrameTableSeparator'] */$cfg['LeftFrameTableSeparator']= '__';/** * How many sublevels should be displayed when splitting up tables by the above Separator * * @global integer $cfg['LeftFrameTableLevel'] */$cfg['LeftFrameTableLevel'] = 1;/** * display table comment as tooltip in left frame * * @global boolean $cfg['ShowTooltip'] */$cfg['ShowTooltip'] = true;/** * if ShowToolTip is enabled, this defines that table/db comments * * @global boolean $cfg['ShowTooltipAliasDB'] */$cfg['ShowTooltipAliasDB'] = false;/** * are shown (in the left menu and db_structure) instead of table/db names. * Setting ShowTooltipAliasTB to 'nested' will only use the Aliases for nested * descriptors, not the table itself. * * @global boolean $cfg['ShowTooltipAliasTB'] */$cfg['ShowTooltipAliasTB'] = false;/** * display logo at top of left frame * * @global boolean $cfg['LeftDisplayLogo'] */$cfg['LeftDisplayLogo'] = true;/** * where should logo link point to (can also contain an external URL) * * @global string $cfg['LeftLogoLink'] */$cfg['LeftLogoLink'] = 'main.php';/** * whether to open the linked page in the main window ('main') or * in a new window ('new') * * @global string $cfg['LeftLogoLinkWindow'] */$cfg['LeftLogoLinkWindow'] = 'main';/** * number of recently used tables displayed in the navigation frame * * @global integer $cfg['LeftRecentTable'] */$cfg['LeftRecentTable'] = 10;/** * display a JavaScript table filter in the left frame * when more then x tables are present * * @global boolean $cfg['LeftDisplayTableFilterMinimum'] */$cfg['LeftDisplayTableFilterMinimum'] = 30;/** * display server choice at top of left frame * * @global boolean $cfg['LeftDisplayServers'] */$cfg['LeftDisplayServers'] = false;/** * server choice as links * * @global boolean $cfg['DisplayServersList'] */$cfg['DisplayServersList'] = false;/** * database choice in light as links * * @global boolean $cfg['DisplayDatabasesList'] */$cfg['DisplayDatabasesList'] = 'auto';/** * target of the navigation panel quick access icon * * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['LeftDefaultTabTable'] */$cfg['LeftDefaultTabTable'] = 'tbl_structure.php';/******************************************************************************* * In the main frame, at startup... *//** * allow to display statistics and space usage in the pages about database * details and table properties * * @global boolean $cfg['ShowStats'] */$cfg['ShowStats'] = true;/** * show PHP info link * * @global boolean $cfg['ShowPhpInfo'] */$cfg['ShowPhpInfo'] = false;/** * show MySQL server and web server information * * @global boolean $cfg['ShowServerInfo'] */$cfg['ShowServerInfo'] = true;/** * show change password link * * @global boolean $cfg['ShowChgPassword'] */$cfg['ShowChgPassword'] = true;/** * show create database form * * @global boolean $cfg['ShowCreateDb'] */$cfg['ShowCreateDb'] = true;/** * suggest a new DB name if possible (false = keep empty) * * @global boolean $cfg['SuggestDBName'] */$cfg['SuggestDBName'] = true;/******************************************************************************* * In browse mode... *//** * Use icons instead of text for the navigation bar buttons * and on right panel top menu (server db table) (true|false|'both') * * @global string $cfg['NavigationBarIconic'] */$cfg['NavigationBarIconic'] = true;/** * Defines whether a user should be displayed a "show all (records)" * button in browse mode or not. * * @global boolean $cfg['ShowAll'] */$cfg['ShowAll'] = false;/** * Number of rows displayed when browsing a result set. If the result * set contains more rows, "Previous" and "Next". * * @global integer $cfg['MaxRows'] */$cfg['MaxRows'] = 30;/** * default for 'ORDER BY' clause (valid values are 'ASC', 'DESC' or 'SMART' -ie * descending order for fields of type TIME, DATE, DATETIME & TIMESTAMP, * ascending order else-) * * @global string $cfg['Order'] */$cfg['Order'] = 'SMART';/** * default for 'Show binary contents as HEX' * * @global string $cfg['DisplayBinaryAsHex'] */$cfg['DisplayBinaryAsHex'] = true;/******************************************************************************* * In edit mode... *//** * disallow editing of binary fields * valid values are: *   false  allow editing *   'blob' allow editing except for BLOB fields *   'all'  disallow editing * * @global string $cfg['ProtectBinary'] */$cfg['ProtectBinary'] = 'blob';/** * Display the function fields in edit/insert mode * * @global boolean $cfg['ShowFunctionFields'] */$cfg['ShowFunctionFields'] = true;/** * Display the type fields in edit/insert mode * * @global boolean $cfg['ShowFieldTypesInDataEditView'] */$cfg['ShowFieldTypesInDataEditView'] = true;/** * Which editor should be used for CHAR/VARCHAR fields: *  input - allows limiting of input length *  textarea - allows newlines in fields * * @global string $cfg['CharEditing'] */$cfg['CharEditing'] = 'input';/** * The minimum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MinSizeForInputField'] = 4;/** * The maximum size for character input fields * * @global integer $cfg['MinSizeForInputField'] */$cfg['MaxSizeForInputField'] = 60;/** * How many rows can be inserted at one time * * @global integer $cfg['InsertRows'] */$cfg['InsertRows'] = 2;/** * Sort order for items in a foreign-key drop-down list. * 'content' is the referenced data, 'id' is the key value. * * @global array $cfg['ForeignKeyDropdownOrder'] */$cfg['ForeignKeyDropdownOrder'] = array('content-id', 'id-content');/** * A drop-down list will be used if fewer items are present * * @global integer $cfg['ForeignKeyMaxLimit'] */$cfg['ForeignKeyMaxLimit'] = 100;/******************************************************************************* * For the export features... *//** * Allow for the use of zip compression (requires zip support to be enabled) * * @global boolean $cfg['ZipDump'] */$cfg['ZipDump'] = true;/** * Allow for the use of gzip compression (requires zlib) * * @global boolean $cfg['GZipDump'] */$cfg['GZipDump'] = true;/** * Allow for the use of bzip2 compression (requires bz2 extension) * * @global boolean $cfg['BZipDump'] */$cfg['BZipDump'] = true;/** * Will compress gzip/bzip2 exports on the fly without the need for much memory. * If you encounter problems with created gzip/bzip2 files disable this feature. * * @global boolean $cfg['CompressOnFly'] */$cfg['CompressOnFly'] = true;/******************************************************************************* * Tabs display settings *//** * Use graphically less intense menu tabs * * @global boolean $cfg['LightTabs'] */$cfg['LightTabs'] = false;/** * Use icons instead of text for the table display of a database (true|false|'both') * * @global boolean $cfg['PropertiesIconic'] */$cfg['PropertiesIconic'] = 'both';/** * How many columns should be used for table display of a database? * (a value larger than 1 results in some information being hidden) * * @global integer $cfg['PropertiesNumColumns'] */$cfg['PropertiesNumColumns'] = 1;/** * Possible values: * 'main.php' = the welcome page * (recommended for multiuser setups) * 'server_databases.php' = list of databases * 'server_status.php' = runtime information * 'server_variables.php' = MySQL server variables * 'server_privileges.php' = user management * 'server_processlist.php' = process list * * @global string $cfg['DefaultTabServer'] */$cfg['DefaultTabServer'] = 'main.php';/** * Possible values: * 'db_structure.php' = tables list * 'db_sql.php' = SQL form * 'db_search.php' = search query * 'db_operations.php' = operations on database * * @global string $cfg['DefaultTabDatabase'] */$cfg['DefaultTabDatabase'] = 'db_structure.php';/** * Possible values: * 'tbl_structure.php' = fields list * 'tbl_sql.php' = SQL form * 'tbl_select.php' = search page * 'tbl_change.php' = insert row page * 'sql.php' = browse page * * @global string $cfg['DefaultTabTable'] */$cfg['DefaultTabTable'] = 'sql.php';/******************************************************************************* * Export defaults */$cfg['Export'] = array();/** * codegen/csv/excel/htmlexcel/htmlword/latex/ods/odt/pdf/sql/texytext/xls/xml/yaml * * @global string $cfg['Export']['format'] */$cfg['Export']['format'] = 'sql';/** * quick/custom/custom-no-form * * @global string $cfg['Export']['format'] */$cfg['Export']['method'] = 'quick';/** * none/zip/gzip/bzip2 * * @global string $cfg['Export']['compression'] */$cfg['Export']['compression'] = 'none';/** * * * @global boolean $cfg['Export']['asfile'] */$cfg['Export']['asfile'] = true;/** * * * @global string $cfg['Export']['charset'] */$cfg['Export']['charset'] = '';/** * * * @global boolean $cfg['Export']['onserver'] */$cfg['Export']['onserver'] = false;/** * * * @global boolean $cfg['Export']['onserver_overwrite'] */$cfg['Export']['onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver'] */$cfg['Export']['quick_export_onserver'] = false;/** * * * @global boolean $cfg['Export']['quick_export_onserver_overwrite'] */$cfg['Export']['quick_export_onserver_overwrite'] = false;/** * * * @global boolean $cfg['Export']['remember_file_template'] */$cfg['Export']['remember_file_template'] = true;/** * * * @global string $cfg['Export']['file_template_table'] */$cfg['Export']['file_template_table'] = '@TABLE@';/** * * * @global string $cfg['Export']['file_template_database'] */$cfg['Export']['file_template_database'] = '@DATABASE@';/** * * * @global string $cfg['Export']['file_template_server'] */$cfg['Export']['file_template_server'] = '@SERVER@';/** * * * @global string $cfg['Export']['codegen_structure_or_data'] */$cfg['Export']['codegen_structure_or_data'] = 'data';/** * * * @global $cfg['Export']['codegen_format'] */$cfg['Export']['codegen_format'] = 0;/** * * * @global boolean $cfg['Export']['ods_columns'] */$cfg['Export']['ods_columns'] = false;/** * * * @global string $cfg['Export']['ods_null'] */$cfg['Export']['ods_null'] = 'NULL';/** * * * @global string $cfg['Export']['odt_structure_or_data'] */$cfg['Export']['odt_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['odt_columns'] */$cfg['Export']['odt_columns'] = true;/** * * * @global boolean $cfg['Export']['odt_relation'] */$cfg['Export']['odt_relation'] = true;/** * * * @global boolean $cfg['Export']['odt_comments'] */$cfg['Export']['odt_comments'] = true;/** * * * @global boolean $cfg['Export']['odt_mime'] */$cfg['Export']['odt_mime'] = true;/** * * * @global string $cfg['Export']['odt_null'] */$cfg['Export']['odt_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['htmlword_structure_or_data'] */$cfg['Export']['htmlword_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['htmlword_columns'] */$cfg['Export']['htmlword_columns'] = false;/** * * * @global string $cfg['Export']['htmlword_null'] */$cfg['Export']['htmlword_null'] = 'NULL';/** * * * @global string $cfg['Export']['texytext_structure_or_data'] */$cfg['Export']['texytext_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['texytext_columns'] */$cfg['Export']['texytext_columns'] = false;/** * * * @global string $cfg['Export']['texytext_null'] */$cfg['Export']['texytext_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xls_columns'] */$cfg['Export']['xls_columns'] = false;/** * * * @global string $cfg['Export']['xls_structure_or_data'] */$cfg['Export']['xls_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xls_null'] */$cfg['Export']['xls_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['xlsx_columns'] */$cfg['Export']['xlsx_columns'] = false;/** * * * @global string $cfg['Export']['xlsx_structure_or_data'] */$cfg['Export']['xlsx_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['xlsx_null'] */$cfg['Export']['xlsx_null'] = 'NULL';/** * * * @global boolean $cfg['Export']['csv_columns'] */$cfg['Export']['csv_columns'] = false;/** * * * @global string $cfg['Export']['csv_structure_or_data'] */$cfg['Export']['csv_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['csv_null'] */$cfg['Export']['csv_null'] = 'NULL';/** * * * @global string $cfg['Export']['csv_separator'] */$cfg['Export']['csv_separator'] = ',';/** * * * @global string $cfg['Export']['csv_enclosed'] */$cfg['Export']['csv_enclosed'] = '"';/** * * * @global string $cfg['Export']['csv_escaped'] */$cfg['Export']['csv_escaped'] = '"';/** * * * @global string $cfg['Export']['csv_terminated'] */$cfg['Export']['csv_terminated'] = 'AUTO';/** * * * @global string $cfg['Export']['csv_removeCRLF'] */$cfg['Export']['csv_removeCRLF'] = false;/** * * * @global boolean $cfg['Export']['excel_columns'] */$cfg['Export']['excel_columns'] = false;/** * * * @global string $cfg['Export']['excel_null'] */$cfg['Export']['excel_null'] = 'NULL';/** * win/mac * * @global string $cfg['Export']['excel_edition'] */$cfg['Export']['excel_edition'] = 'win';/** * * * @global string $cfg['Export']['excel_removeCRLF'] */$cfg['Export']['excel_removeCRLF'] = false;/** * * * @global string $cfg['Export']['excel_structure_or_data'] */$cfg['Export']['excel_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['latex_structure_or_data'] */$cfg['Export']['latex_structure_or_data'] = 'structure_and_data';/** * * * @global boolean $cfg['Export']['latex_columns'] */$cfg['Export']['latex_columns'] = true;/** * * * @global boolean $cfg['Export']['latex_relation'] */$cfg['Export']['latex_relation'] = true;/** * * * @global boolean $cfg['Export']['latex_comments'] */$cfg['Export']['latex_comments'] = true;/** * * * @global boolean $cfg['Export']['latex_mime'] */$cfg['Export']['latex_mime'] = true;/** * * * @global string $cfg['Export']['latex_null'] */$cfg['Export']['latex_null'] = '\textit{NULL}';/** * * * @global boolean $cfg['Export']['latex_caption'] */$cfg['Export']['latex_caption'] = true;/** * * * @global string $cfg['Export']['latex_structure_caption'] */$cfg['Export']['latex_structure_caption'] = 'strLatexStructure';/** * * * @global string $cfg['Export']['latex_structure_continued_caption'] */$cfg['Export']['latex_structure_continued_caption'] = 'strLatexStructure strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_caption'] */$cfg['Export']['latex_data_caption'] = 'strLatexContent';/** * * * @global string $cfg['Export']['latex_data_continued_caption'] */$cfg['Export']['latex_data_continued_caption'] = 'strLatexContent strLatexContinued';/** * * * @global string $cfg['Export']['latex_data_label'] */$cfg['Export']['latex_data_label'] = 'tab:@TABLE@-data';/** * * * @global string $cfg['Export']['latex_structure_label'] */$cfg['Export']['latex_structure_label'] = 'tab:@TABLE@-structure';/** * * * @global string $cfg['Export']['mediawiki_structure_or_data'] */$cfg['Export']['mediawiki_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['ods_structure_or_data'] */$cfg['Export']['ods_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['pdf_structure_or_data'] */$cfg['Export']['pdf_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['php_array_structure_or_data'] */$cfg['Export']['php_array_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['json_structure_or_data'] */$cfg['Export']['json_structure_or_data'] = 'data';/** * * * @global string $cfg['Export']['sql_structure_or_data'] */$cfg['Export']['sql_structure_or_data'] = 'structure_and_data';/** * * * @global string $cfg['Export']['sql_compatibility'] */$cfg['Export']['sql_compatibility'] = 'NONE';/** * Whether to include comments in SQL export. * * @global string $cfg['Export']['sql_include_comments'] */$cfg['Export']['sql_include_comments'] = true;/** * * * @global boolean $cfg['Export']['sql_disable_fk'] */$cfg['Export']['sql_disable_fk'] = false;/** * * * @global boolean $cfg['Export']['sql_use_transaction'] */$cfg['Export']['sql_use_transaction'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_database'] */$cfg['Export']['sql_drop_database'] = false;/** * * * @global boolean $cfg['Export']['sql_drop_table'] */$cfg['Export']['sql_drop_table'] = false;/** * * * true by default for correct behavior when dealing with exporting * of VIEWs and the stand-in table * @global boolean $cfg['Export']['sql_if_not_exists'] */$cfg['Export']['sql_if_not_exists'] = true;/** * * * @global boolean $cfg['Export']['sql_procedure_function'] */$cfg['Export']['sql_procedure_function'] = true;/** * * * @global boolean $cfg['Export']['sql_auto_increment'] */$cfg['Export']['sql_auto_increment'] = true;/** * * * @global boolean $cfg['Export']['sql_backquotes'] */$cfg['Export']['sql_backquotes'] = true;/** * * * @global boolean $cfg['Export']['sql_dates'] */$cfg['Export']['sql_dates'] = false;/** * * * @global boolean $cfg['Export']['sql_relation'] */$cfg['Export']['sql_relation'] = false;/** * * * @global boolean $cfg['Export']['sql_delayed'] */$cfg['Export']['sql_delayed'] = false;/** * * * @global boolean $cfg['Export']['sql_ignore'] */$cfg['Export']['sql_ignore'] = false;/** * Export time in UTC. * * @global boolean $cfg['Export']['sql_utc_time'] */$cfg['Export']['sql_utc_time'] = true;/** * * * @global boolean $cfg['Export']['sql_hex_for_blob'] */$cfg['Export']['sql_hex_for_blob'] = true;/** * insert/update/replace * * @global string $cfg['Export']['sql_type'] */$cfg['Export']['sql_type'] = 'INSERT';/** * * * @global integer $cfg['Export']['sql_max_query_size'] */$cfg['Export']['sql_max_query_size'] = 50000;/** * * * @global boolean $cfg['Export']['sql_comments'] */$cfg['Export']['sql_comments'] = false;/** * * * @global boolean $cfg['Export']['sql_mime'] */$cfg['Export']['sql_mime'] = false;/** * \n is replaced by new line * * @global string $cfg['Export']['sql_header_comment'] */$cfg['Export']['sql_header_comment'] = '';/** * * * @global boolean $cfg['Export']['sql_create_table_statements'] */$cfg['Export']['sql_create_table_statements'] = true;/** * Whether to use complete inserts, extended inserts, both, or neither * * @global string $cfg['Export']['sql_insert_syntax'] */$cfg['Export']['sql_insert_syntax'] = 'both';/** * * * @global string $cfg['Export']['pdf_report_title'] */$cfg['Export']['pdf_report_title'] = '';/** * * *@global string $cfg['Export']['xml_structure_or_data'] */$cfg['Export']['xml_structure_or_data'] = 'data';/** * Export schema for each structure * * @global string $cfg['Export']['xml_export_struc'] */$cfg['Export']['xml_export_struc'] = true;/** * Export functions * * @global string $cfg['Export']['xml_export_functions'] */$cfg['Export']['xml_export_functions'] = true;/** * Export procedures * * @global string $cfg['Export']['xml_export_procedures'] */$cfg['Export']['xml_export_procedures'] = true;/** * Export schema for each table * * @global string $cfg['Export']['xml_export_tables'] */$cfg['Export']['xml_export_tables'] = true;/** * Export triggers * * @global string $cfg['Export']['xml_export_triggers'] */$cfg['Export']['xml_export_triggers'] = true;/** * Export views * * @global string $cfg['Export']['xml_export_views'] */$cfg['Export']['xml_export_views'] = true;/** * Export contents data * * @global string $cfg['Export']['xml_export_contents'] */$cfg['Export']['xml_export_contents'] = true;/** * * * @global string $cfg['Export']['yaml_structure_or_data'] */$cfg['Export']['yaml_structure_or_data'] = 'data';/******************************************************************************* * Import defaults */$cfg['Import'] = array();/** * * * @global string $cfg['Import']['format'] */$cfg['Import']['format'] = 'sql';/** * Default charset for import. * * @global string $cfg['Import']['charset'] */$cfg['Import']['charset'] = '';/** * * * @global boolean $cfg['Import']['allow_interrupt'] */$cfg['Import']['allow_interrupt'] = true;/** * * * @global integer $cfg['Import']['skip_queries'] */$cfg['Import']['skip_queries'] = 0;/** * * * @global string $cfg['Import']['sql_compatibility'] */$cfg['Import']['sql_compatibility'] = 'NONE';/** * * * @global string $cfg['Import']['sql_no_auto_value_on_zero'] */$cfg['Import']['sql_no_auto_value_on_zero'] = true;/** * * * @global boolean $cfg['Import']['csv_replace'] */$cfg['Import']['csv_replace'] = false;/** * * * @global boolean $cfg['Import']['csv_ignore'] */$cfg['Import']['csv_ignore'] = false;/** * * * @global string $cfg['Import']['csv_terminated'] */$cfg['Import']['csv_terminated'] = ',';/** * * * @global string $cfg['Import']['csv_enclosed'] */$cfg['Import']['csv_enclosed'] = '"';/** * * * @global string $cfg['Import']['csv_escaped'] */$cfg['Import']['csv_escaped'] = '"';/** * * * @global string $cfg['Import']['csv_new_line'] */$cfg['Import']['csv_new_line'] = 'auto';/** * * * @global string $cfg['Import']['csv_columns'] */$cfg['Import']['csv_columns'] = '';/** * * * @global string $cfg['Import']['csv_col_names'] */$cfg['Import']['csv_col_names'] = false;/** * * * @global boolean $cfg['Import']['ldi_replace'] */$cfg['Import']['ldi_replace'] = false;/** * * * @global boolean $cfg['Import']['ldi_ignore'] */$cfg['Import']['ldi_ignore'] = false;/** * * * @global string $cfg['Import']['ldi_terminated'] */$cfg['Import']['ldi_terminated'] = ';';/** * * * @global string $cfg['Import']['ldi_enclosed'] */$cfg['Import']['ldi_enclosed'] = '"';/** * * * @global string $cfg['Import']['ldi_escaped'] */$cfg['Import']['ldi_escaped'] = '\\';/** * * * @global string $cfg['Import']['ldi_new_line'] */$cfg['Import']['ldi_new_line'] = 'auto';/** * * * @global string $cfg['Import']['ldi_columns'] */$cfg['Import']['ldi_columns'] = '';/** * 'auto' for auto-detection, true or false for forcing * * @global string $cfg['Import']['ldi_local_option'] */$cfg['Import']['ldi_local_option'] = 'auto';/** * * * @global string $cfg['Import']['ods_col_names'] */$cfg['Import']['ods_col_names'] = false;/** * * * @global string $cfg['Import']['ods_empty_rows'] */$cfg['Import']['ods_empty_rows'] = true;/** * * * @global string $cfg['Import']['ods_recognize_percentages'] */$cfg['Import']['ods_recognize_percentages'] = true;/** * * * @global string $cfg['Import']['ods_recognize_currency'] */$cfg['Import']['ods_recognize_currency'] = true;/** * * * @global string $cfg['Import']['xml_col_names'] */$cfg['Import']['xls_col_names'] = false;/** * * * @global string $cfg['Import']['xml_empty_rows'] */$cfg['Import']['xls_empty_rows'] = true;/** * * * @global string $cfg['Import']['xlsx_col_names'] */$cfg['Import']['xlsx_col_names'] = false;/** * Link to the official MySQL documentation. * Be sure to include no trailing slash on the path. * See http://dev.mysql.com/doc/ for more information * about MySQL manuals and their types. * * @global string $cfg['MySQLManualBase'] */$cfg['MySQLManualBase'] = 'http://dev.mysql.com/doc/refman';/** * Type of MySQL documentation: *   viewable   - "viewable online", current one used on MySQL website *   searchable - "Searchable, with user comments" *   chapters   - "HTML, one page per chapter" *   chapters_old - "HTML, one page per chapter", format used prior to MySQL 5.0 release *   big        - "HTML, all on one page" *   old        - old style used in phpMyAdmin 2.3.0 and sooner *   none       - do not show documentation links * * @global string $cfg['MySQLManualType'] */$cfg['MySQLManualType'] = 'viewable';/******************************************************************************* * PDF options *//** * * * @global array $cfg['PDFPageSizes'] */$cfg['PDFPageSizes'] = array('A3', 'A4', 'A5', 'letter', 'legal');/** * * * @global string $cfg['PDFDefaultPageSize'] */$cfg['PDFDefaultPageSize'] = 'A4';/******************************************************************************* * Language and character set conversion settings *//** * Default language to use, if not browser-defined or user-defined * * @global string $cfg['DefaultLang'] */$cfg['DefaultLang'] = 'en';/** * Default connection collation * * @global string $cfg['DefaultConnectionCollation'] */$cfg['DefaultConnectionCollation'] = 'utf8_general_ci';/** * Force: always use this language * $cfg['Lang'] = 'en'; * * Regular expression to limit listed languages, e.g. '^(cs|en)' for Czech and * English only * * @global string $cfg['FilterLanguages'] */$cfg['FilterLanguages'] = '';/** * You can select here which functions will be used for character set conversion. * Possible values are: *      auto   - automatically use available one (first is tested iconv, then *               recode) *      iconv  - use iconv or libiconv functions *      recode - use recode_string function *      none   - disable encoding conversion * * @global string $cfg['RecodingEngine'] */$cfg['RecodingEngine'] = 'auto';/** * Specify some parameters for iconv used in character set conversion. See iconv * documentation for details: * http://www.gnu.org/software/libiconv/documentation/libiconv/iconv_open.3.html * * @global string $cfg['IconvExtraParams'] */$cfg['IconvExtraParams'] = '//TRANSLIT';/** * Available character sets for MySQL conversion. currently contains all which could * be found in lang/* files and few more. * Character sets will be shown in same order as here listed, so if you frequently * use some of these move them to the top. * * @global array $cfg['AvailableCharsets'] */$cfg['AvailableCharsets'] = array(    'iso-8859-1',    'iso-8859-2',    'iso-8859-3',    'iso-8859-4',    'iso-8859-5',    'iso-8859-6',    'iso-8859-7',    'iso-8859-8',    'iso-8859-9',    'iso-8859-10',    'iso-8859-11',    'iso-8859-12',    'iso-8859-13',    'iso-8859-14',    'iso-8859-15',    'windows-1250',    'windows-1251',    'windows-1252',    'windows-1256',    'windows-1257',    'koi8-r',    'big5',    'gb2312',    'utf-16',    'utf-8',    'utf-7',    'x-user-defined',    'euc-jp',    'ks_c_5601-1987',    'tis-620',    'SHIFT_JIS');/******************************************************************************* * Customization & design * * The graphical settings are now located in themes/theme-name/layout.inc.php *//** * enable the left panel pointer * (used when LeftFrameLight is false) * see also LeftPointerColor * in layout.inc.php * * @global boolean $cfg['LeftPointerEnable'] */$cfg['LeftPointerEnable'] = true;/** * enable the browse pointer * see also BrowsePointerColor * in layout.inc.php * * @global boolean $cfg['BrowsePointerEnable'] */$cfg['BrowsePointerEnable'] = true;/** * enable the browse marker * see also BrowseMarkerColor * in layout.inc.php * * @global boolean $cfg['BrowseMarkerEnable'] */$cfg['BrowseMarkerEnable'] = true;/** * textarea size (columns) in edit mode * (this value will be emphasized (*2) for SQL * query textareas and (*1.25) for query window) * * @global integer $cfg['TextareaCols'] */$cfg['TextareaCols'] = 40;/** * textarea size (rows) in edit mode * * @global integer $cfg['TextareaRows'] */$cfg['TextareaRows'] = 15;/** * double size of textarea size for LONGTEXT columns * * @global boolean $cfg['LongtextDoubleTextarea'] */$cfg['LongtextDoubleTextarea'] = true;/** * auto-select when clicking in the textarea of the query-box * * @global boolean $cfg['TextareaAutoSelect'] */$cfg['TextareaAutoSelect'] = false;/** * textarea size (columns) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaCols'] */$cfg['CharTextareaCols'] = 40;/** * textarea size (rows) for CHAR/VARCHAR * * @global integer $cfg['CharTextareaRows'] */$cfg['CharTextareaRows'] = 2;/** * Max field data length in browse mode for all non-numeric fields * * @global integer $cfg['LimitChars'] */$cfg['LimitChars'] = 50;/** * Where to show the edit/copy/delete links in browse mode * Possible values are 'left', 'right', 'both' and 'none'; * which will be interpreted as 'top', 'bottom', 'both' and 'none' * respectively for vertical display mode * * @global string $cfg['RowActionLinks'] */$cfg['RowActionLinks'] = 'left';/** * default display direction (horizontal|vertical|horizontalflipped) * * @global string $cfg['DefaultDisplay'] */$cfg['DefaultDisplay'] = 'horizontal';/** * remember the last way a table sorted * * @global string $cfg['RememberSorting'] */$cfg['RememberSorting'] = true;/** * table-header rotation via faking or CSS? (css|fake|auto) * NOTE: CSS only works in IE browsers! * * @global string $cfg['HeaderFlipType'] */$cfg['HeaderFlipType'] = 'auto';/** * shows stored relation-comments in 'browse' mode. * * @global boolean $cfg['ShowBrowseComments'] */$cfg['ShowBrowseComments'] = true;/** * shows stored relation-comments in 'table property' mode. * * @global boolean $cfg['ShowPropertyComments'] */$cfg['ShowPropertyComments']= true;/** * save edited cell(s) in browse-mode at once. */$cfg['SaveCellsAtOnce'] = false;/** * shows table display direction. */$cfg['ShowDisplayDirection'] = false;/** * repeat header names every X cells? (0 = deactivate) * * @global integer $cfg['RepeatCells'] */$cfg['RepeatCells'] = 100;/** * Set to true if Edit link should open the query to edit in the query window * (assuming JavaScript is enabled), and to false if we should edit in the right panel * * @global boolean $cfg['EditInWindow'] */$cfg['EditInWindow'] = true;/** * Width of Query window * * @global integer $cfg['QueryWindowWidth'] */$cfg['QueryWindowWidth'] = 550;/** * Height of Query window * * @global integer $cfg['QueryWindowHeight'] */$cfg['QueryWindowHeight'] = 310;/** * Set to true if you want DB-based query history.If false, this utilizes * JS-routines to display query history (lost by window close) * * @global boolean $cfg['QueryHistoryDB'] */$cfg['QueryHistoryDB'] = false;/** * which tab to display in the querywindow on startup * (sql|files|history|full) * * @global string $cfg['QueryWindowDefTab'] */$cfg['QueryWindowDefTab'] = 'sql';/** * When using DB-based query history, how many entries should be kept? * * @global integer $cfg['QueryHistoryMax'] */$cfg['QueryHistoryMax'] = 25;/** * Use MIME-Types (stored in column comments table) for * * @global boolean $cfg['BrowseMIME'] */$cfg['BrowseMIME'] = true;/** * When approximate count < this, PMA will get exact count for table rows. * * @global integer $cfg['MaxExactCount'] */$cfg['MaxExactCount'] = 20000;/** * Zero means that no row count is done for views; see the doc * * @global integer $cfg['MaxExactCountViews'] */$cfg['MaxExactCountViews'] = 100000;/** * Sort table and database in natural order * * @global boolean $cfg['NaturalOrder'] */$cfg['NaturalOrder'] = true;/** * Initial state for sliders * (open | closed | disabled) * * @global string $cfg['InitialSlidersState'] */$cfg['InitialSlidersState'] = 'closed';/** * User preferences: disallow these settings * For possible setting names look in libraries/config/user_preferences.forms.php * * @global array $cfg['UserprefsDisallow'] */$cfg['UserprefsDisallow'] = array();/** * User preferences: enable the Developer tab */$cfg['UserprefsDeveloperTab'] = false;/******************************************************************************* * Window title settings *//** * title of browser window when a table is selected * * @global string $cfg['TitleTable'] */$cfg['TitleTable'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ / @TABLE@ | @PHPMYADMIN@';/** * title of browser window when a database is selected * * @global string $cfg['TitleDatabase'] */$cfg['TitleDatabase'] = '@HTTP_HOST@ / @VSERVER@ / @DATABASE@ | @PHPMYADMIN@';/** * title of browser window when a server is selected * * @global string $cfg['TitleServer'] */$cfg['TitleServer'] = '@HTTP_HOST@ / @VSERVER@ | @PHPMYADMIN@';/** * title of browser window when nothing is selected * @global string $cfg['TitleDefault'] */$cfg['TitleDefault'] = '@HTTP_HOST@ | @PHPMYADMIN@';/** * show some icons for warning, error and information messages (true|false)? * * @global boolean $cfg['ErrorIconic'] */$cfg['ErrorIconic'] = true;/** * show icons in list on main page and on menu tabs (true|false)? * * @global boolean $cfg['MainPageIconic'] */$cfg['MainPageIconic'] = true;/** * show help button instead of Documentation text (true|false)? * * @global boolean $cfg['ReplaceHelpImg'] */$cfg['ReplaceHelpImg'] = true;/******************************************************************************* * theme manager *//** * using themes manager please set up here the path to 'themes' else leave empty * * @global string $cfg['ThemePath'] */$cfg['ThemePath'] = './themes';/** * if you want to use selectable themes and if ThemesPath not empty * set it to true, else set it to false (default is false); * * @global boolean $cfg['ThemeManager'] */$cfg['ThemeManager'] = true;/** * set up default theme, if ThemePath not empty you can set up here an valid * path to themes or 'original' for the original pma-theme * * @global string $cfg['ThemeDefault'] */$cfg['ThemeDefault'] = 'pmahomme';/** * allow different theme for each configured server * * @global boolean $cfg['ThemePerServer'] */$cfg['ThemePerServer'] = false;/******************************************************************************* * *//** * Default query for table * * @global string $cfg['DefaultQueryTable'] */$cfg['DefaultQueryTable'] = 'SELECT * FROM @TABLE@ WHERE 1';/** * Default query for database * * @global string $cfg['DefaultQueryDatabase'] */$cfg['DefaultQueryDatabase'] = '';/******************************************************************************* * SQL Query box settings * These are the links display in all of the SQL Query boxes * * @global array $cfg['SQLQuery'] */$cfg['SQLQuery'] = array();/** * Edit link to change a query * * @global boolean $cfg['SQLQuery']['Edit'] */$cfg['SQLQuery']['Edit'] = true;/** * EXPLAIN on SELECT queries * * @global boolean $cfg['SQLQuery']['Explain'] */$cfg['SQLQuery']['Explain'] = true;/** * Wrap a query in PHP * * @global boolean $cfg['SQLQuery']['ShowAsPHP'] */$cfg['SQLQuery']['ShowAsPHP'] = true;/** * Validate a query (see $cfg['SQLValidator'] as well) * * @global boolean $cfg['SQLQuery']['Validate'] */$cfg['SQLQuery']['Validate'] = false;/** * Refresh the results page * * @global boolean $cfg['SQLQuery']['Refresh'] */$cfg['SQLQuery']['Refresh'] = true;/******************************************************************************* * Web server upload/save/import directories *//** * Directory for uploaded files that can be executed by phpMyAdmin. * For example './upload'. Leave empty for no upload directory support. * Use %u for username inclusion. * * @global string $cfg['UploadDir'] */$cfg['UploadDir'] = '';/** * Directory where phpMyAdmin can save exported data on server. * For example './save'. Leave empty for no save directory support. * Use %u for username inclusion. * * @global string $cfg['SaveDir'] */$cfg['SaveDir'] = '';/** * Directory where phpMyAdmin can save temporary files. * This is needed for MS Excel export, see documentation how to enable that. * * @global string $cfg['TempDir'] */$cfg['TempDir'] = '';/** * Misc. settings *//** * Is GD >= 2 available? Set to yes/no/auto. 'auto' does auto-detection, * which is the only safe way to determine GD version. * * @global string $cfg['GD2Available'] */$cfg['GD2Available'] = 'auto';/** * Lists proxy IP and HTTP header combinations which are trusted for IP allow/deny * * @global array $cfg['TrustedProxies'] */$cfg['TrustedProxies'] = array();/** * We normally check the permissions on the configuration file to ensure * it's not world writable. However, phpMyAdmin could be installed on * a NTFS filesystem mounted on a non-Windows server, in which case the * permissions seems wrong but in fact cannot be detected. In this case * a sysadmin would set the following to false. */$cfg['CheckConfigurationPermissions'] = true;/** * Limit for length of URL in links. When length would be above this limit, it * is replaced by form with button. * This is required as some web servers (IIS) have problems with long URLs. * The recommended limit is 2000 * (see http://www.boutell.com/newfaq/misc/urllength.html) but we put * 1000 to accommodate Suhosin, see bug #3358750. */$cfg['LinkLengthLimit'] = 1000;/** * Disable the table maintenance mass operations, like optimizing or * repairing the selected tables of a database. An accidental execution * of such a maintenance task can enormously slow down a bigger database. */$cfg['DisableMultiTableMaintenance'] = false;/******************************************************************************* * SQL Parser Settings * * @global array $cfg['SQP'] */$cfg['SQP'] = array();/** * Pretty-printing style to use on queries (html, text, none) * * @global string $cfg['SQP']['fmtType'] */$cfg['SQP']['fmtType'] = 'html';/** * Amount to indent each level (floats are valid) * * @global integer $cfg['SQP']['fmtInd'] */$cfg['SQP']['fmtInd'] = '1';/** * Units for indenting each level (CSS Types - {em, px, pt}) * * @global string $cfg['SQP']['fmtIndUnit'] */$cfg['SQP']['fmtIndUnit'] = 'em';/******************************************************************************* * If you wish to use the SQL Validator service, you should be aware of the * following: * All SQL statements are stored anonymously for statistical purposes. * Mimer SQL Validator, Copyright 2002 Upright Database Technology. * All rights reserved. * * @global array $cfg['SQLValidator'] */$cfg['SQLValidator'] = array();/** * Make the SQL Validator available * * @global boolean $cfg['SQLValidator']['use'] */$cfg['SQLValidator']['use'] = false;/** * If you have a custom username, specify it here (defaults to anonymous) * * @global string $cfg['SQLValidator']['username'] */$cfg['SQLValidator']['username'] = '';/** * Password for username * * @global string $cfg['SQLValidator']['password'] */$cfg['SQLValidator']['password'] = '';/******************************************************************************* * Developers ONLY! * * @global array $cfg['DBG'] */$cfg['DBG'] = array();/** * Output executed queries and their execution times * * @global boolean $cfg['DBG']['sql'] */$cfg['DBG']['sql'] = false;/******************************************************************************* * MySQL settings *//** * Column types; * VARCHAR, TINYINT, TEXT and DATE are listed first, based on estimated popularity * * This variable is filled in data_*.inc.php * * @global array $cfg['ColumnTypes'] */$cfg['ColumnTypes'] = array();/** * Attributes * * This variable is filled in data_*.inc.php * * @global array $cfg['AttributeTypes'] */$cfg['AttributeTypes'] = array();if ($cfg['ShowFunctionFields']) {    /**     * Available functions     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['Functions']     */    $cfg['Functions'] = array();    /**     * Which column types will be mapped to which Group?     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictColumnTypes']     */    $cfg['RestrictColumnTypes'] = array();    /**     * Map above defined groups to any function     *     * This variable is filled in data_*.inc.php     *     * @global array $cfg['RestrictFunctions']     */    $cfg['RestrictFunctions'] = array();    /**     * Default functions for above defined groups     *     * @global array $cfg['DefaultFunctions']     */    $cfg['DefaultFunctions'] = array(        'FUNC_CHAR' => '',        'FUNC_DATE' => '',        'FUNC_NUMBER' => '',        'FUNC_SPATIAL' => 'GeomFromText',        'FUNC_UUID' => 'UUID',        'first_timestamp' => 'NOW',    );} // end if/** * Search operators * * @global array $cfg['NumOperators'] */$cfg['NumOperators'] = array(   '=',   '>',   '>=',   '<',   '<=',   '!=',   'LIKE',   'NOT LIKE',   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['TextOperators'] */$cfg['TextOperators'] = array(   'LIKE',   'LIKE %...%',   'NOT LIKE',   '=',   '!=',   'REGEXP',   'REGEXP ^...$',   'NOT REGEXP',   "= ''",   "!= ''",   'IN (...)',   'NOT IN (...)',   'BETWEEN',   'NOT BETWEEN',);/** * Search operators * * @global array $cfg['EnumOperators'] */$cfg['EnumOperators'] = array(   '=',   '!=',);/** * Search operators * * @global array $cfg['SetOperators'] */$cfg['SetOperators'] = array(   'IN',   'NOT IN',);/** * Search operators * * @global array $cfg['NullOperators'] */$cfg['NullOperators'] = array(   'IS NULL',   'IS NOT NULL',);/** * Search operators * * @global array $cfg['UnaryOperators'] */$cfg['UnaryOperators'] = array(   'IS NULL' => 1,   'IS NOT NULL' => 1,   "= ''" => 1,   "!= ''" => 1);/** * Max rows retreived for zoom search */$cfg['maxRowPlotLimit'] = 500;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */// sometimes, we lose $_REQUEST['js_frame']define('PMA_FRAME', (! empty($_REQUEST['js_frame']) && is_string($_REQUEST['js_frame'])) ? $_REQUEST['js_frame'] : 'right');define('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';require_once './libraries/sqlparser.lib.php';// MSIE 6 (at least some unpatched versions) has problems loading CSS// when zlib_compression is onif (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER == '6' && (ini_get('zlib.output_compression'))) {    @ini_set('zlib.output_compression', 'Off');}if ($GLOBALS['text_dir'] === 'ltr') {    $right = 'right';    $left = 'left';} else {    $right = 'left';    $left = 'right';}// Send correct type:header('Content-Type: text/css; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');$_SESSION['PMA_Theme_Manager']->printCss(PMA_FRAME);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * library for displaying table with results from all sort of select queries * * @package PhpMyAdmin *//** * */require_once './libraries/Index.class.php';/** * Defines the display mode to use for the results of a SQL query * * It uses a synthetic string that contains all the required informations. * In this string: *   - the first two characters stand for the action to do while *     clicking on the "edit" link (e.g. 'ur' for update a row, 'nn' for no *     edit link...); *   - the next two characters stand for the action to do while *     clicking on the "delete" link (e.g. 'kp' for kill a process, 'nn' for *     no delete link...); *   - the next characters are boolean values (1/0) and respectively stand *     for sorting links, navigation bar, "insert a new row" link, the *     bookmark feature, the expand/collapse text/blob fields button and *     the "display printable view" option. *     Of course '0'/'1' means the feature won't/will be enabled. * * @param string  &$the_disp_mode the synthetic value for display_mode (see a few *                                lines above for explanations) * @param integer &$the_total     the total number of rows returned by the SQL query *                                without any programmatically appended "LIMIT" clause *                                (just a copy of $unlim_num_rows if it exists, else *                                computed inside this function) * * @return  array    an array with explicit indexes for all the display *                   elements * * @global  string   the database name * @global  string   the table name * @global  integer  the total number of rows returned by the SQL query *                   without any programmatically appended "LIMIT" clause * @global  array    the properties of the fields returned by the query * @global  string   the URL to return to in case of error in a SQL *                   statement * * @access  private * * @see     PMA_displayTable() */function PMA_setDisplayMode(&$the_disp_mode, &$the_total){    global $db, $table;    global $unlim_num_rows, $fields_meta;    global $err_url;    // 1. Initializes the $do_display array    $do_display              = array();    $do_display['edit_lnk']  = $the_disp_mode[0] . $the_disp_mode[1];    $do_display['del_lnk']   = $the_disp_mode[2] . $the_disp_mode[3];    $do_display['sort_lnk']  = (string) $the_disp_mode[4];    $do_display['nav_bar']   = (string) $the_disp_mode[5];    $do_display['ins_row']   = (string) $the_disp_mode[6];    $do_display['bkm_form']  = (string) $the_disp_mode[7];    $do_display['text_btn']  = (string) $the_disp_mode[8];    $do_display['pview_lnk'] = (string) $the_disp_mode[9];    // 2. Display mode is not "false for all elements" -> updates the    // display mode    if ($the_disp_mode != 'nnnn000000') {        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            // 2.0 Print view -> set all elements to false!            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '0';            $do_display['text_btn']  = (string) '0';            $do_display['pview_lnk'] = (string) '0';        } elseif ($GLOBALS['is_count'] || $GLOBALS['is_analyse']            || $GLOBALS['is_maint'] || $GLOBALS['is_explain']            ) {            // 2.1 Statement is a "SELECT COUNT", a            //     "CHECK/ANALYZE/REPAIR/OPTIMIZE", an "EXPLAIN" one or            //     contains a "PROC ANALYSE" part            $do_display['edit_lnk']  = 'nn'; // no edit link            $do_display['del_lnk']   = 'nn'; // no delete link            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            if ($GLOBALS['is_maint']) {                $do_display['text_btn']  = (string) '1';            } else {                $do_display['text_btn']  = (string) '0';            }            $do_display['pview_lnk'] = (string) '1';        } elseif ($GLOBALS['is_show']) {            // 2.2 Statement is a "SHOW..."            /**             * 2.2.1             * @todo defines edit/delete links depending on show statement             */            $tmp = preg_match('@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS)@i', $GLOBALS['sql_query'], $which);            if (isset($which[1]) && strpos(' ' . strtoupper($which[1]), 'PROCESSLIST') > 0) {                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'kp'; // "kill process" type edit link            } else {                // Default case -> no links                $do_display['edit_lnk'] = 'nn'; // no edit link                $do_display['del_lnk']  = 'nn'; // no delete link            }            // 2.2.2 Other settings            $do_display['sort_lnk']  = (string) '0';            $do_display['nav_bar']   = (string) '0';            $do_display['ins_row']   = (string) '0';            $do_display['bkm_form']  = (string) '1';            $do_display['text_btn']  = (string) '1';            $do_display['pview_lnk'] = (string) '1';        } else {            // 2.3 Other statements (ie "SELECT" ones) -> updates            //     $do_display['edit_lnk'], $do_display['del_lnk'] and            //     $do_display['text_btn'] (keeps other default values)            $prev_table = $fields_meta[0]->table;            $do_display['text_btn']  = (string) '1';            for ($i = 0; $i < $GLOBALS['fields_cnt']; $i++) {                $is_link = ($do_display['edit_lnk'] != 'nn'                            || $do_display['del_lnk'] != 'nn'                            || $do_display['sort_lnk'] != '0'                            || $do_display['ins_row'] != '0');                // 2.3.2 Displays edit/delete/sort/insert links?                if ($is_link                    && ($fields_meta[$i]->table == '' || $fields_meta[$i]->table != $prev_table)                ) {                    $do_display['edit_lnk'] = 'nn'; // don't display links                    $do_display['del_lnk']  = 'nn';                    /**                     * @todo May be problematic with same fields names in two joined table.                     */                    // $do_display['sort_lnk'] = (string) '0';                    $do_display['ins_row']  = (string) '0';                    if ($do_display['text_btn'] == '1') {                        break;                    }                } // end if (2.3.2)                // 2.3.3 Always display print view link                $do_display['pview_lnk']    = (string) '1';                $prev_table = $fields_meta[$i]->table;            } // end for        } // end if..elseif...else (2.1 -> 2.3)    } // end if (2)    // 3. Gets the total number of rows if it is unknown    if (isset($unlim_num_rows) && $unlim_num_rows != '') {        $the_total = $unlim_num_rows;    } elseif (($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1')             && (strlen($db) && !empty($table))) {        $the_total   = PMA_Table::countRecords($db, $table);    }    // 4. If navigation bar or sorting fields names URLs should be    //    displayed but there is only one row, change these settings to    //    false    if ($do_display['nav_bar'] == '1' || $do_display['sort_lnk'] == '1') {        // - Do not display sort links if less than 2 rows.        // - For a VIEW we (probably) did not count the number of rows        //   so don't test this number here, it would remove the possibility        //   of sorting VIEW results.        if (isset($unlim_num_rows) && $unlim_num_rows < 2 && ! PMA_Table::isView($db, $table)) {            // force display of navbar for vertical/horizontal display-choice.            // $do_display['nav_bar']  = (string) '0';            $do_display['sort_lnk'] = (string) '0';        }    } // end if (3)    // 5. Updates the synthetic var    $the_disp_mode = join('', $do_display);    return $do_display;} // end of the 'PMA_setDisplayMode()' function/** * Return true if we are executing a query in the form of * "SELECT * FROM <a table> ..." * * @return boolean */function PMA_isSelect(){    // global variables set from sql.php    global $is_count, $is_export, $is_func, $is_analyse;    global $analyzed_sql;    return ! ($is_count || $is_export || $is_func || $is_analyse)        && count($analyzed_sql[0]['select_expr']) == 0        && isset($analyzed_sql[0]['queryflags']['select_from'])        && count($analyzed_sql[0]['table_ref']) == 1;}/** * Displays a navigation button * * @param string  $caption            iconic caption for button * @param string  $title              text for button * @param integer $pos                position for next query * @param string  $html_sql_query     query ready for display * @param string  $onsubmit           optional onsubmit clause * @param string  $input_for_real_end optional hidden field for special treatment * @param string  $onclick            optional onclick clause * * @return nothing * * @global string   $db             the database name * @global string   $table          the table name * @global string   $goto           the URL to go back in case of errors * * @access private * * @see     PMA_displayTableNavigation() */function PMA_displayTableNavigationOneButton($caption, $title, $pos, $html_sql_query, $onsubmit = '', $input_for_real_end = '', $onclick = ''){    global $db, $table, $goto;    $caption_output = '';    // for true or 'both'    if ($GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= $caption;    }    // for false or 'both'    if (false === $GLOBALS['cfg']['NavigationBarIconic'] || 'both' === $GLOBALS['cfg']['NavigationBarIconic']) {        $caption_output .= '&nbsp;' . $title;    }    $title_output = ' title="' . $title . '"';        ?><td>    <form action="sql.php" method="post" <?php echo $onsubmit; ?>>        <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>        <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />        <input type="hidden" name="pos" value="<?php echo $pos; ?>" />        <input type="hidden" name="goto" value="<?php echo $goto; ?>" />        <?php echo $input_for_real_end; ?>        <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax" ' : '' ); ?> value="<?php echo $caption_output; ?>"<?php echo $title_output . $onclick; ?> />    </form></td><?php} // end function PMA_displayTableNavigationOneButton()/** * Displays a navigation bar to browse among the results of a SQL query * * @param integer $pos_next                  the offset for the "next" page * @param integer $pos_prev                  the offset for the "previous" page * @param string  $sql_query                 the URL-encoded query * @param string  $id_for_direction_dropdown the id for the direction dropdown * * @return nothing * * @global  string   $db             the database name * @global  string   $table          the table name * @global  string   $goto           the URL to go back in case of errors * @global  integer  $num_rows       the total number of rows returned by the *                                   SQL query * @global  integer  $unlim_num_rows the total number of rows returned by the *                                   SQL any programmatically appended "LIMIT" clause * @global  boolean  $is_innodb      whether its InnoDB or not * @global  array    $showtable      table definitions * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, $id_for_direction_dropdown){    global $db, $table, $goto;    global $num_rows, $unlim_num_rows;    global $is_innodb;    global $showtable;    // here, using htmlentities() would cause problems if the query    // contains accented characters    $html_sql_query = htmlspecialchars($sql_query);    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    ?><!-- Navigation bar --><table border="0" cellpadding="0" cellspacing="0" class="navigation"><tr>    <td class="navigation_separator"></td>    <?php    // Move to the beginning or to the previous page    if ($_SESSION['tmp_user_values']['pos'] && $_SESSION['tmp_user_values']['max_rows'] != 'all') {        PMA_displayTableNavigationOneButton('&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query);        PMA_displayTableNavigationOneButton('&lt;', _pgettext('Previous page', 'Previous'), $pos_prev, $html_sql_query);    } // end move back    $nbTotalPage = 1;    //page redirection    // (unless we are showing all records)    if ('all' != $_SESSION['tmp_user_values']['max_rows']) { //if1        $pageNow = @floor($_SESSION['tmp_user_values']['pos'] / $_SESSION['tmp_user_values']['max_rows']) + 1;        $nbTotalPage = @ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows']);        if ($nbTotalPage > 1) { //if2       ?>   <td>        <?php            $_url_params = array(                'db'        => $db,                'table'     => $table,                'sql_query' => $sql_query,                'goto'      => $goto,            );            //<form> to keep the form alignment of button < and <<            // and also to know what to execute when the selector changes            echo '<form action="sql.php' . PMA_generate_common_url($_url_params). '" method="post">';            echo PMA_pageselector(                $_SESSION['tmp_user_values']['max_rows'],                $pageNow,                $nbTotalPage,                200,                5,                5,                20,                10            );        ?>        </form>    </td>        <?php        } //_if2    } //_if1    // Display the "Show all" button if allowed    if (($num_rows < $unlim_num_rows) && ($GLOBALS['cfg']['ShowAll'] || ($GLOBALS['cfg']['MaxRows'] * 5 >= $unlim_num_rows))) {        echo "\n";        ?>    <td>        <form action="sql.php" method="post">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="pos" value="0" />            <input type="hidden" name="session_max_rows" value="all" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" value="<?php echo __('Show all'); ?>" />        </form>    </td>        <?php    } // end show all    // Move to the next page or to the last one    if (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows)        && $num_rows >= $_SESSION['tmp_user_values']['max_rows']        && $_SESSION['tmp_user_values']['max_rows'] != 'all'    ) {        // display the Next button        PMA_displayTableNavigationOneButton(            '&gt;',            _pgettext('Next page', 'Next'),            $pos_next,            $html_sql_query        );        // prepare some options for the End button        if ($is_innodb && $unlim_num_rows > $GLOBALS['cfg']['MaxExactCount']) {            $input_for_real_end = '<input id="real_end_input" type="hidden" name="find_real_end" value="1" />';            // no backquote around this message            $onclick = '';        } else {            $input_for_real_end = $onclick = '';        }        // display the End button        PMA_displayTableNavigationOneButton(            '&gt;&gt;',            _pgettext('Last page', 'End'),            @((ceil($unlim_num_rows / $_SESSION['tmp_user_values']['max_rows'])- 1) * $_SESSION['tmp_user_values']['max_rows']),            $html_sql_query,            'onsubmit="return ' . (($_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'] < $unlim_num_rows && $num_rows >= $_SESSION['tmp_user_values']['max_rows']) ? 'true' : 'false') . '"',            $input_for_real_end,            $onclick        );    } // end move toward    // show separator if pagination happen    if ($nbTotalPage > 1) {        echo '<td><div class="navigation_separator">|</div></td>';    }    ?>    <td>        <div class="save_edited hide">            <input type="submit" value="<?php echo __('Save edited data'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td>    <td>        <div class="restore_column hide">            <input type="submit" value="<?php echo __('Restore column order'); ?>" />            <div class="navigation_separator">|</div>        </div>    </td><?php // if displaying a VIEW, $unlim_num_rows could be zero because      // of $cfg['MaxExactCountViews']; in this case, avoid passing      // the 5th parameter to checkFormElementInRange()      // (this means we can't validate the upper limit ?>    <td class="navigation_goto">        <form action="sql.php" method="post"    onsubmit="return (checkFormElementInRange(this, 'session_max_rows', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 1) &amp;&amp; checkFormElementInRange(this, 'pos', '<?php echo str_replace('\'', '\\\'', __('%d is not valid row number.')); ?>', 0<?php echo $unlim_num_rows > 0 ? ',' . $unlim_num_rows - 1 : ''; ?>))">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="sql_query" value="<?php echo $html_sql_query; ?>" />            <input type="hidden" name="goto" value="<?php echo $goto; ?>" />            <input type="submit" name="navig" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> value="<?php echo __('Show'); ?> :" />            <?php echo __('Start row') . ': ' . "\n"; ?>            <input type="text" name="pos" size="3" value="<?php echo (($pos_next >= $unlim_num_rows) ? 0 : $pos_next); ?>" class="textfield" onfocus="this.select()" />            <?php echo __('Number of rows') . ': ' . "\n"; ?>            <input type="text" name="session_max_rows" size="3" value="<?php echo (($_SESSION['tmp_user_values']['max_rows'] != 'all') ? $_SESSION['tmp_user_values']['max_rows'] : $GLOBALS['cfg']['MaxRows']); ?>" class="textfield" onfocus="this.select()" />        <?php        if ($GLOBALS['cfg']['ShowDisplayDirection']) {            // Display mode (horizontal/vertical and repeat headers)            echo __('Mode') . ': ' . "\n";            $choices = array(                'horizontal'        => __('horizontal'),                'horizontalflipped' => __('horizontal (rotated headers)'),                'vertical'          => __('vertical'));            echo PMA_generate_html_dropdown('disp_direction', $choices, $_SESSION['tmp_user_values']['disp_direction'], $id_for_direction_dropdown);            unset($choices);        }        printf(            __('Headers every %s rows'),            '<input type="text" size="3" name="repeat_cells" value="' . $_SESSION['tmp_user_values']['repeat_cells'] . '" class="textfield" />'        );        echo "\n";        ?>        </form>    </td>    <td class="navigation_separator"></td></tr></table>    <?php} // end of the 'PMA_displayTableNavigation()' function/** * Displays the headers of the results table * * @param array   &$is_display                 which elements to display * @param array   &$fields_meta                the list of fields properties * @param integer $fields_cnt                  the total number of fields returned by the SQL query * @param array   $analyzed_sql                the analyzed query * @param string  $sort_expression             sort expression * @param string  $sort_expression_nodirection sort expression without direction * @param string  $sort_direction              sort direction * * @return  boolean  $clause_is_unique * * @global  string   $db               the database name * @global  string   $table            the table name * @global  string   $goto             the URL to go back in case of errors * @global  string   $sql_query        the SQL query * @global  integer  $num_rows         the total number of rows returned by the *                                     SQL query * @global  array    $vertical_display informations used with vertical display *                                     mode * * @access  private * * @see     PMA_displayTable() */function PMA_displayTableHeaders(&$is_display, &$fields_meta, $fields_cnt = 0, $analyzed_sql = '', $sort_expression, $sort_expression_nodirection, $sort_direction){    global $db, $table, $goto;    global $sql_query, $num_rows;    global $vertical_display, $highlight_columns;    // required to generate sort links that will remember whether the    // "Show all" button has been clicked    $sql_md5 = md5($GLOBALS['sql_query']);    $session_max_rows = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    if ($analyzed_sql == '') {        $analyzed_sql = array();    }    // can the result be sorted?    if ($is_display['sort_lnk'] == '1') {        // Just as fallback        $unsorted_sql_query     = $sql_query;        if (isset($analyzed_sql[0]['unsorted_query'])) {            $unsorted_sql_query = $analyzed_sql[0]['unsorted_query'];        }        // Handles the case of multiple clicks on a column's header        // which would add many spaces before "ORDER BY" in the        // generated query.        $unsorted_sql_query = trim($unsorted_sql_query);        // sorting by indexes, only if it makes sense (only one table ref)        if (isset($analyzed_sql)            && isset($analyzed_sql[0])            && isset($analyzed_sql[0]['querytype'])            && $analyzed_sql[0]['querytype'] == 'SELECT'            && isset($analyzed_sql[0]['table_ref'])            && count($analyzed_sql[0]['table_ref']) == 1        ) {            // grab indexes data:            $indexes = PMA_Index::getFromTable($table, $db);            // do we have any index?            if ($indexes) {                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                    || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                ) {                    $span = $fields_cnt;                    if ($is_display['edit_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'nn') {                        $span++;                    }                    if ($is_display['del_lnk'] != 'kp' && $is_display['del_lnk'] != 'nn') {                        $span++;                    }                } else {                    $span = $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1;                }                echo '<form action="sql.php" method="post">' . "\n";                echo PMA_generate_common_hidden_inputs($db, $table);                echo __('Sort by key') . ': <select name="sql_query" class="autosubmit">' . "\n";                $used_index = false;                $local_order = (isset($sort_expression) ? $sort_expression : '');                foreach ($indexes as $index) {                    $asc_sort = '`' . implode('` ASC, `', array_keys($index->getColumns())) . '` ASC';                    $desc_sort = '`' . implode('` DESC, `', array_keys($index->getColumns())) . '` DESC';                    $used_index = $used_index || $local_order == $asc_sort || $local_order == $desc_sort;                    if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $my_reg)) {                        $unsorted_sql_query_first_part = $my_reg[1];                        $unsorted_sql_query_second_part = $my_reg[2];                    } else {                        $unsorted_sql_query_first_part = $unsorted_sql_query;                        $unsorted_sql_query_second_part = '';                    }                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part  . "\n" . ' ORDER BY ' . $asc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $asc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Ascending') . ')</option>';                    echo '<option value="'                        . htmlspecialchars($unsorted_sql_query_first_part . "\n" . ' ORDER BY ' . $desc_sort . $unsorted_sql_query_second_part)                        . '"' . ($local_order == $desc_sort ? ' selected="selected"' : '')                        . '>' . htmlspecialchars($index->getName()) . ' ('                        . __('Descending') . ')</option>';                }                echo '<option value="' . htmlspecialchars($unsorted_sql_query) . '"' . ($used_index ? '' : ' selected="selected"') . '>' . __('None') . '</option>';                echo '</select>' . "\n";                echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';                echo '</form>' . "\n";            }        }    }    // Output data needed for grid editing    echo '<input id="save_cells_at_once" type="hidden" value="' . $GLOBALS['cfg']['SaveCellsAtOnce'] . '" />';    echo '<div class="common_hidden_inputs">';    echo PMA_generate_common_hidden_inputs($db, $table);    echo '</div>';    // Output data needed for column reordering and show/hide column    if (PMA_isSelect()) {        // generate the column order, if it is set        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        if ($col_order) {            echo '<input id="col_order" type="hidden" value="' . implode(',', $col_order) . '" />';        }        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);        if ($col_visib) {            echo '<input id="col_visib" type="hidden" value="' . implode(',', $col_visib) . '" />';        }        // generate table create time        if (! PMA_Table::isView($GLOBALS['table'], $GLOBALS['db'])) {            echo '<input id="table_create_time" type="hidden" value="' .                PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Create_time') . '" />';        }    }    $vertical_display['emptypre']   = 0;    $vertical_display['emptyafter'] = 0;    $vertical_display['textbtn']    = '';    // Display options (if we are not in print view)    if (! (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1')) {        echo '<form method="post" action="sql.php" name="displayOptionsForm" id="displayOptionsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>';        $url_params = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'display_options_form' => 1        );        echo PMA_generate_common_hidden_inputs($url_params);        echo '<br />';        PMA_generate_slider_effect('displayoptions', __('Options'));        echo '<fieldset>';        echo '<div class="formelement">';        $choices = array(            'P'   => __('Partial texts'),            'F'   => __('Full texts')        );        PMA_display_html_radio('display_text', $choices, $_SESSION['tmp_user_values']['display_text']);        echo '</div>';        // prepare full/partial text button or link        $url_params_full_text = array(            'db' => $db,            'table' => $table,            'sql_query' => $sql_query,            'goto' => $goto,            'full_text_button' => 1        );        if ($_SESSION['tmp_user_values']['display_text']=='F') {            // currently in fulltext mode so show the opposite link            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_partialtext.png';            $tmp_txt = __('Partial texts');            $url_params_full_text['display_text'] = 'P';        } else {            $tmp_image_file = $GLOBALS['pmaThemeImage'] . 's_fulltext.png';            $tmp_txt = __('Full texts');            $url_params_full_text['display_text'] = 'F';        }        $tmp_image = '<img class="fulltext" src="' . $tmp_image_file . '" alt="' . $tmp_txt . '" title="' . $tmp_txt . '" />';        $tmp_url = 'sql.php' . PMA_generate_common_url($url_params_full_text);        $full_or_partial_text_link = PMA_linkOrButton($tmp_url, $tmp_image, array(), false);        unset($tmp_image_file, $tmp_txt, $tmp_url, $tmp_image);        if ($GLOBALS['cfgRelation']['relwork'] && $GLOBALS['cfgRelation']['displaywork']) {            echo '<div class="formelement">';            $choices = array(                'K'   => __('Relational key'),                'D'   => __('Relational display column')            );            PMA_display_html_radio('relational_display', $choices, $_SESSION['tmp_user_values']['relational_display']);            echo '</div>';        }        echo '<div class="formelement">';        PMA_display_html_checkbox('display_binary', __('Show binary contents'), ! empty($_SESSION['tmp_user_values']['display_binary']), false);        echo '<br />';        PMA_display_html_checkbox('display_blob', __('Show BLOB contents'), ! empty($_SESSION['tmp_user_values']['display_blob']), false);        echo '<br />';        PMA_display_html_checkbox('display_binary_as_hex', __('Show binary contents as HEX'), ! empty($_SESSION['tmp_user_values']['display_binary_as_hex']), false);        echo '</div>';        // I would have preferred to name this "display_transformation".        // This is the only way I found to be able to keep this setting sticky        // per SQL query, and at the same time have a default that displays        // the transformations.        echo '<div class="formelement">';        PMA_display_html_checkbox('hide_transformation', __('Hide browser transformation'), ! empty($_SESSION['tmp_user_values']['hide_transformation']), false);        echo '</div>';        if (! PMA_DRIZZLE) {            echo '<div class="formelement">';            $choices = array(                'GEOM'  => __('Geometry'),                'WKT'   => __('Well Known Text'),                'WKB'   => __('Well Known Binary')            );            PMA_display_html_radio('geometry_display', $choices, $_SESSION['tmp_user_values']['geometry_display']);            echo '</div>';        }        echo '<div class="clearfloat"></div>';        echo '</fieldset>';        echo '<fieldset class="tblFooters">';        echo '<input type="submit" value="' . __('Go') . '" />';        echo '</fieldset>';        echo '</div>';        echo '</form>';    }    // Start of form for multi-rows edit/delete/export    if ($is_display['del_lnk'] == 'dr' || $is_display['del_lnk'] == 'kp') {        echo '<form method="post" action="tbl_row_action.php" name="resultsForm" id="resultsForm"';        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax" ';        }        echo '>' . "\n";        echo PMA_generate_common_hidden_inputs($db, $table, 1);        echo '<input type="hidden" name="goto"             value="sql.php" />' . "\n";    }    echo '<table id="table_results" class="data';    if ($GLOBALS['cfg']['AjaxEnable']) {        echo ' ajax';    }    echo '">' . "\n";    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        echo '<thead><tr>' . "\n";    }    // 1. Displays the full/partial text button (part 1)...    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        $colspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' colspan="4"'                  : '';    } else {        $rowspan  = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn')                  ? ' rowspan="4"'                  : '';    }    //     ... before the result table    if (($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <th colspan="<?php echo $fields_cnt; ?>"></th></tr><tr>            <?php            // end horizontal/horizontalflipped mode        } else {            ?><tr>    <th colspan="<?php echo $num_rows + floor($num_rows/$_SESSION['tmp_user_values']['repeat_cells']) + 1; ?>"></th></tr>            <?php        } // end vertical mode    }    //     ... at the left column of the result table header if possible    //     and required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>                <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty(ies) col(s) if required    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')             && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')) {        $vertical_display['emptypre'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 0;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?>    <td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalfipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    //     ... elseif display an empty column if the actions links are disabled to match the rest of the table    elseif ($GLOBALS['cfg']['RowActionLinks'] == 'none'        && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')    ) {        echo '<th></th>';    }    // 2. Displays the fields' name    // 2.0 If sorting links should be used, checks if the query is a "JOIN"    //     statement (see 2.1.3)    // 2.0.1 Prepare Display column comments if enabled ($GLOBALS['cfg']['ShowBrowseComments']).    //       Do not show comments, if using horizontalflipped mode, because of space usage    if ($GLOBALS['cfg']['ShowBrowseComments']        && $_SESSION['tmp_user_values']['disp_direction'] != 'horizontalflipped'    ) {        $comments_map = array();        if (isset($analyzed_sql[0]) && is_array($analyzed_sql[0])) {            foreach ($analyzed_sql[0]['table_ref'] as $tbl) {                $tb = $tbl['table_true_name'];                $comments_map[$tb] = PMA_getComments($db, $tb);                unset($tb);            }        }    }    if ($GLOBALS['cfgRelation']['commwork'] && $GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME'] && ! $_SESSION['tmp_user_values']['hide_transformation']) {        include_once './libraries/transformations.lib.php';        $GLOBALS['mime_map'] = PMA_getMIME($db, $table);    }    // See if we have to highlight any header fields of a WHERE query.    // Uses SQL-Parser results.    $highlight_columns = array();    if (isset($analyzed_sql) && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['where_clause_identifiers'])    ) {        $wi = 0;        if (isset($analyzed_sql[0]['where_clause_identifiers']) && is_array($analyzed_sql[0]['where_clause_identifiers'])) {            foreach ($analyzed_sql[0]['where_clause_identifiers'] AS $wci_nr => $wci) {                $highlight_columns[$wci] = 'true';            }        }    }    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    for ($j = 0; $j < $fields_cnt; $j++) {        // assign $i with appropriate column order        $i = $col_order ? $col_order[$j] : $j;        //  See if this column should get highlight because it's used in the        //  where-query.        if (isset($highlight_columns[$fields_meta[$i]->name]) || isset($highlight_columns[PMA_backquote($fields_meta[$i]->name)])) {            $condition_field = true;        } else {            $condition_field = false;        }        // 2.0 Prepare comment-HTML-wrappers for each row, if defined/enabled.        if (isset($comments_map)            && isset($comments_map[$fields_meta[$i]->table])            && isset($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name])        ) {            $comments = '<span class="tblcomment">' . htmlspecialchars($comments_map[$fields_meta[$i]->table][$fields_meta[$i]->name]) . '</span>';        } else {            $comments = '';        }        // 2.1 Results can be sorted        if ($is_display['sort_lnk'] == '1') {            // 2.1.1 Checks if the table name is required; it's the case            //       for a query with a "JOIN" statement and if the column            //       isn't aliased, or in queries like            //       SELECT `1`.`master_field` , `2`.`master_field`            //       FROM `PMA_relation` AS `1` , `PMA_relation` AS `2`            if (isset($fields_meta[$i]->table) && strlen($fields_meta[$i]->table)) {                $sort_tbl = PMA_backquote($fields_meta[$i]->table) . '.';            } else {                $sort_tbl = '';            }            // 2.1.2 Checks if the current column is used to sort the            //       results            // the orgname member does not exist for all MySQL versions            // but if found, it's the one on which to sort            $name_to_use_in_sort = $fields_meta[$i]->name;            $is_orgname = false;            if (isset($fields_meta[$i]->orgname) && strlen($fields_meta[$i]->orgname)) {                $name_to_use_in_sort = $fields_meta[$i]->orgname;                $is_orgname = true;            }            // $name_to_use_in_sort might contain a space due to            // formatting of function expressions like "COUNT(name )"            // so we remove the space in this situation            $name_to_use_in_sort = str_replace(' )', ')', $name_to_use_in_sort);            if (empty($sort_expression)) {                $is_in_sort = false;            } else {                // Field name may be preceded by a space, or any number                // of characters followed by a dot (tablename.fieldname)                // so do a direct comparison for the sort expression;                // this avoids problems with queries like                // "SELECT id, count(id)..." and clicking to sort                // on id or on count(id).                // Another query to test this:                // SELECT p.*, FROM_UNIXTIME(p.temps) FROM mytable AS p                // (and try clicking on each column's header twice)                if (! empty($sort_tbl)                    && strpos($sort_expression_nodirection, $sort_tbl) === false                    && strpos($sort_expression_nodirection, '(') === false                ) {                    $sort_expression_nodirection = $sort_tbl . $sort_expression_nodirection;                }                $is_in_sort = (str_replace('`', '', $sort_tbl) . $name_to_use_in_sort == str_replace('`', '', $sort_expression_nodirection) ? true : false);            }            // 2.1.3 Check the field name for a bracket.            //       If it contains one, it's probably a function column            //       like 'COUNT(`field`)'            //       It still might be a column name of a view. See bug #3383711            //       Check is_orgname.            if (strpos($name_to_use_in_sort, '(') !== false && ! $is_orgname) {                $sort_order = "\n" . 'ORDER BY ' . $name_to_use_in_sort . ' ';            } else {                $sort_order = "\n" . 'ORDER BY ' . $sort_tbl . PMA_backquote($name_to_use_in_sort) . ' ';            }            unset($name_to_use_in_sort);            unset($is_orgname);            // 2.1.4 Do define the sorting URL            if (! $is_in_sort) {                // patch #455484 ("Smart" order)                $GLOBALS['cfg']['Order'] = strtoupper($GLOBALS['cfg']['Order']);                if ($GLOBALS['cfg']['Order'] === 'SMART') {                    $sort_order .= (preg_match('@time|date@i', $fields_meta[$i]->type)) ? 'DESC' : 'ASC';                } else {                    $sort_order .= $GLOBALS['cfg']['Order'];                }                $order_img   = '';            } elseif ('DESC' == $sort_direction) {                $sort_order .= ' ASC';                $order_img   = ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i hide", 'title' => ''));            } else {                $sort_order .= ' DESC';                $order_img   = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => "soimg$i", 'title' => ''));                $order_img  .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => "soimg$i hide", 'title' => ''));            }            if (preg_match('@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|LOCK IN SHARE MODE))@is', $unsorted_sql_query, $regs3)) {                $sorted_sql_query = $regs3[1] . $sort_order . $regs3[2];            } else {                $sorted_sql_query = $unsorted_sql_query . $sort_order;            }            $_url_params = array(                'db'                => $db,                'table'             => $table,                'sql_query'         => $sorted_sql_query,                'session_max_rows'  => $session_max_rows            );            $order_url  = 'sql.php' . PMA_generate_common_url($_url_params);            // 2.1.5 Displays the sorting URL            // enable sort order swapping for image            $order_link_params = array();            if (isset($order_img) && $order_img!='') {                if (strstr($order_img, 'asc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                } elseif (strstr($order_img, 'desc')) {                    $order_link_params['onmouseover'] = "$('.soimg$i').toggle()";                    $order_link_params['onmouseout']  = "$('.soimg$i').toggle()";                }            }            if ($GLOBALS['cfg']['HeaderFlipType'] == 'auto') {                if (PMA_USR_BROWSER_AGENT == 'IE') {                    $GLOBALS['cfg']['HeaderFlipType'] = 'css';                } else {                    $GLOBALS['cfg']['HeaderFlipType'] = 'fake';                }            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                && $GLOBALS['cfg']['HeaderFlipType'] == 'css'            ) {                $order_link_params['style'] = 'direction: ltr; writing-mode: tb-rl;';            }            $order_link_params['title'] = __('Sort');            $order_link_content = ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped' && $GLOBALS['cfg']['HeaderFlipType'] == 'fake' ? PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), "<br />\n") : htmlspecialchars($fields_meta[$i]->name));            $order_link = PMA_linkOrButton($order_url, $order_link_content . $order_img, $order_link_params, false, true);            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                $th_class[] = 'column_heading';                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $th_class[] = 'pointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $th_class[] = 'marker';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                echo '>' . $order_link . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition' : '')                . '">' . "\n"                . $order_link . $comments . '    </th>' . "\n";        } // end if (2.1)        // 2.2 Results can't be sorted        else {            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo '<th';                $th_class = array();                $th_class[] = 'draggable';                if ($col_visib && !$col_visib[$j]) {                    $th_class[] = 'hide';                }                if ($condition_field) {                    $th_class[] = 'condition';                }                echo ' class="' . implode(' ', $th_class) . '"';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') {                    echo ' valign="bottom"';                }                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'css'                ) {                    echo ' style="direction: ltr; writing-mode: tb-rl;"';                }                echo '>';                if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'                    && $GLOBALS['cfg']['HeaderFlipType'] == 'fake'                ) {                    echo PMA_flipstring(htmlspecialchars($fields_meta[$i]->name), '<br />');                } else {                    echo htmlspecialchars($fields_meta[$i]->name);                }                echo "\n" . $comments . '</th>';            }            $vertical_display['desc'][] = '    <th '                . 'class="draggable'                . ($condition_field ? ' condition"' : '')                . '">' . "\n"                . '        ' . htmlspecialchars($fields_meta[$i]->name) . "\n"                . $comments . '    </th>';        } // end else (2.2)    } // end for    // 3. Displays the needed checkboxes at the right    //    column of the result table header if possible and required...    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn')        && $is_display['text_btn'] == '1'    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?>        <th <?php echo $colspan; ?>><?php echo $full_or_partial_text_link;?></th>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <th ' . $rowspan . ' valign="middle">' . "\n"                                         . '        ' . "\n"                                         . '    </th>' . "\n";        } // end vertical mode    }    //     ... elseif no button, displays empty columns if required    // (unless coming from Browse mode print view)    elseif (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && ($is_display['edit_lnk'] == 'nn' && $is_display['del_lnk'] == 'nn')        && (! $GLOBALS['is_header_sent'])    ) {        $vertical_display['emptyafter'] = ($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? 4 : 1;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            echo "\n";            ?><td<?php echo $colspan; ?>></td>            <?php            // end horizontal/horizontalflipped mode        } else {            $vertical_display['textbtn'] = '    <td' . $rowspan . '></td>' . "\n";        } // end vertical mode    }    if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'        || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'    ) {        ?></tr></thead>        <?php    }    return true;} // end of the 'PMA_displayTableHeaders()' function/** * Prepares the display for a value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param string $value           value to display * * @return  string  the td */function PMA_buildValueDisplay($class, $condition_field, $value){    return '<td align="left"' . ' class="' . $class . ($condition_field ? ' condition' : '') . '">' . $value . '</td>';}/** * Prepares the display for a null value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildNullDisplay($class, $condition_field, $meta, $align = ''){    // the null class is needed for grid editing    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, '') . ' null"><i>NULL</i></td>';}/** * Prepares the display for an empty value * * @param string $class           class of table cell * @param bool   $condition_field whether to add CSS class condition * @param object $meta            the meta-information about this field * @param string $align           cell allignment * * @return  string  the td */function PMA_buildEmptyDisplay($class, $condition_field, $meta, $align = ''){    $nowrap = ' nowrap';    return '<td ' . $align . ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap)  . '"></td>';}/** * Adds the relavant classes. * * @param string $class              class of table cell * @param bool   $condition_field    whether to add CSS class condition * @param object $meta               the meta-information about this field * @param string $nowrap             avoid wrapping * @param bool   $is_field_truncated is field truncated (display ...) * @param string $transform_function transformation function * @param string $default_function   default transformation function * * @return string the list of classes */function PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated = false, $transform_function = '', $default_function = ''){    // Define classes to be added to this data field based on the type of data    $enum_class = '';    if (strpos($meta->flags, 'enum') !== false) {        $enum_class = ' enum';    }    $set_class = '';    if (strpos($meta->flags, 'set') !== false) {        $set_class = ' set';    }    $bit_class = '';    if (strpos($meta->type, 'bit') !== false) {        $bit_class = ' bit';    }    $mime_type_class = '';    if (isset($meta->mimetype)) {        $mime_type_class = ' ' . preg_replace('/\//', '_', $meta->mimetype);    }    $result = $class . ($condition_field ? ' condition' : '') . $nowrap    . ' ' . ($is_field_truncated ? ' truncated' : '')    . ($transform_function != $default_function ? ' transformed' : '')    . $enum_class . $set_class . $bit_class . $mime_type_class;    return $result;}/** * Displays the body of the results table * * @param integer &$dt_result   the link id associated to the query which results have *                              to be displayed * @param array   &$is_display  which elements to display * @param array   $map          the list of relations * @param array   $analyzed_sql the analyzed query * * @return  boolean  always true * * @global string   $db                the database name * @global string   $table             the table name * @global string   $goto              the URL to go back in case of errors * @global string   $sql_query         the SQL query * @global array    $fields_meta       the list of fields properties * @global integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global array    $vertical_display  informations used with vertical display *                                      mode * @global array    $highlight_columns column names to highlight * @global array    $row               current row data * * @access private * * @see     PMA_displayTable() */function PMA_displayTableBody(&$dt_result, &$is_display, $map, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $row; // mostly because of browser transformations, to make the row-data accessible in a plugin    $url_sql_query          = $sql_query;    // query without conditions to shorten URLs when needed, 200 is just    // guess, it should depend on remaining URL length    if (isset($analyzed_sql)        && isset($analyzed_sql[0])        && isset($analyzed_sql[0]['querytype'])        && $analyzed_sql[0]['querytype'] == 'SELECT'        && strlen($sql_query) > 200    ) {        $url_sql_query = 'SELECT ';        if (isset($analyzed_sql[0]['queryflags']['distinct'])) {            $url_sql_query .= ' DISTINCT ';        }        $url_sql_query .= $analyzed_sql[0]['select_expr_clause'];        if (!empty($analyzed_sql[0]['from_clause'])) {            $url_sql_query .= ' FROM ' . $analyzed_sql[0]['from_clause'];        }    }    if (! is_array($map)) {        $map = array();    }    $row_no                         = 0;    $vertical_display['edit']       = array();    $vertical_display['copy']       = array();    $vertical_display['delete']     = array();    $vertical_display['data']       = array();    $vertical_display['row_delete'] = array();    // name of the class added to all grid editable elements    $grid_edit_class = 'grid_edit';    // prepare to get the column order, if available    if (PMA_isSelect()) {        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Correction University of Virginia 19991216 in the while below    // Previous code assumed that all tables have keys, specifically that    // the phpMyAdmin GUI should support row delete/edit only for such    // tables.    // Although always using keys is arguably the prescribed way of    // defining a relational table, it is not required. This will in    // particular be violated by the novice.    // We want to encourage phpMyAdmin usage by such novices. So the code    // below has been changed to conditionally work as before when the    // table being displayed has one or more keys; but to display    // delete/edit options correctly for tables without keys.    $odd_row = true;    while ($row = PMA_DBI_fetch_row($dt_result)) {        // "vertical display" mode stuff        if ($row_no != 0 && $_SESSION['tmp_user_values']['repeat_cells'] != 0            && !($row_no % $_SESSION['tmp_user_values']['repeat_cells'])            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            echo '<tr>' . "\n";            if ($vertical_display['emptypre'] > 0) {                echo '    <th colspan="' . $vertical_display['emptypre'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            } else if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {                echo '    <th></th>' . "\n";            }            foreach ($vertical_display['desc'] as $val) {                echo $val;            }            if ($vertical_display['emptyafter'] > 0) {                echo '    <th colspan="' . $vertical_display['emptyafter'] . '">' . "\n"                    .'        &nbsp;</th>' . "\n";            }            echo '</tr>' . "\n";        } // end if        $alternating_color_class = ($odd_row ? 'odd' : 'even');        $odd_row = ! $odd_row;        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            // pointer code part            echo '<tr class="' . $alternating_color_class . '">';        }        // 1. Prepares the row        // 1.1 Results from a "SELECT" statement -> builds the        //     WHERE clause to use in links (a unique key if possible)        /**         * @todo $where_clause could be empty, for example a table         *       with only one field and it's a BLOB; in this case,         *       avoid to display the delete and edit links         */        list($where_clause, $clause_is_unique, $condition_array) = PMA_getUniqueCondition($dt_result, $fields_cnt, $fields_meta, $row);        $where_clause_html = urlencode($where_clause);        // 1.2 Defines the URLs for the modify/delete link(s)        if ($is_display['edit_lnk'] != 'nn' || $is_display['del_lnk'] != 'nn') {            // We need to copy the value or else the == 'both' check will always return true            if ($GLOBALS['cfg']['PropertiesIconic'] === 'both') {                $iconic_spacer = '<div class="nowrap">';            } else {                $iconic_spacer = '';            }            // 1.2.1 Modify link(s)            if ($is_display['edit_lnk'] == 'ur') { // update row case                $_url_params = array(                    'db'               => $db,                    'table'            => $table,                    'where_clause'     => $where_clause,                    'clause_is_unique' => $clause_is_unique,                    'sql_query'        => $url_sql_query,                    'goto'             => 'sql.php',                );                $edit_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'update'));                $copy_url = 'tbl_change.php' . PMA_generate_common_url($_url_params + array('default_action' => 'insert'));                $edit_str = PMA_getIcon('b_edit.png', __('Edit'));                $copy_str = PMA_getIcon('b_insrow.png', __('Copy'));                // Class definitions required for grid editing jQuery scripts                $edit_anchor_class = "edit_row_anchor";                if ( $clause_is_unique == 0) {                    $edit_anchor_class .= ' nonunique';                }            } // end if (1.2.1)            // 1.2.2 Delete/Kill link(s)            if ($is_display['del_lnk'] == 'dr') { // delete row case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => (empty($goto) ? 'tbl_sql.php' : $goto),                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $del_query = 'DELETE FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table)                    . ' WHERE ' . $where_clause . ($clause_is_unique ? '' : ' LIMIT 1');                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $del_query,                    'message_to_show' => __('The row has been deleted'),                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $js_conf  = 'DELETE FROM ' . PMA_jsFormat($db) . '.' . PMA_jsFormat($table)                          . ' WHERE ' . PMA_jsFormat($where_clause, false)                          . ($clause_is_unique ? '' : ' LIMIT 1');                $del_str = PMA_getIcon('b_drop.png', __('Delete'));            } elseif ($is_display['del_lnk'] == 'kp') { // kill process case                $_url_params = array(                    'db'        => $db,                    'table'     => $table,                    'sql_query' => $url_sql_query,                    'goto'      => 'main.php',                );                $lnk_goto = 'sql.php' . PMA_generate_common_url($_url_params, 'text');                $_url_params = array(                    'db'        => 'mysql',                    'sql_query' => 'KILL ' . $row[0],                    'goto'      => $lnk_goto,                );                $del_url  = 'sql.php' . PMA_generate_common_url($_url_params);                $del_query = 'KILL ' . $row[0];                $js_conf  = 'KILL ' . $row[0];                $del_str = PMA_getIcon('b_drop.png', __('Kill'));            } // end if (1.2.2)            // 1.3 Displays the links at left if required            if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('left', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } elseif (($GLOBALS['cfg']['RowActionLinks'] == 'none')                && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')            ) {                if (! isset($js_conf)) {                    $js_conf = '';                }                echo PMA_generateCheckboxAndLinks('none', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'l', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);            } // end if (1.3)        } // end if (1)        // 2. Displays the rows' values        for ($j = 0; $j < $fields_cnt; ++$j) {            // assign $i with appropriate column order            $i = $col_order ? $col_order[$j] : $j;            $meta    = $fields_meta[$i];            $not_null_class = $meta->not_null ? 'not_null' : '';            $relation_class = isset($map[$meta->name]) ? 'relation' : '';            $hide_class = ($col_visib && !$col_visib[$j] &&                           // hide per <td> only if the display direction is not vertical                           $_SESSION['tmp_user_values']['disp_direction'] != 'vertical') ? 'hide' : '';            // handle datetime-related class, for grid editing            if (substr($meta->type, 0, 9) == 'timestamp' || $meta->type == 'datetime') {                $field_type_class = 'datetimefield';            } else if ($meta->type == 'date') {                $field_type_class = 'datefield';            } else {                $field_type_class = '';            }            $pointer = $i;            $is_field_truncated = false;            //If the previous column had blob data, we need to reset the class            // to $inline_edit_class            $class = 'data ' . $grid_edit_class . ' ' . $not_null_class . ' ' . $relation_class . ' ' . $hide_class . ' ' . $field_type_class; //' ' . $alternating_color_class .            //  See if this column should get highlight because it's used in the            //  where-query.            if (isset($highlight_columns) && (isset($highlight_columns[$meta->name]) || isset($highlight_columns[PMA_backquote($meta->name)]))) {                $condition_field = true;            } else {                $condition_field = false;            }            if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical' && (! isset($GLOBALS['printview']) || ($GLOBALS['printview'] != '1'))) {                // the row number corresponds to a data row, not HTML table row                $class .= ' row_' . $row_no;                if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {                    $class .= ' vpointer';                }                if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {                    $class .= ' vmarker';                }            }// end if            // Wrap MIME-transformations. [MIME]            $default_function = 'default_function'; // default_function            $transform_function = $default_function;            $transform_options = array();            if ($GLOBALS['cfgRelation']['mimework'] && $GLOBALS['cfg']['BrowseMIME']) {                if (isset($GLOBALS['mime_map'][$meta->name]['mimetype']) && isset($GLOBALS['mime_map'][$meta->name]['transformation']) && !empty($GLOBALS['mime_map'][$meta->name]['transformation'])) {                    $include_file = PMA_securePath($GLOBALS['mime_map'][$meta->name]['transformation']);                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $GLOBALS['mime_map'][$meta->name]['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($GLOBALS['mime_map'][$meta->name]['transformation_options']) ? $GLOBALS['mime_map'][$meta->name]['transformation_options'] : ''));                            $meta->mimetype     = str_replace('_', '/', $GLOBALS['mime_map'][$meta->name]['mimetype']);                        }                    } // end if file_exists                } // end if transformation is set            } // end if mime/transformation works.            $_url_params = array(                'db'            => $db,                'table'         => $table,                'where_clause'  => $where_clause,                'transform_key' => $meta->name,            );            if (! empty($sql_query)) {                $_url_params['sql_query'] = $url_sql_query;            }            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);            // n u m e r i c            if ($meta->numeric == 1) {                // if two fields have the same name (this is possible                //       with self-join queries, for example), using $meta->name                //       will show both fields NULL even if only one is NULL,                //       so use the $pointer                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta, 'align="right"');                } elseif ($row[$i] != '') {                    $nowrap = ' nowrap';                    $where_comparison = ' = ' . $row[$i];                    $vertical_display['data'][$row_no][$i]     = '<td align="right"' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta, 'align="right"');                }            //  b l o b            } elseif (stristr($meta->type, 'BLOB')) {                // PMA_mysql_fetch_fields returns BLOB in place of                // TEXT fields type so we have to ensure it's really a BLOB                $field_flags = PMA_DBI_field_flags($dt_result, $i);                if (stristr($field_flags, 'BINARY')) {                    // remove 'grid_edit' from $class as we can't edit binary data.                    $class = str_replace('grid_edit', '', $class);                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } else {                        // for blobstreaming                        // if valid BS reference exists                        if (PMA_BS_IsPBMSReference($row[$i], $db)) {                            $blobtext = PMA_BS_CreateReferenceLink($row[$i], $db);                        } else {                            $blobtext = PMA_handle_non_printable_contents('BLOB', (isset($row[$i]) ? $row[$i] : ''), $transform_function, $transform_options, $default_function, $meta, $_url_params);                        }                        $vertical_display['data'][$row_no][$i]     =  PMA_buildValueDisplay($class, $condition_field, $blobtext);                        unset($blobtext);                    }                // not binary:                } else {                    if (! isset($row[$i]) || is_null($row[$i])) {                        $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                    } elseif ($row[$i] != '') {                        // if a transform function for blob is set, none of these replacements will be made                        if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P') {                            $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        // displays all space characters, 4 space                        // characters for tabulations and <cr>/<lf>                        $row[$i]     = ($default_function != $transform_function ? $transform_function($row[$i], $transform_options, $meta) : $default_function($row[$i], array(), $meta));                        if ($is_field_truncated) {                            $class .= ' truncated';                        }                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                    }                }            // g e o m e t r y            } elseif ($meta->type == 'geometry') {                // Remove 'grid_edit' from $class as we do not allow to inline-edit geometry data.                $class = str_replace('grid_edit', '', $class);                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i] = PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // Display as [GEOMETRY - (size)]                    if ('GEOM' == $_SESSION['tmp_user_values']['geometry_display']) {                        $geometry_text = PMA_handle_non_printable_contents(                            'GEOMETRY', (isset($row[$i]) ? $row[$i] : ''), $transform_function,                            $transform_options, $default_function, $meta                        );                        $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay(                            $class, $condition_field, $geometry_text                        );                    // Display in Well Known Text(WKT) format.                    } elseif ('WKT' == $_SESSION['tmp_user_values']['geometry_display']) {                        $where_comparison = ' = ' . $row[$i];                        // Convert to WKT format                        $wktval = PMA_asWKT($row[$i]);                        if (PMA_strlen($wktval) > $GLOBALS['cfg']['LimitChars']                            && $_SESSION['tmp_user_values']['display_text'] == 'P'                        ) {                            $wktval = PMA_substr($wktval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                            $is_field_truncated = true;                        }                        $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                            $class, $condition_field, $analyzed_sql, $meta, $map, $wktval, $transform_function,                            $default_function, '', $where_comparison, $transform_options, $is_field_truncated                        );                    // Display in  Well Known Binary(WKB) format.                    } else {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            $where_comparison = ' = ' . $row[$i];                            if ($_SESSION['tmp_user_values']['display_binary_as_hex']                                && PMA_contains_nonprintable_ascii($row[$i])                            ) {                                $wkbval = PMA_substr(bin2hex($row[$i]), 8);                            } else {                                $wkbval = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                            if (PMA_strlen($wkbval) > $GLOBALS['cfg']['LimitChars']                                && $_SESSION['tmp_user_values']['display_text'] == 'P'                            ) {                                $wkbval = PMA_substr($wkbval, 0, $GLOBALS['cfg']['LimitChars']) . '...';                                $is_field_truncated = true;                            }                            $vertical_display['data'][$row_no][$i] = '<td ' . PMA_prepare_row_data(                                $class, $condition_field, $analyzed_sql, $meta, $map, $wkbval, $transform_function,                                $default_function, '', $where_comparison, $transform_options, $is_field_truncated                            );                        } else {                            $wkbval = PMA_handle_non_printable_contents(                                'BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params                            );                            $vertical_display['data'][$row_no][$i] = PMA_buildValueDisplay($class, $condition_field, $wkbval);                        }                    }                } else {                    $vertical_display['data'][$row_no][$i] = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            // n o t   n u m e r i c   a n d   n o t   B L O B            } else {                if (! isset($row[$i]) || is_null($row[$i])) {                    $vertical_display['data'][$row_no][$i]     =  PMA_buildNullDisplay($class, $condition_field, $meta);                } elseif ($row[$i] != '') {                    // support blanks in the key                    $relation_id = $row[$i];                    // Cut all fields to $GLOBALS['cfg']['LimitChars']                    // (unless it's a link-type transformation)                    if (PMA_strlen($row[$i]) > $GLOBALS['cfg']['LimitChars'] && $_SESSION['tmp_user_values']['display_text'] == 'P' && !strpos($transform_function, 'link') === true) {                        $row[$i] = PMA_substr($row[$i], 0, $GLOBALS['cfg']['LimitChars']) . '...';                        $is_field_truncated = true;                    }                    // displays special characters from binaries                    $field_flags = PMA_DBI_field_flags($dt_result, $i);                    $formatted = false;                    if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {                        $row[$i]     = PMA_printable_bit_value($row[$i], $meta->length);                        // some results of PROCEDURE ANALYSE() are reported as                        // being BINARY but they are quite readable,                        // so don't treat them as BINARY                    } elseif (stristr($field_flags, 'BINARY') && $meta->type == 'string' && !(isset($GLOBALS['is_analyse']) && $GLOBALS['is_analyse'])) {                        if ($_SESSION['tmp_user_values']['display_binary']) {                            // user asked to see the real contents of BINARY                            // fields                            if ($_SESSION['tmp_user_values']['display_binary_as_hex'] && PMA_contains_nonprintable_ascii($row[$i])) {                                $row[$i] = bin2hex($row[$i]);                            } else {                                $row[$i] = htmlspecialchars(PMA_replace_binary_contents($row[$i]));                            }                        } else {                            // we show the BINARY message and field's size                            // (or maybe use a transformation)                            $row[$i] = PMA_handle_non_printable_contents('BINARY', $row[$i], $transform_function, $transform_options, $default_function, $meta, $_url_params);                            $formatted = true;                        }                    }                    if ($formatted) {                        $vertical_display['data'][$row_no][$i]     = PMA_buildValueDisplay($class, $condition_field, $row[$i]);                    } else {                        // transform functions may enable no-wrapping:                        $function_nowrap = $transform_function . '_nowrap';                        $bool_nowrap = (($default_function != $transform_function && function_exists($function_nowrap)) ? $function_nowrap($transform_options) : false);                        // do not wrap if date field type                        $nowrap = ((preg_match('@DATE|TIME@i', $meta->type) || $bool_nowrap) ? ' nowrap' : '');                        $where_comparison = ' = \'' . PMA_sqlAddSlashes($row[$i]) . '\'';                        $vertical_display['data'][$row_no][$i]     = '<td ' . PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $row[$i], $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated);                    }                } else {                    $vertical_display['data'][$row_no][$i]     = PMA_buildEmptyDisplay($class, $condition_field, $meta);                }            }            // output stored cell            if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'                || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'            ) {                echo $vertical_display['data'][$row_no][$i];            }            if (isset($vertical_display['rowdata'][$i][$row_no])) {                $vertical_display['rowdata'][$i][$row_no] .= $vertical_display['data'][$row_no][$i];            } else {                $vertical_display['rowdata'][$i][$row_no] = $vertical_display['data'][$row_no][$i];            }        } // end for (2)        // 3. Displays the modify/delete links on the right if required        if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')            && ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped')        ) {            if (! isset($js_conf)) {                $js_conf = '';            }            echo PMA_generateCheckboxAndLinks('right', $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, 'r', $edit_url, $copy_url, $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf);        } // end if (3)        if ($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal'            || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped'        ) {            ?></tr>            <?php        } // end if        // 4. Gather links of del_urls and edit_urls in an array for later        //    output        if (! isset($vertical_display['edit'][$row_no])) {            $vertical_display['edit'][$row_no]       = '';            $vertical_display['copy'][$row_no]       = '';            $vertical_display['delete'][$row_no]     = '';            $vertical_display['row_delete'][$row_no] = '';        }        $vertical_class = ' row_' . $row_no;        if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {            $vertical_class .= ' vpointer';        }        if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {            $vertical_class .= ' vmarker';        }        if (!empty($del_url) && $is_display['del_lnk'] != 'kp') {            $vertical_display['row_delete'][$row_no] .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, '[%_PMA_CHECKBOX_DIR_%]', $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['row_delete'][$row_no]);        }        if (isset($edit_url)) {            $vertical_display['edit'][$row_no]   .= PMA_generateEditLink($edit_url, $alternating_color_class . ' ' . $edit_anchor_class . $vertical_class, $edit_str, $where_clause, $where_clause_html);        } else {            unset($vertical_display['edit'][$row_no]);        }        if (isset($copy_url)) {            $vertical_display['copy'][$row_no]   .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['copy'][$row_no]);        }        if (isset($del_url)) {            if (! isset($js_conf)) {                $js_conf = '';            }            $vertical_display['delete'][$row_no] .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, $alternating_color_class . $vertical_class);        } else {            unset($vertical_display['delete'][$row_no]);        }        echo (($_SESSION['tmp_user_values']['disp_direction'] == 'horizontal' || $_SESSION['tmp_user_values']['disp_direction'] == 'horizontalflipped') ? "\n" : '');        $row_no++;    } // end while    // this is needed by PMA_displayTable() to generate the proper param    // in the multi-edit and multi-delete form    return $clause_is_unique;} // end of the 'PMA_displayTableBody()' function/** * Do display the result table with the vertical direction mode. * * @return  boolean  always true * * @global  array    $vertical_display the information to display * * @access  private * * @see     PMA_displayTable() */function PMA_displayVerticalTable(){    global $vertical_display;    // Displays "multi row delete" link at top if required    if ($GLOBALS['cfg']['RowActionLinks'] != 'right'        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if ($GLOBALS['cfg']['RowActionLinks'] == 'none') {            // if we are not showing the RowActionLinks, then we need to show the Multi-Row-Action checkboxes            echo '<th></th>' . "\n";        }        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_left', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at top if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'left' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    if (PMA_isSelect()) {        // prepare to get the column order, if available        $pmatable = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);        $col_order = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_ORDER);        $col_visib = $pmatable->getUiProp(PMA_Table::PROP_COLUMN_VISIB);    } else {        $col_order = false;        $col_visib = false;    }    // Displays data    foreach ($vertical_display['desc'] AS $j => $val) {        // assign appropriate key with current column order        $key = $col_order ? $col_order[$j] : $j;        echo '<tr' . (($col_visib && !$col_visib[$j]) ? ' class="hide"' : '') . '>' . "\n";        echo $val;        $cell_displayed = 0;        foreach ($vertical_display['rowdata'][$key] as $subval) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) and !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo $val;            }            echo $subval;            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end while    // Displays "multi row delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['row_delete'])        && (count($vertical_display['row_delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        echo $vertical_display['textbtn'];        $cell_displayed = 0;        foreach ($vertical_display['row_delete'] as $val) {            if (($cell_displayed != 0) && ($_SESSION['tmp_user_values']['repeat_cells'] != 0) && !($cell_displayed % $_SESSION['tmp_user_values']['repeat_cells'])) {                echo '<th' .                     (($is_display['edit_lnk'] != 'nn' && $is_display['del_lnk'] != 'nn') ? ' rowspan="4"' : '') .                     '></th>' . "\n";            }            echo str_replace('[%_PMA_CHECKBOX_DIR_%]', '_right', $val);            $cell_displayed++;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "edit" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['edit'])        && (count($vertical_display['edit']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['edit'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "copy" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['copy'])        && (count($vertical_display['copy']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['copy'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    } // end if    // Displays "delete" link at bottom if required    if (($GLOBALS['cfg']['RowActionLinks'] == 'right' || $GLOBALS['cfg']['RowActionLinks'] == 'both')        && is_array($vertical_display['delete'])        && (count($vertical_display['delete']) > 0 || !empty($vertical_display['textbtn']))    ) {        echo '<tr>' . "\n";        if (! is_array($vertical_display['edit']) && ! is_array($vertical_display['row_delete'])) {            echo $vertical_display['textbtn'];        }        foreach ($vertical_display['delete'] as $val) {            echo $val;        } // end while        echo '</tr>' . "\n";    }    return true;} // end of the 'PMA_displayVerticalTable' function/** * Checks the posted options for viewing query resutls * and sets appropriate values in the session. * * @todo    make maximum remembered queries configurable * @todo    move/split into SQL class!? * @todo    currently this is called twice unnecessary * @todo    ignore LIMIT and ORDER in query!? * * @return nothing */function PMA_displayTable_checkConfigParams(){    $sql_md5 = md5($GLOBALS['sql_query']);    $_SESSION['tmp_user_values']['query'][$sql_md5]['sql'] = $GLOBALS['sql_query'];    if (PMA_isValid($_REQUEST['disp_direction'], array('horizontal', 'vertical', 'horizontalflipped'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $_REQUEST['disp_direction'];        unset($_REQUEST['disp_direction']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'] = $GLOBALS['cfg']['DefaultDisplay'];    }    if (PMA_isValid($_REQUEST['repeat_cells'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $_REQUEST['repeat_cells'];        unset($_REQUEST['repeat_cells']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'] = $GLOBALS['cfg']['RepeatCells'];    }    // as this is a form value, the type is always string so we cannot    // use PMA_isValid($_REQUEST['session_max_rows'], 'integer')    if ((PMA_isValid($_REQUEST['session_max_rows'], 'numeric')        && (int) $_REQUEST['session_max_rows'] == $_REQUEST['session_max_rows'])        || $_REQUEST['session_max_rows'] == 'all'    ) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $_REQUEST['session_max_rows'];        unset($_REQUEST['session_max_rows']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'] = $GLOBALS['cfg']['MaxRows'];    }    if (PMA_isValid($_REQUEST['pos'], 'numeric')) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = $_REQUEST['pos'];        unset($_REQUEST['pos']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['pos'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'] = 0;    }    if (PMA_isValid($_REQUEST['display_text'], array('P', 'F'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = $_REQUEST['display_text'];        unset($_REQUEST['display_text']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'] = 'P';    }    if (PMA_isValid($_REQUEST['relational_display'], array('K', 'D'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = $_REQUEST['relational_display'];        unset($_REQUEST['relational_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'] = 'K';    }    if (PMA_isValid($_REQUEST['geometry_display'], array('WKT', 'WKB', 'GEOM'))) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = $_REQUEST['geometry_display'];        unset($_REQUEST['geometry_display']);    } elseif (empty($_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'] = 'GEOM';    }    if (isset($_REQUEST['display_binary'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;        unset($_REQUEST['display_binary']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // selected by default because some operations like OPTIMIZE TABLE        // and all queries involving functions return "binary" contents,        // according to low-level field flags        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary'] = true;    }    if (isset($_REQUEST['display_binary_as_hex'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        unset($_REQUEST['display_binary_as_hex']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']);    } elseif (isset($_REQUEST['full_text_button'])) {        // do nothing to keep the value that is there in the session    } else {        // display_binary_as_hex config option        if (isset($GLOBALS['cfg']['DisplayBinaryAsHex']) && true === $GLOBALS['cfg']['DisplayBinaryAsHex']) {            $_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex'] = true;        }    }    if (isset($_REQUEST['display_blob'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob'] = true;        unset($_REQUEST['display_blob']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']);    }    if (isset($_REQUEST['hide_transformation'])) {        $_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation'] = true;        unset($_REQUEST['hide_transformation']);    } elseif (isset($_REQUEST['display_options_form'])) {        // we know that the checkbox was unchecked        unset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']);    }    // move current query to the last position, to be removed last    // so only least executed query will be removed if maximum remembered queries    // limit is reached    $tmp = $_SESSION['tmp_user_values']['query'][$sql_md5];    unset($_SESSION['tmp_user_values']['query'][$sql_md5]);    $_SESSION['tmp_user_values']['query'][$sql_md5] = $tmp;    // do not exceed a maximum number of queries to remember    if (count($_SESSION['tmp_user_values']['query']) > 10) {        array_shift($_SESSION['tmp_user_values']['query']);        //echo 'deleting one element ...';    }    // populate query configuration    $_SESSION['tmp_user_values']['display_text'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['display_text'];    $_SESSION['tmp_user_values']['relational_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['relational_display'];    $_SESSION['tmp_user_values']['geometry_display'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['geometry_display'];    $_SESSION['tmp_user_values']['display_binary'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary']) ? true : false;    $_SESSION['tmp_user_values']['display_binary_as_hex'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_binary_as_hex']) ? true : false;    $_SESSION['tmp_user_values']['display_blob'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['display_blob']) ? true : false;    $_SESSION['tmp_user_values']['hide_transformation'] = isset($_SESSION['tmp_user_values']['query'][$sql_md5]['hide_transformation']) ? true : false;    $_SESSION['tmp_user_values']['pos'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['pos'];    $_SESSION['tmp_user_values']['max_rows'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['max_rows'];    $_SESSION['tmp_user_values']['repeat_cells'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['repeat_cells'];    $_SESSION['tmp_user_values']['disp_direction'] = $_SESSION['tmp_user_values']['query'][$sql_md5]['disp_direction'];    /*     * debugging    echo '<pre>';    var_dump($_SESSION['tmp_user_values']);    echo '</pre>';     */}/** * Displays a table of results returned by a SQL query. * This function is called by the "sql.php" script. * * @param integer &$dt_result     the link id associated to the query which results have *                                to be displayed * @param array   &$the_disp_mode the display mode * @param array   $analyzed_sql   the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $goto              the URL to go back in case of errors * @global  string   $sql_query         the current SQL query * @global  integer  $num_rows          the total number of rows returned by the *                                      SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * @global  array    $fields_meta       the list of fields properties * @global  integer  $fields_cnt        the total number of fields returned by *                                      the SQL query * @global  array    $vertical_display  informations used with vertical display *                                      mode * @global  array    $highlight_columns column names to highlight * @global  array    $cfgRelation       the relation settings * @global  array    $showtable         table definitions * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayTable(&$dt_result, &$the_disp_mode, $analyzed_sql){    global $db, $table, $goto;    global $sql_query, $num_rows, $unlim_num_rows, $fields_meta, $fields_cnt;    global $vertical_display, $highlight_columns;    global $cfgRelation;    global $showtable;    // why was this called here? (already called from sql.php)    //PMA_displayTable_checkConfigParams();    /**     * @todo move this to a central place     * @todo for other future table types     */    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if ($is_innodb        && ! isset($analyzed_sql[0]['queryflags']['union'])        && ! isset($analyzed_sql[0]['table_ref'][1]['table_name'])        && (empty($analyzed_sql[0]['where_clause']) || $analyzed_sql[0]['where_clause'] == '1 ')    ) {        // "j u s t   b r o w s i n g"        $pre_count = '~';        $after_count = PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]')));    } else {        $pre_count = '';        $after_count = '';    }    // 1. ----- Prepares the work -----    // 1.1 Gets the informations about which functionalities should be    //     displayed    $total      = '';    $is_display = PMA_setDisplayMode($the_disp_mode, $total);    // 1.2 Defines offsets for the next and previous pages    if ($is_display['nav_bar'] == '1') {        if ($_SESSION['tmp_user_values']['max_rows'] == 'all') {            $pos_next     = 0;            $pos_prev     = 0;        } else {            $pos_next     = $_SESSION['tmp_user_values']['pos'] + $_SESSION['tmp_user_values']['max_rows'];            $pos_prev     = $_SESSION['tmp_user_values']['pos'] - $_SESSION['tmp_user_values']['max_rows'];            if ($pos_prev < 0) {                $pos_prev = 0;            }        }    } // end if    // 1.3 Find the sort expression    // we need $sort_expression and $sort_expression_nodirection    // even if there are many table references    if (! empty($analyzed_sql[0]['order_by_clause'])) {        $sort_expression = trim(str_replace('  ', ' ', $analyzed_sql[0]['order_by_clause']));        /**         * Get rid of ASC|DESC         */        preg_match('@(.*)([[:space:]]*(ASC|DESC))@si', $sort_expression, $matches);        $sort_expression_nodirection = isset($matches[1]) ? trim($matches[1]) : $sort_expression;        $sort_direction = isset($matches[2]) ? trim($matches[2]) : '';        unset($matches);    } else {        $sort_expression = $sort_expression_nodirection = $sort_direction = '';    }    // 1.4 Prepares display of first and last value of the sorted column    if (! empty($sort_expression_nodirection)) {        if (strpos($sort_expression_nodirection, '.') === false) {            $sort_table = $table;            $sort_column = $sort_expression_nodirection;        } else {            list($sort_table, $sort_column) = explode('.', $sort_expression_nodirection);        }        $sort_table = PMA_unQuote($sort_table);        $sort_column = PMA_unQuote($sort_column);        // find the sorted column index in row result        // (this might be a multi-table query)        $sorted_column_index = false;        foreach ($fields_meta as $key => $meta) {            if ($meta->table == $sort_table && $meta->name == $sort_column) {                $sorted_column_index = $key;                break;            }        }        if ($sorted_column_index !== false) {            // fetch first row of the result set            $row = PMA_DBI_fetch_row($dt_result);            // initializing default arguments            $default_function = 'default_function';            $transform_function = $default_function;            $transform_options = array();            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_first_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_first_row = $row[$sorted_column_index];            }            $column_for_first_row = strtoupper(substr($column_for_first_row, 0, $GLOBALS['cfg']['LimitChars']));            // fetch last row of the result set            PMA_DBI_data_seek($dt_result, $num_rows - 1);            $row = PMA_DBI_fetch_row($dt_result);            // check for non printable sorted row data            $meta = $fields_meta[$sorted_column_index];            if (stristr($meta->type, 'BLOB') || $meta->type == 'geometry') {                $column_for_last_row = PMA_handle_non_printable_contents($meta->type, $row[$sorted_column_index], $transform_function, $transform_options, $default_function, $meta, null);            } else {                $column_for_last_row = $row[$sorted_column_index];            }            $column_for_last_row = strtoupper(substr($column_for_last_row, 0, $GLOBALS['cfg']['LimitChars']));            // reset to first row for the loop in PMA_displayTableBody()            PMA_DBI_data_seek($dt_result, 0);            // we could also use here $sort_expression_nodirection            $sorted_column_message = ' [' . htmlspecialchars($sort_column) . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - ' . htmlspecialchars($column_for_last_row) . '</strong>]';            unset($row, $column_for_first_row, $column_for_last_row, $meta, $default_function, $transform_function, $transform_options);        }        unset($sorted_column_index, $sort_table, $sort_column);    }    // 2. ----- Displays the top of the page -----    // 2.1 Displays a messages with position informations    if ($is_display['nav_bar'] == '1' && isset($pos_next)) {        if (isset($unlim_num_rows) && $unlim_num_rows != $total) {            $selectstring = ', ' . $unlim_num_rows . ' ' . __('in query');        } else {            $selectstring = '';        }        if (! empty($analyzed_sql[0]['limit_clause'])) {            $limit_data = PMA_analyzeLimitClause($analyzed_sql[0]['limit_clause']);            $first_shown_rec = $limit_data['start'];            if ($limit_data['length'] < $total) {                $last_shown_rec = $limit_data['start'] + $limit_data['length'] - 1;            } else {                $last_shown_rec = $limit_data['start'] + $total - 1;            }        } elseif ($_SESSION['tmp_user_values']['max_rows'] == 'all' || $pos_next > $total) {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $total - 1;        } else {            $first_shown_rec = $_SESSION['tmp_user_values']['pos'];            $last_shown_rec  = $pos_next - 1;        }        if (PMA_Table::isView($db, $table)            && $total == $GLOBALS['cfg']['MaxExactCountViews']        ) {            $message = PMA_Message::notice(__('This view has at least this number of rows. Please refer to %sdocumentation%s.'));            $message->addParam('[a@./Documentation.html#cfg_MaxExactCount@_blank]');            $message->addParam('[/a]');            $message_view_warning = PMA_showHint($message);        } else {            $message_view_warning = false;        }        $message = PMA_Message::success(__('Showing rows'));        $message->addMessage($first_shown_rec);        if ($message_view_warning) {            $message->addMessage('...', ' - ');            $message->addMessage($message_view_warning);            $message->addMessage('(');        } else {            $message->addMessage($last_shown_rec, ' - ');            $message->addMessage(' (');            $message->addMessage($pre_count  . PMA_formatNumber($total, 0));            $message->addString(__('total'));            if (!empty($after_count)) {                $message->addMessage($after_count);            }            $message->addMessage($selectstring, '');            $message->addMessage(', ', '');        }        $messagge_qt = PMA_Message::notice(__('Query took %01.4f sec'));        $messagge_qt->addParam($GLOBALS['querytime']);        $message->addMessage($messagge_qt, '');        $message->addMessage(')', '');        $message->addMessage(isset($sorted_column_message) ? $sorted_column_message : '', '');        PMA_showMessage($message, $sql_query, 'success');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_showMessage(__('Your SQL query has been executed successfully'), $sql_query, 'success');    }    // 2.3 Displays the navigation bars    if (! strlen($table)) {        if (isset($analyzed_sql[0]['query_type'])            && $analyzed_sql[0]['query_type'] == 'SELECT'        ) {            // table does not always contain a real table name,            // for example in MySQL 5.0.x, the query SHOW STATUS            // returns STATUS as a table name            $table = $fields_meta[0]->table;        } else {            $table = '';        }    }    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'top_direction_dropdown');        echo "\n";    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 2b ----- Get field references from Database -----    // (see the 'relation' configuration variable)    // initialize map    $map = array();    // find tables    $target=array();    if (isset($analyzed_sql[0]['table_ref']) && is_array($analyzed_sql[0]['table_ref'])) {        foreach ($analyzed_sql[0]['table_ref'] AS $table_ref_position => $table_ref) {            $target[] = $analyzed_sql[0]['table_ref'][$table_ref_position]['table_true_name'];        }    }    $tabs    = '(\'' . join('\',\'', $target) . '\')';    if (! strlen($table)) {        $exist_rel = false;    } else {        // To be able to later display a link to the related table,        // we verify both types of relations: either those that are        // native foreign keys or those defined in the phpMyAdmin        // configuration storage. If no PMA storage, we won't be able        // to use the "column to display" notion (for example show        // the name related to a numeric id).        $exist_rel = PMA_getForeigners($db, $table, '', 'both');        if ($exist_rel) {            foreach ($exist_rel AS $master_field => $rel) {                $display_field = PMA_getDisplayField($rel['foreign_db'], $rel['foreign_table']);                $map[$master_field] = array($rel['foreign_table'],                                      $rel['foreign_field'],                                      $display_field,                                      $rel['foreign_db']);            } // end while        } // end if    } // end if    // end 2b    // 3. ----- Displays the results table -----    PMA_displayTableHeaders($is_display, $fields_meta, $fields_cnt, $analyzed_sql, $sort_expression, $sort_expression_nodirection, $sort_direction);    $url_query = '';    echo '<tbody>' . "\n";    $clause_is_unique = PMA_displayTableBody($dt_result, $is_display, $map, $analyzed_sql);    // vertical output case    if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {        PMA_displayVerticalTable();    } // end if    unset($vertical_display);    echo '</tbody>' . "\n";    ?></table>    <?php    // 4. ----- Displays the link for multi-fields edit and delete    if ($is_display['del_lnk'] == 'dr' && $is_display['del_lnk'] != 'kp') {        $delete_text = $is_display['del_lnk'] == 'dr' ? __('Delete') : __('Kill');        $_url_params = array(            'db'        => $db,            'table'     => $table,            'sql_query' => $sql_query,            'goto'      => $goto,        );        $uncheckall_url = 'sql.php' . PMA_generate_common_url($_url_params);        $_url_params['checkall'] = '1';        $checkall_url = 'sql.php' . PMA_generate_common_url($_url_params);        if ($_SESSION['tmp_user_values']['disp_direction'] == 'vertical') {            $checkall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', true)) return false;';            $uncheckall_params['onclick'] = 'if (setCheckboxes(\'resultsForm\', false)) return false;';        } else {            $checkall_params['onclick'] = 'if (markAllRows(\'resultsForm\')) return false;';            $uncheckall_params['onclick'] = 'if (unMarkAllRows(\'resultsForm\')) return false;';        }        $checkall_link = PMA_linkOrButton($checkall_url, __('Check All'), $checkall_params, false);        $uncheckall_link = PMA_linkOrButton($uncheckall_url, __('Uncheck All'), $uncheckall_params, false);        if ($_SESSION['tmp_user_values']['disp_direction'] != 'vertical') {            echo '<img class="selectallarrow" width="38" height="22"'                .' src="' . $GLOBALS['pmaThemeImage'] . 'arrow_' . $GLOBALS['text_dir'] . '.png' . '"'                .' alt="' . __('With selected:') . '" />';        }        echo $checkall_link . "\n"            .' / ' . "\n"            .$uncheckall_link . "\n"            .'<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_change',            __('Change'), 'b_edit.png', 'edit'        );        PMA_buttonOrImage(            'submit_mult', 'mult_submit', 'submit_mult_delete',            $delete_text, 'b_drop.png', 'delete'        );        if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT') {            PMA_buttonOrImage(                'submit_mult', 'mult_submit', 'submit_mult_export',                __('Export'), 'b_tblexport.png', 'export'            );        }        echo "\n";        echo '<input type="hidden" name="sql_query"'            .' value="' . htmlspecialchars($sql_query) . '" />' . "\n";        if (! empty($GLOBALS['url_query'])) {            echo '<input type="hidden" name="url_query"'                .' value="' . $GLOBALS['url_query'] . '" />' . "\n";        }        echo '<input type="hidden" name="clause_is_unique"'            .' value="' . $clause_is_unique . '" />' . "\n";        echo '</form>' . "\n";    }    // 5. ----- Displays the navigation bar at the bottom if required -----    if ($is_display['nav_bar'] == '1' && empty($analyzed_sql[0]['limit_clause'])) {        echo '<br />' . "\n";        PMA_displayTableNavigation($pos_next, $pos_prev, $sql_query, 'bottom_direction_dropdown');    } elseif (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        echo "\n" . '<br /><br />' . "\n";    }    // 6. ----- Displays "Query results operations"    if (! isset($GLOBALS['printview']) || $GLOBALS['printview'] != '1') {        PMA_displayResultsOperations($the_disp_mode, $analyzed_sql);    }} // end of the 'PMA_displayTable()' functionfunction default_function($buffer){    $buffer = htmlspecialchars($buffer);    $buffer = str_replace("\011", ' &nbsp;&nbsp;&nbsp;', str_replace('  ', ' &nbsp;', $buffer));    $buffer = preg_replace("@((\015\012)|(\015)|(\012))@", '<br />', $buffer);    return $buffer;}/** * Displays operations that are available on results. * * @param array $the_disp_mode the display mode * @param array $analyzed_sql  the analyzed query * * @global  string   $db                the database name * @global  string   $table             the table name * @global  string   $sql_query         the current SQL query * @global  integer  $unlim_num_rows    the total number of rows returned by the *                                      SQL query without any programmatically *                                      appended "LIMIT" clause * * @access  private * * @see     PMA_showMessage(), PMA_setDisplayMode(), *          PMA_displayTableNavigation(), PMA_displayTableHeaders(), *          PMA_displayTableBody(), PMA_displayResultsOperations() * * @return nothing */function PMA_displayResultsOperations($the_disp_mode, $analyzed_sql){    global $db, $table, $sql_query, $unlim_num_rows, $fields_meta;    $header_shown = false;    $header = '<fieldset><legend>' . __('Query results operations') . '</legend>';    if ($the_disp_mode[6] == '1' || $the_disp_mode[9] == '1') {        // Displays "printable view" link if required        if ($the_disp_mode[9] == '1') {            if (!$header_shown) {                echo $header;                $header_shown = true;            }            $_url_params = array(                'db'        => $db,                'table'     => $table,                'printview' => '1',                'sql_query' => $sql_query,            );            $url_query = PMA_generate_common_url($_url_params);            echo PMA_linkOrButton(                'sql.php' . $url_query,                PMA_getIcon('b_print.png', __('Print view'), true),                '', true, true, 'print_view'            ) . "\n";            if ($_SESSION['tmp_user_values']['display_text']) {                $_url_params['display_text'] = 'F';                echo PMA_linkOrButton(                    'sql.php' . PMA_generate_common_url($_url_params),                    PMA_getIcon('b_print.png', __('Print view (with full texts)'), true),                    '', true, true, 'print_view'                ) . "\n";                unset($_url_params['display_text']);            }        } // end displays "printable view"    }    // Export link    // (the url_query has extra parameters that won't be used to export)    // (the single_table parameter is used in display_export.lib.php    //  to hide the SQL and the structure export dialogs)    // If the parser found a PROCEDURE clause    // (most probably PROCEDURE ANALYSE()) it makes no sense to    // display the Export link).    if (isset($analyzed_sql[0]) && $analyzed_sql[0]['querytype'] == 'SELECT' && ! isset($printview) && ! isset($analyzed_sql[0]['queryflags']['procedure'])) {        if (isset($analyzed_sql[0]['table_ref'][0]['table_true_name']) && ! isset($analyzed_sql[0]['table_ref'][1]['table_true_name'])) {            $_url_params['single_table'] = 'true';        }        if (!$header_shown) {            echo $header;            $header_shown = true;        }        $_url_params['unlim_num_rows'] = $unlim_num_rows;        /**         * At this point we don't know the table name; this can happen         * for example with a query like         * SELECT bike_code FROM (SELECT bike_code FROM bikes) tmp         * As a workaround we set in the table parameter the name of the         * first table of this database, so that tbl_export.php and         * the script it calls do not fail         */        if (empty($_url_params['table']) && !empty($_url_params['db'])) {            $_url_params['table'] = PMA_DBI_fetch_value("SHOW TABLES");            /* No result (probably no database selected) */            if ($_url_params['table'] === false) {                unset($_url_params['table']);            }        }        echo PMA_linkOrButton(            'tbl_export.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_tblexport.png', __('Export'), true),            '', true, true, ''        ) . "\n";        // show chart        echo PMA_linkOrButton(            'tbl_chart.php' . PMA_generate_common_url($_url_params),            PMA_getIcon('b_chart.png', __('Display chart'), true),            '', true, true, ''        ) . "\n";        // show GIS chart        $geometry_found = false;        // If atleast one geometry field is found        foreach ($fields_meta as $meta) {            if ($meta->type == 'geometry') {                $geometry_found = true;                break;            }        }        if ($geometry_found) {            echo PMA_linkOrButton(                'tbl_gis_visualization.php' . PMA_generate_common_url($_url_params),                PMA_getIcon('b_globe.gif', __('Visualize GIS data'), true),                '', true, true, ''            ) . "\n";        }    }    // CREATE VIEW    /**     *     * @todo detect privileges to create a view     *       (but see 2006-01-19 note in display_create_table.lib.php,     *        I think we cannot detect db-specific privileges reliably)     * Note: we don't display a Create view link if we found a PROCEDURE clause     */    if (!$header_shown) {        echo $header;        $header_shown = true;    }    if (!PMA_DRIZZLE && !isset($analyzed_sql[0]['queryflags']['procedure'])) {        echo PMA_linkOrButton(            'view_create.php' . $url_query,            PMA_getIcon('b_views.png', __('Create view'), true),            '', true, true, ''        ) . "\n";    }    if ($header_shown) {        echo '</fieldset><br />';    }}/** * Verifies what to do with non-printable contents (binary or BLOB) * in Browse mode. * * @param string $category           BLOB|BINARY|GEOMETRY * @param string $content            the binary content * @param string $transform_function transformation function * @param string $transform_options  transformation parameters * @param string $default_function   default transformation function * @param object $meta               the meta-information about this field * @param array  $url_params         parameters that should go to the download link * * @return  mixed  string or float */function PMA_handle_non_printable_contents($category, $content, $transform_function, $transform_options, $default_function, $meta, $url_params = array()){    $result = '[' . $category;    if (is_null($content)) {        $result .= ' - NULL';        $size = 0;    } elseif (isset($content)) {        $size = strlen($content);        $display_size = PMA_formatByteDown($size, 3, 1);        $result .= ' - '. $display_size[0] . ' ' . $display_size[1];    }    $result .= ']';    if (strpos($transform_function, 'octetstream')) {        $result = $content;    }    if ($size > 0) {        if ($default_function != $transform_function) {            $result = $transform_function($result, $transform_options, $meta);        } else {            $result = $default_function($result, array(), $meta);            if (stristr($meta->type, 'BLOB') && $_SESSION['tmp_user_values']['display_blob']) {                // in this case, restart from the original $content                $result = htmlspecialchars(PMA_replace_binary_contents($content));            }            /* Create link to download */            if (count($url_params) > 0) {                $result = '<a href="tbl_get_field.php' . PMA_generate_common_url($url_params) . '">' . $result . '</a>';            }        }    }    return($result);}/** * Prepares the displayable content of a data cell in Browse mode, * taking into account foreign key description field and transformations * * @param string $class              css classes for the td element * @param bool   $condition_field    whether the column is a part of the where clause * @param string $analyzed_sql       the analyzed query * @param object $meta               the meta-information about this field * @param array  $map                the list of relations * @param string $data               data * @param string $transform_function transformation function * @param string $default_function   default function * @param string $nowrap             'nowrap' if the content should not be wrapped * @param string $where_comparison   data for the where cluase * @param array  $transform_options  array of options for transformation * @param bool   $is_field_truncated whether the field is truncated * * @return  string  formatted data */function PMA_prepare_row_data($class, $condition_field, $analyzed_sql, $meta, $map, $data, $transform_function, $default_function, $nowrap, $where_comparison, $transform_options, $is_field_truncated ){    $result = ' class="' . PMA_addClass($class, $condition_field, $meta, $nowrap, $is_field_truncated, $transform_function, $default_function) . '">';    if (isset($analyzed_sql[0]['select_expr']) && is_array($analyzed_sql[0]['select_expr'])) {        foreach ($analyzed_sql[0]['select_expr'] AS $select_expr_position => $select_expr) {            $alias = $analyzed_sql[0]['select_expr'][$select_expr_position]['alias'];            if (isset($alias) && strlen($alias)) {                $true_column = $analyzed_sql[0]['select_expr'][$select_expr_position]['column'];                if ($alias == $meta->name) {                    // this change in the parameter does not matter                    // outside of the function                    $meta->name = $true_column;                } // end if            } // end if        } // end foreach    } // end if    if (isset($map[$meta->name])) {        // Field to display from the foreign table?        if (isset($map[$meta->name][2]) && strlen($map[$meta->name][2])) {            $dispsql     = 'SELECT ' . PMA_backquote($map[$meta->name][2])                . ' FROM ' . PMA_backquote($map[$meta->name][3])                . '.' . PMA_backquote($map[$meta->name][0])                . ' WHERE ' . PMA_backquote($map[$meta->name][1])                . $where_comparison;            $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);            if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                list($dispval) = PMA_DBI_fetch_row($dispresult, 0);            } else {                $dispval = __('Link not found');            }            @PMA_DBI_free_result($dispresult);        } else {            $dispval     = '';        } // end if... else...        if (isset($GLOBALS['printview']) && $GLOBALS['printview'] == '1') {            $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta)) . ' <code>[-&gt;' . $dispval . ']</code>';        } else {            if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                // user chose "relational key" in the display options, so                // the title contains the display field                $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';            } else {                $title = ' title="' . htmlspecialchars($data) . '"';            }            $_url_params = array(                'db'    => $map[$meta->name][3],                'table' => $map[$meta->name][0],                'pos'   => '0',                'sql_query' => 'SELECT * FROM '                                    . PMA_backquote($map[$meta->name][3]) . '.' . PMA_backquote($map[$meta->name][0])                                    . ' WHERE ' . PMA_backquote($map[$meta->name][1])                                    . $where_comparison,            );            $result .= '<a href="sql.php' . PMA_generate_common_url($_url_params)                 . '"' . $title . '>';            if ($transform_function != $default_function) {                // always apply a transformation on the real data,                // not on the display field                $result .= $transform_function($data, $transform_options, $meta);            } else {                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $result .= $transform_function($dispval, array(), $meta);                } else {                    // otherwise display data in the cell                    $result .= $transform_function($data, array(), $meta);                }            }            $result .= '</a>';        }    } else {        $result .= ($transform_function != $default_function ? $transform_function($data, $transform_options, $meta) : $transform_function($data, array(), $meta));    }    $result .= '</td>' . "\n";    return $result;}/** * Generates a checkbox for multi-row submits * * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            the row number * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix, $class){    $ret = '';    if (! empty($del_url) && $is_display['del_lnk'] != 'kp') {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '"';        }        $ret .= ' align="center">'           . '<input type="checkbox" id="id_rows_to_delete' . $row_no . $id_suffix . '" name="rows_to_delete[' . $where_clause_html . ']"'           . ' class="multi_checkbox"'           . ' value="' . htmlspecialchars($del_query) . '" ' . (isset($GLOBALS['checkall']) ? 'checked="checked"' : '') . ' />'           . '<input type="hidden" class="condition_array" value="' . htmlspecialchars(json_encode($condition_array)) . '" />'           . '    </td>';    }    return $ret;}/** * Generates an Edit link * * @param string $edit_url          edit url * @param string $class             css classes for td element * @param string $edit_str          text for the edit link * @param string $where_clause      where cluase * @param string $where_clause_html url encoded where cluase * * @return  string  the generated HTML */function PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html){    $ret = '';    if (! empty($edit_url)) {        $ret .= '<td class="' . $class . '" align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($edit_url, $edit_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates an Copy link * * @param string $copy_url          copy url * @param string $copy_str          text for the copy link * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param string $class             css classes for the td element * * @return  string  the generated HTML */function PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, $class){    $ret = '';    if (! empty($copy_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' ><span class="nowrap">'           . PMA_linkOrButton($copy_url, $copy_str, array(), false);        /*         * Where clause for selecting this row uniquely is provided as         * a hidden input. Used by jQuery scripts for handling grid editing         */        if (! empty($where_clause)) {            $ret .= '<input type="hidden" class="where_clause" value ="' . $where_clause_html . '" />';        }        $ret .= '</span></td>';    }    return $ret;}/** * Generates a Delete link * * @param string $del_url delete url * @param string $del_str text for the delete link * @param string $js_conf text for the JS confirmation * @param string $class   css classes for the td element * * @return  string  the generated HTML */function PMA_generateDeleteLink($del_url, $del_str, $js_conf, $class){    $ret = '';    if (! empty($del_url)) {        $ret .= '<td ';        if (! empty($class)) {            $ret .= 'class="' . $class . '" ';        }        $ret .= 'align="center" ' . ' >'           . PMA_linkOrButton($del_url, $del_str, $js_conf, false)           . '</td>';    }    return $ret;}/** * Generates checkbox and links at some position (left or right) * (only called for horizontal mode) * * @param string $position          the position of the checkbox and links * @param string $del_url           delete url * @param array  $is_display        array with explicit indexes for all the display elements * @param string $row_no            row number * @param string $where_clause      where clause * @param string $where_clause_html url encoded where cluase * @param array  $condition_array   array of conditions in the where cluase * @param string $del_query         delete query * @param string $id_suffix         suffix for the id * @param string $edit_url          edit url * @param string $copy_url          copy url * @param string $class             css classes for the td elements * @param string $edit_str          text for the edit link * @param string $copy_str          text for the copy link * @param string $del_str           text for the delete link * @param string $js_conf           text for the JS confirmation * * @return  string  the generated HTML */function PMA_generateCheckboxAndLinks($position, $del_url, $is_display, $row_no, $where_clause, $where_clause_html, $condition_array, $del_query, $id_suffix, $edit_url, $copy_url, $class, $edit_str, $copy_str, $del_str, $js_conf){    $ret = '';    if ($position == 'left') {        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');    } elseif ($position == 'right') {        $ret .= PMA_generateDeleteLink($del_url, $del_str, $js_conf, '', '');        $ret .= PMA_generateCopyLink($copy_url, $copy_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateEditLink($edit_url, $class, $edit_str, $where_clause, $where_clause_html, '');        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_right', '', '', '');    } else { // $position == 'none'        $ret .= PMA_generateCheckboxForMulti($del_url, $is_display, $row_no, $where_clause_html, $condition_array, $del_query, $id_suffix = '_left', '', '', '');    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * manipulation of table data like inserting, replacing and updating * * usally called as form action from tbl_change.php to insert or update table rows * * * @todo 'edit_next' tends to not work as expected if used ... at least there is no order by *       it needs the original query and the row number and than replace the LIMIT clause * @package PhpMyAdmin *//** * do not import request variable into global scope * * cannot be used as long as it could happen that the $goto file that is included * at the end of this script is not updated to work without imported request variables * * @todo uncomment this if all possible included files to rely on import request variablesif (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);} *//** * Gets some core libraries */require_once './libraries/common.inc.php';$blob_streaming_active = $GLOBALS['PMA_Config']->get('BLOBSTREAMING_PLUGINS_EXIST');// Check parametersPMA_checkParameters(array('db', 'table', 'goto'));PMA_DBI_select_db($GLOBALS['db']);/** * Initializes some variables */$goto_include = false;$GLOBALS['js_include'][] = 'makegrid.js';// Needed for generation of Inline Edit anchors$GLOBALS['js_include'][] = 'sql.js';if (isset($_REQUEST['insert_rows']) && is_numeric($_REQUEST['insert_rows']) && $_REQUEST['insert_rows'] != $cfg['InsertRows']) {    $cfg['InsertRows'] = $_REQUEST['insert_rows'];    $GLOBALS['js_include'][] = 'tbl_change.js';    include_once './libraries/header.inc.php';    include './tbl_change.php';    exit;}if (isset($_REQUEST['after_insert']) && in_array($_REQUEST['after_insert'], array('new_insert', 'same_insert', 'edit_next'))) {    $url_params['after_insert'] = $_REQUEST['after_insert'];    //$GLOBALS['goto'] = 'tbl_change.php';    $goto_include = 'tbl_change.php';    if (isset($_REQUEST['where_clause'])) {        if ($_REQUEST['after_insert'] == 'same_insert') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $url_params['where_clause'][] = $one_where_clause;            }        } elseif ($_REQUEST['after_insert'] == 'edit_next') {            foreach ($_REQUEST['where_clause'] as $one_where_clause) {                $local_query    = 'SELECT * FROM ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                                . ' WHERE ' . str_replace('` =', '` >', $one_where_clause)                                . ' LIMIT 1;';                $res            = PMA_DBI_query($local_query);                $row            = PMA_DBI_fetch_row($res);                $meta           = PMA_DBI_get_fields_meta($res);                // must find a unique condition based on unique key,                // not a combination of all fields                list($unique_condition, $clause_is_unique) = PMA_getUniqueCondition($res, count($meta), $meta, $row, true);                if (! empty($unique_condition)) {                    $_SESSION['edit_next'] = $unique_condition;                }                unset($unique_condition, $clause_is_unique);            }        }    }} elseif (! empty($GLOBALS['goto'])) {    if (! preg_match('@^[a-z_]+\.php$@', $GLOBALS['goto'])) {        // this should NOT happen        //$GLOBALS['goto'] = false;        $goto_include = false;    } else {        $goto_include = $GLOBALS['goto'];    }    if ($GLOBALS['goto'] == 'db_sql.php' && strlen($GLOBALS['table'])) {        $GLOBALS['table'] = '';    }}if (! $goto_include) {    if (! strlen($GLOBALS['table'])) {        $goto_include = 'db_sql.php';    } else {        $goto_include = 'tbl_sql.php';    }}// Defines the url to return in case of failure of the queryif (isset($_REQUEST['err_url'])) {    $err_url = $_REQUEST['err_url'];} else {    $err_url = 'tbl_change.php' . PMA_generate_common_url($url_params);}/** * Prepares the update/insert of a row */if (isset($_REQUEST['where_clause'])) {    // we were editing something => use the WHERE clause    $loop_array = (is_array($_REQUEST['where_clause']) ? $_REQUEST['where_clause'] : array($_REQUEST['where_clause']));    $using_key  = true;    $is_insert  = ($_REQUEST['submit_type'] == 'insert') || ($_REQUEST['submit_type'] == 'showinsert') || ($_REQUEST['submit_type'] == 'insertignore');    $is_insertignore  = ($_REQUEST['submit_type'] == 'insertignore');} else {    // new row => use indexes    $loop_array = array();    foreach ($_REQUEST['fields']['multi_edit'] as $key => $dummy) {        $loop_array[] = $key;    }    $using_key  = false;    $is_insert  = true;    $is_insertignore = false;}$query = array();$value_sets = array();$func_no_param = array(    'CONNECTION_ID',    'CURRENT_USER',    'CURDATE',    'CURTIME',    'DATABASE',    'LAST_INSERT_ID',    'NOW',    'PI',    'RAND',    'SYSDATE',    'UNIX_TIMESTAMP',    'USER',    'UTC_DATE',    'UTC_TIME',    'UTC_TIMESTAMP',    'UUID',    'VERSION',);$func_optional_param = array(    'RAND',    'UNIX_TIMESTAMP',);$gis_from_text_functions = array(    'GeomFromText',    'GeomCollFromText',    'LineFromText',    'MLineFromText',    'PointFromText',    'MPointFromText',    'PolyFromText',    'MPolyFromText',);$gis_from_wkb_functions = array(    'GeomFromWKB',    'GeomCollFromWKB',    'LineFromWKB',    'MLineFromWKB',    'PointFromWKB',    'MPointFromWKB',    'PolyFromWKB',    'MPolyFromWKB',);foreach ($loop_array as $rownumber => $where_clause) {    // skip fields to be ignored    if (! $using_key && isset($_REQUEST['insert_ignore_' . $where_clause])) {        continue;    }    // Defines the SET part of the sql query    $query_values = array();    // Map multi-edit keys to single-level arrays, dependent on how we got the fields    $me_fields        = isset($_REQUEST['fields']['multi_edit'][$rownumber])        ? $_REQUEST['fields']['multi_edit'][$rownumber]        : array();    $me_fields_name        = isset($_REQUEST['fields_name']['multi_edit'][$rownumber])        ? $_REQUEST['fields_name']['multi_edit'][$rownumber]        : null;    $me_fields_prev        = isset($_REQUEST['fields_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_prev']['multi_edit'][$rownumber]        : null;    $me_funcs        = isset($_REQUEST['funcs']['multi_edit'][$rownumber])        ? $_REQUEST['funcs']['multi_edit'][$rownumber]        : null;    $me_fields_type        = isset($_REQUEST['fields_type']['multi_edit'][$rownumber])        ? $_REQUEST['fields_type']['multi_edit'][$rownumber]        : null;    $me_fields_null        = isset($_REQUEST['fields_null']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null']['multi_edit'][$rownumber]        : null;    $me_fields_null_prev        = isset($_REQUEST['fields_null_prev']['multi_edit'][$rownumber])        ? $_REQUEST['fields_null_prev']['multi_edit'][$rownumber]        : null;    $me_auto_increment        = isset($_REQUEST['auto_increment']['multi_edit'][$rownumber])        ? $_REQUEST['auto_increment']['multi_edit'][$rownumber]        : null;    // Fetch the current values of a row to use in case we have a protected field    // @todo possibly move to ./libraries/tbl_replace_fields.inc.php    if ($is_insert && $using_key && isset($me_fields_type) && is_array($me_fields_type) && isset($where_clause)) {        $prot_row = PMA_DBI_fetch_single_row('SELECT * FROM ' . PMA_backquote($table) . ' WHERE ' . $where_clause . ';');    }    // When a select field is nullified, it's not present in $_REQUEST    // so initialize it; this way, the foreach($me_fields) will process it    foreach ($me_fields_name as $key => $val) {        if (! isset($me_fields[$key])) {            $me_fields[$key] = '';        }    }    // Iterate in the order of $me_fields_name, not $me_fields, to avoid problems    // when inserting multiple entries    foreach ($me_fields_name as $key => $field_name) {        $val = $me_fields[$key];        // Note: $key is an md5 of the fieldname. The actual fieldname is available in $me_fields_name[$key]        include './libraries/tbl_replace_fields.inc.php';        // for blobstreaming        if ($blob_streaming_active) {            $remove_blob_repo = isset($_REQUEST['remove_blob_repo_' . $key]) ? $_REQUEST['remove_blob_repo_' . $key] : null;            $upload_blob_repo = isset($_REQUEST['upload_blob_repo_' . $key]) ? $_REQUEST['upload_blob_repo_' . $key] : null;            // checks if an existing blob repository reference should be removed            if (isset($remove_blob_repo) && ! isset($upload_blob_repo)) {                $remove_blob_reference = $_REQUEST['remove_blob_ref_' . $key];                if (isset($remove_blob_reference)) {                    $val = "NULL";                }            }            // checks if this field requires a bs reference attached to it            if (isset($upload_blob_repo)) {                // get the most recent BLOB reference                $bs_reference = PMA_File::getRecentBLOBReference();                // if the most recent BLOB reference exists, set it as a field value                if (!is_null($bs_reference)) {                    $val = "'" . PMA_sqlAddSlashes($bs_reference) . "'";                }            }        }        if (empty($me_funcs[$key])) {            $cur_value = $val;        } elseif ('UUID' === $me_funcs[$key]) {            /* This way user will know what UUID new row has */            $uuid = PMA_DBI_fetch_value('SELECT UUID()');            $cur_value = "'" . $uuid . "'";        } elseif ((in_array($me_funcs[$key], $gis_from_text_functions)            && substr($val, 0, 3) == "'''")            || in_array($me_funcs[$key], $gis_from_wkb_functions)        ) {            // Remove enclosing apostrophes            $val = substr($val, 1, strlen($val) - 2);            // Remove escaping apostrophes            $val = str_replace("''", "'", $val);            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } elseif (! in_array($me_funcs[$key], $func_no_param)                  || ($val != "''" && in_array($me_funcs[$key], $func_optional_param))) {            $cur_value = $me_funcs[$key] . '(' . $val . ')';        } else {            $cur_value = $me_funcs[$key] . '()';        }        //  i n s e r t        if ($is_insert) {            // no need to add column into the valuelist            if (strlen($cur_value)) {                $query_values[] = $cur_value;                // first inserted row so prepare the list of fields                if (empty($value_sets)) {                    $query_fields[] = PMA_backquote($me_fields_name[$key]);                }            }        //  u p d a t e        } elseif (!empty($me_fields_null_prev[$key])         && ! isset($me_fields_null[$key])) {            // field had the null checkbox before the update            // field no longer has the null checkbox            $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;        } elseif (empty($me_funcs[$key])         && isset($me_fields_prev[$key])         && ("'" . PMA_sqlAddSlashes($me_fields_prev[$key]) . "'" == $val)) {            // No change for this column and no MySQL function is used -> next column            continue;        } elseif (! empty($val)) {            // avoid setting a field to NULL when it's already NULL            // (field had the null checkbox before the update            //  field still has the null checkbox)            if (empty($me_fields_null_prev[$key])             || empty($me_fields_null[$key])) {                 $query_values[] = PMA_backquote($me_fields_name[$key]) . ' = ' . $cur_value;            }        }    } // end foreach ($me_fields as $key => $val)    if (count($query_values) > 0) {        if ($is_insert) {            $value_sets[] = implode(', ', $query_values);        } else {            // build update query            $query[] = 'UPDATE ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])                . ' SET ' . implode(', ', $query_values) . ' WHERE ' . $where_clause . ($_REQUEST['clause_is_unique'] ? '' : ' LIMIT 1');        }    }} // end foreach ($loop_array as $where_clause)unset($me_fields_name, $me_fields_prev, $me_funcs, $me_fields_type, $me_fields_null, $me_fields_null_prev,    $me_auto_increment, $cur_value, $key, $val, $loop_array, $where_clause, $using_key,    $func_no_param);// Builds the sql queryif ($is_insert && count($value_sets) > 0) {    if ($is_insertignore) {        $insert_command = 'INSERT IGNORE ';    } else {        $insert_command = 'INSERT ';    }    $query[] = $insert_command . 'INTO ' . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($GLOBALS['table'])        . ' (' . implode(', ', $query_fields) . ') VALUES (' . implode('), (', $value_sets) . ')';    unset($insert_command);    unset($query_fields);} elseif (empty($query)) {    // No change -> move back to the calling script    //    // Note: logic passes here for inline edit    $message = PMA_Message::success(__('No change'));    $active_page = $goto_include;    if (! $GLOBALS['is_ajax_request'] == true) {        include_once './libraries/header.inc.php';    }    include './' . PMA_securePath($goto_include);    exit;}unset($me_fields, $is_insertignore);/** * Executes the sql query and get the result, then move back to the calling * page */if (! empty($GLOBALS['sql_query'])) {    $url_params['sql_query'] = $GLOBALS['sql_query'];    $return_to_sql_query = $GLOBALS['sql_query'];}$GLOBALS['sql_query'] = implode('; ', $query) . ';';// to ensure that the query is displayed in case of// "insert as new row" and then "insert another new row"$GLOBALS['display_query'] = $GLOBALS['sql_query'];$total_affected_rows = 0;$last_messages = array();$warning_messages = array();$error_messages = array();foreach ($query as $single_query) {    if ($_REQUEST['submit_type'] == 'showinsert') {        $last_messages[] = PMA_Message::notice(__('Showing SQL query'));        continue;    }    if ($GLOBALS['cfg']['IgnoreMultiSubmitErrors']) {        $result = PMA_DBI_try_query($single_query);    } else {        $result = PMA_DBI_query($single_query);    }    if (! $result) {        $error_messages[] = PMA_Message::sanitize(PMA_DBI_getError());    } else {        // The next line contains a real assignment, it's not a typo        if ($tmp = @PMA_DBI_affected_rows()) {            $total_affected_rows += $tmp;        }        unset($tmp);        $insert_id = PMA_DBI_insert_id();        if ($insert_id != 0) {            // insert_id is id of FIRST record inserted in one insert, so if we            // inserted multiple rows, we had to increment this            if ($total_affected_rows > 0) {                $insert_id = $insert_id + $total_affected_rows - 1;            }            $last_message = PMA_Message::notice(__('Inserted row id: %1$d'));            $last_message->addParam($insert_id);            $last_messages[] = $last_message;        }        PMA_DBI_free_result($result);    } // end if    foreach (PMA_DBI_get_warnings() as $warning) {        $warning_messages[]            = PMA_Message::sanitize(                $warning['Level'] . ': #' . $warning['Code'] . ' ' . $warning['Message']            );    }    unset($result);}unset($single_query, $query);if ($is_insert && count($value_sets) > 0) {    $message = PMA_Message::inserted_rows($total_affected_rows);} else {    $message = PMA_Message::affected_rows($total_affected_rows);}$message->addMessages($last_messages, '<br />');if (! empty($warning_messages)) {    $message->addMessages($warning_messages, '<br />');    $message->isError(true);}if (! empty($error_messages)) {    $message->addMessages($error_messages);    $message->isError(true);}unset($error_messages, $warning_messages, $total_affected_rows, $last_messages, $last_message);if ($GLOBALS['is_ajax_request'] == true) {    /**     * If we are in grid editing, we need to process the relational and     * transformed fields, if they were edited. After that, output the correct     * link/transformed value and exit     *     * Logic taken from libraries/display_tbl.lib.php     */    if (isset($_REQUEST['rel_fields_list']) && $_REQUEST['rel_fields_list'] != '') {        //handle relations work here for updated row.        include_once './libraries/relation.lib.php';        $map = PMA_getForeigners($db, $table, '', 'both');        $rel_fields = array();        parse_str($_REQUEST['rel_fields_list'], $rel_fields);        // loop for each relation cell        foreach ( $rel_fields as $cell_index => $curr_cell_rel_field) {            foreach ( $curr_cell_rel_field as $rel_field => $rel_field_value) {                $where_comparison = "='" . $rel_field_value . "'";                $display_field = PMA_getDisplayField($map[$rel_field]['foreign_db'], $map[$rel_field]['foreign_table']);                // Field to display from the foreign table?                if (isset($display_field) && strlen($display_field)) {                    $dispsql     = 'SELECT ' . PMA_backquote($display_field)                        . ' FROM ' . PMA_backquote($map[$rel_field]['foreign_db'])                        . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                        . $where_comparison;                    $dispresult  = PMA_DBI_try_query($dispsql, null, PMA_DBI_QUERY_STORE);                    if ($dispresult && PMA_DBI_num_rows($dispresult) > 0) {                        list($dispval) = PMA_DBI_fetch_row($dispresult, 0);                    } else {                        //$dispval = __('Link not found');                    }                    @PMA_DBI_free_result($dispresult);                } else {                    $dispval     = '';                } // end if... else...                if ('K' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational key" in the display options, so                    // the title contains the display field                    $title = (! empty($dispval))? ' title="' . htmlspecialchars($dispval) . '"' : '';                } else {                    $title = ' title="' . htmlspecialchars($rel_field_value) . '"';                }                $_url_params = array(                    'db'    => $map[$rel_field]['foreign_db'],                    'table' => $map[$rel_field]['foreign_table'],                    'pos'   => '0',                    'sql_query' => 'SELECT * FROM '                                        . PMA_backquote($map[$rel_field]['foreign_db']) . '.' . PMA_backquote($map[$rel_field]['foreign_table'])                                        . ' WHERE ' . PMA_backquote($map[$rel_field]['foreign_field'])                                        . $where_comparison                );                $output = '<a href="sql.php' . PMA_generate_common_url($_url_params) . '"' . $title . '>';                if ('D' == $_SESSION['tmp_user_values']['relational_display']) {                    // user chose "relational display field" in the                    // display options, so show display field in the cell                    $output .= (!empty($dispval)) ? htmlspecialchars($dispval) : '';                } else {                    // otherwise display data in the cell                    $output .= htmlspecialchars($rel_field_value);                }                $output .= '</a>';                $extra_data['relations'][$cell_index] = $output;            }        }   // end of loop for each relation cell    }    if (isset($_REQUEST['do_transformations']) && $_REQUEST['do_transformations'] == true ) {        include_once './libraries/transformations.lib.php';        //if some posted fields need to be transformed, generate them here.        $mime_map = PMA_getMIME($db, $table);        if ($mime_map === false) {            $mime_map = array();        }        $edited_values = array();        parse_str($_REQUEST['transform_fields_list'], $edited_values);        foreach ($mime_map as $transformation) {            $include_file = PMA_securePath($transformation['transformation']);            $column_name = $transformation['column_name'];            foreach ($edited_values as $cell_index => $curr_cell_edited_values) {                if (isset($curr_cell_edited_values[$column_name])) {                    $column_data = $curr_cell_edited_values[$column_name];                    $_url_params = array(                        'db'            => $db,                        'table'         => $table,                        'where_clause'  => $_REQUEST['where_clause'],                        'transform_key' => $column_name,                    );                    if (file_exists('./libraries/transformations/' . $include_file)) {                        $transformfunction_name = str_replace('.inc.php', '', $transformation['transformation']);                        include_once './libraries/transformations/' . $include_file;                        if (function_exists('PMA_transformation_' . $transformfunction_name)) {                            $transform_function = 'PMA_transformation_' . $transformfunction_name;                            $transform_options  = PMA_transformation_getOptions((isset($transformation['transformation_options']) ? $transformation['transformation_options'] : ''));                            $transform_options['wrapper_link'] = PMA_generate_common_url($_url_params);                        }                    }                    $extra_data['transformations'][$cell_index] = $transform_function($column_data, $transform_options);                }            }   // end of loop for each transformation cell        }   // end of loop for each $mime_map    }    /**Get the total row count of the table*/    $extra_data['row_count'] = PMA_Table::countRecords($_REQUEST['db'], $_REQUEST['table']);    $extra_data['sql_query'] = PMA_showMessage($message, $GLOBALS['display_query']);    PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);}if (isset($return_to_sql_query)) {    $disp_query = $GLOBALS['sql_query'];    $disp_message = $message;    unset($message);    $GLOBALS['sql_query'] = $return_to_sql_query;}$GLOBALS['js_include'][] = 'tbl_change.js';// in case we call sql.php which needs those:$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$active_page = $goto_include;/** * If user asked for "and then Insert another new row" we have to remove * WHERE clause information so that tbl_change.php does not go back * to the current record */if (isset($_REQUEST['after_insert']) && 'new_insert' == $_REQUEST['after_insert']) {        unset($_REQUEST['where_clause']);}/** * Load header. */require_once './libraries/header.inc.php';/** * Load target page. */require './' . PMA_securePath($goto_include);exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core functions used all over the scripts. * This script is distinct from libraries/common.inc.php because this * script is called from /test. * * @package PhpMyAdmin *//** * checks given $var and returns it if valid, or $default of not valid * given $var is also checked for type being 'similar' as $default * or against any other type if $type is provided * * <code> * // $_REQUEST['db'] not set * echo PMA_ifSetOr($_REQUEST['db'], ''); // '' * // $_REQUEST['sql_query'] not set * echo PMA_ifSetOr($_REQUEST['sql_query']); // null * // $cfg['ForceSSL'] not set * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL']); // null * // $cfg['ForceSSL'] set to 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1 * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1 * // $cfg['ForceSSL'] set to true * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true * </code> * * @see     PMA_isValid() * @param mixed   $var        param to check * @param mixed   $default    default value * @param mixed   $type       var type or array of values to check against $var * @return  mixed   $var or $default */function PMA_ifSetOr(&$var, $default = null, $type = 'similar'){    if (! PMA_isValid($var, $type, $default)) {        return $default;    }    return $var;}/** * checks given $var against $type or $compare * * $type can be: * - false       : no type checking * - 'scalar'    : whether type of $var is integer, float, string or boolean * - 'numeric'   : whether type of $var is any number repesentation * - 'length'    : whether type of $var is scalar with a string length > 0 * - 'similar'   : whether type of $var is similar to type of $compare * - 'equal'     : whether type of $var is identical to type of $compare * - 'identical' : whether $var is identical to $compare, not only the type! * - or any other valid PHP variable type * * <code> * // $_REQUEST['doit'] = true; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false * // $_REQUEST['doit'] = 'true'; * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true * </code> * * NOTE: call-by-reference is used to not get NOTICE on undefined vars, * but the var is not altered inside this function, also after checking a var * this var exists nut is not set, example: * <code> * // $var is not set * isset($var); // false * functionCallByReference($var); // false * isset($var); // true * functionCallByReference($var); // true * </code> * * to avoid this we set this var to null if not isset * * @todo create some testsuites * @todo add some more var types like hex, bin, ...? * @see     http://php.net/gettype * @param mixed   $var        variable to check * @param mixed   $type       var type or array of valid values to check against $var * @param mixed   $compare    var to compare with $var * @return  boolean whether valid or not */function PMA_isValid(&$var, $type = 'length', $compare = null){    if (! isset($var)) {        // var is not even set        return false;    }    if ($type === false) {        // no vartype requested        return true;    }    if (is_array($type)) {        return in_array($var, $type);    }    // allow some aliaes of var types    $type = strtolower($type);    switch ($type) {        case 'identic' :            $type = 'identical';            break;        case 'len' :            $type = 'length';            break;        case 'bool' :            $type = 'boolean';            break;        case 'float' :            $type = 'double';            break;        case 'int' :            $type = 'integer';            break;        case 'null' :            $type = 'NULL';            break;    }    if ($type === 'identical') {        return $var === $compare;    }    // whether we should check against given $compare    if ($type === 'similar') {        switch (gettype($compare)) {            case 'string':            case 'boolean':                $type = 'scalar';                break;            case 'integer':            case 'double':                $type = 'numeric';                break;            default:                $type = gettype($compare);        }    } elseif ($type === 'equal') {        $type = gettype($compare);    }    // do the check    if ($type === 'length' || $type === 'scalar') {        $is_scalar = is_scalar($var);        if ($is_scalar && $type === 'length') {            return (bool) strlen($var);        }        return $is_scalar;    }    if ($type === 'numeric') {        return is_numeric($var);    }    if (gettype($var) === $type) {        return true;    }    return false;}/** * Removes insecure parts in a path; used before include() or * require() when a part of the path comes from an insecure source * like a cookie or form. * * @param string  The path to check * * @return   string  The secured path * * @access  public */function PMA_securePath($path){    // change .. to .    $path = preg_replace('@\.\.*@', '.', $path);    return $path;} // end function/** * displays the given error message on phpMyAdmin error page in foreign language, * ends script execution and closes session * * loads language file if not loaded already * * @todo    use detected argument separator (PMA_Config) * @param string $error_message the error message or named error message * @param string|array $message_args arguments applied to $error_message * @return  exit */function PMA_fatalError($error_message, $message_args = null){    /* Use format string if applicable */    if (is_string($message_args)) {        $error_message = sprintf($error_message, $message_args);    } elseif (is_array($message_args)) {        $error_message = vsprintf($error_message, $message_args);    }    $error_message = strtr($error_message, array('<br />' => '[br]'));    if (function_exists('__')) {        $error_header = __('Error');    } else {        $error_header = 'Error';    }    // Displays the error message    $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];    $dir = $GLOBALS['text_dir'];    $type = $error_header;    $error = $error_message;    // on fatal errors it cannot hurt to always delete the current session    if (isset($GLOBALS['session_name']) && isset($_COOKIE[$GLOBALS['session_name']])) {        $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);    }    include './libraries/error.inc.php';    if (!defined('TESTSUITE')) {        exit;    }}/** * Returns a link to the PHP documentation * * @param string  anchor in documentation * * @return  string  the URL * * @access  public */function PMA_getPHPDocLink($target){    /* Gettext does not have to be loaded yet */    if (function_exists('_pgettext')) {        /* l10n: Please check that translation actually exists. */        $lang = _pgettext('PHP documentation language', 'en');    } else {        $lang = 'en';    }    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);}/** * Warn or fail on missing extension. * * @param string $extension Extension name * @param bool $fatal Whether the error is fatal. / @param string $extra Extra string to append to messsage. */function PMA_warnMissingExtension($extension, $fatal = false, $extra = ''){    /* Gettext does not have to be loaded yet here */    if (function_exists('__')) {        $message = __('The %s extension is missing. Please check your PHP configuration.');    } else {        $message = 'The %s extension is missing. Please check your PHP configuration.';    }    $message = sprintf($message,        '[a@' . PMA_getPHPDocLink('book.' . $extension . '.php') . '@Documentation][em]' . $extension . '[/em][/a]');    if ($extra != '') {        $message .= ' ' . $extra;    }    if ($fatal) {        PMA_fatalError($message);    } else {        trigger_error($message, E_USER_WARNING);    }}/** * returns count of tables in given db * * @param string  $db database to count tables for * @return  integer count of tables in $db */function PMA_getTableCount($db){    $tables = PMA_DBI_try_query(        'SHOW TABLES FROM ' . PMA_backquote($db) . ';',        null, PMA_DBI_QUERY_STORE);    if ($tables) {        $num_tables = PMA_DBI_num_rows($tables);        // do not count hidden blobstreaming tables        while ((($num_tables > 0)) && $data = PMA_DBI_fetch_assoc($tables)) {            if (PMA_BS_IsHiddenTable($data['Tables_in_' . $db])) {                $num_tables--;            }        }        PMA_DBI_free_result($tables);    } else {        $num_tables = 0;    }    return $num_tables;}/** * Converts numbers like 10M into bytes * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas * (renamed with PMA prefix to avoid double definition when embedded * in Moodle) * * @param string  $size * @return  integer $size */function PMA_get_real_size($size = 0){    if (! $size) {        return 0;    }    $scan['gb'] = 1073741824; //1024 * 1024 * 1024;    $scan['g']  = 1073741824; //1024 * 1024 * 1024;    $scan['mb'] = 1048576;    $scan['m']  = 1048576;    $scan['kb'] =    1024;    $scan['k']  =    1024;    $scan['b']  =       1;    foreach ($scan as $unit => $factor) {        if (strlen($size) > strlen($unit)         && strtolower(substr($size, strlen($size) - strlen($unit))) == $unit) {            return substr($size, 0, strlen($size) - strlen($unit)) * $factor;        }    }    return $size;} // end function PMA_get_real_size()/** * merges array recursive like array_merge_recursive() but keyed-values are * always overwritten. * * array PMA_array_merge_recursive(array $array1[, array $array2[, array ...]]) * * @see     http://php.net/array_merge * @see     http://php.net/array_merge_recursive * @param array   array to merge * @param array   array to merge * @param array   ... * @return  array   merged array */function PMA_array_merge_recursive(){    switch(func_num_args()) {        case 0 :            return false;            break;        case 1 :            // when does that happen?            return func_get_arg(0);            break;        case 2 :            $args = func_get_args();            if (! is_array($args[0]) || ! is_array($args[1])) {                return $args[1];            }            foreach ($args[1] as $key2 => $value2) {                if (isset($args[0][$key2]) && !is_int($key2)) {                    $args[0][$key2] = PMA_array_merge_recursive($args[0][$key2],                        $value2);                } else {                    // we erase the parent array, otherwise we cannot override a directive that                    // contains array elements, like this:                    // (in config.default.php) $cfg['ForeignKeyDropdownOrder'] = array('id-content','content-id');                    // (in config.inc.php) $cfg['ForeignKeyDropdownOrder'] = array('content-id');                    if (is_int($key2) && $key2 == 0) {                        unset($args[0]);                    }                    $args[0][$key2] = $value2;                }            }            return $args[0];            break;        default :            $args = func_get_args();            $args[1] = PMA_array_merge_recursive($args[0], $args[1]);            array_shift($args);            return call_user_func_array('PMA_array_merge_recursive', $args);            break;    }}/** * calls $function vor every element in $array recursively * * this function is protected against deep recursion attack CVE-2006-1549, * 1000 seems to be more than enough * * @see http://www.php-security.org/MOPB/MOPB-02-2007.html * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549 * * @param array   $array      array to walk * @param string  $function   function to call for every array element */function PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false){    static $recursive_counter = 0;    if (++$recursive_counter > 1000) {        die(__('possible deep recursion attack'));    }    foreach ($array as $key => $value) {        if (is_array($value)) {            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);        } else {            $array[$key] = $function($value);        }        if ($apply_to_keys_also && is_string($key)) {            $new_key = $function($key);            if ($new_key != $key) {                $array[$new_key] = $array[$key];                unset($array[$key]);            }        }    }    $recursive_counter--;}/** * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist) * * checks given given $page against given $whitelist and returns true if valid * it ignores optionaly query paramters in $page (script.php?ignored) * * @param string  &$page      page to check * @param array   $whitelist  whitelist to check page against * @return  boolean whether $page is valid or not (in $whitelist or not) */function PMA_checkPageValidity(&$page, $whitelist){    if (! isset($page) || !is_string($page)) {        return false;    }    if (in_array($page, $whitelist)) {        return true;    } elseif (in_array(substr($page, 0, strpos($page . '?', '?')), $whitelist)) {        return true;    } else {        $_page = urldecode($page);        if (in_array(substr($_page, 0, strpos($_page . '?', '?')), $whitelist)) {            return true;        }    }    return false;}/** * trys to find the value for the given environment vriable name * * searchs in $_SERVER, $_ENV than trys getenv() and apache_getenv() * in this order * * @param string  $var_name   variable name * @return  string  value of $var or empty string */function PMA_getenv($var_name){    if (isset($_SERVER[$var_name])) {        return $_SERVER[$var_name];    } elseif (isset($_ENV[$var_name])) {        return $_ENV[$var_name];    } elseif (getenv($var_name)) {        return getenv($var_name);    } elseif (function_exists('apache_getenv')     && apache_getenv($var_name, true)) {        return apache_getenv($var_name, true);    }    return '';}/** * Send HTTP header, taking IIS limits into account (600 seems ok) * * @param string   $uri the header to send * @return  boolean  always true */function PMA_sendHeaderLocation($uri){    if (PMA_IS_IIS && strlen($uri) > 600) {        include_once './libraries/js_escape.lib.php';        echo '<html><head><title>- - -</title>' . "\n";        echo '<meta http-equiv="expires" content="0">' . "\n";        echo '<meta http-equiv="Pragma" content="no-cache">' . "\n";        echo '<meta http-equiv="Cache-Control" content="no-cache">' . "\n";        echo '<meta http-equiv="Refresh" content="0;url=' .  htmlspecialchars($uri) . '">' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'setTimeout("window.location = unescape(\'"' . PMA_escapeJsString($uri) . '"\')", 2000);' . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";        echo '</head>' . "\n";        echo '<body>' . "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo 'document.write(\'<p><a href="' . htmlspecialchars($uri) . '">' . __('Go') . '</a></p>\');' . "\n";        echo '//]]>' . "\n";        echo '</script></body></html>' . "\n";    } else {        if (SID) {            if (strpos($uri, '?') === false) {                header('Location: ' . $uri . '?' . SID);            } else {                $separator = PMA_get_arg_separator();                header('Location: ' . $uri . $separator . SID);            }        } else {            session_write_close();            if (headers_sent()) {                if (function_exists('debug_print_backtrace')) {                    echo '<pre>';                    debug_print_backtrace();                    echo '</pre>';                }                trigger_error('PMA_sendHeaderLocation called when headers are already sent!', E_USER_ERROR);            }            // bug #1523784: IE6 does not like 'Refresh: 0', it            // results in a blank page            // but we need it when coming from the cookie login panel)            if (PMA_IS_IIS && defined('PMA_COMING_FROM_COOKIE_LOGIN')) {                header('Refresh: 0; ' . $uri);            } else {                header('Location: ' . $uri);            }        }    }}/** * Outputs headers to prevent caching in browser (and on the way). * * @return nothing */function PMA_no_cache_header(){    header('Expires: ' . date(DATE_RFC1123)); // rfc2616 - Section 14.21    header('Cache-Control: no-store, no-cache, must-revalidate, pre-check=0, post-check=0, max-age=0'); // HTTP/1.1    if (PMA_USR_BROWSER_AGENT == 'IE') {        /* FIXME: Why is this speecial case for IE needed? */        header('Pragma: public');    } else {        header('Pragma: no-cache'); // HTTP/1.0        // test case: exporting a database into a .gz file with Safari        // would produce files not having the current time        // (added this header for Safari but should not harm other browsers)        header('Last-Modified: ' . date(DATE_RFC1123));    }}/** * Sends header indicating file download. * * @param string $filename Filename to include in headers if empty, *                         none Content-Disposition header will be sent. * @param string $mimetype MIME type to include in headers. * @param int    $length   Length of content (optional) * @param bool   $no_cache Whether to include no-caching headers. * * @return nothing */function PMA_download_header($filename, $mimetype, $length = 0, $no_cache = true){    if ($no_cache) {        PMA_no_cache_header();    }    /* Replace all possibly dangerous chars in filename */    $filename = str_replace(array(';', '"', "\n", "\r"), '-', $filename);    if (!empty($filename)) {        header('Content-Description: File Transfer');        header('Content-Disposition: attachment; filename="' . $filename . '"');    }    header('Content-Type: ' . $mimetype);    header('Content-Transfer-Encoding: binary');    if ($length > 0) {        header('Content-Length: ' . $length);    }}/** * Returns value of an element in $array given by $path. * $path is a string describing position of an element in an associative array, * eg. Servers/1/host refers to $array[Servers][1][host] * * @param string   $path * @param array    $array * @param mixed    $default * @return mixed    array element or $default */function PMA_array_read($path, $array, $default = null){    $keys = explode('/', $path);    $value =& $array;    foreach ($keys as $key) {        if (! isset($value[$key])) {            return $default;        }        $value =& $value[$key];    }    return $value;}/** * Stores value in an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_write($path, &$array, $value){    $keys = explode('/', $path);    $last_key = array_pop($keys);    $a =& $array;    foreach ($keys as $key) {        if (! isset($a[$key])) {            $a[$key] = array();        }        $a =& $a[$key];    }    $a[$last_key] = $value;}/** * Removes value from an array * * @param string   $path * @param array    &$array * @param mixed    $value */function PMA_array_remove($path, &$array){    $keys = explode('/', $path);    $keys_last = array_pop($keys);    $path = array();    $depth = 0;    $path[0] =& $array;    $found = true;    // go as deep as required or possible    foreach ($keys as $key) {        if (! isset($path[$depth][$key])) {            $found = false;            break;        }        $depth++;        $path[$depth] =& $path[$depth-1][$key];    }    // if element found, remove it    if ($found) {        unset($path[$depth][$keys_last]);        $depth--;    }    // remove empty nested arrays    for (; $depth >= 0; $depth--) {        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {            unset($path[$depth][$keys[$depth]]);        } else {            break;        }    }}/** * Returns link to (possibly) external site using defined redirector. * * @param string $url  URL where to go. * * @return string URL for a link. */function PMA_linkURL($url){    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {        return $url;    } else {        if (!function_exists('PMA_generate_common_url')) {            include_once './libraries/url_generating.lib.php';        }        $params = array();        $params['url'] = $url;        return './url.php' . PMA_generate_common_url($params);    }}/** * Returns HTML code to include javascript file. * * @param string $url Location of javascript, relative to js/ folder. * * @return string HTML code for javascript inclusion. */function PMA_includeJS($url){    if (strpos($url, '?') === false) {        return '<script src="./js/' . $url . '?ts=' . filemtime('./js/' . $url) . '" type="text/javascript"></script>' . "\n";    } else {        return '<script src="./js/' . $url . '" type="text/javascript"></script>' . "\n";    }}/** * Adds JS code snippets to be displayed by header.inc.php. Adds a * newline to each snippet. * * @param string $str Js code to be added (e.g. "token=1234;") * */function PMA_AddJSCode($str){    $GLOBALS['js_script'][] = $str;}/** * Adds JS code snippet for variable assignment to be displayed by header.inc.php. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * */function PMA_AddJSVar($key, $value, $escape = true){    PMA_AddJsCode(PMA_getJsValue($key, $value, $escape));}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (! PMA_cacheExists('mysql_charsets', true)) {    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.CHARACTER_SETS'        : 'SELECT * FROM information_schema.CHARACTER_SETS';    $res = PMA_DBI_query($sql);    $mysql_charsets = array();    while ($row = PMA_DBI_fetch_assoc($res)) {        $mysql_charsets[] = $row['CHARACTER_SET_NAME'];        // never used        //$mysql_charsets_maxlen[$row['Charset']] = $row['Maxlen'];        $mysql_charsets_descriptions[$row['CHARACTER_SET_NAME']] = $row['DESCRIPTION'];    }    PMA_DBI_free_result($res);    sort($mysql_charsets, SORT_STRING);    $mysql_collations = array_flip($mysql_charsets);    $mysql_default_collations = $mysql_collations_flat = $mysql_charsets_available = $mysql_collations_available = array();    $sql = PMA_DRIZZLE        ? 'SELECT * FROM data_dictionary.COLLATIONS'        : 'SELECT * FROM information_schema.COLLATIONS';    $res = PMA_DBI_query($sql);    while ($row = PMA_DBI_fetch_assoc($res)) {        if (! is_array($mysql_collations[$row['CHARACTER_SET_NAME']])) {            $mysql_collations[$row['CHARACTER_SET_NAME']] = array($row['COLLATION_NAME']);        } else {            $mysql_collations[$row['CHARACTER_SET_NAME']][] = $row['COLLATION_NAME'];        }        $mysql_collations_flat[] = $row['COLLATION_NAME'];        if ($row['IS_DEFAULT'] == 'Yes' || $row['IS_DEFAULT'] == '1') {            $mysql_default_collations[$row['CHARACTER_SET_NAME']] = $row['COLLATION_NAME'];        }        //$mysql_collations_available[$row['Collation']] = ! isset($row['Compiled']) || $row['Compiled'] == 'Yes';        $mysql_collations_available[$row['COLLATION_NAME']] = true;        $mysql_charsets_available[$row['CHARACTER_SET_NAME']]            = !empty($mysql_charsets_available[$row['CHARACTER_SET_NAME']])            || !empty($mysql_collations_available[$row['COLLATION_NAME']]);    }    PMA_DBI_free_result($res);    unset($res, $row);    if (PMA_DRIZZLE && isset($mysql_collations['utf8_general_ci']) && isset($mysql_collations['utf8'])) {        $mysql_collations['utf8'] = $mysql_collations['utf8_general_ci'];        $mysql_default_collations['utf8'] = $mysql_default_collations['utf8_general_ci'];        $mysql_charsets_available['utf8'] = $mysql_charsets_available['utf8_general_ci'];        unset($mysql_collations['utf8_general_ci'], $mysql_default_collations['utf8_general_ci'],            $mysql_charsets_available['utf8_general_ci']);    }    sort($mysql_collations_flat, SORT_STRING);    foreach ($mysql_collations AS $key => $value) {        sort($mysql_collations[$key], SORT_STRING);        reset($mysql_collations[$key]);    }    unset($key, $value);    PMA_cacheSet('mysql_charsets', $GLOBALS['mysql_charsets'], true);    PMA_cacheSet('mysql_charsets_descriptions', $GLOBALS['mysql_charsets_descriptions'], true);    PMA_cacheSet('mysql_charsets_available', $GLOBALS['mysql_charsets_available'], true);    PMA_cacheSet('mysql_collations', $GLOBALS['mysql_collations'], true);    PMA_cacheSet('mysql_default_collations', $GLOBALS['mysql_default_collations'], true);    PMA_cacheSet('mysql_collations_flat', $GLOBALS['mysql_collations_flat'], true);    PMA_cacheSet('mysql_collations_available', $GLOBALS['mysql_collations_available'], true);} else {    $GLOBALS['mysql_charsets']                  = PMA_cacheGet('mysql_charsets', true);    $GLOBALS['mysql_charsets_descriptions']     = PMA_cacheGet('mysql_charsets_descriptions', true);    $GLOBALS['mysql_charsets_available']        = PMA_cacheGet('mysql_charsets_available', true);    $GLOBALS['mysql_collations']                = PMA_cacheGet('mysql_collations', true);    $GLOBALS['mysql_default_collations']        = PMA_cacheGet('mysql_default_collations', true);    $GLOBALS['mysql_collations_flat']           = PMA_cacheGet('mysql_collations_flat', true);    $GLOBALS['mysql_collations_available']      = PMA_cacheGet('mysql_collations_available', true);}define('PMA_CSDROPDOWN_COLLATION', 0);define('PMA_CSDROPDOWN_CHARSET',   1);function PMA_generateCharsetDropdownBox($type = PMA_CSDROPDOWN_COLLATION,    $name = null, $id = null, $default = null, $label = true, $indent = 0,    $submitOnChange = false, $displayUnavailable = false){    global $mysql_charsets, $mysql_charsets_descriptions,        $mysql_charsets_available, $mysql_collations, $mysql_collations_available;    if (empty($name)) {        if ($type == PMA_CSDROPDOWN_COLLATION) {            $name = 'collation';        } else {            $name = 'character_set';        }    }    $return_str  = '<select xml:lang="en" dir="ltr" name="'        . htmlspecialchars($name) . '"'        . (empty($id) ? '' : ' id="' . htmlspecialchars($id) . '"')        . ($submitOnChange ? ' class="autosubmit"' : '') . '>' . "\n";    if ($label) {        $return_str .= '<option value="">'            . ($type == PMA_CSDROPDOWN_COLLATION ? __('Collation') : __('Charset'))            . '</option>' . "\n";    }    $return_str .= '<option value=""></option>' . "\n";    foreach ($mysql_charsets as $current_charset) {        if (!$mysql_charsets_available[$current_charset]) {            continue;        }        $current_cs_descr            = empty($mysql_charsets_descriptions[$current_charset])            ? $current_charset            : $mysql_charsets_descriptions[$current_charset];        if ($type == PMA_CSDROPDOWN_COLLATION) {            $return_str .= '<optgroup label="' . $current_charset                . '" title="' . $current_cs_descr . '">' . "\n";            foreach ($mysql_collations[$current_charset] as $current_collation) {                if (!$mysql_collations_available[$current_collation]) {                    continue;                }                $return_str .= '<option value="' . $current_collation                    . '" title="' . PMA_getCollationDescr($current_collation) . '"'                    . ($default == $current_collation ? ' selected="selected"' : '') . '>'                    . $current_collation . '</option>' . "\n";            }            $return_str .= '</optgroup>' . "\n";        } else {            $return_str .= '<option value="' . $current_charset                . '" title="' . $current_cs_descr . '"'                . ($default == $current_charset ? ' selected="selected"' : '') . '>'                . $current_charset . '</option>' . "\n";        }    }    $return_str .= '</select>' . "\n";    return $return_str;}function PMA_generateCharsetQueryPart($collation){    if (!PMA_DRIZZLE) {        list($charset) = explode('_', $collation);        return ' CHARACTER SET ' . $charset . ($charset == $collation ? '' : ' COLLATE ' . $collation);    } else {        return ' COLLATE ' . $collation;    }}/** * returns collation of given db * * @param string  $db     name of db * @return  string  collation of $db */function PMA_getDbCollation($db){    if (PMA_is_system_schema($db)) {        // We don't have to check the collation of the virtual        // information_schema database: We know it!        return 'utf8_general_ci';    }    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // this is slow with thousands of databases        $sql = PMA_DRIZZLE            ? 'SELECT DEFAULT_COLLATION_NAME FROM data_dictionary.SCHEMAS WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1'            : 'SELECT DEFAULT_COLLATION_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME = \'' . PMA_sqlAddSlashes($db) . '\' LIMIT 1';        return PMA_DBI_fetch_value($sql);    } else {        PMA_DBI_select_db($db);        $return = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'collation_database\'', 0, 1);        if ($db !== $GLOBALS['db']) {            PMA_DBI_select_db($GLOBALS['db']);        }        return $return;    }}/** * returns default server collation from show variables * * @return  string  $server_collation */function PMA_getServerCollation(){    return PMA_DBI_fetch_value(        'SHOW VARIABLES LIKE \'collation_server\'', 0, 1);}/** * returns description for given collation * * * @param string  $collation  MySQL collation string * @return  string  collation description */function PMA_getCollationDescr($collation){    if ($collation == 'binary') {        return __('Binary');    }    $parts = explode('_', $collation);    if (count($parts) == 1) {        $parts[1] = 'general';    } elseif ($parts[1] == 'ci' || $parts[1] == 'cs') {        $parts[2] = $parts[1];        $parts[1] = 'general';    }    $descr = '';    switch ($parts[1]) {    case 'bulgarian':        $descr = __('Bulgarian');        break;    case 'chinese':        if ($parts[0] == 'gb2312' || $parts[0] == 'gbk') {            $descr = __('Simplified Chinese');        } elseif ($parts[0] == 'big5') {            $descr = __('Traditional Chinese');        }        break;    case 'ci':        $descr = __('case-insensitive');        break;    case 'cs':        $descr = __('case-sensitive');        break;    case 'croatian':        $descr = __('Croatian');        break;    case 'czech':        $descr = __('Czech');        break;    case 'danish':        $descr = __('Danish');        break;    case 'english':        $descr = __('English');        break;    case 'esperanto':        $descr = __('Esperanto');        break;    case 'estonian':        $descr = __('Estonian');        break;    case 'german1':        $descr = __('German') . ' (' . __('dictionary') . ')';        break;    case 'german2':        $descr = __('German') . ' (' . __('phone book') . ')';        break;    case 'hungarian':        $descr = __('Hungarian');        break;    case 'icelandic':        $descr = __('Icelandic');        break;    case 'japanese':        $descr = __('Japanese');        break;    case 'latvian':        $descr = __('Latvian');        break;    case 'lithuanian':        $descr = __('Lithuanian');        break;    case 'korean':        $descr = __('Korean');        break;    case 'persian':        $descr = __('Persian');        break;    case 'polish':        $descr = __('Polish');        break;    case 'roman':        $descr = __('West European');        break;    case 'romanian':        $descr = __('Romanian');        break;    case 'slovak':        $descr = __('Slovak');        break;    case 'slovenian':        $descr = __('Slovenian');        break;    case 'spanish':        $descr = __('Spanish');        break;    case 'spanish2':        $descr = __('Traditional Spanish');        break;    case 'swedish':        $descr = __('Swedish');        break;    case 'thai':        $descr = __('Thai');        break;    case 'turkish':        $descr = __('Turkish');        break;    case 'ukrainian':        $descr = __('Ukrainian');        break;    case 'unicode':        $descr = __('Unicode') . ' (' . __('multilingual') . ')';        break;    case 'bin':        $is_bin = true;    case 'general':        switch ($parts[0]) {        // Unicode charsets        case 'ucs2':        case 'utf8':            $descr = __('Unicode') . ' (' . __('multilingual') . ')';            break;        // West European charsets        case 'ascii':        case 'cp850':        case 'dec8':        case 'hp8':        case 'latin1':        case 'macroman':            $descr = __('West European') . ' (' . __('multilingual') . ')';            break;        // Central European charsets        case 'cp1250':        case 'cp852':        case 'latin2':        case 'macce':            $descr = __('Central European') . ' (' . __('multilingual') . ')';            break;        // Russian charsets        case 'cp866':        case 'koi8r':            $descr = __('Russian');            break;        // Simplified Chinese charsets        case 'gb2312':        case 'gbk':            $descr = __('Simplified Chinese');            break;        // Japanese charsets        case 'sjis':        case 'ujis':        case 'cp932':        case 'eucjpms':            $descr = __('Japanese');            break;        // Baltic charsets        case 'cp1257':        case 'latin7':            $descr = __('Baltic') . ' (' . __('multilingual') . ')';            break;        // Other        case 'armscii8':        case 'armscii':            $descr = __('Armenian');            break;        case 'big5':            $descr = __('Traditional Chinese');            break;        case 'cp1251':            $descr = __('Cyrillic') . ' (' . __('multilingual') . ')';            break;        case 'cp1256':            $descr = __('Arabic');            break;        case 'euckr':            $descr = __('Korean');            break;        case 'hebrew':            $descr = __('Hebrew');            break;        case 'geostd8':            $descr = __('Georgian');            break;        case 'greek':            $descr = __('Greek');            break;        case 'keybcs2':            $descr = __('Czech-Slovak');            break;        case 'koi8u':            $descr = __('Ukrainian');            break;        case 'latin5':            $descr = __('Turkish');            break;        case 'swe7':            $descr = __('Swedish');            break;        case 'tis620':            $descr = __('Thai');            break;        default:            $descr = __('unknown');            break;        }        if (!empty($is_bin)) {            $descr .= ', ' . __('Binary');        }        break;    default: $descr = __('unknown');    }    if (!empty($parts[2])) {        if ($parts[2] == 'ci') {            $descr .= ', ' . __('case-insensitive');        } elseif ($parts[2] == 'cs') {            $descr .= ', ' . __('case-sensitive');        }    }    return $descr;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * @todo make use of PMA_Message and PMA_Error * @package PhpMyAdmin */class PMA_Table{    /**     * UI preferences properties     */    const PROP_SORTED_COLUMN = 'sorted_col';    const PROP_COLUMN_ORDER = 'col_order';    const PROP_COLUMN_VISIB = 'col_visib';    static $cache = array();    /**     * @var string  table name     */    var $name = '';    /**     * @var string  database name     */    var $db_name = '';    /**     * @var string  engine (innodb, myisam, bdb, ...)     */    var $engine = '';    /**     * @var string  type (view, base table, system view)     */    var $type = '';    /**     * @var array   settings     */    var $settings = array();    /**     * @var array UI preferences     */    var $uiprefs;    /**     * @var array errors occured     */    var $errors = array();    /**     * @var array messages     */    var $messages = array();    /**     * Constructor     *     * @param string $table_name table name     * @param string $db_name    database name     */    function __construct($table_name, $db_name)    {        $this->setName($table_name);        $this->setDbName($db_name);    }    /**     * returns table name     *     * @see PMA_Table::getName()     * @return  string  table name     */    function __toString()    {        return $this->getName();    }    /**     * return the last error     *     * @return the last error     */    function getLastError()    {        return end($this->errors);    }    /**     * return the last message     *     * @return the last message     */    function getLastMessage()    {        return end($this->messages);    }    /**     * sets table name     *     * @param string $table_name new table name     *     * @return nothing     */    function setName($table_name)    {        $this->name = $table_name;    }    /**     * returns table name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  table name     */    function getName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->name);        }        return $this->name;    }    /**     * sets database name for this table     *     * @param string $db_name database name     *     * @return nothing     */    function setDbName($db_name)    {        $this->db_name = $db_name;    }    /**     * returns database name for this table     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return  string  database name for this table     */    function getDbName($backquoted = false)    {        if ($backquoted) {            return PMA_backquote($this->db_name);        }        return $this->db_name;    }    /**     * returns full name for table, including database name     *     * @param boolean $backquoted whether to quote name with backticks ``     *     * @return string     */    function getFullName($backquoted = false)    {        return $this->getDbName($backquoted) . '.' . $this->getName($backquoted);    }    /**     * returns whether the table is actually a view     *     * @param string $db    database     * @param string $table table     *     * @return whether the given is a view     */    static public function isView($db = null, $table = null)    {        if (empty($db) || empty($table)) {            return false;        }        // use cached data or load information with SHOW command        if (isset(PMA_Table::$cache[$db][$table]) || $GLOBALS['cfg']['Server']['DisableIS']) {            $type = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_TYPE');            return $type == 'VIEW';        }        // query information_schema        $result = PMA_DBI_fetch_result(            "SELECT TABLE_NAME            FROM information_schema.VIEWS            WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'");        return $result ? true : false;    }    /**     * sets given $value for given $param     *     * @param string $param name     * @param mixed  $value value     *     * @return nothing     */    function set($param, $value)    {        $this->settings[$param] = $value;    }    /**     * returns value for given setting/param     *     * @param string $param name for value to return     *     * @return  mixed   value for $param     */    function get($param)    {        if (isset($this->settings[$param])) {            return $this->settings[$param];        }        return null;    }    /**     * loads structure data     * (this function is work in progress? not yet used)     *     * @return boolean     */    function loadStructure()    {        $table_info = PMA_DBI_get_tables_full($this->getDbName(), $this->getName());        if (false === $table_info) {            return false;        }        $this->settings = $table_info;        if ($this->get('TABLE_ROWS') === null) {            $this->set(                'TABLE_ROWS',                PMA_Table::countRecords($this->getDbName(), $this->getName(), true)            );        }        $create_options = explode(' ', $this->get('TABLE_ROWS'));        // export create options by its name as variables into gloabel namespace        // f.e. pack_keys=1 becomes available as $pack_keys with value of '1'        foreach ($create_options as $each_create_option) {            $each_create_option = explode('=', $each_create_option);            if (isset($each_create_option[1])) {                $this->set($$each_create_option[0], $each_create_option[1]);            }        }        return true;    }    /**     * Checks if this is a merge table     *     * If the ENGINE of the table is MERGE or MRG_MYISAM (alias),     * this is a merge table.     *     * @param string $db    the database name     * @param string $table the table name     *     * @return  boolean  true if it is a merge table     */    static public function isMerge($db = null, $table = null)    {        $engine = null;        // if called static, with parameters        if (! empty($db) && ! empty($table)) {            $engine = PMA_Table::sGetStatusInfo($db, $table, 'ENGINE', null, true);        }        return (! empty($engine) && ((strtoupper($engine) == 'MERGE') || (strtoupper($engine) == 'MRG_MYISAM')));    }    static public function sGetToolTip($db, $table)    {        return PMA_Table::sGetStatusInfo($db, $table, 'Comment')            . ' (' . PMA_Table::countRecords($db, $table) . ')';    }    /**     * Returns full table status info, or specific if $info provided     * this info is collected from information_schema     *     * @param string  $db            database name     * @param string  $table         table name     * @param string  $info     * @param boolean $force_read    read new rather than serving from cache     * @param boolean $disable_error if true, disables error message     *     * @todo PMA_DBI_get_tables_full needs to be merged somehow into this class     * or at least better documented     *     * @return mixed     */    static public function sGetStatusInfo($db, $table, $info = null, $force_read = false, $disable_error = false)    {        if (! isset(PMA_Table::$cache[$db][$table]) || $force_read) {            PMA_DBI_get_tables_full($db, $table);        }        if (! isset(PMA_Table::$cache[$db][$table])) {            // happens when we enter the table creation dialog            // or when we really did not get any status info, for example            // when $table == 'TABLE_NAMES' after the user tried SHOW TABLES            return '';        }        if (null === $info) {            return PMA_Table::$cache[$db][$table];        }        // array_key_exists allows for null values        if (!array_key_exists($info, PMA_Table::$cache[$db][$table])) {            if (! $disable_error) {                trigger_error(__('unknown table status: ') . $info, E_USER_WARNING);            }            return false;        }        return PMA_Table::$cache[$db][$table][$info];    }    /**     * generates column specification for ALTER or CREATE TABLE syntax     *     * @param string      $name           name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     *     * @todo    move into class PMA_Column     * @todo on the interface, some js to clear the default value when the default     * current_timestamp is checked     *     * @return  string  field specification     */    static function generateFieldSpec($name, $type, $length = '', $attribute = '',        $collation = '', $null = false, $default_type = 'USER_DEFINED',        $default_value = '', $extra = '', $comment = '',        &$field_primary, $index)    {        $is_timestamp = strpos(strtoupper($type), 'TIMESTAMP') !== false;        $query = PMA_backquote($name) . ' ' . $type;        if ($length != ''            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|'                . 'MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN|UUID)$@i', $type)) {            $query .= '(' . $length . ')';        }        if ($attribute != '') {            $query .= ' ' . $attribute;        }        if (! empty($collation) && $collation != 'NULL'            && preg_match('@^(TINYTEXT|TEXT|MEDIUMTEXT|LONGTEXT|VARCHAR|CHAR|ENUM|SET)$@i', $type)        ) {            $query .= PMA_generateCharsetQueryPart($collation);        }        if ($null !== false) {            if ($null == 'NULL') {                $query .= ' NULL';            } else {                $query .= ' NOT NULL';            }        }        switch ($default_type) {        case 'USER_DEFINED' :            if ($is_timestamp && $default_value === '0') {                // a TIMESTAMP does not accept DEFAULT '0'                // but DEFAULT 0 works                $query .= ' DEFAULT 0';            } elseif ($type == 'BIT') {                $query .= ' DEFAULT b\''                        . preg_replace('/[^01]/', '0', $default_value)                        . '\'';            } elseif ($type == 'BOOLEAN') {                if (preg_match('/^1|T|TRUE|YES$/i', $default_value)) {                    $query .= ' DEFAULT TRUE';                } elseif (preg_match('/^0|F|FALSE|NO$/i', $default_value)) {                    $query .= ' DEFAULT FALSE';                } else {                    // Invalid BOOLEAN value                    $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';                }            } else {                $query .= ' DEFAULT \'' . PMA_sqlAddSlashes($default_value) . '\'';            }            break;        case 'NULL' :        case 'CURRENT_TIMESTAMP' :            $query .= ' DEFAULT ' . $default_type;            break;        case 'NONE' :        default :            break;        }        if (!empty($extra)) {            $query .= ' ' . $extra;            // Force an auto_increment field to be part of the primary key            // even if user did not tick the PK box;            if ($extra == 'AUTO_INCREMENT') {                $primary_cnt = count($field_primary);                if (1 == $primary_cnt) {                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            break;                        }                    }                    if (isset($field_primary[$j]) && $field_primary[$j] == $index) {                        $query .= ' PRIMARY KEY';                        unset($field_primary[$j]);                    }                } else {                    // but the PK could contain other columns so do not append                    // a PRIMARY KEY clause, just add a member to $field_primary                    $found_in_pk = false;                    for ($j = 0; $j < $primary_cnt; $j++) {                        if ($field_primary[$j] == $index) {                            $found_in_pk = true;                            break;                        }                    } // end for                    if (! $found_in_pk) {                        $field_primary[] = $index;                    }                }            } // end if (auto_increment)        }        if (!empty($comment)) {            $query .= " COMMENT '" . PMA_sqlAddSlashes($comment) . "'";        }        return $query;    } // end function    /**     * Counts and returns (or displays) the number of records in a table     *     * Revision 13 July 2001: Patch for limiting dump size from     * vinay@sanisoft.com & girish@sanisoft.com     *     * @param string $db          the current database name     * @param string $table       the current table name     * @param bool   $force_exact whether to force an exact count     * @param bool   $is_view     whether the table is a view     *     * @return mixed the number of records if "retain" param is true,     *               otherwise true     */    static public function countRecords($db, $table, $force_exact = false, $is_view = null)    {        if (isset(PMA_Table::$cache[$db][$table]['ExactRows'])) {            $row_count = PMA_Table::$cache[$db][$table]['ExactRows'];        } else {            $row_count = false;            if (null === $is_view) {                $is_view = PMA_Table::isView($db, $table);            }            if (! $force_exact) {                if (! isset(PMA_Table::$cache[$db][$table]['Rows']) && ! $is_view) {                    $tmp_tables = PMA_DBI_get_tables_full($db, $table);                    if (isset($tmp_tables[$table])) {                        PMA_Table::$cache[$db][$table] = $tmp_tables[$table];                    }                }                if (isset(PMA_Table::$cache[$db][$table]['Rows'])) {                    $row_count = PMA_Table::$cache[$db][$table]['Rows'];                } else {                    $row_count = false;                }            }            // for a VIEW, $row_count is always false at this point            if (false === $row_count || $row_count < $GLOBALS['cfg']['MaxExactCount']) {                // Make an exception for views in I_S and D_D schema in Drizzle, as these map to                // in-memory data and should execute fast enough                if (! $is_view || (PMA_DRIZZLE && PMA_is_system_schema($db))) {                    $row_count = PMA_DBI_fetch_value(                        'SELECT COUNT(*) FROM ' . PMA_backquote($db) . '.'                        . PMA_backquote($table)                    );                } else {                    // For complex views, even trying to get a partial record                    // count could bring down a server, so we offer an                    // alternative: setting MaxExactCountViews to 0 will bypass                    // completely the record counting for views                    if ($GLOBALS['cfg']['MaxExactCountViews'] == 0) {                        $row_count = 0;                    } else {                        // Counting all rows of a VIEW could be too long, so use                        // a LIMIT clause.                        // Use try_query because it can fail (when a VIEW is                        // based on a table that no longer exists)                        $result = PMA_DBI_try_query(                            'SELECT 1 FROM ' . PMA_backquote($db) . '.'                            . PMA_backquote($table) . ' LIMIT '                            . $GLOBALS['cfg']['MaxExactCountViews'],                            null,                            PMA_DBI_QUERY_STORE                        );                        if (!PMA_DBI_getError()) {                            $row_count = PMA_DBI_num_rows($result);                            PMA_DBI_free_result($result);                        }                    }                }                PMA_Table::$cache[$db][$table]['ExactRows'] = $row_count;            }        }        return $row_count;    } // end of the 'PMA_Table::countRecords()' function    /**     * Generates column specification for ALTER syntax     *     * @param string      $oldcol         old column name     * @param string      $newcol         new column name     * @param string      $type           type ('INT', 'VARCHAR', 'BIT', ...)     * @param string      $length         length ('2', '5,2', '', ...)     * @param string      $attribute      attribute     * @param string      $collation      collation     * @param bool|string $null           with 'NULL' or 'NOT NULL'     * @param string      $default_type   whether default is CURRENT_TIMESTAMP,     *                                    NULL, NONE, USER_DEFINED     * @param string      $default_value  default value for USER_DEFINED default type     * @param string      $extra          'AUTO_INCREMENT'     * @param string      $comment        field comment     * @param array       &$field_primary list of fields for PRIMARY KEY     * @param string      $index     * @param mixed       $default_orig     *     * @see PMA_Table::generateFieldSpec()     *     * @return  string  field specification     */    static public function generateAlter($oldcol, $newcol, $type, $length,        $attribute, $collation, $null, $default_type, $default_value,        $extra, $comment = '', &$field_primary, $index, $default_orig)    {        return PMA_backquote($oldcol) . ' '            . PMA_Table::generateFieldSpec(                $newcol, $type, $length, $attribute,                $collation, $null, $default_type, $default_value, $extra,                $comment, $field_primary, $index, $default_orig            );    } // end function    /**     * Inserts existing entries in a PMA_* table by reading a value from an old entry     *     * @param string $work         The array index, which Relation feature to check     *                             ('relwork', 'commwork', ...)     * @param string $pma_table    The array index, which PMA-table to update     *                             ('bookmark', 'relation', ...)     * @param array  $get_fields   Which fields will be SELECT'ed from the old entry     * @param array  $where_fields Which fields will be used for the WHERE query     *                             (array('FIELDNAME' => 'FIELDVALUE'))     * @param array  $new_fields   Which fields will be used as new VALUES. These are     *                             the important keys which differ from the old entry     *                             (array('FIELDNAME' => 'NEW FIELDVALUE'))     *     * @global relation variable     *     * @return int|true     */    static public function duplicateInfo($work, $pma_table, $get_fields, $where_fields, $new_fields)    {        $last_id = -1;        if (isset($GLOBALS['cfgRelation']) && $GLOBALS['cfgRelation'][$work]) {            $select_parts = array();            $row_fields = array();            foreach ($get_fields as $get_field) {                $select_parts[] = PMA_backquote($get_field);                $row_fields[$get_field] = 'cc';            }            $where_parts = array();            foreach ($where_fields as $_where => $_value) {                $where_parts[] = PMA_backquote($_where) . ' = \''                    . PMA_sqlAddSlashes($_value) . '\'';            }            $new_parts = array();            $new_value_parts = array();            foreach ($new_fields as $_where => $_value) {                $new_parts[] = PMA_backquote($_where);                $new_value_parts[] = PMA_sqlAddSlashes($_value);            }            $table_copy_query = '                SELECT ' . implode(', ', $select_parts) . '                  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                  . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                 WHERE ' . implode(' AND ', $where_parts);            // must use PMA_DBI_QUERY_STORE here, since we execute another            // query inside the loop            $table_copy_rs = PMA_query_as_controluser(                $table_copy_query, true, PMA_DBI_QUERY_STORE            );            while ($table_copy_row = @PMA_DBI_fetch_assoc($table_copy_rs)) {                $value_parts = array();                foreach ($table_copy_row as $_key => $_val) {                    if (isset($row_fields[$_key]) && $row_fields[$_key] == 'cc') {                        $value_parts[] = PMA_sqlAddSlashes($_val);                    }                }                $new_table_query = 'INSERT IGNORE INTO '                    . PMA_backquote($GLOBALS['cfgRelation']['db'])                    . '.' . PMA_backquote($GLOBALS['cfgRelation'][$pma_table]) . '                    (' . implode(', ', $select_parts) . ',                     ' . implode(', ', $new_parts) . ')                    VALUES                    (\'' . implode('\', \'', $value_parts) . '\',                     \'' . implode('\', \'', $new_value_parts) . '\')';                PMA_query_as_controluser($new_table_query);                $last_id = PMA_DBI_insert_id();            } // end while            PMA_DBI_free_result($table_copy_rs);            return $last_id;        }        return true;    } // end of 'PMA_Table::duplicateInfo()' function    /**     * Copies or renames table     *     * @param string $source_db    source database     * @param string $source_table source table     * @param string $target_db    target database     * @param string $target_table target table     * @param string $what         what to be moved or copied (data, dataonly)     * @param bool   $move         whether to move     * @param string $mode         mode     *     * @return bool true if success, false otherwise     */    static public function moveCopy($source_db, $source_table, $target_db, $target_table, $what, $move, $mode)    {        global $err_url;        /* Try moving table directly */        if ($move && $what == 'data') {            $tbl = new PMA_Table($source_table, $source_db);            $result = $tbl->rename(                $target_table, $target_db,                PMA_Table::isView($source_db, $source_table)            );            if ($result) {                $GLOBALS['message'] = $tbl->getLastMessage();                return true;            }        }        // set export settings we need        $GLOBALS['sql_backquotes'] = 1;        $GLOBALS['asfile']         = 1;        // Ensure the target is valid        if (! $GLOBALS['pma']->databases->exists($source_db, $target_db)) {            if (! $GLOBALS['pma']->databases->exists($source_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'source database `' . htmlspecialchars($source_db) . '` not found'                );            }            if (! $GLOBALS['pma']->databases->exists($target_db)) {                $GLOBALS['message'] = PMA_Message::rawError(                    'target database `' . htmlspecialchars($target_db) . '` not found'                );            }            return false;        }        $source = PMA_backquote($source_db) . '.' . PMA_backquote($source_table);        if (! isset($target_db) || ! strlen($target_db)) {            $target_db = $source_db;        }        // Doing a select_db could avoid some problems with replicated databases,        // when moving table from replicated one to not replicated one        PMA_DBI_select_db($target_db);        $target = PMA_backquote($target_db) . '.' . PMA_backquote($target_table);        // do not create the table if dataonly        if ($what != 'dataonly') {            include_once './libraries/export/sql.php';            $no_constraints_comments = true;            $GLOBALS['sql_constraints_query'] = '';            $sql_structure = PMA_getTableDef(                $source_db, $source_table, "\n", $err_url, false, false            );            unset($no_constraints_comments);            $parsed_sql =  PMA_SQP_parse($sql_structure);            $analyzed_sql = PMA_SQP_analyze($parsed_sql);            $i = 0;            if (empty($analyzed_sql[0]['create_table_fields'])) {                // this is not a CREATE TABLE, so find the first VIEW                $target_for_view = PMA_backquote($target_db);                while (true) {                    if ($parsed_sql[$i]['type'] == 'alpha_reservedWord'                        && $parsed_sql[$i]['data'] == 'VIEW'                    ) {                        break;                    }                    $i++;                }            }            unset($analyzed_sql);            if (PMA_DRIZZLE) {                $table_delimiter = 'quote_backtick';            } else {                $server_sql_mode = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'sql_mode'", 0, 1);                // ANSI_QUOTES might be a subset of sql_mode, for example                // REAL_AS_FLOAT,PIPES_AS_CONCAT,ANSI_QUOTES,IGNORE_SPACE,ANSI                if (false !== strpos($server_sql_mode, 'ANSI_QUOTES')) {                    $table_delimiter = 'quote_double';                } else {                    $table_delimiter = 'quote_backtick';                }                unset($server_sql_mode);            }            /* Find table name in query and replace it */            while ($parsed_sql[$i]['type'] != $table_delimiter) {                $i++;            }            /* no need to PMA_backquote() */            if (isset($target_for_view)) {                // this a view definition; we just found the first db name                // that follows DEFINER VIEW                // so change it for the new db name                        $parsed_sql[$i]['data'] = $target_for_view;                // then we have to find all references to the source db                // and change them to the target db, ensuring we stay into                // the $parsed_sql limits                $last = $parsed_sql['len'] - 1;                $backquoted_source_db = PMA_backquote($source_db);                for (++$i; $i <= $last; $i++) {                    if ($parsed_sql[$i]['type'] == $table_delimiter                        && $parsed_sql[$i]['data'] == $backquoted_source_db                    ) {                        $parsed_sql[$i]['data'] = $target_for_view;                    }                }                unset($last,$backquoted_source_db);            } else {                $parsed_sql[$i]['data'] = $target;            }            /* Generate query back */            $sql_structure = PMA_SQP_formatHtml($parsed_sql, 'query_only');            // If table exists, and 'add drop table' is selected: Drop it!            $drop_query = '';            if (isset($GLOBALS['drop_if_exists'])                && $GLOBALS['drop_if_exists'] == 'true'            ) {                if (PMA_Table::isView($target_db, $target_table)) {                    $drop_query = 'DROP VIEW';                } else {                    $drop_query = 'DROP TABLE';                }                $drop_query .= ' IF EXISTS '                    . PMA_backquote($target_db) . '.'                    . PMA_backquote($target_table);                PMA_DBI_query($drop_query);                $GLOBALS['sql_query'] .= "\n" . $drop_query . ';';                // If an existing table gets deleted, maintain any                // entries for the PMA_* tables                $maintain_relations = true;            }            @PMA_DBI_query($sql_structure);            $GLOBALS['sql_query'] .= "\n" . $sql_structure . ';';            if (($move || isset($GLOBALS['add_constraints']))                && !empty($GLOBALS['sql_constraints_query'])            ) {                $parsed_sql =  PMA_SQP_parse($GLOBALS['sql_constraints_query']);                $i = 0;                // find the first $table_delimiter, it must be the source table name                while ($parsed_sql[$i]['type'] != $table_delimiter) {                    $i++;                    // maybe someday we should guard against going over limit                    //if ($i == $parsed_sql['len']) {                    //    break;                    //}                }                // replace it by the target table name, no need to PMA_backquote()                $parsed_sql[$i]['data'] = $target;                // now we must remove all $table_delimiter that follow a CONSTRAINT                // keyword, because a constraint name must be unique in a db                $cnt = $parsed_sql['len'] - 1;                for ($j = $i; $j < $cnt; $j++) {                    if ($parsed_sql[$j]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_sql[$j]['data']) == 'CONSTRAINT'                    ) {                        if ($parsed_sql[$j+1]['type'] == $table_delimiter) {                            $parsed_sql[$j+1]['data'] = '';                        }                    }                }                // Generate query back                $GLOBALS['sql_constraints_query'] = PMA_SQP_formatHtml(                    $parsed_sql, 'query_only'                );                if ($mode == 'one_table') {                    PMA_DBI_query($GLOBALS['sql_constraints_query']);                }                $GLOBALS['sql_query'] .= "\n" . $GLOBALS['sql_constraints_query'];                if ($mode == 'one_table') {                    unset($GLOBALS['sql_constraints_query']);                }            }        } else {            $GLOBALS['sql_query'] = '';        }        // Copy the data unless this is a VIEW        if (($what == 'data' || $what == 'dataonly')            && ! PMA_Table::isView($target_db, $target_table)        ) {            $sql_set_mode = "SET SQL_MODE='NO_AUTO_VALUE_ON_ZERO'";            PMA_DBI_query($sql_set_mode);            $GLOBALS['sql_query'] .= "\n\n" . $sql_set_mode . ';';            $sql_insert_data = 'INSERT INTO ' . $target . ' SELECT * FROM ' . $source;            PMA_DBI_query($sql_insert_data);            $GLOBALS['sql_query']      .= "\n\n" . $sql_insert_data . ';';        }        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        // Drops old table if the user has requested to move it        if ($move) {            // This could avoid some problems with replicated databases, when            // moving table from replicated one to not replicated one            PMA_DBI_select_db($source_db);            if (PMA_Table::isView($source_db, $source_table)) {                $sql_drop_query = 'DROP VIEW';            } else {                $sql_drop_query = 'DROP TABLE';            }            $sql_drop_query .= ' ' . $source;            PMA_DBI_query($sql_drop_query);            // Move old entries from PMA-DBs to new table            if ($GLOBALS['cfgRelation']['commwork']) {                $remove_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                              . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\', '                              . '        db_name    = \'' . PMA_sqlAddSlashes($target_db) . '\''                              . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                              . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($remove_query);                unset($remove_query);            }            // updating bookmarks is not possible since only a single table is moved,            // and not the whole DB.            if ($GLOBALS['cfgRelation']['displaywork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_info'])                                . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\', '                                . '         table_name = \'' . PMA_sqlAddSlashes($target_table) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            if ($GLOBALS['cfgRelation']['relwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     foreign_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         foreign_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND foreign_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])                                . ' SET     master_table = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         master_db = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND master_table = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            /**             * @todo Can't get moving PDFs the right way. The page numbers             * always get screwed up independently from duplication because the             * numbers do not seem to be stored on a per-database basis. Would             * the author of pdf support please have a look at it?             */            if ($GLOBALS['cfgRelation']['pdfwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);                /*                $pdf_query = 'SELECT pdf_page_number '                           . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['table_coords'])                           . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($target_db) . '\''                           . ' AND table_name = \'' . PMA_sqlAddSlashes($target_table) . '\'';                $pdf_rs = PMA_query_as_controluser($pdf_query);                while ($pdf_copy_row = PMA_DBI_fetch_assoc($pdf_rs)) {                    $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['pdf_pages'])                                    . ' SET     db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                    . ' AND page_nr = \'' . PMA_sqlAddSlashes($pdf_copy_row['pdf_page_number']) . '\'';                    $tb_rs    = PMA_query_as_controluser($table_query);                    unset($table_query);                    unset($tb_rs);                }                */            }            if ($GLOBALS['cfgRelation']['designerwork']) {                $table_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords'])                                . ' SET     table_name = \'' . PMA_sqlAddSlashes($target_table) . '\','                                . '         db_name = \'' . PMA_sqlAddSlashes($target_db) . '\''                                . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($source_db) . '\''                                . ' AND table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                PMA_query_as_controluser($table_query);                unset($table_query);            }            $GLOBALS['sql_query']      .= "\n\n" . $sql_drop_query . ';';            // end if ($move)        } else {            // we are copying            // Create new entries as duplicates from old PMA DBs            if ($what != 'dataonly' && ! isset($maintain_relations)) {                if ($GLOBALS['cfgRelation']['commwork']) {                    // Get all comments and MIME-Types for current table                    $comments_copy_query = 'SELECT                                                column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . '                                            FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                                            WHERE                                                db_name = \'' . PMA_sqlAddSlashes($source_db) . '\' AND                                                table_name = \'' . PMA_sqlAddSlashes($source_table) . '\'';                    $comments_copy_rs    = PMA_query_as_controluser($comments_copy_query);                    // Write every comment as new copied entry. [MIME]                    while ($comments_copy_row = PMA_DBI_fetch_assoc($comments_copy_rs)) {                        $new_comment_query = 'REPLACE INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['column_info'])                                    . ' (db_name, table_name, column_name, comment' . ($GLOBALS['cfgRelation']['mimework'] ? ', mimetype, transformation, transformation_options' : '') . ') '                                    . ' VALUES('                                    . '\'' . PMA_sqlAddSlashes($target_db) . '\','                                    . '\'' . PMA_sqlAddSlashes($target_table) . '\','                                    . '\'' . PMA_sqlAddSlashes($comments_copy_row['column_name']) . '\''                                    . ($GLOBALS['cfgRelation']['mimework'] ? ',\'' . PMA_sqlAddSlashes($comments_copy_row['comment']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['mimetype']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation']) . '\','                                            . '\'' . PMA_sqlAddSlashes($comments_copy_row['transformation_options']) . '\'' : '')                                    . ')';                        PMA_query_as_controluser($new_comment_query);                    } // end while                    PMA_DBI_free_result($comments_copy_rs);                    unset($comments_copy_rs);                }                // duplicating the bookmarks must not be done here, but                // just once per db                $get_fields = array('display_field');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('displaywork', 'table_info', $get_fields, $where_fields, $new_fields);                /**                 * @todo revise this code when we support cross-db relations                 */                $get_fields = array('master_field', 'foreign_table', 'foreign_field');                $where_fields = array('master_db' => $source_db, 'master_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'master_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('foreign_field', 'master_table', 'master_field');                $where_fields = array('foreign_db' => $source_db, 'foreign_table' => $source_table);                $new_fields = array('master_db' => $target_db, 'foreign_db' => $target_db, 'foreign_table' => $target_table);                PMA_Table::duplicateInfo('relwork', 'relation', $get_fields, $where_fields, $new_fields);                $get_fields = array('x', 'y', 'v', 'h');                $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                $new_fields = array('db_name' => $target_db, 'table_name' => $target_table);                PMA_Table::duplicateInfo('designerwork', 'designer_coords', $get_fields, $where_fields, $new_fields);                /**                 * @todo Can't get duplicating PDFs the right way. The                 * page numbers always get screwed up independently from                 * duplication because the numbers do not seem to be stored on a                 * per-database basis. Would the author of pdf support please                 * have a look at it?                 *                $get_fields = array('page_descr');                $where_fields = array('db_name' => $source_db);                $new_fields = array('db_name' => $target_db);                $last_id = PMA_Table::duplicateInfo('pdfwork', 'pdf_pages', $get_fields, $where_fields, $new_fields);                if (isset($last_id) && $last_id >= 0) {                    $get_fields = array('x', 'y');                    $where_fields = array('db_name' => $source_db, 'table_name' => $source_table);                    $new_fields = array('db_name' => $target_db, 'table_name' => $target_table, 'pdf_page_number' => $last_id);                    PMA_Table::duplicateInfo('pdfwork', 'table_coords', $get_fields, $where_fields, $new_fields);                }                 */            }        }        return true;    }    /**     * checks if given name is a valid table name,     * currently if not empty, trailing spaces, '.', '/' and '\'     *     * @param string $table_name name to check     *     * @todo add check for valid chars in filename on current system/os     * @see  http://dev.mysql.com/doc/refman/5.0/en/legal-names.html     *     * @return  boolean whether the string is valid or not     */    function isValidName($table_name)    {        if ($table_name !== trim($table_name)) {            // trailing spaces            return false;        }        if (! strlen($table_name)) {            // zero length            return false;        }        if (preg_match('/[.\/\\\\]+/i', $table_name)) {            // illegal char . / \            return false;        }        return true;    }    /**     * renames table     *     * @param string $new_name new table name     * @param string $new_db   new database name     * @param bool   $is_view  is this for a VIEW rename?     * @todo    remove the $is_view parameter (also in callers)     *     * @return bool success     */    function rename($new_name, $new_db = null, $is_view = false)    {        if (null !== $new_db && $new_db !== $this->getDbName()) {            // Ensure the target is valid            if (! $GLOBALS['pma']->databases->exists($new_db)) {                $this->errors[] = __('Invalid database') . ': ' . $new_db;                return false;            }        } else {            $new_db = $this->getDbName();        }        $new_table = new PMA_Table($new_name, $new_db);        if ($this->getFullName() === $new_table->getFullName()) {            return true;        }        if (! PMA_Table::isValidName($new_name)) {            $this->errors[] = __('Invalid table name') . ': ' . $new_table->getFullName();            return false;        }        // If the table is moved to a different database drop its triggers first        $triggers = PMA_DBI_get_triggers($this->getDbName(), $this->getName(), '');        $handle_triggers = $this->getDbName() != $new_db && $triggers;        if ($handle_triggers) {            foreach ($triggers as $trigger) {                $sql = 'DROP TRIGGER IF EXISTS ' . PMA_backquote($this->getDbName()) . '.'                    . PMA_backquote($trigger['name']) . ';';                PMA_DBI_query($sql);            }        }        /*         * tested also for a view, in MySQL 5.0.92, 5.1.55 and 5.5.13         */        $GLOBALS['sql_query'] = '            RENAME TABLE ' . $this->getFullName(true) . '                  TO ' . $new_table->getFullName(true) . ';';        // I don't think a specific error message for views is necessary        if (! PMA_DBI_query($GLOBALS['sql_query'])) {            // Restore triggers in the old database            if ($handle_triggers) {                PMA_DBI_select_db($this->getDbName());                foreach ($triggers as $trigger) {                    PMA_DBI_query($trigger['create']);                }            }            $this->errors[] = sprintf(                __('Error renaming table %1$s to %2$s'),                $this->getFullName(),                $new_table->getFullName()            );            return false;        }        $old_name = $this->getName();        $old_db = $this->getDbName();        $this->setName($new_name);        $this->setDbName($new_db);        /**         * @todo move into extra function PMA_Relation::renameTable($new_name, $old_name, $new_db, $old_db)         */        // Move old entries from comments to new table        $GLOBALS['cfgRelation'] = PMA_getRelationsParam();        if ($GLOBALS['cfgRelation']['commwork']) {            $remove_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['column_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($remove_query);            unset($remove_query);        }        if ($GLOBALS['cfgRelation']['displaywork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_info']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['relwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `foreign_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `foreign_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `foreign_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `foreign_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['relation']) . '                   SET `master_db`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `master_table` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `master_db`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `master_table` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['pdfwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['table_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        if ($GLOBALS['cfgRelation']['designerwork']) {            $table_query = '                UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                   SET `db_name`    = \'' . PMA_sqlAddSlashes($new_db) . '\',                       `table_name` = \'' . PMA_sqlAddSlashes($new_name) . '\'                 WHERE `db_name`    = \'' . PMA_sqlAddSlashes($old_db) . '\'                   AND `table_name` = \'' . PMA_sqlAddSlashes($old_name) . '\'';            PMA_query_as_controluser($table_query);            unset($table_query);        }        $this->messages[] = sprintf(            __('Table %s has been renamed to %s'),            htmlspecialchars($old_name),            htmlspecialchars($new_name)        );        return true;    }    /**     * Get all unique columns     *     * returns an array with all columns with unqiue content, in fact these are     * all columns being single indexed in PRIMARY or UNIQUE     *     * e.g.     *  - PRIMARY(id) // id     *  - UNIQUE(name) // name     *  - PRIMARY(fk_id1, fk_id2) // NONE     *  - UNIQUE(x,y) // NONE     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getUniqueColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Non_unique = 0');        $uniques = PMA_DBI_fetch_result($sql, array('Key_name', null), 'Column_name');        $return = array();        foreach ($uniques as $index) {            if (count($index) > 1) {                continue;            }            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($index[0]) : $index[0]);        }        return $return;    }    /**     * Get all indexed columns     *     * returns an array with all columns make use of an index, in fact only     * first columns in an index     *     * e.g. index(col1, col2) would only return col1     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getIndexedColumns($backquoted = true)    {        $sql = PMA_DBI_get_table_indexes_sql($this->getDbName(), $this->getName(), 'Seq_in_index = 1');        $indexed = PMA_DBI_fetch_result($sql, 'Column_name', 'Column_name');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Get all columns     *     * returns an array with all columns     *     * @param bool $backquoted whether to quote name with backticks ``     *     * @return array     */    public function getColumns($backquoted = true)    {        $sql = 'SHOW COLUMNS FROM ' . $this->getFullName(true);        $indexed = PMA_DBI_fetch_result($sql, 'Field', 'Field');        $return = array();        foreach ($indexed as $column) {            $return[] = $this->getFullName($backquoted) . '.'                . ($backquoted ? PMA_backquote($column) : $column);        }        return $return;    }    /**     * Return UI preferences for this table from phpMyAdmin database.     *     * @return array     */    protected function getUiPrefsFromDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                     PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        // Read from phpMyAdmin database        $sql_query = " SELECT `prefs` FROM " . $pma_table            . " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'"            . " AND `db_name` = '" . PMA_sqlAddSlashes($this->db_name) . "'"            . " AND `table_name` = '" . PMA_sqlAddSlashes($this->name) . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save this table's UI preferences into phpMyAdmin database.     *     * @return true|PMA_Message     */    protected function saveUiPrefsToDb()    {        $pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "."            . PMA_backquote($GLOBALS['cfg']['Server']['table_uiprefs']);        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query = " REPLACE INTO " . $pma_table            . " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes($this->db_name)            . "', '" . PMA_sqlAddSlashes($this->name) . "', '"            . PMA_sqlAddSlashes(json_encode($this->uiprefs)) . "', NULL)";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save table UI preferences'));            $message->addMessage('<br /><br />');            $message->addMessage(                PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink']))            );            return $message;        }        // Remove some old rows in table_uiprefs if it exceeds the configured maximum rows        $sql_query = 'SELECT COUNT(*) FROM ' . $pma_table;        $rows_count = PMA_DBI_fetch_value($sql_query);        $max_rows = $GLOBALS['cfg']['Server']['MaxTableUiprefs'];        if ($rows_count > $max_rows) {            $num_rows_to_delete = $rows_count - $max_rows;            $sql_query                = ' DELETE FROM ' . $pma_table .                ' ORDER BY last_update ASC' .                ' LIMIT ' . $num_rows_to_delete;            $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);            if (!$success) {                $message = PMA_Message::error(                    sprintf(                        __('Failed to cleanup table UI preferences (see $cfg[\'Servers\'][$i][\'MaxTableUiprefs\'] %s)'),                        PMA_showDocu('cfg_Servers_MaxTableUiprefs')                    )                );                $message->addMessage('<br /><br />');                $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));                print_r($message);                return $message;            }        }        return true;    }    /**     * Loads the UI preferences for this table.     * If pmadb and table_uiprefs is set, it will load the UI preferences from     * phpMyAdmin database.     *     * @return nothing     */    protected function loadUiPrefs()    {        $server_id = $GLOBALS['server'];        // set session variable if it's still undefined        if (! isset($_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name])) {            $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name] =                // check whether we can get from pmadb                (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs']))                    ?  $this->getUiPrefsFromDb()                    : array();        }        $this->uiprefs =& $_SESSION['tmp_user_values']['table_uiprefs'][$server_id][$this->db_name][$this->name];    }    /**     * Get a property from UI preferences.     * Return false if the property is not found.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property property     *     * @return mixed     */    public function getUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // do checking based on property        if ($property == self::PROP_SORTED_COLUMN) {            if (isset($this->uiprefs[$property])) {                // check if the column name is exist in this table                $tmp = explode(' ', $this->uiprefs[$property]);                $colname = $tmp[0];                $avail_columns = $this->getColumns();                foreach ($avail_columns as $each_col) {                    // check if $each_col ends with $colname                    if (substr_compare($each_col, $colname, strlen($each_col) - strlen($colname)) === 0) {                        return $this->uiprefs[$property];                    }                }                // remove the property, since it is not exist anymore in database                $this->removeUiProp(self::PROP_SORTED_COLUMN);                return false;            } else {                return false;            }        } elseif ($property == self::PROP_COLUMN_ORDER            || $property == self::PROP_COLUMN_VISIB        ) {            if (! PMA_Table::isView($this->db_name, $this->name) && isset($this->uiprefs[$property])) {                // check if the table has not been modified                if (self::sGetStatusInfo($this->db_name, $this->name, 'Create_time') == $this->uiprefs['CREATE_TIME']) {                    return $this->uiprefs[$property];                } else {                    // remove the property, since the table has been modified                    $this->removeUiProp(self::PROP_COLUMN_ORDER);                    return false;                }            } else {                return false;            }        }        // default behaviour for other property:        return isset($this->uiprefs[$property]) ? $this->uiprefs[$property] : false;    }    /**     * Set a property from UI preferences.     * If pmadb and table_uiprefs is set, it will save the UI preferences to     * phpMyAdmin database.     * Available property:     * - PROP_SORTED_COLUMN     * - PROP_COLUMN_ORDER     * - PROP_COLUMN_VISIB     *     * @param string $property          Property     * @param mixed  $value             Value for the property     * @param string $table_create_time Needed for PROP_COLUMN_ORDER and PROP_COLUMN_VISIB     *     * @return boolean|PMA_Message     */    public function setUiProp($property, $value, $table_create_time = null)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        // we want to save the create time if the property is PROP_COLUMN_ORDER        if (! PMA_Table::isView($this->db_name, $this->name)            && ($property == self::PROP_COLUMN_ORDER || $property == self::PROP_COLUMN_VISIB)        ) {            $curr_create_time = self::sGetStatusInfo($this->db_name, $this->name, 'CREATE_TIME');            if (isset($table_create_time)                && $table_create_time == $curr_create_time            ) {                $this->uiprefs['CREATE_TIME'] = $curr_create_time;            } else {                // there is no $table_create_time, or                // supplied $table_create_time is older than current create time,                // so don't save                return PMA_Message::error(sprintf(                    __('Cannot save UI property "%s". The changes made will not be persistent after you refresh this page. Please check if the table structure has been changed.'), $property));            }        }        // save the value        $this->uiprefs[$property] = $value;        // check if pmadb is set        if (strlen($GLOBALS['cfg']['Server']['pmadb'])            && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])        ) {            return $this->saveUiprefsToDb();        }        return true;    }    /**     * Remove a property from UI preferences.     *     * @param string $property the property     *     * @return true|PMA_Message     */    public function removeUiProp($property)    {        if (! isset($this->uiprefs)) {            $this->loadUiPrefs();        }        if (isset($this->uiprefs[$property])) {            unset($this->uiprefs[$property]);            // check if pmadb is set            if (strlen($GLOBALS['cfg']['Server']['pmadb'])                && strlen($GLOBALS['cfg']['Server']['table_uiprefs'])            ) {                return $this->saveUiprefsToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Exporting of translated messages from PHP to Javascript * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');// Cache output in client - the nocache query parameter makes sure that this// file is reloaded when config changesheader('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Close session early as we won't write anything theresession_write_close();// But this one is needed for PMA_escapeJsString()require_once './libraries/js_escape.lib.php';$js_messages['strNoDropDatabases'] = $cfg['AllowUserDropDatabase'] ? '' : __('"DROP DATABASE" statements are disabled.');/* For confirmations */$js_messages['strDoYouReally'] = __('Do you really want to ');$js_messages['strDropDatabaseStrongWarning'] = __('You are about to DESTROY a complete database!');$js_messages['strDropTableStrongWarning'] = __('You are about to DESTROY a complete table!');$js_messages['strTruncateTableStrongWarning'] = __('You are about to TRUNCATE a complete table!');$js_messages['strDeleteTrackingData'] = __('Delete tracking data for this table');$js_messages['strDeletingTrackingData'] = __('Deleting tracking data');$js_messages['strDroppingPrimaryKeyIndex'] = __('Dropping Primary Key/Index');$js_messages['strOperationTakesLongTime'] = __('This operation could take a long time. Proceed anyway?');/* For blobstreaming */$js_messages['strBLOBRepositoryDisableStrongWarning'] = __('You are about to DISABLE a BLOB Repository!');$js_messages['strBLOBRepositoryDisableAreYouSure'] = sprintf(__('Are you sure you want to disable all BLOB references for database %s?'), PMA_escapeJsString($GLOBALS['db']));/* For indexes */$js_messages['strFormEmpty'] = __('Missing value in the form!');$js_messages['strNotNumber'] = __('This is not a number!');$js_messages['strAddIndex'] = __('Add Index');$js_messages['strEditIndex'] = __('Edit Index');$js_messages['strAddToIndex'] = __('Add %d column(s) to index');/* Charts *//* l10n: Default description for the y-Axis of Charts */$js_messages['strTotalCount'] = __('Total count');/* For server_privileges.js */$js_messages['strHostEmpty'] = __('The host name is empty!');$js_messages['strUserEmpty'] = __('The user name is empty!');$js_messages['strPasswordEmpty'] = __('The password is empty!');$js_messages['strPasswordNotSame'] = __('The passwords aren\'t the same!');$js_messages['strAddUser'] = __('Add user');$js_messages['strReloadingPrivileges'] = __('Reloading Privileges');$js_messages['strRemovingSelectedUsers'] = __('Removing Selected Users');$js_messages['strClose'] = __('Close');/* for server_status.js */$js_messages['strEdit'] = __('Edit');$js_messages['strLiveTrafficChart'] = __('Live traffic chart');$js_messages['strLiveConnChart'] = __('Live conn./process chart');$js_messages['strLiveQueryChart'] = __('Live query chart');$js_messages['strStaticData'] = __('Static data');/* l10n: Total number of queries */$js_messages['strTotal'] = __('Total');/* l10n: Other, small valued, queries */$js_messages['strOther'] = __('Other');/* l10n: Thousands separator */$js_messages['strThousandsSeperator'] = __(',');/* l10n: Decimal separator */$js_messages['strDecimalSeperator'] = __('.');$js_messages['strChartKBSent'] = __('KiB sent since last refresh');$js_messages['strChartKBReceived'] = __('KiB received since last refresh');$js_messages['strChartServerTraffic'] = __('Server traffic (in KiB)');$js_messages['strChartConnections'] = __('Connections since last refresh');$js_messages['strChartProcesses'] = __('Processes');$js_messages['strChartConnectionsTitle'] = __('Connections / Processes');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueries'] = __('Questions since last refresh');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strChartIssuedQueriesTitle'] = __('Questions (executed statements by the server)');$js_messages['strChartQueryPie'] = __('Query statistics');/* server status monitor */$js_messages['strIncompatibleMonitorConfig'] = __('Local monitor configuration incompatible');$js_messages['strIncompatibleMonitorConfigDescription'] = __('The chart arrangement configuration in your browsers local storage is not compatible anymore to the newer version of the monitor dialog. It is very likely that your current configuration will not work anymore. Please reset your configuration to default in the <i>Settings</i> menu.');$js_messages['strQueryCacheEfficiency'] = __('Query cache efficiency');$js_messages['strQueryCacheUsage'] = __('Query cache usage');$js_messages['strQueryCacheUsed'] = __('Query cache used');$js_messages['strSystemCPUUsage'] = __('System CPU Usage');$js_messages['strSystemMemory'] = __('System memory');$js_messages['strSystemSwap'] = __('System swap');$js_messages['strMiB'] = __('MiB');$js_messages['strKiB'] = __('KiB');$js_messages['strAverageLoad'] = __('Average load');$js_messages['strTotalMemory'] = __('Total memory');$js_messages['strCachedMemory'] = __('Cached memory');$js_messages['strBufferedMemory'] = __('Buffered memory');$js_messages['strFreeMemory'] = __('Free memory');$js_messages['strUsedMemory'] = __('Used memory');$js_messages['strTotalSwap'] = __('Total Swap');$js_messages['strCachedSwap'] = __('Cached Swap');$js_messages['strUsedSwap'] = __('Used Swap');$js_messages['strFreeSwap'] = __('Free Swap');$js_messages['strBytesSent'] = __('Bytes sent');$js_messages['strBytesReceived'] = __('Bytes received');$js_messages['strConnections'] = __('Connections');$js_messages['strProcesses'] = __('Processes');/* summary row */$js_messages['strB'] = __('B');$js_messages['strKiB'] = __('KiB');$js_messages['strMiB'] = __('MiB');$js_messages['strGiB'] = __('GiB');$js_messages['strTiB'] = __('TiB');$js_messages['strPiB'] = __('PiB');$js_messages['strEiB'] = __('EiB');$js_messages['strTables'] = __('%d table(s)');/* l10n: Questions is the name of a MySQL Status variable */$js_messages['strQuestions'] = __('Questions');$js_messages['strTraffic'] = __('Traffic');$js_messages['strSettings'] = __('Settings');$js_messages['strRemoveChart'] = __('Remove chart');$js_messages['strEditChart'] = __('Edit title and labels');$js_messages['strAddChart'] = __('Add chart to grid');$js_messages['strClose'] = __('Close');$js_messages['strAddOneSeriesWarning'] = __('Please add at least one variable to the series');$js_messages['strNone'] = __('None');$js_messages['strResumeMonitor'] = __('Resume monitor');$js_messages['strPauseMonitor'] = __('Pause monitor');/* Monitor: Instructions Dialog */$js_messages['strBothLogOn'] = __('general_log and slow_query_log are enabled.');$js_messages['strGenLogOn'] = __('general_log is enabled.');$js_messages['strSlowLogOn'] = __('slow_query_log is enabled.');$js_messages['strBothLogOff'] = __('slow_query_log and general_log are disabled.');$js_messages['strLogOutNotTable'] = __('log_output is not set to TABLE.');$js_messages['strLogOutIsTable'] = __('log_output is set to TABLE.');$js_messages['strSmallerLongQueryTimeAdvice'] = __('slow_query_log is enabled, but the server logs only queries that take longer than %d seconds. It is advisable to set this long_query_time 0-2 seconds, depending on your system.');$js_messages['strLongQueryTimeSet'] = __('long_query_time is set to %d second(s).');$js_messages['strSettingsAppliedGlobal'] = __('Following settings will be applied globally and reset to default on server restart:');/* l10n: %s is FILE or TABLE */$js_messages['strSetLogOutput'] = __('Set log_output to %s');/* l10n: Enable in this context means setting a status variable to ON */$js_messages['strEnableVar'] = __('Enable %s');/* l10n: Disable in this context means setting a status variable to OFF */$js_messages['strDisableVar'] = __('Disable %s');/* l10n: %d seconds */$js_messages['setSetLongQueryTime'] = __('Set long_query_time to %ds');$js_messages['strNoSuperUser'] = __('You can\'t change these variables. Please log in as root or contact your database administrator.');$js_messages['strChangeSettings'] = __('Change settings');$js_messages['strCurrentSettings'] = __('Current settings');$js_messages['strChartTitle'] = __('Chart Title');/* l10n: As in differential values */$js_messages['strDifferential'] = __('Differential');$js_messages['strDividedBy'] = __('Divided by %s');$js_messages['strUnit'] = __('Unit');$js_messages['strFromSlowLog'] = __('From slow log');$js_messages['strFromGeneralLog'] = __('From general log');$js_messages['strAnalysingLogs'] = __('Analysing & loading logs. This may take a while.');$js_messages['strCancelRequest'] = __('Cancel request');$js_messages['strCountColumnExplanation'] = __('This column shows the amount of identical queries that are grouped together. However only the SQL query itself has been used as a grouping criteria, so the other attributes of queries, such as start time, may differ.');$js_messages['strMoreCountColumnExplanation'] = __('Since grouping of INSERTs queries has been selected, INSERT queries into the same table are also being grouped together, disregarding of the inserted data.');$js_messages['strLogDataLoaded'] = __('Log data loaded. Queries executed in this time span:');$js_messages['strJumpToTable'] = __('Jump to Log table');$js_messages['strNoDataFound'] = __('Log analysed, but no data found in this time span.');$js_messages['strAnalyzing'] = __('Analyzing...');$js_messages['strExplainOutput'] = __('Explain output');$js_messages['strStatus'] = __('Status');$js_messages['strTime'] = __('Time');$js_messages['strTotalTime'] = __('Total time:');$js_messages['strProfilingResults'] = __('Profiling results');$js_messages['strTable'] = _pgettext('Display format', 'Table');$js_messages['strChart'] = __('Chart');/* l10n: A collection of available filters */$js_messages['strFiltersForLogTable'] = __('Log table filter options');/* l10n: Filter as in "Start Filtering" */$js_messages['strFilter'] = __('Filter');$js_messages['strFilterByWordRegexp'] = __('Filter queries by word/regexp:');$js_messages['strIgnoreWhereAndGroup'] = __('Group queries, ignoring variable data in WHERE clauses');$js_messages['strSumRows'] = __('Sum of grouped rows:');$js_messages['strTotal'] = __('Total:');$js_messages['strLoadingLogs'] = __('Loading logs');$js_messages['strRefreshFailed'] = __('Monitor refresh failed');$js_messages['strInvalidResponseExplanation'] = __('While requesting new chart data the server returned an invalid response. This is most likely because your session expired. Reloading the page and reentering your credentials should help.');$js_messages['strReloadPage'] = __('Reload page');$js_messages['strAffectedRows'] = __('Affected rows:');$js_messages['strFailedParsingConfig'] = __('Failed parsing config file. It doesn\'t seem to be valid JSON code.');$js_messages['strFailedBuildingGrid'] = __('Failed building chart grid with imported config. Resetting to default config...');$js_messages['strImport'] = __('Import');$js_messages['strAnalyzeQuery'] = __('Analyse Query');/* Server status advisor */$js_messages['strAdvisorSystem'] = __('Advisor system');$js_messages['strPerformanceIssues'] = __('Possible performance issues');$js_messages['strIssuse'] = __('Issue');$js_messages['strRecommendation'] = __('Recommendation');$js_messages['strRuleDetails'] = __('Rule details');$js_messages['strJustification'] = __('Justification');$js_messages['strFormula'] = __('Used variable / formula');$js_messages['strTest'] = __('Test');/* For inline query editing */$js_messages['strGo'] = __('Go');$js_messages['strCancel'] = __('Cancel');/* For Ajax Notifications */$js_messages['strLoading'] = __('Loading');$js_messages['strProcessingRequest'] = __('Processing Request');$js_messages['strErrorProcessingRequest'] = __('Error in Processing Request');$js_messages['strDroppingColumn'] = __('Dropping Column');$js_messages['strAddingPrimaryKey'] = __('Adding Primary Key');$js_messages['strOK'] = __('OK');$js_messages['strDismiss'] = __('Click to dismiss this notification');/* For db_operations.js */$js_messages['strRenamingDatabases'] = __('Renaming Databases');$js_messages['strReloadDatabase'] = __('Reload Database');$js_messages['strCopyingDatabase'] = __('Copying Database');$js_messages['strChangingCharset'] = __('Changing Charset');$js_messages['strTableMustHaveAtleastOneColumn'] = __('Table must have at least one column');$js_messages['strYes'] = __('Yes');$js_messages['strNo'] = __('No');/* For db_stucture.js */$js_messages['strInsertTable'] = __('Insert Table');$js_messages['strHideIndexes'] = __('Hide indexes');$js_messages['strShowIndexes'] = __('Show indexes');/* For db_search.js */$js_messages['strSearching'] = __('Searching');$js_messages['strHideSearchResults'] = __('Hide search results');$js_messages['strShowSearchResults'] = __('Show search results');$js_messages['strBrowsing'] = __('Browsing');$js_messages['strDeleting'] = __('Deleting');/* For db_routines.js */$js_messages['MissingReturn'] = __('The definition of a stored function must contain a RETURN statement!');/* For ENUM/SET editor*/$js_messages['enum_editor'] = __('ENUM/SET editor');$js_messages['enum_columnVals'] =__('Values for column %s');$js_messages['enum_newColumnVals'] = __('Values for a new column');$js_messages['enum_hint'] =__('Enter each value in a separate field');$js_messages['enum_addValue'] =__('Add %d value(s)');/* For import.js */$js_messages['strImportCSV'] = __('Note: If the file contains multiple tables, they will be combined into one');/* For sql.js */$js_messages['strHideQueryBox'] = __('Hide query box');$js_messages['strShowQueryBox'] = __('Show query box');$js_messages['strEdit'] = __('Edit');$js_messages['strNoRowSelected'] = __('No rows selected');$js_messages['strChangeTbl'] = __('Change');$js_messages['strQueryExecutionTime'] = __('Query execution time');/* For server_variables.js */$js_messages['strSave'] = __('Save');/* For tbl_select.js */$js_messages['strHideSearchCriteria'] = __('Hide search criteria');$js_messages['strShowSearchCriteria'] = __('Show search criteria');/* For tbl_zoom_plot.js */$js_messages['strZoomSearch'] = __('Zoom Search');$js_messages['strDisplayHelp'] = '<ul><li>'    . __('Each point represents a data row.')    . '</li><li>'    . __('Hovering over a point will show its label.')    . '</li><li>'    . __('Use mousewheel to zoom in or out of the plot.')    . '</li><li>'    . __('Click and drag the mouse to navigate the plot.')    . '</li><li>'    . __('Click reset zoom link to come back to original state.')    . '</li><li>'    . __('Click a data point to view and possibly edit the data row.')    . '</li><li>'    . __('The plot can be resized by dragging it along the bottom right corner.')    . '</li><li>'    . __('Strings are converted into integer for plotting')    . '</li></ul>';$js_messages['strInputNull'] = '<strong>' . __('Select two columns') . '</strong>';$js_messages['strSameInputs'] = '<strong>' . __('Select two different columns') . '</strong>';$js_messages['strQueryResults'] = __('Query results');$js_messages['strDataPointContent'] = __('Data point content');/* For tbl_change.js */$js_messages['strIgnore'] = __('Ignore');$js_messages['strCopy'] = __('Copy');$js_messages['strX'] = __('X');$js_messages['strY'] = __('Y');$js_messages['strPoint'] = __('Point');$js_messages['strPointN'] = __('Point %d');$js_messages['strLineString'] = __('Linestring');$js_messages['strPolygon'] = __('Polygon');$js_messages['strGeometry'] = __('Geometry');$js_messages['strInnerRing'] = __('Inner Ring');$js_messages['strOuterRing'] = __('Outer Ring');$js_messages['strAddPoint'] = __('Add a point');$js_messages['strAddInnerRing'] = __('Add an inner ring');$js_messages['strAddPolygon'] = __('Add a polygon');/* For tbl_structure.js */$js_messages['strAddColumns'] = __('Add columns');/* Designer (js/pmd/move.js) */$js_messages['strSelectReferencedKey'] = __('Select referenced key');$js_messages['strSelectForeignKey'] = __('Select Foreign Key');$js_messages['strPleaseSelectPrimaryOrUniqueKey'] = __('Please select the primary key or a unique key');$js_messages['strChangeDisplay'] = __('Choose column to display');$js_messages['strLeavingDesigner'] = __('You haven\'t saved the changes in the layout. They will be lost if you don\'t save them. Do you want to continue?');/* Visual query builder (js/pmd/move.js) */$js_messages['strAddOption'] = __('Add an option for column ');/* For makegrid.js (column reordering, show/hide column, grid editing) */$js_messages['strCellEditHint'] = __('Press escape to cancel editing');$js_messages['strSaveCellWarning'] = __('You have edited some data and they have not been saved. Are you sure you want to leave this page before saving the data?');$js_messages['strColOrderHint'] = __('Drag to reorder');$js_messages['strSortHint'] = __('Click to sort');$js_messages['strColMarkHint'] = __('Click to mark/unmark');$js_messages['strColVisibHint'] = __('Click the drop-down arrow<br />to toggle column\'s visibility');$js_messages['strShowAllCol'] = __('Show all');$js_messages['strAlertNonUnique'] = __('This table does not contain a unique column. Features related to the grid edit, checkbox, Edit, Copy and Delete links may not work after saving.');$js_messages['strGridEditFeatureHint'] = __('You can also edit most columns<br />by clicking directly on their content.');$js_messages['strGoToLink'] = __('Go to link');/* password generation */$js_messages['strGeneratePassword'] = __('Generate password');$js_messages['strGenerate'] = __('Generate');$js_messages['strChangePassword'] = __('Change Password');/* navigation tabs */$js_messages['strMore'] = __('More');/* update */$js_messages['strNewerVersion'] = __('A newer version of phpMyAdmin is available and you should consider upgrading. The newest version is %s, released on %s.');/* l10n: Latest available phpMyAdmin version */$js_messages['strLatestAvailable'] = __(', latest stable version:');$js_messages['strUpToDate'] = __('up to date');echo "var PMA_messages = new Array();\n";foreach ($js_messages as $name => $js_message) {    PMA_printJsValue("PMA_messages['" . $name . "']", $js_message);}/* Calendar */echo "var themeCalendarImage = '" . $GLOBALS['pmaThemeImage'] . 'b_calendar.png' . "';\n";/* Image path */echo "var pmaThemeImage = '" . $GLOBALS['pmaThemeImage'] . "';\n";/* Version */echo "var pmaversion = '" . PMA_VERSION . "';\n";echo "if ($.datepicker) {\n";/* l10n: Display text for calendar close link */PMA_printJsValue("$.datepicker.regional['']['closeText']", __('Done'));/* l10n: Display text for previous month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['prevText']",    _pgettext('Previous month', 'Prev'));/* l10n: Display text for next month link in calendar */PMA_printJsValue(    "$.datepicker.regional['']['nextText']",    _pgettext('Next month', 'Next'));/* l10n: Display text for current month link in calendar */PMA_printJsValue("$.datepicker.regional['']['currentText']", __('Today'));PMA_printJsValue("$.datepicker.regional['']['monthNames']",    array(        __('January'),        __('February'),        __('March'),        __('April'),        __('May'),        __('June'),        __('July'),        __('August'),        __('September'),        __('October'),        __('November'),        __('December')));PMA_printJsValue("$.datepicker.regional['']['monthNamesShort']",    array(/* l10n: Short month name */        __('Jan'),/* l10n: Short month name */        __('Feb'),/* l10n: Short month name */        __('Mar'),/* l10n: Short month name */        __('Apr'),/* l10n: Short month name */        _pgettext('Short month name', 'May'),/* l10n: Short month name */        __('Jun'),/* l10n: Short month name */        __('Jul'),/* l10n: Short month name */        __('Aug'),/* l10n: Short month name */        __('Sep'),/* l10n: Short month name */        __('Oct'),/* l10n: Short month name */        __('Nov'),/* l10n: Short month name */        __('Dec')));PMA_printJsValue("$.datepicker.regional['']['dayNames']",    array(        __('Sunday'),        __('Monday'),        __('Tuesday'),        __('Wednesday'),        __('Thursday'),        __('Friday'),        __('Saturday')));PMA_printJsValue("$.datepicker.regional['']['dayNamesShort']",    array(/* l10n: Short week day name */        __('Sun'),/* l10n: Short week day name */        __('Mon'),/* l10n: Short week day name */        __('Tue'),/* l10n: Short week day name */        __('Wed'),/* l10n: Short week day name */        __('Thu'),/* l10n: Short week day name */        __('Fri'),/* l10n: Short week day name */        __('Sat')));PMA_printJsValue("$.datepicker.regional['']['dayNamesMin']",    array(/* l10n: Minimal week day name */        __('Su'),/* l10n: Minimal week day name */        __('Mo'),/* l10n: Minimal week day name */        __('Tu'),/* l10n: Minimal week day name */        __('We'),/* l10n: Minimal week day name */        __('Th'),/* l10n: Minimal week day name */        __('Fr'),/* l10n: Minimal week day name */        __('Sa')));/* l10n: Column header for week of the year in calendar */PMA_printJsValue("$.datepicker.regional['']['weekHeader']", __('Wk'));/* l10n: Month-year order for calendar, use either "calendar-month-year" or "calendar-year-month". */PMA_printJsValue("$.datepicker.regional['']['showMonthAfterYear']", (__('calendar-month-year') == 'calendar-year-month'));/* l10n: Year suffix for calendar, "none" is empty. */$year_suffix = _pgettext('Year suffix', 'none');PMA_printJsValue("$.datepicker.regional['']['yearSuffix']", ($year_suffix == 'none' ? '' : $year_suffix));?>$.extend($.datepicker._defaults, $.datepicker.regional['']);} /* if ($.datepicker) */<?phpecho "if ($.timepicker) {\n";PMA_printJsValue("$.timepicker.regional['']['timeText']", __('Time'));PMA_printJsValue("$.timepicker.regional['']['hourText']", __('Hour'));PMA_printJsValue("$.timepicker.regional['']['minuteText']", __('Minute'));PMA_printJsValue("$.timepicker.regional['']['secondText']", __('Second'));?>$.extend($.timepicker._defaults, $.timepicker.regional['']);} /* if ($.timepicker) */
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Runs common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require './libraries/db_common.inc.php';require_once './libraries/sql_query_form.lib.php';// After a syntax error, we return to this script// with the typed query in the textarea.$goto = 'db_sql.php';$back = 'db_sql.php';/** * Gets informations about the database and, if it is empty, move to the * "db_structure.php" script where table can be created */require './libraries/db_info.inc.php';if ($num_tables == 0 && empty($db_query_force)) {    $sub_part   = '';    $is_info    = true;    include './db_structure.php';    exit();}/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm(true, false, isset($_REQUEST['delimiter']) ? htmlspecialchars($_REQUEST['delimiter']) : ';');/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** SQL Parser Functions for phpMyAdmin * * These functions define an SQL parser system, capable of understanding and * extracting data from a MySQL type SQL query. * * The basic procedure for using the new SQL parser: * On any page that needs to extract data from a query or to pretty-print a * query, you need code like this up at the top: * * ($sql contains the query) * $parsed_sql = PMA_SQP_parse($sql); * * If you want to extract data from it then, you just need to run * $sql_info = PMA_SQP_analyze($parsed_sql); * * See comments in PMA_SQP_analyze for the returned info * from the analyzer. * * If you want a pretty-printed version of the query, do: * $string = PMA_SQP_formatHtml($parsed_sql); * (note that that you need to have syntax.css.php included somehow in your * page for it to work, I recommend '<link rel="stylesheet" type="text/css" * href="syntax.css.php" />' at the moment.) * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Minimum inclusion? (i.e. for the stylesheet builder) */if (! defined('PMA_MINIMUM_COMMON')) {    /**     * Include the string library as we use it heavily     */    include_once './libraries/string.lib.php';    /**     * Include data for the SQL Parser     */    include_once './libraries/sqlparser.data.php';    if (!defined('TESTSUITE')) {        include_once './libraries/mysql_charsets.lib.php';    }    if (! isset($mysql_charsets)) {        $mysql_charsets = array();        $mysql_collations_flat = array();    }    if (!defined('DEBUG_TIMING')) {        /**         * currently we don't need the $pos (token position in query)         * for other purposes than LIMIT clause verification,         * so many calls to this function do not include the 4th parameter         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            $arr[] = array('type' => $type, 'data' => $data, 'pos' => $pos);            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } else {        /**         * This is debug variant of above.         * @ignore         */        function PMA_SQP_arrayAdd(&$arr, $type, $data, &$arrsize, $pos = 0)        {            global $timer;            $t     = $timer;            $arr[] = array(                'type' => $type,                'data' => $data,                'pos' => $pos,                'time' => $t);            $timer = microtime();            $arrsize++;        } // end of the "PMA_SQP_arrayAdd()" function    } // end if... else...    /**     * Reset the error variable for the SQL parser     *     * @access public     */    function PMA_SQP_resetError()    {        global $SQP_errorString;        $SQP_errorString = '';        unset($SQP_errorString);    }    /**     * Get the contents of the error variable for the SQL parser     *     * @return string Error string from SQL parser     *     * @access public     */    function PMA_SQP_getErrorString()    {        global $SQP_errorString;        return isset($SQP_errorString) ? $SQP_errorString : '';    }    /**     * Check if the SQL parser hit an error     *     * @return boolean error state     *     * @access public     */    function PMA_SQP_isError()    {        global $SQP_errorString;        return isset($SQP_errorString) && !empty($SQP_errorString);    }    /**     * Set an error message for the system     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access private     * @scope SQL Parser internal     */    function PMA_SQP_throwError($message, $sql)    {        global $SQP_errorString;        $SQP_errorString = '<p>'.__('There seems to be an error in your SQL query. The MySQL server error output below, if there is any, may also help you in diagnosing the problem') . '</p>' . "\n"            . '<pre>' . "\n"            . 'ERROR: ' . $message . "\n"            . 'SQL: ' . htmlspecialchars($sql) .  "\n"            . '</pre>' . "\n";    } // end of the "PMA_SQP_throwError()" function    /**     * Do display the bug report     *     * @param string  The error message     * @param string  The failing SQL query     *     * @access public     */    function PMA_SQP_bug($message, $sql)    {        global $SQP_errorString;        $debugstr = 'ERROR: ' . $message . "\n";        $debugstr .= 'MySQL: '.PMA_MYSQL_STR_VERSION . "\n";        $debugstr .= 'USR OS, AGENT, VER: ' . PMA_USR_OS . ' ';        $debugstr .= PMA_USR_BROWSER_AGENT . ' ' . PMA_USR_BROWSER_VER . "\n";        $debugstr .= 'PMA: ' . PMA_VERSION . "\n";        $debugstr .= 'PHP VER,OS: ' . PMA_PHP_STR_VERSION . ' ' . PHP_OS . "\n";        $debugstr .= 'LANG: ' . $GLOBALS['lang'] . "\n";        $debugstr .= 'SQL: ' . htmlspecialchars($sql);        $encodedstr     = $debugstr;        if (@function_exists('gzcompress')) {            $encodedstr = gzcompress($debugstr, 9);        }        $encodedstr     = preg_replace(            "/(\015\012)|(\015)|(\012)/",            '<br />' . "\n",            chunk_split(base64_encode($encodedstr)));        $SQP_errorString .= __('There is a chance that you may have found a bug in the SQL parser. Please examine your query closely, and check that the quotes are correct and not mis-matched. Other possible failure causes may be that you are uploading a file with binary outside of a quoted text area. You can also try your query on the MySQL command line interface. The MySQL server error output below, if there is any, may also help you in diagnosing the problem. If you still have problems or if the parser fails where the command line interface succeeds, please reduce your SQL query input to the single query that causes problems, and submit a bug report with the data chunk in the CUT section below:')             . '<br />' . "\n"             . '----' . __('BEGIN CUT') . '----' . '<br />' . "\n"             . $encodedstr . "\n"             . '----' . __('END CUT') . '----' . '<br />' . "\n";        $SQP_errorString .= '----' . __('BEGIN RAW') . '----<br />' . "\n"             . '<pre>' . "\n"             . $debugstr             . '</pre>' . "\n"             . '----' . __('END RAW') . '----<br />' . "\n";    } // end of the "PMA_SQP_bug()" function    /**     * Parses the SQL queries     *     * @param string   The SQL query list     *     * @return mixed    Most of times, nothing...     *     * @global array    The current PMA configuration     * @global array    MySQL column attributes     * @global array    MySQL reserved words     * @global array    MySQL column types     * @global array    MySQL function names     * @global array    List of available character sets     * @global array    List of available collations     *     * @access public     */    function PMA_SQP_parse($sql)    {        static $PMA_SQPdata_column_attrib, $PMA_SQPdata_reserved_word;        static $PMA_SQPdata_column_type;        static $PMA_SQPdata_function_name, $PMA_SQPdata_forbidden_word;        global $mysql_charsets, $mysql_collations_flat;        // Convert all line feeds to Unix style        $sql = str_replace("\r\n", "\n", $sql);        $sql = str_replace("\r", "\n", $sql);        $len = PMA_strlen($sql);        if ($len == 0) {            return array();        }        // Create local hashtables        if (!isset($PMA_SQPdata_column_attrib)) {            $PMA_SQPdata_column_attrib  = array_flip(                $GLOBALS['PMA_SQPdata_column_attrib']                );            $PMA_SQPdata_function_name  = array_flip(                $GLOBALS['PMA_SQPdata_function_name']                );            $PMA_SQPdata_reserved_word  = array_flip(                $GLOBALS['PMA_SQPdata_reserved_word']                );            $PMA_SQPdata_forbidden_word = array_flip(                $GLOBALS['PMA_SQPdata_forbidden_word']                );            $PMA_SQPdata_column_type    = array_flip(                $GLOBALS['PMA_SQPdata_column_type']                );        }        $sql_array               = array();        $sql_array['raw']        = $sql;        $count1                  = 0;        $count2                  = 0;        $punct_queryend          = ';';        $punct_qualifier         = '.';        $punct_listsep           = ',';        $punct_level_plus        = '(';        $punct_level_minus       = ')';        $punct_user              = '@';        $digit_floatdecimal      = '.';        $digit_hexset            = 'x';        $bracket_list            = '()[]{}';        $allpunct_list           =  '-,;:!?/.^~\*&%+<=>|';        $allpunct_list_pair      = array(            '!=' => 1,            '&&' => 1,            ':=' => 1,            '<<' => 1,            '<=' => 1,            '<=>' => 1,            '<>' => 1,            '>=' => 1,            '>>' => 1,            '||' => 1,            '==' => 1        );        $quote_list              = '\'"`';        $arraysize               = 0;        $previous_was_space   = false;        $this_was_space       = false;        $previous_was_bracket = false;        $this_was_bracket     = false;        $previous_was_punct   = false;        $this_was_punct       = false;        $previous_was_listsep = false;        $this_was_listsep     = false;        $previous_was_quote   = false;        $this_was_quote       = false;        while ($count2 < $len) {            $c      = PMA_substr($sql, $count2, 1);            $count1 = $count2;            $previous_was_space = $this_was_space;            $this_was_space = false;            $previous_was_bracket = $this_was_bracket;            $this_was_bracket = false;            $previous_was_punct = $this_was_punct;            $this_was_punct = false;            $previous_was_listsep = $this_was_listsep;            $this_was_listsep = false;            $previous_was_quote = $this_was_quote;            $this_was_quote = false;            if (($c == "\n")) {                $this_was_space = true;                $count2++;                PMA_SQP_arrayAdd($sql_array, 'white_newline', '', $arraysize);                continue;            }            // Checks for white space            if (PMA_STR_isSpace($c)) {                $this_was_space = true;                $count2++;                continue;            }            // Checks for comment lines.            // MySQL style #            // C style /* */            // ANSI style --            $next_c = PMA_substr($sql, $count2 + 1, 1);            if (($c == '#')                || (($count2 + 1 < $len) && ($c == '/') && ($next_c == '*'))                || (($count2 + 2 == $len) && ($c == '-') && ($next_c == '-'))                || (($count2 + 2 < $len) && ($c == '-') && ($next_c == '-') && ((PMA_substr($sql, $count2 + 2, 1) <= ' ')))) {                $count2++;                $pos  = 0;                $type = 'bad';                switch ($c) {                case '#':                    $type = 'mysql';                case '-':                    $type = 'ansi';                    $pos  = PMA_strpos($sql, "\n", $count2);                    break;                case '/':                    $type = 'c';                    $pos  = PMA_strpos($sql, '*/', $count2);                    $pos  += 2;                    break;                default:                    break;                } // end switch                $count2 = ($pos < $count2) ? $len : $pos;                $str    = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, 'comment_' . $type, $str, $arraysize);                continue;            } // end if            // Checks for something inside quotation marks            if (PMA_strpos($quote_list, $c) !== false) {                $startquotepos   = $count2;                $quotetype       = $c;                $count2++;                $escaped         = false;                $pos             = $count2;                $oldpos          = 0;                do {                    $oldpos = $pos;                    $pos    = PMA_strpos(' ' . $sql, $quotetype, $oldpos + 1) - 1;                    // ($pos === false)                    if ($pos < 0) {                        if ($c == '`') {                            /*                             * Behave same as MySQL and accept end of query as end of backtick.                             * I know this is sick, but MySQL behaves like this:                             *                             * SELECT * FROM `table                             *                             * is treated like                             *                             * SELECT * FROM `table`                             */                            $pos_quote_separator = PMA_strpos(' ' . $sql, $GLOBALS['sql_delimiter'], $oldpos + 1) - 1;                            if ($pos_quote_separator < 0) {                                $len += 1;                                $sql .= '`';                                $sql_array['raw'] .= '`';                                $pos = $len;                            } else {                                $len += 1;                                $sql = PMA_substr($sql, 0, $pos_quote_separator) . '`' . PMA_substr($sql, $pos_quote_separator);                                $sql_array['raw'] = $sql;                                $pos = $pos_quote_separator;                            }                            if (class_exists('PMA_Message') && $GLOBALS['is_ajax_request'] != true) {                                PMA_Message::notice(__('Automatically appended backtick to the end of query!'))->display();                            }                        } else {                            $debugstr = __('Unclosed quote') . ' @ ' . $startquotepos. "\n"                                      . 'STR: ' . htmlspecialchars($quotetype);                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    // If the quote is the first character, it can't be                    // escaped, so don't do the rest of the code                    if ($pos == 0) {                        break;                    }                    // Checks for MySQL escaping using a \                    // And checks for ANSI escaping using the $quotetype character                    if (($pos < $len) && PMA_STR_charIsEscaped($sql, $pos) && $c != '`') {                        $pos ++;                        continue;                    } elseif (($pos + 1 < $len) && (PMA_substr($sql, $pos, 1) == $quotetype) && (PMA_substr($sql, $pos + 1, 1) == $quotetype)) {                        $pos = $pos + 2;                        continue;                    } else {                        break;                    }                } while ($len > $pos); // end do                $count2       = $pos;                $count2++;                $type         = 'quote_';                switch ($quotetype) {                case '\'':                    $type .= 'single';                    $this_was_quote = true;                    break;                case '"':                    $type .= 'double';                    $this_was_quote = true;                    break;                case '`':                    $type .= 'backtick';                    $this_was_quote = true;                    break;                default:                    break;                } // end switch                $data = PMA_substr($sql, $count1, $count2 - $count1);                PMA_SQP_arrayAdd($sql_array, $type, $data, $arraysize);                continue;            }            // Checks for brackets            if (PMA_strpos($bracket_list, $c) !== false) {                // All bracket tokens are only one item long                $this_was_bracket = true;                $count2++;                $type_type     = '';                if (PMA_strpos('([{', $c) !== false) {                    $type_type = 'open';                } else {                    $type_type = 'close';                }                $type_style     = '';                if (PMA_strpos('()', $c) !== false) {                    $type_style = 'round';                } elseif (PMA_strpos('[]', $c) !== false) {                    $type_style = 'square';                } else {                    $type_style = 'curly';                }                $type = 'punct_bracket_' . $type_type . '_' . $type_style;                PMA_SQP_arrayAdd($sql_array, $type, $c, $arraysize);                continue;            }            /* DEBUG            echo '<pre>1';            var_dump(PMA_STR_isSqlIdentifier($c, false));            var_dump($c == '@');            var_dump($c == '.');            var_dump(PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1)));            var_dump($previous_was_space);            var_dump($previous_was_bracket);            var_dump($previous_was_listsep);            echo '</pre>';            */            // Checks for identifier (alpha or numeric)            if (PMA_STR_isSqlIdentifier($c, false)             || $c == '@'             || ($c == '.'              && PMA_STR_isDigit(PMA_substr($sql, $count2 + 1, 1))              && ($previous_was_space || $previous_was_bracket || $previous_was_listsep))) {                /* DEBUG                echo PMA_substr($sql, $count2);                echo '<hr />';                */                $count2++;                /**                 * @todo a @ can also be present in expressions like                 * FROM 'user'@'%' or  TO 'user'@'%'                 * in this case, the @ is wrongly marked as alpha_variable                 */                $is_identifier           = $previous_was_punct;                $is_sql_variable         = $c == '@' && ! $previous_was_quote;                $is_user                 = $c == '@' && $previous_was_quote;                $is_digit                = !$is_identifier && !$is_sql_variable && PMA_STR_isDigit($c);                $is_hex_digit            = $is_digit && $c == '0' && $count2 < $len && PMA_substr($sql, $count2, 1) == 'x';                $is_float_digit          = $c == '.';                $is_float_digit_exponent = false;                /* DEBUG                echo '<pre>2';                var_dump($is_identifier);                var_dump($is_sql_variable);                var_dump($is_digit);                var_dump($is_float_digit);                echo '</pre>';                 */                // Fast skip is especially needed for huge BLOB data                if ($is_hex_digit) {                    $count2++;                    $pos = strspn($sql, '0123456789abcdefABCDEF', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                } elseif ($is_digit) {                    $pos = strspn($sql, '0123456789', $count2);                    if ($pos > $count2) {                        $count2 = $pos;                    }                    unset($pos);                }                while (($count2 < $len) && PMA_STR_isSqlIdentifier(PMA_substr($sql, $count2, 1), ($is_sql_variable || $is_digit))) {                    $c2 = PMA_substr($sql, $count2, 1);                    if ($is_sql_variable && ($c2 == '.')) {                        $count2++;                        continue;                    }                    if ($is_digit && (!$is_hex_digit) && ($c2 == '.')) {                        $count2++;                        if (!$is_float_digit) {                            $is_float_digit = true;                            continue;                        } else {                            $debugstr = __('Invalid Identifer') . ' @ ' . ($count1+1) . "\n"                                      . 'STR: ' . htmlspecialchars(PMA_substr($sql, $count1, $count2 - $count1));                            PMA_SQP_throwError($debugstr, $sql);                            return $sql_array;                        }                    }                    if ($is_digit && (!$is_hex_digit) && (($c2 == 'e') || ($c2 == 'E'))) {                        if (!$is_float_digit_exponent) {                            $is_float_digit_exponent = true;                            $is_float_digit          = true;                            $count2++;                            continue;                        } else {                            $is_digit                = false;                            $is_float_digit          = false;                        }                    }                    if (($is_hex_digit && PMA_STR_isHexDigit($c2)) || ($is_digit && PMA_STR_isDigit($c2))) {                        $count2++;                        continue;                    } else {                        $is_digit     = false;                        $is_hex_digit = false;                    }                    $count2++;                } // end while                $l    = $count2 - $count1;                $str  = PMA_substr($sql, $count1, $l);                $type = '';                if ($is_digit || $is_float_digit || $is_hex_digit) {                    $type     = 'digit';                    if ($is_float_digit) {                        $type .= '_float';                    } elseif ($is_hex_digit) {                        $type .= '_hex';                    } else {                        $type .= '_integer';                    }                } elseif ($is_user) {                    $type = 'punct_user';                } elseif ($is_sql_variable != false) {                    $type = 'alpha_variable';                } else {                    $type = 'alpha';                } // end if... else....                PMA_SQP_arrayAdd($sql_array, $type, $str, $arraysize, $count2);                continue;            }            // Checks for punct            if (PMA_strpos($allpunct_list, $c) !== false) {                while (($count2 < $len) && PMA_strpos($allpunct_list, PMA_substr($sql, $count2, 1)) !== false) {                    $count2++;                }                $l = $count2 - $count1;                if ($l == 1) {                    $punct_data = $c;                } else {                    $punct_data = PMA_substr($sql, $count1, $l);                }                // Special case, sometimes, althought two characters are                // adjectent directly, they ACTUALLY need to be seperate                /* DEBUG                echo '<pre>';                var_dump($l);                var_dump($punct_data);                echo '</pre>';                */                if ($l == 1) {                    $t_suffix         = '';                    switch ($punct_data) {                    case $punct_queryend:                        $t_suffix = '_queryend';                        break;                    case $punct_qualifier:                        $t_suffix = '_qualifier';                        $this_was_punct = true;                        break;                    case $punct_listsep:                        $this_was_listsep = true;                        $t_suffix = '_listsep';                        break;                    default:                        break;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct' . $t_suffix, $punct_data, $arraysize);                } elseif ($punct_data == $GLOBALS['sql_delimiter'] || isset($allpunct_list_pair[$punct_data])) {                    // Ok, we have one of the valid combined punct expressions                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                } else {                    // Bad luck, lets split it up more                    $first  = $punct_data[0];                    $first2 = $punct_data[0] . $punct_data[1];                    $last2  = $punct_data[$l - 2] . $punct_data[$l - 1];                    $last   = $punct_data[$l - 1];                    if (($first == ',') || ($first == ';') || ($first == '.') || ($first == '*')) {                        $count2     = $count1 + 1;                        $punct_data = $first;                    } elseif (($last2 == '/*') || (($last2 == '--') && ($count2 == $len || PMA_substr($sql, $count2, 1) <= ' '))) {                        $count2     -= 2;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif (($last == '-') || ($last == '+') || ($last == '!')) {                        $count2--;                        $punct_data = PMA_substr($sql, $count1, $count2 - $count1);                    } elseif ($last != '~') {                        /**                         * @todo for negation operator, split in 2 tokens ?                         * "select x&~1 from t"                         * becomes "select x & ~ 1 from t" ?                         */                        $debugstr =  __('Unknown Punctuation String') . ' @ ' . ($count1+1) . "\n"                                  . 'STR: ' . htmlspecialchars($punct_data);                        PMA_SQP_throwError($debugstr, $sql);                        return $sql_array;                    }                    PMA_SQP_arrayAdd($sql_array, 'punct', $punct_data, $arraysize);                    continue;                } // end if... elseif... else                continue;            }            // DEBUG            $count2++;            $debugstr = 'C1 C2 LEN: ' . $count1 . ' ' . $count2 . ' ' . $len .  "\n"                      . 'STR: ' . PMA_substr($sql, $count1, $count2 - $count1) . "\n";            PMA_SQP_bug($debugstr, $sql);            return $sql_array;        } // end while ($count2 < $len)        /*        echo '<pre>';        print_r($sql_array);        echo '</pre>';        */        if ($arraysize > 0) {            $t_next           = $sql_array[0]['type'];            $t_prev           = '';            $t_bef_prev       = '';            $t_cur            = '';            $d_next           = $sql_array[0]['data'];            $d_prev           = '';            $d_bef_prev       = '';            $d_cur            = '';            $d_next_upper     = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            $d_prev_upper     = '';            $d_bef_prev_upper = '';            $d_cur_upper      = '';        }        for ($i = 0; $i < $arraysize; $i++) {            $t_bef_prev       = $t_prev;            $t_prev           = $t_cur;            $t_cur            = $t_next;            $d_bef_prev       = $d_prev;            $d_prev           = $d_cur;            $d_cur            = $d_next;            $d_bef_prev_upper = $d_prev_upper;            $d_prev_upper     = $d_cur_upper;            $d_cur_upper      = $d_next_upper;            if (($i + 1) < $arraysize) {                $t_next = $sql_array[$i + 1]['type'];                $d_next = $sql_array[$i + 1]['data'];                $d_next_upper = $t_next == 'alpha' ? strtoupper($d_next) : $d_next;            } else {                $t_next       = '';                $d_next       = '';                $d_next_upper = '';            }            //DEBUG echo "[prev: <strong>".$d_prev."</strong> ".$t_prev."][cur: <strong>".$d_cur."</strong> ".$t_cur."][next: <strong>".$d_next."</strong> ".$t_next."]<br />";            if ($t_cur == 'alpha') {                $t_suffix     = '_identifier';                // for example: `thebit` bit(8) NOT NULL DEFAULT b'0'                if ($t_prev == 'alpha' && $d_prev == 'DEFAULT' && $d_cur == 'b' && $t_next == 'quote_single') {                    $t_suffix = '_bitfield_constant_introducer';                } elseif (($t_next == 'punct_qualifier') || ($t_prev == 'punct_qualifier')) {                    $t_suffix = '_identifier';                } elseif (($t_next == 'punct_bracket_open_round')                  && isset($PMA_SQPdata_function_name[$d_cur_upper])) {                    /**                     * @todo 2005-10-16: in the case of a CREATE TABLE containing                     * a TIMESTAMP, since TIMESTAMP() is also a function, it's                     * found here and the token is wrongly marked as alpha_functionName.                     * But we compensate for this when analysing for timestamp_not_null                     * later in this script.                     *                     * Same applies to CHAR vs. CHAR() function.                     */                    $t_suffix = '_functionName';                    /* There are functions which might be as well column types */                } elseif (isset($PMA_SQPdata_column_type[$d_cur_upper])) {                    $t_suffix = '_columnType';                    /**                     * Temporary fix for BUG #621357 and #2027720                     *                     * @todo FIX PROPERLY NEEDS OVERHAUL OF SQL TOKENIZER                     */                    if (($d_cur_upper == 'SET' || $d_cur_upper == 'BINARY') && $t_next != 'punct_bracket_open_round') {                        $t_suffix = '_reservedWord';                    }                    //END OF TEMPORARY FIX                    // CHARACTER is a synonym for CHAR, but can also be meant as                    // CHARACTER SET. In this case, we have a reserved word.                    if ($d_cur_upper == 'CHARACTER' && $d_next_upper == 'SET') {                        $t_suffix = '_reservedWord';                    }                    // experimental                    // current is a column type, so previous must not be                    // a reserved word but an identifier                    // CREATE TABLE SG_Persons (first varchar(64))                    //if ($sql_array[$i-1]['type'] =='alpha_reservedWord') {                    //    $sql_array[$i-1]['type'] = 'alpha_identifier';                    //}                } elseif (isset($PMA_SQPdata_reserved_word[$d_cur_upper])) {                    $t_suffix = '_reservedWord';                } elseif (isset($PMA_SQPdata_column_attrib[$d_cur_upper])) {                    $t_suffix = '_columnAttrib';                    // INNODB is a MySQL table type, but in "SHOW INNODB STATUS",                    // it should be regarded as a reserved word.                    if ($d_cur_upper == 'INNODB' && $d_prev_upper == 'SHOW' && $d_next_upper == 'STATUS') {                        $t_suffix = '_reservedWord';                    }                    if ($d_cur_upper == 'DEFAULT' && $d_next_upper == 'CHARACTER') {                        $t_suffix = '_reservedWord';                    }                    // Binary as character set                    if ($d_cur_upper == 'BINARY' && (                      ($d_bef_prev_upper == 'CHARACTER' && $d_prev_upper == 'SET')                      || ($d_bef_prev_upper == 'SET' && $d_prev_upper == '=')                      || ($d_bef_prev_upper == 'CHARSET' && $d_prev_upper == '=')                      || $d_prev_upper == 'CHARSET'                      ) && in_array($d_cur, $mysql_charsets)) {                        $t_suffix = '_charset';                    }                } elseif (in_array($d_cur, $mysql_charsets)                  || in_array($d_cur, $mysql_collations_flat)                  || ($d_cur{0} == '_' && in_array(substr($d_cur, 1), $mysql_charsets))) {                    $t_suffix = '_charset';                } else {                    // Do nothing                }                // check if present in the list of forbidden words                if ($t_suffix == '_reservedWord' && isset($PMA_SQPdata_forbidden_word[$d_cur_upper])) {                    $sql_array[$i]['forbidden'] = true;                } else {                    $sql_array[$i]['forbidden'] = false;                }                $sql_array[$i]['type'] .= $t_suffix;            }        } // end for        // Stores the size of the array inside the array, as count() is a slow        // operation.        $sql_array['len'] = $arraysize;        // DEBUG echo 'After parsing<pre>'; print_r($sql_array); echo '</pre>';        // Sends the data back        return $sql_array;    } // end of the "PMA_SQP_parse()" function    /**     * Checks for token types being what we want...     *     * @param string String of type that we have     * @param string String of type that we want     *     * @return boolean result of check     *     * @access private     */    function PMA_SQP_typeCheck($toCheck, $whatWeWant)    {        $typeSeperator = '_';        if (strcmp($whatWeWant, $toCheck) == 0) {            return true;        } else {            if (strpos($whatWeWant, $typeSeperator) === false) {                return strncmp($whatWeWant, $toCheck, strpos($toCheck, $typeSeperator)) == 0;            } else {                return false;            }        }    }    /**     * Analyzes SQL queries     *     * @param array   The SQL queries     *     * @return array   The analyzed SQL queries     *     * @access public     */    function PMA_SQP_analyze($arr)    {        if ($arr == array() || ! isset($arr['len'])) {            return array();        }        $result          = array();        $size            = $arr['len'];        $subresult       = array(            'querytype'      => '',            'select_expr_clause'=> '', // the whole stuff between SELECT and FROM , except DISTINCT            'position_of_first_select' => '', // the array index            'from_clause'=> '',            'group_by_clause'=> '',            'order_by_clause'=> '',            'having_clause'  => '',            'limit_clause'  => '',            'where_clause'   => '',            'where_clause_identifiers'   => array(),            'unsorted_query' => '',            'queryflags'     => array(),            'select_expr'    => array(),            'table_ref'      => array(),            'foreign_keys'   => array(),            'create_table_fields' => array()        );        $subresult_empty = $subresult;        $seek_queryend         = false;        $seen_end_of_table_ref = false;        $number_of_brackets_in_extract = 0;        $number_of_brackets_in_group_concat = 0;        $number_of_brackets = 0;        $in_subquery = false;        $seen_subquery = false;        $seen_from = false;        // for SELECT EXTRACT(YEAR_MONTH FROM CURDATE())        // we must not use CURDATE as a table_ref        // so we track whether we are in the EXTRACT()        $in_extract          = false;        // for GROUP_CONCAT(...)        $in_group_concat     = false;        /* Description of analyzer results         *         * db, table, column, alias         * ------------------------         *         * Inside the $subresult array, we create ['select_expr'] and ['table_ref'] arrays.         *         * The SELECT syntax (simplified) is         *         * SELECT         *    select_expression,...         *    [FROM [table_references]         *         *         * ['select_expr'] is filled with each expression, the key represents the         * expression position in the list (0-based) (so we don't lose track of         * multiple occurences of the same column).         *         * ['table_ref'] is filled with each table ref, same thing for the key.         *         * I create all sub-values empty, even if they are         * not present (for example no select_expression alias).         *         * There is a debug section at the end of loop #1, if you want to         * see the exact contents of select_expr and table_ref         *         * queryflags         * ----------         *         * In $subresult, array 'queryflags' is filled, according to what we         * find in the query.         *         * Currently, those are generated:         *         * ['queryflags']['need_confirm'] = 1; if the query needs confirmation         * ['queryflags']['select_from'] = 1;  if this is a real SELECT...FROM         * ['queryflags']['distinct'] = 1;     for a DISTINCT         * ['queryflags']['union'] = 1;        for a UNION         * ['queryflags']['join'] = 1;         for a JOIN         * ['queryflags']['offset'] = 1;       for the presence of OFFSET         * ['queryflags']['procedure'] = 1;    for the presence of PROCEDURE         *         * query clauses         * -------------         *         * The select is splitted in those clauses:         * ['select_expr_clause']         * ['from_clause']         * ['group_by_clause']         * ['order_by_clause']         * ['having_clause']         * ['limit_clause']         * ['where_clause']         *         * The identifiers of the WHERE clause are put into the array         * ['where_clause_identifier']         *         * For a SELECT, the whole query without the ORDER BY clause is put into         * ['unsorted_query']         *         * foreign keys         * ------------         * The CREATE TABLE may contain FOREIGN KEY clauses, so they get         * analyzed and ['foreign_keys'] is an array filled with         * the constraint name, the index list,         * the REFERENCES table name and REFERENCES index list,         * and ON UPDATE | ON DELETE clauses         *         * position_of_first_select         * ------------------------         *         * The array index of the first SELECT we find. Will be used to         * insert a SQL_CALC_FOUND_ROWS.         *         * create_table_fields         * -------------------         *         * Used to detect the DEFAULT CURRENT_TIMESTAMP and         * ON UPDATE CURRENT_TIMESTAMP clauses of the CREATE TABLE query.         * Also used to store the default value of the field.         * An array, each element is the identifier name.         * Note that for now, the timestamp_not_null element is created         * even for non-TIMESTAMP fields.         *         * Sub-elements: ['type'] which contains the column type         *               optional (currently they are never false but can be absent):         *               ['default_current_timestamp'] boolean         *               ['on_update_current_timestamp'] boolean         *               ['timestamp_not_null'] boolean         *         * section_before_limit, section_after_limit         * -----------------------------------------         *         * Marks the point of the query where we can insert a LIMIT clause;         * so the section_before_limit will contain the left part before         * a possible LIMIT clause         *         *         * End of description of analyzer results         */        // must be sorted        // TODO: current logic checks for only one word, so I put only the        // first word of the reserved expressions that end a table ref;        // maybe this is not ok (the first word might mean something else)        //        $words_ending_table_ref = array(        //            'FOR UPDATE',        //            'GROUP BY',        //            'HAVING',        //            'LIMIT',        //            'LOCK IN SHARE MODE',        //            'ORDER BY',        //            'PROCEDURE',        //            'UNION',        //            'WHERE'        //        );        $words_ending_table_ref = array(            'FOR' => 1,            'GROUP' => 1,            'HAVING' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'ORDER' => 1,            'PROCEDURE' => 1,            'UNION' => 1,            'WHERE' => 1        );        $words_ending_clauses = array(            'FOR' => 1,            'LIMIT' => 1,            'LOCK' => 1,            'PROCEDURE' => 1,            'UNION' => 1        );        $supported_query_types = array(            'SELECT' => 1,            /*            // Support for these additional query types will come later on.            'DELETE' => 1,            'INSERT' => 1,            'REPLACE' => 1,            'TRUNCATE' => 1,            'UPDATE' => 1,            'EXPLAIN' => 1,            'DESCRIBE' => 1,            'SHOW' => 1,            'CREATE' => 1,            'SET' => 1,            'ALTER' => 1            */        );        // loop #1 for each token: select_expr, table_ref for SELECT        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop1 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // High speed seek for locating the end of the current query            if ($seek_queryend == true) {                if ($arr[$i]['type'] == 'punct_queryend') {                    $seek_queryend = false;                } else {                    continue;                } // end if (type == punct_queryend)            } // end if ($seek_queryend)            /**             * Note: do not split if this is a punct_queryend for the first and only query             * @todo when we find a UNION, should we split in another subresult?             */            if ($arr[$i]['type'] == 'punct_queryend' && ($i + 1 != $size)) {                $result[]  = $subresult;                $subresult = $subresult_empty;                continue;            } // end if (type == punct_queryend)            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;                if ($in_extract) {                    $number_of_brackets_in_extract++;                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }                if ($in_extract) {                    $number_of_brackets_in_extract--;                    if ($number_of_brackets_in_extract == 0) {                       $in_extract = false;                    }                }                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                       $in_group_concat = false;                    }                }            }            if ($in_subquery) {                /**                 * skip the subquery to avoid setting                 * select_expr or table_ref with the contents                 * of this subquery; this is to avoid a bug when                 * trying to edit the results of                 * select * from child where not exists (select id from                 * parent where child.parent_id = parent.id);                 */                continue;            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_functionName') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='EXTRACT') {                    $in_extract = true;                    $number_of_brackets_in_extract = 0;                }                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            // ==============================================================            if ($arr[$i]['type'] == 'alpha_reservedWord'                //&& $arr[$i]['forbidden'] == false) {                ) {                // We don't know what type of query yet, so run this                if ($subresult['querytype'] == '') {                    $subresult['querytype'] = strtoupper($arr[$i]['data']);                } // end if (querytype was empty)                // Check if we support this type of query                if (!isset($supported_query_types[$subresult['querytype']])) {                    // Skip ahead to the next one if we don't                    $seek_queryend = true;                    continue;                } // end if (query not supported)                // upper once                $upper_data = strtoupper($arr[$i]['data']);                /**                 * @todo reset for each query?                 */                if ($upper_data == 'SELECT') {                    if ($number_of_brackets > 0) {                        $in_subquery = true;                        $seen_subquery = true;                        // this is a subquery so do not analyze inside it                        continue;                    }                    $seen_from = false;                    $previous_was_identifier = false;                    $current_select_expr = -1;                    $seen_end_of_table_ref = false;                } // end if (data == SELECT)                if ($upper_data =='FROM' && !$in_extract) {                    $current_table_ref = -1;                    $seen_from = true;                    $previous_was_identifier = false;                    $save_table_ref = true;                } // end if (data == FROM)                // here, do not 'continue' the loop, as we have more work for                // reserved words below            } // end if (type == alpha_reservedWord)            // ==============================            if ($arr[$i]['type'] == 'quote_backtick'             || $arr[$i]['type'] == 'quote_double'             || $arr[$i]['type'] == 'quote_single'             || $arr[$i]['type'] == 'alpha_identifier'             || ($arr[$i]['type'] == 'alpha_reservedWord'                && $arr[$i]['forbidden'] == false)) {                switch ($arr[$i]['type']) {                case 'alpha_identifier':                case 'alpha_reservedWord':                    /**                     * this is not a real reservedWord, because it's not                     * present in the list of forbidden words, for example                     * "storage" which can be used as an identifier                     *                     * @todo avoid the pretty printing in color in this case                     */                    $identifier = $arr[$i]['data'];                    break;                case 'quote_backtick':                case 'quote_double':                case 'quote_single':                    $identifier = PMA_unQuote($arr[$i]['data']);                    break;                } // end switch                if ($subresult['querytype'] == 'SELECT'                 && ! $in_group_concat                 && ! ($seen_subquery && $arr[$i - 1]['type'] == 'punct_bracket_close_round')) {                    if (!$seen_from) {                        if ($previous_was_identifier && isset($chain)) {                            // found alias for this select_expr, save it                            // but only if we got something in $chain                            // (for example, SELECT COUNT(*) AS cnt                            // puts nothing in $chain, so we avoid                            // setting the alias)                            $alias_for_select_expr = $identifier;                        } else {                            $chain[] = $identifier;                            $previous_was_identifier = true;                        } // end if !$previous_was_identifier                    } else {                        // ($seen_from)                        if ($save_table_ref && !$seen_end_of_table_ref) {                            if ($previous_was_identifier) {                                // found alias for table ref                                // save it for later                                $alias_for_table_ref = $identifier;                            } else {                                $chain[] = $identifier;                                $previous_was_identifier = true;                            } // end if ($previous_was_identifier)                        } // end if ($save_table_ref &&!$seen_end_of_table_ref)                    } // end if (!$seen_from)                } // end if (querytype SELECT)            } // end if (quote_backtick or double quote or alpha_identifier)            // ===================================            if ($arr[$i]['type'] == 'punct_qualifier') {                // to be able to detect an identifier following another                $previous_was_identifier = false;                continue;            } // end if (punct_qualifier)            /**             * @todo check if 3 identifiers following one another -> error             */            //    s a v e    a    s e l e c t    e x p r            // finding a list separator or FROM            // means that we must save the current chain of identifiers            // into a select expression            // for now, we only save a select expression if it contains            // at least one identifier, as we are interested in checking            // the columns and table names, so in "select * from persons",            // the "*" is not saved            if (isset($chain) && !$seen_end_of_table_ref             && ((!$seen_from && $arr[$i]['type'] == 'punct_listsep')              || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data == 'FROM'))) {                $size_chain = count($chain);                $current_select_expr++;                $subresult['select_expr'][$current_select_expr] = array(                  'expr' => '',                  'alias' => '',                  'db'   => '',                  'table_name' => '',                  'table_true_name' => '',                  'column' => ''                 );                if (isset($alias_for_select_expr) && strlen($alias_for_select_expr)) {                    // we had found an alias for this select expression                    $subresult['select_expr'][$current_select_expr]['alias'] = $alias_for_select_expr;                    unset($alias_for_select_expr);                }                // there is at least a column                $subresult['select_expr'][$current_select_expr]['column'] = $chain[$size_chain - 1];                $subresult['select_expr'][$current_select_expr]['expr'] = $chain[$size_chain - 1];                // maybe a table                if ($size_chain > 1) {                    $subresult['select_expr'][$current_select_expr]['table_name'] = $chain[$size_chain - 2];                    // we assume for now that this is also the true name                    $subresult['select_expr'][$current_select_expr]['table_true_name'] = $chain[$size_chain - 2];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['table_name']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 1)                // maybe a db                if ($size_chain > 2) {                    $subresult['select_expr'][$current_select_expr]['db'] = $chain[$size_chain - 3];                    $subresult['select_expr'][$current_select_expr]['expr']                        = $subresult['select_expr'][$current_select_expr]['db']                        . '.' . $subresult['select_expr'][$current_select_expr]['expr'];                } // end if ($size_chain > 2)                unset($chain);                /**                 * @todo explain this:                 */                if (($arr[$i]['type'] == 'alpha_reservedWord')                 && ($upper_data != 'FROM')) {                    $previous_was_identifier = true;                }            } // end if (save a select expr)            //======================================            //    s a v e    a    t a b l e    r e f            //======================================            // maybe we just saw the end of table refs            // but the last table ref has to be saved            // or we are at the last token            // or we just got a reserved word            /**             * @todo there could be another query after this one             */            if (isset($chain) && $seen_from && $save_table_ref             && ($arr[$i]['type'] == 'punct_listsep'               || ($arr[$i]['type'] == 'alpha_reservedWord' && $upper_data!="AS")               || $seen_end_of_table_ref               || $i==$size-1)) {                $size_chain = count($chain);                $current_table_ref++;                $subresult['table_ref'][$current_table_ref] = array(                  'expr'            => '',                  'db'              => '',                  'table_name'      => '',                  'table_alias'     => '',                  'table_true_name' => ''                 );                if (isset($alias_for_table_ref) && strlen($alias_for_table_ref)) {                    $subresult['table_ref'][$current_table_ref]['table_alias'] = $alias_for_table_ref;                    unset($alias_for_table_ref);                }                $subresult['table_ref'][$current_table_ref]['table_name'] = $chain[$size_chain - 1];                // we assume for now that this is also the true name                $subresult['table_ref'][$current_table_ref]['table_true_name'] = $chain[$size_chain - 1];                $subresult['table_ref'][$current_table_ref]['expr']                    = $subresult['table_ref'][$current_table_ref]['table_name'];                // maybe a db                if ($size_chain > 1) {                    $subresult['table_ref'][$current_table_ref]['db'] = $chain[$size_chain - 2];                    $subresult['table_ref'][$current_table_ref]['expr']                        = $subresult['table_ref'][$current_table_ref]['db']                        . '.' . $subresult['table_ref'][$current_table_ref]['expr'];                } // end if ($size_chain > 1)                // add the table alias into the whole expression                $subresult['table_ref'][$current_table_ref]['expr']                 .= ' ' . $subresult['table_ref'][$current_table_ref]['table_alias'];                unset($chain);                $previous_was_identifier = true;                //continue;            } // end if (save a table ref)            // when we have found all table refs,            // for each table_ref alias, put the true name of the table            // in the corresponding select expressions            if (isset($current_table_ref) && ($seen_end_of_table_ref || $i == $size-1) && $subresult != $subresult_empty) {                for ($tr=0; $tr <= $current_table_ref; $tr++) {                    $alias = $subresult['table_ref'][$tr]['table_alias'];                    $truename = $subresult['table_ref'][$tr]['table_true_name'];                    for ($se=0; $se <= $current_select_expr; $se++) {                        if (isset($alias)                            && strlen($alias)                            && $subresult['select_expr'][$se]['table_true_name'] == $alias                        ) {                            $subresult['select_expr'][$se]['table_true_name'] = $truename;                        } // end if (found the alias)                    } // end for (select expressions)                } // end for (table refs)            } // end if (set the true names)            // e n d i n g    l o o p  #1            // set the $previous_was_identifier to false if the current            // token is not an identifier            if (($arr[$i]['type'] != 'alpha_identifier')             && ($arr[$i]['type'] != 'quote_double')             && ($arr[$i]['type'] != 'quote_single')             && ($arr[$i]['type'] != 'quote_backtick')) {                $previous_was_identifier = false;            } // end if            // however, if we are on AS, we must keep the $previous_was_identifier            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data == 'AS')) {                $previous_was_identifier = true;            }            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='ON' || $upper_data =='USING')) {                $save_table_ref = false;            } // end if (data == ON)            if (($arr[$i]['type'] == 'alpha_reservedWord')             && ($upper_data =='JOIN' || $upper_data =='FROM')) {                $save_table_ref = true;            } // end if (data == JOIN)            /**             * no need to check the end of table ref if we already did             *             * @todo maybe add "&& $seen_from"             */            if (!$seen_end_of_table_ref) {                // if this is the last token, it implies that we have                // seen the end of table references                // Check for the end of table references                //                // Note: if we are analyzing a GROUP_CONCAT clause,                // we might find a word that seems to indicate that                // we have found the end of table refs (like ORDER)                // but it's a modifier of the GROUP_CONCAT so                // it's not the real end of table refs                if (($i == $size-1)                 || ($arr[$i]['type'] == 'alpha_reservedWord'                 && !$in_group_concat                 && isset($words_ending_table_ref[$upper_data]))) {                    $seen_end_of_table_ref = true;                    // to be able to save the last table ref, but do not                    // set it true if we found a word like "ON" that has                    // already set it to false                    if (isset($save_table_ref) && $save_table_ref != false) {                        $save_table_ref = true;                    } //end if                } // end if (check for end of table ref)            } //end if (!$seen_end_of_table_ref)            if ($seen_end_of_table_ref) {                $save_table_ref = false;            } // end if        } // end for $i (loop #1)        //DEBUG        /*          if (isset($current_select_expr)) {           for ($trace=0; $trace<=$current_select_expr; $trace++) {               echo "<br />";               reset ($subresult['select_expr'][$trace]);               while (list ($key, $val) = each ($subresult['select_expr'][$trace]))                   echo "sel expr $trace $key => $val<br />\n";               }          }          if (isset($current_table_ref)) {           echo "current_table_ref = " . $current_table_ref . "<br>";           for ($trace=0; $trace<=$current_table_ref; $trace++) {               echo "<br />";               reset ($subresult['table_ref'][$trace]);               while (list ($key, $val) = each ($subresult['table_ref'][$trace]))               echo "table ref $trace $key => $val<br />\n";               }          }        */        // -------------------------------------------------------        // loop #2: - queryflags        //          - querytype (for queries != 'SELECT')        //          - section_before_limit, section_after_limit        //        // we will also need this queryflag in loop 2        // so set it here        if (isset($current_table_ref) && $current_table_ref > -1) {            $subresult['queryflags']['select_from'] = 1;        }        $section_before_limit = '';        $section_after_limit = ''; // truly the section after the limit clause        $seen_reserved_word = false;        $seen_group = false;        $seen_order = false;        $seen_order_by = false;        $in_group_by = false; // true when we are inside the GROUP BY clause        $in_order_by = false; // true when we are inside the ORDER BY clause        $in_having = false; // true when we are inside the HAVING clause        $in_select_expr = false; // true when we are inside the select expr clause        $in_where = false; // true when we are inside the WHERE clause        $seen_limit = false; // true if we have seen a LIMIT clause        $in_limit = false; // true when we are inside the LIMIT clause        $after_limit = false; // true when we are after the LIMIT clause        $in_from = false; // true when we are in the FROM clause        $in_group_concat = false;        $first_reserved_word = '';        $current_identifier = '';        $unsorted_query = $arr['raw']; // in case there is no ORDER BY        $number_of_brackets = 0;        $in_subquery = false;        for ($i = 0; $i < $size; $i++) {            //DEBUG echo "Loop2 <strong>"  . $arr[$i]['data'] . "</strong> (" . $arr[$i]['type'] . ")<br />";            // need_confirm            //            // check for reserved words that will have to generate            // a confirmation request later in sql.php            // the cases are:            //   DROP TABLE            //   DROP DATABASE            //   ALTER TABLE... DROP            //   DELETE FROM...            //            // this code is not used for confirmations coming from functions.js            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $number_of_brackets++;            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $number_of_brackets--;                if ($number_of_brackets == 0) {                    $in_subquery = false;                }            }            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'SELECT' && $number_of_brackets > 0) {                    $in_subquery = true;                }                if (!$seen_reserved_word) {                    $first_reserved_word = $upper_data;                    $subresult['querytype'] = $upper_data;                    $seen_reserved_word = true;                    // if the first reserved word is DROP or DELETE,                    // we know this is a query that needs to be confirmed                    if ($first_reserved_word=='DROP'                     || $first_reserved_word == 'DELETE'                     || $first_reserved_word == 'TRUNCATE') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                    if ($first_reserved_word=='SELECT') {                        $position_of_first_select = $i;                    }                } else {                    if ($upper_data == 'DROP' && $first_reserved_word == 'ALTER') {                        $subresult['queryflags']['need_confirm'] = 1;                    }                }                if ($upper_data == 'LIMIT' && ! $in_subquery) {                    $section_before_limit = substr($arr['raw'], 0, $arr[$i]['pos'] - 5);                    $in_limit = true;                    $seen_limit = true;                    $limit_clause = '';                    $in_order_by = false; // @todo maybe others to set false                }                if ($upper_data == 'PROCEDURE') {                    $subresult['queryflags']['procedure'] = 1;                    $in_limit = false;                    $after_limit = true;                }                /**                 * @todo set also to false if we find FOR UPDATE or LOCK IN SHARE MODE                 */                if ($upper_data == 'SELECT') {                    $in_select_expr = true;                    $select_expr_clause = '';                }                if ($upper_data == 'DISTINCT' && !$in_group_concat) {                    $subresult['queryflags']['distinct'] = 1;                }                if ($upper_data == 'UNION') {                    $subresult['queryflags']['union'] = 1;                }                if ($upper_data == 'JOIN') {                    $subresult['queryflags']['join'] = 1;                }                if ($upper_data == 'OFFSET') {                    $subresult['queryflags']['offset'] = 1;                }                // if this is a real SELECT...FROM                if ($upper_data == 'FROM' && isset($subresult['queryflags']['select_from']) && $subresult['queryflags']['select_from'] == 1) {                    $in_from = true;                    $from_clause = '';                    $in_select_expr = false;                }                // (we could have less resetting of variables to false                // if we trust that the query respects the standard                // MySQL order for clauses)                // we use $seen_group and $seen_order because we are looking                // for the BY                if ($upper_data == 'GROUP') {                    $seen_group = true;                    $seen_order = false;                    $in_having = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'ORDER' && !$in_group_concat) {                    $seen_order = true;                    $seen_group = false;                    $in_having = false;                    $in_group_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'HAVING') {                    $in_having = true;                    $having_clause = '';                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_where = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'WHERE') {                    $in_where = true;                    $where_clause = '';                    $where_clause_identifiers = array();                    $seen_group = false;                    $seen_order = false;                    $in_group_by = false;                    $in_order_by = false;                    $in_having = false;                    $in_select_expr = false;                    $in_from = false;                }                if ($upper_data == 'BY') {                    if ($seen_group) {                        $in_group_by = true;                        $group_by_clause = '';                    }                    if ($seen_order) {                        $seen_order_by = true;                        // Here we assume that the ORDER BY keywords took                        // exactly 8 characters.                        // We use PMA_substr() to be charset-safe; otherwise                        // if the table name contains accents, the unsorted                        // query would be missing some characters.                        $unsorted_query = PMA_substr($arr['raw'], 0, $arr[$i]['pos'] - 8);                        $in_order_by = true;                        $order_by_clause = '';                    }                }                // if we find one of the words that could end the clause                if (isset($words_ending_clauses[$upper_data])) {                    $in_group_by = false;                    $in_order_by = false;                    $in_having   = false;                    $in_where    = false;                    $in_select_expr = false;                    $in_from = false;                }            } // endif (reservedWord)            // do not add a space after a function name            /**             * @todo can we combine loop 2 and loop 1? some code is repeated here...             */            $sep = ' ';            if ($arr[$i]['type'] == 'alpha_functionName') {                $sep='';                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data =='GROUP_CONCAT') {                    $in_group_concat = true;                    $number_of_brackets_in_group_concat = 0;                }            }            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat++;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                if ($in_group_concat) {                    $number_of_brackets_in_group_concat--;                    if ($number_of_brackets_in_group_concat == 0) {                        $in_group_concat = false;                    }                }            }            // do not add a space after an identifier if followed by a dot            if ($arr[$i]['type'] == 'alpha_identifier' && $i < $size - 1 && $arr[$i + 1]['data'] == '.') {                $sep = '';            }            // do not add a space after a dot if followed by an identifier            if ($arr[$i]['data'] == '.' && $i < $size - 1 && $arr[$i + 1]['type'] == 'alpha_identifier') {                $sep = '';            }            if ($in_select_expr && $upper_data != 'SELECT' && $upper_data != 'DISTINCT') {                $select_expr_clause .= $arr[$i]['data'] . $sep;            }            if ($in_from && $upper_data != 'FROM') {                $from_clause .= $arr[$i]['data'] . $sep;            }            if ($in_group_by && $upper_data != 'GROUP' && $upper_data != 'BY') {                $group_by_clause .= $arr[$i]['data'] . $sep;            }            if ($in_order_by && $upper_data != 'ORDER' && $upper_data != 'BY') {                // add a space only before ASC or DESC                // not around the dot between dbname and tablename                if ($arr[$i]['type'] == 'alpha_reservedWord') {                    $order_by_clause .= $sep;                }                $order_by_clause .= $arr[$i]['data'];            }            if ($in_having && $upper_data != 'HAVING') {                $having_clause .= $arr[$i]['data'] . $sep;            }            if ($in_where && $upper_data != 'WHERE') {                $where_clause .= $arr[$i]['data'] . $sep;                if (($arr[$i]['type'] == 'quote_backtick')                 || ($arr[$i]['type'] == 'alpha_identifier')) {                    $where_clause_identifiers[] = $arr[$i]['data'];                }            }            // to grab the rest of the query after the ORDER BY clause            if (isset($subresult['queryflags']['select_from'])             && $subresult['queryflags']['select_from'] == 1             && ! $in_order_by             && $seen_order_by             && $upper_data != 'BY') {                $unsorted_query .= $arr[$i]['data'];                if ($arr[$i]['type'] != 'punct_bracket_open_round'                 && $arr[$i]['type'] != 'punct_bracket_close_round'                 && $arr[$i]['type'] != 'punct') {                    $unsorted_query .= $sep;                }            }            if ($in_limit) {                if ($upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }                $limit_clause .= $arr[$i]['data'];                if ($upper_data == 'LIMIT' || $upper_data == 'OFFSET') {                    $limit_clause .= $sep;                }            }            if ($after_limit && $seen_limit) {                $section_after_limit .= $arr[$i]['data'] . $sep;            }            // clear $upper_data for next iteration            $upper_data='';        } // end for $i (loop #2)        if (empty($section_before_limit)) {            $section_before_limit = $arr['raw'];        }        // -----------------------------------------------------        // loop #3: foreign keys and MySQL 4.1.2+ TIMESTAMP options        // (for now, check only the first query)        // (for now, identifiers are assumed to be backquoted)        // If we find that we are dealing with a CREATE TABLE query,        // we look for the next punct_bracket_open_round, which        // introduces the fields list. Then, when we find a        // quote_backtick, it must be a field, so we put it into        // the create_table_fields array. Even if this field is        // not a timestamp, it will be useful when logic has been        // added for complete field attributes analysis.        $seen_foreign = false;        $seen_references = false;        $seen_constraint = false;        $foreign_key_number = -1;        $seen_create_table = false;        $seen_create = false;        $seen_alter = false;        $in_create_table_fields = false;        $brackets_level = 0;        $in_timestamp_options = false;        $seen_default = false;        for ($i = 0; $i < $size; $i++) {        // DEBUG echo "Loop 3 <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            if ($arr[$i]['type'] == 'alpha_reservedWord') {                $upper_data = strtoupper($arr[$i]['data']);                if ($upper_data == 'NOT' && $in_timestamp_options) {                    $create_table_fields[$current_identifier]['timestamp_not_null'] = true;                }                if ($upper_data == 'CREATE') {                    $seen_create = true;                }                if ($upper_data == 'ALTER') {                    $seen_alter = true;                }                if ($upper_data == 'TABLE' && $seen_create) {                    $seen_create_table = true;                    $create_table_fields = array();                }                if ($upper_data == 'CURRENT_TIMESTAMP') {                    if ($in_timestamp_options) {                        if ($seen_default) {                            $create_table_fields[$current_identifier]['default_current_timestamp'] = true;                        }                    }                }                if ($upper_data == 'CONSTRAINT') {                    $foreign_key_number++;                    $seen_foreign = false;                    $seen_references = false;                    $seen_constraint = true;                }                if ($upper_data == 'FOREIGN') {                    $seen_foreign = true;                    $seen_references = false;                    $seen_constraint = false;                }                if ($upper_data == 'REFERENCES') {                    $seen_foreign = false;                    $seen_references = true;                    $seen_constraint = false;                }                // Cases covered:                // [ON DELETE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // [ON UPDATE {CASCADE | SET NULL | NO ACTION | RESTRICT}]                // but we set ['on_delete'] or ['on_cascade'] to                // CASCADE | SET_NULL | NO_ACTION | RESTRICT                // ON UPDATE CURRENT_TIMESTAMP                if ($upper_data == 'ON') {                    if (isset($arr[$i+1]) && $arr[$i+1]['type'] == 'alpha_reservedWord') {                        $second_upper_data = strtoupper($arr[$i+1]['data']);                        if ($second_upper_data == 'DELETE') {                            $clause = 'on_delete';                        }                        if ($second_upper_data == 'UPDATE') {                            $clause = 'on_update';                        }                        if (isset($clause)                        && ($arr[$i+2]['type'] == 'alpha_reservedWord'                // ugly workaround because currently, NO is not                // in the list of reserved words in sqlparser.data                // (we got a bug report about not being able to use                // 'no' as an identifier)                           || ($arr[$i+2]['type'] == 'alpha_identifier'                              && strtoupper($arr[$i+2]['data'])=='NO'))                          ) {                            $third_upper_data = strtoupper($arr[$i+2]['data']);                            if ($third_upper_data == 'CASCADE'                            || $third_upper_data == 'RESTRICT') {                                $value = $third_upper_data;                            } elseif ($third_upper_data == 'SET'                              || $third_upper_data == 'NO') {                                if ($arr[$i+3]['type'] == 'alpha_reservedWord') {                                    $value = $third_upper_data . '_' . strtoupper($arr[$i+3]['data']);                                }                            } elseif ($third_upper_data == 'CURRENT_TIMESTAMP') {                                if ($clause == 'on_update'                                && $in_timestamp_options) {                                    $create_table_fields[$current_identifier]['on_update_current_timestamp'] = true;                                    $seen_default = false;                                }                            } else {                                $value = '';                            }                            if (!empty($value)) {                                $foreign[$foreign_key_number][$clause] = $value;                            }                            unset($clause);                        } // endif (isset($clause))                    }                }            } // end of reserved words analysis            if ($arr[$i]['type'] == 'punct_bracket_open_round') {                $brackets_level++;                if ($seen_create_table && $brackets_level == 1) {                    $in_create_table_fields = true;                }            }            if ($arr[$i]['type'] == 'punct_bracket_close_round') {                $brackets_level--;                if ($seen_references) {                    $seen_references = false;                }                if ($seen_create_table && $brackets_level == 0) {                    $in_create_table_fields = false;                }            }            if (($arr[$i]['type'] == 'alpha_columnAttrib')) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields) {                    if ($upper_data == 'DEFAULT') {                        $seen_default = true;                        $create_table_fields[$current_identifier]['default_value'] = $arr[$i + 1]['data'];                    }                }            }            /**             * @see @todo 2005-10-16 note: the "or" part here is a workaround for a bug             */            if (($arr[$i]['type'] == 'alpha_columnType') || ($arr[$i]['type'] == 'alpha_functionName' && $seen_create_table)) {                $upper_data = strtoupper($arr[$i]['data']);                if ($seen_create_table && $in_create_table_fields && isset($current_identifier)) {                    $create_table_fields[$current_identifier]['type'] = $upper_data;                    if ($upper_data == 'TIMESTAMP') {                        $arr[$i]['type'] = 'alpha_columnType';                        $in_timestamp_options = true;                    } else {                        $in_timestamp_options = false;                        if ($upper_data == 'CHAR') {                            $arr[$i]['type'] = 'alpha_columnType';                        }                    }                }            }            if ($arr[$i]['type'] == 'quote_backtick' || $arr[$i]['type'] == 'alpha_identifier') {                if ($arr[$i]['type'] == 'quote_backtick') {                    // remove backquotes                    $identifier = PMA_unQuote($arr[$i]['data']);                } else {                    $identifier = $arr[$i]['data'];                }                if ($seen_create_table && $in_create_table_fields) {                    $current_identifier = $identifier;                    // we set this one even for non TIMESTAMP type                    $create_table_fields[$current_identifier]['timestamp_not_null'] = false;                }                if ($seen_constraint) {                    $foreign[$foreign_key_number]['constraint'] = $identifier;                }                if ($seen_foreign && $brackets_level > 0) {                    $foreign[$foreign_key_number]['index_list'][] = $identifier;                }                if ($seen_references) {                    if ($seen_alter && $brackets_level > 0) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                        // here, the first bracket level corresponds to the                        // bracket of CREATE TABLE                        // so if we are on level 2, it must be the index list                        // of the foreign key REFERENCES                    } elseif ($brackets_level > 1) {                        $foreign[$foreign_key_number]['ref_index_list'][] = $identifier;                    } elseif ($arr[$i+1]['type'] == 'punct_qualifier') {                        // identifier is `db`.`table`                        // the first pass will pick the db name                        // the next pass will pick the table name                        $foreign[$foreign_key_number]['ref_db_name'] = $identifier;                    } else {                        // identifier is `table`                        $foreign[$foreign_key_number]['ref_table_name'] = $identifier;                    }                }            }        } // end for $i (loop #3)        // Fill the $subresult array        if (isset($create_table_fields)) {            $subresult['create_table_fields'] = $create_table_fields;        }        if (isset($foreign)) {            $subresult['foreign_keys'] = $foreign;        }        if (isset($select_expr_clause)) {            $subresult['select_expr_clause'] = $select_expr_clause;        }        if (isset($from_clause)) {            $subresult['from_clause'] = $from_clause;        }        if (isset($group_by_clause)) {            $subresult['group_by_clause'] = $group_by_clause;        }        if (isset($order_by_clause)) {            $subresult['order_by_clause'] = $order_by_clause;        }        if (isset($having_clause)) {            $subresult['having_clause'] = $having_clause;        }        if (isset($limit_clause)) {            $subresult['limit_clause'] = $limit_clause;        }        if (isset($where_clause)) {            $subresult['where_clause'] = $where_clause;        }        if (isset($unsorted_query) && !empty($unsorted_query)) {            $subresult['unsorted_query'] = $unsorted_query;        }        if (isset($where_clause_identifiers)) {            $subresult['where_clause_identifiers'] = $where_clause_identifiers;        }        if (isset($position_of_first_select)) {            $subresult['position_of_first_select'] = $position_of_first_select;            $subresult['section_before_limit'] = $section_before_limit;            $subresult['section_after_limit'] = $section_after_limit;        }        // They are naughty and didn't have a trailing semi-colon,        // then still handle it properly        if ($subresult['querytype'] != '') {            $result[] = $subresult;        }        return $result;    } // end of the "PMA_SQP_analyze()" function    /**     * Colorizes SQL queries html formatted     *     * @todo check why adding a "\n" after the </span> would cause extra blanks     * to be displayed: SELECT p . person_name     * @param array   The SQL queries html formatted     *     * @return array   The colorized SQL queries     *     * @access public     */    function PMA_SQP_formatHtml_colorize($arr)    {        $i         = PMA_strpos($arr['type'], '_');        $class     = '';        if ($i > 0) {            $class = 'syntax_' . PMA_substr($arr['type'], 0, $i) . ' ';        }        $class     .= 'syntax_' . $arr['type'];        return '<span class="' . $class . '">' . htmlspecialchars($arr['data']) . '</span>';    } // end of the "PMA_SQP_formatHtml_colorize()" function    /**     * Formats SQL queries to html     *     * @param array   The SQL queries     * @param string  mode     * @param integer starting token     * @param integer number of tokens to format, -1 = all     *     * @return string  The formatted SQL queries     *     * @access public     */    function PMA_SQP_formatHtml($arr, $mode='color', $start_token=0,        $number_of_tokens=-1)    {        global $PMA_SQPdata_operators_docs, $PMA_SQPdata_functions_docs;        //DEBUG echo 'in Format<pre>'; print_r($arr); echo '</pre>';        // then check for an array        if (! is_array($arr)) {            return htmlspecialchars($arr);        }        // first check for the SQL parser having hit an error        if (PMA_SQP_isError()) {            return htmlspecialchars($arr['raw']);        }        // else do it properly        switch ($mode) {        case 'color':            $str                                = '<span class="syntax">';            $html_line_break                    = '<br />';            $docu                               = true;            break;        case 'query_only':            $str                                = '';            $html_line_break                    = "\n";            $docu                               = false;            break;        case 'text':            $str                                = '';            $html_line_break                    = '<br />';            $docu                               = true;            break;        } // end switch        // inner_sql is a span that exists for all cases, except query_only        // of $cfg['SQP']['fmtType'] to make possible a replacement        // for inline editing        if ($mode!='query_only') {            $str .= '<span class="inner_sql">';        }        $close_docu_link = false;        $indent                                     = 0;        $bracketlevel                               = 0;        $functionlevel                              = 0;        $infunction                                 = false;        $space_punct_listsep                        = ' ';        $space_punct_listsep_function_name          = ' ';        // $space_alpha_reserved_word = '<br />'."\n";        $space_alpha_reserved_word                  = ' ';        $keywords_with_brackets_1before            = array(            'INDEX' => 1,            'KEY' => 1,            'ON' => 1,            'USING' => 1        );        $keywords_with_brackets_2before            = array(            'IGNORE' => 1,            'INDEX' => 1,            'INTO' => 1,            'KEY' => 1,            'PRIMARY' => 1,            'PROCEDURE' => 1,            'REFERENCES' => 1,            'UNIQUE' => 1,            'USE' => 1        );        // These reserved words do NOT get a newline placed near them.        $keywords_no_newline               = array(            'AS' => 1,            'ASC' => 1,            'DESC' => 1,            'DISTINCT' => 1,            'DUPLICATE' => 1,            'HOUR' => 1,            'INTERVAL' => 1,            'IS' => 1,            'LIKE' => 1,            'NOT' => 1,            'NULL' => 1,            'ON' => 1,            'REGEXP' => 1        );        // These reserved words introduce a privilege list        $keywords_priv_list                = array(            'GRANT' => 1,            'REVOKE' => 1        );        if ($number_of_tokens == -1) {            $number_of_tokens = $arr['len'];        }        $typearr   = array();        if ($number_of_tokens >= 0) {            $typearr[0] = '';            $typearr[1] = '';            $typearr[2] = '';            $typearr[3] = $arr[$start_token]['type'];        }        $in_priv_list = false;        for ($i = $start_token; $i < $number_of_tokens; $i++) {            // DEBUG echo "Loop format <strong>" . $arr[$i]['data'] . "</strong> " . $arr[$i]['type'] . "<br />";            $before = '';            $after  = '';            // array_shift($typearr);            /*            0 prev2            1 prev            2 current            3 next            */            if (($i + 1) < $number_of_tokens) {                $typearr[4] = $arr[$i + 1]['type'];            } else {                $typearr[4] = '';            }            for ($j=0; $j<4; $j++) {                $typearr[$j] = $typearr[$j + 1];            }            switch ($typearr[2]) {            case 'alpha_bitfield_constant_introducer':                $before     = ' ';                $after      = '';                break;            case 'white_newline':                $before     = '';                break;            case 'punct_bracket_open_round':                $bracketlevel++;                $infunction = false;                // Make sure this array is sorted!                if (($typearr[1] == 'alpha_functionName') || ($typearr[1] == 'alpha_columnType') || ($typearr[1] == 'punct')                    || ($typearr[3] == 'digit_integer') || ($typearr[3] == 'digit_hex') || ($typearr[3] == 'digit_float')                    || (($typearr[0] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_2before[strtoupper($arr[$i - 2]['data'])]))                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_with_brackets_1before[strtoupper($arr[$i - 1]['data'])]))                    ) {                    $functionlevel++;                    $infunction = true;                    $after      .= ' ';                } else {                    $indent++;                    $after      .= ($mode != 'query_only' ? '<div class="syntax_indent' . $indent . '">' : ' ');                }                break;            case 'alpha_identifier':                if (($typearr[1] == 'punct_qualifier') || ($typearr[3] == 'punct_qualifier')) {                    $after      = '';                    $before     = '';                }                // for example SELECT 1 somealias                if ($typearr[1] == 'digit_integer') {                    $before     = ' ';                }                if (($typearr[3] == 'alpha_columnType') || ($typearr[3] == 'alpha_identifier')) {                    $after      .= ' ';                }                break;            case 'punct_user':            case 'punct_qualifier':                $before         = '';                $after          = '';                break;            case 'punct_listsep':                if ($infunction == true) {                    $after      .= $space_punct_listsep_function_name;                } else {                    $after      .= $space_punct_listsep;                }                break;            case 'punct_queryend':                if (($typearr[3] != 'comment_mysql') && ($typearr[3] != 'comment_ansi') && $typearr[3] != 'comment_c') {                    $after     .= $html_line_break;                    $after     .= $html_line_break;                }                $space_punct_listsep               = ' ';                $space_punct_listsep_function_name = ' ';                $space_alpha_reserved_word         = ' ';                $in_priv_list                      = false;                break;            case 'comment_mysql':            case 'comment_ansi':                $after         .= $html_line_break;                break;            case 'punct':                $before         .= ' ';                if ($docu && isset($PMA_SQPdata_operators_docs[$arr[$i]['data']]) &&                        ($arr[$i]['data'] != '*' || in_array($arr[$i]['type'], array('digit_integer','digit_float','digit_hex')))) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['link'],                        false,                        $PMA_SQPdata_operators_docs[$arr[$i]['data']]['anchor'],                        true);                    $after .= '</a>';                }                // workaround for                // select * from mytable limit 0,-1                // (a side effect of this workaround is that                // select 20 - 9                // becomes                // select 20 -9                // )                if ($typearr[3] != 'digit_integer') {                    $after        .= ' ';                }                break;            case 'punct_bracket_close_round':                // only close bracket level when it was opened before                if ($bracketlevel > 0) {                    $bracketlevel--;                    if ($infunction == true) {                        $functionlevel--;                        $after     .= ' ';                        $before    .= ' ';                    } else {                        $indent--;                        $before    .= ($mode != 'query_only' ? '</div>' : ' ');                    }                    $infunction    = ($functionlevel > 0) ? true : false;                }                break;            case 'alpha_columnType':                if ($docu) {                    switch ($arr[$i]['data']) {                    case 'tinyint':                    case 'smallint':                    case 'mediumint':                    case 'int':                    case 'bigint':                    case 'decimal':                    case 'float':                    case 'double':                    case 'real':                    case 'bit':                    case 'boolean':                    case 'serial':                        $before .= PMA_showMySQLDocu('data-types', 'numeric-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'date':                    case 'datetime':                    case 'timestamp':                    case 'time':                    case 'year':                        $before .= PMA_showMySQLDocu('data-types', 'date-and-time-types', false, '', true);                        $after = '</a>' . $after;                        break;                    case 'char':                    case 'varchar':                    case 'tinytext':                    case 'text':                    case 'mediumtext':                    case 'longtext':                    case 'binary':                    case 'varbinary':                    case 'tinyblob':                    case 'mediumblob':                    case 'blob':                    case 'longblob':                    case 'enum':                    case 'set':                        $before .= PMA_showMySQLDocu('data-types', 'string-types', false, '', true);                        $after = '</a>' . $after;                        break;                    }                }                if ($typearr[3] == 'alpha_columnAttrib') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnType') {                    $before    .= ' ';                }                break;            case 'alpha_columnAttrib':                // ALTER TABLE tbl_name AUTO_INCREMENT = 1                // COLLATE LATIN1_GENERAL_CI DEFAULT                if ($typearr[1] == 'alpha_identifier' || $typearr[1] == 'alpha_charset') {                    $before .= ' ';                }                if (($typearr[3] == 'alpha_columnAttrib') || ($typearr[3] == 'quote_single') || ($typearr[3] == 'digit_integer')) {                    $after     .= ' ';                }                // workaround for                // AUTO_INCREMENT = 31DEFAULT_CHARSET = utf-8                if ($typearr[2] == 'alpha_columnAttrib' && $typearr[3] == 'alpha_reservedWord') {                    $before .= ' ';                }                // workaround for                // select * from mysql.user where binary user="root"                // binary is marked as alpha_columnAttrib                // but should be marked as a reserved word                if (strtoupper($arr[$i]['data']) == 'BINARY'                  && $typearr[3] == 'alpha_identifier') {                    $after     .= ' ';                }                break;            case 'alpha_functionName':                $funcname = strtoupper($arr[$i]['data']);                if ($docu && isset($PMA_SQPdata_functions_docs[$funcname])) {                    $before .= PMA_showMySQLDocu(                        'functions',                        $PMA_SQPdata_functions_docs[$funcname]['link'],                        false,                        $PMA_SQPdata_functions_docs[$funcname]['anchor'],                        true);                    $after .= '</a>';                }                break;            case 'alpha_reservedWord':                // do not uppercase the reserved word if we are calling                // this function in query_only mode, because we need                // the original query (otherwise we get problems with                // semi-reserved words like "storage" which is legal                // as an identifier name)                if ($mode != 'query_only') {                    $arr[$i]['data'] = strtoupper($arr[$i]['data']);                }                if ((($typearr[1] != 'alpha_reservedWord')                    || (($typearr[1] == 'alpha_reservedWord')                        && isset($keywords_no_newline[strtoupper($arr[$i - 1]['data'])])))                    && ($typearr[1] != 'punct_level_plus')                    && (!isset($keywords_no_newline[$arr[$i]['data']]))) {                    // do not put a space before the first token, because                    // we use a lot of pattern matching checking for the                    // first reserved word at beginning of query                    // so do not put a newline before                    //                    // also we must not be inside a privilege list                    if ($i > 0) {                        // the alpha_identifier exception is there to                        // catch cases like                        // GRANT SELECT ON mydb.mytable TO myuser@localhost                        // (else, we get mydb.mytableTO)                        //                        // the quote_single exception is there to                        // catch cases like                        // GRANT ... TO 'marc'@'domain.com' IDENTIFIED...                        /**                         * @todo fix all cases and find why this happens                         */                        if (!$in_priv_list || $typearr[1] == 'alpha_identifier' || $typearr[1] == 'quote_single' || $typearr[1] == 'white_newline') {                            $before    .= $space_alpha_reserved_word;                        }                    } else {                        // on first keyword, check if it introduces a                        // privilege list                        if (isset($keywords_priv_list[$arr[$i]['data']])) {                            $in_priv_list = true;                        }                    }                } else {                    $before    .= ' ';                }                switch ($arr[$i]['data']) {                case 'CREATE':                case 'ALTER':                case 'DROP':                case 'RENAME';                case 'TRUNCATE':                case 'ANALYZE':                case 'ANALYSE':                case 'OPTIMIZE':                    if ($docu) {                        switch ($arr[$i + 1]['data']) {                        case 'EVENT':                        case 'TABLE':                        case 'TABLESPACE':                        case 'FUNCTION':                        case 'INDEX':                        case 'PROCEDURE':                        case 'TRIGGER':                        case 'SERVER':                        case 'DATABASE':                        case 'VIEW':                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_' . $arr[$i + 1]['data'], false, '', true);                            $close_docu_link = true;                            break;                        }                        if ($arr[$i + 1]['data'] == 'LOGFILE' && $arr[$i + 2]['data'] == 'GROUP') {                            $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'] . '_LOGFILE_GROUP', false, '', true);                            $close_docu_link = true;                        }                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EVENT':                case 'TABLESPACE':                case 'TABLE':                case 'FUNCTION':                case 'INDEX':                case 'PROCEDURE':                case 'SERVER':                case 'TRIGGER':                case 'DATABASE':                case 'VIEW':                case 'GROUP':                    if ($close_docu_link) {                        $after = '</a>' . $after;                        $close_docu_link = false;                    }                    break;                case 'SET':                    if ($docu && ($i == 0 || $arr[$i - 1]['data'] != 'CHARACTER')) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'EXPLAIN':                case 'DESCRIBE':                case 'DELETE':                case 'SHOW':                case 'UPDATE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = ' ';                    }                    break;                case 'INSERT':                case 'REPLACE':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    if (!$in_priv_list) {                        $space_punct_listsep       = $html_line_break;                        $space_alpha_reserved_word = $html_line_break;                    }                    break;                case 'VALUES':                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'SELECT':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT', false, '', true);                        $after = '</a>' . $after;                    }                    $space_punct_listsep       = ' ';                    $space_alpha_reserved_word = $html_line_break;                    break;                case 'CALL':                case 'DO':                case 'HANDLER':                    if ($docu) {                        $before .= PMA_showMySQLDocu('SQL-Syntax', $arr[$i]['data'], false, '', true);                        $after = '</a>' . $after;                    }                    break;                default:                    if ($close_docu_link && in_array($arr[$i]['data'], array('LIKE', 'NOT', 'IN', 'REGEXP', 'NULL'))) {                        $after .= '</a>';                        $close_docu_link = false;                    } else if ($docu && isset($PMA_SQPdata_functions_docs[$arr[$i]['data']])) {                        /* Handle multi word statements first */                        if (isset($typearr[4]) && $typearr[4] == 'alpha_reservedWord' && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'] . '_' . $arr[$i + 2]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else if (isset($typearr[3]) && $typearr[3] == 'alpha_reservedWord' && isset($PMA_SQPdata_functions_docs[strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data'])])) {                            $tempname = strtoupper($arr[$i]['data'] . '_' . $arr[$i + 1]['data']);                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$tempname]['link'], false, $PMA_SQPdata_functions_docs[$tempname]['anchor'], true);                            $close_docu_link = true;                        } else {                            $before .= PMA_showMySQLDocu('functions', $PMA_SQPdata_functions_docs[$arr[$i]['data']]['link'], false, $PMA_SQPdata_functions_docs[$arr[$i]['data']]['anchor'], true);                            $after .= '</a>';                        }                    }                    break;                } // end switch ($arr[$i]['data'])                $after         .= ' ';                break;            case 'digit_integer':            case 'digit_float':            case 'digit_hex':                /**                 * @todo could there be other types preceding a digit?                 */                if ($typearr[1] == 'alpha_reservedWord') {                    $after .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                if ($typearr[1] == 'alpha_columnAttrib') {                    $before .= ' ';                }                break;            case 'alpha_variable':                $after      = ' ';                break;            case 'quote_double':            case 'quote_single':                // workaround: for the query                // REVOKE SELECT ON `base2\_db`.* FROM 'user'@'%'                // the @ is incorrectly marked as alpha_variable                // in the parser, and here, the '%' gets a blank before,                // which is a syntax error                if ($typearr[1] != 'punct_user' && $typearr[1] != 'alpha_bitfield_constant_introducer') {                    $before        .= ' ';                }                if ($infunction && $typearr[3] == 'punct_bracket_close_round') {                    $after     .= ' ';                }                break;            case 'quote_backtick':                // here we check for punct_user to handle correctly                // DEFINER = `username`@`%`                // where @ is the punct_user and `%` is the quote_backtick                if ($typearr[3] != 'punct_qualifier' && $typearr[3] != 'alpha_variable' && $typearr[3] != 'punct_user') {                    $after     .= ' ';                }                if ($typearr[1] != 'punct_qualifier' && $typearr[1] != 'alpha_variable' && $typearr[1] != 'punct_user') {                    $before    .= ' ';                }                break;            default:                break;            } // end switch ($typearr[2])            /*            if ($typearr[3] != 'punct_qualifier') {                $after             .= ' ';            }            $after                 .= "\n";            */            $str .= $before;            if ($mode=='color') {                $str .= PMA_SQP_formatHTML_colorize($arr[$i]);            } elseif ($mode == 'text') {                $str .= htmlspecialchars($arr[$i]['data']);            } else {                $str .= $arr[$i]['data'];            }            $str .= $after;        } // end for        // close unclosed indent levels        while ($indent > 0) {            $indent--;            $str .= ($mode != 'query_only' ? '</div>' : ' ');        }        /* End possibly unclosed documentation link */        if ($close_docu_link) {            $str .= '</a>';            $close_docu_link = false;        }        if ($mode!='query_only') {            // close inner_sql span                $str .= '</span>';        }        if ($mode=='color') {            // close syntax span            $str .= '</span>';        }        return $str;    } // end of the "PMA_SQP_formatHtml()" function}/** * Builds a CSS rule used for html formatted SQL queries * * @param string  The class name * @param string  The property name * @param string  The property value * * @return string  The CSS rule * * @access public * * @see    PMA_SQP_buildCssData() */function PMA_SQP_buildCssRule($classname, $property, $value){    $str     = '.' . $classname . ' {';    if ($value != '') {        $str .= $property . ': ' . $value . ';';    }    $str     .= '}' . "\n";    return $str;} // end of the "PMA_SQP_buildCssRule()" function/** * Builds CSS rules used for html formatted SQL queries * * @return string  The CSS rules set * * @access public * * @global array   The current PMA configuration * * @see    PMA_SQP_buildCssRule() */function PMA_SQP_buildCssData(){    global $cfg;    $css_string     = '';    foreach ($cfg['SQP']['fmtColor'] AS $key => $col) {        $css_string .= PMA_SQP_buildCssRule('syntax_' . $key, 'color', $col);    }    for ($i = 0; $i < 8; $i++) {        $css_string .= PMA_SQP_buildCssRule(            'syntax_indent' . $i, 'margin-left',            ($i * $cfg['SQP']['fmtInd']) . $cfg['SQP']['fmtIndUnit']);    }    return $css_string;} // end of the "PMA_SQP_buildCssData()" functionif (! defined('PMA_MINIMUM_COMMON')) {    /**     * Gets SQL queries with no format     *     * @param array   The SQL queries list     *     * @return string  The SQL queries with no format     *     * @access public     */    function PMA_SQP_formatNone($arr)    {        $formatted_sql = htmlspecialchars($arr['raw']);        $formatted_sql = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $formatted_sql);        return $formatted_sql;    } // end of the "PMA_SQP_formatNone()" function} // end if: minimal common.lib needed??>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV export code * * @package PhpMyAdmin-Export * @subpackage CSV */if (! defined('PHPMYADMIN')) {    exit;}/** * Set of functions used to build CSV dumps of tables */if (isset($plugin_list)) {    $plugin_list['csv'] = array(        'text' => __('CSV'),        'extension' => 'csv',        'mime_type' => 'text/comma-separated-values',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'text', 'name' => 'separator', 'text' => __('Columns separated with:')),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed with:')),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped with:')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Lines terminated with:')),            array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:')),            array('type' => 'bool', 'name' => 'removeCRLF', 'text' => __('Remove carriage return/line feed characters within columns')),            array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group'),            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        global $what;        global $csv_terminated;        global $csv_separator;        global $csv_enclosed;        global $csv_escaped;        // Here we just prepare some values for export        if ($what == 'excel') {            $csv_terminated      = "\015\012";            switch($GLOBALS['excel_edition']) {            case 'win':                // as tested on Windows with Excel 2002 and Excel 2007                $csv_separator = ';';                break;            case 'mac_excel2003':                $csv_separator = ';';                break;            case 'mac_excel2008':                $csv_separator = ',';                break;            }            $csv_enclosed           = '"';            $csv_escaped            = '"';            if (isset($GLOBALS['excel_columns'])) {                $GLOBALS['csv_columns'] = 'yes';            }        } else {            if (empty($csv_terminated) || strtolower($csv_terminated) == 'auto') {                $csv_terminated  = $GLOBALS['crlf'];            } else {                $csv_terminated  = str_replace('\\r', "\015", $csv_terminated);                $csv_terminated  = str_replace('\\n', "\012", $csv_terminated);                $csv_terminated  = str_replace('\\t', "\011", $csv_terminated);            } // end if            $csv_separator          = str_replace('\\t', "\011", $csv_separator);        }        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in CSV format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        global $what;        global $csv_terminated;        global $csv_separator;        global $csv_enclosed;        global $csv_escaped;        // Gets the data from the database        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $fields_cnt  = PMA_DBI_num_fields($result);        // If required, get fields name at the first line        if (isset($GLOBALS['csv_columns'])) {            $schema_insert = '';            for ($i = 0; $i < $fields_cnt; $i++) {                if ($csv_enclosed == '') {                    $schema_insert .= stripslashes(PMA_DBI_field_name($result, $i));                } else {                    $schema_insert .= $csv_enclosed                                   . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, stripslashes(PMA_DBI_field_name($result, $i)))                                   . $csv_enclosed;                }                $schema_insert     .= $csv_separator;            } // end for            $schema_insert  =trim(substr($schema_insert, 0, -1));            if (!PMA_exportOutputHandler($schema_insert . $csv_terminated)) {                return false;            }        } // end if        // Format the data        while ($row = PMA_DBI_fetch_row($result)) {            $schema_insert = '';            for ($j = 0; $j < $fields_cnt; $j++) {                if (!isset($row[$j]) || is_null($row[$j])) {                    $schema_insert .= $GLOBALS[$what . '_null'];                } elseif ($row[$j] == '0' || $row[$j] != '') {                    // always enclose fields                    if ($what == 'excel') {                        $row[$j]       = preg_replace("/\015(\012)?/", "\012", $row[$j]);                    }                    // remove CRLF characters within field                    if (isset($GLOBALS[$what . '_removeCRLF']) && $GLOBALS[$what . '_removeCRLF']) {                        $row[$j] = str_replace("\n", "", str_replace("\r", "", $row[$j]));                    }                    if ($csv_enclosed == '') {                        $schema_insert .= $row[$j];                    } else {                        // also double the escape string if found in the data                        if ($csv_escaped != $csv_enclosed) {                            $schema_insert .= $csv_enclosed                                       . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, str_replace($csv_escaped, $csv_escaped . $csv_escaped, $row[$j]))                                       . $csv_enclosed;                        } else {                            // avoid a problem when escape string equals enclose                            $schema_insert .= $csv_enclosed                                       . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, $row[$j])                                       . $csv_enclosed;                        }                    }                } else {                    $schema_insert .= '';                }                if ($j < $fields_cnt-1) {                    $schema_insert .= $csv_separator;                }            } // end for            if (!PMA_exportOutputHandler($schema_insert . $csv_terminated)) {                return false;            }        } // end while        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_getTableCsv()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * this file is register_globals safe * * @todo    move JavaScript out of here into .js files * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$is_superuser = PMA_isSuperuser();/** * Gets a core script and starts output buffering work */require_once './libraries/sql_query_form.lib.php';/** * starts output buffering if requested and supported */require_once './libraries/ob.lib.php';PMA_outBufferPre();/** * load relation params */$cfgRelation = PMA_getRelationsParam();/** * load bookmark support */require_once './libraries/bookmark.lib.php';$querydisplay_tabs = array(    'sql',    'files',    'history',    'full',);if (isset($_REQUEST['querydisplay_tab']) && in_array($_REQUEST['querydisplay_tab'], $querydisplay_tabs)) {    $querydisplay_tab = $_REQUEST['querydisplay_tab'];} else {    $querydisplay_tab = $GLOBALS['cfg']['QueryWindowDefTab'];}/** * $_REQUEST['no_js'] is set if open new window by JavaScript failed * so this page is loaded in main frame */$no_js = PMA_ifSetOr($_REQUEST['no_js'], false);if ($no_js) {    $querydisplay_tab = 'full';    $tabs = false;} else {    $tabs = array();    $tabs['sql']['icon']   = 'b_sql.png';    $tabs['sql']['text']   = __('SQL');    $tabs['sql']['fragment']   = '#';    $tabs['sql']['attr']   = 'onclick="PMA_querywindowCommit(\'sql\');return false;"';    $tabs['sql']['active'] = (bool) ($querydisplay_tab == 'sql');    $tabs['import']['icon']   = 'b_import.png';    $tabs['import']['text']   = __('Import files');    $tabs['import']['fragment']   = '#';    $tabs['import']['attr']   = 'onclick="PMA_querywindowCommit(\'files\');return false;"';    $tabs['import']['active'] = (bool) ($querydisplay_tab == 'files');    $tabs['history']['icon']   = 'b_bookmark.png';    $tabs['history']['text']   = __('SQL history');    $tabs['history']['fragment']   = '#';    $tabs['history']['attr']   = 'onclick="PMA_querywindowCommit(\'history\');return false;"';    $tabs['history']['active'] = (bool) ($querydisplay_tab == 'history');    if ($GLOBALS['cfg']['QueryWindowDefTab'] == 'full') {        $tabs['all']['text']   = __('All');        $tabs['all']['fragment']   = '#';        $tabs['all']['attr']   = 'onclick="PMA_querywindowCommit(\'full\');return false;"';        $tabs['all']['active'] = (bool) ($querydisplay_tab == 'full');    }}$titles['Change'] = PMA_getIcon('b_edit.png', __('Change'));$url_query = PMA_generate_common_url($db, $table);if (! empty($sql_query)) {    $show_query = 1;}if ($no_js) {    // ... we redirect to appropriate query sql page    // works only full if $db and $table is also stored/grabbed from $_COOKIE    if (strlen($table)) {        include './tbl_sql.php';    } elseif (strlen($db)) {        include './db_sql.php';    } else {        include './server_sql.php';    }    exit;}/** * Defines the query to be displayed in the query textarea */if (! empty($show_query)) {    $query_to_display = $sql_query;} else {    $query_to_display = '';}$sql_query = '';/** * prepare JavaScript functionality */$js_include[] = 'common.js';$js_include[] = 'querywindow.js';if (PMA_isValid($_REQUEST['auto_commit'], 'identical', 'true')) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_queryAutoCommit',    );}if (PMA_isValid($_REQUEST['init'])) {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowResize',    );}// always set focus to the textareaif ($querydisplay_tab == 'sql' || $querydisplay_tab == 'full') {    $js_events[] = array(        'event'     => 'load',        'function'  => 'PMA_querywindowSetFocus',    );}/** * start HTTP/HTML output */require_once './libraries/header_http.inc.php';require_once './libraries/header_meta_style.inc.php';require_once './libraries/header_scripts.inc.php';?></head><body id="bodyquerywindow"><div id="querywindowcontainer"><?phpif ($tabs) {    echo PMA_generate_html_tabs($tabs, array());    unset($tabs);}PMA_sqlQueryForm($query_to_display, $querydisplay_tab);// Hidden forms and query frame interaction stuff$_sql_history = PMA_getHistory($GLOBALS['cfg']['Server']['user']);if (! empty($_sql_history) && ($querydisplay_tab == 'history' || $querydisplay_tab == 'full')) {    $tab = $querydisplay_tab != 'full' ? 'sql' : 'full';    echo __('SQL history') . ':<br />'        . '<ul>';    foreach ($_sql_history as $query) {        echo '<li>' . "\n";        // edit link        $url_params = array(            'querydisplay_tab' => $tab,            'sql_query' => $query['sqlquery'],            'db' => $query['db'],            'table' => $query['table'],        );        echo '<a href="querywindow.php' . PMA_generate_common_url($url_params)            . '">' . $titles['Change'] . '</a>';        // execute link        $url_params['auto_commit'] = 'true';        echo '<a href="import.php' . PMA_generate_common_url($url_params) . '"'            . ' target="frame_content">';        if (! empty($query['db'])) {            echo '[';            echo htmlspecialchars(PMA_backquote($query['db']));            if (! empty($query['table'])) {                echo '.' . htmlspecialchars(PMA_backquote($query['table']));            }            echo  '] ';        }        if (strlen($query['sqlquery']) > 120) {            echo '<span title="' . htmlspecialchars($query['sqlquery']) . '">';            echo htmlspecialchars(substr($query['sqlquery'], 0, 50)) . ' [...] ';            echo htmlspecialchars(substr($query['sqlquery'], -50));            echo '</span>';        } else {            echo htmlspecialchars($query['sqlquery']);        }        echo '</a>' . "\n";        echo '</li>' . "\n";    }    unset($tab, $_sql_history, $query);    echo '</ul>' . "\n";}?><form action="querywindow.php" method="post" name="hiddenqueryform"    id="hiddenqueryform">    <?php echo PMA_generate_common_hidden_inputs('', ''); ?>    <input type="hidden" name="db" value="<?php echo htmlspecialchars($db); ?>" />    <input type="hidden" name="table" value="<?php echo htmlspecialchars($table); ?>" />    <input type="hidden" name="sql_query" value="" />    <input type="hidden" name="querydisplay_tab" value="<?php echo $querydisplay_tab; ?>" /></form></div></body></html>
