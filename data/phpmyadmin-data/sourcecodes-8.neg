<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Executes a query as controluser if possible, otherwise as normal user * * @param string  $sql        the query to execute * @param boolean $show_error whether to display SQL error messages or not * @param int     $options    query options * * @return  integer   the result set, or false if no result set * * @access  public * */function PMA_query_as_controluser($sql, $show_error = true, $options = 0){    // Avoid caching of the number of rows affected; for example, this function    // is called for tracking purposes but we want to display the correct number    // of rows affected by the original query, not by the query generated for    // tracking.    $cache_affected_rows = false;    if ($show_error) {        $result = PMA_DBI_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } else {        $result = @PMA_DBI_try_query($sql, $GLOBALS['controllink'], $options, $cache_affected_rows);    } // end if... else...    if ($result) {        return $result;    } else {        return false;    }} // end of the "PMA_query_as_controluser()" function/** * @param bool $verbose whether to print diagnostic info * * @return  array   $cfgRelation */function PMA_getRelationsParam($verbose = false){    if (empty($_SESSION['relation'][$GLOBALS['server']])) {        $_SESSION['relation'][$GLOBALS['server']] = PMA__getRelationsParam();    }    // just for BC but needs to be before PMA_printRelationsParamDiagnostic()    // which uses it    $GLOBALS['cfgRelation'] = $_SESSION['relation'][$GLOBALS['server']];    if ($verbose) {        PMA_printRelationsParamDiagnostic($_SESSION['relation'][$GLOBALS['server']]);    }    return $_SESSION['relation'][$GLOBALS['server']];}/** * prints out diagnostic info for pma relation feature * * @param array $cfgRelation * * @return nothing */function PMA_printRelationsParamDiagnostic($cfgRelation){    $messages['error'] = '<font color="red"><strong>' . __('not OK')                   . '</strong></font> [ <a href="Documentation.html#%s" target="documentation">'                   . __('Documentation') . '</a> ]';    $messages['ok'] = '<font color="green"><strong>' . __('OK') . '</strong></font>';    $messages['enabled']  = '<font color="green">' . __('Enabled') . '</font>';    $messages['disabled'] = '<font color="red">'   . __('Disabled') . '</font>';    if (false === $GLOBALS['cfg']['Server']['pmadb']) {        echo 'PMA Database ... '             . sprintf($messages['error'], 'pmadb')             . '<br />' . "\n"             . __('General relation features')             . ' <font color="green">' . __('Disabled')             . '</font>' . "\n";        return;    }    echo '<table>' . "\n";    PMA_printDiagMessageForParameter('pmadb', $GLOBALS['cfg']['Server']['pmadb'], $messages, 'pmadb');    PMA_printDiagMessageForParameter('relation', isset($cfgRelation['relation']), $messages, 'relation');    PMA_printDiagMessageForFeature(__('General relation features'), 'relwork', $messages);    PMA_printDiagMessageForParameter('table_info', isset($cfgRelation['table_info']), $messages, 'table_info');    PMA_printDiagMessageForFeature(__('Display Features'), 'displaywork', $messages);    PMA_printDiagMessageForParameter('table_coords', isset($cfgRelation['table_coords']), $messages, 'table_coords');    PMA_printDiagMessageForParameter('pdf_pages', isset($cfgRelation['pdf_pages']), $messages, 'table_coords');    PMA_printDiagMessageForFeature(__('Creation of PDFs'), 'pdfwork', $messages);    PMA_printDiagMessageForParameter('column_info', isset($cfgRelation['column_info']), $messages, 'col_com');    PMA_printDiagMessageForFeature(__('Displaying Column Comments'), 'commwork', $messages, false);    PMA_printDiagMessageForFeature(__('Browser transformation'), 'mimework', $messages);    if ($cfgRelation['commwork'] && ! $cfgRelation['mimework']) {        echo '<tr><td colspan=2 align="left">' . __('Please see the documentation on how to update your column_comments table') . '</td></tr>' . "\n";    }    PMA_printDiagMessageForParameter('bookmarktable', isset($cfgRelation['bookmark']), $messages, 'bookmark');    PMA_printDiagMessageForFeature(__('Bookmarked SQL query'), 'bookmarkwork', $messages);    PMA_printDiagMessageForParameter('history', isset($cfgRelation['history']), $messages, 'history');    PMA_printDiagMessageForFeature(__('SQL history'), 'historywork', $messages);    PMA_printDiagMessageForParameter('designer_coords', isset($cfgRelation['designer_coords']), $messages, 'designer_coords');    PMA_printDiagMessageForFeature(__('Designer'), 'designerwork', $messages);    PMA_printDiagMessageForParameter('recent', isset($cfgRelation['recent']), $messages, 'recent');    PMA_printDiagMessageForFeature(__('Persistent recently used tables'), 'recentwork', $messages);    PMA_printDiagMessageForParameter('table_uiprefs', isset($cfgRelation['table_uiprefs']), $messages, 'table_uiprefs');    PMA_printDiagMessageForFeature(__('Persistent tables\' UI preferences'), 'uiprefswork', $messages);    PMA_printDiagMessageForParameter('tracking', isset($cfgRelation['tracking']), $messages, 'tracking');    PMA_printDiagMessageForFeature(__('Tracking'), 'trackingwork', $messages);    PMA_printDiagMessageForParameter('userconfig', isset($cfgRelation['userconfig']), $messages, 'userconfig');    PMA_printDiagMessageForFeature(__('User preferences'), 'userconfigwork', $messages);    echo '</table>' . "\n";    echo '<p>' . __('Quick steps to setup advanced features:') . '</p>';    echo '<ul>';    echo '<li>' . __('Create the needed tables with the <code>examples/create_tables.sql</code>.') . ' ' . PMA_showDocu('linked-tables') . '</li>';    echo '<li>' . __('Create a pma user and give access to these tables.') . ' ' . PMA_showDocu('pmausr') . '</li>';    echo '<li>' . __('Enable advanced features in configuration file (<code>config.inc.php</code>), for example by starting from <code>config.sample.inc.php</code>.') . ' ' . PMA_showDocu('quick_install') . '</li>';    echo '<li>' . __('Re-login to phpMyAdmin to load the updated configuration file.') . '</li>';    echo '</ul>';}/** * prints out one diagnostic message for a feature * * @param string  $feature_name       feature name in a message string * @param string  $relation_parameter the $GLOBALS['cfgRelation'] parameter to check * @param array   $messages           utility messages * @param boolean $skip_line          whether to skip a line after the message * * @return nothing */function PMA_printDiagMessageForFeature($feature_name, $relation_parameter, $messages, $skip_line=true){    echo '    <tr><td colspan=2 align="right">' . $feature_name . ': '         . ($GLOBALS['cfgRelation'][$relation_parameter] ? $messages['enabled'] : $messages['disabled'])         . '</td></tr>' . "\n";    if ($skip_line) {        echo '    <tr><td>&nbsp;</td></tr>' . "\n";    }}/** * prints out one diagnostic message for a configuration parameter * * @param string  $parameter              config parameter name to display * @param boolean $relation_parameter_set whether this parameter is set * @param array   $messages               utility messages * @param string  $doc_anchor             anchor in Documentation.html * * @return nothing */function PMA_printDiagMessageForParameter($parameter, $relation_parameter_set, $messages, $doc_anchor){    echo '    <tr><th align="left">';    echo '$cfg[\'Servers\'][$i][\'' . $parameter . '\']  ... </th><td align="right">';    echo ($relation_parameter_set ? $messages['ok'] : sprintf($messages['error'], $doc_anchor)) . '</td></tr>' . "\n";}/** * Defines the relation parameters for the current user * just a copy of the functions used for relations ;-) * but added some stuff to check what will work * * @access  protected * @return  array    the relation parameters for the current user */function PMA__getRelationsParam(){    $cfgRelation                = array();    $cfgRelation['relwork']     = false;    $cfgRelation['displaywork'] = false;    $cfgRelation['bookmarkwork']= false;    $cfgRelation['pdfwork']     = false;    $cfgRelation['commwork']    = false;    $cfgRelation['mimework']    = false;    $cfgRelation['historywork'] = false;    $cfgRelation['recentwork']  = false;    $cfgRelation['uiprefswork'] = false;    $cfgRelation['trackingwork'] = false;    $cfgRelation['designerwork'] = false;    $cfgRelation['userconfigwork'] = false;    $cfgRelation['allworks']    = false;    $cfgRelation['user']        = null;    $cfgRelation['db']          = null;    if ($GLOBALS['server'] == 0 || empty($GLOBALS['cfg']['Server']['pmadb'])        || ! PMA_DBI_select_db($GLOBALS['cfg']['Server']['pmadb'], $GLOBALS['controllink'])    ) {        // No server selected -> no bookmark table        // we return the array with the falses in it,        // to avoid some 'Unitialized string offset' errors later        $GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    $cfgRelation['user']  = $GLOBALS['cfg']['Server']['user'];    $cfgRelation['db']    = $GLOBALS['cfg']['Server']['pmadb'];    //  Now I just check if all tables that i need are present so I can for    //  example enable relations but not pdf...    //  I was thinking of checking if they have all required columns but I    //  fear it might be too slow    $tab_query = 'SHOW TABLES FROM ' . PMA_backquote($GLOBALS['cfg']['Server']['pmadb']);    $tab_rs    = PMA_query_as_controluser($tab_query, false, PMA_DBI_QUERY_STORE);    if (! $tab_rs) {        // query failed ... ?        //$GLOBALS['cfg']['Server']['pmadb'] = false;        return $cfgRelation;    }    while ($curr_table = @PMA_DBI_fetch_row($tab_rs)) {        if ($curr_table[0] == $GLOBALS['cfg']['Server']['bookmarktable']) {            $cfgRelation['bookmark']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['relation']) {            $cfgRelation['relation']        = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_info']) {            $cfgRelation['table_info']      = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_coords']) {            $cfgRelation['table_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['designer_coords']) {            $cfgRelation['designer_coords']    = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['column_info']) {            $cfgRelation['column_info'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['pdf_pages']) {            $cfgRelation['pdf_pages']       = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['history']) {            $cfgRelation['history'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['recent']) {            $cfgRelation['recent'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['table_uiprefs']) {            $cfgRelation['table_uiprefs'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['tracking']) {            $cfgRelation['tracking'] = $curr_table[0];        } elseif ($curr_table[0] == $GLOBALS['cfg']['Server']['userconfig']) {            $cfgRelation['userconfig'] = $curr_table[0];        }    } // end while    PMA_DBI_free_result($tab_rs);    if (isset($cfgRelation['relation'])) {        $cfgRelation['relwork']         = true;        if (isset($cfgRelation['table_info'])) {                $cfgRelation['displaywork'] = true;        }    }    if (isset($cfgRelation['table_coords']) && isset($cfgRelation['pdf_pages'])) {        $cfgRelation['pdfwork']     = true;    }    if (isset($cfgRelation['column_info'])) {        $cfgRelation['commwork']    = true;        if ($GLOBALS['cfg']['Server']['verbose_check']) {            $mime_query  = PMA_DBI_get_columns_sql($cfgRelation['db'], $cfgRelation['column_info']);            $mime_rs     = PMA_query_as_controluser($mime_query, false);            $mime_field_mimetype                = false;            $mime_field_transformation          = false;            $mime_field_transformation_options  = false;            while ($curr_mime_field = @PMA_DBI_fetch_row($mime_rs)) {                if ($curr_mime_field[0] == 'mimetype') {                    $mime_field_mimetype               = true;                } elseif ($curr_mime_field[0] == 'transformation') {                    $mime_field_transformation         = true;                } elseif ($curr_mime_field[0] == 'transformation_options') {                    $mime_field_transformation_options = true;                }            }            PMA_DBI_free_result($mime_rs);            if ($mime_field_mimetype                && $mime_field_transformation                && $mime_field_transformation_options            ) {                $cfgRelation['mimework'] = true;            }        } else {            $cfgRelation['mimework'] = true;        }    }    if (isset($cfgRelation['history'])) {        $cfgRelation['historywork']     = true;    }    if (isset($cfgRelation['recent'])) {        $cfgRelation['recentwork']      = true;    }    if (isset($cfgRelation['table_uiprefs'])) {        $cfgRelation['uiprefswork']     = true;    }    if (isset($cfgRelation['tracking'])) {        $cfgRelation['trackingwork']     = true;    }    if (isset($cfgRelation['userconfig'])) {        $cfgRelation['userconfigwork']   = true;    }    // we do not absolutely need that the internal relations or the PDF    // schema feature be activated    if (isset($cfgRelation['designer_coords'])) {        $cfgRelation['designerwork']     = true;    }    if (isset($cfgRelation['bookmark'])) {        $cfgRelation['bookmarkwork']     = true;    }    if ($cfgRelation['relwork'] && $cfgRelation['displaywork']        && $cfgRelation['pdfwork'] && $cfgRelation['commwork']        && $cfgRelation['mimework'] && $cfgRelation['historywork']        && $cfgRelation['recentwork'] && $cfgRelation['uiprefswork']        && $cfgRelation['trackingwork'] && $cfgRelation['userconfigwork']        && $cfgRelation['bookmarkwork'] && $cfgRelation['designerwork']    ) {        $cfgRelation['allworks'] = true;    }    return $cfgRelation;} // end of the 'PMA_getRelationsParam()' function/** * Gets all Relations to foreign tables for a given table or * optionally a given column in a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $column the name of the column to check for * @param string $source the source for foreign key information * * @return  array    db,table,column * * @access  public */function PMA_getForeigners($db, $table, $column = '', $source = 'both'){    $cfgRelation = PMA_getRelationsParam();    $foreign = array();    if ($cfgRelation['relwork'] && ($source == 'both' || $source == 'internal')) {        $rel_query = '             SELECT `master_field`,                    `foreign_db`,                    `foreign_table`,                    `foreign_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation']) . '              WHERE `master_db`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `master_table` = \'' . PMA_sqlAddSlashes($table) . '\' ';        if (strlen($column)) {            $rel_query .= ' AND `master_field` = \'' . PMA_sqlAddSlashes($column) . '\'';        }        $foreign = PMA_DBI_fetch_result($rel_query, 'master_field', null, $GLOBALS['controllink']);    }    if (($source == 'both' || $source == 'foreign') && strlen($table)) {        $show_create_table_query = 'SHOW CREATE TABLE '            . PMA_backquote($db) . '.' . PMA_backquote($table);        $show_create_table = PMA_DBI_fetch_value($show_create_table_query, 0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));        foreach ($analyzed_sql[0]['foreign_keys'] as $one_key) {            // The analyzer may return more than one column name in the            // index list or the ref_index_list; if this happens,            // the current logic just discards the whole index; having            // more than one index field is currently unsupported (see FAQ 3.6)            if (count($one_key['index_list']) == 1) {                foreach ($one_key['index_list'] as $i => $field) {                    // If a foreign key is defined in the 'internal' source (pmadb)                    // and as a native foreign key, we won't get it twice                    // if $source='both' because we use $field as key                    // The parser looks for a CONSTRAINT clause just before                    // the FOREIGN KEY clause. It finds it (as output from                    // SHOW CREATE TABLE) in MySQL 4.0.13, but not in older                    // versions like 3.23.58.                    // In those cases, the FOREIGN KEY parsing will put numbers                    // like -1, 0, 1... instead of the constraint number.                    if (isset($one_key['constraint'])) {                        $foreign[$field]['constraint'] = $one_key['constraint'];                    }                    if (isset($one_key['ref_db_name'])) {                        $foreign[$field]['foreign_db'] = $one_key['ref_db_name'];                    } else {                        $foreign[$field]['foreign_db'] = $db;                    }                    $foreign[$field]['foreign_table'] = $one_key['ref_table_name'];                    $foreign[$field]['foreign_field'] = $one_key['ref_index_list'][$i];                    if (isset($one_key['on_delete'])) {                        $foreign[$field]['on_delete'] = $one_key['on_delete'];                    }                    if (isset($one_key['on_update'])) {                        $foreign[$field]['on_update'] = $one_key['on_update'];                    }                }            }        }    }    /**     * Emulating relations for some information_schema and data_dictionary tables     */    $is_information_schema = strtolower($db) == 'information_schema';    $is_data_dictionary = PMA_DRIZZLE && strtolower($db) == 'data_dictionary';    if (($is_information_schema || $is_data_dictionary) && ($source == 'internal' || $source == 'both')) {        if ($is_information_schema) {            $relations_key = 'information_schema_relations';            include_once './libraries/information_schema_relations.lib.php';        } else {            $relations_key = 'data_dictionary_relations';            include_once './libraries/data_dictionary_relations.lib.php';        }        if (isset($GLOBALS[$relations_key][$table])) {            foreach ($GLOBALS[$relations_key][$table] as $field => $relations) {                if ((! strlen($column) || $column == $field)                    && (! isset($foreign[$field]) || ! strlen($foreign[$field]))                ) {                    $foreign[$field] = $relations;                }            }        }    }    return $foreign;} // end of the 'PMA_getForeigners()' function/** * Gets the display field of a table * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  string   field name * * @access  public */function PMA_getDisplayField($db, $table){    $cfgRelation = PMA_getRelationsParam();    /**     * Try to fetch the display field from DB.     */    if ($cfgRelation['displaywork']) {        $disp_query = '             SELECT `display_field`               FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info']) . '              WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'';        $row = PMA_DBI_fetch_single_row($disp_query, 'ASSOC', $GLOBALS['controllink']);        if (isset($row['display_field'])) {            return $row['display_field'];        }    }    /**     * Emulating the display field for some information_schema tables.     */    if ($db == 'information_schema') {        switch ($table) {        case 'CHARACTER_SETS':            return 'DESCRIPTION';        case 'TABLES':            return 'TABLE_COMMENT';        }    }    /**     * No Luck...     */    return false;} // end of the 'PMA_getDisplayField()' function/** * Gets the comments for all rows of a table or the db itself * * @param string $db    the name of the db to check for * @param string $table the name of the table to check for * * @return  array    [field_name] = comment * * @access  public */function PMA_getComments($db, $table = ''){    $comments = array();    if ($table != '') {        // MySQL native column comments        $fields = PMA_DBI_get_columns($db, $table, null, true);        if ($fields) {            foreach ($fields as $field) {                if (! empty($field['Comment'])) {                    $comments[$field['Field']] = $field['Comment'];                }            }        }    } else {        $comments[] = PMA_getDbComment($db);    }    return $comments;} // end of the 'PMA_getComments()' function/** * Gets the comment for a db * * @param string $db the name of the db to check for * * @return  string   comment * * @access  public */function PMA_getDbComment($db){    $cfgRelation = PMA_getRelationsParam();    $comment = '';    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE db_name     = '" . PMA_sqlAddSlashes($db) . "'                AND table_name  = ''                AND column_name = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            $row = PMA_DBI_fetch_assoc($com_rs);            $comment = $row['comment'];        }        PMA_DBI_free_result($com_rs);    }    return $comment;} // end of the 'PMA_getDbComment()' function/** * Gets the comment for a db * * @access  public * * @return  string   comment */function PMA_getDbComments(){    $cfgRelation = PMA_getRelationsParam();    $comments = array();    if ($cfgRelation['commwork']) {        // pmadb internal db comment        $com_qry = "             SELECT `db_name`, `comment`               FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "              WHERE `column_name` = '(db_comment)'";        $com_rs = PMA_query_as_controluser($com_qry, true, PMA_DBI_QUERY_STORE);        if ($com_rs && PMA_DBI_num_rows($com_rs) > 0) {            while ($row = PMA_DBI_fetch_assoc($com_rs)) {                $comments[$row['db_name']] = $row['comment'];            }        }        PMA_DBI_free_result($com_rs);    }    return $comments;} // end of the 'PMA_getDbComments()' function/** * Set a database comment to a certain value. * * @param string $db      the name of the db * @param string $comment the value of the column * * @return  boolean  true, if comment-query was made. * * @access  public */function PMA_setDbComment($db, $comment = ''){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    if (strlen($comment)) {        $upd_query = "             INSERT INTO                    " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['column_info']) . "                    (`db_name`, `table_name`, `column_name`, `comment`)             VALUES (                   '" . PMA_sqlAddSlashes($db) . "',                   '',                   '(db_comment)',                   '" . PMA_sqlAddSlashes($comment) . "')             ON DUPLICATE KEY UPDATE                `comment` = '" . PMA_sqlAddSlashes($comment) . "'";    } else {        $upd_query = '             DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '              WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'                AND `table_name`  = \'\'                AND `column_name` = \'(db_comment)\'';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    }    return false;} // end of 'PMA_setDbComment()' function/** * Set a SQL history entry * * @param string $db       the name of the db * @param string $table    the name of the table * @param string $username the username * @param string $sqlquery the sql query * * @return nothing * * @access  public */function PMA_setHistory($db, $table, $username, $sqlquery){    if (strlen($sqlquery) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        return;    }    $cfgRelation = PMA_getRelationsParam();    if (! isset($_SESSION['sql_history'])) {        $_SESSION['sql_history'] = array();    }    $key = md5($sqlquery . $db . $table);    if (isset($_SESSION['sql_history'][$key])) {        unset($_SESSION['sql_history'][$key]);    }    $_SESSION['sql_history'][$key] = array(        'db' => $db,        'table' => $table,        'sqlquery' => $sqlquery,    );    if (count($_SESSION['sql_history']) > $GLOBALS['cfg']['QueryHistoryMax']) {        // history should not exceed a maximum count        array_shift($_SESSION['sql_history']);    }    if (! $cfgRelation['historywork'] || ! $GLOBALS['cfg']['QueryHistoryDB']) {        return;    }    PMA_query_as_controluser(        'INSERT INTO                ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              (`username`,                `db`,                `table`,                `timevalue`,                `sqlquery`)        VALUES              (\'' . PMA_sqlAddSlashes($username) . '\',               \'' . PMA_sqlAddSlashes($db) . '\',               \'' . PMA_sqlAddSlashes($table) . '\',               NOW(),               \'' . PMA_sqlAddSlashes($sqlquery) . '\')'    );} // end of 'PMA_setHistory()' function/** * Gets a SQL history entry * * @param string $username the username * * @return  array    list of history items * * @access  public */function PMA_getHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['historywork']) {        return false;    }    $hist_query = '         SELECT `db`,                `table`,                `sqlquery`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `id` DESC';    return PMA_DBI_fetch_result($hist_query, null, null, $GLOBALS['controllink']);} // end of 'PMA_getHistory()' function/** * purges SQL history * * deletes entries that exceeds $cfg['QueryHistoryMax'], oldest first, for the * given user * * @param string $username the username * * @return nothing * * @access  public */function PMA_purgeHistory($username){    $cfgRelation = PMA_getRelationsParam();    if (! $GLOBALS['cfg']['QueryHistoryDB'] || ! $cfgRelation['historywork']) {        return;    }    if (! $cfgRelation['historywork']) {        return;    }    $search_query = '         SELECT `timevalue`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '          WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'       ORDER BY `timevalue` DESC          LIMIT ' . $GLOBALS['cfg']['QueryHistoryMax'] . ', 1';    if ($max_time = PMA_DBI_fetch_value($search_query, 0, 0, $GLOBALS['controllink'])) {        PMA_query_as_controluser(            'DELETE FROM                    ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['history']) . '              WHERE `username` = \'' . PMA_sqlAddSlashes($username) . '\'                AND `timevalue` <= \'' . $max_time . '\''        );    }} // end of 'PMA_purgeHistory()' function/** * Prepares the dropdown for one mode * * @param array  $foreign the keys and values for foreigns * @param string $data    the current data of the dropdown * @param string $mode    the needed mode * * @return  array   the <option value=""><option>s * * @access  protected */function PMA__foreignDropdownBuild($foreign, $data, $mode){    $reloptions = array();    // id-only is a special mode used when no foreign display column    // is available    if ($mode == 'id-content' || $mode == 'id-only') {        // sort for id-content        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($foreign, 'strnatcasecmp');        } else {            ksort($foreign);        }    } elseif ($mode == 'content-id') {        // sort for content-id        if ($GLOBALS['cfg']['NaturalOrder']) {            natcasesort($foreign);        } else {            asort($foreign);        }    }    foreach ($foreign as $key => $value) {        if (PMA_strlen($value) <= $GLOBALS['cfg']['LimitChars']) {            $vtitle = '';            $value  = htmlspecialchars($value);        } else {            $vtitle  = htmlspecialchars($value);            $value  = htmlspecialchars(substr($value, 0, $GLOBALS['cfg']['LimitChars']) . '...');        }        $reloption = '<option value="' . htmlspecialchars($key) . '"';        if ($vtitle != '') {            $reloption .= ' title="' . $vtitle . '"';        }        if ((string) $key == (string) $data) {            $reloption .= ' selected="selected"';        }        if ($mode == 'content-id') {            $reloptions[] = $reloption . '>' . $value . '&nbsp;-&nbsp;' . htmlspecialchars($key) .  '</option>';        } elseif ($mode == 'id-content') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) .  '&nbsp;-&nbsp;' . $value . '</option>';        } elseif ($mode == 'id-only') {            $reloptions[] = $reloption . '>' . htmlspecialchars($key) . '</option>';        }    } // end foreach    return $reloptions;} // end of 'PMA__foreignDropdownBuild' function/** * Outputs dropdown with values of foreign fields * * @param array  $disp_row        array of the displayed row * @param string $foreign_field   the foreign field * @param string $foreign_display the foreign field to display * @param string $data            the current data of the dropdown (field in row) * @param int    $max             maximum number of items in the dropdown * * @return  string   the <option value=""><option>s * * @access  public */function PMA_foreignDropdown($disp_row, $foreign_field, $foreign_display, $data,    $max = null){    if (null === $max) {        $max = $GLOBALS['cfg']['ForeignKeyMaxLimit'];    }    $foreign = array();    // collect the data    foreach ($disp_row as $relrow) {        $key   = $relrow[$foreign_field];        // if the display field has been defined for this foreign table        if ($foreign_display) {            $value  = $relrow[$foreign_display];        } else {            $value = '';        } // end if ($foreign_display)        $foreign[$key] = $value;    } // end foreach    // put the dropdown sections in correct order    $top = array();    $bottom = array();    if ($foreign_display) {        if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'], 'array')) {            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][0])) {                $top = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][0]                );            }            if (PMA_isValid($GLOBALS['cfg']['ForeignKeyDropdownOrder'][1])) {                $bottom = PMA__foreignDropdownBuild(                    $foreign,                    $data,                    $GLOBALS['cfg']['ForeignKeyDropdownOrder'][1]                );            }        } else {            $top = PMA__foreignDropdownBuild($foreign, $data, 'id-content');            $bottom = PMA__foreignDropdownBuild($foreign, $data, 'content-id');        }    } else {        $top = PMA__foreignDropdownBuild($foreign, $data, 'id-only');    }    // beginning of dropdown    $ret = '<option value="">&nbsp;</option>';    $top_count = count($top);    if ($max == -1 || $top_count < $max) {        $ret .= implode('', $top);        if ($foreign_display && $top_count > 0) {            // this empty option is to visually mark the beginning of the            // second series of values (bottom)            $ret .= '<option value="">&nbsp;</option>';        }    }    if ($foreign_display) {        $ret .= implode('', $bottom);    }    return $ret;} // end of 'PMA_foreignDropdown()' function/** * Gets foreign keys in preparation for a drop-down selector * * @param array  $foreigners     array of the foreign keys * @param string $field          the foreign field name * @param bool   $override_total whether to override the total * @param string $foreign_filter a possible filter * @param string $foreign_limit  a possible LIMIT clause * * @return  array    data about the foreign keys * * @access  public */function PMA_getForeignData($foreigners, $field, $override_total, $foreign_filter, $foreign_limit){    // we always show the foreign field in the drop-down; if a display    // field is defined, we show it besides the foreign field    $foreign_link = false;    if ($foreigners && isset($foreigners[$field])) {        $foreigner       = $foreigners[$field];        $foreign_db      = $foreigner['foreign_db'];        $foreign_table   = $foreigner['foreign_table'];        $foreign_field   = $foreigner['foreign_field'];        // Count number of rows in the foreign table. Currently we do        // not use a drop-down if more than 200 rows in the foreign table,        // for speed reasons and because we need a better interface for this.        //        // We could also do the SELECT anyway, with a LIMIT, and ensure that        // the current value of the field is one of the choices.        $the_total   = PMA_Table::countRecords($foreign_db, $foreign_table);        if ($override_total == true || $the_total < $GLOBALS['cfg']['ForeignKeyMaxLimit']) {            // foreign_display can be false if no display field defined:            $foreign_display = PMA_getDisplayField($foreign_db, $foreign_table);            $f_query_main = 'SELECT ' . PMA_backquote($foreign_field)                        . (($foreign_display == false) ? '' : ', ' . PMA_backquote($foreign_display));            $f_query_from = ' FROM ' . PMA_backquote($foreign_db) . '.' . PMA_backquote($foreign_table);            $f_query_filter = empty($foreign_filter) ? '' : ' WHERE ' . PMA_backquote($foreign_field)                            . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                            . (($foreign_display == false) ? '' : ' OR ' . PMA_backquote($foreign_display)                                . ' LIKE "%' . PMA_sqlAddSlashes($foreign_filter, true) . '%"'                                );            $f_query_order = ($foreign_display == false) ? '' :' ORDER BY ' . PMA_backquote($foreign_table) . '.' . PMA_backquote($foreign_display);            $f_query_limit = isset($foreign_limit) ? $foreign_limit : '';            if (!empty($foreign_filter)) {                $res = PMA_DBI_query('SELECT COUNT(*)' . $f_query_from . $f_query_filter);                if ($res) {                    $the_total = PMA_DBI_fetch_value($res);                    @PMA_DBI_free_result($res);                } else {                    $the_total = 0;                }            }            $disp  = PMA_DBI_query($f_query_main . $f_query_from . $f_query_filter . $f_query_order . $f_query_limit);            if ($disp && PMA_DBI_num_rows($disp) > 0) {                // If a resultset has been created, pre-cache it in the $disp_row array                // This helps us from not needing to use mysql_data_seek by accessing a pre-cached                // PHP array. Usually those resultsets are not that big, so a performance hit should                // not be expected.                $disp_row = array();                while ($single_disp_row = @PMA_DBI_fetch_assoc($disp)) {                    $disp_row[] = $single_disp_row;                }                @PMA_DBI_free_result($disp);            }        } else {            $disp_row = null;            $foreign_link = true;        }    }  // end if $foreigners    $foreignData['foreign_link'] = $foreign_link;    $foreignData['the_total'] = isset($the_total) ? $the_total : null;    $foreignData['foreign_display'] = isset($foreign_display) ? $foreign_display : null;    $foreignData['disp_row'] = isset($disp_row) ? $disp_row : null;    $foreignData['foreign_field'] = isset($foreign_field) ? $foreign_field : null;    return $foreignData;} // end of 'PMA_getForeignData()' function/** * Finds all related tables * * @param string $from whether to go from master to foreign or vice versa * * @return  boolean  always true * * @global  array    $tab_left the list of tables that we still couldn't connect * @global  array    $tab_know the list of allready connected tables * @global  string   $fromclause * * @access  private */function PMA_getRelatives($from){    global $tab_left, $tab_know, $fromclause;    if ($from == 'master') {        $to    = 'foreign';    } else {        $to    = 'master';    }    $in_know = '(\'' . implode('\', \'', $tab_know) . '\')';    $in_left = '(\'' . implode('\', \'', $tab_left) . '\')';    $rel_query = 'SELECT *'               . '  FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db'])               .       '.' . PMA_backquote($GLOBALS['cfgRelation']['relation'])               . ' WHERE ' . $from . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $to   . '_db = \'' . PMA_sqlAddSlashes($GLOBALS['db']) . '\''               . '   AND ' . $from . '_table IN ' . $in_know               . '   AND ' . $to   . '_table IN ' . $in_left;    $relations = @PMA_DBI_query($rel_query, $GLOBALS['controllink']);    while ($row = PMA_DBI_fetch_assoc($relations)) {        $found_table                = $row[$to . '_table'];        if (isset($tab_left[$found_table])) {            $fromclause                .= "\n" . ' LEFT JOIN '                . PMA_backquote($GLOBALS['db']) . '.' . PMA_backquote($row[$to . '_table']) . ' ON '                . PMA_backquote($row[$from . '_table']) . '.'                . PMA_backquote($row[$from . '_field']) . ' = '                . PMA_backquote($row[$to . '_table']) . '.'                . PMA_backquote($row[$to . '_field']) . ' ';            $tab_know[$found_table] = $found_table;            unset($tab_left[$found_table]);        }    } // end while    return true;} // end of the "PMA_getRelatives()" function/** * Rename a field in relation tables * * usually called after a field in a table was renamed in tbl_alter.php * * @param string $db       databse name * @param string $table    table name * @param string $field    old field name * @param string $new_name new field name * * @return nothing */function PMA_REL_renameField($db, $table, $field, $new_name){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['displaywork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                      . '   SET display_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE db_name       = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND table_name    = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND display_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    }    if ($cfgRelation['relwork']) {        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET master_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE master_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND master_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);        $table_query = 'UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                      . '   SET foreign_field = \'' . PMA_sqlAddSlashes($new_name) . '\''                      . ' WHERE foreign_db    = \'' . PMA_sqlAddSlashes($db) . '\''                      . '   AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                      . '   AND foreign_field = \'' . PMA_sqlAddSlashes($field) . '\'';        PMA_query_as_controluser($table_query);    } // end if relwork}/** * Create a PDF page * * @param string $newpage     name of the new PDF page * @param array  $cfgRelation * @param string $db          database name * * @return string   $pdf_page_number */function PMA_REL_create_page($newpage, $cfgRelation, $db){    if (! isset($newpage) || $newpage == '') {        $newpage = __('no description');    }    $ins_query   = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                 . ' (db_name, page_descr)'                 . ' VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \'' . PMA_sqlAddSlashes($newpage) . '\')';    PMA_query_as_controluser($ins_query, false);    return PMA_DBI_insert_id(isset($GLOBALS['controllink']) ? $GLOBALS['controllink'] : '');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Gets tables informations and displays top links */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_import.php&amp;back=tbl_import.php';require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';$import_type = 'table';require_once './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * * @package PhpMyAdmin */class PMA_Theme_Manager{    /**     * @var string path to theme folder     * @access protected     */    var $_themes_path;    /**     * @var array available themes     */    var $themes = array();    /**     * @var string  cookie name     */    var $cookie_name = 'pma_theme';    /**     * @var boolean     */    var $per_server = false;    /**     * @var string name of active theme     */    var $active_theme = '';    /**     * @var PMA_Theme PMA_Theme active theme     */    var $theme = null;    /**     * @var string     */    var $theme_default = 'original';    function __construct()    {        $this->init();    }    /**     * sets path to folder containing the themes     *     * @param string  $path   path to themes folder     * @return  boolean success     */    function setThemesPath($path)    {        if (! $this->_checkThemeFolder($path)) {            return false;        }        $this->_themes_path = trim($path);        return true;    }    /**     * @public     * @return  string     */    function getThemesPath()    {        return $this->_themes_path;    }    /**     * sets if there are different themes per server     *     * @param boolean $per_server     */    function setThemePerServer($per_server)    {        $this->per_server  = (bool) $per_server;    }    function init()    {        $this->themes = array();        $this->theme_default = 'original';        $this->active_theme = '';        if (! $this->setThemesPath($GLOBALS['cfg']['ThemePath'])) {            return false;        }        $this->setThemePerServer($GLOBALS['cfg']['ThemePerServer']);        $this->loadThemes();        $this->theme = new PMA_Theme;        if (! $this->checkTheme($GLOBALS['cfg']['ThemeDefault'])) {            trigger_error(                sprintf(                    __('Default theme %s not found!'),                    htmlspecialchars($GLOBALS['cfg']['ThemeDefault'])                    ),                E_USER_ERROR                );            $GLOBALS['cfg']['ThemeDefault'] = false;        }        $this->theme_default = $GLOBALS['cfg']['ThemeDefault'];        // check if user have a theme cookie        if (! $this->getThemeCookie()         || ! $this->setActiveTheme($this->getThemeCookie())) {            // otherwise use default theme            if ($GLOBALS['cfg']['ThemeDefault']) {                $this->setActiveTheme($GLOBALS['cfg']['ThemeDefault']);            } else {                // or original theme                $this->setActiveTheme('original');            }        }    }    function checkConfig()    {        if ($this->_themes_path != trim($GLOBALS['cfg']['ThemePath'])         || $this->theme_default != $GLOBALS['cfg']['ThemeDefault']) {            $this->init();        } else {            // at least the theme path needs to be checked every time for new            // themes, as there is no other way at the moment to keep track of            // new or removed themes            $this->loadThemes();        }    }    function setActiveTheme($theme = null)    {        if (! $this->checkTheme($theme)) {            trigger_error(                sprintf(                    __('Theme %s not found!'),                    htmlspecialchars($theme)                ),                E_USER_ERROR);            return false;        }        $this->active_theme = $theme;        $this->theme = $this->themes[$theme];        // need to set later        //$this->setThemeCookie();        return true;    }    /**     * @return  string  cookie name     */    function getThemeCookieName()    {        // Allow different theme per server        if (isset($GLOBALS['server']) && $this->per_server) {            return $this->cookie_name . '-' . $GLOBALS['server'];        } else {            return $this->cookie_name;        }    }    /**     * returns name of theme stored in the cookie     * @return  string  theme name from cookie     */    function getThemeCookie()    {        if (isset($_COOKIE[$this->getThemeCookieName()])) {            return $_COOKIE[$this->getThemeCookieName()];        }        return false;    }    /**     * save theme in cookie     *     * @return bool true     */    function setThemeCookie()    {        $GLOBALS['PMA_Config']->setCookie($this->getThemeCookieName(), $this->theme->id,            $this->theme_default);        // force a change of a dummy session variable to avoid problems        // with the caching of phpmyadmin.css.php        $GLOBALS['PMA_Config']->set('theme-update', $this->theme->id);        return true;    }    /**     * @private     * @param string $folder     * @return  boolean     */    private function _checkThemeFolder($folder)    {        if (! is_dir($folder)) {            trigger_error(                sprintf(__('Theme path not found for theme %s!'),                    htmlspecialchars($folder)),                E_USER_ERROR);            return false;        }        return true;    }    /**     * read all themes     *     * @return bool true     */    function loadThemes()    {        $this->themes = array();        if ($handleThemes = opendir($this->getThemesPath())) {            // check for themes directory            while (false !== ($PMA_Theme = readdir($handleThemes))) {                // Skip non dirs, . and ..                if ($PMA_Theme == '.' || $PMA_Theme == '..' || ! is_dir($this->getThemesPath() . '/' . $PMA_Theme)) {                    continue;                }                if (array_key_exists($PMA_Theme, $this->themes)) {                    continue;                }                $new_theme = PMA_Theme::load($this->getThemesPath() . '/' . $PMA_Theme);                if ($new_theme) {                    $new_theme->setId($PMA_Theme);                    $this->themes[$PMA_Theme] = $new_theme;                }            } // end get themes            closedir($handleThemes);        } else {            trigger_error(                'phpMyAdmin-ERROR: cannot open themes folder: ' . $this->getThemesPath(),                E_USER_WARNING);            return false;        } // end check for themes directory        ksort($this->themes);        return true;    }    /**     * checks if given theme name is a known theme     *     * @param string  $theme  name fo theme to check for     * @return bool     */    function checkTheme($theme)    {        if (! array_key_exists($theme, $this->themes)) {            return false;        }        return true;    }    /**     * returns HTML selectbox, with or without form enclosed     *     * @param boolean $form   whether enclosed by from tags or not     * @return string     */    function getHtmlSelectBox($form = true)    {        $select_box = '';        if ($form) {            $select_box .= '<form name="setTheme" method="post" action="index.php"'                .' target="_parent">';            $select_box .=  PMA_generate_common_hidden_inputs();        }        $theme_preview_path= './themes.php';        $theme_preview_href = '<a href="' . $theme_preview_path . '" target="themes" class="themeselect">';        $select_box .=  $theme_preview_href . __('Theme') . '</a>:' . "\n";        $select_box .=  '<select name="set_theme" xml:lang="en" dir="ltr" class="autosubmit">';        foreach ($this->themes as $each_theme_id => $each_theme) {            $select_box .=  '<option value="' . $each_theme_id . '"';            if ($this->active_theme === $each_theme_id) {                $select_box .=  ' selected="selected"';            }            $select_box .=  '>' . htmlspecialchars($each_theme->getName()) . '</option>';        }        $select_box .=  '</select>';        if ($form) {            $select_box .=  '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>';            $select_box .=  '</form>';        }        return $select_box;    }    /**     * enables backward compatibility     */    function makeBc()    {        $GLOBALS['theme']           = $this->theme->getId();        $GLOBALS['pmaThemePath']    = $this->theme->getPath();        $GLOBALS['pmaThemeImage']   = $this->theme->getImgPath();        /**         * load layout file if exists         */        if (file_exists($this->theme->getLayoutFile())) {            include $this->theme->getLayoutFile();        }    }    /**     * prints out preview for every theme     *     */    function printPreviews()    {        foreach ($this->themes as $each_theme) {            $each_theme->printPreview();        } // end 'open themes'    }    /**     * returns PMA_Theme object for fall back theme     * @return object   PMA_Theme     */    function getFallBackTheme()    {        if (isset($this->themes['original'])) {            return $this->themes['original'];        }        return false;    }    /**     * prints css data     *     * @param string $type     * @return bool     */    function printCss($type)    {        if ($this->theme->loadCss($type)) {            return true;        }        // if loading css for this theme failed, try default theme css        $fallback_theme = $this->getFallBackTheme();        if ($fallback_theme && $fallback_theme->loadCss($type)) {            return true;        }        return false;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Core script for import, this is just the glue around all other stuff * * @package PhpMyAdmin *//** * Get the variables sent or posted to this script and a core script */require_once './libraries/common.inc.php';//require_once './libraries/display_import_functions.lib.php';// reset import messages for ajax request$_SESSION['Import_message']['message'] = null;$_SESSION['Import_message']['go_back_url'] = null;// default values$GLOBALS['reload'] = false;// Are we just executing plain query or sql file? (eg. non import, but query box/window run)if (!empty($sql_query)) {    // run SQL query    $import_text = $sql_query;    $import_type = 'query';    $format = 'sql';    // refresh left frame on changes in table or db structure    if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $sql_query)) {        $GLOBALS['reload'] = true;    }    $sql_query = '';} elseif (!empty($sql_localfile)) {    // run SQL file on server    $local_import_file = $sql_localfile;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_localfile);} elseif (!empty($sql_file)) {    // run uploaded SQL file    $import_file = $sql_file;    $import_type = 'queryfile';    $format = 'sql';    unset($sql_file);} elseif (!empty($id_bookmark)) {    // run bookmark    $import_type = 'query';    $format = 'sql';}// If we didn't get any parameters, either user called this directly, or// upload limit has been reached, let's assume the second possibility.;if ($_POST == array() && $_GET == array()) {    include_once './libraries/header.inc.php';    $message = PMA_Message::error(__('You probably tried to upload too large file. Please refer to %sdocumentation%s for ways to workaround this limit.'));    $message->addParam('[a@./Documentation.html#faq1_16@_blank]');    $message->addParam('[/a]');    // so we can obtain the message    $_SESSION['Import_message']['message'] = $message->getDisplay();    $_SESSION['Import_message']['go_back_url'] = $goto;    $message->display();    include './libraries/footer.inc.php';}// Check needed parametersPMA_checkParameters(array('import_type', 'format'));// We don't want anything special in format$format = PMA_securePath($format);// Import functionsrequire_once './libraries/import.lib.php';// Create error and goto urlif ($import_type == 'table') {    $err_url = 'tbl_import.php?' . PMA_generate_common_url($db, $table);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'tbl_import.php';} elseif ($import_type == 'database') {    $err_url = 'db_import.php?' . PMA_generate_common_url($db);    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'db_import.php';} elseif ($import_type == 'server') {    $err_url = 'server_import.php?' . PMA_generate_common_url();    $_SESSION['Import_message']['go_back_url'] = $err_url;    $goto = 'server_import.php';} else {    if (empty($goto) || !preg_match('@^(server|db|tbl)(_[a-z]*)*\.php$@i', $goto)) {        if (strlen($table) && strlen($db)) {            $goto = 'tbl_structure.php';        } elseif (strlen($db)) {            $goto = 'db_structure.php';        } else {            $goto = 'server_sql.php';        }    }    if (strlen($table) && strlen($db)) {        $common = PMA_generate_common_url($db, $table);    } elseif (strlen($db)) {        $common = PMA_generate_common_url($db);    } else {        $common = PMA_generate_common_url();    }    $err_url  = $goto              . '?' . $common              . (preg_match('@^tbl_[a-z]*\.php$@', $goto) ? '&amp;table=' . htmlspecialchars($table) : '');    $_SESSION['Import_message']['go_back_url'] = $err_url;}if (strlen($db)) {    PMA_DBI_select_db($db);}@set_time_limit($cfg['ExecTimeLimit']);if (!empty($cfg['MemoryLimit'])) {    @ini_set('memory_limit', $cfg['MemoryLimit']);}$timestamp = time();if (isset($allow_interrupt)) {    $maximum_time = ini_get('max_execution_time');} else {    $maximum_time = 0;}// set default values$timeout_passed = false;$error = false;$read_multiply = 1;$finished = false;$offset = 0;$max_sql_len = 0;$file_to_unlink = '';$sql_query = '';$sql_query_disabled = false;$go_sql = false;$executed_queries = 0;$run_query = true;$charset_conversion = false;$reset_charset = false;$bookmark_created = false;// Bookmark Support: get a query back from bookmark if requiredif (!empty($id_bookmark)) {    $id_bookmark = (int)$id_bookmark;    include_once './libraries/bookmark.lib.php';    switch ($action_bookmark) {        case 0: // bookmarked query that have to be run            $import_text = PMA_Bookmark_get($db, $id_bookmark, 'id', isset($action_bookmark_all));            if (isset($bookmark_variable) && !empty($bookmark_variable)) {                $import_text = preg_replace('|/\*(.*)\[VARIABLE\](.*)\*/|imsU', '${1}' . PMA_sqlAddSlashes($bookmark_variable) . '${2}', $import_text);            }            // refresh left frame on changes in table or db structure            if (preg_match('/^(CREATE|ALTER|DROP)\s+(VIEW|TABLE|DATABASE|SCHEMA)\s+/i', $import_text)) {                $GLOBALS['reload'] = true;            }            break;        case 1: // bookmarked query that have to be displayed            $import_text = PMA_Bookmark_get($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data['sql_query'] = $import_text;                $extra_data['action_bookmark'] = $action_bookmark;                $message = PMA_Message::success(__('Showing bookmark'));                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;            }            break;        case 2: // bookmarked query that have to be deleted            $import_text = PMA_Bookmark_get($db, $id_bookmark);            PMA_Bookmark_delete($db, $id_bookmark);            if ($GLOBALS['is_ajax_request'] == true) {                $message = PMA_Message::success(__('The bookmark has been deleted.'));                $extra_data['action_bookmark'] = $action_bookmark;                $extra_data['id_bookmark'] = $id_bookmark;                PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);            } else {                $run_query = false;                $error = true; // this is kind of hack to skip processing the query            }            break;    }} // end bookmarks reading// Do no run query if we show PHP codeif (isset($GLOBALS['show_as_php'])) {    $run_query = false;    $go_sql = true;}// Store the query as a bookmark before executing it if bookmarklabel was givenif (!empty($bkm_label) && !empty($import_text)) {    include_once './libraries/bookmark.lib.php';    $bfields = array(                 'dbase' => $db,                 'user'  => $cfg['Bookmark']['user'],                 'query' => urlencode($import_text),                 'label' => $bkm_label    );    // Should we replace bookmark?    if (isset($bkm_replace)) {        $bookmarks = PMA_Bookmark_getList($db);        foreach ($bookmarks as $key => $val) {            if ($val == $bkm_label) {                PMA_Bookmark_delete($db, $key);            }        }    }    PMA_Bookmark_save($bfields, isset($bkm_all_users));    $bookmark_created = true;} // end store bookmarks// We can not read all at once, otherwise we can run out of memory$memory_limit = trim(@ini_get('memory_limit'));// 2 MB as defaultif (empty($memory_limit)) {    $memory_limit = 2 * 1024 * 1024;}// In case no memory limit we work on 10MB chunksif ($memory_limit == -1) {    $memory_limit = 10 * 1024 * 1024;}// Calculate value of the limitif (strtolower(substr($memory_limit, -1)) == 'm') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'k') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024;} elseif (strtolower(substr($memory_limit, -1)) == 'g') {    $memory_limit = (int)substr($memory_limit, 0, -1) * 1024 * 1024 * 1024;} else {    $memory_limit = (int)$memory_limit;}$read_limit = $memory_limit / 8; // Just to be sure, there might be lot of memory needed for uncompression// handle filenamesif (!empty($local_import_file) && !empty($cfg['UploadDir'])) {    // sanitize $local_import_file as it comes from a POST    $local_import_file = PMA_securePath($local_import_file);    $import_file  = PMA_userDir($cfg['UploadDir']) . $local_import_file;} elseif (empty($import_file) || !is_uploaded_file($import_file)) {    $import_file  = 'none';}// Do we have file to import?if ($import_file != 'none' && !$error) {    // work around open_basedir and other limitations    $open_basedir = @ini_get('open_basedir');    // If we are on a server with open_basedir, we must move the file    // before opening it. The doc explains how to create the "./tmp"    // directory    if (!empty($open_basedir)) {        $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');        if (is_writable($tmp_subdir)) {            $import_file_new = $tmp_subdir . basename($import_file) . uniqid();            if (move_uploaded_file($import_file, $import_file_new)) {                $import_file = $import_file_new;                $file_to_unlink = $import_file_new;            }            $size = filesize($import_file);        }    }    /**     *  Handle file compression     *  @todo duplicate code exists in File.class.php     */    $compression = PMA_detectCompression($import_file);    if ($compression === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    } else {        switch ($compression) {            case 'application/bzip2':                if ($cfg['BZipDump'] && @function_exists('bzopen')) {                    $import_handle = @bzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/gzip':                if ($cfg['GZipDump'] && @function_exists('gzopen')) {                    $import_handle = @gzopen($import_file, 'r');                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'application/zip':                if ($cfg['ZipDump'] && @function_exists('zip_open')) {                    /**                     * Load interface for zip extension.                     */                    include_once './libraries/zip_extension.lib.php';                    $result = PMA_getZipContents($import_file);                    if (! empty($result['error'])) {                        $message = PMA_Message::rawError($result['error']);                        $error = true;                    } else {                        $import_text = $result['data'];                    }                } else {                    $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                    $message->addParam($compression);                    $error = true;                }                break;            case 'none':                $import_handle = @fopen($import_file, 'r');                break;            default:                $message = PMA_Message::error(__('You attempted to load file with unsupported compression (%s). Either support for it is not implemented or disabled by your configuration.'));                $message->addParam($compression);                $error = true;                break;        }    }    // use isset() because zip compression type does not use a handle    if (!$error && isset($import_handle) && $import_handle === false) {        $message = PMA_Message::error(__('File could not be read'));        $error = true;    }} elseif (!$error) {    if (! isset($import_text) || empty($import_text)) {        $message = PMA_Message::error(__('No data was received to import. Either no file name was submitted, or the file size exceeded the maximum size permitted by your PHP configuration. See [a@./Documentation.html#faq1_16@Documentation]FAQ 1.16[/a].'));        $error = true;    }}// so we can obtain the message//$_SESSION['Import_message'] = $message->getDisplay();// Convert the file's charset if necessaryif ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE && isset($charset_of_file)) {    if ($charset_of_file != 'utf-8') {        $charset_conversion = true;    }} elseif (isset($charset_of_file) && $charset_of_file != 'utf8') {    if (PMA_DRIZZLE) {        // Drizzle doesn't support other character sets, so we can't fallback to SET NAMES - throw an error        $error = true;        $message = PMA_Message::error(__('Cannot convert file\'s character set without character set conversion library'));    } else {        PMA_DBI_query('SET NAMES \'' . $charset_of_file . '\'');        // We can not show query in this case, it is in different charset        $sql_query_disabled = true;        $reset_charset = true;    }}// Something to skip?if (!$error && isset($skip)) {    $original_skip = $skip;    while ($skip > 0) {        PMA_importGetNextChunk($skip < $read_limit ? $skip : $read_limit);        $read_multiply = 1; // Disable read progresivity, otherwise we eat all memory!        $skip -= $read_limit;    }    unset($skip);}if (!$error) {    // Check for file existance    if (!file_exists('./libraries/import/' . $format . '.php')) {        $error = true;        $message = PMA_Message::error(__('Could not load import plugins, please check your installation!'));    } else {        // Do the real import        $plugin_param = $import_type;        include './libraries/import/' . $format . '.php';    }}if (! $error && false !== $import_handle && null !== $import_handle) {    fclose($import_handle);}// Cleanup temporary fileif ($file_to_unlink != '') {    unlink($file_to_unlink);}// Reset charset back, if we did some changesif ($reset_charset) {    PMA_DBI_query('SET CHARACTER SET utf8');    PMA_DBI_query('SET SESSION collation_connection =\'' . $collation_connection . '\'');}// Show correct messageif (!empty($id_bookmark) && $action_bookmark == 2) {    $message = PMA_Message::success(__('The bookmark has been deleted.'));    $display_query = $import_text;    $error = false; // unset error marker, it was used just to skip processing} elseif (!empty($id_bookmark) && $action_bookmark == 1) {    $message = PMA_Message::notice(__('Showing bookmark'));} elseif ($bookmark_created) {    $special_message = '[br]' . sprintf(__('Bookmark %s created'), htmlspecialchars($bkm_label));} elseif ($finished && !$error) {    if ($import_type == 'query') {        $message = PMA_Message::success();    } else {        if ($import_notice) {            $message = PMA_Message::success('<em>'.__('Import has been successfully finished, %d queries executed.').'</em>');            $message->addParam($executed_queries);            $message->addString($import_notice);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        } else {            $message = PMA_Message::success(__('Import has been successfully finished, %d queries executed.'));            $message->addParam($executed_queries);            $message->addString('(' . $_FILES['import_file']['name'] . ')');        }    }}// Did we hit timeout? Tell it user.if ($timeout_passed) {    $message = PMA_Message::error(__('Script timeout passed, if you want to finish import, please resubmit same file and import will resume.'));    if ($offset == 0 || (isset($original_skip) && $original_skip == $offset)) {        $message->addString(__('However on last run no data has been parsed, this usually means phpMyAdmin won\'t be able to finish this import unless you increase php time limits.'));    }}// if there is any message, copy it into $_SESSION as well, so we can obtain it by AJAX callif (isset($message)) {    $_SESSION['Import_message']['message'] = $message->getDisplay();//  $_SESSION['Import_message']['go_back_url'] = $goto.'?'.  PMA_generate_common_url();}// Parse and analyze the query, for correct db and table name// in case of a query typed in the query window// (but if the query is too large, in case of an imported file, the parser//  can choke on it so avoid parsing)if (strlen($sql_query) <= $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {    include_once './libraries/parse_analyze.lib.php';}// There was an error?if (isset($my_die)) {    foreach ($my_die AS $key => $die) {        PMA_mysqlDie($die['error'], $die['sql'], '', $err_url, $error);    }}// we want to see the results of the last query that returned at least a rowif (! empty($last_query_with_results)) {    // but we want to show intermediate results too    $disp_query = $sql_query;    $disp_message = __('Your SQL query has been executed successfully');    $sql_query = $last_query_with_results;    $go_sql = true;}if ($go_sql) {    include './sql.php';} else {    $active_page = $goto;    include './' . $goto;}exit();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for event management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_EVN_setGlobals(){    global $event_status, $event_type, $event_interval;    $event_status        = array(                               'query'   => array('ENABLE',                                                  'DISABLE',                                                  'DISABLE ON SLAVE'),                               'display' => array('ENABLED',                                                  'DISABLED',                                                  'SLAVESIDE_DISABLED')                           );    $event_type          = array('RECURRING',                                 'ONE TIME');    $event_interval      = array('YEAR',                                 'QUARTER',                                 'MONTH',                                 'DAY',                                 'HOUR',                                 'MINUTE',                                 'WEEK',                                 'SECOND',                                 'YEAR_MONTH',                                 'DAY_HOUR',                                 'DAY_MINUTE',                                 'DAY_SECOND',                                 'HOUR_MINUTE',                                 'HOUR_SECOND',                                 'MINUTE_SECOND');}/** * Main function for the events functionality */function PMA_EVN_main(){    global $db;    PMA_EVN_setGlobals();    /**     * Process all requests     */    PMA_EVN_handleEditor();    PMA_EVN_handleExport();    /**     * Display a list of available events     */    $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` "             . "WHERE $where ORDER BY `EVENT_NAME` ASC;";    $items   = PMA_DBI_fetch_result($query);    echo PMA_RTE_getList('event', $items);    /**     * Display a link for adding a new event, if     * the user has the privileges and a link to     * toggle the state of the event scheduler.     */    echo PMA_EVN_getFooterLinks();} // end PMA_EVN_main()/** * Handles editor requests for adding or editing an item */function PMA_EVN_handleEditor(){    global $_REQUEST, $_POST, $errors, $db;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        $sql_query = '';        $item_query = PMA_EVN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                // Backup the old trigger, in case something goes wrong                $create_item = PMA_DBI_get_definition(                    $db,                    'EVENT',                    $_REQUEST['item_original_name']                );                $drop_item = "DROP EVENT " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                $result = PMA_DBI_try_query($drop_item);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_item) . '<br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $result = PMA_DBI_try_query($item_query);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                        // We dropped the old item, but were unable to create the new one                        // Try to restore the backup query                        $result = PMA_DBI_try_query($create_item);                        if (! $result) {                            // OMG, this is really bad! We dropped the query, failed to create a new one                            // and now even the backup query does not execute!                            // This should not happen, but we better handle this just in case.                            $errors[] = __('Sorry, we failed to restore the dropped event.') . '<br />'                                              . __('The backed up query was:') . "\"$create_item\"" . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                        }                    } else {                        $message = PMA_Message::success(__('Event %1$s has been modified.'));                        $message->addParam(PMA_backquote($_REQUEST['item_name']));                        $sql_query = $drop_item . $item_query;                    }                }            } else {                // 'Add a new item' mode                $result = PMA_DBI_try_query($item_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $item_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Event %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $item_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns = "`EVENT_NAME`, `EVENT_TYPE`, `STATUS`";                $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                         . "AND EVENT_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'";                $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";                $event   = PMA_DBI_fetch_single_row($query);                $extra_data['name'] = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_EVN_getRowForList($event);                $extra_data['insert'] = ! empty($event);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a trigger, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['item_changetype'])))    ) { // FIXME: this must be simpler than that        $operation = '';        if (! empty($_REQUEST['item_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $item = PMA_EVN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit event");            if (! empty($_REQUEST['item_name'])                && empty($_REQUEST['editor_process_edit'])                && empty($_REQUEST['item_changetype'])            ) {                $item = PMA_EVN_getDataFromName($_REQUEST['item_name']);                if ($item !== false) {                    $item['item_original_name'] = $item['item_name'];                }            } else {                $item = PMA_EVN_getDataFromRequest();            }            $mode = 'edit';        }        if ($item !== false) {            // Show form            $editor = PMA_EVN_getEditorForm($mode, $operation, $item);            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('title' => $title);                PMA_ajaxResponse($editor, true, $extra_data);            } else {                echo "\n\n<h2>$title</h2>\n\n$editor";                unset($_POST);                include './libraries/footer.inc.php';            }            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_EVN_handleEditor()/** * This function will generate the values that are required to for the editor * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromRequest(){    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_status',                     'item_execute_at',                     'item_interval_value',                     'item_interval_field',                     'item_starts',                     'item_ends',                     'item_definition',                     'item_preserve',                     'item_comment',                     'item_definer');    foreach ($indices as $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']        = 'ONE TIME';    $retval['item_type_toggle'] = 'RECURRING';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'RECURRING') {        $retval['item_type']        = 'RECURRING';        $retval['item_type_toggle'] = 'ONE TIME';    }    return $retval;} // end PMA_EVN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit event" form given the name of a event. * * @param   string   $name   The name of the event. * * @return  array    Data necessary to create the editor. */function PMA_EVN_getDataFromName($name){    global $db;    $retval = array();    $columns = "`EVENT_NAME`, `STATUS`, `EVENT_TYPE`, `EXECUTE_AT`, "             . "`INTERVAL_VALUE`, `INTERVAL_FIELD`, `STARTS`, `ENDS`, "             . "`EVENT_DEFINITION`, `ON_COMPLETION`, `DEFINER`, `EVENT_COMMENT`";    $where   = "EVENT_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND EVENT_NAME='" . PMA_sqlAddSlashes($name) . "'";    $query   = "SELECT $columns FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE $where;";    $item    = PMA_DBI_fetch_single_row($query);    if (! $item) {        return false;    }    $retval['item_name']   = $item['EVENT_NAME'];    $retval['item_status'] = $item['STATUS'];    $retval['item_type']   = $item['EVENT_TYPE'];    if ($retval['item_type'] == 'RECURRING') {        $retval['item_type_toggle'] = 'ONE TIME';    } else {        $retval['item_type_toggle'] = 'RECURRING';    }    $retval['item_execute_at']     = $item['EXECUTE_AT'];    $retval['item_interval_value'] = $item['INTERVAL_VALUE'];    $retval['item_interval_field'] = $item['INTERVAL_FIELD'];    $retval['item_starts']         = $item['STARTS'];    $retval['item_ends']           = $item['ENDS'];    $retval['item_preserve']       = '';    if ($item['ON_COMPLETION'] == 'PRESERVE') {        $retval['item_preserve']   = " checked='checked'";    }    $retval['item_definition'] = $item['EVENT_DEFINITION'];    $retval['item_definer']    = $item['DEFINER'];    $retval['item_comment']    = $item['EVENT_COMMENT'];    return $retval;} // end PMA_EVN_getDataFromName()/** * Displays a form used to add/edit an event * * @param   string   $mode      If the editor will be used edit an event *                              or add a new one: 'edit' or 'add'. * @param   string   $operation If the editor was previously invoked with *                              JS turned off, this will hold the name of *                              the current operation * @param   array    $item      Data for the event returned by *                              PMA_EVN_getDataFromRequest() or *                              PMA_EVN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_EVN_getEditorForm($mode, $operation, $item){    global $db, $table, $event_status, $event_type, $event_interval;    // Escape special characters    $need_escape = array(                       'item_original_name',                       'item_name',                       'item_type',                       'item_execute_at',                       'item_interval_value',                       'item_starts',                       'item_ends',                       'item_definition',                       'item_definer',                       'item_comment'                   );    foreach ($need_escape as $index) {        $item[$index] = htmlentities($item[$index], ENT_QUOTES);    }    $original_data = '';    if ($mode == 'edit') {        $original_data = "<input name='item_original_name' "                       . "type='hidden' value='{$item['item_original_name']}'/>\n";    }    // Handle some logic first    if ($operation == 'change') {        if ($item['item_type'] == 'RECURRING') {            $item['item_type']         = 'ONE TIME';            $item['item_type_toggle']  = 'RECURRING';        } else {            $item['item_type']         = 'RECURRING';            $item['item_type_toggle']  = 'ONE TIME';        }    }    if ($item['item_type'] == 'ONE TIME') {        $isrecurring_class = ' hide';        $isonetime_class   = '';    } else {        $isrecurring_class = '';        $isonetime_class   = ' hide';    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " EVENT FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_events.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_data;    $retval .= PMA_generate_common_hidden_inputs($db, $table) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Event name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' \n";    $retval .= "               value='{$item['item_name']}'\n";    $retval .= "               maxlength='64' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Status') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <select name='item_status'>\n";    foreach ($event_status['display'] as $key => $value) {        $selected = "";        if (! empty($item['item_status']) && $item['item_status'] == $value) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Event type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>";        foreach ($event_type as $key => $value) {            $selected = "";            if (! empty($item['item_type']) && $item['item_type'] == $value) {                $selected = " selected='selected'";            }            $retval .= "<option$selected>$value</option>";        }        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' \n";        $retval .= "               value='{$item['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$item['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit'\n";        $retval .= "               name='item_changetype'\n";        $retval .= "               value='";        $retval .= sprintf(__('Change to %s'), $item['item_type_toggle']);        $retval .= "' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='onetime_event_row $isonetime_class'>\n";    $retval .= "    <td>" . __('Execute at') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_execute_at'\n";    $retval .= "               value='{$item['item_execute_at']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row $isrecurring_class'>\n";    $retval .= "    <td>" . __('Execute every') . "</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='text'\n";    $retval .= "               name='item_interval_value'\n";    $retval .= "               value='{$item['item_interval_value']}' />\n";    $retval .= "        <select style='width: 49%;' name='item_interval_field'>";    foreach ($event_interval as $key => $value) {        $selected = "";        if (! empty($item['item_interval_field'])            && $item['item_interval_field'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "        </select>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('Start of recurring event', 'Start') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text'\n name='item_starts'\n";    $retval .= "               value='{$item['item_starts']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='recurring_event_row$isrecurring_class'>\n";    $retval .= "    <td>" . _pgettext('End of recurring event', 'End') . "</td>\n";    $retval .= "    <td class='nowrap'>\n";    $retval .= "        <input type='text' name='item_ends'\n";    $retval .= "               value='{$item['item_ends']}'\n";    $retval .= "               class='datetimefield' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $item['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('On completion preserve') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_preserve'{$item['item_preserve']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$item['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$item['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " EVENT FORM -->\n\n";    return $retval;} // end PMA_EVN_getEditorForm()/** * Composes the query necessary to create an event from an HTTP request. * * @return  string  The CREATE EVENT query. */function PMA_EVN_getQueryFromRequest(){    global $_REQUEST, $errors, $event_status, $event_type, $event_interval;    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    $query .= 'EVENT ';    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']) . ' ';    } else {        $errors[] = __('You must provide an event name');    }    $query .= 'ON SCHEDULE ';    if (! empty($_REQUEST['item_type']) && in_array($_REQUEST['item_type'], $event_type)) {        if ($_REQUEST['item_type'] == 'RECURRING') {            if (! empty($_REQUEST['item_interval_value'])                && !empty($_REQUEST['item_interval_field'])                && in_array($_REQUEST['item_interval_field'], $event_interval)            ) {                $query .= 'EVERY ' . intval($_REQUEST['item_interval_value']) . ' ';                $query .= $_REQUEST['item_interval_field'] . ' ';            } else {                $errors[] = __('You must provide a valid interval value for the event.');            }            if (! empty($_REQUEST['item_starts'])) {                $query .= "STARTS '" . PMA_sqlAddSlashes($_REQUEST['item_starts']) . "' ";            }            if (! empty($_REQUEST['item_ends'])) {                $query .= "ENDS '" . PMA_sqlAddSlashes($_REQUEST['item_ends']) . "' ";            }        } else {            if (! empty($_REQUEST['item_execute_at'])) {                $query .= "AT '" . PMA_sqlAddSlashes($_REQUEST['item_execute_at']) . "' ";            } else {                $errors[] = __('You must provide a valid execution time for the event.');            }        }    } else {        $errors[] = __('You must provide a valid type for the event.');    }    $query .= 'ON COMPLETION ';    if (empty($_REQUEST['item_preserve'])) {        $query .= 'NOT ';    }    $query .= 'PRESERVE ';    if (! empty($_REQUEST['item_status'])) {        foreach ($event_status['display'] as $key => $value) {            if ($value == $_REQUEST['item_status']) {                $query .= $event_status['query'][$key] . ' ';                break;            }        }    }    $query .= 'DO ';    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide an event definition.');    }    return $query;} // end PMA_EVN_getQueryFromRequest()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common Option Constants For DBI Functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Force STORE_RESULT method, ignored by classic MySQL. */define('PMA_DBI_QUERY_STORE',       1);/** * Do not read whole query. */define('PMA_DBI_QUERY_UNBUFFERED',  2);/** * Get session variable. */define('PMA_DBI_GETVAR_SESSION',    1);/** * Get global variable. */define('PMA_DBI_GETVAR_GLOBAL',     2);/** * Checks whether database extension is loaded * * @param string $extension mysql extension to check * * @return bool */function PMA_DBI_checkDbExtension($extension = 'mysql'){    if ($extension == 'drizzle' && function_exists('drizzle_create')) {        return true;    } else if (function_exists($extension . '_connect')) {        return true;    }    return false;}/** * check for requested extension */if (! PMA_DBI_checkDbExtension($GLOBALS['cfg']['Server']['extension'])) {    // if it fails try alternative extension ...    // and display an error ...    /**     * @todo add different messages for alternative extension     * and complete fail (no alternative extension too)     */    PMA_warnMissingExtension(        $GLOBALS['cfg']['Server']['extension'],        false,        PMA_showDocu('faqmysql')    );    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        $alternativ_extension = 'mysqli';    } else {        $alternativ_extension = 'mysql';    }    if (! PMA_DBI_checkDbExtension($alternativ_extension)) {        // if alternative fails too ...        PMA_warnMissingExtension(            $GLOBALS['cfg']['Server']['extension'],            true,            PMA_showDocu('faqmysql')        );    }    $GLOBALS['cfg']['Server']['extension'] = $alternativ_extension;    unset($alternativ_extension);}/** * Including The DBI Plugin */require_once './libraries/dbi/'    . $GLOBALS['cfg']['Server']['extension'] . '.dbi.lib.php';/** * runs a query * * @param string $query               SQL query to execte * @param mixed  $link                optional database link to use * @param int    $options             optional query options * @param bool   $cache_affected_rows whether to cache affected rows * * @return mixed */function PMA_DBI_query($query, $link = null, $options = 0, $cache_affected_rows = true){    $res = PMA_DBI_try_query($query, $link, $options, $cache_affected_rows)        or PMA_mysqlDie(PMA_DBI_getError($link), $query);    return $res;}/** * runs a query and returns the result * * @param string   $query               query to run * @param resource $link                mysql link resource * @param integer  $options             query options * @param bool     $cache_affected_rows whether to cache affected row * * @return mixed */function PMA_DBI_try_query($query, $link = null, $options = 0, $cache_affected_rows = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true);    }    $r = PMA_DBI_real_query($query, $link, $options);    if ($cache_affected_rows) {        $GLOBALS['cached_affected_rows'] = PMA_DBI_affected_rows($link, $get_from_cache = false);    }    if ($GLOBALS['cfg']['DBG']['sql']) {        $time = microtime(true) - $time;        $hash = md5($query);        if (isset($_SESSION['debug']['queries'][$hash])) {            $_SESSION['debug']['queries'][$hash]['count']++;        } else {            $_SESSION['debug']['queries'][$hash] = array();            if ($r == false) {                $_SESSION['debug']['queries'][$hash]['error'] = '<b style="color:red">'.mysqli_error($link).'</b>';            }            $_SESSION['debug']['queries'][$hash]['count'] = 1;            $_SESSION['debug']['queries'][$hash]['query'] = $query;            $_SESSION['debug']['queries'][$hash]['time'] = $time;        }        $trace = array();        foreach (debug_backtrace() as $trace_step) {            $trace[] = PMA_Error::relPath($trace_step['file']) . '#'                . $trace_step['line'] . ': '                . (isset($trace_step['class']) ? $trace_step['class'] : '')                //. (isset($trace_step['object']) ? get_class($trace_step['object']) : '')                . (isset($trace_step['type']) ? $trace_step['type'] : '')                . (isset($trace_step['function']) ? $trace_step['function'] : '')                . '('                . (isset($trace_step['params']) ? implode(', ', $trace_step['params']) : '')                . ')'                ;        }        $_SESSION['debug']['queries'][$hash]['trace'][] = $trace;    }    if ($r != false && PMA_Tracker::isActive() == true ) {        PMA_Tracker::handleQuery($query);    }    return $r;}/** * converts charset of a mysql message, usually coming from mysql_error(), * into PMA charset, usally UTF-8 * uses language to charset mapping from mysql/share/errmsg.txt * and charset names to ISO charset from information_schema.CHARACTER_SETS * * @param string $message the message * * @return  string  $message */function PMA_DBI_convert_message($message){    // latin always last!    $encodings = array(        'japanese'      => 'EUC-JP', //'ujis',        'japanese-sjis' => 'Shift-JIS', //'sjis',        'korean'        => 'EUC-KR', //'euckr',        'russian'       => 'KOI8-R', //'koi8r',        'ukrainian'     => 'KOI8-U', //'koi8u',        'greek'         => 'ISO-8859-7', //'greek',        'serbian'       => 'CP1250', //'cp1250',        'estonian'      => 'ISO-8859-13', //'latin7',        'slovak'        => 'ISO-8859-2', //'latin2',        'czech'         => 'ISO-8859-2', //'latin2',        'hungarian'     => 'ISO-8859-2', //'latin2',        'polish'        => 'ISO-8859-2', //'latin2',        'romanian'      => 'ISO-8859-2', //'latin2',        'spanish'       => 'CP1252', //'latin1',        'swedish'       => 'CP1252', //'latin1',        'italian'       => 'CP1252', //'latin1',        'norwegian-ny'  => 'CP1252', //'latin1',        'norwegian'     => 'CP1252', //'latin1',        'portuguese'    => 'CP1252', //'latin1',        'danish'        => 'CP1252', //'latin1',        'dutch'         => 'CP1252', //'latin1',        'english'       => 'CP1252', //'latin1',        'french'        => 'CP1252', //'latin1',        'german'        => 'CP1252', //'latin1',    );    if ($server_language = PMA_DBI_fetch_value('SHOW VARIABLES LIKE \'language\';', 0, 1)) {        $found = array();        if (preg_match('&(?:\\\|\\/)([^\\\\\/]*)(?:\\\|\\/)$&i', $server_language, $found)) {            $server_language = $found[1];        }    }    if (! empty($server_language) && isset($encodings[$server_language])) {        if (function_exists('iconv')) {            if ((@stristr(PHP_OS, 'AIX'))                && (@strcasecmp(ICONV_IMPL, 'unknown') == 0)                && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)            ) {                include_once './libraries/iconv_wrapper.lib.php';                $message = PMA_aix_iconv_wrapper(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            } else {                $message = iconv(                    $encodings[$server_language],                    'utf-8' . $GLOBALS['cfg']['IconvExtraParams'],                    $message                );            }        } elseif (function_exists('recode_string')) {            $message = recode_string(                $encodings[$server_language] . '..'  . 'utf-8',                $message            );        } elseif (function_exists('libiconv')) {            $message = libiconv($encodings[$server_language], 'utf-8', $message);        } elseif (function_exists('mb_convert_encoding')) {            // do not try unsupported charsets            if (! in_array($server_language, array('ukrainian', 'greek', 'serbian'))) {                $message = mb_convert_encoding(                    $message,                    'utf-8',                    $encodings[$server_language]                );            }        }    } else {        /**         * @todo lang not found, try all, what TODO ?         */    }    return $message;}/** * returns array with table names for given db * * @param string $database name of database * @param mixed  $link     mysql link resource|object * * @return  array   tables names */function PMA_DBI_get_tables($database, $link = null){    return PMA_DBI_fetch_result(        'SHOW TABLES FROM ' . PMA_backquote($database) . ';',        null,        0,        $link,        PMA_DBI_QUERY_STORE    );}/** * usort comparison callback * * @param string $a first argument to sort * @param string $b second argument to sort * * @return  integer  a value representing whether $a should be before $b in the *                   sorted array or not * * @access  private */function PMA_usort_comparison_callback($a, $b){    if ($GLOBALS['cfg']['NaturalOrder']) {        $sorter = 'strnatcasecmp';    } else {        $sorter = 'strcasecmp';    }    /* No sorting when key is not present */    if (! isset($a[$GLOBALS['callback_sort_by']]) || ! isset($b[$GLOBALS['callback_sort_by']])) {        return 0;    }    // produces f.e.:    // return -1 * strnatcasecmp($a["SCHEMA_TABLES"], $b["SCHEMA_TABLES"])    return ($GLOBALS['callback_sort_order'] == 'ASC' ? 1 : -1) * $sorter($a[$GLOBALS['callback_sort_by']], $b[$GLOBALS['callback_sort_by']]);} // end of the 'PMA_usort_comparison_callback()' function/** * returns array of all tables in given db or dbs * this function expects unquoted names: * RIGHT: my_database * WRONG: `my_database` * WRONG: my\_database * if $tbl_is_group is true, $table is used as filter for table names * if $tbl_is_group is 'comment, $table is used as filter for table comments * * <code> * PMA_DBI_get_tables_full('my_database'); * PMA_DBI_get_tables_full('my_database', 'my_table')); * PMA_DBI_get_tables_full('my_database', 'my_tables_', true)); * PMA_DBI_get_tables_full('my_database', 'my_tables_', 'comment')); * </code> * * @param string          $database     database * @param string|bool     $table        table or false * @param boolean|string  $tbl_is_group $table is a table group * @param mixed           $link         mysql link * @param integer         $limit_offset zero-based offset for the count * @param boolean|integer $limit_count  number of tables to return * @param string          $sort_by      table attribute to sort by * @param string          $sort_order   direction to sort (ASC or DESC) * * @todo    move into PMA_Table * * @return  array           list of tables in given db(s) */function PMA_DBI_get_tables_full($database, $table = false, $tbl_is_group = false, $link = null,     $limit_offset = 0, $limit_count = false, $sort_by = 'Name', $sort_order = 'ASC'){    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxTableList'];    }    // prepare and check parameters    if (! is_array($database)) {        $databases = array($database);    } else {        $databases = $database;    }    $tables = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // get table information from information_schema        if ($table) {            if (true === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_NAME` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } elseif ('comment' === $tbl_is_group) {                $sql_where_table = 'AND t.`TABLE_COMMENT` LIKE \''                  . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table)) . '%\'';            } else {                $sql_where_table = 'AND t.`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\'';            }        } else {            $sql_where_table = '';        }        // for PMA bc:        // `SCHEMA_FIELD_NAME` AS `SHOW_TABLE_STATUS_FIELD_NAME`        //        // on non-Windows servers,        // added BINARY in the WHERE clause to force a case sensitive        // comparison (if we are looking for the db Aa we don't want        // to find the db aa)        $this_databases = array_map('PMA_sqlAddSlashes', $databases);        if (PMA_DRIZZLE) {            $engine_info = PMA_cacheGet('drizzle_engines', true);            $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";            if (isset($engine_info['InnoDB'])                && $engine_info['InnoDB']['module_library'] == 'innobase'            ) {                $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";            }            // data_dictionary.table_cache may not contain any data for some tables, it's just a table cache            // auto_increment == 0 is cast to NULL because currently (2011.03.13 GA) Drizzle doesn't provide correct value            $sql = "                SELECT t.*,                    t.TABLE_SCHEMA        AS `Db`,                    t.TABLE_NAME          AS `Name`,                    t.TABLE_TYPE          AS `TABLE_TYPE`,                    t.ENGINE              AS `Engine`,                    t.ENGINE              AS `Type`,                    t.TABLE_VERSION       AS `Version`,-- VERSION                    t.ROW_FORMAT          AS `Row_format`,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `Rows`,-- TABLE_ROWS,                    coalesce(tc.ROWS, stat.NUM_ROWS)                                          AS `TABLE_ROWS`,                    tc.AVG_ROW_LENGTH     AS `Avg_row_length`, -- AVG_ROW_LENGTH                    tc.TABLE_SIZE         AS `Data_length`, -- DATA_LENGTH                    NULL                  AS `Max_data_length`, -- MAX_DATA_LENGTH                    NULL                  AS `Index_length`, -- INDEX_LENGTH                    NULL                  AS `Data_free`, -- DATA_FREE                    nullif(t.AUTO_INCREMENT, 0)                                          AS `Auto_increment`,                    t.TABLE_CREATION_TIME AS `Create_time`, -- CREATE_TIME                    t.TABLE_UPDATE_TIME   AS `Update_time`, -- UPDATE_TIME                    NULL                  AS `Check_time`, -- CHECK_TIME                    t.TABLE_COLLATION     AS `Collation`,                    NULL                  AS `Checksum`, -- CHECKSUM                    NULL                  AS `Create_options`, -- CREATE_OPTIONS                    t.TABLE_COMMENT       AS `Comment`                FROM data_dictionary.TABLES t                    LEFT JOIN data_dictionary.TABLE_CACHE tc ON tc.TABLE_SCHEMA = t.TABLE_SCHEMA AND tc.TABLE_NAME = t.TABLE_NAME                    $stats_join                WHERE t.TABLE_SCHEMA IN ('" . implode("', '", $this_databases) . "')                    " . $sql_where_table;        } else {            $sql = '                SELECT *,                    `TABLE_SCHEMA`       AS `Db`,                    `TABLE_NAME`         AS `Name`,                    `TABLE_TYPE`         AS `TABLE_TYPE`,                    `ENGINE`             AS `Engine`,                    `ENGINE`             AS `Type`,                    `VERSION`            AS `Version`,                    `ROW_FORMAT`         AS `Row_format`,                    `TABLE_ROWS`         AS `Rows`,                    `AVG_ROW_LENGTH`     AS `Avg_row_length`,                    `DATA_LENGTH`        AS `Data_length`,                    `MAX_DATA_LENGTH`    AS `Max_data_length`,                    `INDEX_LENGTH`       AS `Index_length`,                    `DATA_FREE`          AS `Data_free`,                    `AUTO_INCREMENT`     AS `Auto_increment`,                    `CREATE_TIME`        AS `Create_time`,                    `UPDATE_TIME`        AS `Update_time`,                    `CHECK_TIME`         AS `Check_time`,                    `TABLE_COLLATION`    AS `Collation`,                    `CHECKSUM`           AS `Checksum`,                    `CREATE_OPTIONS`     AS `Create_options`,                    `TABLE_COMMENT`      AS `Comment`                FROM `information_schema`.`TABLES` t                WHERE ' . (PMA_IS_WINDOWS ? '' : 'BINARY') . ' `TABLE_SCHEMA` IN (\'' . implode("', '", $this_databases) . '\')                    ' . $sql_where_table;        }        // Sort the tables        $sql .= " ORDER BY $sort_by $sort_order";        if ($limit_count) {            $sql .= ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;        }        $tables = PMA_DBI_fetch_result(            $sql, array('TABLE_SCHEMA', 'TABLE_NAME'), null, $link        );        unset($sql_where_table, $sql);        if (PMA_DRIZZLE) {            // correct I_S and D_D names returned by D_D.TABLES - Drizzle generally uses lower case for them,            // but TABLES returns uppercase            foreach ((array)$database as $db) {                $db_upper = strtoupper($db);                if (!isset($tables[$db]) && isset($tables[$db_upper])) {                    $tables[$db] = $tables[$db_upper];                    unset($tables[$db_upper]);                }            }        }        if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {            // here, the array's first key is by schema name            foreach ($tables as $one_database_name => $one_database_tables) {                uksort($one_database_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $one_database_tables = array_reverse($one_database_tables);                }                $tables[$one_database_name] = $one_database_tables;            }        }    } // end (get information from table schema)    // If permissions are wrong on even one database directory,    // information_schema does not return any table info for any database    // this is why we fall back to SHOW TABLE STATUS even for MySQL >= 50002    if (empty($tables) && !PMA_DRIZZLE) {        foreach ($databases as $each_database) {            if ($table || (true === $tbl_is_group)) {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database)                    .' LIKE \'' . PMA_escape_mysql_wildcards(PMA_sqlAddSlashes($table, true)) . '%\'';            } else {                $sql = 'SHOW TABLE STATUS FROM '                    . PMA_backquote($each_database);            }            $each_tables = PMA_DBI_fetch_result($sql, 'Name', null, $link);            // Sort naturally if the config allows it and we're sorting            // the Name column.            if ($sort_by == 'Name' && $GLOBALS['cfg']['NaturalOrder']) {                uksort($each_tables, 'strnatcasecmp');                if ($sort_order == 'DESC') {                    $each_tables = array_reverse($each_tables);                }            } else {                // Prepare to sort by creating array of the selected sort                // value to pass to array_multisort                // Size = Data_length + Index_length                if ($sort_by == 'Data_length') {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data['Data_length'] + $table_data['Index_length']);                    }                } else {                    foreach ($each_tables as $table_name => $table_data) {                        ${$sort_by}[$table_name] = strtolower($table_data[$sort_by]);                    }                }                if ($sort_order == 'DESC') {                    array_multisort($$sort_by, SORT_DESC, $each_tables);                } else {                    array_multisort($$sort_by, SORT_ASC, $each_tables);                }                // cleanup the temporary sort array                unset($$sort_by);            }            if ($limit_count) {                $each_tables = array_slice($each_tables, $limit_offset, $limit_count);            }            foreach ($each_tables as $table_name => $each_table) {                if ('comment' === $tbl_is_group                    && 0 === strpos($each_table['Comment'], $table)                ) {                    // remove table from list                    unset($each_tables[$table_name]);                    continue;                }                if (! isset($each_tables[$table_name]['Type'])                    && isset($each_tables[$table_name]['Engine'])                ) {                    // pma BC, same parts of PMA still uses 'Type'                    $each_tables[$table_name]['Type']                        =& $each_tables[$table_name]['Engine'];                } elseif (! isset($each_tables[$table_name]['Engine'])                        && isset($each_tables[$table_name]['Type'])) {                    // old MySQL reports Type, newer MySQL reports Engine                    $each_tables[$table_name]['Engine']                        =& $each_tables[$table_name]['Type'];                }                // MySQL forward compatibility                // so pma could use this array as if every server is of version >5.0                $each_tables[$table_name]['TABLE_SCHEMA']      = $each_database;                $each_tables[$table_name]['TABLE_NAME']        =& $each_tables[$table_name]['Name'];                $each_tables[$table_name]['ENGINE']            =& $each_tables[$table_name]['Engine'];                $each_tables[$table_name]['VERSION']           =& $each_tables[$table_name]['Version'];                $each_tables[$table_name]['ROW_FORMAT']        =& $each_tables[$table_name]['Row_format'];                $each_tables[$table_name]['TABLE_ROWS']        =& $each_tables[$table_name]['Rows'];                $each_tables[$table_name]['AVG_ROW_LENGTH']    =& $each_tables[$table_name]['Avg_row_length'];                $each_tables[$table_name]['DATA_LENGTH']       =& $each_tables[$table_name]['Data_length'];                $each_tables[$table_name]['MAX_DATA_LENGTH']   =& $each_tables[$table_name]['Max_data_length'];                $each_tables[$table_name]['INDEX_LENGTH']      =& $each_tables[$table_name]['Index_length'];                $each_tables[$table_name]['DATA_FREE']         =& $each_tables[$table_name]['Data_free'];                $each_tables[$table_name]['AUTO_INCREMENT']    =& $each_tables[$table_name]['Auto_increment'];                $each_tables[$table_name]['CREATE_TIME']       =& $each_tables[$table_name]['Create_time'];                $each_tables[$table_name]['UPDATE_TIME']       =& $each_tables[$table_name]['Update_time'];                $each_tables[$table_name]['CHECK_TIME']        =& $each_tables[$table_name]['Check_time'];                $each_tables[$table_name]['TABLE_COLLATION']   =& $each_tables[$table_name]['Collation'];                $each_tables[$table_name]['CHECKSUM']          =& $each_tables[$table_name]['Checksum'];                $each_tables[$table_name]['CREATE_OPTIONS']    =& $each_tables[$table_name]['Create_options'];                $each_tables[$table_name]['TABLE_COMMENT']     =& $each_tables[$table_name]['Comment'];                if (strtoupper($each_tables[$table_name]['Comment']) === 'VIEW'                    && $each_tables[$table_name]['Engine'] == null                ) {                    $each_tables[$table_name]['TABLE_TYPE'] = 'VIEW';                } else {                    /**                     * @todo difference between 'TEMPORARY' and 'BASE TABLE' but how to detect?                     */                    $each_tables[$table_name]['TABLE_TYPE'] = 'BASE TABLE';                }            }            $tables[$each_database] = $each_tables;        }    }    // cache table data    // so PMA_Table does not require to issue SHOW TABLE STATUS again    // Note: I don't see why we would need array_merge_recursive() here,    // as it creates double entries for the same table (for example a double    // entry for Comment when changing the storage engine in Operations)    // Note 2: Instead of array_merge(), simply use the + operator because    //  array_merge() renumbers numeric keys starting with 0, therefore    //  we would lose a db name thats consists only of numbers    foreach ($tables as $one_database => $its_tables) {        if (isset(PMA_Table::$cache[$one_database])) {            PMA_Table::$cache[$one_database] = PMA_Table::$cache[$one_database] + $tables[$one_database];        } else {            PMA_Table::$cache[$one_database] = $tables[$one_database];        }    }    unset($one_database, $its_tables);    if (! is_array($database)) {        if (isset($tables[$database])) {            return $tables[$database];        } elseif (isset($tables[strtolower($database)])) {            // on windows with lower_case_table_names = 1            // MySQL returns            // with SHOW DATABASES or information_schema.SCHEMATA: `Test`            // but information_schema.TABLES gives `test`            // bug #1436171            // http://sf.net/support/tracker.php?aid=1436171            return $tables[strtolower($database)];        } else {            // one database but inexact letter case match            // as Drizzle is always case insensitive, we can safely return the only result            if (PMA_DRIZZLE && count($tables) == 1) {                $keys = array_keys($tables);                if (strlen(array_pop($keys)) == strlen($database)) {                    return array_pop($tables);                }            }            return $tables;        }    } else {        return $tables;    }}/** * returns array with databases containing extended infos about them * * @param string   $database     database * @param boolean  $force_stats  retrieve stats also for MySQL < 5 * @param resource $link         mysql link * @param string   $sort_by      column to order by * @param string   $sort_order   ASC or DESC * @param integer  $limit_offset starting offset for LIMIT * @param bool|int $limit_count  row count for LIMIT or true for $GLOBALS['cfg']['MaxDbList'] * * @todo    move into PMA_List_Database? * * @return array $databases */function PMA_DBI_get_databases_full($database = null, $force_stats = false,    $link = null, $sort_by = 'SCHEMA_NAME', $sort_order = 'ASC',    $limit_offset = 0, $limit_count = false){    $sort_order = strtoupper($sort_order);    if (true === $limit_count) {        $limit_count = $GLOBALS['cfg']['MaxDbList'];    }    // initialize to avoid errors when there are no databases    $databases = array();    $apply_limit_and_order_manual = true;    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        /**         * if $GLOBALS['cfg']['NaturalOrder'] is enabled, we cannot use LIMIT         * cause MySQL does not support natural ordering, we have to do it afterward         */        $limit = '';        if (!$GLOBALS['cfg']['NaturalOrder']) {            if ($limit_count) {                $limit = ' LIMIT ' . $limit_count . ' OFFSET ' . $limit_offset;            }            $apply_limit_and_order_manual = false;        }        // get table information from information_schema        if ($database) {            $sql_where_schema = 'WHERE `SCHEMA_NAME` LIKE \''                . PMA_sqlAddSlashes($database) . '\'';        } else {            $sql_where_schema = '';        }        if (PMA_DRIZZLE) {            // data_dictionary.table_cache may not contain any data for some            // tables, it's just a table cache            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                // no TABLE_CACHE data, stable results are better than                // constantly changing                $sql .= ',                    COUNT(t.TABLE_SCHEMA) AS SCHEMA_TABLES,                    SUM(stat.NUM_ROWS)    AS SCHEMA_TABLE_ROWS';            }            $sql .= '                   FROM data_dictionary.SCHEMAS s';            if ($force_stats) {                $engine_info = PMA_cacheGet('drizzle_engines', true);                $stats_join = "LEFT JOIN (SELECT 0 NUM_ROWS) AS stat ON false";                if (isset($engine_info['InnoDB']) && $engine_info['InnoDB']['module_library'] == 'innobase') {                    $stats_join = "LEFT JOIN data_dictionary.INNODB_SYS_TABLESTATS stat ON (t.ENGINE = 'InnoDB' AND stat.NAME = (t.TABLE_SCHEMA || '/') || t.TABLE_NAME)";                }                $sql .= "                    LEFT JOIN data_dictionary.TABLES t                        ON t.TABLE_SCHEMA = s.SCHEMA_NAME                    $stats_join";            }            $sql .= $sql_where_schema . '                    GROUP BY s.SCHEMA_NAME                    ORDER BY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        } else {            $sql = 'SELECT                s.SCHEMA_NAME,                s.DEFAULT_COLLATION_NAME';            if ($force_stats) {                $sql .= ',                    COUNT(t.TABLE_SCHEMA)  AS SCHEMA_TABLES,                    SUM(t.TABLE_ROWS)      AS SCHEMA_TABLE_ROWS,                    SUM(t.DATA_LENGTH)     AS SCHEMA_DATA_LENGTH,                    SUM(t.MAX_DATA_LENGTH) AS SCHEMA_MAX_DATA_LENGTH,                    SUM(t.INDEX_LENGTH)    AS SCHEMA_INDEX_LENGTH,                    SUM(t.DATA_LENGTH + t.INDEX_LENGTH)                                           AS SCHEMA_LENGTH,                    SUM(t.DATA_FREE)       AS SCHEMA_DATA_FREE';            }            $sql .= '                   FROM `information_schema`.SCHEMATA s';            if ($force_stats) {                $sql .= '                    LEFT JOIN `information_schema`.TABLES t                        ON BINARY t.TABLE_SCHEMA = BINARY s.SCHEMA_NAME';            }            $sql .= $sql_where_schema . '                    GROUP BY BINARY s.SCHEMA_NAME                    ORDER BY BINARY ' . PMA_backquote($sort_by) . ' ' . $sort_order                . $limit;        }        $databases = PMA_DBI_fetch_result($sql, 'SCHEMA_NAME', null, $link);        $mysql_error = PMA_DBI_getError($link);        if (! count($databases) && $GLOBALS['errno']) {            PMA_mysqlDie($mysql_error, $sql);        }        // display only databases also in official database list        // f.e. to apply hide_db and only_db        $drops = array_diff(array_keys($databases), (array) $GLOBALS['pma']->databases);        if (count($drops)) {            foreach ($drops as $drop) {                unset($databases[$drop]);            }            unset($drop);        }        unset($sql_where_schema, $sql, $drops);    } else {        foreach ($GLOBALS['pma']->databases as $database_name) {            // MySQL forward compatibility            // so pma could use this array as if every server is of version >5.0            $databases[$database_name]['SCHEMA_NAME']      = $database_name;            if ($force_stats) {                include_once './libraries/mysql_charsets.lib.php';                $databases[$database_name]['DEFAULT_COLLATION_NAME']                    = PMA_getDbCollation($database_name);                // get additional info about tables                $databases[$database_name]['SCHEMA_TABLES']          = 0;                $databases[$database_name]['SCHEMA_TABLE_ROWS']      = 0;                $databases[$database_name]['SCHEMA_DATA_LENGTH']     = 0;                $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH'] = 0;                $databases[$database_name]['SCHEMA_INDEX_LENGTH']    = 0;                $databases[$database_name]['SCHEMA_LENGTH']          = 0;                $databases[$database_name]['SCHEMA_DATA_FREE']       = 0;                $res = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($database_name) . ';');                while ($row = PMA_DBI_fetch_assoc($res)) {                    $databases[$database_name]['SCHEMA_TABLES']++;                    $databases[$database_name]['SCHEMA_TABLE_ROWS']                        += $row['Rows'];                    $databases[$database_name]['SCHEMA_DATA_LENGTH']                        += $row['Data_length'];                    $databases[$database_name]['SCHEMA_MAX_DATA_LENGTH']                        += $row['Max_data_length'];                    $databases[$database_name]['SCHEMA_INDEX_LENGTH']                        += $row['Index_length'];                    // for InnoDB, this does not contain the number of                    // overhead bytes but the total free space                    if ('InnoDB' != $row['Engine']) {                        $databases[$database_name]['SCHEMA_DATA_FREE']                            += $row['Data_free'];                    }                    $databases[$database_name]['SCHEMA_LENGTH']                        += $row['Data_length'] + $row['Index_length'];                }                PMA_DBI_free_result($res);                unset($res);            }        }    }    /**     * apply limit and order manually now     * (caused by older MySQL < 5 or $GLOBALS['cfg']['NaturalOrder'])     */    if ($apply_limit_and_order_manual) {        $GLOBALS['callback_sort_order'] = $sort_order;        $GLOBALS['callback_sort_by'] = $sort_by;        usort($databases, 'PMA_usort_comparison_callback');        unset($GLOBALS['callback_sort_order'], $GLOBALS['callback_sort_by']);        /**         * now apply limit         */        if ($limit_count) {            $databases = array_slice($databases, $limit_offset, $limit_count);        }    }    return $databases;}/** * returns detailed array with all columns for given table in database, * or all tables/databases * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of specific column * @param mixed  $link     mysql link resource * * @return array */function PMA_DBI_get_columns_full($database = null, $table = null,    $column = null, $link = null){    $columns = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        $sql_wheres = array();        $array_keys = array();        // get columns information from information_schema        if (null !== $database) {            $sql_wheres[] = '`TABLE_SCHEMA` = \'' . PMA_sqlAddSlashes($database) . '\' ';        } else {            $array_keys[] = 'TABLE_SCHEMA';        }        if (null !== $table) {            $sql_wheres[] = '`TABLE_NAME` = \'' . PMA_sqlAddSlashes($table) . '\' ';        } else {            $array_keys[] = 'TABLE_NAME';        }        if (null !== $column) {            $sql_wheres[] = '`COLUMN_NAME` = \'' . PMA_sqlAddSlashes($column) . '\' ';        } else {            $array_keys[] = 'COLUMN_NAME';        }        // for PMA bc:        // `[SCHEMA_FIELD_NAME]` AS `[SHOW_FULL_COLUMNS_FIELD_NAME]`        if (PMA_DRIZZLE) {            $sql = "SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME,                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                collation_name     AS `Collation`,                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`,                NULL               AS `Privileges`,                column_comment     AS `Comment`            FROM data_dictionary.columns";        } else {            $sql = '                 SELECT *,                        `COLUMN_NAME`       AS `Field`,                        `COLUMN_TYPE`       AS `Type`,                        `COLLATION_NAME`    AS `Collation`,                        `IS_NULLABLE`       AS `Null`,                        `COLUMN_KEY`        AS `Key`,                        `COLUMN_DEFAULT`    AS `Default`,                        `EXTRA`             AS `Extra`,                        `PRIVILEGES`        AS `Privileges`,                        `COLUMN_COMMENT`    AS `Comment`                   FROM `information_schema`.`COLUMNS`';        }        if (count($sql_wheres)) {            $sql .= "\n" . ' WHERE ' . implode(' AND ', $sql_wheres);        }        $columns = PMA_DBI_fetch_result($sql, $array_keys, null, $link);        unset($sql_wheres, $sql);    } else {        if (null === $database) {            foreach ($GLOBALS['pma']->databases as $database) {                $columns[$database] = PMA_DBI_get_columns_full(                    $database, null, null, $link                );            }            return $columns;        } elseif (null === $table) {            $tables = PMA_DBI_get_tables($database);            foreach ($tables as $table) {                $columns[$table] = PMA_DBI_get_columns_full(                    $database, $table, null, $link                );            }            return $columns;        }        $sql = 'SHOW FULL COLUMNS FROM '            . PMA_backquote($database) . '.' . PMA_backquote($table);        if (null !== $column) {            $sql .= " LIKE '" . PMA_sqlAddSlashes($column, true) . "'";        }        $columns = PMA_DBI_fetch_result($sql, 'Field', null, $link);    }    $ordinal_position = 1;    foreach ($columns as $column_name => $each_column) {        // MySQL forward compatibility        // so pma could use this array as if every server is of version >5.0        $columns[$column_name]['COLUMN_NAME'] =& $columns[$column_name]['Field'];        $columns[$column_name]['COLUMN_TYPE'] =& $columns[$column_name]['Type'];        $columns[$column_name]['COLLATION_NAME'] =& $columns[$column_name]['Collation'];        $columns[$column_name]['IS_NULLABLE'] =& $columns[$column_name]['Null'];        $columns[$column_name]['COLUMN_KEY'] =& $columns[$column_name]['Key'];        $columns[$column_name]['COLUMN_DEFAULT'] =& $columns[$column_name]['Default'];        $columns[$column_name]['EXTRA'] =& $columns[$column_name]['Extra'];        $columns[$column_name]['PRIVILEGES'] =& $columns[$column_name]['Privileges'];        $columns[$column_name]['COLUMN_COMMENT'] =& $columns[$column_name]['Comment'];        $columns[$column_name]['TABLE_CATALOG'] = null;        $columns[$column_name]['TABLE_SCHEMA'] = $database;        $columns[$column_name]['TABLE_NAME'] = $table;        $columns[$column_name]['ORDINAL_POSITION'] = $ordinal_position;        $columns[$column_name]['DATA_TYPE']            = substr(                $columns[$column_name]['COLUMN_TYPE'],                0,                strpos($columns[$column_name]['COLUMN_TYPE'], '(')            );        /**         * @todo guess CHARACTER_MAXIMUM_LENGTH from COLUMN_TYPE         */        $columns[$column_name]['CHARACTER_MAXIMUM_LENGTH'] = null;        /**         * @todo guess CHARACTER_OCTET_LENGTH from CHARACTER_MAXIMUM_LENGTH         */        $columns[$column_name]['CHARACTER_OCTET_LENGTH'] = null;        $columns[$column_name]['NUMERIC_PRECISION'] = null;        $columns[$column_name]['NUMERIC_SCALE'] = null;        $columns[$column_name]['CHARACTER_SET_NAME']            = substr(                $columns[$column_name]['COLLATION_NAME'],                0,                strpos($columns[$column_name]['COLLATION_NAME'], '_')            );        $ordinal_position++;    }    if (null !== $column) {        reset($columns);        $columns = current($columns);    }    return $columns;}/** * Returns SQL query for fetching columns for a table * * The 'Key' column is not calculated properly, use PMA_DBI_get_columns() to get * correct values. * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * * @see PMA_DBI_get_columns() * * @return  string */function PMA_DBI_get_columns_sql($database, $table, $column = null, $full = false){    if (PMA_DRIZZLE) {        // `Key` column:        // * used in primary key => PRI        // * unique one-column => UNI        // * indexed, one-column or first in multi-column => MUL        // Promotion of UNI to PRI in case no promary index exists is done after query is executed        $sql = "SELECT                column_name        AS `Field`,                (CASE                    WHEN character_maximum_length > 0                        THEN concat(lower(data_type), '(', character_maximum_length, ')')                    WHEN numeric_precision > 0 OR numeric_scale > 0                        THEN concat(lower(data_type), '(', numeric_precision, ',', numeric_scale, ')')                    WHEN enum_values IS NOT NULL                        THEN concat(lower(data_type), '(', enum_values, ')')                    ELSE lower(data_type) END)                                   AS `Type`,                " . ($full ? "                collation_name     AS `Collation`," : '') . "                (CASE is_nullable                    WHEN 1 THEN 'YES'                    ELSE 'NO' END) AS `Null`,                (CASE                    WHEN is_used_in_primary THEN 'PRI'                    WHEN is_unique AND NOT is_multi THEN 'UNI'                    WHEN is_indexed AND (NOT is_multi OR is_first_in_multi) THEN 'MUL'                    ELSE '' END)   AS `Key`,                column_default     AS `Default`,                (CASE                    WHEN is_auto_increment THEN 'auto_increment'                    WHEN column_default_update <> '' THEN 'on update ' || column_default_update                    ELSE '' END)   AS `Extra`                " . ($full ? " ,                NULL               AS `Privileges`,                column_comment     AS `Comment`" : '') . "            FROM data_dictionary.columns            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'                " . (($column != null) ? "                AND column_name = '" . PMA_sqlAddSlashes($column) . "'" : '');        // ORDER BY ordinal_position    } else {        $sql = 'SHOW ' . ($full ? 'FULL' : '') . ' COLUMNS            FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table)            . (($column != null) ? "LIKE '" . PMA_sqlAddSlashes($column, true) . "'" : '');    }    return $sql;}/** * Returns descriptions of columns in given table (all or given by $column) * * @param string  $database name of database * @param string  $table    name of table to retrieve columns from * @param string  $column   name of column, null to show all columns * @param boolean $full     whether to return full info or only column names * @param mixed   $link     mysql link resource * * @return  false|array   array indexed by column names or, *                        if $column is given, flat array description */function PMA_DBI_get_columns($database, $table, $column = null, $full = false, $link = null){    $sql = PMA_DBI_get_columns_sql($database, $table, $column, $full);    $fields = PMA_DBI_fetch_result($sql, 'Field', null, $link);    if (! is_array($fields) || count($fields) == 0) {        return null;    }    if (PMA_DRIZZLE) {        // fix Key column, it's much simpler in PHP than in SQL        $has_pk = false;        $has_pk_candidates = false;        foreach ($fields as $f) {            if ($f['Key'] == 'PRI') {                $has_pk = true;                break;            } else if ($f['Null'] == 'NO' && ($f['Key'] == 'MUL' || $f['Key'] == 'UNI')) {                $has_pk_candidates = true;            }        }        if (!$has_pk && $has_pk_candidates) {            // check whether we can promote some unique index to PRI            $sql = "                SELECT i.index_name, p.column_name                FROM data_dictionary.indexes i                    JOIN data_dictionary.index_parts p USING (table_schema, table_name)                WHERE i.table_schema = '" . PMA_sqlAddSlashes($database) . "'                    AND i.table_name = '" . PMA_sqlAddSlashes($table) . "'                    AND i.is_unique                        AND NOT i.is_nullable";            $fs = PMA_DBI_fetch_result($sql, 'index_name', null, $link);            $fs = $fs ? array_shift($fs) : array();            foreach ($fs as $f) {                $fields[$f]['Key'] = 'PRI';            }        }    }    return ($column != null) ? array_shift($fields) : $fields;}/*** Returns SQL for fetching information on table indexes (SHOW INDEXES)** @param string $database name of database* @param string $table    name of the table whose indexes are to be retreived* @param string $where    additional conditions for WHERE** @return   array   $indexes*/function PMA_DBI_get_table_indexes_sql($database, $table, $where = null){    if (PMA_DRIZZLE) {        $sql = "SELECT                ip.table_name          AS `Table`,                (NOT ip.is_unique)     AS Non_unique,                ip.index_name          AS Key_name,                ip.sequence_in_index+1 AS Seq_in_index,                ip.column_name         AS Column_name,                (CASE                    WHEN i.index_type = 'BTREE' THEN 'A'                    ELSE NULL END)     AS Collation,                NULL                   AS Cardinality,                compare_length         AS Sub_part,                NULL                   AS Packed,                ip.is_nullable         AS `Null`,                i.index_type           AS Index_type,                NULL                   AS Comment,                i.index_comment        AS Index_comment            FROM data_dictionary.index_parts ip                LEFT JOIN data_dictionary.indexes i USING (table_schema, table_name, index_name)            WHERE table_schema = '" . PMA_sqlAddSlashes($database) . "'                AND table_name = '" . PMA_sqlAddSlashes($table) . "'        ";    } else {        $sql = 'SHOW INDEXES FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    }    if ($where) {        $sql .= (PMA_DRIZZLE ? ' AND (' : ' WHERE (') . $where . ')';    }    return $sql;}/*** Returns indexes of a table** @param string $database name of database* @param string $table    name of the table whose indexes are to be retrieved* @param mixed  $link     mysql link resource** @return   array   $indexes*/function PMA_DBI_get_table_indexes($database, $table, $link = null){    $sql = PMA_DBI_get_table_indexes_sql($database, $table);    $indexes = PMA_DBI_fetch_result($sql, null, null, $link);    if (! is_array($indexes) || count($indexes) < 1) {        return array();    }    return $indexes;}/** * returns value of given mysql server variable * * @param string $var  mysql server variable name * @param int    $type PMA_DBI_GETVAR_SESSION|PMA_DBI_GETVAR_GLOBAL * @param mixed  $link mysql link resource|object * * @return  mixed   value for mysql server variable */function PMA_DBI_get_variable($var, $type = PMA_DBI_GETVAR_SESSION, $link = null){    if ($link === null) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    switch ($type) {    case PMA_DBI_GETVAR_SESSION:        $modifier = ' SESSION';        break;    case PMA_DBI_GETVAR_GLOBAL:        $modifier = ' GLOBAL';        break;    default:        $modifier = '';    }    return PMA_DBI_fetch_value(        'SHOW' . $modifier . ' VARIABLES LIKE \'' . $var . '\';', 0, 1, $link    );}/** * Function called just after a connection to the MySQL database server has * been established. It sets the connection collation, and determins the * version of MySQL which is running. * * @param mixed   $link           mysql link resource|object * @param boolean $is_controluser whether link is for control user */function PMA_DBI_postConnect($link, $is_controluser = false){    if (! defined('PMA_MYSQL_INT_VERSION')) {        if (PMA_cacheExists('PMA_MYSQL_INT_VERSION', true)) {            define(                'PMA_MYSQL_INT_VERSION',                PMA_cacheGet('PMA_MYSQL_INT_VERSION', true)            );            define(                'PMA_MYSQL_MAJOR_VERSION',                PMA_cacheGet('PMA_MYSQL_MAJOR_VERSION', true)            );            define(                'PMA_MYSQL_STR_VERSION',                PMA_cacheGet('PMA_MYSQL_STR_VERSION', true)            );            define(                'PMA_MYSQL_VERSION_COMMENT',                PMA_cacheGet('PMA_MYSQL_VERSION_COMMENT', true)            );        } else {            $version = PMA_DBI_fetch_single_row(                'SELECT @@version, @@version_comment',                'ASSOC',                $link            );            if ($version) {                $match = explode('.', $version['@@version']);                define('PMA_MYSQL_MAJOR_VERSION', (int)$match[0]);                define(                    'PMA_MYSQL_INT_VERSION',                    (int) sprintf('%d%02d%02d', $match[0], $match[1], intval($match[2]))                );                define('PMA_MYSQL_STR_VERSION', $version['@@version']);                define('PMA_MYSQL_VERSION_COMMENT', $version['@@version_comment']);            } else {                define('PMA_MYSQL_INT_VERSION', 50015);                define('PMA_MYSQL_MAJOR_VERSION', 5);                define('PMA_MYSQL_STR_VERSION', '5.00.15');                define('PMA_MYSQL_VERSION_COMMENT', '');            }            PMA_cacheSet(                'PMA_MYSQL_INT_VERSION',                PMA_MYSQL_INT_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_MAJOR_VERSION',                PMA_MYSQL_MAJOR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_STR_VERSION',                PMA_MYSQL_STR_VERSION,                true            );            PMA_cacheSet(                'PMA_MYSQL_VERSION_COMMENT',                PMA_MYSQL_VERSION_COMMENT,                true            );        }        // detect Drizzle by version number:        // <year>.<month>.<build number>(.<patch rev)        define('PMA_DRIZZLE', PMA_MYSQL_MAJOR_VERSION >= 2009);    }    // Skip charsets for Drizzle    if (!PMA_DRIZZLE) {        if (! empty($GLOBALS['collation_connection'])) {            PMA_DBI_query("SET CHARACTER SET 'utf8';", $link, PMA_DBI_QUERY_STORE);            PMA_DBI_query(                "SET collation_connection = '" . PMA_sqlAddSlashes($GLOBALS['collation_connection']) . "';",                $link,                PMA_DBI_QUERY_STORE            );        } else {            PMA_DBI_query(                "SET NAMES 'utf8' COLLATE 'utf8_general_ci';",                $link,                PMA_DBI_QUERY_STORE            );        }    }    // Cache plugin list for Drizzle    if (PMA_DRIZZLE && !PMA_cacheExists('drizzle_engines', true)) {        $sql = "SELECT p.plugin_name, m.module_library            FROM data_dictionary.plugins p                JOIN data_dictionary.modules m USING (module_name)            WHERE p.plugin_type = 'StorageEngine'                AND p.plugin_name NOT IN ('FunctionEngine', 'schema')                AND p.is_active = 'YES'";        $engines = PMA_DBI_fetch_result($sql, 'plugin_name', null, $link);        PMA_cacheSet('drizzle_engines', $engines, true);    }}/** * returns a single value from the given result or query, * if the query or the result has more than one row or field * the first field of the first row is returned * * <code> * $sql = 'SELECT `name` FROM `user` WHERE `id` = 123'; * $user_name = PMA_DBI_fetch_value($sql); * // produces * // $user_name = 'John Doe' * </code> * * @param string|mysql_result $result     query or mysql result * @param integer             $row_number row to fetch the value from, *                                        starting at 0, with 0 beeing default * @param integer|string      $field      field to fetch the value from, *                                        starting at 0, with 0 beeing default * @param resource            $link       mysql link * * @return mixed value of first field in first row from result *               or false if not found */function PMA_DBI_fetch_value($result, $row_number = 0, $field = 0, $link = null){    $value = false;    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return false if result is empty or false    // or requested row is larger than rows in result    if (PMA_DBI_num_rows($result) < ($row_number + 1)) {        return $value;    }    // if $field is an integer use non associative mysql fetch function    if (is_int($field)) {        $fetch_function = 'PMA_DBI_fetch_row';    } else {        $fetch_function = 'PMA_DBI_fetch_assoc';    }    // get requested row    for ($i = 0; $i <= $row_number; $i++) {        $row = $fetch_function($result);    }    PMA_DBI_free_result($result);    // return requested field    if (isset($row[$field])) {        $value = $row[$field];    }    unset($row);    return $value;}/** * returns only the first row from the result * * <code> * $sql = 'SELECT * FROM `user` WHERE `id` = 123'; * $user = PMA_DBI_fetch_single_row($sql); * // produces * // $user = array('id' => 123, 'name' => 'John Doe') * </code> * * @param string|mysql_result $result query or mysql result * @param string              $type   NUM|ASSOC|BOTH *                                    returned array should either numeric *                                    associativ or booth * @param resource            $link   mysql link * * @return array|boolean first row from result *                       or false if result is empty */function PMA_DBI_fetch_single_row($result, $type = 'ASSOC', $link = null){    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, PMA_DBI_QUERY_STORE, false);    }    // return null if result is empty or false    if (! PMA_DBI_num_rows($result)) {        return false;    }    switch ($type) {    case 'NUM' :        $fetch_function = 'PMA_DBI_fetch_row';        break;    case 'ASSOC' :        $fetch_function = 'PMA_DBI_fetch_assoc';        break;    case 'BOTH' :    default :        $fetch_function = 'PMA_DBI_fetch_array';        break;    }    $row = $fetch_function($result);    PMA_DBI_free_result($result);    return $row;}/** * returns all rows in the resultset in one array * * <code> * $sql = 'SELECT * FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id'); * // produces * // $users['123'] = array('id' => 123, 'name' => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 0); * // produces * // $users['123'] = array(0 => 123, 1 => 'John Doe') * * $sql = 'SELECT `id`, `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql, 'id', 'name'); * // or * $users = PMA_DBI_fetch_result($sql, 0, 1); * // produces * // $users['123'] = 'John Doe' * * $sql = 'SELECT `name` FROM `user`'; * $users = PMA_DBI_fetch_result($sql); * // produces * // $users[] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', null), 'name'); * // produces * // $users['admin'][] = 'John Doe' * * $sql = 'SELECT `group`, `name` FROM `user`' * $users = PMA_DBI_fetch_result($sql, array('group', 'name'), 'id'); * // produces * // $users['admin']['John Doe'] = '123' * </code> * * @param string|mysql_result $result query or mysql result * @param string|integer      $key    field-name or offset *                                    used as key for array * @param string|integer      $value  value-name or offset *                                    used as value for array * @param resource            $link   mysql link * @param mixed               $options * * @return array resultrows or values indexed by $key */function PMA_DBI_fetch_result($result, $key = null, $value = null,    $link = null, $options = 0){    $resultrows = array();    if (is_string($result)) {        $result = PMA_DBI_try_query($result, $link, $options, false);    }    // return empty array if result is empty or false    if (! $result) {        return $resultrows;    }    $fetch_function = 'PMA_DBI_fetch_assoc';    // no nested array if only one field is in result    if (null === $key && 1 === PMA_DBI_num_fields($result)) {        $value = 0;        $fetch_function = 'PMA_DBI_fetch_row';    }    // if $key is an integer use non associative mysql fetch function    if (is_int($key)) {        $fetch_function = 'PMA_DBI_fetch_row';    }    if (null === $key && null === $value) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row;        }    } elseif (null === $key) {        while ($row = $fetch_function($result)) {            $resultrows[] = $row[$value];        }    } elseif (null === $value) {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row;            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row;            }        }    } else {        if (is_array($key)) {            while ($row = $fetch_function($result)) {                $result_target =& $resultrows;                foreach ($key as $key_index) {                    if (null === $key_index) {                        $result_target =& $result_target[];                        continue;                    }                    if (! isset($result_target[$row[$key_index]])) {                        $result_target[$row[$key_index]] = array();                    }                    $result_target =& $result_target[$row[$key_index]];                }                $result_target = $row[$value];            }        } else {            while ($row = $fetch_function($result)) {                $resultrows[$row[$key]] = $row[$value];            }        }    }    PMA_DBI_free_result($result);    return $resultrows;}/** * Get supported SQL compatibility modes * * @return array supported SQL compatibility modes */function PMA_DBI_getCompatibilities(){    // Drizzle doesn't support compatibility modes    if (PMA_DRIZZLE) {        return array();    }    $compats = array('NONE');    $compats[] = 'ANSI';    $compats[] = 'DB2';    $compats[] = 'MAXDB';    $compats[] = 'MYSQL323';    $compats[] = 'MYSQL40';    $compats[] = 'MSSQL';    $compats[] = 'ORACLE';    // removed; in MySQL 5.0.33, this produces exports that    // can't be read by POSTGRESQL (see our bug #1596328)    //$compats[] = 'POSTGRESQL';    $compats[] = 'TRADITIONAL';    return $compats;}/** * returns warnings for last query * * @param resource $link mysql link resource * * @return array warnings */function PMA_DBI_get_warnings($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return array();        }    }    return PMA_DBI_fetch_result('SHOW WARNINGS', null, null, $link);}/** * returns true (int > 0) if current user is superuser * otherwise 0 * * @return bool Whether use is a superuser */function PMA_isSuperuser(){    if (PMA_cacheExists('is_superuser', true)) {        return PMA_cacheGet('is_superuser', true);    }    // when connection failed we don't have a $userlink    if (isset($GLOBALS['userlink'])) {        if (PMA_DRIZZLE) {            // Drizzle has no authorization by default, so when no plugin is            // enabled everyone is a superuser            // Known authorization libraries: regex_policy, simple_user_policy            // Plugins limit object visibility (dbs, tables, processes), we can            // safely assume we always deal with superuser            $r = true;        } else {            // check access to mysql.user table            $r = (bool) PMA_DBI_try_query(                'SELECT COUNT(*) FROM mysql.user',                $GLOBALS['userlink'],                PMA_DBI_QUERY_STORE            );        }        PMA_cacheSet('is_superuser', $r, true);    } else {        PMA_cacheSet('is_superuser', false, true);    }    return PMA_cacheGet('is_superuser', true);}/** * returns an array of PROCEDURE or FUNCTION names for a db * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION * @param resource $link  mysql link * * @returnarray the procedure names or function names */function PMA_DBI_get_procedures_or_functions($db, $which, $link = null){    if (PMA_DRIZZLE) {        // Drizzle doesn't support functions and procedures        return array();    }    $shows = PMA_DBI_fetch_result('SHOW ' . $which . ' STATUS;', null, null, $link);    $result = array();    foreach ($shows as $one_show) {        if ($one_show['Db'] == $db && $one_show['Type'] == $which) {            $result[] = $one_show['Name'];        }    }    return($result);}/** * returns the definition of a specific PROCEDURE, FUNCTION, EVENT or VIEW * * @param string   $db    db name * @param string   $which PROCEDURE | FUNCTION | EVENT | VIEW * @param string   $name  the procedure|function|event|view name * @param resource $link  mysql link * * @return string the definition */function PMA_DBI_get_definition($db, $which, $name, $link = null){    $returned_field = array(        'PROCEDURE' => 'Create Procedure',        'FUNCTION'  => 'Create Function',        'EVENT'     => 'Create Event',        'VIEW'      => 'Create View'    );    $query = 'SHOW CREATE ' . $which . ' '        . PMA_backquote($db) . '.' . PMA_backquote($name);    return(PMA_DBI_fetch_value($query, 0, $returned_field[$which]));}/** * returns details about the TRIGGERs for a specific table or database * * @param string $db        db name * @param string $table     table name * @param string $delimiter the delimiter to use (may be empty) * * @return array information about triggers (may be empty) */function PMA_DBI_get_triggers($db, $table = '', $delimiter = '//'){    if (PMA_DRIZZLE) {        // Drizzle doesn't support triggers        return array();    }    $result = array();    if (! $GLOBALS['cfg']['Server']['DisableIS']) {        // Note: in http://dev.mysql.com/doc/refman/5.0/en/faqs-triggers.html        // their example uses WHERE TRIGGER_SCHEMA='dbname' so let's use this        // instead of WHERE EVENT_OBJECT_SCHEMA='dbname'        $query = 'SELECT TRIGGER_SCHEMA, TRIGGER_NAME, EVENT_MANIPULATION'            . ', EVENT_OBJECT_TABLE, ACTION_TIMING, ACTION_STATEMENT'            . ', EVENT_OBJECT_SCHEMA, EVENT_OBJECT_TABLE, DEFINER'            . ' FROM information_schema.TRIGGERS'            . ' WHERE TRIGGER_SCHEMA= \'' . PMA_sqlAddSlashes($db) . '\'';        if (! empty($table)) {            $query .= " AND EVENT_OBJECT_TABLE = '" . PMA_sqlAddSlashes($table) . "';";        }    } else {        $query = "SHOW TRIGGERS FROM " . PMA_backquote($db);        if (! empty($table)) {            $query .= " LIKE '" . PMA_sqlAddSlashes($table, true) . "';";        }    }    if ($triggers = PMA_DBI_fetch_result($query)) {        foreach ($triggers as $trigger) {            if ($GLOBALS['cfg']['Server']['DisableIS']) {                $trigger['TRIGGER_NAME'] = $trigger['Trigger'];                $trigger['ACTION_TIMING'] = $trigger['Timing'];                $trigger['EVENT_MANIPULATION'] = $trigger['Event'];                $trigger['EVENT_OBJECT_TABLE'] = $trigger['Table'];                $trigger['ACTION_STATEMENT'] = $trigger['Statement'];                $trigger['DEFINER'] = $trigger['Definer'];            }            $one_result = array();            $one_result['name'] = $trigger['TRIGGER_NAME'];            $one_result['table'] = $trigger['EVENT_OBJECT_TABLE'];            $one_result['action_timing'] = $trigger['ACTION_TIMING'];            $one_result['event_manipulation'] = $trigger['EVENT_MANIPULATION'];            $one_result['definition'] = $trigger['ACTION_STATEMENT'];            $one_result['definer'] = $trigger['DEFINER'];            // do not prepend the schema name; this way, importing the            // definition into another schema will work            $one_result['full_trigger_name'] = PMA_backquote($trigger['TRIGGER_NAME']);            $one_result['drop'] = 'DROP TRIGGER IF EXISTS '                . $one_result['full_trigger_name'];            $one_result['create'] = 'CREATE TRIGGER '                . $one_result['full_trigger_name'] . ' '                . $trigger['ACTION_TIMING']. ' '                . $trigger['EVENT_MANIPULATION']                . ' ON ' . PMA_backquote($trigger['EVENT_OBJECT_TABLE'])                . "\n" . ' FOR EACH ROW '                . $trigger['ACTION_STATEMENT'] . "\n" . $delimiter . "\n";            $result[] = $one_result;        }    }    // Sort results by name    $name = array();    foreach ($result as $key => $value) {        $name[] = $value['name'];    }    array_multisort($name, SORT_ASC, $result);    return($result);}/** * Formats database error message in a friendly way. * This is needed because some errors messages cannot * be obtained by mysql_error(). * * @param int    $error_number  Error code * @param string $error_message Error message as returned by server * * @return string HML text with error details */function PMA_DBI_formatError($error_number, $error_message){    if (! empty($error_message)) {        $error_message = PMA_DBI_convert_message($error_message);    }    $error_message = htmlspecialchars($error_message);    $error = '#' . ((string) $error_number);    if ($error_number == 2002) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding (or the local server\'s socket is not correctly configured).');    } elseif ($error_number == 2003) {        $error .= ' - ' . $error_message;        $error .= '<br />' . __('The server is not responding.');    } elseif ($error_number == 1005) {        if (strpos($error_message, 'errno: 13') !== false) {            $error .= ' - ' . $error_message;            $error .= '<br />' . __('Please check privileges of directory containing database.');        } else {            /* InnoDB contraints, see             * http://dev.mysql.com/doc/refman/5.0/en/innodb-foreign-key-constraints.html             */            $error .= ' - ' . $error_message .                ' (<a href="server_engines.php' .                PMA_generate_common_url(array('engine' => 'InnoDB', 'page' => 'Status')) .                '">' . __('Details...') . '</a>)';        }    } else {        $error .= ' - ' . $error_message;    }    return $error;}/** * Checks whether given schema is a system schema: information_schema * (MySQL and Drizzle) or data_dictionary (Drizzle) * * @param string $schema_name           Name of schema (database) to test * @param bool   $test_for_mysql_schema Whether 'mysql' schema should *                                      be treated the same as IS and DD * * @return bool */function PMA_is_system_schema($schema_name, $test_for_mysql_schema = false){    return strtolower($schema_name) == 'information_schema'            || (!PMA_DRIZZLE && strtolower($schema_name) == 'performance_schema')            || (PMA_DRIZZLE && strtolower($schema_name) == 'data_dictionary')            || ($test_for_mysql_schema && !PMA_DRIZZLE && $schema_name == 'mysql');}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Configuration handling. * * @package PhpMyAdmin *//** * Load vendor configuration. */require './libraries/vendor_config.php';/** * Configuration class * * @package PhpMyAdmin */class PMA_Config{    /**     * @var string  default config source     */    var $default_source = './libraries/config.default.php';    /**     * @var array   default configuration settings     */    var $default = array();    /**     * @var array   configuration settings     */    var $settings = array();    /**     * @var string  config source     */    var $source = '';    /**     * @var int     source modification time     */    var $source_mtime = 0;    var $default_source_mtime = 0;    var $set_mtime = 0;    /**     * @var boolean     */    var $error_config_file = false;    /**     * @var boolean     */    var $error_config_default_file = false;    /**     * @var boolean     */    var $error_pma_uri = false;    /**     * @var array     */    var $default_server = array();    /**     * @var boolean whether init is done or not     * set this to false to force some initial checks     * like checking for required functions     */    var $done = false;    /**     * constructor     *     * @param string $source source to read config from     */    function __construct($source = null)    {        $this->settings = array();        // functions need to refresh in case of config file changed goes in        // PMA_Config::load()        $this->load($source);        // other settings, independent from config file, comes in        $this->checkSystem();        $this->checkIsHttps();    }    /**     * sets system and application settings     *     * @return nothing     */    function checkSystem()    {        $this->set('PMA_VERSION', '3.5.0');        /**         * @deprecated         */        $this->set('PMA_THEME_VERSION', 2);        /**         * @deprecated         */        $this->set('PMA_THEME_GENERATION', 2);        $this->checkPhpVersion();        $this->checkWebServerOs();        $this->checkWebServer();        $this->checkGd2();        $this->checkClient();        $this->checkUpload();        $this->checkUploadSize();        $this->checkOutputCompression();    }    /**     * whether to use gzip output compression or not     *     * @return nothing     */    function checkOutputCompression()    {        // If zlib output compression is set in the php configuration file, no        // output buffering should be run        if (@ini_get('zlib.output_compression')) {            $this->set('OBGzip', false);        }        // disable output-buffering (if set to 'auto') for IE6, else enable it.        if (strtolower($this->get('OBGzip')) == 'auto') {            if ($this->get('PMA_USR_BROWSER_AGENT') == 'IE'                && $this->get('PMA_USR_BROWSER_VER') >= 6                && $this->get('PMA_USR_BROWSER_VER') < 7            ) {                $this->set('OBGzip', false);            } else {                $this->set('OBGzip', true);            }        }    }    /**     * Determines platform (OS), browser and version of the user     * Based on a phpBuilder article:     *     * @see http://www.phpbuilder.net/columns/tim20000821.php     *     * @return nothing     */    function checkClient()    {        if (PMA_getenv('HTTP_USER_AGENT')) {            $HTTP_USER_AGENT = PMA_getenv('HTTP_USER_AGENT');        } elseif (! isset($HTTP_USER_AGENT)) {            $HTTP_USER_AGENT = '';        }        // 1. Platform        if (strstr($HTTP_USER_AGENT, 'Win')) {            $this->set('PMA_USR_OS', 'Win');        } elseif (strstr($HTTP_USER_AGENT, 'Mac')) {            $this->set('PMA_USR_OS', 'Mac');        } elseif (strstr($HTTP_USER_AGENT, 'Linux')) {            $this->set('PMA_USR_OS', 'Linux');        } elseif (strstr($HTTP_USER_AGENT, 'Unix')) {            $this->set('PMA_USR_OS', 'Unix');        } elseif (strstr($HTTP_USER_AGENT, 'OS/2')) {            $this->set('PMA_USR_OS', 'OS/2');        } else {            $this->set('PMA_USR_OS', 'Other');        }        // 2. browser and version        // (must check everything else before Mozilla)        if (preg_match(            '@Opera(/| )([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'OPERA');        } elseif (preg_match(            '@MSIE ([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'IE');        } elseif (preg_match(            '@OmniWeb/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'OMNIWEB');        // Konqueror 2.2.2 says Konqueror/2.2.2        // Konqueror 3.0.3 says Konqueror/3        } elseif (preg_match(            '@(Konqueror/)(.*)(;)@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[2]);            $this->set('PMA_USR_BROWSER_AGENT', 'KONQUEROR');        } elseif (preg_match(            '@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version)            && preg_match('@Safari/([0-9]*)@', $HTTP_USER_AGENT, $log_version2)        ) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1] . '.' . $log_version2[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'SAFARI');        } elseif (preg_match('@rv:1.9(.*)Gecko@', $HTTP_USER_AGENT)) {            $this->set('PMA_USR_BROWSER_VER', '1.9');            $this->set('PMA_USR_BROWSER_AGENT', 'GECKO');        } elseif (            preg_match('@Mozilla/([0-9].[0-9]{1,2})@',            $HTTP_USER_AGENT,            $log_version        )) {            $this->set('PMA_USR_BROWSER_VER', $log_version[1]);            $this->set('PMA_USR_BROWSER_AGENT', 'MOZILLA');        } else {            $this->set('PMA_USR_BROWSER_VER', 0);            $this->set('PMA_USR_BROWSER_AGENT', 'OTHER');        }    }    /**     * Whether GD2 is present     *     * @return nothing     */    function checkGd2()    {        if ($this->get('GD2Available') == 'yes') {            $this->set('PMA_IS_GD2', 1);        } elseif ($this->get('GD2Available') == 'no') {            $this->set('PMA_IS_GD2', 0);        } else {            if (!@function_exists('imagecreatetruecolor')) {                $this->set('PMA_IS_GD2', 0);            } else {                if (@function_exists('gd_info')) {                    $gd_nfo = gd_info();                    if (strstr($gd_nfo["GD Version"], '2.')) {                        $this->set('PMA_IS_GD2', 1);                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                } else {                    /* We must do hard way... but almost no chance to execute this */                    ob_start();                    phpinfo(INFO_MODULES); /* Only modules */                    $a = strip_tags(ob_get_contents());                    ob_end_clean();                    /* Get GD version string from phpinfo output */                    if (preg_match('@GD Version[[:space:]]*\(.*\)@', $a, $v)) {                        if (strstr($v, '2.')) {                            $this->set('PMA_IS_GD2', 1);                        } else {                            $this->set('PMA_IS_GD2', 0);                        }                    } else {                        $this->set('PMA_IS_GD2', 0);                    }                }            }        }    }    /**     * Whether the Web server php is running on is IIS     *     * @return nothing     */    function checkWebServer()    {        if (PMA_getenv('SERVER_SOFTWARE')            // some versions return Microsoft-IIS, some Microsoft/IIS            // we could use a preg_match() but it's slower            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'Microsoft')            && stristr(PMA_getenv('SERVER_SOFTWARE'), 'IIS')        ) {            $this->set('PMA_IS_IIS', 1);        } else {            $this->set('PMA_IS_IIS', 0);        }    }    /**     * Whether the os php is running on is windows or not     *     * @return nothing     */    function checkWebServerOs()    {        // Default to Unix or Equiv        $this->set('PMA_IS_WINDOWS', 0);        // If PHP_OS is defined then continue        if (defined('PHP_OS')) {            if (stristr(PHP_OS, 'win')) {                // Is it some version of Windows                $this->set('PMA_IS_WINDOWS', 1);            } elseif (stristr(PHP_OS, 'OS/2')) {                // Is it OS/2 (No file permissions like Windows)                $this->set('PMA_IS_WINDOWS', 1);            }        }    }    /**     * detects PHP version     *     * @return nothing     */    function checkPhpVersion()    {        $match = array();        if (! preg_match(            '@([0-9]{1,2}).([0-9]{1,2}).([0-9]{1,2})@',            phpversion(),            $match        )) {            preg_match(                '@([0-9]{1,2}).([0-9]{1,2})@',                phpversion(),                $match            );        }        if (isset($match) && ! empty($match[1])) {            if (! isset($match[2])) {                $match[2] = 0;            }            if (! isset($match[3])) {                $match[3] = 0;            }            $this->set(                'PMA_PHP_INT_VERSION',                (int) sprintf('%d%02d%02d', $match[1], $match[2], $match[3])            );        } else {            $this->set('PMA_PHP_INT_VERSION', 0);        }        $this->set('PMA_PHP_STR_VERSION', phpversion());    }    /**     * loads default values from default source     *     * @return  boolean     success     */    function loadDefaults()    {        $cfg = array();        if (! file_exists($this->default_source)) {            $this->error_config_default_file = true;            return false;        }        include $this->default_source;        $this->default_source_mtime = filemtime($this->default_source);        $this->default_server = $cfg['Servers'][1];        unset($cfg['Servers']);        $this->default = $cfg;        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->error_config_default_file = false;        return true;    }    /**     * loads configuration from $source, usally the config file     * should be called on object creation     *     * @param string $source config file     *     * @return bool     */    function load($source = null)    {        $this->loadDefaults();        if (null !== $source) {            $this->setSource($source);        }        if (! $this->checkConfigSource()) {            return false;        }        $cfg = array();        /**         * Parses the configuration file, the eval is used here to avoid         * problems with trailing whitespace, what is often a problem.         */        $old_error_reporting = error_reporting(0);        $eval_result = eval('?' . '>' . trim(file_get_contents($this->getSource())));        error_reporting($old_error_reporting);        if ($eval_result === false) {            $this->error_config_file = true;        } else {            $this->error_config_file = false;            $this->source_mtime = filemtime($this->getSource());        }        /**         * Backward compatibility code         */        if (!empty($cfg['DefaultTabTable'])) {            $cfg['DefaultTabTable'] = str_replace(                '_properties',                '',                str_replace(                    'tbl_properties.php',                    'tbl_sql.php',                    $cfg['DefaultTabTable']                )            );        }        if (!empty($cfg['DefaultTabDatabase'])) {            $cfg['DefaultTabDatabase'] = str_replace(                '_details',                '',                str_replace(                    'db_details.php',                    'db_sql.php',                    $cfg['DefaultTabDatabase']                )            );        }        $this->settings = PMA_array_merge_recursive($this->settings, $cfg);        $this->checkPmaAbsoluteUri();        $this->checkFontsize();        $this->checkPermissions();        // Handling of the collation must be done after merging of $cfg        // (from config.inc.php) so that $cfg['DefaultConnectionCollation']        // can have an effect. Note that the presence of collation        // information in a cookie has priority over what is defined        // in the default or user's config files.        /**         * @todo check validity of $_COOKIE['pma_collation_connection']         */        if (! empty($_COOKIE['pma_collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_COOKIE['pma_collation_connection'])            );        } else {            $this->set(                'collation_connection',                $this->get('DefaultConnectionCollation')            );        }        // Now, a collation information could come from REQUEST        // (an example of this: the collation selector in main.php)        // so the following handles the setting of collation_connection        // and later, in common.inc.php, the cookie will be set        // according to this.        $this->checkCollationConnection();        return true;    }    /**     * Loads user preferences and merges them with current config     * must be called after control connection has been estabilished     *     * @return boolean     */    function loadUserPreferences()    {        // index.php should load these settings, so that phpmyadmin.css.php        // will have everything avaiable in session cache        $server = isset($GLOBALS['server'])            ? $GLOBALS['server']            : (!empty($GLOBALS['cfg']['ServerDefault'])                ? $GLOBALS['cfg']['ServerDefault']                : 0);        $cache_key = 'server_' . $server;        if ($server > 0 && !defined('PMA_MINIMUM_COMMON')) {            $config_mtime = max($this->default_source_mtime, $this->source_mtime);            // cache user preferences, use database only when needed            if (! isset($_SESSION['cache'][$cache_key]['userprefs'])                || $_SESSION['cache'][$cache_key]['config_mtime'] < $config_mtime            ) {                // load required libraries                include_once './libraries/user_preferences.lib.php';                $prefs = PMA_load_userprefs();                $_SESSION['cache'][$cache_key]['userprefs']                    = PMA_apply_userprefs($prefs['config_data']);                $_SESSION['cache'][$cache_key]['userprefs_mtime'] = $prefs['mtime'];                $_SESSION['cache'][$cache_key]['userprefs_type'] = $prefs['type'];                $_SESSION['cache'][$cache_key]['config_mtime'] = $config_mtime;            }        } elseif ($server == 0            || ! isset($_SESSION['cache'][$cache_key]['userprefs'])        ) {            $this->set('user_preferences', false);            return;        }        $config_data = $_SESSION['cache'][$cache_key]['userprefs'];        // type is 'db' or 'session'        $this->set(            'user_preferences',            $_SESSION['cache'][$cache_key]['userprefs_type']        );        $this->set(            'user_preferences_mtime',            $_SESSION['cache'][$cache_key]['userprefs_mtime']        );        // backup some settings        $org_fontsize = $this->settings['fontsize'];        // load config array        $this->settings = PMA_array_merge_recursive($this->settings, $config_data);        $GLOBALS['cfg'] = PMA_array_merge_recursive($GLOBALS['cfg'], $config_data);        if (defined('PMA_MINIMUM_COMMON')) {            return;        }        // settings below start really working on next page load, but        // changes are made only in index.php so everything is set when        // in frames        // save theme        $tmanager = $_SESSION['PMA_Theme_Manager'];        if ($tmanager->getThemeCookie() || isset($_REQUEST['set_theme'])) {            if ((! isset($config_data['ThemeDefault'])                && $tmanager->theme->getId() != 'original')                || isset($config_data['ThemeDefault'])                && $config_data['ThemeDefault'] != $tmanager->theme->getId()            ) {                // new theme was set in common.inc.php                $this->setUserValue(                    null,                    'ThemeDefault',                    $tmanager->theme->getId(),                    'original'                );            }        } else {            // no cookie - read default from settings            if ($this->settings['ThemeDefault'] != $tmanager->theme->getId()                && $tmanager->checkTheme($this->settings['ThemeDefault'])            ) {                $tmanager->setActiveTheme($this->settings['ThemeDefault']);                $tmanager->setThemeCookie();            }        }        // save font size        if ((! isset($config_data['fontsize'])            && $org_fontsize != '82%')            || isset($config_data['fontsize'])            && $org_fontsize != $config_data['fontsize']        ) {            $this->setUserValue(null, 'fontsize', $org_fontsize, '82%');        }        // save language        if (isset($_COOKIE['pma_lang']) || isset($_POST['lang'])) {            if ((! isset($config_data['lang'])                && $GLOBALS['lang'] != 'en')                || isset($config_data['lang'])                && $GLOBALS['lang'] != $config_data['lang']            ) {                $this->setUserValue(null, 'lang', $GLOBALS['lang'], 'en');            }        } else {            // read language from settings            if (isset($config_data['lang']) && PMA_langSet($config_data['lang'])) {                $this->setCookie('pma_lang', $GLOBALS['lang']);            }        }        // save connection collation        if (isset($_COOKIE['pma_collation_connection'])            || isset($_POST['collation_connection'])        ) {            if ((! isset($config_data['collation_connection'])                && $GLOBALS['collation_connection'] != 'utf8_general_ci')                || isset($config_data['collation_connection'])                && $GLOBALS['collation_connection']                    != $config_data['collation_connection']            ) {                $this->setUserValue(                    null,                    'collation_connection',                    $GLOBALS['collation_connection'],                    'utf8_general_ci'                );            }        } else {            // read collation from settings            if (isset($config_data['collation_connection'])) {                $GLOBALS['collation_connection']                    = $config_data['collation_connection'];                $this->setCookie(                    'pma_collation_connection',                    $GLOBALS['collation_connection']                );            }        }    }    /**     * Sets config value which is stored in user preferences (if available)     * or in a cookie.     *     * If user preferences are not yet initialized, option is applied to     * global config and added to a update queue, which is processed     * by {@link loadUserPreferences()}     *     * @param string $cookie_name   can be null     * @param string $cfg_path     * @param mixed  $new_cfg_value new value     * @param mixed  $default_value default value     *     * @return nothing     */    function setUserValue($cookie_name, $cfg_path, $new_cfg_value, $default_value = null)    {        // use permanent user preferences if possible        $prefs_type = $this->get('user_preferences');        if ($prefs_type) {            include_once './libraries/user_preferences.lib.php';            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->default);            }            PMA_persist_option($cfg_path, $new_cfg_value, $default_value);        }        if ($prefs_type != 'db' && $cookie_name) {            // fall back to cookies            if ($default_value === null) {                $default_value = PMA_array_read($cfg_path, $this->settings);            }            $this->setCookie($cookie_name, $new_cfg_value, $default_value);        }        PMA_array_write($cfg_path, $GLOBALS['cfg'], $new_cfg_value);        PMA_array_write($cfg_path, $this->settings, $new_cfg_value);    }    /**     * Reads value stored by {@link setUserValue()}     *     * @param string $cookie_name cookie name     * @param mixed  $cfg_value   config value     *     * @return mixed     */    function getUserValue($cookie_name, $cfg_value)    {        $cookie_exists = isset($_COOKIE) && !empty($_COOKIE[$cookie_name]);        $prefs_type = $this->get('user_preferences');        if ($prefs_type == 'db') {            // permanent user preferences value exists, remove cookie            if ($cookie_exists) {                $this->removeCookie($cookie_name);            }        } else if ($cookie_exists) {            return $_COOKIE[$cookie_name];        }        // return value from $cfg array        return $cfg_value;    }    /**     * set source     *     * @param string  $source     *     * @return nothing     */    function setSource($source)    {        $this->source = trim($source);    }    /**     * checks if the config folder still exists and terminates app if true     *     * @return nothing     */    function checkConfigFolder()    {        // Refuse to work while there still might be some world writable dir:        if (is_dir('./config')) {            die(__('Remove "./config" directory before using phpMyAdmin!'));        }    }    /**     * check config source     *     * @return  boolean whether source is valid or not     */    function checkConfigSource()    {        if (! $this->getSource()) {            // no configuration file set at all            return false;        }        if (! file_exists($this->getSource())) {            $this->source_mtime = 0;            return false;        }        if (! is_readable($this->getSource())) {            $this->source_mtime = 0;            die(                sprintf(__('Existing configuration file (%s) is not readable.'),                    $this->getSource()                )            );        }        return true;    }    /**     * verifies the permissions on config file (if asked by configuration)     * (must be called after config.inc.php has been merged)     *     * @return nothing     */    function checkPermissions()    {        // Check for permissions (on platforms that support it):        if ($this->get('CheckConfigurationPermissions')) {            $perms = @fileperms($this->getSource());            if (!($perms === false) && ($perms & 2)) {                // This check is normally done after loading configuration                $this->checkWebServerOs();                if ($this->get('PMA_IS_WINDOWS') == 0) {                    $this->source_mtime = 0;                    die(__('Wrong permissions on configuration file, should not be world writable!'));                }            }        }    }    /**     * returns specific config setting     *     * @param string $setting config setting     *     * @return mixed value     */    function get($setting)    {        if (isset($this->settings[$setting])) {            return $this->settings[$setting];        }        return null;    }    /**     * sets configuration variable     *     * @param string $setting configuration option     * @param string $value   new value for configuration option     *     * @return nothing     */    function set($setting, $value)    {        if (! isset($this->settings[$setting])            || $this->settings[$setting] != $value        ) {            $this->settings[$setting] = $value;            $this->set_mtime = time();        }    }    /**     * returns source for current config     *     * @return  string  config source     */    function getSource()    {        return $this->source;    }    /**     * returns a unique value to force a CSS reload if either the config     * or the theme changes     * must also check the pma_fontsize cookie in case there is no     * config file     *     * @return int Summary of unix timestamps and fontsize,     * to be unique on theme parameters change     */    function getThemeUniqueValue()    {        if (null !== $this->get('fontsize')) {            $fontsize = intval($this->get('fontsize'));        } elseif (isset($_COOKIE['pma_fontsize'])) {            $fontsize = intval($_COOKIE['pma_fontsize']);        } else {            $fontsize = 0;        }        return (            $fontsize +            $this->source_mtime +            $this->default_source_mtime +            $this->get('user_preferences_mtime') +            $_SESSION['PMA_Theme']->mtime_info +            $_SESSION['PMA_Theme']->filesize_info);    }    /**     * $cfg['PmaAbsoluteUri'] is a required directive else cookies won't be     * set properly and, depending on browsers, inserting or updating a     * record might fail     *     * @return bool     */    function checkPmaAbsoluteUri()    {        // Setup a default value to let the people and lazy sysadmins work anyway,        // they'll get an error if the autodetect code doesn't work        $pma_absolute_uri = $this->get('PmaAbsoluteUri');        $is_https = $this->detectHttps();        if (strlen($pma_absolute_uri) < 5) {            $url = array();            // If we don't have scheme, we didn't have full URL so we need to            // dig deeper            if (empty($url['scheme'])) {                // Scheme                if ($is_https) {                    $url['scheme'] = 'https';                } else {                    $url['scheme'] = 'http';                }                // Host and port                if (PMA_getenv('HTTP_HOST')) {                    // Prepend the scheme before using parse_url() since this                    // is not part of the RFC2616 Host request-header                    $parsed_url = parse_url(                        $url['scheme'] . '://' . PMA_getenv('HTTP_HOST')                    );                    if (!empty($parsed_url['host'])) {                        $url = $parsed_url;                    } else {                        $url['host'] = PMA_getenv('HTTP_HOST');                    }                } elseif (PMA_getenv('SERVER_NAME')) {                    $url['host'] = PMA_getenv('SERVER_NAME');                } else {                    $this->error_pma_uri = true;                    return false;                }                // If we didn't set port yet...                if (empty($url['port']) && PMA_getenv('SERVER_PORT')) {                    $url['port'] = PMA_getenv('SERVER_PORT');                }                // And finally the path could be already set from REQUEST_URI                if (empty($url['path'])) {                    $path = parse_url($GLOBALS['PMA_PHP_SELF']);                    $url['path'] = $path['path'];                }            }            // Make url from parts we have            $pma_absolute_uri = $url['scheme'] . '://';            // Was there user information?            if (!empty($url['user'])) {                $pma_absolute_uri .= $url['user'];                if (!empty($url['pass'])) {                    $pma_absolute_uri .= ':' . $url['pass'];                }                $pma_absolute_uri .= '@';            }            // Add hostname            $pma_absolute_uri .= $url['host'];            // Add port, if it not the default one            if (! empty($url['port'])                && (($url['scheme'] == 'http' && $url['port'] != 80)                || ($url['scheme'] == 'https' && $url['port'] != 443))            ) {                $pma_absolute_uri .= ':' . $url['port'];            }            // And finally path, without script name, the 'a' is there not to            // strip our directory, when path is only /pmadir/ without filename.            // Backslashes returned by Windows have to be changed.            // Only replace backslashes by forward slashes if on Windows,            // as the backslash could be valid on a non-Windows system.            $this->checkWebServerOs();            if ($this->get('PMA_IS_WINDOWS') == 1) {                $path = str_replace("\\", "/", dirname($url['path'] . 'a'));            } else {                $path = dirname($url['path'] . 'a');            }            // To work correctly within transformations overview:            if (defined('PMA_PATH_TO_BASEDIR') && PMA_PATH_TO_BASEDIR == '../../') {                if ($this->get('PMA_IS_WINDOWS') == 1) {                    $path = str_replace("\\", "/", dirname(dirname($path)));                } else {                    $path = dirname(dirname($path));                }            }            // PHP's dirname function would have returned a dot            // when $path contains no slash            if ($path == '.') {                $path = '';            }            // in vhost situations, there could be already an ending slash            if (substr($path, -1) != '/') {                $path .= '/';            }            $pma_absolute_uri .= $path;            // We used to display a warning if PmaAbsoluteUri wasn't set, but now            // the autodetect code works well enough that we don't display the            // warning at all. The user can still set PmaAbsoluteUri manually.            // See            // http://sf.net/tracker/?func=detail&aid=1257134&group_id=23067&atid=377411        } else {            // The URI is specified, however users do often specify this            // wrongly, so we try to fix this.            // Adds a trailing slash et the end of the phpMyAdmin uri if it            // does not exist.            if (substr($pma_absolute_uri, -1) != '/') {                $pma_absolute_uri .= '/';            }            // If URI doesn't start with http:// or https://, we will add            // this.            if (substr($pma_absolute_uri, 0, 7) != 'http://'                && substr($pma_absolute_uri, 0, 8) != 'https://'            ) {                $pma_absolute_uri                    = ($is_https ? 'https' : 'http')                    . ':' . (substr($pma_absolute_uri, 0, 2) == '//' ? '' : '//')                    . $pma_absolute_uri;            }        }        $this->set('PmaAbsoluteUri', $pma_absolute_uri);    }    /**     * check selected collation_connection     *     * @todo check validity of $_REQUEST['collation_connection']     *     * @return nothing     */    function checkCollationConnection()    {        if (! empty($_REQUEST['collation_connection'])) {            $this->set(                'collation_connection',                strip_tags($_REQUEST['collation_connection'])            );        }    }    /**     * checks for font size configuration, and sets font size as requested by user     *     * @return nothing     */    function checkFontsize()    {        $new_fontsize = '';        if (isset($_GET['set_fontsize'])) {            $new_fontsize = $_GET['set_fontsize'];        } elseif (isset($_POST['set_fontsize'])) {            $new_fontsize = $_POST['set_fontsize'];        } elseif (isset($_COOKIE['pma_fontsize'])) {            $new_fontsize = $_COOKIE['pma_fontsize'];        }        if (preg_match('/^[0-9.]+(px|em|pt|\%)$/', $new_fontsize)) {            $this->set('fontsize', $new_fontsize);        } elseif (! $this->get('fontsize')) {            // 80% would correspond to the default browser font size            // of 16, but use 82% to help read the monoface font            $this->set('fontsize', '82%');        }        $this->setCookie('pma_fontsize', $this->get('fontsize'), '82%');    }    /**     * checks if upload is enabled     *     * @return nothing     */    function checkUpload()    {        if (ini_get('file_uploads')) {            $this->set('enable_upload', true);            // if set "php_admin_value file_uploads Off" in httpd.conf            // ini_get() also returns the string "Off" in this case:            if ('off' == strtolower(ini_get('file_uploads'))) {                $this->set('enable_upload', false);            }        } else {            $this->set('enable_upload', false);        }    }    /**     * Maximum upload size as limited by PHP     * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas     *     * this section generates $max_upload_size in bytes     *     * @return nothing     */    function checkUploadSize()    {        if (! $filesize = ini_get('upload_max_filesize')) {            $filesize = "5M";        }        if ($postsize = ini_get('post_max_size')) {            $this->set(                'max_upload_size',                min(PMA_get_real_size($filesize), PMA_get_real_size($postsize))            );        } else {            $this->set('max_upload_size', PMA_get_real_size($filesize));        }    }    /**     * check for https     *     * @return nothing     */    function checkIsHttps()    {        $this->set('is_https', $this->isHttps());    }    /**     * Checks if protocol is https     *     * This function checks if the https protocol is used in the PmaAbsoluteUri     * configuration setting, as opposed to detectHttps() which checks if the     * https protocol is used on the active connection.     *     * @return bool     */    public function isHttps()    {        static $is_https = null;        if (null !== $is_https) {            return $is_https;        }        $url = parse_url($this->get('PmaAbsoluteUri'));        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * Detects whether https appears to be used.     *     * This function checks if the https protocol is used in the current connection     * with the webserver, based on environment variables.     * Please note that this just detects what we see, so     * it completely ignores things like reverse proxies.     *     * @return bool     */    function detectHttps()    {        $is_https = false;        $url = array();        // At first we try to parse REQUEST_URI, it might contain full URL,        if (PMA_getenv('REQUEST_URI')) {            // produces E_WARNING if it cannot get parsed, e.g. '/foobar:/'            $url = @parse_url(PMA_getenv('REQUEST_URI'));            if ($url === false) {                $url = array();            }        }        // If we don't have scheme, we didn't have full URL so we need to        // dig deeper        if (empty($url['scheme'])) {            // Scheme            if (PMA_getenv('HTTP_SCHEME')) {                $url['scheme'] = PMA_getenv('HTTP_SCHEME');            } elseif (PMA_getenv('HTTPS') && strtolower(PMA_getenv('HTTPS')) == 'on') {                $url['scheme'] = 'https';            } elseif (PMA_getenv('HTTP_X_FORWARDED_PROTO')) {                $url['scheme'] = strtolower(PMA_getenv('HTTP_X_FORWARDED_PROTO'));            } elseif (PMA_getenv('HTTP_FRONT_END_HTTPS') && strtolower(PMA_getenv('HTTP_FRONT_END_HTTPS')) == 'on') {                $url['scheme'] = 'https';            } else {                $url['scheme'] = 'http';            }        }        if (isset($url['scheme']) && $url['scheme'] == 'https') {            $is_https = true;        } else {            $is_https = false;        }        return $is_https;    }    /**     * detect correct cookie path     *     * @return nothing     */    function checkCookiePath()    {        $this->set('cookie_path', $this->getCookiePath());    }    /**     * Get cookie path     *     * @return string     */    public function getCookiePath()    {        static $cookie_path = null;        if (null !== $cookie_path) {            return $cookie_path;        }        $parsed_url = parse_url($this->get('PmaAbsoluteUri'));        $cookie_path   = $parsed_url['path'];        return $cookie_path;    }    /**     * enables backward compatibility     *     * @return nothing     */    function enableBc()    {        $GLOBALS['cfg']             = $this->settings;        $GLOBALS['default_server']  = $this->default_server;        unset($this->default_server);        $GLOBALS['collation_connection'] = $this->get('collation_connection');        $GLOBALS['is_upload']       = $this->get('enable_upload');        $GLOBALS['max_upload_size'] = $this->get('max_upload_size');        $GLOBALS['cookie_path']     = $this->get('cookie_path');        $GLOBALS['is_https']        = $this->get('is_https');        $defines = array(            'PMA_VERSION',            'PMA_THEME_VERSION',            'PMA_THEME_GENERATION',            'PMA_PHP_STR_VERSION',            'PMA_PHP_INT_VERSION',            'PMA_IS_WINDOWS',            'PMA_IS_IIS',            'PMA_IS_GD2',            'PMA_USR_OS',            'PMA_USR_BROWSER_VER',            'PMA_USR_BROWSER_AGENT'            );        foreach ($defines as $define) {            if (! defined($define)) {                define($define, $this->get($define));            }        }    }    /**     * @todo finish     *     * @return nothing     */    function save()    {    }    /**     * returns options for font size selection     *     * @static     * @param string $current_size current selected font size with unit     *     * @return array selectable font sizes     */    static protected function _getFontsizeOptions($current_size = '82%')    {        $unit = preg_replace('/[0-9.]*/', '', $current_size);        $value = preg_replace('/[^0-9.]*/', '', $current_size);        $factors = array();        $options = array();        $options["$value"] = $value . $unit;        if ($unit === '%') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } elseif ($unit === 'em') {            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;        } elseif ($unit === 'pt') {            $factors[] = 0.5;            $factors[] = 2;        } elseif ($unit === 'px') {            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        } else {            //unknown font size unit            $factors[] = 0.05;            $factors[] = 0.2;            $factors[] = 1;            $factors[] = 5;            $factors[] = 10;        }        foreach ($factors as $key => $factor) {            $option_inc = $value + $factor;            $option_dec = $value - $factor;            while (count($options) < 21) {                $options["$option_inc"] = $option_inc . $unit;                if ($option_dec > $factors[0]) {                    $options["$option_dec"] = $option_dec . $unit;                }                $option_inc += $factor;                $option_dec -= $factor;                if (isset($factors[$key + 1])                    && $option_inc >= $value + $factors[$key + 1]                ) {                    break;                }            }        }        ksort($options);        return $options;    }    /**     * returns html selectbox for font sizes     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static protected function _getFontsizeSelection()    {        $current_size = $GLOBALS['PMA_Config']->get('fontsize');        // for the case when there is no config file (this is supported)        if (empty($current_size)) {            if (isset($_COOKIE['pma_fontsize'])) {                $current_size = $_COOKIE['pma_fontsize'];            } else {                $current_size = '82%';            }        }        $options = PMA_Config::_getFontsizeOptions($current_size);        $return = '<label for="select_fontsize">' . __('Font size') . ':</label>' . "\n";        $return .= '<select name="set_fontsize" id="select_fontsize" class="autosubmit">' . "\n";        foreach ($options as $option) {            $return .= '<option value="' . $option . '"';            if ($option == $current_size) {                $return .= ' selected="selected"';            }            $return .= '>' . $option . '</option>' . "\n";        }        $return .= '</select>';        return $return;    }    /**     * return complete font size selection form     *     * @static     * @param string $current_size currently slected font size with unit     *     * @return string html selectbox     */    static public function getFontsizeForm()    {        return '<form name="form_fontsize_selection" id="form_fontsize_selection"'            . ' method="post" action="index.php" target="_parent">' . "\n"            . PMA_generate_common_hidden_inputs() . "\n"            . PMA_Config::_getFontsizeSelection() . "\n"            . '<noscript>' . "\n"            . '<input type="submit" value="' . __('Go') . '" />' . "\n"            . '</noscript>' . "\n"            . '</form>';    }    /**     * removes cookie     *     * @param string $cookie name of cookie to remove     *     * @return boolean result of setcookie()     */    function removeCookie($cookie)    {        return setcookie(            $cookie,            '',            time() - 3600,            $this->getCookiePath(),            '',            $this->isHttps()        );    }    /**     * sets cookie if value is different from current cokkie value,     * or removes if value is equal to default     *     * @param string  $cookie   name of cookie to remove     * @param mixed   $value    new cookie value     * @param string  $default  default value     * @param int     $validity validity of cookie in seconds (default is one month)     * @param bool    $httponly whether cookie is only for HTTP (and not for scripts)     *     * @return boolean result of setcookie()     */    function setCookie($cookie, $value, $default = null, $validity = null, $httponly = true)    {        if ($validity == null) {            $validity = 2592000;        }        if (strlen($value) && null !== $default && $value === $default) {            // default value is used            if (isset($_COOKIE[$cookie])) {                // remove cookie                return $this->removeCookie($cookie);            }            return false;        }        if (! strlen($value) && isset($_COOKIE[$cookie])) {            // remove cookie, value is empty            return $this->removeCookie($cookie);        }        if (! isset($_COOKIE[$cookie]) || $_COOKIE[$cookie] !== $value) {            // set cookie with new value            /* Calculate cookie validity */            if ($validity == 0) {                $v = 0;            } else {                $v = time() + $validity;            }            return setcookie(                $cookie,                $value,                $v,                $this->getCookiePath(),                '',                $this->isHttps(),                $httponly            );        }        // cookie has already $value as value        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Theme information * * @package PhpMyAdmin-theme * @subpackage Original *//** * */$theme_name = 'Original';$theme_full_version = '2.9';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the classic MySQL extension * * @package PhpMyAdmin-DBI-MySQL */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (! defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysql_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * Helper function for connecting to the database server * * @param   string  $server * @param   string  $user * @param   string  $password * @param   int     $client_flags * @param   bool    $persistent * @return  mixed   false on error or a mysql connection resource on success */function PMA_DBI_real_connect($server, $user, $password, $client_flags, $persistent = false){    global $cfg;    if (empty($client_flags)) {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password);        } else {            $link = @mysql_connect($server, $user, $password);        }    } else {        if ($cfg['PersistentConnections'] || $persistent) {            $link = @mysql_pconnect($server, $user, $password, $client_flags);        } else {            $link = @mysql_connect($server, $user, $password, false, $client_flags);        }    }    return $link;}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket/persistent * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port = (empty($server['port']))            ? ''            : ':' . (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : ':' . $server['socket'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? ''            : ':' . (int)$cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? ''            : ':' . $cfg['Server']['socket'];    }    $client_flags = 0;    // always use CLIENT_LOCAL_FILES as defined in mysql_com.h    // for the case where the client library was not compiled    // with --enable-local-infile    $client_flags |= 128;    /* Optionally compress connection */    if (defined('MYSQL_CLIENT_COMPRESS') && $cfg['Server']['compress']) {        $client_flags |= MYSQL_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if (defined('MYSQL_CLIENT_SSL') && $cfg['Server']['ssl']) {        $client_flags |= MYSQL_CLIENT_SSL;    }    if (!$server) {        $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, $password, empty($client_flags) ? null : $client_flags);      // Retry with empty password if we're allowed to        if (empty($link) && $cfg['Server']['nopassword'] && !$is_controluser) {            $link = PMA_DBI_real_connect($cfg['Server']['host'] . $server_port . $server_socket, $user, '', empty($client_flags) ? null : $client_flags);        }    } else {        if (!isset($server['host'])) {            $link = PMA_DBI_real_connect($server_socket, $user, $password, null);        } else {            $link = PMA_DBI_real_connect($server['host'] . $server_port . $server_socket, $user, $password, null);        }    }    if (empty($link)) {        if ($is_controluser) {            trigger_error(__('Connection for controluser as defined in your configuration failed.'), E_USER_WARNING);            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } // end if    if (! $server) {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string    $dbname  name of db to select * @param resource  $link    mysql link resource * @return bool */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_select_db($dbname, $link);}/** * runs a query and returns the result * * @param string    $query    query to run * @param resource  $link     mysql link resource * @param int       $options * @return mixed */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        return mysql_query($query, $link);    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        return mysql_unbuffered_query($query, $link);    } else {        return mysql_query($query, $link);    }}/** * returns array of rows with associative and numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysql_fetch_array($result, MYSQL_BOTH);}/** * returns array of rows with associative keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysql_fetch_array($result, MYSQL_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   resource  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysql_fetch_array($result, MYSQL_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysql_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  resource  $result */function PMA_DBI_free_result($result){    if (is_resource($result) && get_resource_type($result) === 'mysql result') {        mysql_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @return  bool         false */function PMA_DBI_more_results(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Prepare next result from multi_query * * @return  boo         false */function PMA_DBI_next_result(){    // N.B.: PHP's 'mysql' extension does not support    // multi_queries so this function will always    // return false. Use the 'mysqli' extension, if    // you need support for multi_queries.    return false;}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  int         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysql_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysql_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];// Do not stop now. On the initial connection, we don't have a $link,// we don't have a $GLOBALS['userlink'], but we can catch the error code//    } else {//            return false;    }    if (null !== $link && false !== $link) {        $error_number = mysql_errno($link);        $error_message = mysql_error($link);    } else {        $error_number = mysql_errno();        $error_message = mysql_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   resource  $result * @return  string|int */function PMA_DBI_num_rows($result){    if (!is_bool($result)) {        return mysql_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   resource  $link  the mysql object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // If the primary key is BIGINT we get an incorrect result    // (sometimes negative, sometimes positive)    // and in the present function we don't know if the PK is BIGINT    // so better play safe and use LAST_INSERT_ID()    //    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);}/** * returns the number of rows affected by last query * * @param   resource  $link            the mysql object * @param   bool      $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysql_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @todo add missing keys like in mysqli_query (decimals) * @param   resource  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    $fields       = array();    $num_fields   = mysql_num_fields($result);    for ($i = 0; $i < $num_fields; $i++) {        $field = mysql_fetch_field($result, $i);        $field->flags = mysql_field_flags($result, $i);        $field->orgtable = mysql_field_table($result, $i);        $field->orgname = mysql_field_name($result, $i);        $fields[] = $field;    }    return $fields;}/** * return number of fields in given $result * * @param   resource  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysql_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   resource  $result * @param   int       $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysql_field_len($result, $i);}/** * returns name of $i. field in $result * * @param   resource  $result * @param   int       $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysql_field_name($result, $i);}/** * returns concatenated string of human readable field flags * * @param   resource  $result * @param   int       $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    return mysql_field_flags($result, $i);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'export.js';/** * Displays the links */require './libraries/server_links.inc.php';$export_page_title = __('View dump (schema) of databases') . "\n";$checkall_url = 'server_export.php?'              . PMA_generate_common_url()              . '&amp;goto=db_export.php';$multi_values = '<div align="left">';$multi_values .= '<a href="' . $checkall_url . '&amp;selectall=1" onclick="setSelectOptions(\'dump\', \'db_select[]\', true); return false;">' . __('Select All') . '</a>        /        <a href="' . $checkall_url . '" onclick="setSelectOptions(\'dump\', \'db_select[]\', false); return false;">' . __('Unselect All') . '</a><br />';$multi_values .= '<select name="db_select[]" id="db_select" size="10" multiple="multiple">';$multi_values .= "\n";// Check if the selected databases are defined in $_GET (from clicking Back button on export.php)if (isset($_GET['db_select'])) {    $_GET['db_select'] = urldecode($_GET['db_select']);    $_GET['db_select'] = explode(",", $_GET['db_select']);}foreach ($GLOBALS['pma']->databases as $current_db) {    if (isset($_GET['db_select'])) {        if (in_array($current_db, $_GET['db_select'])) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }    } elseif (!empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {        $is_selected = ' selected="selected"';    } else {        $is_selected = '';    }    $current_db   = htmlspecialchars($current_db);    $multi_values .= '                <option value="' . $current_db . '"' . $is_selected . '>' . $current_db . '</option>' . "\n";} // end while$multi_values .= "\n";$multi_values .= '</select></div>';$export_type = 'server';require_once './libraries/display_export.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Display form for changing/adding table fields/columns * * included by tbl_addfield.php, -_alter.php, -_create.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Check parameters */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';PMA_checkParameters(array('db', 'table', 'action', 'num_fields'));// Get available character sets and storage enginesrequire_once './libraries/mysql_charsets.lib.php';require_once './libraries/StorageEngine.class.php';/** * Class for partition management */require_once './libraries/Partition.class.php';// load additional configuration variablesif (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}$length_values_input_size = 8;$_form_params = array(    'db' => $db,);if ($action == 'tbl_create.php') {    $_form_params['reload'] = 1;} elseif ($action == 'tbl_addfield.php') {    $_form_params['field_where'] = $_REQUEST['field_where'];    $_form_params['after_field'] = $_REQUEST['after_field'];    $_form_params['table'] = $table;} else {    $_form_params['table'] = $table;}if (isset($num_fields)) {    $_form_params['orig_num_fields'] = $num_fields;}if (isset($_REQUEST['field_where'])) {    $_form_params['orig_field_where'] = $_REQUEST['field_where'];}if (isset($_REQUEST['after_field'])) {    $_form_params['orig_after_field'] = $_REQUEST['after_field'];}if (isset($selected) && is_array($selected)) {    foreach ($selected as $o_fld_nr => $o_fld_val) {        $_form_params['selected[' . $o_fld_nr . ']'] = $o_fld_val;        if (! isset($true_selected)) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }    if (isset($true_selected) && is_array($true_selected)) {        foreach ($true_selected as $o_fld_nr => $o_fld_val) {            $_form_params['true_selected[' . $o_fld_nr . ']'] = $o_fld_val;        }    }} elseif (isset($_REQUEST['field'])) {    $_form_params['orig_field'] = $_REQUEST['field'];    if (isset($orig_field)) {        $_form_params['true_selected[]'] = $orig_field;    } else {        $_form_params['true_selected[]'] = $_REQUEST['field'];    }}$is_backup = ($action != 'tbl_create.php' && $action != 'tbl_addfield.php');$header_cells = array();$content_cells = array();$header_cells[] = __('Name');$header_cells[] = __('Type')     . ($GLOBALS['cfg']['ReplaceHelpImg']        ? PMA_showMySQLDocu('SQL-Syntax', 'data-types')        : '<br /><span style="font-weight: normal">' . PMA_showMySQLDocu('SQL-Syntax', 'data-types')     . '</span>');$header_cells[] = __('Length/Values') . PMA_showHint(__('If column type is "enum" or "set", please enter the values using this format: \'a\',\'b\',\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').'));$header_cells[] = __('Default') . PMA_showHint(__('For default values, please enter just a single value, without backslash escaping or quotes, using this format: a'));$header_cells[] = __('Collation');$header_cells[] = __('Attributes');$header_cells[] = __('Null');// We could remove this 'if' and let the key information be shown and// editable. However, for this to work, tbl_alter must be modified to use the// key fields, as tbl_addfield does.if (!$is_backup) {    $header_cells[] = __('Index');}$header_cells[] = '<abbr title="AUTO_INCREMENT">A_I</abbr>';require_once './libraries/transformations.lib.php';$cfgRelation = PMA_getRelationsParam();$comments_map = array();$mime_map = array();$available_mime = array();$comments_map = PMA_getComments($db, $table);$header_cells[] = __('Comments');if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {    $mime_map = PMA_getMIME($db, $table);    $available_mime = PMA_getAvailableMIMEtypes();    $hint = '<br />' .        sprintf(__('For a list of available transformation options and their MIME type transformations, click on %stransformation descriptions%s'),            '<a href="transformation_overview.php?'            . PMA_generate_common_url($db, $table) . '" target="_blank">',            '</a>');    $header_cells[] = __('MIME type');    $header_cells[] = __('Browser transformation');    $header_cells[] = __('Transformation options')        . PMA_showHint(__('Please enter the values for transformation options using this format: \'a\', 100, b,\'c\'...<br />If you ever need to put a backslash ("\") or a single quote ("\'") amongst those values, precede it with a backslash (for example \'\\\\xyz\' or \'a\\\'b\').') . $hint);}//  workaround for field_fulltext, because its submitted indizes contain//  the index as a value, not a key. Inserted here for easier maintaineance//  and less code to change in existing files.if (isset($field_fulltext) && is_array($field_fulltext)) {    foreach ($field_fulltext as $fulltext_nr => $fulltext_indexkey) {        $submit_fulltext[$fulltext_indexkey] = $fulltext_indexkey;    }}for ($i = 0; $i < $num_fields; $i++) {    if (! empty($regenerate)) {        // An error happened with previous inputs, so we will restore the data        // to embed it once again in this form.        $row['Field']     = (isset($_REQUEST['field_name'][$i]) ? $_REQUEST['field_name'][$i] : false);        $row['Type']      = (isset($_REQUEST['field_type'][$i]) ? $_REQUEST['field_type'][$i] : false);        $row['Collation'] = (isset($_REQUEST['field_collation'][$i]) ? $_REQUEST['field_collation'][$i] : '');        $row['Null']      = (isset($_REQUEST['field_null'][$i]) ? $_REQUEST['field_null'][$i] : '');        if (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'primary_' . $i) {            $row['Key'] = 'PRI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'index_' . $i) {            $row['Key'] = 'MUL';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'unique_' . $i) {            $row['Key'] = 'UNI';        } elseif (isset($_REQUEST['field_key'][$i]) && $_REQUEST['field_key'][$i] == 'fulltext_' . $i) {            $row['Key'] = 'FULLTEXT';        } else {            $row['Key'] = '';        }        // put None in the drop-down for Default, when someone adds a field        $row['DefaultType']  = (isset($_REQUEST['field_default_type'][$i]) ? $_REQUEST['field_default_type'][$i] : 'NONE');        $row['DefaultValue'] = (isset($_REQUEST['field_default_value'][$i]) ? $_REQUEST['field_default_value'][$i] : '');        switch ($row['DefaultType']) {            case 'NONE' :                $row['Default'] = null;                break;            case 'USER_DEFINED' :                $row['Default'] = $row['DefaultValue'];                break;            case 'NULL' :            case 'CURRENT_TIMESTAMP' :                $row['Default'] = $row['DefaultType'];                break;        }        $row['Extra']     = (isset($_REQUEST['field_extra'][$i]) ? $_REQUEST['field_extra'][$i] : false);        $row['Comment']   = (isset($submit_fulltext[$i]) && ($submit_fulltext[$i] == $i) ? 'FULLTEXT' : false);        $submit_length    = (isset($_REQUEST['field_length'][$i]) ? $_REQUEST['field_length'][$i] : false);        $submit_attribute = (isset($_REQUEST['field_attribute'][$i]) ? $_REQUEST['field_attribute'][$i] : false);        $submit_default_current_timestamp = (isset($_REQUEST['field_default_current_timestamp'][$i]) ? true : false);        if (isset($_REQUEST['field_comments'][$i])) {            $comments_map[$row['Field']] = $_REQUEST['field_comments'][$i];        }        if (isset($_REQUEST['field_mimetype'][$i])) {            $mime_map[$row['Field']]['mimetype'] = $_REQUEST['field_mimetype'][$i];        }        if (isset($_REQUEST['field_transformation'][$i])) {            $mime_map[$row['Field']]['transformation'] = $_REQUEST['field_transformation'][$i];        }        if (isset($_REQUEST['field_transformation_options'][$i])) {            $mime_map[$row['Field']]['transformation_options'] = $_REQUEST['field_transformation_options'][$i];        }    } elseif (isset($fields_meta[$i])) {        $row = $fields_meta[$i];        switch ($row['Default']) {            case null:                if ($row['Null'] == 'YES') {                    $row['DefaultType']  = 'NULL';                    $row['DefaultValue'] = '';    // SHOW FULL COLUMNS does not report the case when there is a DEFAULT value    // which is empty so we need to use the results of SHOW CREATE TABLE                } elseif (isset($row) && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_value'])) {                    $row['DefaultType']  = 'USER_DEFINED';                    $row['DefaultValue'] = $row['Default'];                } else {                    $row['DefaultType']  = 'NONE';                    $row['DefaultValue'] = '';                }                break;            case 'CURRENT_TIMESTAMP':                $row['DefaultType']  = 'CURRENT_TIMESTAMP';                $row['DefaultValue'] = '';                break;            default:                $row['DefaultType']  = 'USER_DEFINED';                $row['DefaultValue'] = $row['Default'];                break;        }    }    if (isset($row['Type'])) {        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        if ($extracted_fieldspec['type'] == 'bit') {            $row['Default'] = PMA_convert_bit_default_value($row['Default']);        }    }    // Cell index: If certain fields get left out, the counter shouldn't change.    $ci = 0;    // Everytime a cell shall be left out the STRG-jumping feature, $ci_offset    // has to be incremented ($ci_offset++)    $ci_offset = -1;    // old column name    if ($is_backup) {        if (! empty($true_selected[$i])) {            $_form_params['field_orig[' . $i . ']'] = $true_selected[$i];        } elseif (isset($row['Field'])) {            $_form_params['field_orig[' . $i . ']'] = $row['Field'];        } else {            $_form_params['field_orig[' . $i . ']'] = '';        }    }    // column name    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_name[' . $i . ']"'        . ' maxlength="64" class="textfield" title="' . __('Column') . '"'        . ' size="10"'        . ' value="' . (isset($row['Field']) ? htmlspecialchars($row['Field']) : '') . '"'        . ' />';    $ci++;    // column type    $select_id = 'field_' . $i . '_' . ($ci - $ci_offset);    $content_cells[$i][$ci] = '<select class="column_type" name="field_type[' . $i . ']"'        .' id="' . $select_id . '">';    if (empty($row['Type'])) {        // creating a column        $row['Type'] = '';        $type        = '';        $length = '';    } else {        $type = $extracted_fieldspec['type'];        $length = $extracted_fieldspec['spec_in_brackets'];    }    // some types, for example longtext, are reported as    // "longtext character set latin7" when their charset and / or collation    // differs from the ones of the corresponding database.    $tmp = strpos($type, 'character set');    if ($tmp) {        $type = substr($type, 0, $tmp - 1);    }    if (isset($submit_length) && $submit_length != false) {        $length = $submit_length;    }    // rtrim the type, for cases like "float unsigned"    $type = rtrim($type);    $type_upper = strtoupper($type);    $content_cells[$i][$ci] .= PMA_getSupportedDatatypes(true, $type_upper);    $content_cells[$i][$ci] .= '    </select>';    $ci++;    // old column length    if ($is_backup) {        $_form_params['field_length_orig[' . $i . ']'] = $length;    }    // column length    $length_to_display = $length;    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_length[' . $i . ']" size="' . $length_values_input_size . '"'        . ' value="' . htmlspecialchars($length_to_display) . '"'        . ' class="textfield" />'        . '<p class="enum_notice" id="enum_notice_' . $i . '_' . ($ci - $ci_offset) . '">';    $content_cells[$i][$ci] .= __('ENUM or SET data too long?')        . '<a onclick="return false;" href="enum_editor.php?'        . PMA_generate_common_url()        . '&amp;values=' . urlencode($length_to_display)        . '&amp;field=' .  (isset($row['Field']) ? urlencode($row['Field']) : "")        . '" class="open_enum_editor" target="_blank"> '        . __('Get more editing space') . '</a>'        . '</p>';    $ci++;    // column default    /**     * having NULL enabled does not implicit having Default with NULL     *    if (isset($row)      && ! isset($row['Default']) && isset($row['Null']) && $row['Null'] == 'YES') {        $row['Default'] = 'NULL';    }     */    // old column default    if ($is_backup) {        $_form_params['field_default_orig[' . $i . ']']            = (isset($row['Default']) ? $row['Default'] : '');    }    // here we put 'NONE' as the default value of drop-down; otherwise    // users would have problems if they forget to enter the default    // value (example, for an INT)    $default_options = array(        'NONE'              =>  _pgettext('for default', 'None'),        'USER_DEFINED'      =>  __('As defined:'),        'NULL'              => 'NULL',        'CURRENT_TIMESTAMP' => 'CURRENT_TIMESTAMP',    );    // for a TIMESTAMP, do not show the string "CURRENT_TIMESTAMP" as a default value    if ($type_upper == 'TIMESTAMP'     && ! empty($default_current_timestamp)     && isset($row['Default'])) {        $row['Default'] = '';    }    if ($type_upper == 'BIT') {        $row['DefaultValue'] = PMA_convert_bit_default_value($row['DefaultValue']);    }    $content_cells[$i][$ci] = '<select name="field_default_type[' . $i . ']" class="default_type">';    foreach ($default_options as $key => $value) {        $content_cells[$i][$ci] .= '<option value="' . $key . '"';        // is only set when we go back to edit a field's structure        if (isset($row['DefaultType']) && $row['DefaultType'] == $key) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= ' >' . $value . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $content_cells[$i][$ci] .= '<br />';    $content_cells[$i][$ci] .= '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_default_value[' . $i . ']" size="12"'        . ' value="' . (isset($row['DefaultValue']) ? htmlspecialchars($row['DefaultValue']) : '') . '"'        . ' class="textfield default_value" />';    $ci++;    // column collation    $tmp_collation          = empty($row['Collation']) ? null : $row['Collation'];    $content_cells[$i][$ci] = PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_COLLATION, 'field_collation[' . $i . ']',        'field_' . $i . '_' . ($ci - $ci_offset), $tmp_collation, false);    unset($tmp_collation);    $ci++;    // column attribute    $content_cells[$i][$ci] = '<select style="font-size: 70%;"'        . ' name="field_attribute[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';    $attribute     = '';    if (isset($extracted_fieldspec)) {        $attribute = $extracted_fieldspec['attribute'];    }    if (isset($row['Extra']) && $row['Extra'] == 'on update CURRENT_TIMESTAMP') {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if (isset($submit_attribute) && $submit_attribute != false) {        $attribute = $submit_attribute;    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (PMA_MYSQL_INT_VERSION < 50025     && isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['type'])     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP'     && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null'] == true) {        $row['Null'] = '';    }    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($row['Field'])     && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    if ((isset($row['Field'])      && isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['default_current_timestamp']))     || (isset($submit_default_current_timestamp) && $submit_default_current_timestamp)) {        $default_current_timestamp = true;    } else {        $default_current_timestamp = false;    }    $cnt_attribute_types = count($cfg['AttributeTypes']);    for ($j = 0; $j < $cnt_attribute_types; $j++) {        $content_cells[$i][$ci] .= '                <option value="'. $cfg['AttributeTypes'][$j] . '"';        if (strtoupper($attribute) == strtoupper($cfg['AttributeTypes'][$j])) {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>' . $cfg['AttributeTypes'][$j] . '</option>';    }    $content_cells[$i][$ci] .= '</select>';    $ci++;    // column NULL    $content_cells[$i][$ci] = '<input name="field_null[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (! empty($row['Null']) && $row['Null'] != 'NO' && $row['Null'] != 'NOT NULL') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="NULL" />';    $ci++;    // column indexes    // See my other comment about removing this 'if'.    if (!$is_backup) {        $content_cells[$i][$ci] = '<select name="field_key[' . $i . ']"'            . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '">';        $content_cells[$i][$ci] .= '<option value="none_' . $i . '">---</option>';        $content_cells[$i][$ci] .= '<option value="primary_' . $i . '" title="' . __('Primary') . '"';        if (isset($row['Key']) && $row['Key'] == 'PRI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>PRIMARY</option>';        $content_cells[$i][$ci] .= '<option value="unique_' . $i . '" title="' . __('Unique') . '"';        if (isset($row['Key']) && $row['Key'] == 'UNI') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>UNIQUE</option>';        $content_cells[$i][$ci] .= '<option value="index_' . $i . '" title="' . __('Index') . '"';        if (isset($row['Key']) && $row['Key'] == 'MUL') {            $content_cells[$i][$ci] .= ' selected="selected"';        }        $content_cells[$i][$ci] .= '>INDEX</option>';        if (!PMA_DRIZZLE) {            $content_cells[$i][$ci] .= '<option value="fulltext_' . $i . '" title="' . __('Fulltext') . '"';            if (isset($row['Key']) && $row['Key'] == 'FULLTEXT') {                $content_cells[$i][$ci] .= ' selected="selected"';            }            $content_cells[$i][$ci] .= '>FULLTEXT</option>';        }        $content_cells[$i][$ci] .= '</select>';        $ci++;    } // end if ($action ==...)    // column auto_increment    $content_cells[$i][$ci] = '<input name="field_extra[' . $i . ']"'        . ' id="field_' . $i . '_' . ($ci - $ci_offset) . '"';    if (isset($row['Extra']) && strtolower($row['Extra']) == 'auto_increment') {        $content_cells[$i][$ci] .= ' checked="checked"';    }    $content_cells[$i][$ci] .= ' type="checkbox" value="AUTO_INCREMENT" />';    $ci++;    // column comments    $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'        . ' type="text" name="field_comments[' . $i . ']" size="12"'        . ' value="' . (isset($row['Field']) && is_array($comments_map) && isset($comments_map[$row['Field']]) ?  htmlspecialchars($comments_map[$row['Field']]) : '') . '"'        . ' class="textfield" />';    $ci++;    // column MIME-types    if ($cfgRelation['mimework'] && $cfg['BrowseMIME'] && $cfgRelation['commwork']) {        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_mimetype[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="">&nbsp;</option>';        if (is_array($available_mime['mimetype'])) {            foreach ($available_mime['mimetype'] AS $mimekey => $mimetype) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['mimetype']) && ($mime_map[$row['Field']]['mimetype'] == str_replace('/', '_', $mimetype)) ? 'selected ' : '');                $content_cells[$i][$ci] .= '    <option value="' . str_replace('/', '_', $mimetype) . '" ' . $checked . '>' . htmlspecialchars($mimetype) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<select id="field_' . $i . '_' . ($ci - $ci_offset) . '" size="1" name="field_transformation[' . $i . ']">';        $content_cells[$i][$ci] .= '    <option value="" title="' . __('None') . '"></option>';        if (is_array($available_mime['transformation'])) {            foreach ($available_mime['transformation'] AS $mimekey => $transform) {                $checked = (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation']) && (preg_match('@' . preg_quote($available_mime['transformation_file'][$mimekey]) . '3?@i', $mime_map[$row['Field']]['transformation'])) ? 'selected ' : '');                $tooltip = PMA_getTransformationDescription($available_mime['transformation_file'][$mimekey], false);                $content_cells[$i][$ci] .= '<option value="' . $available_mime['transformation_file'][$mimekey] . '" ' . $checked . ' title="' . htmlspecialchars($tooltip) . '">' . htmlspecialchars($transform) . '</option>';            }        }        $content_cells[$i][$ci] .= '</select>';        $ci++;        $content_cells[$i][$ci] = '<input id="field_' . $i . '_' . ($ci - $ci_offset) . '"'            . ' type="text" name="field_transformation_options[' . $i . ']"'            . ' size="16" class="textfield"'            . ' value="' . (isset($row['Field']) && isset($mime_map[$row['Field']]['transformation_options']) ?  htmlspecialchars($mime_map[$row['Field']]['transformation_options']) : '') . '"'            . ' />';        //$ci++;    }} // end for    ?><script src="./js/keyhandler.js" type="text/javascript"></script><script type="text/javascript">// <![CDATA[var switch_movement = 0;document.onkeydown = onKeyDownArrowsHandler;// ]]></script>    <form id="<?php echo ($action == 'tbl_create.php' ? 'create_table' : 'append_fields'); ?>_form" method="post" action="<?php echo $action; ?>" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><?phpecho PMA_generate_common_hidden_inputs($_form_params);unset($_form_params);if ($action == 'tbl_create.php') {    ?>    <table>        <tr><td><?php echo __('Table name'); ?>:&nbsp;<input type="text" name="table" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['table']) ? htmlspecialchars($_REQUEST['table']) : ''); ?>"                class="textfield" />            </td>            <td>                <?php if ($action == 'tbl_create.php' || $action == 'tbl_addfield.php') { ?>                <?php echo sprintf(__('Add %s column(s)'), '<input type="text" id="added_fields" name="added_fields" size="2" value="1" onfocus="this.select()" />'); ?>                <input type="submit" name="submit_num_fields" value="<?php echo __('Go'); ?>"                    onclick="return checkFormElementInRange(this.form, 'added_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)"                />                <?php } ?>            </td>        </tr>    </table>    <?php}if (is_array($content_cells) && is_array($header_cells)) {    // last row is for javascript insert    //$empty_row = array_pop($content_cells);    echo '<table id="table_columns" class="noclick">';    echo '<caption class="tblHeaders">' . __('Structure') . PMA_showMySQLDocu('SQL-Syntax', 'CREATE_TABLE') . '</caption>';        ?><tr>    <?php foreach ($header_cells as $header_val) { ?>    <th><?php echo $header_val; ?></th>    <?php } ?></tr>    <?php    $odd_row = true;    foreach ($content_cells as $content_row) {        echo '<tr class="' . ($odd_row ? 'odd' : 'even') . '">';        $odd_row = ! $odd_row;        if (is_array($content_row)) {            foreach ($content_row as $content_row_val) {                ?>    <td align="center"><?php echo $content_row_val; ?></td>                <?php            }        }        echo '</tr>';    }    ?></table><br />    <?php}/** * needs to be finished * *if ($display_type == 'horizontal') {    $new_field = '';    foreach ($empty_row as $content_row_val) {        $new_field .= '<td align="center">' . $content_row_val . '</td>';    }    ?><script type="text/javascript">// <![CDATA[var odd_row = <?php echo $odd_row; ?>;function addField(){    var new_fields = document.getElementById('added_fields').value;    var new_field_container = document.getElementById('table_columns');    var new_field = '<?php echo preg_replace('|\s+|', ' ', preg_replace('|\'|', '\\\'', $new_field)); ?>';    var i = 0;    for (i = 0; i < new_fields; i++) {        if (odd_row) {            new_field_container.innerHTML += '<tr class="odd">' + new_field + '</tr>';        } else {            new_field_container.innerHTML += '<tr class="even">' + new_field + '</tr>';        }        odd_row = ! odd_row;    }    return true;}// ]]></script>    <?php} */if ($action == 'tbl_create.php') {    ?>    <table>    <tr valign="top">        <th><?php echo __('Table comments'); ?>:&nbsp;</th>        <td width="25">&nbsp;</td>        <th><?php echo __('Storage Engine'); ?>:            <?php echo PMA_showMySQLDocu('Storage_engines', 'Storage_engines'); ?>        </th>        <td width="25">&nbsp;</td>        <th><?php echo __('Collation') ;?>:&nbsp;</th>    </tr>    <tr><td><input type="text" name="comment" size="40" maxlength="80"                value="<?php echo (isset($_REQUEST['comment']) ? htmlspecialchars($_REQUEST['comment']) : ''); ?>"                class="textfield" />        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_StorageEngine::getHtmlSelect('tbl_type', null,        (isset($_REQUEST['tbl_type']) ? $_REQUEST['tbl_type'] : null));    ?>        </td>        <td width="25">&nbsp;</td>        <td>    <?php    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_COLLATION, 'tbl_collation',        null, (isset($_REQUEST['tbl_collation']) ? $_REQUEST['tbl_collation'] : null), false, 3);    ?>        </td>    </tr>    <?php    if (PMA_Partition::havePartitioning()) {        ?>    <tr valign="top">        <th><?php echo __('PARTITION definition'); ?>:&nbsp;<?php echo PMA_showMySQLDocu('Partitioning', 'Partitioning'); ?>        </th>    </tr>    <tr>        <td>            <textarea name="partition_definition" id="partitiondefinition"                cols="<?php echo $GLOBALS['cfg']['TextareaCols'];?>"                rows="<?php echo $GLOBALS['cfg']['TextareaRows'];?>"                dir="<?php echo $GLOBALS['text_dir'];?>"><?php echo (isset($_REQUEST['partition_definition']) ? htmlspecialchars($_REQUEST['partition_definition']) : ''); ?></textarea>        </td>    </tr>        <?php    }    ?>    </table>    <br />    <?php} // end if ($action == 'tbl_create.php')?><fieldset class="tblFooters">    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" /></fieldset><div id="properties_message"></div></form><div id="popup_background"></div>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays status variables with descriptions and some hints an optmizing *  + reset status variables * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    $GLOBALS['is_header_sent'] = true;}require_once './libraries/common.inc.php';/** * Ajax request */if (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {    // Send with correct charset    header('Content-Type: text/html; charset=UTF-8');    // real-time charting data    if (isset($_REQUEST['chart_data'])) {        switch($_REQUEST['type']) {        // Process and Connections realtime chart        case 'proc':            $c = PMA_DBI_fetch_result("SHOW GLOBAL STATUS WHERE Variable_name = 'Connections'", 0, 1);            $result = PMA_DBI_query('SHOW PROCESSLIST');            $num_procs = PMA_DBI_num_rows($result);            $ret = array(                'x'      => microtime(true) * 1000,                'y_proc' => $num_procs,                'y_conn' => $c['Connections']            );            exit(json_encode($ret));        // Query realtime chart        case 'queries':            if (PMA_DRIZZLE) {                $sql = "SELECT concat('Com_', variable_name), variable_value                    FROM data_dictionary.GLOBAL_STATEMENTS                    WHERE variable_value > 0                      UNION                    SELECT variable_name, variable_value                    FROM data_dictionary.GLOBAL_STATUS                    WHERE variable_name = 'Questions'";                $queries = PMA_DBI_fetch_result($sql, 0, 1);            } else {                $queries = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE (Variable_name LIKE 'Com_%' OR Variable_name = 'Questions')                        AND Value > 0", 0, 1                );            }            cleanDeprecated($queries);            // admin commands are not queries            unset($queries['Com_admin_commands']);            $questions = $queries['Questions'];            unset($queries['Questions']);            //$sum=array_sum($queries);            $ret = array(                'x'         => microtime(true) * 1000,                'y'         => $questions,                'pointInfo' => $queries            );            exit(json_encode($ret));        // Traffic realtime chart        case 'traffic':            $traffic = PMA_DBI_fetch_result(                "SHOW GLOBAL STATUS                WHERE Variable_name = 'Bytes_received'                    OR Variable_name = 'Bytes_sent'", 0, 1            );            $ret = array(                'x'          => microtime(true) * 1000,                'y_sent'     => $traffic['Bytes_sent'],                'y_received' => $traffic['Bytes_received']            );            exit(json_encode($ret));        // Data for the monitor        case 'chartgrid':            $ret = json_decode($_REQUEST['requiredData'], true);            $statusVars = array();            $serverVars = array();            $sysinfo = $cpuload = $memory = 0;            $pName = '';            /* Accumulate all required variables and data */            // For each chart            foreach ($ret as $chart_id => $chartNodes) {                // For each data series                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    // For each data point in the series (usually just 1)                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        $pName = $dataPoint['name'];                        switch ($dataPoint['type']) {                        /* We only collect the status and server variables here to                         * read them all in one query, and only afterwards assign them.                         * Also do some white list filtering on the names                        */                        case 'servervar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $serverVars[] = $pName;                            }                            break;                        case 'statusvar':                            if (!preg_match('/[^a-zA-Z_]+/', $pName)) {                                $statusVars[] = $pName;                            }                            break;                        case 'proc':                            $result = PMA_DBI_query('SHOW PROCESSLIST');                            $ret[$chart_id][$node_id][$point_id]['value'] = PMA_DBI_num_rows($result);                            break;                        case 'cpu':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$cpuload) {                                $cpuload = $sysinfo->loadavg();                            }                            if (PHP_OS == 'Linux') {                                $ret[$chart_id][$node_id][$point_id]['idle'] = $cpuload['idle'];                                $ret[$chart_id][$node_id][$point_id]['busy'] = $cpuload['busy'];                            } else                                $ret[$chart_id][$node_id][$point_id]['value'] = $cpuload['loadavg'];                            break;                        case 'memory':                            if (!$sysinfo) {                                include_once 'libraries/sysinfo.lib.php';                                $sysinfo = getSysInfo();                            }                            if (!$memory) {                                $memory  = $sysinfo->memory();                            }                            $ret[$chart_id][$node_id][$point_id]['value'] = $memory[$pName];                            break;                        } /* switch */                    } /* foreach */                } /* foreach */            } /* foreach */            // Retrieve all required status variables            if (count($statusVars)) {                $statusVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL STATUS                    WHERE Variable_name='" . implode("' OR Variable_name='", $statusVars) . "'", 0, 1                );            } else {                $statusVarValues = array();            }            // Retrieve all required server variables            if (count($serverVars)) {                $serverVarValues = PMA_DBI_fetch_result(                    "SHOW GLOBAL VARIABLES                    WHERE Variable_name='" . implode("' OR Variable_name='", $serverVars) . "'", 0, 1                );            } else {                $serverVarValues = array();            }            // ...and now assign them            foreach ($ret as $chart_id => $chartNodes) {                foreach ($chartNodes as $node_id => $nodeDataPoints) {                    foreach ($nodeDataPoints as $point_id => $dataPoint) {                        switch($dataPoint['type']) {                        case 'statusvar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $statusVarValues[$dataPoint['name']];                            break;                        case 'servervar':                            $ret[$chart_id][$node_id][$point_id]['value'] = $serverVarValues[$dataPoint['name']];                            break;                        }                    }                }            }            $ret['x'] = microtime(true) * 1000;            exit(json_encode($ret));        }    }    if (isset($_REQUEST['log_data'])) {        if (PMA_MYSQL_INT_VERSION < 50106) {            /* FIXME: why this? */            exit('""');        }        $start = intval($_REQUEST['time_start']);        $end = intval($_REQUEST['time_end']);        if ($_REQUEST['type'] == 'slow') {            $q = 'SELECT start_time, user_host, Sec_to_Time(Sum(Time_to_Sec(query_time))) as query_time, Sec_to_Time(Sum(Time_to_Sec(lock_time))) as lock_time, '.                 'SUM(rows_sent) AS rows_sent, SUM(rows_examined) AS rows_examined, db, sql_text, COUNT(sql_text) AS \'#\' '.                 'FROM `mysql`.`slow_log` WHERE start_time > FROM_UNIXTIME(' . $start . ') '.                 'AND start_time < FROM_UNIXTIME(' . $end . ') GROUP BY sql_text';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            while ($row = PMA_DBI_fetch_assoc($result)) {                $type = strtolower(substr($row['sql_text'], 0, strpos($row['sql_text'], ' ')));                switch($type) {                case 'insert':                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['sql_text']) > 220) {                        $row['sql_text'] = substr($row['sql_text'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['sql_text']), 2, 2))                            . ']';                    }                    break;                default:                    break;                }                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                $return['rows'][] = $row;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }        if ($_REQUEST['type'] == 'general') {            $limitTypes = (isset($_REQUEST['limitTypes']) && $_REQUEST['limitTypes'])                            ? 'AND argument REGEXP \'^(INSERT|SELECT|UPDATE|DELETE)\' ' : '';            $q = 'SELECT TIME(event_time) as event_time, user_host, thread_id, server_id, argument, count(argument) as \'#\' '.                 'FROM `mysql`.`general_log` WHERE command_type=\'Query\' '.                 'AND event_time > FROM_UNIXTIME(' . $start . ') AND event_time < FROM_UNIXTIME(' . $end . ') '.                 $limitTypes . 'GROUP by argument'; // HAVING count > 1';            $result = PMA_DBI_try_query($q);            $return = array('rows' => array(), 'sum' => array());            $type = '';            $insertTables = array();            $insertTablesFirst = -1;            $i = 0;            $removeVars = isset($_REQUEST['removeVariables']) && $_REQUEST['removeVariables'];            while ($row = PMA_DBI_fetch_assoc($result)) {                preg_match('/^(\w+)\s/', $row['argument'], $match);                $type = strtolower($match[1]);                if (!isset($return['sum'][$type])) {                    $return['sum'][$type] = 0;                }                $return['sum'][$type] += $row['#'];                switch($type) {                case 'insert':                    // Group inserts if selected                    if ($removeVars && preg_match('/^INSERT INTO (`|\'|"|)([^\s\\1]+)\\1/i', $row['argument'], $matches)) {                        $insertTables[$matches[2]]++;                        if ($insertTables[$matches[2]] > 1) {                            $return['rows'][$insertTablesFirst]['#'] = $insertTables[$matches[2]];                            // Add a ... to the end of this query to indicate that there's been other queries                            if ($return['rows'][$insertTablesFirst]['argument'][strlen($return['rows'][$insertTablesFirst]['argument'])-1] != '.') {                                $return['rows'][$insertTablesFirst]['argument'] .= '<br/>...';                            }                            // Group this value, thus do not add to the result list                            continue 2;                        } else {                            $insertTablesFirst = $i;                            $insertTables[$matches[2]] += $row['#'] - 1;                        }                    }                    // No break here                case 'update':                    // Cut off big inserts and updates, but append byte count therefor                    if (strlen($row['argument']) > 220) {                        $row['argument'] = substr($row['argument'], 0, 200)                            . '... ['                            .  implode(' ', PMA_formatByteDown(strlen($row['argument'])), 2, 2)                            . ']';                    }                    break;                default:                    break;                }                $return['rows'][] = $row;                $i++;            }            $return['sum']['TOTAL'] = array_sum($return['sum']);            $return['numRows'] = count($return['rows']);            PMA_DBI_free_result($result);            exit(json_encode($return));        }    }    if (isset($_REQUEST['logging_vars'])) {        if (isset($_REQUEST['varName']) && isset($_REQUEST['varValue'])) {            $value = PMA_sqlAddslashes($_REQUEST['varValue']);            if (!is_numeric($value)) {                $value="'" . $value . "'";            }            if (! preg_match("/[^a-zA-Z0-9_]+/", $_REQUEST['varName'])) {                PMA_DBI_query('SET GLOBAL ' . $_REQUEST['varName'] . ' = ' . $value);            }        }        $loggingVars = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES WHERE Variable_name IN ("general_log","slow_query_log","long_query_time","log_output")', 0, 1);        exit(json_encode($loggingVars));    }    if (isset($_REQUEST['query_analyzer'])) {        $return = array();        if (strlen($_REQUEST['database'])) {            PMA_DBI_select_db($_REQUEST['database']);        }        if ($profiling = PMA_profilingSupported()) {            PMA_DBI_query('SET PROFILING=1;');        }        // Do not cache query        $query = preg_replace('/^(\s*SELECT)/i', '\\1 SQL_NO_CACHE', $_REQUEST['query']);        $result = PMA_DBI_try_query($query);        $return['affectedRows'] = $GLOBALS['cached_affected_rows'];        $result = PMA_DBI_try_query('EXPLAIN ' . $query);        while ($row = PMA_DBI_fetch_assoc($result)) {            $return['explain'][] = $row;        }        // In case an error happened        $return['error'] = PMA_DBI_getError();        PMA_DBI_free_result($result);        if ($profiling) {            $return['profiling'] = array();            $result = PMA_DBI_try_query('SELECT seq,state,duration FROM INFORMATION_SCHEMA.PROFILING WHERE QUERY_ID=1 ORDER BY seq');            while ($row = PMA_DBI_fetch_assoc($result)) {                $return['profiling'][]= $row;            }            PMA_DBI_free_result($result);        }        exit(json_encode($return));    }    if (isset($_REQUEST['advisor'])) {        include 'libraries/Advisor.class.php';        $advisor = new Advisor();        exit(json_encode($advisor->run()));    }}/** * Replication library */if (PMA_DRIZZLE) {    $server_master_status = false;    $server_slave_status = false;} else {    include_once './libraries/replication.inc.php';    include_once './libraries/replication_gui.lib.php';}/** * JS Includes */$GLOBALS['js_include'][] = 'server_status.js';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js'; // For tab persistence// Charting$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * flush status variables if requested */if (isset($_REQUEST['flush'])) {    $_flush_commands = array(        'STATUS',        'TABLES',        'QUERY CACHE',    );    if (in_array($_REQUEST['flush'], $_flush_commands)) {        PMA_DBI_query('FLUSH ' . $_REQUEST['flush'] . ';');    }    unset($_flush_commands);}/** * Kills a selected process */if (!empty($_REQUEST['kill'])) {    if (PMA_DBI_try_query('KILL ' . $_REQUEST['kill'] . ';')) {        $message = PMA_Message::success(__('Thread %s was successfully killed.'));    } else {        $message = PMA_Message::error(__('phpMyAdmin was unable to kill thread %s. It probably has already been closed.'));    }    $message->addParam($_REQUEST['kill']);    //$message->display();}/** * get status from server */$server_status = PMA_DBI_fetch_result('SHOW GLOBAL STATUS', 0, 1);if (PMA_DRIZZLE) {    // Drizzle doesn't put query statistics into variables, add it    $sql = "SELECT concat('Com_', variable_name), variable_value        FROM data_dictionary.GLOBAL_STATEMENTS";    $statements = PMA_DBI_fetch_result($sql, 0, 1);    $server_status = array_merge($server_status, $statements);}/** * for some calculations we require also some server settings */$server_variables = PMA_DBI_fetch_result('SHOW GLOBAL VARIABLES', 0, 1);/** * cleanup of some deprecated values */cleanDeprecated($server_status);/** * calculate some values */// Key_buffer_fractionif (isset($server_status['Key_blocks_unused'])    && isset($server_variables['key_cache_block_size'])    && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = 100        - $server_status['Key_blocks_unused']        * $server_variables['key_cache_block_size']        / $server_variables['key_buffer_size']        * 100;} elseif (isset($server_status['Key_blocks_used'])        && isset($server_variables['key_buffer_size'])) {    $server_status['Key_buffer_fraction_%']        = $server_status['Key_blocks_used']        * 1024        / $server_variables['key_buffer_size'];}// Ratio for key read/writeif (isset($server_status['Key_writes'])    && isset($server_status['Key_write_requests'])    && $server_status['Key_write_requests'] > 0) {    $server_status['Key_write_ratio_%'] = 100 * $server_status['Key_writes'] / $server_status['Key_write_requests'];}if (isset($server_status['Key_reads'])    && isset($server_status['Key_read_requests'])    && $server_status['Key_read_requests'] > 0) {    $server_status['Key_read_ratio_%'] = 100 * $server_status['Key_reads'] / $server_status['Key_read_requests'];}// Threads_cache_hitrateif (isset($server_status['Threads_created'])    && isset($server_status['Connections'])    && $server_status['Connections'] > 0) {    $server_status['Threads_cache_hitrate_%']        = 100 - $server_status['Threads_created'] / $server_status['Connections'] * 100;}/** * split variables in sections */$allocations = array(    // variable name => section    // variable names match when they begin with the given string    'Com_'              => 'com',    'Innodb_'           => 'innodb',    'Ndb_'              => 'ndb',    'Handler_'          => 'handler',    'Qcache_'           => 'qcache',    'Threads_'          => 'threads',    'Slow_launch_threads' => 'threads',    'Binlog_cache_'     => 'binlog_cache',    'Created_tmp_'      => 'created_tmp',    'Key_'              => 'key',    'Delayed_'          => 'delayed',    'Not_flushed_delayed_rows' => 'delayed',    'Flush_commands'    => 'query',    'Last_query_cost'   => 'query',    'Slow_queries'      => 'query',    'Queries'           => 'query',    'Prepared_stmt_count' => 'query',    'Select_'           => 'select',    'Sort_'             => 'sort',    'Open_tables'       => 'table',    'Opened_tables'     => 'table',    'Open_table_definitions' => 'table',    'Opened_table_definitions' => 'table',    'Table_locks_'      => 'table',    'Rpl_status'        => 'repl',    'Slave_'            => 'repl',    'Tc_'               => 'tc',    'Ssl_'              => 'ssl',    'Open_files'        => 'files',    'Open_streams'      => 'files',    'Opened_files'      => 'files',);$sections = array(    // section => section name (description)    'com'           => 'Com',    'query'         => __('SQL query'),    'innodb'        => 'InnoDB',    'ndb'           => 'NDB',    'handler'       => __('Handler'),    'qcache'        => __('Query cache'),    'threads'       => __('Threads'),    'binlog_cache'  => __('Binary log'),    'created_tmp'   => __('Temporary data'),    'delayed'       => __('Delayed inserts'),    'key'           => __('Key cache'),    'select'        => __('Joins'),    'repl'          => __('Replication'),    'sort'          => __('Sorting'),    'table'         => __('Tables'),    'tc'            => __('Transaction coordinator'),    'files'         => __('Files'),    'ssl'           => 'SSL',    'other'         => __('Other'));/** * define some needfull links/commands */// variable or section name => (name => url)$links = array();$links['table'][__('Flush (close) all tables')]    = $PMA_PHP_SELF . '?flush=TABLES&amp;' . PMA_generate_common_url();$links['table'][__('Show open tables')]    = 'sql.php?sql_query=' . urlencode('SHOW OPEN TABLES') .        '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();if ($server_master_status) {    $links['repl'][__('Show slave hosts')]        = 'sql.php?sql_query=' . urlencode('SHOW SLAVE HOSTS') .            '&amp;goto=server_status.php&amp;' . PMA_generate_common_url();    $links['repl'][__('Show master status')] = '#replication_master';}if ($server_slave_status) {    $links['repl'][__('Show slave status')] = '#replication_slave';}$links['repl']['doc'] = 'replication';$links['qcache'][__('Flush query cache')]    = $PMA_PHP_SELF . '?flush=' . urlencode('QUERY CACHE') . '&amp;' .        PMA_generate_common_url();$links['qcache']['doc'] = 'query_cache';//$links['threads'][__('Show processes')]//    = 'server_processlist.php?' . PMA_generate_common_url();$links['threads']['doc'] = 'mysql_threads';$links['key']['doc'] = 'myisam_key_cache';$links['binlog_cache']['doc'] = 'binary_log';$links['Slow_queries']['doc'] = 'slow_query_log';$links['innodb'][__('Variables')]    = 'server_engines.php?engine=InnoDB&amp;' . PMA_generate_common_url();$links['innodb'][__('InnoDB Status')]    = 'server_engines.php?engine=InnoDB&amp;page=Status&amp;' .        PMA_generate_common_url();$links['innodb']['doc'] = 'innodb';// Variable to contain all com_ variables (query statistics)$used_queries = array();// Variable to map variable names to their respective section name// (used for js category filtering)$allocationMap = array();// Variable to mark used sections$categoryUsed = array();// sort vars into arraysforeach ($server_status as $name => $value) {    $section_found = false;    foreach ($allocations as $filter => $section) {        if (strpos($name, $filter) !== false) {            $allocationMap[$name] = $section;            $categoryUsed[$section] = true;            $section_found = true;            if ($section == 'com' && $value > 0) {                $used_queries[$name] = $value;            }            break; // Only exits inner loop        }    }    if (!$section_found) {        $allocationMap[$name] = 'other';        $categoryUsed['other'] = true;    }}if (PMA_DRIZZLE) {    $used_queries = PMA_DBI_fetch_result(        'SELECT * FROM data_dictionary.global_statements',        0,        1    );    unset($used_queries['admin_commands']);} else {    // admin commands are not queries (e.g. they include COM_PING,    // which is excluded from $server_status['Questions'])    unset($used_queries['Com_admin_commands']);}/* Ajax request refresh */if (isset($_REQUEST['show']) && isset($_REQUEST['ajax_request'])) {    switch($_REQUEST['show']) {    case 'query_statistics':        printQueryStatistics();        exit();    case 'server_traffic':        printServerTraffic();        exit();    case 'variables_table':        // Prints the variables table        printVariablesTable();        exit();    default:        break;    }}$server_db_isLocal = strtolower($cfg['Server']['host']) == 'localhost'                              || $cfg['Server']['host'] == '127.0.0.1'                              || $cfg['Server']['host'] == '::1';PMA_AddJSVar(    'pma_token',    $_SESSION[' PMA_token ']);PMA_AddJSVar(    'url_query',    str_replace('&amp;', '&', PMA_generate_common_url($db)));PMA_AddJSVar(    'server_time_diff',    'new Date().getTime() - ' . (microtime(true) * 1000),    false);PMA_AddJSVar(    'server_os',    PHP_OS);PMA_AddJSVar(    'is_superuser',    PMA_isSuperuser());PMA_AddJSVar(    'server_db_isLocal',    $server_db_isLocal);PMA_AddJSVar(    'profiling_docu',    PMA_showMySQLDocu('general-thread-states', 'general-thread-states'));PMA_AddJSVar(    'explain_docu',    PMA_showMySQLDocu('explain-output', 'explain-output'));/** * start output */ /** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';?><div id="serverstatus">    <h2><?php/** * Displays the sub-page heading */if ($GLOBALS['cfg']['MainPageIconic']) {    echo PMA_getImage('s_status.png');}echo __('Runtime Information');?></h2>    <div id="serverStatusTabs">        <ul>            <li><a href="#statustabs_traffic"><?php echo __('Server'); ?></a></li>            <li><a href="#statustabs_queries"><?php echo __('Query statistics'); ?></a></li>            <li><a href="#statustabs_allvars"><?php echo __('All status variables'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_charting"><?php echo __('Monitor'); ?></a></li>            <li class="jsfeature"><a href="#statustabs_advisor"><?php echo __('Advisor'); ?></a></li>        </ul>        <div id="statustabs_traffic" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=server_traffic&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_trafficChartRefresh"><?php echo __('Refresh rate: '); ?></label>                    <?php refreshList('trafficChartRefresh'); ?>                </span>                <a class="tabChart livetrafficLink" href="#">                    <?php echo __('Live traffic chart'); ?>                </a>                <a class="tabChart liveconnectionsLink" href="#">                    <?php echo __('Live conn./process chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printServerTraffic(); ?>            </div>        </div>        <div id="statustabs_queries" class="clearfloat">            <div class="buttonlinks jsfeature">                <a class="tabRefresh"  href="<?php echo $PMA_PHP_SELF . '?show=query_statistics&amp;' . PMA_generate_common_url(); ?>" >                    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                    <?php echo __('Refresh'); ?>                </a>                <span class="refreshList" style="display:none;">                    <label for="id_queryChartRefresh"><?php echo __('Refresh rate: '); ?></label>                       <?php refreshList('queryChartRefresh'); ?>                </span>                <a class="tabChart livequeriesLink" href="#">                    <?php echo __('Live query chart'); ?>                </a>            </div>            <div class="tabInnerContent">                <?php printQueryStatistics(); ?>            </div>        </div>        <div id="statustabs_allvars" class="clearfloat">            <fieldset id="tableFilter" class="jsfeature">                <div class="buttonlinks">                    <a class="tabRefresh" href="<?php echo $PMA_PHP_SELF . '?show=variables_table&amp;' . PMA_generate_common_url(); ?>" >                        <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />                        <?php echo __('Refresh'); ?>                    </a>                </div>                <legend><?php echo __('Filters'); ?></legend>                <div class="formelement">                    <label for="filterText"><?php echo __('Containing the word:'); ?></label>                    <input name="filterText" type="text" id="filterText" style="vertical-align: baseline;" />                </div>                <div class="formelement">                    <input type="checkbox" name="filterAlert" id="filterAlert" />                    <label for="filterAlert"><?php echo __('Show only alert values'); ?></label>                </div>                <div class="formelement">                    <select id="filterCategory" name="filterCategory">                        <option value=''><?php echo __('Filter by category...'); ?></option>                <?php                        foreach ($sections as $section_id => $section_name) {                            if (isset($categoryUsed[$section_id])) {                ?>                                <option value='<?php echo $section_id; ?>'><?php echo $section_name; ?></option>                <?php                            }                        }                ?>                    </select>                </div>                <div class="formelement">                    <input type="checkbox" name="dontFormat" id="dontFormat" />                    <label for="dontFormat"><?php echo __('Show unformatted values'); ?></label>                </div>            </fieldset>            <div id="linkSuggestions" class="defaultLinks" style="display:none">                <p class="notice"><?php echo __('Related links:'); ?>                <?php                foreach ($links as $section_name => $section_links) {                    echo '<span class="status_' . $section_name . '"> ';                    $i=0;                    foreach ($section_links as $link_name => $link_url) {                        if ($i > 0) {                            echo ', ';                        }                        if ('doc' == $link_name) {                            echo PMA_showMySQLDocu($link_url, $link_url);                        } else {                            echo '<a href="' . $link_url . '">' . $link_name . '</a>';                        }                        $i++;                    }                    echo '</span>';                }                unset($link_url, $link_name, $i);                ?>                </p>            </div>            <div class="tabInnerContent">                <?php printVariablesTable(); ?>            </div>        </div>        <div id="statustabs_charting" class="jsfeature">            <?php printMonitor(); ?>        </div>        <div id="statustabs_advisor" class="jsfeature">            <div class="tabLinks">                <?php echo PMA_getImage('play.png'); ?> <a href="#startAnalyzer"><?php echo __('Run analyzer'); ?></a>                <?php echo PMA_getImage('b_help.png'); ?> <a href="#openAdvisorInstructions"><?php echo __('Instructions'); ?></a>            </div>            <div class="tabInnerContent clearfloat">            </div>            <div id="advisorInstructionsDialog" style="display:none;">            <?php            echo '<p>';            echo __('The Advisor system can provide recommendations on server variables by analyzing the server status variables.');            echo '</p> <p>';            echo __('Do note however that this system provides recommendations based on simple calculations and by rule of thumb which may not necessarily apply to your system.');            echo '</p> <p>';            echo __('Prior to changing any of the configuration, be sure to know what you are changing (by reading the documentation) and how to undo the change. Wrong tuning can have a very negative effect on performance.');            echo '</p> <p>';            echo __('The best way to tune your system would be to change only one setting at a time, observe or benchmark your database, and undo the change if there was no clearly measurable improvement.');            echo '</p>';            ?>            </div>        </div>    </div></div><?phpfunction printQueryStatistics(){    global $server_status, $used_queries, $url_query, $PMA_PHP_SELF;    $hour_factor   = 3600 / $server_status['Uptime'];    $total_queries = array_sum($used_queries);    ?>    <h3 id="serverstatusqueries">        <?php        /* l10n: Questions is the name of a MySQL Status variable */        echo sprintf(__('Questions since startup: %s'), PMA_formatNumber($total_queries, 0)) . ' ';        echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_Questions');        ?>        <br />        <span>        <?php        echo '&oslash; ' . __('per hour') . ': ';        echo PMA_formatNumber($total_queries * $hour_factor, 0);        echo '<br />';        echo '&oslash; ' . __('per minute') . ': ';        echo PMA_formatNumber($total_queries * 60 / $server_status['Uptime'], 0);        echo '<br />';        if ($total_queries / $server_status['Uptime'] >= 1) {            echo '&oslash; ' . __('per second') . ': ';            echo PMA_formatNumber($total_queries / $server_status['Uptime'], 0);        }        ?>        </span>    </h3>    <?php    // reverse sort by value to show most used statements first    arsort($used_queries);    $odd_row        = true;    $count_displayed_rows = 0;    $perc_factor    = 100 / $total_queries; //(- $server_status['Connections']);    ?>        <table id="serverstatusqueriesdetails" class="data sortable noclick">        <col class="namecol" />        <col class="valuecol" span="3" />        <thead>            <tr><th><?php echo __('Statements'); ?></th>                <th><?php                    /* l10n: # = Amount of queries */                    echo __('#');                    ?>                </th>                <th>&oslash; <?php echo __('per hour'); ?></th>                <th>%</th>            </tr>        </thead>        <tbody>    <?php    $chart_json = array();    $query_sum = array_sum($used_queries);    $other_sum = 0;    foreach ($used_queries as $name => $value) {        $odd_row = !$odd_row;        // For the percentage column, use Questions - Connections, because        // the number of connections is not an item of the Query types        // but is included in Questions. Then the total of the percentages is 100.        $name = str_replace(array('Com_', '_'), array('', ' '), $name);        // Group together values that make out less than 2% into "Other", but only if we have more than 6 fractions already        if ($value < $query_sum * 0.02 && count($chart_json)>6) {            $other_sum += $value;        } else {            $chart_json[$name] = $value;        }    ?>            <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">                <th class="name"><?php echo htmlspecialchars($name); ?></th>                <td class="value"><?php echo htmlspecialchars(PMA_formatNumber($value, 5, 0, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $hour_factor, 4, 1, true)); ?></td>                <td class="value"><?php echo                    htmlspecialchars(PMA_formatNumber($value * $perc_factor, 0, 2)); ?>%</td>            </tr>    <?php    }    ?>        </tbody>        </table>        <div id="serverstatusquerieschart">            <span style="display:none;">        <?php            if ($other_sum > 0) {                $chart_json[__('Other')] = $other_sum;            }            echo json_encode($chart_json);        ?>            </span>        </div>        <?php}function printServerTraffic(){    global $server_status, $PMA_PHP_SELF;    global $server_master_status, $server_slave_status, $replication_types;    $hour_factor    = 3600 / $server_status['Uptime'];    /**     * starttime calculation     */    $start_time = PMA_DBI_fetch_value(        'SELECT UNIX_TIMESTAMP() - ' . $server_status['Uptime']    );    ?>    <h3><?php    echo sprintf(        __('Network traffic since startup: %s'),        implode(' ', PMA_formatByteDown($server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1))    );    ?>    </h3>    <p>    <?php    echo sprintf(        __('This MySQL server has been running for %1$s. It started up on %2$s.'),        PMA_timespanFormat($server_status['Uptime']),        PMA_localisedDate($start_time)    ) . "\n";    ?>    </p>    <?php    if ($server_master_status || $server_slave_status) {        echo '<p class="notice">';        if ($server_master_status && $server_slave_status) {            echo __('This MySQL server works as <b>master</b> and <b>slave</b> in <b>replication</b> process.');        } elseif ($server_master_status) {            echo __('This MySQL server works as <b>master</b> in <b>replication</b> process.');        } elseif ($server_slave_status) {            echo __('This MySQL server works as <b>slave</b> in <b>replication</b> process.');        }        echo ' ';        echo __('For further information about replication status on the server, please visit the <a href="#replication">replication section</a>.');        echo '</p>';    }    /* if the server works as master or slave in replication process, display useful information */    if ($server_master_status || $server_slave_status) {    ?>      <hr class="clearfloat" />      <h3><a name="replication"></a><?php echo __('Replication status'); ?></h3>    <?php        foreach ($replication_types as $type) {            if (${"server_{$type}_status"}) {                PMA_replication_print_status_table($type);            }        }        unset($types);    }    ?>    <table id="serverstatustraffic" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Traffic') . '&nbsp;' . PMA_showHint(__('On a busy server, the byte counters may overrun, so those statistics as reported by the MySQL server may be incorrect.')); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('Received'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_received'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Sent'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown($server_status['Bytes_sent'], 3, 1)); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_sent'] * $hour_factor, 3, 1)); ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    $server_status['Bytes_received'] + $server_status['Bytes_sent'], 3, 1)            ); ?></td>        <td class="value"><?php echo            implode(' ',                PMA_formatByteDown(                    ($server_status['Bytes_received'] + $server_status['Bytes_sent'])                    * $hour_factor, 3, 1)            ); ?></td>    </tr>    </tbody>    </table>    <table id="serverstatusconnections" class="data noclick">    <thead>    <tr>        <th colspan="2"><?php echo __('Connections'); ?></th>        <th>&oslash; <?php echo __('per hour'); ?></th>        <th>%</th>    </tr>    </thead>    <tbody>    <tr class="odd">        <th class="name"><?php echo __('max. concurrent connections'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Max_used_connections'], 0); ?>  </td>        <td class="value">--- </td>        <td class="value">--- </td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Failed attempts'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_connects'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_connects'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="odd">        <th class="name"><?php echo __('Aborted'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'], 4, 1, true); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Aborted_clients'] * $hour_factor,                4, 2, true); ?></td>        <td class="value"><?php echo            $server_status['Connections'] > 0          ? PMA_formatNumber(                $server_status['Aborted_clients'] * 100 / $server_status['Connections'],                0, 2, true) . '%'          : '--- '; ?></td>    </tr>    <tr class="even">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'], 4, 0); ?></td>        <td class="value"><?php echo            PMA_formatNumber($server_status['Connections'] * $hour_factor,                4, 2); ?></td>        <td class="value"><?php echo            PMA_formatNumber(100, 0, 2); ?>%</td>    </tr>    </tbody>    </table>    <?php    $url_params = array();    $show_full_sql = !empty($_REQUEST['full']);    if ($show_full_sql) {        $url_params['full'] = 1;        $full_text_link = 'server_status.php' . PMA_generate_common_url(array(), 'html', '?');    } else {        $full_text_link = 'server_status.php' . PMA_generate_common_url(array('full' => 1));    }    if (PMA_DRIZZLE) {        $sql_query = "SELECT                p.id       AS Id,                p.username AS User,                p.host     AS Host,                p.db       AS db,                p.command  AS Command,                p.time     AS Time,                p.state    AS State,                " . ($show_full_sql ? 's.query' : 'left(p.info, ' . (int)$GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] . ')') . " AS Info            FROM data_dictionary.PROCESSLIST p                " . ($show_full_sql ? 'LEFT JOIN data_dictionary.SESSIONS s ON s.session_id = p.id' : '');    } else {        $sql_query = $show_full_sql            ? 'SHOW FULL PROCESSLIST'            : 'SHOW PROCESSLIST';    }    $result = PMA_DBI_query($sql_query);    /**     * Displays the page     */    ?>    <table id="tableprocesslist" class="data clearfloat noclick">    <thead>    <tr>        <th><?php echo __('Processes'); ?></th>        <th><?php echo __('ID'); ?></th>        <th><?php echo __('User'); ?></th>        <th><?php echo __('Host'); ?></th>        <th><?php echo __('Database'); ?></th>        <th><?php echo __('Command'); ?></th>        <th><?php echo __('Time'); ?></th>        <th><?php echo __('Status'); ?></th>        <th><?php            echo __('SQL query');            if (! PMA_DRIZZLE) {                ?>            <a href="<?php echo $full_text_link; ?>"                title="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>">                <img src="<?php echo $GLOBALS['pmaThemeImage'] . 's_' . ($show_full_sql ? 'partial' : 'full'); ?>text.png"                alt="<?php echo $show_full_sql ? __('Truncate Shown Queries') : __('Show Full Queries'); ?>" />            </a>            <?php } ?>        </th>    </tr>    </thead>    <tbody>    <?php    $odd_row = true;    while ($process = PMA_DBI_fetch_assoc($result)) {        $url_params['kill'] = $process['Id'];        $kill_process = 'server_status.php' . PMA_generate_common_url($url_params);        ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><a href="<?php echo $kill_process ; ?>"><?php echo __('Kill'); ?></a></td>        <td class="value"><?php echo $process['Id']; ?></td>        <td><?php echo $process['User']; ?></td>        <td><?php echo $process['Host']; ?></td>        <td><?php echo ((! isset($process['db']) || ! strlen($process['db'])) ? '<i>' . __('None') . '</i>' : $process['db']); ?></td>        <td><?php echo $process['Command']; ?></td>        <td class="value"><?php echo $process['Time']; ?></td>        <td><?php echo (empty($process['State']) ? '---' : $process['State']); ?></td>        <td>        <?php        if (empty($process['Info'])) {            echo '---';        } else {            if (!$show_full_sql && strlen($process['Info']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                echo htmlspecialchars(substr($process['Info'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';            } else {                echo PMA_SQP_formatHtml(PMA_SQP_parse($process['Info']));            }        }        ?>        </td>    </tr>        <?php        $odd_row = ! $odd_row;    }    ?>    </tbody>    </table>    <?php}function printVariablesTable(){    global $server_status, $server_variables, $allocationMap, $links;    /**     * Messages are built using the message name     */    $strShowStatus = array(        'Aborted_clients' => __('The number of connections that were aborted because the client died without closing the connection properly.'),        'Aborted_connects' => __('The number of failed attempts to connect to the MySQL server.'),        'Binlog_cache_disk_use' => __('The number of transactions that used the temporary binary log cache but that exceeded the value of binlog_cache_size and used a temporary file to store statements from the transaction.'),        'Binlog_cache_use' => __('The number of transactions that used the temporary binary log cache.'),        'Connections' => __('The number of connection attempts (successful or not) to the MySQL server.'),        'Created_tmp_disk_tables' => __('The number of temporary tables on disk created automatically by the server while executing statements. If Created_tmp_disk_tables is big, you may want to increase the tmp_table_size  value to cause temporary tables to be memory-based instead of disk-based.'),        'Created_tmp_files' => __('How many temporary files mysqld has created.'),        'Created_tmp_tables' => __('The number of in-memory temporary tables created automatically by the server while executing statements.'),        'Delayed_errors' => __('The number of rows written with INSERT DELAYED for which some error occurred (probably duplicate key).'),        'Delayed_insert_threads' => __('The number of INSERT DELAYED handler threads in use. Every different table on which one uses INSERT DELAYED gets its own thread.'),        'Delayed_writes' => __('The number of INSERT DELAYED rows written.'),        'Flush_commands'  => __('The number of executed FLUSH statements.'),        'Handler_commit' => __('The number of internal COMMIT statements.'),        'Handler_delete' => __('The number of times a row was deleted from a table.'),        'Handler_discover' => __('The MySQL server can ask the NDB Cluster storage engine if it knows about a table with a given name. This is called discovery. Handler_discover indicates the number of time tables have been discovered.'),        'Handler_read_first' => __('The number of times the first entry was read from an index. If this is high, it suggests that the server is doing a lot of full index scans; for example, SELECT col1 FROM foo, assuming that col1 is indexed.'),        'Handler_read_key' => __('The number of requests to read a row based on a key. If this is high, it is a good indication that your queries and tables are properly indexed.'),        'Handler_read_next' => __('The number of requests to read the next row in key order. This is incremented if you are querying an index column with a range constraint or if you are doing an index scan.'),        'Handler_read_prev' => __('The number of requests to read the previous row in key order. This read method is mainly used to optimize ORDER BY ... DESC.'),        'Handler_read_rnd' => __('The number of requests to read a row based on a fixed position. This is high if you are doing a lot of queries that require sorting of the result. You probably have a lot of queries that require MySQL to scan whole tables or you have joins that don\'t use keys properly.'),        'Handler_read_rnd_next' => __('The number of requests to read the next row in the data file. This is high if you are doing a lot of table scans. Generally this suggests that your tables are not properly indexed or that your queries are not written to take advantage of the indexes you have.'),        'Handler_rollback' => __('The number of internal ROLLBACK statements.'),        'Handler_update' => __('The number of requests to update a row in a table.'),        'Handler_write' => __('The number of requests to insert a row in a table.'),        'Innodb_buffer_pool_pages_data' => __('The number of pages containing data (dirty or clean).'),        'Innodb_buffer_pool_pages_dirty' => __('The number of pages currently dirty.'),        'Innodb_buffer_pool_pages_flushed' => __('The number of buffer pool pages that have been requested to be flushed.'),        'Innodb_buffer_pool_pages_free' => __('The number of free pages.'),        'Innodb_buffer_pool_pages_latched' => __('The number of latched pages in InnoDB buffer pool. These are pages currently being read or written or that can\'t be flushed or removed for some other reason.'),        'Innodb_buffer_pool_pages_misc' => __('The number of pages busy because they have been allocated for administrative overhead such as row locks or the adaptive hash index. This value can also be calculated as Innodb_buffer_pool_pages_total - Innodb_buffer_pool_pages_free - Innodb_buffer_pool_pages_data.'),        'Innodb_buffer_pool_pages_total' => __('Total size of buffer pool, in pages.'),        'Innodb_buffer_pool_read_ahead_rnd' => __('The number of "random" read-aheads InnoDB initiated. This happens when a query is to scan a large portion of a table but in random order.'),        'Innodb_buffer_pool_read_ahead_seq' => __('The number of sequential read-aheads InnoDB initiated. This happens when InnoDB does a sequential full table scan.'),        'Innodb_buffer_pool_read_requests' => __('The number of logical read requests InnoDB has done.'),        'Innodb_buffer_pool_reads' => __('The number of logical reads that InnoDB could not satisfy from buffer pool and had to do a single-page read.'),        'Innodb_buffer_pool_wait_free' => __('Normally, writes to the InnoDB buffer pool happen in the background. However, if it\'s necessary to read or create a page and no clean pages are available, it\'s necessary to wait for pages to be flushed first. This counter counts instances of these waits. If the buffer pool size was set properly, this value should be small.'),        'Innodb_buffer_pool_write_requests' => __('The number writes done to the InnoDB buffer pool.'),        'Innodb_data_fsyncs' => __('The number of fsync() operations so far.'),        'Innodb_data_pending_fsyncs' => __('The current number of pending fsync() operations.'),        'Innodb_data_pending_reads' => __('The current number of pending reads.'),        'Innodb_data_pending_writes' => __('The current number of pending writes.'),        'Innodb_data_read' => __('The amount of data read so far, in bytes.'),        'Innodb_data_reads' => __('The total number of data reads.'),        'Innodb_data_writes' => __('The total number of data writes.'),        'Innodb_data_written' => __('The amount of data written so far, in bytes.'),        'Innodb_dblwr_pages_written' => __('The number of pages that have been written for doublewrite operations.'),        'Innodb_dblwr_writes' => __('The number of doublewrite operations that have been performed.'),        'Innodb_log_waits' => __('The number of waits we had because log buffer was too small and we had to wait for it to be flushed before continuing.'),        'Innodb_log_write_requests' => __('The number of log write requests.'),        'Innodb_log_writes' => __('The number of physical writes to the log file.'),        'Innodb_os_log_fsyncs' => __('The number of fsync() writes done to the log file.'),        'Innodb_os_log_pending_fsyncs' => __('The number of pending log file fsyncs.'),        'Innodb_os_log_pending_writes' => __('Pending log file writes.'),        'Innodb_os_log_written' => __('The number of bytes written to the log file.'),        'Innodb_pages_created' => __('The number of pages created.'),        'Innodb_page_size' => __('The compiled-in InnoDB page size (default 16KB). Many values are counted in pages; the page size allows them to be easily converted to bytes.'),        'Innodb_pages_read' => __('The number of pages read.'),        'Innodb_pages_written' => __('The number of pages written.'),        'Innodb_row_lock_current_waits' => __('The number of row locks currently being waited for.'),        'Innodb_row_lock_time_avg' => __('The average time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_time' => __('The total time spent in acquiring row locks, in milliseconds.'),        'Innodb_row_lock_time_max' => __('The maximum time to acquire a row lock, in milliseconds.'),        'Innodb_row_lock_waits' => __('The number of times a row lock had to be waited for.'),        'Innodb_rows_deleted' => __('The number of rows deleted from InnoDB tables.'),        'Innodb_rows_inserted' => __('The number of rows inserted in InnoDB tables.'),        'Innodb_rows_read' => __('The number of rows read from InnoDB tables.'),        'Innodb_rows_updated' => __('The number of rows updated in InnoDB tables.'),        'Key_blocks_not_flushed' => __('The number of key blocks in the key cache that have changed but haven\'t yet been flushed to disk. It used to be known as Not_flushed_key_blocks.'),        'Key_blocks_unused' => __('The number of unused blocks in the key cache. You can use this value to determine how much of the key cache is in use.'),        'Key_blocks_used' => __('The number of used blocks in the key cache. This value is a high-water mark that indicates the maximum number of blocks that have ever been in use at one time.'),        'Key_read_requests' => __('The number of requests to read a key block from the cache.'),        'Key_reads' => __('The number of physical reads of a key block from disk. If Key_reads is big, then your key_buffer_size value is probably too small. The cache miss rate can be calculated as Key_reads/Key_read_requests.'),        'Key_write_requests' => __('The number of requests to write a key block to the cache.'),        'Key_writes' => __('The number of physical writes of a key block to disk.'),        'Last_query_cost' => __('The total cost of the last compiled query as computed by the query optimizer. Useful for comparing the cost of different query plans for the same query. The default value of 0 means that no query has been compiled yet.'),        'Max_used_connections' => __('The maximum number of connections that have been in use simultaneously since the server started.'),        'Not_flushed_delayed_rows' => __('The number of rows waiting to be written in INSERT DELAYED queues.'),        'Opened_tables' => __('The number of tables that have been opened. If opened tables is big, your table cache value is probably too small.'),        'Open_files' => __('The number of files that are open.'),        'Open_streams' => __('The number of streams that are open (used mainly for logging).'),        'Open_tables' => __('The number of tables that are open.'),        'Qcache_free_blocks' => __('The number of free memory blocks in query cache. High numbers can indicate fragmentation issues, which may be solved by issuing a FLUSH QUERY CACHE statement.'),        'Qcache_free_memory' => __('The amount of free memory for query cache.'),        'Qcache_hits' => __('The number of cache hits.'),        'Qcache_inserts' => __('The number of queries added to the cache.'),        'Qcache_lowmem_prunes' => __('The number of queries that have been removed from the cache to free up memory for caching new queries. This information can help you tune the query cache size. The query cache uses a least recently used (LRU) strategy to decide which queries to remove from the cache.'),        'Qcache_not_cached' => __('The number of non-cached queries (not cachable, or not cached due to the query_cache_type setting).'),        'Qcache_queries_in_cache' => __('The number of queries registered in the cache.'),        'Qcache_total_blocks' => __('The total number of blocks in the query cache.'),        'Rpl_status' => __('The status of failsafe replication (not yet implemented).'),        'Select_full_join' => __('The number of joins that do not use indexes. If this value is not 0, you should carefully check the indexes of your tables.'),        'Select_full_range_join' => __('The number of joins that used a range search on a reference table.'),        'Select_range_check' => __('The number of joins without keys that check for key usage after each row. (If this is not 0, you should carefully check the indexes of your tables.)'),        'Select_range' => __('The number of joins that used ranges on the first table. (It\'s normally not critical even if this is big.)'),        'Select_scan' => __('The number of joins that did a full scan of the first table.'),        'Slave_open_temp_tables' => __('The number of temporary tables currently open by the slave SQL thread.'),        'Slave_retried_transactions' => __('Total (since startup) number of times the replication slave SQL thread has retried transactions.'),        'Slave_running' => __('This is ON if this server is a slave that is connected to a master.'),        'Slow_launch_threads' => __('The number of threads that have taken more than slow_launch_time seconds to create.'),        'Slow_queries' => __('The number of queries that have taken more than long_query_time seconds.'),        'Sort_merge_passes' => __('The number of merge passes the sort algorithm has had to do. If this value is large, you should consider increasing the value of the sort_buffer_size system variable.'),        'Sort_range' => __('The number of sorts that were done with ranges.'),        'Sort_rows' => __('The number of sorted rows.'),        'Sort_scan' => __('The number of sorts that were done by scanning the table.'),        'Table_locks_immediate' => __('The number of times that a table lock was acquired immediately.'),        'Table_locks_waited' => __('The number of times that a table lock could not be acquired immediately and a wait was needed. If this is high, and you have performance problems, you should first optimize your queries, and then either split your table or tables or use replication.'),        'Threads_cached' => __('The number of threads in the thread cache. The cache hit rate can be calculated as Threads_created/Connections. If this value is red you should raise your thread_cache_size.'),        'Threads_connected' => __('The number of currently open connections.'),        'Threads_created' => __('The number of threads created to handle connections. If Threads_created is big, you may want to increase the thread_cache_size value. (Normally this doesn\'t give a notable performance improvement if you have a good thread implementation.)'),        'Threads_running' => __('The number of threads that are not sleeping.')    );    /**     * define some alerts     */    // name => max value before alert    $alerts = array(        // lower is better        // variable => max value        'Aborted_clients' => 0,        'Aborted_connects' => 0,        'Binlog_cache_disk_use' => 0,        'Created_tmp_disk_tables' => 0,        'Handler_read_rnd' => 0,        'Handler_read_rnd_next' => 0,        'Innodb_buffer_pool_pages_dirty' => 0,        'Innodb_buffer_pool_reads' => 0,        'Innodb_buffer_pool_wait_free' => 0,        'Innodb_log_waits' => 0,        'Innodb_row_lock_time_avg' => 10, // ms        'Innodb_row_lock_time_max' => 50, // ms        'Innodb_row_lock_waits' => 0,        'Slow_queries' => 0,        'Delayed_errors' => 0,        'Select_full_join' => 0,        'Select_range_check' => 0,        'Sort_merge_passes' => 0,        'Opened_tables' => 0,        'Table_locks_waited' => 0,        'Qcache_lowmem_prunes' => 0,        'Qcache_free_blocks' => isset($server_status['Qcache_total_blocks']) ? $server_status['Qcache_total_blocks'] / 5 : 0,        'Slow_launch_threads' => 0,        // depends on Key_read_requests        // normaly lower then 1:0.01        'Key_reads' => isset($server_status['Key_read_requests']) ? (0.01 * $server_status['Key_read_requests']) : 0,        // depends on Key_write_requests        // normaly nearly 1:1        'Key_writes' => isset($server_status['Key_write_requests']) ? (0.9 * $server_status['Key_write_requests']) : 0,        'Key_buffer_fraction' => 0.5,        // alert if more than 95% of thread cache is in use        'Threads_cached' => isset($server_variables['thread_cache_size']) ? 0.95 * $server_variables['thread_cache_size'] : 0        // higher is better        // variable => min value        //'Handler read key' => '> ',    );?><table class="data sortable noclick" id="serverstatusvariables">    <col class="namecol" />    <col class="valuecol" />    <col class="descrcol" />    <thead>        <tr>            <th><?php echo __('Variable'); ?></th>            <th><?php echo __('Value'); ?></th>            <th><?php echo __('Description'); ?></th>        </tr>    </thead>    <tbody>    <?php    $odd_row = false;    foreach ($server_status as $name => $value) {            $odd_row = !$odd_row;?>        <tr class="<?php echo $odd_row ? 'odd' : 'even'; echo isset($allocationMap[$name])?' s_' . $allocationMap[$name]:''; ?>">            <th class="name"><?php            echo htmlspecialchars(str_replace('_', ' ', $name));            /* Fields containing % are calculated, they can not be described in MySQL documentation */            if (strpos($name, '%') === FALSE) {                 echo PMA_showMySQLDocu('server-status-variables', 'server-status-variables', false, 'statvar_' . $name);            }            ?>            </th>            <td class="value"><span class="formatted"><?php            if (isset($alerts[$name])) {                if ($value > $alerts[$name]) {                    echo '<span class="attention">';                } else {                    echo '<span class="allfine">';                }            }            if ('%' === substr($name, -1, 1)) {                echo htmlspecialchars(PMA_formatNumber($value, 0, 2)) . ' %';            } elseif (strpos($name, 'Uptime') !== false) {                echo htmlspecialchars(PMA_timespanFormat($value));            } elseif (is_numeric($value) && $value == (int) $value && $value > 1000) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } elseif (is_numeric($value) && $value == (int) $value) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 0));            } elseif (is_numeric($value)) {                echo htmlspecialchars(PMA_formatNumber($value, 3, 1));            } else {                echo htmlspecialchars($value);            }            if (isset($alerts[$name])) {                echo '</span>';            }            ?></span><span style="display:none;" class="original"><?php echo $value; ?></span>            </td>            <td class="descr">            <?php            if (isset($strShowStatus[$name ])) {                echo $strShowStatus[$name];            }            if (isset($links[$name])) {                foreach ($links[$name] as $link_name => $link_url) {                    if ('doc' == $link_name) {                        echo PMA_showMySQLDocu($link_url, $link_url);                    } else {                        echo ' <a href="' . $link_url . '">' . $link_name . '</a>' .                        "\n";                    }                }                unset($link_url, $link_name);            }            ?>            </td>        </tr>    <?php    }    ?>    </tbody>    </table>    <?php}function printMonitor(){    global $server_status, $server_db_isLocal;?>    <div class="tabLinks" style="display:none;">        <a href="#pauseCharts">            <?php echo PMA_getImage('play.png'); ?>            <?php echo __('Start Monitor'); ?>        </a>        <a href="#settingsPopup" rel="popupLink" style="display:none;">            <?php echo PMA_getImage('s_cog.png'); ?>            <?php echo __('Settings'); ?>        </a>        <?php if (!PMA_DRIZZLE) { ?>        <a href="#monitorInstructionsDialog">            <?php echo PMA_getImage('b_help.png'); ?>            <?php echo __('Instructions/Setup'); ?>        </a>        <?php } ?>        <a href="#endChartEditMode" style="display:none;">            <?php echo PMA_getImage('s_okay.png'); ?>            <?php echo __('Done rearranging/editing charts'); ?>        </a>    </div>    <div class="popupContent settingsPopup">        <a href="#addNewChart">            <?php echo PMA_getImage('b_chart.png'); ?>            <?php echo __('Add chart'); ?>        </a>        <a href="#rearrangeCharts"><?php echo PMA_getImage('b_tblops.png'); ?><?php echo __('Rearrange/edit charts'); ?></a>        <div class="clearfloat paddingtop"></div>        <div class="floatleft">            <?php            echo __('Refresh rate') . '<br />';            refreshList('gridChartRefresh', 5, Array(2, 3, 4, 5, 10, 20, 40, 60, 120, 300, 600, 1200));        ?><br />        </div>        <div class="floatleft">            <?php echo __('Chart columns'); ?> <br />            <select name="chartColumns">                <option>1</option>                <option>2</option>                <option>3</option>                <option>4</option>                <option>5</option>                <option>6</option>                <option>7</option>                <option>8</option>                <option>9</option>                <option>10</option>            </select>        </div>        <div class="clearfloat paddingtop">        <b><?php echo __('Chart arrangement'); ?></b> <?php echo PMA_showHint(__('The arrangement of the charts is stored to the browsers local storage. You may want to export it if you have a complicated set up.')); ?><br/>        <a href="#importMonitorConfig"><?php echo __('Import'); ?></a>&nbsp;&nbsp;<a href="#exportMonitorConfig"><?php echo __('Export'); ?></a>&nbsp;&nbsp;<a href="#clearMonitorConfig"><?php echo __('Reset to default'); ?></a>        </div>    </div>    <div id="monitorInstructionsDialog" title="<?php echo __('Monitor Instructions'); ?>" style="display:none;">        <?php echo __('The phpMyAdmin Monitor can assist you in optimizing the server configuration and track down time intensive queries. For the latter you will need to set log_output to \'TABLE\' and have either the slow_query_log or general_log enabled. Note however, that the general_log produces a lot of data and increases server load by up to 15%'); ?>    <?php if (PMA_MYSQL_INT_VERSION < 50106) { ?>        <p>        <?php echo PMA_getImage('s_attention.png'); ?>        <?php            echo __('Unfortunately your Database server does not support logging to table, which is a requirement for analyzing the database logs with phpMyAdmin. Logging to table is supported by MySQL 5.1.6 and onwards. You may still use the server charting features however.');        ?>        </p>    <?php    } else {    ?>        <p></p>        <img class="ajaxIcon" src="<?php echo $GLOBALS['pmaThemeImage']; ?>ajax_clock_small.gif" alt="Loading" />        <div class="ajaxContent"></div>        <div class="monitorUse" style="display:none;">            <p></p>            <?php                echo '<strong>';                echo __('Using the monitor:');                echo '</strong><p>';                echo __('Your browser will refresh all displayed charts in a regular interval. You may add charts and change the refresh rate under \'Settings\', or remove any chart using the cog icon on each respective chart.');                echo '</p><p>';                echo __('To display queries from the logs, select the relevant time span on any chart by holding down the left mouse button and panning over the chart. Once confirmed, this will load a table of grouped queries, there you may click on any occuring SELECT statements to further analyze them.');                echo '</p>';            ?>            <p>            <?php echo PMA_getImage('s_attention.png'); ?>            <?php                echo '<strong>';                echo __('Please note:');                echo '</strong><br />';                echo __('Enabling the general_log may increase the server load by 5-15%. Also be aware that generating statistics from the logs is a load intensive task, so it is advisable to select only a small time span and to disable the general_log and empty its table once monitoring is not required any more.');            ?>            </p>        </div>    <?php } ?>    </div>    <div id="addChartDialog" title="<?php echo __('Add chart'); ?>" style="display:none;">        <div id="tabGridVariables">            <p><input type="text" name="chartTitle" value="<?php echo __('Chart Title'); ?>" /></p>            <input type="radio" name="chartType" value="preset" id="chartPreset" />            <label for="chartPreset"><?php echo __('Preset chart'); ?></label>            <select name="presetCharts"></select><br/>            <input type="radio" name="chartType" value="variable" id="chartStatusVar" checked="checked" />            <label for="chartStatusVar"><?php echo __('Status variable(s)'); ?></label><br/>            <div id="chartVariableSettings">                <label for="chartSeries"><?php echo __('Select series:'); ?></label><br />                <select id="chartSeries" name="varChartList" size="1">                    <option><?php echo __('Commonly monitored'); ?></option>                    <option>Processes</option>                    <option>Questions</option>                    <option>Connections</option>                    <option>Bytes_sent</option>                    <option>Bytes_received</option>                    <option>Threads_connected</option>                    <option>Created_tmp_disk_tables</option>                    <option>Handler_read_first</option>                    <option>Innodb_buffer_pool_wait_free</option>                    <option>Key_reads</option>                    <option>Open_tables</option>                    <option>Select_full_join</option>                    <option>Slow_queries</option>                </select><br />                <label for="variableInput"><?php echo __('or type variable name:'); ?> </label>                <input type="text" name="variableInput" id="variableInput" />                <p></p>                <input type="checkbox" name="differentialValue" id="differentialValue" value="differential" checked="checked" />                <label for="differentialValue"><?php echo __('Display as differential value'); ?></label><br />                <input type="checkbox" id="useDivisor" name="useDivisor" value="1" />                <label for="useDivisor"><?php echo __('Apply a divisor'); ?></label>                <span class="divisorInput" style="display:none;">                    <input type="text" name="valueDivisor" size="4" value="1" />                    (<a href="#kibDivisor"><?php echo __('KiB'); ?></a>, <a href="#mibDivisor"><?php echo __('MiB'); ?></a>)                </span><br />                <input type="checkbox" id="useUnit" name="useUnit" value="1" />                <label for="useUnit"><?php echo __('Append unit to data values'); ?></label>                <span class="unitInput" style="display:none;">                    <input type="text" name="valueUnit" size="4" value="" />                </span>                <p>                    <a href="#submitAddSeries"><b><?php echo __('Add this series'); ?></b></a>                    <span id="clearSeriesLink" style="display:none;">                       | <a href="#submitClearSeries"><?php echo __('Clear series'); ?></a>                    </span>                </p>                <?php echo __('Series in Chart:'); ?><br/>                <span id="seriesPreview">                <i><?php echo __('None'); ?></i>                </span>            </div>        </div>    </div>    <!-- For generic use -->    <div id="emptyDialog" title="Dialog" style="display:none;">    </div>    <?php if (!PMA_DRIZZLE) { ?>    <div id="logAnalyseDialog" title="<?php echo __('Log statistics'); ?>" style="display:none;">        <p> <?php echo __('Selected time range:'); ?>        <input type="text" name="dateStart" class="datetimefield" value="" /> -        <input type="text" name="dateEnd" class="datetimefield" value="" /></p>        <input type="checkbox" id="limitTypes" value="1" checked="checked" />        <label for="limitTypes">            <?php echo __('Only retrieve SELECT,INSERT,UPDATE and DELETE Statements'); ?>        </label>        <br/>        <input type="checkbox" id="removeVariables" value="1" checked="checked" />        <label for="removeVariables">            <?php echo __('Remove variable data in INSERT statements for better grouping'); ?>        </label>        <?php        echo '<p>';        echo __('Choose from which log you want the statistics to be generated from.');        echo '</p><p>';        echo __('Results are grouped by query text.');        echo '</p>';        ?>    </div>    <div id="queryAnalyzerDialog" title="<?php echo __('Query analyzer'); ?>" style="display:none;">        <textarea id="sqlquery"> </textarea>        <p></p>        <div class="placeHolder"></div>    </div>    <?php } ?>    <table border="0" class="clearfloat" id="chartGrid">    </table>    <div id="logTable">        <br/>    </div>    <script type="text/javascript">        variableNames = [ <?php            $i=0;            foreach ($server_status as $name=>$value) {                if (is_numeric($value)) {                    if ($i++ > 0) {                        echo ", ";                    }                    echo "'" . $name . "'";                }            }            ?> ];    </script><?php}/* Builds a <select> list for refresh rates */function refreshList($name, $defaultRate=5, $refreshRates=Array(1, 2, 5, 10, 20, 40, 60, 120, 300, 600)){?>    <select name="<?php echo $name; ?>" id="id_<?php echo $name; ?>">        <?php            foreach ($refreshRates as $rate) {                $selected = ($rate == $defaultRate)?' selected="selected"':'';                if ($rate<60) {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d second', '%d seconds', $rate), $rate) . '</option>';                } else {                    echo '<option value="' . $rate . '"' . $selected . '>' . sprintf(_ngettext('%d minute', '%d minutes', $rate/60), $rate/60) . '</option>';                }            }        ?>    </select><?php}/** * cleanup of some deprecated values * * @param array &$server_status */function cleanDeprecated(&$server_status){    $deprecated = array(        'Com_prepare_sql' => 'Com_stmt_prepare',        'Com_execute_sql' => 'Com_stmt_execute',        'Com_dealloc_sql' => 'Com_stmt_close',    );    foreach ($deprecated as $old => $new) {        if (isset($server_status[$old]) && isset($server_status[$new])) {            unset($server_status[$old]);        }    }}/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON') && !defined('TESTSUITE')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0.2em 0.2em 0.2em 0.2em;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes *//******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>    background-color: <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    padding:.3em;}div#recentTableList {    text-align: center;    margin-bottom: 0.5em;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin-bottom:      0.5em;    padding-bottom:     0.5em;}ul#databaseList {    margin-bottom:      0.5em;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     1.5em;    font-style: italic;}ul#databaseList a {    display: block;    font-style: normal;}div#navidbpageselector a,ul#databaseList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}ul#databaseList ul {    padding-left: 1em;    padding-right: 0;}ul#databaseList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#leftframelinks a img.icon {    margin:             2px;    border:             0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding:            0;}div#leftframelinks a:hover img {    background-color:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;    font-size:          80%;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;    font-size:          80%;    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            0;    white-space:        nowrap;}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 3px 5px 0 -23px;    position: relative;    float: right;}#fast_filter {    width: 100%;    padding: 2px 0;    margin: 0;    border: 0;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build LaTeX dumps of tables * * @package PhpMyAdmin-Export * @subpackage Latex */if (! defined('PHPMYADMIN')) {    exit;}/* Messages used in default captions */$GLOBALS['strLatexContent'] = __('Content of table @TABLE@');$GLOBALS['strLatexContinued'] = __('(continued)');$GLOBALS['strLatexStructure'] = __('Structure of table @TABLE@');/** * */if (isset($plugin_list)) {    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && ! $plugin_param['single_table']) {        $hide_structure = true;    }    $plugin_list['latex'] = array(        'text' => __('LaTeX'),        'extension' => 'tex',        'mime_type' => 'application/x-tex',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'caption', 'text' => __('Include table caption')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* what to dump (structure/data/both) */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'dump_what', 'text' => __('Dump table'));    $plugin_list['latex']['options'][]        = array('type' => 'radio', 'name' => 'structure_or_data', 'values' => array('structure' => __('structure'), 'data' => __('data'), 'structure_and_data' => __('structure and data')));    $plugin_list['latex']['options'][] = array('type' => 'end_group');    /* Structure options */    if (! $hide_structure) {        $plugin_list['latex']['options'][]            = array('type' => 'begin_group', 'name' => 'structure', 'text' => __('Object creation options'), 'force' => 'data');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');        $plugin_list['latex']['options'][]            = array('type' => 'text', 'name' => 'structure_label', 'text' => __('Label key'), 'doc' => 'faq6_27');        if (! empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'relation', 'text' => __('Display foreign key relationships'));        }        $plugin_list['latex']['options'][]            = array('type' => 'bool', 'name' => 'comments', 'text' => __('Display comments'));        if (! empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['latex']['options'][]                = array('type' => 'bool', 'name' => 'mime', 'text' => __('Display MIME types'));        }        $plugin_list['latex']['options'][]            = array('type' => 'end_group');    }    /* Data */    $plugin_list['latex']['options'][]        = array('type' => 'begin_group', 'name' => 'data', 'text' => __('Data dump options'), 'force' => 'structure');    $plugin_list['latex']['options'][]        = array('type' => 'bool', 'name' => 'columns', 'text' => __('Put columns names in the first row'));    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_caption', 'text' => __('Table caption'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_continued_caption', 'text' => __('Table caption (continued)'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'data_label', 'text' => __('Label key'), 'doc' => 'faq6_27');    $plugin_list['latex']['options'][]        = array('type' => 'text', 'name' => 'null', 'text' => __('Replace NULL with:'));    $plugin_list['latex']['options'][]        = array('type' => 'end_group');} else {    /**     * Escapes some special characters for use in TeX/LaTeX     *     * @param string $string the string to convert     *     * @return  string      the converted string with escape codes     *     * @access  private     */    function PMA_texEscape($string)    {        $escape = array('$', '%', '{', '}',  '&',  '#', '_', '^');        $cnt_escape = count($escape);        for ($k=0; $k < $cnt_escape; $k++) {            $string = str_replace($escape[$k], '\\' . $escape[$k], $string);        }        return $string;    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        $head  =  '% phpMyAdmin LaTeX Dump' . $crlf               .  '% version ' . PMA_VERSION . $crlf               .  '% http://www.phpmyadmin.net' . $crlf               .  '%' . $crlf               .  '% ' . __('Host') . ': ' . $cfg['Server']['host'];        if (! empty($cfg['Server']['port'])) {             $head .= ':' . $cfg['Server']['port'];        }        $head .= $crlf               .  '% ' . __('Generation Time') . ': ' . PMA_localisedDate() . $crlf               .  '% ' . __('Server version') . ': ' . PMA_MYSQL_STR_VERSION . $crlf               .  '% ' . __('PHP Version') . ': ' . phpversion() . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        global $crlf;        $head = '% ' . $crlf              . '% ' . __('Database') . ': ' . '\'' . $db . '\'' . $crlf              . '% ' . $crlf;        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in LaTeX table/sideways table environment     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = PMA_DBI_field_name($result, $i);        }        unset($i);        $buffer      = $crlf . '%' . $crlf . '% ' . __('Data') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{|';        for ($index = 0; $index < $columns_cnt; $index++) {            $buffer .= 'l|';        }        $buffer .= '} ' . $crlf ;        $buffer .= ' \\hline \\endhead \\hline \\endfoot \\hline ' . $crlf;        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_data_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_data_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        // show column names        if (isset($GLOBALS['latex_columns'])) {            $buffer = '\\hline ';            for ($i = 0; $i < $columns_cnt; $i++) {                $buffer .= '\\multicolumn{1}{|c|}{\\textbf{'                    . PMA_texEscape(stripslashes($columns[$i])) . '}} & ';            }            $buffer = substr($buffer, 0, -2) . '\\\\ \\hline \hline ';            if (! PMA_exportOutputHandler($buffer . ' \\endfirsthead ' . $crlf)) {                return false;            }            if (isset($GLOBALS['latex_caption'])) {                if (! PMA_exportOutputHandler(                    '\\caption{'                    . PMA_expandUserString(                        $GLOBALS['latex_data_continued_caption'],                        'PMA_texEscape',                        array('table' => $table, 'database' => $db)                    )                    . '} \\\\ '                )) {                    return false;                }            }            if (! PMA_exportOutputHandler($buffer . '\\endhead \\endfoot' . $crlf)) {                return false;            }        } else {            if (! PMA_exportOutputHandler('\\\\ \hline')) {                return false;            }        }        // print the whole table        while ($record = PMA_DBI_fetch_assoc($result)) {            $buffer = '';            // print each row            for ($i = 0; $i < $columns_cnt; $i++) {                if (isset($record[$columns[$i]])                    && (! function_exists('is_null') || ! is_null($record[$columns[$i]]))                ) {                    $column_value = PMA_texEscape(stripslashes($record[$columns[$i]]));                } else {                    $column_value = $GLOBALS['latex_null'];                }                // last column ... no need for & character                if ($i == ($columns_cnt - 1)) {                    $buffer .= $column_value;                } else {                    $buffer .= $column_value . " & ";                }            }            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        }        $buffer = ' \\end{longtable}' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    } // end getTableLaTeX    /**     * Outputs table's structure     *     * @param string $db          database name     * @param string $table       table name     * @param string $crlf        the end of line sequence     * @param string $error_url   the url to go back in case of error     * @param bool   $do_relation whether to include relation comments     * @param bool   $do_comments whether to include the pmadb-style column comments     *                            as comments in the structure; this is deprecated     *                            but the parameter is left here because export.php     *                            calls PMA_exportStructure() also for other export     *                            types which use this parameter     * @param bool   $do_mime     whether to include mime comments     * @param bool   $dates       whether to include creation/update/check dates     * @param string $export_mode 'create_table', 'triggers', 'create_view', 'stand_in'     * @param string $export_type 'server', 'database', 'table'     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $do_relation = false, $do_comments = false, $do_mime = false, $dates = false, $export_mode, $export_type)    {        global $cfgRelation;        /**         * Get the unique keys in the table         */        $unique_keys = array();        $keys        = PMA_DBI_get_table_indexes($db, $table);        foreach ($keys as $key) {            if ($key['Non_unique'] == 0) {                $unique_keys[] = $key['Column_name'];            }        }        /**         * Gets fields properties         */        PMA_DBI_select_db($db);        // Check if we can use Relations        if ($do_relation && ! empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        /**         * Displays the table structure         */        $buffer      = $crlf . '%' . $crlf . '% ' . __('Structure') . ': ' . $table            . $crlf . '%' . $crlf . ' \\begin{longtable}{';        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $columns_cnt = 4;        $alignment = '|l|c|c|c|';        if ($do_relation && $have_rel) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_comments) {            $columns_cnt++;            $alignment .= 'l|';        }        if ($do_mime && $cfgRelation['mimework']) {            $columns_cnt++;            $alignment .='l|';        }        $buffer = $alignment . '} ' . $crlf ;        $header = ' \\hline ';        $header .= '\\multicolumn{1}{|c|}{\\textbf{' . __('Column')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Type')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Null')            . '}} & \\multicolumn{1}{|c|}{\\textbf{' . __('Default') . '}}';        if ($do_relation && $have_rel) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Links to') . '}}';        }        if ($do_comments) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{' . __('Comments') . '}}';            $comments = PMA_getComments($db, $table);        }        if ($do_mime && $cfgRelation['mimework']) {            $header .= ' & \\multicolumn{1}{|c|}{\\textbf{MIME}}';            $mime_map = PMA_getMIME($db, $table, true);        }        // Table caption for first page and label        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\label{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_label'],                    null,                    array('table' => $table, 'database' => $db)                )                . '} \\\\' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline' . $crlf . '\\endfirsthead' . $crlf;        // Table caption on next pages        if (isset($GLOBALS['latex_caption'])) {            $buffer .= ' \\caption{'                . PMA_expandUserString(                    $GLOBALS['latex_structure_continued_caption'],                    'PMA_texEscape',                    array('table' => $table, 'database' => $db)                )                . '} \\\\ ' . $crlf;        }        $buffer .= $header . ' \\\\ \\hline \\hline \\endhead \\endfoot ' . $crlf;        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        $fields = PMA_DBI_get_columns($db, $table);        foreach ($fields as $row) {            $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);            $type = $extracted_fieldspec['print_type'];            if (empty($type)) {                $type     = ' ';            }            if (! isset($row['Default'])) {                if ($row['Null'] != 'NO') {                    $row['Default'] = 'NULL';                }            }            $field_name = $row['Field'];            $local_buffer = $field_name . "\000" . $type . "\000"                . (($row['Null'] == '' || $row['Null'] == 'NO') ? __('No') : __('Yes'))                . "\000" . (isset($row['Default']) ? $row['Default'] : '');            if ($do_relation && $have_rel) {                $local_buffer .= "\000";                if (isset($res_rel[$field_name])) {                    $local_buffer .= $res_rel[$field_name]['foreign_table'] . ' ('                        . $res_rel[$field_name]['foreign_field'] . ')';                }            }            if ($do_comments && $cfgRelation['commwork']) {                $local_buffer .= "\000";                if (isset($comments[$field_name])) {                    $local_buffer .= $comments[$field_name];                }            }            if ($do_mime && $cfgRelation['mimework']) {                $local_buffer .= "\000";                if (isset($mime_map[$field_name])) {                    $local_buffer .= str_replace('_', '/', $mime_map[$field_name]['mimetype']);                }            }            $local_buffer = PMA_texEscape($local_buffer);            if ($row['Key']=='PRI') {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textit{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            if (in_array($field_name, $unique_keys)) {                $pos=strpos($local_buffer, "\000");                $local_buffer = '\\textbf{' . substr($local_buffer, 0, $pos) . '}' . substr($local_buffer, $pos);            }            $buffer = str_replace("\000", ' & ', $local_buffer);            $buffer .= ' \\\\ \\hline ' . $crlf;            if (! PMA_exportOutputHandler($buffer)) {                return false;            }        } // end while        $buffer = ' \\end{longtable}' . $crlf;        return PMA_exportOutputHandler($buffer);    } // end of the 'PMA_exportStructure' function} // end else?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build SQL dumps of tables * * @package PhpMyAdmin-Export * @subpackage SQL */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $hide_sql       = false;    $hide_structure = false;    if ($plugin_param['export_type'] == 'table' && !$plugin_param['single_table']) {        $hide_structure = true;        $hide_sql       = true;    }    if (!$hide_sql) {        $plugin_list['sql'] = array(            'text' => __('SQL'),            'extension' => 'sql',            'mime_type' => 'text/x-sql',            'options' => array());        $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'general_opts');        /* comments */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'bool',                'name' => 'include_comments',                'text' => __('Display comments <i>(includes info such as export timestamp, PHP version, and server version)</i>')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'header_comment',            'text' => __('Additional custom header comment (\n splits lines):')            );        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'dates',            'text' => __('Include a timestamp of when databases were created, last updated, and last checked')            );        if (!empty($GLOBALS['cfgRelation']['relation'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'relation',                'text' => __('Display foreign key relationships')                );        }        if (!empty($GLOBALS['cfgRelation']['mimework'])) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'mime',                'text' => __('Display MIME types')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end comments */        /* enclose in a transaction */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'use_transaction',            'text' => __('Enclose export in a transaction'),            'doc' => array('programs', 'mysqldump', 'option_mysqldump_single-transaction')            );        /* disable foreign key checks */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'disable_fk',            'text' => __('Disable foreign key checks'),            'doc' => array(                'manual_MySQL_Database_Administration',                'server-system-variables',                'sysvar_foreign_key_checks')            );        $plugin_list['sql']['options_text'] = __('Options');        /* compatibility maximization */        $compats = PMA_DBI_getCompatibilities();        if (count($compats) > 0) {            $values = array();            foreach ($compats as $val) {                $values[$val] = $val;            }            $plugin_list['sql']['options'][] = array(                'type' => 'select',                'name' => 'compatibility',                'text' => __('Database system or older MySQL server to maximize output compatibility with:'),                'values' => $values,                'doc' => array(                    'manual_MySQL_Database_Administration',                    'Server_SQL_mode')                );            unset($values);        }        /* server export options */        if ($plugin_param['export_type'] == 'server') {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_database',                'text' => sprintf(__('Add %s statement'), '<code>DROP DATABASE</code>')                );         }        /* what to dump (structure/data/both) */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Dump table')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'structure_or_data',            'values' => array(                'structure' => __('structure'),                'data' => __('data'),                'structure_and_data' => __('structure and data')            ));        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        $plugin_list['sql']['options'][] = array('type' => 'end_group');        /* begin Structure options */        if (!$hide_structure) {            $plugin_list['sql']['options'][] = array(                'type' => 'begin_group',                'name' => 'structure',                'text' => __('Object creation options'),                'force' => 'data'                );            /* begin SQL Statements */            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'message_only',                    'name' => 'add_statements',                    'text' => __('Add statements:')                ));            if ($plugin_param['export_type'] == 'table') {                if (PMA_Table::isView($GLOBALS['db'], $GLOBALS['table'])) {                    $drop_clause = '<code>DROP VIEW</code>';                } else {                    $drop_clause = '<code>DROP TABLE</code>';                }            } else {                if (PMA_DRIZZLE) {                    $drop_clause = '<code>DROP TABLE</code>';                } else {                    $drop_clause = '<code>DROP TABLE / VIEW / PROCEDURE / FUNCTION</code>';                    if (PMA_MYSQL_INT_VERSION > 50100) {                        $drop_clause .= '<code> / EVENT</code>';                    }                }            }            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'drop_table',                'text' => sprintf(__('Add %s statement'), $drop_clause)                );            // Drizzle doesn't support procedures and functions            if (!PMA_DRIZZLE) {                $plugin_list['sql']['options'][] = array(                    'type' => 'bool',                    'name' => 'procedure_function',                    'text' => sprintf(__('Add %s statement'), '<code>CREATE PROCEDURE / FUNCTION' . (PMA_MYSQL_INT_VERSION > 50100 ? ' / EVENT</code>' : '</code>'))                    );            }            /* begin CREATE TABLE statements*/            $plugin_list['sql']['options'][] = array(                'type' => 'begin_subgroup',                'subgroup_header' => array(                    'type' => 'bool',                    'name' => 'create_table_statements',                    'text' => __('<code>CREATE TABLE</code> options:')                ));            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'if_not_exists',                'text' => '<code>IF NOT EXISTS</code>'                );            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'auto_increment',                'text' => '<code>AUTO_INCREMENT</code>'                );            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end CREATE TABLE statements */            $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');            /* end SQL statements */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'backquotes',                'text' => __('Enclose table and column names with backquotes <i>(Protects column and table names formed with special characters or keywords)</i>')                );            $plugin_list['sql']['options'][] = array('type' => 'end_group');        }        /* end Structure options */        /* begin Data options */         $plugin_list['sql']['options'][] = array(            'type' => 'begin_group',            'name' => 'data',            'text' => __('Data dump options'),            'force' => 'structure'            );        /* begin SQL statements */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Instead of <code>INSERT</code> statements, use:')            ));        // Not supported in Drizzle        if (!PMA_DRIZZLE) {            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'delayed',                'text' => __('<code>INSERT DELAYED</code> statements'),                'doc' => array('manual_MySQL_Database_Administration', 'insert_delayed')                );        }        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'ignore',            'text' => __('<code>INSERT IGNORE</code> statements'),            'doc' => array('manual_MySQL_Database_Administration', 'insert')            );        $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* end SQL statements */        /* Function to use when dumping data */        $plugin_list['sql']['options'][] = array(            'type' => 'select',            'name' => 'type',            'text' => __('Function to use when dumping data:'),            'values' => array(                'INSERT' => 'INSERT',                'UPDATE' => 'UPDATE',                'REPLACE' => 'REPLACE'                )            );        /* Syntax to use when inserting data */        $plugin_list['sql']['options'][] = array(            'type' => 'begin_subgroup',            'subgroup_header' => array(                'type' => 'message_only',                'text' => __('Syntax to use when inserting data:')            ));        $plugin_list['sql']['options'][] = array(            'type' => 'radio',            'name' => 'insert_syntax',            'values' => array(                'complete' => __('include column names in every <code>INSERT</code> statement <br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B,col_C) VALUES (1,2,3)</code>'),                'extended' => __('insert multiple rows in every <code>INSERT</code> statement<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'both' => __('both of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name (col_A,col_B) VALUES (1,2,3), (4,5,6), (7,8,9)</code>'),                'none' => __('neither of the above<br /> &nbsp; &nbsp; &nbsp; Example: <code>INSERT INTO tbl_name VALUES (1,2,3)</code>')            ));          $plugin_list['sql']['options'][] = array('type' => 'end_subgroup');        /* Max length of query */        $plugin_list['sql']['options'][] = array(            'type' => 'text',            'name' => 'max_query_size',            'text' => __('Maximal length of created query')            );        /* Dump binary columns in hexadecimal */        $plugin_list['sql']['options'][] = array(            'type' => 'bool',            'name' => 'hex_for_blob',            'text' => __('Dump binary columns in hexadecimal notation <i>(for example, "abc" becomes 0x616263)</i>')            );        // Drizzle works only with UTC timezone        if (!PMA_DRIZZLE) {            /* Dump time in UTC */            $plugin_list['sql']['options'][] = array(                'type' => 'bool',                'name' => 'utc_time',                'text' => __('Dump TIMESTAMP columns in UTC <i>(enables TIMESTAMP columns to be dumped and reloaded between servers in different time zones)</i>')                );        }        $plugin_list['sql']['options'][] = array('type' => 'end_group');         /* end Data options */    }} else {    /**     * Avoids undefined variables, use NULL so isset() returns false     */    if (! isset($GLOBALS['sql_backquotes'])) {        $GLOBALS['sql_backquotes'] = null;    }    /**     * Exports routines (procedures and functions)     *     * @param string  $db     * @return  bool  Whether it succeeded     *     * @access  public     */    function PMA_exportRoutines($db) {        global $crlf;        $text = '';        $delimiter = '$$';        $procedure_names = PMA_DBI_get_procedures_or_functions($db, 'PROCEDURE');        $function_names = PMA_DBI_get_procedures_or_functions($db, 'FUNCTION');        if ($procedure_names || $function_names) {            $text .= $crlf                . 'DELIMITER ' . $delimiter . $crlf;        }        if ($procedure_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Procedures'))              . PMA_exportComment();            foreach ($procedure_names as $procedure_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP PROCEDURE IF EXISTS '                        . PMA_backquote($procedure_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'PROCEDURE', $procedure_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($function_names) {            $text .=                PMA_exportComment()              . PMA_exportComment(__('Functions'))              . PMA_exportComment();            foreach ($function_names as $function_name) {                if (! empty($GLOBALS['sql_drop_table'])) {                    $text .= 'DROP FUNCTION IF EXISTS '                        . PMA_backquote($function_name)                        . $delimiter . $crlf;                }                $text .= PMA_DBI_get_definition($db, 'FUNCTION', $function_name)                    . $delimiter . $crlf . $crlf;            }        }        if ($procedure_names || $function_names) {            $text .= 'DELIMITER ;' . $crlf;        }        if (! empty($text)) {            return PMA_exportOutputHandler($text);        } else {            return false;        }    }    /**     * Possibly outputs comment     *     * @param string  $text  Text of comment     * @return  string      The formatted comment     *     * @access  private     */    function PMA_exportComment($text = '')    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            // see http://dev.mysql.com/doc/refman/5.0/en/ansi-diff-comments.html            return '--' . (empty($text) ? '' : ' ') . $text . $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Possibly outputs CRLF     *     * @return  string  $crlf or nothing     *     * @access private     */    function PMA_possibleCRLF()    {        if (isset($GLOBALS['sql_include_comments']) && $GLOBALS['sql_include_comments']) {            return $GLOBALS['crlf'];        } else {            return '';        }    }    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $crlf;        global $mysql_charset_map;        $foot = '';        if (isset($GLOBALS['sql_disable_fk'])) {            $foot .=  'SET FOREIGN_KEY_CHECKS=1;' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $foot .=  'COMMIT;' . $crlf;        }        // restore connection settings        $charset_of_file = isset($GLOBALS['charset_of_file']) ? $GLOBALS['charset_of_file'] : '';        if (!empty($GLOBALS['asfile']) && isset($mysql_charset_map[$charset_of_file]) && !PMA_DRIZZLE) {            $foot .=  $crlf                    . '/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;' . $crlf                    . '/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;' . $crlf                    . '/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;' . $crlf;        }        /* Restore timezone */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            PMA_DBI_query('SET time_zone = "' . $GLOBALS['old_tz'] . '"');        }        return PMA_exportOutputHandler($foot);    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $crlf;        global $cfg;        global $mysql_charset_map;        if (isset($GLOBALS['sql_compatibility'])) {            $tmp_compat = $GLOBALS['sql_compatibility'];            if ($tmp_compat == 'NONE') {                $tmp_compat = '';            }            PMA_DBI_try_query('SET SQL_MODE="' . $tmp_compat . '"');            unset($tmp_compat);        }        $head  =  PMA_exportComment('phpMyAdmin SQL Dump')               .  PMA_exportComment('version ' . PMA_VERSION)               .  PMA_exportComment('http://www.phpmyadmin.net')               .  PMA_exportComment();        $host_string = __('Host') . ': ' .  $cfg['Server']['host'];        if (!empty($cfg['Server']['port'])) {            $host_string .= ':' . $cfg['Server']['port'];        }        $head .= PMA_exportComment($host_string);        $head .= PMA_exportComment(__('Generation Time')              . ': ' .  PMA_localisedDate())              .  PMA_exportComment(__('Server version') . ': ' . PMA_MYSQL_STR_VERSION)              .  PMA_exportComment(__('PHP Version') . ': ' . phpversion())              .  PMA_possibleCRLF();        if (isset($GLOBALS['sql_header_comment']) && !empty($GLOBALS['sql_header_comment'])) {            // '\n' is not a newline (like "\n" would be), it's the characters            // backslash and n, as explained on the export interface            $lines = explode('\n', $GLOBALS['sql_header_comment']);            $head .= PMA_exportComment();            foreach ($lines as $one_line) {                $head .= PMA_exportComment($one_line);            }            $head .= PMA_exportComment();        }        if (isset($GLOBALS['sql_disable_fk'])) {            $head .= 'SET FOREIGN_KEY_CHECKS=0;' . $crlf;        }        /* We want exported AUTO_INCREMENT columns to have still same value, do this only for recent MySQL exports */        if ((!isset($GLOBALS['sql_compatibility']) || $GLOBALS['sql_compatibility'] == 'NONE')                && !PMA_DRIZZLE) {            $head .= 'SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";' . $crlf;        }        if (isset($GLOBALS['sql_use_transaction'])) {            $head .= 'SET AUTOCOMMIT=0;' . $crlf                   . 'START TRANSACTION;' . $crlf;        }        /* Change timezone if we should export timestamps in UTC */        if (isset($GLOBALS['sql_utc_time']) && $GLOBALS['sql_utc_time']) {            $head .= 'SET time_zone = "+00:00";' . $crlf;            $GLOBALS['old_tz'] = PMA_DBI_fetch_value('SELECT @@session.time_zone');            PMA_DBI_query('SET time_zone = "+00:00"');        }        $head .= PMA_possibleCRLF();        if (! empty($GLOBALS['asfile']) && !PMA_DRIZZLE) {            // we are saving as file, therefore we provide charset information            // so that a utility like the mysql client can interpret            // the file correctly            if (isset($GLOBALS['charset_of_file']) && isset($mysql_charset_map[$GLOBALS['charset_of_file']])) {                // we got a charset from the export dialog                $set_names = $mysql_charset_map[$GLOBALS['charset_of_file']];            } else {                // by default we use the connection charset                $set_names = $mysql_charset_map['utf-8'];            }            $head .=  $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;' . $crlf                   . '/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;' . $crlf                   . '/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;' . $crlf                   . '/*!40101 SET NAMES ' . $set_names . ' */;' . $crlf . $crlf;        }        return PMA_exportOutputHandler($head);    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        global $crlf;        if (isset($GLOBALS['sql_drop_database'])) {            if (!PMA_exportOutputHandler('DROP DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db) . ';' . $crlf)) {                return false;            }        }        $create_query = 'CREATE DATABASE ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : $db);        $collation = PMA_getDbCollation($db);        if (PMA_DRIZZLE) {            $create_query .= ' COLLATE ' . $collation;        } else {            if (strpos($collation, '_')) {                $create_query .= ' DEFAULT CHARACTER SET ' . substr($collation, 0, strpos($collation, '_')) . ' COLLATE ' . $collation;            } else {                $create_query .= ' DEFAULT CHARACTER SET ' . $collation;            }        }        $create_query .= ';' . $crlf;        if (!PMA_exportOutputHandler($create_query)) {            return false;        }        if (isset($GLOBALS['sql_backquotes'])                && ((isset($GLOBALS['sql_compatibility']) && $GLOBALS['sql_compatibility'] == 'NONE') || PMA_DRIZZLE)) {            $result = PMA_exportOutputHandler('USE ' . PMA_backquote($db) . ';' . $crlf);        } else {            $result = PMA_exportOutputHandler('USE ' . $db . ';' . $crlf);        }        return $result;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        $head = PMA_exportComment()              . PMA_exportComment(__('Database') . ': ' . (isset($GLOBALS['sql_backquotes']) ? PMA_backquote($db) : '\'' . $db . '\''))              . PMA_exportComment();        return PMA_exportOutputHandler($head);    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        global $crlf;        $result = true;        if (isset($GLOBALS['sql_constraints'])) {            $result = PMA_exportOutputHandler($GLOBALS['sql_constraints']);            unset($GLOBALS['sql_constraints']);        }        if (($GLOBALS['sql_structure_or_data'] == 'structure' || $GLOBALS['sql_structure_or_data'] == 'structure_and_data') && isset($GLOBALS['sql_procedure_function'])) {            $text = '';            $delimiter = '$$';            if (PMA_MYSQL_INT_VERSION > 50100) {                $event_names = PMA_DBI_fetch_result('SELECT EVENT_NAME FROM information_schema.EVENTS WHERE EVENT_SCHEMA= \'' . PMA_sqlAddSlashes($db, true) . '\';');            } else {                $event_names = array();            }            if ($event_names) {                $text .= $crlf                  . 'DELIMITER ' . $delimiter . $crlf;                $text .=                    PMA_exportComment()                  . PMA_exportComment(__('Events'))                  . PMA_exportComment();                foreach ($event_names as $event_name) {                    if (! empty($GLOBALS['sql_drop_table'])) {                $text .= 'DROP EVENT ' . PMA_backquote($event_name) . $delimiter . $crlf;                    }                    $text .= PMA_DBI_get_definition($db, 'EVENT', $event_name) . $delimiter . $crlf . $crlf;                }                $text .= 'DELIMITER ;' . $crlf;            }            if (! empty($text)) {                $result = PMA_exportOutputHandler($text);            }        }        return $result;    }    /**     * Returns a stand-in CREATE definition to resolve view dependencies     *     * @param string  $db    the database name     * @param string  $view  the view name     * @param string  $crlf  the end of line sequence     * @return  string         resulting definition     *     * @access  public     */    function PMA_getTableDefStandIn($db, $view, $crlf) {        $create_query = '';        if (! empty($GLOBALS['sql_drop_table'])) {            $create_query .= 'DROP VIEW IF EXISTS ' . PMA_backquote($view) . ';' . $crlf;        }        $create_query .= 'CREATE TABLE ';        if (isset($GLOBALS['sql_if_not_exists']) && $GLOBALS['sql_if_not_exists']) {            $create_query .= 'IF NOT EXISTS ';        }        $create_query .= PMA_backquote($view) . ' (' . $crlf;        $tmp = array();        $columns = PMA_DBI_get_columns_full($db, $view);        foreach ($columns as $column_name => $definition) {            $tmp[] = PMA_backquote($column_name) . ' ' . $definition['Type'] . $crlf;        }        $create_query .= implode(',', $tmp) . ');';        return($create_query);    }    /**     * Returns $table's CREATE definition     *     * @param string  $db             the database name     * @param string  $table          the table name     * @param string  $crlf           the end of line sequence     * @param string  $error_url      the url to go back in case of error     * @param bool    $show_dates     whether to include creation/update/check dates     * @param bool    $add_semicolon  whether to add semicolon and end-of-line at the end     * @param bool    $view           whether we're handling a view     * @return  string   resulting schema     *     * @access  public     */    function PMA_getTableDef($db, $table, $crlf, $error_url, $show_dates = false, $add_semicolon = true, $view = false)    {        global $sql_drop_table;        global $sql_backquotes;        global $sql_constraints;        global $sql_constraints_query; // just the text of the query        global $sql_drop_foreign_keys;        $schema_create = '';        $auto_increment = '';        $new_crlf = $crlf;        // need to use PMA_DBI_QUERY_STORE with PMA_DBI_num_rows() in mysqli        $result = PMA_DBI_query('SHOW TABLE STATUS FROM ' . PMA_backquote($db) . ' LIKE \'' . PMA_sqlAddSlashes($table, true) . '\'', null, PMA_DBI_QUERY_STORE);        if ($result != false) {            if (PMA_DBI_num_rows($result) > 0) {                $tmpres        = PMA_DBI_fetch_assoc($result);                if (PMA_DRIZZLE && $show_dates) {                    // Drizzle doesn't give Create_time and Update_time in SHOW TABLE STATUS, add it                    $sql ="SELECT                            TABLE_CREATION_TIME AS Create_time,                            TABLE_UPDATE_TIME AS Update_time                        FROM data_dictionary.TABLES                        WHERE TABLE_SCHEMA = '" . PMA_sqlAddSlashes($db) . "'                          AND TABLE_NAME = '" . PMA_sqlAddSlashes($table) . "'";                    $tmpres = array_merge(PMA_DBI_fetch_single_row($sql), $tmpres);                }                // Here we optionally add the AUTO_INCREMENT next value,                // but starting with MySQL 5.0.24, the clause is already included                // in SHOW CREATE TABLE so we'll remove it below                // It's required for Drizzle because SHOW CREATE TABLE uses                // the value from table's creation time                if (isset($GLOBALS['sql_auto_increment']) && !empty($tmpres['Auto_increment'])) {                    $auto_increment .= ' AUTO_INCREMENT=' . $tmpres['Auto_increment'] . ' ';                }                if ($show_dates && isset($tmpres['Create_time']) && !empty($tmpres['Create_time'])) {                    $schema_create .= PMA_exportComment(__('Creation') . ': ' . PMA_localisedDate(strtotime($tmpres['Create_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Update_time']) && !empty($tmpres['Update_time'])) {                    $schema_create .= PMA_exportComment(__('Last update') . ': ' . PMA_localisedDate(strtotime($tmpres['Update_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }                if ($show_dates && isset($tmpres['Check_time']) && !empty($tmpres['Check_time'])) {                    $schema_create .= PMA_exportComment(__('Last check') . ': ' . PMA_localisedDate(strtotime($tmpres['Check_time'])));                    $new_crlf = PMA_exportComment() . $crlf;                }            }            PMA_DBI_free_result($result);        }        $schema_create .= $new_crlf;        // no need to generate a DROP VIEW here, it was done earlier        if (! empty($sql_drop_table) && ! PMA_Table::isView($db, $table)) {            $schema_create .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table, $sql_backquotes) . ';' . $crlf;        }        // Complete table dump,        // Whether to quote table and column names or not        // Drizzle always quotes names        if (!PMA_DRIZZLE) {            if ($sql_backquotes) {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 1');            } else {                PMA_DBI_query('SET SQL_QUOTE_SHOW_CREATE = 0');            }        }        // I don't see the reason why this unbuffered query could cause problems,        // because SHOW CREATE TABLE returns only one row, and we free the        // results below. Nonetheless, we got 2 user reports about this        // (see bug 1562533) so I remove the unbuffered mode.        //$result = PMA_DBI_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), null, PMA_DBI_QUERY_UNBUFFERED);        //        // Note: SHOW CREATE TABLE, at least in MySQL 5.1.23, does not        // produce a displayable result for the default value of a BIT        // column, nor does the mysqldump command. See MySQL bug 35796        $result = PMA_DBI_try_query('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table));        // an error can happen, for example the table is crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportComment(__('in use') . '(' . $tmp_error . ')');        }        if ($result != false && ($row = PMA_DBI_fetch_row($result))) {            $create_query = $row[1];            unset($row);            // Convert end of line chars to one that we want (note that MySQL doesn't return query it will accept in all cases)            if (strpos($create_query, "(\r\n ")) {                $create_query = str_replace("\r\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\n ")) {                $create_query = str_replace("\n", $crlf, $create_query);            } elseif (strpos($create_query, "(\r ")) {                $create_query = str_replace("\r", $crlf, $create_query);            }            /*             * Drop database name from VIEW creation.             *             * This is a bit tricky, but we need to issue SHOW CREATE TABLE with             * database name, but we don't want name to show up in CREATE VIEW             * statement.             */            if ($view) {                $create_query = preg_replace('/' . PMA_backquote($db) . '\./', '', $create_query);            }            // Should we use IF NOT EXISTS?            if (isset($GLOBALS['sql_if_not_exists'])) {                $create_query     = preg_replace('/^CREATE TABLE/', 'CREATE TABLE IF NOT EXISTS', $create_query);            }            // Drizzle (checked on 2011.03.13) returns ROW_FORMAT surrounded with quotes, which is not accepted by parser            if (PMA_DRIZZLE) {                $create_query = preg_replace('/ROW_FORMAT=\'(\S+)\'/', 'ROW_FORMAT=$1', $create_query);            }            // are there any constraints to cut out?            if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $create_query)) {                // Split the query into lines, so we can easily handle it. We know lines are separated by $crlf (done few lines above).                $sql_lines = explode($crlf, $create_query);                $sql_count = count($sql_lines);                // lets find first line with constraints                for ($i = 0; $i < $sql_count; $i++) {                    if (preg_match('@^[\s]*(CONSTRAINT|FOREIGN[\s]+KEY)@', $sql_lines[$i])) {                        break;                    }                }                // If we really found a constraint                if ($i != $sql_count) {                    // remove , from the end of create statement                    $sql_lines[$i - 1] = preg_replace('@,$@', '', $sql_lines[$i - 1]);                    // prepare variable for constraints                    if (!isset($sql_constraints)) {                        if (isset($GLOBALS['no_constraints_comments'])) {                            $sql_constraints = '';                        } else {                            $sql_constraints = $crlf                                             . PMA_exportComment()                                             . PMA_exportComment(__('Constraints for dumped tables'))                                             . PMA_exportComment();                        }                    }                    // comments for current table                    if (!isset($GLOBALS['no_constraints_comments'])) {                        $sql_constraints .= $crlf                                          . PMA_exportComment()                                          . PMA_exportComment(__('Constraints for table') . ' ' . PMA_backquote($table))                                          . PMA_exportComment();                    }                    // let's do the work                    $sql_constraints_query .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_constraints .= 'ALTER TABLE ' . PMA_backquote($table) . $crlf;                    $sql_drop_foreign_keys .= 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table) . $crlf;                    $first = true;                    for ($j = $i; $j < $sql_count; $j++) {                        if (preg_match('@CONSTRAINT|FOREIGN[\s]+KEY@', $sql_lines[$j])) {                            if (!$first) {                                $sql_constraints .= $crlf;                            }                            if (strpos($sql_lines[$j], 'CONSTRAINT') === false) {                                $tmp_str = preg_replace('/(FOREIGN[\s]+KEY)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                            } else {                                $tmp_str = preg_replace('/(CONSTRAINT)/', 'ADD \1', $sql_lines[$j]);                                $sql_constraints_query .= $tmp_str;                                $sql_constraints .= $tmp_str;                                preg_match('/(CONSTRAINT)([\s])([\S]*)([\s])/', $sql_lines[$j], $matches);                                if (! $first) {                                    $sql_drop_foreign_keys .= ', ';                                }                                $sql_drop_foreign_keys .= 'DROP FOREIGN KEY ' . $matches[3];                            }                            $first = false;                        } else {                            break;                        }                    }                    $sql_constraints .= ';' . $crlf;                    $sql_constraints_query .= ';';                    $create_query = implode($crlf, array_slice($sql_lines, 0, $i)) . $crlf . implode($crlf, array_slice($sql_lines, $j, $sql_count - 1));                    unset($sql_lines);                }            }            $schema_create .= $create_query;        }        // remove a possible "AUTO_INCREMENT = value" clause        // that could be there starting with MySQL 5.0.24        // in Drizzle it's useless as it contains the value given at table creation time        $schema_create = preg_replace('/AUTO_INCREMENT\s*=\s*([0-9])+/', '', $schema_create);        $schema_create .= $auto_increment;        PMA_DBI_free_result($result);        return $schema_create . ($add_semicolon ? ';' . $crlf : '');    } // end of the 'PMA_getTableDef()' function    /**     * Returns $table's comments, relations etc.     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         end of line sequence     * @param bool    $do_relation  whether to include relation comments     * @param bool    $do_mime      whether to include mime comments     * @return  string   resulting comments     *     * @access  private     */    function PMA_getTableComments($db, $table, $crlf, $do_relation = false, $do_mime = false)    {        global $cfgRelation;        global $sql_backquotes;        global $sql_constraints;        $schema_create = '';        // Check if we can use Relations        if ($do_relation && !empty($cfgRelation['relation'])) {            // Find which tables are related with the current one and write it in            // an array            $res_rel = PMA_getForeigners($db, $table);            if ($res_rel && count($res_rel) > 0) {                $have_rel = true;            } else {                $have_rel = false;            }        } else {               $have_rel = false;        } // end if        if ($do_mime && $cfgRelation['mimework']) {            if (!($mime_map = PMA_getMIME($db, $table, true))) {                unset($mime_map);            }        }        if (isset($mime_map) && count($mime_map) > 0) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('MIME TYPES FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            @reset($mime_map);            foreach ($mime_map AS $mime_field => $mime) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($mime_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($mime['mimetype'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        if ($have_rel) {            $schema_create .= PMA_possibleCRLF()                           . PMA_exportComment()                           . PMA_exportComment(__('RELATIONS FOR TABLE'). ' ' . PMA_backquote($table, $sql_backquotes) . ':');            foreach ($res_rel AS $rel_field => $rel) {                $schema_create .= PMA_exportComment('  ' . PMA_backquote($rel_field, $sql_backquotes))                                . PMA_exportComment('      ' . PMA_backquote($rel['foreign_table'], $sql_backquotes)                                . ' -> ' . PMA_backquote($rel['foreign_field'], $sql_backquotes));            }            $schema_create .= PMA_exportComment();        }        return $schema_create;    } // end of the 'PMA_getTableComments()' function    /**     * Outputs table's structure     *     * @param string  $db           database name     * @param string  $table        table name     * @param string  $crlf         the end of line sequence     * @param string  $error_url    the url to go back in case of error     * @param bool    $relation     whether to include relation comments     * @param bool    $comments     whether to include the pmadb-style column comments     *                                as comments in the structure; this is deprecated     *                                but the parameter is left here because export.php     *                                calls PMA_exportStructure() also for other export     *                                types which use this parameter     * @param bool    $mime         whether to include mime comments     * @param bool    $dates        whether to include creation/update/check dates     * @param string  $export_mode  'create_table', 'triggers', 'create_view', 'stand_in'     * @param string  $export_type  'server', 'database', 'table'     * @return  bool      Whether it succeeded     *     * @access  public     */    function PMA_exportStructure($db, $table, $crlf, $error_url, $relation = false, $comments = false, $mime = false, $dates = false, $export_mode, $export_type)    {        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        $dump = PMA_possibleCRLF()              . PMA_exportComment(str_repeat('-', 56))              . PMA_possibleCRLF()              . PMA_exportComment();        switch($export_mode) {            case 'create_table':                $dump .= PMA_exportComment(__('Table structure for table') . ' ' . $formatted_table_name);                $dump .= PMA_exportComment();                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates);                $dump .= PMA_getTableComments($db, $table, $crlf, $relation, $mime);                break;            case 'triggers':                $dump = '';                $triggers = PMA_DBI_get_triggers($db, $table);                if ($triggers) {                    $dump .=  PMA_possibleCRLF()                            . PMA_exportComment()                            . PMA_exportComment(__('Triggers') . ' ' . $formatted_table_name)                            . PMA_exportComment();                    $delimiter = '//';                    foreach ($triggers as $trigger) {                        $dump .= $trigger['drop'] . ';' . $crlf;                        $dump .= 'DELIMITER ' . $delimiter . $crlf;                        $dump .= $trigger['create'];                        $dump .= 'DELIMITER ;' . $crlf;                    }                }                break;            case 'create_view':                $dump .= PMA_exportComment(__('Structure for view') . ' ' . $formatted_table_name)                       . PMA_exportComment();                // delete the stand-in table previously created (if any)                if ($export_type != 'table') {                    $dump .= 'DROP TABLE IF EXISTS ' . PMA_backquote($table) . ';' . $crlf;                }                $dump .= PMA_getTableDef($db, $table, $crlf, $error_url, $dates, true, true);                break;            case 'stand_in':                $dump .=  PMA_exportComment(__('Stand-in structure for view') . ' ' . $formatted_table_name)                        . PMA_exportComment();                // export a stand-in definition to resolve view dependencies                $dump .= PMA_getTableDefStandIn($db, $table, $crlf);        } // end switch        // this one is built by PMA_getTableDef() to use in table copy/move        // but not in the case of export        unset($GLOBALS['sql_constraints_query']);        return PMA_exportOutputHandler($dump);    }    /**     * Outputs the content of a table in SQL format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $sql_backquotes;        global $current_row;        $formatted_table_name = (isset($GLOBALS['sql_backquotes']))                              ? PMA_backquote($table)                              : '\'' . $table . '\'';        // Do not export data for a VIEW        // (For a VIEW, this is called only when exporting a single VIEW)        if (PMA_Table::isView($db, $table)) {            $head = PMA_possibleCRLF()              . PMA_exportComment()              . PMA_exportComment('VIEW ' . ' ' . $formatted_table_name)              . PMA_exportComment(__('Data') . ': ' . __('None'))              . PMA_exportComment()              . PMA_possibleCRLF();            if (! PMA_exportOutputHandler($head)) {                return false;            }            return true;        }        // analyze the query to get the true column names, not the aliases        // (this fixes an undefined index, also if Complete inserts        //  are used, we did not get the true column name in case of aliases)        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($sql_query));        $result = PMA_DBI_try_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        // a possible error: the table has crashed        $tmp_error = PMA_DBI_getError();        if ($tmp_error) {            return PMA_exportOutputHandler(PMA_exportComment(__('Error reading data:') . ' (' . $tmp_error . ')'));        }        if ($result != false) {            $fields_cnt = PMA_DBI_num_fields($result);            // Get field information            $fields_meta = PMA_DBI_get_fields_meta($result);            $field_flags = array();            for ($j = 0; $j < $fields_cnt; $j++) {                $field_flags[$j] = PMA_DBI_field_flags($result, $j);            }            for ($j = 0; $j < $fields_cnt; $j++) {                if (isset($analyzed_sql[0]['select_expr'][$j]['column'])) {                    $field_set[$j] = PMA_backquote($analyzed_sql[0]['select_expr'][$j]['column'], $sql_backquotes);                } else {                    $field_set[$j] = PMA_backquote($fields_meta[$j]->name, $sql_backquotes);                }            }            if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                // update                $schema_insert  = 'UPDATE ';                if (isset($GLOBALS['sql_ignore'])) {                    $schema_insert .= 'IGNORE ';                }                // avoid EOL blank                $schema_insert .= PMA_backquote($table, $sql_backquotes) . ' SET';            } else {                // insert or replace                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'REPLACE') {                    $sql_command = 'REPLACE';                } else {                    $sql_command = 'INSERT';                }                // delayed inserts?                if (isset($GLOBALS['sql_delayed'])) {                    $insert_delayed = ' DELAYED';                } else {                    $insert_delayed = '';                }                // insert ignore?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'INSERT' && isset($GLOBALS['sql_ignore'])) {                    $insert_delayed .= ' IGNORE';                }                // scheme for inserting fields                if ($GLOBALS['sql_insert_syntax'] == 'complete' || $GLOBALS['sql_insert_syntax'] == 'both') {                    $fields        = implode(', ', $field_set);                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                // avoid EOL blank                                   . ' (' . $fields . ') VALUES';                } else {                    $schema_insert = $sql_command . $insert_delayed .' INTO ' . PMA_backquote($table, $sql_backquotes)                                   . ' VALUES';                }            }            $search      = array("\x00", "\x0a", "\x0d", "\x1a"); //\x08\\x09, not required            $replace     = array('\0', '\n', '\r', '\Z');            $current_row = 0;            $query_size  = 0;            if (($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') && (!isset($GLOBALS['sql_type']) || $GLOBALS['sql_type'] != 'UPDATE')) {                $separator    = ',';                $schema_insert .= $crlf;            } else {                $separator    = ';';            }            while ($row = PMA_DBI_fetch_row($result)) {                if ($current_row == 0) {                    $head = PMA_possibleCRLF()                          . PMA_exportComment()                          . PMA_exportComment(__('Dumping data for table') . ' ' . $formatted_table_name)                          . PMA_exportComment()                          . $crlf;                    if (! PMA_exportOutputHandler($head)) {                        return false;                    }                }                $current_row++;                for ($j = 0; $j < $fields_cnt; $j++) {                    // NULL                    if (!isset($row[$j]) || is_null($row[$j])) {                        $values[] = 'NULL';                    // a number                    // timestamp is numeric on some MySQL 4.1, BLOBs are sometimes numeric                    } elseif ($fields_meta[$j]->numeric && $fields_meta[$j]->type != 'timestamp'                            && ! $fields_meta[$j]->blob) {                        $values[] = $row[$j];                    // a true BLOB                    // - mysqldump only generates hex data when the --hex-blob                    //   option is used, for fields having the binary attribute                    //   no hex is generated                    // - a TEXT field returns type blob but a real blob                    //   returns also the 'binary' flag                    } elseif (stristr($field_flags[$j], 'BINARY')                            && $fields_meta[$j]->blob                            && isset($GLOBALS['sql_hex_for_blob'])) {                        // empty blobs need to be different, but '0' is also empty :-(                        if (empty($row[$j]) && $row[$j] != '0') {                            $values[] = '\'\'';                        } else {                            $values[] = '0x' . bin2hex($row[$j]);                        }                    // detection of 'bit' works only on mysqli extension                    } elseif ($fields_meta[$j]->type == 'bit') {                        $values[] = "b'" . PMA_sqlAddSlashes(PMA_printable_bit_value($row[$j], $fields_meta[$j]->length)) . "'";                    // something else -> treat as a string                    } else {                        $values[] = '\'' . str_replace($search, $replace, PMA_sqlAddSlashes($row[$j])) . '\'';                    } // end if                } // end for                // should we make update?                if (isset($GLOBALS['sql_type']) && $GLOBALS['sql_type'] == 'UPDATE') {                    $insert_line = $schema_insert;                    for ($i = 0; $i < $fields_cnt; $i++) {                        if (0 == $i) {                            $insert_line .= ' ';                        }                        if ($i > 0) {                            // avoid EOL blank                            $insert_line .= ',';                        }                        $insert_line .= $field_set[$i] . ' = ' . $values[$i];                    }                    list($tmp_unique_condition, $tmp_clause_is_unique) = PMA_getUniqueCondition($result, $fields_cnt, $fields_meta, $row);                    $insert_line .= ' WHERE ' . $tmp_unique_condition;                    unset($tmp_unique_condition, $tmp_clause_is_unique);                } else {                    // Extended inserts case                    if ($GLOBALS['sql_insert_syntax'] == 'extended' || $GLOBALS['sql_insert_syntax'] == 'both') {                        if ($current_row == 1) {                            $insert_line  = $schema_insert . '(' . implode(', ', $values) . ')';                        } else {                            $insert_line  = '(' . implode(', ', $values) . ')';                            if (isset($GLOBALS['sql_max_query_size']) && $GLOBALS['sql_max_query_size'] > 0 && $query_size + strlen($insert_line) > $GLOBALS['sql_max_query_size']) {                                if (!PMA_exportOutputHandler(';' . $crlf)) {                                    return false;                                }                                $query_size = 0;                                $current_row = 1;                                $insert_line = $schema_insert . $insert_line;                            }                        }                        $query_size += strlen($insert_line);                    }                    // Other inserts case                    else {                        $insert_line = $schema_insert . '(' . implode(', ', $values) . ')';                    }                }                unset($values);                if (!PMA_exportOutputHandler(($current_row == 1 ? '' : $separator . $crlf) . $insert_line)) {                    return false;                }            } // end while            if ($current_row > 0) {                if (!PMA_exportOutputHandler(';' . $crlf)) {                    return false;                }            }        } // end if ($result != false)        PMA_DBI_free_result($result);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * phpMyAdmin Language Loading File * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Returns language name * * @param string $tmplang * @return string */function PMA_langName($tmplang){    $lang_name = ucfirst(substr(strrchr($tmplang[0], '|'), 1));    // Include native name if non empty    if (!empty($tmplang[2])) {        $lang_name = $tmplang[2] . ' - ' . $lang_name;    }    return $lang_name;}/** * tries to find the language to use * * @return  bool    success if valid lang is found, otherwise false */function PMA_langCheck(){    // check forced language    if (! empty($GLOBALS['cfg']['Lang'])) {        if (PMA_langSet($GLOBALS['cfg']['Lang'])) {            return true;        } else {            $GLOBALS['lang_failed_cfg'] = $GLOBALS['cfg']['Lang'];        }    }    // Don't use REQUEST in following code as it might be confused by cookies with same name    // check user requested language (POST)    if (! empty($_POST['lang'])) {        if (PMA_langSet($_POST['lang'])) {            return true;        } elseif (!is_string($_POST['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_POST['lang'];        }    }    // check user requested language (GET)    if (! empty($_GET['lang'])) {        if (PMA_langSet($_GET['lang'])) {            return true;        } elseif (!is_string($_GET['lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_request'] = 'Yes';        } else {            $GLOBALS['lang_failed_request'] = $_GET['lang'];        }    }    // check previous set language    if (! empty($_COOKIE['pma_lang'])) {        if (PMA_langSet($_COOKIE['pma_lang'])) {            return true;        } elseif (!is_string($_COOKIE['pma_lang'])) {            /* Faked request, don't care on localisation */            $GLOBALS['lang_failed_cookie'] = 'Yes';        } else {            $GLOBALS['lang_failed_cookie'] = $_COOKIE['pma_lang'];        }    }    // try to findout user's language by checking its HTTP_ACCEPT_LANGUAGE variable    if (PMA_getenv('HTTP_ACCEPT_LANGUAGE')) {        foreach (explode(',', PMA_getenv('HTTP_ACCEPT_LANGUAGE')) as $lang) {            if (PMA_langDetect($lang, 1)) {                return true;            }        }    }    // try to findout user's language by checking its HTTP_USER_AGENT variable    if (PMA_langDetect(PMA_getenv('HTTP_USER_AGENT'), 2)) {        return true;    }    // Didn't catch any valid lang : we use the default settings    if (PMA_langSet($GLOBALS['cfg']['DefaultLang'])) {        return true;    }    return false;}/** * checks given lang and sets it if valid * returns true on success, otherwise flase * * @param string  $lang   language to set * @return  bool    success */function PMA_langSet(&$lang){    /* Partial backward compatibility with 3.3 and older branches */    $lang = str_replace('-utf-8', '', $lang);    if (!is_string($lang) || empty($lang) || empty($GLOBALS['available_languages'][$lang])) {        return false;    }    $GLOBALS['lang'] = $lang;    return true;}/** * Analyzes some PHP environment variables to find the most probable language * that should be used * * @param string   string to analyze * @param integer  type of the PHP environment variable which value is $str * * @return  bool    true on success, otherwise false * * * @access  private */function PMA_langDetect($str, $envType){    if (empty($str)) {        return false;    }    if (empty($GLOBALS['available_languages'])) {        return false;    }    foreach ($GLOBALS['available_languages'] as $lang => $value) {        // $envType =  1 for the 'HTTP_ACCEPT_LANGUAGE' environment variable,        //             2 for the 'HTTP_USER_AGENT' one        $expr = $value[0];        if (strpos($expr, '[-_]') === false) {            $expr = str_replace('|', '([-_][[:alpha:]]{2,3})?|', $expr);        }        if (($envType == 1 && preg_match('/^(' . addcslashes($expr, '/') . ')(;q=[0-9]\\.[0-9])?$/i', $str))            || ($envType == 2 && preg_match('/(\(|\[|;[[:space:]])(' . addcslashes($expr, '/') . ')(;|\]|\))/i', $str))) {            if (PMA_langSet($lang)) {                return true;            }        }    }    return false;} // end of the 'PMA_langDetect()' function/** * All the supported languages have to be listed in the array below. * 1. The key must be the "official" ISO 639 language code and, if required, *    the dialect code. It can also contain some information about the *    charset (see the Russian case). * 2. The first of the values associated to the key is used in a regular *    expression to find some keywords corresponding to the language inside two *    environment variables. *    These values contain: *    - the "official" ISO language code and, if required, the dialect code *      too ('bu' for Bulgarian, 'fr([-_][[:alpha:]]{2})?' for all French *      dialects, 'zh[-_]tw' for Chinese traditional...), the dialect has to *      be specified first; *    - the '|' character (it means 'OR'); *    - the full language name. * 3. The second value associated to the key is the language code as defined by *    the RFC1766. * 4. The third value is its native name in html entities or UTF-8. * * Beware that the sorting order (first values associated to keys by * alphabetical reverse order in the array) is important: 'zh-tw' (chinese * traditional) must be detected before 'zh' (chinese simplified) for * example. * * @param string $lang * @return array */function PMA_langDetails($lang){    switch ($lang) {    case 'af':        return array('af|afrikaans', 'af', '');    case 'ar':        return array('ar|arabic', 'ar', '&#1575;&#1604;&#1593;&#1585;&#1576;&#1610;&#1577;');    case 'az':        return array('az|azerbaijani', 'az', 'Az&#601;rbaycanca');    case 'bn':        return array('bn|bangla', 'bn', '');    case 'be':        return array('be|belarusian', 'be', '&#1041;&#1077;&#1083;&#1072;&#1088;&#1091;&#1089;&#1082;&#1072;&#1103;');    case 'be@latin':        return array('be[-_]lat|belarusian latin', 'be-lat', 'Bie&#0322;aruskaja');    case 'bg':        return array('bg|bulgarian', 'bg', '&#1041;&#1098;&#1083;&#1075;&#1072;&#1088;&#1089;&#1082;&#1080;');    case 'bs':        return array('bs|bosnian', 'bs', 'Bosanski');    case 'br':        return array('br|breton', 'br', 'Brezhoneg');    case 'ca':        return array('ca|catalan', 'ca', 'Catal&agrave;');    case 'cs':        return array('cs|czech', 'cs', 'etina');    case 'cy':        return array('cy|welsh', 'cy', 'Cymraeg');    case 'da':        return array('da|danish', 'da', 'Dansk');    case 'de':        return array('de|german', 'de', 'Deutsch');    case 'el':        return array('el|greek', 'el', '&Epsilon;&lambda;&lambda;&eta;&nu;&iota;&kappa;&#940;');    case 'en':        return array('en|english', 'en', '');    case 'en_GB':        return array('en[_-]gb|english (United Kingdom)', 'en-gb', '');    case 'es':        return array('es|spanish', 'es', 'Espa&ntilde;ol');    case 'et':        return array('et|estonian', 'et', 'Eesti');    case 'eu':        return array('eu|basque', 'eu', 'Euskara');    case 'fa':        return array('fa|persian', 'fa', '&#1601;&#1575;&#1585;&#1587;&#1740;');    case 'fi':        return array('fi|finnish', 'fi', 'Suomi');    case 'fr':        return array('fr|french', 'fr', 'Fran&ccedil;ais');    case 'gl':        return array('gl|galician', 'gl', 'Galego');    case 'he':        return array('he|hebrew', 'he', '&#1506;&#1489;&#1512;&#1497;&#1514;');    case 'hi':        return array('hi|hindi', 'hi', '&#2361;&#2367;&#2344;&#2381;&#2342;&#2368;');    case 'hr':        return array('hr|croatian', 'hr', 'Hrvatski');    case 'hu':        return array('hu|hungarian', 'hu', 'Magyar');    case 'id':        return array('id|indonesian', 'id', 'Bahasa Indonesia');    case 'it':        return array('it|italian', 'it', 'Italiano');    case 'ja':        return array('ja|japanese', 'ja', '&#26085;&#26412;&#35486;');    case 'ko':        return array('ko|korean', 'ko', '&#54620;&#44397;&#50612;');    case 'ka':        return array('ka|georgian', 'ka', '&#4325;&#4304;&#4320;&#4311;&#4323;&#4314;&#4312;');    case 'lt':        return array('lt|lithuanian', 'lt', 'Lietuvi&#371;');    case 'lv':        return array('lv|latvian', 'lv', 'Latvie&scaron;u');    case 'mk':        return array('mk|macedonian', 'mk', 'Macedonian');    case 'mn':        return array('mn|mongolian', 'mn', '&#1052;&#1086;&#1085;&#1075;&#1086;&#1083;');    case 'ms':        return array('ms|malay', 'ms', 'Bahasa Melayu');    case 'nl':        return array('nl|dutch', 'nl', 'Nederlands');    case 'nb':        return array('nb|norwegian', 'nb', 'Norsk');    case 'pl':        return array('pl|polish', 'pl', 'Polski');    case 'pt_BR':        return array('pt[-_]br|brazilian portuguese', 'pt-BR', 'Portugu&ecirc;s');    case 'pt':        return array('pt|portuguese', 'pt', 'Portugu&ecirc;s');    case 'ro':        return array('ro|romanian', 'ro', 'Rom&acirc;n&#259;');    case 'ru':        return array('ru|russian', 'ru', '&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;');    case 'si':        return array('si|sinhala', 'si', '&#3523;&#3538;&#3458;&#3524;&#3517;');    case 'sk':        return array('sk|slovak', 'sk', 'Sloven&#269;ina');    case 'sl':        return array('sl|slovenian', 'sl', 'Sloven&scaron;&#269;ina');    case 'sq':        return array('sq|albanian', 'sq', 'Shqip');    case 'sr@latin':        return array('sr[-_]lat|serbian latin', 'sr-lat', 'Srpski');    case 'sr':        return array('sr|serbian', 'sr', '&#1057;&#1088;&#1087;&#1089;&#1082;&#1080;');    case 'sv':        return array('sv|swedish', 'sv', 'Svenska');    case 'ta':        return array('ta|tamil', 'ta', '');    case 'te':        return array('te|telugu', 'te', '');    case 'th':        return array('th|thai', 'th', '&#3616;&#3634;&#3625;&#3634;&#3652;&#3607;&#3618;');    case 'tk':        return array('tk|turkmen', 'tk', 'trkmene');    case 'tr':        return array('tr|turkish', 'tr', 'T&uuml;rk&ccedil;e');    case 'tt':        return array('tt|tatarish', 'tt', 'Tatar&ccedil;a');    case 'ug':        return array('ug|uyghur', 'ug', '');    case 'uk':        return array('uk|ukrainian', 'uk', '&#1059;&#1082;&#1088;&#1072;&#1111;&#1085;&#1089;&#1100;&#1082;&#1072;');    case 'ur':        return array('ur|urdu', 'ur', '');    case 'uz@latin':        return array('uz[-_]lat|uzbek-latin', 'uz-lat', 'O&lsquo;zbekcha');    case 'uz':        return array('uz[-_]cyr|uzbek-cyrillic', 'uz-cyr', '&#1038;&#1079;&#1073;&#1077;&#1082;&#1095;&#1072;');    case 'zh_TW':        return array('zh[-_](tw|hk)|chinese traditional', 'zh-TW', '&#20013;&#25991;');    case 'zh_CN':        return array('zh|chinese simplified', 'zh', '&#20013;&#25991;');    }    return array("$lang|$lang", $lang, $lang);}/** * Returns list of languages supported by phpMyAdmin * * @return array */function PMA_langList(){    /* We can always speak English */    $result = array('en' => PMA_langDetails('en'));    /* Check for existing directory */    if (!is_dir($GLOBALS['lang_path'])) {        return $result;    }    /* Open the directory */    $handle = @opendir($GLOBALS['lang_path']);    /* This can happen if the kit is English-only */    if ($handle === false) {        return $result;    }    /* Process all files */    while (false !== ($file = readdir($handle))) {        if ($file != "." && $file != ".." && file_exists($GLOBALS['lang_path'] . '/' . $file . '/LC_MESSAGES/phpmyadmin.mo')) {            $result[$file] = PMA_langDetails($file);        }    }    /* Close the handle */    closedir($handle);    return $result;}/** * @global string  path to the translations directory; may be absent if the kit is English-only */$GLOBALS['lang_path'] = './locale/';/** * Load gettext functions. */require_once GETTEXT_INC;/** * @global string  interface language */$GLOBALS['lang'] = 'en';/** * @global boolean whether loading lang from cfg failed */$GLOBALS['lang_failed_cfg'] = false;/** * @global boolean whether loading lang from cookie failed */$GLOBALS['lang_failed_cookie'] = false;/** * @global boolean whether loading lang from user request failed */$GLOBALS['lang_failed_request'] = false;/** * @global string text direction ltr or rtl */$GLOBALS['text_dir'] = 'ltr';/** * @global array supported languages */$GLOBALS['available_languages'] = PMA_langList();// Language filtering supportif (! empty($GLOBALS['cfg']['FilterLanguages'])) {    $new_lang = array();    foreach ($GLOBALS['available_languages'] as $key => $val) {        if (preg_match('@' . $GLOBALS['cfg']['FilterLanguages'] . '@', $key)) {            $new_lang[$key] = $val;        }    }    if (count($new_lang) > 0) {        $GLOBALS['available_languages'] = $new_lang;    }    unset($key, $val, $new_lang);}/** * @global array MySQL charsets map */$GLOBALS['mysql_charset_map'] = array(    'big5'         => 'big5',    'cp-866'       => 'cp866',    'euc-jp'       => 'ujis',    'euc-kr'       => 'euckr',    'gb2312'       => 'gb2312',    'gbk'          => 'gbk',    'iso-8859-1'   => 'latin1',    'iso-8859-2'   => 'latin2',    'iso-8859-7'   => 'greek',    'iso-8859-8'   => 'hebrew',    'iso-8859-8-i' => 'hebrew',    'iso-8859-9'   => 'latin5',    'iso-8859-13'  => 'latin7',    'iso-8859-15'  => 'latin1',    'koi8-r'       => 'koi8r',    'shift_jis'    => 'sjis',    'tis-620'      => 'tis620',    'utf-8'        => 'utf8',    'windows-1250' => 'cp1250',    'windows-1251' => 'cp1251',    'windows-1252' => 'latin1',    'windows-1256' => 'cp1256',    'windows-1257' => 'cp1257',);/* * Do the work! */if (! PMA_langCheck()) {    // fallback language    $fall_back_lang = 'en';    $line = __LINE__;    if (! PMA_langSet($fall_back_lang)) {        trigger_error('phpMyAdmin-ERROR: invalid lang code: '            . __FILE__ . '#' . $line . ', check hard coded fall back language.',            E_USER_WARNING);        // stop execution        // and tell the user that his chosen language is invalid        PMA_fatalError('Could not load any language, please check your language settings and folder.');    }}// Set locale_setlocale(LC_MESSAGES, $GLOBALS['lang']);_bindtextdomain('phpmyadmin', $GLOBALS['lang_path']);_bind_textdomain_codeset('phpmyadmin', 'UTF-8');_textdomain('phpmyadmin');/** * Messages for phpMyAdmin. * * These messages are here for easy transition to Gettext. * You should not add any messages here, use instead gettext directly * in your template/PHP file. */if (! function_exists('__')) {    die('Bad invocation!');}/* l10n: Text direction, use either ltr or rtl */$GLOBALS['text_dir'] = __('ltr');/* TCPDF */$GLOBALS['l'] = array();/* TCPDF settings */$GLOBALS['l']['a_meta_charset'] = 'UTF-8';$GLOBALS['l']['a_meta_dir'] = $GLOBALS['text_dir'];$GLOBALS['l']['a_meta_language'] = $GLOBALS['lang'];/* TCPDF translations */$GLOBALS['l']['w_page'] = __('Page number:');// now, that we have loaded the language strings we can send the errorsif ($GLOBALS['lang_failed_cfg']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cfg'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_cookie']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_cookie'])),        E_USER_ERROR);}if ($GLOBALS['lang_failed_request']) {    trigger_error(        sprintf(__('Unknown language: %1$s.'),            htmlspecialchars($GLOBALS['lang_failed_request'])),        E_USER_ERROR);}unset($line, $fall_back_lang,    $GLOBALS['lang_failed_cfg'], $GLOBALS['lang_failed_cookie'], $GLOBALS['lang_failed_request']);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays table structure infos like fields/columns, indexes, size, rows * and allows manipulation of indexes and columns/fields * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';require_once './libraries/mysql_charsets.lib.php';$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'tbl_structure.js';$GLOBALS['js_include'][] = 'indexes.js';/** * handle multiple field commands if required * * submit_mult_*_x comes from IE if <input type="img" ...> is used */if (isset($_REQUEST['submit_mult_change_x'])) {    $submit_mult = 'change';} elseif (isset($_REQUEST['submit_mult_drop_x'])) {    $submit_mult = 'drop';} elseif (isset($_REQUEST['submit_mult_primary_x'])) {    $submit_mult = 'primary';} elseif (isset($_REQUEST['submit_mult_index_x'])) {    $submit_mult = 'index';} elseif (isset($_REQUEST['submit_mult_unique_x'])) {    $submit_mult = 'unique';} elseif (isset($_REQUEST['submit_mult_spatial_x'])) {    $submit_mult = 'spatial';} elseif (isset($_REQUEST['submit_mult_fulltext_x'])) {    $submit_mult = 'ftext';} elseif (isset($_REQUEST['submit_mult_browse_x'])) {    $submit_mult = 'browse';} elseif (isset($_REQUEST['submit_mult'])) {    $submit_mult = $_REQUEST['submit_mult'];} elseif (isset($_REQUEST['mult_btn']) && $_REQUEST['mult_btn'] == __('Yes')) {    $submit_mult = 'row_delete';    if (isset($_REQUEST['selected'])) {        $_REQUEST['selected_fld'] = $_REQUEST['selected'];    }}if (! empty($submit_mult) && isset($_REQUEST['selected_fld'])) {    $err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);    if ($submit_mult == 'browse') {        // browsing the table displaying only selected fields/columns        $GLOBALS['active_page'] = 'sql.php';        $sql_query = '';        foreach ($_REQUEST['selected_fld'] as $idx => $sval) {            if ($sql_query == '') {                $sql_query .= 'SELECT ' . PMA_backquote($sval);            } else {                $sql_query .=  ', ' . PMA_backquote($sval);            }        }        // what is this htmlspecialchars() for??        //$sql_query .= ' FROM ' . PMA_backquote(htmlspecialchars($table));        $sql_query .= ' FROM ' . PMA_backquote($db) . '.' . PMA_backquote($table);        include './sql.php';        exit;    } else {        // handle multiple field commands        // handle confirmation of deleting multiple fields/columns        $action = 'tbl_structure.php';        include './libraries/mult_submits.inc.php';        //require_once './libraries/header.inc.php';        //require_once './libraries/tbl_links.inc.php';        if (empty($message)) {            $message = PMA_Message::success();        }    }}/** * Gets the relation settings */$cfgRelation = PMA_getRelationsParam();/** * Runs common work */require_once './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_structure.php&amp;back=tbl_structure.php';$url_params['goto'] = 'tbl_structure.php';$url_params['back'] = 'tbl_structure.php';/** * Prepares the table structure display *//** * Gets tables informations */require_once './libraries/tbl_info.inc.php';/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';require_once './libraries/Index.class.php';// 2. Gets table keys and retains them// @todo should be: $server->db($db)->table($table)->primary()$primary = PMA_Index::getPrimary($table, $db);$columns_with_unique_index = array();foreach (PMA_Index::getFromTable($table, $db) as $index) {    if ($index->isUnique() && $index->getChoice() == 'UNIQUE') {        $columns = $index->getColumns();        foreach ($columns as $column_name => $dummy) {            $columns_with_unique_index[$column_name] = 1;        }    }}unset($index, $columns, $column_name, $dummy);// 3. Get fields$fields = (array) PMA_DBI_get_columns($db, $table, null, true);// Get more complete field information// For now, this is done just for MySQL 4.1.2+ new TIMESTAMP options// but later, if the analyser returns more information, it// could be executed for any MySQL version and replace// the info given by SHOW FULL COLUMNS FROM.//// We also need this to correctly learn if a TIMESTAMP is NOT NULL, since// SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL// and SHOW CREATE TABLE says NOT NULL (tested// in MySQL 4.0.25 and 5.0.21, http://bugs.mysql.com/20910).$show_create_table = PMA_DBI_fetch_value(        'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),        0, 1);$analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));/** * prepare table infos */// action titles (image or string)$titles = array();$titles['Change']               = PMA_getIcon('b_edit.png', __('Change'));$titles['Drop']                 = PMA_getIcon('b_drop.png', __('Drop'));$titles['NoDrop']               = PMA_getIcon('b_drop.png', __('Drop'));$titles['Primary']              = PMA_getIcon('b_primary.png', __('Primary'));$titles['Index']                = PMA_getIcon('b_index.png', __('Index'));$titles['Unique']               = PMA_getIcon('b_unique.png', __('Unique'));$titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Spatial'));$titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Fulltext'));$titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Primary'));$titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Index'));$titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Unique'));$titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Spatial'));$titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Fulltext'));$titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'));// hidden action titles (image and string)$hidden_titles = array();$hidden_titles['BrowseDistinctValues'] = PMA_getIcon('b_browse.png', __('Browse distinct values'), true);$hidden_titles['Primary']              = PMA_getIcon('b_primary.png', __('Add primary key'), true);$hidden_titles['NoPrimary']            = PMA_getIcon('bd_primary.png', __('Add primary key'), true);$hidden_titles['Index']                = PMA_getIcon('b_index.png', __('Add index'), true);$hidden_titles['NoIndex']              = PMA_getIcon('bd_index.png', __('Add index'), true);$hidden_titles['Unique']               = PMA_getIcon('b_unique.png', __('Add unique index'), true);$hidden_titles['NoUnique']             = PMA_getIcon('bd_unique.png', __('Add unique index'), true);$hidden_titles['Spatial']              = PMA_getIcon('b_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['NoSpatial']            = PMA_getIcon('bd_spatial.png', __('Add SPATIAL index'), true);$hidden_titles['IdxFulltext']          = PMA_getIcon('b_ftext.png', __('Add FULLTEXT index'), true);$hidden_titles['NoIdxFulltext']        = PMA_getIcon('bd_ftext.png', __('Add FULLTEXT index'), true);/** * Displays the table structure ('show table' works correct since 3.23.03) *//* TABLE INFORMATION */// table header$i = 0;?><form method="post" action="tbl_structure.php" name="fieldsForm" id="fieldsForm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>>    <?php echo PMA_generate_common_hidden_inputs($db, $table);    echo '<input type="hidden" name="table_type" value=';    if ($db_is_information_schema) {         echo '"information_schema" />';    } else if ($tbl_is_view) {         echo '"view" />';    } else {         echo '"table" />';    } ?><table id="tablestructure" class="data"><thead><tr>    <th id="th<?php echo ++$i; ?>"></th>    <th id="th<?php echo ++$i; ?>">#</th>    <th id="th<?php echo ++$i; ?>" class="column"><?php echo __('Name'); ?></th>    <th id="th<?php echo ++$i; ?>" class="type"><?php echo __('Type'); ?></th>    <th id="th<?php echo ++$i; ?>" class="collation"><?php echo __('Collation'); ?></th>    <th id="th<?php echo ++$i; ?>" class="attributes"><?php echo __('Attributes'); ?></th>    <th id="th<?php echo ++$i; ?>" class="null"><?php echo __('Null'); ?></th>    <th id="th<?php echo ++$i; ?>" class="default"><?php echo __('Default'); ?></th>    <th id="th<?php echo ++$i; ?>" class="extra"><?php echo __('Extra'); ?></th><?php if ($db_is_information_schema || $tbl_is_view) { ?>    <th id="th<?php echo ++$i; ?>" class="view"><?php echo __('View'); ?></th><?php } else { ?>    <th colspan="7" id="th<?php echo ++$i; ?>" class="action"><?php echo __('Action'); ?></th><?php } ?></tr></thead><tbody><?phpunset($i);// table body// prepare comments$comments_map = array();$mime_map = array();if ($GLOBALS['cfg']['ShowPropertyComments']) {    include_once './libraries/transformations.lib.php';    //$cfgRelation = PMA_getRelationsParam();    $comments_map = PMA_getComments($db, $table);    if ($cfgRelation['mimework'] && $cfg['BrowseMIME']) {        $mime_map = PMA_getMIME($db, $table, true);    }}$rownum    = 0;$aryFields = array();$checked   = (!empty($checkall) ? ' checked="checked"' : '');$save_row  = array();$odd_row   = true;foreach ($fields as $row) {    $save_row[] = $row;    $rownum++;    $aryFields[]      = $row['Field'];    $type             = $row['Type'];    $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);    if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {        $type_nowrap  = '';    } else {        $type_nowrap  = ' nowrap="nowrap"';    }    $type         = $extracted_fieldspec['print_type'];    if (empty($type)) {        $type     = ' ';    }    // for the case ENUM('&#8211;','&ldquo;')    $type         = htmlspecialchars($type);    // in case it is too long    $start = 0;    if (strlen($type) > $GLOBALS['cfg']['LimitChars']) {        $start = 13;        $type = '<abbr title="' . $type . '">' . substr($type, 0, $GLOBALS['cfg']['LimitChars']) . '</abbr>';    }    unset($field_charset);    if ((substr($type, $start, 4) == 'char'        || substr($type, $start, 7) == 'varchar'        || substr($type, $start, 4) == 'text'        || substr($type, $start, 8) == 'tinytext'        || substr($type, $start, 10) == 'mediumtext'        || substr($type, $start, 8) == 'longtext'        || substr($type, $start, 3) == 'set'        || substr($type, $start, 4) == 'enum')        && !$extracted_fieldspec['binary']    ) {        if (strpos($type, ' character set ')) {            $type = substr($type, 0, strpos($type, ' character set '));        }        if (!empty($row['Collation'])) {            $field_charset = $row['Collation'];        } else {            $field_charset = '';        }    } else {        $field_charset = '';    }    // Display basic mimetype [MIME]    if ($cfgRelation['commwork'] && $cfgRelation['mimework'] && $cfg['BrowseMIME'] && isset($mime_map[$row['Field']]['mimetype'])) {        $type_mime = '<br />MIME: ' . str_replace('_', '/', $mime_map[$row['Field']]['mimetype']);    } else {        $type_mime = '';    }    $attribute     = $extracted_fieldspec['attribute'];    // MySQL 4.1.2+ TIMESTAMP options    // (if on_update_current_timestamp is set, then it's TRUE)    if (isset($analyzed_sql[0]['create_table_fields'][$row['Field']]['on_update_current_timestamp'])) {        $attribute = 'on update CURRENT_TIMESTAMP';    }    // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the    // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe    // the latter.    if (!empty($analyzed_sql[0]['create_table_fields'][$row['Field']]['type']) && $analyzed_sql[0]['create_table_fields'][$row['Field']]['type'] == 'TIMESTAMP' && $analyzed_sql[0]['create_table_fields'][$row['Field']]['timestamp_not_null']) {        $row['Null'] = '';    }    if (! isset($row['Default'])) {        if ($row['Null'] == 'YES') {            $row['Default'] = '<i>NULL</i>';        }    } else {        $row['Default'] = htmlspecialchars($row['Default']);    }    $field_encoded = urlencode($row['Field']);    $field_name    = htmlspecialchars($row['Field']);    $displayed_field_name = $field_name;    // underline commented fields and display a hover-title (CSS only)    if (isset($comments_map[$row['Field']])) {        $displayed_field_name = '<span class="commented_column" title="' . htmlspecialchars($comments_map[$row['Field']]) . '">' . $field_name . '</span>';    }    if ($primary && $primary->hasColumn($field_name)) {        $displayed_field_name = '<u>' . $field_name . '</u>';    }    echo "\n";    ?><tr class="<?php echo $odd_row ? 'odd': 'even'; $odd_row = !$odd_row; ?>">    <td align="center">        <input type="checkbox" name="selected_fld[]" value="<?php echo htmlspecialchars($row['Field']); ?>" id="checkbox_row_<?php echo $rownum; ?>" <?php echo $checked; ?> />    </td>    <td align="right">        <?php echo $rownum; ?>    </td>    <th nowrap="nowrap"><label for="checkbox_row_<?php echo $rownum; ?>"><?php echo $displayed_field_name; ?></label></th>    <td<?php echo $type_nowrap; ?>><bdo dir="ltr" xml:lang="en"><?php echo $type; echo $type_mime; ?></bdo></td>    <td><?php echo (empty($field_charset) ? '' : '<dfn title="' . PMA_getCollationDescr($field_charset) . '">' . $field_charset . '</dfn>'); ?></td>    <td nowrap="nowrap" class="column_attribute"><?php echo $attribute; ?></td>    <td><?php echo (($row['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>    <td nowrap="nowrap"><?php    if (isset($row['Default'])) {        if ($extracted_fieldspec['type'] == 'bit') {            // here, $row['Default'] contains something like b'010'            echo PMA_convert_bit_default_value($row['Default']);        } else {            echo $row['Default'];        }    } else {        echo '<i>' . _pgettext('None for default', 'None') . '</i>';    } ?></td>    <td nowrap="nowrap"><?php echo strtoupper($row['Extra']); ?></td>    <td align="center" class="browse">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">            <?php echo $titles['BrowseDistinctValues']; ?></a>    </td>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <td align="center" class="edit">        <a href="tbl_alter.php?<?php echo $url_query; ?>&amp;field=<?php echo $field_encoded; ?>">            <?php echo $titles['Change']; ?></a>    </td>    <td align="center" class="drop">        <a <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="drop_column_anchor"' : ''); ?> href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' DROP ' . PMA_backquote($row['Field'])); ?>&amp;dropped_column=<?php echo urlencode($row['Field']); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('Column %s has been dropped'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Drop']; ?></a>    </td>    <td align="center" class="primary">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || ($primary && $primary->hasColumn($field_name))) {            echo $titles['NoPrimary'] . "\n";            $primary_enabled = false;        } else {            echo "\n";            ?>        <a class="add_primary_key_anchor" href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>" >            <?php echo $titles['Primary']; ?></a>            <?php $primary_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="unique">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type || isset($columns_with_unique_index[$field_name])) {            echo $titles['NoUnique'] . "\n";            $unique_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Unique']; ?></a>            <?php $unique_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="index">        <?php        if ($type == 'text' || $type == 'blob' || 'ARCHIVE' == $tbl_type) {            echo $titles['NoIndex'] . "\n";            $index_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Index']; ?></a>            <?php            $index_enabled = true;        }        echo "\n";        ?>    </td>    <td align="center" class="spatial">        <?php        $spatial_types = array(            'geometry', 'point', 'linestring', 'polygon', 'multipoint',            'multilinestring', 'multipolygon', 'geomtrycollection'        );        if (! in_array($type, $spatial_types) || 'MYISAM' != $tbl_type) {            echo $titles['NoSpatial'] . "\n";            $spatial_enabled = false;        } else {            echo "\n";            ?>        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['Spatial']; ?></a>            <?php            $spatial_enabled = true;        }        echo "\n";        ?>    </td>    <?php        if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || ($tbl_type == 'INNODB' && PMA_MYSQL_INT_VERSION >= 50604))            // FULLTEXT is possible on TEXT, CHAR and VARCHAR            && (strpos(' ' . $type, 'text') || strpos(' ' . $type, 'char'))) {            echo "\n";            ?>    <td align="center" nowrap="nowrap" class="fulltext">        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">            <?php echo $titles['IdxFulltext']; ?></a>            <?php $fulltext_enabled = true; ?>    </td>            <?php        } else {            echo "\n";        ?>    <td align="center" nowrap="nowrap" class="fulltext">        <?php echo $titles['NoIdxFulltext'] . "\n"; ?>        <?php $fulltext_enabled = false; ?>    </td>        <?php        } // end if... else...        echo "\n";        ?>    <td class="more_opts" id="more_opts<?php echo $rownum; ?>">        <?php echo PMA_getImage('more.png', __('Show more actions')); ?> <?php echo __('More'); ?>        <div class="structure_actions_dropdown" id="row_<?php echo $rownum; ?>">            <div class="action_browse">                <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('SELECT COUNT(*) AS ' . PMA_backquote(__('Rows')) . ', ' . PMA_backquote($row['Field']) . ' FROM ' . PMA_backquote($table) . ' GROUP BY ' . PMA_backquote($row['Field']) . ' ORDER BY ' . PMA_backquote($row['Field'])); ?>">                    <?php echo $hidden_titles['BrowseDistinctValues']; ?>                </a>            </div>            <div <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="action_primary"' : ''); ?>>                <?php                if (isset($primary_enabled)) {                     if ($primary_enabled) { ?>                          <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ($primary ? ' DROP PRIMARY KEY,' : '') . ' ADD PRIMARY KEY(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('A primary key has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Primary']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoPrimary'];                     }                } ?>            </div>            <div class="action_unique">                <?php                if (isset($unique_enabled)) {                     if ($unique_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD UNIQUE(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Unique']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoUnique'];                     }                } ?>            </div>            <div class="action_index">               <?php                if (isset($index_enabled)) {                     if ($index_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD INDEX(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['Index']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIndex'];                     }                  } ?>            </div>            <?php if (!PMA_DRIZZLE) { ?>            <div class="action_spatial">                <?php                if (isset($spatial_enabled)) {                    if ($spatial_enabled) { ?>                        <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD SPATIAL(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                            <?php echo $hidden_titles['Spatial']; ?>                        </a>                    <?php                    } else {                        echo $hidden_titles['NoSpatial'];                    }                } ?>            </div>            <div class="action_fulltext">                <?php                if (isset($fulltext_enabled)) {                     if ($fulltext_enabled) { ?>                         <a href="sql.php?<?php echo $url_query; ?>&amp;sql_query=<?php echo urlencode('ALTER TABLE ' . PMA_backquote($table) . ' ADD FULLTEXT(' . PMA_backquote($row['Field']) . ')'); ?>&amp;message_to_show=<?php echo urlencode(sprintf(__('An index has been added on %s'), htmlspecialchars($row['Field']))); ?>">                             <?php echo $hidden_titles['IdxFulltext']; ?>                         </a>                     <?php                     } else {                         echo $hidden_titles['NoIdxFulltext'];                     }                } ?>            </div>            <?php } ?>        </div>    </td>    <?php    } // end if (! $tbl_is_view && ! $db_is_information_schema)    ?></tr>    <?php    unset($field_charset);} // end foreachecho '</tbody>' . "\n"    .'</table>' . "\n";$checkall_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);?><img class="selectallarrow" src="<?php echo $pmaThemeImage . 'arrow_' . $text_dir . '.png'; ?>"    width="38" height="22" alt="<?php echo __('With selected:'); ?>" /><a href="<?php echo $checkall_url; ?>&amp;checkall=1"    onclick="if (markAllRows('fieldsForm')) return false;">    <?php echo __('Check All'); ?></a>/<a href="<?php echo $checkall_url; ?>"    onclick="if (unMarkAllRows('fieldsForm')) return false;">    <?php echo __('Uncheck All'); ?></a><i><?php echo __('With selected:'); ?></i><?phpPMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_browse', __('Browse'), 'b_browse.png', 'browse');if (! $tbl_is_view && ! $db_is_information_schema) {    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_change', __('Change'), 'b_edit.png', 'change');    PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_drop', __('Drop'), 'b_drop.png', 'drop');    if ('ARCHIVE' != $tbl_type) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_primary', __('Primary'), 'b_primary.png', 'primary');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_unique', __('Unique'), 'b_unique.png', 'unique');        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_index', __('Index'), 'b_index.png', 'index');    }    if (! empty($tbl_type) && $tbl_type == 'MYISAM') {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_spatial', __('Spatial'), 'b_spatial.png', 'spatial');    }    if (! empty($tbl_type) && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA')) {        PMA_buttonOrImage('submit_mult', 'mult_submit', 'submit_mult_fulltext', __('Fulltext'), 'b_ftext.png', 'ftext');    }}?></form><hr /><?php/** * Work on the table */if ($tbl_is_view) {    $create_view = PMA_DBI_get_definition($db, 'VIEW', $table);    $create_view = preg_replace('@^CREATE@', 'ALTER', $create_view);    echo PMA_linkOrButton(        'tbl_sql.php' . PMA_generate_common_url(            $url_params +            array(                'sql_query' => $create_view,                'show_query' => '1',            )        ),        PMA_getIcon('b_edit.png', __('Edit view'), true)        );}?><a href="tbl_printview.php?<?php echo $url_query; ?>"><?phpecho PMA_getIcon('b_print.png', __('Print view'), true);?></a><?phpif (! $tbl_is_view && ! $db_is_information_schema) {    // if internal relations are available, or foreign keys are supported    // ($tbl_type comes from libraries/tbl_info.inc.php)    if ($cfgRelation['relwork'] || PMA_foreignkey_supported($tbl_type)) {        ?><a href="tbl_relation.php?<?php echo $url_query; ?>"><?php        echo PMA_getIcon('b_relations.png', __('Relation view'), true);        ?></a>        <?php    }    if (!PMA_DRIZZLE) {        ?><a href="sql.php?<?php echo $url_query; ?>&amp;session_max_rows=all&amp;sql_query=<?php echo urlencode('SELECT * FROM ' . PMA_backquote($table) . ' PROCEDURE ANALYSE()'); ?>"><?php        echo PMA_getIcon('b_tblanalyse.png', __('Propose table structure'), true);        ?></a><?php        echo PMA_showMySQLDocu('Extending_MySQL', 'procedure_analyse') . "\n";    }    if (PMA_Tracker::isActive()) {        echo '<a href="tbl_tracking.php?' . $url_query . '">';        echo PMA_getIcon('eye.png', __('Track table'), true);        echo '</a>';    }    ?>    <br /><form method="post" action="tbl_addfield.php" id="addColumns" name="addColumns" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : '');?>    onsubmit="return checkFormElementInRange(this, 'num_fields', '<?php echo str_replace('\'', '\\\'', __('You have to add at least one column.')); ?>', 1)">    <?php    echo PMA_generate_common_hidden_inputs($db, $table);    if ($cfg['PropertiesIconic']) {        echo PMA_getImage('b_insrow.png', __('Add column'));    }    echo sprintf(__('Add %s column(s)'), '<input type="text" name="num_fields" size="2" maxlength="2" value="1" onfocus="this.select()" />');    // I tried displaying the drop-down inside the label but with Firefox    // the drop-down was blinking    $fieldOptions = '<select name="after_field" onclick="this.form.field_where[2].checked=true" onchange="this.form.field_where[2].checked=true">';    foreach ($aryFields as $fieldname) {        $fieldOptions .= '<option value="' . htmlspecialchars($fieldname) . '">' . htmlspecialchars($fieldname) . '</option>' . "\n";    }    unset($aryFields);    $fieldOptions .= '</select>';    $choices = array(        'last'  => __('At End of Table'),        'first' => __('At Beginning of Table'),        'after' => sprintf(__('After %s'), '')    );    PMA_display_html_radio('field_where', $choices, 'last', false);    echo $fieldOptions;    unset($fieldOptions, $choices);    ?><input type="submit" value="<?php echo __('Go'); ?>" /></form><iframe class="IE_hack" scrolling="no"></iframe><hr /><div id="index_div" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?> >    <?php}/** * If there are more than 20 rows, displays browse/select/insert/empty/drop * links again */if (count($fields) > 20) {    include './libraries/tbl_links.inc.php';} // end if (count($fields) > 20)/** * Displays indexes */if (! $tbl_is_view && ! $db_is_information_schema && 'ARCHIVE' !=  $tbl_type) {    PMA_generate_slider_effect('indexes', __('Indexes'));    /**     * Display indexes     */    echo PMA_Index::getView($table, $db);    ?>        <fieldset class="tblFooters" style="text-align: left;">            <form action="./tbl_indexes.php" method="post">                <?php                echo PMA_generate_common_hidden_inputs($db, $table);                echo sprintf(__('Create an index on &nbsp;%s&nbsp;columns'),                    '<input type="text" size="2" name="added_fields" value="1" />');                ?>                <input type="hidden" name="create_index" value="1" />                <input class="add_index<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' ajax' : '');?>" type="submit" value="<?php echo __('Go'); ?>" />            </form>        </fieldset>    </div></div>    <?php}/** * Displays Space usage and row statistics */// BEGIN - Calc Table Space// Get valid statistics whatever is the table typeif ($cfg['ShowStats']) {    echo '<div id="tablestatistics">';    if (empty($showtable)) {        $showtable = PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], null, true);    }    $nonisam     = false;    $is_innodb = (isset($showtable['Type']) && $showtable['Type'] == 'InnoDB');    if (isset($showtable['Type']) && !preg_match('@ISAM|HEAP@i', $showtable['Type'])) {        $nonisam = true;    }    // Gets some sizes    $mergetable = PMA_Table::isMerge($GLOBALS['db'], $GLOBALS['table']);    // this is to display for example 261.2 MiB instead of 268k KiB    $max_digits = 3;    $decimals = 1;    list($data_size, $data_unit)         = PMA_formatByteDown($showtable['Data_length'], $max_digits, $decimals);    if ($mergetable == false) {        list($index_size, $index_unit)   = PMA_formatByteDown($showtable['Index_length'], $max_digits, $decimals);    }    // InnoDB returns a huge value in Data_free, do not use it    if (! $is_innodb && isset($showtable['Data_free']) && $showtable['Data_free'] > 0) {        list($free_size, $free_unit)     = PMA_formatByteDown($showtable['Data_free'], $max_digits, $decimals);        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'] - $showtable['Data_free'], $max_digits, $decimals);    } else {        list($effect_size, $effect_unit) = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    }    list($tot_size, $tot_unit)           = PMA_formatByteDown($showtable['Data_length'] + $showtable['Index_length'], $max_digits, $decimals);    if ($table_info_num_rows > 0) {        list($avg_size, $avg_unit)       = PMA_formatByteDown(($showtable['Data_length'] + $showtable['Index_length']) / $showtable['Rows'], 6, 1);    }    // Displays them    $odd_row = false;    ?>    <fieldset>    <legend><?php echo __('Information'); ?></legend>    <a name="showusage"></a>    <?php if (! $tbl_is_view && ! $db_is_information_schema) { ?>    <table id="tablespaceusage" class="data">    <caption class="tblHeaders"><?php echo __('Space usage'); ?></caption>    <thead>    <tr>        <th><?php echo __('Type'); ?></th>        <th colspan="2"><?php echo __('Usage'); ?></th>    </tr>    </thead>    <tbody>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Data'); ?></th>        <td class="value"><?php echo $data_size; ?></td>        <td class="unit"><?php echo $data_unit; ?></td>    </tr>        <?php        if (isset($index_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Index'); ?></th>        <td class="value"><?php echo $index_size; ?></td>        <td class="unit"><?php echo $index_unit; ?></td>    </tr>            <?php        }        if (isset($free_size)) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?> error">        <th class="name"><?php echo __('Overhead'); ?></th>        <td class="value"><?php echo $free_size; ?></td>        <td class="unit"><?php echo $free_unit; ?></td>    </tr>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Effective'); ?></th>        <td class="value"><?php echo $effect_size; ?></td>        <td class="unit"><?php echo $effect_unit; ?></td>    </tr>            <?php        }        if (isset($tot_size) && $mergetable == false) {            ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Total'); ?></th>        <td class="value"><?php echo $tot_size; ?></td>        <td class="unit"><?php echo $tot_unit; ?></td>    </tr>            <?php        }        // Optimize link if overhead        if (isset($free_size) && !PMA_DRIZZLE && ($tbl_type == 'MYISAM' || $tbl_type == 'ARIA' || $tbl_type == 'MARIA' || $tbl_type == 'BDB')) {            ?>    <tr class="tblFooters">        <td colspan="3" align="center">            <a href="sql.php?<?php echo $url_query; ?>&pos=0&amp;sql_query=<?php echo urlencode('OPTIMIZE TABLE ' . PMA_backquote($table)); ?>"><?php            echo PMA_getIcon('b_tbloptimize.png', __('Optimize table'));            ?></a>        </td>    </tr>            <?php        }        ?>    </tbody>    </table>        <?php    }    $odd_row = false;    ?>    <table id="tablerowstats" class="data">    <caption class="tblHeaders"><?php echo __('Row Statistics'); ?></caption>    <thead>    <tr>        <th><?php echo __('Statements'); ?></th>        <th><?php echo __('Value'); ?></th>    </tr>    </thead>    <tbody>    <?php    if (isset($showtable['Row_format'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Format'); ?></th>        <td class="value"><?php        if ($showtable['Row_format'] == 'Fixed') {            echo __('static');        } elseif ($showtable['Row_format'] == 'Dynamic') {            echo __('dynamic');        } else {            echo $showtable['Row_format'];        }        ?></td>    </tr>        <?php    }    if (! empty($showtable['Create_options'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Options'); ?></th>        <td class="value"><?php        if ($showtable['Create_options'] == 'partitioned') {            echo __('partitioned');        } else {            echo $showtable['Create_options'];        }        ?></td>    </tr>        <?php    }    if (!empty($tbl_collation)) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Collation'); ?></th>        <td class="value"><?php            echo '<dfn title="' . PMA_getCollationDescr($tbl_collation) . '">' . $tbl_collation . '</dfn>';            ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Rows'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Rows'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Rows'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Avg_row_length']) && $showtable['Avg_row_length'] > 0) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row length'); ?> &oslash;</th>        <td class="value"><?php echo PMA_formatNumber($showtable['Avg_row_length'], 0); ?></td>    </tr>        <?php    }    if (!$is_innodb && isset($showtable['Data_length']) && $showtable['Rows'] > 0 && $mergetable == false) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Row size'); ?> &oslash;</th>        <td class="value"><?php echo $avg_size . ' ' . $avg_unit; ?></td>    </tr>        <?php    }    if (isset($showtable['Auto_increment'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Next autoindex'); ?></th>        <td class="value"><?php echo PMA_formatNumber($showtable['Auto_increment'], 0); ?></td>    </tr>        <?php    }    if (isset($showtable['Create_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Creation'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Create_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Update_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last update'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Update_time'])); ?></td>    </tr>        <?php    }    if (isset($showtable['Check_time'])) {        ?>    <tr class="<?php echo ($odd_row = !$odd_row) ? 'odd' : 'even'; ?>">        <th class="name"><?php echo __('Last check'); ?></th>        <td class="value"><?php echo PMA_localisedDate(strtotime($showtable['Check_time'])); ?></td>    </tr>        <?php    }    ?>    </tbody>    </table>    </fieldset>    <!-- close tablestatistics div -->    </div>    <?php}// END - Calc Table Spaceecho '<div class="clearfloat"></div>' . "\n";/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * displays the pma logo, links and db and server selection in left frame * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (empty($query_url)) {    // avoid putting here $db because it could display a db name    // to which the next user does not have access    $query_url = PMA_generate_common_url();}// display Logo, depending on $GLOBALS['cfg']['LeftDisplayLogo']if ($GLOBALS['cfg']['LeftDisplayLogo']) {    $logo = 'phpMyAdmin';    if (@file_exists($GLOBALS['pmaThemeImage'] . 'logo_left.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'logo_left.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    } elseif (@file_exists($GLOBALS['pmaThemeImage'] . 'pma_logo2.png')) {        $logo = '<img src="' . $GLOBALS['pmaThemeImage'] . 'pma_logo2.png" '            .'alt="' . $logo . '" id="imgpmalogo" />';    }    echo '<div id="pmalogo">' . "\n";    if ($GLOBALS['cfg']['LeftLogoLink']) {        echo '<a href="' . htmlspecialchars($GLOBALS['cfg']['LeftLogoLink']);        switch ($GLOBALS['cfg']['LeftLogoLinkWindow']) {            case 'new':                echo '" target="_blank"';                break;            case 'main':                // do not add our parameters for an external link                if (substr(strtolower($GLOBALS['cfg']['LeftLogoLink']), 0, 4) !== '://') {                    echo '?' . $query_url . '" target="frame_content"';                } else {                    echo '" target="_blank"';                }        }        echo '>' . $logo . '</a>' . "\n";    } else {        echo $logo . "\n";    }    echo '</div>' . "\n";} // end of display logo?><div id="leftframelinks"><?php    echo '<a href="main.php?' . $query_url . '"'        .' title="' . __('Home') . '">'        .($GLOBALS['cfg']['MainPageIconic']            ? PMA_getImage('b_home.png', __('Home'))            : __('Home'))        .'</a>' . "\n";    // if we have chosen server    if ($server != 0) {        // Logout for advanced authentication        if ($GLOBALS['cfg']['Server']['auth_type'] != 'config') {            echo ($GLOBALS['cfg']['MainPageIconic'] ? '' : ' - ');            echo '<a href="index.php?' . $query_url . '&amp;old_usr='                .urlencode($PHP_AUTH_USER) . '" target="_parent"'                .' title="' . __('Log out') . '" >'                .($GLOBALS['cfg']['MainPageIconic']                    ? PMA_getImage('s_loggoff.png', __('Log out'))                    : __('Log out'))                .'</a>' . "\n";        } // end if ($GLOBALS['cfg']['Server']['auth_type'] != 'config'        $anchor = 'querywindow.php?' . PMA_generate_common_url($db, $table);        if ($GLOBALS['cfg']['MainPageIconic']) {            $query_frame_link_text = PMA_getImage('b_selboard.png', __('Query window'));        } else {            echo '<br />' . "\n";            $query_frame_link_text = __('Query window');        }        echo '<a href="' . $anchor . '&amp;no_js=true"'            .' title="' . __('Query window') . '"';        echo ' onclick="if (window.parent.open_querywindow()) return false;"';        echo '>' . $query_frame_link_text . '</a>' . "\n";    } // end if ($server != 0)    echo '    <a href="Documentation.html" target="documentation"'        .' title="' . __('phpMyAdmin documentation') . '" >';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('b_docs.png', __('phpMyAdmin documentation'));    } else {        echo '<br />' . __('phpMyAdmin documentation');    }    echo '</a>';    $documentation_link = PMA_showMySQLDocu('', '', true);    if ($GLOBALS['cfg']['MainPageIconic']) {        echo $documentation_link . "\n";    } else {        preg_match('/<a[^>]*>/', $documentation_link, $matches);        $link = $matches[0];        echo substr($link, 0, strlen($link) - 1) . ' title="' . __('Documentation') . '" >'            . '<br />' . __('Documentation') . '</a>';    }    $params = array('uniqid' => uniqid());    if (!empty($GLOBALS['db'])) {        $params['db'] = $GLOBALS['db'];    }    echo '<a href="navigation.php?' . PMA_generate_common_url($params)        . '" title="' . __('Reload navigation frame') . '" target="frame_navigation">';    if ($GLOBALS['cfg']['MainPageIconic']) {        echo PMA_getImage('s_reload', __('Reload navigation frame'));    } else {        echo '<br />' . __('Reload navigation frame');    }    echo '</a>';echo '</div>' . "\n";/** * Displays the MySQL servers choice form */if ($GLOBALS['cfg']['LeftDisplayServers'] && (count($GLOBALS['cfg']['Servers']) > 1 || $server == 0 && count($GLOBALS['cfg']['Servers']) == 1)) {    echo '<div id="serverinfo">';    include './libraries/select_server.lib.php';    PMA_select_server(true, true);    echo '</div><br />';} // end if LeftDisplayServers?>
<?php/** * Front controller for setup script * * @package    phpMyAdmin-setup * @copyright  Copyright (c) 2008, Piotr Przybylski <piotrprz@gmail.com> * @license    http://www.gnu.org/licenses/gpl.html GNU GPL 2.0 *//** * Core libraries. */require './lib/common.inc.php';$page = filter_input(INPUT_GET, 'page');$page = preg_replace('/[^a-z]/', '', $page);if ($page === '') {    $page = 'index';}if (!file_exists("./setup/frames/$page.inc.php")) {    // it will happen only when enterung URL by hand, we don't care for these cases    die(__('Wrong GET file attribute value'));}// Handle done action info$action_done = filter_input(INPUT_GET, 'action_done');$action_done = preg_replace('/[^a-z_]/', '', $action_done);// send no-cache headersrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>phpMyAdmin setup</title><link href="../favicon.ico" rel="icon" type="image/x-icon" /><link href="../favicon.ico" rel="shortcut icon" type="image/x-icon" /><link href="styles.css" rel="stylesheet" type="text/css" /><script type="text/javascript" src="../js/jquery/jquery-1.6.2.js"></script><script type="text/javascript" src="../js/jquery/jquery-ui-1.8.16.custom.js"></script><script type="text/javascript" src="../js/jquery/jquery.json-2.2.js"></script><script type="text/javascript" src="../js/config.js"></script><script type="text/javascript" src="scripts.js"></script></head><body><h1><span class="blue">php</span><span class="orange">MyAdmin</span>  setup</h1><div id="menu"><?phprequire './setup/frames/menu.inc.php';?></div><div id="page"><?phprequire "./setup/frames/$page.inc.php";?></div></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the database index class * * @package PhpMyAdmin *//** * @since phpMyAdmin 3.0.0 * * @package PhpMyAdmin */class PMA_Index{    /**     * Class-wide storage container for indexes (caching, singleton)     *     * @var array     */    protected static $_registry = array();    /**     * @var string The name of the schema     */    protected $_schema = '';    /**     * @var string The name of the table     */    protected $_table = '';    /**     * @var string The name of the index     */    protected $_name = '';    /**     * Columns in index     *     * @var array     */    protected $_columns = array();    /**     * The index method used (BTREE, SPATIAL, FULLTEXT, HASH, RTREE).     *     * @var string     */    protected $_type = '';    /**     * The index choice (PRIMARY, UNIQUE, INDEX, SPATIAL, FULLTEXT)     *     * @var string     */    protected $_choice = '';    /**     * Various remarks.     *     * @var string     */    protected $_remarks = '';    /**     * Any comment provided for the index with a COMMENT attribute when the     * index was created.     *     * @var string     */    protected $_comment = '';    /**     * @var integer 0 if the index cannot contain duplicates, 1 if it can.     */    protected $_non_unique = 0;    /**     * Indicates how the key is packed. NULL if it is not.     *     * @var string     */    protected $_packed = null;    /**     * Constructor     *     * @param array $params     */    public function __construct($params = array())    {        $this->set($params);    }    static public function singleton($schema, $table, $index_name = '')    {        PMA_Index::_loadIndexes($table, $schema);        if (! isset(PMA_Index::$_registry[$schema][$table][$index_name])) {            $index = new PMA_Index;            if (strlen($index_name)) {                $index->setName($index_name);                PMA_Index::$_registry[$schema][$table][$index->getName()] = $index;            }            return $index;        } else {            return PMA_Index::$_registry[$schema][$table][$index_name];        }    }    /**     * returns an array with all indexes from the given table     *     * @param string $table     * @param string $schema     * @return  array     */    static public function getFromTable($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table])) {            return PMA_Index::$_registry[$schema][$table];        } else {            return array();        }    }    /**     * return primary if set, false otherwise     *     * @param string $table     * @param string $schema     * @return  mixed primary index or false if no one exists     */    static public function getPrimary($table, $schema)    {        PMA_Index::_loadIndexes($table, $schema);        if (isset(PMA_Index::$_registry[$schema][$table]['PRIMARY'])) {            return PMA_Index::$_registry[$schema][$table]['PRIMARY'];        } else {            return false;        }    }    /**     * Load index data for table     *     * @param string $table     * @param string $schema     * @return  boolean     */    static protected function _loadIndexes($table, $schema)    {        if (isset(PMA_Index::$_registry[$schema][$table])) {            return true;        }        $_raw_indexes = PMA_DBI_get_table_indexes($schema, $table);        foreach ($_raw_indexes as $_each_index) {            $_each_index['Schema'] = $schema;            if (! isset(PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']])) {                $key = new PMA_Index($_each_index);                PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']] = $key;            } else {                $key = PMA_Index::$_registry[$schema][$table][$_each_index['Key_name']];            }            $key->addColumn($_each_index);        }        return true;    }    /**     * Add column to index     *     * @param array $params column params     */    public function addColumn($params)    {        if (strlen($params['Column_name'])) {            $this->_columns[$params['Column_name']] = new PMA_Index_Column($params);        }    }    public function addColumns($columns)    {        $_columns = array();        if (isset($columns['names'])) {            // coming from form            // $columns[names][]            // $columns[sub_parts][]            foreach ($columns['names'] as $key => $name) {                $sub_part = isset($columns['sub_parts'][$key]) ? $columns['sub_parts'][$key] : '';                $_columns[] = array(                    'Column_name'   => $name,                    'Sub_part'      => $sub_part,                );            }        } else {            // coming from SHOW INDEXES            // $columns[][name]            // $columns[][sub_part]            // ...            $_columns = $columns;        }        foreach ($_columns as $column) {            $this->addColumn($column);        }    }    /**     * Returns true if $column indexed in this index     *     * @param string $column     * @return  boolean     */    public function hasColumn($column)    {        return isset($this->_columns[$column]);    }    public function set($params)    {        if (isset($params['columns'])) {            $this->addColumns($params['columns']);        }        if (isset($params['Schema'])) {            $this->_schema = $params['Schema'];        }        if (isset($params['Table'])) {            $this->_table = $params['Table'];        }        if (isset($params['Key_name'])) {            $this->_name = $params['Key_name'];        }        if (isset($params['Index_type'])) {            $this->_type = $params['Index_type'];        }        if (isset($params['Comment'])) {            $this->_remarks = $params['Comment'];        }        if (isset($params['Index_comment'])) {            $this->_comment = $params['Index_comment'];        }        if (isset($params['Non_unique'])) {            $this->_non_unique = $params['Non_unique'];        }        if (isset($params['Packed'])) {            $this->_packed = $params['Packed'];        }        if ('PRIMARY' == $this->_name) {            $this->_choice = 'PRIMARY';        } elseif ('FULLTEXT' == $this->_type) {            $this->_choice = 'FULLTEXT';        } elseif ('SPATIAL' == $this->_type) {            $this->_choice = 'SPATIAL';        } elseif ('0' == $this->_non_unique) {            $this->_choice = 'UNIQUE';        } else {            $this->_choice = 'INDEX';        }    }    public function getColumnCount()    {        return count($this->_columns);    }    public function getComment()    {        return $this->_comment;    }    public function getRemarks()    {        return $this->_remarks;    }    public function getComments()    {        $comments = $this->getRemarks();        if (strlen($comments)) {            $comments .= "\n";        }        $comments .= $this->getComment();        return $comments;    }    public function getType()    {        return $this->_type;    }    public function getChoice()    {        return $this->_choice;    }    /**     * Return a list of all index choices     *     * @return  array index choices     */    static public function getIndexChoices()    {        return array(            'PRIMARY',            'INDEX',            'UNIQUE',            'SPATIAL',            'FULLTEXT',        );    }    public function generateIndexSelector()    {        $html_options = '';        foreach (PMA_Index::getIndexChoices() as $each_index_choice) {            if ($each_index_choice === 'PRIMARY'             && $this->_choice !== 'PRIMARY'             && PMA_Index::getPrimary($this->_table, $this->_schema)) {                // skip PRIMARY if there is already one in the table                continue;            }            $html_options .= '<option value="' . $each_index_choice . '"'                 . (($this->_choice == $each_index_choice) ? ' selected="selected"' : '')                 . '>'. $each_index_choice . '</option>' . "\n";        }        return $html_options;    }    public function getPacked()    {        return $this->_packed;    }    public function isPacked($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('No'),                '1' => __('Yes'),            );        } else {            $r = array(                '0' => false,                '1' => true,            );        }        if (null === $this->_packed) {            return $r[0];        }        return $this->_packed;    }    public function getNonUnique()    {        return $this->_non_unique;    }    public function isUnique($as_text = false)    {        if ($as_text) {            $r = array(                '0' => __('Yes'),                '1' => __('No'),            );        } else {            $r = array(                '0' => true,                '1' => false,            );        }        return $r[$this->_non_unique];    }    public function getName()    {        return $this->_name;    }    public function setName($name)    {        $this->_name = (string) $name;    }    public function getColumns()    {        return $this->_columns;    }    /**     * Show index data     *     * @param string      $table          The tablename     * @param array       $indexes_info   Referenced info array     * @param array       $indexes_data   Referenced data array     * @param boolean     $print_mode     * @access  public     * @return  array       Index collection array     */    static public function getView($table, $schema, $print_mode = false)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $no_indexes_class = count($indexes) > 0 ? ' hide' : '';        $no_indexes  = "<div class='no_indexes_defined$no_indexes_class'>";        $no_indexes .= PMA_Message::notice(__('No index defined!'))->getDisplay();        $no_indexes .= '</div>';        $r  = '<fieldset>';        $r .= '<legend id="index_header">' . __('Indexes');        $r .= PMA_showMySQLDocu('optimization', 'optimizing-database-structure');        $r .= '</legend>';        $r .= $no_indexes;        if (count($indexes) < 1) {            $r .= '</fieldset>';            return $r;        }        if (! $print_mode) {            $r .= PMA_Index::findDuplicates($table, $schema);        }        $r .= '<table id="table_index">';        $r .= '<thead>';        $r .= '<tr>';        if (! $print_mode) {            $r .= '<th colspan="2">' . __('Action') . '</th>';        }        $r .= '<th>' . __('Keyname') . '</th>';        $r .= '<th>' . __('Type') . '</th>';        $r .= '<th>' . __('Unique') . '</th>';        $r .= '<th>' . __('Packed') . '</th>';        $r .= '<th>' . __('Column') . '</th>';        $r .= '<th>' . __('Cardinality') . '</th>';        $r .= '<th>' . __('Collation') . '</th>';        $r .= '<th>' . __('Null') . '</th>';        $r .= '<th>' . __('Comment') . '</th>';        $r .= '</tr>';        $r .= '</thead>';        $r .= '<tbody>';        $odd_row = true;        foreach ($indexes as $index) {            $row_span = ' rowspan="' . $index->getColumnCount() . '" ';            $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';            if (! $print_mode) {                $this_params = $GLOBALS['url_params'];                $this_params['index'] = $index->getName();                $r .= '<td class="edit_index ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'ajax" ';                }                $r .= '" ' . $row_span . '>'                   . '    <a href="tbl_indexes.php' . PMA_generate_common_url($this_params)                   . '">' . PMA_getIcon('b_edit.png', __('Edit')) . '</a>'                   . '</td>' . "\n";                $this_params = $GLOBALS['url_params'];                if ($index->getName() == 'PRIMARY') {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP PRIMARY KEY';                    $this_params['message_to_show'] = __('The primary key has been dropped');                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP PRIMARY KEY');                } else {                    $this_params['sql_query'] = 'ALTER TABLE ' . PMA_backquote($table) . ' DROP INDEX ' . PMA_backquote($index->getName());                    $this_params['message_to_show'] = sprintf(__('Index %s has been dropped'), $index->getName());                    $js_msg      = PMA_jsFormat('ALTER TABLE ' . $table . ' DROP INDEX ' . $index->getName());                }                $r .= '<td ' . $row_span . '>';                $r .= '<input type="hidden" class="drop_primary_key_index_msg" value="' . $js_msg . '" />';                $r .= '    <a ';                if ($GLOBALS['cfg']['AjaxEnable']) {                    $r .= 'class="drop_primary_key_index_anchor" ';                }                $r .= ' href="sql.php' . PMA_generate_common_url($this_params)                   . '" >'                   . PMA_getIcon('b_drop.png', __('Drop'))  . '</a>'                   . '</td>' . "\n";            }            $r .= '<th ' . $row_span . '>' . htmlspecialchars($index->getName()) . '</th>';            $r .= '<td ' . $row_span . '>' . htmlspecialchars($index->getType()) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isUnique(true) . '</td>';            $r .= '<td ' . $row_span . '>' . $index->isPacked(true) . '</td>';            foreach ($index->getColumns() as $column) {                if ($column->getSeqInIndex() > 1) {                    $r .= '<tr class="noclick ' . ($odd_row ? 'odd' : 'even') . '">';                }                $r .= '<td>' . htmlspecialchars($column->getName());                if ($column->getSubPart()) {                    $r .= ' (' . $column->getSubPart() . ')';                }                $r .= '</td>';                $r .= '<td>' . htmlspecialchars($column->getCardinality()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getCollation()) . '</td>';                $r .= '<td>' . htmlspecialchars($column->getNull(true)) . '</td>';                if ($column->getSeqInIndex() == 1) {                    $r .= '<td ' . $row_span . '>'                        . htmlspecialchars($index->getComments()) . '</td>';                }                $r .= '</tr>';            } // end foreach $index['Sequences']            $odd_row = ! $odd_row;        } // end while        $r .= '</tbody>';        $r .= '</table>';        $r .= '</fieldset>';        return $r;    }    public function getCompareData()    {        $data = array(            // 'Non_unique'    => $this->_non_unique,            'Packed'        => $this->_packed,            'Index_type'    => $this->_type,        );        foreach ($this->_columns as $column) {            $data['columns'][] = $column->getCompareData();        }        return $data;    }    /**     * Function to check over array of indexes and look for common problems     *     * @access  public     * @param string      name of table     * @return  string      Output HTML     */    static public function findDuplicates($table, $schema)    {        $indexes = PMA_Index::getFromTable($table, $schema);        $output  = '';        // count($indexes) < 2:        //   there is no need to check if there less than two indexes        if (count($indexes) < 2) {            return $output;        }        // remove last index from stack and ...        while ($while_index = array_pop($indexes)) {            // ... compare with every remaining index in stack            foreach ($indexes as $each_index) {                if ($each_index->getCompareData() !== $while_index->getCompareData()) {                    continue;                }                // did not find any difference                // so it makes no sense to have this two equal indexes                $message = PMA_Message::notice(__('The indexes %1$s and %2$s seem to be equal and one of them could possibly be removed.'));                $message->addParam($each_index->getName());                $message->addParam($while_index->getName());                $output .= $message->getDisplay();                // there is no need to check any further indexes if we have already                // found that this one has a duplicate                continue 2;            }        }        return $output;    }}/** * @package PhpMyAdmin */class PMA_Index_Column{    /**     * @var string The column name     */    protected $_name = '';    /**     * @var integer The column sequence number in the index, starting with 1.     */    protected $_seq_in_index = 1;    /**     * @var string How the column is sorted in the index. A (Ascending) or NULL (Not sorted)     */    protected $_collation = null;    /**     * The number of indexed characters if the column is only partly indexed,     * NULL if the entire column is indexed.     *     * @var integer     */    protected $_sub_part = null;    /**     * Contains YES if the column may contain NULL.     * If not, the column contains NO.     *     * @var string     */    protected $_null = '';    /**     * An estimate of the number of unique values in the index. This is updated     * by running ANALYZE TABLE or myisamchk -a. Cardinality is counted based on     * statistics stored as integers, so the value is not necessarily exact even     * for small tables. The higher the cardinality, the greater the chance that     * MySQL uses the index when doing joins.     *     * @var integer     */    protected $_cardinality = null;    public function __construct($params = array())    {        $this->set($params);    }    public function set($params)    {        if (isset($params['Column_name'])) {            $this->_name = $params['Column_name'];        }        if (isset($params['Seq_in_index'])) {            $this->_seq_in_index = $params['Seq_in_index'];        }        if (isset($params['Collation'])) {            $this->_collation = $params['Collation'];        }        if (isset($params['Cardinality'])) {            $this->_cardinality = $params['Cardinality'];        }        if (isset($params['Sub_part'])) {            $this->_sub_part = $params['Sub_part'];        }        if (isset($params['Null'])) {            $this->_null = $params['Null'];        }    }    public function getName()    {        return $this->_name;    }    public function getCollation()    {        return $this->_collation;    }    public function getCardinality()    {        return $this->_cardinality;    }    public function getNull($as_text = false)    {        return $as_text            ? (!$this->_null || $this->_null == 'NO' ? __('No') : __('Yes'))            : $this->_null;    }    public function getSeqInIndex()    {        return $this->_seq_in_index;    }    public function getSubPart()    {        return $this->_sub_part;    }    public function getCompareData()    {        return array(            'Column_name'   => $this->_name,            'Seq_in_index'  => $this->_seq_in_index,            'Collation'     => $this->_collation,            'Sub_part'      => $this->_sub_part,            'Null'          => $this->_null,        );    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends the beginning of the html page then returns to the calling script */// Defines the cell alignment values depending on text directionif ($GLOBALS['text_dir'] == 'ltr') {    $GLOBALS['cell_align_left']  = 'left';    $GLOBALS['cell_align_right'] = 'right';} else {    $GLOBALS['cell_align_left']  = 'right';    $GLOBALS['cell_align_right'] = 'left';}// removes the bug with the horizontal scrollbar in IE (it's allways shown, if need it or not)// xml declaration moves IE into quirks mode, making much trouble with CSS/* echo '<?xml version="1.0" encoding="utf-8"?>'; */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" lang="<?php echo $GLOBALS['available_languages'][$GLOBALS['lang']][1]; ?>" dir="<?php echo $GLOBALS['text_dir']; ?>"><head>    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <title><?php    if (!empty($page_title)) {        echo htmlspecialchars($page_title);    } else {        echo 'phpMyAdmin';    }?></title>    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>phpmyadmin.css.php<?php echo PMA_generate_common_url(array('server' => $GLOBALS['server'])); ?>&amp;js_frame=<?php echo isset($print_view) ? 'print' : 'right'; ?>&amp;nocache=<?php echo $GLOBALS['PMA_Config']->getThemeUniqueValue(); ?>" />    <link rel="stylesheet" type="text/css" href="<?php echo defined('PMA_PATH_TO_BASEDIR') ? PMA_PATH_TO_BASEDIR : ''; ?>print.css" media="print" />    <link rel="stylesheet" type="text/css" href="<?php echo $GLOBALS['pmaThemePath']; ?>/jquery/jquery-ui-1.8.16.custom.css" />    <meta name="robots" content="noindex,nofollow" />
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require './libraries/StorageEngine.class.php';/** * Include settings for relation stuff * get all variables needed for exporting relational schema * in $cfgRelation */require_once './libraries/relation.lib.php';$cfgRelation = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';require_once './libraries/Index.class.php';require_once "./libraries/schema/Export_Relation_Schema.class.php";/** * get all the export options and verify * call and include the appropriate Schema Class depending on $export_type * default is PDF */global  $db, $export_type;if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {    $export_type = 'pdf';}PMA_DBI_select_db($db);$path = PMA_securePath(ucfirst($export_type));if (!file_exists('./libraries/schema/' . $path . '_Relation_Schema.class.php')) {    PMA_Export_Relation_Schema::dieSchema($_POST['chpage'], $export_type, __('File doesn\'t exist'));}require "./libraries/schema/".$path."_Relation_Schema.class.php";$obj_schema = eval("new PMA_".$path."_Relation_Schema();");
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Interface to the improved MySQL extension (MySQLi) * * @package PhpMyAdmin-DBI-MySQLi */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/logging.lib.php';/** * MySQL client API */if (!defined('PMA_MYSQL_CLIENT_API')) {    $client_api = explode('.', mysqli_get_client_info());    define('PMA_MYSQL_CLIENT_API', (int)sprintf('%d%02d%02d', $client_api[0], $client_api[1], intval($client_api[2])));    unset($client_api);}/** * some PHP versions are reporting extra messages like "No index used in query" */mysqli_report(MYSQLI_REPORT_OFF);/** * some older mysql client libs are missing these constants ... */if (! defined('MYSQLI_BINARY_FLAG')) {   define('MYSQLI_BINARY_FLAG', 128);}/** * @see http://bugs.php.net/36007 */if (! defined('MYSQLI_TYPE_NEWDECIMAL')) {    define('MYSQLI_TYPE_NEWDECIMAL', 246);}if (! defined('MYSQLI_TYPE_BIT')) {    define('MYSQLI_TYPE_BIT', 16);}// for Drizzleif (! defined('MYSQLI_TYPE_VARCHAR')) {    define('MYSQLI_TYPE_VARCHAR', 15);}/** * Helper function for connecting to the database server * * @param   mysqli  $link * @param   string  $host * @param   string  $user * @param   string  $password * @param   string  $dbname * @param   int     $server_port * @param   string  $server_socket * @param   int     $client_flags * @param   bool    $persistent * @return  bool */function PMA_DBI_real_connect($link, $host, $user, $password, $dbname, $server_port, $server_socket, $client_flags = null, $persistent = false){    global $cfg;    // mysqli persistent connections only on PHP 5.3+    if (PMA_PHP_INT_VERSION >= 50300) {        if ($cfg['PersistentConnections'] || $persistent) {            $host = 'p:' . $host;        }    }    if ($client_flags === null) {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket        );    } else {        return @mysqli_real_connect(            $link,            $host,            $user,            $password,            $dbname,            $server_port,            $server_socket,            $client_flags        );    }}/** * connects to the database server * * @param   string  $user           mysql user name * @param   string  $password       mysql user password * @param   bool    $is_controluser * @param   array   $server host/port/socket * @param   bool    $auxiliary_connection (when true, don't go back to login if connection fails) * @return  mixed   false on error or a mysqli object on success */function PMA_DBI_connect($user, $password, $is_controluser = false, $server = null, $auxiliary_connection = false){    global $cfg;    if ($server) {        $server_port   = (empty($server['port']))            ? false            : (int)$server['port'];        $server_socket = (empty($server['socket']))            ? ''            : $server['socket'];        $server['host'] = (empty($server['host']))            ? 'localhost'            : $server['host'];    } else {        $server_port   = (empty($cfg['Server']['port']))            ? false            : (int) $cfg['Server']['port'];        $server_socket = (empty($cfg['Server']['socket']))            ? null            : $cfg['Server']['socket'];    }    // NULL enables connection to the default socket    $link = mysqli_init();    mysqli_options($link, MYSQLI_OPT_LOCAL_INFILE, true);    $client_flags = 0;    /* Optionally compress connection */    if ($cfg['Server']['compress'] && defined('MYSQLI_CLIENT_COMPRESS')) {        $client_flags |= MYSQLI_CLIENT_COMPRESS;    }    /* Optionally enable SSL */    if ($cfg['Server']['ssl'] && defined('MYSQLI_CLIENT_SSL')) {        $client_flags |= MYSQLI_CLIENT_SSL;    }    if (!$server) {        $return_value = @PMA_DBI_real_connect(            $link,            $cfg['Server']['host'],            $user,            $password,            false,            $server_port,            $server_socket,            $client_flags        );        // Retry with empty password if we're allowed to        if ($return_value == false && isset($cfg['Server']['nopassword']) && $cfg['Server']['nopassword'] && !$is_controluser) {            $return_value = @PMA_DBI_real_connect(                $link,                $cfg['Server']['host'],                $user,                '',                false,                $server_port,                $server_socket,                $client_flags            );        }    } else {        $return_value = @PMA_DBI_real_connect(            $link,            $server['host'],            $user,            $password,            false,            $server_port,            $server_socket        );    }    if ($return_value == false) {        if ($is_controluser) {            trigger_error(                __('Connection for controluser as defined in your configuration failed.'),                E_USER_WARNING            );            return false;        }        // we could be calling PMA_DBI_connect() to connect to another        // server, for example in the Synchronize feature, so do not        // go back to main login if it fails        if (! $auxiliary_connection) {            PMA_log_user($user, 'mysql-denied');            PMA_auth_fails();        } else {            return false;        }    } else {        PMA_DBI_postConnect($link, $is_controluser);    }    return $link;}/** * selects given database * * @param string  $dbname  database name to select * @param mysqli  $link    the mysqli object * @return boolean */function PMA_DBI_select_db($dbname, $link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_select_db($link, $dbname);}/** * runs a query and returns the result * * @param   string  $query    query to execute * @param   mysqli  $link     mysqli object * @param   int     $options * @return  mysqli_result|bool */function PMA_DBI_real_query($query, $link, $options){    if ($options == ($options | PMA_DBI_QUERY_STORE)) {        $method = MYSQLI_STORE_RESULT;    } elseif ($options == ($options | PMA_DBI_QUERY_UNBUFFERED)) {        $method = MYSQLI_USE_RESULT;    } else {        $method = 0;    }    return mysqli_query($link, $query, $method);}/** * returns array of rows with associative and numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_array($result){    return mysqli_fetch_array($result, MYSQLI_BOTH);}/** * returns array of rows with associative keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_assoc($result){    return mysqli_fetch_array($result, MYSQLI_ASSOC);}/** * returns array of rows with numeric keys from $result * * @param   mysqli_result  $result * @return  array */function PMA_DBI_fetch_row($result){    return mysqli_fetch_array($result, MYSQLI_NUM);}/** * Adjusts the result pointer to an arbitrary row in the result * * @param   $result * @param   $offset * @return  bool  true on success, false on failure */function PMA_DBI_data_seek($result, $offset){    return mysqli_data_seek($result, $offset);}/** * Frees memory associated with the result * * @param  mysqli_result  $result */function PMA_DBI_free_result($result){    if ($result instanceof mysqli_result) {        mysqli_free_result($result);    }}/** * Check if there are any more query results from a multi query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_more_results($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_more_results($link);}/** * Prepare next result from multi_query * * @param   mysqli  $link  the mysqli object * @return  bool         true or false */function PMA_DBI_next_result($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_next_result($link);}/** * Returns a string representing the type of connection used * * @param   resource  $link  mysql link * @return  string          type of connection used */function PMA_DBI_get_host_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_host_info($link);}/** * Returns the version of the MySQL protocol used * * @param   resource  $link  mysql link * @return  integer         version of the MySQL protocol used */function PMA_DBI_get_proto_info($link = null){    if (null === $link) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    return mysqli_get_proto_info($link);}/** * returns a string that represents the client library version * * @return  string          MySQL client library version */function PMA_DBI_get_client_info(){    return mysqli_get_client_info();}/** * returns last error message or false if no errors occured * * @param   resource  $link  mysql link * @return  string|bool  $error or false */function PMA_DBI_getError($link = null){    $GLOBALS['errno'] = 0;    /* Treat false same as null because of controllink */    if ($link === false) {        $link = null;    }    if (null === $link && isset($GLOBALS['userlink'])) {        $link =& $GLOBALS['userlink'];        // Do not stop now. We still can get the error code        // with mysqli_connect_errno()//    } else {//        return false;    }    if (null !== $link) {        $error_number = mysqli_errno($link);        $error_message = mysqli_error($link);    } else {        $error_number = mysqli_connect_errno();        $error_message = mysqli_connect_error();    }    if (0 == $error_number) {        return false;    }    // keep the error number for further check after the call to PMA_DBI_getError()    $GLOBALS['errno'] = $error_number;    return PMA_DBI_formatError($error_number, $error_message);}/** * returns the number of rows returned by last query * * @param   mysqli_result  $result * @return  string|int */function PMA_DBI_num_rows($result){    // see the note for PMA_DBI_try_query();    if (!is_bool($result)) {        return @mysqli_num_rows($result);    } else {        return 0;    }}/** * returns last inserted auto_increment id for given $link or $GLOBALS['userlink'] * * @param   mysqli  $link  the mysqli object * @return  string|int */function PMA_DBI_insert_id($link = null){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    // When no controluser is defined, using mysqli_insert_id($link)    // does not always return the last insert id due to a mixup with    // the tracking mechanism, but this works:    return PMA_DBI_fetch_value('SELECT LAST_INSERT_ID();', 0, 0, $link);    // Curiously, this problem does not happen with the mysql extension but    // there is another problem with BIGINT primary keys so PMA_DBI_insert_id()    // in the mysql extension also uses this logic.}/** * returns the number of rows affected by last query * * @param   mysqli   $link            the mysqli object * @param   boolean  $get_from_cache * @return  string|int */function PMA_DBI_affected_rows($link = null, $get_from_cache = true){    if (empty($link)) {        if (isset($GLOBALS['userlink'])) {            $link = $GLOBALS['userlink'];        } else {            return false;        }    }    if ($get_from_cache) {        return $GLOBALS['cached_affected_rows'];    } else {        return mysqli_affected_rows($link);    }}/** * returns metainfo for fields in $result * * @param   mysqli_result  $result * @return  array  meta info for fields in $result */function PMA_DBI_get_fields_meta($result){    // Build an associative array for a type look up    $typeAr = array();    $typeAr[MYSQLI_TYPE_DECIMAL]     = 'real';    $typeAr[MYSQLI_TYPE_NEWDECIMAL]  = 'real';    $typeAr[MYSQLI_TYPE_BIT]         = 'int';    $typeAr[MYSQLI_TYPE_TINY]        = 'int';    $typeAr[MYSQLI_TYPE_SHORT]       = 'int';    $typeAr[MYSQLI_TYPE_LONG]        = 'int';    $typeAr[MYSQLI_TYPE_FLOAT]       = 'real';    $typeAr[MYSQLI_TYPE_DOUBLE]      = 'real';    $typeAr[MYSQLI_TYPE_NULL]        = 'null';    $typeAr[MYSQLI_TYPE_TIMESTAMP]   = 'timestamp';    $typeAr[MYSQLI_TYPE_LONGLONG]    = 'int';    $typeAr[MYSQLI_TYPE_INT24]       = 'int';    $typeAr[MYSQLI_TYPE_DATE]        = 'date';    $typeAr[MYSQLI_TYPE_TIME]        = 'time';    $typeAr[MYSQLI_TYPE_DATETIME]    = 'datetime';    $typeAr[MYSQLI_TYPE_YEAR]        = 'year';    $typeAr[MYSQLI_TYPE_NEWDATE]     = 'date';    $typeAr[MYSQLI_TYPE_ENUM]        = 'unknown';    $typeAr[MYSQLI_TYPE_SET]         = 'unknown';    $typeAr[MYSQLI_TYPE_TINY_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_MEDIUM_BLOB] = 'blob';    $typeAr[MYSQLI_TYPE_LONG_BLOB]   = 'blob';    $typeAr[MYSQLI_TYPE_BLOB]        = 'blob';    $typeAr[MYSQLI_TYPE_VAR_STRING]  = 'string';    $typeAr[MYSQLI_TYPE_STRING]      = 'string';    $typeAr[MYSQLI_TYPE_VARCHAR]     = 'string'; // for Drizzle    // MySQL returns MYSQLI_TYPE_STRING for CHAR    // and MYSQLI_TYPE_CHAR === MYSQLI_TYPE_TINY    // so this would override TINYINT and mark all TINYINT as string    // https://sf.net/tracker/?func=detail&aid=1532111&group_id=23067&atid=377408    //$typeAr[MYSQLI_TYPE_CHAR]        = 'string';    $typeAr[MYSQLI_TYPE_GEOMETRY]    = 'geometry';    $typeAr[MYSQLI_TYPE_BIT]         = 'bit';    $fields = mysqli_fetch_fields($result);    // this happens sometimes (seen under MySQL 4.0.25)    if (!is_array($fields)) {        return false;    }    foreach ($fields as $k => $field) {        $fields[$k]->_type = $field->type;        $fields[$k]->type = $typeAr[$field->type];        $fields[$k]->_flags = $field->flags;        $fields[$k]->flags = PMA_DBI_field_flags($result, $k);        // Enhance the field objects for mysql-extension compatibilty        //$flags = explode(' ', $fields[$k]->flags);        //array_unshift($flags, 'dummy');        $fields[$k]->multiple_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_MULTIPLE_KEY_FLAG);        $fields[$k]->primary_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_PRI_KEY_FLAG);        $fields[$k]->unique_key            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNIQUE_KEY_FLAG);        $fields[$k]->not_null            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NOT_NULL_FLAG);        $fields[$k]->unsigned            = (int) (bool) ($fields[$k]->_flags & MYSQLI_UNSIGNED_FLAG);        $fields[$k]->zerofill            = (int) (bool) ($fields[$k]->_flags & MYSQLI_ZEROFILL_FLAG);        $fields[$k]->numeric            = (int) (bool) ($fields[$k]->_flags & MYSQLI_NUM_FLAG);        $fields[$k]->blob            = (int) (bool) ($fields[$k]->_flags & MYSQLI_BLOB_FLAG);    }    return $fields;}/** * return number of fields in given $result * * @param   mysqli_result  $result * @return  int  field count */function PMA_DBI_num_fields($result){    return mysqli_num_fields($result);}/** * returns the length of the given field $i in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  int  length of field */function PMA_DBI_field_len($result, $i){    return mysqli_fetch_field_direct($result, $i)->length;}/** * returns name of $i. field in $result * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  name of $i. field in $result */function PMA_DBI_field_name($result, $i){    return mysqli_fetch_field_direct($result, $i)->name;}/** * returns concatenated string of human readable field flags * * @param   mysqli_result  $result * @param   int            $i       field * @return  string  field flags */function PMA_DBI_field_flags($result, $i){    // This is missing from PHP 5.2.5, see http://bugs.php.net/bug.php?id=44846    if (! defined('MYSQLI_ENUM_FLAG')) {        define('MYSQLI_ENUM_FLAG', 256); // see MySQL source include/mysql_com.h    }    $f = mysqli_fetch_field_direct($result, $i);    $type = $f->type;    $charsetnr = $f->charsetnr;    $f = $f->flags;    $flags = '';    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique ';    }    if ($f & MYSQLI_NUM_FLAG) {        $flags .= 'num ';    }    if ($f & MYSQLI_PART_KEY_FLAG) {        $flags .= 'part_key ';    }    if ($f & MYSQLI_SET_FLAG) {        $flags .= 'set ';    }    if ($f & MYSQLI_TIMESTAMP_FLAG) {        $flags .= 'timestamp ';    }    if ($f & MYSQLI_AUTO_INCREMENT_FLAG) {        $flags .= 'auto_increment ';    }    if ($f & MYSQLI_ENUM_FLAG) {        $flags .= 'enum ';    }    // See http://dev.mysql.com/doc/refman/6.0/en/c-api-datatypes.html:    // to determine if a string is binary, we should not use MYSQLI_BINARY_FLAG    // but instead the charsetnr member of the MYSQL_FIELD    // structure. Watch out: some types like DATE returns 63 in charsetnr    // so we have to check also the type.    // Unfortunately there is no equivalent in the mysql extension.    if (($type == MYSQLI_TYPE_TINY_BLOB || $type == MYSQLI_TYPE_BLOB || $type == MYSQLI_TYPE_MEDIUM_BLOB || $type == MYSQLI_TYPE_LONG_BLOB || $type == MYSQLI_TYPE_VAR_STRING || $type == MYSQLI_TYPE_STRING) && 63 == $charsetnr) {        $flags .= 'binary ';    }    if ($f & MYSQLI_ZEROFILL_FLAG) {        $flags .= 'zerofill ';    }    if ($f & MYSQLI_UNSIGNED_FLAG) {        $flags .= 'unsigned ';    }    if ($f & MYSQLI_BLOB_FLAG) {        $flags .= 'blob ';    }    if ($f & MYSQLI_MULTIPLE_KEY_FLAG) {        $flags .= 'multiple_key ';    }    if ($f & MYSQLI_UNIQUE_KEY_FLAG) {        $flags .= 'unique_key ';    }    if ($f & MYSQLI_PRI_KEY_FLAG) {        $flags .= 'primary_key ';    }    if ($f & MYSQLI_NOT_NULL_FLAG) {        $flags .= 'not_null ';    }    return trim($flags);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'import.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';$import_type = 'server';require './libraries/display_import.lib.php';/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Misc functions used all over the scripts. * * @package PhpMyAdmin *//** * Detects which function to use for PMA_pow. * * @return string Function name. */function PMA_detect_pow(){    if (function_exists('bcpow')) {        // BCMath Arbitrary Precision Mathematics Function        return 'bcpow';    } elseif (function_exists('gmp_pow')) {        // GMP Function        return 'gmp_pow';    } else {        // PHP function        return 'pow';    }}/** * Exponential expression / raise number into power * * @param string $base         base to raise * @param string $exp          exponent to use * @param mixed  $use_function pow function to use, or false for auto-detect * * @return mixed string or float */function PMA_pow($base, $exp, $use_function = false){    static $pow_function = null;    if (null == $pow_function) {        $pow_function = PMA_detect_pow();    }    if (! $use_function) {        $use_function = $pow_function;    }    if ($exp < 0 && 'pow' != $use_function) {        return false;    }    switch ($use_function) {    case 'bcpow' :        // bcscale() needed for testing PMA_pow() with base values < 1        bcscale(10);        $pow = bcpow($base, $exp);        break;    case 'gmp_pow' :         $pow = gmp_strval(gmp_pow($base, $exp));        break;    case 'pow' :        $base = (float) $base;        $exp = (int) $exp;        $pow = pow($base, $exp);        break;    default:        $pow = $use_function($base, $exp);    }    return $pow;}/** * Returns an HTML IMG tag for a particular icon from a theme, * which may be an actual file or an icon from a sprite. * This function takes into account the PropertiesIconic * configuration setting and wraps the image tag in a span tag. * * @param string  $icon       name of icon file * @param string  $alternate  alternate text * @param boolean $force_text whether to force alternate text to be displayed * * @return string an html snippet */function PMA_getIcon($icon, $alternate = '', $force_text = false){    // $cfg['PropertiesIconic'] is true or both    $include_icon = ($GLOBALS['cfg']['PropertiesIconic'] !== false);    // $cfg['PropertiesIconic'] is false or both    // OR we have no $include_icon    $include_text = ($force_text || true !== $GLOBALS['cfg']['PropertiesIconic']);    // Always use a span (we rely on this in js/sql.js)    $button = '<span class="nowrap">';    if ($include_icon) {        $button .= PMA_getImage($icon, $alternate);    }    if ($include_icon && $include_text) {        $button .= ' ';    }    if ($include_text) {        $button .= $alternate;    }    $button .= '</span>';    return $button;}/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string $image      The name of the file to get * @param string $alternate  Used to set 'alt' and 'title' attributes of the image * @param array  $attributes An associative array of other attributes * * @return string an html IMG tag */function PMA_getImage($image, $alternate = '', $attributes = array()){    static $sprites; // cached list of available sprites (if any)    $url       = '';    $is_sprite = false;    $alternate = htmlspecialchars($alternate);    // If it's the first time this function is called    if (! isset($sprites)) {        // Try to load the list of sprites        if (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {            include_once $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';            $sprites = PMA_sprites();        } else {            // No sprites are available for this theme            $sprites = array();        }    }    // Check if we have the requested image as a sprite    //  and set $url accordingly    $class = str_replace(array('.gif','.png'), '', $image);    if (array_key_exists($class, $sprites)) {        $is_sprite = true;        $url = 'themes/dot.gif';    } else {        $url = $GLOBALS['pmaThemeImage'] . $image;    }    // set class attribute    if ($is_sprite) {        if (isset($attributes['class'])) {            $attributes['class'] = "icon ic_$class " . $attributes['class'];        } else {            $attributes['class'] = "icon ic_$class";        }    }    // set all other attributes    $attr_str = '';    foreach ($attributes as $key => $value) {        if (! in_array($key, array('alt', 'title'))) {            $attr_str .= " $key=\"$value\"";        }    }    // override the alt attribute    if (isset($attributes['alt'])) {        $alt = $attributes['alt'];    } else {        $alt = $alternate;    }    // override the title attribute    if (isset($attributes['title'])) {        $title = $attributes['title'];    } else {        $title = $alternate;    }    // generate the IMG tag    $template = '<img src="%s" title="%s" alt="%s"%s />';    $retval = sprintf($template, $url, $title, $alt, $attr_str);    return $retval;}/** * Displays the maximum size for an upload * * @param integer $max_upload_size the size * * @return string the message * * @access  public */function PMA_displayMaximumUploadSize($max_upload_size){    // I have to reduce the second parameter (sensitiveness) from 6 to 4    // to avoid weird results like 512 kKib    list($max_size, $max_unit) = PMA_formatByteDown($max_upload_size, 4);    return '(' . sprintf(__('Max: %s%s'), $max_size, $max_unit) . ')';}/** * Generates a hidden field which should indicate to the browser * the maximum size for upload * * @param integer $max_size the size * * @return string the INPUT field * * @access  public */function PMA_generateHiddenMaxFileSize($max_size){    return '<input type="hidden" name="MAX_FILE_SIZE" value="' .$max_size . '" />';}/** * Add slashes before "'" and "\" characters so a value containing them can * be used in a sql comparison. * * @param string $a_string the string to slash * @param bool   $is_like  whether the string will be used in a 'LIKE' clause *                         (it then requires two more escaped sequences) or not * @param bool   $crlf     whether to treat cr/lfs as escape-worthy entities *                         (converts \n to \\n, \r to \\r) * @param bool   $php_code whether this function is used as part of the *                         "Create PHP code" dialog * * @return  string   the slashed string * * @access  public */function PMA_sqlAddSlashes($a_string = '', $is_like = false, $crlf = false, $php_code = false){    if ($is_like) {        $a_string = str_replace('\\', '\\\\\\\\', $a_string);    } else {        $a_string = str_replace('\\', '\\\\', $a_string);    }    if ($crlf) {        $a_string = strtr(            $a_string,            array("\n" => '\n', "\r" => '\r', "\t" => '\t')        );    }    if ($php_code) {        $a_string = str_replace('\'', '\\\'', $a_string);    } else {        $a_string = str_replace('\'', '\'\'', $a_string);    }    return $a_string;} // end of the 'PMA_sqlAddSlashes()' function/** * Add slashes before "_" and "%" characters for using them in MySQL * database, table and field names. * Note: This function does not escape backslashes! * * @param string $name the string to escape * * @return string the escaped string * * @access  public */function PMA_escape_mysql_wildcards($name){    return strtr($name, array('_' => '\\_', '%' => '\\%'));} // end of the 'PMA_escape_mysql_wildcards()' function/** * removes slashes before "_" and "%" characters * Note: This function does not unescape backslashes! * * @param string $name the string to escape * * @return  string   the escaped string * * @access  public */function PMA_unescape_mysql_wildcards($name){    return strtr($name, array('\\_' => '_', '\\%' => '%'));} // end of the 'PMA_unescape_mysql_wildcards()' function/** * removes quotes (',",`) from a quoted string * * checks if the sting is quoted and removes this quotes * * @param string $quoted_string string to remove quotes from * @param string $quote         type of quote to remove * * @return string unqoted string */function PMA_unQuote($quoted_string, $quote = null){    $quotes = array();    if (null === $quote) {        $quotes[] = '`';        $quotes[] = '"';        $quotes[] = "'";    } else {        $quotes[] = $quote;    }    foreach ($quotes as $quote) {        if (substr($quoted_string, 0, 1) === $quote            && substr($quoted_string, -1, 1) === $quote        ) {            $unquoted_string = substr($quoted_string, 1, -1);            // replace escaped quotes            $unquoted_string = str_replace(                $quote . $quote,                $quote,                $unquoted_string            );            return $unquoted_string;        }    }    return $quoted_string;}/** * format sql strings * * @param mixed  $parsed_sql   pre-parsed SQL structure * @param string $unparsed_sql raw SQL string * * @return string  the formatted sql * * @global  array    the configuration array * @global  boolean  whether the current statement is a multiple one or not * * @access  public * @todo    move into PMA_Sql */function PMA_formatSql($parsed_sql, $unparsed_sql = ''){    global $cfg;    // Check that we actually have a valid set of parsed data    // well, not quite    // first check for the SQL parser having hit an error    if (PMA_SQP_isError()) {        return htmlspecialchars($parsed_sql['raw']);    }    // then check for an array    if (! is_array($parsed_sql)) {        // We don't so just return the input directly        // This is intended to be used for when the SQL Parser is turned off        $formatted_sql = "<pre>\n";        if ($cfg['SQP']['fmtType'] == 'none' && $unparsed_sql != '') {            $formatted_sql .= $unparsed_sql;        } else {            $formatted_sql .= $parsed_sql;        }        $formatted_sql .= "\n</pre>";        return $formatted_sql;    }    $formatted_sql        = '';    switch ($cfg['SQP']['fmtType']) {    case 'none':        if ($unparsed_sql != '') {            $formatted_sql = '<span class="inner_sql"><pre>' . "\n"                . PMA_SQP_formatNone(array('raw' => $unparsed_sql)) . "\n"                . '</pre></span>';        } else {            $formatted_sql = PMA_SQP_formatNone($parsed_sql);        }        break;    case 'html':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'color');        break;    case 'text':        $formatted_sql = PMA_SQP_formatHtml($parsed_sql, 'text');        break;    default:        break;    } // end switch    return $formatted_sql;} // end of the "PMA_formatSql()" function/** * Displays a link to the official MySQL documentation * * @param string $chapter   chapter of "HTML, one page per chapter" documentation * @param string $link      contains name of page/anchor that is being linked * @param bool   $big_icon  whether to use big icon (like in left frame) * @param string $anchor    anchor to page part * @param bool   $just_open whether only the opening <a> tag should be returned * * @return  string  the html link * * @access  public */function PMA_showMySQLDocu($chapter, $link, $big_icon = false, $anchor = '', $just_open = false){    global $cfg;    if ($cfg['MySQLManualType'] == 'none' || empty($cfg['MySQLManualBase'])) {        return '';    }    // Fixup for newly used names:    $chapter = str_replace('_', '-', strtolower($chapter));    $link = str_replace('_', '-', strtolower($link));    switch ($cfg['MySQLManualType']) {    case 'chapters':        if (empty($chapter)) {            $chapter = 'index';        }        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '/' . $chapter . '.html#' . $anchor;        break;    case 'big':        if (empty($anchor)) {            $anchor = $link;        }        $url = $cfg['MySQLManualBase'] . '#' . $anchor;        break;    case 'searchable':        if (empty($link)) {            $link = 'index';        }        $url = $cfg['MySQLManualBase'] . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    case 'viewable':    default:        if (empty($link)) {            $link = 'index';        }        $mysql = '5.0';        $lang = 'en';        if (defined('PMA_MYSQL_INT_VERSION')) {            if (PMA_MYSQL_INT_VERSION >= 50500) {                $mysql = '5.5';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.5 documentation language', 'en');            } else if (PMA_MYSQL_INT_VERSION >= 50100) {                $mysql = '5.1';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.1 documentation language', 'en');            } else {                $mysql = '5.0';                /* l10n: Please check that translation actually exists. */                $lang = _pgettext('MySQL 5.0 documentation language', 'en');            }        }        $url = $cfg['MySQLManualBase'] . '/' . $mysql . '/' . $lang . '/' . $link . '.html';        if (!empty($anchor)) {            $url .= '#' . $anchor;        }        break;    }    $open_link = '<a href="' . PMA_linkURL($url) . '" target="mysql_doc">';    if ($just_open) {        return $open_link;    } elseif ($big_icon) {        return $open_link . PMA_getImage('b_sqlhelp.png', __('Documentation')) . '</a>';    } elseif ($GLOBALS['cfg']['ReplaceHelpImg']) {        return $open_link . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        return '[' . $open_link . __('Documentation') . '</a>]';    }} // end of the 'PMA_showMySQLDocu()' function/** * Displays a link to the phpMyAdmin documentation * * @param string $anchor anchor in documentation * * @return  string  the html link * * @access  public */function PMA_showDocu($anchor){    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="Documentation.html#' . $anchor . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="Documentation.html#' . $anchor . '" target="documentation">'        . __('Documentation') . '</a>]';    }} // end of the 'PMA_showDocu()' function/** * Displays a link to the PHP documentation * * @param string $target anchor in documentation * * @return string  the html link * * @access  public */function PMA_showPHPDocu($target){    $url = PMA_getPHPDocLink($target);    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        return '<a href="' . $url . '" target="documentation">'             . PMA_getImage('b_help.png', __('Documentation'))             . '</a>';    } else {        return '[<a href="' . $url . '" target="documentation">' . __('Documentation') . '</a>]';    }} // end of the 'PMA_showPHPDocu()' function/** * returns HTML for a footnote marker and add the messsage to the footnotes * * @param string $message the error message * @param bool   $bbcode * @param string $type    message types * * @return  string html code for a footnote marker * * @access  public */function PMA_showHint($message, $bbcode = false, $type = 'notice'){    if ($message instanceof PMA_Message) {        $key = $message->getHash();        $type = $message->getLevel();    } else {        $key = md5($message);    }    if (! isset($GLOBALS['footnotes'][$key])) {        if (empty($GLOBALS['footnotes']) || ! is_array($GLOBALS['footnotes'])) {            $GLOBALS['footnotes'] = array();        }        $nr = count($GLOBALS['footnotes']) + 1;        $GLOBALS['footnotes'][$key] = array(            'note'      => $message,            'type'      => $type,            'nr'        => $nr,        );    } else {        $nr = $GLOBALS['footnotes'][$key]['nr'];    }    if ($bbcode) {        return '[sup]' . $nr . '[/sup]';    }    // footnotemarker used in js/tooltip.js    return '<sup class="footnotemarker">' . $nr . '</sup>' .           PMA_getImage('b_help.png', '', array('class' => 'footnotemarker footnote_' . $nr));}/** * Displays a MySQL error message in the right frame. * * @param string $error_message  the error message * @param string $the_query      the sql query that failed * @param bool   $is_modify_link whether to show a "modify" link or not * @param string $back_url       the "back" link url (full path is not required) * @param bool   $exit           EXIT the page? * * @global  string    the curent table * @global  string    the current db * * @access  public */function PMA_mysqlDie($error_message = '', $the_query = '',$is_modify_link = true, $back_url = '', $exit = true){    global $table, $db;    /**     * start http output, display html headers     */    include_once './libraries/header.inc.php';    $error_msg_output = '';    if (!$error_message) {        $error_message = PMA_DBI_getError();    }    if (!$the_query && !empty($GLOBALS['sql_query'])) {        $the_query = $GLOBALS['sql_query'];    }    // --- Added to solve bug #641765    if (!function_exists('PMA_SQP_isError') || PMA_SQP_isError()) {        $formatted_sql = htmlspecialchars($the_query);    } elseif (empty($the_query) || trim($the_query) == '') {        $formatted_sql = '';    } else {        if (strlen($the_query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {            $formatted_sql = htmlspecialchars(substr($the_query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'])) . '[...]';        } else {            $formatted_sql = PMA_formatSql(PMA_SQP_parse($the_query), $the_query);        }    }    // ---    $error_msg_output .= "\n" . '<!-- PMA-SQL-ERROR -->' . "\n";    $error_msg_output .= '    <div class="error"><h1>' . __('Error') . '</h1>' . "\n";    // if the config password is wrong, or the MySQL server does not    // respond, do not show the query that would reveal the    // username/password    if (!empty($the_query) && !strstr($the_query, 'connect')) {        // --- Added to solve bug #641765        if (function_exists('PMA_SQP_isError') && PMA_SQP_isError()) {            $error_msg_output .= PMA_SQP_getErrorString() . "\n";            $error_msg_output .= '<br />' . "\n";        }        // ---        // modified to show the help on sql errors        $error_msg_output .= '    <p><strong>' . __('SQL query') . ':</strong>' . "\n";        if (strstr(strtolower($formatted_sql), 'select')) {            // please show me help to the error on select            $error_msg_output .= PMA_showMySQLDocu('SQL-Syntax', 'SELECT');        }        if ($is_modify_link) {            $_url_params = array(                'sql_query' => $the_query,                'show_query' => 1,            );            if (strlen($table)) {                $_url_params['db'] = $db;                $_url_params['table'] = $table;                $doedit_goto = '<a href="tbl_sql.php' . PMA_generate_common_url($_url_params) . '">';            } elseif (strlen($db)) {                $_url_params['db'] = $db;                $doedit_goto = '<a href="db_sql.php' . PMA_generate_common_url($_url_params) . '">';            } else {                $doedit_goto = '<a href="server_sql.php' . PMA_generate_common_url($_url_params) . '">';            }            $error_msg_output .= $doedit_goto               . PMA_getIcon('b_edit.png', __('Edit'))               . '</a>';        } // end if        $error_msg_output .= '    </p>' . "\n"            .'    <p>' . "\n"            .'        ' . $formatted_sql . "\n"            .'    </p>' . "\n";    } // end if    if (! empty($error_message)) {        $error_message = preg_replace(            "@((\015\012)|(\015)|(\012)){3,}@",            "\n\n",            $error_message        );    }    // modified to show the help on error-returns    // (now error-messages-server)    $error_msg_output .= '<p>' . "\n"            . '    <strong>' . __('MySQL said: ') . '</strong>'            . PMA_showMySQLDocu('Error-messages-server', 'Error-messages-server')            . "\n"            . '</p>' . "\n";    // The error message will be displayed within a CODE segment.    // To preserve original formatting, but allow wordwrapping,    // we do a couple of replacements    // Replace all non-single blanks with their HTML-counterpart    $error_message = str_replace('  ', '&nbsp;&nbsp;', $error_message);    // Replace TAB-characters with their HTML-counterpart    $error_message = str_replace("\t", '&nbsp;&nbsp;&nbsp;&nbsp;', $error_message);    // Replace linebreaks    $error_message = nl2br($error_message);    $error_msg_output .= '<code>' . "\n"        . $error_message . "\n"        . '</code><br />' . "\n";    $error_msg_output .= '</div>';    $_SESSION['Import_message']['message'] = $error_msg_output;    if ($exit) {        /**         * If in an Ajax request         * - avoid displaying a Back link         * - use PMA_ajaxResponse() to transmit the message and exit         */        if ($GLOBALS['is_ajax_request'] == true) {            PMA_ajaxResponse($error_msg_output, false);        }        if (! empty($back_url)) {            if (strstr($back_url, '?')) {                $back_url .= '&amp;no_history=true';            } else {                $back_url .= '?no_history=true';            }            $_SESSION['Import_message']['go_back_url'] = $back_url;            $error_msg_output .= '<fieldset class="tblFooters">';            $error_msg_output .= '[ <a href="' . $back_url . '">' . __('Back') . '</a> ]';            $error_msg_output .= '</fieldset>' . "\n\n";        }        echo $error_msg_output;        /**         * display footer and exit         */        include './libraries/footer.inc.php';    } else {        echo $error_msg_output;    }} // end of the 'PMA_mysqlDie()' function/** * returns array with tables of given db with extended information and grouped * * @param string   $db           name of db * @param string   $tables       name of tables * @param integer  $limit_offset list offset * @param int|bool $limit_count  max tables to return * * @return  array    (recursive) grouped table list */function PMA_getTableList($db, $tables = null, $limit_offset = 0, $limit_count = false){    $sep = $GLOBALS['cfg']['LeftFrameTableSeparator'];    if (null === $tables) {        $tables = PMA_DBI_get_tables_full($db, false, false, null, $limit_offset, $limit_count);        if ($GLOBALS['cfg']['NaturalOrder']) {            uksort($tables, 'strnatcasecmp');        }    }    if (count($tables) < 1) {        return $tables;    }    $default = array(        'Name'      => '',        'Rows'      => 0,        'Comment'   => '',        'disp_name' => '',    );    $table_groups = array();    // for blobstreaming - list of blobstreaming tables    // load PMA configuration    $PMA_Config = $GLOBALS['PMA_Config'];    foreach ($tables as $table_name => $table) {        // if BS tables exist        if (PMA_BS_IsHiddenTable($table_name)) {            continue;        }        // check for correct row count        if (null === $table['Rows']) {            // Do not check exact row count here,            // if row count is invalid possibly the table is defect            // and this would break left frame;            // but we can check row count if this is a view or the            // information_schema database            // since PMA_Table::countRecords() returns a limited row count            // in this case.            // set this because PMA_Table::countRecords() can use it            $tbl_is_view = $table['TABLE_TYPE'] == 'VIEW';            if ($tbl_is_view || PMA_is_system_schema($db)) {                $table['Rows'] = PMA_Table::countRecords($db, $table['Name'], false, true);            }        }        // in $group we save the reference to the place in $table_groups        // where to store the table info        if ($GLOBALS['cfg']['LeftFrameDBTree']            && $sep && strstr($table_name, $sep)        ) {            $parts = explode($sep, $table_name);            $group =& $table_groups;            $i = 0;            $group_name_full = '';            $parts_cnt = count($parts) - 1;            while ($i < $parts_cnt                    && $i < $GLOBALS['cfg']['LeftFrameTableLevel']) {                $group_name = $parts[$i] . $sep;                $group_name_full .= $group_name;                if (! isset($group[$group_name])) {                    $group[$group_name] = array();                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } elseif (! isset($group[$group_name]['is' . $sep . 'group'])) {                    $table = $group[$group_name];                    $group[$group_name] = array();                    $group[$group_name][$group_name] = $table;                    unset($table);                    $group[$group_name]['is' . $sep . 'group'] = true;                    $group[$group_name]['tab' . $sep . 'count'] = 1;                    $group[$group_name]['tab' . $sep . 'group'] = $group_name_full;                } else {                    $group[$group_name]['tab' . $sep . 'count']++;                }                $group =& $group[$group_name];                $i++;            }        } else {            if (! isset($table_groups[$table_name])) {                $table_groups[$table_name] = array();            }            $group =& $table_groups;        }        if ($GLOBALS['cfg']['ShowTooltipAliasTB']            && $GLOBALS['cfg']['ShowTooltipAliasTB'] !== 'nested'            && $table['Comment'] // do not switch if the comment is empty        ) {            // switch tooltip and name            $table['disp_name'] = $table['Comment'];            $table['Comment'] = $table['Name'];        } else {            $table['disp_name'] = $table['Name'];        }        $group[$table_name] = array_merge($default, $table);    }    return $table_groups;}/* ----------------------- Set of misc functions ----------------------- *//** * Adds backquotes on both sides of a database, table or field name. * and escapes backquotes inside the name with another backquote * * example: * <code> * echo PMA_backquote('owner`s db'); // `owner``s db` * * </code> * * @param mixed   $a_name the database, table or field name to "backquote" *                        or array of it * @param boolean $do_it  a flag to bypass this function (used by dump *                        functions) * * @return  mixed    the "backquoted" database, table or field name * * @access  public */function PMA_backquote($a_name, $do_it = true){    if (is_array($a_name)) {        foreach ($a_name as &$data) {            $data = PMA_backquote($data, $do_it);        }        return $a_name;    }    if (! $do_it) {        global $PMA_SQPdata_forbidden_word;        if (! in_array(strtoupper($a_name), $PMA_SQPdata_forbidden_word)) {            return $a_name;        }    }    // '0' is also empty for php :-(    if (strlen($a_name) && $a_name !== '*') {        return '`' . str_replace('`', '``', $a_name) . '`';    } else {        return $a_name;    }} // end of the 'PMA_backquote()' function/** * Defines the <CR><LF> value depending on the user OS. * * @return  string   the <CR><LF> value to use * * @access  public */function PMA_whichCrlf(){    // The 'PMA_USR_OS' constant is defined in "./libraries/Config.class.php"    // Win case    if (PMA_USR_OS == 'Win') {        $the_crlf = "\r\n";    } else {        // Others        $the_crlf = "\n";    }    return $the_crlf;} // end of the 'PMA_whichCrlf()' function/** * Reloads navigation if needed. * * @param bool $jsonly prints out pure JavaScript * * @access  public */function PMA_reloadNavigation($jsonly=false){    // Reloads the navigation frame via JavaScript if required    if (isset($GLOBALS['reload']) && $GLOBALS['reload']) {        // one of the reasons for a reload is when a table is dropped        // in this case, get rid of the table limit offset, otherwise        // we have a problem when dropping a table on the last page        // and the offset becomes greater than the total number of tables        unset($_SESSION['tmp_user_values']['table_limit_offset']);        echo "\n";        $reload_url = './navigation.php?' . PMA_generate_common_url($GLOBALS['db'], '', '&');        if (!$jsonly) {            echo '<script type="text/javascript">' . PHP_EOL;        }    ?>//<![CDATA[if (typeof(window.parent) != 'undefined'    && typeof(window.parent.frame_navigation) != 'undefined'    && window.parent.goTo) {    window.parent.goTo('<?php echo $reload_url; ?>');}//]]><?php        if (!$jsonly) {            echo '</script>' . PHP_EOL;        }        unset($GLOBALS['reload']);    }}/** * displays the message and the query * usually the message is the result of the query executed * * @param string  $message   the message to display * @param string  $sql_query the query to display * @param string  $type      the type (level) of the message * @param boolean $is_view   is this a message after a VIEW operation? * * @return  string * * @access  public */function PMA_showMessage($message, $sql_query = null, $type = 'notice', $is_view = false){    /*     * PMA_ajaxResponse uses this function to collect the string of HTML generated     * for showing the message.  Use output buffering to collect it and return it     * in a string.  In some special cases on sql.php, buffering has to be disabled     * and hence we check with $GLOBALS['buffer_message']     */    if ( $GLOBALS['is_ajax_request'] == true && ! isset($GLOBALS['buffer_message']) ) {        ob_start();    }    global $cfg;    if (null === $sql_query) {        if (! empty($GLOBALS['display_query'])) {            $sql_query = $GLOBALS['display_query'];        } elseif ($cfg['SQP']['fmtType'] == 'none' && ! empty($GLOBALS['unparsed_sql'])) {            $sql_query = $GLOBALS['unparsed_sql'];        } elseif (! empty($GLOBALS['sql_query'])) {            $sql_query = $GLOBALS['sql_query'];        } else {            $sql_query = '';        }    }    if (isset($GLOBALS['using_bookmark_message'])) {        $GLOBALS['using_bookmark_message']->display();        unset($GLOBALS['using_bookmark_message']);    }    // Corrects the tooltip text via JS if required    // @todo this is REALLY the wrong place to do this - very unexpected here    if (! $is_view && strlen($GLOBALS['table']) && $cfg['ShowTooltip']) {        $tooltip = PMA_Table::sGetToolTip($GLOBALS['db'], $GLOBALS['table']);        $uni_tbl = PMA_jsFormat($GLOBALS['db'] . '.' . $GLOBALS['table'], false);        echo "\n";        echo '<script type="text/javascript">' . "\n";        echo '//<![CDATA[' . "\n";        echo "if (window.parent.updateTableTitle) window.parent.updateTableTitle('"            . $uni_tbl . "', '" . PMA_jsFormat($tooltip, false) . "');" . "\n";        echo '//]]>' . "\n";        echo '</script>' . "\n";    } // end if ... elseif    // Checks if the table needs to be repaired after a TRUNCATE query.    // @todo what about $GLOBALS['display_query']???    // @todo this is REALLY the wrong place to do this - very unexpected here    if (strlen($GLOBALS['table'])        && $GLOBALS['sql_query'] == 'TRUNCATE TABLE ' . PMA_backquote($GLOBALS['table'])    ) {        if (PMA_Table::sGetStatusInfo($GLOBALS['db'], $GLOBALS['table'], 'Index_length') > 1024 && !PMA_DRIZZLE) {            PMA_DBI_try_query('REPAIR TABLE ' . PMA_backquote($GLOBALS['table']));        }    }    unset($tbl_status);    // In an Ajax request, $GLOBALS['cell_align_left'] may not be defined. Hence,    // check for it's presence before using it    echo '<div id="result_query" align="'        . ( isset($GLOBALS['cell_align_left']) ? $GLOBALS['cell_align_left'] : '' )        . '">' . "\n";    if ($message instanceof PMA_Message) {        if (isset($GLOBALS['special_message'])) {            $message->addMessage($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        $message->display();        $type = $message->getLevel();    } else {        echo '<div class="' . $type . '">';        echo PMA_sanitize($message);        if (isset($GLOBALS['special_message'])) {            echo PMA_sanitize($GLOBALS['special_message']);            unset($GLOBALS['special_message']);        }        echo '</div>';    }    if ($cfg['ShowSQL'] == true && ! empty($sql_query)) {        // Html format the query to be displayed        // If we want to show some sql code it is easiest to create it here        /* SQL-Parser-Analyzer */        if (! empty($GLOBALS['show_as_php'])) {            $new_line = '\\n"<br />' . "\n"                . '&nbsp;&nbsp;&nbsp;&nbsp;. "';            $query_base = htmlspecialchars(addslashes($sql_query));            $query_base = preg_replace('/((\015\012)|(\015)|(\012))/', $new_line, $query_base);        } else {            $query_base = $sql_query;        }        $query_too_big = false;        if (strlen($query_base) > $cfg['MaxCharactersInDisplayedSQL']) {            // when the query is large (for example an INSERT of binary            // data), the parser chokes; so avoid parsing the query            $query_too_big = true;            $shortened_query_base = nl2br(                htmlspecialchars(                    substr($sql_query, 0, $cfg['MaxCharactersInDisplayedSQL']) . '[...]'                )            );        } elseif (! empty($GLOBALS['parsed_sql'])         && $query_base == $GLOBALS['parsed_sql']['raw']) {            // (here, use "! empty" because when deleting a bookmark,            // $GLOBALS['parsed_sql'] is set but empty            $parsed_sql = $GLOBALS['parsed_sql'];        } else {            // Parse SQL if needed            $parsed_sql = PMA_SQP_parse($query_base);        }        // Analyze it        if (isset($parsed_sql) && ! PMA_SQP_isError()) {            $analyzed_display_query = PMA_SQP_analyze($parsed_sql);            // Same as below (append LIMIT), append the remembered ORDER BY            if ($GLOBALS['cfg']['RememberSorting']                && isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_order_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_order_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);                // update the $analyzed_display_query                $analyzed_display_query[0]['section_before_limit'] .= $GLOBALS['sql_order_to_append'];                $analyzed_display_query[0]['order_by_clause'] = $GLOBALS['sorted_col'];            }            // Here we append the LIMIT added for navigation, to            // enable its display. Adding it higher in the code            // to $sql_query would create a problem when            // using the Refresh or Edit links.            // Only append it on SELECTs.            /**             * @todo what would be the best to do when someone hits Refresh:             * use the current LIMITs ?             */            if (isset($analyzed_display_query[0]['queryflags']['select_from'])                && isset($GLOBALS['sql_limit_to_append'])            ) {                $query_base = $analyzed_display_query[0]['section_before_limit']                    . "\n" . $GLOBALS['sql_limit_to_append']                    . $analyzed_display_query[0]['section_after_limit'];                // Need to reparse query                $parsed_sql = PMA_SQP_parse($query_base);            }        }        if (! empty($GLOBALS['show_as_php'])) {            $query_base = '$sql  = "' . $query_base;        } elseif (! empty($GLOBALS['validatequery'])) {            try {                $query_base = PMA_validateSQL($query_base);            } catch (Exception $e) {                PMA_Message::error(__('Failed to connect to SQL validator!'))->display();            }        } elseif (isset($parsed_sql)) {            $query_base = PMA_formatSql($parsed_sql, $query_base);        }        // Prepares links that may be displayed to edit/explain the query        // (don't go to default pages, we must go to the page        // where the query box is available)        // Basic url query part        $url_params = array();        if (! isset($GLOBALS['db'])) {            $GLOBALS['db'] = '';        }        if (strlen($GLOBALS['db'])) {            $url_params['db'] = $GLOBALS['db'];            if (strlen($GLOBALS['table'])) {                $url_params['table'] = $GLOBALS['table'];                $edit_link = 'tbl_sql.php';            } else {                $edit_link = 'db_sql.php';            }        } else {            $edit_link = 'server_sql.php';        }        // Want to have the query explained        // but only explain a SELECT (that has not been explained)        /* SQL-Parser-Analyzer */        $explain_link = '';        $is_select = false;        if (! empty($cfg['SQLQuery']['Explain']) && ! $query_too_big) {            $explain_params = $url_params;            // Detect if we are validating as well            // To preserve the validate uRL data            if (! empty($GLOBALS['validatequery'])) {                $explain_params['validatequery'] = 1;            }            if (preg_match('@^SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = 'EXPLAIN ' . $sql_query;                $_message = __('Explain SQL');                $is_select = true;            } elseif (preg_match('@^EXPLAIN[[:space:]]+SELECT[[:space:]]+@i', $sql_query)) {                $explain_params['sql_query'] = substr($sql_query, 8);                $_message = __('Skip Explain SQL');            }            if (isset($explain_params['sql_query'])) {                $explain_link = 'import.php' . PMA_generate_common_url($explain_params);                $explain_link = ' [' . PMA_linkOrButton($explain_link, $_message) . ']';            }        } //show explain        $url_params['sql_query']  = $sql_query;        $url_params['show_query'] = 1;        // even if the query is big and was truncated, offer the chance        // to edit it (unless it's enormous, see PMA_linkOrButton() )        if (! empty($cfg['SQLQuery']['Edit'])) {            if ($cfg['EditInWindow'] == true) {                $onclick = 'window.parent.focus_querywindow(\''                    . PMA_jsFormat($sql_query, false) . '\'); return false;';            } else {                $onclick = '';            }            $edit_link .= PMA_generate_common_url($url_params) . '#querybox';            $edit_link = ' [' . PMA_linkOrButton($edit_link, __('Edit'), array('onclick' => $onclick)) . ']';        } else {            $edit_link = '';        }        $url_qpart = PMA_generate_common_url($url_params);        // Also we would like to get the SQL formed in some nice        // php-code        if (! empty($cfg['SQLQuery']['ShowAsPHP']) && ! $query_too_big) {            $php_params = $url_params;            if (! empty($GLOBALS['show_as_php'])) {                $_message = __('Without PHP Code');            } else {                $php_params['show_as_php'] = 1;                $_message = __('Create PHP Code');            }            $php_link = 'import.php' . PMA_generate_common_url($php_params);            $php_link = ' [' . PMA_linkOrButton($php_link, $_message) . ']';            if (isset($GLOBALS['show_as_php'])) {                $runquery_link = 'import.php' . PMA_generate_common_url($url_params);                $php_link .= ' [' . PMA_linkOrButton($runquery_link, __('Submit Query')) . ']';            }        } else {            $php_link = '';        } //show as php        // Refresh query        if (! empty($cfg['SQLQuery']['Refresh'])            && ! isset($GLOBALS['show_as_php']) // 'Submit query' does the same            && preg_match('@^(SELECT|SHOW)[[:space:]]+@i', $sql_query)        ) {            $refresh_link = 'import.php' . PMA_generate_common_url($url_params);            $refresh_link = ' [' . PMA_linkOrButton($refresh_link, __('Refresh')) . ']';        } else {            $refresh_link = '';        } //refresh        if (! empty($cfg['SQLValidator']['use'])            && ! empty($cfg['SQLQuery']['Validate'])        ) {            $validate_params = $url_params;            if (!empty($GLOBALS['validatequery'])) {                $validate_message = __('Skip Validate SQL');            } else {                $validate_params['validatequery'] = 1;                $validate_message = __('Validate SQL');            }            $validate_link = 'import.php' . PMA_generate_common_url($validate_params);            $validate_link = ' [' . PMA_linkOrButton($validate_link, $validate_message) . ']';        } else {            $validate_link = '';        } //validator        if (!empty($GLOBALS['validatequery'])) {            echo '<div class="sqlvalidate">';        } else {            echo '<code class="sql">';        }        if ($query_too_big) {            echo $shortened_query_base;        } else {            echo $query_base;        }        //Clean up the end of the PHP        if (! empty($GLOBALS['show_as_php'])) {            echo '";';        }        if (!empty($GLOBALS['validatequery'])) {            echo '</div>';        } else {            echo '</code>';        }        echo '<div class="tools">';        // avoid displaying a Profiling checkbox that could        // be checked, which would reexecute an INSERT, for example        if (! empty($refresh_link)) {            PMA_profilingCheckbox($sql_query);        }        // if needed, generate an invisible form that contains controls for the        // Inline link; this way, the behavior of the Inline link does not        // depend on the profiling support or on the refresh link        if (empty($refresh_link) || ! PMA_profilingSupported()) {            echo '<form action="sql.php" method="post">';            echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);            echo '<input type="hidden" name="sql_query" value="'                . htmlspecialchars($sql_query) . '" />';            echo '</form>';        }        // in the tools div, only display the Inline link when not in ajax        // mode because 1) it currently does not work and 2) we would        // have two similar mechanisms on the page for the same goal        if ($is_select            || $GLOBALS['is_ajax_request'] === false            && ! $query_too_big        ) {            // see in js/functions.js the jQuery code attached to id inline_edit            // document.write conflicts with jQuery, hence used $().append()            echo "<script type=\"text/javascript\">\n" .                "//<![CDATA[\n" .                "$('.tools form').last().after('[<a href=\"#\" title=\"" .                PMA_escapeJsString(__('Inline edit of this query')) .                "\" class=\"inline_edit_sql\">" .                PMA_escapeJsString(_pgettext('Inline edit query', 'Inline')) .                "</a>]');\n" .                "//]]>\n" .                "</script>";        }        echo $edit_link . $explain_link . $php_link . $refresh_link . $validate_link;        echo '</div>';    }    echo '</div>';    if ($GLOBALS['is_ajax_request'] === false) {        echo '<br class="clearfloat" />';    }    // If we are in an Ajax request, we have most probably been called in    // PMA_ajaxResponse().  Hence, collect the buffer contents and return it    // to PMA_ajaxResponse(), which will encode it for JSON.    if ($GLOBALS['is_ajax_request'] == true        && ! isset($GLOBALS['buffer_message'])    ) {        $buffer_contents =  ob_get_contents();        ob_end_clean();        return $buffer_contents;    }    return null;} // end of the 'PMA_showMessage()' function/** * Verifies if current MySQL server supports profiling * * @access  public * * @return  boolean whether profiling is supported */function PMA_profilingSupported(){    if (! PMA_cacheExists('profiling_supported', true)) {        // 5.0.37 has profiling but for example, 5.1.20 does not        // (avoid a trip to the server for MySQL before 5.0.37)        // and do not set a constant as we might be switching servers        if (defined('PMA_MYSQL_INT_VERSION')            && PMA_MYSQL_INT_VERSION >= 50037            && PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'profiling'")        ) {            PMA_cacheSet('profiling_supported', true, true);        } else {            PMA_cacheSet('profiling_supported', false, true);        }    }    return PMA_cacheGet('profiling_supported', true);}/** * Displays a form with the Profiling checkbox * * @param string $sql_query sql query * * @access  public */function PMA_profilingCheckbox($sql_query){    if (PMA_profilingSupported()) {        echo '<form action="sql.php" method="post">' . "\n";        echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']);        echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";        echo '<input type="hidden" name="profiling_form" value="1" />' . "\n";        PMA_display_html_checkbox('profiling', __('Profiling'), isset($_SESSION['profiling']), true);        echo '<noscript><input type="submit" value="' . __('Go') . '" /></noscript>' . "\n";        echo '</form>' . "\n";    }}/** * Formats $value to byte view * * @param double $value the value to format * @param int    $limes the sensitiveness * @param int    $comma the number of decimals to retain * * @return   array    the formatted value and its unit * * @access  public */function PMA_formatByteDown($value, $limes = 6, $comma = 0){    if ($value === null) {        return null;    }    $byteUnits = array(        /* l10n: shortcuts for Byte */        __('B'),        /* l10n: shortcuts for Kilobyte */        __('KiB'),        /* l10n: shortcuts for Megabyte */        __('MiB'),        /* l10n: shortcuts for Gigabyte */        __('GiB'),        /* l10n: shortcuts for Terabyte */        __('TiB'),        /* l10n: shortcuts for Petabyte */        __('PiB'),        /* l10n: shortcuts for Exabyte */        __('EiB')        );    $dh   = PMA_pow(10, $comma);    $li   = PMA_pow(10, $limes);    $unit = $byteUnits[0];    for ($d = 6, $ex = 15; $d >= 1; $d--, $ex-=3) {        if (isset($byteUnits[$d]) && $value >= $li * PMA_pow(10, $ex)) {            // use 1024.0 to avoid integer overflow on 64-bit machines            $value = round($value / (PMA_pow(1024, $d) / $dh)) /$dh;            $unit = $byteUnits[$d];            break 1;        } // end if    } // end for    if ($unit != $byteUnits[0]) {        // if the unit is not bytes (as represented in current language)        // reformat with max length of 5        // 4th parameter=true means do not reformat if value < 1        $return_value = PMA_formatNumber($value, 5, $comma, true);    } else {        // do not reformat, just handle the locale        $return_value = PMA_formatNumber($value, 0);    }    return array(trim($return_value), $unit);} // end of the 'PMA_formatByteDown' function/** * Changes thousands and decimal separators to locale specific values. * * @param string $value the value * * @return string */function PMA_localizeNumber($value){    return str_replace(        array(',', '.'),        array(            /* l10n: Thousands separator */            __(','),            /* l10n: Decimal separator */            __('.'),            ),        $value    );}/** * Formats $value to the given length and appends SI prefixes * with a $length of 0 no truncation occurs, number is only formated * to the current locale * * examples: * <code> * echo PMA_formatNumber(123456789, 6);     // 123,457 k * echo PMA_formatNumber(-123456789, 4, 2); //    -123.46 M * echo PMA_formatNumber(-0.003, 6);        //      -3 m * echo PMA_formatNumber(0.003, 3, 3);      //       0.003 * echo PMA_formatNumber(0.00003, 3, 2);    //       0.03 m * echo PMA_formatNumber(0, 6);             //       0 * </code> * * @param double  $value          the value to format * @param integer $digits_left    number of digits left of the comma * @param integer $digits_right   number of digits right of the comma * @param boolean $only_down      do not reformat numbers below 1 * @param boolean $noTrailingZero removes trailing zeros right of the comma *                                (default: true) * * @return  string   the formatted value and its unit * * @access  public */function PMA_formatNumber($value, $digits_left = 3, $digits_right = 0,$only_down = false, $noTrailingZero = true){    if ($value==0) {        return '0';    }    $originalValue = $value;    //number_format is not multibyte safe, str_replace is safe    if ($digits_left === 0) {        $value = number_format($value, $digits_right);        if ($originalValue != 0 && floatval($value) == 0) {            $value = ' <' . (1 / PMA_pow(10, $digits_right));        }        return PMA_localizeNumber($value);    }    // this units needs no translation, ISO    $units = array(        -8 => 'y',        -7 => 'z',        -6 => 'a',        -5 => 'f',        -4 => 'p',        -3 => 'n',        -2 => '&micro;',        -1 => 'm',        0 => ' ',        1 => 'k',        2 => 'M',        3 => 'G',        4 => 'T',        5 => 'P',        6 => 'E',        7 => 'Z',        8 => 'Y'    );    // check for negative value to retain sign    if ($value < 0) {        $sign = '-';        $value = abs($value);    } else {        $sign = '';    }    $dh = PMA_pow(10, $digits_right);    /*     * This gives us the right SI prefix already,     * but $digits_left parameter not incorporated     */    $d = floor(log10($value) / 3);    /*     * Lowering the SI prefix by 1 gives us an additional 3 zeros     * So if we have 3,6,9,12.. free digits ($digits_left - $cur_digits)     * to use, then lower the SI prefix     */    $cur_digits = floor(log10($value / PMA_pow(1000, $d, 'pow'))+1);    if ($digits_left > $cur_digits) {        $d-= floor(($digits_left - $cur_digits)/3);    }    if ($d<0 && $only_down) {        $d=0;    }    $value = round($value / (PMA_pow(1000, $d, 'pow') / $dh)) /$dh;    $unit = $units[$d];    // If we dont want any zeros after the comma just add the thousand seperator    if ($noTrailingZero) {        $value = PMA_localizeNumber(            preg_replace('/(?<=\d)(?=(\d{3})+(?!\d))/', ',', $value)        );    } else {        //number_format is not multibyte safe, str_replace is safe        $value = PMA_localizeNumber(number_format($value, $digits_right));    }    if ($originalValue!=0 && floatval($value) == 0) {        return ' <' . (1 / PMA_pow(10, $digits_right)) . ' ' . $unit;    }    return $sign . $value . ' ' . $unit;} // end of the 'PMA_formatNumber' function/** * Returns the number of bytes when a formatted size is given * * @param string $formatted_size the size expression (for example 8MB) * * @return  integer  The numerical part of the expression (for example 8) */function PMA_extractValueFromFormattedSize($formatted_size){    $return_value = -1;    if (preg_match('/^[0-9]+GB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 3);    } elseif (preg_match('/^[0-9]+MB$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -2) * PMA_pow(1024, 2);    } elseif (preg_match('/^[0-9]+K$/', $formatted_size)) {        $return_value = substr($formatted_size, 0, -1) * PMA_pow(1024, 1);    }    return $return_value;}// end of the 'PMA_extractValueFromFormattedSize' function/** * Writes localised date * * @param string $timestamp the current timestamp * @param string $format    format * * @return  string   the formatted date * * @access  public */function PMA_localisedDate($timestamp = -1, $format = ''){    $month = array(        /* l10n: Short month name */        __('Jan'),        /* l10n: Short month name */        __('Feb'),        /* l10n: Short month name */        __('Mar'),        /* l10n: Short month name */        __('Apr'),        /* l10n: Short month name */        _pgettext('Short month name', 'May'),        /* l10n: Short month name */        __('Jun'),        /* l10n: Short month name */        __('Jul'),        /* l10n: Short month name */        __('Aug'),        /* l10n: Short month name */        __('Sep'),        /* l10n: Short month name */        __('Oct'),        /* l10n: Short month name */        __('Nov'),        /* l10n: Short month name */        __('Dec'));    $day_of_week = array(        /* l10n: Short week day name */        _pgettext('Short week day name', 'Sun'),        /* l10n: Short week day name */        __('Mon'),        /* l10n: Short week day name */        __('Tue'),        /* l10n: Short week day name */        __('Wed'),        /* l10n: Short week day name */        __('Thu'),        /* l10n: Short week day name */        __('Fri'),        /* l10n: Short week day name */        __('Sat'));    if ($format == '') {        /* l10n: See http://www.php.net/manual/en/function.strftime.php */        $format = __('%B %d, %Y at %I:%M %p');    }    if ($timestamp == -1) {        $timestamp = time();    }    $date = preg_replace(        '@%[aA]@',        $day_of_week[(int)strftime('%w', $timestamp)],        $format    );    $date = preg_replace(        '@%[bB]@',        $month[(int)strftime('%m', $timestamp)-1],        $date    );    return strftime($date, $timestamp);} // end of the 'PMA_localisedDate()' function/** * returns a tab for tabbed navigation. * If the variables $link and $args ar left empty, an inactive tab is created * * @param array $tab        array with all options * @param array $url_params * * @return  string  html code for one tab, a link if valid otherwise a span * * @access  public */function PMA_generate_html_tab($tab, $url_params = array(), $base_dir=''){    // default values    $defaults = array(        'text'      => '',        'class'     => '',        'active'    => null,        'link'      => '',        'sep'       => '?',        'attr'      => '',        'args'      => '',        'warning'   => '',        'fragment'  => '',        'id'        => '',    );    $tab = array_merge($defaults, $tab);    // determine additionnal style-class    if (empty($tab['class'])) {        if (! empty($tab['active'])            || PMA_isValid($GLOBALS['active_page'], 'identical', $tab['link'])        ) {            $tab['class'] = 'active';        } elseif (is_null($tab['active']) && empty($GLOBALS['active_page'])          && basename($GLOBALS['PMA_PHP_SELF']) == $tab['link']          && empty($tab['warning'])) {            $tab['class'] = 'active';        }    }    if (!empty($tab['warning'])) {        $tab['class'] .= ' error';        $tab['attr'] .= ' title="' . htmlspecialchars($tab['warning']) . '"';    }    // If there are any tab specific URL parameters, merge those with    // the general URL parameters    if (! empty($tab['url_params']) && is_array($tab['url_params'])) {        $url_params = array_merge($url_params, $tab['url_params']);    }    // build the link    if (!empty($tab['link'])) {        $tab['link'] = htmlentities($tab['link']);        $tab['link'] = $tab['link'] . PMA_generate_common_url($url_params);        if (! empty($tab['args'])) {            foreach ($tab['args'] as $param => $value) {                $tab['link'] .= PMA_get_arg_separator('html') . urlencode($param)                    . '=' . urlencode($value);            }        }    }    if (! empty($tab['fragment'])) {        $tab['link'] .= $tab['fragment'];    }    // display icon, even if iconic is disabled but the link-text is missing    if (($GLOBALS['cfg']['MainPageIconic'] || empty($tab['text']))        && isset($tab['icon'])    ) {        // avoid generating an alt tag, because it only illustrates        // the text that follows and if browser does not display        // images, the text is duplicated        $tab['text'] = PMA_getImage(htmlentities($tab['icon'])) . $tab['text'];    } elseif (empty($tab['text'])) {        // check to not display an empty link-text        $tab['text'] = '?';        trigger_error(            'empty linktext in function ' . __FUNCTION__ . '()',            E_USER_NOTICE        );    }    //Set the id for the tab, if set in the params    $id_string = ( empty($tab['id']) ? '' : ' id="'.$tab['id'].'" ' );    $out = '<li' . ($tab['class'] == 'active' ? ' class="active"' : '') . '>';    if (!empty($tab['link'])) {        $out .= '<a class="tab' . htmlentities($tab['class']) . '"'            .$id_string            .' href="' . $tab['link'] . '" ' . $tab['attr'] . '>'            . $tab['text'] . '</a>';    } else {        $out .= '<span class="tab' . htmlentities($tab['class']) . '"'.$id_string.'>'            . $tab['text'] . '</span>';    }    $out .= '</li>';    return $out;} // end of the 'PMA_generate_html_tab()' function/** * returns html-code for a tab navigation * * @param array  $tabs       one element per tab * @param string $url_params * @param string $base_dir * @param string $menu_id * * @return  string  html-code for tab-navigation */function PMA_generate_html_tabs($tabs, $url_params, $base_dir='', $menu_id='topmenu'){    $tab_navigation = '<div id="' . htmlentities($menu_id) . 'container" class="menucontainer">'        .'<ul id="' . htmlentities($menu_id) . '">';    foreach ($tabs as $tab) {        $tab_navigation .= PMA_generate_html_tab($tab, $url_params, $base_dir);    }    $tab_navigation .=         '</ul>' . "\n"        .'<div class="clearfloat"></div>'        .'</div>' . "\n";    return $tab_navigation;}/** * Displays a link, or a button if the link's URL is too large, to * accommodate some browsers' limitations * * @param string  $url        the URL * @param string  $message    the link message * @param mixed   $tag_params string: js confirmation *                            array: additional tag params (f.e. style="") * @param boolean $new_form   we set this to false when we are already in *                            a  form, to avoid generating nested forms * @param boolean $strip_img  whether to strip the image * @param string  $target     target * * @return string  the results to be echoed or saved in an array */function PMA_linkOrButton($url, $message, $tag_params = array(),    $new_form = true, $strip_img = false, $target = ''){    $url_length = strlen($url);    // with this we should be able to catch case of image upload    // into a (MEDIUM) BLOB; not worth generating even a form for these    if ($url_length > $GLOBALS['cfg']['LinkLengthLimit'] * 100) {        return '';    }    if (! is_array($tag_params)) {        $tmp = $tag_params;        $tag_params = array();        if (!empty($tmp)) {            $tag_params['onclick'] = 'return confirmLink(this, \'' . PMA_escapeJsString($tmp) . '\')';        }        unset($tmp);    }    if (! empty($target)) {        $tag_params['target'] = htmlentities($target);    }    $tag_params_strings = array();    foreach ($tag_params as $par_name => $par_value) {        // htmlspecialchars() only on non javascript        $par_value = substr($par_name, 0, 2) == 'on'            ? $par_value            : htmlspecialchars($par_value);        $tag_params_strings[] = $par_name . '="' . $par_value . '"';    }    $displayed_message = '';    // Add text if not already added    if (stristr($message, '<img')        && (!$strip_img || $GLOBALS['cfg']['PropertiesIconic'] === true)        && strip_tags($message)==$message    ) {        $displayed_message = '<span>'        . htmlspecialchars(            preg_replace('/^.*\salt="([^"]*)".*$/si', '\1', $message)        )        . '</span>';    }    // Suhosin: Check that each query parameter is not above maximum    $in_suhosin_limits = true;    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit']) {        if ($suhosin_get_MaxValueLength = ini_get('suhosin.get.max_value_length')) {            $query_parts = PMA_splitURLQuery($url);            foreach ($query_parts as $query_pair) {                list($eachvar, $eachval) = explode('=', $query_pair);                if (strlen($eachval) > $suhosin_get_MaxValueLength) {                    $in_suhosin_limits = false;                    break;                }            }        }    }    if ($url_length <= $GLOBALS['cfg']['LinkLengthLimit'] && $in_suhosin_limits) {        // no whitespace within an <a> else Safari will make it part of the link        $ret = "\n" . '<a href="' . $url . '" '            . implode(' ', $tag_params_strings) . '>'            . $message . $displayed_message . '</a>' . "\n";    } else {        // no spaces (linebreaks) at all        // or after the hidden fields        // IE will display them all        // add class=link to submit button        if (empty($tag_params['class'])) {            $tag_params['class'] = 'link';        }        if (! isset($query_parts)) {            $query_parts = PMA_splitURLQuery($url);        }        $url_parts   = parse_url($url);        if ($new_form) {            $ret = '<form action="' . $url_parts['path'] . '" class="link"'                 . ' method="post"' . $target . ' style="display: inline;">';            $subname_open   = '';            $subname_close  = '';            $submit_link    = '#';        } else {            $query_parts[] = 'redirect=' . $url_parts['path'];            if (empty($GLOBALS['subform_counter'])) {                $GLOBALS['subform_counter'] = 0;            }            $GLOBALS['subform_counter']++;            $ret            = '';            $subname_open   = 'subform[' . $GLOBALS['subform_counter'] . '][';            $subname_close  = ']';            $submit_link    = '#usesubform[' . $GLOBALS['subform_counter'] . ']=1';        }        foreach ($query_parts as $query_pair) {            list($eachvar, $eachval) = explode('=', $query_pair);            $ret .= '<input type="hidden" name="' . $subname_open . $eachvar                . $subname_close . '" value="'                . htmlspecialchars(urldecode($eachval)) . '" />';        } // end while        $ret .= "\n" . '<a href="' . $submit_link . '" class="formLinkSubmit" '        . implode(' ', $tag_params_strings) . '>'        . $message . ' ' . $displayed_message . '</a>' . "\n";        if ($new_form) {            $ret .= '</form>';        }    } // end if... else...    return $ret;} // end of the 'PMA_linkOrButton()' function/** * Splits a URL string by parameter * * @param string $url the URL * * @return array  the parameter/value pairs, for example [0] db=sakila */function PMA_splitURLQuery($url){    // decode encoded url separators    $separator   = PMA_get_arg_separator();    // on most places separator is still hard coded ...    if ($separator !== '&') {        // ... so always replace & with $separator        $url         = str_replace(htmlentities('&'), $separator, $url);        $url         = str_replace('&', $separator, $url);    }    $url         = str_replace(htmlentities($separator), $separator, $url);    // end decode    $url_parts   = parse_url($url);    return explode($separator, $url_parts['query']);}/** * Returns a given timespan value in a readable format. * * @param int $seconds the timespan * * @return string  the formatted value */function PMA_timespanFormat($seconds){    $days = floor($seconds / 86400);    if ($days > 0) {        $seconds -= $days * 86400;    }    $hours = floor($seconds / 3600);    if ($days > 0 || $hours > 0) {        $seconds -= $hours * 3600;    }    $minutes = floor($seconds / 60);    if ($days > 0 || $hours > 0 || $minutes > 0) {        $seconds -= $minutes * 60;    }    return sprintf(        __('%s days, %s hours, %s minutes and %s seconds'),        (string)$days, (string)$hours, (string)$minutes, (string)$seconds    );}/** * Takes a string and outputs each character on a line for itself. Used * mainly for horizontalflipped display mode. * Takes care of special html-characters. * Fulfills todo-item * http://sf.net/tracker/?func=detail&aid=544361&group_id=23067&atid=377411 * * @param string $string    The string * @param string $Separator The Separator (defaults to "<br />\n") * * @access  public * @todo    add a multibyte safe function PMA_STR_split() * * @return  string      The flipped string */function PMA_flipstring($string, $Separator = "<br />\n"){    $format_string = '';    $charbuff = false;    for ($i = 0, $str_len = strlen($string); $i < $str_len; $i++) {        $char = $string{$i};        $append = false;        if ($char == '&') {            $format_string .= $charbuff;            $charbuff = $char;        } elseif ($char == ';' && !empty($charbuff)) {            $format_string .= $charbuff . $char;            $charbuff = false;            $append = true;        } elseif (! empty($charbuff)) {            $charbuff .= $char;        } else {            $format_string .= $char;            $append = true;        }        // do not add separator after the last character        if ($append && ($i != $str_len - 1)) {            $format_string .= $Separator;        }    }    return $format_string;}/** * Function added to avoid path disclosures. * Called by each script that needs parameters, it displays * an error message and, by default, stops the execution. * * Not sure we could use a strMissingParameter message here, * would have to check if the error message file is always available * * @param array $params  The names of the parameters needed by the calling script. * @param bool  $die     Stop the execution? *                       (Set this manually to false in the calling script *                       until you know all needed parameters to check). * @param bool  $request Whether to include this list in checking for special params. * * @global  string  path to current script * @global  boolean flag whether any special variable was required * * @access  public * @todo    use PMA_fatalError() if $die === true? */function PMA_checkParameters($params, $die = true, $request = true){    global $checked_special;    if (! isset($checked_special)) {        $checked_special = false;    }    $reported_script_name = basename($GLOBALS['PMA_PHP_SELF']);    $found_error = false;    $error_message = '';    foreach ($params as $param) {        if ($request && $param != 'db' && $param != 'table') {            $checked_special = true;        }        if (! isset($GLOBALS[$param])) {            $error_message .= $reported_script_name                . ': ' . __('Missing parameter:') . ' '                . $param                . PMA_showDocu('faqmissingparameters')                . '<br />';            $found_error = true;        }    }    if ($found_error) {        /**         * display html meta tags         */        include_once './libraries/header_meta_style.inc.php';        echo '</head><body><p>' . $error_message . '</p></body></html>';        if ($die) {            exit();        }    }} // end function/** * Function to generate unique condition for specified row. * * @param resource $handle       current query result * @param integer  $fields_cnt   number of fields * @param array    $fields_meta  meta information about fields * @param array    $row          current row * @param boolean  $force_unique generate condition only on pk or unique * * @access  public * * @return  array     the calculated condition and whether condition is unique */function PMA_getUniqueCondition($handle, $fields_cnt, $fields_meta, $row, $force_unique = false){    $primary_key          = '';    $unique_key           = '';    $nonprimary_condition = '';    $preferred_condition = '';    $primary_key_array    = array();    $unique_key_array     = array();    $nonprimary_condition_array = array();    $condition_array = array();    for ($i = 0; $i < $fields_cnt; ++$i) {        $condition   = '';        $con_key     = '';        $con_val     = '';        $field_flags = PMA_DBI_field_flags($handle, $i);        $meta        = $fields_meta[$i];        // do not use a column alias in a condition        if (! isset($meta->orgname) || ! strlen($meta->orgname)) {            $meta->orgname = $meta->name;            if (isset($GLOBALS['analyzed_sql'][0]['select_expr'])                && is_array($GLOBALS['analyzed_sql'][0]['select_expr'])            ) {                foreach ($GLOBALS['analyzed_sql'][0]['select_expr'] as $select_expr) {                    // need (string) === (string)                    // '' !== 0 but '' == 0                    if ((string) $select_expr['alias'] === (string) $meta->name) {                        $meta->orgname = $select_expr['column'];                        break;                    } // end if                } // end foreach            }        }        // Do not use a table alias in a condition.        // Test case is:        // select * from galerie x WHERE        //(select count(*) from galerie y where y.datum=x.datum)>1        //        // But orgtable is present only with mysqli extension so the        // fix is only for mysqli.        // Also, do not use the original table name if we are dealing with        // a view because this view might be updatable.        // (The isView() verification should not be costly in most cases        // because there is some caching in the function).        if (isset($meta->orgtable)            && $meta->table != $meta->orgtable            && ! PMA_Table::isView($GLOBALS['db'], $meta->table)        ) {            $meta->table = $meta->orgtable;        }        // to fix the bug where float fields (primary or not)        // can't be matched because of the imprecision of        // floating comparison, use CONCAT        // (also, the syntax "CONCAT(field) IS NULL"        // that we need on the next "if" will work)        if ($meta->type == 'real') {            $con_key = 'CONCAT(' . PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname) . ')';        } else {            $con_key = PMA_backquote($meta->table) . '.'                . PMA_backquote($meta->orgname);        } // end if... else...        $condition = ' ' . $con_key . ' ';        if (! isset($row[$i]) || is_null($row[$i])) {            $con_val = 'IS NULL';        } else {            // timestamp is numeric on some MySQL 4.1            // for real we use CONCAT above and it should compare to string            if ($meta->numeric                && $meta->type != 'timestamp'                && $meta->type != 'real'            ) {                $con_val = '= ' . $row[$i];            } elseif (($meta->type == 'blob' || $meta->type == 'string')                // hexify only if this is a true not empty BLOB or a BINARY                    && stristr($field_flags, 'BINARY')                    && !empty($row[$i])) {                // do not waste memory building a too big condition                if (strlen($row[$i]) < 1000) {                    // use a CAST if possible, to avoid problems                    // if the field contains wildcard characters % or _                    $con_val = '= CAST(0x' . bin2hex($row[$i]) . ' AS BINARY)';                } else {                    // this blob won't be part of the final condition                    $con_val = null;                }            } elseif (in_array($meta->type, PMA_getGISDatatypes())                && ! empty($row[$i])            ) {                // do not build a too big condition                if (strlen($row[$i]) < 5000) {                    $condition .= '=0x' . bin2hex($row[$i]) . ' AND';                } else {                    $condition = '';                }            } elseif ($meta->type == 'bit') {                $con_val = "= b'" . PMA_printable_bit_value($row[$i], $meta->length) . "'";            } else {                $con_val = '= \'' . PMA_sqlAddSlashes($row[$i], false, true) . '\'';            }        }        if ($con_val != null) {            $condition .= $con_val . ' AND';            if ($meta->primary_key > 0) {                $primary_key .= $condition;                $primary_key_array[$con_key] = $con_val;            } elseif ($meta->unique_key > 0) {                $unique_key  .= $condition;                $unique_key_array[$con_key] = $con_val;            }            $nonprimary_condition .= $condition;            $nonprimary_condition_array[$con_key] = $con_val;        }    } // end for    // Correction University of Virginia 19991216:    // prefer primary or unique keys for condition,    // but use conjunction of all values if no primary key    $clause_is_unique = true;    if ($primary_key) {        $preferred_condition = $primary_key;        $condition_array = $primary_key_array;    } elseif ($unique_key) {        $preferred_condition = $unique_key;        $condition_array = $unique_key_array;    } elseif (! $force_unique) {        $preferred_condition = $nonprimary_condition;        $condition_array = $nonprimary_condition_array;        $clause_is_unique = false;    }    $where_clause = trim(preg_replace('|\s?AND$|', '', $preferred_condition));    return(array($where_clause, $clause_is_unique, $condition_array));} // end function/** * Generate a button or image tag * * @param string $button_name  name of button element * @param string $button_class class of button element * @param string $image_name   name of image element * @param string $text         text to display * @param string $image        image to display * @param string $value        value * * @access  public */function PMA_buttonOrImage($button_name, $button_class, $image_name, $text,    $image, $value = ''){    if ($value == '') {        $value = $text;    }    if (false === $GLOBALS['cfg']['PropertiesIconic']) {        echo ' <input type="submit" name="' . $button_name . '"'                .' value="' . htmlspecialchars($value) . '"'                .' title="' . htmlspecialchars($text) . '" />' . "\n";        return;    }    /* Opera has trouble with <input type="image"> */    /* IE has trouble with <button> */    if (PMA_USR_BROWSER_AGENT != 'IE') {        echo '<button class="' . $button_class . '" type="submit"'            .' name="' . $button_name . '" value="' . htmlspecialchars($value) . '"'            .' title="' . htmlspecialchars($text) . '">' . "\n"            . PMA_getIcon($image, $text)            .'</button>' . "\n";    } else {        echo '<input type="image" name="' . $image_name            . '" value="' . htmlspecialchars($value)            . '" title="' . htmlspecialchars($text)            . '" src="' . $GLOBALS['pmaThemeImage']. $image . '" />'            . ($GLOBALS['cfg']['PropertiesIconic'] === 'both'                ? '&nbsp;' . htmlspecialchars($text)                : '') . "\n";    }} // end function/** * Generate a pagination selector for browsing resultsets * * @param int    $rows        Number of rows in the pagination set * @param int    $pageNow     current page number * @param int    $nbTotalPage number of total pages * @param int    $showAll     If the number of pages is lower than this *                            variable, no pages will be omitted in pagination * @param int    $sliceStart  How many rows at the beginning should always be shown? * @param int    $sliceEnd    How many rows at the end should always be shown? * @param int    $percent     Percentage of calculation page offsets to hop to a *                            next page * @param int    $range       Near the current page, how many pages should *                            be considered "nearby" and displayed as well? * @param string $prompt      The prompt to display (sometimes empty) * * @return string * * @access  public */function PMA_pageselector($rows, $pageNow = 1, $nbTotalPage = 1,    $showAll = 200, $sliceStart = 5, $sliceEnd = 5, $percent = 20,    $range = 10, $prompt = ''){    $increment = floor($nbTotalPage / $percent);    $pageNowMinusRange = ($pageNow - $range);    $pageNowPlusRange = ($pageNow + $range);    $gotopage = $prompt . ' <select id="pageselector" ';    if ($GLOBALS['cfg']['AjaxEnable']) {        $gotopage .= ' class="ajax"';    }    $gotopage .= ' name="pos" >' . "\n";    if ($nbTotalPage < $showAll) {        $pages = range(1, $nbTotalPage);    } else {        $pages = array();        // Always show first X pages        for ($i = 1; $i <= $sliceStart; $i++) {            $pages[] = $i;        }        // Always show last X pages        for ($i = $nbTotalPage - $sliceEnd; $i <= $nbTotalPage; $i++) {            $pages[] = $i;        }        // Based on the number of results we add the specified        // $percent percentage to each page number,        // so that we have a representing page number every now and then to        // immediately jump to specific pages.        // As soon as we get near our currently chosen page ($pageNow -        // $range), every page number will be shown.        $i = $sliceStart;        $x = $nbTotalPage - $sliceEnd;        $met_boundary = false;        while ($i <= $x) {            if ($i >= $pageNowMinusRange && $i <= $pageNowPlusRange) {                // If our pageselector comes near the current page, we use 1                // counter increments                $i++;                $met_boundary = true;            } else {                // We add the percentage increment to our current page to                // hop to the next one in range                $i += $increment;                // Make sure that we do not cross our boundaries.                if ($i > $pageNowMinusRange && ! $met_boundary) {                    $i = $pageNowMinusRange;                }            }            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }/*    Add page numbers with "geometrically increasing" distances.    This helps me a lot when navigating through giant tables.    Test case: table with 2.28 million sets, 76190 pages. Page of interest is    between 72376 and 76190.    Selecting page 72376.    Now, old version enumerated only +/- 10 pages around 72376 and the    percentage increment produced steps of about 3000.    The following code adds page numbers +/- 2,4,8,16,32,64,128,256 etc.    around the current page.*/        $i = $pageNow;        $dist = 1;        while ($i < $x) {            $dist = 2 * $dist;            $i = $pageNow + $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        $i = $pageNow;        $dist = 1;        while ($i >0) {            $dist = 2 * $dist;            $i = $pageNow - $dist;            if ($i > 0 && $i <= $x) {                $pages[] = $i;            }        }        // Since because of ellipsing of the current page some numbers may be double,        // we unify our array:        sort($pages);        $pages = array_unique($pages);    }    foreach ($pages as $i) {        if ($i == $pageNow) {            $selected = 'selected="selected" style="font-weight: bold"';        } else {            $selected = '';        }        $gotopage .= '                <option ' . $selected            . ' value="' . (($i - 1) * $rows) . '">' . $i . '</option>' . "\n";    }    $gotopage .= ' </select><noscript><input type="submit" value="'        . __('Go') . '" /></noscript>';    return $gotopage;} // end function/** * Generate navigation for a list * * @param int    $count       number of elements in the list * @param int    $pos         current position in the list * @param array  $_url_params url parameters * @param string $script      script name for form target * @param string $frame       target frame * @param int    $max_count   maximum number of elements to display from the list * * @access  public * * @todo    use $pos from $_url_params */function PMA_listNavigator($count, $pos, $_url_params, $script, $frame, $max_count){    if ($max_count < $count) {        echo 'frame_navigation' == $frame            ? '<div id="navidbpageselector">' . "\n"            : '';        echo __('Page number:');        echo 'frame_navigation' == $frame ? '<br />' : ' ';        // Move to the beginning or to the previous page        if ($pos > 0) {            // patch #474210 - part 1            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption1 = '&lt;&lt;';                $caption2 = ' &lt; ';                $title1   = ' title="' . _pgettext('First page', 'Begin') . '"';                $title2   = ' title="' . _pgettext('Previous page', 'Previous') . '"';            } else {                $caption1 = _pgettext('First page', 'Begin') . ' &lt;&lt;';                $caption2 = _pgettext('Previous page', 'Previous') . ' &lt;';                $title1   = '';                $title2   = '';            } // end if... else...            $_url_params['pos'] = 0;            echo '<a' . $title1 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption1 . '</a>';            $_url_params['pos'] = $pos - $max_count;            echo '<a' . $title2 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption2 . '</a>';        }        echo "\n", '<form action="./', basename($script), '" method="post" target="', $frame, '">', "\n";        echo PMA_generate_common_hidden_inputs($_url_params);        echo PMA_pageselector(            $max_count,            floor(($pos + 1) / $max_count) + 1,            ceil($count / $max_count)        );        echo '</form>';        if ($pos + $max_count < $count) {            if ($GLOBALS['cfg']['NavigationBarIconic']) {                $caption3 = ' &gt; ';                $caption4 = '&gt;&gt;';                $title3   = ' title="' . _pgettext('Next page', 'Next') . '"';                $title4   = ' title="' . _pgettext('Last page', 'End') . '"';            } else {                $caption3 = '&gt; ' . _pgettext('Next page', 'Next');                $caption4 = '&gt;&gt; ' . _pgettext('Last page', 'End');                $title3   = '';                $title4   = '';            } // end if... else...            $_url_params['pos'] = $pos + $max_count;            echo '<a' . $title3 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption3 . '</a>';            $_url_params['pos'] = floor($count / $max_count) * $max_count;            if ($_url_params['pos'] == $count) {                $_url_params['pos'] = $count - $max_count;            }            echo '<a' . $title4 . ' href="' . $script                . PMA_generate_common_url($_url_params) . '" target="'                . $frame . '">' . $caption4 . '</a>';        }        echo "\n";        if ('frame_navigation' == $frame) {            echo '</div>' . "\n";        }    }}/** * replaces %u in given path with current user name * * example: * <code> * $user_dir = PMA_userDir('/var/pma_tmp/%u/'); // '/var/pma_tmp/root/' * * </code> * * @param string $dir with wildcard for user * * @return  string  per user directory */function PMA_userDir($dir){    // add trailing slash    if (substr($dir, -1) != '/') {        $dir .= '/';    }    return str_replace('%u', $GLOBALS['cfg']['Server']['user'], $dir);}/** * returns html code for db link to default db page * * @param string $database database * * @return  string  html link to default db page */function PMA_getDbLink($database = null){    if (! strlen($database)) {        if (! strlen($GLOBALS['db'])) {            return '';        }        $database = $GLOBALS['db'];    } else {        $database = PMA_unescape_mysql_wildcards($database);    }    return '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase'] . '?'        . PMA_generate_common_url($database) . '" title="'        . sprintf(            __('Jump to database &quot;%s&quot;.'),            htmlspecialchars($database)        )        . '">' . htmlspecialchars($database) . '</a>';}/** * Displays a lightbulb hint explaining a known external bug * that affects a functionality * * @param string $functionality   localized message explaining the func. * @param string $component       'mysql' (eventually, 'php') * @param string $minimum_version of this component * @param string $bugref          bug reference for this component */function PMA_externalBug($functionality, $component, $minimum_version, $bugref){    if ($component == 'mysql' && PMA_MYSQL_INT_VERSION < $minimum_version) {        echo PMA_showHint(            sprintf(                __('The %s functionality is affected by a known bug, see %s'),                $functionality,                PMA_linkURL('http://bugs.mysql.com/') . $bugref            )        );    }}/** * Generates and echoes an HTML checkbox * * @param string  $html_field_name the checkbox HTML field * @param string  $label           label for checkbox * @param boolean $checked         is it initially checked? * @param boolean $onclick         should it submit the form on click? * * @return the HTML for the checkbox */function PMA_display_html_checkbox($html_field_name, $label, $checked, $onclick){    echo '<input type="checkbox" name="' . $html_field_name . '" id="'        . $html_field_name . '"' . ($checked ? ' checked="checked"' : '')        . ($onclick ? ' class="autosubmit"' : '') . ' /><label for="'        . $html_field_name . '">' . $label . '</label>';}/** * Generates and echoes a set of radio HTML fields * * @param string  $html_field_name the radio HTML field * @param array   $choices         the choices values and labels * @param string  $checked_choice  the choice to check by default * @param boolean $line_break      whether to add an HTML line break after a choice * @param boolean $escape_label    whether to use htmlspecialchars() on label * @param string  $class           enclose each choice with a div of this class * * @return the HTML for the tadio buttons */function PMA_display_html_radio($html_field_name, $choices, $checked_choice = '',$line_break = true, $escape_label = true, $class=''){    foreach ($choices as $choice_value => $choice_label) {        if (! empty($class)) {            echo '<div class="' . $class . '">';        }        $html_field_id = $html_field_name . '_' . $choice_value;        echo '<input type="radio" name="' . $html_field_name . '" id="'            . $html_field_id . '" value="' . htmlspecialchars($choice_value) . '"';        if ($choice_value == $checked_choice) {            echo ' checked="checked"';        }        echo ' />' . "\n";        echo '<label for="' . $html_field_id . '">'            . ($escape_label ? htmlspecialchars($choice_label)  : $choice_label)            . '</label>';        if ($line_break) {            echo '<br />';        }        if (! empty($class)) {            echo '</div>';        }        echo "\n";    }}/** * Generates and returns an HTML dropdown * * @param string $select_name   name for the select element * @param array  $choices       choices values * @param string $active_choice the choice to select by default * @param string $id            id of the select element; can be different in case *                              the dropdown is present more than once on the page * * @return string * * @todo    support titles */function PMA_generate_html_dropdown($select_name, $choices, $active_choice, $id){    $result = '<select name="' . htmlspecialchars($select_name) . '" id="'        . htmlspecialchars($id) . '">';    foreach ($choices as $one_choice_value => $one_choice_label) {        $result .= '<option value="' . htmlspecialchars($one_choice_value) . '"';        if ($one_choice_value == $active_choice) {            $result .= ' selected="selected"';        }        $result .= '>' . htmlspecialchars($one_choice_label) . '</option>';    }    $result .= '</select>';    return $result;}/** * Generates a slider effect (jQjuery) * Takes care of generating the initial <div> and the link * controlling the slider; you have to generate the </div> yourself * after the sliding section. * * @param string $id      the id of the <div> on which to apply the effect * @param string $message the message to show as a link */function PMA_generate_slider_effect($id, $message){    if ($GLOBALS['cfg']['InitialSlidersState'] == 'disabled') {        echo '<div id="' . $id . '">';        return;    }    /**     * Bad hack on the next line. document.write() conflicts with jQuery, hence,     * opening the <div> with PHP itself instead of JavaScript.     *     * @todo find a better solution that uses $.append(), the recommended method     * maybe by using an additional param, the id of the div to append to     */    ?><div id="<?php echo $id; ?>" <?php echo $GLOBALS['cfg']['InitialSlidersState'] == 'closed' ? ' style="display: none; overflow:auto;"' : ''; ?> class="pma_auto_slider" title="<?php echo htmlspecialchars($message); ?>">    <?php}/** * Creates an AJAX sliding toggle button * (or and equivalent form when AJAX is disabled) * * @param string $action      The URL for the request to be executed * @param string $select_name The name for the dropdown box * @param array  $options     An array of options (see rte_footer.lib.php) * @param string $callback    A JS snippet to execute when the request is *                            successfully processed * * @return   string   HTML code for the toggle button */function PMA_toggleButton($action, $select_name, $options, $callback){    // Do the logic first    $link_on = "$action&amp;$select_name=" . urlencode($options[1]['value']);    $link_off = "$action&amp;$select_name=" . urlencode($options[0]['value']);    if ($options[1]['selected'] == true) {        $state = 'on';    } else if ($options[0]['selected'] == true) {        $state = 'off';    } else {        $state = 'on';    }    $selected1 = '';    $selected0 = '';    if ($options[1]['selected'] == true) {        $selected1 = " selected='selected'";    } else if ($options[0]['selected'] == true) {        $selected0 = " selected='selected'";    }    // Generate output    $retval  = "<!-- TOGGLE START -->\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "<noscript>\n";    }    $retval .= "<div class='wrapper'>\n";    $retval .= "    <form action='$action' method='post'>\n";    $retval .= "        <select name='$select_name'>\n";    $retval .= "            <option value='{$options[1]['value']}'$selected1>";    $retval .= "                {$options[1]['label']}\n";    $retval .= "            </option>\n";    $retval .= "            <option value='{$options[0]['value']}'$selected0>";    $retval .= "                {$options[0]['label']}\n";    $retval .= "            </option>\n";    $retval .= "        </select>\n";    $retval .= "        <input type='submit' value='" . __('Change') . "'/>\n";    $retval .= "    </form>\n";    $retval .= "</div>\n";    if ($GLOBALS['cfg']['AjaxEnable'] && is_readable($_SESSION['PMA_Theme']->getImgPath() . 'toggle-ltr.png')) {        $retval .= "</noscript>\n";        $retval .= "<div class='wrapper toggleAjax hide'>\n";        $retval .= "    <div class='toggleButton'>\n";        $retval .= "        <div title='" . __('Click to toggle') . "' class='container $state'>\n";        $retval .= "            <img src='{$GLOBALS['pmaThemeImage']}toggle-{$GLOBALS['text_dir']}.png'\n";        $retval .= "                 alt='' />\n";        $retval .= "            <table cellspacing='0' cellpadding='0'><tr>\n";        $retval .= "                <tbody>\n";        $retval .= "                <td class='toggleOn'>\n";        $retval .= "                    <span class='hide'>$link_on</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[1]['label']) . "</div>\n";        $retval .= "                </td>\n";        $retval .= "                <td><div>&nbsp;</div></td>\n";        $retval .= "                <td class='toggleOff'>\n";        $retval .= "                    <span class='hide'>$link_off</span>\n";        $retval .= "                    <div>";        $retval .= str_replace(' ', '&nbsp;', $options[0]['label']) . "</div>\n";        $retval .= "                    </div>\n";        $retval .= "                </tbody>\n";        $retval .= "            </tr></table>\n";        $retval .= "            <span class='hide callback'>$callback</span>\n";        $retval .= "            <span class='hide text_direction'>{$GLOBALS['text_dir']}</span>\n";        $retval .= "        </div>\n";        $retval .= "    </div>\n";        $retval .= "</div>\n";    }    $retval .= "<!-- TOGGLE END -->";    return $retval;} // end PMA_toggleButton()/** * Clears cache content which needs to be refreshed on user change. * * @return nothing */function PMA_clearUserCache(){    PMA_cacheUnset('is_superuser', true);}/** * Verifies if something is cached in the session * * @param string   $var    variable name * @param int|true $server server * * @return boolean */function PMA_cacheExists($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    return isset($_SESSION['cache']['server_' . $server][$var]);}/** * Gets cached information from the session * * @param string   $var    varibale name * @param int|true $server server * * @return mixed */function PMA_cacheGet($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    if (isset($_SESSION['cache']['server_' . $server][$var])) {        return $_SESSION['cache']['server_' . $server][$var];    } else {        return null;    }}/** * Caches information in the session * * @param string   $var    variable name * @param mixed    $val    value * @param int|true $server server * * @return mixed */function PMA_cacheSet($var, $val = null, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    $_SESSION['cache']['server_' . $server][$var] = $val;}/** * Removes cached information from the session * * @param string   $var    variable name * @param int|true $server server * * @return nothing */function PMA_cacheUnset($var, $server = 0){    if (true === $server) {        $server = $GLOBALS['server'];    }    unset($_SESSION['cache']['server_' . $server][$var]);}/** * Converts a bit value to printable format; * in MySQL a BIT field can be from 1 to 64 bits so we need this * function because in PHP, decbin() supports only 32 bits * * @param numeric $value  coming from a BIT field * @param integer $length length * * @return  string  the printable value */function PMA_printable_bit_value($value, $length){    $printable = '';    for ($i = 0, $len_ceiled = ceil($length / 8); $i < $len_ceiled; $i++) {        $printable .= sprintf('%08d', decbin(ord(substr($value, $i, 1))));    }    $printable = substr($printable, -$length);    return $printable;}/** * Verifies whether the value contains a non-printable character * * @param string $value value * * @return  boolean */function PMA_contains_nonprintable_ascii($value){    return preg_match('@[^[:print:]]@', $value);}/** * Converts a BIT type default value * for example, b'010' becomes 010 * * @param string $bit_default_value value * * @return  string the converted value */function PMA_convert_bit_default_value($bit_default_value){    return strtr($bit_default_value, array("b" => "", "'" => ""));}/** * Extracts the various parts from a field type spec * * @param string $fieldspec Field specification * * @return  array associative array containing type, spec_in_brackets *          and possibly enum_set_values (another array) */function PMA_extractFieldSpec($fieldspec){    $first_bracket_pos = strpos($fieldspec, '(');    if ($first_bracket_pos) {        $spec_in_brackets = chop(            substr(                $fieldspec,                $first_bracket_pos + 1,                (strrpos($fieldspec, ')') - $first_bracket_pos - 1)            )        );        // convert to lowercase just to be sure        $type = strtolower(chop(substr($fieldspec, 0, $first_bracket_pos)));    } else {        $type = strtolower($fieldspec);        $spec_in_brackets = '';    }    if ('enum' == $type || 'set' == $type) {        // Define our working vars        $enum_set_values = array();        $working = "";        $in_string = false;        $index = 0;        // While there is another character to process        while (isset($fieldspec[$index])) {            // Grab the char to look at            $char = $fieldspec[$index];            // If it is a single quote, needs to be handled specially            if ($char == "'") {                // If we are not currently in a string, begin one                if (! $in_string) {                    $in_string = true;                    $working = "";                } else {                    // Otherwise, it may be either an end of a string,                    // or a 'double quote' which can be handled as-is                    // Check out the next character (if possible)                    $has_next = isset($fieldspec[$index + 1]);                    $next = $has_next ? $fieldspec[$index + 1] : null;                    //If we have reached the end of our 'working' string (because                    //there are no more chars,or the next char is not another quote)                    if (! $has_next || $next != "'") {                        $enum_set_values[] = $working;                        $in_string = false;                    } elseif ($next == "'") {                        // Otherwise, this is a 'double quote',                        // and can be added to the working string                        $working .= "'";                        // Skip the next char; we already know what it is                        $index++;                    }                }            } elseif ('\\' == $char                && isset($fieldspec[$index + 1])                && "'" == $fieldspec[$index + 1]            ) {                // escaping of a quote?                $working .= "'";                $index++;            } else {                // Otherwise, add it to our working string like normal                $working .= $char;            }            // Increment character index            $index++;        } // end while        $printtype = $type . '(' .  str_replace("','", "', '", $spec_in_brackets) . ')';        $binary = false;        $unsigned = false;        $zerofill = false;    } else {        $enum_set_values = array();        /* Create printable type name */        $printtype = strtolower($fieldspec);        // Strip the "BINARY" attribute, except if we find "BINARY(" because        // this would be a BINARY or VARBINARY field type;        // by the way, a BLOB should not show the BINARY attribute        // because this is not accepted in MySQL syntax.        if (preg_match('@binary@', $printtype) && ! preg_match('@binary[\(]@', $printtype)) {            $printtype = preg_replace('@binary@', '', $printtype);            $binary = true;        } else {            $binary = false;        }        $printtype = preg_replace('@zerofill@', '', $printtype, -1, $zerofill_cnt);        $zerofill = ($zerofill_cnt > 0);        $printtype = preg_replace('@unsigned@', '', $printtype, -1, $unsigned_cnt);        $unsigned = ($unsigned_cnt > 0);        $printtype = trim($printtype);    }    $attribute     = ' ';    if ($binary) {        $attribute = 'BINARY';    }    if ($unsigned) {        $attribute = 'UNSIGNED';    }    if ($zerofill) {        $attribute = 'UNSIGNED ZEROFILL';    }    return array(        'type' => $type,        'spec_in_brackets' => $spec_in_brackets,        'enum_set_values'  => $enum_set_values,        'print_type' => $printtype,        'binary' => $binary,        'unsigned' => $unsigned,        'zerofill' => $zerofill,        'attribute' => $attribute,    );}/** * Verifies if this table's engine supports foreign keys * * @param string $engine engine * * @return  boolean */function PMA_foreignkey_supported($engine){    $engine = strtoupper($engine);    if ('INNODB' == $engine || 'PBXT' == $engine) {        return true;    } else {        return false;    }}/** * Replaces some characters by a displayable equivalent * * @param string $content content * * @return  string the content with characters replaced */function PMA_replace_binary_contents($content){    $result = str_replace("\x00", '\0', $content);    $result = str_replace("\x08", '\b', $result);    $result = str_replace("\x0a", '\n', $result);    $result = str_replace("\x0d", '\r', $result);    $result = str_replace("\x1a", '\Z', $result);    return $result;}/** * Converts GIS data to Well Known Text format * * @param binary $data        GIS data * @param bool   $includeSRID Add SRID to the WKT * * @return GIS data in Well Know Text format */function PMA_asWKT($data, $includeSRID = false){    // Convert to WKT format    $hex = bin2hex($data);    $wktsql     = "SELECT ASTEXT(x'" . $hex . "')";    if ($includeSRID) {        $wktsql .= ", SRID(x'" . $hex . "')";    }    $wktresult  = PMA_DBI_try_query($wktsql, null, PMA_DBI_QUERY_STORE);    $wktarr     = PMA_DBI_fetch_row($wktresult, 0);    $wktval     = $wktarr[0];    if ($includeSRID) {        $srid = $wktarr[1];        $wktval = "'" . $wktval . "'," . $srid;    }    @PMA_DBI_free_result($wktresult);    return $wktval;}/** * If the string starts with a \r\n pair (0x0d0a) add an extra \n * * @param string $string string * * @return  string with the chars replaced */function PMA_duplicateFirstNewline($string){    $first_occurence = strpos($string, "\r\n");    if ($first_occurence === 0) {        $string = "\n".$string;    }    return $string;}/** * Get the action word corresponding to a script name * in order to display it as a title in navigation panel * * @param string $target a valid value for $cfg['LeftDefaultTabTable'], *                       $cfg['DefaultTabTable'] or $cfg['DefaultTabDatabase'] * * @return array */function PMA_getTitleForTarget($target){    $mapping = array(        // Values for $cfg['DefaultTabTable']        'tbl_structure.php' =>  __('Structure'),        'tbl_sql.php' => __('SQL'),        'tbl_select.php' =>__('Search'),        'tbl_change.php' =>__('Insert'),        'sql.php' => __('Browse'),        // Values for $cfg['DefaultTabDatabase']        'db_structure.php' => __('Structure'),        'db_sql.php' => __('SQL'),        'db_search.php' => __('Search'),        'db_operations.php' => __('Operations'),    );    return $mapping[$target];}/** * Formats user string, expanding @VARIABLES@, accepting strftime format string. * * @param string   $string  Text where to do expansion. * @param function $escape  Function to call for escaping variable values. * @param array    $updates Array with overrides for default parameters *                 (obtained from GLOBALS). * * @return string */function PMA_expandUserString($string, $escape = null, $updates = array()){    /* Content */    $vars['http_host'] = PMA_getenv('HTTP_HOST') ? PMA_getenv('HTTP_HOST') : '';    $vars['server_name'] = $GLOBALS['cfg']['Server']['host'];    $vars['server_verbose'] = $GLOBALS['cfg']['Server']['verbose'];    $vars['server_verbose_or_name'] = ! empty($GLOBALS['cfg']['Server']['verbose'])        ? $GLOBALS['cfg']['Server']['verbose']        : $GLOBALS['cfg']['Server']['host'];    $vars['database'] = $GLOBALS['db'];    $vars['table'] = $GLOBALS['table'];    $vars['phpmyadmin_version'] = 'phpMyAdmin ' . PMA_VERSION;    /* Update forced variables */    foreach ($updates as $key => $val) {        $vars[$key] = $val;    }    /* Replacement mapping */    /*     * The __VAR__ ones are for backward compatibility, because user     * might still have it in cookies.     */    $replace = array(        '@HTTP_HOST@' => $vars['http_host'],        '@SERVER@' => $vars['server_name'],        '__SERVER__' => $vars['server_name'],        '@VERBOSE@' => $vars['server_verbose'],        '@VSERVER@' => $vars['server_verbose_or_name'],        '@DATABASE@' => $vars['database'],        '__DB__' => $vars['database'],        '@TABLE@' => $vars['table'],        '__TABLE__' => $vars['table'],        '@PHPMYADMIN@' => $vars['phpmyadmin_version'],        );    /* Optional escaping */    if (!is_null($escape)) {        foreach ($replace as $key => $val) {            $replace[$key] = $escape($val);        }    }    /* Backward compatibility in 3.5.x */    if (strpos($string, '@FIELDS@') !== false) {        $string = strtr($string, array('@FIELDS@' => '@COLUMNS@'));    }    /* Fetch columns list if required */    if (strpos($string, '@COLUMNS@') !== false) {        $columns_list = PMA_DBI_get_columns($GLOBALS['db'], $GLOBALS['table']);        $column_names = array();        foreach ($columns_list as $column) {            if (! is_null($escape)) {                $column_names[] = $escape($column['Field']);            } else {                $column_names[] = $field['Field'];            }        }        $replace['@COLUMNS@'] = implode(',', $column_names);    }    /* Do the replacement */    return strtr(strftime($string), $replace);}/** * function that generates a json output for an ajax request and ends script * execution * * @param PMA_Message|string $message    message string containing the *                                       html of the message * @param bool               $success    success whether the ajax request *                                       was successfull * @param array              $extra_data extra data  optional - *                                       any other data as part of the json request * * @return nothing */function PMA_ajaxResponse($message, $success = true, $extra_data = array()){    $response = array();    if ( $success == true ) {        $response['success'] = true;        if ($message instanceof PMA_Message) {            $response['message'] = $message->getDisplay();        } else {            $response['message'] = $message;        }    } else {        $response['success'] = false;        if ($message instanceof PMA_Message) {            $response['error'] = $message->getDisplay();        } else {            $response['error'] = $message;        }    }    // If extra_data has been provided, append it to the response array    if ( ! empty($extra_data) && count($extra_data) > 0 ) {        $response = array_merge($response, $extra_data);    }    // Set the Content-Type header to JSON so that jQuery parses the    // response correctly.    //    // At this point, other headers might have been sent;    // even if $GLOBALS['is_header_sent'] is true,    // we have to send these additional headers.    header('Cache-Control: no-cache');    header("Content-Type: application/json");    echo json_encode($response);    if (!defined('TESTSUITE'))        exit;}/** * Display the form used to browse anywhere on the local server for a file to import * * @param string $max_upload_size maximum upload size * * @return nothing */function PMA_browseUploadFile($max_upload_size){    echo '<label for="radio_import_file">' . __("Browse your computer:") . '</label>';    echo '<div id="upload_form_status" style="display: none;"></div>';    echo '<div id="upload_form_status_info" style="display: none;"></div>';    echo '<input type="file" name="import_file" id="input_import_file" />';    echo PMA_displayMaximumUploadSize($max_upload_size) . "\n";    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";}/** * Display the form used to select a file to import from the server upload directory * * @param array  $import_list array of import types * @param string $uploaddir   upload directory * * @return nothing */function PMA_selectUploadFile($import_list, $uploaddir){    echo '<label for="radio_local_import_file">' . sprintf(__("Select from the web server upload directory <b>%s</b>:"), htmlspecialchars(PMA_userDir($uploaddir))) . '</label>';    $extensions = '';    foreach ($import_list as $key => $val) {        if (!empty($extensions)) {            $extensions .= '|';        }        $extensions .= $val['extension'];    }    $matcher = '@\.(' . $extensions . ')(\.('        . PMA_supportedDecompressions() . '))?$@';    $active = (isset($timeout_passed) && $timeout_passed && isset($local_import_file))        ? $local_import_file        : '';    $files = PMA_getFileSelectOptions(        PMA_userDir($uploaddir),        $matcher,        $active    );    if ($files === false) {        PMA_Message::error(            __('The directory you set for upload work cannot be reached')        )->display();    } elseif (!empty($files)) {        echo "\n";        echo '    <select style="margin: 5px" size="1" name="local_import_file" id="select_local_import_file">' . "\n";        echo '        <option value="">&nbsp;</option>' . "\n";        echo $files;        echo '    </select>' . "\n";    } elseif (empty ($files)) {        echo '<i>' . __('There are no files to upload') . '</i>';    }}/** * Build titles and icons for action links * * @return   array   the action titles */function PMA_buildActionTitles(){    $titles = array();    $titles['Browse']     = PMA_getIcon('b_browse.png', __('Browse'));    $titles['NoBrowse']   = PMA_getIcon('bd_browse.png', __('Browse'));    $titles['Search']     = PMA_getIcon('b_select.png', __('Search'));    $titles['NoSearch']   = PMA_getIcon('bd_select.png', __('Search'));    $titles['Insert']     = PMA_getIcon('b_insrow.png', __('Insert'));    $titles['NoInsert']   = PMA_getIcon('bd_insrow.png', __('Insert'));    $titles['Structure']  = PMA_getIcon('b_props.png', __('Structure'));    $titles['Drop']       = PMA_getIcon('b_drop.png', __('Drop'));    $titles['NoDrop']     = PMA_getIcon('bd_drop.png', __('Drop'));    $titles['Empty']      = PMA_getIcon('b_empty.png', __('Empty'));    $titles['NoEmpty']    = PMA_getIcon('bd_empty.png', __('Empty'));    $titles['Edit']       = PMA_getIcon('b_edit.png', __('Edit'));    $titles['NoEdit']     = PMA_getIcon('bd_edit.png', __('Edit'));    $titles['Export']     = PMA_getIcon('b_export.png', __('Export'));    $titles['NoExport']   = PMA_getIcon('bd_export.png', __('Export'));    $titles['Execute']    = PMA_getIcon('b_nextpage.png', __('Execute'));    $titles['NoExecute']  = PMA_getIcon('bd_nextpage.png', __('Execute'));    return $titles;}/** * This function processes the datatypes supported by the DB, as specified in * $cfg['ColumnTypes'] and either returns an array (useful for quickly checking * if a datatype is supported) or an HTML snippet that creates a drop-down list. * * @param bool   $html     Whether to generate an html snippet or an array * @param string $selected The value to mark as selected in HTML mode * * @return  mixed   An HTML snippet or an array of datatypes. * */function PMA_getSupportedDatatypes($html = false, $selected = ''){    global $cfg;    if ($html) {        // NOTE: the SELECT tag in not included in this snippet.        $retval = '';        foreach ($cfg['ColumnTypes'] as $key => $value) {            if (is_array($value)) {                $retval .= "<optgroup label='" . htmlspecialchars($key) . "'>";                foreach ($value as $subvalue) {                    if ($subvalue == $selected) {                        $retval .= "<option selected='selected'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else if ($subvalue === '-') {                        $retval .= "<option disabled='disabled'>";                        $retval .= $subvalue;                        $retval .= "</option>";                    } else {                        $retval .= "<option>$subvalue</option>";                    }                }                $retval .= '</optgroup>';            } else {                if ($selected == $value) {                    $retval .= "<option selected='selected'>$value</option>";                } else {                    $retval .= "<option>$value</option>";                }            }        }    } else {        $retval = array();        foreach ($cfg['ColumnTypes'] as $value) {            if (is_array($value)) {                foreach ($value as $subvalue) {                    if ($subvalue !== '-') {                        $retval[] = $subvalue;                    }                }            } else {                if ($value !== '-') {                    $retval[] = $value;                }            }        }    }    return $retval;} // end PMA_getSupportedDatatypes()/** * Returns a list of datatypes that are not (yet) handled by PMA. * Used by: tbl_change.php and libraries/db_routines.inc.php * * @return   array   list of datatypes */function PMA_unsupportedDatatypes(){    $no_support_types = array();    return $no_support_types;}/** * Return GIS data types * * @param bool $upper_case whether to return values in upper case * * @return array GIS data types */function PMA_getGISDatatypes($upper_case = false){    $gis_data_types = array(        'geometry',        'point',        'linestring',        'polygon',        'multipoint',        'multilinestring',        'multipolygon',        'geometrycollection'    );    if ($upper_case) {        for ($i = 0; $i < count($gis_data_types); $i++) {            $gis_data_types[$i] = strtoupper($gis_data_types[$i]);        }    }    return $gis_data_types;}/** * Generates GIS data based on the string passed. * * @param string $gis_string GIS string * * @return GIS data enclosed in 'GeomFromText' function */function PMA_createGISData($gis_string){    $gis_string =  trim($gis_string);    $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|'        . 'POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';    if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $gis_string)) {        return 'GeomFromText(' . $gis_string . ')';    } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $gis_string)) {        return "GeomFromText('" . $gis_string . "')";    } else {        return $gis_string;    }}/** * Returns the names and details of the functions * that can be applied on geometry data typess. * * @param string $geom_type if provided the output is limited to the functions *                          that are applicable to the provided geometry type. * @param bool   $binary    if set to false functions that take two geometries *                          as arguments will not be included. * @param bool   $display   if set to true seperators will be added to the *                          output array. * * @return array names and details of the functions that can be applied on *               geometry data typess. */function PMA_getGISFunctions($geom_type = null, $binary = true, $display = false){    $funcs = array();    if ($display) {        $funcs[] = array('display' => ' ');    }    // Unary functions common to all geomety types    $funcs['Dimension']    = array('params' => 1, 'type' => 'int');    $funcs['Envelope']     = array('params' => 1, 'type' => 'Polygon');    $funcs['GeometryType'] = array('params' => 1, 'type' => 'text');    $funcs['SRID']         = array('params' => 1, 'type' => 'int');    $funcs['IsEmpty']      = array('params' => 1, 'type' => 'int');    $funcs['IsSimple']     = array('params' => 1, 'type' => 'int');    $geom_type = trim(strtolower($geom_type));    if ($display && $geom_type != 'geometry' && $geom_type != 'multipoint') {        $funcs[] = array('display' => '--------');    }    // Unary functions that are specific to each geomety type    if ($geom_type == 'point') {        $funcs['X'] = array('params' => 1, 'type' => 'float');        $funcs['Y'] = array('params' => 1, 'type' => 'float');    } elseif ($geom_type == 'multipoint') {        // no fucntions here    } elseif ($geom_type == 'linestring') {        $funcs['EndPoint']   = array('params' => 1, 'type' => 'point');        $funcs['GLength']    = array('params' => 1, 'type' => 'float');        $funcs['NumPoints']  = array('params' => 1, 'type' => 'int');        $funcs['StartPoint'] = array('params' => 1, 'type' => 'point');        $funcs['IsRing']     = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multilinestring') {        $funcs['GLength']  = array('params' => 1, 'type' => 'float');        $funcs['IsClosed'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'polygon') {        $funcs['Area']             = array('params' => 1, 'type' => 'float');        $funcs['ExteriorRing']     = array('params' => 1, 'type' => 'linestring');        $funcs['NumInteriorRings'] = array('params' => 1, 'type' => 'int');    } elseif ($geom_type == 'multipolygon') {        $funcs['Area']     = array('params' => 1, 'type' => 'float');        $funcs['Centroid'] = array('params' => 1, 'type' => 'point');        // Not yet implemented in MySQL        //$funcs['PointOnSurface'] = array('params' => 1, 'type' => 'point');    } elseif ($geom_type == 'geometrycollection') {        $funcs['NumGeometries'] = array('params' => 1, 'type' => 'int');    }    // If we are asked for binary functions as well    if ($binary) {        // section seperator        if ($display) {            $funcs[] = array('display' => '--------');        }        if (PMA_MYSQL_INT_VERSION < 50601) {            $funcs['Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['Contains']   = array('params' => 2, 'type' => 'int');            $funcs['Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['Equals']     = array('params' => 2, 'type' => 'int');            $funcs['Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['Touches']    = array('params' => 2, 'type' => 'int');            $funcs['Within']     = array('params' => 2, 'type' => 'int');        } else {            // If MySQl version is greaeter than or equal 5.6.1, use the ST_ prefix.            $funcs['ST_Crosses']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Contains']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Disjoint']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Equals']     = array('params' => 2, 'type' => 'int');            $funcs['ST_Intersects'] = array('params' => 2, 'type' => 'int');            $funcs['ST_Overlaps']   = array('params' => 2, 'type' => 'int');            $funcs['ST_Touches']    = array('params' => 2, 'type' => 'int');            $funcs['ST_Within']     = array('params' => 2, 'type' => 'int');        }        if ($display) {            $funcs[] = array('display' => '--------');        }        // Minimum bounding rectangle functions        $funcs['MBRContains']   = array('params' => 2, 'type' => 'int');        $funcs['MBRDisjoint']   = array('params' => 2, 'type' => 'int');        $funcs['MBREquals']     = array('params' => 2, 'type' => 'int');        $funcs['MBRIntersects'] = array('params' => 2, 'type' => 'int');        $funcs['MBROverlaps']   = array('params' => 2, 'type' => 'int');        $funcs['MBRTouches']    = array('params' => 2, 'type' => 'int');        $funcs['MBRWithin']     = array('params' => 2, 'type' => 'int');    }    return $funcs;}/** * Creates a dropdown box with MySQL functions for a particular column. * * @param array $field       Data about the column for which *                           to generate the dropdown * @param bool  $insert_mode Whether the operation is 'insert' * * @global   array    $cfg            PMA configuration * @global   array    $analyzed_sql   Analyzed SQL query * @global   mixed    $data           (null/string) FIXME: what is this for? * * @return   string   An HTML snippet of a dropdown list with function *                    names appropriate for the requested column. */function PMA_getFunctionsForField($field, $insert_mode){    global $cfg, $analyzed_sql, $data;    $selected = '';    // Find the current type in the RestrictColumnTypes. Will result in 'FUNC_CHAR'    // or something similar. Then directly look up the entry in the    // RestrictFunctions array, which'll then reveal the available dropdown options    if (isset($cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])])        && isset($cfg['RestrictFunctions'][$cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])]])    ) {        $current_func_type  = $cfg['RestrictColumnTypes'][strtoupper($field['True_Type'])];        $dropdown           = $cfg['RestrictFunctions'][$current_func_type];        $default_function   = $cfg['DefaultFunctions'][$current_func_type];    } else {        $dropdown = array();        $default_function   = '';    }    $dropdown_built = array();    $op_spacing_needed = false;    // what function defined as default?    // for the first timestamp we don't set the default function    // if there is a default value for the timestamp    // (not including CURRENT_TIMESTAMP)    // and the column does not have the    // ON UPDATE DEFAULT TIMESTAMP attribute.    if ($field['True_Type'] == 'timestamp'        && empty($field['Default'])        && empty($data)        && ! isset($analyzed_sql[0]['create_table_fields'][$field['Field']]['on_update_current_timestamp'])    ) {        $default_function = $cfg['DefaultFunctions']['first_timestamp'];    }    // For primary keys of type char(36) or varchar(36) UUID if the default function    // Only applies to insert mode, as it would silently trash data on updates.    if ($insert_mode        && $field['Key'] == 'PRI'        && ($field['Type'] == 'char(36)' || $field['Type'] == 'varchar(36)')    ) {         $default_function = $cfg['DefaultFunctions']['FUNC_UUID'];    }    // this is set only when appropriate and is always true    if (isset($field['display_binary_as_hex'])) {        $default_function = 'UNHEX';    }    // Create the output    $retval = '                <option></option>' . "\n";    // loop on the dropdown array and print all available options for that field.    foreach ($dropdown as $each_dropdown) {        $retval .= '                ';        $retval .= '<option';        if ($default_function === $each_dropdown) {            $retval .= ' selected="selected"';        }        $retval .= '>' . $each_dropdown . '</option>' . "\n";        $dropdown_built[$each_dropdown] = 'true';        $op_spacing_needed = true;    }    // For compatibility's sake, do not let out all other functions. Instead    // print a separator (blank) and then show ALL functions which weren't shown    // yet.    $cnt_functions = count($cfg['Functions']);    for ($j = 0; $j < $cnt_functions; $j++) {        if (! isset($dropdown_built[$cfg['Functions'][$j]])            || $dropdown_built[$cfg['Functions'][$j]] != 'true'        ) {            // Is current function defined as default?            $selected = ($field['first_timestamp'] && $cfg['Functions'][$j] == $cfg['DefaultFunctions']['first_timestamp'])                        || (! $field['first_timestamp'] && $cfg['Functions'][$j] == $default_function)                      ? ' selected="selected"'                      : '';            if ($op_spacing_needed == true) {                $retval .= '                ';                $retval .= '<option value="">--------</option>' . "\n";                $op_spacing_needed = false;            }            $retval .= '                ';            $retval .= '<option' . $selected . '>' . $cfg['Functions'][$j]                . '</option>' . "\n";        }    } // end for    return $retval;} // end PMA_getFunctionsForField()/** * Checks if the current user has a specific privilege and returns true if the * user indeed has that privilege or false if (s)he doesn't. This function must * only be used for features that are available since MySQL 5, because it * relies on the INFORMATION_SCHEMA database to be present. * * Example:   PMA_currentUserHasPrivilege('CREATE ROUTINE', 'mydb'); *            // Checks if the currently logged in user has the global *            // 'CREATE ROUTINE' privilege or, if not, checks if the *            // user has this privilege on database 'mydb'. * * @param string $priv The privilege to check * @param mixed  $db   null, to only check global privileges *                     string, db name where to also check for privileges * @param mixed  $tbl  null, to only check global privileges *                     string, db name where to also check for privileges * * @return bool */function PMA_currentUserHasPrivilege($priv, $db = null, $tbl = null){    // Get the username for the current user in the format    // required to use in the information schema database.    $user = PMA_DBI_fetch_value("SELECT CURRENT_USER();");    if ($user === false) {        return false;    }    $user = explode('@', $user);    $username  = "''";    $username .= str_replace("'", "''", $user[0]);    $username .= "''@''";    $username .= str_replace("'", "''", $user[1]);    $username .= "''";    // Prepage the query    $query = "SELECT `PRIVILEGE_TYPE` FROM `INFORMATION_SCHEMA`.`%s` "           . "WHERE GRANTEE='%s' AND PRIVILEGE_TYPE='%s'";    // Check global privileges first.    if (PMA_DBI_fetch_value(        sprintf(            $query,            'USER_PRIVILEGES',            $username,            $priv        )    )    ) {        return true;    }    // If a database name was provided and user does not have the    // required global privilege, try database-wise permissions.    if ($db !== null) {        $query .= " AND TABLE_SCHEMA='%s'";        if (PMA_DBI_fetch_value(            sprintf(                $query,                'SCHEMA_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db)            )        )        ) {            return true;        }    } else {        // There was no database name provided and the user        // does not have the correct global privilege.        return false;    }    // If a table name was also provided and we still didn't    // find any valid privileges, try table-wise privileges.    if ($tbl !== null) {        $query .= " AND TABLE_NAME='%s'";        if ($retval = PMA_DBI_fetch_value(            sprintf(                $query,                'TABLE_PRIVILEGES',                $username,                $priv,                PMA_sqlAddSlashes($db),                PMA_sqlAddSlashes($tbl)            )        )        ) {            return true;        }    }    // If we reached this point, the user does not    // have even valid table-wise privileges.    return false;}/** * Returns server type for current connection * * Known types are: Drizzle, MariaDB and MySQL (default) * * @return string */function PMA_getServerType(){    $server_type = 'MySQL';    if (PMA_DRIZZLE) {        $server_type = 'Drizzle';    } else if (strpos(PMA_MYSQL_STR_VERSION, 'mariadb') !== false) {        $server_type = 'MariaDB';    } else if (stripos(PMA_MYSQL_VERSION_COMMENT, 'percona') !== false) {        $server_type = 'Percona Server';    }    return $server_type;}/** * Analyzes the limit clause and return the start and length attributes of it. * * @param string $limit_clause limit clause * * @return array Start and length attributes of the limit clause */function PMA_analyzeLimitClause($limit_clause){    $start_and_length = explode(',', str_ireplace('LIMIT', '', $limit_clause));    return array(        'start'  => trim($start_and_length[0]),        'length' => trim($start_and_length[1])    );}/** * Outputs HTML code for print button. * * @return nothing */function PMA_printButton(){    echo '<p class="print_ignore">';    echo '<input type="button" id="print" value="' . __('Print') . '" />';    echo '</p>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * functions for displaying the sql query form * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php'; // used for file listingrequire_once './libraries/bookmark.lib.php'; // used for file listing/** * prints the sql query boxes * * @usedby  server_sql.php * @usedby  db_sql.php * @usedby  tbl_sql.php * @usedby  tbl_structure.php * @usedby  tbl_tracking.php * @usedby  querywindow.php * @param boolean|string  $query          query to display in the textarea *                                          or true to display last executed * @param boolean|string  $display_tab    sql|files|history|full|false *                                          what part to display *                                          false if not inside querywindow * @param string          $delimiter */function PMA_sqlQueryForm($query = true, $display_tab = false, $delimiter = ';'){    // check tab to display if inside querywindow    if (! $display_tab) {        $display_tab = 'full';        $is_querywindow = false;    } else {        $is_querywindow = true;    }    // query to show    if (true === $query) {        $query = $GLOBALS['sql_query'];    }    // set enctype to multipart for file uploads    if ($GLOBALS['is_upload']) {        $enctype = ' enctype="multipart/form-data"';    } else {        $enctype = '';    }    $table  = '';    $db     = '';    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $goto   = empty($GLOBALS['goto']) ?                    'server_sql.php' : $GLOBALS['goto'];    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'db_sql.php' : $GLOBALS['goto'];    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        $goto   = empty($GLOBALS['goto']) ?                    'tbl_sql.php' : $GLOBALS['goto'];    }    // start output    if ($is_querywindow) {        ?>        <form method="post" id="sqlqueryform" target="frame_content"              action="import.php"<?php echo $enctype; ?> name="sqlform"              onsubmit="var save_name = window.opener.parent.frame_content.name;              window.opener.parent.frame_content.name = save_name + '<?php echo time(); ?>';              this.target = window.opener.parent.frame_content.name;              return checkSqlQuery(this)">        <?php    } else {        echo '<form method="post" action="import.php" ' . $enctype;        if ($GLOBALS['cfg']['AjaxEnable']) {            echo ' class="ajax"';        }        echo ' id="sqlqueryform" name="sqlform">' . "\n";    }    if ($is_querywindow) {        echo '<input type="hidden" name="focus_querywindow" value="true" />'            ."\n";        if ($display_tab != 'sql' && $display_tab != 'full') {            echo '<input type="hidden" name="sql_query" value="" />' . "\n";            echo '<input type="hidden" name="show_query" value="1" />' . "\n";        }    }    echo '<input type="hidden" name="is_js_confirmed" value="0" />' . "\n"        .PMA_generate_common_hidden_inputs($db, $table) . "\n"        .'<input type="hidden" name="pos" value="0" />' . "\n"        .'<input type="hidden" name="goto" value="'        .htmlspecialchars($goto) . '" />' . "\n"        .'<input type="hidden" name="message_to_show" value="'        . __('Your SQL query has been executed successfully') . '" />' . "\n"        .'<input type="hidden" name="prev_sql_query" value="'        . htmlspecialchars($query) . '" />' . "\n";    // display querybox    if ($display_tab === 'full' || $display_tab === 'sql') {        PMA_sqlQueryFormInsert($query, $is_querywindow, $delimiter);    }    // display uploads    if ($display_tab === 'files' && $GLOBALS['is_upload']) {        PMA_sqlQueryFormUpload();    }    // Bookmark Support    if ($display_tab === 'full' || $display_tab === 'history') {        if (! empty($GLOBALS['cfg']['Bookmark'])) {            PMA_sqlQueryFormBookmark();        }    }    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) {        echo PMA_set_enc_form('    ');    }    echo '</form>' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            if (window.opener) {                window.opener.parent.insertQuery();            }        //]]>        </script>        <?php    }    // print an empty div, which will be later filled with the sql query results by ajax    echo '<div id="sqlqueryresults"></div>';}/** * prints querybox fieldset * * @usedby  PMA_sqlQueryForm() * @param string      $query          query to display in the textarea * @param boolean     $is_querywindow if inside querywindow or not * @param string      $delimiter      default delimiter to use */function PMA_sqlQueryFormInsert($query = '', $is_querywindow = false, $delimiter = ';'){    // enable auto select text in textarea    if ($GLOBALS['cfg']['TextareaAutoSelect']) {        $auto_sel = ' onclick="selectContent(this, sql_box_locked, true)"';    } else {        $auto_sel = '';    }    // enable locking if inside query window    if ($is_querywindow) {        $locking = ' onkeypress="document.sqlform.elements[\'LockFromUpdate\'].'            .'checked = true;"';        $height = $GLOBALS['cfg']['TextareaRows'] * 1.25;    } else {        $locking = '';        $height = $GLOBALS['cfg']['TextareaRows'] * 2;    }    $table          = '';    $db             = '';    $fields_list    = array();    if (! strlen($GLOBALS['db'])) {        // prepare for server related        $legend = sprintf(__('Run SQL query/queries on server %s'),            '&quot;' . htmlspecialchars(                ! empty($GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose']) ? $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['verbose'] : $GLOBALS['cfg']['Servers'][$GLOBALS['server']]['host']) . '&quot;');    } elseif (! strlen($GLOBALS['table'])) {        // prepare for db related        $db     = $GLOBALS['db'];        // if you want navigation:        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryDatabase'], 'PMA_backquote');        }    } else {        $table  = $GLOBALS['table'];        $db     = $GLOBALS['db'];        // Get the list and number of fields        // we do a try_query here, because we could be in the query window,        // trying to synchonize and the table has not yet been created        $fields_list = PMA_DBI_get_columns($db, $GLOBALS['table'], null, true);        $tmp_db_link = '<a href="' . $GLOBALS['cfg']['DefaultTabDatabase']            . '?' . PMA_generate_common_url($db) . '"';        if ($is_querywindow) {            $tmp_db_link .= ' target="_self"'                . ' onclick="this.target=window.opener.frame_content.name"';        }        $tmp_db_link .= '>'            . htmlspecialchars($db) . '</a>';        // else use        // $tmp_db_link = htmlspecialchars($db);        $legend = sprintf(__('Run SQL query/queries on database %s'), $tmp_db_link);        if (empty($query)) {            $query = PMA_expandUserString($GLOBALS['cfg']['DefaultQueryTable'], 'PMA_backquote');        }    }    $legend .= ': ' . PMA_showMySQLDocu('SQL-Syntax', 'SELECT');    if (count($fields_list)) {        $sqlquerycontainer_id = 'sqlquerycontainer';    } else {        $sqlquerycontainer_id = 'sqlquerycontainerfull';    }    echo '<a name="querybox"></a>' . "\n"        .'<div id="queryboxcontainer">' . "\n"        .'<fieldset id="querybox">' . "\n";    echo '<legend>' . $legend . '</legend>' . "\n";    echo '<div id="queryfieldscontainer">' . "\n";    echo '<div id="' . $sqlquerycontainer_id . '">' . "\n"        .'<textarea tabindex="100" name="sql_query" id="sqlquery"'        .'  cols="' . $GLOBALS['cfg']['TextareaCols'] . '"'        .'  rows="' . $height . '"'        .'  dir="' . $GLOBALS['text_dir'] . '"'        .$auto_sel . $locking . '>' . htmlspecialchars($query) . '</textarea>' . "\n";    // Add buttons to generate query easily for select all,single select,insert,update and delete    if (count($fields_list)) {        echo '<input type="button" value="SELECT *" id="selectall" class="sqlbutton" />';        echo '<input type="button" value="SELECT" id="select" class="sqlbutton" />';        echo '<input type="button" value="INSERT" id="insert" class="sqlbutton" />';        echo '<input type="button" value="UPDATE" id="update" class="sqlbutton" />';        echo '<input type="button" value="DELETE" id="delete" class="sqlbutton" />';    }    echo '<input type="button" value="' . __('Clear') . '" id="clear" class="sqlbutton" />';    echo '</div>' . "\n";    if (count($fields_list)) {        echo '<div id="tablefieldscontainer">' . "\n"            .'<label>' . __('Columns') . '</label>' . "\n"            .'<select id="tablefields" name="dummy" '            .'size="' . ($GLOBALS['cfg']['TextareaRows'] - 2) . '" '            .'multiple="multiple" ondblclick="insertValueQuery()">' . "\n";        foreach ($fields_list as $field) {            echo '<option value="'                .PMA_backquote(htmlspecialchars($field['Field'])) . '"';            if (isset($field['Field']) && strlen($field['Field']) && isset($field['Comment'])) {                echo ' title="' . htmlspecialchars($field['Comment']) . '"';            }            echo '>' . htmlspecialchars($field['Field']) . '</option>' . "\n";        }        echo '</select>' . "\n"            .'<div id="tablefieldinsertbuttoncontainer">' . "\n";        if ($GLOBALS['cfg']['PropertiesIconic']) {            echo '<input type="button" name="insert" value="&lt;&lt;"'                .' onclick="insertValueQuery()"'                .' title="' . __('Insert') . '" />' . "\n";        } else {            echo '<input type="button" name="insert"'                .' value="' . __('Insert') . '"'                .' onclick="insertValueQuery()" />' . "\n";        }        echo '</div>' . "\n"            .'</div>' . "\n";    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</div>' . "\n";    if (! empty($GLOBALS['cfg']['Bookmark'])) {        ?>        <div id="bookmarkoptions">        <div class="formelement">        <label for="bkm_label">            <?php echo __('Bookmark this SQL query'); ?>:</label>        <input type="text" name="bkm_label" id="bkm_label" tabindex="110" value="" />        </div>        <div class="formelement">        <input type="checkbox" name="bkm_all_users" tabindex="111" id="id_bkm_all_users"            value="true" />        <label for="id_bkm_all_users">            <?php echo __('Let every user access this bookmark'); ?></label>        </div>        <div class="formelement">        <input type="checkbox" name="bkm_replace" tabindex="112" id="id_bkm_replace"            value="true" />        <label for="id_bkm_replace">            <?php echo __('Replace existing bookmark of same name'); ?></label>        </div>        </div>        <?php    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n"        .'</div>' . "\n";    echo '<fieldset id="queryboxfooter" class="tblFooters">' . "\n";    echo '<div class="formelement">' . "\n";    if ($is_querywindow) {        ?>        <script type="text/javascript">        //<![CDATA[            document.writeln(' <input type="checkbox" name="LockFromUpdate" checked="checked" tabindex="120" id="checkbox_lock" /> <label for="checkbox_lock"><?php echo __('Do not overwrite this query from outside the window'); ?></label> ');        //]]>        </script>        <?php    }    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<label for="id_sql_delimiter">[ ' . __('Delimiter')        .'</label>' . "\n";    echo '<input type="text" name="sql_delimiter" tabindex="131" size="3" '        .'value="' . $delimiter . '" '        .'id="id_sql_delimiter" /> ]' . "\n";    echo '<input type="checkbox" name="show_query" value="1" '        .'id="checkbox_show_query" tabindex="132" checked="checked" />' . "\n"        .'<label for="checkbox_show_query">' . __('Show this query here again')        .'</label>' . "\n";    if (! $is_querywindow) {        echo '<input type="checkbox" name="retain_query_box" value="1" '            . 'id="retain_query_box" tabindex="133" '            . ($GLOBALS['cfg']['RetainQueryBox'] === false ? '' : ' checked="checked"')            . ' />'            . '<label for="retain_query_box">' . __('Retain query box')            . '</label>';    }    echo '</div>' . "\n";    echo '<input type="submit" id="button_submit_query" name="SQL" tabindex="200" value="' . __('Go') . '" />'        ."\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormBookmark(){    $bookmark_list = PMA_Bookmark_getList($GLOBALS['db']);    if (! $bookmark_list || count($bookmark_list) < 1) {        return;    }    echo '<fieldset id="bookmarkoptions">';    echo '<legend>';    echo __('Bookmarked SQL query') . '</legend>' . "\n";    echo '<div class="formelement">';    echo '<select name="id_bookmark" id="id_bookmark">' . "\n";    echo '<option value="">&nbsp;</option>' . "\n";    foreach ($bookmark_list as $key => $value) {        echo '<option value="' . htmlspecialchars($key) . '">'            .htmlspecialchars($value) . '</option>' . "\n";    }    // &nbsp; is required for correct display with styles/line height    echo '</select>&nbsp;' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo __('Variable');    if ($GLOBALS['cfg']['ReplaceHelpImg']) {        echo ' <a href="./Documentation.html#faqbookmark"'            .' target="documentation">'            . PMA_getImage('b_help.png', __('Documentation')) . '</a>';    } else {        echo ' (<a href="./Documentation.html#faqbookmark"'            .' target="documentation">' . __('Documentation') . '</a>): ';    }    echo '<input type="text" name="bookmark_variable" class="textfield"'        .' size="10" />' . "\n";    echo '</div>' . "\n";    echo '<div class="formelement">' . "\n";    echo '<input type="radio" name="action_bookmark" value="0"'        .' id="radio_bookmark_exe" checked="checked" />'        .'<label for="radio_bookmark_exe">' . __('Submit')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="1"'        .' id="radio_bookmark_view" />'        .'<label for="radio_bookmark_view">' . __('View only')        .'</label>' . "\n";    echo '<input type="radio" name="action_bookmark" value="2"'        .' id="radio_bookmark_del" />'        .'<label for="radio_bookmark_del">' . __('Delete')        .'</label>' . "\n";    echo '</div>' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";    echo '<fieldset id="bookmarkoptionsfooter" class="tblFooters">' . "\n";    echo '<input type="submit" name="SQL" id="button_submit_bookmark" value="' . __('Go') . '" />';    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>' . "\n";}/** * prints bookmark fieldset * * @usedby  PMA_sqlQueryForm() */function PMA_sqlQueryFormUpload(){    $errors = array ();    $matcher = '@\.sql(\.(' . PMA_supportedDecompressions() . '))?$@'; // we allow only SQL here    if (!empty($GLOBALS['cfg']['UploadDir'])) {        $files = PMA_getFileSelectOptions(PMA_userDir($GLOBALS['cfg']['UploadDir']), $matcher, (isset($timeout_passed) && $timeout_passed && isset($local_import_file)) ? $local_import_file : '');    } else {        $files = '';    }    // start output    echo '<fieldset id="">';    echo '<legend>';    echo __('Browse your computer:') . '</legend>';    echo '<div class="formelement">';    echo '<input type="file" name="sql_file" class="textfield" /> ';    echo PMA_displayMaximumUploadSize($GLOBALS['max_upload_size']);    // some browsers should respect this :)    echo PMA_generateHiddenMaxFileSize($GLOBALS['max_upload_size']) . "\n";    echo '</div>';    if ($files === false) {        $errors[] = PMA_Message::error( __('The directory you set for upload work cannot be reached'));    } elseif (!empty($files)) {        echo '<div class="formelement">';        echo '<strong>' . __('web server upload directory') .':</strong>' . "\n";        echo '<select size="1" name="sql_localfile">' . "\n";        echo '<option value="" selected="selected"></option>' . "\n";        echo $files;        echo '</select>' . "\n";        echo '</div>';    }    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    echo '<fieldset id="" class="tblFooters">';    echo __('Character set of the file:') . "\n";    echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET,            'charset_of_file', null, 'utf8', false);    echo '<input type="submit" name="SQL" value="' . __('Go')        .'" />' . "\n";    echo '<div class="clearfloat"></div>' . "\n";    echo '</fieldset>';    foreach ($errors as $error) {        $error->display();    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for routine management. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sets required globals */function PMA_RTN_setGlobals(){    global $param_directions, $param_opts_num, $param_sqldataaccess;    $param_directions    = array('IN',                                 'OUT',                                 'INOUT');    $param_opts_num      = array('UNSIGNED',                                 'ZEROFILL',                                 'UNSIGNED ZEROFILL');    $param_sqldataaccess = array('NO SQL',                                 'CONTAINS SQL',                                 'READS SQL DATA',                                 'MODIFIES SQL DATA');}/** * Main function for the routines functionality */function PMA_RTN_main(){    global $db;    PMA_RTN_setGlobals();    /**     * Process all requests     */    PMA_RTN_handleEditor();    PMA_RTN_handleExecute();    PMA_RTN_handleExport();    /**     * Display a list of available routines     */    $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, ";    $columns .= "`DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";    $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "'";    $items    = PMA_DBI_fetch_result(        "SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;"    );    echo PMA_RTE_getList('routine', $items);    /**     * Display the form for adding a new routine, if the user has the privileges.     */    echo PMA_RTN_getFooterLinks();    /**     * Display a warning for users with PHP's old "mysql" extension.     */    if ($GLOBALS['cfg']['Server']['extension'] === 'mysql') {        trigger_error(            __('You are using PHP\'s deprecated \'mysql\' extension, '            . 'which is not capable of handling multi queries. '            . '<b>The execution of some stored routines may fail!</b> '            . 'Please use the improved \'mysqli\' extension to '            . 'avoid any problems.'),            E_USER_WARNING        );    }} // end PMA_RTN_main()/** * This function parses a string containing one parameter of a routine, * as returned by PMA_RTN_parseAllParameters() and returns an array containing * the information about this parameter. * * @param   string  $value    A string containing one parameter of a routine * * @return  array             Parsed information about the input parameter */function PMA_RTN_parseOneParameter($value){    global $param_directions;    $retval = array(0 => '',                    1 => '',                    2 => '',                    3 => '',                    4 => '');    $parsed_param = PMA_SQP_parse($value);    $pos = 0;    if (in_array(strtoupper($parsed_param[$pos]['data']), $param_directions)) {        $retval[0] = strtoupper($parsed_param[0]['data']);        $pos++;    }    if ($parsed_param[$pos]['type'] == 'alpha_identifier'        || $parsed_param[$pos]['type'] == 'quote_backtick'    ) {        $retval[1] = PMA_unQuote($parsed_param[$pos]['data']);        $pos++;    }    $depth = 0;    $param_length = '';    $param_opts = array();    for ($i=$pos; $i<$parsed_param['len']; $i++) {        if (($parsed_param[$i]['type'] == 'alpha_columnType'            || $parsed_param[$i]['type'] == 'alpha_functionName') && $depth == 0 // "CHAR" seems to be mistaken for a function by the parser        ) {            $retval[2] = strtoupper($parsed_param[$i]['data']);        } else if ($parsed_param[$i]['type'] == 'punct_bracket_open_round' && $depth == 0) {            $depth = 1;        } else if ($parsed_param[$i]['type'] == 'punct_bracket_close_round' && $depth == 1) {            $depth = 0;        } else if ($depth == 1) {            $param_length .= $parsed_param[$i]['data'];        } else if ($parsed_param[$i]['type'] == 'alpha_reservedWord' && strtoupper($parsed_param[$i]['data']) == 'CHARSET' && $depth == 0) {            if ($parsed_param[$i+1]['type'] == 'alpha_charset' || $parsed_param[$i+1]['type'] == 'alpha_identifier') {                $param_opts[] = strtolower($parsed_param[$i+1]['data']);            }        } else if ($parsed_param[$i]['type'] == 'alpha_columnAttrib' && $depth == 0) {            $param_opts[] = strtoupper($parsed_param[$i]['data']);        }    }    $retval[3] = $param_length;    sort($param_opts);    $retval[4] = implode(' ', $param_opts);    return $retval;} // end PMA_RTN_parseOneParameter()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's parameters. * * @param   array   $parsed_query  Parsed query, returned by by PMA_SQP_parse() * @param   string  $routine_type  Routine type: 'PROCEDURE' or 'FUNCTION' * * @return  array   Information about the parameteres of a routine. */function PMA_RTN_parseAllParameters($parsed_query, $routine_type){    $retval = array();    $retval['num'] = 0;    // First get the list of parameters from the query    $buffer = '';    $params = array();    $fetching = false;    $depth = 0;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == $routine_type) {            $fetching = true;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_open_round') {            $depth++;            if ($depth > 1) {                $buffer .= $parsed_query[$i]['data'] . ' ';            }        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_bracket_close_round') {            $depth--;            if ($depth > 0) {                $buffer .= $parsed_query[$i]['data'] . ' ';            } else {                break;            }        } else if ($parsed_query[$i]['type'] == 'punct_listsep' && $depth == 1) {            $params[] = $buffer;            $retval['num']++;            $buffer = '';        } else if ($fetching == true && $depth > 0) {            $buffer .= $parsed_query[$i]['data'] . ' ';        }    }    if (! empty($buffer)) {        $params[] = $buffer;        $retval['num']++;    }    // Now parse each parameter individually    foreach ($params as $key => $value) {        list($retval['dir'][],             $retval['name'][],             $retval['type'][],             $retval['length'][],             $retval['opts'][]) = PMA_RTN_parseOneParameter($value);    }    // Since some indices of $retval may be still undefined, we fill    // them each with an empty array to avoid E_ALL errors in PHP.    foreach (array('dir', 'name', 'type', 'length', 'opts') as $key => $index) {        if (! isset($retval[$index])) {            $retval[$index] = array();        }    }    return $retval;} // end PMA_RTN_parseAllParameters()/** * This function looks through the contents of a parsed * SHOW CREATE [PROCEDURE | FUNCTION] query and extracts * information about the routine's definer. * * @param   array   $parsed_query   Parsed query, returned by PMA_SQP_parse() * * @return  string  The definer of a routine. */function PMA_RTN_parseRoutineDefiner($parsed_query){    $retval = '';    $fetching = false;    for ($i=0; $i<$parsed_query['len']; $i++) {        if ($parsed_query[$i]['type'] == 'alpha_reservedWord' && $parsed_query[$i]['data'] == 'DEFINER') {            $fetching = true;        } else if ($fetching == true && ($parsed_query[$i]['type'] != 'quote_backtick' && substr($parsed_query[$i]['type'], 0, 5) != 'punct')) {            break;        } else if ($fetching == true && $parsed_query[$i]['type'] == 'quote_backtick') {            $retval .= PMA_unQuote($parsed_query[$i]['data']);        } else if ($fetching == true && $parsed_query[$i]['type'] == 'punct_user') {            $retval .= $parsed_query[$i]['data'];        }    }    return $retval;} // end PMA_RTN_parseRoutineDefiner()/** * Handles editor requests for adding or editing an item */function PMA_RTN_handleEditor(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $errors;    if (! empty($_REQUEST['editor_process_add'])        || ! empty($_REQUEST['editor_process_edit'])    ) {        /**         * Handle a request to create/edit a routine         */        $sql_query = '';        $routine_query = PMA_RTN_getQueryFromRequest();        if (! count($errors)) { // set by PMA_RTN_getQueryFromRequest()            // Execute the created query            if (! empty($_REQUEST['editor_process_edit'])) {                if (! in_array($_REQUEST['item_original_type'], array('PROCEDURE', 'FUNCTION'))) {                    $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_original_type']));                } else {                    // Backup the old routine, in case something goes wrong                    $create_routine = PMA_DBI_get_definition($db, $_REQUEST['item_original_type'], $_REQUEST['item_original_name']);                    $drop_routine = "DROP {$_REQUEST['item_original_type']} " . PMA_backquote($_REQUEST['item_original_name']) . ";\n";                    $result = PMA_DBI_try_query($drop_routine);                    if (! $result) {                        $errors[] = sprintf(__('The following query has failed: "%s"'), $drop_routine) . '<br />'                                          . __('MySQL said: ') . PMA_DBI_getError(null);                    } else {                        $result = PMA_DBI_try_query($routine_query);                        if (! $result) {                            $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br />'                                              . __('MySQL said: ') . PMA_DBI_getError(null);                            // We dropped the old routine, but were unable to create the new one                            // Try to restore the backup query                            $result = PMA_DBI_try_query($create_routine);                            if (! $result) {                                // OMG, this is really bad! We dropped the query, failed to create a new one                                // and now even the backup query does not execute!                                // This should not happen, but we better handle this just in case.                                $errors[] = __('Sorry, we failed to restore the dropped routine.') . '<br />'                                                  . __('The backed up query was:') . "\"$create_routine\"" . '<br />'                                                  . __('MySQL said: ') . PMA_DBI_getError(null);                            }                        } else {                            $message = PMA_Message::success(__('Routine %1$s has been modified.'));                            $message->addParam(PMA_backquote($_REQUEST['item_name']));                            $sql_query = $drop_routine . $routine_query;                        }                    }                }            } else {                // 'Add a new routine' mode                $result = PMA_DBI_try_query($routine_query);                if (! $result) {                    $errors[] = sprintf(__('The following query has failed: "%s"'), $routine_query) . '<br /><br />'                                      . __('MySQL said: ') . PMA_DBI_getError(null);                } else {                    $message = PMA_Message::success(__('Routine %1$s has been created.'));                    $message->addParam(PMA_backquote($_REQUEST['item_name']));                    $sql_query = $routine_query;                }            }        }        if (count($errors)) {            $message = PMA_Message::error(__('<b>One or more errors have occured while processing your request:</b>'));            $message->addString('<ul>');            foreach ($errors as $string) {                $message->addString('<li>' . $string . '</li>');            }            $message->addString('</ul>');        }        $output = PMA_showMessage($message, $sql_query);        if ($GLOBALS['is_ajax_request']) {            $extra_data = array();            if ($message->isSuccess()) {                $columns  = "`SPECIFIC_NAME`, `ROUTINE_NAME`, `ROUTINE_TYPE`, `DTD_IDENTIFIER`, `ROUTINE_DEFINITION`";                $where    = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "                          . "AND ROUTINE_NAME='" . PMA_sqlAddSlashes($_REQUEST['item_name']) . "'"                          . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($_REQUEST['item_type']) . "'";                $routine  = PMA_DBI_fetch_single_row("SELECT $columns FROM `INFORMATION_SCHEMA`.`ROUTINES` WHERE $where;");                $extra_data['name']    = htmlspecialchars(strtoupper($_REQUEST['item_name']));                $extra_data['new_row'] = PMA_RTN_getRowForList($routine);                $extra_data['insert']  = ! empty($routine);                $response = $output;            } else {                $response = $message;            }            PMA_ajaxResponse($response, $message->isSuccess(), $extra_data);        }    }    /**     * Display a form used to add/edit a routine, if necessary     */    if (count($errors) || ( empty($_REQUEST['editor_process_add']) && empty($_REQUEST['editor_process_edit'])        && (! empty($_REQUEST['add_item']) || ! empty($_REQUEST['edit_item'])        || ! empty($_REQUEST['routine_addparameter']) || ! empty($_REQUEST['routine_removeparameter'])        || ! empty($_REQUEST['routine_changetype']))) // FIXME: this must be simpler than that    ) {        // Handle requests to add/remove parameters and changing routine type        // This is necessary when JS is disabled        $operation = '';        if (! empty($_REQUEST['routine_addparameter'])) {            $operation = 'add';        } else if (! empty($_REQUEST['routine_removeparameter'])) {            $operation = 'remove';        } else if (! empty($_REQUEST['routine_changetype'])) {            $operation = 'change';        }        // Get the data for the form (if any)        if (! empty($_REQUEST['add_item'])) {            $title = PMA_RTE_getWord('add');            $routine = PMA_RTN_getDataFromRequest();            $mode = 'add';        } else if (! empty($_REQUEST['edit_item'])) {            $title = __("Edit routine");            if (! $operation && ! empty($_REQUEST['item_name']) && empty($_REQUEST['editor_process_edit'])) {                $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type']);                if ($routine !== false) {                    $routine['item_original_name'] = $routine['item_name'];                    $routine['item_original_type'] = $routine['item_type'];                }            } else {                $routine = PMA_RTN_getDataFromRequest();            }            $mode = 'edit';        }        if ($routine !== false) {            // Show form            $editor = PMA_RTN_getEditorForm($mode, $operation, $routine);            if ($GLOBALS['is_ajax_request']) {                $template   = PMA_RTN_getParameterRow();                $extra_data = array('title' => $title,                                    'param_template' => $template,                                    'type' => $routine['item_type']);                PMA_ajaxResponse($editor, true, $extra_data);            }            echo "\n\n<h2>$title</h2>\n\n$editor";            include './libraries/footer.inc.php';            // exit;        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, false);            } else {                $message->display();            }        }    }} // end PMA_RTN_handleEditor()/** * This function will generate the values that are required to * complete the editor form. It is especially necessary to handle * the 'Add another parameter', 'Remove last parameter' and * 'Change routine type' functionalities when JS is disabled. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromRequest(){    global $_REQUEST, $param_directions, $param_sqldataaccess;    $retval = array();    $indices = array('item_name',                     'item_original_name',                     'item_returnlength',                     'item_returnopts_num',                     'item_returnopts_text',                     'item_definition',                     'item_comment',                     'item_definer');    foreach ($indices as $key => $index) {        $retval[$index] = isset($_REQUEST[$index]) ? $_REQUEST[$index] : '';    }    $retval['item_type']         = 'PROCEDURE';    $retval['item_type_toggle']  = 'FUNCTION';    if (isset($_REQUEST['item_type']) && $_REQUEST['item_type'] == 'FUNCTION') {        $retval['item_type']         = 'FUNCTION';        $retval['item_type_toggle']  = 'PROCEDURE';    }    $retval['item_original_type'] = 'PROCEDURE';    if (isset($_REQUEST['item_original_type'])        && $_REQUEST['item_original_type'] == 'FUNCTION'    ) {        $retval['item_original_type'] = 'FUNCTION';    }    $retval['item_num_params']      = 0;    $retval['item_param_dir']       = array();    $retval['item_param_name']      = array();    $retval['item_param_type']      = array();    $retval['item_param_length']    = array();    $retval['item_param_opts_num']  = array();    $retval['item_param_opts_text'] = array();    if (   isset($_REQUEST['item_param_name'])        && isset($_REQUEST['item_param_type'])        && isset($_REQUEST['item_param_length'])        && isset($_REQUEST['item_param_opts_num'])        && isset($_REQUEST['item_param_opts_text'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_opts_num'])        && is_array($_REQUEST['item_param_opts_text'])    ) {        if ($_REQUEST['item_type'] == 'PROCEDURE') {            $retval['item_param_dir'] = $_REQUEST['item_param_dir'];            foreach ($retval['item_param_dir'] as $key => $value) {                if (! in_array($value, $param_directions, true)) {                    $retval['item_param_dir'][$key] = '';                }            }        }        $retval['item_param_name'] = $_REQUEST['item_param_name'];        $retval['item_param_type'] = $_REQUEST['item_param_type'];        foreach ($retval['item_param_type'] as $key => $value) {            if (! in_array($value, PMA_getSupportedDatatypes(), true)) {                $retval['item_param_type'][$key] = '';            }        }        $retval['item_param_length']    = $_REQUEST['item_param_length'];        $retval['item_param_opts_num']  = $_REQUEST['item_param_opts_num'];        $retval['item_param_opts_text'] = $_REQUEST['item_param_opts_text'];        $retval['item_num_params'] = max(            count($retval['item_param_name']),            count($retval['item_param_type']),            count($retval['item_param_length']),            count($retval['item_param_opts_num']),            count($retval['item_param_opts_text'])        );    }    $retval['item_returntype'] = '';    if (isset($_REQUEST['item_returntype'])        && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())    ) {        $retval['item_returntype'] = $_REQUEST['item_returntype'];    }    $retval['item_isdeterministic'] = '';    if (isset($_REQUEST['item_isdeterministic'])        && strtolower($_REQUEST['item_isdeterministic']) == 'on'    ) {        $retval['item_isdeterministic'] = " checked='checked'";    }    $retval['item_securitytype_definer'] = '';    $retval['item_securitytype_invoker'] = '';    if (isset($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] === 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($_REQUEST['item_securitytype'] === 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }    }    $retval['item_sqldataaccess'] = '';    if (isset($_REQUEST['item_sqldataaccess'])        && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess, true)    ) {        $retval['item_sqldataaccess'] = $_REQUEST['item_sqldataaccess'];    }    return $retval;} // end function PMA_RTN_getDataFromRequest()/** * This function will generate the values that are required to complete * the "Edit routine" form given the name of a routine. * * @param   string   $name   The name of the routine. * @param   string   $type   Type of routine (ROUTINE|PROCEDURE) * @param   bool     $all    Whether to return all data or just *                           the info about parameters. * * @return  array    Data necessary to create the routine editor. */function PMA_RTN_getDataFromName($name, $type, $all = true){    global $db;    $retval  = array();    // Build and execute the query    $fields  = "SPECIFIC_NAME, ROUTINE_TYPE, DTD_IDENTIFIER, "             . "ROUTINE_DEFINITION, IS_DETERMINISTIC, SQL_DATA_ACCESS, "             . "ROUTINE_COMMENT, SECURITY_TYPE";    $where   = "ROUTINE_SCHEMA='" . PMA_sqlAddSlashes($db) . "' "             . "AND SPECIFIC_NAME='" . PMA_sqlAddSlashes($name) . "'"             . "AND ROUTINE_TYPE='" . PMA_sqlAddSlashes($type) . "'";    $query   = "SELECT $fields FROM INFORMATION_SCHEMA.ROUTINES WHERE $where;";    $routine = PMA_DBI_fetch_single_row($query);    if (! $routine) {        return false;    }    // Get required data    $retval['item_name'] = $routine['SPECIFIC_NAME'];    $retval['item_type'] = $routine['ROUTINE_TYPE'];    $parsed_query = PMA_SQP_parse(        PMA_DBI_get_definition(            $db,            $routine['ROUTINE_TYPE'],            $routine['SPECIFIC_NAME']        )    );    $params = PMA_RTN_parseAllParameters($parsed_query, $routine['ROUTINE_TYPE']);    $retval['item_num_params']      = $params['num'];    $retval['item_param_dir']       = $params['dir'];    $retval['item_param_name']      = $params['name'];    $retval['item_param_type']      = $params['type'];    $retval['item_param_length']    = $params['length'];    $retval['item_param_opts_num']  = $params['opts'];    $retval['item_param_opts_text'] = $params['opts'];    // Get extra data    if ($all) {        if ($retval['item_type'] == 'FUNCTION') {            $retval['item_type_toggle'] = 'PROCEDURE';        } else {            $retval['item_type_toggle'] = 'FUNCTION';        }        $retval['item_returntype']   = '';        $retval['item_returnlength'] = '';        $retval['item_returnopts_num']  = '';        $retval['item_returnopts_text'] = '';        if (! empty($routine['DTD_IDENTIFIER'])) {            if (strlen($routine['DTD_IDENTIFIER']) > 63) {                // If the DTD_IDENTIFIER string from INFORMATION_SCHEMA is                // at least 64 characters, then it may actually have been                // chopped because that column is a varchar(64), so we will                // parse the output of SHOW CREATE query to get accurate                // information about the return variable.                $dtd = '';                $fetching = false;                for ($i=0; $i<$parsed_query['len']; $i++) {                    if ($parsed_query[$i]['type'] == 'alpha_reservedWord'                        && strtoupper($parsed_query[$i]['data']) == 'RETURNS'                    ) {                        $fetching = true;                    } else if ($fetching == true && $parsed_query[$i]['type'] == 'alpha_reservedWord') {                        // We will not be looking for options such as UNSIGNED                        // or ZEROFILL because there is no way that a numeric                        // field's DTD_IDENTIFIER can be longer than 64                        // characters. We can safely assume that the return                        // datatype is either ENUM or SET, so we only look                        // for CHARSET.                        $word = strtoupper($parsed_query[$i]['data']);                        if ($word == 'CHARSET'                            && ($parsed_query[$i+1]['type'] == 'alpha_charset'                            || $parsed_query[$i+1]['type'] == 'alpha_identifier')                        ) {                            $dtd .= $word . ' ' . $parsed_query[$i+1]['data'];                        }                        break;                    } else if ($fetching == true) {                        $dtd .= $parsed_query[$i]['data'] . ' ';                    }                }                $routine['DTD_IDENTIFIER'] = $dtd;            }            $returnparam = PMA_RTN_parseOneParameter($routine['DTD_IDENTIFIER']);            $retval['item_returntype']      = $returnparam[2];            $retval['item_returnlength']    = $returnparam[3];            $retval['item_returnopts_num']  = $returnparam[4];            $retval['item_returnopts_text'] = $returnparam[4];        }        $retval['item_definer']         = PMA_RTN_parseRoutineDefiner($parsed_query);        $retval['item_definition']      = $routine['ROUTINE_DEFINITION'];        $retval['item_isdeterministic'] = '';        if ($routine['IS_DETERMINISTIC'] == 'YES') {            $retval['item_isdeterministic'] = " checked='checked'";        }        $retval['item_securitytype_definer'] = '';        $retval['item_securitytype_invoker'] = '';        if ($routine['SECURITY_TYPE'] == 'DEFINER') {            $retval['item_securitytype_definer'] = " selected='selected'";        } else if ($routine['SECURITY_TYPE'] == 'INVOKER') {            $retval['item_securitytype_invoker'] = " selected='selected'";        }        $retval['item_sqldataaccess'] = $routine['SQL_DATA_ACCESS'];        $retval['item_comment']       = $routine['ROUTINE_COMMENT'];    }    return $retval;} // PMA_RTN_getDataFromName()/** * Creates one row for the parameter table used in the routine editor. * * @param   array    $routine    Data for the routine returned by *                               PMA_RTN_getDataFromRequest() or *                               PMA_RTN_getDataFromName() * @param   mixed    $index      Either a numeric index of the row being processed *                               or NULL to create a template row for AJAX request * @param   string   $class      Class used to hide the direction column, if the *                               row is for a stored function. * * @return    string    HTML code of one row of parameter table for the editor. */function PMA_RTN_getParameterRow($routine = array(), $index = null, $class = ''){    global $param_directions, $param_opts_num, $titles;    if ($index === null) {        // template row for AJAX request        $i = 0;        $index = '%s';        $drop_class = '';        $routine = array(            'item_param_dir'       => array(0 => ''),            'item_param_name'      => array(0 => ''),            'item_param_type'      => array(0 => ''),            'item_param_length'    => array(0 => ''),            'item_param_opts_num'  => array(0 => ''),            'item_param_opts_text' => array(0 => '')        );    } else if (! empty($routine)) {        // regular row for routine editor        $drop_class = ' hide';        $i = $index;    } else {        // No input data. This shouldn't happen,        // but better be safe than sorry.        return '';    }    // Create the output    $retval  = "";    $retval .= "        <tr>\n";    $retval .= "            <td class='routine_direction_cell$class'>\n";    $retval .= "                <select name='item_param_dir[$index]'>\n";    foreach ($param_directions as $key => $value) {        $selected = "";        if (! empty($routine['item_param_dir'][$i])            && $routine['item_param_dir'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "                    <option$selected>$value</option>\n";    }    $retval .= "                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td><input name='item_param_name[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_name'][$i]}' /></td>\n";    $retval .= "            <td><select name='item_param_type[$index]'>";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_param_type'][$i]) . "\n";    $retval .= "            </select></td>\n";    $retval .= "            <td>\n";    $retval .= "                <input id='item_param_length_$index'\n";    $retval .= "                       name='item_param_length[$index]' type='text'\n";    $retval .= "                       value='{$routine['item_param_length'][$i]}' />\n";    $retval .= "                <div class='enum_hint'>\n";    $retval .= "                    <a class='open_enum_editor' target='_blank'\n";    $retval .= "                       href='enum_editor.php?" . PMA_generate_common_url() . "&amp;values=" . $routine['item_param_length'][$i] . "&amp;field=" . $routine['item_param_name'][$i] . "'>\n";    $retval .= "                        " . PMA_getImage('b_edit', '', array('title'=>__('ENUM/SET editor'))) . "\n";    $retval .= "                    </a>\n";    $retval .= "                </div>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_len'>---</td>\n";    $retval .= "            <td class='routine_param_opts_text'>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_param_opts_text[$index]",        null,        $routine['item_param_opts_text'][$i]    );    $retval .= "            </td>\n";    $retval .= "            <td class='hide no_opts'>---</td>\n";    $retval .= "            <td class='routine_param_opts_num'>\n";    $retval .= "                <select name='item_param_opts_num[$index]'>\n";    $retval .= "                    <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_param_opts_num'][$i])            && $routine['item_param_opts_num'][$i] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n                </select>\n";    $retval .= "            </td>\n";    $retval .= "            <td class='routine_param_remove$drop_class'>\n";    $retval .= "                <a href='#' class='routine_param_remove_anchor'>\n";    $retval .= "                    {$titles['Drop']}\n";    $retval .= "                </a>\n";    $retval .= "            </td>\n";    $retval .= "        </tr>\n";    return $retval;} // end PMA_RTN_getParameterRow()/** * Displays a form used to add/edit a routine * * @param   string   $mode         If the editor will be used edit a routine *                                 or add a new one: 'edit' or 'add'. * @param   string   $operation    If the editor was previously invoked with *                                 JS turned off, this will hold the name of *                                 the current operation * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromRequest() or *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the editor. */function PMA_RTN_getEditorForm($mode, $operation, $routine){    global $db, $errors, $param_sqldataaccess, $param_opts_num;    // Escape special characters    $need_escape = array(        'item_original_name',        'item_name',        'item_returnlength',        'item_definition',        'item_definer',        'item_comment'    );    foreach ($need_escape as $key => $index) {        $routine[$index] = htmlentities($routine[$index], ENT_QUOTES);    }    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i]   = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );        $routine['item_param_length'][$i] = htmlentities(            $routine['item_param_length'][$i],            ENT_QUOTES        );    }    // Handle some logic first    if ($operation == 'change') {        if ($routine['item_type'] == 'PROCEDURE') {            $routine['item_type']        = 'FUNCTION';            $routine['item_type_toggle'] = 'PROCEDURE';        } else {            $routine['item_type']        = 'PROCEDURE';            $routine['item_type_toggle'] = 'FUNCTION';        }    } else if ($operation == 'add' || ($routine['item_num_params'] == 0 && $mode == 'add' && ! $errors)) {        $routine['item_param_dir'][]       = '';        $routine['item_param_name'][]      = '';        $routine['item_param_type'][]      = '';        $routine['item_param_length'][]    = '';        $routine['item_param_opts_num'][]  = '';        $routine['item_param_opts_text'][] = '';        $routine['item_num_params']++;    } else if ($operation == 'remove') {        unset($routine['item_param_dir'][$routine['item_num_params']-1]);        unset($routine['item_param_name'][$routine['item_num_params']-1]);        unset($routine['item_param_type'][$routine['item_num_params']-1]);        unset($routine['item_param_length'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_num'][$routine['item_num_params']-1]);        unset($routine['item_param_opts_text'][$routine['item_num_params']-1]);        $routine['item_num_params']--;    }    $disable_remove_parameter = '';    if (! $routine['item_num_params']) {        $disable_remove_parameter = " color: gray;' disabled='disabled";    }    $original_routine = '';    if ($mode == 'edit') {        $original_routine = "<input name='item_original_name' "                          . "type='hidden' "                          . "value='{$routine['item_original_name']}'/>\n"                          . "<input name='item_original_type' "                          . "type='hidden' "                          . "value='{$routine['item_original_type']}'/>\n";    }    $isfunction_class   = '';    $isprocedure_class  = '';    $isfunction_select  = '';    $isprocedure_select = '';    if ($routine['item_type'] == 'PROCEDURE') {        $isfunction_class   = ' hide';        $isprocedure_select = " selected='selected'";    } else {        $isprocedure_class = ' hide';        $isfunction_select = " selected='selected'";    }    // Create the output    $retval  = "";    $retval .= "<!-- START " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    $retval .= "<form class='rte_form' action='db_routines.php' method='post'>\n";    $retval .= "<input name='{$mode}_item' type='hidden' value='1' />\n";    $retval .= $original_routine;    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    $retval .= "<legend>" . __('Details') . "</legend>\n";    $retval .= "<table class='rte_table' style='width: 100%'>\n";    $retval .= "<tr>\n";    $retval .= "    <td style='width: 20%;'>" . __('Routine name') . "</td>\n";    $retval .= "    <td><input type='text' name='item_name' maxlength='64'\n";    $retval .= "               value='{$routine['item_name']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Type') . "</td>\n";    $retval .= "    <td>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "        <select name='item_type'>\n";        $retval .= "            <option value='PROCEDURE'$isprocedure_select>PROCEDURE</option>\n";        $retval .= "            <option value='FUNCTION'$isfunction_select>FUNCTION</option>\n";        $retval .= "        </select>\n";    } else {        $retval .= "        <input name='item_type' type='hidden' value='{$routine['item_type']}' />\n";        $retval .= "        <div style='width: 49%; float: left; text-align: center; font-weight: bold;'>\n";        $retval .= "            {$routine['item_type']}\n";        $retval .= "        </div>\n";        $retval .= "        <input style='width: 49%;' type='submit' name='routine_changetype'\n";        $retval .= "               value='".sprintf(__('Change to %s'), $routine['item_type_toggle'])."' />\n";    }    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Parameters') . "</td>\n";    $retval .= "    <td>\n";    // parameter handling start    $retval .= "        <table class='routine_params_table'>\n";    $retval .= "        <tr>\n";    $retval .= "            <th class='routine_direction_cell$isprocedure_class'>" . __('Direction') . "</th>\n";    $retval .= "            <th>" . __('Name') . "</th>\n";    $retval .= "            <th>" . __('Type') . "</th>\n";    $retval .= "            <th>" . __('Length/Values') . "</th>\n";    $retval .= "            <th colspan='2'>" . __('Options') . "</th>\n";    $retval .= "            <th class='routine_param_remove hide'>&nbsp;</th>\n";    $retval .= "        </tr>";    for ($i=0; $i<$routine['item_num_params']; $i++) { // each parameter        $retval .= PMA_RTN_getParameterRow($routine, $i, $isprocedure_class);    }    $retval .= "        </table>\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>&nbsp;</td>\n";    $retval .= "    <td>\n";    $retval .= "        <input style='width: 49%;' type='submit' \n";    $retval .= "               name='routine_addparameter'\n";    $retval .= "               value='" . __('Add parameter') . "' />\n";    $retval .= "        <input style='width: 49%;$disable_remove_parameter'\n";    $retval .= "               type='submit' \n";    $retval .= "               name='routine_removeparameter'\n";    $retval .= "               value='" . __('Remove last parameter') . "' />\n";    $retval .= "    </td>\n";    $retval .= "</tr>\n";    // parameter handling end    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return type') . "</td>\n";    $retval .= "    <td><select name='item_returntype'>\n";    $retval .= PMA_getSupportedDatatypes(true, $routine['item_returntype']) . "\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return length/values') . "</td>\n";    $retval .= "    <td><input type='text' name='item_returnlength'\n";    $retval .= "               value='{$routine['item_returnlength']}' /></td>\n";    $retval .= "    <td class='hide no_len'>---</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr class='routine_return_row$isfunction_class'>\n";    $retval .= "    <td>" . __('Return options') . "</td>\n";    $retval .= "    <td><div>\n";    $retval .= PMA_generateCharsetDropdownBox(        PMA_CSDROPDOWN_CHARSET,        "item_returnopts_text",        null,        $routine['item_returnopts_text']    );    $retval .= "\n    </div>\n";    $retval .= "    <div><select name='item_returnopts_num'>\n";    $retval .= "        <option value=''></option>";    foreach ($param_opts_num as $key => $value) {        $selected = "";        if (! empty($routine['item_returnopts_num'])            && $routine['item_returnopts_num'] == $value        ) {            $selected = " selected='selected'";        }        $retval .= "<option$selected>$value</option>";    }    $retval .= "\n    </select></div>\n";    $retval .= "    <div class='hide no_opts'>---</div>\n";    $retval .= "</td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definition') . "</td>\n";    $retval .= "    <td><textarea name='item_definition' rows='15' cols='40'>";    $retval .= $routine['item_definition'];    $retval .= "</textarea></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Is deterministic') . "</td>\n";    $retval .= "    <td><input type='checkbox' name='item_isdeterministic'{$routine['item_isdeterministic']} /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Definer') . "</td>\n";    $retval .= "    <td><input type='text' name='item_definer'\n";    $retval .= "               value='{$routine['item_definer']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Security type') . "</td>\n";    $retval .= "    <td><select name='item_securitytype'>\n";    $retval .= "        <option value='DEFINER'{$routine['item_securitytype_definer']}>DEFINER</option>\n";    $retval .= "        <option value='INVOKER'{$routine['item_securitytype_invoker']}>INVOKER</option>\n";    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('SQL data access') . "</td>\n";    $retval .= "    <td><select name='item_sqldataaccess'>\n";    foreach ($param_sqldataaccess as $key => $value) {        $selected = "";        if ($routine['item_sqldataaccess'] == $value) {            $selected = " selected='selected'";        }        $retval .= "        <option$selected>$value</option>\n";    }    $retval .= "    </select></td>\n";    $retval .= "</tr>\n";    $retval .= "<tr>\n";    $retval .= "    <td>" . __('Comment') . "</td>\n";    $retval .= "    <td><input type='text' name='item_comment' maxlength='64'\n";    $retval .= "               value='{$routine['item_comment']}' /></td>\n";    $retval .= "</tr>\n";    $retval .= "</table>\n";    $retval .= "</fieldset>\n";    if ($GLOBALS['is_ajax_request']) {        $retval .= "<input type='hidden' name='editor_process_{$mode}'\n";        $retval .= "       value='true' />\n";        $retval .= "<input type='hidden' name='ajax_request' value='true' />\n";    } else {        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='editor_process_{$mode}'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END " . strtoupper($mode) . " ROUTINE FORM -->\n\n";    return $retval;} // end PMA_RTN_getEditorForm()/** * Composes the query necessary to create a routine from an HTTP request. * * @return  string  The CREATE [ROUTINE | PROCEDURE] query. */function PMA_RTN_getQueryFromRequest(){    global $_REQUEST, $cfg, $errors, $param_sqldataaccess, $param_directions;    $_REQUEST['item_type'] = isset($_REQUEST['item_type']) ? $_REQUEST['item_type'] : '';    $query = 'CREATE ';    if (! empty($_REQUEST['item_definer'])) {        if (strpos($_REQUEST['item_definer'], '@') !== false) {            $arr = explode('@', $_REQUEST['item_definer']);            $query .= 'DEFINER=' . PMA_backquote($arr[0]);            $query .= '@' . PMA_backquote($arr[1]) . ' ';        } else {            $errors[] = __('The definer must be in the "username@hostname" format');        }    }    if ($_REQUEST['item_type'] == 'FUNCTION'        || $_REQUEST['item_type'] == 'PROCEDURE'    ) {        $query .= $_REQUEST['item_type'] . ' ';    } else {        $errors[] = sprintf(__('Invalid routine type: "%s"'), htmlspecialchars($_REQUEST['item_type']));    }    if (! empty($_REQUEST['item_name'])) {        $query .= PMA_backquote($_REQUEST['item_name']);    } else {        $errors[] = __('You must provide a routine name');    }    $params = '';    $warned_about_dir    = false;    $warned_about_name   = false;    $warned_about_length = false;    if (   ! empty($_REQUEST['item_param_name'])        && ! empty($_REQUEST['item_param_type'])        && ! empty($_REQUEST['item_param_length'])        && is_array($_REQUEST['item_param_name'])        && is_array($_REQUEST['item_param_type'])        && is_array($_REQUEST['item_param_length'])    ) {        for ($i=0; $i<count($_REQUEST['item_param_name']); $i++) {            if (! empty($_REQUEST['item_param_name'][$i]) && ! empty($_REQUEST['item_param_type'][$i])) {                if ($_REQUEST['item_type'] == 'PROCEDURE'                    && ! empty($_REQUEST['item_param_dir'][$i])                    && in_array($_REQUEST['item_param_dir'][$i], $param_directions)                ) {                    $params .= $_REQUEST['item_param_dir'][$i] . " " . PMA_backquote($_REQUEST['item_param_name'][$i]) . " "                            . $_REQUEST['item_param_type'][$i];                } else if ($_REQUEST['item_type'] == 'FUNCTION') {                    $params .= PMA_backquote($_REQUEST['item_param_name'][$i]) . " " . $_REQUEST['item_param_type'][$i];                } else if (! $warned_about_dir) {                    $warned_about_dir = true;                    $errors[] = sprintf(                        __('Invalid direction "%s" given for parameter.'),                        htmlspecialchars($_REQUEST['item_param_dir'][$i])                    );                }                if ($_REQUEST['item_param_length'][$i] != ''                    && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                                   $_REQUEST['item_param_type'][$i])                ) {                    $params .= "(" . $_REQUEST['item_param_length'][$i] . ")";                } else if ($_REQUEST['item_param_length'][$i] == '' && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_param_type'][$i])) {                    if (! $warned_about_length) {                        $warned_about_length = true;                        $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');                    }                }                if (! empty($_REQUEST['item_param_opts_text'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['STRING'])) {                        $params .= ' CHARSET ' . strtolower($_REQUEST['item_param_opts_text'][$i]);                    }                }                if (! empty($_REQUEST['item_param_opts_num'][$i])) {                    if (in_array($_REQUEST['item_param_type'][$i], $cfg['ColumnTypes']['NUMERIC'])) {                        $params .= ' ' . strtoupper($_REQUEST['item_param_opts_num'][$i]);                    }                }                if ($i != count($_REQUEST['item_param_name'])-1) {                    $params .= ", ";                }            } else if (! $warned_about_name) {                $warned_about_name = true;                $errors[] = __('You must provide a name and a type for each routine parameter.');                break;            }        }    }    $query .= "(" . $params . ") ";    if ($_REQUEST['item_type'] == 'FUNCTION') {        if (! empty($_REQUEST['item_returntype']) && in_array($_REQUEST['item_returntype'], PMA_getSupportedDatatypes())) {            $query .= "RETURNS {$_REQUEST['item_returntype']}";        } else {            $errors[] = __('You must provide a valid return type for the routine.');        }        if (! empty($_REQUEST['item_returnlength'])            && !preg_match('@^(DATE|DATETIME|TIME|TINYBLOB|TINYTEXT|BLOB|TEXT|MEDIUMBLOB|MEDIUMTEXT|LONGBLOB|LONGTEXT|SERIAL|BOOLEAN)$@i',                            $_REQUEST['item_returntype'])        ) {            $query .= "(" . $_REQUEST['item_returnlength'] . ")";        } else if (empty($_REQUEST['item_returnlength']) && preg_match('@^(ENUM|SET|VARCHAR|VARBINARY)$@i', $_REQUEST['item_returntype'])) {            if (! $warned_about_length) {                $warned_about_length = true;                $errors[] = __('You must provide length/values for routine parameters of type ENUM, SET, VARCHAR and VARBINARY.');            }        }        if (! empty($_REQUEST['item_returnopts_text'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['STRING'])) {                $query .= ' CHARSET ' . strtolower($_REQUEST['item_returnopts_text']);            }        }        if (! empty($_REQUEST['item_returnopts_num'])) {            if (in_array($_REQUEST['item_returntype'], $cfg['ColumnTypes']['NUMERIC'])) {                $query .= ' ' . strtoupper($_REQUEST['item_returnopts_num']);            }        }        $query .= ' ';    }    if (! empty($_REQUEST['item_comment'])) {        $query .= "COMMENT '" . PMA_sqlAddslashes($_REQUEST['item_comment']) . "' ";    }    if (isset($_REQUEST['item_isdeterministic'])) {        $query .= 'DETERMINISTIC ';    } else {        $query .= 'NOT DETERMINISTIC ';    }    if (! empty($_REQUEST['item_sqldataaccess']) && in_array($_REQUEST['item_sqldataaccess'], $param_sqldataaccess)) {        $query .= $_REQUEST['item_sqldataaccess'] . ' ';    }    if (! empty($_REQUEST['item_securitytype'])) {        if ($_REQUEST['item_securitytype'] == 'DEFINER' || $_REQUEST['item_securitytype'] == 'INVOKER') {            $query .= 'SQL SECURITY ' . $_REQUEST['item_securitytype'] . ' ';        }    }    if (! empty($_REQUEST['item_definition'])) {        $query .= $_REQUEST['item_definition'];    } else {        $errors[] = __('You must provide a routine definition.');    }    return $query;} // end PMA_RTN_getQueryFromRequest()/** * Handles requests for executing a routine */function PMA_RTN_handleExecute(){    global $_GET, $_POST, $_REQUEST, $GLOBALS, $db, $cfg;    /**     * Handle all user requests other than the default of listing routines     */    if (! empty($_REQUEST['execute_routine']) && ! empty($_REQUEST['item_name'])) {        // Build the queries        $routine = PMA_RTN_getDataFromName($_REQUEST['item_name'], $_REQUEST['item_type'], false);        if ($routine !== false) {            $queries   = array();            $end_query = array();            $args      = array();            for ($i=0; $i<$routine['item_num_params']; $i++) {                if (isset($_REQUEST['params'][$routine['item_param_name'][$i]])) {                    $value = $_REQUEST['params'][$routine['item_param_name'][$i]];                    if (is_array($value)) { // is SET type                        $value = implode(',', $value);                    }                    $value = PMA_sqlAddSlashes($value);                    if (! empty($_REQUEST['funcs'][$routine['item_param_name'][$i]])                        && in_array($_REQUEST['funcs'][$routine['item_param_name'][$i]], $cfg['Functions'])                    ) {                        $queries[] = "SET @p$i={$_REQUEST['funcs'][$routine['item_param_name'][$i]]}('$value');\n";                    } else {                        $queries[] = "SET @p$i='$value';\n";                    }                    $args[] = "@p$i";                } else {                    $args[] = "@p$i";                }                if ($routine['item_type'] == 'PROCEDURE') {                    if ($routine['item_param_dir'][$i] == 'OUT'                        || $routine['item_param_dir'][$i] == 'INOUT'                    ) {                        $end_query[] = "@p$i AS " . PMA_backquote($routine['item_param_name'][$i]);                    }                }            }            if ($routine['item_type'] == 'PROCEDURE') {                $queries[] = "CALL " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ");\n";                if (count($end_query)) {                    $queries[] = "SELECT " . implode(', ', $end_query) . ";\n";                }            } else {                $queries[] = "SELECT " . PMA_backquote($routine['item_name'])                           . "(" . implode(', ', $args) . ") "                           . "AS " . PMA_backquote($routine['item_name']) . ";\n";            }            // Execute the queries            $affected = 0;            $result = null;            $outcome = true;            foreach ($queries as $query) {                $resource = PMA_DBI_try_query($query);                if ($resource === false) {                    $outcome = false;                    break;                }                while (true) {                    if (! PMA_DBI_more_results()) {                        break;                    }                    PMA_DBI_next_result();                }                if (substr($query, 0, 6) == 'SELECT') {                    $result = $resource;                } else if (substr($query, 0, 4) == 'CALL') {                    $result = $resource ? $resource : $result;                    $affected = PMA_DBI_affected_rows() - PMA_DBI_num_rows($resource);                }            }            // Generate output            if ($outcome) {                $message = __('Your SQL query has been executed successfully');                if ($routine['item_type'] == 'PROCEDURE') {                    $message .= '<br />';                    $message .= sprintf(                        _ngettext(                            '%d row affected by the last statement inside the procedure',                            '%d rows affected by the last statement inside the procedure',                            $affected                        ),                        $affected                    );                }                $message = PMA_message::success($message);                // Pass the SQL queries through the "pretty printer"                $output  = '<code class="sql" style="margin-bottom: 1em;">';                $output .= PMA_SQP_formatHtml(PMA_SQP_parse(implode($queries)));                $output .= '</code>';                // Display results                if ($result) {                    $output .= "<fieldset><legend>";                    $output .= sprintf(                        __('Execution results of routine %s'),                        PMA_backquote(htmlspecialchars($routine['item_name']))                    );                    $output .= "</legend>";                    $output .= "<table><tr>";                    foreach (PMA_DBI_get_fields_meta($result) as $key => $field) {                        $output .= "<th>";                        $output .= htmlspecialchars($field->name);                        $output .= "</th>";                    }                    $output .= "</tr>";                    // Stored routines can only ever return ONE ROW.                    $data = PMA_DBI_fetch_single_row($result);                    foreach ($data as $key => $value) {                        if ($value === null) {                            $value = '<i>NULL</i>';                        } else {                            $value = htmlspecialchars($value);                        }                        $output .= "<td class='odd'>" . $value . "</td>";                    }                    $output .= "</table></fieldset>";                } else {                    $notice = __('MySQL returned an empty result set (i.e. zero rows).');                    $output .= PMA_message::notice($notice)->getDisplay();                }            } else {                $output = '';                $message = PMA_message::error(sprintf(__('The following query has failed: "%s"'), $query) . '<br /><br />'                                                    . __('MySQL said: ') . PMA_DBI_getError(null));            }            // Print/send output            if ($GLOBALS['is_ajax_request']) {                $extra_data = array('dialog' => false);                PMA_ajaxResponse(                    $message->getDisplay() . $output,                    $message->isSuccess(),                    $extra_data                );            } else {                echo $message->getDisplay() . $output;                if ($message->isError()) {                    // At least one query has failed, so shouldn't                    // execute any more queries, so we quit.                    exit;                }                unset($_POST);                // Now deliberately fall through to displaying the routines list            }        } else {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            if ($GLOBALS['is_ajax_request']) {                PMA_ajaxResponse($message, $message->isSuccess());            } else {                echo $message->getDisplay();                unset($_POST);            }        }    } else if (! empty($_GET['execute_dialog']) && ! empty($_GET['item_name'])) {        /**         * Display the execute form for a routine.         */        $routine = PMA_RTN_getDataFromName($_GET['item_name'], $_GET['item_type'], true);        if ($routine !== false) {            $form = PMA_RTN_getExecuteForm($routine);            if ($GLOBALS['is_ajax_request'] == true) {                $extra_data = array();                $extra_data['dialog'] = true;                $extra_data['title']  = __("Execute routine") . " ";                $extra_data['title'] .= PMA_backquote(                    htmlentities($_GET['item_name'], ENT_QUOTES)                );                PMA_ajaxResponse($form, true, $extra_data);            } else {                echo "\n\n<h2>" . __("Execute routine") . "</h2>\n\n";                echo $form;                include './libraries/footer.inc.php';                // exit;            }        } else if (($GLOBALS['is_ajax_request'] == true)) {            $message  = __('Error in processing request') . ' : ';            $message .= sprintf(                PMA_RTE_getWord('not_found'),                htmlspecialchars(PMA_backquote($_REQUEST['item_name'])),                htmlspecialchars(PMA_backquote($db))            );            $message = PMA_message::error($message);            PMA_ajaxResponse($message, false);        }    }}/** * Creates the HTML code that shows the routine execution dialog. * * @param   array    $routine      Data for the routine returned by *                                 PMA_RTN_getDataFromName() * * @return  string   HTML code for the routine execution dialog. */function PMA_RTN_getExecuteForm($routine){    global $db, $cfg;    // Escape special characters    $routine['item_name'] = htmlentities($routine['item_name'], ENT_QUOTES);    for ($i=0; $i<$routine['item_num_params']; $i++) {        $routine['item_param_name'][$i] = htmlentities(            $routine['item_param_name'][$i],            ENT_QUOTES        );    }    // Create the output    $retval  = "";    $retval .= "<!-- START ROUTINE EXECUTE FORM -->\n\n";    $retval .= "<form action='db_routines.php' method='post' class='rte_form'>\n";    $retval .= "<input type='hidden' name='item_name'\n";    $retval .= "       value='{$routine['item_name']}' />\n";    $retval .= "<input type='hidden' name='item_type'\n";    $retval .= "       value='{$routine['item_type']}' />\n";    $retval .= PMA_generate_common_hidden_inputs($db) . "\n";    $retval .= "<fieldset>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "<legend>{$routine['item_name']}</legend>\n";        $retval .= "<table class='rte_table'>\n";        $retval .= "<caption class='tblHeaders'>\n";        $retval .= __('Routine parameters');        $retval .= "</caption>\n";    } else {        $retval .= "<legend>" . __('Routine parameters') . "</legend>\n";        $retval .= "<table class='rte_table' style='width: 100%;'>\n";    }    $retval .= "<tr>\n";    $retval .= "<th>" . __('Name') . "</th>\n";    $retval .= "<th>" . __('Type') . "</th>\n";    if ($cfg['ShowFunctionFields']) {        $retval .= "<th>" . __('Function') . "</th>\n";    }    $retval .= "<th>" . __('Value')    . "</th>\n";    $retval .= "</tr>\n";    // Get a list of data types that are not yet supported.    $no_support_types = PMA_unsupportedDatatypes();    for ($i=0; $i<$routine['item_num_params']; $i++) { // Each parameter        if ($routine['item_type'] == 'PROCEDURE'            && $routine['item_param_dir'][$i] == 'OUT'        ) {            continue;        }        $rowclass = ($i % 2 == 0) ? 'even' : 'odd';        $retval .= "\n<tr class='$rowclass'>\n";        $retval .= "<td>{$routine['item_param_name'][$i]}</td>\n";        $retval .= "<td>{$routine['item_param_type'][$i]}</td>\n";        if ($cfg['ShowFunctionFields']) {            $retval .= "<td>\n";            if (stristr($routine['item_param_type'][$i], 'enum')                || stristr($routine['item_param_type'][$i], 'set')                || in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)            ) {                $retval .= "--\n";            } else {                $field = array(                    'True_Type'       => strtolower($routine['item_param_type'][$i]),                    'Type'            => '',                    'Key'             => '',                    'Field'           => '',                    'Default'         => '',                    'first_timestamp' => false                );                $retval .= "<select name='funcs[{$routine['item_param_name'][$i]}]'>";                $retval .= PMA_getFunctionsForField($field, false);                $retval .= "</select>";            }            $retval .= "</td>\n";        }        // Append a class to date/time fields so that        // jQuery can attach a datepicker to them        $class = '';        if ($routine['item_param_type'][$i] == 'DATETIME'            || $routine['item_param_type'][$i] == 'TIMESTAMP'        ) {            $class = 'datetimefield';        } else if ($routine['item_param_type'][$i] == 'DATE') {            $class = 'datefield';        }        $retval .= "<td class='nowrap'>\n";        if (in_array($routine['item_param_type'][$i], array('ENUM', 'SET'))) {            $tokens = PMA_SQP_parse($routine['item_param_length'][$i]);            if ($routine['item_param_type'][$i] == 'ENUM') {                $input_type = 'radio';            } else {                $input_type = 'checkbox';            }            for ($j=0; $j<$tokens['len']; $j++) {                if ($tokens[$j]['type'] != 'punct_listsep') {                    $tokens[$j]['data'] = htmlentities(                        PMA_unquote($tokens[$j]['data']),                        ENT_QUOTES                    );                    $retval .= "<input name='params[{$routine['item_param_name'][$i]}][]' "                             . "value='{$tokens[$j]['data']}' type='$input_type' />"                             . "{$tokens[$j]['data']}<br />\n";                }            }        } else if (in_array(strtolower($routine['item_param_type'][$i]), $no_support_types)) {            $retval .= "\n";        } else {            $retval .= "<input class='$class' type='text' name='params[{$routine['item_param_name'][$i]}]' />\n";        }        $retval .= "</td>\n";        $retval .= "</tr>\n";    }    $retval .= "\n</table>\n";    if ($GLOBALS['is_ajax_request'] != true) {        $retval .= "</fieldset>\n\n";        $retval .= "<fieldset class='tblFooters'>\n";        $retval .= "    <input type='submit' name='execute_routine'\n";        $retval .= "           value='" . __('Go') . "' />\n";        $retval .= "</fieldset>\n";    } else {        $retval .= "<input type='hidden' name='execute_routine' value='true' />";        $retval .= "<input type='hidden' name='ajax_request' value='true' />";    }    $retval .= "</form>\n\n";    $retval .= "<!-- END ROUTINE EXECUTE FORM -->\n\n";    return $retval;} // end PMA_RTN_getExecuteForm()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Get relations & co. status$cfgRelation = PMA_getRelationsParam();require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';function PMA_exportCheckboxCheck($str){    if (isset($GLOBALS['cfg']['Export'][$str]) && $GLOBALS['cfg']['Export'][$str]) {        echo ' checked="checked"';    }}function PMA_exportIsActive($what, $val){    if (isset($GLOBALS['cfg']['Export'][$what]) &&  $GLOBALS['cfg']['Export'][$what] == $val) {        echo ' checked="checked"';    }}/* Scan for plugins */$export_list = PMA_getPlugins('./libraries/export/', array('export_type' => $export_type, 'single_table' => isset($single_table)));/* Fail if we didn't find any plugin */if (empty($export_list)) {    PMA_Message::error( __('Could not load export plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><form method="post" action="export.php" name="dump"><?phpif ($export_type == 'server') {    echo PMA_generate_common_hidden_inputs('', '', 1);} elseif ($export_type == 'database') {    echo PMA_generate_common_hidden_inputs($db, '', 1);} else {    echo PMA_generate_common_hidden_inputs($db, $table, 1);}// just to keep this value for possible next display of this form after saving on serverif (isset($single_table)) {    echo '<input type="hidden" name="single_table" value="TRUE" />' . "\n";}echo '<input type="hidden" name="export_type" value="' . $export_type . '" />' . "\n";// If the export method was not set, the default is quickif (isset($_GET['export_method'])) {    $cfg['Export']['method'] = $_GET['export_method'];} elseif (! isset($cfg['Export']['method'])) {    $cfg['Export']['method'] = 'quick';}// The export method (quick, custom or custom-no-form)echo '<input type="hidden" name="export_method" value="' . htmlspecialchars($cfg['Export']['method']) . '" />';if (isset($_GET['sql_query'])) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($_GET['sql_query']) . '" />' . "\n";} elseif (! empty($sql_query)) {    echo '<input type="hidden" name="sql_query" value="' . htmlspecialchars($sql_query) . '" />' . "\n";}?><div class="exportoptions" id="header">    <h2>        <?php echo PMA_getImage('b_export.png', __('Export')); ?>        <?php        if ($export_type == 'server') {            echo __('Exporting databases from the current server');        } elseif ($export_type == 'database') {            printf(__('Exporting tables from "%s" database'), htmlspecialchars($db));        } else {            printf(__('Exporting rows from "%s" table'), htmlspecialchars($table));        }?>    </h2></div><div class="exportoptions" id="quick_or_custom">    <h3><?php echo __('Export Method:'); ?></h3>    <ul>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="quick" id="radio_quick_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' />';                } else {                    echo ' checked="checked" />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' />';            } else {                echo ' checked="checked" />';            }            echo '<label for ="radio_quick_export">' . __('Quick - display only the minimal options') . '</label>'; ?>        </li>        <li>            <?php echo '<input type="radio" name="quick_or_custom" value="custom" id="radio_custom_export"';            if (isset($_GET['quick_or_custom'])) {                $export_method = $_GET['quick_or_custom'];                if ($export_method == 'custom' || $export_method == 'custom_no_form') {                    echo ' checked="checked" />';                } else {                    echo ' />';                }            } elseif ($cfg['Export']['method'] == 'custom' || $cfg['Export']['method'] == 'custom-no-form') {                echo ' checked="checked" />';            } else {                echo ' />';            }            echo '<label for="radio_custom_export">' . __('Custom - display all possible options') . '</label>';?>        </li>    </ul></div><div class="exportoptions" id="databases_and_tables">    <?php        if ($export_type == 'server') {            echo '<h3>' . __('Database(s):') . '</h3>';        } else if ($export_type == 'database') {            echo '<h3>' . __('Table(s):') . '</h3>';        }        if (! empty($multi_values)) {            echo $multi_values;        }    ?></div><?php if (strlen($table) && ! isset($num_tables) && ! PMA_Table::isMerge($db, $table)) { ?>    <div class="exportoptions" id="rows">        <h3><?php echo __('Rows:'); ?></h3>        <ul>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 1) {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" />';                    } else {                        echo '<input type="radio" name="allrows" value="0" id="radio_allrows_0" checked="checked" />';                    }                    echo '<label for ="radio_allrows_0">' . __('Dump some row(s)') . '</label>'; ?>                <ul>                    <li><label for="limit_to"><?php echo __('Number of rows:') . '</label> <input type="text" id="limit_to" name="limit_to" size="5" value="'                . ((isset($_GET['limit_to'])) ? htmlspecialchars($_GET['limit_to']) : ((isset($unlim_num_rows) ? $unlim_num_rows : PMA_Table::countRecords($db, $table))))                . '" onfocus="this.select()" />' ?></li>                    <li><label for="limit_from"><?php echo __('Row to begin at:') . '</label> <input type="text" id="limit_from" name="limit_from" value="'                 . ((isset($_GET['limit_from'])) ? htmlspecialchars($_GET['limit_from']) : '0')                 . '" size="5" onfocus="this.select()" />'; ?></li>                </ul>            </li>            <li>                <?php if (isset($_GET['allrows']) && $_GET['allrows'] == 0) {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" />';                } else {                    echo '<input type="radio" name="allrows" value="1" id="radio_allrows_1" checked="checked" />';                }                echo ' <label for="radio_allrows_1">' . __('Dump all rows') . '</label>';?>            </li>        </ul>     </div><?php } ?><?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>    <div class="exportoptions" id="output_quick_export">        <h3><?php echo __('Output:'); ?></h3>        <ul>            <li>                <input type="checkbox" name="quick_export_onserver" value="saveit"                    id="checkbox_quick_dump_onserver"                    <?php PMA_exportCheckboxCheck('quick_export_onserver'); ?> />                <label for="checkbox_quick_dump_onserver">                    <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                </label>            </li>            <li>                <input type="checkbox" name="quick_export_onserverover" value="saveitover"                id="checkbox_quick_dump_onserverover"                <?php PMA_exportCheckboxCheck('quick_export_onserver_overwrite'); ?> />                <label for="checkbox_quick_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>            </li>        </ul>    </div><?php } ?><div class="exportoptions" id="output">    <h3><?php echo __('Output:'); ?></h3>    <ul id="ul_output">        <li>            <input type="radio" name="output_format" value="sendit" id="radio_dump_asfile" <?php isset($_GET['repopulate']) ? '' : PMA_exportCheckboxCheck('asfile'); ?> />            <label for="radio_dump_asfile"><?php echo __('Save output to a file'); ?></label>            <ul id="ul_save_asfile">                <?php if (isset($cfg['SaveDir']) && !empty($cfg['SaveDir'])) { ?>                <li>                    <input type="checkbox" name="onserver" value="saveit"                        id="checkbox_dump_onserver"                        <?php PMA_exportCheckboxCheck('onserver'); ?> />                    <label for="checkbox_dump_onserver">                        <?php echo sprintf(__('Save on server in the directory <b>%s</b>'), htmlspecialchars(PMA_userDir($cfg['SaveDir']))); ?>                    </label>                </li>                <li>                    <input type="checkbox" name="onserverover" value="saveitover"                    id="checkbox_dump_onserverover"                    <?php PMA_exportCheckboxCheck('onserver_overwrite'); ?> />                    <label for="checkbox_dump_onserverover"><?php echo __('Overwrite existing file(s)'); ?></label>                </li>                <?php } ?>                <li>                    <label for="filename_template" class="desc">                    <?php                    echo __('File name template:');                    $trans = new PMA_Message;                    $trans->addMessage(__('@SERVER@ will become the server name'));                    if ($export_type == 'database' || $export_type == 'table') {                        $trans->addMessage(__(', @DATABASE@ will become the database name'));                        if ($export_type == 'table') {                            $trans->addMessage(__(', @TABLE@ will become the table name'));                        }                    }                    $message = new PMA_Message(__('This value is interpreted using %1$sstrftime%2$s, so you can use time formatting strings. Additionally the following transformations will happen: %3$s. Other text will be kept as is. See the %4$sFAQ%5$s for details.'));                    $message->addParam('<a href="' . PMA_linkURL(PMA_getPHPDocLink('function.strftime.php')). '" target="documentation" title="'                        . __('Documentation') . '">', false);                    $message->addParam('</a>', false);                    $message->addParam($trans);                    $message->addParam('<a href="Documentation.html#faq6_27" target="documentation">', false);                    $message->addParam('</a>', false);                    echo PMA_showHint($message);                    ?>                    </label>                    <input type="text" name="filename_template" id="filename_template"                    <?php                        echo ' value="';                        if (isset($_GET['filename_template'])) {                            echo htmlspecialchars($_GET['filename_template']);                        } else {                            if ($export_type == 'database') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_db_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_database']));                            } elseif ($export_type == 'table') {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_table_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_table']));                            } else {                                echo htmlspecialchars($GLOBALS['PMA_Config']->getUserValue(                                    'pma_server_filename_template',                                    $GLOBALS['cfg']['Export']['file_template_server']));                            }                    }                        echo '"';                    ?>                    />                    <input type="checkbox" name="remember_template"                        id="checkbox_remember_template"                        <?php PMA_exportCheckboxCheck('remember_file_template'); ?> />                    <label for="checkbox_remember_template">                        <?php echo __('use this for future exports'); ?></label>                </li>                <?php                // charset of file                if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {                    echo '        <li><label for="select_charset_of_file" class="desc">'                        . __('Character set of the file:') . '</label>' . "\n";                    reset($cfg['AvailableCharsets']);                    echo '<select id="select_charset_of_file" name="charset_of_file" size="1">';                    foreach ($cfg['AvailableCharsets'] as $temp_charset) {                        echo '<option value="' . $temp_charset . '"';                        if (isset($_GET['charset_of_file']) && ($_GET['charset_of_file'] != $temp_charset)) {                            echo '';                        } elseif ((empty($cfg['Export']['charset']) && $temp_charset == 'utf-8')                          || $temp_charset == $cfg['Export']['charset']) {                            echo ' selected="selected"';                        }                        echo '>' . $temp_charset . '</option>';                    } // end foreach                    echo '</select></li>';                } // end if                ?>                 <?php                if (isset($_GET['compression'])) {                    $selected_compression = $_GET['compression'];                } elseif (isset($cfg['Export']['compression'])) {                    $selected_compression = $cfg['Export']['compression'];                } else {                    $selected_compression = "none";                }                // zip, gzip and bzip2 encode features                $is_zip  = ($cfg['ZipDump']  && @function_exists('gzcompress'));                $is_gzip = ($cfg['GZipDump'] && @function_exists('gzencode'));                $is_bzip2 = ($cfg['BZipDump'] && @function_exists('bzcompress'));                if ($is_zip || $is_gzip || $is_bzip2) { ?>                    <li>                    <label for="compression" class="desc"><?php echo __('Compression:'); ?></label>                    <select id="compression" name="compression">                        <option value="none"><?php echo __('None'); ?></option>                        <?php if ($is_zip) { ?>                            <option value="zip" <?php echo ($selected_compression == "zip") ? 'selected="selected"' : ''; ?>><?php echo __('zipped'); ?></option>                        <?php } if ($is_gzip) { ?>                            <option value="gzip" <?php echo ($selected_compression == "gzip") ? 'selected="selected"' : ''; ?>><?php echo __('gzipped'); ?></option>                        <?php } if ($is_bzip2) { ?>                            <option value="bzip2" <?php echo ($selected_compression == "bzip2") ? 'selected="selected"' : ''; ?>><?php echo __('bzipped'); ?></option>                        <?php } ?>                    </select>                    </li>                <?php } else { ?>                    <input type="hidden" name="compression" value="<?php echo $selected_compression; ?>" />                <?php } ?>             </ul>        </li>        <li><input type="radio" id="radio_view_as_text" name="output_format" value="astext" <?php echo (isset($_GET['repopulate']) || $GLOBALS['cfg']['Export']['asfile'] == false) ? 'checked="checked"' : '' ?>/><label for="radio_view_as_text"><?php echo __('View output as text'); ?></label></li>    </ul> </div><div class="exportoptions" id="format">    <h3><?php echo __('Format:'); ?></h3>    <?php echo PMA_pluginGetChoice('Export', 'what', $export_list, 'format'); ?></div><div class="exportoptions" id="format_specific_opts">    <h3><?php echo __('Format-specific options:'); ?></h3>    <p class="no_js_msg" id="scroll_to_options_msg"><?php echo __('Scroll down to fill in the options for the selected format and ignore the options for other formats.'); ?></p>    <?php echo PMA_pluginGetOptions('Export', $export_list); ?></div><?php if (function_exists('PMA_set_enc_form')) { ?><!-- Encoding setting form appended by Y.Kawada --><!-- Japanese encoding setting -->    <div class="exportoptions" id="kanji_encoding">        <h3><?php echo __('Encoding Conversion:'); ?></h3>        <?php echo PMA_set_enc_form('            '); ?>    </div><?php } ?><div class="exportoptions" id="submit"><?php PMA_externalBug(__('SQL compatibility mode'), 'mysql', '50027', '14515'); ?>    <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" /></div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This is in a separate script because it's called from a number of scripts * * @package PhpMyAdmin *//** * Checks whether given link is valid * * @param string $url URL to check * @return boolean True if string can be used as link */function PMA_checkLink($url){    $valid_starts = array(        'http://',        'https://',        './url.php?url=http%3A%2F%2F',        './url.php?url=https%3A%2F%2F',    );    if (defined('PMA_SETUP')) {        $valid_starts[] = '../Documentation.html';        $valid_starts[] = '?page=form&';    } else {        $valid_starts[] = './Documentation.html';    }    foreach ($valid_starts as $val) {        if (substr($url, 0, strlen($val)) == $val) {            return true;        }    }    return false;}/** * Callback function for replacing [a@link@target] links in bb code. * * @param array $found Array of preg matches * @return string Replaced string */function PMA_replaceBBLink($found){    /* Check for valid link */    if (! PMA_checkLink($found[1])) {        return $found[0];    }    /* a-z and _ allowed in target */    if (! empty($found[3]) && preg_match('/[^a-z_]+/i', $found[3])) {        return $found[0];    }    /* Construct target */    $target = '';    if (! empty($found[3])) {        $target = ' target="' . $found[3] . '"';    }    /* Construct url */    if (substr($found[1], 0, 4) == 'http') {        $url = PMA_linkURL($found[1]);    } else {        $url = $found[1];    }    return '<a href="' . $url . '"' . $target . '>';}/** * Sanitizes $message, taking into account our special codes * for formatting. * * If you want to include result in element attribute, you should escape it. * * Examples: * * <p><?php echo PMA_sanitize($foo); ?></p> * * <a title="<?php echo PMA_sanitize($foo, true); ?>">bar</a> * * @param string  $message the message * @param boolean $escape  whether to escape html in result * @param boolean $safe    whether string is safe (can keep < and > chars) * @return  string   the sanitized message */function PMA_sanitize($message, $escape = false, $safe = false){    if (!$safe) {        $message = strtr($message, array('<' => '&lt;', '>' => '&gt;'));    }    /* Interpret bb code */    $replace_pairs = array(        '[i]'       => '<em>',      // deprecated by em        '[/i]'      => '</em>',     // deprecated by em        '[em]'      => '<em>',        '[/em]'     => '</em>',        '[b]'       => '<strong>',  // deprecated by strong        '[/b]'      => '</strong>', // deprecated by strong        '[strong]'  => '<strong>',        '[/strong]' => '</strong>',        '[tt]'      => '<code>',    // deprecated by CODE or KBD        '[/tt]'     => '</code>',   // deprecated by CODE or KBD        '[code]'    => '<code>',        '[/code]'   => '</code>',        '[kbd]'     => '<kbd>',        '[/kbd]'    => '</kbd>',        '[br]'      => '<br />',        '[/a]'      => '</a>',        '[sup]'      => '<sup>',        '[/sup]'      => '</sup>',    );    /* Adjust links for setup, which lives in subfolder */    if (defined('PMA_SETUP')) {        $replace_pairs['[a@Documentation.html'] = '[a@../Documentation.html';    } else {        $replace_pairs['[a@Documentation.html'] = '[a@./Documentation.html';    }    $message = strtr($message, $replace_pairs);    /* Match links in bb code ([a@url@target], where @target is options) */    $pattern = '/\[a@([^]"@]*)(@([^]"]*))?\]/';    /* Find and replace all links */    $message = preg_replace_callback($pattern, 'PMA_replaceBBLink', $message);    /* Possibly escape result */    if ($escape) {        $message = htmlspecialchars($message);    }    return $message;}/** * Sanitize a filename by removing anything besides A-Za-z0-9_.- * * Intended usecase: *    When using a filename in a Content-Disposition header the value should not contain ; or " * * @param   string  The filename * * @return  string  the sanitized filename * */function PMA_sanitize_filename($filename) {    $filename = preg_replace('/[^A-Za-z0-9_.-]/', '_', $filename);    return $filename;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/file_listing.php';require_once './libraries/plugin_interface.lib.php';require_once './libraries/display_import_ajax.lib.php';/* Scan for plugins */$import_list = PMA_getPlugins('./libraries/import/', $import_type);/* Fail if we didn't find any plugin */if (empty($import_list)) {    PMA_Message::error(__('Could not load import plugins, please check your installation!'))->display();    include './libraries/footer.inc.php';}?><iframe id="import_upload_iframe" name="import_upload_iframe" width="1" height="1" style="display: none;"></iframe><div id="import_form_status" style="display: none;"></div><div id="importmain">    <img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" style="display: none;" />    <script type="text/javascript">        //<![CDATA[        $(document).ready( function() {            // add event when user click on "Go" button            $('#buttonGo').bind('click', function() {                $('#upload_form_form').css("display", "none"); // hide form                $('#upload_form_status').css("display", "inline"); // show progress bar                $('#upload_form_status_info').css("display", "inline"); // - || -<?phpif ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") {    ?>                $('#upload_form_status').html('<div class="upload_progress_bar_outer"><div id="status" class="upload_progress_bar_inner"></div></div>'); // add the progress bar                var finished = false;                var percent  = 0.0;                var total    = 0;                var complete = 0;                var perform_upload;                var periodical_upload;                var request_upload = [];                perform_upload = function () {                    new $.getJSON(                    'import_status.php?id=<?php echo $upload_id ; ?>&<?php echo PMA_generate_common_url(); ?>',                    {},                    function(response) {                        finished = response.finished;                        percent = response.percent;                        total = response.total;                        complete = response.complete;                          if (total==0 && complete==0 && percent==0) {                              $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file being uploaded is probably larger than the maximum allowed size or this is a known bug in webkit based (Safari, Google Chrome, Arora etc.) browsers.'), false); ?>');                              $('#upload_form_status').css("display", "none");                          } else {                              $('#upload_form_status_info').html(' '+Math.round(percent)+'%, '+complete+'/'+total);                              $('#status').animate({width: Math.round(percent)*2+'px'},150);                          } // else                          if (finished==true) {                                    $('#importmain').css('display', 'none');                                    $('#import_form_status').css('display', 'inline');                                    $('#import_form_status').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('The file is being processed, please be patient.'), false); ?> ');                                    $('#import_form_status').load('import_status.php?message=true&<?php echo PMA_generate_common_url(); ?>'); // loads the message, either success or mysql error                                    <?php                                    // reload the left sidebar when the import is finished                                    $GLOBALS['reload']=true;                                    PMA_reloadNavigation(true);                                    ?>                          } // if finished                          else {                                window.setTimeout(perform_upload, 1000);                          }                      }                  );              }                window.setTimeout(perform_upload, 1000);    <?php} else { // no plugin available    ?>                        $('#upload_form_status_info').html('<img src="<?php echo $GLOBALS['pmaThemeImage'];?>ajax_clock_small.gif" alt="ajax clock" /> <?php echo PMA_jsFormat(__('Please be patient, the file is being uploaded. Details about the upload are not available.'), false) . PMA_showDocu('faq2_9'); ?>');                        $('#upload_form_status').css("display", "none");    <?php} // else?>                    }); // onclick                }); // domready                document.write('<form action="import.php" method="post" enctype="multipart/form-data" name="import"<?php if ($_SESSION[$SESSION_KEY]["handler"]!="noplugin") echo ' target="import_upload_iframe"'; ?>>');                //]]>    </script>    <noscript>        <form action="import.php" method="post" enctype="multipart/form-data" name="import">    </noscript>    <input type="hidden" name="<?php echo $ID_KEY; ?>" value="<?php echo $upload_id ; ?>" />    <?php    if ($import_type == 'server') {        echo PMA_generate_common_hidden_inputs('', '', 1);    } elseif ($import_type == 'database') {        echo PMA_generate_common_hidden_inputs($db, '', 1);    } else {        echo PMA_generate_common_hidden_inputs($db, $table, 1);    }    echo '    <input type="hidden" name="import_type" value="' . $import_type . '" />'."\n";    ?>    <div class="exportoptions" id="header">        <h2>            <?php echo PMA_getImage('b_import.png', __('Import')); ?>            <?php            if ($import_type == 'server') {                echo __('Importing into the current server');            } elseif ($import_type == 'database') {                printf(__('Importing into the database "%s"'), htmlspecialchars($db));            } else {                printf(__('Importing into the table "%s"'), htmlspecialchars($table));            }?>        </h2>    </div>    <div class="importoptions">        <h3><?php echo __('File to Import:'); ?></h3>        <?php        // zip, gzip and bzip2 encode features        $compressions = array();        if ($cfg['GZipDump'] && @function_exists('gzopen')) {            $compressions[] = 'gzip';        }        if ($cfg['BZipDump'] && @function_exists('bzopen')) {            $compressions[] = 'bzip2';        }        if ($cfg['ZipDump'] && @function_exists('zip_open')) {            $compressions[] = 'zip';        }        // We don't have show anything about compression, when no supported        if ($compressions != array()) {            echo '<div class="formelementrow" id="compression_info">';            printf(__('File may be compressed (%s) or uncompressed.'), implode(", ", $compressions));            echo '<br />';            echo __('A compressed file\'s name must end in <b>.[format].[compression]</b>. Example: <b>.sql.zip</b>');            echo '</div>';        }?>        <div class="formelementrow" id="upload_form">        <?php if ($GLOBALS['is_upload'] && !empty($cfg['UploadDir'])) { ?>            <ul>            <li>                <input type="radio" name="file_location" id="radio_import_file" />                <?php PMA_browseUploadFile($max_upload_size); ?>            </li>            <li>                <input type="radio" name="file_location" id="radio_local_import_file" />                <?php PMA_selectUploadFile($import_list, $cfg['UploadDir']); ?>            </li>            </ul>        <?php } else if ($GLOBALS['is_upload']) {            $uid = uniqid("");            PMA_browseUploadFile($max_upload_size);        } else if (!$GLOBALS['is_upload']) {            PMA_Message::notice(__('File uploads are not allowed on this server.'))->display();        } else if (!empty($cfg['UploadDir'])) {            PMA_selectUploadFile($import_list, $cfg['UploadDir']);        } // end if (web-server upload directory)        ?>        </div>       <div class="formelementrow" id="charaset_of_file">        <?php // charset of file        if ($GLOBALS['PMA_recoding_engine'] != PMA_CHARSET_NONE) {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>';            reset($cfg['AvailableCharsets']);            echo '<select id="charset_of_file" name="charset_of_file" size="1">';            foreach ($cfg['AvailableCharsets'] as $temp_charset) {                echo '<option value="' . htmlentities($temp_charset) .  '"';                if ((empty($cfg['Import']['charset']) && $temp_charset == 'utf-8')                        || $temp_charset == $cfg['Import']['charset']) {                    echo ' selected="selected"';                }                echo '>' . htmlentities($temp_charset) . '</option>';            }            echo ' </select><br />';        } else {            echo '<label for="charset_of_file">' . __('Character set of the file:') . '</label>' . "\n";            echo PMA_generateCharsetDropdownBox(PMA_CSDROPDOWN_CHARSET, 'charset_of_file', 'charset_of_file', 'utf8', false);        } // end if (recoding)        ?>        </div>    </div>    <div class="importoptions">        <h3><?php echo __('Partial Import:'); ?></h3>        <?php        if (isset($timeout_passed) && $timeout_passed) {            echo '<div class="formelementrow">' . "\n";            echo '<input type="hidden" name="skip" value="' . $offset . '" />';            echo sprintf(__('Previous import timed out, after resubmitting will continue from position %d.'), $offset) . '';            echo '</div>' . "\n";        }        ?>        <div class="formelementrow">            <input type="checkbox" name="allow_interrupt" value="yes"                   id="checkbox_allow_interrupt" <?php echo PMA_pluginCheckboxCheck('Import', 'allow_interrupt'); ?>/>            <label for="checkbox_allow_interrupt"><?php echo __('Allow the interruption of an import in case the script detects it is close to the PHP timeout limit. <i>(This might be good way to import large files, however it can break transactions.)</i>'); ?></label><br />        </div>        <?php        if (! (isset($timeout_passed) && $timeout_passed)) {            ?>        <div class="formelementrow">            <label for="text_skip_queries"><?php echo __('Number of rows to skip, starting from the first row:'); ?></label>            <input type="text" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />        </div>            <?php        } else {            // If timeout has passed,            // do not show the Skip dialog to avoid the risk of someone            // entering a value here that would interfere with "skip"            ?>        <input type="hidden" name="skip_queries" value="<?php echo PMA_pluginGetDefault('Import', 'skip_queries');?>" id="text_skip_queries" />            <?php        }        ?>    </div>    <div class="importoptions">        <h3><?php echo __('Format:'); ?></h3>        <?php echo PMA_pluginGetChoice('Import', 'format', $import_list); ?>        <div id="import_notification"></div>    </div>    <div class="importoptions" id="format_specific_opts">        <h3><?php echo __('Format-Specific Options:'); ?></h3>        <p class="no_js_msg" id="scroll_to_options_msg">Scroll down to fill in the options for the selected format and ignore the options for other formats.</p>        <?php echo PMA_pluginGetOptions('Import', $import_list); ?>    </div>        <div class="clearfloat"></div>    </div>    <?php    // Encoding setting form appended by Y.Kawada    if (function_exists('PMA_set_enc_form')) { ?>        <div class="importoptions" id="kanji_encoding">            <h3><?php echo __('Encoding Conversion:'); ?></h3>            <?php echo PMA_set_enc_form('            '); ?>        </div>    <?php }    echo "\n";    ?>    <div class="importoptions" id="submit">        <input type="submit" value="<?php echo __('Go'); ?>" id="buttonGo" />    </div></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * forms frameset * *                                              or common.inc.php * @package PhpMyAdmin *//** * Gets core libraries and defines some variables */require_once './libraries/common.inc.php';// free the session file, for the other frames to be loadedsession_write_close();// Gets the host nameif (empty($HTTP_HOST)) {    if (PMA_getenv('HTTP_HOST')) {        $HTTP_HOST = PMA_getenv('HTTP_HOST');    } else {        $HTTP_HOST = '';    }}// purge querywindow history$cfgRelation = PMA_getRelationsParam();if ($GLOBALS['cfg']['QueryHistoryDB'] && $cfgRelation['historywork']) {    PMA_purgeHistory($GLOBALS['cfg']['Server']['user']);}unset($cfgRelation);/** * pass variables to child pages */$drops = array('lang', 'server', 'collation_connection',    'db', 'table');foreach ($drops as $each_drop) {    if (array_key_exists($each_drop, $_GET)) {        unset($_GET[$each_drop]);    }}unset($drops, $each_drop);if (! strlen($GLOBALS['db'])) {    $main_target = $GLOBALS['cfg']['DefaultTabServer'];} elseif (! strlen($GLOBALS['table'])) {    $_GET['db'] = $GLOBALS['db'];    $main_target = $GLOBALS['cfg']['DefaultTabDatabase'];} else {    $_GET['db'] = $GLOBALS['db'];    $_GET['table'] = $GLOBALS['table'];    $main_target = isset($GLOBALS['goto']) ? $GLOBALS['goto'] : $GLOBALS['cfg']['DefaultTabTable'];}$url_query = PMA_generate_common_url($_GET);if (isset($GLOBALS['target']) && is_string($GLOBALS['target']) && !empty($GLOBALS['target']) && in_array($GLOBALS['target'], $goto_whitelist)) {    $main_target = $GLOBALS['target'];}$main_target .= $url_query;$lang_iso_code = $GLOBALS['available_languages'][$GLOBALS['lang']][1];// start outputrequire './libraries/header_http.inc.php';?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"><html xmlns="http://www.w3.org/1999/xhtml"    xml:lang="<?php echo $lang_iso_code; ?>"    lang="<?php echo $lang_iso_code; ?>"    dir="<?php echo $GLOBALS['text_dir']; ?>"><head><link rel="icon" href="./favicon.ico" type="image/x-icon" /><link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" /><title>phpMyAdmin <?php echo PMA_VERSION; ?> -    <?php echo htmlspecialchars($HTTP_HOST); ?></title><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><meta name="robots" content="noindex,nofollow" /><script type="text/javascript">// <![CDATA[    // definitions used in common.js    var common_query = '<?php echo PMA_escapeJsString(PMA_generate_common_url('', '', '&'));?>';    var opendb_url = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['DefaultTabDatabase']); ?>';    var safari_browser = <?php echo PMA_USR_BROWSER_AGENT == 'SAFARI' ? 'true' : 'false' ?>;    var querywindow_height = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowHeight']); ?>;    var querywindow_width = <?php echo PMA_escapeJsString($GLOBALS['cfg']['QueryWindowWidth']); ?>;    var collation_connection = '<?php echo PMA_escapeJsString($GLOBALS['collation_connection']); ?>';    var lang = '<?php echo PMA_escapeJsString($GLOBALS['lang']); ?>';    var server = '<?php echo PMA_escapeJsString($GLOBALS['server']); ?>';    var table = '<?php echo PMA_escapeJsString($GLOBALS['table']); ?>';    var db    = '<?php echo PMA_escapeJsString($GLOBALS['db']); ?>';    var token = '<?php echo PMA_escapeJsString($_SESSION[' PMA_token ']); ?>';    var text_dir = '<?php echo PMA_escapeJsString($GLOBALS['text_dir']); ?>';    var pma_absolute_uri = '<?php echo PMA_escapeJsString($GLOBALS['cfg']['PmaAbsoluteUri']); ?>';    var pma_text_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['DefaultTabTable'])); ?>';    var pma_text_left_default_tab = '<?php echo PMA_escapeJsString(PMA_getTitleForTarget($GLOBALS['cfg']['LeftDefaultTabTable'])); ?>';    // for content and navigation frames    var frame_content = 0;    var frame_navigation = 0;    function getFrames() {<?php if ($GLOBALS['text_dir'] === 'ltr') { ?>        frame_content = window.frames[1];        frame_navigation = window.frames[0];<?php } else { ?>        frame_content = window.frames[0];        frame_navigation = window.frames[1];<?php } ?>    }    var onloadCnt = 0;    var onLoadHandler = window.onload;    window.onload = function() {        if (onloadCnt == 0) {            if (typeof(onLoadHandler) == "function") {                onLoadHandler();            }            if (typeof(getFrames) != 'undefined' && typeof(getFrames) == 'function') {                getFrames();            }            onloadCnt++;        }    };// ]]></script><?phpecho PMA_includeJS('jquery/jquery-1.6.2.js');echo PMA_includeJS('update-location.js');echo PMA_includeJS('common.js');?></head><frameset cols="<?phpif ($GLOBALS['text_dir'] === 'rtl') {    echo '*,';}echo $GLOBALS['cfg']['NaviWidth'];if ($GLOBALS['text_dir'] === 'ltr') {    echo ',*';}?>" rows="*" id="mainFrameset">    <?php if ($GLOBALS['text_dir'] === 'ltr') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <frame frameborder="0" id="frame_content"        src="<?php echo $main_target; ?>"        name="frame_content" />    <?php if ($GLOBALS['text_dir'] === 'rtl') { ?>    <frame frameborder="0" id="frame_navigation"        src="navigation.php<?php echo $url_query; ?>"        name="frame_navigation" />    <?php } ?>    <noframes>        <body>            <p><?php echo __('phpMyAdmin is more friendly with a <b>frames-capable</b> browser.'); ?></p>        </body>    </noframes></frameset></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';/** * Does the common work */$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'makegrid.js';$GLOBALS['js_include'][] = 'sql.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';require_once './libraries/server_common.inc.php';require_once './libraries/sql_query_form.lib.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Query box, bookmark, insert data from textfile */PMA_sqlQueryForm();/** * Displays the footer */require './libraries/footer.inc.php';?>
