<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Charset conversion functions. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}define('PMA_CHARSET_NONE', 0);define('PMA_CHARSET_ICONV', 1);define('PMA_CHARSET_RECODE', 2);define('PMA_CHARSET_ICONV_AIX', 3);// Finally detect which function we will use:if ($cfg['RecodingEngine'] == 'iconv') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('iconv');    }} elseif ($cfg['RecodingEngine'] == 'recode') {    if (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;        PMA_warnMissingExtension('recode');    }} elseif ($cfg['RecodingEngine'] == 'auto') {    if (@function_exists('iconv')) {        if ((@stristr(PHP_OS, 'AIX')) && (@strcasecmp(ICONV_IMPL, 'unknown') == 0) && (@strcasecmp(ICONV_VERSION, 'unknown') == 0)) {            $PMA_recoding_engine = PMA_CHARSET_ICONV_AIX;        } else {            $PMA_recoding_engine = PMA_CHARSET_ICONV;        }    } elseif (@function_exists('recode_string')) {        $PMA_recoding_engine = PMA_CHARSET_RECODE;    } else {        $PMA_recoding_engine = PMA_CHARSET_NONE;    }} else {    $PMA_recoding_engine = PMA_CHARSET_NONE;}/* Load AIX iconv wrapper if needed */if ($PMA_recoding_engine == PMA_CHARSET_ICONV_AIX) {    include_once './libraries/iconv_wrapper.lib.php';}/** * Converts encoding of text according to parameters with detected * conversion function. * * @param string   source charset * @param string   target charset * @param string   what to convert * * @return  string   converted text * * @access  public * */function PMA_convert_string($src_charset, $dest_charset, $what){    if ($src_charset == $dest_charset) {        return $what;    }    switch ($GLOBALS['PMA_recoding_engine']) {        case PMA_CHARSET_RECODE:            return recode_string($src_charset . '..'  . $dest_charset, $what);        case PMA_CHARSET_ICONV:            return iconv($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        case PMA_CHARSET_ICONV_AIX:            return PMA_aix_iconv_wrapper($src_charset, $dest_charset . $GLOBALS['cfg']['IconvExtraParams'], $what);        default:            return $what;    }} //  end of the "PMA_convert_string()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This class tracks changes on databases, tables and views. * For more information please see phpMyAdmin/Documentation.html * * @package PhpMyAdmin * * @todo use stristr instead of strstr */class PMA_Tracker{    /**     * Whether tracking is ready.     */    static protected $enabled = false;    /**     * Defines the internal PMA table which contains tracking data.     *     * @access  protected     * @var string     */    static protected $pma_table;    /**     * Defines the usage of DROP TABLE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_table;    /**     * Defines the usage of DROP VIEW statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_view;    /**     * Defines the usage of DROP DATABASE statment in SQL dumps.     *     * @access protected     * @var boolean     */    static protected $add_drop_database;    /**     * Defines auto-creation of tracking versions.     *     * @var boolean     */    static protected $version_auto_create;    /**     * Defines the default set of tracked statements.     *     * @var string     */    static protected $default_tracking_set;    /**     * Flags copied from `tracking` column definition in `pma_tracking` table.     * Used for column type conversion in Drizzle.     *     * @var array     */    static private $tracking_set_flags = array('UPDATE','REPLACE','INSERT','DELETE','TRUNCATE','CREATE DATABASE',            'ALTER DATABASE','DROP DATABASE','CREATE TABLE','ALTER TABLE','RENAME TABLE','DROP TABLE','CREATE INDEX',            'DROP INDEX','CREATE VIEW','ALTER VIEW','DROP VIEW');    /**     * Initializes settings. See phpMyAdmin/Documentation.html.     *     * @static     *     * @return nothing     */    static protected function init()    {        self::$pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                           PMA_backquote($GLOBALS['cfg']['Server']['tracking']);        self::$add_drop_table = $GLOBALS['cfg']['Server']['tracking_add_drop_table'];        self::$add_drop_view = $GLOBALS['cfg']['Server']['tracking_add_drop_view'];        self::$add_drop_database = $GLOBALS['cfg']['Server']['tracking_add_drop_database'];        self::$default_tracking_set = $GLOBALS['cfg']['Server']['tracking_default_statements'];        self::$version_auto_create = $GLOBALS['cfg']['Server']['tracking_version_auto_create'];    }    /**     * Actually enables tracking. This needs to be done after all     * underlaying code is initialized.     *     * @static     *     * @return nothing     */    static public function enable()    {        self::$enabled = true;    }    /**     * Gets the on/off value of the Tracker module, starts initialization.     *     * @static     *     * @return boolean (true=on|false=off)     */    static public function isActive()    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        self::init();        if (isset(self::$pma_table)) {            return true;        } else {            return false;        }    }    /**     * Parses the name of a table from a SQL statement substring.     *     * @param string $string part of SQL statement     *     * @static     *     * @return string the name of table     */    static protected function getTableName($string)    {        if (strstr($string, '.')) {            $temp = explode('.', $string);            $tablename = $temp[1];        } else {            $tablename = $string;        }        $str = explode("\n", $tablename);        $tablename = $str[0];        $tablename = str_replace(';', '', $tablename);        $tablename = str_replace('`', '', $tablename);        $tablename = trim($tablename);        return $tablename;    }    /**     * Gets the tracking status of a table, is it active or deactive ?     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return boolean true or false     */    static public function isTracked($dbname, $tablename)    {        if (! self::$enabled) {            return false;        }        /* We need to avoid attempt to track any queries from PMA_getRelationsParam */        self::$enabled = false;        $cfgRelation = PMA_getRelationsParam();        /* Restore original state */        self::$enabled = true;        if (! $cfgRelation['trackingwork']) {            return false;        }        $sql_query = " SELECT tracking_active FROM " . self::$pma_table .        " WHERE db_name = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND table_name = '" . PMA_sqlAddSlashes($tablename) . "' " .        " ORDER BY version DESC";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row['tracking_active']) && $row['tracking_active'] == 1) {            return true;        } else {            return false;        }    }    /**     * Returns the comment line for the log.     *     * @return string Comment, contains date and username     */    static public function getLogComment()    {        $date = date('Y-m-d H:i:s');        return "# log " . $date . " " . $GLOBALS['cfg']['Server']['user'] . "\n";    }    /**     * Creates tracking version of a table / view     * (in other words: create a job to track future changes on the table).     *     * @param string $dbname       name of database     * @param string $tablename    name of table     * @param string $version      version     * @param string $tracking_set set of tracking statements     * @param bool   $is_view      if table is a view     *     * @static     *     * @return int result of version insertion     */    static public function createVersion($dbname, $tablename, $version, $tracking_set = '', $is_view = false)    {        global $sql_backquotes;        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $sql_backquotes = true;        $date = date('Y-m-d H:i:s');        // Get data definition snapshot of table        $columns = PMA_DBI_get_columns($dbname, $tablename, null, true);        // int indices to reduce size        $columns = array_values($columns);        // remove Privileges to reduce size        for ($i = 0; $i < count($columns); $i++) {            unset($columns[$i]['Privileges']);        }        $indexes = PMA_DBI_get_table_indexes($dbname, $tablename);        $snapshot = array('COLUMNS' => $columns, 'INDEXES' => $indexes);        $snapshot = serialize($snapshot);        // Get DROP TABLE / DROP VIEW and CREATE TABLE SQL statements        $sql_backquotes = true;        $create_sql  = "";        if (self::$add_drop_table == true && $is_view == false) {            $create_sql .= self::getLogComment() .                           'DROP TABLE IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        if (self::$add_drop_view == true && $is_view == true) {            $create_sql .= self::getLogComment() .                           'DROP VIEW IF EXISTS ' . PMA_backquote($tablename) . ";\n";        }        $create_sql .= self::getLogComment() .                       PMA_getTableDef($dbname, $tablename, "\n", "");        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes($tablename) . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($snapshot) . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        if ($result) {            // Deactivate previous version            self::deactivateTracking($dbname, $tablename, ($version - 1));        }        return $result;    }    /**     * Removes all tracking data for a table     *     * @param string $dbname    name of database     * @param string $tablename name of table     *     * @static     *     * @return int result of version insertion     */    static public function deleteTracking($dbname, $tablename)    {        $sql_query = "/*NOTRACK*/\n" .        "DELETE FROM " . self::$pma_table . " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "'";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Creates tracking version of a database     * (in other words: create a job to track future changes on the database).     *     * @param string $dbname       name of database     * @param string $version      version     * @param string $query        query     * @param string $tracking_set set of tracking statements     *     * @static     *     * @return int result of version insertion     */    static public function createDatabaseVersion($dbname, $version, $query, $tracking_set = 'CREATE DATABASE,ALTER DATABASE,DROP DATABASE')    {        $date = date('Y-m-d H:i:s');        if ($tracking_set == '') {            $tracking_set = self::$default_tracking_set;        }        include_once './libraries/export/sql.php';        $create_sql  = "";        if (self::$add_drop_database == true) {            $create_sql .= self::getLogComment() .                           'DROP DATABASE IF EXISTS ' . PMA_backquote($dbname) . ";\n";        }        $create_sql .= self::getLogComment() . $query;        // Save version        $sql_query = "/*NOTRACK*/\n" .        "INSERT INTO" . self::$pma_table . " (" .        "db_name, " .        "table_name, " .        "version, " .        "date_created, " .        "date_updated, " .        "schema_snapshot, " .        "schema_sql, " .        "data_sql, " .        "tracking " .        ") " .        "values (        '" . PMA_sqlAddSlashes($dbname) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($version) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes($date) . "',        '" . PMA_sqlAddSlashes('') . "',        '" . PMA_sqlAddSlashes($create_sql) . "',        '" . PMA_sqlAddSlashes("\n") . "',        '" . PMA_sqlAddSlashes(self::transformTrackingSet($tracking_set)) . "' )";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking of a table.     *     * @param string  $dbname    name of database     * @param string  $tablename name of table     * @param string  $version   version     * @param integer $new_state the new state of tracking     *     * @static     *     * @return int result of SQL query     */    static private function _changeTracking($dbname, $tablename, $version, $new_state)    {        $sql_query = " UPDATE " . self::$pma_table .        " SET `tracking_active` = '" . $new_state . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Changes tracking data of a table.     *     * @param string       $dbname    name of database     * @param string       $tablename name of table     * @param string       $version   version     * @param string       $type      type of data(DDL || DML)     * @param string|array $new_data  the new tracking data     *     * @static     *     * @return bool result of change     */    static public function changeTrackingData($dbname, $tablename, $version, $type, $new_data)    {        if ($type == 'DDL') {            $save_to = 'schema_sql';        } elseif ($type == 'DML') {            $save_to = 'data_sql';        } else {            return false;        }        $date  = date('Y-m-d H:i:s');        $new_data_processed = '';        if (is_array($new_data)) {            foreach ($new_data as $data) {                $new_data_processed .= '# log ' . $date . ' ' . $data['username']                    . PMA_sqlAddSlashes($data['statement']) . "\n";            }        } else {            $new_data_processed = $new_data;        }        $sql_query = " UPDATE " . self::$pma_table .        " SET `" . $save_to . "` = '" . $new_data_processed . "' " .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' " .        " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";        $result = PMA_query_as_controluser($sql_query);        return $result;    }    /**     * Activates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function activateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 1);    }    /**     * Deactivates tracking of a table.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version     *     * @static     *     * @return int result of SQL query     */    static public function deactivateTracking($dbname, $tablename, $version)    {        return self::_changeTracking($dbname, $tablename, $version, 0);    }    /**     * Gets the newest version of a tracking job     * (in other words: gets the HEAD version).     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $statement tracked statement     *     * @static     *     * @return int (-1 if no version exists | >  0 if a version exists)     */    static public function getVersion($dbname, $tablename, $statement = null)    {        $sql_query = " SELECT MAX(version) FROM " . self::$pma_table .        " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .        " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) . "' ";        if ($statement != "") {            $sql_query .= PMA_DRIZZLE                ? ' AND tracking & ' . self::transformTrackingSet($statement) . ' <> 0'                : " AND FIND_IN_SET('" . $statement . "',tracking) > 0" ;        }        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        return isset($row[0])            ? $row[0]            : -1;    }    /**     * Gets the record of a tracking job.     *     * @param string $dbname    name of database     * @param string $tablename name of table     * @param string $version   version number     *     * @static     *     * @return mixed record DDM log, DDL log, structure snapshot, tracked statements.     */    static public function getTrackedData($dbname, $tablename, $version)    {        if (! isset(self::$pma_table)) {            self::init();        }        $sql_query = " SELECT * FROM " . self::$pma_table .            " WHERE `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' ";        if (! empty($tablename)) {            $sql_query .= " AND `table_name` = '" . PMA_sqlAddSlashes($tablename) ."' ";        }        $sql_query .= " AND `version` = '" . PMA_sqlAddSlashes($version) ."' ".                     " ORDER BY `version` DESC LIMIT 1";        $mixed = PMA_DBI_fetch_assoc(PMA_query_as_controluser($sql_query));        // Parse log        $log_schema_entries = explode('# log ',  $mixed['schema_sql']);        $log_data_entries   = explode('# log ',  $mixed['data_sql']);        $ddl_date_from = $date = date('Y-m-d H:i:s');        $ddlog = array();        $i = 0;        // Iterate tracked data definition statements        // For each log entry we want to get date, username and statement        foreach ($log_schema_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $ddl_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $ddlog[] = array( 'date' => $date,                                  'username'=> $username,                                  'statement' => $statement );                $i++;            }        }        $date_from = $ddl_date_from;        $date_to   = $ddl_date_to = $date;        $dml_date_from = $date_from;        $dmlog = array();        $i = 0;        // Iterate tracked data manipulation statements        // For each log entry we want to get date, username and statement        foreach ($log_data_entries as $log_entry) {            if (trim($log_entry) != '') {                $date      = substr($log_entry, 0, 19);                $username  = substr($log_entry, 20, strpos($log_entry, "\n") - 20);                if ($i == 0) {                    $dml_date_from = $date;                }                $statement = rtrim(strstr($log_entry, "\n"));                $dmlog[] = array( 'date' => $date,                                  'username' => $username,                                  'statement' => $statement );                $i++;            }        }        $dml_date_to = $date;        // Define begin and end of date range for both logs        if (strtotime($ddl_date_from) <= strtotime($dml_date_from)) {            $data['date_from'] = $ddl_date_from;        } else {            $data['date_from'] = $dml_date_from;        }        if (strtotime($ddl_date_to) >= strtotime($dml_date_to)) {            $data['date_to'] = $ddl_date_to;        } else {            $data['date_to'] = $dml_date_to;        }        $data['ddlog']           = $ddlog;        $data['dmlog']           = $dmlog;        $data['tracking']        = self::transformTrackingSet($mixed['tracking']);        $data['schema_snapshot'] = $mixed['schema_snapshot'];        return $data;    }    /**     * Parses a query. Gets     *  - statement identifier (UPDATE, ALTER TABLE, ...)     *  - type of statement, is it part of DDL or DML ?     *  - tablename     *     * @param string $query query     *     * @static     * @todo: using PMA SQL Parser when possible     * @todo: support multi-table/view drops     *     * @return mixed Array containing identifier, type and tablename.     *     */    static public function parseQuery($query)    {        // Usage of PMA_SQP does not work here        //        // require_once("libraries/sqlparser.lib.php");        // $parsed_sql = PMA_SQP_parse($query);        // $sql_info = PMA_SQP_analyze($parsed_sql);        $query = str_replace("\n", " ", $query);        $query = str_replace("\r", " ", $query);        $query = trim($query);        $query = trim($query, ' -');        $tokens = explode(" ", $query);        foreach ($tokens as $key => $value) {            $tokens[$key] = strtoupper($value);        }        // Parse USE statement, need it for SQL dump imports        if (substr($query, 0, 4) == 'USE ') {            $prefix = explode('USE ', $query);            $GLOBALS['db'] = self::getTableName($prefix[1]);        }        /*         * DDL statements         */        $result['type']         = 'DDL';        // Parse CREATE VIEW statement        if (in_array('CREATE', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true        ) {            $result['identifier'] = 'CREATE VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse ALTER VIEW statement        if (in_array('ALTER', $tokens) == true            && in_array('VIEW', $tokens) == true            && in_array('AS', $tokens) == true            && ! isset($result['identifier'])        ) {            $result['identifier'] = 'ALTER VIEW';            $index = array_search('VIEW', $tokens);            $result['tablename'] = strtolower(self::getTableName($tokens[$index + 1]));        }        // Parse DROP VIEW statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP VIEW ') {            $result['identifier'] = 'DROP VIEW';            $prefix  = explode('DROP VIEW ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 15) == 'CREATE DATABASE') {            $result['identifier'] = 'CREATE DATABASE';            $str = str_replace('CREATE DATABASE', '', $query);            $str = str_replace('IF NOT EXISTS', '', $str);            $prefix = explode('DEFAULT ', $str);            $result['tablename'] = '';            $GLOBALS['db'] = self::getTableName($prefix[0]);        }        // Parse ALTER DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 14) == 'ALTER DATABASE') {            $result['identifier'] = 'ALTER DATABASE';            $result['tablename'] = '';        }        // Parse DROP DATABASE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'DROP DATABASE') {            $result['identifier'] = 'DROP DATABASE';            $str = str_replace('DROP DATABASE', '', $query);            $str = str_replace('IF EXISTS', '', $str);            $GLOBALS['db'] = self::getTableName($str);            $result['tablename'] = '';        }        // Parse CREATE TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'CREATE TABLE' ) {            $result['identifier'] = 'CREATE TABLE';            $query   = str_replace('IF NOT EXISTS', '', $query);            $prefix  = explode('CREATE TABLE ', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse ALTER TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 12) == 'ALTER TABLE ') {            $result['identifier'] = 'ALTER TABLE';            $prefix  = explode('ALTER TABLE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename']  = self::getTableName($suffix[0]);        }        // Parse DROP TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'DROP TABLE ') {            $result['identifier'] = 'DROP TABLE';            $prefix  = explode('DROP TABLE ', $query);            $str = strstr($prefix[1], 'IF EXISTS');            if ($str == false ) {                $str = $prefix[1];            }            $result['tablename'] = self::getTableName($str);        }        // Parse CREATE INDEX statement        if (! isset($result['identifier'])            && (substr($query, 0, 12) == 'CREATE INDEX'            || substr($query, 0, 19) == 'CREATE UNIQUE INDEX'            || substr($query, 0, 20) == 'CREATE SPATIAL INDEX')        ) {             $result['identifier'] = 'CREATE INDEX';             $prefix = explode('ON ', $query);             $suffix = explode('(', $prefix[1]);             $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DROP INDEX statement        if (! isset($result['identifier']) && substr($query, 0, 10) == 'DROP INDEX') {             $result['identifier'] = 'DROP INDEX';             $prefix = explode('ON ', $query);             $result['tablename'] = self::getTableName($prefix[1]);        }        // Parse RENAME TABLE statement        if (! isset($result['identifier']) && substr($query, 0, 13) == 'RENAME TABLE ') {            $result['identifier'] = 'RENAME TABLE';            $prefix = explode('RENAME TABLE ', $query);            $names  = explode(' TO ', $prefix[1]);            $result['tablename']      = self::getTableName($names[0]);            $result["tablename_after_rename"]  = self::getTableName($names[1]);        }        /*         * DML statements         */        if (! isset($result['identifier'])) {            $result["type"]       = 'DML';        }        // Parse UPDATE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'UPDATE') {            $result['identifier'] = 'UPDATE';            $prefix  = explode('UPDATE ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse INSERT INTO statement        if (! isset($result['identifier']) && substr($query, 0, 11) == 'INSERT INTO') {            $result['identifier'] = 'INSERT';            $prefix  = explode('INSERT INTO', $query);            $suffix  = explode('(', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse DELETE statement        if (! isset($result['identifier']) && substr($query, 0, 6) == 'DELETE') {            $result['identifier'] = 'DELETE';            $prefix  = explode('FROM ', $query);            $suffix  = explode(' ', $prefix[1]);            $result['tablename'] = self::getTableName($suffix[0]);        }        // Parse TRUNCATE statement        if (! isset($result['identifier']) && substr($query, 0, 8) == 'TRUNCATE') {            $result['identifier'] = 'TRUNCATE';            $prefix  = explode('TRUNCATE', $query);            $result['tablename'] = self::getTableName($prefix[1]);        }        return $result;    }    /**     * Analyzes a given SQL statement and saves tracking data.     *     * @param string $query a SQL query     *     * @static     *     * @return nothing     */    static public function handleQuery($query)    {        // If query is marked as untouchable, leave        if (strstr($query, "/*NOTRACK*/")) {            return;        }        if (! (substr($query, -1) == ';')) {            $query = $query . ";\n";        }        // Get some information about query        $result = self::parseQuery($query);        // Get database name        $dbname = trim($GLOBALS['db'], '`');        // $dbname can be empty, for example when coming from Synchronize        // and this is a query for the remote server        if (empty($dbname)) {            return;        }        // If we found a valid statement        if (isset($result['identifier'])) {            $version = self::getVersion($dbname, $result['tablename'], $result['identifier']);            // If version not exists and auto-creation is enabled            if (self::$version_auto_create == true                && self::isTracked($dbname, $result['tablename']) == false                && $version == -1            ) {                // Create the version                switch ($result['identifier']) {                case 'CREATE TABLE':                    self::createVersion($dbname, $result['tablename'], '1');                    break;                case 'CREATE VIEW':                    self::createVersion($dbname, $result['tablename'], '1', '', true);                    break;                case 'CREATE DATABASE':                    self::createDatabaseVersion($dbname, '1', $query);                    break;                } // end switch            }            // If version exists            if (self::isTracked($dbname, $result['tablename']) && $version != -1) {                if ($result['type'] == 'DDL') {                    $save_to = 'schema_sql';                } elseif ($result['type'] == 'DML') {                    $save_to = 'data_sql';                } else {                    $save_to = '';                }                $date  = date('Y-m-d H:i:s');                // Cut off `dbname`. from query                $query = preg_replace('/`' . $dbname . '`\s?\./', '', $query);                // Add log information                $query = self::getLogComment() . $query ;                // Mark it as untouchable                $sql_query = " /*NOTRACK*/\n" .                " UPDATE " . self::$pma_table .                " SET " . PMA_backquote($save_to) ." = CONCAT( " . PMA_backquote($save_to) . ",'\n"                . PMA_sqlAddSlashes($query) . "') ," . " `date_updated` = '" . $date . "' ";                // If table was renamed we have to change the tablename attribute in pma_tracking too                if ($result['identifier'] == 'RENAME TABLE') {                    $sql_query .= ', `table_name` = \'' . PMA_sqlAddSlashes($result['tablename_after_rename']) . '\' ';                }                // Save the tracking information only for                //     1. the database                //     2. the table / view                //     3. the statements                // we want to track                $sql_query .=                " WHERE FIND_IN_SET('" . $result['identifier'] . "',tracking) > 0" .                " AND `db_name` = '" . PMA_sqlAddSlashes($dbname) . "' " .                " AND `table_name` = '" . PMA_sqlAddSlashes($result['tablename']) . "' " .                " AND `version` = '" . PMA_sqlAddSlashes($version) . "' ";                $result = PMA_query_as_controluser($sql_query);            }        }    }    /**     * Transforms tracking set for Drizzle, which has no SET type     *     * Converts int<>string for Drizzle, does nothing for MySQL     *     * @param int|string $tracking_set     * @return int|string     */    static private function transformTrackingSet($tracking_set)    {        if (!PMA_DRIZZLE) {            return $tracking_set;        }        // init conversion array (key 3 doesn't exist in calculated array)        if (isset(self::$tracking_set_flags[3])) {            // initialize flags            $set = self::$tracking_set_flags;            $array = array();            for ($i = 0; $i < count($set); $i++) {                $flag = 1 << $i;                $array[$flag] = $set[$i];                $array[$set[$i]] = $flag;            }            self::$tracking_set_flags = $array;        }        if (is_numeric($tracking_set)) {            // int > string conversion            $aflags = array();            // count/2 - conversion table has both int > string and string > int values            for ($i = 0; $i < count(self::$tracking_set_flags)/2; $i++) {                $flag = 1 << $i;                if ($tracking_set & $flag) {                    $aflags[] = self::$tracking_set_flags[$flag];                }            }            $flags = implode(',', $aflags);        } else {            // string > int conversion            $flags = 0;            foreach (explode(',', $tracking_set) as $strflag) {                if ($strflag == '') {                    continue;                }                $flags |= self::$tracking_set_flags[$strflag];            }        }        return $flags;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/Message.class.php';/** * Handles the recently used tables. * * @TODO Change the release version in table pma_recent (#recent in Documentation.html) * * @package PhpMyAdmin */class PMA_RecentTable{    /**     * Defines the internal PMA table which contains recent tables.     *     * @access  private     * @var string     */    private $pma_table;    /**     * Reference to session variable containing recently used tables.     *     * @access public     * @var array     */    public $tables;    /**     * PMA_RecentTable instance.     *     * @var PMA_RecentTable     */    private static $_instance;    public function __construct()    {        if (strlen($GLOBALS['cfg']['Server']['pmadb']) &&            strlen($GLOBALS['cfg']['Server']['recent'])) {            $this->pma_table = PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) .".".                               PMA_backquote($GLOBALS['cfg']['Server']['recent']);        }        $server_id = $GLOBALS['server'];        if (! isset($_SESSION['tmp_user_values']['recent_tables'][$server_id])) {            $_SESSION['tmp_user_values']['recent_tables'][$server_id] =                isset($this->pma_table) ? $this->getFromDb() : array();        }        $this->tables =& $_SESSION['tmp_user_values']['recent_tables'][$server_id];    }    /**     * Returns class instance.     *     * @return PMA_RecentTable     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new PMA_RecentTable();        }        return self::$_instance;    }    /**     * Returns recently used tables from phpMyAdmin database.     *     *     * @return array     */    public function getFromDb()    {        // Read from phpMyAdmin database, if recent tables is not in session        $sql_query            = " SELECT `tables` FROM " . $this->pma_table .            " WHERE `username` = '" . $GLOBALS['cfg']['Server']['user'] . "'";        $row = PMA_DBI_fetch_array(PMA_query_as_controluser($sql_query));        if (isset($row[0])) {            return json_decode($row[0], true);        } else {            return array();        }    }    /**     * Save recent tables into phpMyAdmin database.     *     *     * @return true|PMA_Message     */    public function saveToDb()    {        $username = $GLOBALS['cfg']['Server']['user'];        $sql_query            = " REPLACE INTO " . $this->pma_table . " (`username`, `tables`)" .            " VALUES ('" . $username . "', '" . PMA_sqlAddSlashes(json_encode($this->tables)) . "')";        $success = PMA_DBI_try_query($sql_query, $GLOBALS['controllink']);        if (!$success) {            $message = PMA_Message::error(__('Could not save recent table'));            $message->addMessage('<br /><br />');            $message->addMessage(PMA_Message::rawError(PMA_DBI_getError($GLOBALS['controllink'])));            return $message;        }        return true;    }    /**     * Trim recent table according to the LeftRecentTable configuration.     *     * @return boolean True if trimming occurred     */    public function trim()    {        $max = max($GLOBALS['cfg']['LeftRecentTable'], 0);        $trimming_occured = count($this->tables) > $max;        while (count($this->tables) > $max) {            array_pop($this->tables);        }        return $trimming_occured;    }    /**     * Return options for HTML select.     *     * @return string     */    public function getHtmlSelectOption()    {        // trim and save, in case where the configuration is changed        if ($this->trim() && isset($this->pma_table)) {            $this->saveToDb();        }        $html = '<option value="">(' . __('Recent tables') . ') ...</option>';        if (count($this->tables)) {            foreach ($this->tables as $table) {                $html .= '<option value="' . htmlspecialchars(json_encode($table)) . '">' .                         htmlspecialchars('`' . $table['db'] . '`.`' . $table['table'] . '`') . '</option>';            }        } else {            $html .= '<option value="">' . __('There are no recent tables') . '</option>';        }        return $html;    }    /**     * Return HTML select.     *     * @return string     */    public function getHtmlSelect()    {        $html  = '<input type="hidden" name="goto" id="LeftDefaultTabTable" value="' .                         htmlspecialchars($GLOBALS['cfg']['LeftDefaultTabTable']) . '" />';        $html .= '<select name="selected_recent_table" id="recentTable">';        $html .= $this->getHtmlSelectOption();        $html .= '</select>';        return $html;    }    /**     * Add recently used tables.     *     * @param string $db Database name where the table is located     * @param string $table Table name     *     * @return true|PMA_Message True if success, PMA_Message if not     */    public function add($db, $table)    {        $table_arr = array();        $table_arr['db'] = $db;        $table_arr['table'] = $table;        // add only if this is new table        if (! isset($this->tables[0]) || $this->tables[0] != $table_arr) {            array_unshift($this->tables, $table_arr);            $this->tables = array_merge(array_unique($this->tables, SORT_REGULAR));            $this->trim();            if (isset($this->pma_table)) {                return $this->saveToDb();            }        }        return true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Single signon for phpMyAdmin using OpenID * * This is just example how to use single signon with phpMyAdmin, it is * not intended to be perfect code and look, only shows how you can * integrate this functionality in your application. * * It uses OpenID pear package, see http://pear.php.net/package/OpenID * * User first authenticates using OpenID and based on content of $AUTH_MAP * the login information is passed to phpMyAdmin in session data. * * @package PhpMyAdmin * @subpackage Example */if (false === @include_once 'OpenID/RelyingParty.php') {    exit;}/** * Map of authenticated users to MySQL user/password pairs. */$AUTH_MAP = array(    'http://launchpad.net/~username' => array(        'user' => 'root',        'password' => '',        ),    );/** * Simple function to show HTML page with given content. */function show_page($contents){    header('Content-Type: text/html; charset=utf-8');    echo '<?xml version="1.0" encoding="utf-8"?>' . "\n";    ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr"><head>    <link rel="icon" href="../favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon" />    <title>phpMyAdmin OpenID signon example</title></head><body><?phpif (isset($_SESSION) && isset($_SESSION['PMA_single_signon_error_message'])) {    echo '<p class="error">' . $_SESSION['PMA_single_signon_message'] . '</p>';    unset($_SESSION['PMA_single_signon_message']);}echo $contents;?></body></html><?php}/* Need to have cookie visible from parent directory */session_set_cookie_params(0, '/', '', 0);/* Create signon session */$session_name = 'SignonSession';session_name($session_name);session_start();// Determine realm and return_to$base = 'http';if (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') {    $base .= 's';}$base .= '://' . $_SERVER['SERVER_NAME'] . ':' . $_SERVER['SERVER_PORT'];$realm = $base . '/';$returnTo = $base . dirname($_SERVER['PHP_SELF']);if ($returnTo[strlen($returnTo) - 1] != '/') {    $returnTo .= '/';}$returnTo .= 'openid.php';/* Display form */if (!count($_GET) && !count($_POST) || isset($_GET['phpMyAdmin'])) {    /* Show simple form */    $content = '<form action="openid.php" method="post">OpenID: <input type="text" name="identifier" /><br /><input type="submit" name="start" /></form></body></html>';    show_page($content);    exit;}/* Grab identifier */if (isset($_POST['identifier'])) {    $identifier = $_POST['identifier'];} else if (isset($_SESSION['identifier'])) {    $identifier = $_SESSION['identifier'];} else {    $identifier = null;}/* Create OpenID object */try {    $o = new OpenID_RelyingParty($returnTo, $realm, $identifier);} catch (OpenID_Exception $e) {    $contents = "<div class='relyingparty_results'>\n";    $contents .= "<pre>" . $e->getMessage() . "</pre>\n";    $contents .= "</div class='relyingparty_results'>";    show_page($contents);    exit;}/* Redirect to OpenID provider */if (isset($_POST['start'])) {    try {        $authRequest = $o->prepare();    } catch (OpenID_Exception $e) {        $contents = "<div class='relyingparty_results'>\n";        $contents .= "<pre>" . $e->getMessage() . "</pre>\n";        $contents .= "</div class='relyingparty_results'>";        show_page($contents);        exit;    }    $url = $authRequest->getAuthorizeURL();    header("Location: $url");    exit;} else {    /* Grab query string */    if (!count($_POST)) {        list(, $queryString) = explode('?', $_SERVER['REQUEST_URI']);    } else {        // I hate php sometimes        $queryString = file_get_contents('php://input');    }    /* Check reply */    $message = new OpenID_Message($queryString, OpenID_Message::FORMAT_HTTP);    $id = $message->get('openid.claimed_id');    if (!empty($id) && isset($AUTH_MAP[$id])) {        $_SESSION['PMA_single_signon_user'] = $AUTH_MAP[$id]['user'];        $_SESSION['PMA_single_signon_password'] = $AUTH_MAP[$id]['password'];        session_write_close();        /* Redirect to phpMyAdmin (should use absolute URL here!) */        header('Location: ../index.php');    } else {        show_page('<p>User not allowed!</p>');        exit;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * holds the PMA_List_Database class * * @package PhpMyAdmin *//** * the list base class */require_once './libraries/List.class.php';/** * handles database lists * * <code> * $PMA_List_Database = new PMA_List_Database($userlink, $controllink); * </code> * * @todo this object should be attached to the PMA_Server object * @todo ? make use of INFORMATION_SCHEMA * @todo ? support --skip-showdatabases and user has only global rights * @access public * @since phpMyAdmin 2.9.10 * @package PhpMyAdmin *//*public*/ class PMA_List_Database extends PMA_List{    /**     * @var mixed   database link resource|object to be used     */    protected $_db_link = null;    /**     * @var mixed   user database link resource|object     */    protected $_db_link_user = null;    /**     * @var mixed   controluser database link resource|object     */    protected $_db_link_control = null;    /**     * @var boolean whether SHOW DATABASES is disabled or not     * @access protected     */    protected $_show_databases_disabled = false;    /**     * @var string command to retrieve databases from server     */    protected $_command = null;    /**     * Constructor     *     * @param mixed   $db_link_user       user database link resource|object     * @param mixed   $db_link_control    control database link resource|object     */    public function __construct($db_link_user = null, $db_link_control = null)    {        $this->_db_link = $db_link_user;        $this->_db_link_user = $db_link_user;        $this->_db_link_control = $db_link_control;        parent::__construct();        $this->build();    }    /**     * checks if the configuration wants to hide some databases     */    protected function _checkHideDatabase()    {        if (empty($GLOBALS['cfg']['Server']['hide_db'])) {            return;        }        foreach ($this->getArrayCopy() as $key => $db) {            if (preg_match('/' . $GLOBALS['cfg']['Server']['hide_db'] . '/', $db)) {                $this->offsetUnset($key);            }        }    }    /**     * retrieves database list from server     *     * @todo    we could also search mysql tables if all fail?     * @param string  $like_db_name   usally a db_name containing wildcards     * @return array     */    protected function _retrieve($like_db_name = null)    {        if ($this->_show_databases_disabled) {            return array();        }        if (null !== $like_db_name) {            $command = "SHOW DATABASES LIKE '" . $like_db_name . "'";        } elseif (null === $this->_command) {            $command = str_replace('#user#', $GLOBALS['cfg']['Server']['user'],                $GLOBALS['cfg']['Server']['ShowDatabasesCommand']);            $this->_command = $command;        } else {            $command = $this->_command;        }        $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);        PMA_DBI_getError();        if ($GLOBALS['errno'] !== 0) {            // failed to get database list, try the control user            // (hopefully there is one and he has SHOW DATABASES right)            $this->_db_link = $this->_db_link_control;            $database_list = PMA_DBI_fetch_result($command, null, null, $this->_db_link);            PMA_DBI_getError();            if ($GLOBALS['errno'] !== 0) {                // failed! we will display a warning that phpMyAdmin could not safely                // retrieve database list, the admin has to setup a control user or                // allow SHOW DATABASES                $GLOBALS['error_showdatabases'] = true;                $this->_show_databases_disabled = true;            }        }        if ($GLOBALS['cfg']['NaturalOrder']) {            natsort($database_list);        } else {            // need to sort anyway, otherwise information_schema            // goes at the top            sort($database_list);        }        return $database_list;    }    /**     * builds up the list     *     */    public function build()    {        if (! $this->_checkOnlyDatabase()) {            $items = $this->_retrieve();            $this->exchangeArray($items);        }        $this->_checkHideDatabase();    }    /**     * checks the only_db configuration     *     * @return  boolean false if there is no only_db, otherwise true     */    protected function _checkOnlyDatabase()    {        if (is_string($GLOBALS['cfg']['Server']['only_db'])         && strlen($GLOBALS['cfg']['Server']['only_db'])) {            $GLOBALS['cfg']['Server']['only_db'] = array(                $GLOBALS['cfg']['Server']['only_db']            );        }        if (! is_array($GLOBALS['cfg']['Server']['only_db'])) {            return false;        }        $items = array();        foreach ($GLOBALS['cfg']['Server']['only_db'] as $each_only_db) {            if ($each_only_db === '*' && ! $this->_show_databases_disabled) {                // append all not already listed dbs to the list                $items = array_merge($items,                    array_diff($this->_retrieve(), $items));                // there can only be one '*', and this can only be last                break;            }            // check if the db name contains wildcard,            // thus containing not escaped _ or %            if (! preg_match('/(^|[^\\\\])(_|%)/', $each_only_db)) {                // ... not contains wildcard                $items[] = PMA_unescape_mysql_wildcards($each_only_db);                continue;            }            if (! $this->_show_databases_disabled) {                $items = array_merge($items, $this->_retrieve($each_only_db));                continue;            }            // @todo induce error, about not using wildcards with SHOW DATABASE disabled?        }        $this->exchangeArray($items);        return true;    }    /**     * returns default item     *     * @return  string  default item     */    public function getDefault()    {        if (strlen($GLOBALS['db'])) {            return $GLOBALS['db'];        }        return $this->getEmpty();    }    /**     * returns array with dbs grouped with extended infos     *     * @param integer $offset     * @param integer $count     * @return  array   db list     */    public function getGroupedDetails($offset, $count)    {        $dbgroups   = array();        if ($GLOBALS['cfg']['ShowTooltip']          && $GLOBALS['cfgRelation']['commwork']) {            $db_tooltips = PMA_getDbComments();        }        if (!$GLOBALS['cfg']['LeftFrameDBTree']) {            $separators = array();        } elseif (is_array($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = $GLOBALS['cfg']['LeftFrameDBSeparator'];        } elseif (!empty($GLOBALS['cfg']['LeftFrameDBSeparator'])) {            $separators = array($GLOBALS['cfg']['LeftFrameDBSeparator']);        } else {            $separators = array();        }        foreach ($this->getLimitedItems($offset, $count) as $db) {            // Get comments from PMA comments table            $db_tooltip = '';            if (isset($db_tooltips[$db])) {                $db_tooltip = $db_tooltips[$db];            }            $pos = false;            foreach ($separators as $separator) {                // use strpos instead of strrpos; it seems more common to                // have the db name, the separator, then the rest which                // might contain a separator                // like dbname_the_rest                $pos = strpos($db, $separator, 1);                if ($pos !== false) {                    break;                }            }            if ($pos !== false) {                $group          = substr($db, 0, $pos);                $disp_name_cut  = substr($db, $pos);            } else {                $group          = $db;                $disp_name_cut  = $db;            }            $disp_name  = $db;            if ($db_tooltip && $GLOBALS['cfg']['ShowTooltipAliasDB']) {                $disp_name      = $db_tooltip;                $disp_name_cut  = $db_tooltip;                $db_tooltip     = $db;            }            $dbgroups[$group][$db] = array(                'name'          => $db,                'disp_name_cut' => $disp_name_cut,                'disp_name'     => $disp_name,                'comment'       => $db_tooltip,            );            if ($GLOBALS['cfg']['Server']['CountTables']) {                $dbgroups[$group][$db]['num_tables'] = PMA_getTableCount($db);            }        } // end foreach ($GLOBALS['PMA_List_Database']->items as $db)        return $dbgroups;    }    /**     * returns a part of the items     *     * @param integer $offset     * @param integer $count     * @return  array  some items     */    public function getLimitedItems($offset, $count)    {        return array_slice($this->getArrayCopy(), $offset, $count);    }    /**     * returns html code for list with dbs     *     * @return  string  html code list     */    public function getHtmlListGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<ul id="databaseList" xml:lang="en" dir="ltr">' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<li class="group"><span>' . htmlspecialchars($group) . '</span><ul>' . "\n";                // whether display db_name cut by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<li';                if ($db['name'] == $selected) {                    $return .= ' class="selected"';                }                $return .= '><a';                if (! empty($db['comment'])) {                    $return .= ' title="' . htmlspecialchars($db['comment']) . '"';                }                $return .= ' href="index.php?' . PMA_generate_common_url($db['name'])                    . '" target="_parent">';                if ($cut) {                    $return .= htmlspecialchars($db['disp_name_cut']);                } else {                    $return .= htmlspecialchars($db['disp_name']);                }                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</a></li>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</ul></li>' . "\n";            }        }        $return .= '</ul>';        return $return;    }    /**     * returns html code for select form element with dbs     *     * @todo IE can not handle different text directions in select boxes so,     * as mostly names will be in english, we set the whole selectbox to LTR     * and EN     *     * @return  string  html code select     */    public function getHtmlSelectGrouped($selected = '', $offset, $count)    {        if (true === $selected) {            $selected = $this->getDefault();        }        $return = '<select name="db" id="lightm_db" xml:lang="en" dir="ltr"'            . ' onchange="if (this.value != \'\') window.parent.openDb(this.value);">' . "\n"            . '<option value="" dir="' . $GLOBALS['text_dir'] . '">'            . '(' . __('Databases') . ') ...</option>' . "\n";        foreach ($this->getGroupedDetails($offset, $count) as $group => $dbs) {            if (count($dbs) > 1) {                $return .= '<optgroup label="' . htmlspecialchars($group)                    . '">' . "\n";                // whether display db_name cuted by the group part                $cut = true;            } else {                // .. or full                $cut = false;            }            foreach ($dbs as $db) {                $return .= '<option value="' . htmlspecialchars($db['name']) . '"'                    .' title="' . htmlspecialchars($db['comment']) . '"';                if ($db['name'] == $selected || (PMA_DRIZZLE && strtolower($db['name']) == strtolower($selected))) {                    $return .= ' selected="selected"';                }                $return .= '>' . htmlspecialchars($cut ? $db['disp_name_cut'] : $db['disp_name']);                if (! empty($db['num_tables'])) {                    $return .= ' (' . $db['num_tables'] . ')';                }                $return .= '</option>' . "\n";            }            if (count($dbs) > 1) {                $return .= '</optgroup>' . "\n";            }        }        $return .= '</select>';        return $return;    }    /**     * this is just a backup, if all is fine this can be deleted later     *     * @deprecated     */    protected function _checkAgainstPrivTables()    {        // 1. get allowed dbs from the "mysql.db" table        // User can be blank (anonymous user)        $local_query = "            SELECT DISTINCT `Db` FROM `mysql`.`db`            WHERE `Select_priv` = 'Y'            AND `User`            IN ('" . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . "', '')";        $tmp_mydbs = PMA_DBI_fetch_result($local_query, null, null,            $GLOBALS['controllink']);        if ($tmp_mydbs) {            // Will use as associative array of the following 2 code            // lines:            //   the 1st is the only line intact from before            //     correction,            //   the 2nd replaces $dblist[] = $row['Db'];            // Code following those 2 lines in correction continues            // populating $dblist[], as previous code did. But it is            // now populated with actual database names instead of            // with regular expressions.            $tmp_alldbs = PMA_DBI_query('SHOW DATABASES;', $GLOBALS['controllink']);            // all databases cases - part 2            if (isset($tmp_mydbs['%'])) {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $dblist[] = $tmp_row[0];                } // end while            } else {                while ($tmp_row = PMA_DBI_fetch_row($tmp_alldbs)) {                    $tmp_db = $tmp_row[0];                    if (isset($tmp_mydbs[$tmp_db]) && $tmp_mydbs[$tmp_db] == 1) {                        $dblist[]           = $tmp_db;                        $tmp_mydbs[$tmp_db] = 0;                    } elseif (! isset($dblist[$tmp_db])) {                        foreach ($tmp_mydbs as $tmp_matchpattern => $tmp_value) {                            // fixed bad regexp                            // TODO: db names may contain characters                            //       that are regexp instructions                            $re        = '(^|(\\\\\\\\)+|[^\])';                            $tmp_regex = preg_replace('/' . addcslashes($re, '/') . '%/', '\\1.*', preg_replace('/' . addcslashes($re, '/') . '_/', '\\1.{1}', $tmp_matchpattern));                            // Fixed db name matching                            // 2000-08-28 -- Benjamin Gandon                            if (preg_match('/^' . addcslashes($tmp_regex, '/') . '$/', $tmp_db)) {                                $dblist[] = $tmp_db;                                break;                            }                        } // end while                    } // end if ... elseif ...                } // end while            } // end else            PMA_DBI_free_result($tmp_alldbs);            unset($tmp_mydbs);        } // end if        // 2. get allowed dbs from the "mysql.tables_priv" table        $local_query = 'SELECT DISTINCT Db FROM mysql.tables_priv WHERE Table_priv LIKE \'%Select%\' AND User = \'' . PMA_sqlAddSlashes($GLOBALS['cfg']['Server']['user']) . '\'';        $rs          = PMA_DBI_try_query($local_query, $GLOBALS['controllink']);        if ($rs && @PMA_DBI_num_rows($rs)) {            while ($row = PMA_DBI_fetch_assoc($rs)) {                if (!in_array($row['Db'], $dblist)) {                    $dblist[] = $row['Db'];                }            } // end while            PMA_DBI_free_result($rs);        } // end if    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Logging functionality for webserver. * * This includes web server specific code to log some information. * * @package PhpMyAdmin *//** * Logs user information to webserver logs. */function PMA_log_user($user, $status = 'ok'){    if (function_exists('apache_note')) {        apache_note('userID', $user);        apache_note('userStatus', $status);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Get some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);/** * The form used to define the field to add has been submitted */$abort = false;// check number of fields to be createdif (isset($_REQUEST['submit_num_fields'])) {    if (isset($_REQUEST['orig_after_field'])) {        $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];    }    if (isset($_REQUEST['orig_field_where'])) {        $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];    }    $num_fields = $_REQUEST['orig_num_fields'] + $_REQUEST['added_fields'];    $regenerate = true;} elseif (isset($_REQUEST['num_fields']) && intval($_REQUEST['num_fields']) > 0) {    $num_fields = (int) $_REQUEST['num_fields'];} else {    $num_fields = 1;}if (isset($_REQUEST['do_save_data'])) {    $query = '';    $definitions = array();    // Transforms the radio button field_key into 3 arrays    $field_cnt      = count($_REQUEST['field_name']);    $field_primary  = array();    $field_index    = array();    $field_unique   = array();    $field_fulltext = array();    for ($i = 0; $i < $field_cnt; ++$i) {        if (isset($_REQUEST['field_key'][$i])         && strlen($_REQUEST['field_name'][$i])) {            if ($_REQUEST['field_key'][$i] == 'primary_' . $i) {                $field_primary[] = $i;            }            if ($_REQUEST['field_key'][$i] == 'index_' . $i) {                $field_index[]   = $i;            }            if ($_REQUEST['field_key'][$i] == 'unique_' . $i) {                $field_unique[]  = $i;            }            if ($_REQUEST['field_key'][$i] == 'fulltext_' . $i) {                $field_fulltext[]  = $i;            }        } // end if    } // end for    // Builds the field creation statement and alters the table    for ($i = 0; $i < $field_cnt; ++$i) {        // '0' is also empty for php :-(        if (empty($_REQUEST['field_name'][$i]) && $_REQUEST['field_name'][$i] != '0') {            continue;        }        $definition = ' ADD ' . PMA_Table::generateFieldSpec(            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $field_primary,            $i        );        if ($_REQUEST['field_where'] != 'last') {            // Only the first field can be added somewhere other than at the end            if ($i == 0) {                if ($_REQUEST['field_where'] == 'first') {                    $definition .= ' FIRST';                } else {                    $definition .= ' AFTER ' . PMA_backquote($_REQUEST['after_field']);                }            } else {                $definition .= ' AFTER ' . PMA_backquote($_REQUEST['field_name'][$i-1]);            }        }        $definitions[] = $definition;    } // end for    // Builds the primary keys statements and updates the table    if (count($field_primary)) {        $fields = array();        foreach ($field_primary as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD PRIMARY KEY (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the indexes statements and updates the table    if (count($field_index)) {        $fields = array();        foreach ($field_index as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD INDEX (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the uniques statements and updates the table    if (count($field_unique)) {        $fields = array();        foreach ($field_unique as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD UNIQUE (' . implode(', ', $fields) . ') ';        unset($fields);    }    // Builds the fulltext statements and updates the table    if (count($field_fulltext)) {        $fields = array();        foreach ($field_fulltext as $field_nr) {            $fields[] = PMA_backquote($_REQUEST['field_name'][$field_nr]);        }        $definitions[] = ' ADD FULLTEXT (' . implode(', ', $fields) . ') ';        unset($fields);    }    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_getError(), 'USE ' . PMA_backquotes($db), '', $err_url);    $sql_query    = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $definitions);    $result = PMA_DBI_try_query($sql_query);    if ($result === true) {        // If comments were sent, enable relation stuff        include_once './libraries/transformations.lib.php';        // Update comment table for mime types [MIME]        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table,                        $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        // Go back to the structure sub-page        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        $num_fields = $_REQUEST['orig_num_fields'];        if (isset($_REQUEST['orig_after_field'])) {            $_REQUEST['after_field'] = $_REQUEST['orig_after_field'];        }        if (isset($_REQUEST['orig_field_where'])) {            $_REQUEST['field_where'] = $_REQUEST['orig_field_where'];        }        $regenerate = true;    }} // end do alter table/** * Displays the form used to define the new field */if ($abort == false) {    /**     * Gets tables informations     */    include_once './libraries/tbl_common.php';    include_once './libraries/tbl_info.inc.php';    /**     * Displays top menu links     */    $active_page = 'tbl_structure.php';    if ($GLOBALS['is_ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    /**     * Display the form     */    $action = 'tbl_addfield.php';    include_once './libraries/tbl_properties.inc.php';    // Diplays the footer    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Config file management * * @package PhpMyAdmin *//** * Config file management class. * Stores its data in $_SESSION * * @package    phpMyAdmin */class ConfigFile{    /**     * Stores default PMA config from config.default.php     * @var array     */    private $cfg;    /**     * Stores original PMA_Config object, not modified by user preferences     * @var PMA_Config     */    private $orgCfgObject;    /**     * Stores allowed values for non-standard fields     * @var array     */    private $cfgDb;    /**     * Keys which will be always written to config file     * @var array     */    private $persistKeys = array();    /**     * Changes keys while updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    private $cfgUpdateReadMapping = array();    /**     * Key filter for {@link set()}     * @var array|null     */    private $setFilter;    /**     * Instance id (key in $_SESSION array, separate for each server - ConfigFile{server id})     * @var string     */    private $id;    /**     * Result for {@link _flattenArray()}     * @var array     */    private $_flattenArrayResult;    /**     * ConfigFile instance     * @var ConfigFile     */    private static $_instance;    /**     * Private constructor, use {@link getInstance()}     *     */    private function __construct()    {        // load default config values        $cfg = &$this->cfg;        include './libraries/config.default.php';        $cfg['fontsize'] = '82%';        // create PMA_Config to read config.inc.php values        $this->orgCfgObject = new PMA_Config(CONFIG_FILE);        // load additional config information        $cfg_db = &$this->cfgDb;        include './libraries/config.values.php';        // apply default values overrides        if (count($cfg_db['_overrides'])) {            foreach ($cfg_db['_overrides'] as $path => $value) {                PMA_array_write($path, $cfg, $value);            }        }        $this->id = 'ConfigFile' . $GLOBALS['server'];        if (!isset($_SESSION[$this->id])) {            $_SESSION[$this->id] = array();        }    }    /**     * Returns class instance     *     * @return ConfigFile     */    public static function getInstance()    {        if (is_null(self::$_instance)) {            self::$_instance = new ConfigFile();        }        return self::$_instance;    }    /**     * Returns PMA_Config without user preferences applied     *     * @return PMA_Config     */    public function getOrgConfigObj()    {        return $this->orgCfgObject;    }    /**     * Sets names of config options which will be placed in config file even if they are set     * to their default values (use only full paths)     *     * @param array $keys     */    public function setPersistKeys($keys)    {        // checking key presence is much faster than searching so move values to keys        $this->persistKeys = array_flip($keys);    }    /**     * Returns flipped array set by {@link setPersistKeys()}     *     * @return array     */    public function getPersistKeysMap()    {        return $this->persistKeys;    }    /**     * By default ConfigFile allows setting of all configuration keys, use this method     * to set up a filter on {@link set()} method     *     * @param array|null $keys array of allowed keys or null to remove filter     */    public function setAllowedKeys($keys)    {        if ($keys === null) {            $this->setFilter = null;            return;        }        // checking key presence is much faster than searching so move values to keys        $this->setFilter = array_flip($keys);    }    /**     * Sets path mapping for updating config in {@link updateWithGlobalConfig()} or reading     * by {@link getConfig()} or {@link getConfigArray()}     * @var array     */    public function setCfgUpdateReadMapping(array $mapping)    {        $this->cfgUpdateReadMapping = $mapping;    }    /**     * Resets configuration data     */    public function resetConfigData()    {        $_SESSION[$this->id] = array();    }    /**     * Sets configuration data (overrides old data)     *     * @param array $cfg     */    public function setConfigData(array $cfg)    {        $_SESSION[$this->id] = $cfg;    }    /**     * Sets config value     *     * @param string $path     * @param mixed  $value     * @param string $canonical_path     */    public function set($path, $value, $canonical_path = null)    {        if ($canonical_path === null) {            $canonical_path = $this->getCanonicalPath($path);        }        // apply key whitelist        if ($this->setFilter !== null && !isset($this->setFilter[$canonical_path])) {            return;        }        // remove if the path isn't protected and it's empty or has a default value        if (!isset($this->persistKeys[$canonical_path])) {            $default_value = $this->getDefault($canonical_path);            // we need oryginal config values not overwritten by user preferences            // to allow for overwriting options set in config.inc.php with default values            $instance_default_value = PMA_array_read($canonical_path, $this->orgCfgObject->settings);            if (($value === $default_value && (defined('PMA_SETUP') || $instance_default_value === $default_value))                    || (empty($value) && empty($default_value) && (defined('PMA_SETUP') || empty($current_global)))) {                PMA_array_remove($path, $_SESSION[$this->id]);                return;            }        }        PMA_array_write($path, $_SESSION[$this->id], $value);    }    /**     * Flattens multidimensional array, changes indices to paths (eg. 'key/subkey').     * Used as array_walk() callback.     *     * @param mixed $value     * @param mixed $key     * @param mixed $prefix     */    private function _flattenArray($value, $key, $prefix)    {        // no recursion for numeric arrays        if (is_array($value) && !isset($value[0])) {            $prefix .= $key . '/';            array_walk($value, array($this, '_flattenArray'), $prefix);        } else {            $this->_flattenArrayResult[$prefix . $key] = $value;        }    }    /**     * Returns default config in a flattened array     *     * @return array     */    public function getFlatDefaultConfig()    {        $this->_flattenArrayResult = array();        array_walk($this->cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        return $flat_cfg;    }    /**     * Updates config with values read from given array     * (config will contain differences to defaults from config.defaults.php).     *     * @param array $cfg     */    public function updateWithGlobalConfig(array $cfg)    {        // load config array and flatten it        $this->_flattenArrayResult = array();        array_walk($cfg, array($this, '_flattenArray'), '');        $flat_cfg = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        // save values        // map for translating a few user preferences paths, should be complemented        // by code reading from generated config to perform inverse mapping        foreach ($flat_cfg as $path => $value) {            if (isset($this->cfgUpdateReadMapping[$path])) {                $path = $this->cfgUpdateReadMapping[$path];            }            $this->set($path, $value, $path);        }    }    /**     * Returns config value or $default if it's not set     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function get($path, $default = null)    {        return PMA_array_read($path, $_SESSION[$this->id], $default);    }    /**     * Returns default config value or $default it it's not set ie. it doesn't     * exist in config.default.php ($cfg) and config.values.php     * ($_cfg_db['_overrides'])     *     * @param  string $canonical_path     * @param  mixed  $default     * @return mixed     */    public function getDefault($canonical_path, $default = null)    {        return PMA_array_read($canonical_path, $this->cfg, $default);    }    /**     * Returns config value, if it's not set uses the default one; returns     * $default if the path isn't set and doesn't contain a default value     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getValue($path, $default = null)    {        $v = PMA_array_read($path, $_SESSION[$this->id], null);        if ($v !== null) {            return $v;        }        $path = $this->getCanonicalPath($path);        return $this->getDefault($path, $default);    }    /**     * Returns canonical path     *     * @param string $path     * @return string     */    public function getCanonicalPath($path) {        return preg_replace('#^Servers/([\d]+)/#', 'Servers/1/', $path);    }    /**     * Returns config database entry for $path ($cfg_db in config_info.php)     *     * @param  string $path     * @param  mixed  $default     * @return mixed     */    public function getDbEntry($path, $default = null)    {        return PMA_array_read($path, $this->cfgDb, $default);    }    /**     * Returns server count     *     * @return int     */    public function getServerCount()    {        return isset($_SESSION[$this->id]['Servers'])            ? count($_SESSION[$this->id]['Servers'])            : 0;    }    /**     * Returns server list     *     * @return array|null     */    public function getServers()    {      return isset($_SESSION[$this->id]['Servers'])          ? $_SESSION[$this->id]['Servers']          : null;    }    /**     * Returns DSN of given server     *     * @param integer $server     * @return string     */    function getServerDSN($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return '';        }        $path = 'Servers/' . $server;        $dsn = $this->getValue("$path/extension") . '://';        if ($this->getValue("$path/auth_type") == 'config') {            $dsn .= $this->getValue("$path/user");            if (!$this->getValue("$path/nopassword")) {                $dsn .= ':***';            }            $dsn .= '@';        }        if ($this->getValue("$path/connect_type") == 'tcp') {            $dsn .= $this->getValue("$path/host");            $port = $this->getValue("$path/port");            if ($port) {                $dsn .= ':' . $port;            }        } else {            $dsn .= $this->getValue("$path/socket");        }        return $dsn;    }    /**     * Returns server name     *     * @param int $id     * @return string     */    public function getServerName($id)    {        if (!isset($_SESSION[$this->id]['Servers'][$id])) {            return '';        }        $verbose = $this->get("Servers/$id/verbose");        if (!empty($verbose)) {            return $verbose;        }        $host = $this->get("Servers/$id/host");        return empty($host) ? 'localhost' : $host;    }    /**     * Removes server     *     * @param int $server     */    public function removeServer($server)    {        if (!isset($_SESSION[$this->id]['Servers'][$server])) {            return;        }        $last_server = $this->getServerCount();        for ($i = $server; $i < $last_server; $i++) {            $_SESSION[$this->id]['Servers'][$i] = $_SESSION[$this->id]['Servers'][$i+1];        }        unset($_SESSION[$this->id]['Servers'][$last_server]);        if (isset($_SESSION[$this->id]['ServerDefault'])            && $_SESSION[$this->id]['ServerDefault'] >= 0) {            unset($_SESSION[$this->id]['ServerDefault']);        }    }    /**     * Returns config file path, relative to phpMyAdmin's root path     *     * @return string     */    public function getFilePath()    {        // Load paths        if (!defined('SETUP_CONFIG_FILE')) {            include_once './libraries/vendor_config.php';        }        return SETUP_CONFIG_FILE;    }    /**     * Returns configuration array (full, multidimensional format)     *     * @return array     */    public function getConfig()    {        $c = $_SESSION[$this->id];        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            PMA_array_write($map_to, $c, PMA_array_read($map_from, $c));            PMA_array_remove($map_from, $c);        }        return $c;    }    /**     * Returns configuration array (flat format)     *     * @return array     */    public function getConfigArray()    {        $this->_flattenArrayResult = array();        array_walk($_SESSION[$this->id], array($this, '_flattenArray'), '');        $c = $this->_flattenArrayResult;        $this->_flattenArrayResult = null;        $persistKeys = array_diff(array_keys($this->persistKeys), array_keys($c));        foreach ($persistKeys as $k) {            $c[$k] = $this->getDefault($k);        }        foreach ($this->cfgUpdateReadMapping as $map_to => $map_from) {            if (!isset($c[$map_from])) {                continue;            }            $c[$map_to] = $c[$map_from];            unset($c[$map_from]);        }        return $c;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/triggers.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_triggers.lib.php';/** * Do the magic */$_PMA_RTE = 'TRI';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used for cleaning up phpMyAdmin tables * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Cleanu column related relation stuff * * @param string $db * @param string $table * @param string $column */function PMA_relationsCleanupColumn($db, $table, $column){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND column_name = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND display_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND master_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\''                    . ' AND foreign_field = \'' . PMA_sqlAddSlashes($column) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup table related relation stuff * * @param string $db * @param string $table */function PMA_relationsCleanupTable($db, $table){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND master_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\''                    . ' AND foreign_table = \'' . PMA_sqlAddSlashes($table) . '\'';        PMA_query_as_controluser($remove_query);    }}/** * Cleanup database related relation stuff * * @param string $db */function PMA_relationsCleanupDatabase($db){    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['commwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['bookmarkwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['bookmark'])                    . ' WHERE dbase  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['displaywork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['pdfwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['pdf_pages'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }    if ($cfgRelation['designerwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['designer_coords'])                    . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);     }    if ($cfgRelation['relwork']) {        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE master_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);        $remove_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['relation'])                    . ' WHERE foreign_db  = \'' . PMA_sqlAddSlashes($db) . '\'';        PMA_query_as_controluser($remove_query);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Transformation */function PMA_transformation_text_plain__link_info(){    return array(        'info' => __('Displays a link; the column contains the filename. The first option is a URL prefix like "http://www.example.com/". The second option is a title for the link.'),        );}/** * */function PMA_transformation_text_plain__link($buffer, $options = array(), $meta = ''){    include_once './libraries/transformations/global.inc.php';//    $transform_options = array ('string' => '<a href="' . (isset($options[0]) ? $options[0] : '') . '%1$s" title="' . (isset($options[1]) ? $options[1] : '%1$s') . '">' . (isset($options[1]) ? $options[1] : '%1$s') . '</a>');    $transform_options = array ('string' => '<a href="' . PMA_linkURL((isset($options[0]) ? $options[0] : '') . $buffer) . '" title="' . (isset($options[1]) ? $options[1] : '') . '">' . (isset($options[1]) ? $options[1] : $buffer) . '</a>');    $buffer = PMA_transformation_global_html_replace($buffer, $transform_options);    return $buffer;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * Load BDB class. */require_once './libraries/engines/bdb.lib.php';/** * This is same as BDB. * @package PhpMyAdmin-Engines */class PMA_StorageEngine_berkeleydb extends PMA_StorageEngine_bdb{}?>
<?php/** * Library that provides common functions that are used to help integrating Swekey Authentication in a PHP web site * Version 1.0 * * History: * 1.2 Use curl (widely installed) to query the server *     Fixed a possible tempfile race attack *     Random token cache can now be disabled * 1.1 Added Swekey_HttpGet function that support faulty servers *     Support for custom servers * 1.0 First release * * @package Swekey *//** * Errors codes */define ("SWEKEY_ERR_INVALID_DEV_STATUS", 901);   // The satus of the device is not SWEKEY_STATUS_OKdefine ("SWEKEY_ERR_INTERNAL", 902);             // Should never occurddefine ("SWEKEY_ERR_OUTDATED_RND_TOKEN", 910);   // You random token is too olddefine ("SWEKEY_ERR_INVALID_OTP", 911);          // The otp was not correct/** * Those errors are considered as an attack and your site will be blacklisted during one minute * if you receive one of those errors */define ("SWEKEY_ERR_BADLY_ENCODED_REQUEST", 920);define ("SWEKEY_ERR_INVALID_RND_TOKEN", 921);define ("SWEKEY_ERR_DEV_NOT_FOUND", 922);/** * Default values for configuration. */define ('SWEKEY_DEFAULT_CHECK_SERVER', 'https://auth-check.musbe.net');define ('SWEKEY_DEFAULT_RND_SERVER', 'https://auth-rnd-gen.musbe.net');define ('SWEKEY_DEFAULT_STATUS_SERVER', 'https://auth-status.musbe.net');/** * The last error of an operation is alway put in this global var */global $gSwekeyLastError;$gSwekeyLastError = 0;global $gSwekeyLastResult;$gSwekeyLastResult = "<not set>";/** * Servers addresses * Use the  Swekey_SetXxxServer($server) functions to set them */global $gSwekeyCheckServer;if (! isset($gSwekeyCheckServer))    $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;global $gSwekeyRndTokenServer;if (! isset($gSwekeyRndTokenServer))    $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;global $gSwekeyStatusServer;if (! isset($gSwekeyStatusServer))    $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;global $gSwekeyCA;global $gSwekeyTokenCacheEnabled;if (! isset($gSwekeyTokenCacheEnabled))    $gSwekeyTokenCacheEnabled = true;/** *  Change the address of the Check server. *  If $server is empty the default value 'http://auth-check.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetCheckServer($server){    global $gSwekeyCheckServer;    if (empty($server))        $gSwekeyCheckServer = SWEKEY_DEFAULT_CHECK_SERVER;    else        $gSwekeyCheckServer = $server;}/** *  Change the address of the Random Token Generator server. *  If $server is empty the default value 'http://auth-rnd-gen.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetRndTokenServer($server){    global $gSwekeyRndTokenServer;    if (empty($server))        $gSwekeyRndTokenServer = SWEKEY_DEFAULT_RND_SERVER;    else        $gSwekeyRndTokenServer = $server;}/** *  Change the address of the Satus server. *  If $server is empty the default value 'http://auth-status.musbe.net' will be used * *  @param  server              The protocol and hostname to use *  @access public */function Swekey_SetStatusServer($server){    global $gSwekeyStatusServer;    if (empty($server))        $gSwekeyStatusServer = SWEKEY_DEFAULT_STATUS_SERVER;    else        $gSwekeyStatusServer = $server;}/** *  Change the certificat file in case of the the severs use https instead of http * *  @param  cafile              The path of the crt file to use *  @access public */function Swekey_SetCAFile($cafile){    global $gSwekeyCA;       $gSwekeyCA = $cafile;}/** *  Enable or disable the random token caching *  Because everybody has full access to the cache file, it can be a DOS vulnerability *  So disable it if you are running in a non secure enviromnement * *  @param  $enable *  @access public */function Swekey_EnableTokenCache($enable){    global $gSwekeyTokenCacheEnabled;    $gSwekeyTokenCacheEnabled = ! empty($enable);}/** *  Return the last error. * *  @return                     The Last Error *  @access public */function Swekey_GetLastError(){    global $gSwekeyLastError;    return $gSwekeyLastError;}/** *  Return the last result. * *  @return                     The Last Error *  @access public */function Swekey_GetLastResult(){    global $gSwekeyLastResult;    return $gSwekeyLastResult;}/** *  Send a synchronous request to the  server. *  This function manages timeout then will not block if one of the server is down * *  @param  url                 The url to get *  @param  response_code       The response code *  @return                     The body of the response or "" in case of error *  @access private */function Swekey_HttpGet($url, &$response_code){    global $gSwekeyLastError;    $gSwekeyLastError = 0;    global $gSwekeyLastResult;    $gSwekeyLastResult = "<not set>";     // use curl if available    if (function_exists('curl_init')) {        $sess = curl_init($url);        if (substr($url, 0, 8) == "https://") {            global $gSwekeyCA;            if (! empty($gSwekeyCA)) {                if (file_exists($gSwekeyCA)) {                    if (! curl_setopt($sess, CURLOPT_CAINFO, $gSwekeyCA)) {                        error_log("SWEKEY_ERROR:Could not set CA file : ".curl_error($sess));                    } else {                        $caFileOk = true;                    }                } else {                    error_log("SWEKEY_ERROR:Could not find CA file $gSwekeyCA getting $url");                }            }            curl_setopt($sess, CURLOPT_SSL_VERIFYHOST, '2');            curl_setopt($sess, CURLOPT_SSL_VERIFYPEER, '2');            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '20');            curl_setopt($sess, CURLOPT_TIMEOUT, '20');        } else {            curl_setopt($sess, CURLOPT_CONNECTTIMEOUT, '3');            curl_setopt($sess, CURLOPT_TIMEOUT, '5');        }        curl_setopt($sess, CURLOPT_RETURNTRANSFER, '1');        $res=curl_exec($sess);        $response_code = curl_getinfo($sess, CURLINFO_HTTP_CODE);        $curlerr = curl_error($sess);        curl_close($sess);        if ($response_code == 200) {            $gSwekeyLastResult = $res;            return $res;        }        if (! empty($response_code)) {            $gSwekeyLastError = $response_code;            error_log("SWEKEY_ERROR:Error $gSwekeyLastError ($curlerr) getting $url");            return "";        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error $curlerr getting $url");        return "";    }    // use pecl_http if available    if (class_exists('HttpRequest')) {        // retry if one of the server is down        for ($num=1; $num <= 3; $num++ ) {            $r = new HttpRequest($url);            $options = array('timeout' => '3');            if (substr($url, 0, 6) == "https:") {                $sslOptions = array();                $sslOptions['verifypeer'] = true;                $sslOptions['verifyhost'] = true;                $capath = __FILE__;                $name = strrchr($capath, '/');                // windows                if (empty($name)) {                    $name = strrchr($capath, '\\');                }                $capath = substr($capath, 0, strlen($capath) - strlen($name) + 1).'musbe-ca.crt';                if (! empty($gSwekeyCA)) {                    $sslOptions['cainfo'] = $gSwekeyCA;                }                $options['ssl'] = $sslOptions;            }            $r->setOptions($options); //           try            {               $reply = $r->send();               $res = $reply->getBody();               $info = $r->getResponseInfo();               $response_code = $info['response_code'];               if ($response_code != 200)               {                    $gSwekeyLastError = $response_code;                    error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);                    return "";               }               $gSwekeyLastResult = $res;               return $res;            } //           catch (HttpException $e) //           { //               error_log("SWEKEY_WARNING:HttpException ".$e." getting ".$url); //           }        }        $response_code = 408; // Request Timeout        $gSwekeyLastError = $response_code;        error_log("SWEKEY_ERROR:Error ".$gSwekeyLastError." getting ".$url);        return "";    }       global $http_response_header;    $res = @file_get_contents($url);    $response_code = substr($http_response_header[0], 9, 3); //HTTP/1.0    if ($response_code == 200) {       $gSwekeyLastResult = $res;       return $res;    }    $gSwekeyLastError = $response_code;    error_log("SWEKEY_ERROR:Error ".$response_code." getting ".$url);    return "";}/** *  Get a Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  You should better use Swekey_GetFastRndToken() for performance *  @access public */function Swekey_GetRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/FULL-RND-TOKEN', $response_code);}/** *  Get a Half Random Token from a Token Server *  The RT is a 64 vhars hexadecimal value *  Use this value if you want to make your own Swekey_GetFastRndToken() *  @access public */function Swekey_GetHalfRndToken(){    global $gSwekeyRndTokenServer;    return Swekey_HttpGet($gSwekeyRndTokenServer.'/HALF-RND-TOKEN', $response_code);}/** *  Get a Half Random Token *  The RT is a 64 vhars hexadecimal value *  This function get a new random token and reuse it. *  Token are refetched from the server only once every 30 seconds. *  You should always use this function to get half random token. *  @access public */function Swekey_GetFastHalfRndToken(){    global $gSwekeyTokenCacheEnabled;    $res = "";    $cachefile = "";    // We check if we have a valid RT is the session    if (isset($_SESSION['rnd-token-date'])) {        if (time() - $_SESSION['rnd-token-date'] < 30) {             $res = $_SESSION['rnd-token'];        }    }    // If not we try to get it from a temp file (PHP >= 5.2.1 only)    if (strlen($res) != 32 && $gSwekeyTokenCacheEnabled) {        if (function_exists('sys_get_temp_dir')) {            $tempdir = sys_get_temp_dir();            $cachefile = $tempdir."/swekey-rnd-token-".get_current_user();            $modif = filemtime($cachefile);            if ($modif != false) {                if (time() - $modif < 30) {                    $res = @file_get_contents($cachefile);                    if (strlen($res) != 32) {                         $res = "";                    } else {                         $_SESSION['rnd-token'] = $res;                         $_SESSION['rnd-token-date'] = $modif;                    }                }            }        }    }    // If we don't have a valid RT here we have to get it from the server    if (strlen($res) != 32) {        $res = substr(Swekey_GetHalfRndToken(), 0, 32);        $_SESSION['rnd-token'] = $res;        $_SESSION['rnd-token-date'] = time();        if (! empty($cachefile)) {            // we unlink the file so no possible tempfile race attack            unlink($cachefile);            $file = fopen($cachefile, "x");            if ($file != false) {                @fwrite($file, $res);                @fclose($file);            }        }    }   return $res."00000000000000000000000000000000";}/** *  Get a Random Token *  The RT is a 64 vhars hexadecimal value *  This function generates a unique random token for each call but call the *  server only once every 30 seconds. *  You should always use this function to get random token. *  @access public */function Swekey_GetFastRndToken(){    $res = Swekey_GetFastHalfRndToken();    if (strlen($res) == 64)        return substr($res, 0, 32).strtoupper(md5("Musbe Authentication Key" + mt_rand() + date(DATE_ATOM)));    return "";}/** *  Checks that an OTP generated by a Swekey is valid * *  @param  id                  The id of the swekey *  @param rt                   The random token used to generate the otp *  @param otp                  The otp generated by the swekey *  @return                     true or false *  @access public */function Swekey_CheckOtp($id, $rt, $otp){    global $gSwekeyCheckServer;    $res = Swekey_HttpGet($gSwekeyCheckServer.'/CHECK-OTP/'.$id.'/'.$rt.'/'.$otp, $response_code);    return $response_code == 200 && $res == "OK";}/** * Values that are associated with a key. * The following values can be returned by the Swekey_GetStatus() function */define ("SWEKEY_STATUS_OK", 0);define ("SWEKEY_STATUS_NOT_FOUND", 1);  // The key does not exist in the dbdefine ("SWEKEY_STATUS_INACTIVE", 2);   // The key has never been activateddefine ("SWEKEY_STATUS_LOST", 3);       // The user has lost his keydefine ("SWEKEY_STATUS_STOLEN", 4);       // The key was stolendefine ("SWEKEY_STATUS_FEE_DUE", 5);       // The annual fee was not paiddefine ("SWEKEY_STATUS_OBSOLETE", 6);   // The hardware is no longer supporteddefine ("SWEKEY_STATUS_UNKOWN", 201);   // We could not connect to the authentication server/** * Values that are associated with a key. * The Javascript Api can also return the following values */define ("SWEKEY_STATUS_REPLACED", 100);     // This key has been replaced by a backup keydefine ("SWEKEY_STATUS_BACKUP_KEY", 101); // This key is a backup key that is not activated yetdefine ("SWEKEY_STATUS_NOTPLUGGED", 200); // This key is not plugged in the computer/** *  Return the text corresponding to the integer status of a key * *  @param  status              The status *  @return                     The text corresponding to the status *  @access public */function Swekey_GetStatusStr($status){    switch($status)    {       case SWEKEY_STATUS_OK            : return 'OK';       case SWEKEY_STATUS_NOT_FOUND        : return 'Key does not exist in the db';       case SWEKEY_STATUS_INACTIVE        : return 'Key not activated';       case SWEKEY_STATUS_LOST            : return 'Key was lost';       case SWEKEY_STATUS_STOLEN        : return 'Key was stolen';       case SWEKEY_STATUS_FEE_DUE        : return 'The annual fee was not paid';       case SWEKEY_STATUS_OBSOLETE        : return 'Key no longer supported';       case SWEKEY_STATUS_REPLACED        : return 'This key has been replaced by a backup key';       case SWEKEY_STATUS_BACKUP_KEY    : return 'This key is a backup key that is not activated yet';       case SWEKEY_STATUS_NOTPLUGGED    : return 'This key is not plugged in the computer';       case SWEKEY_STATUS_UNKOWN        : return 'Unknow Status, could not connect to the authentication server';    }    return 'unknown status '.$status;}/** *  If your web site requires a key to login you should check that the key *  is still valid (has not been lost or stolen) before requiring it. *  A key can be authenticated only if its status is SWEKEY_STATUS_OK *  @param  id                  The id of the swekey *  @return                     The status of the swekey *  @access public */function Swekey_GetStatus($id){    global $gSwekeyStatusServer;    $res = Swekey_HttpGet($gSwekeyStatusServer.'/GET-STATUS/'.$id, $response_code);    if ($response_code == 200)        return intval($res);    return SWEKEY_STATUS_UNKOWN;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays index edit/creation form and handles it * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/Index.class.php';require_once './libraries/tbl_common.php';// Get fields and stores their name/type$fields = array();foreach (PMA_DBI_get_columns_full($db, $table) as $row) {    if (preg_match('@^(set|enum)\((.+)\)$@i', $row['Type'], $tmp)) {        $tmp[2]         = substr(preg_replace('@([^,])\'\'@', '\\1\\\'',            ',' . $tmp[2]), 1);        $fields[$row['Field']] = $tmp[1] . '(' . str_replace(',', ', ', $tmp[2]) . ')';    } else {        $fields[$row['Field']] = $row['Type'];    }} // end while// Prepares the form valuesif (isset($_REQUEST['index'])) {    if (is_array($_REQUEST['index'])) {        // coming already from form        $index = new PMA_Index($_REQUEST['index']);    } else {        $index = PMA_Index::singleton($db, $table, $_REQUEST['index']);    }} else {    $index = new PMA_Index;}/** * Process the data from the edit/create index form, * run the query to build the new index * and moves back to "tbl_sql.php" */if (isset($_REQUEST['do_save_data'])) {    $error = false;    // $sql_query is the one displayed in the query box    $sql_query = 'ALTER TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table);    // Drops the old index    if (! empty($_REQUEST['old_index'])) {        if ($_REQUEST['old_index'] == 'PRIMARY') {            $sql_query .= ' DROP PRIMARY KEY,';        } else {            $sql_query .= ' DROP INDEX ' . PMA_backquote($_REQUEST['old_index']) . ',';        }    } // end if    // Builds the new one    switch ($index->getType()) {        case 'PRIMARY':            if ($index->getName() == '') {                $index->setName('PRIMARY');            } elseif ($index->getName() != 'PRIMARY') {                $error = PMA_Message::error(__('The name of the primary key must be "PRIMARY"!'));            }            $sql_query .= ' ADD PRIMARY KEY';            break;        case 'FULLTEXT':        case 'UNIQUE':        case 'INDEX':        case 'SPATIAL':            if ($index->getName() == 'PRIMARY') {                $error = PMA_Message::error(__('Can\'t rename index to PRIMARY!'));            }            $sql_query .= ' ADD ' . $index->getType() . ' '                . ($index->getName() ? PMA_backquote($index->getName()) : '');            break;    } // end switch    $index_fields = array();    foreach ($index->getColumns() as $key => $column) {        $index_fields[$key] = PMA_backquote($column->getName());        if ($column->getSubPart()) {            $index_fields[$key] .= '(' . $column->getSubPart() . ')';        }    } // end while    if (empty($index_fields)) {        $error = PMA_Message::error(__('No index parts defined!'));    } else {        $sql_query .= ' (' . implode(', ', $index_fields) . ')';    }    if (! $error) {        PMA_DBI_query($sql_query);        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['index_table'] = PMA_Index::getView($table, $db);            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';        exit;    } else {        if ( $GLOBALS['is_ajax_request'] == true) {            $extra_data['error'] = $error;            PMA_ajaxResponse($error, false);        }        $error->display();    }} // end builds the new index/** * Display the form to edit/create an index */// Displays headers (if needed)$GLOBALS['js_include'][] = 'indexes.js';require_once './libraries/tbl_info.inc.php';if ($GLOBALS['is_ajax_request'] != true) {    include_once './libraries/tbl_links.inc.php';}if (isset($_REQUEST['index']) && is_array($_REQUEST['index'])) {    // coming already from form    $add_fields        = count($_REQUEST['index']['columns']['names']) - $index->getColumnCount();    if (isset($_REQUEST['add_fields'])) {        $add_fields += $_REQUEST['added_fields'];    }} elseif (isset($_REQUEST['create_index'])) {    $add_fields = $_REQUEST['added_fields'];} else {    $add_fields = 1;}// end preparing form values?><form action="./tbl_indexes.php" method="post" name="index_frm" id="index_frm" <?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>    onsubmit="if (typeof(this.elements['index[Key_name]'].disabled) != 'undefined') {        this.elements['index[Key_name]'].disabled = false}"><?php$form_params = array(    'db'    => $db,    'table' => $table,);if (isset($_REQUEST['create_index'])) {    $form_params['create_index'] = 1;} elseif (isset($_REQUEST['old_index'])) {    $form_params['old_index'] = $_REQUEST['old_index'];} elseif (isset($_REQUEST['index'])) {    $form_params['old_index'] = $_REQUEST['index'];}echo PMA_generate_common_hidden_inputs($form_params);?><fieldset id="index_edit_fields"><?phpif ($GLOBALS['is_ajax_request'] != true) {?>    <legend><?php    if (isset($_REQUEST['create_index'])) {        echo __('Add index');    } else {        echo __('Edit index');    }?>    </legend><?php}?><div class='index_info'>    <div>        <div class="label">            <strong>                <label for="input_index_name">                    <?php echo __('Index name:'); ?>                    <?php echo PMA_showhint(PMA_Message::notice(__('("PRIMARY" <b>must</b> be the name of and <b>only of</b> a primary key!)'))); ?>                </label>            </strong>        </div>        <input type="text" name="index[Key_name]" id="input_index_name" size="25"            value="<?php echo htmlspecialchars($index->getName()); ?>" onfocus="this.select()" />    </div>    <div>        <div class="label">            <strong>                <label for="select_index_type">                    <?php echo __('Index type:'); ?>                    <?php echo PMA_showMySQLDocu('SQL-Syntax', 'ALTER_TABLE'); ?>                </label>            </strong>        </div>        <select name="index[Index_type]" id="select_index_type" >            <?php echo $index->generateIndexSelector(); ?>        </select>    </div>    <div class="clearfloat"></div></div><table id="index_columns"><thead><tr><th><?php echo __('Column'); ?></th>    <th><?php echo __('Size'); ?></th></tr></thead><tbody><?php$odd_row = true;$spatial_types = array(    'geometry', 'point', 'linestring', 'polygon', 'multipoint',    'multilinestring', 'multipolygon', 'geomtrycollection');foreach ($index->getColumns() as $column) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        if (($index->getType() != 'FULLTEXT' || preg_match('/(char|text)/i', $field_type))            && ($index->getType() != 'SPATIAL' || in_array($field_type, $spatial_types))        ) {            echo '<option value="' . htmlspecialchars($field_name) . '"'                 . (($field_name == $column->getName()) ? ' selected="selected"' : '') . '>'                 . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'                 . '</option>' . "\n";        }    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]"            value="<?php if ($index->getType() != 'SPATIAL') { echo $column->getSubPart(); } ?>" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']for ($i = 0; $i < $add_fields; $i++) {    ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; ?> noclick">    <td><select name="index[columns][names][]">            <option value="">-- <?php echo __('Ignore'); ?> --</option>    <?php    foreach ($fields as $field_name => $field_type) {        echo '<option value="' . htmlspecialchars($field_name) . '">'             . htmlspecialchars($field_name) . ' [' . htmlspecialchars($field_type) . ']'             . '</option>' . "\n";    } // end foreach $fields    ?>        </select>    </td>    <td><input type="text" size="5" onfocus="this.select()"            name="index[columns][sub_parts][]" value="" />    </td></tr>    <?php    $odd_row = !$odd_row;} // end foreach $edited_index_info['Sequences']?></tbody></table></fieldset><fieldset class="tblFooters"><?php    if ($GLOBALS['is_ajax_request'] != true) {?>    <input type="submit" name="do_save_data" value="<?php echo __('Save'); ?>" />    <span id="addMoreColumns"><?phpecho __('Or') . ' ';printf(    __('Add to index &nbsp;%s&nbsp;column(s)') . "\n",    '<input type="text" name="added_fields" size="2" value="1" />');echo '<input type="submit" name="add_fields" value="' . __('Go') . '" />' . "\n";?>    </span><?php    } else {        $btn_value = sprintf(__('Add %d column(s) to index'), 1);        echo '<div class="slider"></div>';        echo '<div class="add_fields">';        echo '<input type="submit" value="' . $btn_value . '" />';        echo '</div>';    }?></fieldset></form><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */# GNU iconv code set to IBM AIX libiconv code set table# Keys of this table should be in lowercase, and searches should be performed using lowercase!$gnu_iconv_to_aix_iconv_codepage_map = array (    // "iso-8859-[1-9]" --> "ISO8859-[1-9]" according to http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/basetrf2/setlocale.htm    'iso-8859-1' => 'ISO8859-1',    'iso-8859-2' => 'ISO8859-2',    'iso-8859-3' => 'ISO8859-3',    'iso-8859-4' => 'ISO8859-4',    'iso-8859-5' => 'ISO8859-5',    'iso-8859-6' => 'ISO8859-6',    'iso-8859-7' => 'ISO8859-7',    'iso-8859-8' => 'ISO8859-8',    'iso-8859-9' => 'ISO8859-9',    // "big5" --> "IBM-eucTW" according to http://kadesh.cepba.upc.es/mancpp/classref/ref/ITranscoder_DSC.htm    'big5' => 'IBM-eucTW',    // Other mappings corresponding to the phpMyAdmin dropdown box when using the charset conversion feature    'euc-jp' => 'IBM-eucJP',    'koi8-r' => 'IBM-eucKR',    'ks_c_5601-1987' => 'KSC5601.1987-0',    'tis-620' => 'TIS-620',    'utf-8' => 'UTF-8');/** * Wrapper around IBM AIX iconv(), whose character set naming differs * from the GNU version of iconv(). * * @param string   input character set * @param string   output character set * @param string   the string to convert * * @return  mixed    converted string or false on failure * * @access  public * */function PMA_aix_iconv_wrapper($in_charset, $out_charset, $str){    global $gnu_iconv_to_aix_iconv_codepage_map;    // Check for transliteration argument at the end of output character set name    $translit_search = strpos(strtolower($out_charset), '//translit');    $using_translit = (!($translit_search === false));    // Extract "plain" output character set name (without any transliteration argument)    $out_charset_plain = ($using_translit ? substr($out_charset, 0, $translit_search) : $out_charset);    // Transform name of input character set (if found)    if (array_key_exists(strtolower($in_charset), $gnu_iconv_to_aix_iconv_codepage_map)) {        $in_charset = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($in_charset)];    }    // Transform name of "plain" output character set (if found)    if (array_key_exists(strtolower($out_charset_plain), $gnu_iconv_to_aix_iconv_codepage_map)) {        $out_charset_plain = $gnu_iconv_to_aix_iconv_codepage_map[strtolower($out_charset_plain)];    }    // Add transliteration argument again (exactly as specified by user) if used    // Build the output character set name that we will use    $out_charset = ($using_translit ? $out_charset_plain . substr($out_charset, $translit_search) : $out_charset_plain);    // NOTE: Transliteration not supported; we will use the "plain" output character set name    $out_charset = $out_charset_plain;    // Call iconv() with the possibly modified parameters    $result = iconv($in_charset, $out_charset, $str);    return $result;} //  end of the "PMA_aix_iconv_wrapper()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();// handle form processing$form_param = filter_input(INPUT_GET, 'form');if (! isset($forms[$form_param])) {    $forms_keys = array_keys($forms);    $form_param = array_shift($forms_keys);}$form_display = new FormDisplay();foreach ($forms[$form_param] as $form_name => $form) {    // skip Developer form if no setting is available    if ($form_name == 'Developer' && !$GLOBALS['cfg']['UserprefsDeveloperTab']) {        continue;    }    $form_display->registerForm($form_name, $form, 1);}if (isset($_POST['revert'])) {    // revert erroneous fields to their default values    $form_display->fixErrors();    // redirect    $url_params = array('form' => $form_param);    PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'prefs_forms.php'            . PMA_generate_common_url($url_params, '&'));    exit;}$error = null;if ($form_display->process(false) && !$form_display->hasErrors()) {    // save settings    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(ConfigFile::getInstance()->getConfigArray());    if ($result === true) {        // reload config        $GLOBALS['PMA_Config']->loadUserPreferences();        $hash = ltrim(filter_input(INPUT_POST, 'tab_hash'), '#');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_forms.php', array(            'form' => $form_param), $hash);        exit;    } else {        $error = $result;    }}// display forms$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    $error->display();}if ($form_display->hasErrors()) {    // form has errors    ?>    <div class="error config-form">        <b><?php echo __('Cannot save settings, submitted form contains errors') ?></b>        <?php $form_display->displayErrors(); ?>    </div>    <?php}$form_display->display(true, true);/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of the chart * * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';$GLOBALS['js_include'][] = 'tbl_chart.js';$GLOBALS['js_include'][] = 'highcharts/highcharts.js';/* Files required for chart exporting */$GLOBALS['js_include'][] = 'highcharts/exporting.js';/* < IE 9 doesn't support canvas natively */if (PMA_USR_BROWSER_AGENT == 'IE' && PMA_USR_BROWSER_VER < 9) {    $GLOBALS['js_include'][] = 'canvg/flashcanvas.js';}$GLOBALS['js_include'][] = 'canvg/canvg.js';/** * Runs common work */if (strlen($GLOBALS['table'])) {    $url_params['goto'] = $cfg['DefaultTabTable'];    $url_params['back'] = 'tbl_sql.php';    include './libraries/tbl_common.php';    include './libraries/tbl_info.inc.php';    include './libraries/tbl_links.inc.php';} elseif (strlen($GLOBALS['db'])) {    $url_params['goto'] = $cfg['DefaultTabDatabase'];    $url_params['back'] = 'sql.php';    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';} else {    $url_params['goto'] = $cfg['DefaultTabServer'];    $url_params['back'] = 'sql.php';    include './libraries/server_common.inc.php';    include './libraries/server_links.inc.php';}/* * Execute the query and return the result */$data = array();$result = PMA_DBI_try_query($sql_query);while ($row = PMA_DBI_fetch_assoc($result)) {    $data[] = $row;}// get settings if any posted$chartSettings = array();if (PMA_isValid($_REQUEST['chartSettings'], 'array')) {    $chartSettings = $_REQUEST['chartSettings'];}$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */// pma_token/url_query needed for chart export?><script type="text/javascript">pma_token = '<?php echo $_SESSION[' PMA_token ']; ?>';url_query = '<?php echo $url_query;?>';</script><!-- Display Chart options --><div id="div_view_options"><form method="post" action="tbl_chart.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend><?php echo __('Display chart'); ?></legend>    <div style="float:left;">        <input type="radio" name="chartType" value="bar" id="radio_bar" />        <label for ="radio_bar"><?php echo _pgettext('Chart type', 'Bar'); ?></label>        <input type="radio" name="chartType" value="column" id="radio_column" />        <label for ="radio_column"><?php echo _pgettext('Chart type', 'Column'); ?></label>        <input type="radio" name="chartType" value="line" id="radio_line" checked="checked" />        <label for ="radio_line"><?php echo _pgettext('Chart type', 'Line'); ?></label>        <input type="radio" name="chartType" value="spline" id="radio_spline" />        <label for ="radio_spline"><?php echo _pgettext('Chart type', 'Spline'); ?></label>        <input type="radio" name="chartType" value="pie" id="radio_pie" />        <label for ="radio_pie"><?php echo _pgettext('Chart type', 'Pie'); ?></label>        <span class="barStacked" style="display:none;">        <input type="checkbox" name="barStacked" value="1" id="checkbox_barStacked" />        <label for ="checkbox_barStacked"><?php echo __('Stacked'); ?></label>        </span>        <br>        <input type="text" name="chartTitle" value="<?php echo __('Chart title'); ?>">        <?php        $keys = array_keys($data[0]);        $yaxis = -1;        if (count($keys) > 1) { ?>            <br />            <label for="select_chartXAxis"><?php echo __('X-Axis:'); ?></label>            <select name="chartXAxis" id="select_chartXAxis">            <?php                        foreach ($keys as $idx => $key) {                if ($yaxis == -1 && (($idx == count($data[0]) - 1) || preg_match("/(date|time)/i", $key))) {                    echo '<option value="' . htmlspecialchars($idx) . '" selected>' . htmlspecialchars($key) . '</option>';                    $yaxis=$idx;                } else {                    echo '<option value="' . htmlspecialchars($idx) . '">' . htmlspecialchars($key) . '</option>';                }            }                        ?>        </select><br />        <label for="select_chartSeries"><?php echo __('Series:'); ?></label>        <select name="chartSeries" id="select_chartSeries">            <option value="columns"><?php echo __('The remaining columns'); ?></option>            <?php            foreach ($keys as $idx => $key) {                echo '<option>' . htmlspecialchars($key) . '</option>';            }        ?>        </select>        <?php        }        ?>            </div>    <div style="float:left; padding-left:40px;">        <label for="xaxis_label"><?php echo __('X-Axis label:'); ?></label>        <input style="margin-top:0;" type="text" name="xaxis_label" id="xaxis_label"            value="<?php echo ($yaxis == -1) ? __('X Values') : htmlspecialchars($keys[$yaxis]); ?>" /><br />        <label for="yaxis_label"><?php echo __('Y-Axis label:'); ?></label>        <input type="text" name="yaxis_label" id="yaxis_label" value="<?php echo __('Y Values'); ?>" />    </div>    <p style="clear:both;">&nbsp;</p>    <div id="resizer" style="width:600px; height:400px;">        <div id="inner-resizer">            <div id="querychart" style="display:none;"><?php$sanitized_data = array();foreach ($data as $data_row_number => $data_row) {    $tmp_row = array();    foreach ($data_row as $data_column => $data_value) {        $tmp_row[htmlspecialchars($data_column)] = htmlspecialchars($data_value);    }    $sanitized_data[] = $tmp_row;} echo json_encode($sanitized_data); unset($sanitized_data);?>            </div>        </div>    </div></fieldset></form></div><?php/** * Displays the footer */require_once './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * URL/hidden inputs generating. * * @package PhpMyAdmin *//** * Generates text with hidden inputs. * * @param string $db     optional database name *                       (can also be an array of parameters) * @param string $table  optional table name * @param int    $indent indenting level * @param string $skip   do not generate a hidden field for this parameter *                       (can be an array of strings) * * @see PMA_generate_common_url() * * @return  string   string with input fields * * @global  string   the current language * @global  string   the current conversion charset * @global  string   the current connection collation * @global  string   the current server * @global  array    the configuration array * @global  boolean  whether recoding is allowed or not * * @access  public */function PMA_generate_common_hidden_inputs($db = '', $table = '', $indent = 0, $skip = array()){    if (is_array($db)) {        $params  =& $db;        $_indent = empty($table) ? $indent : $table;        $_skip   = empty($indent) ? $skip : $indent;        $indent  =& $_indent;        $skip    =& $_skip;    } else {        $params = array();        if (strlen($db)) {            $params['db'] = $db;        }        if (strlen($table)) {            $params['table'] = $table;        }    }    if (! empty($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    $params['token'] = $_SESSION[' PMA_token '];    if (! is_array($skip)) {        if (isset($params[$skip])) {            unset($params[$skip]);        }    } else {        foreach ($skip as $skipping) {            if (isset($params[$skipping])) {                unset($params[$skipping]);            }        }    }    return PMA_getHiddenFields($params);}/** * create hidden form fields from array with name => value * * <code> * $values = array( *     'aaa' => aaa, *     'bbb' => array( *          'bbb_0', *          'bbb_1', *     ), *     'ccc' => array( *          'a' => 'ccc_a', *          'b' => 'ccc_b', *     ), * ); * echo PMA_getHiddenFields($values); * * // produces: * <input type="hidden" name="aaa" Value="aaa" /> * <input type="hidden" name="bbb[0]" Value="bbb_0" /> * <input type="hidden" name="bbb[1]" Value="bbb_1" /> * <input type="hidden" name="ccc[a]" Value="ccc_a" /> * <input type="hidden" name="ccc[b]" Value="ccc_b" /> * </code> * * @param array  $values hidden values * @param string $pre    prefix * * @return string form fields of type hidden */function PMA_getHiddenFields($values, $pre = ''){    $fields = '';    foreach ($values as $name => $value) {        if (! empty($pre)) {            $name = $pre. '[' . $name . ']';        }        if (is_array($value)) {            $fields .= PMA_getHiddenFields($value, $name);        } else {            // do not generate an ending "\n" because            // PMA_generate_common_hidden_inputs() is sometimes called            // from a JS document.write()            $fields .= '<input type="hidden" name="' . htmlspecialchars($name)                . '" value="' . htmlspecialchars($value) . '" />';        }    }    return $fields;}/** * Generates text with URL parameters. * * <code> * // OLD derepecated style * // note the ? * echo 'script.php?' . PMA_generate_common_url('mysql', 'rights'); * // produces with cookies enabled: * // script.php?db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;db=mysql&amp;table=rights * * // NEW style * $params['myparam'] = 'myvalue'; * $params['db']      = 'mysql'; * $params['table']   = 'rights'; * // note the missing ? * echo 'script.php' . PMA_generate_common_url($params); * // produces with cookies enabled: * // script.php?myparam=myvalue&amp;db=mysql&amp;table=rights * // with cookies disabled: * // script.php?server=1&amp;lang=en&amp;myparam=myvalue&amp;db=mysql&amp;table=rights * * // note the missing ? * echo 'script.php' . PMA_generate_common_url(); * // produces with cookies enabled: * // script.php * // with cookies disabled: * // script.php?server=1&amp;lang=en * </code> * * @param mixed  assoc. array with url params or optional string with database name *               if first param is an array there is also an ? prefixed to the url * * @param string - if first param is array: 'html' to use htmlspecialchars() *               on the resulting URL (for a normal URL displayed in HTML) *               or something else to avoid using htmlspecialchars() (for *               a URL sent via a header); if not set,'html' is assumed *               - if first param is not array:  optional table name * * @param string - if first param is array: optional character to *               use instead of '?' *               - if first param is not array: optional character to use *               instead of '&amp;' for dividing URL parameters * * @return  string   string with URL parameters * @access  public */function PMA_generate_common_url(){    $args = func_get_args();    if (isset($args[0]) && is_array($args[0])) {        // new style        $params = $args[0];        if (isset($args[1])) {            $encode = $args[1];        } else {            $encode = 'html';        }        if (isset($args[2])) {            $questionmark = $args[2];        } else {            $questionmark = '?';        }    } else {        // old style        if (PMA_isValid($args[0])) {            $params['db'] = $args[0];        }        if (PMA_isValid($args[1])) {            $params['table'] = $args[1];        }        if (isset($args[2]) && $args[2] !== '&amp;') {            $encode = 'text';        } else {            $encode = 'html';        }        $questionmark = '';    }    $separator = PMA_get_arg_separator();    if (isset($GLOBALS['server'])        && $GLOBALS['server'] != $GLOBALS['cfg']['ServerDefault']        // avoid overwriting when creating navi panel links to servers        && ! isset($params['server'])    ) {        $params['server'] = $GLOBALS['server'];    }    if (empty($_COOKIE['pma_lang']) && ! empty($GLOBALS['lang'])) {        $params['lang'] = $GLOBALS['lang'];    }    if (empty($_COOKIE['pma_collation_connection'])        && ! empty($GLOBALS['collation_connection'])    ) {        $params['collation_connection'] = $GLOBALS['collation_connection'];    }    if (isset($_SESSION[' PMA_token '])) {        $params['token'] = $_SESSION[' PMA_token '];    }    if (empty($params)) {        return '';    }    $query = $questionmark . http_build_query($params, null, $separator);    if ($encode === 'html') {        $query = htmlspecialchars($query);    }    return $query;}/** * Returns url separator * * extracted from arg_separator.input as set in php.ini * we do not use arg_separator.output to avoid problems with &amp; and & * * @param string $encode whether to encode separator or not, * currently 'none' or 'html' * * @return  string  character used for separating url parts usally ; or & * @access  public */function PMA_get_arg_separator($encode = 'none'){    static $separator = null;    if (null === $separator) {        // use seperators defined by php, but prefer ';'        // as recommended by W3C        $php_arg_separator_input = ini_get('arg_separator.input');        if (strpos($php_arg_separator_input, ';') !== false) {            $separator = ';';        } elseif (strlen($php_arg_separator_input) > 0) {            $separator = $php_arg_separator_input{0};        } else {            $separator = '&';        }    }    switch ($encode) {    case 'html':        return htmlentities($separator);        break;    case 'text' :    case 'none' :    default :        return $separator;    }}?>
<?php/** * Handles the visualization of Data Point objects. * * @package PhpMyAdmin */require_once 'pma_svg_data_element.php';class PMA_SVG_Data_Point extends PMA_SVG_Data_Element{    /*     * X-Coordinate of the point     */    private $cx;    /*     * Y-Coordinate of the point     */    private $cy;    /*     * A private constructor; prevents direct creation of object.     */    public function __construct($cx, $cy, $label, $dataRow)    {        parent::__construct($label, $dataRow);        $this->cx = $cx;        $this->cy = $cy;    }    public function prepareRowAsSVG($options)    {         return $this->prepareSvg($options);    }    /**     * Prepares and returns the code related to a row in the query result as SVG.     *     * @param array  $options  Array containing options related to properties of the point     * @return the code related to a row in the query result.     */    protected function prepareSvg($options)    {        $point_options = array(            'name'        => $this->label . '_' .$options['id'],            'id'          => $this->label . 'id' . '_' . $options['id'],            'class'       => 'point',            'fill'        => 'white',            'stroke'      => $options['color'],            'stroke-width'=> 2,        );        $row = '<circle cx="' . $this->cx . '" cy="' . $this->cy . '" r=".1"';        foreach ($point_options as $option => $val) {            $row .= ' ' . $option . '="' . trim($val) . '"';        }        $row .= '/>';        return $row;    }    public function getCx()    {        return $this->cx;    }    public function setCx($cx)    {        $this->cx = $cx;    }    public function getCy()    {        return $this->cy;    }    public function setCy($cy)    {        $this->cy = $cy;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$table = $T;$display_field = $F;if ($cfgRelation['displaywork']) {    $disp     = PMA_getDisplayField($db, $table);    if ($disp) {        if ($display_field != $disp) {            $upd_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' SET display_field = \'' . PMA_sqlAddSlashes($display_field) . '\''                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                       . ' WHERE db_name  = \'' . PMA_sqlAddSlashes($db) . '\''                       . ' AND table_name = \'' . PMA_sqlAddSlashes($table) . '\'';        }    } elseif ($display_field != '') {        $upd_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['table_info'])                   . '(db_name, table_name, display_field) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($display_field) . '\')';    }    if (isset($upd_query)) {        $upd_rs    = PMA_query_as_controluser($upd_query);    }} // end ifheader("Content-Type: text/xml; charset=utf-8");header("Cache-Control: no-cache");die("<root act='save_pos' return=__('Modifications have been saved')></root>");?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Form edit view * * @package PhpMyAdmin-setup */if (!defined('PHPMYADMIN')) {    exit;}/** * Core libraries. */require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require_once './setup/lib/form_processing.lib.php';require './libraries/config/setup.forms.php';$formset_id = filter_input(INPUT_GET, 'formset');$mode = filter_input(INPUT_GET, 'mode');if (! isset($forms[$formset_id])) {    die(__('Incorrect formset, check $formsets array in setup/frames/form.inc.php'));}if (isset($GLOBALS['strConfigFormset_' . $formset_id])) {    echo '<h2>' . $GLOBALS['strConfigFormset_' . $formset_id] . '</h2>';}$form_display = new FormDisplay();foreach ($forms[$formset_id] as $form_name => $form) {    $form_display->registerForm($form_name, $form);}process_formset($form_display);?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         url(./themes/pmahomme/img/left_nav_bg.png) repeat-y right 0% #f3f3f3;    border-right:       1px solid #aaa;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes */.navi_dbName {    font-weight:    bold;    color:          <?php echo $GLOBALS['cfg']['NaviDatabaseNameColor']; ?>;}/******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>}div#recentTableList {    text-align: center;    margin: 20px 10px 0px 10px;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin:             5px 10px 0px 10px;}ul#databaseList {    margin: 0.8em 0px;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     0.3em;    font-style: italic;}ul#databaseList span {    padding: 5px;}ul#databaseList a {    color: #333;    background: url(./themes/pmahomme/img/database.png) no-repeat 0 5px transparent;    display: block;    text-indent: 0;    padding: 5px 5px 5px 25px;    font-style: normal;}div#navidbpageselector {    margin: 0.1em;    text-align: center;}div#navidbpageselector a,div#navidbpageselector select{    color: #333;    margin: 0.2em;}ul#databaseList ul {    margin: 0;    padding: 0;}ul#databaseList li {    list-style: none;    text-indent: 20px;    margin: 0;    padding: 0;}ul#databaseList a:hover {    background-color: #e4e4e4;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#reloadlink a img,div#leftframelinks a img.icon {    margin:        0.3em;    margin-top:    0.7em;    border:        0;}div#leftframelinks a:hover img {}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;}div#left_tableList {margin:10px 10px 0 10px;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            2px 0;    white-space:        nowrap;}#newtable {    margin-top: 15px !important;}#newtable a {    display: block;    padding: 1px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    border: 1px solid #aaa;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    border-radius: 20px;}#newtable li:hover {    background: transparent !important;}#newtable a:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}#newtable li a:hover {    text-decoration: none;}select{    -moz-border-radius:2px 2px 2px 2px;    -moz-box-shadow:0 1px 2px #DDDDDD;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(./themes/pmahomme/img/input_bg.gif);}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: #e4e4e4;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         #e4e4e4;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#reloadlink {    clear: both;    float: <?php echo $right; ?>;    display: block;    padding: 1em;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 0;    position: relative;    right: 3ex;}#fast_filter {    width: 85%;    padding: 0.1em;}#fast_filter.gray {    color: gray;}
<?php//============================================================+// File name   : htmlcolors.php// Version     : 1.0.008// Begin       : 2002-04-09// Last Update : 2010-12-16// Author      : Nicola Asuni - Tecnick.com LTD - Manor Coach House, Church Hill, Aldershot, Hants, GU12 4RQ, UK - www.tecnick.com - info@tecnick.com// License     : GNU-LGPL v3 (http://www.gnu.org/copyleft/lesser.html)// -------------------------------------------------------------------// Copyright (C) 2002-2012  Nicola Asuni - Tecnick.com LTD//// This file is part of TCPDF software library.//// TCPDF is free software: you can redistribute it and/or modify it// under the terms of the GNU Lesser General Public License as// published by the Free Software Foundation, either version 3 of the// License, or (at your option) any later version.//// TCPDF is distributed in the hope that it will be useful, but// WITHOUT ANY WARRANTY; without even the implied warranty of// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.// See the GNU Lesser General Public License for more details.//// You should have received a copy of the GNU Lesser General Public License// along with TCPDF.  If not, see <http://www.gnu.org/licenses/>.//// See LICENSE.TXT file for more information.// -------------------------------------------------------------------//// Description : Array of WEB safe colors////============================================================+/** * @file * Array of WEB safe colors * @author Nicola Asuni * @package com.tecnick.tcpdf * @since 2.9.000 (2008-03-26) *//** * Array of WEB safe colors */$webcolor = array ('aliceblue' => 'f0f8ff','antiquewhite' => 'faebd7','aqua' => '00ffff','aquamarine' => '7fffd4','azure' => 'f0ffff','beige' => 'f5f5dc','bisque' => 'ffe4c4','black' => '000000','blanchedalmond' => 'ffebcd','blue' => '0000ff','blueviolet' => '8a2be2','brown' => 'a52a2a','burlywood' => 'deb887','cadetblue' => '5f9ea0','chartreuse' => '7fff00','chocolate' => 'd2691e','coral' => 'ff7f50','cornflowerblue' => '6495ed','cornsilk' => 'fff8dc','crimson' => 'dc143c','cyan' => '00ffff','darkblue' => '00008b','darkcyan' => '008b8b','darkgoldenrod' => 'b8860b','dkgray' => 'a9a9a9','darkgray' => 'a9a9a9','darkgrey' => 'a9a9a9','darkgreen' => '006400','darkkhaki' => 'bdb76b','darkmagenta' => '8b008b','darkolivegreen' => '556b2f','darkorange' => 'ff8c00','darkorchid' => '9932cc','darkred' => '8b0000','darksalmon' => 'e9967a','darkseagreen' => '8fbc8f','darkslateblue' => '483d8b','darkslategray' => '2f4f4f','darkslategrey' => '2f4f4f','darkturquoise' => '00ced1','darkviolet' => '9400d3','deeppink' => 'ff1493','deepskyblue' => '00bfff','dimgray' => '696969','dimgrey' => '696969','dodgerblue' => '1e90ff','firebrick' => 'b22222','floralwhite' => 'fffaf0','forestgreen' => '228b22','fuchsia' => 'ff00ff','gainsboro' => 'dcdcdc','ghostwhite' => 'f8f8ff','gold' => 'ffd700','goldenrod' => 'daa520','gray' => '808080','grey' => '808080','green' => '008000','greenyellow' => 'adff2f','honeydew' => 'f0fff0','hotpink' => 'ff69b4','indianred' => 'cd5c5c','indigo' => '4b0082','ivory' => 'fffff0','khaki' => 'f0e68c','lavender' => 'e6e6fa','lavenderblush' => 'fff0f5','lawngreen' => '7cfc00','lemonchiffon' => 'fffacd','lightblue' => 'add8e6','lightcoral' => 'f08080','lightcyan' => 'e0ffff','lightgoldenrodyellow' => 'fafad2','ltgray' => 'd3d3d3','lightgray' => 'd3d3d3','lightgrey' => 'd3d3d3','lightgreen' => '90ee90','lightpink' => 'ffb6c1','lightsalmon' => 'ffa07a','lightseagreen' => '20b2aa','lightskyblue' => '87cefa','lightslategray' => '778899','lightslategrey' => '778899','lightsteelblue' => 'b0c4de','lightyellow' => 'ffffe0','lime' => '00ff00','limegreen' => '32cd32','linen' => 'faf0e6','magenta' => 'ff00ff','maroon' => '800000','mediumaquamarine' => '66cdaa','mediumblue' => '0000cd','mediumorchid' => 'ba55d3','mediumpurple' => '9370d8','mediumseagreen' => '3cb371','mediumslateblue' => '7b68ee','mediumspringgreen' => '00fa9a','mediumturquoise' => '48d1cc','mediumvioletred' => 'c71585','midnightblue' => '191970','mintcream' => 'f5fffa','mistyrose' => 'ffe4e1','moccasin' => 'ffe4b5','navajowhite' => 'ffdead','navy' => '000080','oldlace' => 'fdf5e6','olive' => '808000','olivedrab' => '6b8e23','orange' => 'ffa500','orangered' => 'ff4500','orchid' => 'da70d6','palegoldenrod' => 'eee8aa','palegreen' => '98fb98','paleturquoise' => 'afeeee','palevioletred' => 'd87093','papayawhip' => 'ffefd5','peachpuff' => 'ffdab9','peru' => 'cd853f','pink' => 'ffc0cb','plum' => 'dda0dd','powderblue' => 'b0e0e6','purple' => '800080','red' => 'ff0000','rosybrown' => 'bc8f8f','royalblue' => '4169e1','saddlebrown' => '8b4513','salmon' => 'fa8072','sandybrown' => 'f4a460','seagreen' => '2e8b57','seashell' => 'fff5ee','sienna' => 'a0522d','silver' => 'c0c0c0','skyblue' => '87ceeb','slateblue' => '6a5acd','slategray' => '708090','slategrey' => '708090','snow' => 'fffafa','springgreen' => '00ff7f','steelblue' => '4682b4','tan' => 'd2b48c','teal' => '008080','thistle' => 'd8bfd8','tomato' => 'ff6347','turquoise' => '40e0d0','violet' => 'ee82ee','wheat' => 'f5deb3','white' => 'ffffff','whitesmoke' => 'f5f5f5','yellow' => 'ffff00','yellowgreen' => '9acd32');//============================================================+// END OF FILE//============================================================+
<?php/** * ESRI Shape file import plugin for phpMyAdmin * * @package PhpMyAdmin-Import * @subpackage ESRI_Shape */if (! defined('PHPMYADMIN')) {    exit;}// Drizzle does not suppost GIS data typesif (PMA_DRIZZLE) {    return;}if (isset($plugin_list)) {    $plugin_list['shp'] = array(        'text' => __('ESRI Shape File'),        'extension' => 'shp',        'options' => array(),        'options_text' => __('Options'),    );} else {    if ((int) ini_get('memory_limit') < 512) {        @ini_set('memory_limit', '512M');    }    @set_time_limit(300);    // Append the bfShapeFiles directory to the include path variable    set_include_path(get_include_path() . PATH_SEPARATOR . getcwd() . '/libraries/bfShapeFiles/');    include_once './libraries/bfShapeFiles/ShapeFile.lib.php';    $GLOBALS['finished'] = false;    $buffer = '';    $eof = false;    // Returns specified number of bytes from the buffer.    // Buffer automatically fetches next chunk of data when the buffer falls short.    // Sets $eof when $GLOBALS['finished'] is set and the buffer falls short.    function readFromBuffer($length){        global $buffer, $eof;        if (strlen($buffer) < $length) {            if ($GLOBALS['finished']) {                $eof = true;            } else {                $buffer .= PMA_importGetNextChunk();            }        }        $result = substr($buffer, 0, $length);        $buffer = substr($buffer, $length);        return $result;    }    /**     * This class extends ShapeFile class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeFile extends ShapeFile    {        function _isDbaseLoaded()        {            return extension_loaded('dbase');        }        function loadFromFile($FileName)        {            $this->_loadHeaders();            $this->_loadRecords();            if ($this->_isDbaseLoaded()) {                $this->_closeDBFFile();            }        }        function _loadHeaders()        {            readFromBuffer(24);            $this->fileLength = loadData("N", readFromBuffer(4));            readFromBuffer(4);            $this->shapeType = loadData("V", readFromBuffer(4));            $this->boundingBox = array();            $this->boundingBox["xmin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymin"] = loadData("d", readFromBuffer(8));            $this->boundingBox["xmax"] = loadData("d", readFromBuffer(8));            $this->boundingBox["ymax"] = loadData("d", readFromBuffer(8));            if ($this->_isDbaseLoaded() && $this->_openDBFFile()) {                $this->DBFHeader = $this->_loadDBFHeader();            }        }        function _loadRecords()        {            global $eof;            readFromBuffer(32);            while (true) {                $record = new PMA_ShapeRecord(-1);                $record->loadFromFile($this->SHPFile, $this->DBFFile);                if ($record->lastError != "") {                    return false;                }                if ($eof) {                    break;                }                $this->records[] = $record;            }        }    }    /**     * This class extends ShapeRecord class to cater the following phpMyAdmin     * specific requirements.     * 1) To load data from .dbf file only when the dBase extension is available.     * 2) To use PMA_importGetNextChunk() functionality to read data, rather than     *    reading directly from a file. Using readFromBuffer() in place of fread().     *    This makes it possible to use compressions.     */    class PMA_ShapeRecord extends ShapeRecord    {        function loadFromFile(&$SHPFile, &$DBFFile)        {            $this->DBFFile = $DBFFile;            $this->_loadHeaders();            switch ($this->shapeType) {            case 0:                $this->_loadNullRecord();                break;            case 1:                $this->_loadPointRecord();                break;            case 3:                $this->_loadPolyLineRecord();                break;            case 5:                $this->_loadPolygonRecord();                break;            case 8:                $this->_loadMultiPointRecord();                break;            default:                $this->setError(sprintf("The Shape Type '%s' is not supported.", $this->shapeType));                break;            }            if (extension_loaded('dbase') && isset($this->DBFFile)) {                $this->_loadDBFData();            }        }        function _loadHeaders()        {            $this->recordNumber = loadData("N", readFromBuffer(4));            //We read the length of the record            $tmp = loadData("N", readFromBuffer(4));            $this->shapeType = loadData("V", readFromBuffer(4));        }        function _loadPoint()        {            $data = array();            $data["x"] = loadData("d", readFromBuffer(8));            $data["y"] = loadData("d", readFromBuffer(8));            return $data;        }        function _loadMultiPointRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i <= $this->SHPData["numpoints"]; $i++) {                $this->SHPData["points"][] = $this->_loadPoint();            }        }        function _loadPolyLineRecord()        {            $this->SHPData = array();            $this->SHPData["xmin"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymin"] = loadData("d", readFromBuffer(8));            $this->SHPData["xmax"] = loadData("d", readFromBuffer(8));            $this->SHPData["ymax"] = loadData("d", readFromBuffer(8));            $this->SHPData["numparts"]  = loadData("V", readFromBuffer(4));            $this->SHPData["numpoints"] = loadData("V", readFromBuffer(4));            for ($i = 0; $i < $this->SHPData["numparts"]; $i++) {                $this->SHPData["parts"][$i] = loadData("V", readFromBuffer(4));            }            $readPoints = 0;            reset($this->SHPData["parts"]);            while (list($partIndex, $partData) = each($this->SHPData["parts"])) {                if (! isset($this->SHPData["parts"][$partIndex]["points"])                    || !is_array($this->SHPData["parts"][$partIndex]["points"])                ) {                    $this->SHPData["parts"][$partIndex] = array();                    $this->SHPData["parts"][$partIndex]["points"] = array();                }                while (! in_array($readPoints, $this->SHPData["parts"])                && ($readPoints < ($this->SHPData["numpoints"]))                ) {                    $this->SHPData["parts"][$partIndex]["points"][] = $this->_loadPoint();                    $readPoints++;                }            }        }    }    $shp = new PMA_ShapeFile(1);    // If the zip archive has more than one file,    // get the correct content to the buffer from .shp file.    if ($compression == 'application/zip' && PMA_getNoOfFilesInZip($import_file) > 1) {        $zip_content =  PMA_getZipContents($import_file, '/^.*\.shp$/i');        $GLOBALS['import_text'] = $zip_content['data'];    }    $temp_dbf_file = false;    // We need dbase extension to handle .dbf file    if (extension_loaded('dbase')) {        // If we can extract the zip archive to 'TempDir'        // and use the files in it for import        if ($compression == 'application/zip'            && ! empty($cfg['TempDir'])            && is_writable($cfg['TempDir'])        ) {            $dbf_file_name = PMA_findFileFromZipArchive('/^.*\.dbf$/i', $import_file);            // If the corresponding .dbf file is in the zip archive            if ($dbf_file_name) {                // Extract the .dbf file and point to it.                $extracted =  PMA_zipExtract(                    $import_file,                    realpath($cfg['TempDir']),                    array($dbf_file_name)                );                if ($extracted) {                    $dbf_file_path = realpath($cfg['TempDir'])                        . (PMA_IS_WINDOWS ? '\\' : '/') . $dbf_file_name;                    $temp_dbf_file = true;                    // Replace the .dbf with .*, as required by the bsShapeFiles library.                    $file_name = substr($dbf_file_path, 0, strlen($dbf_file_path) - 4) . '.*';                    $shp->FileName = $file_name;                }            }        }        // If file is in UploadDir, use .dbf file in the same UploadDir        // to load extra data.        elseif (! empty($local_import_file)            && ! empty($cfg['UploadDir'])            && $compression == 'none'        ) {            // Replace the .shp with .*,            // so the bsShapeFiles library correctly locates .dbf file.            $file_name = substr($import_file, 0, strlen($import_file) - 4) . '.*';            $shp->FileName = $file_name;        }    }    // Load data    $shp->loadFromFile('');    if ($shp->lastError != "") {        $error = true;        $message = PMA_Message::error(__('There was an error importing the ESRI shape file: "%s".'));        $message->addParam($shp->lastError);        return;    }    // Delete the .dbf file extracted to 'TempDir'    if ($temp_dbf_file) {        unlink($dbf_file_path);    }    $esri_types = array(        0  => 'Null Shape',        1  => 'Point',        3  => 'PolyLine',        5  => 'Polygon',        8  => 'MultiPoint',        11 => 'PointZ',        13 => 'PolyLineZ',        15 => 'PolygonZ',        18 => 'MultiPointZ',        21 => 'PointM',        23 => 'PolyLineM',        25 => 'PolygonM',        28 => 'MultiPointM',        31 => 'MultiPatch',    );    include_once './libraries/gis/pma_gis_geometry.php';    switch ($shp->shapeType) {    // ESRI Null Shape    case 0:        $gis_obj = null;        break;    // ESRI Point    case 1:        include_once './libraries/gis/pma_gis_point.php';        $gis_obj = PMA_GIS_Point::singleton();        break;    // ESRI PolyLine    case 3:        include_once './libraries/gis/pma_gis_multilinestring.php';        $gis_obj = PMA_GIS_Multilinestring::singleton();        break;    // ESRI Polygon    case 5:        include_once './libraries/gis/pma_gis_multipolygon.php';        $gis_obj = PMA_GIS_Multipolygon::singleton();        break;    // ESRI MultiPoint    case 8:        include_once './libraries/gis/pma_gis_multipoint.php';        $gis_obj = PMA_GIS_Multipoint::singleton();        break;    default:        $error = true;        if (! isset($esri_types[$shp->shapeType])) {            $message = PMA_Message::error(__('You tried to import an invalid file or the imported file contains invalid data'));        } else {            $message = PMA_Message::error(__('MySQL Spatial Extension does not support ESRI type "%s".'));            $message->addParam($param);        }        return;    }    $num_rows = count($shp->records);    // If .dbf file is loaded, the number of extra data columns    $num_data_cols = isset($shp->DBFHeader) ? count($shp->DBFHeader) : 0;    $rows = array();    $col_names = array();    if ($num_rows != 0) {        foreach ($shp->records as $record) {            $tempRow = array();            if ($gis_obj == null) {                $tempRow[] = null;            } else {                $tempRow[] = "GeomFromText('" . $gis_obj->getShape($record->SHPData) . "')";            }            if (isset($shp->DBFHeader)) {                foreach ($shp->DBFHeader as $c) {                    $cell = trim($record->DBFData[$c[0]]);                    if (! strcmp($cell, '')) {                        $cell = 'NULL';                    }                    $tempRow[] = $cell;                }            }            $rows[] = $tempRow;        }    }    if (count($rows) == 0) {        $error = true;        $message = PMA_Message::error(__('The imported file does not contain any data'));        return;    }    // Column names for spatial column and the rest of the columns,    // if they are available    $col_names[] = 'SPATIAL';    for ($n = 0; $n < $num_data_cols; $n++) {        $col_names[] = $shp->DBFHeader[$n][0];    }    // Set table name based on the number of tables    if (strlen($db)) {        $result = PMA_DBI_fetch_result('SHOW TABLES');        $table_name = 'TABLE '.(count($result) + 1);    } else {        $table_name = 'TBL_NAME';    }    $tables = array(array($table_name, $col_names, $rows));    // Use data from shape file to chose best-fit MySQL types for each column    $analyses = array();    $analyses[] = PMA_analyzeTable($tables[0]);    $table_no = 0; $spatial_col = 0;    $analyses[$table_no][TYPES][$spatial_col] = GEOMETRY;    $analyses[$table_no][FORMATTEDSQL][$spatial_col] = true;    // Set database name to the currently selected one, if applicable    if (strlen($db)) {        $db_name = $db;        $options = array('create_db' => false);    } else {        $db_name = 'SHP_DB';        $options = null;    }    // Created and execute necessary SQL statements from data    $null_param = null;    PMA_buildSQL($db_name, $tables, $analyses, $null_param, $options);    unset($tables);    unset($analyses);    $finished = true;    $error = false;    // Commit any possible data in buffers    PMA_importRunQuery();}?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'asc_order' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_bookmark' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_firstpage' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '18',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_lastpage' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'b_docs' => array(            'position' => '22',            'width'    => '16',            'height'   => '16'        ),        'b_docsql' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_prevpage' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'bd_select' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '33',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_firstpage' => array(            'position' => '37',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_home' => array(            'position' => '40',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '43',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '45',            'width'    => '16',            'height'   => '16'        ),        'b_lastpage' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_more' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_pdfdoc' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '53',            'width'    => '16',            'height'   => '16'        ),        'b_prevpage' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_primary' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '57',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_sdb' => array(            'position' => '63',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_spatial' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_sqldoc' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '78',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '81',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '82',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '83',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'database' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '90',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '93',            'width'    => '5',            'height'   => '9'        ),        'item' => array(            'position' => '94',            'width'    => '9',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '95',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '96',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '97',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '98',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        'pause' => array(            'position' => '105',            'width'    => '16',            'height'   => '16'        ),        'php_sym' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        'play' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '109',            'width'    => '16',            'height'   => '16'        ),        's_attention' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_cancel2' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_cancel' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_error2' => array(            'position' => '116',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '118',            'width'    => '16',            'height'   => '16'        ),        's_info' => array(            'position' => '119',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '120',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '121',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '122',            'width'    => '16',            'height'   => '16'        ),        's_okay' => array(            'position' => '123',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '124',            'width'    => '16',            'height'   => '16'        ),        's_process' => array(            'position' => '125',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '126',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '127',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '128',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '129',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '130',            'width'    => '16',            'height'   => '16'        ),        's_status' => array(            'position' => '131',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '132',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '133',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '134',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '135',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '136',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '137',            'width'    => '16',            'height'   => '16'        ),        'window-new' => array(            'position' => '138',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Gets the variables sent or posted to this script, then displays headers */require_once './libraries/common.inc.php';if (! isset($selected_tbl)) {    include './libraries/db_common.inc.php';    include './libraries/db_info.inc.php';}/** * Gets the relations settings */$cfgRelation  = PMA_getRelationsParam();require_once './libraries/transformations.lib.php';/** * Check parameters */PMA_checkParameters(array('db'));/** * Defines the url to return to in case of error in a sql statement */if (strlen($table)) {    $err_url = 'tbl_sql.php?' . PMA_generate_common_url($db, $table);} else {    $err_url = 'db_sql.php?' . PMA_generate_common_url($db);}if ($cfgRelation['commwork']) {    $comment = PMA_getDbComment($db);    /**     * Displays DB comment     */    if ($comment) {        ?>    <p> <?php echo __('Database comment: '); ?>        <i><?php echo htmlspecialchars($comment); ?></i></p>        <?php    } // end if}/** * Selects the database and gets tables names */PMA_DBI_select_db($db);$tables = PMA_DBI_get_tables($db);$count  = 0;foreach ($tables as $table) {    $comments = PMA_getComments($db, $table);    echo '<div>' . "\n";    echo '<h2>' . htmlspecialchars($table) . '</h2>' . "\n";    /**     * Gets table informations     */    $show_comment = PMA_Table::sGetStatusInfo($db, $table, 'TABLE_COMMENT');    /**     * Gets table keys and retains them     */    PMA_DBI_select_db($db);    $indexes      = PMA_DBI_get_table_indexes($db, $table);    $primary      = '';    $indexes      = array();    $lastIndex    = '';    $indexes_info = array();    $indexes_data = array();    $pk_array     = array(); // will be use to emphasis prim. keys in the table                             // view    foreach ($indexes as $row) {        // Backups the list of primary keys        if ($row['Key_name'] == 'PRIMARY') {            $primary   .= $row['Column_name'] . ', ';            $pk_array[$row['Column_name']] = 1;        }        // Retains keys informations        if ($row['Key_name'] != $lastIndex) {            $indexes[] = $row['Key_name'];            $lastIndex = $row['Key_name'];        }        $indexes_info[$row['Key_name']]['Sequences'][]     = $row['Seq_in_index'];        $indexes_info[$row['Key_name']]['Non_unique']      = $row['Non_unique'];        if (isset($row['Cardinality'])) {            $indexes_info[$row['Key_name']]['Cardinality'] = $row['Cardinality'];        }        // I don't know what does following column mean....        // $indexes_info[$row['Key_name']]['Packed']          = $row['Packed'];        $indexes_info[$row['Key_name']]['Comment']     = $row['Comment'];        $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Column_name']  = $row['Column_name'];        if (isset($row['Sub_part'])) {            $indexes_data[$row['Key_name']][$row['Seq_in_index']]['Sub_part'] = $row['Sub_part'];        }    } // end while    /**     * Gets columns properties     */    $columns = PMA_DBI_get_columns($db, $table);    $fields_cnt  = count($columns);    if (PMA_MYSQL_INT_VERSION < 50025) {        // We need this to correctly learn if a TIMESTAMP is NOT NULL, since        // SHOW FULL COLUMNS or INFORMATION_SCHEMA incorrectly says NULL        // and SHOW CREATE TABLE says NOT NULL        // http://bugs.mysql.com/20910.        $show_create_table = PMA_DBI_fetch_value(            'SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table),            0, 1);        $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    }    // Check if we can use Relations    if (!empty($cfgRelation['relation'])) {        // Find which tables are related with the current one and write it in        // an array        $res_rel = PMA_getForeigners($db, $table);        if (count($res_rel) > 0) {            $have_rel = true;        } else {            $have_rel = false;        }    } else {        $have_rel = false;    } // end if    /**     * Displays the comments of the table if MySQL >= 3.23     */    if (!empty($show_comment)) {        echo __('Table comments') . ': ' . htmlspecialchars($show_comment) . '<br /><br />';    }    /**     * Displays the table structure     */    ?><table width="100%" class="print"><tr><th width="50"><?php echo __('Column'); ?></th>    <th width="80"><?php echo __('Type'); ?></th><?php /*    <th width="50"><?php echo __('Attributes'); ?></th>*/ ?>    <th width="40"><?php echo __('Null'); ?></th>    <th width="70"><?php echo __('Default'); ?></th><?php /*    <th width="50"><?php echo __('Extra'); ?></th>*/ ?>    <?php    if ($have_rel) {        echo '    <th>' . __('Links to') . '</th>' . "\n";    }    echo '    <th>' . __('Comments') . '</th>' . "\n";    if ($cfgRelation['mimework']) {        echo '    <th>MIME</th>' . "\n";    }    ?></tr>    <?php    $odd_row = true;    foreach ($columns as $row) {        if ($row['Null'] == '') {            $row['Null'] = 'NO';        }        $extracted_fieldspec = PMA_extractFieldSpec($row['Type']);        // reformat mysql query output        // set or enum types: slashes single quotes inside options        if ('set' == $extracted_fieldspec['type'] || 'enum' == $extracted_fieldspec['type']) {            $type_nowrap  = '';        } else {            $type_nowrap  = ' nowrap="nowrap"';        }        $type = htmlspecialchars($extracted_fieldspec['print_type']);        $attribute     = $extracted_fieldspec['attribute'];        if (! isset($row['Default'])) {            if ($row['Null'] != 'NO') {                $row['Default'] = '<i>NULL</i>';            }        } else {            $row['Default'] = htmlspecialchars($row['Default']);        }        $field_name = $row['Field'];        if (PMA_MYSQL_INT_VERSION < 50025         && ! empty($analyzed_sql[0]['create_table_fields'][$field_name]['type'])         && $analyzed_sql[0]['create_table_fields'][$field_name]['type'] == 'TIMESTAMP'         && $analyzed_sql[0]['create_table_fields'][$field_name]['timestamp_not_null']) {            // here, we have a TIMESTAMP that SHOW FULL COLUMNS reports as having the            // NULL attribute, but SHOW CREATE TABLE says the contrary. Believe            // the latter.            /**             * @todo merge this logic with the one in tbl_structure.php             * or move it in a function similar to PMA_DBI_get_columns_full()             * but based on SHOW CREATE TABLE because information_schema             * cannot be trusted in this case (MySQL bug)             */             $row['Null'] = 'NO';        }        ?><tr class="<?php echo $odd_row ? 'odd' : 'even'; $odd_row = ! $odd_row; ?>">    <td nowrap="nowrap">        <?php        if (isset($pk_array[$row['Field']])) {            echo '<u>' . htmlspecialchars($field_name) . '</u>';        } else {            echo htmlspecialchars($field_name);        }        ?>    </td>    <td<?php echo $type_nowrap; ?> xml:lang="en" dir="ltr"><?php echo $type; ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $attribute; ?></td>*/ ?>    <td><?php echo (($row['Null'] == 'NO') ? __('No') : __('Yes')); ?></td>    <td nowrap="nowrap"><?php if (isset($row['Default'])) { echo $row['Default']; } ?></td><?php /*    <td<?php echo $type_nowrap; ?>><?php echo $row['Extra']; ?></td>*/ ?>        <?php        if ($have_rel) {            echo '    <td>';            if (isset($res_rel[$field_name])) {                echo htmlspecialchars($res_rel[$field_name]['foreign_table'] . ' -> ' . $res_rel[$field_name]['foreign_field']);            }            echo '</td>' . "\n";        }        echo '    <td>';        if (isset($comments[$field_name])) {            echo htmlspecialchars($comments[$field_name]);        }        echo '</td>' . "\n";        if ($cfgRelation['mimework']) {            $mime_map = PMA_getMIME($db, $table, true);            echo '    <td>';            if (isset($mime_map[$field_name])) {                echo htmlspecialchars(str_replace('_', '/', $mime_map[$field_name]['mimetype']));            }            echo '</td>' . "\n";        }        ?></tr>        <?php    } // end foreach    $count++;    ?></table></div>    <?php} //ends main while/** * Displays the footer */PMA_printButton();require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the relation and pdf feature * * @package PhpMyAdmin *//** * returns array of options from string with options separated by comma, removes quotes * * <code> * PMA_transformation_getOptions("'option ,, quoted',abd,'2,3',"); * // array { * //     'option ,, quoted', * //     'abc', * //     '2,3', * //     '', * // } * </code> * * @param string $option_string comma separated options * * @return array options */function PMA_transformation_getOptions($option_string){    $result = array();    if (! strlen($option_string)        || ! $transform_options = preg_split('/,/', $option_string)    ) {        return $result;    }    while (($option = array_shift($transform_options)) !== null) {        $trimmed = trim($option);        if (strlen($trimmed) > 1            && $trimmed[0] == "'"            && $trimmed[strlen($trimmed) - 1] == "'"        ) {            // '...'            $option = substr($trimmed, 1, -1);        } elseif (isset($trimmed[0]) && $trimmed[0] == "'") {            // '...,            $trimmed = ltrim($option);            while (($option = array_shift($transform_options)) !== null) {                // ...,                $trimmed .= ',' . $option;                $rtrimmed = rtrim($trimmed);                if ($rtrimmed[strlen($rtrimmed) - 1] == "'") {                    // ,...'                    break;                }            }            $option = substr($rtrimmed, 1, -1);        }        $result[] = stripslashes($option);    }    return $result;}/** * Gets all available MIME-types * * @access  public * @staticvar   array   mimetypes * @return  array    array[mimetype], array[transformation] */function PMA_getAvailableMIMEtypes(){    static $stack = null;    if (null !== $stack) {        return $stack;    }    $stack = array();    $filestack = array();    $handle = opendir('./libraries/transformations');    if (! $handle) {        return $stack;    }    while ($file = readdir($handle)) {        $filestack[] = $file;    }    closedir($handle);    sort($filestack);    foreach ($filestack as $file) {        if (preg_match('|^.*__.*\.inc\.php$|', $file)) {            // File contains transformation functions.            $base = explode('__', str_replace('.inc.php', '', $file));            $mimetype = str_replace('_', '/', $base[0]);            $stack['mimetype'][$mimetype] = $mimetype;            $stack['transformation'][] = $mimetype . ': ' . $base[1];            $stack['transformation_file'][] = $file;        } elseif (preg_match('|^.*\.inc\.php$|', $file)) {            // File is a plain mimetype, no functions.            $base = str_replace('.inc.php', '', $file);            if ($base != 'global') {                $mimetype = str_replace('_', '/', $base);                $stack['mimetype'][$mimetype] = $mimetype;                $stack['empty_mimetype'][$mimetype] = $mimetype;            }        }    }    return $stack;}/** * Returns the description of the transformation * * @param string $file           transformation file * @param string $html_formatted whether the description should be formatted as HTML * * @return the description of the transformation */function PMA_getTransformationDescription($file, $html_formatted = true){    include_once './libraries/transformations/' . $file;    $func = strtolower(str_replace('.inc.php', '', $file));    $funcname = 'PMA_transformation_' . $func . '_info';    $desc = sprintf(__('No description is available for this transformation.<br />Please ask the author what %s does.'), 'PMA_transformation_' . $func . '()');    if ($html_formatted) {        $desc = '<i>' . $desc . '</i>';    } else {        $desc = str_replace('<br />', ' ', $desc);    }    if (function_exists($funcname)) {        $desc_arr = $funcname();        if (isset($desc_arr['info'])) {            $desc = $desc_arr['info'];        }    }    return $desc;}/** * Gets the mimetypes for all columns of a table * * @param string $db     the name of the db to check for * @param string $table  the name of the table to check for * @param string $strict whether to include only results having a mimetype set * * @access  public * * @return array [field_name][field_key] = field_value */function PMA_getMIME($db, $table, $strict = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $com_qry  = '         SELECT `column_name`,                `mimetype`,                `transformation`,                `transformation_options`         FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '         WHERE `db_name`    = \'' . PMA_sqlAddSlashes($db) . '\'           AND `table_name` = \'' . PMA_sqlAddSlashes($table) . '\'           AND ( `mimetype` != \'\'' . (!$strict ? '              OR `transformation` != \'\'              OR `transformation_options` != \'\'' : '') . ')';    return PMA_DBI_fetch_result($com_qry, 'column_name', null, $GLOBALS['controllink']);} // end of the 'PMA_getMIME()' function/** * Set a single mimetype to a certain value. * * @param string $db                     the name of the db * @param string $table                  the name of the table * @param string $key                    the name of the column * @param string $mimetype               the mimetype of the column * @param string $transformation         the transformation of the column * @param string $transformation_options the transformation options of the column * @param string $forcedelete            force delete, will erase any existing *                                       comments for this column * * @access  public * * @return  boolean  true, if comment-query was made. */function PMA_setMIME($db, $table, $key, $mimetype, $transformation,    $transformation_options, $forcedelete = false){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['commwork']) {        return false;    }    $test_qry  = '         SELECT `mimetype`,                `comment`           FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '          WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'            AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'            AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    $test_rs   = PMA_query_as_controluser($test_qry, true, PMA_DBI_QUERY_STORE);    if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {        $row = @PMA_DBI_fetch_assoc($test_rs);        PMA_DBI_free_result($test_rs);        if (! $forcedelete            && (strlen($mimetype) || strlen($transformation)            || strlen($transformation_options) || strlen($row['comment']))        ) {            $upd_query = '                UPDATE ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']) . '                   SET `mimetype`               = \'' . PMA_sqlAddSlashes($mimetype) . '\',                       `transformation`         = \'' . PMA_sqlAddSlashes($transformation) . '\',                       `transformation_options` = \'' . PMA_sqlAddSlashes($transformation_options) . '\'';        } else {            $upd_query = 'DELETE FROM ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info']);        }        $upd_query .= '            WHERE `db_name`     = \'' . PMA_sqlAddSlashes($db) . '\'              AND `table_name`  = \'' . PMA_sqlAddSlashes($table) . '\'              AND `column_name` = \'' . PMA_sqlAddSlashes($key) . '\'';    } elseif (strlen($mimetype) || strlen($transformation)     || strlen($transformation_options)) {        $upd_query = 'INSERT INTO ' . PMA_backquote($cfgRelation['db']) . '.' . PMA_backquote($cfgRelation['column_info'])                   . ' (db_name, table_name, column_name, mimetype, transformation, transformation_options) '                   . ' VALUES('                   . '\'' . PMA_sqlAddSlashes($db) . '\','                   . '\'' . PMA_sqlAddSlashes($table) . '\','                   . '\'' . PMA_sqlAddSlashes($key) . '\','                   . '\'' . PMA_sqlAddSlashes($mimetype) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation) . '\','                   . '\'' . PMA_sqlAddSlashes($transformation_options) . '\')';    }    if (isset($upd_query)) {        return PMA_query_as_controluser($upd_query);    } else {        return false;    }} // end of 'PMA_setMIME()' function?>
<?php/** * Used to create server variables documentation links * $VARIABLE_DOC_LINKS[string $name] = array( *    string $anchor, *    string $chapter, *    string $type); * string $name: name of the system variable * string $anchor: anchor to the documentation page * string $chapter: chapter of "HTML, one page per chapter" documentation * string $type: type of system variable * string $format: if set to 'byte' it will format the variable * with PMA_formatByteDown() */$VARIABLE_DOC_LINKS = array();$VARIABLE_DOC_LINKS['auto_increment_increment'] = array(    'auto_increment_increment',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['auto_increment_offset'] = array(    'auto_increment_offset',    'replication-options-master',    'sysvar');$VARIABLE_DOC_LINKS['autocommit'] = array(    'autocommit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['automatic_sp_privileges'] = array(    'automatic_sp_privileges',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['back_log'] = array(    'back_log',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['basedir'] = array(    'basedir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['big_tables'] = array(    'big-tables',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['bind_address'] = array(    'bind-address',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['binlog_cache_size'] = array(    'binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['binlog_direct_non_transactional_updates'] = array(    'binlog_direct_non_transactional_updates',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['binlog_format'] = array(    'binlog-format',    'server-options',    'sysvar');$VARIABLE_DOC_LINKS['binlog_stmt_cache_size'] = array(    'binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['bulk_insert_buffer_size'] = array(    'bulk_insert_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['character_set_client'] = array(    'character_set_client',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_connection'] = array(    'character_set_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_database'] = array(    'character_set_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_filesystem'] = array(    'character-set-filesystem',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_results'] = array(    'character_set_results',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_set_server'] = array(    'character-set-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['character_set_system'] = array(    'character_set_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['character_sets_dir'] = array(    'character-sets-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['collation_connection'] = array(    'collation_connection',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_database'] = array(    'collation_database',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['collation_server'] = array(    'collation-server',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['completion_type'] = array(    'completion_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['concurrent_insert'] = array(    'concurrent_insert',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['connect_timeout'] = array(    'connect_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datadir'] = array(    'datadir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['date_format'] = array(    'date_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['datetime_format'] = array(    'datetime_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['debug'] = array(    'debug',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['debug_sync'] = array(    'debug_sync',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['default_storage_engine'] = array(    'default-storage-engine',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['default_week_format'] = array(    'default_week_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delay_key_write'] = array(    'delay-key-write',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['delayed_insert_limit'] = array(    'delayed_insert_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_insert_timeout'] = array(    'delayed_insert_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['delayed_queue_size'] = array(    'delayed_queue_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['div_precision_increment'] = array(    'div_precision_increment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['engine_condition_pushdown'] = array(    'engine-condition-pushdown',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['error_count'] = array(    'error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['event_scheduler'] = array(    'event-scheduler',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['expire_logs_days'] = array(    'expire_logs_days',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['external_user'] = array(    'external_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush'] = array(    'flush',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['flush_time'] = array(    'flush_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['foreign_key_checks'] = array(    'foreign_key_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_boolean_syntax'] = array(    'ft_boolean_syntax',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_max_word_len'] = array(    'ft_max_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_min_word_len'] = array(    'ft_min_word_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_query_expansion_limit'] = array(    'ft_query_expansion_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ft_stopword_file'] = array(    'ft_stopword_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['general_log'] = array(    'general-log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['general_log_file'] = array(    'general_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['group_concat_max_len'] = array(    'group_concat_max_len',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_compress'] = array(    'have_compress',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_crypt'] = array(    'have_crypt',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_csv'] = array(    'have_csv',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_dynamic_loading'] = array(    'have_dynamic_loading',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_geometry'] = array(    'have_geometry',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_innodb'] = array(    'have_innodb',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_openssl'] = array(    'have_openssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_partitioning'] = array(    'have_partitioning',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_profiling'] = array(    'have_profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_query_cache'] = array(    'have_query_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_rtree_keys'] = array(    'have_rtree_keys',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_ssl'] = array(    'have_ssl',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['have_symlink'] = array(    'have_symlink',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['hostname'] = array(    'hostname',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['identity'] = array(    'identity',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ignore_builtin_innodb'] = array(    'ignore-builtin-innodb',    'innodb-parameters',    'option_mysqld');$VARIABLE_DOC_LINKS['init_connect'] = array(    'init_connect',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['init_file'] = array(    'init-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['init_slave'] = array(    'init_slave',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_flushing'] = array(    'innodb_adaptive_flushing',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_adaptive_hash_index'] = array(    'innodb_adaptive_hash_index',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_additional_mem_pool_size'] = array(    'innodb_additional_mem_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_autoextend_increment'] = array(    'innodb_autoextend_increment',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_autoinc_lock_mode'] = array(    'innodb_autoinc_lock_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_instances'] = array(    'innodb_buffer_pool_instances',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_buffer_pool_size'] = array(    'innodb_buffer_pool_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_change_buffering'] = array(    'innodb_change_buffering',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_checksums'] = array(    'innodb_checksums',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_commit_concurrency'] = array(    'innodb_commit_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_concurrency_tickets'] = array(    'innodb_concurrency_tickets',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_file_path'] = array(    'innodb_data_file_path',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_data_home_dir'] = array(    'innodb_data_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_doublewrite'] = array(    'innodb_doublewrite',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_fast_shutdown'] = array(    'innodb_fast_shutdown',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format'] = array(    'innodb_file_format',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_check'] = array(    'innodb_file_format_check',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_format_max'] = array(    'innodb_file_format_max',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_file_per_table'] = array(    'innodb_file_per_table',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_log_at_trx_commit'] = array(    'innodb_flush_log_at_trx_commit',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_flush_method'] = array(    'innodb_flush_method',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_force_recovery'] = array(    'innodb_force_recovery',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_io_capacity'] = array(    'innodb_io_capacity',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_lock_wait_timeout'] = array(    'innodb_lock_wait_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_locks_unsafe_for_binlog'] = array(    'innodb_locks_unsafe_for_binlog',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_buffer_size'] = array(    'innodb_log_buffer_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_file_size'] = array(    'innodb_log_file_size',    'innodb-parameters',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['innodb_log_files_in_group'] = array(    'innodb_log_files_in_group',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_log_group_home_dir'] = array(    'innodb_log_group_home_dir',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_dirty_pages_pct'] = array(    'innodb_max_dirty_pages_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_max_purge_lag'] = array(    'innodb_max_purge_lag',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_mirrored_log_groups'] = array(    'innodb_mirrored_log_groups',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_pct'] = array(    'innodb_old_blocks_pct',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_old_blocks_time'] = array(    'innodb_old_blocks_time',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_open_files'] = array(    'innodb_open_files',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_batch_size'] = array(    'innodb_purge_batch_size',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_purge_threads'] = array(    'innodb_purge_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_ahead_threshold'] = array(    'innodb_read_ahead_threshold',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_read_io_threads'] = array(    'innodb_read_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_replication_delay'] = array(    'innodb_replication_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_rollback_on_timeout'] = array(    'innodb_rollback_on_timeout',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_spin_wait_delay'] = array(    'innodb_spin_wait_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_on_metadata'] = array(    'innodb_stats_on_metadata',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_stats_sample_pages'] = array(    'innodb_stats_sample_pages',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_strict_mode'] = array(    'innodb_strict_mode',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_support_xa'] = array(    'innodb_support_xa',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_sync_spin_loops'] = array(    'innodb_sync_spin_loops',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_table_locks'] = array(    'innodb_table_locks',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_concurrency'] = array(    'innodb_thread_concurrency',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_thread_sleep_delay'] = array(    'innodb_thread_sleep_delay',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_native_aio'] = array(    'innodb_use_native_aio',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_use_sys_malloc'] = array(    'innodb_use_sys_malloc',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_version'] = array(    'innodb_version',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['innodb_write_io_threads'] = array(    'innodb_write_io_threads',    'innodb-parameters',    'sysvar');$VARIABLE_DOC_LINKS['insert_id'] = array(    'insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['interactive_timeout'] = array(    'interactive_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['join_buffer_size'] = array(    'join_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['keep_files_on_create'] = array(    'keep_files_on_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_buffer_size'] = array(    'key_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_age_threshold'] = array(    'key_cache_age_threshold',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['key_cache_block_size'] = array(    'key_cache_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['key_cache_division_limit'] = array(    'key_cache_division_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['language'] = array(    'language',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['large_files_support'] = array(    'large_files_support',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['large_page_size'] = array(    'large_page_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['large_pages'] = array(    'large-pages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['last_insert_id'] = array(    'last_insert_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lc_messages'] = array(    'lc-messages',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_messages_dir'] = array(    'lc-messages-dir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lc_time_names'] = array(    'lc_time_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['license'] = array(    'license',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['local_infile'] = array(    'local_infile',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lock_wait_timeout'] = array(    'lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['locked_in_memory'] = array(    'locked_in_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log'] = array(    'log',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin'] = array(    'log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['log-bin'] = array(    'log-bin',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_bin_trust_function_creators'] = array(    'log-bin-trust-function-creators',    'replication-options-binary-log',    'option_mysqld');$VARIABLE_DOC_LINKS['log_error'] = array(    'log-error',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_output'] = array(    'log-output',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_queries_not_using_indexes'] = array(    'log-queries-not-using-indexes',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slave_updates'] = array(    'log-slave-updates',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['log_slow_queries'] = array(    'log-slow-queries',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['log_warnings'] = array(    'log-warnings',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['long_query_time'] = array(    'long_query_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['low_priority_updates'] = array(    'low-priority-updates',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['lower_case_file_system'] = array(    'lower_case_file_system',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['lower_case_table_names'] = array(    'lower_case_table_names',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['master-bind'] = array(    '',    'replication-options',    0);$VARIABLE_DOC_LINKS['max_allowed_packet'] = array(    'max_allowed_packet',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_binlog_cache_size'] = array(    'max_binlog_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_size'] = array(    'max_binlog_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_binlog_stmt_cache_size'] = array(    'max_binlog_stmt_cache_size',    'replication-options-binary-log',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_connect_errors'] = array(    'max_connect_errors',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_connections'] = array(    'max_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_delayed_threads'] = array(    'max_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_error_count'] = array(    'max_error_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_heap_table_size'] = array(    'max_heap_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_insert_delayed_threads'] = array(    'max_insert_delayed_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_join_size'] = array(    'max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_length_for_sort_data'] = array(    'max_length_for_sort_data',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_prepared_stmt_count'] = array(    'max_prepared_stmt_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_relay_log_size'] = array(    'max_relay_log_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['max_seeks_for_key'] = array(    'max_seeks_for_key',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sort_length'] = array(    'max_sort_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_sp_recursion_depth'] = array(    'max_sp_recursion_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_tmp_tables'] = array(    'max_tmp_tables',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_user_connections'] = array(    'max_user_connections',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['max_write_lock_count'] = array(    'max_write_lock_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['memlock'] = array(    'memlock',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['min_examined_row_limit'] = array(    'min-examined-row-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['myisam_data_pointer_size'] = array(    'myisam_data_pointer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_max_sort_file_size'] = array(    'myisam_max_sort_file_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_mmap_size'] = array(    'myisam_mmap_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_recover_options'] = array(    'myisam_recover_options',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_repair_threads'] = array(    'myisam_repair_threads',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_sort_buffer_size'] = array(    'myisam_sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['myisam_stats_method'] = array(    'myisam_stats_method',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['myisam_use_mmap'] = array(    'myisam_use_mmap',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['named_pipe'] = array(    'named_pipe',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_buffer_length'] = array(    'net_buffer_length',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_read_timeout'] = array(    'net_read_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_retry_count'] = array(    'net_retry_count',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['net_write_timeout'] = array(    'net_write_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['new'] = array(    'new',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old'] = array(    'old',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['old_alter_table'] = array(    'old-alter-table',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['old_passwords'] = array(    'old-passwords',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['open_files_limit'] = array(    'open-files-limit',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['optimizer_prune_level'] = array(    'optimizer_prune_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_search_depth'] = array(    'optimizer_search_depth',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['optimizer_switch'] = array(    'optimizer_switch',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['partition'] = array(    'partition',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['performance_schema'] = array(    'performance_schema',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_long_size'] = array(    'performance_schema_events_waits_history_long_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_events_waits_history_size'] = array(    'performance_schema_events_waits_history_size',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_classes'] = array(    'performance_schema_max_cond_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_cond_instances'] = array(    'performance_schema_max_cond_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_classes'] = array(    'performance_schema_max_file_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_handles'] = array(    'performance_schema_max_file_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_file_instances'] = array(    'performance_schema_max_file_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_classes'] = array(    'performance_schema_max_mutex_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_mutex_instances'] = array(    'performance_schema_max_mutex_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_classes'] = array(    'performance_schema_max_rwlock_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_rwlock_instances'] = array(    'performance_schema_max_rwlock_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_handles'] = array(    'performance_schema_max_table_handles',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_table_instances'] = array(    'performance_schema_max_table_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_classes'] = array(    'performance_schema_max_thread_classes',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['performance_schema_max_thread_instances'] = array(    'performance_schema_max_thread_instances',    'performance-schema-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pid_file'] = array(    'pid-file',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['plugin_dir'] = array(    'plugin_dir',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['port'] = array(    'port',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['preload_buffer_size'] = array(    'preload_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['profiling'] = array(    'profiling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['profiling_history_size'] = array(    'profiling_history_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['protocol_version'] = array(    'protocol_version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['proxy_user'] = array(    'proxy_user',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['pseudo_thread_id'] = array(    'pseudo_thread_id',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_alloc_block_size'] = array(    'query_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_limit'] = array(    'query_cache_limit',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_min_res_unit'] = array(    'query_cache_min_res_unit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_size'] = array(    'query_cache_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['query_cache_type'] = array(    'query_cache_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_cache_wlock_invalidate'] = array(    'query_cache_wlock_invalidate',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['query_prealloc_size'] = array(    'query_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['rand_seed1'] = array(    'rand_seed1',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rand_seed2'] = array(    'rand_seed2',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['range_alloc_block_size'] = array(    'range_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_buffer_size'] = array(    'read_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['read_only'] = array(    'read_only',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['read_rnd_buffer_size'] = array(    'read_rnd_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['relay-log-index'] = array(    'relay-log-index',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['relay_log_index'] = array(    'relay_log_index',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_info_file'] = array(    'relay_log_info_file',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_purge'] = array(    'relay_log_purge',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_recovery'] = array(    'relay_log_recovery',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['relay_log_space_limit'] = array(    'relay_log_space_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['report_host'] = array(    'report-host',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_password'] = array(    'report-password',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_port'] = array(    'report-port',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['report_user'] = array(    'report-user',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_recovery_rank'] = array(    'rpl_recovery_rank',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_enabled'] = array(    'rpl_semi_sync_master_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_timeout'] = array(    'rpl_semi_sync_master_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_trace_level'] = array(    'rpl_semi_sync_master_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_master_wait_no_slave'] = array(    'rpl_semi_sync_master_wait_no_slave',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_enabled'] = array(    'rpl_semi_sync_slave_enabled',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['rpl_semi_sync_slave_trace_level'] = array(    'rpl_semi_sync_slave_trace_level',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['safe_show_database'] = array(    'safe-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_auth'] = array(    'secure-auth',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['secure_file_priv'] = array(    'secure-file-priv',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['server_id'] = array(    'server-id',    'replication-options',    'option_mysqld');$VARIABLE_DOC_LINKS['shared_memory'] = array(    'shared_memory',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['shared_memory_base_name'] = array(    'shared_memory_base_name',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['skip_external_locking'] = array(    'skip-external-locking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_name_resolve'] = array(    'skip-name-resolve',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_networking'] = array(    'skip-networking',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['skip_show_database'] = array(    'skip-show-database',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_compressed_protocol'] = array(    'slave_compressed_protocol',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_exec_mode'] = array(    'slave_exec_mode',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_load_tmpdir'] = array(    'slave-load-tmpdir',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_net_timeout'] = array(    'slave-net-timeout',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_skip_errors'] = array(    'slave-skip-errors',    'replication-options-slave',    'option_mysqld');$VARIABLE_DOC_LINKS['slave_transaction_retries'] = array(    'slave_transaction_retries',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slave_type_conversions'] = array(    'slave_type_conversions',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['slow_launch_time'] = array(    'slow_launch_time',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['slow_query_log'] = array(    'slow-query-log',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['slow_query_log_file'] = array(    'slow_query_log_file',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['socket'] = array(    'socket',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sort_buffer_size'] = array(    'sort_buffer_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['sql_auto_is_null'] = array(    'sql_auto_is_null',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_selects'] = array(    'sql_big_selects',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_big_tables'] = array(    'big-tables',    'server-options',    'server-system-variables');$VARIABLE_DOC_LINKS['sql_buffer_result'] = array(    'sql_buffer_result',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_bin'] = array(    'sql_log_bin',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_off'] = array(    'sql_log_off',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_log_update'] = array(    'sql_log_update',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_low_priority_updates'] = array(    'sql_low_priority_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_max_join_size'] = array(    'sql_max_join_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_mode'] = array(    'sql-mode',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['sql_notes'] = array(    'sql_notes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_quote_show_create'] = array(    'sql_quote_show_create',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_safe_updates'] = array(    'sql_safe_updates',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_select_limit'] = array(    'sql_select_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sql_slave_skip_counter'] = array(    'sql_slave_skip_counter',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sql_warnings'] = array(    'sql_warnings',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['ssl_ca'] = array(    'ssl-ca',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_capath'] = array(    'ssl-capath',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cert'] = array(    'ssl-cert',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_cipher'] = array(    'ssl-cipher',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['ssl_key'] = array(    'ssl-key',    'ssl-options',    'option_general');$VARIABLE_DOC_LINKS['storage_engine'] = array(    'storage_engine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_binlog'] = array(    'sync_binlog',    'replication-options-binary-log',    'sysvar');$VARIABLE_DOC_LINKS['sync_frm'] = array(    'sync_frm',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['sync_master_info'] = array(    'sync_master_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log'] = array(    'sync_relay_log',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['sync_relay_log_info'] = array(    'sync_relay_log_info',    'replication-options-slave',    'sysvar');$VARIABLE_DOC_LINKS['system_time_zone'] = array(    'system_time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_definition_cache'] = array(    'table_definition_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_lock_wait_timeout'] = array(    'table_lock_wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_open_cache'] = array(    'table_open_cache',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['table_type'] = array(    'table_type',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_cache_size'] = array(    'thread_cache_size',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_concurrency'] = array(    'thread_concurrency',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_handling'] = array(    'thread_handling',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['thread_stack'] = array(    'thread_stack',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_format'] = array(    'time_format',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['time_zone'] = array(    'time_zone',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timed_mutexes'] = array(    'timed_mutexes',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['timestamp'] = array(    'timestamp',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['tmp_table_size'] = array(    'tmp_table_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tmpdir'] = array(    'tmpdir',    'server-options',    'option_mysqld');$VARIABLE_DOC_LINKS['transaction_alloc_block_size'] = array(    'transaction_alloc_block_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['transaction_prealloc_size'] = array(    'transaction_prealloc_size',    'server-system-variables',    'sysvar',    'byte');$VARIABLE_DOC_LINKS['tx_isolation'] = array(    'tx_isolation',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['unique_checks'] = array(    'unique_checks',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['updatable_views_with_limit'] = array(    'updatable_views_with_limit',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version'] = array(    'version',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_comment'] = array(    'version_comment',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_machine'] = array(    'version_compile_machine',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['version_compile_os'] = array(    'version_compile_os',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['wait_timeout'] = array(    'wait_timeout',    'server-system-variables',    'sysvar');$VARIABLE_DOC_LINKS['warning_count'] = array(    'warning_count',    'server-system-variables',    'sysvar');?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Designer *//** * */require_once './libraries/common.inc.php';// not understandrequire_once './libraries/header_http.inc.php';$GLOBALS['PMD']['STYLE']          = 'default';$cfgRelation = PMA_getRelationsParam();$GLOBALS['script_display_field']    = '<script type="text/javascript">' . "\n" .    '// <![CDATA[' . "\n" .    'var display_field = new Array();' . "\n";/** * retrieves table info and stores it in $GLOBALS['PMD'] * */function get_tabs(){    $GLOBALS['PMD']['TABLE_NAME'] = array();// that foreach no error    $GLOBALS['PMD']['OWNER'] = array();    $GLOBALS['PMD']['TABLE_NAME_SMALL'] = array();    $tables = PMA_DBI_get_tables_full($GLOBALS['db']);    // seems to be needed later    PMA_DBI_select_db($GLOBALS['db']);    $i = 0;    foreach ($tables as $one_table) {        $GLOBALS['PMD']['TABLE_NAME'][$i] = $GLOBALS['db'] . "." . $one_table['TABLE_NAME'];        $GLOBALS['PMD']['OWNER'][$i] = $GLOBALS['db'];        $GLOBALS['PMD']['TABLE_NAME_SMALL'][$i] = $one_table['TABLE_NAME'];        $GLOBALS['PMD_URL']['TABLE_NAME'][$i] = urlencode($GLOBALS['db'] . "." . $one_table['TABLE_NAME']);        $GLOBALS['PMD_URL']['OWNER'][$i] = urlencode($GLOBALS['db']);        $GLOBALS['PMD_URL']['TABLE_NAME_SMALL'][$i] = urlencode($one_table['TABLE_NAME']);        $GLOBALS['PMD_OUT']['TABLE_NAME'][$i] = htmlspecialchars($GLOBALS['db'] . "." . $one_table['TABLE_NAME'], ENT_QUOTES);        $GLOBALS['PMD_OUT']['OWNER'][$i] = htmlspecialchars($GLOBALS['db'], ENT_QUOTES);        $GLOBALS['PMD_OUT']['TABLE_NAME_SMALL'][$i] = htmlspecialchars($one_table['TABLE_NAME'], ENT_QUOTES);        $GLOBALS['PMD']['TABLE_TYPE'][$i] = strtoupper($one_table['ENGINE']);        $DF = PMA_getDisplayField($GLOBALS['db'], $one_table['TABLE_NAME']);        if ($DF != '') {            $GLOBALS['script_display_field'] .= "  display_field['"                . $GLOBALS['PMD_URL']["TABLE_NAME_SMALL"][$i] . "'] = '"                . urlencode($DF) . "';\n";        }        $i++;    }    $GLOBALS['script_display_field'] .=        '// ]]>' . "\n" .        '</script>' . "\n";    //  return $GLOBALS['PMD'];       // many bases // not use ??????}/** * retrieves table column info * * @return  array   table column nfo */function get_tab_info(){    PMA_DBI_select_db($GLOBALS['db']);    $tab_column = array();    for ($i = 0, $cnt = count($GLOBALS['PMD']["TABLE_NAME"]); $i < $cnt; $i++) {        $fields_rs   = PMA_DBI_query(PMA_DBI_get_columns_sql($GLOBALS['db'], $GLOBALS['PMD']["TABLE_NAME_SMALL"][$i], null, true), null, PMA_DBI_QUERY_STORE);        $j = 0;        while ($row = PMA_DBI_fetch_assoc($fields_rs)) {            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['COLUMN_ID'][$j]   = $j;            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['COLUMN_NAME'][$j] = $row['Field'];            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['TYPE'][$j]        = $row['Type'];            $tab_column[$GLOBALS['PMD']['TABLE_NAME'][$i]]['NULLABLE'][$j]    = $row['Null'];            $j++;        }    }    return $tab_column;}/** * returns JavaScript code for intializing vars * * @return string   JavaScript code */function get_script_contr(){    PMA_DBI_select_db($GLOBALS['db']);    $con["C_NAME"] = array();    $i = 0;    $alltab_rs  = PMA_DBI_query('SHOW TABLES FROM ' . PMA_backquote($GLOBALS['db']), null, PMA_DBI_QUERY_STORE);    while ($val = @PMA_DBI_fetch_row($alltab_rs)) {        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'internal');        //echo "<br> internal ".$GLOBALS['db']." - ".$val[0]." - ";        //print_r($row);        if ($row !== false) {            foreach ($row as $field => $value) {                $con['C_NAME'][$i] = '';                $con['DTN'][$i]    = urlencode($GLOBALS['db'] . "." . $val[0]);                $con['DCN'][$i]    = urlencode($field);                $con['STN'][$i]    = urlencode($value['foreign_db'] . "." . $value['foreign_table']);                $con['SCN'][$i]    = urlencode($value['foreign_field']);                $i++;            }        }        $row = PMA_getForeigners($GLOBALS['db'], $val[0], '', 'foreign');        //echo "<br> INNO ";        //print_r($row);        if ($row !== false) {            foreach ($row as $field => $value) {                $con['C_NAME'][$i] = '';                $con['DTN'][$i]    = urlencode($GLOBALS['db'].".".$val[0]);                $con['DCN'][$i]    = urlencode($field);                $con['STN'][$i]    = urlencode($value['foreign_db'].".".$value['foreign_table']);                $con['SCN'][$i]    = urlencode($value['foreign_field']);                $i++;            }        }    }    $ti = 0;    $script_contr        = '<script type="text/javascript">' . "\n" .        '// <![CDATA[' . "\n" .        'var contr = new Array();' . "\n";    for ($i = 0, $cnt = count($con["C_NAME"]); $i < $cnt; $i++) {        $js_var = ' contr[' . $ti . ']';        $script_contr .= $js_var . " = new Array();\n";        $js_var .= "['" . $con['C_NAME'][$i] . "']";        $script_contr .= $js_var . " = new Array();\n";        if (in_array($con['DTN'][$i], $GLOBALS['PMD_URL']["TABLE_NAME"])         && in_array($con['STN'][$i], $GLOBALS['PMD_URL']["TABLE_NAME"])) {            $js_var .= "['" . $con['DTN'][$i] . "']";            $script_contr .= $js_var . " = new Array();\n";            $m_col = array();//}            $js_var .= "['" . $con['DCN'][$i] . "']";            $script_contr .= $js_var . " = new Array();\n";//}            $script_contr .= $js_var . "[0] = '" . $con['STN'][$i] . "';\n"; //            $script_contr .= $js_var . "[1] = '" . $con['SCN'][$i] . "';\n"; //        }        $ti++;    }    $script_contr .=        '// ]]>' . "\n" .        '</script>' . "\n";    return $script_contr;}/** * @return  array unique or primary indizes */function get_pk_or_unique_keys(){    return get_all_keys(true);}/** * returns all indizes * * @param boolean whether to include ony unique ones * @return  array indizes */function get_all_keys($unique_only = false){    include_once './libraries/Index.class.php';    $keys = array();    foreach ($GLOBALS['PMD']['TABLE_NAME_SMALL'] as $I => $table) {        $schema = $GLOBALS['PMD']['OWNER'][$I];        // for now, take into account only the first index segment        foreach (PMA_Index::getFromTable($table, $schema) as $index) {            if ($unique_only && ! $index->isUnique()) {                continue;            }            $columns = $index->getColumns();            foreach ($columns as $column_name => $dummy) {                $keys[$schema . '.' .$table . '.' . $column_name] = 1;            }        }    }    return $keys;}/** * * * @return  array   ??? */function get_script_tabs(){    $script_tabs        = '<script type="text/javascript">' . "\n" .        '// <![CDATA[' . "\n" .        'var j_tabs = new Array();' . "\n" .        'var h_tabs = new Array();' . "\n" ;    for ($i = 0, $cnt = count($GLOBALS['PMD']['TABLE_NAME']); $i < $cnt; $i++) {        $script_tabs .= "j_tabs['" . $GLOBALS['PMD_URL']['TABLE_NAME'][$i] . "'] = '"            . (PMA_foreignkey_supported($GLOBALS['PMD']['TABLE_TYPE'][$i]) ? '1' : '0') . "';\n";        $script_tabs .="h_tabs['" . $GLOBALS['PMD_URL']['TABLE_NAME'][$i] . "'] = 1;"."\n" ;    }    $script_tabs .=        '// ]]>' . "\n" .        '</script>' . "\n";    return $script_tabs;}/** * @return  array   table positions and sizes */function get_tab_pos(){    $cfgRelation = PMA_getRelationsParam();    if (! $cfgRelation['designerwork']) {        return null;    }    $query = "         SELECT CONCAT_WS('.', `db_name`, `table_name`) AS `name`,                `x` AS `X`,                `y` AS `Y`,                `v` AS `V`,                `h` AS `H`           FROM " . PMA_backquote($cfgRelation['db']) . "." . PMA_backquote($cfgRelation['designer_coords']);    $tab_pos = PMA_DBI_fetch_result($query, 'name', null, $GLOBALS['controllink'], PMA_DBI_QUERY_STORE);    return count($tab_pos) ? $tab_pos : null;}/** * returns  distinct values from $GLOBALS['PMD']['OWNER'] * * @return  array   owner */function get_owners(){    return array_values(array_unique($GLOBALS['PMD']['OWNER']));}get_tabs();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';// Check parametersPMA_checkParameters(array('db', 'table'));$db_is_information_schema = PMA_is_system_schema($db);/** * Set parameters for links * @deprecated */$url_query = PMA_generate_common_url($db, $table);$url_params['db']    = $db;$url_params['table'] = $table;/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = $cfg['DefaultTabDatabase'] . PMA_generate_common_url(array('db' => $db,));$err_url   = $cfg['DefaultTabTable'] . PMA_generate_common_url($url_params);/** * Ensures the database and the table exist (else move to the "parent" script) */require_once './libraries/db_table_exists.lib.php';?>
<?php/** * This example configuration shows how to configure phpMyAdmin for * many hosts that all have identical configuration otherwise. To add * a new host, just drop it into $hosts below. Contributed by * Matthew Hawkins. */$i=0;$hosts = array (    "foo.example.com",    "bar.example.com",    "baz.example.com",    "quux.example.com",);foreach ($hosts as $host) {    $i++;    $cfg['Servers'][$i]['host']     = $host;    $cfg['Servers'][$i]['port']     = '';    $cfg['Servers'][$i]['socket']   = '';    $cfg['Servers'][$i]['connect_type']     = 'tcp';    $cfg['Servers'][$i]['extension']        = 'mysql';    $cfg['Servers'][$i]['compress'] = FALSE;    $cfg['Servers'][$i]['controluser']      = 'pma';    $cfg['Servers'][$i]['controlpass']      = 'pmapass';    $cfg['Servers'][$i]['auth_type']        = 'cookie';    $cfg['Servers'][$i]['user']     = '';    $cfg['Servers'][$i]['password'] = '';    $cfg['Servers'][$i]['only_db']  = '';    $cfg['Servers'][$i]['verbose']  = '';    $cfg['Servers'][$i]['pmadb']    = 'phpmyadmin';    $cfg['Servers'][$i]['bookmarktable']    = 'pma_bookmark';    $cfg['Servers'][$i]['relation'] = 'pma_relation';    $cfg['Servers'][$i]['table_info']       = 'pma_table_info';    $cfg['Servers'][$i]['table_coords']     = 'pma_table_coords';    $cfg['Servers'][$i]['pdf_pages']        = 'pma_pdf_pages';    $cfg['Servers'][$i]['column_info']      = 'pma_column_info';    $cfg['Servers'][$i]['history']  = 'pma_history';    $cfg['Servers'][$i]['designer_coords'] = 'pma_designer_coords';}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';require './libraries/server_common.inc.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';} else {    $replication_types = array();    $replication_info = null;}require './libraries/build_html_for_db.lib.php';/** * avoids 'undefined index' errors */if (empty($_REQUEST['sort_by'])) {    $sort_by = 'SCHEMA_NAME';} else {    $sort_by_whitelist = array(        'SCHEMA_NAME',        'DEFAULT_COLLATION_NAME',        'SCHEMA_TABLES',        'SCHEMA_TABLE_ROWS',        'SCHEMA_DATA_LENGTH',        'SCHEMA_INDEX_LENGTH',        'SCHEMA_LENGTH',        'SCHEMA_DATA_FREE'    );    if (in_array($_REQUEST['sort_by'], $sort_by_whitelist)) {        $sort_by = $_REQUEST['sort_by'];    } else {        $sort_by = 'SCHEMA_NAME';    }}if (isset($_REQUEST['sort_order']) && strtolower($_REQUEST['sort_order']) == 'desc') {    $sort_order = 'desc';} else {    $sort_order = 'asc';}$dbstats    = empty($_REQUEST['dbstats']) ? 0 : 1;$pos        = empty($_REQUEST['pos']) ? 0 : (int) $_REQUEST['pos'];/** * Drops multiple databases */// workaround for IE behavior (it returns some coordinates based on where// the mouse was on the Drop image):if (isset($_REQUEST['drop_selected_dbs_x'])) {    $_REQUEST['drop_selected_dbs'] = true;}if ((isset($_REQUEST['drop_selected_dbs']) || isset($_REQUEST['query_type']))  && ($is_superuser || $cfg['AllowUserDropDatabase'])) {    if (! isset($_REQUEST['selected_dbs']) && ! isset($_REQUEST['query_type'])) {        $message = PMA_Message::error(__('No databases selected.'));    } else {        $action = 'server_databases.php';        $submit_mult = 'drop_db' ;        $err_url = 'server_databases.php?' . PMA_generate_common_url();        if (isset($_REQUEST['selected_dbs'])) {            $selected_db = $_REQUEST['selected_dbs'];        }        include './libraries/mult_submits.inc.php';        unset($action, $submit_mult, $err_url, $selected_db, $GLOBALS['db']);        if (empty($message)) {            $message = PMA_Message::success(__('%s databases have been dropped successfully.'));            if ($mult_btn == __('Yes')) {                $message->addParam(count($selected));            } else {                $message->addParam(0);            }        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']      ? PMA_getImage('s_db.png')      : '')   . ($dbstats ? __('Databases statistics') : __('Databases')) . "\n"   .'</h2>' . "\n";/** * Create database. */if ($cfg['ShowCreateDb']) {    echo '<ul><li id="li_create_database">' . "\n";    include './libraries/display_create_database.lib.php';    echo '    </li>' . "\n";    echo '</ul>' . "\n";}/** * Gets the databases list */if ($server > 0) {    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,        $sort_order, $pos, true);    $databases_count = count($GLOBALS['pma']->databases);} else {    $databases_count = 0;}/** * Displays the page */if ($databases_count > 0) {    echo '<div id="tableslistcontainer">';    reset($databases);    $first_database = current($databases);    // table col order    $column_order = PMA_getColumnOrder();    $_url_params = array(        'pos' => $pos,        'dbstats' => $dbstats,        'sort_by' => $sort_by,        'sort_order' => $sort_order,    );    PMA_listNavigator($databases_count, $pos, $_url_params, 'server_databases.php', 'frame_content', $GLOBALS['cfg']['MaxDbList']);    $_url_params['pos'] = $pos;    echo '<form action="./server_databases.php" method="post" name="dbStatsForm" id="dbStatsForm">' . "\n"       . PMA_generate_common_hidden_inputs($_url_params);    $_url_params['sort_by'] = 'SCHEMA_NAME';    $_url_params['sort_order'] = ($sort_by == 'SCHEMA_NAME' && $sort_order == 'asc') ? 'desc' : 'asc';    echo '<table id="tabledatabases" class="data">' . "\n"       . '<thead>' . "\n"       . '<tr>' . "\n"       . ($is_superuser || $cfg['AllowUserDropDatabase'] ? '        <th></th>' . "\n" : '')       . '    <th><a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"       . '            ' . __('Database') . "\n"       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')       . '        </a></th>' . "\n";    $table_columns = 3;    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                $table_columns += 2;                $colspan = ' colspan="2"';            } else {                $table_columns++;                $colspan = '';            }            $_url_params['sort_by'] = $stat_name;            $_url_params['sort_order'] = ($sort_by == $stat_name && $sort_order == 'desc') ? 'asc' : 'desc';            echo '    <th' . $colspan . '>'                .'<a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"                .'            ' . $stat['disp_name'] . "\n"                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')                .'        </a></th>' . "\n";        }    }    foreach ($replication_types as $type) {      if ($type=="master")        $name = __('Master replication');      elseif ($type == "slave")        $name = __('Slave replication');      if (${"server_{$type}_status"})        echo '    <th>'. $name .'</th>' . "\n";    }    if ($is_superuser && !PMA_DRIZZLE) {        echo '    <th>' . ($cfg['PropertiesIconic'] ? '' : __('Action')) . "\n"           . '    </th>' . "\n";    }    echo '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    foreach ($databases as $current) {        $tr_class = $odd_row ? 'odd' : 'even';        if (PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $tr_class .= ' noclick';        }        echo '<tr class="' . $tr_class . '">' . "\n";        $odd_row = ! $odd_row;        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        echo $generated_html;        echo '</tr>' . "\n";    } // end foreach ($databases as $key => $current)    unset($current, $odd_row);    echo '<tr id="db_summary_row">' . "\n";    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        echo '    <th></th>' . "\n";    }    echo '    <th>' . __('Total') . ': <span id="databases_count">' . $databases_count . '</span></th>' . "\n";    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($stat['footer'], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($stat['footer'], 0);            } else {                $value = htmlentities($stat['footer'], 0);            }            echo '    <th class="value">';            if (isset($stat['description_function'])) {                echo '<dfn title="' . $stat['description_function']($stat['footer']) . '">';            }            echo $value;            if (isset($stat['description_function'])) {                echo '</dfn>';            }            echo '</th>' . "\n";            if ($stat['format'] === 'byte') {                echo '    <th class="unit">' . $unit . '</th>' . "\n";            }        }    }    foreach ($replication_types as $type) {        if (${"server_{$type}_status"}) {            echo '    <th></th>' . "\n";        }    }    if ($is_superuser) {        echo '    <th></th>' . "\n";    }    echo '</tr>' . "\n";    echo '</tbody>' . "\n"        .'</table>' . "\n";    unset($column_order, $stat_name, $stat, $databases, $table_columns);    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        $common_url_query = PMA_generate_common_url(array('sort_by' => $sort_by, 'sort_order' => $sort_order, 'dbstats' => $dbstats));        echo '<img class="selectallarrow" src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png" width="38" height="22" alt="' . __('With selected:') . '" />' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '&amp;checkall=1" onclick="if (markAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Check All') . '</a> / ' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '" onclick="if (unMarkAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Uncheck All') . '</a>' . "\n"           . '<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage('drop_selected_dbs', 'mult_submit', 'drop_selected_dbs', __('Drop'), 'b_deltbl.png');    }    if (empty($dbstats)) {        echo '<ul><li id="li_switch_dbstats"><strong>' . "\n";            echo '        <a href="./server_databases.php?' . $url_query . '&amp;dbstats=1"'                .' title="' . __('Enable Statistics') . '">' . "\n"                .'            ' . __('Enable Statistics');        echo '</a></strong><br />' . "\n";        PMA_Message::notice(__('Note: Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server.'))->display();        echo '</li>' . "\n" . '</ul>' . "\n";    }    echo '</form>';    echo '</div>';} else {    echo __('No databases');}unset($databases_count);/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * This Class interacts with the user to gather the information * about their tables for which they want to export the relational schema * export options are shown to user from they can choose */class PMA_User_Schema{    public $chosenPage;    public $autoLayoutForeign;    public $autoLayoutInternal;    public $pageNumber;    public $c_table_rows;    public $action;    public function setAction($value)    {        $this->action = $value;    }    /**     * This function will process the user defined pages     * and tables which will be exported as Relational schema     * you can set the table positions on the paper via scratchboard     * for table positions, put the x,y co-ordinates     *     * $this->action tells what the Schema is supposed to do     * create and select a page, generate schema etc     *     * @access public     * @return void     */    public function processUserChoice()    {        global $action_choose, $db, $cfgRelation;        if (isset($this->action)) {            switch ($this->action) {            case 'selectpage':                $this->chosenPage = $_REQUEST['chpage'];                if ($action_choose=="1") {                    $this->deleteCoordinates(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->deletePages(                        $db,                        $cfgRelation,                        $this->chosenPage                    );                    $this->chosenPage = 0;                }                break;            case 'createpage':                $this->pageNumber = PMA_REL_create_page(                    $_POST['newpage'],                    $cfgRelation,                    $db                );                $this->autoLayoutForeign = isset($_POST['auto_layout_foreign'])                    ? "1"                    : null;                $this->autoLayoutInternal = isset($_POST['auto_layout_internal'])                    ? "1"                    : null;                $this->processRelations(                    $db,                    $this->pageNumber,                    $cfgRelation                );                break;            case 'edcoord':                $this->chosenPage = $_POST['chpage'];                $this->c_table_rows = $_POST['c_table_rows'];                $this->_editCoordinates($db, $cfgRelation);                break;            case 'delete_old_references':                $this->_deleteTableRows(                    $_POST['delrow'],                    $cfgRelation,                    $db,                    $_POST['chpage']                );                break;            case 'process_export':                $this->_processExportSchema();                break;            } // end switch        } // end if (isset($do))    }    /**     * shows/displays the HTML FORM to create the page     *     * @param string $db name of the selected database     *     * @return void     * @access public     */    public function showCreatePageDialog($db)    {        ?>        <form method="post" action="schema_edit.php" name="frm_create_page">        <fieldset>        <legend>        <?php echo __('Create a page') . "\n"; ?>        </legend>        <?php echo PMA_generate_common_hidden_inputs($db); ?>        <input type="hidden" name="do" value="createpage" />        <table>        <tr>        <td><label for="id_newpage"><?php echo __('Page name'); ?></label></td>        <td><input type="text" name="newpage" id="id_newpage" size="20" maxlength="50" /></td>        </tr>        <tr>        <td><?php echo __('Automatic layout based on'); ?></td>        <td>        <input type="checkbox" name="auto_layout_internal" id="id_auto_layout_internal" /><label for="id_auto_layout_internal">        <?php echo __('Internal relations'); ?></label><br />        <?php        /*         * Check to see whether INNODB and PBXT storage engines are Available in MYSQL PACKAGE         * If available, then provide AutoLayout for Foreign Keys in Schema View         */        if (PMA_StorageEngine::isValid('InnoDB') || PMA_StorageEngine::isValid('PBXT')) {            ?>            <input type="checkbox" name="auto_layout_foreign" id="id_auto_layout_foreign" /><label for="id_auto_layout_foreign">            <?php echo __('FOREIGN KEY'); ?></label><br />            <?php        }        ?>        </td></tr>        </table>        </fieldset>        <fieldset class="tblFooters">        <input type="submit" value="<?php echo __('Go'); ?>" />        </fieldset>        </form>        <?php    }    /**     * shows/displays the created page names in a drop down list     * User can select any page number and edit it using dashboard etc     *     * @return void     * @access public     */    public function selectPage()    {        global $db,$table,$cfgRelation;        $page_query = 'SELECT * FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'';        $page_rs    = PMA_query_as_controluser($page_query, false, PMA_DBI_QUERY_STORE);        if ($page_rs && PMA_DBI_num_rows($page_rs) > 0) {            ?>            <form method="get" action="schema_edit.php" name="frm_select_page">            <fieldset>            <legend>            <?php echo __('Please choose a page to edit') . "\n"; ?>            </legend>            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="do" value="selectpage" />            <select name="chpage" id="chpage" class="autosubmit">            <option value="0"><?php echo __('Select page'); ?></option>            <?php            while ($curr_page = PMA_DBI_fetch_assoc($page_rs)) {                echo "\n" . '        '                    . '<option value="' . $curr_page['page_nr'] . '"';                if (isset($this->chosenPage)                    && $this->chosenPage == $curr_page['page_nr']                ) {                    echo ' selected="selected"';                }                echo '>' . $curr_page['page_nr'] . ': '                    . htmlspecialchars($curr_page['page_descr']) . '</option>';            } // end while            echo "\n";            ?>            </select>            <?php            $choices = array(                 '0' => __('Edit'),                 '1' => __('Delete')            );            PMA_display_html_radio('action_choose', $choices, '0', false);            unset($choices);            ?>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" /><br />            </fieldset>            </form>            <?php        } // end IF        echo "\n";    } // end function    /**     * A dashboard is displayed to AutoLayout the position of tables     * users can drag n drop the tables and change their positions     *     * @return void     * @access public     */    public function showTableDashBoard()    {        global $db, $cfgRelation, $table, $with_field_names;        /*         * We will need an array of all tables in this db         */        $selectboxall = array('--');        $alltab_rs    = PMA_DBI_query(            'SHOW TABLES FROM ' . PMA_backquote($db) . ';',            null,            PMA_DBI_QUERY_STORE        );        while ($val = @PMA_DBI_fetch_row($alltab_rs)) {               $selectboxall[] = $val[0];        }        $tabExist = array();        /*         * Now if we already have chosen a page number then we should         * show the tables involved         */        if (isset($this->chosenPage) && $this->chosenPage > 0) {            echo "\n";            ?>            <h2><?php echo __('Select Tables'); ?></h2>            <?php            $page_query = 'SELECT * FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db'])                . '.' . PMA_backquote($cfgRelation['table_coords'])                . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                . ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';            $page_rs    = PMA_query_as_controluser($page_query, false);            $array_sh_page = array();            while ($temp_sh_page = @PMA_DBI_fetch_assoc($page_rs)) {                   $array_sh_page[] = $temp_sh_page;            }            /*             * Display WYSIWYG parts             */            if (! isset($_POST['with_field_names']) && ! isset($_POST['showwysiwyg'])) {                $with_field_names = true;            }            $this->_displayScratchboardTables($array_sh_page);            ?>            <form method="post" action="schema_edit.php" name="edcoord">            <?php echo PMA_generate_common_hidden_inputs($db, $table); ?>            <input type="hidden" name="chpage" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <input type="hidden" name="do" value="edcoord" />            <table border="0">            <tr>                <th><?php echo __('Table'); ?></th>                <th><?php echo __('Delete'); ?></th>                <th>X</th>                <th>Y</th>            </tr>            <?php            if (isset($ctable)) {                unset($ctable);            }            $i = 0;            $odd_row = true;            foreach ($array_sh_page as $dummy_sh_page => $sh_page) {                $_mtab            =  $sh_page['table_name'];                $tabExist[$_mtab] =  false;                echo "\n" . '    <tr class="noclick ';                if ($odd_row) {                    echo 'odd';                } else {                    echo 'even';                }                echo '">';                $odd_row != $odd_row;                echo "\n" . '        <td>'                     . "\n" . '            <select name="c_table_' . $i . '[name]">';                foreach ($selectboxall as $key => $value) {                    echo "\n" . '                <option value="' . htmlspecialchars($value) . '"';                    if ($value == $sh_page['table_name']) {                        echo ' selected="selected"';                        $tabExist[$_mtab] = true;                    }                    echo '>' . htmlspecialchars($value) . '</option>';                }                echo "\n" . '            </select>'                     . "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'x\', this.value)" name="c_table_' . $i . '[x]" value="' . $sh_page['x'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '        <td>'                     . "\n" . '            <input type="text" onchange="dragPlace(' . $i . ', \'y\', this.value)" name="c_table_' . $i . '[y]" value="' . $sh_page['y'] . '" />';                echo "\n" . '        </td>';                echo "\n" . '    </tr>';                $i++;            }            /*             * Add one more empty row             */            echo "\n" . '    <tr class="noclick ';            if ($odd_row) {                echo 'odd';            } else {                echo 'even';            }            $odd_row != $odd_row;            echo '">';            echo "\n" . '        <td>'                 . "\n" . '            <select name="c_table_' . $i . '[name]">';            foreach ($selectboxall as $key => $value) {                echo "\n" . '                <option value="' . htmlspecialchars($value) . '">' . htmlspecialchars($value) . '</option>';            }            echo "\n" . '            </select>'                 . "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="checkbox" id="id_c_table_' . $i .'" name="c_table_' . $i . '[delete]" value="y" /><label for="id_c_table_' . $i .'">' . __('Delete') . '</label>';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[x]" value="' . (isset($sh_page['x'])?$sh_page['x']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '        <td>'                 . "\n" . '            <input type="text" name="c_table_' . $i . '[y]" value="' . (isset($sh_page['y'])?$sh_page['y']:'') . '" />';            echo "\n" . '        </td>';            echo "\n" . '    </tr>';            echo "\n" . '    </table>' . "\n";            echo "\n" . '    <input type="hidden" name="c_table_rows" value="' . ($i + 1) . '" />';            echo "\n" . '    <input type="hidden" id="showwysiwyg" name="showwysiwyg" value="' . ((isset($showwysiwyg) && $showwysiwyg == '1') ? '1' : '0') . '" />';            echo "\n" . '    <input type="checkbox" name="with_field_names" ' . (isset($with_field_names) ? 'checked="checked"' : ''). ' />' . __('Column names') . '<br />';            echo "\n" . '    <input type="submit" value="' . __('Save') . '" />';            echo "\n" . '</form>' . "\n\n";        } // end if        if (isset($tabExist)) {            $this->_deleteTables($db, $this->chosenPage, $tabExist);        }    }    /**     * show Export relational schema generation options     * user can select export type of his own choice     * and the attributes related to it     *     * @return void     * @access public     */    public function displaySchemaGenerationOptions()    {        global $cfg,$pmaThemeImage,$db,$test_rs,$chpage;        ?>        <form method="post" action="schema_export.php">            <fieldset>            <legend>            <?php            echo PMA_generate_common_hidden_inputs($db);            if ($cfg['PropertiesIconic']) {                echo PMA_getImage('b_views.png');            }            echo __('Display relational schema');            ?>:            </legend>            <select name="export_type" id="export_type">                <option value="pdf" selected="selected">PDF</option>                <option value="svg">SVG</option>                <option value="dia">DIA</option>                <option value="visio">Visio</option>                <option value="eps">EPS</option>            </select>            <label><?php echo __('Select Export Relational Type');?></label><br />            <?php            if (isset($test_rs)) {            ?>            <label for="pdf_page_number_opt"><?php echo __('Page number:'); ?></label>            <select name="pdf_page_number" id="pdf_page_number_opt">                <?php                while ($pages = @PMA_DBI_fetch_assoc($test_rs)) {                    echo '                <option value="' . $pages['page_nr'] . '">'                        . $pages['page_nr'] . ': ' . htmlspecialchars($pages['page_descr']) . '</option>' . "\n";                } // end while                PMA_DBI_free_result($test_rs);                unset($test_rs);                ?>            </select><br />            <?php } else { ?>            <input type="hidden" name="pdf_page_number" value="<?php echo htmlspecialchars($this->chosenPage); ?>" />            <?php } ?>            <input type="hidden" name="do" value="process_export" />            <input type="hidden" name="chpage" value="<?php echo $chpage; ?>" />            <input type="checkbox" name="show_grid" id="show_grid_opt" />            <label for="show_grid_opt"><?php echo __('Show grid'); ?></label><br />            <input type="checkbox" name="show_color" id="show_color_opt" checked="checked" />            <label for="show_color_opt"><?php echo __('Show color'); ?></label><br />            <input type="checkbox" name="show_table_dimension" id="show_table_dim_opt" />            <label for="show_table_dim_opt"><?php echo __('Show dimension of tables'); ?>            </label><br />            <input type="checkbox" name="all_table_same_wide" id="all_table_same_wide" />            <label for="all_table_same_wide"><?php echo __('Display all tables with the same width'); ?>            </label><br />            <input type="checkbox" name="with_doc" id="with_doc" checked="checked" />            <label for="with_doc"><?php echo __('Data Dictionary'); ?></label><br />            <input type="checkbox" name="show_keys" id="show_keys" />            <label for="show_keys"><?php echo __('Only show keys'); ?></label><br />            <select name="orientation" id="orientation_opt" onchange="refreshDragOption('pdflayout');" >                <option value="L"><?php echo __('Landscape');?></option>                <option value="P"><?php echo __('Portrait');?></option>            </select>            <label for="orientation_opt"><?php echo __('Orientation'); ?></label>            <br />            <select name="paper" id="paper_opt" onchange="refreshDragOption('pdflayout');">                <?php                foreach ($cfg['PDFPageSizes'] as $key => $val) {                        echo '<option value="' . $val . '"';                        if ($val == $cfg['PDFDefaultPageSize']) {                            echo ' selected="selected"';                        }                        echo ' >' . $val . '</option>' . "\n";                }                ?>            </select>            <label for="paper_opt"><?php echo __('Paper size'); ?></label>            </fieldset>            <fieldset class="tblFooters">            <input type="submit" value="<?php echo __('Go'); ?>" />            </fieldset>        </form>        <?php    }    /**    * Check if there are tables that need to be deleted in dashboard,    * if there are, ask the user for allowance    *    * @param string  $db       name of database selected    * @param integer $chpage   selected page    * @param array   $tabExist    *    * @return void    * @access private    */    private function _deleteTables($db, $chpage, $tabExist)    {        global $table;        $_strtrans  = '';        $_strname   = '';        $shoot      = false;        if (! empty($tabExist) && is_array($tabExist)) {            foreach ($tabExist as $key => $value) {                if (! $value) {                    $_strtrans  .= '<input type="hidden" name="delrow[]" value="' . htmlspecialchars($key) . '" />' . "\n";                    $_strname   .= '<li>' . htmlspecialchars($key) . '</li>' . "\n";                    $shoot       = true;                }            }            if ($shoot) {                echo '<form action="schema_edit.php" method="post">' . "\n"                    . PMA_generate_common_hidden_inputs($db)                    . '<input type="hidden" name="do" value="delete_old_references" />' . "\n"                    . '<input type="hidden" name="chpage" value="' . htmlspecialchars($chpage) . '" />' . "\n"                    . __('The current page has references to tables that no longer exist. Would you like to delete those references?')                    . '<ul>' . "\n"                    . $_strname                    . '</ul>' . "\n"                    . $_strtrans                    . '<input type="submit" value="' . __('Go') . '" />' . "\n"                    . '</form>';            }        }    }    /**     * Check if there are tables that need to be deleted in dashboard,     * if there are, ask the user for allowance     *     * @return void     * @access private     */    private function _displayScratchboardTables($array_sh_page)    {        global $with_field_names, $db;        ?>        <script type="text/javascript" src="./js/dom-drag.js"></script>        <form method="post" action="schema_edit.php" name="dragdrop">        <input type="button" name="dragdrop" value="<?php echo __('Toggle scratchboard'); ?>" onclick="ToggleDragDrop('pdflayout');" />        <input type="button" name="dragdropreset" value="<?php echo __('Reset'); ?>" onclick="resetDrag();" />        </form>        <div id="pdflayout" class="pdflayout" style="visibility: hidden;">        <?php        $draginit = '';        $draginit2 = '';        $reset_draginit = '';        $i = 0;        foreach ($array_sh_page as $key => $temp_sh_page) {            $drag_x = $temp_sh_page['x'];            $drag_y = $temp_sh_page['y'];            $draginit2      .= ' Drag.init($("#table_' . $i . '")[0], null, 0, parseInt(myid.style.width)-2, 0, parseInt(myid.style.height)-5);' . "\n";            $draginit2      .= '    $("#table_' . $i . '")[0].onDrag = function (x, y) { document.edcoord.elements["c_table_' . $i . '[x]"].value = parseInt(x); document.edcoord.elements["c_table_' . $i . '[y]"].value = parseInt(y) }' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.left = "' . $drag_x . 'px";' . "\n";            $draginit       .= '    $("#table_' . $i . '")[0].style.top  = "' . $drag_y . 'px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.left = "2px";' . "\n";            $reset_draginit .= '    $("#table_' . $i . '")[0].style.top  = "' . (15 * $i) . 'px";' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[x]"].value = "2"' . "\n";            $reset_draginit .= '    document.edcoord.elements["c_table_' . $i . '[y]"].value = "' . (15 * $i) . '"' . "\n";            echo '<div id="table_' . $i . '" class="pdflayout_table"><u>' . $temp_sh_page['table_name'] . '</u>';            if (isset($with_field_names)) {                $fields = PMA_DBI_get_columns($db, $temp_sh_page['table_name']);                // if the table has been dropped from outside phpMyAdmin,                // we can no longer obtain its columns list                if ($fields) {                    foreach ($fields as $row) {                        echo '<br />' . htmlspecialchars($row['Field']) . "\n";                    }                }            }            echo '</div>' . "\n";            $i++;        }        ?>        </div>        <script type="text/javascript">        //<![CDATA[        function PDFinit() {            refreshLayout();            myid = $('#pdflayout')[0];            <?php echo $draginit; ?>            TableDragInit();        }        function TableDragInit() {            myid = $('#pdflayout')[0];            <?php echo $draginit2; ?>        }        function resetDrag() {            <?php echo $reset_draginit; ?>        }        //]]>        </script>        <?php    }    /**     * delete the table rows with table co-ordinates     *     * @param int     $delrow      delete selected table from list of tables     * @param array   $cfgRelation relation settings     * @param string  $db          database name     * @param integer $chpage      selected page for adding relations etc     *     * @return void     * @access private     */    private function _deleteTableRows($delrow,$cfgRelation,$db,$chpage)    {        foreach ($delrow as $current_row) {            $del_query = 'DELETE FROM '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' ' . "\n"                .   ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\'' . "\n"                .   ' AND table_name = \'' . PMA_sqlAddSlashes($current_row) . '\'' . "\n"                .   ' AND pdf_page_number = \'' . PMA_sqlAddSlashes($chpage) . '\'';                echo $del_query;            PMA_query_as_controluser($del_query, false);        }    }    /**     * get all the export options and verify     * call and include the appropriate Schema Class depending on $export_type     *     * @return void     * @access private     */    private function _processExportSchema()    {        /**        * Settings for relation stuff        */        include_once './libraries/transformations.lib.php';        include_once './libraries/Index.class.php';        /**         * default is PDF, otherwise validate it's only letters a-z         */        global  $db,$export_type;        if (!isset($export_type) || !preg_match('/^[a-zA-Z]+$/', $export_type)) {            $export_type = 'pdf';        }        PMA_DBI_select_db($db);        include "./libraries/schema/" . ucfirst($export_type) . "_Relation_Schema.class.php";        $obj_schema = eval("new PMA_" . ucfirst($export_type) . "_Relation_Schema();");    }    /**     * delete X and Y coordinates     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deleteCoordinates($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * delete pages     *     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     * @param integer $choosePage  selected page for adding relations etc     *     * @return void     * @access private     */    public function deletePages($db, $cfgRelation, $choosePage)    {        $query = 'DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['pdf_pages'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   page_nr = \'' . PMA_sqlAddSlashes($choosePage) . '\'';        PMA_query_as_controluser($query, false);    }    /**     * process internal and foreign key relations     *     * @param string  $db          The database name     * @param integer $pageNumber  document number/Id     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function processRelations($db, $pageNumber, $cfgRelation)    {        /*         * A u t o m a t i c    l a y o u t         *         * There are 2 kinds of relations in PMA         * 1) Internal Relations 2) Foreign Key Relations         */        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $all_tables = array();        }        if (isset($this->autoLayoutForeign)) {            /*             * get the tables list             * who support FOREIGN KEY, it's not             * important that we group together InnoDB tables             * and PBXT tables, as this logic is just to put             * the tables on the layout, not to determine relations             */            $tables = PMA_DBI_get_tables_full($db);            $foreignkey_tables = array();            foreach ($tables as $table_name => $table_properties) {                if (PMA_foreignkey_supported($table_properties['ENGINE'])) {                    $foreignkey_tables[] = $table_name;                }            }            $all_tables = $foreignkey_tables;            /*             * could be improved by finding the tables which have the             * most references keys and placing them at the beginning             * of the array (so that they are all center of schema)             */            unset($tables, $foreignkey_tables);        }        if (isset($this->autoLayoutInternal)) {            /*             * get the tables list who support Internal Relations;             * This type of relations will be created when             * you setup the PMA tables correctly             */            $master_tables = 'SELECT COUNT(master_table), master_table'                . ' FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['relation'])                . ' WHERE master_db = \'' . PMA_sqlAddSlashes($db) . '\''                . ' GROUP BY master_table'                . ' ORDER BY COUNT(master_table) DESC';            $master_tables_rs = PMA_query_as_controluser(                $master_tables, false, PMA_DBI_QUERY_STORE            );            if ($master_tables_rs && PMA_DBI_num_rows($master_tables_rs) > 0) {                /* first put all the master tables at beginning                 * of the list, so they are near the center of                 * the schema                 */                while (list(, $master_table) = PMA_DBI_fetch_row($master_tables_rs)) {                       $all_tables[] = $master_table;                }                /* Now for each master, add its foreigns into an array                 * of foreign tables, if not already there                 * (a foreign might be foreign for more than                 * one table, and might be a master itself)                 */                $foreign_tables = array();                foreach ($all_tables as $master_table) {                    $foreigners = PMA_getForeigners($db, $master_table);                    foreach ($foreigners as $foreigner) {                        if (! in_array($foreigner['foreign_table'], $foreign_tables)) {                            $foreign_tables[] = $foreigner['foreign_table'];                        }                    }                }                /*                 * Now merge the master and foreign arrays/tables                 */                foreach ($foreign_tables as $foreign_table) {                    if (! in_array($foreign_table, $all_tables)) {                        $all_tables[] = $foreign_table;                    }                }            }        }        if (isset($this->autoLayoutInternal) || isset($this->autoLayoutForeign)) {            $this->addRelationCoordinates(                $all_tables, $pageNumber, $db, $cfgRelation            );        }        $this->chosenPage = $pageNumber;    }    /**     * Add X and Y coordinates for a table     *     * @param array   $all_tables  A list of all tables involved     * @param integer $pageNumber  document number/Id     * @param string  $db          The database name     * @param array   $cfgRelation relation settings     *     * @return void     * @access private     */    public function addRelationCoordinates($all_tables, $pageNumber, $db, $cfgRelation)    {        /*         * Now generate the coordinates for the schema         * in a clockwise spiral and add to co-ordinates table         */        $pos_x = 300;        $pos_y = 300;        $delta = 110;        $delta_mult = 1.10;        $direction = "right";        foreach ($all_tables as $current_table) {            /*            * save current table's coordinates            */            $insert_query = 'INSERT INTO '                . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                . PMA_backquote($cfgRelation['table_coords']) . ' '                . '(db_name, table_name, pdf_page_number, x, y) '                . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                . PMA_sqlAddSlashes($current_table) . '\',' . $pageNumber                . ',' . $pos_x . ',' . $pos_y . ')';            PMA_query_as_controluser($insert_query, false);            /*             * compute for the next table             */            switch ($direction) {            case 'right':                $pos_x    += $delta;                $direction = "down";                $delta    *= $delta_mult;                break;            case 'down':                $pos_y    += $delta;                $direction = "left";                $delta    *= $delta_mult;                break;            case 'left':                $pos_x    -= $delta;                $direction = "up";                $delta    *= $delta_mult;                break;            case 'up':                $pos_y    -= $delta;                $direction = "right";                $delta    *= $delta_mult;                break;            }        }    }    /**     * update X and Y coordinates for a table     *     * @param string $db          The database name     * @param array  $cfgRelation relation settings     *     * @return void     * @access private     */    private function _editCoordinates($db, $cfgRelation)    {        for ($i = 0; $i < $this->c_table_rows; $i++) {            $arrvalue = 'c_table_' . $i;            global $$arrvalue;            $arrvalue = $$arrvalue;            if (! isset($arrvalue['x']) || $arrvalue['x'] == '') {                $arrvalue['x'] = 0;            }            if (! isset($arrvalue['y']) || $arrvalue['y'] == '') {                $arrvalue['y'] = 0;            }            if (isset($arrvalue['name']) && $arrvalue['name'] != '--') {                $test_query = 'SELECT * FROM '                    . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                    . PMA_backquote($cfgRelation['table_coords'])                    . ' WHERE db_name = \'' .  PMA_sqlAddSlashes($db) . '\''                    . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                    . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                $test_rs = PMA_query_as_controluser($test_query, false, PMA_DBI_QUERY_STORE);                //echo $test_query;                if ($test_rs && PMA_DBI_num_rows($test_rs) > 0) {                    if (isset($arrvalue['delete']) && $arrvalue['delete'] == 'y') {                        $ch_query = 'DELETE FROM '                            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'                            . PMA_backquote($cfgRelation['table_coords'])                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    } else {                        $ch_query = 'UPDATE ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                            . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                            . 'SET x = ' . $arrvalue['x'] . ', y= ' . $arrvalue['y']                            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''                            . ' AND   table_name = \'' . PMA_sqlAddSlashes($arrvalue['name']) . '\''                            . ' AND   pdf_page_number = \'' . PMA_sqlAddSlashes($this->chosenPage) . '\'';                    }                } else {                    $ch_query = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db'])                        . '.' . PMA_backquote($cfgRelation['table_coords']) . ' '                        . '(db_name, table_name, pdf_page_number, x, y) '                        . 'VALUES (\'' . PMA_sqlAddSlashes($db) . '\', \''                        . PMA_sqlAddSlashes($arrvalue['name']) . '\', \''                        . PMA_sqlAddSlashes($this->chosenPage) . '\','                        . $arrvalue['x'] . ',' . $arrvalue['y'] . ')';                }                //echo $ch_query;                PMA_query_as_controluser($ch_query, false);            } // end if        } // end for    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Server synchronisation functions. * * @package PhpMyAdmin *//** * Places matching tables in source and target databases in $matching_tables * array whereas $uncommon_source_tables array gets the tables present in * source database but are absent from target database.  Criterion for * matching tables is just comparing their names. * * @param array $trg_tables              array of target database table names, * @param array $src_tables              array of source database table names, * @param array &$matching_tables        empty array passed by reference to save *                                       names of matching tables, * @param array &$uncommon_source_tables empty array passed by reference to save *                                       names of tables present in source database *                                       but absent from target database */function PMA_getMatchingTables($trg_tables, $src_tables, &$matching_tables, &$uncommon_source_tables){    for ($k=0; $k< sizeof($src_tables); $k++) {        $present_in_target = false;        for ($l=0; $l < sizeof($trg_tables); $l++) {            if ($src_tables[$k] === $trg_tables[$l]) {                $present_in_target = true;                $matching_tables[] = $src_tables[$k];            }        }        if ($present_in_target === false) {            $uncommon_source_tables[] = $src_tables[$k];        }    }}/** * Places tables present in target database but are absent from source database * * @param array $trg_tables              array of target database table names, * @param array $matching_tables         matching tables array containing names *                                       of matching tables, * @param array &$uncommon_target_tables empty array passed by reference to save *                                       names of tables presnet in target database *                                       but absent from source database */function PMA_getNonMatchingTargetTables($trg_tables, $matching_tables, &$uncommon_target_tables){    for ($c=0; $c<sizeof($trg_tables); $c++) {        $match = false;        for ($d=0; $d < sizeof($matching_tables); $d++) {            if ($trg_tables[$c] === $matching_tables[$d]) {                $match=true;            }        }        if ($match === false) {            $uncommon_target_tables[] = $trg_tables[$c];        }    }}/** * Finds the difference in source and target matching tables by * first comparing source table's primary key entries with target table enteries. * It gets the field names for the matching table also for comparisons. * If the entry is found in target table also then it is checked for the remaining * field values also, in order to check whether update is required or not. * If update is required, it is placed in $update_array * Otherwise that entry is placed in the $insert_array. * * @param string  $src_db                  name of source database * @param string  $trg_db                  name of target database * @param db_link $src_link                connection established with source server * @param db_link $trg_link                connection established with target server * @param array   &$matching_table         array containing matching table names * @param array   &$matching_tables_fields A two dimensional array passed by reference to contain names of fields for each matching table * @param array   &$update_array           A three dimensional array passed by reference to *                                         contain updates required for each matching table * @param array   &$insert_array           A three dimensional array passed by reference to *                                         contain inserts required for each matching table * @param array   &$delete_array           Unused * @param array   &$fields_num             A two dimensional array passed by reference to *                                         contain number of fields for each matching table * @param int     $matching_table_index    Index of a table from $matching_table array * @param array   &$matching_tables_keys   A two dimensional array passed by reference to contain names of keys for each matching table */function PMA_dataDiffInTables($src_db, $trg_db, $src_link, $trg_link, &$matching_table, &$matching_tables_fields,    &$update_array, &$insert_array, &$delete_array, &$fields_num, $matching_table_index, &$matching_tables_keys){    if (isset($matching_table[$matching_table_index])) {        $fld = array();        $fld_results = PMA_DBI_get_columns($src_db, $matching_table[$matching_table_index], null, true, $src_link);        $is_key = array();        if (isset($fld_results)) {            foreach ($fld_results as $each_field) {                $field_name = $each_field['Field'];                if ($each_field['Key'] == 'PRI') {                    $is_key[] = $field_name;                }                $fld[] = $field_name;            }        }        $matching_tables_fields[$matching_table_index] = $fld;        $fields_num[$matching_table_index] = sizeof($fld);        $matching_tables_keys[$matching_table_index] = $is_key;        $source_result_set = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $is_key, $src_link);        $source_size = sizeof($source_result_set);        $trg_fld_results = PMA_DBI_get_columns($trg_db, $matching_table[$matching_table_index], null, true, $trg_link);        $all_keys_match = true;        $trg_keys = array();        if (isset($trg_fld_results)) {            foreach ($trg_fld_results as $each_field) {                if ($each_field['Key'] == 'PRI') {                    $trg_keys[] = $each_field['Field'];                    if (! (in_array($each_field['Field'], $is_key))) {                        $all_keys_match = false;                    }                }            }        }        $update_row = 0;        $insert_row = 0;        for ($j = 0; $j < $source_size; $j++) {            $starting_index = 0;            $update_field = 0;            if (isset($source_result_set[$j]) && ($all_keys_match)) {                // Query the target server to see which rows already exist                $trg_select_query = "SELECT * FROM " . PMA_backquote($trg_db) . "."                    . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                if (sizeof($is_key) == 1) {                    $trg_select_query .= PMA_backquote($is_key[0]). "='" . $source_result_set[$j] . "'";                } elseif (sizeof($is_key) > 1) {                    for ($k=0; $k < sizeof($is_key); $k++) {                        $trg_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                        if ($k < (sizeof($is_key)-1)) {                            $trg_select_query .= " AND ";                        }                    }                }                $target_result_set = PMA_DBI_fetch_result($trg_select_query, null, null, $trg_link);                if ($target_result_set) {                    // Fetch the row from the source server to do a comparison                    $src_select_query = "SELECT * FROM " . PMA_backquote($src_db) . "."                        . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    if (sizeof($is_key) == 1) {                        $src_select_query .= PMA_backquote($is_key[0]) . "='" . $source_result_set[$j] . "'";                    } elseif (sizeof($is_key) > 1) {                        for ($k=0; $k< sizeof($is_key); $k++) {                            $src_select_query .= PMA_backquote($is_key[$k]) . "='" . $source_result_set[$j][$is_key[$k]] . "'";                            if ($k < (sizeof($is_key) - 1)) {                                $src_select_query .= " AND ";                            }                        }                    }                    $src_result_set = PMA_DBI_fetch_result($src_select_query, null, null, $src_link);                    /**                    * Comparing each corresponding field of the source and target matching rows.                    * Placing the primary key, value of primary key, field to be updated, and the                    * new value of field to be updated in each row of the update array.                    */                    for ($m = 0; ($m < $fields_num[$matching_table_index]) && ($starting_index == 0) ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (! (in_array($fld[$m], $is_key)))) {                                    if (sizeof($is_key) == 1) {                                        if ($source_result_set[$j]) {                                            $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                        }                                    } elseif (sizeof($is_key) > 1) {                                        for ($n=0; $n < sizeof($is_key); $n++) {                                            if (isset($src_result_set[0][$is_key[$n]])) {                                                $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                            }                                        }                                    }                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if (isset($src_result_set[0][$fld[$m]])) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $starting_index = $m;                                    $update_row++;                                }                            } else {                                if (sizeof($is_key) == 1) {                                    if ($source_result_set[$j]) {                                        $update_array[$matching_table_index][$update_row][$is_key[0]] = $source_result_set[$j];                                    }                                } elseif (sizeof($is_key) > 1) {                                    for ($n = 0; $n < sizeof($is_key); $n++) {                                        if (isset($src_result_set[0][$is_key[$n]])) {                                            $update_array[$matching_table_index][$update_row][$is_key[$n]] = $src_result_set[0][$is_key[$n]];                                        }                                    }                                }                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if (isset($src_result_set[0][$fld[$m]])) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $starting_index = $m;                                $update_row++;                            }                        }                    }                    for ($m = $starting_index + 1; $m < $fields_num[$matching_table_index] ; $m++) {                        if (isset($src_result_set[0][$fld[$m]])) {                            if (isset($target_result_set[0][$fld[$m]])) {                                if (($src_result_set[0][$fld[$m]] != $target_result_set[0][$fld[$m]]) && (!(in_array($fld[$m], $is_key)))) {                                    $update_row--;                                    $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                    $update_field++;                                    if ($src_result_set[0][$fld[$m]]) {                                        $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                        $update_field++;                                    }                                    $update_row++;                                }                            } else {                                $update_row--;                                $update_array[$matching_table_index][$update_row][$update_field] = $fld[$m];                                $update_field++;                                if ($src_result_set[0][$fld[$m]]) {                                    $update_array[$matching_table_index][$update_row][$update_field] = $src_result_set[0][$fld[$m]];                                    $update_field++;                                }                                $update_row++;                            }                        }                    }                } else {                    /**                     * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                     */                    if (sizeof($is_key) == 1) {                        if (isset($source_result_set[$j])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                        }                    } elseif (sizeof($is_key) > 1) {                        for ($l = 0; $l < sizeof($is_key); $l++) {                            if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                                $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                            }                        }                    }                    $insert_row++;                }            } else {                /**                 * Placing the primary key, and the value of primary key of the row that is to be inserted in the target table                 * This condition is met when there is an additional column in the source table                 */                if (sizeof($is_key) == 1) {                    if (isset($source_result_set[$j])) {                        $insert_array[$matching_table_index][$insert_row][$is_key[0]] = $source_result_set[$j];                    }                } elseif (sizeof($is_key) > 1) {                    for ($l = 0; $l < sizeof($is_key); $l++) {                        if (isset($source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]])) {                            $insert_array[$matching_table_index][$insert_row][$is_key[$l]] = $source_result_set[$j][$matching_tables_fields[$matching_table_index][$l]];                        }                    }                }                $insert_row++;            }        } // for loop ends    }}/** * Finds the rows which are to be deleted from target table. * * @param array   &$delete_array        array containing rows that are to be deleted * @param array   $matching_table       array containing matching table names * @param int     $matching_table_index index of a table from $matching_table array * @param array   $trg_keys             array of target table keys * @param array   $src_keys             array of source table keys * @param string  $trg_db               name of target database * @param db_link $trg_link             connection established with target server * @param string  $src_db               name of source database * @param db_link $src_link             connection established with source server */function PMA_findDeleteRowsFromTargetTables(&$delete_array, $matching_table, $matching_table_index, $trg_keys, $src_keys, $trg_db, $trg_link, $src_db, $src_link){    if (isset($trg_keys[$matching_table_index])) {        $target_key_values = PMA_get_column_values($trg_db, $matching_table[$matching_table_index], $trg_keys[$matching_table_index], $trg_link);    }    if (isset($src_keys[$matching_table_index])) {        $source_key_values = PMA_get_column_values($src_db, $matching_table[$matching_table_index], $src_keys[$matching_table_index], $src_link);    }    $all_keys_match = 1;    for ($a = 0; $a < sizeof($trg_keys[$matching_table_index]); $a++) {        if (isset($trg_keys[$matching_table_index][$a])) {            if (! (in_array($trg_keys[$matching_table_index][$a], $src_keys[$matching_table_index]))) {                $all_keys_match = 0;            }        }    }    if (! ($all_keys_match)) {        if (isset($target_key_values)) {            $delete_array[$matching_table_index] = $target_key_values;        }    }    if (isset($trg_keys[$matching_table_index])) {        if ((sizeof($trg_keys[$matching_table_index]) == 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    if (! (in_array($target_key_values[$i], $source_key_values))) {                        $delete_array[$matching_table_index][$row] = $target_key_values[$i];                        $row++;                    }                }            }        } elseif ((sizeof($trg_keys[$matching_table_index]) > 1) && $all_keys_match) {            $row = 0;            if (isset($target_key_values)) {                for ($i = 0; $i < sizeof($target_key_values); $i++) {                    $is_present = false;                    for ($j = 0; $j < sizeof($source_key_values) && ($is_present == false) ; $j++) {                        $check = true;                        for ($k = 0; $k < sizeof($trg_keys[$matching_table_index]); $k++) {                            if ($target_key_values[$i][$trg_keys[$matching_table_index][$k]] != $source_key_values[$j][$trg_keys[$matching_table_index][$k]]) {                                $check = false;                            }                        }                        if ($check) {                            $is_present = true;                        }                    }                    if (! ($is_present)) {                        for ($l = 0; $l < sizeof($trg_keys[$matching_table_index]); $l++) {                            $delete_array[$matching_table_index][$row][$trg_keys[$matching_table_index][$l]] = $target_key_values[$i][$trg_keys[$matching_table_index][$l]];                        }                        $row++;                    }                }            }        }    }}/** * PMA_dataDiffInUncommonTables() finds the data difference in  $source_tables_uncommon * * @param array  $source_tables_uncommon table names that are in source db and not in target db * @param string $src_db                 name of source database * @param mixed  $src_link               connection established with source server * @param int    $index                  index of a table from $matching_table array * @param array  &$row_count             number of rows * * @return nothing */function PMA_dataDiffInUncommonTables($source_tables_uncommon, $src_db, $src_link, $index, &$row_count){    $query = "SELECT COUNT(*) FROM " . PMA_backquote($src_db) . "." . PMA_backquote($source_tables_uncommon[$index]);    $rows  = PMA_DBI_fetch_result($query, null, null, $src_link);    $row_count[$index] = $rows[0];}/** * PMA_updateTargetTables() sets the updated field values to target table rows using $update_array[$matching_table_index] * * @param array   $table                Matching tables' names * @param array   $update_array         A three dimensional array containing field *                                      value updates required for each matching table * @param string  $src_db               Name of source database * @param string  $trg_db               Name of target database * @param mixed   $trg_link             Connection established with target server * @param int     $matching_table_index index of matching table in matching_table_array * @param array   $matching_table_keys * @param boolean $display */function PMA_updateTargetTables($table, $update_array, $src_db, $trg_db, $trg_link, $matching_table_index, $matching_table_keys, $display){    if (isset($update_array[$matching_table_index])) {        if (sizeof($update_array[$matching_table_index])) {            for ($update_row = 0; $update_row < sizeof($update_array[$matching_table_index]); $update_row++) {                if (isset($update_array[$matching_table_index][$update_row])) {                    $update_fields_num = sizeof($update_array[$matching_table_index][$update_row])-sizeof($matching_table_keys[$matching_table_index]);                    if ($update_fields_num > 0) {                        $query = "UPDATE " . PMA_backquote($trg_db) . "." .PMA_backquote($table[$matching_table_index]) . " SET ";                        for ($update_field = 0; $update_field < $update_fields_num; $update_field = $update_field+2) {                            if (isset($update_array[$matching_table_index][$update_row][$update_field]) && isset($update_array[$matching_table_index][$update_row][$update_field+1])) {                                $query .= PMA_backquote($update_array[$matching_table_index][$update_row][$update_field]) . "='" . $update_array[$matching_table_index][$update_row][$update_field+1] . "'";                            }                            if ($update_field < ($update_fields_num - 2)) {                                $query .= ", ";                            }                        }                        $query .= " WHERE ";                        if (isset($matching_table_keys[$matching_table_index])) {                            for ($key = 0; $key < sizeof($matching_table_keys[$matching_table_index]); $key++) {                                if (isset($matching_table_keys[$matching_table_index][$key])) {                                    $query .= PMA_backquote($matching_table_keys[$matching_table_index][$key]) . "='" . $update_array[$matching_table_index][$update_row][$matching_table_keys[$matching_table_index][$key]] . "'";                                }                                if ($key < (sizeof($matching_table_keys[$matching_table_index]) - 1)) {                                    $query .= " AND ";                                }                            }                        }                        $query .= ';';                        if ($display == true) {                            echo "<p>" . $query . "</p>";                        }                        PMA_DBI_try_query($query, $trg_link, 0);                    }                }            }        }    }}/** * PMA_insertIntoTargetTable() inserts missing rows in the target table using $array_insert[$matching_table_index] * * @todo this function uses undefined variables and is possibly broken: $matching_tables, *       $matching_tables_fields, $remove_indexes_array, $matching_table_keys * * @param array  $matching_table          matching table names * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $table_fields            field names of a table * @param array  &$array_insert * @param int    $matching_table_index    index of matching table in matching_table_array * @param array  $matching_tables_keys    field names that are keys in the matching table * @param array  $source_columns          source column information * @param array  &$add_column_array       column names that are to be added in target table * @param array  $criteria                criteria like type, null, collation, default etc * @param array  $target_tables_keys      field names that are keys in the target table * @param array  $uncommon_tables         table names that are present in source db but not in targt db * @param array  &$uncommon_tables_fields field names of the uncommon tables * @param array  $uncommon_cols           column names that are present in target table and not in source table * @param array  &$alter_str_array        column names that are to be altered * @param array  &$source_indexes         column names on which indexes are made in source table * @param array  &$target_indexes         column names on which indexes are made in target table * @param array  &$add_indexes_array      column names on which index is to be added in target table * @param array  &$alter_indexes_array    column names whose indexes are to be altered. Only index name and uniqueness of an index can be changed * @param array  &$delete_array           rows that are to be deleted * @param array  &$update_array           rows that are to be updated in target * @param bool   $display */function PMA_insertIntoTargetTable($matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, &$array_insert, $matching_table_index, $matching_tables_keys, $source_columns, &$add_column_array, $criteria, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $uncommon_cols, &$alter_str_array, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$delete_array, &$update_array, $display){    if (isset($array_insert[$matching_table_index])) {        if (sizeof($array_insert[$matching_table_index])) {            for ($insert_row = 0; $insert_row< sizeof($array_insert[$matching_table_index]); $insert_row++) {                if (isset($array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][0]])) {                    $select_query = "SELECT * FROM " . PMA_backquote($src_db) . "." . PMA_backquote($matching_table[$matching_table_index]) . " WHERE ";                    for ($i = 0; $i < sizeof($matching_tables_keys[$matching_table_index]); $i++) {                        $select_query .= $matching_tables_keys[$matching_table_index][$i] . "='";                        $select_query .= $array_insert[$matching_table_index][$insert_row][$matching_tables_keys[$matching_table_index][$i]] . "'" ;                        if ($i < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                            $select_query.= " AND ";                        }                    }                    $select_query .= "; ";                    $result = PMA_DBI_fetch_result($select_query, null, null, $src_link);                    $insert_query = "INSERT INTO " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_table[$matching_table_index]) ." (";                    for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                        $insert_query .=  PMA_backquote($table_fields[$matching_table_index][$field_index]);                        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db ."'                                         AND TABLE_NAME = '" . $matching_table[$matching_table_index]. "'AND COLUMN_NAME = '" .                                         $table_fields[$matching_table_index][$field_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;                        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $trg_link);                        if (sizeof($is_fk_result) > 0) {                            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                                $table_index = array_keys($matching_table, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                                if (isset($alter_str_array[$table_index[0]])) {                                    PMA_alterTargetTableStructure(                                        $trg_db, $trg_link, $matching_tables, $source_columns, $alter_str_array, $matching_tables_fields,                                        $criteria, $matching_tables_keys, $target_tables_keys, $table_index[0], $display                                    );                                    unset($alter_str_array[$table_index[0]]);                                }                                if (isset($uncommon_columns[$table_index[0]])) {                                    PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_index[0], $display);                                    unset($uncommon_columns[$table_index[0]]);                                }                                if (isset($add_column_array[$table_index[0]])) {                                    PMA_findDeleteRowsFromTargetTables(                                        $delete_array, $matching_tables, $table_index[0], $target_tables_keys,                                        $matching_tables_keys, $trg_db, $trg_link, $src_db, $src_link                                    );                                    if (isset($delete_array[$table_index[0]])) {                                        PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index[0], $target_tables_keys, $delete_array, $display);                                        unset($delete_array[$table_index[0]]);                                    }                                    PMA_addColumnsInTargetTable(                                        $src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, $add_column_array,                                        $matching_tables_fields, $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables,                                        $uncommon_tables_fields, $table_index[0], $uncommon_cols, $display                                    );                                    unset($add_column_array[$table_index[0]]);                                }                                if (isset($add_indexes_array[$table_index[0]])                                    || isset($remove_indexes_array[$table_index[0]])                                    || isset($alter_indexes_array[$table_index[0]])                                ) {                                    PMA_applyIndexesDiff(                                        $trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array,                                        $alter_indexes_array, $remove_indexes_array, $table_index[0], $display                                    );                                    unset($add_indexes_array[$table_index[0]]);                                    unset($alter_indexes_array[$table_index[0]]);                                    unset($remove_indexes_array[$table_index[0]]);                                }                                if (isset($update_array[$table_index[0]])) {                                    PMA_updateTargetTables(                                        $matching_tables, $update_array, $src_db, $trg_db, $trg_link,                                        $table_index[0], $matching_table_keys, $display                                    );                                    unset($update_array[$table_index[0]]);                                }                                if (isset($array_insert[$table_index[0]])) {                                     PMA_insertIntoTargetTable(                                         $matching_table, $src_db, $trg_db, $src_link, $trg_link, $table_fields, $array_insert, $table_index[0],                                         $matching_tables_keys, $source_columns, $add_column_array, $criteria, $target_tables_keys, $uncommon_tables,                                         $uncommon_tables_fields, $uncommon_cols, $alter_str_array, $source_indexes, $target_indexes, $add_indexes_array,                                         $alter_indexes_array, $delete_array, $update_array, $display                                     );                                     unset($array_insert[$table_index[0]]);                                }                            }                        }                        if ($field_index < sizeof($table_fields[$matching_table_index])-1) {                            $insert_query .= ", ";                        }                    }                    $insert_query .= ") VALUES(";                    if (sizeof($table_fields[$matching_table_index]) == 1) {                         $insert_query .= "'" . PMA_sqlAddSlashes($result[0]) . "'";                    } else {                        for ($field_index = 0; $field_index < sizeof($table_fields[$matching_table_index]); $field_index++) {                            if (isset($result[0][$table_fields[$matching_table_index][$field_index]])) {                                $insert_query .= "'" . PMA_sqlAddSlashes($result[0][$table_fields[$matching_table_index][$field_index]]) . "'";                            } else {                                $insert_query .= "'NULL'";                            }                            if ($field_index < (sizeof($table_fields[$matching_table_index])) - 1) {                                    $insert_query .= " ," ;                            }                        }                    }                    $insert_query .= ");";                    if ($display == true) {                        PMA_displayQuery($insert_query);                    }                    PMA_DBI_try_query($insert_query, $trg_link, 0);                }            }        }    }}/** * PMA_createTargetTables() Create the missing table $uncommon_table in target database * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  &$uncommon_tables        names of tables present in source but not in target * @param int    $table_index             index of table in $uncommon_tables array * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_createTargetTables($src_db, $trg_db, $src_link, $trg_link, &$uncommon_tables, $table_index, &$uncommon_tables_fields, $display){    if (isset($uncommon_tables[$table_index])) {        $fields_result = PMA_DBI_get_columns($src_db, $uncommon_tables[$table_index], null, true, $src_link);        $fields = array();        foreach ($fields_result as $each_field) {            $field_name = $each_field['Field'];            $fields[] = $field_name;        }        $uncommon_tables_fields[$table_index] = $fields;        $Create_Query = PMA_DBI_fetch_value("SHOW CREATE TABLE " . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), 0, 1, $src_link);        // Replace the src table name with a `dbname`.`tablename`        $Create_Table_Query = preg_replace('/' . preg_quote(PMA_backquote($uncommon_tables[$table_index]), '/') . '/',                                            PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]),                                            $Create_Query,                                            $limit = 1        );        $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                        AND TABLE_NAME = '" . $uncommon_tables[$table_index] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;" ;        $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);        if (sizeof($is_fk_result) > 0) {            for ($j = 0; $j < sizeof($is_fk_result); $j++) {                if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }            }        }        $Create_Table_Query .= ';';        if ($display == true) {            echo '<p>' . $Create_Table_Query . '</p>';        }        PMA_DBI_try_query($Create_Table_Query, $trg_link, 0);    }}/** * PMA_populateTargetTables() inserts data into uncommon tables after they have been created * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $uncommon_tables        uncommon table names (table names that are present in source but not in target db) * @param int    $table_index            index of table in matching_table_array * @param array  $uncommon_tables_fields field names of the uncommon table * @param bool   $display * * @todo This turns NULL values into '' (empty string) */function PMA_populateTargetTables($src_db, $trg_db, $src_link, $trg_link, $uncommon_tables, $table_index, $uncommon_tables_fields, $display){    $display = false; // todo: maybe display some of the queries if they are not too numerous    $unbuffered_result = PMA_DBI_try_query('SELECT * FROM ' . PMA_backquote($src_db) . '.' . PMA_backquote($uncommon_tables[$table_index]), $src_link, PMA_DBI_QUERY_UNBUFFERED);    if (false !== $unbuffered_result) {        $insert_query = 'INSERT INTO ' . PMA_backquote($trg_db) . '.' .PMA_backquote($uncommon_tables[$table_index]) . ' VALUES';        while ($one_row = PMA_DBI_fetch_row($unbuffered_result)) {            $insert_query .= '(';            $key_of_last_value = count($one_row) - 1;            foreach ($one_row as $key => $value) {                $insert_query .= "'" . PMA_sqlAddSlashes($value) . "'";                if ($key < $key_of_last_value) {                    $insert_query .= ",";                }            }            $insert_query .= '),';        }        $insert_query = substr($insert_query, 0, -1);        $insert_query .= ';';        if ($display == true) {            PMA_displayQuery($insert_query);        }        PMA_DBI_try_query($insert_query, $trg_link, 0);    }}/** * PMA_deleteFromTargetTable() delete rows from target table * * @param string $trg_db             name of target database * @param mixed  $trg_link           connection established with target server * @param array  $matching_tables    matching table names * @param int    $table_index        index of table in matching_table_array * @param array  $target_tables_keys primary key names of the target tables * @param array  $delete_array       key values of rows that are to be deleted * @param bool   $display */function PMA_deleteFromTargetTable($trg_db, $trg_link, $matching_tables, $table_index, $target_tables_keys, $delete_array, $display){    for ($i = 0; $i < sizeof($delete_array[$table_index]); $i++) {        if (isset($target_tables_keys[$table_index])) {            $delete_query = 'DELETE FROM ' . PMA_backquote($trg_db) . '.' .PMA_backquote($matching_tables[$table_index]) . ' WHERE ';            for ($y = 0; $y < sizeof($target_tables_keys[$table_index]); $y++) {                $delete_query .= PMA_backquote($target_tables_keys[$table_index][$y]) . " = '";                if (sizeof($target_tables_keys[$table_index]) == 1) {                    $delete_query .= $delete_array[$table_index][$i] . "'";                } elseif (sizeof($target_tables_keys[$table_index]) > 1) {                    $delete_query .= $delete_array[$table_index][$i][$target_tables_keys[$table_index][$y]] . "'";                }                if ($y < (sizeof($target_tables_keys[$table_index]) - 1)) {                    $delete_query .= ' AND ';                }                $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                            AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_index]."' AND REFERENCED_COLUMN_NAME = '"                           . $target_tables_keys[$table_index][$y] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";                $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);                $result_size = sizeof($pk_query_result);                if ($result_size > 0) {                    for ($b = 0; $b < $result_size; $b++) {                        $drop_pk_query = "DELETE FROM " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . " WHERE " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . " = " . $target_tables_keys[$table_index][$y] . ";";                        PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                    }                }            }        }        if ($display == true) {            echo '<p>' . $delete_query . '</p>';        }        PMA_DBI_try_query($delete_query, $trg_link, 0);    }}/** * PMA_structureDiffInTables() Gets all the column information for source and target table. * Compare columns on their names. * If column exists in target then compare Type, Null, Collation, Key, Default and Comment for that column. * If column does not exist in target table then it is placed in  $add_column_array. * If column exists in target table but criteria is different then it is palced in $alter_str_array. * If column does not exist in source table but is present in target table then it is placed in  $uncommon_columns. * Keys for all the source tables that have a corresponding target table are placed  in $matching_tables_keys. * Keys for all the target tables that have a corresponding source table are placed  in $target_tables_keys. * * @param string $src_db                 name of source database * @param string $trg_db                 name of target database * @param mixed  $src_link               connection established with source server * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source tables * @param array  &$target_columns        columns information of the target tables * @param array  &$alter_str_array       three dimensional associative array first index being the matching table index, second index being column name for which target *                                       column have some criteria different and third index containing the criteria which is different. * @param array  &$add_column_array      two dimensional associative array, first index of the array contain the matching table number and second index contain the *                                       column name which is to be added in the target table * @param array  &$uncommon_columns      columns that are present in the target table but not in the source table * @param array  $criteria               criteria which are to be checked for field that is present in source table and target table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table */function PMA_structureDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_columns, &$target_columns, &$alter_str_array, &$add_column_array, &$uncommon_columns, $criteria, &$target_tables_keys, $matching_table_index){    //Gets column information for source and target table    $source_columns[$matching_table_index] = PMA_DBI_get_columns_full($src_db, $matching_tables[$matching_table_index], null, $src_link);    $target_columns[$matching_table_index] = PMA_DBI_get_columns_full($trg_db, $matching_tables[$matching_table_index], null, $trg_link);    foreach ($source_columns[$matching_table_index] as $column_name => $each_column) {        if (isset($target_columns[$matching_table_index][$column_name]['Field'])) {            //If column exists in target table then matches criteria like type, null, collation, key, default, comment of the column            for ($i = 0; $i < sizeof($criteria); $i++) {                if ($source_columns[$matching_table_index][$column_name][$criteria[$i]] != $target_columns[$matching_table_index][$column_name][$criteria[$i]]) {                    if (($criteria[$i] == 'Default') && ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == '' )) {                        $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = 'None';                    } else {                        if (! (($criteria[$i] == 'Key') && (($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'MUL')                            || ($source_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')                            || ($target_columns[$matching_table_index][$column_name][$criteria[$i]] == 'UNI')))                        ) {                            $alter_str_array[$matching_table_index][$column_name][$criteria[$i]] = $source_columns[$matching_table_index][$column_name][$criteria[$i]];                        }                    }                }            }        } else {            $add_column_array[$matching_table_index][$column_name]= $column_name;        }    }    //Finds column names that are present in target table but not in source table    foreach ($target_columns[$matching_table_index] as $fld_name => $each_column) {        if (! (isset($source_columns[$matching_table_index][$fld_name]['Field']))) {            $fields_uncommon[] = $fld_name;        }        if ($target_columns[$matching_table_index][$fld_name]['Key'] == 'PRI') {            $keys[] = $fld_name;        }    }    if (isset($fields_uncommon)) {        $uncommon_columns[$matching_table_index] = $fields_uncommon;    }    if (isset($keys)) {        $target_tables_keys[$matching_table_index] = $keys;    }}/** * PMA_addColumnsInTargetTable() adds column that are present in source table but not in target table * * @param string $src_db                  name of source database * @param string $trg_db                  name of target database * @param mixed  $src_link                connection established with source server * @param mixed  $trg_link                connection established with target server * @param array  $matching_tables         names of matching tables * @param array  $source_columns          columns information of the source tables * @param array  &$add_column_array       the names of the column(field) that are to be added in the target * @param array  $matching_tables_fields * @param array  $criteria                criteria * @param array  $matching_tables_keys    field names which is key in the source table * @param array  $target_tables_keys      field names which is key in the target table * @param array  $uncommon_tables         table names that are present in source db and not in target db * @param array  &$uncommon_tables_fields names of the fields of the uncommon tables * @param int    $table_counter           number of the matching table * @param array  $uncommon_cols * @param bool   $display */function PMA_addColumnsInTargetTable($src_db, $trg_db, $src_link, $trg_link, $matching_tables, $source_columns, &$add_column_array, $matching_tables_fields,         $criteria, $matching_tables_keys, $target_tables_keys, $uncommon_tables, &$uncommon_tables_fields, $table_counter, $uncommon_cols, $display){    for ($i = 0; $i < sizeof($matching_tables_fields[$table_counter]); $i++) {        if (isset($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]])) {            $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]). " ADD COLUMN " .            PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . " " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Type'];            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'NO') {                $query .= ' Not Null ';            } elseif ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Null'] == 'YES') {                $query .= ' Null ';            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'] != '') {                $query .= ' COLLATE ' . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Collation'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'] != '') {                $query .= " DEFAULT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Default'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'] != '') {                $query .= " COMMENT " . $source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Comment'];            }            if ($source_columns[$table_counter][$matching_tables_fields[$table_counter][$i]]['Key'] == 'PRI' ) {                $trg_key_size = sizeof($target_tables_keys[$table_counter]);                if ($trg_key_size) {                    $check = true;                    for ($a = 0; ($a < $trg_key_size) && ($check); $a++) {                        if (! (in_array($target_tables_keys[$table_counter], $uncommon_cols))) {                             $check = false;                        }                    }                    if (! $check) {                        $query .= " ,DROP PRIMARY KEY " ;                    }                }                $query .= " , ADD PRIMARY KEY (";                for ($t = 0; $t < sizeof($matching_tables_keys[$table_counter]); $t++) {                    $query .= PMA_backquote($matching_tables_keys[$table_counter][$t]);                    if ($t < (sizeof($matching_tables_keys[$table_counter]) - 1)) {                        $query .= " , " ;                    }                }                $query .= ")";            }            $query .= ";";            if ($display == true) {                echo '<p>' . $query . '</p>';            }            PMA_DBI_try_query($query, $trg_link, 0);            //Checks if column to be added is a foreign key or not            $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"            . $matching_tables[$table_counter] . "' AND COLUMN_NAME ='" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] .            "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);            //If column is a foreign key then it is checked that referenced table exist in target db. If referenced table does not exist in target db then            //it is created first.            if (isset($is_fk_result)) {                if (in_array($is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                    $table_index = array_keys($uncommon_tables, $is_fk_result[0]['REFERENCED_TABLE_NAME']);                    PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $is_fk_result[0]['REFERENCED_TABLE_NAME'], $uncommon_tables, $uncommon_tables_fields, $display);                    PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                    unset($uncommon_tables[$table_index[0]]);                }                $fk_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$table_counter]) .                            "ADD CONSTRAINT FOREIGN KEY " . PMA_backquote($add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]]) . "                            (" . $add_column_array[$table_counter][$matching_tables_fields[$table_counter][$i]] . ") REFERENCES " . PMA_backquote($trg_db) .                             '.' . PMA_backquote($is_fk_result[0]['REFERENCED_TABLE_NAME']) . " (" . $is_fk_result[0]['REFERENCED_COLUMN_NAME'] . ");";                PMA_DBI_try_query($fk_query, $trg_link, null);            }        }    }}/** * PMA_checkForeignKeys() checks if the referenced table have foreign keys. * uses    PMA_createTargetTables() * * @param string $src_db                  name of source database * @param mixed  $src_link                connection established with source server * @param string $trg_db                  name of target database * @param mixed  $trg_link                connection established with target server * @param string $referenced_table        table whose column is a foreign key in another table * @param array  &$uncommon_tables        names that are uncommon * @param array  &$uncommon_tables_fields field names of the uncommon table * @param bool   $display */function PMA_checkForeignKeys($src_db, $src_link, $trg_db, $trg_link, $referenced_table, &$uncommon_tables, &$uncommon_tables_fields, $display){    $is_fk_query = "SELECT * FROM  information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $src_db . "'                    AND TABLE_NAME = '" . $referenced_table . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";    $is_fk_result = PMA_DBI_fetch_result($is_fk_query, null, null, $src_link);    if (sizeof($is_fk_result) > 0) {        for ($j = 0; $j < sizeof($is_fk_result); $j++) {            if (in_array($is_fk_result[$j]['REFERENCED_TABLE_NAME'], $uncommon_tables)) {                $table_index = array_keys($uncommon_tables, $is_fk_result[$j]['REFERENCED_TABLE_NAME']);                PMA_checkForeignKeys(                    $src_db, $src_link, $trg_db, $trg_link, $is_fk_result[$j]['REFERENCED_TABLE_NAME'],                    $uncommon_tables, $uncommon_tables_fields, $display                );                PMA_createTargetTables($src_db, $trg_db, $trg_link, $src_link, $uncommon_tables, $table_index[0], $uncommon_tables_fields, $display);                unset($uncommon_tables[$table_index[0]]);            }        }    }}/** * PMA_alterTargetTableStructure() alters structure of the target table using $alter_str_array * * @param string $trg_db                 name of target database * @param mixed  $trg_link               connection established with target server * @param array  $matching_tables        names of matching tables * @param array  &$source_columns        columns information of the source table * @param array  &$alter_str_array       column name and criteria which is to be altered for the targert table * @param array  $matching_tables_fields name of the fields for the matching table * @param array  $criteria               criteria * @param array  &$matching_tables_keys  field names which is key in the source table * @param array  &$target_tables_keys    field names which is key in the target table * @param int    $matching_table_index   number of the matching table * @param bool   $display */function PMA_alterTargetTableStructure($trg_db, $trg_link, $matching_tables, &$source_columns, &$alter_str_array, $matching_tables_fields, $criteria, &$matching_tables_keys, &$target_tables_keys, $matching_table_index, $display){    $check = true;    $sql_query = '';    $found = false;    //Checks if the criteria to be altered is primary key    for ($v = 0; $v < sizeof($matching_tables_fields[$matching_table_index]); $v++) {        if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'])) {            if ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$v]]['Key'] == 'PRI' ) {                $check = false;            }        }    }    $pri_query = null;    if (! $check) {        $pri_query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);        if (sizeof($target_tables_keys[$matching_table_index]) > 0) {            $pri_query .= "  DROP PRIMARY KEY ," ;        }        $pri_query .= "  ADD PRIMARY KEY (";        for ($z = 0; $z < sizeof($matching_tables_keys[$matching_table_index]); $z++) {            $pri_query .= PMA_backquote($matching_tables_keys[$matching_table_index][$z]);            if ($z < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $pri_query .= " , " ;            }        }        $pri_query .= ");";    }    if (isset($pri_query)) {        if ($display == true) {            echo '<p>' . $pri_query . '</p>';        }        PMA_DBI_try_query($pri_query, $trg_link, 0);    }    for ($t = 0; $t < sizeof($matching_tables_fields[$matching_table_index]); $t++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]])) && (sizeof($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]) > 0)) {            $sql_query = 'ALTER TABLE ' . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]) . ' MODIFY ' .            PMA_backquote($matching_tables_fields[$matching_table_index][$t]) . ' ' . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'];            $found = false;            for ($i = 0; $i < sizeof($criteria); $i++) {                if (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]]) && $criteria[$i] != 'Key') {                    $found = true;                    if (($criteria[$i] == 'Type') && (! isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i+1]]))) {                        if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'NO') {                            $sql_query .= " Not Null" ;                        } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i + 1]] == 'YES') {                            $sql_query .= " Null" ;                        }                    }                    if (($criteria[$i] == 'Null') && ( $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'NO')) {                        $sql_query .= " Not Null "  ;                    } elseif (($criteria[$i] == 'Null') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'YES')) {                        $sql_query .= " Null "  ;                    }                    if ($criteria[$i] == 'Collation') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COLLATE " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] ;                    }                    if (($criteria[$i] == 'Default') && ($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] == 'None')) {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                    } elseif ($criteria[$i] == 'Default') {                        if (! (isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        if (is_string($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            if ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] != 'timestamp') {                                $sql_query .=  " DEFAULT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'";                            } elseif ($source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]]['Type'] == 'timestamp') {                                $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                            }                        } elseif (is_numeric($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]])) {                            $sql_query .=  " DEFAULT " . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]];                        }                    }                    if ($criteria[$i] == 'Comment') {                        if ( !(isset($alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[2]]))) {                            $sql_query .= " Not Null " ;                        }                        $sql_query .=  " COMMENT '" . $alter_str_array[$matching_table_index][$matching_tables_fields[$matching_table_index][$t]][$criteria[$i]] . "'" ;                    }                }            }        }        $sql_query .= ";";        if ($found) {            if ($display == true) {                echo '<p>' . $sql_query . '</p>';            }            PMA_DBI_try_query($sql_query, $trg_link, 0);        }    }    $check = false;    $query = "ALTER TABLE " . PMA_backquote($trg_db) . '.' . PMA_backquote($matching_tables[$matching_table_index]);    for ($p = 0; $p < sizeof($matching_tables_keys[$matching_table_index]); $p++) {        if ((isset($alter_str_array[$matching_table_index][$matching_tables_keys[$matching_table_index][$p]]['Key']))) {            $check = true;            $query .= ' MODIFY ' . PMA_backquote($matching_tables_keys[$matching_table_index][$p]) . ' '            . $source_columns[$matching_table_index][$matching_tables_fields[$matching_table_index][$p]]['Type'] . ' Not Null ';            if ($p < (sizeof($matching_tables_keys[$matching_table_index]) - 1)) {                $query .= ', ';            }        }    }    $query .= ';';    if ($check) {        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }}/** * PMA_removeColumnsFromTargetTable() removes the columns which are present in target table but not in source table. * * @param string $trg_db           name of target database * @param mixed  $trg_link         connection established with target server * @param array  $matching_tables  names of matching tables * @param array  $uncommon_columns array containing the names of the column which are to be dropped from the target table * @param int    $table_counter    index of the matching table as in $matchiing_tables array * @param bool   $display */function PMA_removeColumnsFromTargetTable($trg_db, $trg_link, $matching_tables, $uncommon_columns, $table_counter, $display){    if (isset($uncommon_columns[$table_counter])) {        $drop_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($uncommon_columns[$table_counter]); $a++) {            //Checks if column to be removed is a foreign key in any table            $pk_query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE REFERENCED_TABLE_SCHEMA = '" . $trg_db . "'                         AND REFERENCED_TABLE_NAME = '" . $matching_tables[$table_counter]."' AND REFERENCED_COLUMN_NAME = '"                         . $uncommon_columns[$table_counter][$a] . "' AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $pk_query_result = PMA_DBI_fetch_result($pk_query, null, null, $trg_link);            $result_size = sizeof($pk_query_result);            if ($result_size > 0) {                for ($b = 0; $b < $result_size; $b++) {                    $drop_pk_query = "ALTER TABLE " . PMA_backquote($pk_query_result[$b]['TABLE_SCHEMA']) . "." . PMA_backquote($pk_query_result[$b]['TABLE_NAME']) . "                                      DROP FOREIGN KEY " . PMA_backquote($pk_query_result[$b]['CONSTRAINT_NAME']) . ", DROP COLUMN " . PMA_backquote($pk_query_result[$b]['COLUMN_NAME']) . ";";                    PMA_DBI_try_query($drop_pk_query, $trg_link, 0);                }            }            $query = "SELECT * FROM information_schema.KEY_COLUMN_USAGE WHERE TABLE_SCHEMA = '" . $trg_db . "' AND TABLE_NAME = '"                     . $matching_tables[$table_counter]. "' AND COLUMN_NAME = '" . $uncommon_columns[$table_counter][$a] . "'                      AND TABLE_NAME <> REFERENCED_TABLE_NAME;";            $result = PMA_DBI_fetch_result($query, null, null, $trg_link);            if (sizeof($result) > 0) {                $drop_query .= " DROP FOREIGN KEY " . PMA_backquote($result[0]['CONSTRAINT_NAME']) . ",";            }            $drop_query .=  " DROP COLUMN " . PMA_backquote($uncommon_columns[$table_counter][$a]);            if ($a < (sizeof($uncommon_columns[$table_counter]) - 1)) {                $drop_query .= " , " ;            }        }        $drop_query .= ";" ;        if ($display == true) {            echo '<p>' . $drop_query . '</p>';        }        PMA_DBI_try_query($drop_query, $trg_link, 0);    }}/** * PMA_indexesDiffInTables() compares the source table indexes with target table indexes and keep the indexes to be added in target table in $add_indexes_array * indexes to be altered in $alter_indexes_array and indexes to be removed from target table in $remove_indexes_array. * Only keyname and uniqueness characteristic of the indexes are altered. * * @param string $src_db                name of source database * @param string $trg_db                name of target database * @param mixed  $src_link              connection established with source server * @param mixed  $trg_link              connection established with target server * @param array  $matching_tables       matching tables name * @param array  &$source_indexes       indexes of the source table * @param array  &$target_indexes       indexes of the target table * @param array  &$add_indexes_array    name of the column on which the index is to be added in the target table * @param array  &$alter_indexes_array  key name which needs to be altered * @param array  &$remove_indexes_array key name of the index which is to be removed from the target table * @param int    $table_counter         number of the matching table */function PMA_indexesDiffInTables($src_db, $trg_db, $src_link, $trg_link, $matching_tables, &$source_indexes, &$target_indexes, &$add_indexes_array, &$alter_indexes_array, &$remove_indexes_array, $table_counter){    //Gets indexes information for source and target table    $source_indexes[$table_counter] = PMA_DBI_get_table_indexes($src_db, $matching_tables[$table_counter], $src_link);    $target_indexes[$table_counter] = PMA_DBI_get_table_indexes($trg_db, $matching_tables[$table_counter], $trg_link);    for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {        $found = false;        $z = 0;        //Compares key name and non_unique characteristic of source indexes with target indexes        /*         * @todo compare the length of each sub part         */        while (($z <= sizeof($target_indexes[$table_counter])) && ($found == false)) {            if (isset($source_indexes[$table_counter][$a]) && isset($target_indexes[$table_counter][$z]) && $source_indexes[$table_counter][$a]['Key_name'] == $target_indexes[$table_counter][$z]['Key_name']) {                $found = true;                if (($source_indexes[$table_counter][$a]['Column_name'] != $target_indexes[$table_counter][$z]['Column_name']) || ($source_indexes[$table_counter][$a]['Non_unique'] != $target_indexes[$table_counter][$z]['Non_unique'])) {                    if (! (($source_indexes[$table_counter][$a]['Key_name'] == "PRIMARY") || ($target_indexes[$table_counter][$z]['Key_name'] == 'PRIMARY'))) {                        $alter_indexes_array[$table_counter][] = $source_indexes[$table_counter][$a]['Key_name'];                    }                }            }            $z++;        }        if ($found === false) {            if (! ($source_indexes[$table_counter][$a]['Key_name'] == 'PRIMARY')) {                $add_indexes_array [$table_counter][] = $source_indexes[$table_counter][$a]['Column_name'];            }        }    }    //Finds indexes that exist on target table but not on source table    for ($b = 0; $b < sizeof($target_indexes[$table_counter]); $b++) {        $found = false;        $c = 0;        while (($c <= sizeof($source_indexes[$table_counter])) && ($found == false)) {            if ($target_indexes[$table_counter][$b]['Column_name'] == $source_indexes[$table_counter][$c]['Column_name']) {                $found = true;            }            $c++;        }        if ($found === false) {            $remove_indexes_array[$table_counter][] = $target_indexes[$table_counter][$b]['Key_name'];        }    }}/** * PMA_applyIndexesDiff() create indexes, alters indexes and remove indexes. * * @param string $trg_db               name of target database * @param mixed  $trg_link             connection established with target server * @param array  $matching_tables      matching tables name * @param array  $source_indexes       indexes of the source table * @param array  $target_indexes       indexes of the target table * @param array  $add_indexes_array    column names on which indexes are to be created in target table * @param array  $alter_indexes_array  column names for which indexes are to be altered * @param array  $remove_indexes_array key name of the indexes which are to be removed from the target table * @param int    $table_counter        number of the matching table * @param $display */function PMA_applyIndexesDiff ($trg_db, $trg_link, $matching_tables, $source_indexes, $target_indexes, $add_indexes_array, $alter_indexes_array,          $remove_indexes_array, $table_counter, $display){    //Adds indexes on target table    if (isset($add_indexes_array[$table_counter])) {        $sql = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]) . " ADD" ;        for ($a = 0; $a < sizeof($source_indexes[$table_counter]); $a++) {            if (isset($add_indexes_array[$table_counter][$a])) {                for ($b = 0; $b < sizeof($source_indexes[$table_counter]); $b++) {                    if ($source_indexes[$table_counter][$b]['Column_name'] == $add_indexes_array[$table_counter][$a]) {                        if ($source_indexes[$table_counter][$b]['Non_unique'] == '0') {                            $sql .= " UNIQUE ";                        }                        $sql .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$b]['Key_name']) . " (" . $add_indexes_array[$table_counter][$a] . " );";                        if ($display == true) {                            echo '<p>' . $sql . '</p>';                        }                        PMA_DBI_try_query($sql, $trg_link, 0);                    }                }            }        }    }    //Alter indexes of target table    if (isset($alter_indexes_array[$table_counter])) {        $query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($alter_indexes_array[$table_counter]); $a++) {            if (isset($alter_indexes_array[$table_counter][$a])) {                $query .= ' DROP INDEX ' . PMA_backquote($alter_indexes_array[$table_counter][$a]) . " , ADD ";                $got_first_index_column = false;                for ($z = 0; $z < sizeof($source_indexes[$table_counter]); $z++) {                    if ($source_indexes[$table_counter][$z]['Key_name'] == $alter_indexes_array[$table_counter][$a]) {                        if (! $got_first_index_column) {                            if ($source_indexes[$table_counter][$z]['Non_unique'] == '0') {                                $query .= " UNIQUE ";                            }                            $query .= " INDEX " . PMA_backquote($source_indexes[$table_counter][$z]['Key_name']) . " (" . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                            $got_first_index_column = true;                        } else {                            // another column for this index                            $query .= ', ' . PMA_backquote($source_indexes[$table_counter][$z]['Column_name']);                        }                    }                }                $query .= " )";            }        }        $query .= ';';        if ($display == true) {            echo '<p>' . $query . '</p>';        }        PMA_DBI_try_query($query, $trg_link, 0);    }    //Removes indexes from target table    if (isset($remove_indexes_array[$table_counter])) {        $drop_index_query = "ALTER TABLE " . PMA_backquote($trg_db) . "." . PMA_backquote($matching_tables[$table_counter]);        for ($a = 0; $a < sizeof($target_indexes[$table_counter]); $a++) {            if (isset($remove_indexes_array[$table_counter][$a])) {                $drop_index_query .= " DROP INDEX " . PMA_backquote($remove_indexes_array[$table_counter][$a]);            }            if ($a < (sizeof($remove_indexes_array[$table_counter]) - 1)) {                $drop_index_query .= " , " ;            }        }        $drop_index_query .= " ; " ;        if ($display == true) {            echo '<p>' . $drop_index_query . '</p>';        }        PMA_DBI_try_query($drop_index_query, $trg_link, 0);    }}/** * PMA_displayQuery() displays a query, taking the maximum display size * into account * * @param string $query the query to display * * @return nothing */function PMA_displayQuery($query){    if (strlen($query) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {        $query = substr($query, 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';    }    echo '<p>' . htmlspecialchars($query) . '</p>';}/** * PMA_syncDisplayHeaderCompare() shows the header for source database * * @param string $src_db source db name * @param string $trg_db target db name * * @return nothing */function PMA_syncDisplayHeaderCompare($src_db, $trg_db){    echo '<fieldset style="padding:0"><div style="padding:1.5em; overflow:auto; height:220px">';    echo '<table class="data">';    echo '<tr>';    echo '<th>' . __('Source database') . ':  ' . htmlspecialchars($src_db) . '<br />(';    if ('cur' == $_SESSION['src_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['src_server']['host']);    }    echo ')</th>';    echo '<th>' . __('Difference') . '</th>';    echo '<th>' . __('Target database') . ':  '. htmlspecialchars($trg_db) . '<br />(';    if ('cur' == $_SESSION['trg_type']) {        echo __('Current server');    } else {        echo __('Remote server') . ' ' . htmlspecialchars($_SESSION['trg_server']['host']);    }    echo ')</th>';    echo '</tr>';}/** * Prints table row * * $rows contains following keys: * - src_table_name - source server table name * - dst_table_name - target server table name * - btn_type - 'M' or 'U' * - btn_structure - null or arguments for showDetails in server_synchronize.js (without img_obj and table_name): *                       i, update_size, insert_size, remove_size, insert_index, remove_index * * @param array $rows */function PMA_syncDisplayDataCompare($rows){    global $pmaThemeImage;    $odd_row = true;    foreach ($rows as $row) {        echo '<tr class=" ' . ($odd_row ? 'odd' : 'even') . '">';        echo '<td>' . htmlspecialchars($row['src_table_name']) . '</td><td style="text-align:center">';        if (isset($row['btn_structure']) && $row['btn_structure']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_structure'];            $p[0] = $row['btn_type'] . 'S' . $p[0];            echo '<img class="icon struct_img" src="' . $pmaThemeImage . 'new_struct.png" width="16" height="16"                 alt="Structure" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                 . "'" . implode($p, "','") . "'"                 . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" /> ';        }        if (isset($row['btn_data']) && $row['btn_data']) {            // parameters: i, update_size, insert_size, remove_size, insert_index, remove_index            $p = $row['btn_data'];            $p[0] = $row['btn_type'] . 'D' . $p[0];            echo '<img class="icon data_img" src="' . $pmaThemeImage . 'new_data.png" width="16" height="16"                alt="Data" title="' . __('Click to select') . '" style="cursor:pointer" onclick="showDetails('                . "'" . implode($p, "','") . "'"                . ', this, ' . "'" . PMA_escapeJsString(htmlspecialchars($row['src_table_name'])) . "'" . ')" />';        }        echo '</td><td>' . htmlspecialchars($row['dst_table_name']) . '</td></tr>';        $odd_row = !$odd_row;    }}/** * array PMA_get_column_values (string $database, string $table, string $column , mysql db link $link = null) * * @param string $database name of database * @param string $table    name of table to retrieve columns from * @param string $column   name of the column to retrieve data from * @param mixed  $link     mysql link resource * * @return array $field_values */function PMA_get_column_values($database, $table, $column, $link = null){    $query = 'SELECT ';    for ($i=0; $i< sizeof($column); $i++) {        $query.= PMA_backquote($column[$i]);        if ($i < (sizeof($column)-1)) {            $query.= ', ';        }    }    $query.= ' FROM ' . PMA_backquote($database) . '.' . PMA_backquote($table);    $field_values = PMA_DBI_fetch_result($query, null, null, $link);    if (! is_array($field_values) || count($field_values) < 1) {        return false;    }    return $field_values;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run single signon authentication. * * @package PhpMyAdmin-Auth-Signon *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    unset($_SESSION['LAST_SIGNON_URL']);    if (empty($GLOBALS['cfg']['Server']['SignonURL'])) {        PMA_fatalError('You must set SignonURL!');    } elseif (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        /* Perform logout to custom URL */        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);    } else {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['SignonURL']);    }    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    /* Check if we're using same sigon server */    if (isset($_SESSION['LAST_SIGNON_URL']) && $_SESSION['LAST_SIGNON_URL'] != $GLOBALS['cfg']['Server']['SignonURL']) {        return false;    }    /* Script name */    $script_name = $GLOBALS['cfg']['Server']['SignonScript'];    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Login URL */    $signon_url = $GLOBALS['cfg']['Server']['SignonURL'];    /* Current host */    $single_signon_host = $GLOBALS['cfg']['Server']['host'];    /* Current port */    $single_signon_port = $GLOBALS['cfg']['Server']['port'];    /* No configuration updates */    $single_signon_cfgupdate = array();    /* Are we requested to do logout? */    $do_logout = !empty($_REQUEST['old_usr']);    /* Handle script based auth */    if (!empty($script_name)) {        if (! file_exists($script_name)) {            PMA_fatalError(__('Can not find signon authentication script:') . ' ' . $script_name);        }        include $script_name;        list ($PHP_AUTH_USER, $PHP_AUTH_PW) = get_login_credentials($cfg['Server']['user']);    /* Does session exist? */    } elseif (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Clear error message */        unset($_SESSION['PMA_single_signon_error_message']);        /* Grab credentials if they exist */        if (isset($_SESSION['PMA_single_signon_user'])) {            if ($do_logout) {                $PHP_AUTH_USER = '';            } else {                $PHP_AUTH_USER = $_SESSION['PMA_single_signon_user'];            }        }        if (isset($_SESSION['PMA_single_signon_password'])) {            if ($do_logout) {                $PHP_AUTH_PW = '';            } else {                $PHP_AUTH_PW = $_SESSION['PMA_single_signon_password'];            }        }        if (isset($_SESSION['PMA_single_signon_host'])) {            $single_signon_host = $_SESSION['PMA_single_signon_host'];        }        if (isset($_SESSION['PMA_single_signon_port'])) {            $single_signon_port = $_SESSION['PMA_single_signon_port'];        }        if (isset($_SESSION['PMA_single_signon_cfgupdate'])) {            $single_signon_cfgupdate = $_SESSION['PMA_single_signon_cfgupdate'];        }        /* Also get token as it is needed to access subpages */        if (isset($_SESSION['PMA_single_signon_token'])) {            /* No need to care about token on logout */            $pma_token = $_SESSION['PMA_single_signon_token'];        }        /* End single signon session */        session_write_close();        /* Restart phpMyAdmin session */        session_name($old_session);        if (!empty($old_id)) {            session_id($old_id);        }        session_start();        /* Set the single signon host */        $GLOBALS['cfg']['Server']['host'] = $single_signon_host;        /* Set the single signon port */        $GLOBALS['cfg']['Server']['port'] = $single_signon_port;        /* Configuration update */        $GLOBALS['cfg']['Server'] = array_merge($GLOBALS['cfg']['Server'], $single_signon_cfgupdate);        /* Restore our token */        if (!empty($pma_token)) {            $_SESSION[' PMA_token '] = $pma_token;        }        /**         * Clear user cache.         */        PMA_clearUserCache();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        unset($_SESSION['LAST_SIGNON_URL']);        return false;    } else {        $_SESSION['LAST_SIGNON_URL'] = $GLOBALS['cfg']['Server']['SignonURL'];        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    /* Session name */    $session_name = $GLOBALS['cfg']['Server']['SignonSession'];    /* Does session exist? */    if (isset($_COOKIE[$session_name])) {        /* End current session */        $old_session = session_name();        $old_id = session_id();        session_write_close();        /* Load single signon session */        session_name($session_name);        session_id($_COOKIE[$session_name]);        session_start();        /* Set error message */        if (! empty($GLOBALS['login_without_password_is_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Login without a password is forbidden by configuration (see AllowNoPassword)');        } elseif (! empty($GLOBALS['allowDeny_forbidden'])) {            $_SESSION['PMA_single_signon_error_message'] = __('Access denied');        } elseif (! empty($GLOBALS['no_activity'])) {            $_SESSION['PMA_single_signon_error_message'] = sprintf(__('No activity within %s seconds; please log in again'), $GLOBALS['cfg']['LoginCookieValidity']);        } elseif (PMA_DBI_getError()) {            $_SESSION['PMA_single_signon_error_message'] = PMA_sanitize(PMA_DBI_getError());        } else {            $_SESSION['PMA_single_signon_error_message'] = __('Cannot log in to the MySQL server');        }    }    PMA_auth();} // end of the 'PMA_auth_fails()' function?>
<?php/** * Handles the visualization of GIS GEOMETRYCOLLECTION objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Geometrycollection extends PMA_GIS_Geometry{    // Hold the singleton instance of the class    private static $_instance;    /**     * A private constructor; prevents direct creation of object.     */    private function __construct()    {    }    /**     * Returns the singleton.     *     * @return the singleton     */    public static function singleton()    {        if (!isset(self::$_instance)) {            $class = __CLASS__;            self::$_instance = new $class;        }        return self::$_instance;    }    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public function scaleRow($spatial)    {        $min_max = array();        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $scale_data = $gis_obj->scaleRow($sub_part);            // Upadate minimum/maximum values for x and y cordinates.            $c_maxX = (float) $scale_data['maxX'];            if (! isset($min_max['maxX']) || $c_maxX > $min_max['maxX']) {                $min_max['maxX'] = $c_maxX;            }            $c_minX = (float) $scale_data['minX'];            if (! isset($min_max['minX']) || $c_minX < $min_max['minX']) {                $min_max['minX'] = $c_minX;            }            $c_maxY = (float) $scale_data['maxY'];            if (! isset($min_max['maxY']) || $c_maxY > $min_max['maxY']) {                $min_max['maxY'] = $c_maxY;            }            $c_minY = (float) $scale_data['minY'];            if (! isset($min_max['minY']) || $c_minY < $min_max['minY']) {                $min_max['minY'] = $c_minY;            }        }        return $min_max;    }    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public function prepareRowAsPng($spatial, $label, $color, $scale_data, $image)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $image = $gis_obj->prepareRowAsPng($sub_part, $label, $color, $scale_data, $image);        }        return $image;    }    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf)    {        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $pdf = $gis_obj->prepareRowAsPdf($sub_part, $label, $color, $scale_data, $pdf);        }        return $pdf;    }    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public function prepareRowAsSvg($spatial, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsSvg($sub_part, $label, $color, $scale_data);        }        return $row;    }    /**     * Prepares JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS GEOMETRYCOLLECTION object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS GEOMETRYCOLLECTION object     * @param string $color      Color for the GIS GEOMETRYCOLLECTION object     * @param array  $scale_data Array containing data related to scaling     *     * @return JavaScript related to a row in the GIS dataset     */    public function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data)    {        $row = '';        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($spatial, 19, (strlen($spatial) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $row .= $gis_obj->prepareRowAsOl($sub_part, $srid, $label, $color, $scale_data);        }        return $row;    }    /**     * Split the GEOMETRYCOLLECTION object and get its constituents.     *     * @param string $goem_col Geometry collection string     *     * @return the constituents of the geometry collection object     */    private function _explodeGeomCol($goem_col)    {        $sub_parts = array();        $br_count = 0;        $start = 0;        $count = 0;        foreach (str_split($goem_col) as $char) {            if ($char == '(') {                $br_count++;            } elseif ($char == ')') {                $br_count--;                if ($br_count == 0) {                    $sub_parts[] = substr($goem_col, $start, ($count + 1 - $start));                    $start = $count + 2;                }            }            $count++;        }        return $sub_parts;    }    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public function generateWkt($gis_data, $index, $empty = '')    {        $geom_count = (isset($gis_data['GEOMETRYCOLLECTION']['geom_count']))            ? $gis_data['GEOMETRYCOLLECTION']['geom_count'] : 1;        $wkt = 'GEOMETRYCOLLECTION(';        for ($i = 0; $i < $geom_count; $i++) {            if (isset($gis_data[$i]['gis_type'])) {                $type = $gis_data[$i]['gis_type'];                $gis_obj = PMA_GIS_Factory::factory($type);                if (! $gis_obj) {                    continue;                }                $wkt .= $gis_obj->generateWkt($gis_data, $i, $empty) . ',';            }        }        if (isset($gis_data[0]['gis_type'])) {            $wkt = substr($wkt, 0, strlen($wkt) - 1);        }        $wkt .= ')';        return $wkt;    }    /** Generate parameters for the GIS data editor from the value of the GIS column.     *     * @param string $value of the GIS column     * @param index  $index of the geometry     *     * @return  parameters for the GIS data editor from the value of the GIS column     */    public function generateParams($value)    {        $params = array();        $data = PMA_GIS_Geometry::generateParams($value);        $params['srid'] = $data['srid'];        $wkt = $data['wkt'];        // Trim to remove leading 'GEOMETRYCOLLECTION(' and trailing ')'        $goem_col = substr($wkt, 19, (strlen($wkt) - 20));        // Split the geometry collection object to get its constituents.        $sub_parts = $this->_explodeGeomCol($goem_col);        $params['GEOMETRYCOLLECTION']['geom_count'] = count($sub_parts);        $i = 0;        foreach ($sub_parts as $sub_part) {            $type_pos = stripos($sub_part, '(');            $type = substr($sub_part, 0, $type_pos);            $gis_obj = PMA_GIS_Factory::factory($type);            if (! $gis_obj) {                continue;            }            $params = array_merge($params, $gis_obj->generateParams($sub_part, $i));            $i++;        }        return $params;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * finishes HTML output * * updates javascript variables in index.php for correct working with querywindow * and navigation frame refreshing * * send buffered data if buffered * * WARNING: This script has to be included at the very end of your code because *          it will stop the script execution! * * always use $GLOBALS, as this script is also included by functions * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * for PMA_setHistory() */if (! PMA_isValid($_REQUEST['no_history']) && empty($GLOBALS['error_message']) && ! empty($GLOBALS['sql_query'])) {    PMA_setHistory(PMA_ifSetOr($GLOBALS['db'], ''),        PMA_ifSetOr($GLOBALS['table'], ''),        $GLOBALS['cfg']['Server']['user'],        $GLOBALS['sql_query']);}if ($GLOBALS['error_handler']->hasDisplayErrors()) {    echo '<div class="clearfloat">';    $GLOBALS['error_handler']->dispErrors();    echo '</div>';}if (count($GLOBALS['footnotes'])) {    echo '<div class="footnotes">';    foreach ($GLOBALS['footnotes'] as $footnote) {        echo '<span id="footnote_' . $footnote['nr'] . '"><sup>'            . $footnote['nr'] . '</sup> ' . $footnote['note'] . '</span><br />';    }    echo '</div>';}if (! empty($_SESSION['debug'])) {    $sum_time = 0;    $sum_exec = 0;    foreach ($_SESSION['debug']['queries'] as $query) {        $sum_time += $query['count'] * $query['time'];        $sum_exec += $query['count'];    }    echo '<div>';    echo count($_SESSION['debug']['queries']) . ' queries executed '        . $sum_exec . ' times in ' . $sum_time . ' seconds';    echo '<pre>';    print_r($_SESSION['debug']);    echo '</pre>';    echo '</div>';    $_SESSION['debug'] = array();}if (!$GLOBALS['is_ajax_request']) {?><script type="text/javascript">//<![CDATA[<?phpif (empty($GLOBALS['error_message'])) {    ?>$(document).ready(function() {// updates current settingsif (window.parent.setAll) {    window.parent.setAll('<?php        echo PMA_escapeJsString($GLOBALS['lang']) . "', '";        echo PMA_escapeJsString($GLOBALS['collation_connection']) . "', '";        echo PMA_escapeJsString($GLOBALS['server']) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) . "', '";        echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) . "', '";        echo PMA_escapeJsString($_SESSION[' PMA_token ']);?>');}    <?php    if (! empty($GLOBALS['reload'])) {        ?>// refresh navigation frame contentif (window.parent.refreshNavigation) {    window.parent.refreshNavigation();}        <?php    } else if (isset($_GET['reload_left_frame']) && $_GET['reload_left_frame'] == '1') {        // reload left frame (used by user preferences)        ?>        if (window.parent && window.parent.frame_navigation) {            window.parent.frame_navigation.location.reload();        }        <?php    }    ?>// set current db, table and sql query in the querywindowif (window.parent.reload_querywindow) {    window.parent.reload_querywindow(        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['db'], '')) ?>',        '<?php echo PMA_escapeJsString(PMA_ifSetOr($GLOBALS['table'], '')) ?>',        '<?php echo strlen($GLOBALS['sql_query']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL'] ? PMA_escapeJsString($GLOBALS['sql_query']) : ''; ?>');}    <?php}if (! empty($GLOBALS['focus_querywindow'])) {    ?>// set focus to the querywindowif (parent.querywindow && !parent.querywindow.closed && parent.querywindow.location) {    self.focus();}    <?php}?>if (window.parent.frame_content) {    // reset content frame name, as querywindow needs to set a unique name    // before submitting form data, and navigation frame needs the original name    if (typeof(window.parent.frame_content.name) != 'undefined'     && window.parent.frame_content.name != 'frame_content') {        window.parent.frame_content.name = 'frame_content';    }    if (typeof(window.parent.frame_content.id) != 'undefined'     && window.parent.frame_content.id != 'frame_content') {        window.parent.frame_content.id = 'frame_content';    }    //window.parent.frame_content.setAttribute('name', 'frame_content');    //window.parent.frame_content.setAttribute('id', 'frame_content');}});//]]></script><?php}// Link to itself to replicate windows including framesetif (! isset($GLOBALS['checked_special'])) {    $GLOBALS['checked_special'] = false;}if (PMA_getenv('SCRIPT_NAME') && empty($_POST) && !$GLOBALS['checked_special'] && ! $GLOBALS['is_ajax_request']) {    echo '<div id="selflink" class="print_ignore">' . "\n";    $url_params['target'] = basename(PMA_getenv('SCRIPT_NAME'));    ?><script type="text/javascript">//<![CDATA[/* Store current location in hash part of URL to allow direct bookmarking */setURLHash("<?php echo PMA_generate_common_url($url_params, 'text', ''); ?>");//]]></script><?php    echo '<a href="index.php' . PMA_generate_common_url($url_params) . '"'        . ' title="' . __('Open new phpMyAdmin window') . '" target="_blank">';    if ($GLOBALS['cfg']['NavigationBarIconic']) {        echo PMA_getImage('window-new.png', __('Open new phpMyAdmin window'));    }    if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {        echo __('Open new phpMyAdmin window');    }    echo '</a>' . "\n";    echo '</div>' . "\n";}// Include possible custom footersif (! $GLOBALS['is_ajax_request'] && file_exists(CUSTOM_FOOTER_FILE)) {    include CUSTOM_FOOTER_FILE;}/** * If we are in an AJAX request, we do not need to generate the closing tags for * body and html. */if (! $GLOBALS['is_ajax_request']) {?></body></html><?php}/** * Stops the script execution */exit;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {    exit;}$ID_KEY = "UPLOAD_IDENTIFIER";/** * Returns upload status. * * This is implementation for uploadprogress extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY        );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_uploadprogressCheck() || $ret['finished']) {        return $ret;    }    $status = uploadprogress_get_info($id);    if ($status) {        if ($status['bytes_uploaded'] == $status['bytes_total']) {            $ret['finished'] = true;        } else {            $ret['finished'] = false;        }        $ret['total']    = $status['bytes_total'];        $ret['complete'] = $status['bytes_uploaded'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }    } else {       $ret = array(                    'id'       => $id,                    'finished' => true,                    'percent'  => 100,                    'total'    => $ret['total'],                    'complete' => $ret['total'],                    'plugin'   => $ID_KEY                );    }    $_SESSION[$SESSION_KEY][$id] = $ret;    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */// Run common workrequire_once './libraries/common.inc.php';define('TABLE_MAY_BE_ABSENT', true);require './libraries/tbl_common.php';$url_query .= '&amp;goto=tbl_tracking.php&amp;back=tbl_tracking.php';$url_params['goto'] = 'tbl_tracking.php';;$url_params['back'] = 'tbl_tracking.php';// Init vars for tracking reportif (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    $selection_schema = false;    $selection_data   = false;    $selection_both  = false;    if (! isset($_REQUEST['logtype'])) {        $_REQUEST['logtype'] = 'schema_and_data';    }    if ($_REQUEST['logtype'] == 'schema') {        $selection_schema = true;    } elseif ($_REQUEST['logtype'] == 'data') {        $selection_data   = true;    } else {        $selection_both   = true;    }    if (! isset($_REQUEST['date_from'])) {        $_REQUEST['date_from'] = $data['date_from'];    }    if (! isset($_REQUEST['date_to'])) {        $_REQUEST['date_to'] = $data['date_to'];    }    if (! isset($_REQUEST['users'])) {        $_REQUEST['users'] = '*';    }    $filter_ts_from = strtotime($_REQUEST['date_from']);    $filter_ts_to   = strtotime($_REQUEST['date_to']);    $filter_users   = array_map('trim', explode(',', $_REQUEST['users']));}// Prepare exportif (isset($_REQUEST['report_export'])) {/** * Filters tracking entries * * @param array   the entries to filter * @param string  "from" date * @param string  "to" date * @param string  users * * @return  array   filtered entries * */    function PMA_filter_tracking($data, $filter_ts_from, $filter_ts_to, $filter_users) {        $tmp_entries = array();        $id = 0;        foreach ( $data as $entry ) {            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {                $tmp_entries[] = array( 'id' => $id,                                    'timestamp' => $timestamp,                                    'username'  => $entry['username'],                                    'statement' => $entry['statement']                             );            }            $id++;        }        return($tmp_entries);    }    $entries = array();    // Filtering data definition statements    if ($_REQUEST['logtype'] == 'schema' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['ddlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Filtering data manipulation statements    if ($_REQUEST['logtype'] == 'data' || $_REQUEST['logtype'] == 'schema_and_data') {        $entries = array_merge($entries, PMA_filter_tracking($data['dmlog'], $filter_ts_from, $filter_ts_to, $filter_users));    }    // Sort it    foreach ($entries as $key => $row) {        $ids[$key]        = $row['id'];        $timestamps[$key] = $row['timestamp'];        $usernames[$key]  = $row['username'];        $statements[$key] = $row['statement'];    }    array_multisort($timestamps, SORT_ASC, $ids, SORT_ASC, $usernames, SORT_ASC, $statements, SORT_ASC, $entries);}// Export as file downloadif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldumpfile') {    @ini_set('url_rewriter.tags', '');    $dump = "# " . sprintf(__('Tracking report for table `%s`'), htmlspecialchars($_REQUEST['table'])) . "\n" .            "# " . date('Y-m-d H:i:s') . "\n";    foreach ($entries as $entry) {        $dump .= $entry['statement'];    }    $filename = 'log_' . htmlspecialchars($_REQUEST['table']) . '.sql';    PMA_download_header($filename, 'text/x-sql', strlen($dump));    echo $dump;    exit();}/** * Gets tables informations *//** * Displays top menu links */require_once './libraries/tbl_links.inc.php';echo '<br />';/** * Actions */// Create tracking versionif (isset($_REQUEST['submit_create_version'])) {    $tracking_set = '';    if ($_REQUEST['alter_table'] == true) {        $tracking_set .= 'ALTER TABLE,';    }    if ($_REQUEST['rename_table'] == true) {        $tracking_set .= 'RENAME TABLE,';    }    if ($_REQUEST['create_table'] == true) {        $tracking_set .= 'CREATE TABLE,';    }    if ($_REQUEST['drop_table'] == true) {        $tracking_set .= 'DROP TABLE,';    }    if ($_REQUEST['create_index'] == true) {        $tracking_set .= 'CREATE INDEX,';    }    if ($_REQUEST['drop_index'] == true) {        $tracking_set .= 'DROP INDEX,';    }    if ($_REQUEST['insert'] == true) {        $tracking_set .= 'INSERT,';    }    if ($_REQUEST['update'] == true) {        $tracking_set .= 'UPDATE,';    }    if ($_REQUEST['delete'] == true) {        $tracking_set .= 'DELETE,';    }    if ($_REQUEST['truncate'] == true) {        $tracking_set .= 'TRUNCATE,';    }    $tracking_set = rtrim($tracking_set, ',');    if (PMA_Tracker::createVersion($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'], $tracking_set )) {        $msg = PMA_Message::success(sprintf(__('Version %s is created, tracking for %s.%s is activated.'), htmlspecialchars($_REQUEST['version']), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])));        $msg->display();    }}// Deactivate trackingif (isset($_REQUEST['submit_deactivate_now'])) {    if (PMA_Tracker::deactivateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is deactivated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Activate trackingif (isset($_REQUEST['submit_activate_now'])) {    if (PMA_Tracker::activateTracking($GLOBALS['db'], $GLOBALS['table'], $_REQUEST['version'])) {        $msg = PMA_Message::success(sprintf(__('Tracking for %s.%s , version %s is activated.'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table']), htmlspecialchars($_REQUEST['version'])));        $msg->display();    }}// Export as SQL executionif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'execution') {    foreach ($entries as $entry) {        $sql_result = PMA_DBI_query( "/*NOTRACK*/\n" . $entry['statement'] );    }    $msg = PMA_Message::success(__('SQL statements executed.'));    $msg->display();}// Export as SQL dumpif (isset($_REQUEST['report_export']) && $_REQUEST['export_type'] == 'sqldump') {    $new_query =    "# " . __('You can execute the dump by creating and using a temporary database. Please ensure that you have the privileges to do so.') . "\n" .                    "# " . __('Comment out these two lines if you do not need them.') . "\n" .                    "\n" .                    "CREATE database IF NOT EXISTS pma_temp_db; \n" .                    "USE pma_temp_db; \n" .                    "\n";    foreach ($entries as $entry) {        $new_query .= $entry['statement'];    }    $msg = PMA_Message::success(__('SQL statements exported. Please copy the dump or execute it.'));    $msg->display();    $db_temp = $db;    $table_temp = $table;    $db = $table = '';    include_once './libraries/sql_query_form.lib.php';    PMA_sqlQueryForm($new_query, 'sql');    $db = $db_temp;    $table = $table_temp;}/* * Schema snapshot */if (isset($_REQUEST['snapshot'])) {?>    <h3><?php echo __('Structure snapshot');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3><?php    $data = PMA_Tracker::getTrackedData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version']);    // Get first DROP TABLE and CREATE TABLE statements    $drop_create_statements = $data['ddlog'][0]['statement'];    if (strstr($data['ddlog'][0]['statement'], 'DROP TABLE')) {        $drop_create_statements .= $data['ddlog'][1]['statement'];    }    // Print SQL code    PMA_showMessage(sprintf(__('Version %s snapshot (SQL code)'), htmlspecialchars($_REQUEST['version'])), $drop_create_statements);    // Unserialize snapshot    $temp = unserialize($data['schema_snapshot']);    $columns = $temp['COLUMNS'];    $indexes = $temp['INDEXES'];?>    <h3><?php echo __('Structure');?></h3>    <table id="tablestructure" class="data">    <thead>    <tr>        <th><?php echo __('Column'); ?></th>        <th><?php echo __('Type'); ?></th>        <th><?php echo __('Collation'); ?></th>        <th><?php echo __('Null'); ?></th>        <th><?php echo __('Default'); ?></th>        <th><?php echo __('Extra'); ?></th>        <th><?php echo __('Comment'); ?></th>    </tr>    </thead>    <tbody><?php    $style = 'odd';    foreach ($columns as $field_index => $field) {?>        <tr class="noclick <?php echo $style; ?>">            <?php            if ($field['Key'] == 'PRI') {                echo '<td><b><u>' . htmlspecialchars($field['Field']) . '</u></b></td>' . "\n";            } else {                echo '<td><b>' . htmlspecialchars($field['Field']) . '</b></td>' . "\n";            }            ?>            <td><?php echo htmlspecialchars($field['Type']);?></td>            <td><?php echo htmlspecialchars($field['Collation']);?></td>            <td><?php echo (($field['Null'] == 'YES') ? __('Yes') : __('No')); ?></td>            <td><?php            if (isset($field['Default'])) {                $extracted_fieldspec = PMA_extractFieldSpec($field['Type']);                if ($extracted_fieldspec['type'] == 'bit') {                    // here, $field['Default'] contains something like b'010'                    echo PMA_convert_bit_default_value($field['Default']);                } else {                    echo htmlspecialchars($field['Default']);                }            } else {                if ($field['Null'] == 'YES') {                    echo '<i>NULL</i>';                } else {                    echo '<i>' . _pgettext('None for default', 'None') . '</i>';                }            } ?></td>            <td><?php echo htmlspecialchars($field['Extra']);?></td>            <td><?php echo htmlspecialchars($field['Comment']);?></td>        </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }    }?>    </tbody>    </table><?php    if (count($indexes) > 0) {?>        <h3><?php echo __('Indexes');?></h3>        <table id="tablestructure_indexes" class="data">        <thead>        <tr>            <th><?php echo __('Keyname');?></th>            <th><?php echo __('Type');?></th>            <th><?php echo __('Unique');?></th>            <th><?php echo __('Packed');?></th>            <th><?php echo __('Column');?></th>            <th><?php echo __('Cardinality');?></th>            <th><?php echo __('Collation');?></th>            <th><?php echo __('Null');?></th>            <th><?php echo __('Comment');?></th>        </tr>        <tbody><?php        $style = 'odd';        foreach ($indexes as $indexes_index => $index) {            if ($index['Non_unique'] == 0) {                $str_unique = __('Yes');            } else {                $str_unique = __('No');            }            if ($index['Packed'] != '') {                $str_packed = __('Yes');            } else {                $str_packed = __('No');            }?>            <tr class="noclick <?php echo $style; ?>">                <td><b><?php echo htmlspecialchars($index['Key_name']);?></b></td>                <td><?php echo htmlspecialchars($index['Index_type']);?></td>                <td><?php echo $str_unique;?></td>                <td><?php echo $str_packed;?></td>                <td><?php echo htmlspecialchars($index['Column_name']);?></td>                <td><?php echo htmlspecialchars($index['Cardinality']);?></td>                <td><?php echo htmlspecialchars($index['Collation']);?></td>                <td><?php echo htmlspecialchars($index['Null']);?></td>                <td><?php echo htmlspecialchars($index['Comment']);?></td>            </tr><?php            if ($style == 'even') {                $style = 'odd';            } else {                $style = 'even';            }        }?>    </tbody>    </table><?php    } // endif?>    <br /><hr /><br /><?php}// end of snapshot report/* *  Tracking report */if (isset($_REQUEST['report']) && (isset($_REQUEST['delete_ddlog']) || isset($_REQUEST['delete_dmlog']))) {    if (isset($_REQUEST['delete_ddlog'])) {        // Delete ddlog row data        $delete_id = $_REQUEST['delete_ddlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['ddlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DDL', $data['ddlog']))                $msg = PMA_Message::success(__('Tracking data definition successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }    if (isset($_REQUEST['delete_dmlog'])) {        // Delete dmlog row data        $delete_id = $_REQUEST['delete_dmlog'];        // Only in case of valable id        if ($delete_id == (int)$delete_id) {            unset($data['dmlog'][$delete_id]);            if (PMA_Tracker::changeTrackingData($_REQUEST['db'], $_REQUEST['table'], $_REQUEST['version'], 'DML', $data['dmlog']))                $msg = PMA_Message::success(__('Tracking data manipulation successfully deleted'));            else                $msg = PMA_Message::rawError(__('Query error'));            $msg->display();        }    }}if (isset($_REQUEST['report']) || isset($_REQUEST['report_export'])) {    ?>    <h3><?php echo __('Tracking report');?>  [<a href="tbl_tracking.php?<?php echo $url_query;?>"><?php echo __('Close');?></a>]</h3>    <small><?php echo __('Tracking statements') . ' ' . htmlspecialchars($data['tracking']); ?></small><br/>    <br/>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    $str1 = '<select name="logtype">' .            '<option value="schema"' . ($selection_schema ? ' selected="selected"' : '') . '>' . __('Structure only') . '</option>' .            '<option value="data"' . ($selection_data ? ' selected="selected"' : ''). '>' . __('Data only') . '</option>' .            '<option value="schema_and_data"' . ($selection_both ? ' selected="selected"' : '') . '>' . __('Structure and data') . '</option>' .            '</select>';    $str2 = '<input type="text" name="date_from" value="' . htmlspecialchars($_REQUEST['date_from']) . '" size="19" />';    $str3 = '<input type="text" name="date_to" value="' . htmlspecialchars($_REQUEST['date_to']) . '" size="19" />';    $str4 = '<input type="text" name="users" value="' . htmlspecialchars($_REQUEST['users']) . '" />';    $str5 = '<input type="submit" name="list_report" value="' . __('Go') . '" />';    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    // Prepare delete link content here    $drop_image_or_text = '';    if (true == $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= PMA_getImage('b_drop.png', __('Delete tracking data row from report'));    }    if ('both' === $GLOBALS['cfg']['PropertiesIconic'] || false === $GLOBALS['cfg']['PropertiesIconic']) {        $drop_image_or_text .= __('Delete');    }    /*     *  First, list tracked data definition statements     */    $i = 1;    if (count($data['ddlog']) == 0 && count($data['dmlog']) == 0) {        $msg = PMA_Message::notice(__('No data'));        $msg->display();    }    if ($selection_schema || $selection_both  && count($data['ddlog']) > 0) {    ?>        <table id="ddl_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data definition statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['ddlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i;?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']);?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_ddlog=<?php echo $i-1; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }        ?>        </tbody>        </table>    <?php    } //endif    // Memorize data definition amount    $ddlog_count = $i;    /*     *  Secondly, list tracked data manipulation statements     */    if (($selection_data || $selection_both) && count($data['dmlog']) > 0) {    ?>        <table id="dml_versions" class="data" width="100%">        <thead>        <tr>            <th width="18">#</th>            <th width="100"><?php echo __('Date');?></th>            <th width="60"><?php echo __('Username');?></th>            <th><?php echo __('Data manipulation statement');?></th>            <th><?php echo __('Delete');?></th>        </tr>        </thead>        <tbody>        <?php        $style = 'odd';        foreach ($data['dmlog'] as $entry) {            if (strlen($entry['statement']) > $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) {                $statement = substr($entry['statement'], 0, $GLOBALS['cfg']['MaxCharactersInDisplayedSQL']) . '[...]';            } else {                $statement  = PMA_formatSql(PMA_SQP_parse($entry['statement']));            }            $timestamp = strtotime($entry['date']);            if ($timestamp >= $filter_ts_from && $timestamp <= $filter_ts_to &&              ( in_array('*', $filter_users) || in_array($entry['username'], $filter_users) ) ) {        ?>                <tr class="noclick <?php echo $style; ?>">                    <td><small><?php echo $i; ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['date']); ?></small></td>                    <td><small><?php echo htmlspecialchars($entry['username']); ?></small></td>                    <td><?php echo $statement; ?></td>                    <td nowrap="nowrap"><a href="tbl_tracking.php?<?php echo $url_query;?>&amp;report=true&amp;version=<?php echo $version['version'];?>&amp;delete_dmlog=<?php echo $i-$ddlog_count; ?>"><?php echo $drop_image_or_text; ?></a></td>                </tr>        <?php                if ($style == 'even') {                    $style = 'odd';                } else {                    $style = 'even';                }                $i++;            }        }    ?>        </tbody>        </table>    <?php    }    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <?php    printf(__('Show %s with dates from %s to %s by user %s %s'), $str1, $str2, $str3, $str4, $str5);    $str_export1 =  '<select name="export_type">' .                    '<option value="sqldumpfile">' . __('SQL dump (file download)') . '</option>' .                    '<option value="sqldump">' . __('SQL dump') . '</option>' .                    '<option value="execution" onclick="alert(\'' . PMA_escapeJsString(__('This option will replace your table and contained data.')) .'\')">' . __('SQL execution') . '</option>' .                    '</select>';    $str_export2 = '<input type="submit" name="report_export" value="' . __('Go') .'" />';    ?>    </form>    <form method="post" action="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $_REQUEST['version'])); ?>">    <input type="hidden" name="logtype" value="<?php echo htmlspecialchars($_REQUEST['logtype']);?>" />    <input type="hidden" name="date_from" value="<?php echo htmlspecialchars($_REQUEST['date_from']);?>" />    <input type="hidden" name="date_to" value="<?php echo htmlspecialchars($_REQUEST['date_to']);?>" />    <input type="hidden" name="users" value="<?php echo htmlspecialchars($_REQUEST['users']);?>" />    <?php    echo "<br/>" . sprintf(__('Export as %s'), $str_export1) . $str_export2 . "<br/>";    ?>    </form>    <?php    echo "<br/><br/><hr/><br/>\n";} // end of report/* * List selectable tables */$sql_query = " SELECT DISTINCT db_name, table_name FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($GLOBALS['db']) . "' " .             " ORDER BY db_name, table_name";$sql_result = PMA_query_as_controluser($sql_query);if (PMA_DBI_num_rows($sql_result) > 0) {?>    <form method="post" action="tbl_tracking.php?<?php echo $url_query;?>">    <select name="table">    <?php    while ($entries = PMA_DBI_fetch_array($sql_result)) {        if (PMA_Tracker::isTracked($entries['db_name'], $entries['table_name'])) {            $status = ' (' . __('active') . ')';        } else {            $status = ' (' . __('not active') . ')';        }        if ($entries['table_name'] == $_REQUEST['table']) {            $s = ' selected="selected"';        } else {            $s = '';        }        echo '<option value="' . htmlspecialchars($entries['table_name']) . '"' . $s . '>' . htmlspecialchars($entries['db_name']) . ' . ' . htmlspecialchars($entries['table_name']) . $status . '</option>' . "\n";    }    ?>    </select>    <input type="submit" name="show_versions_submit" value="<?php echo __('Show versions');?>" />    </form><?php}?><br /><?php/* * List versions of current table */$sql_query = " SELECT * FROM " .             PMA_backquote($GLOBALS['cfg']['Server']['pmadb']) . "." .             PMA_backquote($GLOBALS['cfg']['Server']['tracking']) .             " WHERE db_name = '" . PMA_sqlAddSlashes($_REQUEST['db']) . "' ".             " AND table_name = '" . PMA_sqlAddSlashes($_REQUEST['table']) ."' ".             " ORDER BY version DESC ";$sql_result = PMA_query_as_controluser($sql_query);$last_version = 0;$maxversion = PMA_DBI_fetch_array($sql_result);$last_version = $maxversion['version'];if ($last_version > 0) {?>    <table id="versions" class="data">    <thead>    <tr>        <th><?php echo __('Database');?></th>        <th><?php echo __('Table');?></th>        <th><?php echo __('Version');?></th>        <th><?php echo __('Created');?></th>        <th><?php echo __('Updated');?></th>        <th><?php echo __('Status');?></th>        <th><?php echo __('Show');?></th>    </tr>    </thead>    <tbody>    <?php    $style = 'odd';    PMA_DBI_data_seek($sql_result, 0);    while ($version = PMA_DBI_fetch_array($sql_result)) {        if ($version['tracking_active'] == 1) {            $version_status = __('active');        } else {            $version_status = __('not active');        }        if ($version['version'] == $last_version) {            if ($version['tracking_active'] == 1) {                $tracking_active = true;            } else {                $tracking_active = false;            }        }    ?>        <tr class="noclick <?php echo $style;?>">            <td><?php echo htmlspecialchars($version['db_name']);?></td>            <td><?php echo htmlspecialchars($version['table_name']);?></td>            <td><?php echo htmlspecialchars($version['version']);?></td>            <td><?php echo htmlspecialchars($version['date_created']);?></td>            <td><?php echo htmlspecialchars($version['date_updated']);?></td>            <td><?php echo $version_status;?></td>            <td> <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('report' => 'true', 'version' => $version['version']));?>"><?php echo __('Tracking report');?></a>                | <a href="tbl_tracking.php<?php echo PMA_generate_common_url($url_params + array('snapshot' => 'true', 'version' => $version['version']));?>"><?php echo __('Structure snapshot');?></a>            </td>        </tr>    <?php        if ($style == 'even') {            $style = 'odd';        } else {            $style = 'even';        }    }    ?>    </tbody>    </table>    <?php if ($tracking_active == true) {?>        <div id="div_deactivate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Deactivate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_deactivate_now" value="<?php echo __('Deactivate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }    ?>    <?php if ($tracking_active == false) {?>        <div id="div_activate_tracking">        <form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>">        <fieldset>            <legend><?php printf(__('Activate tracking for %s.%s'), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>            <input type="hidden" name="version" value="<?php echo $last_version; ?>" />            <input type="submit" name="submit_activate_now" value="<?php echo __('Activate now'); ?>" />        </fieldset>        </form>        </div>    <?php    }}?><div id="div_create_version"><form method="post" action="tbl_tracking.php?<?php echo $url_query; ?>"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><fieldset>    <legend><?php printf(__('Create version %s of %s.%s'), ($last_version + 1), htmlspecialchars($GLOBALS['db']), htmlspecialchars($GLOBALS['table'])); ?></legend>    <input type="hidden" name="version" value="<?php echo ($last_version + 1); ?>" />    <p><?php echo __('Track these data definition statements:');?></p>    <input type="checkbox" name="alter_table" value="true" checked="checked" /> ALTER TABLE<br/>    <input type="checkbox" name="rename_table" value="true" checked="checked" /> RENAME TABLE<br/>    <input type="checkbox" name="create_table" value="true" checked="checked" /> CREATE TABLE<br/>    <input type="checkbox" name="drop_table" value="true" checked="checked" /> DROP TABLE<br/>    <br/>    <input type="checkbox" name="create_index" value="true" checked="checked" /> CREATE INDEX<br/>    <input type="checkbox" name="drop_index" value="true" checked="checked" /> DROP INDEX<br/>    <p><?php echo __('Track these data manipulation statements:');?></p>    <input type="checkbox" name="insert" value="true" checked="checked" /> INSERT<br/>    <input type="checkbox" name="update" value="true" checked="checked" /> UPDATE<br/>    <input type="checkbox" name="delete" value="true" checked="checked" /> DELETE<br/>    <input type="checkbox" name="truncate" value="true" checked="checked" /> TRUNCATE<br/></fieldset><fieldset class="tblFooters">    <input type="submit" name="submit_create_version" value="<?php echo __('Create version'); ?>" /></fieldset></form></div><br class="clearfloat"/><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Parser bug report decoder * * This is the parser bug decoder system * Throw the bug data in the query box, and hit submit for output. * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * * @package PhpMyAdmin-debug *//** * Displays the form */?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US"><head>    <link rel="icon" href="./favicon.ico" type="image/x-icon" />    <link rel="shortcut icon" href="./favicon.ico" type="image/x-icon" />    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />    <title>phpMyAdmin - Parser bug report decoder</title>    <style type="text/css">    <!--    body, p {        font-family: Arial, Helvetica, sans-serif;        font-size:   medium;    }    h1 {        font-family: Verdana, Arial, Helvetica, sans-serif;        font-size:   large;        font-weight: bold;        color:       #000066;    }    //-->    </style></head><body bgcolor="#FFFFFF"><h1>Parser bug report decoder</h1><br /><form method="post" action="./decode_bug.php">    <input type="hidden" name="bar" value="<?php echo rand(); ?>" />    Encoded bug report:<br />    <textarea name="bug_encoded" cols="72" rows="10"></textarea>    <br /><br />    <input type="submit" /></form><hr /><?php/** * If the form has been submitted -> decodes the bug report *//** * Display the decoded bug report in ASCII format * * @param  string  the text data * * @return string  the text enclosed by "<pre>...</pre>" tags * * @access public */function PMA_printDecodedBug($textdata){    return '<pre>' . htmlspecialchars($textdata) . '</pre><br />';} // end of the "PMA_printDecodedBug()" functionif (!empty($_POST) && isset($_POST['bug_encoded'])) {    $bug_encoded = $_POST['bug_encoded'];}if (!empty($bug_encoded) && is_string($bug_encoded)) {    if (function_exists('get_magic_quotes_gpc') && get_magic_quotes_gpc()) {        $bug_encoded = stripslashes($bug_encoded);    }    $bug_encoded     = preg_replace('/[[:space:]]/', '', $bug_encoded);    $bug_decoded     = base64_decode($bug_encoded);    if (substr($bug_encoded, 0, 2) == 'eN') {        if (function_exists('gzuncompress')) {                $result  = PMA_printDecodedBug(gzuncompress($bug_decoded));            } else {                $result  = 'Error: &quot;gzuncompress()&quot; is unavailable!' . "\n";        }    } else {        $result  = PMA_printDecodedBug($bug_decoded);    } // end if... else...    echo '<p>Decoded:</p>' . "\n"         . $result . "\n";} // end if?></body></html>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$die_save_pos = 0;require_once 'pmd_save_pos.php';extract($_POST, EXTR_SKIP);$tables = PMA_DBI_get_tables_full($db, $T1);$type_T1 = strtoupper($tables[$T1]['ENGINE']);$tables = PMA_DBI_get_tables_full($db, $T2);$type_T2 = strtoupper($tables[$T2]['ENGINE']);// native foreign keyif (PMA_foreignkey_supported($type_T1) && PMA_foreignkey_supported($type_T2) && $type_T1 == $type_T2) {    // relation exists?    $existrel_foreign = PMA_getForeigners($db, $T2, '', 'foreign');    if (isset($existrel_foreign[$F2])     && isset($existrel_foreign[$F2]['constraint'])) {         PMD_return_new(0, __('Error: relation already exists.'));    }// note: in InnoDB, the index does not requires to be on a PRIMARY// or UNIQUE key// improve: check all other requirements for InnoDB relations    $result      = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T1) . ';');    $index_array1   = array(); // will be use to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array1[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    $result     = PMA_DBI_query('SHOW INDEX FROM ' . PMA_backquote($T2) . ';');    $index_array2  = array(); // will be used to emphasis prim. keys in the table view    while ($row = PMA_DBI_fetch_assoc($result))        $index_array2[$row['Column_name']] = 1;    PMA_DBI_free_result($result);    if (! empty($index_array1[$F1]) && ! empty($index_array2[$F2])) {        $upd_query  = 'ALTER TABLE ' . PMA_backquote($T2)                 . ' ADD FOREIGN KEY ('                 . PMA_backquote($F2) . ')'                 . ' REFERENCES '                 . PMA_backquote($db) . '.'                 . PMA_backquote($T1) . '('                 . PMA_backquote($F1) . ')';        if ($on_delete != 'nix') {            $upd_query   .= ' ON DELETE ' . $on_delete;        }        if ($on_update != 'nix') {            $upd_query   .= ' ON UPDATE ' . $on_update;        }        PMA_DBI_try_query($upd_query) or PMD_return_new(0, __('Error: Relation not added.'));    PMD_return_new(1, __('FOREIGN KEY relation added'));    }// internal (pmadb) relation} else {    if ($GLOBALS['cfgRelation']['relwork'] == false) {        PMD_return_new(0, _('General relation features') . ':' . _('Disabled'));    } else {        // no need to recheck if the keys are primary or unique at this point,        // this was checked on the interface part        $q  = 'INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($cfgRelation['relation'])                            . '(master_db, master_table, master_field, foreign_db, foreign_table, foreign_field)'                            . ' values('                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T2) . '\', '                            . '\'' . PMA_sqlAddSlashes($F2) . '\', '                            . '\'' . PMA_sqlAddSlashes($db) . '\', '                            . '\'' . PMA_sqlAddSlashes($T1) . '\','                            . '\'' . PMA_sqlAddSlashes($F1) . '\')';        if (PMA_query_as_controluser($q, false, PMA_DBI_QUERY_STORE)) {            PMD_return_new(1, __('Internal relation added'));        } else {            PMD_return_new(0, __('Error: Relation not added.'));        }   }}function PMD_return_new($b,$ret){    global $db,$T1,$F1,$T2,$F2;    header("Content-Type: text/xml; charset=utf-8");    header("Cache-Control: no-cache");    die('<root act="relation_new" return="'.$ret.'" b="'.$b.    '" DB1="'.urlencode($db).    '" T1="'.urlencode($T1).    '" F1="'.urlencode($F1).    '" DB2="'.urlencode($db).    '" T2="'.urlencode($T2).    '" F2="'.urlencode($F2).    '"></root>');}?>
<?php/** * Enter description here... * @package PhpMyAdmin * *//** * Database listing. */require_once './libraries/List_Database.class.php';/** * phpMyAdmin main Controller * * * * @package PhpMyAdmin */class PMA{    /**     * Holds database list     *     * @var PMA_List_Database     */    protected $databases = null;    /**     * DBMS user link     *     * @var resource     */    protected $userlink = null;    /**     * DBMS control link     *     * @var resource     */    protected $controllink = null;    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @return mixed     */    public function __get($param)    {        switch ($param) {            case 'databases' :                return $this->getDatabaseList();                break;            case 'userlink' :                return $this->userlink;                break;            case 'controllink' :                return $this->controllink;                break;        }        return null;    }    /**     * magic access to protected/inaccessible members/properties     *     * @see http://php.net/language.oop5.overloading     *     * @param string $param     * @param mixed  $value     */    public function __set($param, $value)    {        switch ($param) {            case 'userlink' :                $this->userlink = $value;                break;            case 'controllink' :                $this->controllink = $value;                break;        }    }    /**     * Accessor to PMA::$databases     *     * @return PMA_List_Databases     */    public function getDatabaseList()    {        if (null === $this->databases) {            $this->databases = new PMA_List_Database($this->userlink, $this->controllink);        }        return $this->databases;    }}?>
<?php/** * Base class for all GIS data type classes. * * @package PhpMyAdmin-GIS */abstract class PMA_GIS_Geometry{    /**     * Prepares and returns the code related to a row in the GIS dataset as SVG.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Data related to scaling     *     * @return the code related to a row in the GIS dataset     */    public abstract function prepareRowAsSvg($spatial, $label, $color, $scale_data);    /**     * Adds to the PNG image object, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $image      Image object     *     * @return the modified image object     */    public abstract function prepareRowAsPng($spatial, $label, $color, $scale_data, $image);    /**     * Adds to the TCPDF instance, the data related to a row in the GIS dataset.     *     * @param string $spatial    GIS data object     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     * @param image  $pdf        TCPDF instance     *     * @return the modified TCPDF instance     */    public abstract function prepareRowAsPdf($spatial, $label, $color, $scale_data, $pdf);    /**     * Prepares the JavaScript related to a row in the GIS dataset     * to visualize it with OpenLayers.     *     * @param string $spatial    GIS data object     * @param int    $srid       Spatial reference ID     * @param string $label      Label for the GIS data object     * @param string $color      Color for the GIS data object     * @param array  $scale_data Array containing data related to scaling     *     * @return the JavaScript related to a row in the GIS dataset     */    public abstract function prepareRowAsOl($spatial, $srid, $label, $color, $scale_data);    /**     * Scales each row.     *     * @param string $spatial spatial data of a row     *     * @return array containing the min, max values for x and y cordinates     */    public abstract function scaleRow($spatial);    /**     * Generate the WKT with the set of parameters passed by the GIS editor.     *     * @param array  $gis_data GIS data     * @param int    $index    Index into the parameter object     * @param string $empty    Value for empty points     *     * @return WKT with the set of parameters passed by the GIS editor     */    public abstract function generateWkt($gis_data, $index, $empty);    /**     * Returns OpenLayers.Bounds object that correspond to the bounds of GIS data.     *     * @param string $srid       Spatial reference ID     * @param array  $scale_data Data related to scaling     *     * @return OpenLayers.Bounds object that correspond to the bounds of GIS data     */    protected function getBoundsForOl($srid, $scale_data)    {        return 'bound = new OpenLayers.Bounds(); bound.extend(new OpenLayers.LonLat('            . $scale_data['minX'] . ', ' . $scale_data['minY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject())); bound.extend(new OpenLayers.LonLat('            . $scale_data['maxX'] . ', ' . $scale_data['maxY']            . ').transform(new OpenLayers.Projection("EPSG:'            . $srid . '"), map.getProjectionObject()));';    }    /**     * Update the min, max values with the given point set.     *     * @param string $point_set Point set     * @param array  $min_max   Existing min, max values     *     * @return the updated min, max values     */    protected function setMinMax($point_set, $min_max)    {        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            $x = (float) $cordinates[0];            if (! isset($min_max['maxX']) || $x > $min_max['maxX']) {                $min_max['maxX'] = $x;            }            if (! isset($min_max['minX']) || $x < $min_max['minX']) {                $min_max['minX'] = $x;            }            $y = (float) $cordinates[1];            if (! isset($min_max['maxY']) || $y > $min_max['maxY']) {                $min_max['maxY'] = $y;            }            if (! isset($min_max['minY']) || $y < $min_max['minY']) {                $min_max['minY'] = $y;            }        }        return $min_max;    }    /**     * Generate parameters for the GIS data editor from the value of the GIS column.     * This method performs common work.     * More specific work is performed by each of the geom classes.     *     * @param $gis_string $value of the GIS column     *     * @return array parameters for the GIS editor from the value of the GIS column     */    protected function generateParams($value)    {        $geom_types = '(POINT|MULTIPOINT|LINESTRING|MULTILINESTRING|POLYGON|MULTIPOLYGON|GEOMETRYCOLLECTION)';        $srid = 0;        $wkt = '';        if (preg_match("/^'" . $geom_types . "\(.*\)',[0-9]*$/i", $value)) {            $last_comma = strripos($value, ",");            $srid = trim(substr($value, $last_comma + 1));            $wkt = trim(substr($value, 1, $last_comma - 2));        } elseif (preg_match("/^" . $geom_types . "\(.*\)$/i", $value)) {            $wkt = $value;        }        return array('srid' => $srid, 'wkt' => $wkt);    }    /**     * Extracts points, scales and returns them as an array.     *     * @param string  $point_set  String of comma sperated points     * @param array   $scale_data Data related to scaling     * @param boolean $linear     If true, as a 1D array, else as a 2D array     *     * @return scaled points     */    protected function extractPoints($point_set, $scale_data, $linear = false)    {        $points_arr = array();        // Seperate each point        $points = explode(",", $point_set);        foreach ($points as $point) {            // Extract cordinates of the point            $cordinates = explode(" ", $point);            if (isset($cordinates[0]) && trim($cordinates[0]) != ''                && isset($cordinates[1]) && trim($cordinates[1]) != ''            ) {                if ($scale_data != null) {                    $x = ($cordinates[0] - $scale_data['x']) * $scale_data['scale'];                    $y = $scale_data['height'] - ($cordinates[1] - $scale_data['y']) * $scale_data['scale'];                } else {                    $x = trim($cordinates[0]);                    $y = trim($cordinates[1]);                }            } else {                $x = '';                $y = '';            }            if (! $linear) {                $points_arr[] = array($x, $y);            } else {                $points_arr[] = $x;                $points_arr[] = $y;            }        }        return $points_arr;    }    /**     * Generates JavaScriipt for adding points for OpenLayers polygon.     *     * @param string $polygon points of a polygon in WKT form     * @param string $srid    spatial reference id     *     * @return JavaScriipt for adding points for OpenLayers polygon     */    protected function addPointsForOpenLayersPolygon($polygon, $srid)    {        $row = 'new OpenLayers.Geometry.Polygon(new Array(';        // If the polygon doesnt have an inner polygon        if (strpos($polygon, "),(") === false) {            $points_arr = $this->extractPoints($polygon, null);            $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';            foreach ($points_arr as $point) {                $row .= '(new OpenLayers.Geometry.Point('                    . $point[0] . ', ' . $point[1] . '))'                    . '.transform(new OpenLayers.Projection("EPSG:'                    . $srid . '"), map.getProjectionObject()), ';            }            $row = substr($row, 0, strlen($row) - 2);            $row .= '))';        } else {            // Seperate outer and inner polygons            $parts = explode("),(", $polygon);            foreach ($parts as $ring) {                $points_arr = $this->extractPoints($ring, null);                $row .= 'new OpenLayers.Geometry.LinearRing(new Array(';                foreach ($points_arr as $point) {                    $row .= '(new OpenLayers.Geometry.Point('                        . $point[0] . ', ' . $point[1] . '))'                        . '.transform(new OpenLayers.Projection("EPSG:'                        . $srid . '"), map.getProjectionObject()), ';                }                $row = substr($row, 0, strlen($row) - 2);                $row .= ')), ';            }            $row = substr($row, 0, strlen($row) - 2);        }        $row .= ')), ';        return $row;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Zip file creation class. * Makes zip files. * * @see Official ZIP file format: http://www.pkware.com/support/zip-app-note * * @access  public * @package PhpMyAdmin */class zipfile{    /**     * Whether to echo zip as it's built or return as string from -> file     *     * @var  boolean  $doWrite     */    var $doWrite = false;    /**     * Array to store compressed data     *     * @var  array    $datasec     */    var $datasec      = array();    /**     * Central directory     *     * @var  array    $ctrl_dir     */    var $ctrl_dir     = array();    /**     * End of central directory record     *     * @var  string   $eof_ctrl_dir     */    var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00";    /**     * Last offset position     *     * @var  integer  $old_offset     */    var $old_offset   = 0;    /**     * Sets member variable this -> doWrite to true     * - Should be called immediately after class instantiantion     * - If set to true, then ZIP archive are echo'ed to STDOUT as each     *   file is added via this -> addfile(), and central directories are     *   echoed to STDOUT on final call to this -> file().  Also,     *   this -> file() returns an empty string so it is safe to issue a     *   "echo $zipfile;" command     *     * @access public     *     * @return nothing     */    function setDoWrite()    {        $this -> doWrite = true;    } // end of the 'setDoWrite()' method    /**     * Converts an Unix timestamp to a four byte DOS date and time format (date     * in high two bytes, time in low two bytes allowing magnitude comparison).     *     * @param integer $unixtime the current Unix timestamp     *     * @return integer the current date in a four byte DOS format     *     * @access private     */    function unix2DosTime($unixtime = 0)    {        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime);        if ($timearray['year'] < 1980) {            $timearray['year']    = 1980;            $timearray['mon']     = 1;            $timearray['mday']    = 1;            $timearray['hours']   = 0;            $timearray['minutes'] = 0;            $timearray['seconds'] = 0;        } // end if        return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) |                ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1);    } // end of the 'unix2DosTime()' method    /**     * Adds "file" to archive     *     * @param string  $data file contents     * @param string  $name name of the file in the archive (may contains the path)     * @param integer $time the current timestamp     *     * @access public     *     * @return nothing     */    function addFile($data, $name, $time = 0)    {        $name     = str_replace('\\', '/', $name);        $dtime    = substr("00000000" . dechex($this->unix2DosTime($time)), -8);        $hexdtime = '\x' . $dtime[6] . $dtime[7]                  . '\x' . $dtime[4] . $dtime[5]                  . '\x' . $dtime[2] . $dtime[3]                  . '\x' . $dtime[0] . $dtime[1];        eval('$hexdtime = "' . $hexdtime . '";');        $fr   = "\x50\x4b\x03\x04";        $fr   .= "\x14\x00";            // ver needed to extract        $fr   .= "\x00\x00";            // gen purpose bit flag        $fr   .= "\x08\x00";            // compression method        $fr   .= $hexdtime;             // last mod time and date        // "local file header" segment        $unc_len = strlen($data);        $crc     = crc32($data);        $zdata   = gzcompress($data);        $zdata   = substr(substr($zdata, 0, strlen($zdata) - 4), 2); // fix crc bug        $c_len   = strlen($zdata);        $fr      .= pack('V', $crc);             // crc32        $fr      .= pack('V', $c_len);           // compressed filesize        $fr      .= pack('V', $unc_len);         // uncompressed filesize        $fr      .= pack('v', strlen($name));    // length of filename        $fr      .= pack('v', 0);                // extra field length        $fr      .= $name;        // "file data" segment        $fr .= $zdata;        // echo this entry on the fly, ...        if ( $this -> doWrite) {            echo $fr;        } else {                     // ... OR add this entry to array            $this -> datasec[] = $fr;        }        // now add to central directory record        $cdrec = "\x50\x4b\x01\x02";        $cdrec .= "\x00\x00";                // version made by        $cdrec .= "\x14\x00";                // version needed to extract        $cdrec .= "\x00\x00";                // gen purpose bit flag        $cdrec .= "\x08\x00";                // compression method        $cdrec .= $hexdtime;                 // last mod time & date        $cdrec .= pack('V', $crc);           // crc32        $cdrec .= pack('V', $c_len);         // compressed filesize        $cdrec .= pack('V', $unc_len);       // uncompressed filesize        $cdrec .= pack('v', strlen($name)); // length of filename        $cdrec .= pack('v', 0);             // extra field length        $cdrec .= pack('v', 0);             // file comment length        $cdrec .= pack('v', 0);             // disk number start        $cdrec .= pack('v', 0);             // internal file attributes        $cdrec .= pack('V', 32);            // external file attributes - 'archive' bit set        $cdrec .= pack('V', $this -> old_offset); // relative offset of local header        $this -> old_offset += strlen($fr);        $cdrec .= $name;        // optional extra field, file comment goes here        // save to central directory        $this -> ctrl_dir[] = $cdrec;    } // end of the 'addFile()' method    /**     * Echo central dir if ->doWrite==true, else build string to return     *     * @return  string  if ->doWrite {empty string} else the ZIP file contents     *     * @access public     */    function file()    {        $ctrldir = implode('', $this -> ctrl_dir);        $header = $ctrldir .            $this -> eof_ctrl_dir .            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries "on this disk"            pack('v', sizeof($this -> ctrl_dir)) .  // total # of entries overall            pack('V', strlen($ctrldir)) .           // size of central dir            pack('V', $this -> old_offset) .        // offset to start of central dir            "\x00\x00";                             // .zip file comment length        if ( $this -> doWrite ) {       // Send central directory & end ctrl dir to STDOUT            echo $header;            return "";                                   // Return empty string        } else {                        // Return entire ZIP archive as string            $data = implode('', $this -> datasec);            return $data . $header;        }    } // end of the 'file()' method} // end of the 'zipfile' class?>
<?php/** * Factory class that handles the creation of geometric objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Factory{    /**     * Returns the singleton instance of geometric class of the given type.     *     * @param string $type type of the geometric object     *     * @throws Exception     *     * @return the singleton instance of geometric class of the given type     */    public static function factory($type)    {        include_once './libraries/gis/pma_gis_geometry.php';        $type_lower = strtolower($type);        if (! file_exists('./libraries/gis/pma_gis_' . $type_lower . '.php')) {            return false;        }        if (include_once './libraries/gis/pma_gis_' . $type_lower . '.php') {            switch($type) {            case 'MULTIPOLYGON' :                return PMA_GIS_Multipolygon::singleton();            case 'POLYGON' :                return PMA_GIS_Polygon::singleton();            case 'MULTIPOINT' :                return PMA_GIS_Multipoint::singleton();            case 'POINT' :                return PMA_GIS_Point::singleton();            case 'MULTILINESTRING' :                return PMA_GIS_Multilinestring::singleton();            case 'LINESTRING' :                return PMA_GIS_Linestring::singleton();            case 'GEOMETRYCOLLECTION' :                return PMA_GIS_Geometrycollection::singleton();            default :                return false;            }        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions for kanji-encoding convert (available only with japanese * language) * * PHP4 configure requirements: *     --enable-mbstring --enable-mbstr-enc-trans --enable-mbregex * * 2002/2/22 - by Yukihiro Kawada <kawada@den.fujifilm.co.jp> * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets the php internal encoding codes and sets the available encoding * codes list * 2002/1/4 by Y.Kawada * * @global  string   the current encoding code * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_internal_enc_check(){    global $internal_enc, $enc_list;    $internal_enc = mb_internal_encoding();    if ($internal_enc == 'EUC-JP') {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    } else {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    }    return true;} // end of the 'PMA_internal_enc_check' function/** * Reverses SJIS & EUC-JP position in the encoding codes list * 2002/1/4 by Y.Kawada * * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_change_enc_order(){    global $enc_list;    $p            = explode(',', $enc_list);    if ($p[1] == 'EUC-JP') {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    } else {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    }    return true;} // end of the 'PMA_change_enc_order' function/** * Kanji string encoding convert * 2002/1/4 by Y.Kawada * * @param string   the string to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @global  string   the available encoding codes list * * @return  string   the converted string */function PMA_kanji_str_conv($str, $enc, $kana){    global $enc_list;    if ($enc == '' && $kana == '') {        return $str;    }    $nw       = mb_detect_encoding($str, $enc_list);    if ($kana == 'kana') {        $dist = mb_convert_kana($str, 'KV', $nw);        $str  = $dist;    }    if ($nw != $enc && $enc != '') {        $dist = mb_convert_encoding($str, $enc, $nw);    } else {        $dist = $str;    }    return $dist;} // end of the 'PMA_kanji_str_conv' function/** * Kanji file encoding convert * 2002/1/4 by Y.Kawada * * @param string   the name of the file to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @return  string   the name of the converted file */function PMA_kanji_file_conv($file, $enc, $kana){    if ($enc == '' && $kana == '') {        return $file;    }    $tmpfname = tempnam('', $enc);    $fpd      = fopen($tmpfname, 'wb');    $fps      = fopen($file, 'r');    PMA_change_enc_order();    while (!feof($fps)) {        $line = fgets($fps, 4096);        $dist = PMA_kanji_str_conv($line, $enc, $kana);        fputs($fpd, $dist);    } // end while    PMA_change_enc_order();    fclose($fps);    fclose($fpd);    unlink($file);    return $tmpfname;} // end of the 'PMA_kanji_file_conv' function/** * Defines radio form fields to switch between encoding modes * 2002/1/4 by Y.Kawada * * @param string   spaces character to prepend the output with * * @return  string   xhtml code for the radio controls */function PMA_set_enc_form($spaces){    return "\n"             /* l10n: This is currently used only in Japanese locales */           . $spaces . '<ul>' . "\n" . '<li>'           . $spaces . '<input type="radio" name="knjenc" value="" checked="checked" id="kj-none" /><label for="kj-none">' . _pgettext('None encoding conversion', 'None') . "</label>\n"           . $spaces . '<input type="radio" name="knjenc" value="EUC-JP" id="kj-euc" /><label for="kj-euc">EUC</label>' . "\n"           . $spaces . '<input type="radio" name="knjenc" value="SJIS" id="kj-sjis" /><label for="kj-sjis">SJIS</label>' . "\n"           . $spaces . '</li>' . "\n" . '<li>'           . $spaces . '<input type="checkbox" name="xkana" value="kana" id="kj-kana" />' . "\n"           /* l10n: This is currently used only in Japanese locales */           . $spaces . '<label for="kj-kana">' . __('Convert to Kana') . '</label><br />' . "\n"           . $spaces . '</li>' . "\n" . '</ul>'           ;} // end of the 'PMA_set_enc_form' functionPMA_internal_enc_check();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build dumps of tables as JSON * * @package PhpMyAdmin-Export * @subpackage JSON */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['json'] = array(        'text'          => 'JSON',        'extension'     => 'json',        'mime_type'     => 'text/plain',        'options'       => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array(                'type' => 'hidden',                'name' => 'structure_or_data',            ),            array('type' => 'end_group')        ),        'options_text'  => __('Options'),    );} else {    /**     * Set of functions used to build exports of tables     */    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        PMA_exportOutputHandler(            '/**' . $GLOBALS['crlf']            . ' Export to JSON plugin for PHPMyAdmin' . $GLOBALS['crlf']            . ' @version 0.1' . $GLOBALS['crlf']            . ' */' . $GLOBALS['crlf'] . $GLOBALS['crlf']        );        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db)    {        PMA_exportOutputHandler('// Database \'' . $db . '\'' . $GLOBALS['crlf'] );        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in JSON format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        $result      = PMA_DBI_query($sql_query, null, PMA_DBI_QUERY_UNBUFFERED);        $columns_cnt = PMA_DBI_num_fields($result);        for ($i = 0; $i < $columns_cnt; $i++) {            $columns[$i] = stripslashes(PMA_DBI_field_name($result, $i));        }        unset($i);        $buffer = '';        $record_cnt = 0;        while ($record = PMA_DBI_fetch_row($result)) {            $record_cnt++;            // Output table name as comment if this is the first record of the table            if ($record_cnt == 1) {                $buffer .= '// ' . $db . '.' . $table . $crlf . $crlf;                $buffer .= '[{';            } else {                $buffer .= ', {';            }            for ($i = 0; $i < $columns_cnt; $i++) {                $isLastLine = ($i + 1 >= $columns_cnt);                $column = $columns[$i];                if (is_null($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": null' . (! $isLastLine ? ',' : '');                } elseif (is_numeric($record[$i])) {                    $buffer .= '"' . addslashes($column) . '": ' . $record[$i] . (! $isLastLine ? ',' : '');                } else {                    $buffer .= '"' . addslashes($column) . '": "' . addslashes($record[$i]) . '"' . (! $isLastLine ? ',' : '');                }            }            $buffer .= '}';        }        if ($record_cnt) {            $buffer .=  ']';        }        if (! PMA_exportOutputHandler($buffer)) {            return false;        }        PMA_DBI_free_result($result);        return true;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * User preferences management page * * @package PhpMyAdmin *//** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/user_preferences.lib.php';require_once './libraries/config/config_functions.lib.php';require_once './libraries/config/messages.inc.php';require_once './libraries/config/ConfigFile.class.php';require_once './libraries/config/Form.class.php';require_once './libraries/config/FormDisplay.class.php';require './libraries/config/user_preferences.forms.php';PMA_userprefs_pageinit();$error = '';if (isset($_POST['submit_export']) && filter_input(INPUT_POST, 'export_type') == 'text_file') {    // export to JSON file    $filename = 'phpMyAdmin-config-' . urlencode(PMA_getenv('HTTP_HOST')) . '.json';    PMA_download_header($filename, 'application/json');    $settings = PMA_load_userprefs();    echo json_encode($settings['config_data']);    return;} else if (isset($_POST['submit_get_json'])) {    $settings = PMA_load_userprefs();    header('Content-Type: application/json');    echo json_encode(array(        'prefs' => json_encode($settings['config_data']),        'mtime' => $settings['mtime']));    return;} else if (isset($_POST['submit_import'])) {    // load from JSON file    $json = '';    if (filter_input(INPUT_POST, 'import_type') == 'text_file'            && isset($_FILES['import_file'])            && $_FILES['import_file']['error'] == UPLOAD_ERR_OK            && is_uploaded_file($_FILES['import_file']['tmp_name'])) {        // read JSON from uploaded file        $open_basedir = @ini_get('open_basedir');        $file_to_unlink = '';        $import_file = $_FILES['import_file']['tmp_name'];        // If we are on a server with open_basedir, we must move the file        // before opening it. The doc explains how to create the "./tmp"        // directory        if (!empty($open_basedir)) {            $tmp_subdir = (PMA_IS_WINDOWS ? '.\\tmp\\' : './tmp/');            if (is_writable($tmp_subdir)) {                $import_file_new = tempnam($tmp_subdir, 'prefs');                if (move_uploaded_file($import_file, $import_file_new)) {                    $import_file = $import_file_new;                    $file_to_unlink = $import_file_new;                }            }        }        $json = file_get_contents($import_file);        if ($file_to_unlink) {            unlink($file_to_unlink);        }    } else {        // read from POST value (json)        $json = filter_input(INPUT_POST, 'json');    }    // hide header message    $_SESSION['userprefs_autoload'] = true;    $config = json_decode($json, true);    $return_url = filter_input(INPUT_POST, 'return_url');    if (! is_array($config)) {        $error = __('Could not import configuration');    } else {        // sanitize input values: treat them as though they came from HTTP POST request        $form_display = new FormDisplay();        foreach ($forms as $formset_id => $formset) {            foreach ($formset as $form_name => $form) {                $form_display->registerForm($formset_id . ': ' . $form_name, $form);            }        }        $cf = ConfigFile::getInstance();        $new_config = $cf->getFlatDefaultConfig();        if (!empty($_POST['import_merge'])) {            $new_config = array_merge($new_config, $cf->getConfigArray());        }        $new_config = array_merge($new_config, $config);        $_POST_bak = $_POST;        foreach ($new_config as $k => $v) {            $_POST[str_replace('/', '-', $k)] = $v;        }        $cf->resetConfigData();        $all_ok = $form_display->process(true, false);        $all_ok = $all_ok && !$form_display->hasErrors();        $_POST = $_POST_bak;        if (!$all_ok && isset($_POST['fix_errors'])) {            $form_display->fixErrors();            $all_ok = true;        }        if (!$all_ok) {            // mimic original form and post json in a hidden field            include './libraries/header.inc.php';            include './libraries/user_preferences.inc.php';            $msg = PMA_Message::error(__('Configuration contains incorrect data for some fields.'));            $msg->display();            echo '<div class="config-form">';            $form_display->displayErrors();            echo '</div>';            ?>            <form action="prefs_manage.php" method="post">                <?php echo PMA_generate_common_hidden_inputs() . "\n"; ?>                <input type="hidden" name="json" value="<?php echo htmlspecialchars($json) ?>" />                <input type="hidden" name="fix_errors" value="1" />                <?php if (!empty($_POST['import_merge'])): ?>                <input type="hidden" name="import_merge" value="1" />                <?php endif; ?>                <?php if ($return_url): ?>                <input type="hidden" name="return_url" value="<?php echo htmlspecialchars($return_url) ?>" />                <?php endif; ?>                <p><?php echo __('Do you want to import remaining settings?') ?></p>                <input type="submit" name="submit_import" value="<?php echo __('Yes') ?>" />                <input type="submit" name="submit_ignore" value="<?php echo __('No') ?>" />            </form>            <?php            include './libraries/footer.inc.php';            return;        }        // check for ThemeDefault and fontsize        $params = array();        if (isset($config['ThemeDefault'])                && $_SESSION['PMA_Theme_Manager']->theme->getId() != $config['ThemeDefault']                && $_SESSION['PMA_Theme_Manager']->checkTheme($config['ThemeDefault'])) {            $_SESSION['PMA_Theme_Manager']->setActiveTheme($config['ThemeDefault']);            $_SESSION['PMA_Theme_Manager']->setThemeCookie();            $params['reload_left_frame'] = true;        }        if (isset($config['fontsize'])                && $config['fontsize'] != $GLOBALS['PMA_Config']->get('fontsize')) {            $params['set_fontsize'] = $config['fontsize'];            $params['reload_left_frame'] = true;        }        if (isset($config['lang'])                && $config['lang'] != $GLOBALS['lang']) {            $params['lang'] = $config['lang'];            $params['reload_left_frame'] = true;        }        if (isset($config['collation_connection'])                && $config['collation_connection'] != $GLOBALS['collation_connection']) {            $params['collation_connection'] = $config['collation_connection'];            $params['reload_left_frame'] = true;        }        // save settings        $old_settings = PMA_load_userprefs();        $result = PMA_save_userprefs($cf->getConfigArray());        if ($result === true) {            if ($return_url) {                $query = explode('&', parse_url($return_url, PHP_URL_QUERY));                $return_url = parse_url($return_url, PHP_URL_PATH);                foreach ($query as $q) {                    $pos = strpos($q, '=');                    $k = substr($q, 0, $pos);                    if ($k == 'token') {                        continue;                    }                    $params[$k] = substr($q, $pos+1);                }            } else {                $return_url = 'prefs_manage.php';            }            // reload config            $GLOBALS['PMA_Config']->loadUserPreferences();            PMA_userprefs_redirect($forms, $old_settings, $return_url, $params);            exit;        } else {            $error = $result;        }    }} else if (isset($_POST['submit_clear'])) {    $old_settings = PMA_load_userprefs();    $result = PMA_save_userprefs(array());    if ($result === true) {        $params = array();        if ($_SESSION['PMA_Theme_Manager']->theme->getId() != 'original') {            $GLOBALS['PMA_Config']->removeCookie($_SESSION['PMA_Theme_Manager']->getThemeCookieName());            unset($_SESSION['PMA_Theme_Manager']);            unset($_SESSION['PMA_Theme']);            $params['reload_left_frame'] = true;        }        if ($GLOBALS['PMA_Config']->get('fontsize') != '82%') {            $GLOBALS['PMA_Config']->removeCookie('pma_fontsize');            $params['reload_left_frame'] = true;        }        $GLOBALS['PMA_Config']->removeCookie('pma_collaction_connection');        $GLOBALS['PMA_Config']->removeCookie('pma_lang');        PMA_userprefs_redirect($forms, $old_settings, 'prefs_manage.php', $params);        exit;    } else {        $error = $result;    }    exit;}$GLOBALS['js_include'][] = 'config.js';require './libraries/header.inc.php';require './libraries/user_preferences.inc.php';if ($error) {    if (!$error instanceof PMA_Message) {        $error = PMA_Message::error($error);    }    $error->display();}?><script type="text/javascript"><?phpPMA_printJsValue("PMA_messages['strSavedOn']", __('Saved on: @DATE@'));?></script><div id="maincontainer">    <div id="main_pane_left">        <div class="group">            <h2><?php echo __('Import') ?></h2>            <form class="group-cnt prefs-form" name="prefs_import" action="prefs_manage.php" method="post" enctype="multipart/form-data">                <?php                echo PMA_generateHiddenMaxFileSize($max_upload_size) . "\n";                echo PMA_generate_common_hidden_inputs() . "\n";                ?>                <input type="hidden" name="json" value="" />                <input type="radio" id="import_text_file" name="import_type" value="text_file" checked="checked" />                <label for="import_text_file"><?php echo __('Import from file') ?></label>                <div id="opts_import_text_file" class="prefsmanage_opts">                    <label for="input_import_file"><?php echo __('Browse your computer:'); ?></label>                    <input type="file" name="import_file" id="input_import_file" />                </div>                <input type="radio" id="import_local_storage" name="import_type" value="local_storage" disabled="disabled" />                <label for="import_local_storage"><?php echo __('Import from browser\'s storage') ?></label>                <div id="opts_import_local_storage" class="prefsmanage_opts disabled">                    <div class="localStorage-supported">                        <?php echo __('Settings will be imported from your browser\'s local storage.') ?>                        <br />                        <span class="localStorage-exists">                            <?php echo __('Saved on: @DATE@') ?>                        </span>                        <span class="localStorage-empty">                            <?php  PMA_Message::notice(__('You have no saved settings!'))->display() ?>                        </span>                    </div>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <input type="checkbox" id="import_merge" name="import_merge" />                <label for="import_merge"><?php echo __('Merge with current configuration') ?></label>                <br /><br />                <input type="submit" name="submit_import" value="<?php echo __('Go'); ?>" />            </form>        </div>        <?php        if (file_exists('./setup/index.php')) {            // show only if setup script is available, allows to disable this message            // by simply removing setup directory        ?>        <div class="group">            <h2><?php echo __('More settings') ?></h2>            <div class="group-cnt">                <?php                echo sprintf(__('You can set more settings by modifying config.inc.php, eg. by using %sSetup script%s.'), '<a href="setup/index.php">', '</a>');                echo PMA_showDocu('setup_script');                ?>            </div>        </div>        <?php        }        ?>    </div>    <div id="main_pane_right">        <div class="group">            <h2><?php echo __('Export') ?></h2>            <div class="click-hide-message group-cnt" style="display:none">                <?php                $message = PMA_Message::rawSuccess(__('Configuration has been saved'));                $message->display();                ?>            </div>            <form class="group-cnt prefs-form" name="prefs_export" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <div style="padding-bottom:0.5em">                    <input type="radio" id="export_text_file" name="export_type" value="text_file" checked="checked" />                    <label for="export_text_file"><?php echo __('Save as file') ?></label>                    <br />                    <input type="radio" id="export_local_storage" name="export_type" value="local_storage" disabled="disabled" />                    <label for="export_local_storage"><?php echo __('Save to browser\'s storage') ?></label>                </div>                <div id="opts_export_local_storage" class="prefsmanage_opts disabled">                    <span class="localStorage-supported">                        <?php echo __('Settings will be saved in your browser\'s local storage.') ?>                        <span class="localStorage-exists">                            <br /><b><?php echo __('Existing settings will be overwritten!') ?></b>                        </span>                    </span>                    <span class="localStorage-unsupported">                        <?php PMA_Message::notice(__('This feature is not supported by your web browser'))->display() ?>                    </span>                </div>                <br />                <input type="submit" name="submit_export" value="<?php echo __('Go'); ?>" />            </form>        </div>        <div class="group">            <h2><?php echo __('Reset') ?></h2>            <form class="group-cnt prefs-form" name="prefs_reset" action="prefs_manage.php" method="post">            <?php echo PMA_generate_common_hidden_inputs() . "\n" ?>                <?php echo __('You can reset all your settings and restore them to default values.') ?>                <br /><br />                <input type="submit" name="submit_clear" value="<?php echo __('Reset') ?>" />            </form>        </div>    </div>    <br class="clearfloat" /></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Common code for Routines, Triggers and Events. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Include all other files that are common * to routines, triggers and events. */require_once './libraries/rte/rte_words.lib.php';require_once './libraries/rte/rte_export.lib.php';require_once './libraries/rte/rte_list.lib.php';require_once './libraries/rte/rte_footer.lib.php';if ($GLOBALS['is_ajax_request'] != true) {    /**     * Displays the header and tabs     */    if (! empty($table) && in_array($table, PMA_DBI_get_tables($db))) {        include_once './libraries/tbl_common.php';        include_once './libraries/tbl_links.inc.php';    } else {        $table = '';        include_once './libraries/db_common.inc.php';        include_once './libraries/db_info.inc.php';    }} else {    /**     * Since we did not include some libraries, we need     * to manually select the required database and     * create the missing $url_query variable     */    if (strlen($db)) {        PMA_DBI_select_db($db);        if (! isset($url_query)) {            $url_query = PMA_generate_common_url($db, $table);        }    }}/** * Generate the conditional classes that will * be used to attach jQuery events to links */$ajax_class = array('add'    => '',                    'edit'   => '',                    'exec'   => '',                    'drop'   => '',                    'export' => '');if ($GLOBALS['cfg']['AjaxEnable']) {    $ajax_class = array('add'    => 'class="ajax_add_anchor"',                        'edit'   => 'class="ajax_edit_anchor"',                        'exec'   => 'class="ajax_exec_anchor"',                        'drop'   => 'class="ajax_drop_anchor"',                        'export' => 'class="ajax_export_anchor"');}/** * Create labels for the list */$titles = PMA_buildActionTitles();/** * Keep a list of errors that occured while * processing an 'Add' or 'Edit' operation. */$errors = array();/** * Call the appropriate main function */switch ($_PMA_RTE) {case 'RTN':    PMA_RTN_main();    break;case 'TRI':    PMA_TRI_main();    break;case 'EVN':    PMA_EVN_main();    break;}/** * Display the footer, if necessary */if ($GLOBALS['is_ajax_request'] != true) {    include './libraries/footer.inc.php';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * handles creation of VIEWs * * @todo js error when view name is empty (strFormEmpty) * @todo (also validate if js is disabled, after form submission?) * @package PhpMyAdmin *//** * do not import request variable into global scope * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * */require_once './libraries/common.inc.php';/** * Runs common work */require './libraries/db_common.inc.php';$url_params['goto'] = $cfg['DefaultTabDatabase'];$url_params['back'] = 'view_create.php';$view_algorithm_options = array(    'UNDEFINED',    'MERGE',    'TEMPTABLE',);$view_with_options = array(    'CASCADED CHECK OPTION',    'LOCAL CHECK OPTION');if (isset($_REQUEST['createview'])) {    /**     * Creates the view     */    $sep = "\r\n";    $sql_query = 'CREATE';    if (isset($_REQUEST['view']['or_replace'])) {        $sql_query .= ' OR REPLACE';    }    if (PMA_isValid($_REQUEST['view']['algorithm'], $view_algorithm_options)) {        $sql_query .= $sep . ' ALGORITHM = ' . $_REQUEST['view']['algorithm'];    }    $sql_query .= $sep . ' VIEW ' . PMA_backquote($_REQUEST['view']['name']);    if (! empty($_REQUEST['view']['column_names'])) {        $sql_query .= $sep . ' (' . $_REQUEST['view']['column_names'] . ')';    }    $sql_query .= $sep . ' AS ' . $_REQUEST['view']['as'];    if (isset($_REQUEST['view']['with'])) {        $options = array_intersect($_REQUEST['view']['with'], $view_with_options);        if (count($options)) {            $sql_query .= $sep . ' WITH ' . implode(' ', $options);        }    }    if (PMA_DBI_try_query($sql_query)) {        $message = PMA_Message::success();        include './' . $cfg['DefaultTabDatabase'];        exit();    } else {        $message = PMA_Message::rawError(PMA_DBI_getError());    }}// prefill values if not already filled from former submission$view = array(    'or_replace' => '',    'algorithm' => '',    'name' => '',    'column_names' => '',    'as' => $sql_query,    'with' => array(),);if (PMA_isValid($_REQUEST['view'], 'array')) {    $view = array_merge($view, $_REQUEST['view']);}/** * Displays top menu links * We use db links because a VIEW is not necessarily on a single table */$num_tables = 0;require_once './libraries/db_links.inc.php';$url_params['db'] = $GLOBALS['db'];$url_params['reload'] = 1;/** * Displays the page */?><!-- CREATE VIEW options --><div id="div_view_options"><form method="post" action="view_create.php"><?php echo PMA_generate_common_hidden_inputs($url_params); ?><fieldset>    <legend>CREATE VIEW</legend>    <table>    <tr><td><label for="or_replace">OR REPLACE</label></td>        <td><input type="checkbox" name="view[or_replace]" id="or_replace"                <?php if ($view['or_replace']) { ?>                checked="checked"                <?php } ?>                value="1" />        </td>    </tr>    <tr>        <td><label for="algorithm">ALGORITHM</label></td>        <td><select name="view[algorithm]" id="algorithm">            <?php            foreach ($view_algorithm_options as $option) {                echo '<option value="' . htmlspecialchars($option) . '"';                if ($view['algorithm'] === $option) {                    echo 'selected="selected"';                }                echo '>' . htmlspecialchars($option) . '</option>';            }            ?>            </select>        </td>    </tr>    <tr><td><?php echo __('VIEW name'); ?></td>        <td><input type="text" size="20" name="view[name]" onfocus="this.select()"                value="<?php echo htmlspecialchars($view['name']); ?>" />        </td>    </tr>    <tr><td><?php echo __('Column names'); ?></td>        <td><input type="text" maxlength="100" size="50" name="view[column_names]"                onfocus="this.select()"                value="<?php echo htmlspecialchars($view['column_names']); ?>" />        </td>    </tr>    <tr><td>AS</td>        <td>            <textarea name="view[as]" rows="<?php echo $cfg['TextareaRows']; ?>"                cols="<?php echo $cfg['TextareaCols']; ?>"                dir="<?php echo $text_dir; ?>" onfocus="this.select();"                ><?php echo htmlspecialchars($view['as']); ?></textarea>        </td>    </tr>    <tr><td>WITH</td>        <td>            <?php            foreach ($view_with_options as $option) {                echo '<input type="checkbox" name="view[with][]"';                if (in_array($option, $view['with'])) {                    echo ' checked="checked"';                }                echo ' id="view_with_' . str_replace(' ', '_', htmlspecialchars($option)) . '"';                echo ' value="' . htmlspecialchars($option) . '" />';                echo '<label for="view_with_' . str_replace(' ', '_', htmlspecialchars($option)) . '">';                echo htmlspecialchars($option) . '</label>&nbsp;';            }            ?>        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">    <input type="submit" name="createview" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Triggers management. * * @package PhpMyAdmin */require_once './db_triggers.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @todo a .lib filename should not have code in main(), split or rename file * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Load proper code for handling input. */if (@function_exists('mb_strlen')) {    mb_internal_encoding('utf-8');    include './libraries/string_mb.lib.php';} else {    include './libraries/string_native.lib.php';}/** * Load ctype handler. */if (@extension_loaded('ctype')) {    include './libraries/string_type_ctype.lib.php';} else {    include './libraries/string_type_native.lib.php';}/** * Checks if a given character position in the string is escaped or not * * @param string   string to check for * @param integer  the character to check for * @param integer  starting position in the string * @return  boolean  whether the character is escaped or not */function PMA_STR_charIsEscaped($string, $pos, $start = 0){    $pos = max(intval($pos), 0);    $start = max(intval($start), 0);    $len = PMA_strlen($string);    // Base case:    // Check for string length or invalid input or special case of input    // (pos == $start)    if ($pos <= $start || $len <= max($pos, $start)) {        return false;    }    $pos--;    $escaped     = false;    while ($pos >= $start && PMA_substr($string, $pos, 1) == '\\') {        $escaped = !$escaped;        $pos--;    } // end while    return $escaped;} // end of the "PMA_STR_charIsEscaped()" function/** * Checks if a number is in a range * * @param integer  number to check for * @param integer  lower bound * @param integer  upper bound * @return  boolean  whether the number is in the range or not */function PMA_STR_numberInRangeInclusive($num, $lower, $upper){    return ($num >= $lower && $num <= $upper);} // end of the "PMA_STR_numberInRangeInclusive()" function/** * Checks if a character is an SQL identifier * * @param string   character to check for * @param boolean  whether the dot character is valid or not * @return  boolean  whether the character is an SQL identifier or not */function PMA_STR_isSqlIdentifier($c, $dot_is_valid = false){    return (PMA_STR_isAlnum($c)        || ($ord_c = ord($c)) && $ord_c >= 192 && $ord_c != 215 && $ord_c != 249        || $c == '_'        || $c == '$'        || ($dot_is_valid != false && $c == '.'));} // end of the "PMA_STR_isSqlIdentifier()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Don't display the page heading * @ignore */define('PMA_DISPLAY_HEADING', 0);/** * Gets some core libraries and displays a top message if required */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';require_once './libraries/transformations.lib.php';$types = PMA_getAvailableMIMEtypes();?><h2><?php echo __('Available MIME types'); ?></h2><?phpforeach ($types['mimetype'] as $key => $mimetype) {    if (isset($types['empty_mimetype'][$mimetype])) {        echo '<i>' . $mimetype . '</i><br />';    } else {        echo $mimetype . '<br />';    }}?><br /><i>(<?php echo __('MIME types printed in italics do not have a separate transformation function'); ?>)</i><br /><br /><br /><h2><?php echo __('Available transformations'); ?></h2><table border="0" width="90%"><thead><tr>    <th><?php echo __('Browser transformation'); ?></th>    <th><?php echo _pgettext('for MIME transformation', 'Description'); ?></th></tr></thead><tbody><?php$odd_row = true;foreach ($types['transformation'] as $key => $transform) {    $desc = PMA_getTransformationDescription($types['transformation_file'][$key]);    ?>    <tr class="<?php echo $odd_row ? 'odd' : 'even'; ?>">        <td><?php echo $transform; ?></td>        <td><?php echo $desc; ?></td>    </tr>    <?php    $odd_row = !$odd_row;}?></tbody></table><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Javascript escaping functions. * * @package PhpMyAdmin * *//** * Format a string so it can be a string inside JavaScript code inside an * eventhandler (onclick, onchange, on..., ). * This function is used to displays a javascript confirmation box for * "DROP/DELETE/ALTER" queries. * * @param string   $a_string          the string to format * @param boolean  $add_backquotes    whether to add backquotes to the string or not * * @return  string   the formatted string * * @access  public */function PMA_jsFormat($a_string = '', $add_backquotes = true){    if (is_string($a_string)) {        $a_string = htmlspecialchars($a_string);        $a_string = PMA_escapeJsString($a_string);        // Needed for inline javascript to prevent some browsers        // treating it as a anchor        $a_string = str_replace('#', '\\#', $a_string);    }    return (($add_backquotes) ? PMA_backquote($a_string) : $a_string);} // end of the 'PMA_jsFormat()' function/** * escapes a string to be inserted as string a JavaScript block * enclosed by <![CDATA[ ... ]]> * this requires only to escape ' with \' and end of script block * * We also remove NUL byte as some browsers (namely MSIE) ignore it and * inserting it anywhere inside </script would allow to bypass this check. * * @param string  $string the string to be escaped * @return  string  the escaped string */function PMA_escapeJsString($string){    return preg_replace('@</script@i', '</\' + \'script',                        strtr($string, array(                                "\000" => '',                                '\\' => '\\\\',                                '\'' => '\\\'',                                '"' => '\"',                                "\n" => '\n',                                "\r" => '\r')));}/** * Formats a value for javascript code. * * @param string $value String to be formatted. * * @retrun string formatted value. */function PMA_formatJsVal($value){    if (is_bool($value)) {        if ($value) {            return 'true';        } else {            return 'false';        }    } elseif (is_int($value)) {        return (int)$value;    } else {        return '"' . PMA_escapeJsString($value) . '"';    }}/** * Formats an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key    Name of value to set * @param mixed  $value  Value to set, can be either string or array of strings * @param bool   $escape Whether to escape value or keep it as it is (for inclusion of js code) * * @return string Javascript code. */function PMA_getJsValue($key, $value, $escape = true){    $result = $key . ' = ';    if (!$escape) {        $result .= $value;    } elseif (is_array($value)) {        $result .= '[';        foreach ($value as $id => $val) {            $result .= PMA_formatJsVal($val) . ",";        }        $result .= "];\n";    } else {        $result .= PMA_formatJsVal($value) . ";\n";    }    return $result;}/** * Prints an javascript assignment with proper escaping of a value * and support for assigning array of strings. * * @param string $key Name of value to set * @param mixed $value Value to set, can be either string or array of strings * * @return nothing */function PMA_printJsValue($key, $value){    echo PMA_getJsValue($key, $value);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//**** @package PhpMyAdmin*/if (! defined('PHPMYADMIN')) {  exit;}$ID_KEY      = 'APC_UPLOAD_PROGRESS';/** * Returns upload status. * * This is implementation for APC extension. * * @param string $id * @return array|null */function PMA_getUploadStatus($id){    global $SESSION_KEY;    global $ID_KEY;    if (trim($id) == "") {        return null;    }    if (! array_key_exists($id, $_SESSION[$SESSION_KEY])) {        $_SESSION[$SESSION_KEY][$id] = array(                    'id'       => $id,                    'finished' => false,                    'percent'  => 0,                    'total'    => 0,                    'complete' => 0,                    'plugin'   => $ID_KEY         );    }    $ret = $_SESSION[$SESSION_KEY][$id];    if (! PMA_import_apcCheck() || $ret['finished']) {        return $ret;    }    $status = apc_fetch('upload_' . $id);    if ($status) {        $ret['finished'] = (bool)$status['done'];        $ret['total']    = $status['total'];        $ret['complete'] = $status['current'];        if ($ret['total'] > 0) {            $ret['percent'] = $ret['complete'] / $ret['total'] * 100;        }        if ($ret['percent'] == 100) {            $ret['finished'] = (bool)true;        }        $_SESSION[$SESSION_KEY][$id] = $ret;    }    return $ret;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library that provides common import functions that are used by import plugins * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * We need to know something about user */require_once './libraries/check_user_privileges.lib.php';/** * We do this check, DROP DATABASE does not need to be confirmed elsewhere */define('PMA_CHK_DROP', 1);/** *  Check whether timeout is getting close * *  @return boolean true if timeout is close *  @access public */function PMA_checkTimeout(){    global $timestamp, $maximum_time, $timeout_passed;    if ($maximum_time == 0) {        return false;    } elseif ($timeout_passed) {        return true;    /* 5 in next row might be too much */    } elseif ((time() - $timestamp) > ($maximum_time - 5)) {        $timeout_passed = true;        return true;    } else {        return false;    }}/** *  Detects what compression filse uses * *  @param string  $filepath  filename to check *  @return string MIME type of compression, none for none *  @access public */function PMA_detectCompression($filepath){    $file = @fopen($filepath, 'rb');    if (!$file) {        return false;    }    $test = fread($file, 4);    $len = strlen($test);    fclose($file);    if ($len >= 2 && $test[0] == chr(31) && $test[1] == chr(139)) {        return 'application/gzip';    }    if ($len >= 3 && substr($test, 0, 3) == 'BZh') {        return 'application/bzip2';    }    if ($len >= 4 && $test == "PK\003\004") {        return 'application/zip';    }    return 'none';}/** * Runs query inside import buffer. This is needed to allow displaying * of last SELECT, SHOW or HANDLER results and similar nice stuff. * * @param string  $sql          query to run * @param string  $full         query to display, this might be commented * @param bool    $controluser  whether to use control user for queries * @access public */function PMA_importRunQuery($sql = '', $full = '', $controluser = false){    global $import_run_buffer, $go_sql, $complete_query, $display_query,        $sql_query, $my_die, $error, $reload,        $last_query_with_results,        $skip_queries, $executed_queries, $max_sql_len, $read_multiply,        $cfg, $sql_query_disabled, $db, $run_query, $is_superuser;    $read_multiply = 1;    if (isset($import_run_buffer)) {        // Should we skip something?        if ($skip_queries > 0) {            $skip_queries--;        } else {            if (!empty($import_run_buffer['sql']) && trim($import_run_buffer['sql']) != '') {                $max_sql_len = max($max_sql_len, strlen($import_run_buffer['sql']));                if (!$sql_query_disabled) {                    $sql_query .= $import_run_buffer['full'];                }                if (!$cfg['AllowUserDropDatabase']                    && !$is_superuser                    && preg_match('@^[[:space:]]*DROP[[:space:]]+(IF EXISTS[[:space:]]+)?DATABASE @i', $import_run_buffer['sql'])                ) {                    $GLOBALS['message'] = PMA_Message::error(__('"DROP DATABASE" statements are disabled.'));                    $error = true;                } else {                    $executed_queries++;                    if ($run_query                        && $GLOBALS['finished']                        && empty($sql)                        && !$error                        && ((!empty($import_run_buffer['sql'])                        && preg_match('/^[\s]*(SELECT|SHOW|HANDLER)/i', $import_run_buffer['sql']))                        || ($executed_queries == 1))                    ) {                        $go_sql = true;                        if (!$sql_query_disabled) {                            $complete_query = $sql_query;                            $display_query = $sql_query;                        } else {                            $complete_query = '';                            $display_query = '';                        }                        $sql_query = $import_run_buffer['sql'];                        // If a 'USE <db>' SQL-clause was found, set our current $db to the new one                        list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                    } elseif ($run_query) {                        if ($controluser) {                            $result = PMA_query_as_controluser($import_run_buffer['sql']);                        } else {                            $result = PMA_DBI_try_query($import_run_buffer['sql']);                        }                        $msg = '# ';                        if ($result === false) { // execution failed                            if (! isset($my_die)) {                                $my_die = array();                            }                            $my_die[] = array('sql' => $import_run_buffer['full'], 'error' => PMA_DBI_getError());                            if ($cfg['VerboseMultiSubmit']) {                                $msg .= __('Error');                            }                            if (!$cfg['IgnoreMultiSubmitErrors']) {                                $error = true;                                return;                            }                        } elseif ($cfg['VerboseMultiSubmit']) {                            $a_num_rows = (int)@PMA_DBI_num_rows($result);                            $a_aff_rows = (int)@PMA_DBI_affected_rows();                            if ($a_num_rows > 0) {                                $msg .= __('Rows'). ': ' . $a_num_rows;                                $last_query_with_results = $import_run_buffer['sql'];                            } elseif ($a_aff_rows > 0) {                                $message = PMA_Message::affected_rows($a_aff_rows);                                $msg .= $message->getMessage();                            } else {                                $msg .= __('MySQL returned an empty result set (i.e. zero rows).');                            }                        }                        if (!$sql_query_disabled) {                            $sql_query .= $msg . "\n";                        }                        // If a 'USE <db>' SQL-clause was found and the query succeeded, set our current $db to the new one                        if ($result != false) {                            list($db, $reload) = PMA_lookForUse($import_run_buffer['sql'], $db, $reload);                        }                        if ($result != false                            && preg_match('@^[\s]*(DROP|CREATE)[\s]+(IF EXISTS[[:space:]]+)?(TABLE|DATABASE)[[:space:]]+(.+)@im', $import_run_buffer['sql'])                        ) {                            $reload = true;                        }                    } // end run query                } // end if not DROP DATABASE            // end non empty query            } elseif (!empty($import_run_buffer['full'])) {                if ($go_sql) {                    $complete_query .= $import_run_buffer['full'];                    $display_query .= $import_run_buffer['full'];                } else {                    if (!$sql_query_disabled) {                        $sql_query .= $import_run_buffer['full'];                    }                }            }            // check length of query unless we decided to pass it to sql.php            // (if $run_query is false, we are just displaying so show            // the complete query in the textarea)            if (! $go_sql && $run_query) {                if ($cfg['VerboseMultiSubmit'] && ! empty($sql_query)) {                    if (strlen($sql_query) > 50000 || $executed_queries > 50 || $max_sql_len > 1000) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                } else {                    if (strlen($sql_query) > 10000 || $executed_queries > 10 || $max_sql_len > 500) {                        $sql_query = '';                        $sql_query_disabled = true;                    }                }            }        } // end do query (no skip)    } // end buffer exists    // Do we have something to push into buffer?    if (!empty($sql) || !empty($full)) {        $import_run_buffer = array('sql' => $sql, 'full' => $full);    } else {        unset($GLOBALS['import_run_buffer']);    }}/** * Looks for the presence of USE to possibly change current db * * @param string  $buffer  buffer to examine * @param string  $db      current db * @param bool    $reload  reload * @return array (current or new db, whether to reload) * @access public */function PMA_lookForUse($buffer, $db, $reload){    if (preg_match('@^[\s]*USE[[:space:]]+([\S]+)@i', $buffer, $match)) {        $db = trim($match[1]);        $db = trim($db, ';'); // for example, USE abc;        $reload = true;    }    return(array($db, $reload));}/** * Returns next part of imported file/buffer * * @param int  $size  size of buffer to read (this is maximal size function will return) * @return string part of file/buffer * @access public */function PMA_importGetNextChunk($size = 32768){    global $compression, $import_handle, $charset_conversion, $charset_of_file,        $read_multiply;    // Add some progression while reading large amount of data    if ($read_multiply <= 8) {        $size *= $read_multiply;    } else {        $size *= 8;    }    $read_multiply++;    // We can not read too much    if ($size > $GLOBALS['read_limit']) {        $size = $GLOBALS['read_limit'];    }    if (PMA_checkTimeout()) {        return false;    }    if ($GLOBALS['finished']) {        return true;    }    if ($GLOBALS['import_file'] == 'none') {        // Well this is not yet supported and tested, but should return content of textarea        if (strlen($GLOBALS['import_text']) < $size) {            $GLOBALS['finished'] = true;            return $GLOBALS['import_text'];        } else {            $r = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['offset'] += $size;            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            return $r;        }    }    switch ($compression) {        case 'application/bzip2':            $result = bzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/gzip':            $result = gzread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;        case 'application/zip':            $result = substr($GLOBALS['import_text'], 0, $size);            $GLOBALS['import_text'] = substr($GLOBALS['import_text'], $size);            $GLOBALS['finished'] = empty($GLOBALS['import_text']);            break;        case 'none':            $result = fread($import_handle, $size);            $GLOBALS['finished'] = feof($import_handle);            break;    }    $GLOBALS['offset'] += $size;    if ($charset_conversion) {        return PMA_convert_string($charset_of_file, 'utf-8', $result);    } else {        /**         * Skip possible byte order marks (I do not think we need more         * charsets, but feel free to add more, you can use wikipedia for         * reference: <http://en.wikipedia.org/wiki/Byte_Order_Mark>)         *         * @todo BOM could be used for charset autodetection         */        if ($GLOBALS['offset'] == $size) {            // UTF-8            if (strncmp($result, "\xEF\xBB\xBF", 3) == 0) {                $result = substr($result, 3);            // UTF-16 BE, LE            } elseif (strncmp($result, "\xFE\xFF", 2) == 0 || strncmp($result, "\xFF\xFE", 2) == 0) {                $result = substr($result, 2);            }        }        return $result;    }}/** * Returns the "Excel" column name (i.e. 1 = "A", 26 = "Z", 27 = "AA", etc.) * * This functions uses recursion to build the Excel column name. * * The column number (1-26) is converted to the responding ASCII character (A-Z) and returned. * * If the column number is bigger than 26 (= num of letters in alfabet), * an extra character needs to be added. To find this extra character, the number is divided by 26 * and this value is passed to another instance of the same function (hence recursion). * In that new instance the number is evaluated again, and if it is still bigger than 26, it is divided again * and passed to another instance of the same function. This continues until the number is smaller than 26. * Then the last called function returns the corresponding ASCII character to the function that called it. * Each time a called function ends an extra character is added to the column name. * When the first function is reached, the last character is addded and the complete column name is returned. * * @access  public * * @param int $num * @return  string The column's "Excel" name */function PMA_getColumnAlphaName($num){    $A = 65; // ASCII value for capital "A"    $col_name = "";    if ($num > 26) {        $div = (int)($num / 26);        $remain = (int)($num % 26);        // subtract 1 of divided value in case the modulus is 0,        // this is necessary because A-Z has no 'zero'        if ($remain == 0) {            $div--;        }        // recursive function call        $col_name = PMA_getColumnAlphaName($div);        // use modulus as new column number        $num = $remain;    }    if ($num == 0) {        // use 'Z' if column number is 0,        // this is necessary because A-Z has no 'zero'        $col_name .= chr(($A + 26) - 1);    } else {        // convert column number to ASCII character        $col_name .= chr(($A + $num) - 1);    }    return $col_name;}/** * Returns the column number based on the Excel name. * So "A" = 1, "Z" = 26, "AA" = 27, etc. * * Basicly this is a base26 (A-Z) to base10 (0-9) conversion. * It iterates through all characters in the column name and * calculates the corresponding value, based on character value * (A = 1, ..., Z = 26) and position in the string. * * @access  public * * @param string $name (i.e. "A", or "BC", etc.) * @return  int The column number */function PMA_getColumnNumberFromName($name){    if (!empty($name)) {        $name = strtoupper($name);        $num_chars = strlen($name);        $column_number = 0;        for ($i = 0; $i < $num_chars; ++$i) {        // read string from back to front        $char_pos = ($num_chars - 1) - $i;        // convert capital character to ASCII value        // and subtract 64 to get corresponding decimal value        // ASCII value of "A" is 65, "B" is 66, etc.        // Decimal equivalent of "A" is 1, "B" is 2, etc.        $number = (ord($name[$char_pos]) - 64);        // base26 to base10 conversion : multiply each number        // with corresponding value of the position, in this case        // $i=0 : 1; $i=1 : 26; $i=2 : 676; ...        $column_number += $number * pow(26, $i);        }        return $column_number;    } else {        return 0;    }}/** * Constants definitions *//* MySQL type defs */define("NONE",      0);define("VARCHAR",   1);define("INT",       2);define("DECIMAL",   3);define("BIGINT",    4);define("GEOMETRY",  5);/* Decimal size defs */define("M",         0);define("D",         1);define("FULL",      2);/* Table array defs */define("TBL_NAME",  0);define("COL_NAMES", 1);define("ROWS",      2);/* Analysis array defs */define("TYPES",        0);define("SIZES",        1);define("FORMATTEDSQL", 2);/** * Obtains the precision (total # of digits) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Precision of the given decimal size notation */function PMA_getM($last_cumulative_size){    return (int)substr($last_cumulative_size, 0, strpos($last_cumulative_size, ","));}/** * Obtains the scale (# of digits to the right of the decimal point) from a size of type decimal * * @access  public * * @param string $last_cumulative_size * @return  int Scale of the given decimal size notation */function PMA_getD($last_cumulative_size){    return (int)substr($last_cumulative_size, (strpos($last_cumulative_size, ",") + 1), (strlen($last_cumulative_size) - strpos($last_cumulative_size, ",")));}/** * Obtains the decimal size of a given cell * * @access  public * * @param string &$cell * @return  array Contains the precision, scale, and full size representation of the given decimal cell */function PMA_getDecimalSize(&$cell){    $curr_size = strlen((string)$cell);    $decPos = strpos($cell, ".");    $decPrecision = ($curr_size - 1) - $decPos;    $m = $curr_size - 1;    $d = $decPrecision;    return array($m, $d, ($m . "," . $d));}/** * Obtains the size of the given cell * * @todo    Handle the error cases more elegantly * * @access  public * * @param string $last_cumulative_size    Last cumulative column size * @param int    $last_cumulative_type    Last cumulative column type  (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param int    $curr_type               Type of the current cell     (NONE or VARCHAR or DECIMAL or INT or BIGINT) * @param string &$cell                   The current cell * @return  string                          Size of the given cell in the type-appropriate format */function PMA_detectSize($last_cumulative_size, $last_cumulative_type, $curr_type, &$cell){    $curr_size = strlen((string)$cell);    /**     * If the cell is NULL, don't treat it as a varchar     */    if (! strcmp('NULL', $cell)) {        return $last_cumulative_size;    }    /**     * What to do if the current cell is of type VARCHAR     */    elseif ($curr_type == VARCHAR) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            if ($curr_size >= $oldM) {                return $curr_size;            } else {                return $oldM;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type DECIMAL     */    elseif ($curr_type == DECIMAL) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            /* Convert $last_cumulative_size from varchar to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[M];            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $size = PMA_getDecimalSize($cell);            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            /* New val if M or D is greater than current largest */            if ($size[M] > $oldM || $size[D] > $oldD) {                /* Take the largest of both types */                return (string)((($size[M] > $oldM) ? $size[M] : $oldM) . "," . (($size[D] > $oldD) ? $size[D] : $oldD));            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            /* Convert $last_cumulative_size from int to decimal format */            $size = PMA_getDecimalSize($cell);            if ($size[M] >= $last_cumulative_size) {                return $size[FULL];            } else {                return ($last_cumulative_size.",".$size[D]);            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            /* First row of the column */            $size = PMA_getDecimalSize($cell);            return $size[FULL];        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * What to do if the current cell is of type BIGINT or INT     */    elseif ($curr_type == BIGINT || $curr_type == INT) {        /**         * The last cumulative type was VARCHAR         */        if ($last_cumulative_type == VARCHAR) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * The last cumulative type was DECIMAL         */        elseif ($last_cumulative_type == DECIMAL) {            $oldM = PMA_getM($last_cumulative_size);            $oldD = PMA_getD($last_cumulative_size);            $oldInt = $oldM - $oldD;            $newInt = strlen((string)$cell);            /* See which has the larger integer length */            if ($oldInt >= $newInt) {                /* Use old decimal size */                return $last_cumulative_size;            } else {                /* Use $newInt + $oldD as new M */                return (($newInt + $oldD) . "," . $oldD);            }        }        /**         * The last cumulative type was BIGINT or INT         */        elseif ($last_cumulative_type == BIGINT || $last_cumulative_type == INT) {            if ($curr_size >= $last_cumulative_size) {                return $curr_size;            } else {                return $last_cumulative_size;            }        }        /**         * This is the first row to be analyzed         */        elseif (! isset($last_cumulative_type) || $last_cumulative_type == NONE) {            return $curr_size;        }        /**         * An error has DEFINITELY occurred         */        else {            /**             * TODO: Handle this MUCH more elegantly             */            return -1;        }    }    /**     * An error has DEFINITELY occurred     */    else {        /**         * TODO: Handle this MUCH more elegantly         */        return -1;    }}/** * Determines what MySQL type a cell is * * @access  public * * @param int    $last_cumulative_type  Last cumulative column type  (VARCHAR or INT or BIGINT or DECIMAL or NONE) * @param string &$cell                 String representation of the cell for which a best-fit type is to be determined * @return  int                           The MySQL type representation (VARCHAR or INT or BIGINT or DECIMAL or NONE) */function PMA_detectType($last_cumulative_type, &$cell){    /**     * If numeric, determine if decimal, int or bigint     * Else, we call it varchar for simplicity     */    if (! strcmp('NULL', $cell)) {        if ($last_cumulative_type === null || $last_cumulative_type == NONE) {            return NONE;        } else {            return $last_cumulative_type;        }    } elseif (is_numeric($cell)) {        if ($cell == (string)(float)$cell && strpos($cell, ".") !== false && substr_count($cell, ".") == 1) {            return DECIMAL;        } else {        if (abs($cell) > 2147483647) {            return BIGINT;        } else {            return INT;        }        }    } else {        return VARCHAR;    }}/** * Determines if the column types are int, decimal, or string * * @link http://wiki.phpmyadmin.net/pma/Import * * @todo    Handle the error case more elegantly * * @access  public * * @param &$table  array(string $table_name, array $col_names, array $rows) * @return  array    array(array $types, array $sizes) */function PMA_analyzeTable(&$table){    /* Get number of rows in table */    $numRows = count($table[ROWS]);    /* Get number of columns */    $numCols = count($table[COL_NAMES]);    /* Current type for each column */    $types = array();    $sizes = array();    /* Initialize $sizes to all 0's */    for ($i = 0; $i < $numCols; ++$i) {        $sizes[$i] = 0;    }    /* Initialize $types to NONE */    for ($i = 0; $i < $numCols; ++$i) {        $types[$i] = NONE;    }    /* Temp vars */    $curr_type = NONE;    $curr_size = 0;    /* If the passed array is not of the correct form, do not process it */    if (is_array($table) && ! is_array($table[TBL_NAME]) && is_array($table[COL_NAMES]) && is_array($table[ROWS])) {        /* Analyze each column */        for ($i = 0; $i < $numCols; ++$i) {            /* Analyze the column in each row */            for ($j = 0; $j < $numRows; ++$j) {                /* Determine type of the current cell */                $curr_type = PMA_detectType($types[$i], $table[ROWS][$j][$i]);                /* Determine size of the current cell */                $sizes[$i] = PMA_detectSize($sizes[$i], $types[$i], $curr_type, $table[ROWS][$j][$i]);                /**                 * If a type for this column has already been declared,                 * only alter it if it was a number and a varchar was found                 */                if ($curr_type != NONE) {                    if ($curr_type == VARCHAR) {                        $types[$i] = VARCHAR;                    } else if ($curr_type == DECIMAL) {                        if ($types[$i] != VARCHAR) {                            $types[$i] = DECIMAL;                        }                    } else if ($curr_type == BIGINT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL) {                            $types[$i] = BIGINT;                        }                    } else if ($curr_type == INT) {                        if ($types[$i] != VARCHAR && $types[$i] != DECIMAL && $types[$i] != BIGINT) {                            $types[$i] = INT;                        }                    }                }            }        }        /* Check to ensure that all types are valid */        $len = count($types);        for ($n = 0; $n < $len; ++$n) {            if (! strcmp(NONE, $types[$n])) {                $types[$n] = VARCHAR;                $sizes[$n] = '10';            }        }        return array($types, $sizes);    } else {        /**         * TODO: Handle this better         */        return false;    }}/* Needed to quell the beast that is PMA_Message */$import_notice = null;/** * Builds and executes SQL statements to create the database and tables * as necessary, as well as insert all the data. * * @link http://wiki.phpmyadmin.net/pma/Import * * @access  public * * @param string  $db_name          Name of the database * @param array   &$tables          Array of tables for the specified database * @param array   &$analyses        Analyses of the tables * @param array   &$additional_sql  Additional SQL statements to be executed * @param array   $options          Associative array of options * @return  void */function PMA_buildSQL($db_name, &$tables, &$analyses = null, &$additional_sql = null, $options = null){    /* Take care of the options */    if (isset($options['db_collation'])&& ! is_null($options['db_collation'])) {        $collation = $options['db_collation'];    } else {        $collation = "utf8_general_ci";    }    if (isset($options['db_charset']) && ! is_null($options['db_charset'])) {        $charset = $options['db_charset'];    } else {        $charset = "utf8";    }    if (isset($options['create_db'])) {        $create_db = $options['create_db'];    } else {        $create_db = true;    }    /* Create SQL code to handle the database */    $sql = array();    if ($create_db) {        if (PMA_DRIZZLE) {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " COLLATE " . $collation;        } else {            $sql[] = "CREATE DATABASE IF NOT EXISTS " . PMA_backquote($db_name) . " DEFAULT CHARACTER SET " . $charset . " COLLATE " . $collation;        }    }    /**     * The calling plug-in should include this statement, if necessary, in the $additional_sql parameter     *     * $sql[] = "USE " . PMA_backquote($db_name);     */    /* Execute the SQL statements create above */    $sql_len = count($sql);    for ($i = 0; $i < $sql_len; ++$i) {        PMA_importRunQuery($sql[$i], $sql[$i]);    }    /* No longer needed */    unset($sql);    /* Run the $additional_sql statements supplied by the caller plug-in */    if ($additional_sql != null) {        /* Clean the SQL first */        $additional_sql_len = count($additional_sql);        /**         * Only match tables for now, because CREATE IF NOT EXISTS         * syntax is lacking or nonexisting for views, triggers,         * functions, and procedures.         *         * See: http://bugs.mysql.com/bug.php?id=15287         *         * To the best of my knowledge this is still an issue.         *         * $pattern = 'CREATE (TABLE|VIEW|TRIGGER|FUNCTION|PROCEDURE)';         */        $pattern = '/CREATE .*(TABLE)/';        $replacement = 'CREATE \\1 IF NOT EXISTS';        /* Change CREATE statements to CREATE IF NOT EXISTS to support inserting into existing structures */        for ($i = 0; $i < $additional_sql_len; ++$i) {            $additional_sql[$i] = preg_replace($pattern, $replacement, $additional_sql[$i]);            /* Execute the resulting statements */            PMA_importRunQuery($additional_sql[$i], $additional_sql[$i]);        }    }    if ($analyses != null) {        $type_array = array(NONE => "NULL", VARCHAR => "varchar", INT => "int", DECIMAL => "decimal", BIGINT => "bigint", GEOMETRY => 'geometry');        /* TODO: Do more checking here to make sure they really are matched */        if (count($tables) != count($analyses)) {            exit();        }        /* Create SQL code to create the tables */        $tempSQLStr = "";        $num_tables = count($tables);        for ($i = 0; $i < $num_tables; ++$i) {            $num_cols = count($tables[$i][COL_NAMES]);            $tempSQLStr = "CREATE TABLE IF NOT EXISTS " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";            for ($j = 0; $j < $num_cols; ++$j) {                $size = $analyses[$i][SIZES][$j];                if ((int)$size == 0) {                    $size = 10;                }                $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$j]) . " " . $type_array[$analyses[$i][TYPES][$j]];                if ($analyses[$i][TYPES][$j] != GEOMETRY) {                    $tempSQLStr .= "(" . $size . ")";                }                if ($j != (count($tables[$i][COL_NAMES]) - 1)) {                    $tempSQLStr .= ", ";                }            }            $tempSQLStr .= ")"                . (PMA_DRIZZLE ? "" : " DEFAULT CHARACTER SET " . $charset)                . " COLLATE " . $collation . ";";            /**             * Each SQL statement is executed immediately             * after it is formed so that we don't have             * to store them in a (possibly large) buffer             */            PMA_importRunQuery($tempSQLStr, $tempSQLStr);        }    }    /**     * Create the SQL statements to insert all the data     *     * Only one insert query is formed for each table     */    $tempSQLStr = "";    $col_count = 0;    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $num_cols = count($tables[$i][COL_NAMES]);        $num_rows = count($tables[$i][ROWS]);        $tempSQLStr = "INSERT INTO " . PMA_backquote($db_name) . '.' . PMA_backquote($tables[$i][TBL_NAME]) . " (";        for ($m = 0; $m < $num_cols; ++$m) {            $tempSQLStr .= PMA_backquote($tables[$i][COL_NAMES][$m]);            if ($m != ($num_cols - 1)) {                $tempSQLStr .= ", ";            }        }        $tempSQLStr .= ") VALUES ";        for ($j = 0; $j < $num_rows; ++$j) {            $tempSQLStr .= "(";            for ($k = 0; $k < $num_cols; ++$k) {                // If fully formatted SQL, no need to enclose with aphostrophes, add shalshes etc.                if ($analyses != null                    && isset($analyses[$i][FORMATTEDSQL][$col_count])                    && $analyses[$i][FORMATTEDSQL][$col_count] == true                ) {                    $tempSQLStr .= (string) $tables[$i][ROWS][$j][$k];                } else {                    if ($analyses != null) {                        $is_varchar = ($analyses[$i][TYPES][$col_count] === VARCHAR);                    } else {                        $is_varchar = !is_numeric($tables[$i][ROWS][$j][$k]);                    }                    /* Don't put quotes around NULL fields */                    if (! strcmp($tables[$i][ROWS][$j][$k], 'NULL')) {                        $is_varchar = false;                    }                    $tempSQLStr .= (($is_varchar) ? "'" : "");                    $tempSQLStr .= PMA_sqlAddSlashes((string)$tables[$i][ROWS][$j][$k]);                    $tempSQLStr .= (($is_varchar) ? "'" : "");                }                if ($k != ($num_cols - 1)) {                    $tempSQLStr .= ", ";                }                if ($col_count == ($num_cols - 1)) {                    $col_count = 0;                } else {                    $col_count++;                }                /* Delete the cell after we are done with it */                unset($tables[$i][ROWS][$j][$k]);            }            $tempSQLStr .= ")";            if ($j != ($num_rows - 1)) {                $tempSQLStr .= ",\n ";            }            $col_count = 0;            /* Delete the row after we are done with it */            unset($tables[$i][ROWS][$j]);        }        $tempSQLStr .= ";";        /**         * Each SQL statement is executed immediately         * after it is formed so that we don't have         * to store them in a (possibly large) buffer         */        PMA_importRunQuery($tempSQLStr, $tempSQLStr);    }    /* No longer needed */    unset($tempSQLStr);    /**     * A work in progress     */    /* Add the viewable structures from $additional_sql to $tables so they are also displayed */    $view_pattern = '@VIEW `[^`]+`\.`([^`]+)@';    $table_pattern = '@CREATE TABLE IF NOT EXISTS `([^`]+)`@';    /* Check a third pattern to make sure its not a "USE `db_name`;" statement */    $regs = array();    $inTables = false;    $additional_sql_len = count($additional_sql);    for ($i = 0; $i < $additional_sql_len; ++$i) {        preg_match($view_pattern, $additional_sql[$i], $regs);        if (count($regs) == 0) {            preg_match($table_pattern, $additional_sql[$i], $regs);        }        if (count($regs)) {            for ($n = 0; $n < $num_tables; ++$n) {                if (!strcmp($regs[1], $tables[$n][TBL_NAME])) {                    $inTables = true;                    break;                }            }            if (!$inTables) {                $tables[] = array(TBL_NAME => $regs[1]);            }        }        /* Reset the array */        $regs = array();        $inTables = false;    }    $params = array('db' => (string)$db_name);    $db_url = 'db_structure.php' . PMA_generate_common_url($params);    $db_ops_url = 'db_operations.php' . PMA_generate_common_url($params);    $message = '<br /><br />';    $message .= '<strong>' . __('The following structures have either been created or altered. Here you can:') . '</strong><br />';    $message .= '<ul><li>' . __("View a structure's contents by clicking on its name") . '</li>';    $message .= '<li>' . __('Change any of its settings by clicking the corresponding "Options" link') . '</li>';    $message .= '<li>' . __('Edit structure by following the "Structure" link') . '</li>';    $message .= sprintf('<br /><li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                        $db_url,                        sprintf(__('Go to database: %s'), htmlspecialchars(PMA_backquote($db_name))),                        htmlspecialchars($db_name),                        $db_ops_url,                        sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));    $message .= '<ul>';    unset($params);    $num_tables = count($tables);    for ($i = 0; $i < $num_tables; ++$i) {        $params = array('db' => (string)$db_name, 'table' => (string)$tables[$i][TBL_NAME]);        $tbl_url = 'sql.php' . PMA_generate_common_url($params);        $tbl_struct_url = 'tbl_structure.php' . PMA_generate_common_url($params);        $tbl_ops_url = 'tbl_operations.php' . PMA_generate_common_url($params);        unset($params);        if (! PMA_Table::isView($db_name, $tables[$i][TBL_NAME])) {            $message .= sprintf('<li><a href="%s" title="%s">%s</a> (<a href="%s" title="%s">' . __('Structure') . '</a>) (<a href="%s" title="%s">' . __('Options') . '</a>)</li>',                                $tbl_url,                                sprintf(__('Go to table: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]),                                $tbl_struct_url,                                sprintf(__('Structure of %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                $tbl_ops_url,                                sprintf(__('Edit settings for %s'), htmlspecialchars(PMA_backquote($db_name))));        } else {            $message .= sprintf('<li><a href="%s" title="%s">%s</a></li>',                                $tbl_url,                                sprintf(__('Go to view: %s'), htmlspecialchars(PMA_backquote($tables[$i][TBL_NAME]))),                                htmlspecialchars($tables[$i][TBL_NAME]));        }    }    $message .= '</ul></ul>';    global $import_notice;    $import_notice = $message;    unset($tables);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-StringType-Native *//** * Checks if a character is an alphanumeric one * * @param string   character to check for * @return  boolean  whether the character is an alphanumeric one or not */function PMA_STR_isAlnum($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c) || PMA_STR_isDigit($c));} // end of the "PMA_STR_isAlnum()" function/** * Checks if a character is an alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an alphabetic one or not */function PMA_STR_isAlpha($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c));} // end of the "PMA_STR_isAlpha()" function/** * Checks if a character is a digit * * @param string   character to check for * @return  boolean  whether the character is a digit or not */function PMA_STR_isDigit($c){    $ord_zero = 48; //ord('0');    $ord_nine = 57; //ord('9');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isDigit()" function/** * Checks if a character is an upper alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an upper alphabetic one or not */function PMA_STR_isUpper($c){    $ord_zero = 65; //ord('A');    $ord_nine = 90; //ord('Z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isUpper()" function/** * Checks if a character is a lower alphabetic one * * @param string   character to check for * @return  boolean  whether the character is a lower alphabetic one or not */function PMA_STR_isLower($c){    $ord_zero = 97;  //ord('a');    $ord_nine = 122; //ord('z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isLower()" function/** * Checks if a character is a space one * * @param string   character to check for * @return  boolean  whether the character is a space one or not */function PMA_STR_isSpace($c){    $ord_space = 32;    //ord(' ')    $ord_tab   = 9;     //ord('\t')    $ord_CR    = 13;    //ord('\n')    $ord_NOBR  = 160;   //ord('U+00A0);    $ord_c     = ord($c);    return ($ord_c == $ord_space         || $ord_c == $ord_NOBR         || PMA_STR_numberInRangeInclusive($ord_c, $ord_tab, $ord_CR));} // end of the "PMA_STR_isSpace()" function/** * Checks if a character is an hexadecimal digit * * @param string   character to check for * @return  boolean  whether the character is an hexadecimal digit or not */function PMA_STR_isHexDigit($c){    $ord_Aupper = 65;  //ord('A');    $ord_Fupper = 70;  //ord('F');    $ord_Alower = 97;  //ord('a');    $ord_Flower = 102; //ord('f');    $ord_zero   = 48;  //ord('0');    $ord_nine   = 57;  //ord('9');    $ord_c      = ord($c);    return (PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Aupper, $ord_Fupper)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Alower, $ord_Flower));} // end of the "PMA_STR_isHexDigit()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * GLOBAL Plugin function. * --------------- * * THIS FILE PROVIDES BASIC FUNCTIONS TO USE IN OTHER PLUGINS! * * The basic filename usage for any plugin, residing in the libraries/transformations directory is: * * -- <mime_type>_<mime_subtype>__<transformation_name>.inc.php * * The function name has to be the like above filename: * * -- function PMA_transformation_<mime_type>_<mime_subtype>__<transformation_name>.inc.php * * Please use short and expressive names. For now, special characters which aren't allowed in * filenames or functions should not be used. * * Please provide a comment for your function, what it does and what parameters are available. * * @package PhpMyAdmin-Transformation *//** * */function PMA_transformation_global_plain($buffer, $options = array(), $meta = ''){    return htmlspecialchars($buffer);}function PMA_transformation_global_html($buffer, $options = array(), $meta = ''){    return $buffer;}function PMA_transformation_global_html_replace($buffer, $options = array(), $meta = ''){    if (!isset($options['string'])) {        $options['string'] = '';    }    if (isset($options['regex']) && isset($options['regex_replace'])) {        $buffer = preg_replace('@' . str_replace('@', '\@', $options['regex']) . '@si', $options['regex_replace'], $buffer);    }    // Replace occurences of [__BUFFER__] with actual text    $return = str_replace("[__BUFFER__]", $buffer, $options['string']);    return $return;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once "Export_Relation_Schema.class.php";/** * This Class is EPS Library and * helps in developing structure of EPS Schema Export * * @access public * @see http://php.net/manual/en/book.xmlwriter.php */class PMA_EPS{    public $font;    public $fontSize;    public $stringCommands;    /**     * The "PMA_EPS" constructor     *     * Upon instantiation This starts writing the EPS Document.     * %!PS-Adobe-3.0 EPSF-3.0 This is the MUST first comment to include     * it shows/tells that the Post Script document is purely under     * Document Structuring Convention [DSC] and is Compliant     * Encapsulated Post Script Document     *     * @return void     * @access public     */    function __construct()    {        $this->stringCommands = "";        $this->stringCommands .= "%!PS-Adobe-3.0 EPSF-3.0 \n";    }    /**     * Set document title     *     * @param string $value sets the title text     *     * @return void     *     * @access public     */    function setTitle($value)    {        $this->stringCommands .= '%%Title: ' . $value . "\n";    }    /**     * Set document author     *     * @param string $value sets the author     *     * @return void     *     * @access public     */    function setAuthor($value)    {        $this->stringCommands .= '%%Creator: ' . $value . "\n";    }    /**     * Set document creation date     *     * @param string $value sets the date     *     * @return void     *     * @access public     */    function setDate($value)    {        $this->stringCommands .= '%%CreationDate: ' . $value . "\n";    }    /**     * Set document orientation     *     * @param string $value sets the author     *     * @return void     *     * @access public     */    function setOrientation($value)    {        $this->stringCommands .= "%%PageOrder: Ascend \n";        if ($value == "L") {            $value = "Landscape";            $this->stringCommands .= '%%Orientation: ' . $value . "\n";        } else {            $value = "Portrait";            $this->stringCommands .= '%%Orientation: ' . $value . "\n";        }        $this->stringCommands .= "%%EndComments \n";        $this->stringCommands .= "%%Pages 1 \n";        $this->stringCommands .= "%%BoundingBox: 72 150 144 170 \n";    }    /**     * Set the font and size     *     * font can be set whenever needed in EPS     *     * @param string  $value sets the font name e.g Arial     * @param integer $size  sets the size of the font e.g 10     *     * @return void     *     * @access public     */    function setFont($value, $size)    {        $this->font = $value;        $this->fontSize = $size;        $this->stringCommands .= "/" . $value . " findfont   % Get the basic font\n";        $this->stringCommands .= "" . $size . " scalefont            % Scale the font to $size points\n";        $this->stringCommands .= "setfont                 % Make it the current font\n";    }    /**     * Get the font     *     * @return string return the font name e.g Arial     * @access public     */    function getFont()    {        return $this->font;    }    /**     * Get the font Size     *     * @return string return the size of the font e.g 10     * @access public     */    function getFontSize()    {        return $this->fontSize;    }    /**     * Draw the line     *     * drawing the lines from x,y source to x,y destination and set the     * width of the line. lines helps in showing relationships of tables     *     * @param integer $x_from    The x_from attribute defines the start     *                           left position of the element     * @param integer $y_from    The y_from attribute defines the start     *                           right position of the element     * @param integer $x_to      The x_to attribute defines the end     *                           left position of the element     * @param integer $y_to      The y_to attribute defines the end     *                           right position of the element     * @param integer $lineWidth Sets the width of the line e.g 2     *     * @return void     *     * @access public     */    function line($x_from = 0, $y_from = 0, $x_to = 0, $y_to = 0, $lineWidth = 0)    {        $this->stringCommands .= $lineWidth . " setlinewidth  \n";        $this->stringCommands .= $x_from . ' ' . $y_from  . " moveto \n";        $this->stringCommands .= $x_to . ' ' . $y_to  . " lineto \n";        $this->stringCommands .= "stroke \n";    }    /**     * Draw the rectangle     *     * drawing the rectangle from x,y source to x,y destination and set the     * width of the line. rectangles drawn around the text shown of fields     *     * @param integer $x_from    The x_from attribute defines the start                                 left position of the element     * @param integer $y_from    The y_from attribute defines the start                                 right position of the element     * @param integer $x_to      The x_to attribute defines the end                                 left position of the element     * @param integer $y_to      The y_to attribute defines the end                                 right position of the element     * @param integer $lineWidth Sets the width of the line e.g 2     *     * @return void     *     * @access public     */    function rect($x_from, $y_from, $x_to, $y_to, $lineWidth)    {        $this->stringCommands .= $lineWidth . " setlinewidth  \n";        $this->stringCommands .= "newpath \n";        $this->stringCommands .= $x_from . " " . $y_from  . " moveto \n";        $this->stringCommands .= "0 " . $y_to  . " rlineto \n";        $this->stringCommands .= $x_to . " 0 rlineto \n";        $this->stringCommands .= "0 -" . $y_to  . " rlineto \n";        $this->stringCommands .= "closepath \n";        $this->stringCommands .= "stroke \n";    }    /**     * Set the current point     *     * The moveto operator takes two numbers off the stack and treats     * them as x and y coordinates to which to move. The coordinates     * specified become the current point.     *     * @param integer $x The x attribute defines the left position of the element     * @param integer $y The y attribute defines the right position of the element     *     * @return void     *     * @access public     */    function moveTo($x, $y)    {        $this->stringCommands .= $x . ' ' . $y . " moveto \n";    }    /**     * Output/Display the text     *     * @param string $text The string to be displayed     *     * @return void     *     * @access public     */    function show($text)    {        $this->stringCommands .=  '(' . $text  . ") show \n";    }    /**     * Output the text at specified co-ordinates     *     * @param string  $text String to be displayed     * @param integer $x    X attribute defines the left position of the element     * @param integer $y    Y attribute defines the right position of the element     *     * @return void     *     * @access public     */    function showXY($text, $x, $y)    {        $this->moveTo($x, $y);        $this->show($text);    }    /**     * get width of string/text     *     * EPS text width is calcualted depending on font name     * and font size. It is very important to know the width of text     * because rectangle is drawn around it.     *     * This is a bit hardcore method. I didn't found any other better than this.     * if someone found better than this. would love to hear that method     *     * @param string  $text     string that width will be calculated     * @param integer $font     name of the font like Arial,sans-serif etc     * @param integer $fontSize size of font     *     * @return integer width of the text     *     * @access public     */    function getStringWidth($text,$font,$fontSize)    {        /*         * Start by counting the width, giving each character a modifying value         */        $count = 0;        $count = $count + ((strlen($text) - strlen(str_replace(array("i", "j", "l"), "", $text))) * 0.23);//ijl        $count = $count + ((strlen($text) - strlen(str_replace(array("f"), "", $text))) * 0.27);//f        $count = $count + ((strlen($text) - strlen(str_replace(array("t", "I"), "", $text))) * 0.28);//tI        $count = $count + ((strlen($text) - strlen(str_replace(array("r"), "", $text))) * 0.34);//r        $count = $count + ((strlen($text) - strlen(str_replace(array("1"), "", $text))) * 0.49);//1        $count = $count + ((strlen($text) - strlen(str_replace(array("c", "k", "s", "v", "x", "y", "z", "J"), "", $text))) * 0.5);//cksvxyzJ        $count = $count + ((strlen($text) - strlen(str_replace(array("a", "b", "d", "e", "g", "h", "n", "o", "p", "q", "u", "L", "0", "2", "3", "4", "5", "6", "7", "8", "9"), "", $text))) * 0.56);//abdeghnopquL023456789        $count = $count + ((strlen($text) - strlen(str_replace(array("F", "T", "Z"), "", $text))) * 0.61);//FTZ        $count = $count + ((strlen($text) - strlen(str_replace(array("A", "B", "E", "K", "P", "S", "V", "X", "Y"), "", $text))) * 0.67);//ABEKPSVXY        $count = $count + ((strlen($text) - strlen(str_replace(array("w", "C", "D", "H", "N", "R", "U"), "", $text))) * 0.73);//wCDHNRU        $count = $count + ((strlen($text) - strlen(str_replace(array("G", "O", "Q"), "", $text))) * 0.78);//GOQ        $count = $count + ((strlen($text) - strlen(str_replace(array("m", "M"), "", $text))) * 0.84);//mM        $count = $count + ((strlen($text) - strlen(str_replace("W", "", $text))) * .95);//W        $count = $count + ((strlen($text) - strlen(str_replace(" ", "", $text))) * .28);//" "        $text  = str_replace(" ", "", $text);//remove the " "'s        $count = $count + (strlen(preg_replace("/[a-z0-9]/i", "", $text)) * 0.3); //all other chrs        $modifier = 1;        $font = strtolower($font);        switch($font){        /*         * no modifier for arial and sans-serif         */        case 'arial':        case 'sans-serif':            break;        /*         * .92 modifer for time, serif, brushscriptstd, and californian fb         */        case 'times':        case 'serif':        case 'brushscriptstd':        case 'californian fb':            $modifier = .92;            break;        /*         * 1.23 modifier for broadway         */        case 'broadway':            $modifier = 1.23;            break;        }        $textWidth = $count*$fontSize;        return ceil($textWidth*$modifier);    }    /**     * Ends EPS Document     *     * @return void     * @access public     */    function endEpsDoc()    {        $this->stringCommands .= "showpage \n";    }    /**     * Output EPS Document for download     *     * @param string $fileName name of the eps document     *     * @return void     *     * @access public     */    function showOutput($fileName)    {        // if(ob_get_clean()){            //ob_end_clean();        //}        $output = $this->stringCommands;        PMA_download_header($fileName . '.eps', 'image/x-eps', strlen($output));        print $output;    }}/** * Table preferences/statistics * * This class preserves the table co-ordinates,fields * and helps in drawing/generating the Tables in EPS. * * @name Table_Stats * @see PMA_EPS */class Table_Stats{    /**     * Defines properties     */    private $_tableName;    private $_showInfo = false;    public $width = 0;    public $height;    public $fields = array();    public $heightCell = 0;    public $currentCell = 0;    public $x, $y;    public $primary = array();    /**     * The "Table_Stats" constructor     *     * @param string  $tableName        The table name     * @param string  $font             The font  name     * @param integer $fontSize         The font size     * @param integer $pageNumber       Page number     * @param integer &$same_wide_width The max width among tables     * @param boolean $showKeys         Whether to display keys or not     * @param boolean $showInfo         Whether to display table position or not     *     * @global object    The current eps document     * @global integer   The current page number (from the     *                     $cfg['Servers'][$i]['table_coords'] table)     * @global array     The relations settings     * @global string    The current db name     *     * @access private     * @see PMA_EPS, Table_Stats::Table_Stats_setWidth,     *      Table_Stats::Table_Stats_setHeight     */    function __construct($tableName, $font, $fontSize, $pageNumber, &$same_wide_width,    $showKeys = false, $showInfo = false)    {        global $eps, $cfgRelation, $db;        $this->_tableName = $tableName;        $sql = 'DESCRIBE ' . PMA_backquote($tableName);        $result = PMA_DBI_try_query($sql, null, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $eps->dieSchema(                $pageNumber, "EPS",                sprintf(__('The %s table doesn\'t exist!'), $tableName)            );        }        /*        * load fields        * check to see if it will load all fields or only the foreign keys        */        if ($showKeys) {            $indexes = PMA_Index::getFromTable($this->_tableName, $db);            $all_columns = array();            foreach ($indexes as $index) {                $all_columns = array_merge(                    $all_columns,                    array_flip(array_keys($index->getColumns()))                );            }            $this->fields = array_keys($all_columns);        } else {            while ($row = PMA_DBI_fetch_row($result)) {                $this->fields[] = $row[0];            }        }        $this->_showInfo = $showInfo;        // height and width        $this->_setHeightTable($fontSize);        // setWidth must me after setHeight, because title        // can include table height which changes table width        $this->_setWidthTable($font, $fontSize);        if ($same_wide_width < $this->width) {            $same_wide_width = $this->width;        }        // x and y        $sql = 'SELECT x, y FROM '            . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.'            . PMA_backquote($cfgRelation['table_coords'])            . ' WHERE db_name = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND   table_name = \'' . PMA_sqlAddSlashes($tableName) . '\''            . ' AND   pdf_page_number = ' . $pageNumber;        $result = PMA_query_as_controluser($sql, false, PMA_DBI_QUERY_STORE);        if (! $result || ! PMA_DBI_num_rows($result)) {            $eps->dieSchema(                $pageNumber, "EPS",                sprintf(                    __('Please configure the coordinates for table %s'),                    $tableName                )            );        }        list($this->x, $this->y) = PMA_DBI_fetch_row($result);        $this->x = (double) $this->x;        $this->y = (double) $this->y;        // displayfield        $this->displayfield = PMA_getDisplayField($db, $tableName);        // index        $result = PMA_DBI_query(            'SHOW INDEX FROM ' . PMA_backquote($tableName) . ';',            null, PMA_DBI_QUERY_STORE        );        if (PMA_DBI_num_rows($result) > 0) {            while ($row = PMA_DBI_fetch_assoc($result)) {                if ($row['Key_name'] == 'PRIMARY') {                    $this->primary[] = $row['Column_name'];                }            }        }    }    /**     * Returns title of the current table,     * title can have the dimensions/co-ordinates of the table     *     * @return string The relation/table name     * @access private     */    private function _getTitle()    {        return ($this->_showInfo            ? sprintf('%.0f', $this->width) . 'x' . sprintf('%.0f', $this->heightCell)            : '') . ' ' . $this->_tableName;    }    /**     * Sets the width of the table     *     * @param string  $font     The font name     * @param integer $fontSize The font size     *     * @global object    The current eps document     *     * @return void     *     * @access private     * @see PMA_EPS     */    private function _setWidthTable($font,$fontSize)    {        global $eps;        foreach ($this->fields as $field) {            $this->width = max(                $this->width,                $eps->getStringWidth($field, $font, $fontSize)            );        }        $this->width += $eps->getStringWidth('      ', $font, $fontSize);        /*         * it is unknown what value must be added, because         * table title is affected by the tabe width value         */        while ($this->width < $eps->getStringWidth($this->_getTitle(), $font, $fontSize)) {            $this->width += 7;        }    }    /**     * Sets the height of the table     *     * @param integer $fontSize The font size     *     * @return void     * @access private     */    private function _setHeightTable($fontSize)    {        $this->heightCell = $fontSize + 4;        $this->height = (count($this->fields) + 1) * $this->heightCell;    }    /**     * Draw the table     *     * @param boolean $showColor Whether to display color     *     * @global object The current eps document     *     * @return void     *     * @access public     * @see PMA_EPS,PMA_EPS::line,PMA_EPS::rect     */    public function tableDraw($showColor)    {        global $eps;        //echo $this->_tableName.'<br />';        $eps->rect($this->x, $this->y + 12, $this->width, $this->heightCell, 1);        $eps->showXY($this->_getTitle(), $this->x + 5, $this->y + 14);        foreach ($this->fields as $field) {            $this->currentCell += $this->heightCell;            $showColor    = 'none';            if ($showColor) {                if (in_array($field, $this->primary)) {                    $showColor = '#0c0';                }                if ($field == $this->displayfield) {                    $showColor = 'none';                }            }            $eps->rect(                $this->x, $this->y + 12  + $this->currentCell,                $this->width, $this->heightCell, 1            );            $eps->showXY($field, $this->x + 5, $this->y + 14 + $this->currentCell);        }    }}/** * Relation preferences/statistics * * This class fetches the table master and foreign fields positions * and helps in generating the Table references and then connects * master table's master field to foreign table's foreign key * in EPS document. * * @name Relation_Stats * @see PMA_EPS */class Relation_Stats{    /**     * Defines properties     */    public $xSrc, $ySrc;    public $srcDir ;    public $destDir;    public $xDest, $yDest;    public $wTick = 10;    /**     * The "Relation_Stats" constructor     *     * @param string $master_table  The master table name     * @param string $master_field  The relation field in the master table     * @param string $foreign_table The foreign table name     * @param string $foreign_field The relation field in the foreign table     *     * @see Relation_Stats::_getXy     */    function __construct($master_table, $master_field, $foreign_table, $foreign_field)    {        $src_pos  = $this->_getXy($master_table, $master_field);        $dest_pos = $this->_getXy($foreign_table, $foreign_field);        /*        * [0] is x-left        * [1] is x-right        * [2] is y        */        $src_left   = $src_pos[0] - $this->wTick;        $src_right  = $src_pos[1] + $this->wTick;        $dest_left  = $dest_pos[0] - $this->wTick;        $dest_right = $dest_pos[1] + $this->wTick;        $d1 = abs($src_left - $dest_left);        $d2 = abs($src_right - $dest_left);        $d3 = abs($src_left - $dest_right);        $d4 = abs($src_right - $dest_right);        $d  = min($d1, $d2, $d3, $d4);        if ($d == $d1) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d2) {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[0];            $this->destDir = -1;        } elseif ($d == $d3) {            $this->xSrc    = $src_pos[0];            $this->srcDir  = -1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        } else {            $this->xSrc    = $src_pos[1];            $this->srcDir  = 1;            $this->xDest   = $dest_pos[1];            $this->destDir = 1;        }        $this->ySrc   = $src_pos[2] + 10;        $this->yDest = $dest_pos[2] + 10;    }    /**     * Gets arrows coordinates     *     * @param string $table  The current table name     * @param string $column The relation column name     *     * @return array Arrows coordinates     *     * @access private     */    private function _getXy($table, $column)    {        $pos = array_search($column, $table->fields);        // x_left, x_right, y        return array(            $table->x,            $table->x + $table->width,            $table->y + ($pos + 1.5) * $table->heightCell        );    }    /**     * draws relation links and arrows     * shows foreign key relations     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @global object The current EPS document     *     * @access public     * @see PMA_EPS     *     * @return void     */    public function relationDraw($changeColor)    {        global $eps;        if ($changeColor) {            $listOfColors = array(                'red',                'grey',                'black',                'yellow',                'green',                'cyan',            '    orange'            );            shuffle($listOfColors);            $color =  $listOfColors[0];        } else {            $color = 'black';        }        // draw a line like -- to foreign field        $eps->line(            $this->xSrc,            $this->ySrc,            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            1        );        // draw a line like -- to master field        $eps->line(            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            $this->xDest,            $this->yDest,            1        );        // draw a line that connects to master field line and foreign field line        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick,            $this->ySrc,            $this->xDest + $this->destDir * $this->wTick,            $this->yDest,            1        );        $root2 = 2 * sqrt(2);        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc + $this->wTick / $root2,            1        );        $eps->line(            $this->xSrc + $this->srcDir * $this->wTick * 0.75,            $this->ySrc,            $this->xSrc + $this->srcDir * (0.75 - 1 / $root2) * $this->wTick,            $this->ySrc - $this->wTick / $root2,            1        );        $eps->line(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest + $this->wTick / $root2,            1        );        $eps->line(            $this->xDest + $this->destDir * $this->wTick / 2,            $this->yDest,            $this->xDest + $this->destDir * (0.5 + 1 / $root2) * $this->wTick,            $this->yDest - $this->wTick / $root2,            1        );    }}/** end of the "Relation_Stats" class*//** * EPS Relation Schema Class * * Purpose of this class is to generate the EPS Document * which is used for representing the database diagrams. * This class uses post script commands and with * the combination of these commands actually helps in preparing EPS Document. * * This class inherits Export_Relation_Schema class has common functionality added * to this class * * @name Eps_Relation_Schema */class PMA_Eps_Relation_Schema extends PMA_Export_Relation_Schema{    private $tables = array();    private $_relations = array();    /**     * The "PMA_EPS_Relation_Schema" constructor     *     * Upon instantiation This starts writing the EPS document     * user will be prompted for download as .eps extension     *     * @return void     * @see PMA_EPS     */    function __construct()    {        global $eps,$db;        $this->setPageNumber($_POST['pdf_page_number']);        $this->setShowColor(isset($_POST['show_color']));        $this->setShowKeys(isset($_POST['show_keys']));        $this->setTableDimension(isset($_POST['show_table_dimension']));        $this->setAllTableSameWidth(isset($_POST['all_table_same_wide']));        $this->setOrientation($_POST['orientation']);        $this->setExportType($_POST['export_type']);        $eps = new PMA_EPS();        $eps->setTitle(            sprintf(                __('Schema of the %s database - Page %s'),                $db,                $this->pageNumber            )        );        $eps->setAuthor('phpMyAdmin ' . PMA_VERSION);        $eps->setDate(date("j F Y, g:i a"));        $eps->setOrientation($this->orientation);        $eps->setFont('Verdana', '10');        $alltables = $this->getAllTables($db, $this->pageNumber);        foreach ($alltables AS $table) {            if (! isset($this->tables[$table])) {                $this->tables[$table] = new Table_Stats(                    $table, $eps->getFont(), $eps->getFontSize(), $this->pageNumber,                    $this->_tablewidth, $this->showKeys, $this->tableDimension                );            }            if ($this->sameWide) {                $this->tables[$table]->width = $this->_tablewidth;            }        }        $seen_a_relation = false;        foreach ($alltables as $one_table) {            $exist_rel = PMA_getForeigners($db, $one_table, '', 'both');            if ($exist_rel) {                $seen_a_relation = true;                foreach ($exist_rel as $master_field => $rel) {                    /* put the foreign table on the schema only if selected                    * by the user                    * (do not use array_search() because we would have to                    * to do a === false and this is not PHP3 compatible)                    */                    if (in_array($rel['foreign_table'], $alltables)) {                        $this->_addRelation(                            $one_table, $eps->getFont(), $eps->getFontSize(),                            $master_field, $rel['foreign_table'],                            $rel['foreign_field'], $this->tableDimension                        );                    }                }            }        }        if ($seen_a_relation) {            $this->_drawRelations($this->showColor);        }        $this->_drawTables($this->showColor);        $eps->endEpsDoc();        $eps->showOutput($db.'-'.$this->pageNumber);        exit();    }    /**     * Defines relation objects     *     * @param string  $masterTable  The master table name     * @param string  $font         The font     * @param int     $fontSize     The font size     * @param string  $masterField  The relation field in the master table     * @param string  $foreignTable The foreign table name     * @param string  $foreignField The relation field in the foreign table     * @param boolean $showInfo     Whether to display table position or not     *     * @return void     *     * @access private     * @see _setMinMax,Table_Stats::__construct(),Relation_Stats::__construct()     */    private function _addRelation($masterTable, $font, $fontSize, $masterField,    $foreignTable, $foreignField, $showInfo)    {        if (! isset($this->tables[$masterTable])) {            $this->tables[$masterTable] = new Table_Stats(                $masterTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );        }        if (! isset($this->tables[$foreignTable])) {            $this->tables[$foreignTable] = new Table_Stats(                $foreignTable, $font, $fontSize, $this->pageNumber,                $this->_tablewidth, false, $showInfo            );        }        $this->_relations[] = new Relation_Stats(            $this->tables[$masterTable], $masterField,            $this->tables[$foreignTable], $foreignField        );    }    /**     * Draws relation arrows and lines connects master table's master field to     * foreign table's forein field     *     * @param boolean $changeColor Whether to use one color per relation or not     *     * @return void     *     * @access private     * @see Relation_Stats::relationDraw()     */    private function _drawRelations($changeColor)    {        foreach ($this->_relations as $relation) {            $relation->relationDraw($changeColor);        }    }    /**     * Draws tables     *     * @param boolean $changeColor Whether to show color for primary fields or not     *     * @return void     *     * @access private     * @see Table_Stats::Table_Stats_tableDraw()     */    private function _drawTables($changeColor)    {        foreach ($this->tables as $table) {            $table->tableDraw($changeColor);        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to run http authentication. * NOTE: Requires PHP loaded as a Apache module. * * @package PhpMyAdmin-Auth-HTTP *//** * Displays authentication form * * @global  string    the font face to use in case of failure * @global  string    the default font size to use in case of failure * @global  string    the big font size to use in case of failure * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth(){    /* Perform logout to custom URL */    if (!empty($_REQUEST['old_usr']) && !empty($GLOBALS['cfg']['Server']['LogoutURL'])) {        PMA_sendHeaderLocation($GLOBALS['cfg']['Server']['LogoutURL']);        exit;    }    if (empty($GLOBALS['cfg']['Server']['auth_http_realm'])) {        if (empty($GLOBALS['cfg']['Server']['verbose'])) {            $server_message = $GLOBALS['cfg']['Server']['host'];        } else {            $server_message = $GLOBALS['cfg']['Server']['verbose'];        }        $realm_message = 'phpMyAdmin ' . $server_message;    } else {        $realm_message = $GLOBALS['cfg']['Server']['auth_http_realm'];    }    // remove non US-ASCII to respect RFC2616    $realm_message = preg_replace('/[^\x20-\x7e]/i', '', $realm_message);    header('WWW-Authenticate: Basic realm="' . $realm_message .  '"');    header('HTTP/1.0 401 Unauthorized');    if (php_sapi_name() !== 'cgi-fcgi') {        header('status: 401 Unauthorized');    }    // Defines the charset to be used    header('Content-Type: text/html; charset=utf-8');    /* HTML header */    $page_title = __('Access denied');    include './libraries/header_meta_style.inc.php';    ?></head><body>    <?php    if (file_exists(CUSTOM_HEADER_FILE)) {        include CUSTOM_HEADER_FILE;    }    ?><br /><br /><center>    <h1><?php echo sprintf(__('Welcome to %s'), ' phpMyAdmin'); ?></h1></center><br />    <?php    PMA_Message::error(__('Wrong username/password. Access denied.'))->display();    if (file_exists(CUSTOM_FOOTER_FILE)) {        include CUSTOM_FOOTER_FILE;    }    ?></body></html>    <?php    exit();} // end of the 'PMA_auth()' function/** * Gets advanced authentication settings * * @global  string    the username if register_globals is on * @global  string    the password if register_globals is on * @global  array     the array of server variables if register_globals is *                    off * @global  array     the array of environment variables if register_globals *                    is off * @global  string    the username for the ? server * @global  string    the password for the ? server * @global  string    the username for the WebSite Professional server * @global  string    the password for the WebSite Professional server * @global  string    the username of the user who logs out * * @return  boolean   whether we get authentication settings or not * * @access  public */function PMA_auth_check(){    global $PHP_AUTH_USER, $PHP_AUTH_PW;    global $old_usr;    // Grabs the $PHP_AUTH_USER variable whatever are the values of the    // 'register_globals' and the 'variables_order' directives    if (empty($PHP_AUTH_USER)) {        if (PMA_getenv('PHP_AUTH_USER')) {            $PHP_AUTH_USER = PMA_getenv('PHP_AUTH_USER');        } elseif (PMA_getenv('REMOTE_USER')) {            // CGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('REMOTE_USER');        } elseif (PMA_getenv('REDIRECT_REMOTE_USER')) {            // CGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('REDIRECT_REMOTE_USER');        } elseif (PMA_getenv('AUTH_USER')) {            // WebSite Professional            $PHP_AUTH_USER = PMA_getenv('AUTH_USER');        } elseif (PMA_getenv('HTTP_AUTHORIZATION')) {            // IIS, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('HTTP_AUTHORIZATION');        } elseif (PMA_getenv('Authorization')) {            // FastCGI, might be encoded, see below            $PHP_AUTH_USER = PMA_getenv('Authorization');        }    }    // Grabs the $PHP_AUTH_PW variable whatever are the values of the    // 'register_globals' and the 'variables_order' directives    if (empty($PHP_AUTH_PW)) {        if (PMA_getenv('PHP_AUTH_PW')) {            $PHP_AUTH_PW = PMA_getenv('PHP_AUTH_PW');        } elseif (PMA_getenv('REMOTE_PASSWORD')) {            // Apache/CGI            $PHP_AUTH_PW = PMA_getenv('REMOTE_PASSWORD');        } elseif (PMA_getenv('AUTH_PASSWORD')) {            // WebSite Professional            $PHP_AUTH_PW = PMA_getenv('AUTH_PASSWORD');        }    }    // Decode possibly encoded information (used by IIS/CGI/FastCGI)    // (do not use explode() because a user might have a colon in his password    if (strcmp(substr($PHP_AUTH_USER, 0, 6), 'Basic ') == 0) {        $usr_pass = base64_decode(substr($PHP_AUTH_USER, 6));        if (! empty($usr_pass)) {            $colon = strpos($usr_pass, ':');            if ($colon) {                $PHP_AUTH_USER = substr($usr_pass, 0, $colon);                $PHP_AUTH_PW = substr($usr_pass, $colon + 1);            }            unset($colon);        }        unset($usr_pass);    }    // User logged out -> ensure the new username is not the same    if (!empty($old_usr)        && (isset($PHP_AUTH_USER) && $old_usr == $PHP_AUTH_USER)) {        $PHP_AUTH_USER = '';        // -> delete user's choices that were stored in session        session_destroy();    }    // Returns whether we get authentication settings or not    if (empty($PHP_AUTH_USER)) {        return false;    } else {        return true;    }} // end of the 'PMA_auth_check()' function/** * Set the user and password after last checkings if required * * @global  array     the valid servers settings * @global  integer   the id of the current server * @global  array     the current server settings * @global  string    the current username * @global  string    the current password * * @return  boolean   always true * * @access  public */function PMA_auth_set_user(){    global $cfg, $server;    global $PHP_AUTH_USER, $PHP_AUTH_PW;    // Ensures valid authentication mode, 'only_db', bookmark database and    // table names and relation table name are used    if ($cfg['Server']['user'] != $PHP_AUTH_USER) {        $servers_cnt = count($cfg['Servers']);        for ($i = 1; $i <= $servers_cnt; $i++) {            if (isset($cfg['Servers'][$i])                && ($cfg['Servers'][$i]['host'] == $cfg['Server']['host'] && $cfg['Servers'][$i]['user'] == $PHP_AUTH_USER)) {                $server        = $i;                $cfg['Server'] = $cfg['Servers'][$i];                break;            }        } // end for    } // end if    $cfg['Server']['user']     = $PHP_AUTH_USER;    $cfg['Server']['password'] = $PHP_AUTH_PW;    // Avoid showing the password in phpinfo()'s output    unset($GLOBALS['PHP_AUTH_PW']);    unset($_SERVER['PHP_AUTH_PW']);    return true;} // end of the 'PMA_auth_set_user()' function/** * User is not allowed to login to MySQL -> authentication failed * * @return  boolean   always true (no return indeed) * * @access  public */function PMA_auth_fails(){    $error = PMA_DBI_getError();    if ($error && $GLOBALS['errno'] != 1045) {        PMA_fatalError($error);    } else {        PMA_auth();        return true;    }} // end of the 'PMA_auth_fails()' function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}require_once './libraries/common.inc.php';require_once './libraries/RecentTable.class.php';/** * Add recently used table and reload the navigation. * * @param string $db Database name where the table is located. * @param string $table The table name */function PMA_addRecentTable($db, $table){    $tmp_result = PMA_RecentTable::getInstance()->add($db, $table);    if ($tmp_result === true) {        echo '<span class="hide" id="update_recent_tables"></span>';    } else {        $error = $tmp_result;        $error->display();    }}/** * This is not an Ajax request so we need to generate all this output. */if (isset($GLOBALS['is_ajax_request']) && !$GLOBALS['is_ajax_request']) {    if (empty($GLOBALS['is_header_sent'])) {        /**         * Gets a core script and starts output buffering work         */        include_once './libraries/ob.lib.php';        PMA_outBufferPre();        // if database storage for user preferences is transient, offer to load        // exported settings from localStorage (detection will be done in JavaScript)        $userprefs_offer_import = $GLOBALS['PMA_Config']->get('user_preferences') == 'session'                && ! isset($_SESSION['userprefs_autoload']);        if ($userprefs_offer_import) {            $GLOBALS['js_include'][] = 'config.js';        }        // For re-usability, moved http-headers and stylesheets        // to a seperate file. It can now be included by header.inc.php,        // querywindow.php.        include_once './libraries/header_http.inc.php';        include_once './libraries/header_meta_style.inc.php';        include_once './libraries/header_scripts.inc.php';        ?>        <meta name="OBGZip" content="<?php echo ($GLOBALS['cfg']['OBGzip'] ? 'true' : 'false'); ?>" />        <?php /* remove vertical scroll bar bug in ie */ ?>        <!--[if IE 6]>        <style type="text/css">        /* <![CDATA[ */        html {            overflow-y: scroll;        }        /* ]]> */        </style>        <![endif]-->    </head>    <body>        <?php        // Include possible custom headers        if (file_exists(CUSTOM_HEADER_FILE)) {            include CUSTOM_HEADER_FILE;        }        // message of "Cookies required" displayed for auth_type http or config        // note: here, the decoration won't work because without cookies,        // our standard CSS is not operational        if (empty($_COOKIE)) {            PMA_Message::notice(__('Cookies must be enabled past this point.'))->display();        }        // offer to load user preferences from localStorage        if ($userprefs_offer_import) {            include_once './libraries/user_preferences.lib.php';            PMA_userprefs_autoload_header();        }        if (!defined('PMA_DISPLAY_HEADING')) {            define('PMA_DISPLAY_HEADING', 1);        }        // pass configuration for hint tooltip display        // (to be used by PMA_createqTip in js/functions.js)        if (! $GLOBALS['cfg']['ShowHint']) {            echo '<span id="no_hint" class="hide"></span>';        }        /**         * Display heading if needed. Design can be set in css file.         */        if (PMA_DISPLAY_HEADING && $GLOBALS['server'] > 0) {            $server_info = (!empty($GLOBALS['cfg']['Server']['verbose'])                            ? $GLOBALS['cfg']['Server']['verbose']                            : $GLOBALS['cfg']['Server']['host'] . (empty($GLOBALS['cfg']['Server']['port'])                                                                   ? ''                                                                   : ':' . $GLOBALS['cfg']['Server']['port']                                                                  )                           );            $separator = "<span class='separator item'>&nbsp;</span>\n";            $item = '<a href="%1$s?%2$s" class="item">';                if ($GLOBALS['cfg']['NavigationBarIconic'] !== true) {                    $item .= '%4$s: ';                }                $item .= '%3$s</a>' . "\n";                echo "<div id='floating_menubar'></div>\n";                echo "<div id='serverinfo'>\n";                if ($GLOBALS['cfg']['NavigationBarIconic']) {                    echo PMA_getImage('s_host.png', '', array('class' => 'item')) . "\n";                }                printf($item,                        $GLOBALS['cfg']['DefaultTabServer'],                        PMA_generate_common_url(),                        htmlspecialchars($server_info),                        __('Server'));                if (strlen($GLOBALS['db'])) {                    echo $separator;                    if ($GLOBALS['cfg']['NavigationBarIconic']) {                        echo PMA_getImage('s_db.png', '', array('class' => 'item')) . "\n";                    }                    printf($item,                            $GLOBALS['cfg']['DefaultTabDatabase'],                            PMA_generate_common_url($GLOBALS['db']),                            htmlspecialchars($GLOBALS['db']),                            __('Database'));                    // if the table is being dropped, $_REQUEST['purge'] is set to '1'                    // so do not display the table name in upper div                    if (strlen($GLOBALS['table']) && ! (isset($_REQUEST['purge']) && $_REQUEST['purge'] == '1')) {                        include_once './libraries/tbl_info.inc.php';                        echo $separator;                        if ($GLOBALS['cfg']['NavigationBarIconic']) {                            $icon = isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? 'b_views.png' : 's_tbl.png';                            echo PMA_getImage($icon, '', array('class' => 'item')) . "\n";                        }                        printf($item,                            $GLOBALS['cfg']['DefaultTabTable'],                            PMA_generate_common_url($GLOBALS['db'], $GLOBALS['table']),                            str_replace(' ', '&nbsp;', htmlspecialchars($GLOBALS['table'])),                            (isset($GLOBALS['tbl_is_view']) && $GLOBALS['tbl_is_view'] ? __('View') : __('Table')));                        /**                         * Displays table comment                         */                        if (!empty($show_comment) && ! isset($GLOBALS['avoid_show_comment'])) {                            if (strstr($show_comment, '; InnoDB free')) {                                $show_comment = preg_replace('@; InnoDB free:.*?$@', '', $show_comment);                            }                            echo '<span class="table_comment" id="span_table_comment">'                                .'&quot;' . htmlspecialchars($show_comment)                                .'&quot;</span>' . "\n";                        } // end if                        // add recently used table and reload the navigation                        if ($GLOBALS['cfg']['LeftRecentTable'] > 0) {                            PMA_addRecentTable($GLOBALS['db'], $GLOBALS['table']);                        }                    } else {                        // no table selected, display database comment if present                        /**                         * Settings for relations stuff                         */                        include_once './libraries/relation.lib.php';                        $cfgRelation = PMA_getRelationsParam();                        // Get additional information about tables for tooltip is done                        // in libraries/db_info.inc.php only once                        if ($cfgRelation['commwork']) {                            $comment = PMA_getDbComment($GLOBALS['db']);                            /**                             * Displays table comment                             */                            if (! empty($comment)) {                                echo '<span class="table_comment"'                                    . ' id="span_table_comment">&quot;'                                    . htmlspecialchars($comment)                                    . '&quot;</span>' . "\n";                            } // end if                        }                    }                }            }            echo '<div class="clearfloat"></div>';            echo '</div>';        }        /**         * Sets a variable to remember headers have been sent         */        $GLOBALS['is_header_sent'] = true;//end if (!$GLOBALS['is_ajax_request'])} else {    if (empty($GLOBALS['is_header_sent'])) {        include_once './libraries/header_http.inc.php';        $GLOBALS['is_header_sent'] = true;    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Provides the functionality for retreiving images * which may be actual images or an icon from a sprite * * @package PhpMyAdmin */chdir('..');// Send correct type:header('Content-Type: text/javascript; charset=UTF-8');header('Expires: ' . gmdate('D, d M Y H:i:s', time() + 3600) . ' GMT');// Avoid loading the full common.inc.php because this would add many// non-js-compatible stuff like DOCTYPEdefine('PMA_MINIMUM_COMMON', true);require_once './libraries/common.inc.php';// Get the data for the sprites, if it's availableif (is_readable($_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php')) {    include $_SESSION['PMA_Theme']->getPath() . '/sprites.lib.php';}$sprites = array();if (function_exists('PMA_sprites')) {    $sprites = PMA_sprites();}// We only need the keys from the array of sprites data,// since they contain the (partial) class names$keys = array();foreach ($sprites as $key => $value) {    $keys[] = "'$key'";}?>/** * Returns an HTML IMG tag for a particular image from a theme, * which may be an actual file or an icon from a sprite * * @param string image      The name of the file to get * @param string alternate  Used to set 'alt' and 'title' attributes of the image * @param object attributes An associative array of other attributes * * @return Object The requested image, this object has two methods: *                  .toString()        - Returns the IMG tag for the requested image *                  .attr(name)        - Returns a particular attribute of the IMG *                                       tag given it's name *                  .attr(name, value) - Sets a particular attribute of the IMG *                                       tag to the given value *                And one property: *                  .isSprite          - Whether the image is a sprite or not */function PMA_getImage(image, alternate, attributes) {    var in_array = function (needle, haystack) {        for (i in haystack) {            if (haystack[i] == needle) {                return true;            }        }        return false;    };    var sprites = [        <?php echo implode($keys, ",\n        ") . "\n"; ?>    ];    // custom image object, it will eventually be returned by this functions    var retval = {        data: {            // this is private            alt: '',            title: '',            src: 'themes/dot.gif'        },        isSprite: true,        attr: function (name, value) {            if (value == undefined) {                if (this.data[name] == undefined) {                    return '';                } else {                    return this.data[name];                }            } else {                this.data[name] = value;            }        },        toString: function () {            var retval = '<' + 'img';            for (var i in this.data) {                retval += ' ' + i + '="' + this.data[i] + '"';            }            retval += ' /' + '>';            return retval;        }    };    // initialise missing parameters    if (attributes == undefined) {        attributes = {};    }    if (alternate == undefined) {        alternate = '';    }    // set alt    if (attributes.alt != undefined) {        retval.attr('alt', attributes.alt);    } else {        retval.attr('alt', alternate);    }    // set title    if (attributes.title != undefined) {        retval.attr('title', attributes.title);    } else {        retval.attr('title', alternate);    }    // set src    var klass = image.replace('.gif', '').replace('.png', '');    if (in_array(klass, sprites)) {        // it's an icon from a sprite        retval.attr('class', 'icon ic_' + klass);    } else {        // it's an image file        retval.isSprite = false;        retval.attr('src', "<?php echo $_SESSION['PMA_Theme']->getImgPath(); ?>" + image);    }    // set all other attrubutes    for (var i in attributes) {        if (i == 'src') {            // do not allow to override the 'src' attribute            continue;        } else if (i == 'class') {            retval.attr(i, retval.attr('class') + ' ' + attributes[i]);        } else {            retval.attr(i, attributes[i]);        }    }    return retval;};
<?php/** * @package Swekey */?><script>	var g_SwekeyPlugin = null;	// -------------------------------------------------------------------	// Create the swekey plugin if it does not exists	function Swekey_Plugin()	{		try		{			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			if (window.ActiveXObject)			{    			g_SwekeyPlugin = document.getElementById("swekey_activex");    			if (g_SwekeyPlugin == null)    			{                    // we must create the activex that way instead of new ActiveXObject("FbAuthAx.FbAuthCtl");                    // ortherwise SetClientSite is not called and we can not get the url  			  		var div = document.createElement('div');	   				div.innerHTML='<object id="swekey_activex" style="display:none" CLASSID="CLSID:8E02E3F9-57AA-4EE1-AA68-A42DD7B0FADE"></object>';    				// Never append to the body because it may still loading and it breaks IE	   				document.body.insertBefore(div, document.body.firstChild);    				g_SwekeyPlugin = document.getElementById("swekey_activex");                }				return g_SwekeyPlugin;			}			g_SwekeyPlugin = document.getElementById("swekey_plugin");			if (g_SwekeyPlugin != null)				return g_SwekeyPlugin;			for (i = 0; i < navigator.plugins.length; i ++)			{				try				{				    if (navigator.plugins[i] == null)				    {				        navigator.plugins.refresh();                    }                    else if (navigator.plugins[i][0] != null && navigator.plugins[i][0].type == "application/fbauth-plugin")					{						var x = document.createElement('embed');						x.setAttribute('type', 'application/fbauth-plugin');						x.setAttribute('id', 'swekey_plugin');						x.setAttribute('width', '0');						x.setAttribute('height', '0');						x.style.dislay='none';						//document.body.appendChild(x);						document.body.insertBefore(x, document.body.firstChild);						g_SwekeyPlugin = document.getElementById("swekey_plugin");						return g_SwekeyPlugin;					}				}				catch (e)				{				    navigator.plugins.refresh();					//alert ('Failed to create plugin: ' + e);				}			}		}		catch (e)		{			//alert("Swekey_Plugin " + e);			g_SwekeyPlugin = null;		}		return null;	}	// -------------------------------------------------------------------	// Returns true if the swekey plugin is installed	function Swekey_Installed()	{		return (Swekey_Plugin() != null);	}	// -------------------------------------------------------------------	// List the id of the Swekey connected to the PC	// Returns a string containing comma separated Swekey Ids    // A Swekey is a 32 char hexadecimal value.	function Swekey_ListKeyIds()	{		try		{			return Swekey_Plugin().list();		}		catch (e)		{//			alert("Swekey_ListKeyIds " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate an OTP	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetOtp(id, rt)	{		try		{			return Swekey_Plugin().getotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetOtp " + e);		}		return "";	}	// -------------------------------------------------------------------	// Ask the Connected Swekey to generate a OTP linked to the current https host	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	// or "" if the current url does not start with https	function Swekey_GetLinkedOtp(id, rt)	{		try		{			return Swekey_Plugin().getlinkedotp(id, rt);		}		catch (e)		{//			alert("Swekey_GetSOtp " + e);		}		return "";	}	// -------------------------------------------------------------------    // Calls Swekey_GetOtp or Swekey_GetLinkedOtp depending if we are in    // an https page or not.	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// rt: A random token	// return: The calculated OTP encoded in a 64 chars hexadecimal value.	function Swekey_GetSmartOtp(id, rt)	{        var res = Swekey_GetLinkedOtp(id, rt);        if (res == "")            res = Swekey_GetOtp(id, rt);		return res;	}	// -------------------------------------------------------------------	// Set a unplug handler (url) to the specified connected feebee	// id: The id of the connected Swekey (returne by Swekey_ListKeyIds())	// key: The key that index that url, (aplhanumeric values only)	// url: The url that will be launched ("" deletes the url)	function Swekey_SetUnplugUrl(id, key, url)	{		try		{			return Swekey_Plugin().setunplugurl(id, key, url);		}		catch (e)		{//			alert("Swekey_SetUnplugUrl " + e);		}	}</script>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Routines management. * * @package PhpMyAdmin *//** * Include required files */require_once './libraries/common.inc.php';require_once './libraries/common.lib.php';require_once './libraries/mysql_charsets.lib.php';if (PMA_DRIZZLE) {    include_once './libraries/data_drizzle.inc.php';} else {    include_once './libraries/data_mysql.inc.php';}/** * Include JavaScript libraries */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/timepicker.js';$GLOBALS['js_include'][] = 'rte/common.js';$GLOBALS['js_include'][] = 'rte/routines.js';$GLOBALS['js_include'][] = 'codemirror/lib/codemirror.js';$GLOBALS['js_include'][] = 'codemirror/mode/mysql/mysql.js';/** * Include all other files */require_once './libraries/rte/rte_routines.lib.php';/** * Do the magic */$_PMA_RTE = 'RTN';require_once './libraries/rte/rte_main.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * returns code for selecting databases * * @return String HTML code */function PMA_replication_db_multibox(){    $multi_values = '';    $multi_values .= '<select name="db_select[]" size="6" multiple="multiple" id="db_select">';    foreach ($GLOBALS['pma']->databases as $current_db) {        if (PMA_is_system_schema($current_db)) {            continue;        }        if (! empty($selectall) || (isset($tmp_select) && strpos(' ' . $tmp_select, '|' . $current_db . '|'))) {            $is_selected = ' selected="selected"';        } else {            $is_selected = '';        }        $current_db = htmlspecialchars($current_db);        $multi_values .= '                <option value="' . $current_db . '" ' . $is_selected . '>' . $current_db . '</option>';    } // end while    $multi_values .= '</select>';    $multi_values .= '<br /><a href="#" id="db_reset_href">' . __('Uncheck All') . '</a>';    return $multi_values;}/** * prints out code for changing master * * @param String $submitname - submit button name */function PMA_replication_gui_changemaster($submitname){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    echo '<form method="post" action="server_replication.php">';    echo PMA_generate_common_hidden_inputs('', '');    echo ' <fieldset id="fieldset_add_user_login">';    echo '  <legend>' . __('Slave configuration') . ' - ' . __('Change or reconfigure master server') . '</legend>';    echo __('Make sure, you have unique server-id in your configuration file (my.cnf). If not, please add the following line into [mysqld] section:') . '<br />';    echo '<pre>server-id=' . time() . '</pre>';    echo '  <div class="item">';    echo '    <label for="text_username">' . __('User name') . ':</label>';    echo '    <input type="text" name="username" id="text_username" maxlength="'. $username_length . '" title="' . __('User name') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_pma_pw">' . __('Password') .' :</label>';    echo '    <input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" />';    echo '  </div>';    echo '  <div class="item">';    echo '    <label for="text_hostname">' . __('Host') . ' :</label>';    echo '    <input type="text" id="text_hostname" name="hostname" maxlength="' . $hostname_length . '" value="" />';    echo '  </div>';    echo '  <div class="item">';    echo '     <label for="text_port">' . __('Port') . ':</label>';    echo '     <input type="text" id="text_port" name="port" maxlength="6" value="3306"  />';    echo '  </div>';    echo ' </fieldset>';    echo ' <fieldset id="fieldset_user_privtable_footer" class="tblFooters">';    echo '    <input type="hidden" name="sr_take_action" value="true" />';    echo '     <input type="submit" name="' . $submitname . '" id="confslave_submit" value="' . __('Go') . '" />';    echo ' </fieldset>';    echo '</form>';}/** * This function prints out table with replication status. * * @param string  $type   either master or slave * @param boolean $hidden if true, then default style is set to hidden, default value false * @param boolen  $title  if true, then title is displayed, default true */function PMA_replication_print_status_table($type, $hidden = false, $title = true){    global ${"{$type}_variables"};    global ${"{$type}_variables_alerts"};    global ${"{$type}_variables_oks"};    global ${"server_{$type}_replication"};    global ${"strReplicationStatus_{$type}"};    // TODO check the Masters server id?    // seems to default to '1' when queried via SHOW VARIABLES , but resulted in error on the master when slave connects    // [ERROR] Error reading packet from server: Misconfigured master - server id was not set ( server_errno=1236)    // [ERROR] Got fatal error 1236: 'Misconfigured master - server id was not set' from master when reading data from binary log    //    //$server_id = PMA_DBI_fetch_value("SHOW VARIABLES LIKE 'server_id'", 0, 1);    echo '<div id="replication_' . $type . '_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    if ($title) {        if ($type == 'master') {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Master status') . '</h4>';        } else {            echo '<h4><a name="replication_' . $type . '"></a>' . __('Slave status') . '</h4>';        }    } else {        echo '<br />';    }    echo '   <table id="server' . $type . 'replicationsummary" class="data"> ';    echo '   <thead>';    echo '    <tr>';    echo '     <th>' . __('Variable') . '</th>';    echo '        <th>' . __('Value') . '</th>';    echo '    </tr>';    echo '   </thead>';    echo '   <tbody>';    $odd_row = true;    foreach (${"{$type}_variables"} as $variable) {        echo '   <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '     <td class="name">';        echo        $variable;        echo '     </td>';        echo '     <td class="value">';        // TODO change to regexp or something, to allow for negative match        if (isset(${"{$type}_variables_alerts"}[$variable])            && ${"{$type}_variables_alerts"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="attention">';        } elseif (isset(${"{$type}_variables_oks"}[$variable])            && ${"{$type}_variables_oks"}[$variable] == ${"server_{$type}_replication"}[0][$variable]        ) {            echo '<span class="allfine">';        } else {            echo '<span>';        }        echo ${"server_{$type}_replication"}[0][$variable];        echo '</span>';        echo '  </td>';        echo ' </tr>';        $odd_row = ! $odd_row;    }    echo '   </tbody>';    echo ' </table>';    echo ' <br />';    echo '</div>';}/** * Prints table with slave users connected to this master * * @param boolean $hidden - if true, then default style is set to hidden, default value false */function PMA_replication_print_slaves_table($hidden = false){    // Fetch data    $data = PMA_DBI_fetch_result('SHOW SLAVE HOSTS', null, null);    echo '  <br />';    echo '  <div id="replication_slaves_section" style="' . ($hidden ? 'display: none;' : '') . '"> ';    echo '    <table class="data">';    echo '    <thead>';    echo '      <tr>';    echo '        <th>' . __('Server ID') . '</th>';    echo '        <th>' . __('Host') . '</th>';    echo '      </tr>';    echo '    </thead>';    echo '    <tbody>';    $odd_row = true;    foreach ($data as $slave) {        echo '    <tr class="' . ($odd_row ? 'odd' : 'even') . '">';        echo '      <td class="value">' . $slave['Server_id'] . '</td>';        echo '      <td class="value">' . $slave['Host'] . '</td>';        echo '    </tr>';        $odd_row = ! $odd_row;    }    echo '    </tbody>';    echo '    </table>';    echo '    <br />';    PMA_Message::notice(__('Only slaves started with the --report-host=host_name option are visible in this list.'))->display();    echo '    <br />';    echo '  </div>';}/** * get the correct username and hostname lengths for this MySQL server * * @return  array   username length, hostname length */function PMA_replication_get_username_hostname_length(){    $fields_info = PMA_DBI_get_columns('mysql', 'user');    $username_length = 16;    $hostname_length = 41;    foreach ($fields_info as $val) {        if ($val['Field'] == 'User') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $username_length = $v;            }        } elseif ($val['Field'] == 'Host') {            strtok($val['Type'], '()');            $v = strtok('()');            if (is_int($v)) {                $hostname_length = $v;            }        }    }    return array($username_length, $hostname_length);}/** * Print code to add a replication slave user to the master */function PMA_replication_gui_master_addslaveuser(){    list($username_length, $hostname_length) = PMA_replication_get_username_hostname_length();    if (isset($GLOBALS['username']) && strlen($GLOBALS['username']) === 0) {        $GLOBALS['pred_username'] = 'any';    }    echo '<div id="master_addslaveuser_gui">';    echo '<form autocomplete="off" method="post" action="server_privileges.php" onsubmit="return checkAddUser(this);">';    echo PMA_generate_common_hidden_inputs('', '');    echo '<fieldset id="fieldset_add_user_login">'        . '<legend>'.__('Add slave replication user').'</legend>'    . '<input type="hidden" name="grant_count" value="25" />'    . '<input type="hidden" name="createdb" id="createdb_0" value="0" />'        . '<input id="checkbox_Repl_slave_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_slave_priv"/>'        . '<input id="checkbox_Repl_client_priv" type="hidden" title="Needed for the replication slaves." value="Y" name="Repl_client_priv"/>'    . ''        . '<input type="hidden" name="sr_take_action" value="true" />'        . '<div class="item">'        . '<label for="select_pred_username">'        . '    ' . __('User name') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_username" id="select_pred_username" title="' . __('User name') . '"'        . '        onchange="if (this.value == \'any\') { username.value = \'\'; } else if (this.value == \'userdefined\') { username.focus(); username.select(); }">'        . '        <option value="any"' . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any') ? ' selected="selected"' : '') . '>' . __('Any user') . '</option>'        . '        <option value="userdefined"' . ((! isset($GLOBALS['pred_username']) || $GLOBALS['pred_username'] == 'userdefined') ? ' selected="selected"' : '') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="username" maxlength="'        . $username_length . '" title="' . __('User name') . '"'        . (empty($GLOBALS['username'])        ? ''        : ' value="' . (isset($GLOBALS['new_username'])        ? $GLOBALS['new_username']        : $GLOBALS['username']) . '"')        . ' onchange="pred_username.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="select_pred_hostname">'        . '    ' . __('Host') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_hostname" id="select_pred_hostname" title="' . __('Host') . '"';    $_current_user = PMA_DBI_fetch_value('SELECT USER();');    if (! empty($_current_user)) {        $thishost = str_replace("'", '', substr($_current_user, (strrpos($_current_user, '@') + 1)));        if ($thishost == 'localhost' || $thishost == '127.0.0.1') {            unset($thishost);        }    }    echo '    onchange="if (this.value == \'any\') { hostname.value = \'%\'; } else if (this.value == \'localhost\') { hostname.value = \'localhost\'; } '        . (empty($thishost) ? '' : 'else if (this.value == \'thishost\') { hostname.value = \'' . addslashes(htmlspecialchars($thishost)) . '\'; } ')        . 'else if (this.value == \'hosttable\') { hostname.value = \'\'; } else if (this.value == \'userdefined\') { hostname.focus(); hostname.select(); }">' . "\n";    unset($_current_user);    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {        switch (strtolower($GLOBALS['hostname'])) {        case 'localhost':        case '127.0.0.1':            $GLOBALS['pred_hostname'] = 'localhost';            break;        case '%':            $GLOBALS['pred_hostname'] = 'any';            break;        default:            $GLOBALS['pred_hostname'] = 'userdefined';            break;        }    }    echo '        <option value="any"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'any')        ? ' selected="selected"' : '') . '>' . __('Any host')        . '</option>'        . '        <option value="localhost"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'localhost')        ? ' selected="selected"' : '') . '>' . __('Local')        . '</option>';    if (!empty($thishost)) {        echo '        <option value="thishost"'            . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'thishost')            ? ' selected="selected"' : '') . '>' . __('This Host')            . '</option>';    }    unset($thishost);    echo '        <option value="hosttable"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'hosttable')        ? ' selected="selected"' : '') . '>' . __('Use Host Table')        . '</option>'        . '        <option value="userdefined"'        . ((isset($GLOBALS['pred_hostname']) && $GLOBALS['pred_hostname'] == 'userdefined')        ? ' selected="selected"' : '')        . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="text" name="hostname" maxlength="'        . $hostname_length . '" value="'        . (isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '')        . '" title="' . __('Host')        . '" onchange="pred_hostname.value = \'userdefined\';" />'        . PMA_showHint(__('When Host table is used, this field is ignored and values stored in Host table are used instead.'))        . '</div>'        . '<div class="item">'        . '<label for="select_pred_password">'        . '    ' . __('Password') . ':'        . '</label>'        . '<span class="options">'        . '    <select name="pred_password" id="select_pred_password" title="'        . __('Password') . '"'        . '            onchange="if (this.value == \'none\') { pma_pw.value = \'\'; pma_pw2.value = \'\'; } else if (this.value == \'userdefined\') { pma_pw.focus(); pma_pw.select(); }">'        . '        <option value="none"';    if (isset($GLOBALS['username']) && $mode != 'change') {        echo '  selected="selected"';    }    echo '>' . __('No Password') . '</option>'        . '        <option value="userdefined"' . (isset($GLOBALS['username']) ? '' : ' selected="selected"') . '>' . __('Use text field') . ':</option>'        . '    </select>'        . '</span>'        . '<input type="password" id="text_pma_pw" name="pma_pw" title="' . __('Password') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="text_pma_pw2">'        . '    ' . __('Re-type') . ':'        . '</label>'        . '<span class="options">&nbsp;</span>'        . '<input type="password" name="pma_pw2" id="text_pma_pw2" title="' . __('Re-type') . '" onchange="pred_password.value = \'userdefined\';" />'        . '</div>'        . '<div class="item">'        . '<label for="button_generate_password">'        . '    ' . __('Generate Password') . ':'        . '</label>'        . '<span class="options">'        . '    <input type="button" id="button_generate_password" value="' . __('Generate') . '" onclick="suggestPassword(this.form)" />'        . '</span>'        . '<input type="text" name="generated_pw" id="generated_pw" />'        . '</div>'        . '</fieldset>';    echo '<fieldset id="fieldset_user_privtable_footer" class="tblFooters">'        . '    <input type="submit" name="adduser_submit" id="adduser_submit" value="' . __('Go') . '" />'        . '</fieldset>';    echo '</form>';    echo '</div>';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/common.inc.php';// Cross-framing protectionif ( false === $GLOBALS['cfg']['AllowThirdPartyFraming']) {    echo PMA_includeJS('cross_framing_protection.js');}// generate title (unless we already have $page_title, from cookie auth)if (! isset($page_title)) {    if ($GLOBALS['server'] > 0) {        $title = PMA_expandUserString(            ! empty($GLOBALS['table']) ? $GLOBALS['cfg']['TitleTable'] :            (! empty($GLOBALS['db']) ? $GLOBALS['cfg']['TitleDatabase'] :            (! empty($GLOBALS['cfg']['Server']['host']) ? $GLOBALS['cfg']['TitleServer'] :            $GLOBALS['cfg']['TitleDefault']))        );    }} else {    $title = $page_title;}// here, the function does not exist with this configuration: $cfg['ServerDefault'] = 0;$is_superuser    = function_exists('PMA_isSuperuser') && PMA_isSuperuser();$GLOBALS['js_include'][] = 'functions.js';$GLOBALS['js_include'][] = 'jquery/jquery.qtip-1.0.0-rc3.js';$params = array('lang' => $GLOBALS['lang']);if (isset($GLOBALS['db'])) {    $params['db'] = $GLOBALS['db'];}$GLOBALS['js_include'][] = 'messages.php' . PMA_generate_common_url($params);// Append the theme id to this url to invalidate the cache on a theme change$GLOBALS['js_include'][] = 'get_image.js.php?theme=' . urlencode($_SESSION['PMA_Theme']->getId());/** * Here we add a timestamp when loading the file, so that users who * upgrade phpMyAdmin are not stuck with older .js files in their * browser cache. This produces an HTTP 304 request for each file. */// avoid loading twice a js file$GLOBALS['js_include'] = array_unique($GLOBALS['js_include']);foreach ($GLOBALS['js_include'] as $js_script_file) {    echo PMA_includeJS($js_script_file);}// Below javascript Updates the title of the frameset if possible?><script type="text/javascript">// <![CDATA[if (typeof(parent.document) != 'undefined' && typeof(parent.document) != 'unknown'    && typeof(parent.document.title) == 'string') {    parent.document.title = '<?php echo (isset($title) ? PMA_sanitize(PMA_escapeJsString(htmlspecialchars($title))) : ''); ?>';}<?phpif (count($GLOBALS['js_script']) > 0) {    echo implode("\n", $GLOBALS['js_script'])."\n";}foreach ($GLOBALS['js_events'] as $js_event) {    echo "$(window.parent).bind('" . $js_event['event'] . "', "        . $js_event['function'] . ");\n";}?>// ]]></script><?php// Reloads the navigation frame via JavaScript if requiredPMA_reloadNavigation();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_merge extends PMA_StorageEngine{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Generic plugin interface. * * @package PhpMyAdmin *//** * array PMA_getPlugins(string $plugins_dir, mixed $plugin_param) * * Reads all plugin information from directory $plugins_dir. * * @param string  $plugins_dir    directrory with plugins * @param mixed   $plugin_param   parameter to plugin by which they can decide whether they can work * @return  array                   list of plugins */function PMA_getPlugins($plugins_dir, $plugin_param){    /* Scan for plugins */    $plugin_list = array();    if ($handle = @opendir($plugins_dir)) {        while ($file = @readdir($handle)) {            // In some situations, Mac OS creates a new file for each file            // (for example ._csv.php) so the following regexp            // matches a file which does not start with a dot but ends            // with ".php"            if (is_file($plugins_dir . $file) && preg_match('@^[^\.](.)*\.php$@i', $file)) {                include $plugins_dir . $file;            }        }    }    ksort($plugin_list);    return $plugin_list;}/** * string PMA_getString(string $name) * * returns locale string for $name or $name if no locale is found * * @param string  $name   for local string * @return  string          locale string for $name */function PMA_getString($name){    return isset($GLOBALS[$name]) ? $GLOBALS[$name] : $name;}/** * string PMA_pluginCheckboxCheck(string $section, string $opt) * * returns html input tag option 'checked' if plugin $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              hmtl input tag option 'checked' */function PMA_pluginCheckboxCheck($section, $opt){    // If the form is being repopulated using $_GET data, that is priority    if (isset($_GET[$opt]) || ! isset($_GET['repopulate']) && ((isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) ||        (isset($GLOBALS['cfg'][$section][$opt]) && $GLOBALS['cfg'][$section][$opt]))) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetDefault(string $section, string $opt) * * returns default value for option $opt * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @return  string              default value for option $opt */function PMA_pluginGetDefault($section, $opt){    if (isset($_GET[$opt])) { // If the form is being repopulated using $_GET data, that is priority        return htmlspecialchars($_GET[$opt]);    } elseif (isset($GLOBALS['timeout_passed']) && $GLOBALS['timeout_passed'] && isset($_REQUEST[$opt])) {        return htmlspecialchars($_REQUEST[$opt]);    } elseif (isset($GLOBALS['cfg'][$section][$opt])) {        $matches = array();        /* Possibly replace localised texts */        if (preg_match_all('/(str[A-Z][A-Za-z0-9]*)/', $GLOBALS['cfg'][$section][$opt], $matches)) {            $val = $GLOBALS['cfg'][$section][$opt];            foreach ($matches[0] as $match) {                if (isset($GLOBALS[$match])) {                    $val = str_replace($match, $GLOBALS[$match], $val);                }            }            return htmlspecialchars($val);        } else {            return htmlspecialchars($GLOBALS['cfg'][$section][$opt]);        }    }    return '';}/** * string PMA_pluginIsActive(string $section, string $opt, string $val) * * returns html input tag option 'checked' if option $opt should be set by config or request * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $opt        name of option * @param string  $val        value of option to check against * @return  string              html input tag option 'checked' */function PMA_pluginIsActive($section, $opt, $val){    if (! empty($GLOBALS['timeout_passed']) && isset($_REQUEST[$opt])) {        if ($_REQUEST[$opt] == $val) {            return ' checked="checked"';        }    } elseif (isset($GLOBALS['cfg'][$section][$opt]) &&  $GLOBALS['cfg'][$section][$opt] == $val) {        return ' checked="checked"';    }    return '';}/** * string PMA_pluginGetChoice(string $section, string $name, array &$list, string $cfgname) * * returns html select form element for plugin choice * and hidden fields denoting whether each plugin must be exported as a file * * @param string  $section    name of config section in *                              $GLOBALS['cfg'][$section] for plugin * @param string  $name       name of select element * @param array   &$list      array with plugin configuration defined in plugin file * @param string  $cfgname    name of config value, if none same as $name * @return  string              html select tag */function PMA_pluginGetChoice($section, $name, &$list, $cfgname = null){    if (! isset($cfgname)) {        $cfgname = $name;    }    $ret = '<select id="plugins" name="' . $name . '">';    $default = PMA_pluginGetDefault($section, $cfgname);    foreach ($list as $plugin_name => $val) {        $ret .= '<option';         // If the form is being repopulated using $_GET data, that is priority        if (isset($_GET[$name]) && $plugin_name == $_GET[$name] || ! isset($_GET[$name]) && $plugin_name == $default) {            $ret .= ' selected="selected"';        }         $ret .= ' value="' . $plugin_name . '">' . PMA_getString($val['text']) . '</option>' . "\n";    }    $ret .= '</select>' . "\n";    // Whether each plugin has to be saved as a file    foreach ($list as $plugin_name => $val) {        $ret .= '<input type="hidden" id="force_file_' . $plugin_name . '" value="';        if (isset($val['force_file'])) {            $ret .= 'true';        } else {            $ret .= 'false';        }        $ret .= '" />'. "\n";    }    return $ret;}/** * string PMA_pluginGetOneOption(string $section, string $plugin_name, string $id, array &$opt) * * returns single option in a list element * * @param string  $section        name of config section in *                                  $GLOBALS['cfg'][$section] for plugin * @param string  $plugin_name    unique plugin name * @param string  $id             option id * @param array   &$opt           plugin option details * @return  string                  table row with option */function PMA_pluginGetOneOption($section, $plugin_name, $id, &$opt){    $ret = "\n";    if ($opt['type'] == 'bool') {        $ret .= '<li>' . "\n";        $ret .= '<input type="checkbox" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="something" id="checkbox_' . $plugin_name . '_' . $opt['name'] . '"'            . ' ' . PMA_pluginCheckboxCheck($section, $plugin_name . '_' . $opt['name']);        if (isset($opt['force'])) {            /* Same code is also few lines lower, update both if needed */            $ret .= ' onclick="if (!this.checked &amp;&amp; '                . '(!document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\') '                . '|| !document.getElementById(\'checkbox_' . $plugin_name . '_' .$opt['force'] . '\').checked)) '                . 'return false; else return true;"';        }        $ret .= ' />';        $ret .= '<label for="checkbox_' . $plugin_name . '_' . $opt['name'] . '">'            . PMA_getString($opt['text']) . '</label>';    } elseif ($opt['type'] == 'text') {        $ret .= '<li>' . "\n";        $ret .= '<label for="text_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<input type="text" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"'            . ' id="text_' . $plugin_name . '_' . $opt['name'] . '"'            . (isset($opt['size']) ? ' size="' . $opt['size'] . '"' : '')            . (isset($opt['len']) ? ' maxlength="' . $opt['len'] . '"' : '') . ' />';    } elseif ($opt['type'] == 'message_only') {        $ret .= '<li>' . "\n";        $ret .= '<p>' . PMA_getString($opt['text']) . '</p>';    } elseif ($opt['type'] == 'select') {        $ret .= '<li>' . "\n";        $ret .= '<label for="select_' . $plugin_name . '_' . $opt['name'] . '" class="desc">'            . PMA_getString($opt['text']) . '</label>';        $ret .= '<select name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' id="select_' . $plugin_name . '_' . $opt['name'] . '">';        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<option value="' . $key . '"';            if ($key == $default) {                $ret .= ' selected="selected"';            }            $ret .= '>' . PMA_getString($val) . '</option>';        }        $ret .= '</select>';    } elseif ($opt['type'] == 'radio') {        $default = PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']);        foreach ($opt['values'] as $key => $val) {            $ret .= '<li><input type="radio" name="' . $plugin_name . '_' . $opt['name'] . '" value="' . $key            . '" id="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '"';            if ($key == $default) {                $ret .= 'checked="checked"';            }            $ret .= ' />' . '<label for="radio_' . $plugin_name . '_' . $opt['name'] . '_' . $key . '">'            . PMA_getString($val) . '</label></li>';        }    } elseif ($opt['type'] == 'hidden') {        $ret .= '<li><input type="hidden" name="' . $plugin_name . '_' . $opt['name'] . '"'            . ' value="' . PMA_pluginGetDefault($section, $plugin_name . '_' . $opt['name']) . '"' . ' /></li>';    } elseif ($opt['type'] == 'begin_group') {        $ret .= '<div class="export_sub_options" id="' . $plugin_name . '_' . $opt['name'] . '">';        if (isset($opt['text'])) {            $ret .= '<h4>' . PMA_getString($opt['text']) . '</h4>';        }        $ret .= '<ul>';    } elseif ($opt['type'] == 'end_group') {        $ret .= '</ul></div>';    } elseif ($opt['type'] == 'begin_subgroup') {        /* each subgroup can have a header, which may also be a form element */        $ret .=  PMA_pluginGetOneOption($section, $plugin_name, $id, $opt['subgroup_header']) . '<li class="subgroup"><ul';        if (isset($opt['subgroup_header']['name'])) {            $ret .= ' id="ul_' . $opt['subgroup_header']['name'] . '">';        } else {            $ret .= '>';        }    } elseif ($opt['type'] == 'end_subgroup') {        $ret .= '</ul></li>';    } else {        /* This should be seen only by plugin writers, so I do not thing this         * needs translation. */        $ret .= 'UNKNOWN OPTION ' . $opt['type'] . ' IN IMPORT PLUGIN ' . $plugin_name . '!';    }    if (isset($opt['doc'])) {        if (count($opt['doc']) == 3) {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1], false, $opt['doc'][2]);        } elseif (count($opt['doc']) == 1) {            $ret .= PMA_showDocu($opt['doc'][0]);        } else {            $ret .= PMA_showMySQLDocu($opt['doc'][0], $opt['doc'][1]);        }    }    // Close the list element after $opt['doc'] link is displayed    if ($opt['type'] == 'bool' || $opt['type'] == 'text' || $opt['type'] == 'message_only' || $opt['type'] == 'select') {        $ret .= '</li>';    }    $ret .= "\n";    return $ret;}/** * string PMA_pluginGetOptions(string $section, array &$list) * * return html div with editable options for plugin * * @param string  $section    name of config section in $GLOBALS['cfg'][$section] * @param array   &$list      array with plugin configuration defined in plugin file * @return  string              html fieldset with plugin options */function PMA_pluginGetOptions($section, &$list){    $ret = '';    $default = PMA_pluginGetDefault('Export', 'format');    // Options for plugins that support them    foreach ($list as $plugin_name => $val) {        $ret .= '<div id="' . $plugin_name . '_options" class="format_specific_options">';        $count = 0;            $ret .= '<h3>' . PMA_getString($val['text']) . '</h3>';        if (isset($val['options']) && count($val['options']) > 0) {            foreach ($val['options'] as $id => $opt) {                if ($opt['type'] != 'hidden' && $opt['type'] != 'begin_group' && $opt['type'] != 'end_group' && $opt['type'] != 'begin_subgroup' && $opt['type'] != 'end_subgroup') {                    $count++;                }                $ret .= PMA_pluginGetOneOption($section, $plugin_name, $id, $opt);            }        }        if ($count == 0) {            $ret .= '<p>' . __('This format has no options') . '</p>';        }        $ret .= '</div>';    }    return $ret;}
