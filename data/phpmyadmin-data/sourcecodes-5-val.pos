<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin-Designer *//** * */require_once './libraries/pmd_common.php';$cfgRelation = PMA_getRelationsParam();if (! $cfgRelation['designerwork']) {    PMD_err_sav();}foreach ($t_x as $key => $value) {    $KEY = empty($IS_AJAX) ? urldecode($key) : $key; // table name decode (post PDF exp/imp)    list($DB,$TAB) = explode(".", $KEY);    PMA_query_as_controluser('DELETE FROM ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                      WHERE `db_name` = \'' . PMA_sqlAddSlashes($DB) . '\'                        AND `table_name` = \'' . PMA_sqlAddSlashes($TAB) . '\'', true, PMA_DBI_QUERY_STORE);    PMA_query_as_controluser('INSERT INTO ' . PMA_backquote($GLOBALS['cfgRelation']['db']) . '.' . PMA_backquote($GLOBALS['cfgRelation']['designer_coords']) . '                         (db_name, table_name, x, y, v, h)                  VALUES ('                  . '\'' . PMA_sqlAddSlashes($DB) . '\', '                  . '\'' . PMA_sqlAddSlashes($TAB) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_x[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_y[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_v[$key]) . '\', '                  . '\'' . PMA_sqlAddSlashes($t_h[$key]) . '\''                  . ')', true, PMA_DBI_QUERY_STORE);}//----------------------------------------------------------------------------function PMD_err_sav(){    global $die_save_pos; // if this file included    if (! empty($die_save_pos)) {        header("Content-Type: text/xml; charset=utf-8");        header("Cache-Control: no-cache");        die('<root act="save_pos" return="' . __('Error saving coordinates for Designer.') . '"></root>');    }}if (! empty($die_save_pos)) {  header("Content-Type: text/xml; charset=utf-8");  header("Cache-Control: no-cache");?><root act='save_pos' return='<?php echo __('Modifications have been saved'); ?>'></root><?php}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * CSV import plugin for phpMyAdmin using LOAD DATA * * @package PhpMyAdmin-Import * @subpackage LDI */if (! defined('PHPMYADMIN')) {    exit;}/** * */if ($plugin_param !== 'table') {    return;}if (isset($plugin_list)) {    if ($GLOBALS['cfg']['Import']['ldi_local_option'] == 'auto') {        $GLOBALS['cfg']['Import']['ldi_local_option'] = false;        $result = PMA_DBI_try_query('SHOW VARIABLES LIKE \'local\\_infile\';');        if ($result != false && PMA_DBI_num_rows($result) > 0) {            $tmp = PMA_DBI_fetch_row($result);            if ($tmp[1] == 'ON') {                $GLOBALS['cfg']['Import']['ldi_local_option'] = true;            }        }        PMA_DBI_free_result($result);        unset($result);    }    $plugin_list['ldi'] = array(        'text' => __('CSV using LOAD DATA'),        'extension' => 'ldi', // This is nonsense, however we want to default to our parser for csv        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'bool', 'name' => 'replace', 'text' => __('Replace table data with file')),            array('type' => 'bool', 'name' => 'ignore', 'text' => __('Do not abort on INSERT error')),            array('type' => 'text', 'name' => 'terminated', 'text' => __('Columns terminated by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'enclosed', 'text' => __('Columns enclosed by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'escaped', 'text' => __('Columns escaped by'), 'size' => 2, 'len' => 2),            array('type' => 'text', 'name' => 'new_line', 'text' => __('Lines terminated by'), 'size' => 2),            array('type' => 'text', 'name' => 'columns', 'text' => __('Column names')),            array('type' => 'bool', 'name' => 'local_option', 'text' => __('Use LOCAL keyword')),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );    /* We do not define function when plugin is just queried for information above */    return;}if ($import_file == 'none' || $compression != 'none' || $charset_conversion) {    // We handle only some kind of data!    $message = PMA_Message::error(__('This plugin does not support compressed imports!'));    $error = true;    return;}$sql = 'LOAD DATA';if (isset($ldi_local_option)) {    $sql .= ' LOCAL';}$sql .= ' INFILE \'' . PMA_sqlAddSlashes($import_file) . '\'';if (isset($ldi_replace)) {    $sql .= ' REPLACE';} elseif (isset($ldi_ignore)) {    $sql .= ' IGNORE';}$sql .= ' INTO TABLE ' . PMA_backquote($table);if (strlen($ldi_terminated) > 0) {    $sql .= ' FIELDS TERMINATED BY \'' . $ldi_terminated . '\'';}if (strlen($ldi_enclosed) > 0) {    $sql .= ' ENCLOSED BY \'' . PMA_sqlAddSlashes($ldi_enclosed) . '\'';}if (strlen($ldi_escaped) > 0) {    $sql .= ' ESCAPED BY \'' . PMA_sqlAddSlashes($ldi_escaped) . '\'';}if (strlen($ldi_new_line) > 0) {    if ($ldi_new_line == 'auto') {        $ldi_new_line = PMA_whichCrlf() == "\n" ? '\n' : '\r\n';    }    $sql .= ' LINES TERMINATED BY \'' . $ldi_new_line . '\'';}if ($skip_queries > 0) {    $sql .= ' IGNORE ' . $skip_queries . ' LINES';    $skip_queries = 0;}if (strlen($ldi_columns) > 0) {    $sql .= ' (';    $tmp   = preg_split('/,( ?)/', $ldi_columns);    $cnt_tmp = count($tmp);    for ($i = 0; $i < $cnt_tmp; $i++) {        if ($i > 0) {            $sql .= ', ';        }        /* Trim also `, if user already included backquoted fields */        $sql     .= PMA_backquote(trim($tmp[$i], " \t\r\n\0\x0B`"));    } // end for    $sql .= ')';}PMA_importRunQuery($sql, $sql);PMA_importRunQuery();$finished = true;?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Library for extracting information about system memory and cpu. Currently supports all * Windows and Linux plattforms * * This code is based on the OS Classes from the phpsysinfo project (http://phpsysinfo.sourceforge.net/) * * @package PhpMyAdmin *//** * @return array */function getSysInfo(){    $supported = array('Linux', 'WINNT');    $sysinfo = array();    if (in_array(PHP_OS, $supported)) {        return eval("return new ".PHP_OS."();");    }    return $sysinfo;}class WINNT{    private $_wmi;    public $os = 'WINNT';    public function __construct() {        // initialize the wmi object        $objLocator = new COM('WbemScripting.SWbemLocator');        $this->_wmi = $objLocator->ConnectServer();    }    function loadavg() {        $loadavg = "";        $sum = 0;        $buffer = $this->_getWMI('Win32_Processor', array('LoadPercentage'));        foreach ($buffer as $load) {            $value = $load['LoadPercentage'];            $loadavg .= $value.' ';            $sum += $value;        }        return array('loadavg' => $sum / count($buffer));    }    private function _getWMI($strClass, $strValue = array()) {        $arrData = array();        $value = "";        $objWEBM = $this->_wmi->Get($strClass);        $arrProp = $objWEBM->Properties_;        $arrWEBMCol = $objWEBM->Instances_();        foreach ($arrWEBMCol as $objItem) {            if (is_array($arrProp)) {                reset($arrProp);            }            $arrInstance = array();            foreach ($arrProp as $propItem) {                if ( empty($strValue)) {                    eval("\$value = \$objItem->".$propItem->Name.";");                    $arrInstance[$propItem->Name] = trim($value);                } else {                    if (in_array($propItem->Name, $strValue)) {                        eval("\$value = \$objItem->".$propItem->Name.";");                        $arrInstance[$propItem->Name] = trim($value);                    }                }            }            $arrData[] = $arrInstance;        }        return $arrData;    }    function memory() {        $buffer = $this->_getWMI("Win32_OperatingSystem", array('TotalVisibleMemorySize', 'FreePhysicalMemory'));        $mem = Array();        $mem['MemTotal'] = $buffer[0]['TotalVisibleMemorySize'];        $mem['MemFree'] = $buffer[0]['FreePhysicalMemory'];        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'];        $buffer = $this->_getWMI('Win32_PageFileUsage');        $mem['SwapTotal'] = 0;        $mem['SwapUsed'] = 0;        $mem['SwapPeak'] = 0;        foreach ($buffer as $swapdevice) {            $mem['SwapTotal'] += $swapdevice['AllocatedBaseSize'] * 1024;            $mem['SwapUsed'] += $swapdevice['CurrentUsage'] * 1024;            $mem['SwapPeak'] += $swapdevice['PeakUsage'] * 1024;        }        return $mem;    }}class Linux{    public $os = 'Linux';    function loadavg() {        $buf = file_get_contents('/proc/stat');        $nums=preg_split("/\s+/", substr($buf, 0, strpos($buf, "\n")));        return Array('busy' => $nums[1]+$nums[2]+$nums[3], 'idle' => intval($nums[4]));    }    function memory() {        preg_match_all('/^(MemTotal|MemFree|Cached|Buffers|SwapCached|SwapTotal|SwapFree):\s+(.*)\s*kB/im', file_get_contents('/proc/meminfo'), $matches);        $mem = array_combine( $matches[1], $matches[2] );        $mem['MemUsed'] = $mem['MemTotal'] - $mem['MemFree'] - $mem['Cached'] - $mem['Buffers'];        $mem['SwapUsed'] = $mem['SwapTotal'] - $mem['SwapFree'] - $mem['SwapCached'];        foreach ($mem as $idx=>$value)            $mem[$idx] = intval($value);        return $mem;    }}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used with the bookmark feature * * @package PhpMyAdmin *//** * Defines the bookmark parameters for the current user * * @return  array    the bookmark parameters for the current user * @access  public */function PMA_Bookmark_getParams(){    static $cfgBookmark = null;    if (null !== $cfgBookmark) {        return $cfgBookmark;    }    $cfgRelation = PMA_getRelationsParam();    if ($cfgRelation['bookmarkwork']) {        $cfgBookmark = array(            'user'  => $GLOBALS['cfg']['Server']['user'],            'db'    => $GLOBALS['cfg']['Server']['pmadb'],            'table' => $GLOBALS['cfg']['Server']['bookmarktable'],        );    } else {        $cfgBookmark = false;    }    return $cfgBookmark;} // end of the 'PMA_Bookmark_getParams()' function/** * Gets the list of bookmarks defined for the current database * * @global  resource  the controluser db connection handle * * @param string    the current database name * * @return  array     the bookmarks list (key as index, label as value) * * @access  public */function PMA_Bookmark_getList($db){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return array();    }    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . ' ORDER BY label';    $per_user = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    $query  = 'SELECT label, id FROM '. PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\''            . ' AND user = \'\''            . ' ORDER BY label';    $global = PMA_DBI_fetch_result($query, 'id', 'label', $controllink, PMA_DBI_QUERY_STORE);    foreach ($global as $key => $val) {        $global[$key] = $val . ' (' . __('shared') . ')';    }    $ret = $global + $per_user;    asort($ret);    return $ret;} // end of the 'PMA_Bookmark_getList()' function/** * Gets the sql command from a bookmark * * @global  resource  the controluser db connection handle * * @param string    the current database name * @param mixed     the id of the bookmark to get * @param string    which field to look up the $id * @param boolean  true: get all bookmarks regardless of the owning user * @param boolean   whether to ignore bookmarks with no user * * @return  string    the sql query * * @access  public */function PMA_Bookmark_get($db, $id, $id_field = 'id', $action_bookmark_all = false, $exact_user_match = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return '';    }    $query = 'SELECT query FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])        . ' WHERE dbase = \'' . PMA_sqlAddSlashes($db) . '\'';    if (!$action_bookmark_all) {        $query .= ' AND (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\'';        if (!$exact_user_match) {            $query .= ' OR user = \'\'';        }        $query .= ')';    }    $query .= ' AND ' . PMA_backquote($id_field) . ' = ' . $id;    return PMA_DBI_fetch_value($query, 0, 0, $controllink);} // end of the 'PMA_Bookmark_get()' function/** * Adds a bookmark * * @global  resource  the controluser db connection handle * * @param array     the properties of the bookmark to add; here, *                    $fields['query'] is urlencoded * @param boolean   whether to make the bookmark available for all users * * @return  boolean   whether the INSERT succeeds or not * * @access  public */function PMA_Bookmark_save($fields, $all_users = false){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query = 'INSERT INTO ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])           . ' (id, dbase, user, query, label) VALUES (NULL, \'' . PMA_sqlAddSlashes($fields['dbase']) . '\', \'' . ($all_users ? '' : PMA_sqlAddSlashes($fields['user'])) . '\', \'' . PMA_sqlAddSlashes(urldecode($fields['query'])) . '\', \'' . PMA_sqlAddSlashes($fields['label']) . '\')';    return PMA_DBI_query($query, $controllink);} // end of the 'PMA_Bookmark_save()' function/** * Deletes a bookmark * * @global  resource  the controluser db connection handle * * @param string   the current database name * @param integer  the id of the bookmark to get * * @access  public */function PMA_Bookmark_delete($db, $id){    global $controllink;    $cfgBookmark = PMA_Bookmark_getParams();    if (empty($cfgBookmark)) {        return false;    }    $query  = 'DELETE FROM ' . PMA_backquote($cfgBookmark['db']) . '.' . PMA_backquote($cfgBookmark['table'])            . ' WHERE (user = \'' . PMA_sqlAddSlashes($cfgBookmark['user']) . '\''            . '        OR user = \'\')'            . ' AND id = ' . $id;    return PMA_DBI_try_query($query, $controllink);} // end of the 'PMA_Bookmark_delete()' function/** * Bookmark Support */$GLOBALS['cfg']['Bookmark'] = PMA_Bookmark_getParams();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Alter one or more table columns * * linked from table_structure, uses libraries/tbl_properties.inc.php to display * form and handles this form data * * @package PhpMyAdmin *//** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/header.inc.php';// Check parametersPMA_checkParameters(array('db', 'table'));/** * Gets tables informations */require_once './libraries/tbl_common.php';require_once './libraries/tbl_info.inc.php';$active_page = 'tbl_structure.php';/** * Defines the url to return to in case of error in a sql statement */$err_url = 'tbl_structure.php?' . PMA_generate_common_url($db, $table);/** * Modifications have been submitted -> updates the table */$abort = false;if (isset($_REQUEST['do_save_data'])) {    $field_cnt = count($_REQUEST['field_orig']);    $key_fields = array();    $changes = array();    for ($i = 0; $i < $field_cnt; $i++) {        $changes[] = 'CHANGE ' . PMA_Table::generateAlter(            $_REQUEST['field_orig'][$i],            $_REQUEST['field_name'][$i],            $_REQUEST['field_type'][$i],            $_REQUEST['field_length'][$i],            $_REQUEST['field_attribute'][$i],            isset($_REQUEST['field_collation'][$i])                ? $_REQUEST['field_collation'][$i]                : '',            isset($_REQUEST['field_null'][$i])                ? $_REQUEST['field_null'][$i]                : 'NOT NULL',            $_REQUEST['field_default_type'][$i],            $_REQUEST['field_default_value'][$i],            isset($_REQUEST['field_extra'][$i])                ? $_REQUEST['field_extra'][$i]                : false,            isset($_REQUEST['field_comments'][$i])                ? $_REQUEST['field_comments'][$i]                : '',            $key_fields,            $i,            $_REQUEST['field_default_orig'][$i]        );    } // end for    // Builds the primary keys statements and updates the table    $key_query = '';    /**     * this is a little bit more complex     *     * @todo if someone selects A_I when altering a column we need to check:     *  - no other column with A_I     *  - the column has an index, if not create one     *    if (count($key_fields)) {        $fields = array();        foreach ($key_fields as $each_field) {            if (isset($_REQUEST['field_name'][$each_field]) && strlen($_REQUEST['field_name'][$each_field])) {                $fields[] = PMA_backquote($_REQUEST['field_name'][$each_field]);            }        } // end for        $key_query = ', ADD KEY (' . implode(', ', $fields) . ') ';    }     */    // To allow replication, we first select the db to use and then run queries    // on this db.    PMA_DBI_select_db($db) or PMA_mysqlDie(PMA_DBI_getError(), 'USE ' . PMA_backquote($db) . ';', '', $err_url);    $sql_query = 'ALTER TABLE ' . PMA_backquote($table) . ' ' . implode(', ', $changes) . $key_query;    $result    = PMA_DBI_try_query($sql_query);    if ($result !== false) {        $message = PMA_Message::success(__('Table %1$s has been altered successfully'));        $message->addParam($table);        $btnDrop = 'Fake';        /**         * If comments were sent, enable relation stuff         */        include_once './libraries/transformations.lib.php';        // updaet field names in relation        if (isset($_REQUEST['field_orig']) && is_array($_REQUEST['field_orig'])) {            foreach ($_REQUEST['field_orig'] as $fieldindex => $fieldcontent) {                if ($_REQUEST['field_name'][$fieldindex] != $fieldcontent) {                    PMA_REL_renameField($db, $table, $fieldcontent,                        $_REQUEST['field_name'][$fieldindex]);                }            }        }        // update mime types        if (isset($_REQUEST['field_mimetype'])         && is_array($_REQUEST['field_mimetype'])         && $cfg['BrowseMIME']) {            foreach ($_REQUEST['field_mimetype'] as $fieldindex => $mimetype) {                if (isset($_REQUEST['field_name'][$fieldindex])                 && strlen($_REQUEST['field_name'][$fieldindex])) {                    PMA_setMIME($db, $table, $_REQUEST['field_name'][$fieldindex],                        $mimetype,                        $_REQUEST['field_transformation'][$fieldindex],                        $_REQUEST['field_transformation_options'][$fieldindex]);                }            }        }        if ( $_REQUEST['ajax_request'] == true) {            $extra_data['sql_query'] = PMA_showMessage(null, $sql_query);            PMA_ajaxResponse($message, $message->isSuccess(), $extra_data);        }        $active_page = 'tbl_structure.php';        include './tbl_structure.php';    } else {        PMA_mysqlDie('', '', '', $err_url, false);        // An error happened while inserting/updating a table definition.        // to prevent total loss of that data, we embed the form once again.        // The variable $regenerate will be used to restore data in libraries/tbl_properties.inc.php        if (isset($_REQUEST['orig_field'])) {            $_REQUEST['field'] = $_REQUEST['orig_field'];        }        $regenerate = true;    }}/** * No modifications yet required -> displays the table fields * * $selected comes from multi_submits.inc.php */if ($abort == false) {    if ($_REQUEST['ajax_request'] != true) {        include_once './libraries/tbl_links.inc.php';    }    if (! isset($selected)) {        PMA_checkParameters(array('field'));        $selected[]   = $_REQUEST['field'];        $selected_cnt = 1;    } else { // from a multiple submit        $selected_cnt = count($selected);    }    /**     * @todo optimize in case of multiple fields to modify     */    for ($i = 0; $i < $selected_cnt; $i++) {        $fields_meta[] = PMA_DBI_get_columns($db, $table, $selected[$i], true);    }    $num_fields  = count($fields_meta);    $action      = 'tbl_alter.php';    // Get more complete field information.    // For now, this is done to obtain MySQL 4.1.2+ new TIMESTAMP options    // and to know when there is an empty DEFAULT value.    // Later, if the analyser returns more information, it    // could be executed to replace the info given by SHOW FULL COLUMNS FROM.    /**     * @todo put this code into a require()     * or maybe make it part of PMA_DBI_get_columns();     */    // We also need this to correctly learn if a TIMESTAMP is NOT NULL, since    // SHOW FULL COLUMNS says NULL and SHOW CREATE TABLE says NOT NULL (tested    // in MySQL 4.0.25).    $show_create_table = PMA_DBI_fetch_value('SHOW CREATE TABLE ' . PMA_backquote($db) . '.' . PMA_backquote($table), 0, 1);    $analyzed_sql = PMA_SQP_analyze(PMA_SQP_parse($show_create_table));    unset($show_create_table);    /**     * Form for changing properties.     */    include './libraries/tbl_properties.inc.php';}/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: */    /**     * @package     BLOBStreaming     */    /**     * Core library.     */    require_once './libraries/common.inc.php';    /*     * @var     string  contains media type of BLOB reference     */    $mediaType = isset($_REQUEST['media_type']) ? $_REQUEST['media_type'] : null;    /*     * @var     string  indicates whether media type is of custom type     */    $customType = isset($_REQUEST['custom_type']) ? $_REQUEST['custom_type'] : false;    /*     * @var     string  contains BLOB reference     */    $bsReference = isset($_REQUEST['bs_reference']) ? $_REQUEST['bs_reference'] : null;    // if media type and BS reference are specified    if (isset($mediaType) && isset($bsReference)) {        if (isset($customType) && $customType) {            $bs_file_path = 'bs_disp_as_mime_type.php' . PMA_generate_common_url(array('reference' => $bsReference, 'c_type' => $mediaType));        } else {            // Get the BLOB streaming URL            $bs_file_path = PMA_BS_getURL($bsReference);            if (empty($bs_file_path)) {                die(__('No blob streaming server configured!'));            }        }            ?><html>    <head>    </head>    <body>            <?php            // supported media types            switch ($mediaType)            {                // audio content                case 'audio/mpeg':                    ?><embed width=620 height=100 src="<?php echo htmlspecialchars($bs_file_path); ?>" autostart=true></embed><?php                    break;                // video content                case 'application/x-flash-video':                case 'video/mpeg':                    ?><embed width=620 height=460 src="<?php echo htmlspecialchars($bs_file_path); ?>" autostart=true></embed><?php                    break;                default:                    // do nothing            }            ?>    </body></html>            <?php    } // end if (isset($mediaType) && isset($bsReference))?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}// Display function/** * void PMA_TableHeader([bool $db_is_information_schema = false]) * display table header (<table><thead>...</thead><tbody>) * * @param boolean $db_is_information_schema * @param boolean $replication */function PMA_TableHeader($db_is_information_schema = false, $replication = false){    $cnt = 0; // Let's count the columns...    if ($db_is_information_schema) {        $action_colspan = 3;    } else {        $action_colspan = 6;    }    echo '<table class="data">' . "\n"        .'<thead>' . "\n"        .'<tr><th></th>' . "\n"        .'    <th>' . PMA_SortableTableHeader(__('Table'), 'table') . '</th>' . "\n";    if ($replication) {     echo '    <th>' . "\n"         .'        ' . __('Replication') . "\n"         .'    </th>';    }    echo '    <th colspan="' . $action_colspan . '">' . "\n"        .'        ' . __('Action') . "\n"        .'    </th>'        // larger values are more interesting so default sort order is DESC        .'    <th>' . PMA_SortableTableHeader(__('Rows'), 'records', 'DESC')        .PMA_showHint(PMA_sanitize(__('May be approximate. See [a@./Documentation.html#faq3_11@Documentation]FAQ 3.11[/a]'))) . "\n"        .'    </th>' . "\n";    if (!($GLOBALS['cfg']['PropertiesNumColumns'] > 1)) {        echo '    <th>' . PMA_SortableTableHeader(__('Type'), 'type') . '</th>' . "\n";        $cnt++;        echo '    <th>' . PMA_SortableTableHeader(__('Collation'), 'collation') . '</th>' . "\n";        $cnt++;    }    if ($GLOBALS['is_show_stats']) {        // larger values are more interesting so default sort order is DESC        echo '    <th>' . PMA_SortableTableHeader(__('Size'), 'size', 'DESC') . '</th>' . "\n"        // larger values are more interesting so default sort order is DESC           . '    <th>' . PMA_SortableTableHeader(__('Overhead'), 'overhead', 'DESC') . '</th>' . "\n";        $cnt += 2;    }    echo '</tr>' . "\n";    echo '</thead>' . "\n";    echo '<tbody>' . "\n";    $GLOBALS['colspan_for_structure'] = $cnt + $action_colspan + 3;} // end function PMA_TableHeader()/** * Creates a clickable column header for table information * * @param string  $title title to use for the link * @param string  $sort  corresponds to sortable data name mapped in libraries/db_info.inc.php * @param string  $initial_sort_order * @return string  link to be displayed in the table header */function PMA_SortableTableHeader($title, $sort, $initial_sort_order = 'ASC'){    // Set some defaults    $requested_sort = 'table';    $requested_sort_order = $future_sort_order = $initial_sort_order;        // If the user requested a sort    if (isset($_REQUEST['sort'])) {        $requested_sort = $_REQUEST['sort'];        if (isset($_REQUEST['sort_order'])) {            $requested_sort_order = $_REQUEST['sort_order'];        }    }    $order_img = '';    $order_link_params = array();    $order_link_params['title'] = __('Sort');    // If this column was requested to be sorted.    if ($requested_sort == $sort) {        if ($requested_sort_order == 'ASC') {            $future_sort_order = 'DESC';            // current sort order is ASC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow hide', 'title' => ''));            // but on mouse over, show the reverse order (DESC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (ASC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        } else {            $future_sort_order = 'ASC';            // current sort order is DESC            $order_img  = ' ' . PMA_getImage('s_asc.png', __('Ascending'), array('class' => 'sort_arrow hide', 'title' => ''));            $order_img .= ' ' . PMA_getImage('s_desc.png', __('Descending'), array('class' => 'sort_arrow', 'title' => ''));            // but on mouse over, show the reverse order (ASC)            $order_link_params['onmouseover'] = "$('.sort_arrow').toggle();";            // on mouse out, show current sort order (DESC)            $order_link_params['onmouseout'] = "$('.sort_arrow').toggle();";        }    }    $_url_params = array(        'db' => $_REQUEST['db'],    );    $url = 'db_structure.php'.PMA_generate_common_url($_url_params);    // We set the position back to 0 every time they sort.    $url .= "&amp;pos=0&amp;sort=$sort&amp;sort_order=$future_sort_order";    return PMA_linkOrButton($url, $title . $order_img, $order_link_params);} // end function PMA_SortableTableHeader()?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * */require_once './libraries/common.inc.php';$pma_table = new PMA_Table($GLOBALS['table'], $GLOBALS['db']);/** * Runs common work */require './libraries/tbl_common.php';$url_query .= '&amp;goto=view_operations.php&amp;back=view_operations.php';$url_params['goto'] = $url_params['back'] = 'view_operations.php';/** * Gets tables informations */require './libraries/tbl_info.inc.php';$reread_info = false;/** * Updates if required */if (isset($_REQUEST['submitoptions'])) {    $_message = '';    $warning_messages = array();    if (isset($_REQUEST['new_name'])) {        if ($pma_table->rename($_REQUEST['new_name'], null, $is_view = true)) {            $_message .= $pma_table->getLastMessage();            $result = true;            $GLOBALS['table'] = $pma_table->getName();            $reread_info = true;            $reload = true;        } else {            $_message .= $pma_table->getLastError();            $result = false;        }    }}/** * Displays top menu links */require_once './libraries/tbl_links.inc.php';if (isset($result)) {    // set to success by default, because result set could be empty    // (for example, a table rename)    $_type = 'success';    if (empty($_message)) {        $_message = $result ? __('Your SQL query has been executed successfully') : __('Error');        // $result should exist, regardless of $_message        $_type = $result ? 'success' : 'error';    }    if (! empty($warning_messages)) {        $_message = new PMA_Message;        $_message->addMessages($warning_messages);        $_message->isError(true);        unset($warning_messages);    }    PMA_showMessage($_message, $sql_query, $_type, $is_view = true);    unset($_message, $_type);}$url_params['goto'] = 'view_operations.php';$url_params['back'] = 'view_operations.php';/** * Displays the page */?><!-- Table operations --><div class="operations_half_width"><form method="post" action="view_operations.php"><?php echo PMA_generate_common_hidden_inputs($GLOBALS['db'], $GLOBALS['table']); ?><input type="hidden" name="reload" value="1" /><fieldset>    <legend><?php echo __('Operations'); ?></legend>    <table>    <!-- Change view name -->    <tr><td><?php echo __('Rename view to'); ?></td>        <td><input type="text" size="20" name="new_name" onfocus="this.select()"                value="<?php echo htmlspecialchars($GLOBALS['table']); ?>" />        </td>    </tr>    </table></fieldset><fieldset class="tblFooters">        <input type="submit" name="submitoptions" value="<?php echo __('Go'); ?>" /></fieldset></form></div><?php/** * Displays the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Code for displaying language selection * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Sorts available languages by their true english names * * @param array   the array to be sorted * @param mixed   a required parameter * @return  the sorted array * @access  private */function PMA_language_cmp(&$a, &$b){    return (strcmp($a[1], $b[1]));} // end of the 'PMA_language_cmp()' function/** * Displays for for language selection * * @access  public */function PMA_select_language($use_fieldset = false, $show_doc = true){    global $cfg, $lang;    ?><form method="post" action="index.php" target="_parent">    <?php    $_form_params = array(        'db' => $GLOBALS['db'],        'table' => $GLOBALS['table'],    );    echo PMA_generate_common_hidden_inputs($_form_params);    // For non-English, display "Language" with emphasis because it's    // not a proper word in the current language; we show it to help    // people recognize the dialog    $language_title = __('Language')        . (__('Language') != 'Language' ? ' - <em>Language</em>' : '');    if ($show_doc) {        $language_title .= PMA_showDocu('faq7_2');    }    if ($use_fieldset) {        echo '<fieldset><legend xml:lang="en" dir="ltr">' . $language_title . '</legend>';    } else {        echo '<bdo xml:lang="en" dir="ltr">' . $language_title . ':</bdo>';    }    ?>    <select name="lang" class="autosubmit" xml:lang="en" dir="ltr">    <?php    uasort($GLOBALS['available_languages'], 'PMA_language_cmp');    foreach ($GLOBALS['available_languages'] as $id => $tmplang) {        $lang_name = PMA_langName($tmplang);        //Is current one active?        if ($lang == $id) {            $selected = ' selected="selected"';        } else {            $selected = '';        }        echo '        ';        echo '<option value="' . $id . '"' . $selected . '>' . $lang_name            . '</option>' . "\n";    }    ?>    </select>    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    <noscript>    <?php    if ($use_fieldset) {        echo '<fieldset class="tblFooters">';    }    ?>        <input type="submit" value="Go" />    <?php    if ($use_fieldset) {        echo '</fieldset>';    }    ?>    </noscript></form>    <?php} // End of function PMA_select_language?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * MIME detection code. * * @package PhpMyAdmin * @todo Maybe we could try to use fileinfo module if loaded *//** * Tries to detect MIME type of content. * * @param string &$test * @return string */function PMA_detectMIME(&$test){    $len = strlen($test);    if ($len >= 2 && $test[0] == chr(0xff) && $test[1] == chr(0xd8)) {        return 'image/jpeg';    }    if ($len >= 3 && substr($test, 0, 3) == 'GIF') {        return 'image/gif';    }    if ($len >= 4 && substr($test, 0, 4) == "\x89PNG") {        return 'image/png';    }    return 'application/octet-stream';}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Simple wrapper just to enable error reporting and include config * * @package PhpMyAdmin */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';PMA_no_cache_header();header('Content-Type: text/html; charset=utf-8');require './libraries/vendor_config.php';error_reporting(E_ALL);/** * Read config file. */if (is_readable(CONFIG_FILE)) {    require CONFIG_FILE;}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions for kanji-encoding convert (available only with japanese * language) * * PHP4 configure requirements: *     --enable-mbstring --enable-mbstr-enc-trans --enable-mbregex * * 2002/2/22 - by Yukihiro Kawada <kawada@den.fujifilm.co.jp> * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets the php internal encoding codes and sets the available encoding * codes list * 2002/1/4 by Y.Kawada * * @global  string   the current encoding code * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_internal_enc_check(){    global $internal_enc, $enc_list;    $internal_enc = mb_internal_encoding();    if ($internal_enc == 'EUC-JP') {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    } else {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    }    return true;} // end of the 'PMA_internal_enc_check' function/** * Reverses SJIS & EUC-JP position in the encoding codes list * 2002/1/4 by Y.Kawada * * @global  string   the available encoding codes list * * @return  boolean  always true */function PMA_change_enc_order(){    global $enc_list;    $p            = explode(',', $enc_list);    if ($p[1] == 'EUC-JP') {        $enc_list = 'ASCII,SJIS,EUC-JP,JIS';    } else {        $enc_list = 'ASCII,EUC-JP,SJIS,JIS';    }    return true;} // end of the 'PMA_change_enc_order' function/** * Kanji string encoding convert * 2002/1/4 by Y.Kawada * * @param string   the string to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @global  string   the available encoding codes list * * @return  string   the converted string */function PMA_kanji_str_conv($str, $enc, $kana){    global $enc_list;    if ($enc == '' && $kana == '') {        return $str;    }    $nw       = mb_detect_encoding($str, $enc_list);    if ($kana == 'kana') {        $dist = mb_convert_kana($str, 'KV', $nw);        $str  = $dist;    }    if ($nw != $enc && $enc != '') {        $dist = mb_convert_encoding($str, $enc, $nw);    } else {        $dist = $str;    }    return $dist;} // end of the 'PMA_kanji_str_conv' function/** * Kanji file encoding convert * 2002/1/4 by Y.Kawada * * @param string   the name of the file to convert * @param string   the destination encoding code * @param string   set 'kana' convert to JIS-X208-kana * * @return  string   the name of the converted file */function PMA_kanji_file_conv($file, $enc, $kana){    if ($enc == '' && $kana == '') {        return $file;    }    $tmpfname = tempnam('', $enc);    $fpd      = fopen($tmpfname, 'wb');    $fps      = fopen($file, 'r');    PMA_change_enc_order();    while (!feof($fps)) {        $line = fgets($fps, 4096);        $dist = PMA_kanji_str_conv($line, $enc, $kana);        fputs($fpd, $dist);    } // end while    PMA_change_enc_order();    fclose($fps);    fclose($fpd);    unlink($file);    return $tmpfname;} // end of the 'PMA_kanji_file_conv' function/** * Defines radio form fields to switch between encoding modes * 2002/1/4 by Y.Kawada * * @param string   spaces character to prepend the output with * * @return  string   xhtml code for the radio controls */function PMA_set_enc_form($spaces){    return "\n"             /* l10n: This is currently used only in Japanese locales */           . $spaces . '<ul>' . "\n" . '<li>'           . $spaces . '<input type="radio" name="knjenc" value="" checked="checked" id="kj-none" /><label for="kj-none">' . _pgettext('None encoding conversion', 'None') . "</label>\n"           . $spaces . '<input type="radio" name="knjenc" value="EUC-JP" id="kj-euc" /><label for="kj-euc">EUC</label>' . "\n"           . $spaces . '<input type="radio" name="knjenc" value="SJIS" id="kj-sjis" /><label for="kj-sjis">SJIS</label>' . "\n"           . $spaces . '</li>' . "\n" . '<li>'           . $spaces . '<input type="checkbox" name="xkana" value="kana" id="kj-kana" />' . "\n"           /* l10n: This is currently used only in Japanese locales */           . $spaces . '<label for="kj-kana">' . __('Convert to Kana') . '</label><br />' . "\n"           . $spaces . '</li>' . "\n" . '</ul>'           ;} // end of the 'PMA_set_enc_form' functionPMA_internal_enc_check();?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Functions for cleanup of user input. * * @package PhpMyAdmin *//** * Removes all variables from request except whitelisted ones. * * @param string list of variables to allow * @return nothing * @access public */function PMA_remove_request_vars(&$whitelist){    // do not check only $_REQUEST because it could have been overwritten    // and use type casting because the variables could have become    // strings    $keys = array_keys(array_merge((array)$_REQUEST, (array)$_GET, (array)$_POST, (array)$_COOKIE));    foreach ($keys as $key) {        if (! in_array($key, $whitelist)) {            unset($_REQUEST[$key], $_GET[$key], $_POST[$key], $GLOBALS[$key]);        } else {            // allowed stuff could be compromised so escape it            // we require it to be a string            if (isset($_REQUEST[$key]) && ! is_string($_REQUEST[$key])) {                unset($_REQUEST[$key]);            }            if (isset($_POST[$key]) && ! is_string($_POST[$key])) {                unset($_POST[$key]);            }            if (isset($_COOKIE[$key]) && ! is_string($_COOKIE[$key])) {                unset($_COOKIE[$key]);            }            if (isset($_GET[$key]) && ! is_string($_GET[$key])) {                unset($_GET[$key]);            }        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * Does the common work */require_once './libraries/common.inc.php';require './libraries/server_common.inc.php';if (!PMA_DRIZZLE) {    include_once './libraries/replication.inc.php';} else {    $replication_types = array();    $replication_info = null;}require './libraries/build_html_for_db.lib.php';/** * avoids 'undefined index' errors */if (empty($_REQUEST['sort_by'])) {    $sort_by = 'SCHEMA_NAME';} else {    $sort_by_whitelist = array(        'SCHEMA_NAME',        'DEFAULT_COLLATION_NAME',        'SCHEMA_TABLES',        'SCHEMA_TABLE_ROWS',        'SCHEMA_DATA_LENGTH',        'SCHEMA_INDEX_LENGTH',        'SCHEMA_LENGTH',        'SCHEMA_DATA_FREE'    );    if (in_array($_REQUEST['sort_by'], $sort_by_whitelist)) {        $sort_by = $_REQUEST['sort_by'];    } else {        $sort_by = 'SCHEMA_NAME';    }}if (isset($_REQUEST['sort_order']) && strtolower($_REQUEST['sort_order']) == 'desc') {    $sort_order = 'desc';} else {    $sort_order = 'asc';}$dbstats    = empty($_REQUEST['dbstats']) ? 0 : 1;$pos        = empty($_REQUEST['pos']) ? 0 : (int) $_REQUEST['pos'];/** * Drops multiple databases */// workaround for IE behavior (it returns some coordinates based on where// the mouse was on the Drop image):if (isset($_REQUEST['drop_selected_dbs_x'])) {    $_REQUEST['drop_selected_dbs'] = true;}if ((isset($_REQUEST['drop_selected_dbs']) || isset($_REQUEST['query_type']))  && ($is_superuser || $cfg['AllowUserDropDatabase'])) {    if (! isset($_REQUEST['selected_dbs']) && ! isset($_REQUEST['query_type'])) {        $message = PMA_Message::error(__('No databases selected.'));    } else {        $action = 'server_databases.php';        $submit_mult = 'drop_db' ;        $err_url = 'server_databases.php?' . PMA_generate_common_url();        if (isset($_REQUEST['selected_dbs'])) {            $selected_db = $_REQUEST['selected_dbs'];        }        include './libraries/mult_submits.inc.php';        unset($action, $submit_mult, $err_url, $selected_db, $GLOBALS['db']);        if (empty($message)) {            $message = PMA_Message::success(__('%s databases have been dropped successfully.'));            if ($mult_btn == __('Yes')) {                $message->addParam(count($selected));            } else {                $message->addParam(0);            }        }    }}/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']      ? PMA_getImage('s_db.png')      : '')   . ($dbstats ? __('Databases statistics') : __('Databases')) . "\n"   .'</h2>' . "\n";/** * Create database. */if ($cfg['ShowCreateDb']) {    echo '<ul><li id="li_create_database">' . "\n";    include './libraries/display_create_database.lib.php';    echo '    </li>' . "\n";    echo '</ul>' . "\n";}/** * Gets the databases list */if ($server > 0) {    $databases = PMA_DBI_get_databases_full(null, $dbstats, null, $sort_by,        $sort_order, $pos, true);    $databases_count = count($GLOBALS['pma']->databases);} else {    $databases_count = 0;}/** * Displays the page */if ($databases_count > 0) {    echo '<div id="tableslistcontainer">';    reset($databases);    $first_database = current($databases);    // table col order    $column_order = PMA_getColumnOrder();    $_url_params = array(        'pos' => $pos,        'dbstats' => $dbstats,        'sort_by' => $sort_by,        'sort_order' => $sort_order,    );    PMA_listNavigator($databases_count, $pos, $_url_params, 'server_databases.php', 'frame_content', $GLOBALS['cfg']['MaxDbList']);    $_url_params['pos'] = $pos;    echo '<form action="./server_databases.php" method="post" name="dbStatsForm" id="dbStatsForm">' . "\n"       . PMA_generate_common_hidden_inputs($_url_params);    $_url_params['sort_by'] = 'SCHEMA_NAME';    $_url_params['sort_order'] = ($sort_by == 'SCHEMA_NAME' && $sort_order == 'asc') ? 'desc' : 'asc';    echo '<table id="tabledatabases" class="data">' . "\n"       . '<thead>' . "\n"       . '<tr>' . "\n"       . ($is_superuser || $cfg['AllowUserDropDatabase'] ? '        <th></th>' . "\n" : '')       . '    <th><a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"       . '            ' . __('Database') . "\n"       . ($sort_by == 'SCHEMA_NAME' ? '                ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')       . '        </a></th>' . "\n";    $table_columns = 3;    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                $table_columns += 2;                $colspan = ' colspan="2"';            } else {                $table_columns++;                $colspan = '';            }            $_url_params['sort_by'] = $stat_name;            $_url_params['sort_order'] = ($sort_by == $stat_name && $sort_order == 'desc') ? 'asc' : 'desc';            echo '    <th' . $colspan . '>'                .'<a href="./server_databases.php' . PMA_generate_common_url($_url_params) . '">' . "\n"                .'            ' . $stat['disp_name'] . "\n"                .($sort_by == $stat_name ? '            ' . PMA_getImage('s_' . $sort_order . '.png', ($sort_order == 'asc' ? __('Ascending') : __('Descending'))) . "\n" : '')                .'        </a></th>' . "\n";        }    }    foreach ($replication_types as $type) {      if ($type=="master")        $name = __('Master replication');      elseif ($type == "slave")        $name = __('Slave replication');      if (${"server_{$type}_status"})        echo '    <th>'. $name .'</th>' . "\n";    }    if ($is_superuser && !PMA_DRIZZLE) {        echo '    <th>' . ($cfg['PropertiesIconic'] ? '' : __('Action')) . "\n"           . '    </th>' . "\n";    }    echo '</tr>' . "\n"       . '</thead>' . "\n"       . '<tbody>' . "\n";    $odd_row = true;    foreach ($databases as $current) {        $tr_class = $odd_row ? 'odd' : 'even';        if (PMA_is_system_schema($current['SCHEMA_NAME'], true)) {            $tr_class .= ' noclick';        }        echo '<tr class="' . $tr_class . '">' . "\n";        $odd_row = ! $odd_row;        list($column_order, $generated_html) = PMA_buildHtmlForDb($current, $is_superuser, (isset($checkall) ? $checkall : ''), $url_query, $column_order, $replication_types, $replication_info);        echo $generated_html;        echo '</tr>' . "\n";    } // end foreach ($databases as $key => $current)    unset($current, $odd_row);    echo '<tr id="db_summary_row">' . "\n";    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        echo '    <th></th>' . "\n";    }    echo '    <th>' . __('Total') . ': <span id="databases_count">' . $databases_count . '</span></th>' . "\n";    foreach ($column_order as $stat_name => $stat) {        if (array_key_exists($stat_name, $first_database)) {            if ($stat['format'] === 'byte') {                list($value, $unit) = PMA_formatByteDown($stat['footer'], 3, 1);            } elseif ($stat['format'] === 'number') {                $value = PMA_formatNumber($stat['footer'], 0);            } else {                $value = htmlentities($stat['footer'], 0);            }            echo '    <th class="value">';            if (isset($stat['description_function'])) {                echo '<dfn title="' . $stat['description_function']($stat['footer']) . '">';            }            echo $value;            if (isset($stat['description_function'])) {                echo '</dfn>';            }            echo '</th>' . "\n";            if ($stat['format'] === 'byte') {                echo '    <th class="unit">' . $unit . '</th>' . "\n";            }        }    }    foreach ($replication_types as $type) {        if (${"server_{$type}_status"}) {            echo '    <th></th>' . "\n";        }    }    if ($is_superuser) {        echo '    <th></th>' . "\n";    }    echo '</tr>' . "\n";    echo '</tbody>' . "\n"        .'</table>' . "\n";    unset($column_order, $stat_name, $stat, $databases, $table_columns);    if ($is_superuser || $cfg['AllowUserDropDatabase']) {        $common_url_query = PMA_generate_common_url(array('sort_by' => $sort_by, 'sort_order' => $sort_order, 'dbstats' => $dbstats));        echo '<img class="selectallarrow" src="' . $pmaThemeImage . 'arrow_' . $text_dir . '.png" width="38" height="22" alt="' . __('With selected:') . '" />' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '&amp;checkall=1" onclick="if (markAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Check All') . '</a> / ' . "\n"           . '<a href="./server_databases.php' . $common_url_query . '" onclick="if (unMarkAllRows(\'tabledatabases\')) return false;">' . "\n"           . '    ' . __('Uncheck All') . '</a>' . "\n"           . '<i>' . __('With selected:') . '</i>' . "\n";        PMA_buttonOrImage('drop_selected_dbs', 'mult_submit', 'drop_selected_dbs', __('Drop'), 'b_deltbl.png');    }    if (empty($dbstats)) {        echo '<ul><li id="li_switch_dbstats"><strong>' . "\n";            echo '        <a href="./server_databases.php?' . $url_query . '&amp;dbstats=1"'                .' title="' . __('Enable Statistics') . '">' . "\n"                .'            ' . __('Enable Statistics');        echo '</a></strong><br />' . "\n";        PMA_Message::notice(__('Note: Enabling the database statistics here might cause heavy traffic between the web server and the MySQL server.'))->display();        echo '</li>' . "\n" . '</ul>' . "\n";    }    echo '</form>';    echo '</div>';} else {    echo __('No databases');}unset($databases_count);/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Specialized String Functions for phpMyAdmin * * Copyright 2002 Robin Johnson <robbat2@users.sourceforge.net> * http://www.orbis-terrarum.net/?l=people.robbat2 * * Defines a set of function callbacks that have a pure C version available if * the "ctype" extension is available, but otherwise have PHP versions to use * (that are slower). * * The SQL Parser code relies heavily on these functions. * * @package PhpMyAdmin-StringType-Native *//** * Checks if a character is an alphanumeric one * * @param string   character to check for * @return  boolean  whether the character is an alphanumeric one or not */function PMA_STR_isAlnum($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c) || PMA_STR_isDigit($c));} // end of the "PMA_STR_isAlnum()" function/** * Checks if a character is an alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an alphabetic one or not */function PMA_STR_isAlpha($c){    return (PMA_STR_isUpper($c) || PMA_STR_isLower($c));} // end of the "PMA_STR_isAlpha()" function/** * Checks if a character is a digit * * @param string   character to check for * @return  boolean  whether the character is a digit or not */function PMA_STR_isDigit($c){    $ord_zero = 48; //ord('0');    $ord_nine = 57; //ord('9');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isDigit()" function/** * Checks if a character is an upper alphabetic one * * @param string   character to check for * @return  boolean  whether the character is an upper alphabetic one or not */function PMA_STR_isUpper($c){    $ord_zero = 65; //ord('A');    $ord_nine = 90; //ord('Z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isUpper()" function/** * Checks if a character is a lower alphabetic one * * @param string   character to check for * @return  boolean  whether the character is a lower alphabetic one or not */function PMA_STR_isLower($c){    $ord_zero = 97;  //ord('a');    $ord_nine = 122; //ord('z');    $ord_c    = ord($c);    return PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine);} // end of the "PMA_STR_isLower()" function/** * Checks if a character is a space one * * @param string   character to check for * @return  boolean  whether the character is a space one or not */function PMA_STR_isSpace($c){    $ord_space = 32;    //ord(' ')    $ord_tab   = 9;     //ord('\t')    $ord_CR    = 13;    //ord('\n')    $ord_NOBR  = 160;   //ord('U+00A0);    $ord_c     = ord($c);    return ($ord_c == $ord_space         || $ord_c == $ord_NOBR         || PMA_STR_numberInRangeInclusive($ord_c, $ord_tab, $ord_CR));} // end of the "PMA_STR_isSpace()" function/** * Checks if a character is an hexadecimal digit * * @param string   character to check for * @return  boolean  whether the character is an hexadecimal digit or not */function PMA_STR_isHexDigit($c){    $ord_Aupper = 65;  //ord('A');    $ord_Fupper = 70;  //ord('F');    $ord_Alower = 97;  //ord('a');    $ord_Flower = 102; //ord('f');    $ord_zero   = 48;  //ord('0');    $ord_nine   = 57;  //ord('9');    $ord_c      = ord($c);    return (PMA_STR_numberInRangeInclusive($ord_c, $ord_zero, $ord_nine)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Aupper, $ord_Fupper)         || PMA_STR_numberInRangeInclusive($ord_c, $ord_Alower, $ord_Flower));} // end of the "PMA_STR_isHexDigit()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * Gets some core libraries */require_once './libraries/common.inc.php';require_once './libraries/bookmark.lib.php';PMA_checkParameters(array('db'));$is_show_stats = $cfg['ShowStats'];$db_is_information_schema = PMA_is_system_schema($db);if ($db_is_information_schema) {    $is_show_stats = false;}/** * Defines the urls to return to in case of error in a sql statement */$err_url_0 = 'main.php?' . PMA_generate_common_url();$err_url   = $cfg['DefaultTabDatabase'] . '?' . PMA_generate_common_url($db);/** * Ensures the database exists (else move to the "parent" script) and displays * headers */if (! isset($is_db) || ! $is_db) {    if (strlen($db)) {        $is_db = PMA_DBI_select_db($db);        // This "Command out of sync" 2014 error may happen, for example        // after calling a MySQL procedure; at this point we can't select        // the db but it's not necessarily wrong        if (PMA_DBI_getError() && $GLOBALS['errno'] == 2014) {            $is_db = true;            unset($GLOBALS['errno']);        }    }    // Not a valid db name -> back to the welcome page    if (! strlen($db) || ! $is_db) {        PMA_sendHeaderLocation($cfg['PmaAbsoluteUri'] . 'main.php?' . PMA_generate_common_url('', '', '&') . (isset($message) ? '&message=' . urlencode($message) : '') . '&reload=1');        exit;    }} // end if (ensures db exists)/** * Changes database charset if requested by the user */if (isset($submitcollation) && !empty($db_collation)) {    list($db_charset) = explode('_', $db_collation);    $sql_query        = 'ALTER DATABASE ' . PMA_backquote($db) . ' DEFAULT' . PMA_generateCharsetQueryPart($db_collation);    $result           = PMA_DBI_query($sql_query);    $message          = PMA_Message::success();    unset($db_charset, $db_collation);    /**     * If we are in an Ajax request, let us stop the execution here. Necessary for     * db charset change action on db_operations.php.  If this causes a bug on     * other pages, we might have to move this to a different location.     */    if ( $GLOBALS['is_ajax_request'] == true) {        PMA_ajaxResponse($message, $message->isSuccess());    };}require_once './libraries/header.inc.php';/** * Set parameters for links */$url_query = PMA_generate_common_url($db);?>
<?php/* AUTOGENERATED CONTENT - DO NOT EDIT *//* ALL CHANGES WILL BE UNDONE *//* RUN './scripts/generate-sprites' TO UPDATE THIS FILE */function PMA_sprites() {    return array(        'b_bookmark' => array(            'position' => '1',            'width'    => '16',            'height'   => '16'        ),        'b_browse' => array(            'position' => '2',            'width'    => '16',            'height'   => '16'        ),        'b_calendar' => array(            'position' => '3',            'width'    => '16',            'height'   => '16'        ),        'b_chart' => array(            'position' => '4',            'width'    => '16',            'height'   => '16'        ),        'b_close' => array(            'position' => '5',            'width'    => '16',            'height'   => '16'        ),        'b_comment' => array(            'position' => '6',            'width'    => '16',            'height'   => '16'        ),        'bd_browse' => array(            'position' => '7',            'width'    => '16',            'height'   => '16'        ),        'b_dbstatistics' => array(            'position' => '8',            'width'    => '16',            'height'   => '16'        ),        'bd_deltbl' => array(            'position' => '9',            'width'    => '16',            'height'   => '16'        ),        'bd_drop' => array(            'position' => '10',            'width'    => '16',            'height'   => '16'        ),        'bd_edit' => array(            'position' => '11',            'width'    => '16',            'height'   => '16'        ),        'b_deltbl' => array(            'position' => '12',            'width'    => '16',            'height'   => '16'        ),        'bd_empty' => array(            'position' => '13',            'width'    => '16',            'height'   => '16'        ),        'bd_export' => array(            'position' => '14',            'width'    => '16',            'height'   => '16'        ),        'bd_ftext' => array(            'position' => '15',            'width'    => '16',            'height'   => '16'        ),        'bd_index' => array(            'position' => '16',            'width'    => '16',            'height'   => '16'        ),        'bd_insrow' => array(            'position' => '17',            'width'    => '16',            'height'   => '16'        ),        'bd_nextpage' => array(            'position' => '18',            'width'    => '8',            'height'   => '13'        ),        'b_docs' => array(            'position' => '19',            'width'    => '16',            'height'   => '16'        ),        'bd_primary' => array(            'position' => '20',            'width'    => '16',            'height'   => '16'        ),        'b_drop' => array(            'position' => '21',            'width'    => '16',            'height'   => '16'        ),        'bd_sbrowse' => array(            'position' => '22',            'width'    => '10',            'height'   => '10'        ),        'bd_select' => array(            'position' => '23',            'width'    => '16',            'height'   => '16'        ),        'bd_spatial' => array(            'position' => '24',            'width'    => '16',            'height'   => '16'        ),        'bd_unique' => array(            'position' => '25',            'width'    => '16',            'height'   => '16'        ),        'b_edit' => array(            'position' => '26',            'width'    => '16',            'height'   => '16'        ),        'b_empty' => array(            'position' => '27',            'width'    => '16',            'height'   => '16'        ),        'b_engine' => array(            'position' => '28',            'width'    => '16',            'height'   => '16'        ),        'b_event_add' => array(            'position' => '29',            'width'    => '16',            'height'   => '16'        ),        'b_events' => array(            'position' => '30',            'width'    => '16',            'height'   => '16'        ),        'b_export' => array(            'position' => '31',            'width'    => '16',            'height'   => '16'        ),        'b_ftext' => array(            'position' => '32',            'width'    => '16',            'height'   => '16'        ),        'b_help' => array(            'position' => '33',            'width'    => '11',            'height'   => '11'        ),        'b_home' => array(            'position' => '34',            'width'    => '16',            'height'   => '16'        ),        'b_import' => array(            'position' => '35',            'width'    => '16',            'height'   => '16'        ),        'b_index' => array(            'position' => '36',            'width'    => '16',            'height'   => '16'        ),        'b_info' => array(            'position' => '37',            'width'    => '11',            'height'   => '11'        ),        'b_inline_edit' => array(            'position' => '38',            'width'    => '16',            'height'   => '16'        ),        'b_insrow' => array(            'position' => '39',            'width'    => '16',            'height'   => '16'        ),        'b_minus' => array(            'position' => '40',            'width'    => '9',            'height'   => '9'        ),        'b_more' => array(            'position' => '41',            'width'    => '16',            'height'   => '16'        ),        'b_newdb' => array(            'position' => '42',            'width'    => '16',            'height'   => '16'        ),        'b_newtbl' => array(            'position' => '43',            'width'    => '16',            'height'   => '16'        ),        'b_nextpage' => array(            'position' => '44',            'width'    => '16',            'height'   => '16'        ),        'b_plus' => array(            'position' => '45',            'width'    => '9',            'height'   => '9'        ),        'b_primary' => array(            'position' => '46',            'width'    => '16',            'height'   => '16'        ),        'b_print' => array(            'position' => '47',            'width'    => '16',            'height'   => '16'        ),        'b_props' => array(            'position' => '48',            'width'    => '16',            'height'   => '16'        ),        'b_relations' => array(            'position' => '49',            'width'    => '16',            'height'   => '16'        ),        'b_routine_add' => array(            'position' => '50',            'width'    => '16',            'height'   => '16'        ),        'b_routines' => array(            'position' => '51',            'width'    => '16',            'height'   => '16'        ),        'b_save' => array(            'position' => '52',            'width'    => '16',            'height'   => '16'        ),        'b_sbrowse' => array(            'position' => '53',            'width'    => '10',            'height'   => '10'        ),        'b_search' => array(            'position' => '54',            'width'    => '16',            'height'   => '16'        ),        'b_selboard' => array(            'position' => '55',            'width'    => '16',            'height'   => '16'        ),        'b_select' => array(            'position' => '56',            'width'    => '16',            'height'   => '16'        ),        'b_snewtbl' => array(            'position' => '57',            'width'    => '10',            'height'   => '10'        ),        'b_spatial' => array(            'position' => '58',            'width'    => '16',            'height'   => '16'        ),        'b_sqlhelp' => array(            'position' => '59',            'width'    => '16',            'height'   => '16'        ),        'b_sql' => array(            'position' => '60',            'width'    => '16',            'height'   => '16'        ),        'b_tblanalyse' => array(            'position' => '61',            'width'    => '16',            'height'   => '16'        ),        'b_tblexport' => array(            'position' => '62',            'width'    => '16',            'height'   => '16'        ),        'b_tblimport' => array(            'position' => '63',            'width'    => '16',            'height'   => '16'        ),        'b_tblops' => array(            'position' => '64',            'width'    => '16',            'height'   => '16'        ),        'b_tbloptimize' => array(            'position' => '65',            'width'    => '16',            'height'   => '16'        ),        'b_tipp' => array(            'position' => '66',            'width'    => '16',            'height'   => '16'        ),        'b_trigger_add' => array(            'position' => '67',            'width'    => '16',            'height'   => '16'        ),        'b_triggers' => array(            'position' => '68',            'width'    => '16',            'height'   => '16'        ),        'b_unique' => array(            'position' => '69',            'width'    => '16',            'height'   => '16'        ),        'b_usradd' => array(            'position' => '70',            'width'    => '16',            'height'   => '16'        ),        'b_usrcheck' => array(            'position' => '71',            'width'    => '16',            'height'   => '16'        ),        'b_usrdrop' => array(            'position' => '72',            'width'    => '16',            'height'   => '16'        ),        'b_usredit' => array(            'position' => '73',            'width'    => '16',            'height'   => '16'        ),        'b_usrlist' => array(            'position' => '74',            'width'    => '16',            'height'   => '16'        ),        'b_view' => array(            'position' => '75',            'width'    => '16',            'height'   => '16'        ),        'b_views' => array(            'position' => '76',            'width'    => '16',            'height'   => '16'        ),        'col_drop' => array(            'position' => '77',            'width'    => '16',            'height'   => '16'        ),        'docs_menu_bg' => array(            'position' => '78',            'width'    => '2',            'height'   => '2'        ),        'eye_grey' => array(            'position' => '79',            'width'    => '16',            'height'   => '16'        ),        'eye' => array(            'position' => '80',            'width'    => '16',            'height'   => '16'        ),        'item_ltr' => array(            'position' => '81',            'width'    => '5',            'height'   => '9'        ),        'item_rtl' => array(            'position' => '82',            'width'    => '5',            'height'   => '9'        ),        'more' => array(            'position' => '83',            'width'    => '13',            'height'   => '16'        ),        'new_data_hovered' => array(            'position' => '84',            'width'    => '16',            'height'   => '16'        ),        'new_data' => array(            'position' => '85',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected_hovered' => array(            'position' => '86',            'width'    => '16',            'height'   => '16'        ),        'new_data_selected' => array(            'position' => '87',            'width'    => '16',            'height'   => '16'        ),        'new_struct_hovered' => array(            'position' => '88',            'width'    => '16',            'height'   => '16'        ),        'new_struct' => array(            'position' => '89',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected_hovered' => array(            'position' => '90',            'width'    => '16',            'height'   => '16'        ),        'new_struct_selected' => array(            'position' => '91',            'width'    => '16',            'height'   => '16'        ),        's_asci' => array(            'position' => '92',            'width'    => '16',            'height'   => '16'        ),        's_asc' => array(            'position' => '93',            'width'    => '11',            'height'   => '9'        ),        's_cancel' => array(            'position' => '94',            'width'    => '16',            'height'   => '16'        ),        's_cog' => array(            'position' => '95',            'width'    => '16',            'height'   => '16'        ),        's_db' => array(            'position' => '96',            'width'    => '16',            'height'   => '16'        ),        's_desc' => array(            'position' => '97',            'width'    => '11',            'height'   => '9'        ),        's_error2' => array(            'position' => '98',            'width'    => '11',            'height'   => '11'        ),        's_error' => array(            'position' => '99',            'width'    => '16',            'height'   => '16'        ),        's_host' => array(            'position' => '100',            'width'    => '16',            'height'   => '16'        ),        's_lang' => array(            'position' => '101',            'width'    => '16',            'height'   => '16'        ),        's_loggoff' => array(            'position' => '102',            'width'    => '16',            'height'   => '16'        ),        's_notice' => array(            'position' => '103',            'width'    => '16',            'height'   => '16'        ),        's_passwd' => array(            'position' => '104',            'width'    => '16',            'height'   => '16'        ),        's_really' => array(            'position' => '105',            'width'    => '11',            'height'   => '11'        ),        's_reload' => array(            'position' => '106',            'width'    => '16',            'height'   => '16'        ),        's_replication' => array(            'position' => '107',            'width'    => '16',            'height'   => '16'        ),        's_rights' => array(            'position' => '108',            'width'    => '16',            'height'   => '16'        ),        's_sortable' => array(            'position' => '109',            'width'    => '11',            'height'   => '15'        ),        's_status' => array(            'position' => '110',            'width'    => '16',            'height'   => '16'        ),        's_success' => array(            'position' => '111',            'width'    => '16',            'height'   => '16'        ),        's_sync' => array(            'position' => '112',            'width'    => '16',            'height'   => '16'        ),        's_tbl' => array(            'position' => '113',            'width'    => '16',            'height'   => '16'        ),        's_theme' => array(            'position' => '114',            'width'    => '16',            'height'   => '16'        ),        's_vars' => array(            'position' => '115',            'width'    => '16',            'height'   => '16'        ),        's_views' => array(            'position' => '116',            'width'    => '10',            'height'   => '10'        ),        'window-new' => array(            'position' => '117',            'width'    => '16',            'height'   => '16'        ),    );}?>
<?php/** * Factory class that handles the creation of geometric objects. * * @package PhpMyAdmin-GIS */class PMA_GIS_Factory{    /**     * Returns the singleton instance of geometric class of the given type.     *     * @param string $type type of the geometric object     *     * @throws Exception     *     * @return the singleton instance of geometric class of the given type     */    public static function factory($type)    {        include_once './libraries/gis/pma_gis_geometry.php';        $type_lower = strtolower($type);        if (! file_exists('./libraries/gis/pma_gis_' . $type_lower . '.php')) {            return false;        }        if (include_once './libraries/gis/pma_gis_' . $type_lower . '.php') {            switch($type) {            case 'MULTIPOLYGON' :                return PMA_GIS_Multipolygon::singleton();            case 'POLYGON' :                return PMA_GIS_Polygon::singleton();            case 'MULTIPOINT' :                return PMA_GIS_Multipoint::singleton();            case 'POINT' :                return PMA_GIS_Point::singleton();            case 'MULTILINESTRING' :                return PMA_GIS_Multilinestring::singleton();            case 'LINESTRING' :                return PMA_GIS_Linestring::singleton();            case 'GEOMETRYCOLLECTION' :                return PMA_GIS_Geometrycollection::singleton();            default :                return false;            }        } else {            return false;        }    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Set of functions used to build MediaWiki dumps of tables * * @package PhpMyAdmin-Export * @subpackage MediaWiki */if (! defined('PHPMYADMIN')) {    exit;}if (isset($plugin_list)) {    $plugin_list['mediawiki'] = array(        'text' => __('MediaWiki Table'),        'extension' => 'txt',        'mime_type' => 'text/plain',        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    /**     * Outputs export footer     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter() {        return true;    }    /**     * Outputs export header     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader() {        return true;    }    /**     * Outputs database header     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBHeader($db) {        return true;    }    /**     * Outputs database footer     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBFooter($db) {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string  $db Database name     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportDBCreate($db) {        return true;    }    /**     * Outputs the content of a table in MediaWiki format     *     * @param string  $db         database name     * @param string  $table      table name     * @param string  $crlf       the end of line sequence     * @param string  $error_url  the url to go back in case of error     * @param string  $sql_query  SQL query for obtaining data     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query) {        $columns = PMA_DBI_get_columns($db, $table);        $columns = array_values($columns);        $row_cnt = count($columns);        $output = "{| cellpadding=\"10\" cellspacing=\"0\" border=\"1\" style=\"text-align:center;\"\n";        $output .= "|+'''" . $table . "'''\n";        $output .= "|- style=\"background:#ffdead;\"\n";        $output .= "! style=\"background:#ffffff\" | \n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Field'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Type\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Type'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Null\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Null'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Default\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Default'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|- style=\"background:#f9f9f9;\"\n";        $output .= "! style=\"background:#f2f2f2\" | Extra\n";        for ($i = 0; $i < $row_cnt; ++$i) {            $output .= " | " . $columns[$i]['Extra'];            if (($i + 1) != $row_cnt) {                $output .= "\n";            }        }        $output .= "\n";        $output .= "|}\n\n\n\n";        return PMA_exportOutputHandler($output);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */require_once './libraries/common.inc.php';require_once './libraries/display_import_ajax.lib.php';// AJAX requests can't be cached!PMA_no_cache_header();// $GLOBALS["message"] is used for asking for an import messageif (isset($GLOBALS["message"]) && $GLOBALS["message"]) {    header('Content-type: text/html');    // wait 0.3 sec before we check for $_SESSION variable, which is set inside import.php    usleep(300000);    // wait until message is available    while ($_SESSION['Import_message']['message'] == null) {        usleep(250000); // 0.25 sec    }    echo $_SESSION['Import_message']['message'];    echo '<fieldset class="tblFooters">' . "\n";    echo '    [ <a href="' . $_SESSION['Import_message']['go_back_url'] . '">' . __('Back') . '</a> ]' . "\n";    echo '</fieldset>'."\n";} else {    PMA_importAjaxStatus($GLOBALS["id"]);}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * This library is used with the server IP allow/deny host authentication * feature * * @todo Broken for IPv6 * * @package PhpMyAdmin *//** * Gets the "true" IP address of the current user * * @return  string   the ip of the user * * @access  private */function PMA_getIp(){    /* Get the address of user */    if (!empty($_SERVER['REMOTE_ADDR'])) {        $direct_ip = $_SERVER['REMOTE_ADDR'];    } else {        /* We do not know remote IP */        return false;    }    /* Do we trust this IP as a proxy? If yes we will use it's header. */    if (isset($GLOBALS['cfg']['TrustedProxies'][$direct_ip])) {        $trusted_header_value = PMA_getenv($GLOBALS['cfg']['TrustedProxies'][$direct_ip]);        $matches = array();        // the $ checks that the header contains only one IP address, ?: makes sure the () don't capture        $is_ip = preg_match('|^(?:[0-9]{1,3}\.){3,3}[0-9]{1,3}$|', $trusted_header_value, $matches);        if ($is_ip && (count($matches) == 1)) {            // True IP behind a proxy            return $matches[0];        }    }    /* Return true IP */    return $direct_ip;} // end of the 'PMA_getIp()' function/** * Based on IP Pattern Matcher * Originally by J.Adams <jna@retina.net> * Found on <http://www.php.net/manual/en/function.ip2long.php> * Modified for phpMyAdmin * * Matches: * xxx.xxx.xxx.xxx        (exact) * xxx.xxx.xxx.[yyy-zzz]  (range) * xxx.xxx.xxx.xxx/nn     (CIDR) * * Does not match: * xxx.xxx.xxx.xx[yyy-zzz]  (range, partial octets not supported) * * @param string   string of IP range to match * @param string   string of IP to test against range * * @return  boolean    always true * * @access  public */function PMA_ipMaskTest($testRange, $ipToTest){   $result = true;   if (preg_match('|([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+)|', $testRange, $regs)) {       // performs a mask match       $ipl    = ip2long($ipToTest);       $rangel = ip2long($regs[1] . '.' . $regs[2] . '.' . $regs[3] . '.' . $regs[4]);       $maskl  = 0;       for ($i = 0; $i < 31; $i++) {           if ($i < $regs[5] - 1) {               $maskl = $maskl + PMA_pow(2, (30 - $i));           } // end if       } // end for       if (($maskl & $rangel) == ($maskl & $ipl)) {           return true;       } else {           return false;       }   } else {       // range based       $maskocts = explode('.', $testRange);       $ipocts   = explode('.', $ipToTest);       // perform a range match       for ($i = 0; $i < 4; $i++) {            if (preg_match('|\[([0-9]+)\-([0-9]+)\]|', $maskocts[$i], $regs)) {                if (($ipocts[$i] > $regs[2])                    || ($ipocts[$i] < $regs[1])) {                    $result = false;                } // end if            } else {                if ($maskocts[$i] <> $ipocts[$i]) {                    $result = false;                } // end if            } // end if/else       } //end for   } //end if/else   return $result;} // end of the "PMA_IPMaskTest()" function/** * Runs through IP Allow/Deny rules the use of it below for more information * * @param string 'allow' | 'deny' type of rule to match * * @return  bool   Matched a rule ? * * @access  public * * @see     PMA_getIp() */function PMA_allowDeny($type){    global $cfg;    // Grabs true IP of the user and returns if it can't be found    $remote_ip = PMA_getIp();    if (empty($remote_ip)) {        return false;    }    // copy username    $username  = $cfg['Server']['user'];    // copy rule database    $rules     = $cfg['Server']['AllowDeny']['rules'];    // lookup table for some name shortcuts    $shortcuts = array(        'all'       => '0.0.0.0/0',        'localhost' => '127.0.0.1/8'    );    // Provide some useful shortcuts if server gives us address:    if (PMA_getenv('SERVER_ADDR')) {        $shortcuts['localnetA'] = PMA_getenv('SERVER_ADDR') . '/8';        $shortcuts['localnetB'] = PMA_getenv('SERVER_ADDR') . '/16';        $shortcuts['localnetC'] = PMA_getenv('SERVER_ADDR') . '/24';    }    foreach ($rules as $rule) {        // extract rule data        $rule_data = explode(' ', $rule);        // check for rule type        if ($rule_data[0] != $type) {            continue;        }        // check for username        if (($rule_data[1] != '%') //wildcarded first            && ($rule_data[1] != $username)) {            continue;        }        // check if the config file has the full string with an extra        // 'from' in it and if it does, just discard it        if ($rule_data[2] == 'from') {            $rule_data[2] = $rule_data[3];        }        // Handle shortcuts with above array        if (isset($shortcuts[$rule_data[2]])) {            $rule_data[2] = $shortcuts[$rule_data[2]];        }        // Add code for host lookups here        // Excluded for the moment        // Do the actual matching now        if (PMA_ipMaskTest($rule_data[2], $remote_ip)) {            return true;        }    } // end while    return false;} // end of the "PMA_AllowDeny()" function?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Logging functionality for webserver. * * This includes web server specific code to log some information. * * @package PhpMyAdmin *//** * Logs user information to webserver logs. */function PMA_log_user($user, $status = 'ok'){    if (function_exists('apache_note')) {        apache_note('userID', $user);        apache_note('userStatus', $status);    }}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin *//** * no need for variables importing * @ignore */if (! defined('PMA_NO_VARIABLES_IMPORT')) {    define('PMA_NO_VARIABLES_IMPORT', true);}/** * requirements */require_once './libraries/common.inc.php';/** * JS includes */$GLOBALS['js_include'][] = 'jquery/jquery-ui-1.8.16.custom.js';$GLOBALS['js_include'][] = 'jquery/jquery.cookie.js';$GLOBALS['js_include'][] = 'jquery/jquery.tablesorter.js';$GLOBALS['js_include'][] = 'server_plugins.js';/** * Does the common work */require './libraries/server_common.inc.php';/** * Displays the links */require './libraries/server_links.inc.php';/** * Displays the sub-page heading */echo '<h2>' . "\n"   . ($GLOBALS['cfg']['MainPageIconic']        ? '<img class="icon" src="' . $pmaThemeImage . 'b_engine.png"'            .' width="16" height="16" alt="" />' : '')   . "\n" . __('Plugins') . "\n"   . '</h2>' . "\n";/** * Prepare plugin list */$sql = "SELECT p.plugin_name, p.plugin_type, p.is_active, m.module_name, m.module_library,        m.module_version, m.module_author, m.module_description, m.module_license    FROM data_dictionary.plugins p        JOIN data_dictionary.modules m USING (module_name)    ORDER BY m.module_name, p.plugin_type, p.plugin_name";$res = PMA_DBI_query($sql);$plugins = array();$modules = array();while ($row = PMA_DBI_fetch_assoc($res)) {    $plugins[$row['plugin_type']][] = $row;    $modules[$row['module_name']]['info'] = $row;    $modules[$row['module_name']]['plugins'][$row['plugin_type']][] = $row;}PMA_DBI_free_result($res);// sort plugin list (modules are already sorted)ksort($plugins);/** * Displays the page */?><script type="text/javascript">pma_theme_image = '<?php echo $GLOBALS['pmaThemeImage']; ?>';</script><div id="pluginsTabs">    <ul>        <li><a href="#plugins_plugins"><?php echo __('Plugins'); ?></a></li>        <li><a href="#plugins_modules"><?php echo __('Modules'); ?></a></li>    </ul>    <div id="plugins_plugins">        <div id="sectionlinks">        <?php        foreach ($plugins as $plugin_type => $plugin_list) {            $key = 'plugins-' . preg_replace('/[^a-z]/', '', strtolower($plugin_type));            echo '<a href="#' . $key . '">' . htmlspecialchars($plugin_type) . '</a>' . "\n";        }        ?>        </div>        <br />        <?php        foreach ($plugins as $plugin_type => $plugin_list) {            $key = 'plugins-' . preg_replace('/[^a-z]/', '', strtolower($plugin_type));            sort($plugin_list);            ?>            <table class="data_full_width" id="<?php echo $key; ?>">            <caption class="tblHeaders">                <a class="top" href="#serverinfo"><?php                    echo __('Begin');                    echo $GLOBALS['cfg']['MainPageIconic']                        ? '<img src="' . $GLOBALS['pmaThemeImage'] .                            's_asc.png" width="11" height="9" align="middle" alt="" />'                        : ''; ?></a>                <?php echo htmlspecialchars($plugin_type); ?>            </caption>            <thead>                <tr>                    <th><?php echo __('Plugin'); ?></th>                    <th><?php echo __('Module'); ?></th>                    <th><?php echo __('Library'); ?></th>                    <th><?php echo __('Version'); ?></th>                    <th><?php echo __('Author'); ?></th>                    <th><?php echo __('License'); ?></th>                </tr>            </thead>            <tbody>            <?php            $odd_row = false;            foreach ($plugin_list as $plugin) {                $odd_row = !$odd_row;            ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <th><?php echo htmlspecialchars($plugin['plugin_name']); ?></th>                <td><?php echo htmlspecialchars($plugin['module_name']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_library']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_version']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_author']); ?></td>                <td><?php echo htmlspecialchars($plugin['module_license']); ?></td>            </tr>            <?php            }            ?>            </tbody>            </table>            <?php        }        ?>    </div>    <div id="plugins_modules">        <table class="data_full_width">        <thead>            <tr>                <th><?php echo __('Module'); ?></th>                <th><?php echo __('Description'); ?></th>                <th><?php echo __('Library'); ?></th>                <th><?php echo __('Version'); ?></th>                <th><?php echo __('Author'); ?></th>                <th><?php echo __('License'); ?></th>            </tr>        </thead>        <tbody>        <?php        $odd_row = false;        foreach ($modules as $module_name => $module) {            $odd_row = !$odd_row;        ?>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <th rowspan="2"><?php echo htmlspecialchars($module_name); ?></th>                <td><?php echo htmlspecialchars($module['info']['module_description']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_library']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_version']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_author']); ?></td>                <td><?php echo htmlspecialchars($module['info']['module_license']); ?></td>            </tr>            <tr class="noclick <?php echo $odd_row ? 'odd' : 'even'; ?>">                <td colspan="5">                    <table>                        <tbody>                        <?php                        foreach ($module['plugins'] as $plugin_type => $plugin_list) {                        ?>                            <tr class="noclick">                                <td><b class="plugin-type"><?php echo htmlspecialchars($plugin_type); ?></b></td>                                <td>                                <?php                                for ($i = 0; $i < count($plugin_list); $i++) {                                    echo ($i != 0 ? '<br />' : '') . htmlspecialchars($plugin_list[$i]['plugin_name']);                                    if (!$plugin_list[$i]['is_active']) {                                        echo ' <small class="attention">' . __('disabled') . '</small>';                                    }                                }                                ?>                                </td>                            </tr>                        <?php                        }                        ?>                        </tbody>                    </table>                </td>            </tr>        <?php        }        ?>        </tbody>        </table>    </div></div><?php/** * Sends the footer */require './libraries/footer.inc.php';?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Displays form for creating a table (if user has privileges for that) * * for MySQL >= 4.1.0, we should be able to detect if user has a CREATE * privilege by looking at SHOW GRANTS output; * for < 4.1.0, it could be more difficult because the logic tries to * detect the current host and it might be expressed in many ways; also * on a shared server, the user might be unable to define a controluser * that has the proper rights to the "mysql" db; * so we give up and assume that user has the right to create a table * * Note: in this case we could even skip the following "foreach" logic * * Addendum, 2006-01-19: ok, I give up. We got some reports about servers * where the hostname field in mysql.user is not the same as the one * in mysql.db for a user. In this case, SHOW GRANTS does not return * the db-specific privileges. And probably, those users are on a shared * server, so can't set up a control user with rights to the "mysql" db. * We cannot reliably detect the db-specific privileges, so no more * warnings about the lack of privileges for CREATE TABLE. Tested * on MySQL 5.0.18. * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */require_once './libraries/check_user_privileges.lib.php';$is_create_table_priv = true;?>    <form id="create_table_form_minimal" method="post" action="tbl_create.php"<?php echo ($GLOBALS['cfg']['AjaxEnable'] ? ' class="ajax"' : ''); ?>><fieldset>    <legend><?phpif ($GLOBALS['cfg']['PropertiesIconic']) {    echo PMA_getImage('b_newtbl.png');}echo __('Create table');?>    </legend>    <?php echo PMA_generate_common_hidden_inputs($db); ?>    <div class="formelement">        <?php echo __('Name'); ?>:        <input type="text" name="table" maxlength="64" size="30" />    </div>    <div class="formelement">        <?php echo __('Number of columns'); ?>:        <input type="text" name="num_fields" size="2" />    </div>    <div class="clearfloat"></div></fieldset><fieldset class="tblFooters">    <input type="submit" value="<?php echo __('Go'); ?>" /></fieldset></form>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * navigation css file from theme Original * * @package PhpMyAdmin-theme * @subpackage pmahomme */// unplanned execution pathif (!defined('PMA_MINIMUM_COMMON')) {    exit();}?>/******************************************************************************//* general tags */html {    font-size: <?php echo (null !== $GLOBALS['PMA_Config']->get('fontsize') ? $GLOBALS['PMA_Config']->get('fontsize') : $_COOKIE['pma_fontsize']); ?>;}input, select, textarea {    font-size: 1em;}body {<?php if (! empty($GLOBALS['cfg']['FontFamily'])) { ?>    font-family:        <?php echo $GLOBALS['cfg']['FontFamily']; ?>;<?php } ?>    background:         url(./themes/pmahomme/img/left_nav_bg.png) repeat-y right 0% #f3f3f3;    border-right:       1px solid #aaa;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    margin:             0;    padding:            0;}a img {    border: 0;}a:link,a:visited,a:active {    text-decoration:    none;    color:              #0000FF;}ul {    margin:0;}form {    margin:             0;    padding:            0;    display:            inline;}select#select_server,select#lightm_db {    width:              100%;}/* buttons in some browsers (eg. Konqueror) are block elements,   this breaks design */button {    display:            inline;}/******************************************************************************//* classes */.navi_dbName {    font-weight:    bold;    color:          <?php echo $GLOBALS['cfg']['NaviDatabaseNameColor']; ?>;}/******************************************************************************//* specific elements */div#pmalogo {    <?php //better echo $GLOBALS['cfg']['logoBGC']; ?>}div#recentTableList {    text-align: center;    margin: 20px 10px 0px 10px;}div#recentTableList select {    width: 100%;}div#pmalogo,div#leftframelinks,div#databaseList {    text-align:         center;    margin:             5px 10px 0px 10px;}ul#databaseList {    margin: 0.8em 0px;    padding-bottom:     0.5em;    padding-<?php echo $left; ?>:     0.3em;    font-style: italic;}ul#databaseList span {    padding: 5px;}ul#databaseList a {    color: #333;    background: url(./themes/pmahomme/img/database.png) no-repeat 0 5px transparent;    display: block;    text-indent: 0;    padding: 5px 5px 5px 25px;    font-style: normal;}div#navidbpageselector {    margin: 0.1em;    text-align: center;}div#navidbpageselector a,div#navidbpageselector select{    color: #333;    margin: 0.2em;}ul#databaseList ul {    margin: 0;    padding: 0;}ul#databaseList li {    list-style: none;    text-indent: 20px;    margin: 0;    padding: 0;}ul#databaseList a:hover {    background-color: #e4e4e4;}ul#databaseList li.selected a {    background: <?php echo $GLOBALS['cfg']['BrowseMarkerBackground']; ?>;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}div#leftframelinks .icon {    padding:            0;    margin:             0;}div#reloadlink a img,div#leftframelinks a img.icon {    margin:        0.3em;    margin-top:    0.7em;    border:        0;}div#leftframelinks a:hover img {}/* serverlist */#body_leftFrame #list_server {    list-style-image: url(<?php echo $GLOBALS['cfg']['ThemePath']; ?>/original/img/s_host.png);    list-style-position: inside;    list-style-type: none;    margin: 0;    padding: 0;}#body_leftFrame #list_server li {    margin: 0;    padding: 0;}div#left_tableList {margin:10px 10px 0 10px;}div#left_tableList ul {    list-style-type:    none;    list-style-position: outside;    margin:             0;    padding:            0;}div#left_tableList ul ul {    font-size:          100%;}div#left_tableList a {    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    none;}div#left_tableList a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    text-decoration:    underline;}div#left_tableList li {    margin:             0;    padding:            2px 0;    white-space:        nowrap;}#newtable {    margin-top: 15px !important;}#newtable a {    display: block;    padding: 1px;    <?php echo $_SESSION['PMA_Theme']->getCssGradient('ffffff', 'cccccc'); ?>    border: 1px solid #aaa;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    border-radius: 20px;}#newtable li:hover {    background: transparent !important;}#newtable a:hover {    <?php echo $_SESSION['PMA_Theme']->getCssGradient('cccccc', 'dddddd'); ?>}#newtable li a:hover {    text-decoration: none;}select{    -moz-border-radius:2px 2px 2px 2px;    -moz-box-shadow:0 1px 2px #DDDDDD;    border:1px solid #aaa;    color:#333333;    padding:3px;    background:url(./themes/pmahomme/img/input_bg.gif);}<?php if ($GLOBALS['cfg']['BrowseMarkerColor']) { ?>/* marked items */div#left_tableList > ul li.marked > a,div#left_tableList > ul li.marked {    background: #e4e4e4;    color: <?php echo $GLOBALS['cfg']['BrowseMarkerColor']; ?>;}<?php } ?><?php if ($GLOBALS['cfg']['LeftPointerEnable']) { ?>div#left_tableList > ul li:hover > a,div#left_tableList > ul li:hover {    background:         #e4e4e4;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}<?php } ?>div#left_tableList img {    padding:            0;    vertical-align:     middle;}div#left_tableList ul ul {    margin-<?php echo $left; ?>:        0;    padding-<?php echo $left; ?>:       0.1em;    border-<?php echo $left; ?>:        0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;    padding-bottom:     0.1em;    border-bottom:      0.1em solid <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}/* for the servers list in navi panel */#serverinfo .item {    white-space:        nowrap;    color:              <?php echo $GLOBALS['cfg']['NaviColor']; ?>;}#serverinfo a:hover {    background:         <?php echo $GLOBALS['cfg']['NaviPointerBackground']; ?>;    color:              <?php echo $GLOBALS['cfg']['NaviPointerColor']; ?>;}#reloadlink {    clear: both;    float: <?php echo $right; ?>;    display: block;    padding: 1em;}#NavFilter {    display: none;}#clear_fast_filter {    background: white;    color: black;    cursor: pointer;    padding: 0;    margin: 0;    position: relative;    right: 3ex;}#fast_filter {    width: 85%;    padding: 0.1em;}#fast_filter.gray {    color: gray;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * @package PhpMyAdmin-Engines *//** * * @package PhpMyAdmin-Engines */class PMA_StorageEngine_merge extends PMA_StorageEngine{}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * print css file from theme Original * * @package PhpMyAdmin-theme * @subpackage Original */?>/* For printview */body, table, th, td {    color:             #000000;    background-color:  #ffffff;}img {    border: 0;}table, th, td {    border-width:      0.1em;    border-color:      #000000;    border-style:      solid;}table {    border-collapse:   collapse;    border-spacing:    0;}th, td {    padding:           0.2em;}th {    font-weight:       bold;    background-color:  #e5e5e5;}.hide {    display: none;}
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * Produce a PDF report (export) from a query * * @package PhpMyAdmin-Export * @subpackage PDF */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($plugin_list)) {    $plugin_list['pdf'] = array(        'text' => __('PDF'),        'extension' => 'pdf',        'mime_type' => 'application/pdf',        'force_file' => true,        'options' => array(            array('type' => 'begin_group', 'name' => 'general_opts'),            array('type' => 'message_only', 'name' => 'explanation', 'text' => __('(Generates a report containing the data of a single table)')),            array('type' => 'text', 'name' => 'report_title', 'text' => __('Report title:')),            array('type' => 'hidden', 'name' => 'structure_or_data'),            array('type' => 'end_group')            ),        'options_text' => __('Options'),        );} else {    include_once './libraries/PDF.class.php';    /**     * Adapted from a LGPL script by Philip Clarke     * @package PhpMyAdmin-Export     * @subpackage PDF     */    class PMA_Export_PDF extends PMA_PDF    {        var $tablewidths;        var $headerset;        function checkPageBreak($h = 0, $y = '', $addpage = true)        {            if ($this->empty_string($y)) {                $y = $this->y;            }            $current_page = $this->page;            if ((($y + $h) > $this->PageBreakTrigger) AND (! $this->InFooter) AND ($this->AcceptPageBreak())) {                if ($addpage) {                    //Automatic page break                    $x = $this->x;                    $this->AddPage($this->CurOrientation);                    $this->y = $this->dataY;                    $oldpage = $this->page - 1;                    if ($this->rtl) {                        if ($this->pagedim[$this->page]['orm'] != $this->pagedim[$oldpage]['orm']) {                            $this->x = $x - ($this->pagedim[$this->page]['orm'] - $this->pagedim[$oldpage]['orm']);                        } else {                            $this->x = $x;                        }                    } else {                        if ($this->pagedim[$this->page]['olm'] != $this->pagedim[$oldpage]['olm']) {                            $this->x = $x + ($this->pagedim[$this->page]['olm'] - $this->pagedim[$oldpage]['olm']);                        } else {                            $this->x = $x;                        }                    }                }                return true;            }            if ($current_page != $this->page) {                // account for columns mode                return true;            }            return false;        }        function Header()        {            global $maxY;            // Check if header for this page already exists            if (! isset($this->headerset[$this->page])) {                $fullwidth = 0;                foreach ($this->tablewidths as $width) {                    $fullwidth += $width;                }                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 5);                $this->cellFontSize = $this->FontSizePt ;                $this->SetFont(PMA_PDF_FONT, '', ($this->titleFontSize ? $this->titleFontSize : $this->FontSizePt));                $this->Cell(0, $this->FontSizePt, $this->titleText, 0, 1, 'C');                $this->SetFont(PMA_PDF_FONT, '', $this->cellFontSize);                $this->SetY(($this->tMargin) - ($this->FontSizePt / $this->k) * 2.5);                $this->Cell(                    0, $this->FontSizePt,                    __('Database') . ': ' . $this->currentDb . ',  ' . __('Table') . ': ' . $this->currentTable,                    0, 1, 'L'                );                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, ($this->tMargin));                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt);                    $l += $this->tablewidths[$col] ;                    $maxY = ($maxY < $this->getY()) ? $this->getY() : $maxY ;                }                $this->SetXY($this->lMargin, $this->tMargin);                $this->setFillColor(200, 200, 200);                $l = ($this->lMargin);                foreach ($this->colTitles as $col => $txt) {                    $this->SetXY($l, $this->tMargin);                    $this->cell($this->tablewidths[$col], $maxY-($this->tMargin), '', 1, 0, 'L', 1);                    $this->SetXY($l, $this->tMargin);                    $this->MultiCell($this->tablewidths[$col], $this->FontSizePt, $txt, 0, 'C');                    $l += $this->tablewidths[$col];                }                $this->setFillColor(255, 255, 255);                // set headerset                $this->headerset[$this->page] = 1;            }            $this->dataY = $maxY;        }        function morepagestable($lineheight=8)        {            // some things to set and 'remember'            $l = $this->lMargin;            $startheight = $h = $this->dataY;            $startpage = $currpage = $this->page;            // calculate the whole width            $fullwidth = 0;            foreach ($this->tablewidths as $width) {                $fullwidth += $width;            }            // Now let's start to write the table            $row = 0;            $tmpheight = array();            $maxpage = $this->page;            while ($data = PMA_DBI_fetch_row($this->results)) {                $this->page = $currpage;                // write the horizontal borders                $this->Line($l, $h, $fullwidth+$l, $h);                // write the content and remember the height of the highest col                foreach ($data as $col => $txt) {                    $this->page = $currpage;                    $this->SetXY($l, $h);                    if ($this->tablewidths[$col] > 0) {                        $this->MultiCell($this->tablewidths[$col], $lineheight, $txt, 0, $this->colAlign[$col]);                        $l += $this->tablewidths[$col];                    }                    if (!isset($tmpheight[$row.'-'.$this->page])) {                        $tmpheight[$row.'-'.$this->page] = 0;                    }                    if ($tmpheight[$row.'-'.$this->page] < $this->GetY()) {                        $tmpheight[$row.'-'.$this->page] = $this->GetY();                    }                    if ($this->page > $maxpage) {                        $maxpage = $this->page;                    }                    unset($data[$col]);                }                // get the height we were in the last used page                $h = $tmpheight[$row.'-'.$maxpage];                // set the "pointer" to the left margin                $l = $this->lMargin;                // set the $currpage to the last page                $currpage = $maxpage;                unset($data[$row]);                $row++;            }            // draw the borders            // we start adding a horizontal line on the last page            $this->page = $maxpage;            $this->Line($l, $h, $fullwidth+$l, $h);            // now we start at the top of the document and walk down            for ($i = $startpage; $i <= $maxpage; $i++) {                $this->page = $i;                $l = $this->lMargin;                $t = ($i == $startpage) ? $startheight : $this->tMargin;                $lh = ($i == $maxpage) ? $h : $this->h-$this->bMargin;                $this->Line($l, $t, $l, $lh);                foreach ($this->tablewidths as $width) {                    $l += $width;                    $this->Line($l, $t, $l, $lh);                }            }            // set it to the last page, if not it'll cause some problems            $this->page = $maxpage;        }        function setAttributes($attr = array())        {            foreach ($attr as $key => $val) {                $this->$key = $val ;            }        }        function setTopMargin($topMargin)        {            $this->tMargin = $topMargin;        }        function mysql_report($query)        {            unset($this->tablewidths);            unset($this->colTitles);            unset($this->titleWidth);            unset($this->colFits);            unset($this->display_column);            unset($this->colAlign);            /**             * Pass 1 for column widths             */            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->numFields  = PMA_DBI_num_fields($this->results);            $this->fields = PMA_DBI_get_fields_meta($this->results);            // sColWidth = starting col width (an average size width)            $availableWidth = $this->w - $this->lMargin - $this->rMargin;            $this->sColWidth = $availableWidth / $this->numFields;            $totalTitleWidth = 0;            // loop through results header and set initial col widths/ titles/ alignment            // if a col title is less than the starting col width, reduce that column size            $colFits = array();            for ($i = 0; $i < $this->numFields; $i++) {                $stringWidth = $this->getstringwidth($this->fields[$i]->name) + 6 ;                // save the real title's width                $titleWidth[$i] = $stringWidth;                $totalTitleWidth += $stringWidth;                // set any column titles less than the start width to the column title width                if ($stringWidth < $this->sColWidth) {                    $colFits[$i] = $stringWidth ;                }                $this->colTitles[$i] = $this->fields[$i]->name;                $this->display_column[$i] = true;                switch ($this->fields[$i]->type) {                case 'int':                    $this->colAlign[$i] = 'R';                    break;                case 'blob':                case 'tinyblob':                case 'mediumblob':                case 'longblob':                    /**                     * @todo do not deactivate completely the display                     * but show the field's name and [BLOB]                     */                    if (stristr($this->fields[$i]->flags, 'BINARY')) {                        $this->display_column[$i] = false;                        unset($this->colTitles[$i]);                    }                    $this->colAlign[$i] = 'L';                    break;                default:                    $this->colAlign[$i] = 'L';                }            }            // title width verification            if ($totalTitleWidth > $availableWidth) {                $adjustingMode = true;            } else {                $adjustingMode = false;                // we have enough space for all the titles at their                // original width so use the true title's width                foreach ($titleWidth as $key => $val) {                    $colFits[$key] = $val;                }            }            // loop through the data; any column whose contents            // is greater than the column size is resized            /**              * @todo force here a LIMIT to avoid reading all rows              */            while ($row = PMA_DBI_fetch_row($this->results)) {                foreach ($colFits as $key => $val) {                    $stringWidth = $this->getstringwidth($row[$key]) + 6 ;                    if ($adjustingMode && ($stringWidth > $this->sColWidth)) {                        // any column whose data's width is bigger than                        // the start width is now discarded                        unset($colFits[$key]);                    } else {                        // if data's width is bigger than the current column width,                        // enlarge the column (but avoid enlarging it if the                        // data's width is very big)                        if ($stringWidth > $val && $stringWidth < ($this->sColWidth * 3)) {                            $colFits[$key] = $stringWidth ;                        }                    }                }            }            $totAlreadyFitted = 0;            foreach ($colFits as $key => $val) {                // set fitted columns to smallest size                $this->tablewidths[$key] = $val;                // to work out how much (if any) space has been freed up                $totAlreadyFitted += $val;            }            if ($adjustingMode) {                $surplus = (sizeof($colFits) * $this->sColWidth) - $totAlreadyFitted;                $surplusToAdd = $surplus / ($this->numFields - sizeof($colFits));            } else {                $surplusToAdd = 0;            }            for ($i=0; $i < $this->numFields; $i++) {                if (!in_array($i, array_keys($colFits))) {                    $this->tablewidths[$i] = $this->sColWidth + $surplusToAdd;                }                if ($this->display_column[$i] == false) {                    $this->tablewidths[$i] = 0;                }            }            ksort($this->tablewidths);            PMA_DBI_free_result($this->results);            // Pass 2            $this->results = PMA_DBI_query($query, null, PMA_DBI_QUERY_UNBUFFERED);            $this->setY($this->tMargin);            $this->AddPage();            $this->SetFont(PMA_PDF_FONT, '', 9);            $this->morepagestable($this->FontSizePt);            PMA_DBI_free_result($this->results);        } // end of mysql_report function    } // end of PMA_Export_PDF class    $pdf = new PMA_Export_PDF('L', 'pt', 'A3');    /**     * Finalize the pdf.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportFooter()    {        global $pdf;        // instead of $pdf->Output():        if (!PMA_exportOutputHandler($pdf->getPDFData())) {            return false;        }        return true;    }    /**     * Initialize the pdf to export data.     *     * @return  bool        Whether it succeeded     *     * @access  public     */    function PMA_exportHeader()    {        global $pdf_report_title;        global $pdf;        $pdf->Open();        $attr = array('titleFontSize' => 18, 'titleText' => $pdf_report_title);        $pdf->setAttributes($attr);        $pdf->setTopMargin(30);        return true;    }    /**     * Outputs database header     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBHeader($db)    {        return true;    }    /**     * Outputs database footer     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBFooter($db)    {        return true;    }    /**     * Outputs CREATE DATABASE statement     *     * @param string $db Database name     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportDBCreate($db)    {        return true;    }    /**     * Outputs the content of a table in PDF format     *     * @param string $db        database name     * @param string $table     table name     * @param string $crlf      the end of line sequence     * @param string $error_url the url to go back in case of error     * @param string $sql_query SQL query for obtaining data     *     * @return bool Whether it succeeded     *     * @access public     */    function PMA_exportData($db, $table, $crlf, $error_url, $sql_query)    {        global $pdf;        $attr=array('currentDb' => $db, 'currentTable' => $table);        $pdf->setAttributes($attr);        $pdf->mysql_report($sql_query);        return true;    } // end of the 'PMA_exportData()' function}?>
<?php/* vim: set expandtab sw=4 ts=4 sts=4: *//** * * @package PhpMyAdmin */if (! defined('PHPMYADMIN')) {    exit;}/** * */if (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {    die(__("GLOBALS overwrite attempt"));}/** * Sends http headers */$GLOBALS['now'] = gmdate('D, d M Y H:i:s') . ' GMT';/* Prevent against ClickJacking by allowing frames only from same origin */if (!$GLOBALS['cfg']['AllowThirdPartyFraming']) {    header('X-Frame-Options: SAMEORIGIN');    header('X-Content-Security-Policy: allow \'self\'; options inline-script eval-script; frame-ancestors \'self\'; img-src \'self\' data:; script-src \'self\' www.phpmyadmin.net');}PMA_no_cache_header();if (!defined('IS_TRANSFORMATION_WRAPPER')) {    // Define the charset to be used    header('Content-Type: text/html; charset=utf-8');}?>
